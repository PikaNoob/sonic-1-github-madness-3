00000000                            ; /=========================================================================\
00000000                            ; ยบ	This file is generated by The Interactive Disassembler (IDA)	    ยบ
00000000                            ; ยบ	Copyright (c) 2003 by DataRescue sa/nv,	<ida@datarescue.com>	    ยบ
00000000                            ; \=========================================================================/
00000000                            ;
00000000                            ; Disassembly created by Hivebrain
00000000                            ; thanks to drx and Stealth
00000000                            
00000000                            ; Processor:	    68000
00000000                            ; Target Assembler: 680x0 Assembler in MRI compatible mode
00000000                            ; This file should be compiled with "as	-M"
00000000                            
00000000                            ; ===========================================================================
00000000                            align macro
00000000                            	cnop 0,\1
00000000                            	endm
00000000                            		include	"sound/smps2asm_inc.asm"
00000000                            ; =============================================================================================
00000000                            ; Created by Flamewing, based on S1SMPS2ASM version 1.1 by Marc Gordon (AKA Cinossu)
00000000                            ; =============================================================================================
00000000 =00000005                  SonicDriverVer:	equ	5
00000000                            align0	macro	val
00000000                            	cnop	0,\val
00000000                                endm
00000000                            	
00000000                            smpsWeirdD1LRR macro
00000000                            		dc.b	$F9
00000000                            	endm
00000000                            nMaxPSG		EQU nA5
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Standard Octave Pitch Equates
00000000 =FFFFFF88                  smpsPitch10lo:	EQU -120	; $88
00000000 =FFFFFF94                  smpsPitch09lo:	EQU -108	; $94
00000000 =FFFFFFA0                  smpsPitch08lo:	EQU  -96	; $A0
00000000 =FFFFFFAC                  smpsPitch07lo:	EQU  -84	; $AC
00000000 =FFFFFFB8                  smpsPitch06lo:	EQU  -72	; $B8
00000000 =FFFFFFC4                  smpsPitch05lo:	EQU  -60	; $C4
00000000 =FFFFFFD0                  smpsPitch04lo:	EQU  -48	; $D0
00000000 =FFFFFFDC                  smpsPitch03lo:	EQU  -36	; $DC
00000000 =FFFFFFE8                  smpsPitch02lo:	EQU  -24	; $E8
00000000 =FFFFFFF4                  smpsPitch01lo:	EQU  -12	; $F4
00000000 =00000000                  smpsPitch00:	EQU    0	; $00
00000000 =0000000C                  smpsPitch01hi:	EQU  +12	; $0C
00000000 =00000018                  smpsPitch02hi:	EQU  +24	; $18
00000000 =00000024                  smpsPitch03hi:	EQU  +36	; $24
00000000 =00000030                  smpsPitch04hi:	EQU  +48	; $30
00000000 =0000003C                  smpsPitch05hi:	EQU  +60	; $3C
00000000 =00000048                  smpsPitch06hi:	EQU  +72	; $48
00000000 =00000054                  smpsPitch07hi:	EQU  +84	; $54
00000000 =00000060                  smpsPitch08hi:	EQU  +96	; $60
00000000 =0000006C                  smpsPitch09hi:	EQU +108	; $6C
00000000 =00000078                  smpsPitch10hi:	EQU +120	; $78
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Note Equates
00000000 =00000080                  nRst:	EQU $80		; $80
00000000 =00000081                  nC0:	EQU $81		; $81
00000000 =00000082                  nCs0:	EQU nC0+1	; $82
00000000 =00000083                  nD0:	EQU nCs0+1	; $83
00000000 =00000084                  nEb0:	EQU nD0+1	; $84
00000000 =00000085                  nE0:	EQU nEb0+1	; $85
00000000 =00000086                  nF0:	EQU nE0+1	; $86
00000000 =00000087                  nFs0:	EQU nF0+1	; $87
00000000 =00000088                  nG0:	EQU nFs0+1	; $88
00000000 =00000089                  nAb0:	EQU nG0+1	; $89
00000000 =0000008A                  nA0:	EQU nAb0+1	; $8A
00000000 =0000008B                  nBb0:	EQU nA0+1	; $8B
00000000 =0000008C                  nB0:	EQU nBb0+1	; $8C
00000000 =0000008D                  nC1:	EQU nB0+1	; $8D
00000000 =0000008E                  nCs1:	EQU nC1+1	; $8E
00000000 =0000008F                  nD1:	EQU nCs1+1	; $8F
00000000 =00000090                  nEb1:	EQU nD1+1	; $90
00000000 =00000091                  nE1:	EQU nEb1+1	; $91
00000000 =00000092                  nF1:	EQU nE1+1	; $92
00000000 =00000093                  nFs1:	EQU nF1+1	; $93
00000000 =00000094                  nG1:	EQU nFs1+1	; $94
00000000 =00000095                  nAb1:	EQU nG1+1	; $95
00000000 =00000096                  nA1:	EQU nAb1+1	; $96
00000000 =00000097                  nBb1:	EQU nA1+1	; $97
00000000 =00000098                  nB1:	EQU nBb1+1	; $98
00000000 =00000099                  nC2:	EQU nB1+1	; $99
00000000 =0000009A                  nCs2:	EQU nC2+1	; $9A
00000000 =0000009B                  nD2:	EQU nCs2+1	; $9B
00000000 =0000009C                  nEb2:	EQU nD2+1	; $9C
00000000 =0000009D                  nE2:	EQU nEb2+1	; $9D
00000000 =0000009E                  nF2:	EQU nE2+1	; $9E
00000000 =0000009F                  nFs2:	EQU nF2+1	; $9F
00000000 =000000A0                  nG2:	EQU nFs2+1	; $A0
00000000 =000000A1                  nAb2:	EQU nG2+1	; $A1
00000000 =000000A2                  nA2:	EQU nAb2+1	; $A2
00000000 =000000A3                  nBb2:	EQU nA2+1	; $A3
00000000 =000000A4                  nB2:	EQU nBb2+1	; $A4
00000000 =000000A5                  nC3:	EQU nB2+1	; $A5
00000000 =000000A6                  nCs3:	EQU nC3+1	; $A6
00000000 =000000A7                  nD3:	EQU nCs3+1	; $A7
00000000 =000000A8                  nEb3:	EQU nD3+1	; $A8
00000000 =000000A9                  nE3:	EQU nEb3+1	; $A9
00000000 =000000AA                  nF3:	EQU nE3+1	; $AA
00000000 =000000AB                  nFs3:	EQU nF3+1	; $AB
00000000 =000000AC                  nG3:	EQU nFs3+1	; $AC
00000000 =000000AD                  nAb3:	EQU nG3+1	; $AD
00000000 =000000AE                  nA3:	EQU nAb3+1	; $AE
00000000 =000000AF                  nBb3:	EQU nA3+1	; $AF
00000000 =000000B0                  nB3:	EQU nBb3+1	; $B0
00000000 =000000B1                  nC4:	EQU nB3+1	; $B1
00000000 =000000B2                  nCs4:	EQU nC4+1	; $B2
00000000 =000000B3                  nD4:	EQU nCs4+1	; $B3
00000000 =000000B4                  nEb4:	EQU nD4+1	; $B4
00000000 =000000B5                  nE4:	EQU nEb4+1	; $B5
00000000 =000000B6                  nF4:	EQU nE4+1	; $B6
00000000 =000000B7                  nFs4:	EQU nF4+1	; $B7
00000000 =000000B8                  nG4:	EQU nFs4+1	; $B8
00000000 =000000B9                  nAb4:	EQU nG4+1	; $B9
00000000 =000000BA                  nA4:	EQU nAb4+1	; $BA
00000000 =000000BB                  nBb4:	EQU nA4+1	; $BB
00000000 =000000BC                  nB4:	EQU nBb4+1	; $BC
00000000 =000000BD                  nC5:	EQU nB4+1	; $BD
00000000 =000000BE                  nCs5:	EQU nC5+1	; $BE
00000000 =000000BF                  nD5:	EQU nCs5+1	; $BF
00000000 =000000C0                  nEb5:	EQU nD5+1	; $C0
00000000 =000000C1                  nE5:	EQU nEb5+1	; $C1
00000000 =000000C2                  nF5:	EQU nE5+1	; $C2
00000000 =000000C3                  nFs5:	EQU nF5+1	; $C3
00000000 =000000C4                  nG5:	EQU nFs5+1	; $C4
00000000 =000000C5                  nAb5:	EQU nG5+1	; $C5
00000000 =000000C6                  nA5:	EQU nAb5+1	; $C6
00000000 =000000C7                  nBb5:	EQU nA5+1	; $C7
00000000 =000000C8                  nB5:	EQU nBb5+1	; $C8
00000000 =000000C9                  nC6:	EQU nB5+1	; $C9
00000000 =000000CA                  nCs6:	EQU nC6+1	; $CA
00000000 =000000CB                  nD6:	EQU nCs6+1	; $CB
00000000 =000000CC                  nEb6:	EQU nD6+1	; $CC
00000000 =000000CD                  nE6:	EQU nEb6+1	; $CD
00000000 =000000CE                  nF6:	EQU nE6+1	; $CE
00000000 =000000CF                  nFs6:	EQU nF6+1	; $CF
00000000 =000000D0                  nG6:	EQU nFs6+1	; $D0
00000000 =000000D1                  nAb6:	EQU nG6+1	; $D1
00000000 =000000D2                  nA6:	EQU nAb6+1	; $D2
00000000 =000000D3                  nBb6:	EQU nA6+1	; $D3
00000000 =000000D4                  nB6:	EQU nBb6+1	; $D4
00000000 =000000D5                  nC7:	EQU nB6+1	; $D5
00000000 =000000D6                  nCs7:	EQU nC7+1	; $D6
00000000 =000000D7                  nD7:	EQU nCs7+1	; $D7
00000000 =000000D8                  nEb7:	EQU nD7+1	; $D8
00000000 =000000D9                  nE7:	EQU nEb7+1	; $D9
00000000 =000000DA                  nF7:	EQU nE7+1	; $DA
00000000 =000000DB                  nFs7:	EQU nF7+1	; $DB
00000000 =000000DC                  nG7:	EQU nFs7+1	; $DC
00000000 =000000DD                  nAb7:	EQU nG7+1	; $DD
00000000 =000000DE                  nA7:	EQU nAb7+1	; $DE
00000000 =000000DF                  nBb7:	EQU nA7+1	; $DF
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; PSG envelope equates
00000000 =00000000                  fTone_00:	EQU $00
00000000 =00000001                  fTone_01:	EQU fTone_00+1
00000000 =00000002                  fTone_02:	EQU fTone_01+1
00000000 =00000003                  fTone_03:	EQU fTone_02+1
00000000 =00000004                  fTone_04:	EQU fTone_03+1
00000000 =00000005                  fTone_05:	EQU fTone_04+1
00000000 =00000006                  fTone_06:	EQU fTone_05+1
00000000 =00000007                  fTone_07:	EQU fTone_06+1
00000000 =00000008                  fTone_08:	EQU fTone_07+1
00000000 =00000009                  fTone_09:	EQU fTone_08+1
00000000 =0000000A                  fTone_0A:	EQU fTone_09+1
00000000 =0000000B                  fTone_0B:	EQU fTone_0A+1
00000000 =0000000C                  fTone_0C:	EQU fTone_0B+1
00000000 =0000000D                  fTone_0D:	EQU fTone_0C+1
00000000 =0000000E                  fTone_0E:	EQU fTone_0D+1
00000000 =0000000F                  fTone_0F:	EQU fTone_0E+1
00000000 =00000010                  fTone_10:	EQU fTone_0F+1
00000000 =00000011                  fTone_11:	EQU fTone_10+1
00000000 =00000012                  fTone_12:	EQU fTone_11+1
00000000 =00000013                  fTone_13:	EQU fTone_12+1
00000000 =00000014                  fTone_14:	EQU fTone_13+1
00000000 =00000015                  fTone_15:	EQU fTone_14+1
00000000 =00000016                  fTone_16:	EQU fTone_15+1
00000000 =00000017                  fTone_17:	EQU fTone_16+1
00000000 =00000018                  fTone_18:	EQU fTone_17+1
00000000 =00000019                  fTone_19:	EQU fTone_18+1
00000000 =0000001A                  fTone_1A:	EQU fTone_19+1
00000000 =0000001B                  fTone_1B:	EQU fTone_1A+1
00000000 =0000001C                  fTone_1C:	EQU fTone_1B+1
00000000 =0000001D                  fTone_1D:	EQU fTone_1C+1
00000000 =0000001E                  fTone_1E:	EQU fTone_1D+1
00000000 =0000001F                  fTone_1F:	EQU fTone_1E+1
00000000 =00000020                  fTone_20:	EQU fTone_1F+1
00000000 =00000021                  fTone_21:	EQU fTone_20+1
00000000 =00000022                  fTone_22:	EQU fTone_21+1
00000000 =00000023                  fTone_23:	EQU fTone_22+1
00000000 =00000024                  fTone_24:	EQU fTone_23+1
00000000 =00000025                  fTone_25:	EQU fTone_24+1
00000000 =00000026                  fTone_26:	EQU fTone_25+1
00000000 =00000027                  fTone_27:	EQU fTone_26+1
00000000 =00000028                  fTone_28:	EQU fTone_27+1
00000000 =00000029                  fTone_29:	EQU fTone_28+1
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; DAC Equates
00000000 =00000081                  dKick			EQU	$81
00000000 =00000082                  dSnare			EQU	$82
00000000 =00000082                  dMuffledSnare			EQU	$82
00000000 =00000083                  dTimpani		EQU	$83
00000000 =00000088                  dHiTimpani		EQU	$88
00000000 =00000089                  dMidTimpani		EQU	$89
00000000 =0000008A                  dLowTimpani		EQU	$8A
00000000 =0000008B                  dVLowTimpani		EQU	$8B
00000000 =00000083                  dCrashCymbal	EQU $83
00000000 =00000081                  dKickS3			EQU	$81
00000000 =00000082                  dSnareS3			EQU	$82
00000000 =0000008A                  delectriclowtom	EQU	$8A
00000000 =0000008B                  delectricfloortom	EQU	$8B
00000000 =00000088                  delectrichightom	EQU	$88
00000000 =00000089                  delectricmidtom	EQU	$89
00000000 =00000082                  dClapS3			EQU	$82
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Channel IDs for SFX
00000000 =00000080                  cPSG1				EQU $80
00000000 =000000A0                  cPSG2				EQU $A0
00000000 =000000C0                  cPSG3				EQU $C0
00000000 =000000E0                  cNoise				EQU $E0	; Not for use in S3/S&K/S3D
00000000 =00000002                  cFM3				EQU $02
00000000 =00000004                  cFM4				EQU $04
00000000 =00000005                  cFM5				EQU $05
00000000 =00000006                  cFM6				EQU $06	; Only in S3/S&K/S3D, overrides DAC
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ;---------------------------------------------
00000000                            ; SMPS F_Tone Equates 
00000000                            ;---------------------------------------------	
00000000 =00000000                  fTone_00:	EQU $00
00000000 =00000001                  fTone_01:	EQU fTone_00+1
00000000 =00000002                  fTone_02:	EQU fTone_01+1
00000000 =00000003                  fTone_03:	EQU fTone_02+1
00000000 =00000004                  fTone_04:	EQU fTone_03+1
00000000 =00000005                  fTone_05:	EQU fTone_04+1
00000000 =00000006                  fTone_06:	EQU fTone_05+1
00000000 =00000007                  fTone_07:	EQU fTone_06+1
00000000 =00000008                  fTone_08:	EQU fTone_07+1
00000000 =00000009                  fTone_09:	EQU fTone_08+1
00000000 =0000000A                  fTone_0A:	EQU fTone_09+1
00000000 =0000000B                  fTone_0B:	EQU fTone_0A+1
00000000 =0000000C                  fTone_0C:	EQU fTone_0B+1
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; PSG conversion to S3/S&K/S3D drivers require a tone shift of 12 semi-tones.
00000000                            conv0To256  macro val 
00000000                            	if val<$01
00000000                            		dc.b (256-val+$FF)&$FF
00000000                            	else	
00000000                            		dc.b (256-val)&$FF	
00000000                            	endc
00000000                            	endm
00000000                            SMPSModFix:	macro steps
00000000                            	dc.b (steps/(speed-1))
00000000                            	endm	
00000000 =0000000C                  psgdelta	EQU $0C
00000000                            PSGPitch macro pitch
00000000                            		dc.b	(pitch+psgdelta)&$FF
00000000                            	endm
00000000                            
00000000                            s1TempotoS2 macro tmod
00000000                            	if tmod<$01
00000000                            		dc.b ((($FF+tmod-1)*256+($FF+tmod/2))/$FF+tmod)&$FF 	
00000000                            	else
00000000                            		dc.b (((tmod-1)*256+(tmod/2))/tmod)&$FF
00000000                            	endc
00000000                            	endm
00000000                            	
00000000                            s3TempotoS2 macro tmod
00000000                            	if tmod<$01
00000000                            		dc.b (256-tmod+$FF)&$FF
00000000                            	else	
00000000                            		dc.b (256-tmod)&$FF	
00000000                            	endc
00000000                            	endm
00000000                            	
00000000                            convertMainTempoMod	macro tmod
00000000                            	if 		smpsHeaderStartSong=2
00000000                            		dc.b tmod
00000000                            	elseif 		smpsHeaderStartSong<2
00000000                            		s1TempotoS2 	\tmod
00000000                            	elseif	smpsHeaderStartSong>2
00000000                            		s3TempotoS2  	\tmod
00000000                            	endc
00000000                            	endm	
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Header Macros
00000000 =00000000                  smpsHeaderStartSong = 0
00000000                            
00000000                            smpsHeaderVoiceNull macro
00000000                            	dc.w	$0000
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Voice Location
00000000                            ; Common to music and SFX
00000000                            smpsHeaderVoice macro loc
00000000                            songStart set *
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Voice Location as S3's Universal Voice Bank
00000000                            ; Common to music and SFX
00000000                            smpsHeaderVoiceUVB macro
00000000                            	if songStart<>*
00000000                            		fail "Missing smpsHeaderStartSong or smpsHeaderStartSongConvert"
00000000                            	endc
00000000                            	;dc.w	little_endian(z80_UniVoiceBank)
00000000                            	z80_ptr	z80_UniVoiceBank
00000000                            	endm
00000000                            
00000000                            ; Header macros for music (not for SFX)
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChan macro fm,psg
00000000                            	dc.b	fm,psg
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempo macro tdiv,tmod
00000000                            	dc.b	tdiv,tmod
00000000                            	endm
00000000                            
00000000                            ; Header - Set up DAC Channel
00000000                            smpsHeaderDAC macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	if narg>=2
00000000                            		dc.b	\pitch
00000000                            	else
00000000                            		dc.b	$00
00000000                            	endc
00000000                            	if narg>=3
00000000                            		dc.b	\vol
00000000                            	else
00000000                            		dc.b	$00
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderFM macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch,vol
00000000                            	endm
00000000                            
00000000                            ; Header - Set up PSG Channel
00000000                            smpsHeaderPSG macro loc,pitch,vol,mod,voice
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch,vol,mod,voice
00000000                            	endm
00000000                            
00000000                            ; Header macros for SFX (not for music)
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempoSFX macro div
00000000                            	dc.b	div
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChanSFX macro chan
00000000                            	dc.b	chan
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderSFXChannel macro chanid,loc,pitch,vol
00000000                            	if (chanid=cNoise)
00000000                            		fail "Using channel ID of cNoise ($E0) in Sonic 3 driver is dangerous. Fix the song so that it turns into a noise channel instead."
00000000                            	endc
00000000                            	dc.b	$80,chanid
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch, vol
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Co-ord Flag Macros and Equates
00000000                            ; E0xx - Panning, AMS, FMS
00000000                            smpsPan macro direction,amsfms
00000000                            panNone set $00
00000000                            panRight set $40
00000000                            panLeft set $80
00000000                            panCentre set $C0
00000000                            panCenter set $C0 ; silly Americans :U
00000000                            	dc.b $E0,direction+amsfms
00000000                            	endm
00000000                            
00000000                            ; E1xx - Set channel frequency displacement to xx
00000000                            smpsAlterNote macro val
00000000                            	dc.b	$E1,val
00000000                            	endm
00000000                            
00000000                            ; E2xx - Useless
00000000                            smpsNop macro val
00000000                            	dc.b	$E2,val
00000000                            	endm
00000000                            ; Return (used after smpsCall)
00000000                            smpsReturn macro val
00000000                            	dc.b	$E3
00000000                            	endm
00000000                            
00000000                            ; Fade in previous song (ie. 1-Up)
00000000                            smpsFade macro val
00000000                            	dc.b	$E4
00000000                            	endm
00000000                            
00000000                            ; E5xx - Set channel tempo divider to xx
00000000                            smpsChanTempoDiv macro val
00000000                            	dc.b	$E5,val
00000000                            ;	endc
00000000                            	endm
00000000                            
00000000                            ; E6xx - Alter Volume by xx
00000000                            smpsAlterVol macro val
00000000                            	dc.b	$E6,val
00000000                            	endm
00000000                            
00000000                            sVol  macro val
00000000                            	$E6,val
00000000                            	endm
00000000                            ; E7 - Prevent attack of next note
00000000 =000000E7                  smpsNoAttack	EQU $E7
00000000                            
00000000                            ; E8xx - Set note fill to xx
00000000                            smpsNoteFill macro val
00000000                            		dc.b	$E8,val
00000000                            ;	endc
00000000                            	endm
00000000                            smpsAlterPitch 	macro	value
00000000                            	dc.b $E9,value
00000000                            	endm
00000000                            
00000000                            
00000000                            ; Set music tempo modifier to xx
00000000                            smpsSetTempoMod macro mod
00000000                            	dc.b	$EA,mod
00000000                            	endm
00000000                            
00000000                            ; Set music tempo divider to xx
00000000                            smpsSetTempoDiv macro val
00000000                            	dc.b	$EB,val
00000000                            	endm
00000000                            
00000000                            ; ECxx - Set Volume to xx
00000000                            smpsSetVol macro val
00000000                            	dc.b	$EC,val
00000000                            	endm
00000000                            
00000000                            ; Works on all drivers
00000000                            smpsPSGAlterVol macro vol
00000000                            	dc.b	$EC,vol
00000000                            	endm
00000000                            
00000000                            ; Clears pushing sound flag in S1
00000000                            smpsClearPush macro	
00000000                            	dc.b	$ED
00000000                            	endm
00000000                            
00000000                            ; Stops special SFX (S1 only) and restarts overridden music track
00000000                            smpsStopSpecial macro
00000000                            		dc.b	$EE
00000000                            	endm
00000000                            
00000000                            ; EFxx[yy] - Set Voice of FM channel to xx; xx < 0 means yy present
00000000                            smpsSetvoice macro voice,songID
00000000                            	if narg<=1
00000000                            		dc.b	$EF,voice
00000000                            	else
00000000                            		dc.b	$EF,voice|$80,songID+$81
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; F0wwxxyyzz - Modulation - ww: wait time - xx: modulation speed - yy: change per step - zz: number of steps
00000000                            smpsModSet macro wait,speed,change,step
00000000                            	dc.b	$F0
00000000                            	dc.b	wait,speed,change,step
00000000                            	endm
00000000                            
00000000                            ; Turn on Modulation
00000000                            smpsModOn macro
00000000                            	dc.b	$F1
00000000                            	endm
00000000                            
00000000                            ; F2 - End of channel
00000000                            smpsStop macro
00000000                            	dc.b	$F2
00000000                            	endm
00000000                            
00000000                            ; F3xx - PSG waveform to xx
00000000                            smpsPSGform macro form
00000000                            	dc.b	$F3,form
00000000                            	endm
00000000                            
00000000                            ; Turn off Modulation
00000000                            smpsModOff macro
00000000                            	dc.b	$F4
00000000                            	endm
00000000                            
00000000                            ; F5xx - PSG voice to xx
00000000                            smpsPSGvoice macro voice
00000000                            	dc.b	$F5,voice
00000000                            	endm
00000000                            
00000000                            ; F6xxxx - Jump to xxxx
00000000                            smpsJump macro loc
00000000                            	dc.b	$F6
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F7xxyyzzzz - Loop back to zzzz yy times, xx being the loop index for loop recursion fixing
00000000                            smpsLoop macro index,loops,loc
00000000                            	dc.b	$F7
00000000                            	dc.b	index,loops
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F8xxxx - Call pattern at xxxx, saving return point
00000000                            smpsCall macro loc
00000000                            	dc.b	$F8
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Alter Volume
00000000                            smpsFMAlterVol macro val1,val2
00000000                            	if narg<=1
00000000                            		dc.b	$E6,val1
00000000                            	else
00000000                            		dc.b	$E5,val1,val2
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; S3/S&K/S3D-only coordination flags
00000000                            ; Silences FM channel then stops as per smpsStop
00000000                            smpsStopFM macro
00000000                            	dc.b	$E3
00000000                            	endm
00000000                            
00000000                            ; Spindash Rev
00000000                            smpsSpindashRev macro
00000000                            	dc.b	$E9
00000000                            	endm
00000000                            	
00000000                            smpsPlayDACSample macro sample
00000000                            	dc.b	$EA,sample
00000000                            	endm
00000000                            	
00000000                            smpsConditionalJump macro index,loc
00000000                            	dc.b	$EB
00000000                            	dc.b	index
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            ; Set note values to xx-$40
00000000                            smpsSetNote macro val
00000000                            	dc.b	$ED,val
00000000                            	endm
00000000                            
00000000                            smpsFMICommand macro reg,val
00000000                            	dc.b	$EE,reg,val
00000000                            	endm
00000000                            
00000000                            ; Set Modulation
00000000                            smpsModChange2 macro fmmod,psgmod
00000000                            	dc.b	$F1,fmmod,psgmod
00000000                            	endm
00000000                            
00000000                            ; Set Modulation
00000000                            smpsModChange macro val
00000000                            	dc.b	$F4,val
00000000                            	endm
00000000                            
00000000                            ; FCxxxx - Jump to xxxx
00000000                            smpsContinuousLoop macro loc
00000000                            	dc.b	$FC
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            smpsAlternateSMPS macro flag
00000000                            	dc.b	$FD,flag
00000000                            	endm
00000000                            
00000000                            smpsFM3SpecialMode macro ind1,ind2,ind3,ind4
00000000                            	dc.b	$FE,ind1,ind2,ind3,ind4
00000000                            	endm
00000000                            
00000000                            smpsPlaySound macro index
00000000                            	dc.b	$FF,$01,index
00000000                            	endm
00000000                            
00000000                            smpsHaltMusic macro flag
00000000                            	dc.b	$FF,$02,flag
00000000                            	endm
00000000                            
00000000                            smpsCopyData macro data,len
00000000                            	fail "Coord. Flag to copy data should not be used. Complain to Flamewing if any music uses it."
00000000                            	dc.b	$FF,$03
00000000                            	;dc.w	little_endian(data)
00000000                            	z80_ptr	data
00000000                            	dc.b	len
00000000                            	endm
00000000                            
00000000                            smpsSSGEG macro op1,op2,op3,op4
00000000                            	dc.b	$FF,$05,op1,op2,op3,op4
00000000                            	endm
00000000                            
00000000                            smpsFMFlutter macro tone,mask
00000000                            	dc.b	$FF,$06,tone,mask
00000000                            	endm
00000000                            
00000000                            smpsResetSpindashRev macro val
00000000                            	dc.b	$FF,$07
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Macros for FM instruments
00000000                            ; Voices - Feedback
00000000                            smpsVcFeedback macro val
00000000                            vcFeedback set \val
00000000                            	endm
00000000                            
00000000                            ; Voices - Algorithm
00000000                            smpsVcAlgorithm macro val
00000000                            vcAlgorithm set \val
00000000                            	endm
00000000                            
00000000                            smpsVcUnusedBits macro val
00000000                            vcUnusedBits set \val
00000000                            	endm
00000000                            
00000000                            ; Voices - Detune
00000000                            smpsVcDetune macro op1,op2,op3,op4
00000000                            vcDT1 set \op1
00000000                            vcDT2 set \op2
00000000                            vcDT3 set \op3
00000000                            vcDT4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Coarse-Frequency
00000000                            smpsVcCoarseFreq macro op1,op2,op3,op4
00000000                            vcCF1 set \op1
00000000                            vcCF2 set \op2
00000000                            vcCF3 set \op3
00000000                            vcCF4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Rate Scale
00000000                            smpsVcRateScale macro op1,op2,op3,op4
00000000                            vcRS1 set \op1
00000000                            vcRS2 set \op2
00000000                            vcRS3 set \op3
00000000                            vcRS4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Attack Rate
00000000                            smpsVcAttackRate macro op1,op2,op3,op4
00000000                            vcAR1 set \op1
00000000                            vcAR2 set \op2
00000000                            vcAR3 set \op3
00000000                            vcAR4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Amplitude Modulation
00000000                            smpsVcAmpMod macro op1,op2,op3,op4
00000000                            vcAM1 set \op1
00000000                            vcAM2 set \op2
00000000                            vcAM3 set \op3
00000000                            vcAM4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - First Decay Rate
00000000                            smpsVcDecayRate1 macro op1,op2,op3,op4
00000000                            vcD1R1 set \op1
00000000                            vcD1R2 set \op2
00000000                            vcD1R3 set \op3
00000000                            vcD1R4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Second Decay Rate
00000000                            smpsVcDecayRate2 macro op1,op2,op3,op4
00000000                            vcD2R1 set \op1
00000000                            vcD2R2 set \op2
00000000                            vcD2R3 set \op3
00000000                            vcD2R4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Decay Level
00000000                            smpsVcDecayLevel macro op1,op2,op3,op4
00000000                            vcDL1 set \op1
00000000                            vcDL2 set \op2
00000000                            vcDL3 set \op3
00000000                            vcDL4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Release Rate
00000000                            smpsVcReleaseRate macro op1,op2,op3,op4
00000000                            vcRR1 set \op1
00000000                            vcRR2 set \op2
00000000                            vcRR3 set \op3
00000000                            vcRR4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Total Level
00000000                            smpsVcTotalLevel macro op1,op2,op3,op4
00000000                            vcTL1 set \op1
00000000                            vcTL2 set \op2
00000000                            vcTL3 set \op3
00000000                            vcTL4 set \op4
00000000                            	dc.b	(vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
00000000                            ;   0     1     2     3     4     5     6     7
00000000                            ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
00000000                            vcTLMask4 set ((vcAlgorithm=7)<<7)
00000000                            vcTLMask3 set ((vcAlgorithm>=4)<<7)
00000000                            vcTLMask2 set ((vcAlgorithm>=5)<<7)
00000000                            vcTLMask1 set $80
00000000                            ;	dc.b	(vcDT4<<4)+vcCF4 ,(vcDT3<<4)+vcCF3 ,(vcDT2<<4)+vcCF2 ,(vcDT1<<4)+vcCF1
00000000                            ;	dc.b	(vcRS4<<6)+vcAR4 ,(vcRS3<<6)+vcAR3 ,(vcRS2<<6)+vcAR2 ,(vcRS1<<6)+vcAR1
00000000                            ;	dc.b	(vcAM4<<5)+vcD1R4,(vcAM3<<5)+vcD1R3,(vcAM2<<5)+vcD1R2,(vcAM1<<5)+vcD1R1
00000000                            ;	dc.b	vcD2R4           ,vcD2R3           ,vcD2R2           ,vcD2R1
00000000                            ;	dc.b	(vcDL4<<4)+vcRR4 ,(vcDL3<<4)+vcRR3 ,(vcDL2<<4)+vcRR2 ,(vcDL1<<4)+vcRR1
00000000                            ;	dc.b	vcTL4|vcTLMask4  ,vcTL3|vcTLMask3  ,vcTL2|vcTLMask2  ,vcTL1|vcTLMask1
00000000                            	dc.b	(vcDT4<<4)+vcCF4,(vcDT3<<4)+vcCF3,(vcDT2<<4)+vcCF2,(vcDT1<<4)+vcCF1
00000000                            	dc.b	(vcRS4<<6)+vcAR4,(vcRS3<<6)+vcAR3,(vcRS2<<6)+vcAR2,(vcRS1<<6)+vcAR1
00000000                            	dc.b	(vcAM4<<5)+vcD1R4,(vcAM3<<5)+vcD1R3,(vcAM2<<5)+vcD1R2,(vcAM1<<5)+vcD1R1
00000000                            	dc.b	vcD2R4,vcD2R3,vcD2R2,vcD2R1
00000000                            	dc.b	(vcDL4<<4)+vcRR4,(vcDL3<<4)+vcRR3,(vcDL2<<4)+vcRR2,(vcDL1<<4)+vcRR1
00000000                            	dc.b	vcTL4|vcTLMask4,vcTL3|vcTLMask3,vcTL2|vcTLMask2,vcTL1|vcTLMask1
00000000                            	endm
00000000                            
00000000                            
00000000                            
00000000                            ;level select constants (to not give the foward reference warning this was moved here)
00000000 =60860003                  lsscrpos = $60860003 ; level select screen position
00000000 =00240000                  lsoff = $240000 ; second row jump
00000000 =64C20003                  lsstpos = lsscrpos+$43C0000 ; sound test
00000000 =6C820003                  lsnppos = $6C820003	; now playing
00000000 =6D020003                  lsctrlpos = $6D020003 ; control help
00000000                            lsrow1size: equ (LMTSecondRow-LevelMenuText)/16
00000000                            lsrow2size: equ (LMTEnd-LMTSecondRow)/16
00000000                            lsselectable: equ ((LMTSelectableEnd-LevelMenuText)/16)-1 ; last selectable item
00000000                            ; level select item constants
00000000                            lssndtest: equ lsrow1size+8
00000000                            lswifi: equ lsrow1size+9
00000000                            
00000000 =FFFFFFC4                  vBlankRoutine equ $FFFFFFC4 ; VBlank Routine Jump Instruction (6 bytes)
00000000 =FFFFFFC4                  vBlankJump equ vBlankRoutine
00000000 =FFFFFFC6                  vBlankAdress equ vBlankRoutine+2
00000000                            ; options menu
00000000                            optamm: equ ((OMTEnd-OptionMenuText)/16)-1
00000000                            
00000000                            ; NOTES FOR ANYONE MAKING CHARACTERS
00000000 =FFFFFFE8                  v_character = $FFFFFFE8
00000000                            ; pointers for:
00000000                            ; PLAYER MAPPINGS -> Player_Maps
00000000                            ; PLAYER ANIM SCRIPTS -> Player_Anim
00000000                            ; PLAYER ART -> Player_Art
00000000                            ; PLAYER DPLC -> Player_DPLC
00000000                            ; PLAYER PALETTE -> Player_Palette
00000000                            
00000000                            
00000000                            StartOfRom:
00000000 00FF FE00 0000 0000 0000+  Vectors:	dc.l $FFFE00, EntryPoint, BusError, AddressError
00000010 0000 0000 0000 0000 0000+  		dc.l IllegalInstr, ZeroDivide, ChkInstr, TrapvInstr
00000020 0000 0000 0000 0000 0000+  		dc.l PrivilegeViol, Trace, Line1010Emu,	Line1111Emu
00000030 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000040 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000050 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000060 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorTrap, ErrorTrap,	ErrorTrap
00000070 0000 0000 0000 0000 FFFF+  		dc.l PalToCRAM,	ErrorTrap, vBlankRoutine, ErrorTrap
00000080 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
00000090 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000A0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000B0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000C0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000D0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000E0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000F0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
00000100 5345 4741 204D 4547 4120+  Console:	dc.b 'SEGA MEGA DRIVE ' ; Hardware system ID
00000110 2843 2949 444B 2032 3030+  Date:		dc.b '(C)IDK 2001.SEP '
00000120 686F 7720 746F 2064 6973+  Title_Local:	dc.b 'how to disassemble vhs tapes on a slab of wood  ' ; Domestic name
00000150 686F 7720 746F 2064 6973+  Title_Int:	dc.b 'how to disassemble vhs tapes on a slab of wood  '
00000180 474D 2030 3030 3031 3030+  Serial:		dc.b 'GM 00001009-00'   ; Serial/version number
0000018E 0000                       Checksum:	dc.w 0
00000190 4A20 2020 2020 2020 2020+  		dc.b 'J               ' ; I/O support
000001A0 0000 0000                  RomStartLoc:	dc.l StartOfRom		; ROM start
000001A4 0000 0000                  RomEndLoc:	dc.l EndOfRom-1		; ROM end
000001A8 00FF 0000                  RamStartLoc:	dc.l $FF0000		; RAM start
000001AC 00FF FFFF                  RamEndLoc:	dc.l $FFFFFF		; RAM end
000001B0 2020 2020                  SRAMSupport:	dc.l $20202020		; change to $5241E020 to create	SRAM
000001B4 2020 2020                  		dc.l $20202020		; SRAM start
000001B8 2020 2020                  		dc.l $20202020		; SRAM end
000001BC 2020 2020 2020 2020 2020+  Notes:		dc.b '                                                    '
000001F0 4A55 4520 2020 2020 2020+  Region:		dc.b 'JUE             ' ; Region
00000200                            
00000200                            ; ===========================================================================
00000200                            
00000200                            ErrorTrap:
00000200 4E71                       		nop	
00000202 4E71                       		nop	
00000204 60FA                       		bra.s	ErrorTrap
00000206                            ; ===========================================================================
00000206                            
00000206                            EntryPoint:
00000206 4AB9 00A1 0008             		tst.l	($A10008).l	; test port A control
0000020C 6600                       		bne.s	PortA_Ok
0000020E 4A79 00A1 000C             		tst.w	($A1000C).l	; test port C control
00000214                            
00000214                            PortA_Ok:
00000214 6600                       		bne.s	PortC_Ok
00000216 4BFA 0000                  		lea	SetupValues(pc),a5
0000021A 4C9D 00E0                  		movem.w	(a5)+,d5-d7
0000021E 4CDD 1F00                  		movem.l	(a5)+,a0-a4
00000222 1029 EF01                  		move.b	-$10FF(a1),d0	; get hardware version
00000226 0200 000F                  		andi.b	#$F,d0
0000022A 6700                       		beq.s	SkipSecurity
0000022C 237C 5345 4741 2F00        		move.l	#'SEGA',$2F00(a1)
00000234                            
00000234                            SkipSecurity:
00000234 3014                       		move.w	(a4),d0		; check	if VDP works
00000236 7000                       		moveq	#0,d0
00000238 2C40                       		movea.l	d0,a6
0000023A 4E66                       		move.l	a6,usp		; set usp to $0
0000023C 7217                       		moveq	#$17,d1
0000023E                            
0000023E                            VDPInitLoop:
0000023E 1A1D                       		move.b	(a5)+,d5	; add $8000 to value
00000240 3885                       		move.w	d5,(a4)		; move value to	VDP register
00000242 DA47                       		add.w	d7,d5		; next register
00000244 51C9 FFF8                  		dbf	d1,VDPInitLoop
00000248 289D                       		move.l	(a5)+,(a4)
0000024A 3680                       		move.w	d0,(a3)		; clear	the screen
0000024C 3287                       		move.w	d7,(a1)		; stop the Z80
0000024E 3487                       		move.w	d7,(a2)		; reset	the Z80
00000250                            
00000250                            WaitForZ80:
00000250 0111                       		btst	d0,(a1)		; has the Z80 stopped?
00000252 66FC                       		bne.s	WaitForZ80	; if not, branch
00000254 7425                       		moveq	#$25,d2
00000256                            
00000256                            Z80InitLoop:
00000256 10DD                       		move.b	(a5)+,(a0)+
00000258 51CA FFFC                  		dbf	d2,Z80InitLoop
0000025C 3480                       		move.w	d0,(a2)
0000025E 3280                       		move.w	d0,(a1)		; start	the Z80
00000260 3487                       		move.w	d7,(a2)		; reset	the Z80
00000262                            
00000262                            ClrRAMLoop:
00000262 2D00                       		move.l	d0,-(a6)
00000264 51CE FFFC                  		dbf	d6,ClrRAMLoop	; clear	the entire RAM
00000268 289D                       		move.l	(a5)+,(a4)	; set VDP display mode and increment
0000026A 289D                       		move.l	(a5)+,(a4)	; set VDP to CRAM write
0000026C 761F                       		moveq	#$1F,d3
0000026E                            
0000026E                            ClrCRAMLoop:
0000026E 2680                       		move.l	d0,(a3)
00000270 51CB FFFC                  		dbf	d3,ClrCRAMLoop	; clear	the CRAM
00000274 289D                       		move.l	(a5)+,(a4)
00000276 7813                       		moveq	#$13,d4
00000278                            
00000278                            ClrVDPStuff:
00000278 2680                       		move.l	d0,(a3)
0000027A 51CC FFFC                  		dbf	d4,ClrVDPStuff
0000027E 7A03                       		moveq	#3,d5
00000280                            
00000280                            PSGInitLoop:
00000280 175D 0011                  		move.b	(a5)+,$11(a3)	; reset	the PSG
00000284 51CD FFFA                  		dbf	d5,PSGInitLoop
00000288 3480                       		move.w	d0,(a2)
0000028A 4CD6 7FFF                  		movem.l	(a6),d0-a6	; clear	all registers
0000028E 46FC 2700                  		move	#$2700,sr	; set the sr
00000292                            
00000292                            PortC_Ok:
00000292 6000                       		bra.s	GameProgram
00000294                            ; ===========================================================================
00000294 8000                       SetupValues:	dc.w $8000		; XREF: PortA_Ok
00000296 3FFF                       		dc.w $3FFF
00000298 0100                       		dc.w $100
0000029A                            
0000029A 00A0 0000                  		dc.l $A00000		; start	of Z80 RAM
0000029E 00A1 1100                  		dc.l $A11100		; Z80 bus request
000002A2 00A1 1200                  		dc.l $A11200		; Z80 reset
000002A6 00C0 0000                  		dc.l $C00000
000002AA 00C0 0004                  		dc.l $C00004		; address for VDP registers
000002AE                            
000002AE 0414 303C                  		dc.b 4,	$14, $30, $3C	; values for VDP registers
000002B2 076C 0000                  		dc.b 7,	$6C, 0,	0
000002B6 0000 FF00                  		dc.b 0,	0, $FF,	0
000002BA 8137 0001                  		dc.b $81, $37, 0, 1
000002BE 0100 00FF                  		dc.b 1,	0, 0, $FF
000002C2 FF00 0080                  		dc.b $FF, 0, 0,	$80
000002C6                            
000002C6 4000 0080                  		dc.l $40000080
000002CA                            
000002CA AF01 D91F 1127 0021 2600+  		dc.b $AF, 1, $D9, $1F, $11, $27, 0, $21, $26, 0, $F9, $77 ; Z80	instructions
000002D6 EDB0 DDE1 FDE1 ED47 ED4F   		dc.b $ED, $B0, $DD, $E1, $FD, $E1, $ED,	$47, $ED, $4F
000002E0 D1E1 F108 D9C1 D1E1 F1F9+  		dc.b $D1, $E1, $F1, 8, $D9, $C1, $D1, $E1, $F1,	$F9, $F3
000002EB ED56 36E9 E9               		dc.b $ED, $56, $36, $E9, $E9
000002F0                            
000002F0 8104                       		dc.w $8104		; value	for VDP	display	mode
000002F2 8F02                       		dc.w $8F02		; value	for VDP	increment
000002F4 C000 0000                  		dc.l $C0000000		; value	for CRAM write mode
000002F8 4000 0010                  		dc.l $40000010
000002FC                            
000002FC 9FBF DFFF                  		dc.b $9F, $BF, $DF, $FF	; values for PSG channel volumes
00000300                            ; ===========================================================================
00000300                            
00000300                            GameProgram:
00000300 4A79 00C0 0004             		tst.w	($C00004).l
00000306 007C 0700                  		ori	#$700,sr
0000030A                            
0000030A 0839 0006 00A1 000D        		btst	#6,($A1000D).l
00000312 6700                       		beq.s	CheckSumCheck
00000314 0CB8 696E 6974 FFFC        		cmpi.l	#'init',($FFFFFFFC).w ; has checksum routine already run?
0000031C 6700 0000                  		beq.w	GameInit	; if yes, branch
00000320                            
00000320                            CheckSumCheck:
00000320                            ;		movea.l	#ErrorTrap,a0	; start	checking bytes after the header	($200)
00000320                            ;		movea.l	#RomEndLoc,a1	; stop at end of ROM
00000320                            ;		move.l	(a1),d0
00000320                            ;		moveq	#0,d1
00000320                            ;
00000320                            ;loc_32C:
00000320                            ;		add.w	(a0)+,d1
00000320                            ;		cmp.l	a0,d0
00000320                            ;		bcc.s	loc_32C
00000320                            ;		movea.l	#Checksum,a1	; read the checksum
00000320                            ;		cmp.w	(a1),d1		; compare correct checksum to the one in ROM
00000320                            ;		bne.w	CheckSumError	; if they don't match, branch
00000320 4DF8 FE00                  		lea	($FFFFFE00).w,a6
00000324 7E00                       		moveq	#0,d7
00000326 3C3C 007F                  		move.w	#$7F,d6
0000032A                            
0000032A                            loc_348:
0000032A 2CC7                       		move.l	d7,(a6)+
0000032C 51CE FFFC                  		dbf	d6,loc_348
00000330 1039 00A1 0001             		move.b	($A10001).l,d0
00000336 0200 00C0                  		andi.b	#$C0,d0
0000033A 11C0 FFF8                  		move.b	d0,($FFFFFFF8).w
0000033E 21FC 696E 6974 FFFC        		move.l	#'init',($FFFFFFFC).w ; set flag so checksum won't be run again
00000346                            
00000346                            GameInit:
00000346 4DF9 00FF 0000             		lea	($FF0000).l,a6
0000034C 7E00                       		moveq	#0,d7
0000034E 3C3C 3F7F                  		move.w	#$3F7F,d6
00000352                            
00000352                            GameClrRAM:
00000352 2CC7                       		move.l	d7,(a6)+
00000354 51CE FFFC                  		dbf	d6,GameClrRAM	; fill RAM ($0000-$FDFF) with $0
00000358                            
00000358 31FC 4EF9 FFC4             		move.w	#$4EF9,(vBlankJump).w			; JMP opcode
0000035E 21FC 0000 0000 FFC6        		move.l	#loc_B10,(vBlankAdress).w		; Set the V-INT pointer to the standard V-INT routine
00000366                            
00000366 6100 0000                  		bsr.w	VDPSetupGame
0000036A 6100 0000                  		bsr.w	SoundDriverLoad
0000036E 6100 0000                  		bsr.w	JoypadInit
00000372 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set Game Mode to Sega Screen
00000378                            
00000378                            	;	move.b	#$20,($FFFFF600).w ; set Game Mode to Minecraft
00000378                            
00000378                            MainGameLoop:
00000378 707E                       		moveq	#$7E,d0
0000037A C038 F600                  		and.b	($FFFFF600).w,d0 ; load	Game Mode
0000037E 4EBB 0000                  		jsr	GameModeArray(pc,d0.w) ; jump to apt location in ROM
00000382 60F4                       		bra.s	MainGameLoop
00000384                            ; ===========================================================================
00000384                            ; ---------------------------------------------------------------------------
00000384                            ; Main game mode array
00000384                            ; ---------------------------------------------------------------------------
00000384                            
00000384                            GameModeArray:
00000384 6000 0000                  		bra.w	SegaScreen	; Sega Screen ($00)
00000388                            ; ===========================================================================
00000388 6000 0000                  		bra.w	TitleScreen	; Title	Screen ($04)
0000038C                            ; ===========================================================================
0000038C 6000 0000                  		bra.w	Level		; Demo Mode ($08)
00000390                            ; ===========================================================================
00000390 6000 0000                  		bra.w	Level		; Normal Level ($0C)
00000394                            ; ===========================================================================
00000394 6000 0000                  		bra.w	SpecialStage	; Special Stage	($10)
00000398                            ; ===========================================================================
00000398 6000 0000                  		bra.w	ContinueScreen	; Continue Screen ($14)
0000039C                            ; ===========================================================================
0000039C 6000 0000                  		bra.w	EndingSequence	; End of game sequence ($18)
000003A0                            ; ===========================================================================
000003A0 6000 0000                  		bra.w	Credits		; Credits ($1C)
000003A4                            ; ===========================================================================
000003A4 4EF9 0000 0000             		jmp	Minecraft	; Minecraft ($20)	
000003AA                            ; ===========================================================================
000003AA                            
000003AA                            CheckSumError:
000003AA 6100 0000                  		bsr.w	VDPSetupGame
000003AE 23FC C000 0000 00C0 0004   		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
000003B8 7E3F                       		moveq	#$3F,d7
000003BA                            
000003BA                            CheckSum_Red:
000003BA 33FC 000E 00C0 0000        		move.w	#$E,($C00000).l	; fill screen with colour red
000003C2 51CF FFF6                  		dbf	d7,CheckSum_Red	; repeat $3F more times
000003C6                            
000003C6                            CheckSum_Loop:
000003C6 60FE                       		bra.s	CheckSum_Loop
000003C8                            ; ===========================================================================
000003C8                            
000003C8                            BusError:
000003C8 11FC 0002 FC44             		move.b	#2,($FFFFFC44).w
000003CE 6000                       		bra.s	loc_43A
000003D0                            ; ===========================================================================
000003D0                            
000003D0                            AddressError:
000003D0 11FC 0004 FC44             		move.b	#4,($FFFFFC44).w
000003D6 6000                       		bra.s	loc_43A
000003D8                            ; ===========================================================================
000003D8                            
000003D8                            IllegalInstr:
000003D8 11FC 0006 FC44             		move.b	#6,($FFFFFC44).w
000003DE 54AF 0002                  		addq.l	#2,2(sp)
000003E2 6000                       		bra.s	loc_462
000003E4                            ; ===========================================================================
000003E4                            
000003E4                            ZeroDivide:
000003E4 11FC 0008 FC44             		move.b	#8,($FFFFFC44).w
000003EA 6000                       		bra.s	loc_462
000003EC                            ; ===========================================================================
000003EC                            
000003EC                            ChkInstr:
000003EC 11FC 000A FC44             		move.b	#$A,($FFFFFC44).w
000003F2 6000                       		bra.s	loc_462
000003F4                            ; ===========================================================================
000003F4                            
000003F4                            TrapvInstr:
000003F4 11FC 000C FC44             		move.b	#$C,($FFFFFC44).w
000003FA 6000                       		bra.s	loc_462
000003FC                            ; ===========================================================================
000003FC                            
000003FC                            PrivilegeViol:
000003FC 11FC 000E FC44             		move.b	#$E,($FFFFFC44).w
00000402 6000                       		bra.s	loc_462
00000404                            ; ===========================================================================
00000404                            
00000404                            Trace:
00000404 11FC 0010 FC44             		move.b	#$10,($FFFFFC44).w
0000040A 6000                       		bra.s	loc_462
0000040C                            ; ===========================================================================
0000040C                            
0000040C                            Line1010Emu:
0000040C 11FC 0012 FC44             		move.b	#$12,($FFFFFC44).w
00000412 54AF 0002                  		addq.l	#2,2(sp)
00000416 6000                       		bra.s	loc_462
00000418                            ; ===========================================================================
00000418                            
00000418                            Line1111Emu:
00000418 11FC 0014 FC44             		move.b	#$14,($FFFFFC44).w
0000041E 54AF 0002                  		addq.l	#2,2(sp)
00000422 6000                       		bra.s	loc_462
00000424                            ; ===========================================================================
00000424                            
00000424                            ErrorExcept:
00000424 11FC 0000 FC44             		move.b	#0,($FFFFFC44).w
0000042A 6000                       		bra.s	loc_462
0000042C                            ; ===========================================================================
0000042C                            
0000042C                            loc_43A:
0000042C 46FC 2700                  		move	#$2700,sr
00000430 544F                       		addq.w	#2,sp
00000432 21DF FC40                  		move.l	(sp)+,($FFFFFC40).w
00000436 544F                       		addq.w	#2,sp
00000438 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
0000043E 6100 0000                  		bsr.w	ShowErrorMsg
00000442 202F 0002                  		move.l	2(sp),d0
00000446 6100 0000                  		bsr.w	sub_5BA
0000044A 2038 FC40                  		move.l	($FFFFFC40).w,d0
0000044E 6100 0000                  		bsr.w	sub_5BA
00000452 6000                       		bra.s	loc_478
00000454                            ; ===========================================================================
00000454                            
00000454                            loc_462:
00000454 46FC 2700                  		move	#$2700,sr
00000458 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
0000045E 6100 0000                  		bsr.w	ShowErrorMsg
00000462 202F 0002                  		move.l	2(sp),d0
00000466 6100 0000                  		bsr.w	sub_5BA
0000046A                            
0000046A                            loc_478:
0000046A 6100 0000                  		bsr.w	ErrorWaitForC
0000046E 4CF8 FFFF FC00             		movem.l	($FFFFFC00).w,d0-a7
00000474 46FC 2300                  		move	#$2300,sr
00000478 4E73                       		rte	
0000047A                            
0000047A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000047A                            
0000047A                            
0000047A                            ShowErrorMsg:				; XREF: loc_43A; loc_462
0000047A 4DF9 00C0 0000             		lea	($C00000).l,a6
00000480 23FC 7800 0003 00C0 0004   		move.l	#$78000003,($C00004).l
0000048A 41F9 0000 0000             		lea	(Art_Text).l,a0
00000490 323C 027F                  		move.w	#$27F,d1
00000494                            
00000494                            Error_LoadGfx:
00000494 3C98                       		move.w	(a0)+,(a6)
00000496 51C9 FFFC                  		dbf	d1,Error_LoadGfx
0000049A 7000                       		moveq	#0,d0		; clear	d0
0000049C 1038 FC44                  		move.b	($FFFFFC44).w,d0 ; load	error code
000004A0 303B 0000                  		move.w	ErrorText(pc,d0.w),d0
000004A4 41FB 0000                  		lea	ErrorText(pc,d0.w),a0
000004A8 23FC 4604 0003 00C0 0004   		move.l	#$46040003,($C00004).l ; position
000004B2 7212                       		moveq	#$12,d1		; number of characters
000004B4                            
000004B4                            Error_LoopChars:
000004B4 7000                       		moveq	#0,d0
000004B6 1018                       		move.b	(a0)+,d0
000004B8 0640 0790                  		addi.w	#$790,d0
000004BC 3C80                       		move.w	d0,(a6)
000004BE 51C9 FFF4                  		dbf	d1,Error_LoopChars ; repeat for	number of characters
000004C2 4E75                       		rts	
000004C4                            ; End of function ShowErrorMsg
000004C4                            
000004C4                            ; ===========================================================================
000004C4 0000 0000                  ErrorText:	dc.w asc_4E8-ErrorText,	asc_4FB-ErrorText ; XREF: ShowErrorMsg
000004C8 0000 0000                  		dc.w asc_50E-ErrorText,	asc_521-ErrorText
000004CC 0000 0000                  		dc.w asc_534-ErrorText,	asc_547-ErrorText
000004D0 0000 0000                  		dc.w asc_55A-ErrorText,	asc_56D-ErrorText
000004D4 0000 0000                  		dc.w asc_580-ErrorText,	asc_593-ErrorText
000004D8 0000                       		dc.w asc_5A6-ErrorText
000004DA 4552 524F 5220 4558 4345+  asc_4E8:	dc.b 'ERROR EXCEPTION    '
000004ED 4255 5320 4552 524F 5220+  asc_4FB:	dc.b 'BUS ERROR          '
00000500 4144 4452 4553 5320 4552+  asc_50E:	dc.b 'ADDRESS ERROR      '
00000513 494C 4C45 4741 4C20 494E+  asc_521:	dc.b 'ILLEGAL INSTRUCTION'
00000526 4045 524F 2044 4956 4944+  asc_534:	dc.b '@ERO DIVIDE        '
00000539 4348 4B20 494E 5354 5255+  asc_547:	dc.b 'CHK INSTRUCTION    '
0000054C 5452 4150 5620 494E 5354+  asc_55A:	dc.b 'TRAPV INSTRUCTION  '
0000055F 5052 4956 494C 4547 4520+  asc_56D:	dc.b 'PRIVILEGE VIOLATION'
00000572 5452 4143 4520 2020 2020+  asc_580:	dc.b 'TRACE              '
00000585 4C49 4E45 2031 3031 3020+  asc_593:	dc.b 'LINE 1010 EMULATOR '
00000598 4C49 4E45 2031 3131 3120+  asc_5A6:	dc.b 'LINE 1111 EMULATOR '
000005AC 00                         		even
000005AC                            
000005AC                            ; ||||||||||||||| S U B	R O U T	I N ET |||||||||||||||||||||||||||||||||||||||
000005AC                            
000005AC                            
000005AC                            sub_5BA:				; XREF: loc_43A; loc_462
000005AC 3CBC 07CA                  		move.w	#$7CA,(a6)
000005B0 7407                       		moveq	#7,d2
000005B2                            
000005B2                            loc_5C0:
000005B2 E998                       		rol.l	#4,d0
000005B4 6100                       		bsr.s	sub_5CA
000005B6 51CA FFFA                  		dbf	d2,loc_5C0
000005BA 4E75                       		rts	
000005BC                            ; End of function sub_5BA
000005BC                            
000005BC                            
000005BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005BC                            
000005BC                            
000005BC                            sub_5CA:				; XREF: sub_5BA
000005BC 3200                       		move.w	d0,d1
000005BE 0241 000F                  		andi.w	#$F,d1
000005C2 0C41 000A                  		cmpi.w	#$A,d1
000005C6 6500                       		bcs.s	loc_5D8
000005C8 5E41                       		addq.w	#7,d1
000005CA                            
000005CA                            loc_5D8:
000005CA 0641 07C0                  		addi.w	#$7C0,d1
000005CE 3C81                       		move.w	d1,(a6)
000005D0 4E75                       		rts	
000005D2                            ; End of function sub_5CA
000005D2                            
000005D2                            
000005D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005D2                            
000005D2                            
000005D2                            ErrorWaitForC:				; XREF: loc_478
000005D2 6100 0000                  		bsr.w	ReadJoypads
000005D6 0C38 0020 F605             		cmpi.b	#$20,($FFFFF605).w ; is	button C pressed?
000005DC 6600 FFF4                  		bne.w	ErrorWaitForC	; if not, branch
000005E0 4E75                       		rts	
000005E2                            ; End of function ErrorWaitForC
000005E2                            
000005E2                            ; ===========================================================================
000005E2                            
000005E2                            Art_Text:	incbin	artunc\menutext.bin	; text used in level select and debug mode
00000D22                            Art_Text_end:		even
00000D22                            
00000D22                            ; ===========================================================================
00000D22                            ;VBlank
00000D22                            loc_B10:				; XREF: Vectors
00000D22 48E7 FFFE                  		movem.l	d0-a6,-(sp)
00000D26 4A38 F62A                  		tst.b	($FFFFF62A).w
00000D2A 6700                       		beq.s	loc_B88
00000D2C 3039 00C0 0004             		move.w	($C00004).l,d0
00000D32 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
00000D3C 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
00000D44                            ;		btst	#6,($FFFFFFF8).w
00000D44                            ;		beq.s	loc_B42
00000D44                            ;		move.w	#$700,d0
00000D44                            ;
00000D44                            ;loc_B3E:
00000D44                            ;		dbf	d0,loc_B3E
00000D44                            
00000D44                            ;loc_B42:
00000D44 1038 F62A                  		move.b	($FFFFF62A).w,d0
00000D48 11FC 0000 F62A             		move.b	#0,($FFFFF62A).w
00000D4E 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000D54 0240 003E                  		andi.w	#$3E,d0
00000D58 303B 0000                  		move.w	off_B6E(pc,d0.w),d0
00000D5C 4EBB 0000                  		jsr	off_B6E(pc,d0.w)
00000D60                            
00000D60                            loc_B5E:				; XREF: loc_B88
00000D60 4EB9 0000 0000             		jsr	sub_71B4C
00000D66                            
00000D66                            loc_B64:				; XREF: loc_D50
00000D66 52B8 FE0C                  		addq.l	#1,($FFFFFE0C).w
00000D6A 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
00000D6E 4E73                       		rte	
00000D70                            ; ===========================================================================
00000D70 0000 0000                  off_B6E:	dc.w loc_B88-off_B6E, loc_C32-off_B6E
00000D74 0000 0000                  		dc.w loc_C44-off_B6E, loc_C5E-off_B6E
00000D78 0000 0000                  		dc.w loc_C6E-off_B6E, loc_DA6-off_B6E
00000D7C 0000 0000                  		dc.w loc_E72-off_B6E, loc_F8A-off_B6E
00000D80 0000 0000                  		dc.w loc_C64-off_B6E, loc_F9A-off_B6E
00000D84 0000 0000                  		dc.w loc_C36-off_B6E, loc_FA6-off_B6E
00000D88 0000                       		dc.w loc_E72-off_B6E
00000D8A                            ; ===========================================================================
00000D8A                            
00000D8A                            loc_B88:				; XREF: loc_B10; off_B6E
00000D8A 0C38 008C F600             		cmpi.b	#$8C,($FFFFF600).w
00000D90 6700                       		beq.s	loc_B9A
00000D92 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
00000D98 6600 FFC6                  		bne.w	loc_B5E
00000D9C                            
00000D9C                            loc_B9A:
00000D9C 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ ?
00000DA2 6600 FFBC                  		bne.w	loc_B5E		; if not, branch
00000DA6 3039 00C0 0004             		move.w	($C00004).l,d0
00000DAC                            ;		btst	#6,($FFFFFFF8).w
00000DAC                            ;		beq.s	loc_BBA
00000DAC                            ;		move.w	#$700,d0
00000DAC                            ;
00000DAC                            ;loc_BB6:
00000DAC                            ;		dbf	d0,loc_BB6
00000DAC                            ;
00000DAC                            ;loc_BBA:
00000DAC 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000DB2 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l
00000DBA                            
00000DBA                            loc_BC8:
00000DBA 0839 0000 00A1 1100        		btst	#0,($A11100).l
00000DC2 66F6                       		bne.s	loc_BC8
00000DC4 4A38 F64E                  		tst.b	($FFFFF64E).w
00000DC8 6600                       		bne.s	loc_BFE
00000DCA 4BF9 00C0 0004             		lea	($C00004).l,a5
00000DD0 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000DD6 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000DDC 3ABC 977F                  		move.w	#$977F,(a5)
00000DE0 3ABC C000                  		move.w	#$C000,(a5)
00000DE4 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000DEA 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000DEE 6000                       		bra.s	loc_C22
00000DF0                            ; ===========================================================================
00000DF0                            
00000DF0                            loc_BFE:				; XREF: loc_BC8
00000DF0 4BF9 00C0 0004             		lea	($C00004).l,a5
00000DF6 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000DFC 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000E02 3ABC 977F                  		move.w	#$977F,(a5)
00000E06 3ABC C000                  		move.w	#$C000,(a5)
00000E0A 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000E10 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E14                            
00000E14                            loc_C22:				; XREF: loc_BC8
00000E14 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000E18 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00000E20 6000 FF3E                  		bra.w	loc_B5E
00000E24                            ; ===========================================================================
00000E24                            
00000E24                            loc_C32:				; XREF: off_B6E
00000E24 6100 0000                  		bsr.w	sub_106E
00000E28                            
00000E28                            loc_C36:				; XREF: off_B6E
00000E28 4A78 F614                  		tst.w	($FFFFF614).w
00000E2C 6700 0000                  		beq.w	locret_C42
00000E30 5378 F614                  		subq.w	#1,($FFFFF614).w
00000E34                            
00000E34                            locret_C42:
00000E34 4E75                       		rts	
00000E36                            ; ===========================================================================
00000E36                            
00000E36                            loc_C44:				; XREF: off_B6E
00000E36 6100 0000                  		bsr.w	sub_106E
00000E3A 6100 0000                  		bsr.w	sub_6886
00000E3E 6100 0000                  		bsr.w	sub_1642
00000E42 4A78 F614                  		tst.w	($FFFFF614).w
00000E46 6700 0000                  		beq.w	locret_C5C
00000E4A 5378 F614                  		subq.w	#1,($FFFFF614).w
00000E4E                            
00000E4E                            locret_C5C:
00000E4E 4E75                       		rts	
00000E50                            ; ===========================================================================
00000E50                            
00000E50                            loc_C5E:				; XREF: off_B6E
00000E50 6100 0000                  		bsr.w	sub_106E
00000E54 4E75                       		rts	
00000E56                            ; ===========================================================================
00000E56                            
00000E56                            loc_C64:				; XREF: off_B6E
00000E56 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)	?
00000E5C 6700 0000                  		beq.w	loc_DA6		; if yes, branch
00000E60                            
00000E60                            loc_C6E:				; XREF: off_B6E
00000E60 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000E68                            
00000E68                            loc_C76:
00000E68 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000E70 66F6                       		bne.s	loc_C76		; if not, branch
00000E72 6100 0000                  		bsr.w	ReadJoypads
00000E76 4A38 F64E                  		tst.b	($FFFFF64E).w
00000E7A 6600                       		bne.s	loc_CB0
00000E7C 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E82 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000E88 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000E8E 3ABC 977F                  		move.w	#$977F,(a5)
00000E92 3ABC C000                  		move.w	#$C000,(a5)
00000E96 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000E9C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000EA0 6000                       		bra.s	loc_CD4
00000EA2                            ; ===========================================================================
00000EA2                            
00000EA2                            loc_CB0:				; XREF: loc_C76
00000EA2 4BF9 00C0 0004             		lea	($C00004).l,a5
00000EA8 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000EAE 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000EB4 3ABC 977F                  		move.w	#$977F,(a5)
00000EB8 3ABC C000                  		move.w	#$C000,(a5)
00000EBC 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000EC2 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000EC6                            
00000EC6                            loc_CD4:				; XREF: loc_C76
00000EC6 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000ECA 4BF9 00C0 0004             		lea	($C00004).l,a5
00000ED0 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000ED6 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000EDC 3ABC 977F                  		move.w	#$977F,(a5)
00000EE0 3ABC 7C00                  		move.w	#$7C00,(a5)
00000EE4 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000EEA 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000EEE 4BF9 00C0 0004             		lea	($C00004).l,a5
00000EF4 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000EFA 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000F00 3ABC 977F                  		move.w	#$977F,(a5)
00000F04 3ABC 7800                  		move.w	#$7800,(a5)
00000F08 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F0E 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F12 4A38 F767                  		tst.b	($FFFFF767).w
00000F16 6700                       		beq.s	loc_D50
00000F18 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F1E 2ABC 9401 9370             		move.l	#$94019370,(a5)
00000F24 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00000F2A 3ABC 977F                  		move.w	#$977F,(a5)
00000F2E 3ABC 7000                  		move.w	#$7000,(a5)
00000F32 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F38 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F3C 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00000F42                            
00000F42                            loc_D50:
00000F42 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00000F4A 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00000F50 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
00000F56 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
00000F5C 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00000F62 0C38 0060 F625             		cmpi.b	#$60,($FFFFF625).w
00000F68 6400                       		bcc.s	Demo_Time
00000F6A 11FC 0001 F64F             		move.b	#1,($FFFFF64F).w
00000F70 588F                       		addq.l	#4,sp
00000F72 6000 FDF2                  		bra.w	loc_B64
00000F76                            
00000F76                            ; ---------------------------------------------------------------------------
00000F76                            ; Subroutine to	run a demo for an amount of time
00000F76                            ; ---------------------------------------------------------------------------
00000F76                            
00000F76                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000F76                            
00000F76                            
00000F76                            Demo_Time:				; XREF: loc_D50; PalToCRAM
00000F76 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000F7A 4EB9 0000 0000             		jsr	AniArt_Load
00000F80 4EB9 0000 0000             		jsr	HudUpdate
00000F86 6100 0000                  		bsr.w	sub_165E
00000F8A 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00000F8E 6700 0000                  		beq.w	Demo_TimeEnd	; if not, branch
00000F92 5378 F614                  		subq.w	#1,($FFFFF614).w ; subtract 1 from time	left
00000F96                            
00000F96                            Demo_TimeEnd:
00000F96 4E75                       		rts	
00000F98                            ; End of function Demo_Time
00000F98                            
00000F98                            ; ===========================================================================
00000F98                            
00000F98                            loc_DA6:				; XREF: off_B6E
00000F98 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000FA0                            
00000FA0                            loc_DAE:
00000FA0 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000FA8 66F6                       		bne.s	loc_DAE		; if not, branch
00000FAA 6100 0000                  		bsr.w	ReadJoypads
00000FAE 4BF9 00C0 0004             		lea	($C00004).l,a5
00000FB4 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000FBA 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000FC0 3ABC 977F                  		move.w	#$977F,(a5)
00000FC4 3ABC C000                  		move.w	#$C000,(a5)
00000FC8 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000FCE 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000FD2 4BF9 00C0 0004             		lea	($C00004).l,a5
00000FD8 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000FDE 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000FE4 3ABC 977F                  		move.w	#$977F,(a5)
00000FE8 3ABC 7800                  		move.w	#$7800,(a5)
00000FEC 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000FF2 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000FF6 4BF9 00C0 0004             		lea	($C00004).l,a5
00000FFC 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00001002 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00001008 3ABC 977F                  		move.w	#$977F,(a5)
0000100C 3ABC 7C00                  		move.w	#$7C00,(a5)
00001010 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001016 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000101A 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00001022 6100 0000                  		bsr.w	PalCycle_SS
00001026 4A38 F767                  		tst.b	($FFFFF767).w
0000102A 6700                       		beq.s	loc_E64
0000102C 4BF9 00C0 0004             		lea	($C00004).l,a5
00001032 2ABC 9401 9370             		move.l	#$94019370,(a5)
00001038 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
0000103E 3ABC 977F                  		move.w	#$977F,(a5)
00001042 3ABC 7000                  		move.w	#$7000,(a5)
00001046 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000104C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001050 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00001056                            
00001056                            loc_E64:
00001056 4A78 F614                  		tst.w	($FFFFF614).w
0000105A 6700 0000                  		beq.w	locret_E70
0000105E 5378 F614                  		subq.w	#1,($FFFFF614).w
00001062                            
00001062                            locret_E70:
00001062 4E75                       		rts	
00001064                            ; ===========================================================================
00001064                            
00001064                            loc_E72:				; XREF: off_B6E
00001064 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
0000106C                            
0000106C                            loc_E7A:
0000106C 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00001074 66F6                       		bne.s	loc_E7A		; if not, branch
00001076 6100 0000                  		bsr.w	ReadJoypads
0000107A 4A38 F64E                  		tst.b	($FFFFF64E).w
0000107E 6600                       		bne.s	loc_EB4
00001080 4BF9 00C0 0004             		lea	($C00004).l,a5
00001086 2ABC 9400 9340             		move.l	#$94009340,(a5)
0000108C 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00001092 3ABC 977F                  		move.w	#$977F,(a5)
00001096 3ABC C000                  		move.w	#$C000,(a5)
0000109A 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000010A0 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000010A4 6000                       		bra.s	loc_ED8
000010A6                            ; ===========================================================================
000010A6                            
000010A6                            loc_EB4:				; XREF: loc_E7A
000010A6 4BF9 00C0 0004             		lea	($C00004).l,a5
000010AC 2ABC 9400 9340             		move.l	#$94009340,(a5)
000010B2 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
000010B8 3ABC 977F                  		move.w	#$977F,(a5)
000010BC 3ABC C000                  		move.w	#$C000,(a5)
000010C0 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000010C6 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000010CA                            
000010CA                            loc_ED8:				; XREF: loc_E7A
000010CA 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
000010CE 4BF9 00C0 0004             		lea	($C00004).l,a5
000010D4 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
000010DA 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
000010E0                            
000010E0                            loc_EEE:
000010E0 3ABC 977F                  		move.w	#$977F,(a5)
000010E4 3ABC 7C00                  		move.w	#$7C00,(a5)
000010E8 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
000010EE 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000010F2 4BF9 00C0 0004             		lea	($C00004).l,a5
000010F8 2ABC 9401 9340             		move.l	#$94019340,(a5)
000010FE 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00001104 3ABC 977F                  		move.w	#$977F,(a5)
00001108 3ABC 7800                  		move.w	#$7800,(a5)
0000110C 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001112 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001116 4A38 F767                  		tst.b	($FFFFF767).w
0000111A 6700                       		beq.s	loc_F54
0000111C 4BF9 00C0 0004             		lea	($C00004).l,a5
00001122 2ABC 9401 9370             		move.l	#$94019370,(a5)
00001128 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
0000112E 3ABC 977F                  		move.w	#$977F,(a5)
00001132 3ABC 7000                  		move.w	#$7000,(a5)
00001136 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000113C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001140 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00001146                            
00001146                            loc_F54:
00001146 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
0000114E 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00001154 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
0000115A 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
00001160 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00001166 6100 0000                  		bsr.w	LoadTilesAsYouMove
0000116A 4EB9 0000 0000             		jsr	AniArt_Load
00001170 4EB9 0000 0000             		jsr	HudUpdate
00001176 6100 0000                  		bsr.w	sub_1642
0000117A 4E75                       		rts	
0000117C                            ; ===========================================================================
0000117C                            
0000117C                            loc_F8A:				; XREF: off_B6E
0000117C 6100 0000                  		bsr.w	sub_106E
00001180 5238 F628                  		addq.b	#1,($FFFFF628).w
00001184 11FC 000E F62A             		move.b	#$E,($FFFFF62A).w
0000118A 4E75                       		rts	
0000118C                            ; ===========================================================================
0000118C                            
0000118C                            loc_F9A:				; XREF: off_B6E
0000118C 6100 0000                  		bsr.w	sub_106E
00001190 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00001194 6000 0000                  		bra.w	sub_1642
00001198                            ; ===========================================================================
00001198                            
00001198                            loc_FA6:				; XREF: off_B6E
00001198 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
000011A0                            
000011A0                            loc_FAE:
000011A0 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
000011A8 66F6                       		bne.s	loc_FAE		; if not, branch
000011AA 6100 0000                  		bsr.w	ReadJoypads
000011AE 4BF9 00C0 0004             		lea	($C00004).l,a5
000011B4 2ABC 9400 9340             		move.l	#$94009340,(a5)
000011BA 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
000011C0 3ABC 977F                  		move.w	#$977F,(a5)
000011C4 3ABC C000                  		move.w	#$C000,(a5)
000011C8 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000011CE 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000011D2 4BF9 00C0 0004             		lea	($C00004).l,a5
000011D8 2ABC 9401 9340             		move.l	#$94019340,(a5)
000011DE 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
000011E4 3ABC 977F                  		move.w	#$977F,(a5)
000011E8 3ABC 7800                  		move.w	#$7800,(a5)
000011EC 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
000011F2 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000011F6 4BF9 00C0 0004             		lea	($C00004).l,a5
000011FC 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00001202 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00001208 3ABC 977F                  		move.w	#$977F,(a5)
0000120C 3ABC 7C00                  		move.w	#$7C00,(a5)
00001210 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001216 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000121A 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001222 4A38 F767                  		tst.b	($FFFFF767).w
00001226 6700                       		beq.s	loc_1060
00001228 4BF9 00C0 0004             		lea	($C00004).l,a5
0000122E 2ABC 9401 9370             		move.l	#$94019370,(a5)
00001234 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
0000123A 3ABC 977F                  		move.w	#$977F,(a5)
0000123E 3ABC 7000                  		move.w	#$7000,(a5)
00001242 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001248 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000124C 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00001252                            
00001252                            loc_1060:
00001252 4A78 F614                  		tst.w	($FFFFF614).w
00001256 6700 0000                  		beq.w	locret_106C
0000125A 5378 F614                  		subq.w	#1,($FFFFF614).w
0000125E                            
0000125E                            locret_106C:
0000125E 4E75                       		rts	
00001260                            
00001260                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001260                            
00001260                            
00001260                            sub_106E:				; XREF: loc_C32; et al
00001260 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00001268                            
00001268                            loc_1076:
00001268 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00001270 66F6                       		bne.s	loc_1076	; if not, branch
00001272 6100 0000                  		bsr.w	ReadJoypads
00001276 4A38 F64E                  		tst.b	($FFFFF64E).w
0000127A 6600                       		bne.s	loc_10B0
0000127C 4BF9 00C0 0004             		lea	($C00004).l,a5
00001282 2ABC 9400 9340             		move.l	#$94009340,(a5)
00001288 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
0000128E 3ABC 977F                  		move.w	#$977F,(a5)
00001292 3ABC C000                  		move.w	#$C000,(a5)
00001296 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
0000129C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000012A0 6000                       		bra.s	loc_10D4
000012A2                            ; ===========================================================================
000012A2                            
000012A2                            loc_10B0:				; XREF: sub_106E
000012A2 4BF9 00C0 0004             		lea	($C00004).l,a5
000012A8 2ABC 9400 9340             		move.l	#$94009340,(a5)
000012AE 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
000012B4 3ABC 977F                  		move.w	#$977F,(a5)
000012B8 3ABC C000                  		move.w	#$C000,(a5)
000012BC 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000012C2 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000012C6                            
000012C6                            loc_10D4:				; XREF: sub_106E
000012C6 4BF9 00C0 0004             		lea	($C00004).l,a5
000012CC 2ABC 9401 9340             		move.l	#$94019340,(a5)
000012D2 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
000012D8 3ABC 977F                  		move.w	#$977F,(a5)
000012DC 3ABC 7800                  		move.w	#$7800,(a5)
000012E0 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
000012E6 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000012EA 4BF9 00C0 0004             		lea	($C00004).l,a5
000012F0 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
000012F6 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
000012FC 3ABC 977F                  		move.w	#$977F,(a5)
00001300 3ABC 7C00                  		move.w	#$7C00,(a5)
00001304 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000130A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000130E 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001316 4E75                       		rts	
00001318                            ; End of function sub_106E
00001318                            
00001318                            ; ---------------------------------------------------------------------------
00001318                            ; Subroutine to	move pallets from the RAM to CRAM
00001318                            ; ---------------------------------------------------------------------------
00001318                            
00001318                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001318                            
00001318                            
00001318                            PalToCRAM:
00001318 46FC 2700                  		move	#$2700,sr
0000131C 4A78 F644                  		tst.w	($FFFFF644).w
00001320 6700                       		beq.s	locret_119C
00001322 31FC 0000 F644             		move.w	#0,($FFFFF644).w
00001328 48E7 00C0                  		movem.l	a0-a1,-(sp)
0000132C 43F9 00C0 0000             		lea	($C00000).l,a1
00001332 41F8 FA80                  		lea	($FFFFFA80).w,a0 ; load	pallet from RAM
00001336 237C C000 0000 0004        		move.l	#$C0000000,4(a1) ; set VDP to CRAM write
0000133E 2298                       		move.l	(a0)+,(a1)	; move pallet to CRAM
00001340 2298                       		move.l	(a0)+,(a1)
00001342 2298                       		move.l	(a0)+,(a1)
00001344 2298                       		move.l	(a0)+,(a1)
00001346 2298                       		move.l	(a0)+,(a1)
00001348 2298                       		move.l	(a0)+,(a1)
0000134A 2298                       		move.l	(a0)+,(a1)
0000134C 2298                       		move.l	(a0)+,(a1)
0000134E 2298                       		move.l	(a0)+,(a1)
00001350 2298                       		move.l	(a0)+,(a1)
00001352 2298                       		move.l	(a0)+,(a1)
00001354 2298                       		move.l	(a0)+,(a1)
00001356 2298                       		move.l	(a0)+,(a1)
00001358 2298                       		move.l	(a0)+,(a1)
0000135A 2298                       		move.l	(a0)+,(a1)
0000135C 2298                       		move.l	(a0)+,(a1)
0000135E 2298                       		move.l	(a0)+,(a1)
00001360 2298                       		move.l	(a0)+,(a1)
00001362 2298                       		move.l	(a0)+,(a1)
00001364 2298                       		move.l	(a0)+,(a1)
00001366 2298                       		move.l	(a0)+,(a1)
00001368 2298                       		move.l	(a0)+,(a1)
0000136A 2298                       		move.l	(a0)+,(a1)
0000136C 2298                       		move.l	(a0)+,(a1)
0000136E 2298                       		move.l	(a0)+,(a1)
00001370 2298                       		move.l	(a0)+,(a1)
00001372 2298                       		move.l	(a0)+,(a1)
00001374 2298                       		move.l	(a0)+,(a1)
00001376 2298                       		move.l	(a0)+,(a1)
00001378 2298                       		move.l	(a0)+,(a1)
0000137A 2298                       		move.l	(a0)+,(a1)
0000137C 2298                       		move.l	(a0)+,(a1)
0000137E 337C 8ADF 0004             		move.w	#$8ADF,4(a1)
00001384 4CDF 0300                  		movem.l	(sp)+,a0-a1
00001388 4A38 F64F                  		tst.b	($FFFFF64F).w
0000138C 6600                       		bne.s	loc_119E
0000138E                            
0000138E                            locret_119C:
0000138E 4E73                       		rte	
00001390                            ; ===========================================================================
00001390                            
00001390                            loc_119E:				; XREF: PalToCRAM
00001390 4238 F64F                  		clr.b	($FFFFF64F).w
00001394 48E7 FFFE                  		movem.l	d0-a6,-(sp)
00001398 6100 FBDC                  		bsr.w	Demo_Time
0000139C 4EB9 0000 0000             		jsr	sub_71B4C
000013A2 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
000013A6 4E73                       		rte	
000013A8                            ; End of function PalToCRAM
000013A8                            
000013A8                            ; ---------------------------------------------------------------------------
000013A8                            ; Subroutine to	initialise joypads
000013A8                            ; ---------------------------------------------------------------------------
000013A8                            
000013A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000013A8                            
000013A8                            
000013A8                            JoypadInit:				; XREF: GameClrRAM
000013A8 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
000013B0                            
000013B0                            Joypad_WaitZ80:
000013B0 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has the Z80 stopped?
000013B8 66F6                       		bne.s	Joypad_WaitZ80	; if not, branch
000013BA 7040                       		moveq	#$40,d0
000013BC 13C0 00A1 0009             		move.b	d0,($A10009).l	; init port 1 (joypad 1)
000013C2 13C0 00A1 000B             		move.b	d0,($A1000B).l	; init port 2 (joypad 2)
000013C8 13C0 00A1 000D             		move.b	d0,($A1000D).l	; init port 3 (extra)
000013CE 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
000013D6 4E75                       		rts	
000013D8                            ; End of function JoypadInit
000013D8                            
000013D8                            ; ---------------------------------------------------------------------------
000013D8                            ; Subroutine to	read joypad input, and send it to the RAM
000013D8                            ; ---------------------------------------------------------------------------
000013D8                            
000013D8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000013D8                            
000013D8                            
000013D8                            ReadJoypads:
000013D8 41F8 F604                  		lea	($FFFFF604).w,a0 ; address where joypad	states are written
000013DC 43F9 00A1 0003             		lea	($A10003).l,a1	; first	joypad port
000013E2 6100                       		bsr.s	Joypad_Read	; do the first joypad
000013E4 5449                       		addq.w	#2,a1		; do the second	joypad
000013E6                            
000013E6                            Joypad_Read:
000013E6 12BC 0000                  		move.b	#0,(a1)
000013EA 4E71                       		nop	
000013EC 4E71                       		nop	
000013EE 1011                       		move.b	(a1),d0
000013F0 E508                       		lsl.b	#2,d0
000013F2 0200 00C0                  		andi.b	#$C0,d0
000013F6 12BC 0040                  		move.b	#$40,(a1)
000013FA 4E71                       		nop	
000013FC 4E71                       		nop	
000013FE 1211                       		move.b	(a1),d1
00001400 0201 003F                  		andi.b	#$3F,d1
00001404 8001                       		or.b	d1,d0
00001406 4600                       		not.b	d0
00001408 1210                       		move.b	(a0),d1
0000140A B101                       		eor.b	d0,d1
0000140C 10C0                       		move.b	d0,(a0)+
0000140E C200                       		and.b	d0,d1
00001410 10C1                       		move.b	d1,(a0)+
00001412 4E75                       		rts	
00001414                            ; End of function ReadJoypads
00001414                            
00001414                            
00001414                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001414                            
00001414                            
00001414                            VDPSetupGame:				; XREF: GameClrRAM; ChecksumError
00001414 41F9 00C0 0004             		lea	($C00004).l,a0
0000141A 43F9 00C0 0000             		lea	($C00000).l,a1
00001420 45F9 0000 0000             		lea	(VDPSetupArray).l,a2
00001426 7E12                       		moveq	#$12,d7
00001428                            
00001428                            VDP_Loop:
00001428 309A                       		move.w	(a2)+,(a0)
0000142A 51CF FFFC                  		dbf	d7,VDP_Loop	; set the VDP registers
0000142E                            
0000142E 3039 0000 0000             		move.w	(VDPSetupArray+2).l,d0
00001434 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w	; Is this a PAL console?
0000143A 6700                       		beq.s	.UseV28			; If not, skip
0000143C 08C0 0003                  		bset	#3,d0			; set v30 and pretend nothing happened
00001440                            .UseV28:
00001440 31C0 F60C                  		move.w	d0,($FFFFF60C).w
00001444 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
0000144A 7000                       		moveq	#0,d0
0000144C 23FC C000 0000 00C0 0004   		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
00001456 3E3C 003F                  		move.w	#$3F,d7
0000145A                            
0000145A                            VDP_ClrCRAM:
0000145A 3280                       		move.w	d0,(a1)
0000145C 51CF FFFC                  		dbf	d7,VDP_ClrCRAM	; clear	the CRAM
00001460                            
00001460 42B8 F616                  		clr.l	($FFFFF616).w
00001464 42B8 F61A                  		clr.l	($FFFFF61A).w
00001468 2F01                       		move.l	d1,-(sp)
0000146A 4BF9 00C0 0004             		lea	($C00004).l,a5
00001470 3ABC 8F01                  		move.w	#$8F01,(a5)
00001474 2ABC 94FF 93FF             		move.l	#$94FF93FF,(a5)
0000147A 3ABC 9780                  		move.w	#$9780,(a5)
0000147E 2ABC 4000 0080             		move.l	#$40000080,(a5)
00001484 33FC 0000 00C0 0000        		move.w	#0,($C00000).l	; clear	the screen
0000148C                            
0000148C                            loc_128E:
0000148C 3215                       		move.w	(a5),d1
0000148E 0801 0001                  		btst	#1,d1
00001492 66F8                       		bne.s	loc_128E
00001494                            
00001494 3ABC 8F02                  		move.w	#$8F02,(a5)
00001498 221F                       		move.l	(sp)+,d1
0000149A 4E75                       		rts	
0000149C                            ; End of function VDPSetupGame
0000149C                            
0000149C                            ; ===========================================================================
0000149C 8004 8134 8230 8328        VDPSetupArray:	dc.w $8004, $8134, $8230, $8328	; XREF: VDPSetupGame
000014A4 8407 857C 8600 8700        		dc.w $8407, $857C, $8600, $8700
000014AC 8800 8900 8A00 8B00        		dc.w $8800, $8900, $8A00, $8B00
000014B4 8C81 8D3F 8E00 8F02        		dc.w $8C81, $8D3F, $8E00, $8F02
000014BC 9001 9100 9200             		dc.w $9001, $9100, $9200
000014C2                            
000014C2                            ; ---------------------------------------------------------------------------
000014C2                            ; Subroutine to	clear the screen
000014C2                            ; ---------------------------------------------------------------------------
000014C2                            
000014C2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000014C2                            
000014C2                            
000014C2                            ClearScreen:
000014C2 4BF9 00C0 0004             		lea	($C00004).l,a5
000014C8 3ABC 8F01                  		move.w	#$8F01,(a5)
000014CC 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
000014D2 3ABC 9780                  		move.w	#$9780,(a5)
000014D6 2ABC 4000 0083             		move.l	#$40000083,(a5)
000014DC 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
000014E4                            
000014E4                            loc_12E6:
000014E4 3215                       		move.w	(a5),d1
000014E6 0801 0001                  		btst	#1,d1
000014EA 66F8                       		bne.s	loc_12E6
000014EC                            
000014EC 3ABC 8F02                  		move.w	#$8F02,(a5)
000014F0 4BF9 00C0 0004             		lea	($C00004).l,a5
000014F6 3ABC 8F01                  		move.w	#$8F01,(a5)
000014FA 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
00001500 3ABC 9780                  		move.w	#$9780,(a5)
00001504 2ABC 6000 0083             		move.l	#$60000083,(a5)
0000150A 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00001512                            
00001512                            loc_1314:
00001512 3215                       		move.w	(a5),d1
00001514 0801 0001                  		btst	#1,d1
00001518 66F8                       		bne.s	loc_1314
0000151A                            
0000151A 3ABC 8F02                  		move.w	#$8F02,(a5)
0000151E 21FC 0000 0000 F616        		move.l	#0,($FFFFF616).w
00001526 21FC 0000 0000 F61A        		move.l	#0,($FFFFF61A).w
0000152E 43F8 F800                  		lea	($FFFFF800).w,a1
00001532 7000                       		moveq	#0,d0
00001534 323C 009F                  		move.w	#$9F,d1
00001538                            
00001538                            loc_133A:
00001538 22C0                       		move.l	d0,(a1)+
0000153A 51C9 FFFC                  		dbf	d1,loc_133A
0000153E                            
0000153E 43F8 CC00                  		lea	($FFFFCC00).w,a1
00001542 7000                       		moveq	#0,d0
00001544 323C 00FF                  		move.w	#$FF,d1
00001548                            
00001548                            loc_134A:
00001548 22C0                       		move.l	d0,(a1)+
0000154A 51C9 FFFC                  		dbf	d1,loc_134A
0000154E 4E75                       		rts	
00001550                            ; End of function ClearScreen
00001550                            
00001550                            ; ---------------------------------------------------------------------------
00001550                            ; Subroutine to	load the sound driver
00001550                            ; ---------------------------------------------------------------------------
00001550                            
00001550                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001550                            
00001550                            
00001550                            SoundDriverLoad:			; XREF: GameClrRAM; TitleScreen
00001550 4E71                       		nop	
00001552 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
0000155A 33FC 0100 00A1 1200        		move.w	#$100,($A11200).l ; reset the Z80
00001562 41F9 0000 0000             		lea	(Kos_Z80).l,a0	; load sound driver
00001568 43F9 00A0 0000             		lea	($A00000).l,a1
0000156E 6100 0000                  		bsr.w	KosDec		; decompress
00001572 33FC 0000 00A1 1200        		move.w	#0,($A11200).l
0000157A 4E71                       		nop	
0000157C 4E71                       		nop	
0000157E 4E71                       		nop	
00001580 4E71                       		nop	
00001582 33FC 0100 00A1 1200        		move.w	#$100,($A11200).l ; reset the Z80
0000158A 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001592 4E75                       		rts	
00001594                            ; End of function SoundDriverLoad
00001594                            
00001594                            ; ---------------------------------------------------------------------------
00001594                            ; Subroutine to	play a sound or	music track
00001594                            ; ---------------------------------------------------------------------------
00001594                            
00001594                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001594                            
00001594                            
00001594                            PlaySound:
00001594 11C0 F00A                  		move.b	d0,($FFFFF00A).w
00001598 4E75                       		rts	
0000159A                            ; End of function PlaySound
0000159A                            
0000159A                            ; ---------------------------------------------------------------------------
0000159A                            ; Subroutine to	play a special sound/music (E0-E4)
0000159A                            ;
0000159A                            ; E0 - Fade out
0000159A                            ; E1 - Sega
0000159A                            ; E2 - Speed up
0000159A                            ; E3 - Normal speed
0000159A                            ; E4 - Stop
0000159A                            ; ---------------------------------------------------------------------------
0000159A                            
0000159A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000159A                            
0000159A                            
0000159A                            PlaySound_Special:
0000159A 11C0 F00B                  		move.b	d0,($FFFFF00B).w
0000159E 4E75                       		rts	
000015A0                            ; End of function PlaySound_Special
000015A0                            
000015A0                            ; ===========================================================================
000015A0                            ; ---------------------------------------------------------------------------
000015A0                            ; Unused sound/music subroutine
000015A0                            ; ---------------------------------------------------------------------------
000015A0                            
000015A0                            PlaySound_Unk:
000015A0 11C0 F00C                  		move.b	d0,($FFFFF00C).w
000015A4 4E75                       		rts	
000015A6                            
000015A6                            ; ---------------------------------------------------------------------------
000015A6                            ; Subroutine to	pause the game
000015A6                            ; ---------------------------------------------------------------------------
000015A6                            
000015A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015A6                            
000015A6                            
000015A6                            PauseGame:				; XREF: Level_MainLoop; et al
000015A6 4E71                       		nop	
000015A8 4A38 FE12                  		tst.b	($FFFFFE12).w	; do you have any lives	left?
000015AC 6700                       		beq.s	Unpause		; if not, branch
000015AE 4A78 F63A                  		tst.w	($FFFFF63A).w	; is game already paused?
000015B2 6600                       		bne.s	loc_13BE	; if yes, branch
000015B4 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
000015BA 6700                       		beq.s	Pause_DoNothing	; if not, branch
000015BC                            
000015BC                            loc_13BE:
000015BC 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w ; freeze time
000015C2 11FC 0001 F003             		move.b	#1,($FFFFF003).w ; pause music
000015C8                            
000015C8                            loc_13CA:
000015C8 11FC 0010 F62A             		move.b	#$10,($FFFFF62A).w
000015CE 6100 0000                  		bsr.w	DelayProgram
000015D2 4A38 FFE1                  		tst.b	($FFFFFFE1).w	; is slow-motion cheat on?
000015D6 6700                       		beq.s	Pause_ChkStart	; if not, branch
000015D8 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
000015DE 6700                       		beq.s	Pause_ChkBC	; if not, branch
000015E0 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; set game mode to 4 (title screen)
000015E6 4E71                       		nop	
000015E8 6000                       		bra.s	loc_1404
000015EA                            ; ===========================================================================
000015EA                            
000015EA                            Pause_ChkBC:				; XREF: PauseGame
000015EA 0838 0004 F604             		btst	#4,($FFFFF604).w ; is button B pressed?
000015F0 6600                       		bne.s	Pause_SlowMo	; if yes, branch
000015F2 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
000015F8 6600                       		bne.s	Pause_SlowMo	; if yes, branch
000015FA                            
000015FA                            Pause_ChkStart:				; XREF: PauseGame
000015FA 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
00001600 67C6                       		beq.s	loc_13CA	; if not, branch
00001602                            
00001602                            loc_1404:				; XREF: PauseGame
00001602 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
00001608                            
00001608                            Unpause:				; XREF: PauseGame
00001608 31FC 0000 F63A             		move.w	#0,($FFFFF63A).w ; unpause the game
0000160E                            
0000160E                            Pause_DoNothing:			; XREF: PauseGame
0000160E 4E75                       		rts	
00001610                            ; ===========================================================================
00001610                            
00001610                            Pause_SlowMo:				; XREF: PauseGame
00001610 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w
00001616 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
0000161C 4E75                       		rts	
0000161E                            ; End of function PauseGame
0000161E                            
0000161E                            ; ---------------------------------------------------------------------------
0000161E                            ; Subroutine to	display	patterns via the VDP
0000161E                            ; ---------------------------------------------------------------------------
0000161E                            
0000161E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000161E                            
0000161E                            
0000161E                            ShowVDPGraphics:			; XREF: SegaScreen; TitleScreen; SS_BGLoad
0000161E 4DF9 00C0 0000             		lea	($C00000).l,a6
00001624 283C 0080 0000             		move.l	#$800000,d4
0000162A                            
0000162A                            loc_142C:
0000162A 2D40 0004                  		move.l	d0,4(a6)
0000162E 3601                       		move.w	d1,d3
00001630                            
00001630                            loc_1432:
00001630 3C99                       		move.w	(a1)+,(a6)
00001632 51CB FFFC                  		dbf	d3,loc_1432
00001636 D084                       		add.l	d4,d0
00001638 51CA FFF0                  		dbf	d2,loc_142C
0000163C 4E75                       		rts	
0000163E                            ; End of function ShowVDPGraphics
0000163E                            
0000163E                            ; ---------------------------------------------------------------------------
0000163E                            ; Nemesis decompression	algorithm
0000163E                            ; ---------------------------------------------------------------------------
0000163E                            
0000163E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000163E                            
0000163E                            
0000163E                            NemDec:
0000163E 48E7 FFDC                  		movem.l	d0-a1/a3-a5,-(sp)
00001642 47F9 0000 0000             		lea	(loc_1502).l,a3
00001648 49F9 00C0 0000             		lea	($C00000).l,a4
0000164E 6000                       		bra.s	loc_145C
00001650                            ; ===========================================================================
00001650 48E7 FFDC                  		movem.l	d0-a1/a3-a5,-(sp)
00001654 47F9 0000 0000             		lea	(loc_1518).l,a3
0000165A                            
0000165A                            loc_145C:				; XREF: NemDec
0000165A 43F8 AA00                  		lea	($FFFFAA00).w,a1
0000165E 3418                       		move.w	(a0)+,d2
00001660 E34A                       		lsl.w	#1,d2
00001662 6400                       		bcc.s	loc_146A
00001664 D6FC 000A                  		adda.w	#$A,a3
00001668                            
00001668                            loc_146A:
00001668 E54A                       		lsl.w	#2,d2
0000166A 3A42                       		movea.w	d2,a5
0000166C 7608                       		moveq	#8,d3
0000166E 7400                       		moveq	#0,d2
00001670 7800                       		moveq	#0,d4
00001672 6100 0000                  		bsr.w	NemDec4
00001676 1A18                       		move.b	(a0)+,d5
00001678 E145                       		asl.w	#8,d5
0000167A 1A18                       		move.b	(a0)+,d5
0000167C 3C3C 0010                  		move.w	#$10,d6
00001680 6100                       		bsr.s	NemDec2
00001682 4CDF 3BFF                  		movem.l	(sp)+,d0-a1/a3-a5
00001686 4E75                       		rts	
00001688                            ; End of function NemDec
00001688                            
00001688                            
00001688                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001688                            
00001688                            
00001688                            NemDec2:				; XREF: NemDec
00001688 3E06                       		move.w	d6,d7
0000168A 5147                       		subq.w	#8,d7
0000168C 3205                       		move.w	d5,d1
0000168E EE69                       		lsr.w	d7,d1
00001690 0C01 00FC                  		cmpi.b	#-4,d1
00001694 6400                       		bcc.s	loc_14D6
00001696 0241 00FF                  		andi.w	#$FF,d1
0000169A D241                       		add.w	d1,d1
0000169C 1031 1000                  		move.b	(a1,d1.w),d0
000016A0 4880                       		ext.w	d0
000016A2 9C40                       		sub.w	d0,d6
000016A4 0C46 0009                  		cmpi.w	#9,d6
000016A8 6400                       		bcc.s	loc_14B2
000016AA 5046                       		addq.w	#8,d6
000016AC E145                       		asl.w	#8,d5
000016AE 1A18                       		move.b	(a0)+,d5
000016B0                            
000016B0                            loc_14B2:
000016B0 1231 1001                  		move.b	1(a1,d1.w),d1
000016B4 3001                       		move.w	d1,d0
000016B6 0241 000F                  		andi.w	#$F,d1
000016BA 0240 00F0                  		andi.w	#$F0,d0
000016BE                            
000016BE                            loc_14C0:				; XREF: NemDec3
000016BE E848                       		lsr.w	#4,d0
000016C0                            
000016C0                            loc_14C2:				; XREF: NemDec3
000016C0 E98C                       		lsl.l	#4,d4
000016C2 8801                       		or.b	d1,d4
000016C4 5343                       		subq.w	#1,d3
000016C6 6600                       		bne.s	loc_14D0
000016C8 4ED3                       		jmp	(a3)
000016CA                            ; End of function NemDec2
000016CA                            
000016CA                            
000016CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000016CA                            
000016CA                            
000016CA                            NemDec3:				; XREF: loc_1502
000016CA 7800                       		moveq	#0,d4
000016CC 7608                       		moveq	#8,d3
000016CE                            
000016CE                            loc_14D0:				; XREF: NemDec2
000016CE 51C8 FFF0                  		dbf	d0,loc_14C2
000016D2 60B4                       		bra.s	NemDec2
000016D4                            ; ===========================================================================
000016D4                            
000016D4                            loc_14D6:				; XREF: NemDec2
000016D4 5D46                       		subq.w	#6,d6
000016D6 0C46 0009                  		cmpi.w	#9,d6
000016DA 6400                       		bcc.s	loc_14E4
000016DC 5046                       		addq.w	#8,d6
000016DE E145                       		asl.w	#8,d5
000016E0 1A18                       		move.b	(a0)+,d5
000016E2                            
000016E2                            loc_14E4:				; XREF: NemDec3
000016E2 5F46                       		subq.w	#7,d6
000016E4 3205                       		move.w	d5,d1
000016E6 EC69                       		lsr.w	d6,d1
000016E8 3001                       		move.w	d1,d0
000016EA 0241 000F                  		andi.w	#$F,d1
000016EE 0240 0070                  		andi.w	#$70,d0
000016F2 0C46 0009                  		cmpi.w	#9,d6
000016F6 64C6                       		bcc.s	loc_14C0
000016F8 5046                       		addq.w	#8,d6
000016FA E145                       		asl.w	#8,d5
000016FC 1A18                       		move.b	(a0)+,d5
000016FE 60BE                       		bra.s	loc_14C0
00001700                            ; End of function NemDec3
00001700                            
00001700                            ; ===========================================================================
00001700                            
00001700                            loc_1502:				; XREF: NemDec
00001700 2884                       		move.l	d4,(a4)
00001702 534D                       		subq.w	#1,a5
00001704 380D                       		move.w	a5,d4
00001706 66C2                       		bne.s	NemDec3
00001708 4E75                       		rts	
0000170A                            ; ===========================================================================
0000170A B982                       		eor.l	d4,d2
0000170C 2882                       		move.l	d2,(a4)
0000170E 534D                       		subq.w	#1,a5
00001710 380D                       		move.w	a5,d4
00001712 66B6                       		bne.s	NemDec3
00001714 4E75                       		rts	
00001716                            ; ===========================================================================
00001716                            
00001716                            loc_1518:				; XREF: NemDec
00001716 28C4                       		move.l	d4,(a4)+
00001718 534D                       		subq.w	#1,a5
0000171A 380D                       		move.w	a5,d4
0000171C 66AC                       		bne.s	NemDec3
0000171E 4E75                       		rts	
00001720                            ; ===========================================================================
00001720 B982                       		eor.l	d4,d2
00001722 28C2                       		move.l	d2,(a4)+
00001724 534D                       		subq.w	#1,a5
00001726 380D                       		move.w	a5,d4
00001728 66A0                       		bne.s	NemDec3
0000172A 4E75                       		rts	
0000172C                            
0000172C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000172C                            
0000172C                            
0000172C                            NemDec4:				; XREF: NemDec
0000172C 1018                       		move.b	(a0)+,d0
0000172E                            
0000172E                            loc_1530:
0000172E 0C00 00FF                  		cmpi.b	#-1,d0
00001732 6600                       		bne.s	loc_1538
00001734 4E75                       		rts	
00001736                            ; ===========================================================================
00001736                            
00001736                            loc_1538:				; XREF: NemDec4
00001736 3E00                       		move.w	d0,d7
00001738                            
00001738                            loc_153A:
00001738 1018                       		move.b	(a0)+,d0
0000173A 0C00 0080                  		cmpi.b	#$80,d0
0000173E 64EE                       		bcc.s	loc_1530
00001740 1200                       		move.b	d0,d1
00001742 0247 000F                  		andi.w	#$F,d7
00001746 0241 0070                  		andi.w	#$70,d1
0000174A 8E41                       		or.w	d1,d7
0000174C 0240 000F                  		andi.w	#$F,d0
00001750 1200                       		move.b	d0,d1
00001752 E149                       		lsl.w	#8,d1
00001754 8E41                       		or.w	d1,d7
00001756 7208                       		moveq	#8,d1
00001758 9240                       		sub.w	d0,d1
0000175A 6600                       		bne.s	loc_1568
0000175C 1018                       		move.b	(a0)+,d0
0000175E D040                       		add.w	d0,d0
00001760 3387 0000                  		move.w	d7,(a1,d0.w)
00001764 60D2                       		bra.s	loc_153A
00001766                            ; ===========================================================================
00001766                            
00001766                            loc_1568:				; XREF: NemDec4
00001766 1018                       		move.b	(a0)+,d0
00001768 E368                       		lsl.w	d1,d0
0000176A D040                       		add.w	d0,d0
0000176C 7A01                       		moveq	#1,d5
0000176E E36D                       		lsl.w	d1,d5
00001770 5345                       		subq.w	#1,d5
00001772                            
00001772                            loc_1574:
00001772 3387 0000                  		move.w	d7,(a1,d0.w)
00001776 5440                       		addq.w	#2,d0
00001778 51CD FFF8                  		dbf	d5,loc_1574
0000177C 60BA                       		bra.s	loc_153A
0000177E                            ; End of function NemDec4
0000177E                            
0000177E                            ; ---------------------------------------------------------------------------
0000177E                            ; Subroutine to	load pattern load cues
0000177E                            ; ---------------------------------------------------------------------------
0000177E                            
0000177E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000177E                            
0000177E                            
0000177E                            LoadPLC:
0000177E 48E7 0060                  		movem.l	a1-a2,-(sp)
00001782 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
00001788 D040                       		add.w	d0,d0
0000178A 3031 0000                  		move.w	(a1,d0.w),d0
0000178E 43F1 0000                  		lea	(a1,d0.w),a1
00001792 45F8 F680                  		lea	($FFFFF680).w,a2
00001796                            
00001796                            loc_1598:
00001796 4A92                       		tst.l	(a2)
00001798 6700                       		beq.s	loc_15A0
0000179A 5C4A                       		addq.w	#6,a2
0000179C 60F8                       		bra.s	loc_1598
0000179E                            ; ===========================================================================
0000179E                            
0000179E                            loc_15A0:				; XREF: LoadPLC
0000179E 3019                       		move.w	(a1)+,d0
000017A0 6B00                       		bmi.s	loc_15AC
000017A2                            
000017A2                            loc_15A4:
000017A2 24D9                       		move.l	(a1)+,(a2)+
000017A4 34D9                       		move.w	(a1)+,(a2)+
000017A6 51C8 FFFA                  		dbf	d0,loc_15A4
000017AA                            
000017AA                            loc_15AC:
000017AA 4CDF 0600                  		movem.l	(sp)+,a1-a2
000017AE 4E75                       		rts	
000017B0                            ; End of function LoadPLC
000017B0                            
000017B0                            
000017B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017B0                            
000017B0                            
000017B0                            LoadPLC2:
000017B0 48E7 0060                  		movem.l	a1-a2,-(sp)
000017B4 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
000017BA D040                       		add.w	d0,d0
000017BC 3031 0000                  		move.w	(a1,d0.w),d0
000017C0 43F1 0000                  		lea	(a1,d0.w),a1
000017C4 6100                       		bsr.s	ClearPLC
000017C6 45F8 F680                  		lea	($FFFFF680).w,a2
000017CA 3019                       		move.w	(a1)+,d0
000017CC 6B00                       		bmi.s	loc_15D8
000017CE                            
000017CE                            loc_15D0:
000017CE 24D9                       		move.l	(a1)+,(a2)+
000017D0 34D9                       		move.w	(a1)+,(a2)+
000017D2 51C8 FFFA                  		dbf	d0,loc_15D0
000017D6                            
000017D6                            loc_15D8:
000017D6 4CDF 0600                  		movem.l	(sp)+,a1-a2
000017DA 4E75                       		rts	
000017DC                            ; End of function LoadPLC2
000017DC                            
000017DC                            ; ---------------------------------------------------------------------------
000017DC                            ; Subroutine to	clear the pattern load cues
000017DC                            ; ---------------------------------------------------------------------------
000017DC                            
000017DC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017DC                            
000017DC                            
000017DC                            ClearPLC:				; XREF: LoadPLC2
000017DC 45F8 F680                  		lea	($FFFFF680).w,a2
000017E0 701F                       		moveq	#$1F,d0
000017E2                            
000017E2                            ClearPLC_Loop:
000017E2 429A                       		clr.l	(a2)+
000017E4 51C8 FFFC                  		dbf	d0,ClearPLC_Loop
000017E8 4E75                       		rts	
000017EA                            ; End of function ClearPLC
000017EA                            
000017EA                            ; ---------------------------------------------------------------------------
000017EA                            ; Subroutine to	use graphics listed in a pattern load cue
000017EA                            ; ---------------------------------------------------------------------------
000017EA                            
000017EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017EA                            
000017EA                            
000017EA                            RunPLC_RAM:				; XREF: Pal_FadeTo
000017EA 4AB8 F680                  		tst.l	($FFFFF680).w
000017EE 6700                       		beq.s	locret_1640
000017F0 4A78 F6F8                  		tst.w	($FFFFF6F8).w
000017F4 6600                       		bne.s	locret_1640
000017F6 2078 F680                  		movea.l	($FFFFF680).w,a0
000017FA 47F9 0000 1700             		lea	(loc_1502).l,a3
00001800 43F8 AA00                  		lea	($FFFFAA00).w,a1
00001804 3418                       		move.w	(a0)+,d2
00001806 6A00                       		bpl.s	loc_160E
00001808 D6FC 000A                  		adda.w	#$A,a3
0000180C                            
0000180C                            loc_160E:
0000180C 0242 7FFF                  		andi.w	#$7FFF,d2
00001810 31C2 F6F8                  		move.w	d2,($FFFFF6F8).w
00001814 6100 FF16                  		bsr.w	NemDec4
00001818 1A18                       		move.b	(a0)+,d5
0000181A E145                       		asl.w	#8,d5
0000181C 1A18                       		move.b	(a0)+,d5
0000181E 7C10                       		moveq	#$10,d6
00001820 7000                       		moveq	#0,d0
00001822 21C8 F680                  		move.l	a0,($FFFFF680).w
00001826 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
0000182A 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
0000182E 21C0 F6E8                  		move.l	d0,($FFFFF6E8).w
00001832 21C0 F6EC                  		move.l	d0,($FFFFF6EC).w
00001836 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
0000183A 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
0000183E                            
0000183E                            locret_1640:
0000183E 4E75                       		rts	
00001840                            ; End of function RunPLC_RAM
00001840                            
00001840                            
00001840                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001840                            
00001840                            
00001840                            sub_1642:				; XREF: loc_C44; loc_F54; loc_F9A
00001840 4A78 F6F8                  		tst.w	($FFFFF6F8).w
00001844 6700 0000                  		beq.w	locret_16DA
00001848 31FC 0009 F6FA             		move.w	#9,($FFFFF6FA).w
0000184E 7000                       		moveq	#0,d0
00001850 3038 F684                  		move.w	($FFFFF684).w,d0
00001854 0678 0120 F684             		addi.w	#$120,($FFFFF684).w
0000185A 6000                       		bra.s	loc_1676
0000185C                            ; End of function sub_1642
0000185C                            
0000185C                            
0000185C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000185C                            
0000185C                            
0000185C                            sub_165E:				; XREF: Demo_Time
0000185C 4A78 F6F8                  		tst.w	($FFFFF6F8).w
00001860 6700                       		beq.s	locret_16DA
00001862 31FC 0003 F6FA             		move.w	#3,($FFFFF6FA).w
00001868 7000                       		moveq	#0,d0
0000186A 3038 F684                  		move.w	($FFFFF684).w,d0
0000186E 0678 0060 F684             		addi.w	#$60,($FFFFF684).w
00001874                            
00001874                            loc_1676:				; XREF: sub_1642
00001874 49F9 00C0 0004             		lea	($C00004).l,a4
0000187A E588                       		lsl.l	#2,d0
0000187C E448                       		lsr.w	#2,d0
0000187E 0040 4000                  		ori.w	#$4000,d0
00001882 4840                       		swap	d0
00001884 2880                       		move.l	d0,(a4)
00001886 594C                       		subq.w	#4,a4
00001888 2078 F680                  		movea.l	($FFFFF680).w,a0
0000188C 2678 F6E0                  		movea.l	($FFFFF6E0).w,a3
00001890 2038 F6E4                  		move.l	($FFFFF6E4).w,d0
00001894 2238 F6E8                  		move.l	($FFFFF6E8).w,d1
00001898 2438 F6EC                  		move.l	($FFFFF6EC).w,d2
0000189C 2A38 F6F0                  		move.l	($FFFFF6F0).w,d5
000018A0 2C38 F6F4                  		move.l	($FFFFF6F4).w,d6
000018A4 43F8 AA00                  		lea	($FFFFAA00).w,a1
000018A8                            
000018A8                            loc_16AA:				; XREF: sub_165E
000018A8 3A7C 0008                  		movea.w	#8,a5
000018AC 6100 FE1C                  		bsr.w	NemDec3
000018B0 5378 F6F8                  		subq.w	#1,($FFFFF6F8).w
000018B4 6700                       		beq.s	loc_16DC
000018B6 5378 F6FA                  		subq.w	#1,($FFFFF6FA).w
000018BA 66EC                       		bne.s	loc_16AA
000018BC 21C8 F680                  		move.l	a0,($FFFFF680).w
000018C0 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
000018C4 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
000018C8 21C1 F6E8                  		move.l	d1,($FFFFF6E8).w
000018CC 21C2 F6EC                  		move.l	d2,($FFFFF6EC).w
000018D0 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
000018D4 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
000018D8                            
000018D8                            locret_16DA:				; XREF: sub_1642
000018D8 4E75                       		rts	
000018DA                            ; ===========================================================================
000018DA                            
000018DA                            loc_16DC:				; XREF: sub_165E
000018DA 41F8 F680                  		lea	($FFFFF680).w,a0
000018DE 7015                       		moveq	#$15,d0
000018E0                            
000018E0                            loc_16E2:				; XREF: sub_165E
000018E0 20E8 0006                  		move.l	6(a0),(a0)+
000018E4 51C8 FFFA                  		dbf	d0,loc_16E2
000018E8 4E75                       		rts	
000018EA                            ; End of function sub_165E
000018EA                            
000018EA                            ; ---------------------------------------------------------------------------
000018EA                            ; Subroutine to	execute	the pattern load cue
000018EA                            ; ---------------------------------------------------------------------------
000018EA                            
000018EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000018EA                            
000018EA                            
000018EA                            RunPLC_ROM:
000018EA 43F9 0000 0000             		lea	(ArtLoadCues).l,a1 ; load the PLC index
000018F0 D040                       		add.w	d0,d0
000018F2 3031 0000                  		move.w	(a1,d0.w),d0
000018F6 43F1 0000                  		lea	(a1,d0.w),a1
000018FA 3219                       		move.w	(a1)+,d1	; load number of entries in the	PLC
000018FC                            
000018FC                            RunPLC_Loop:
000018FC 2059                       		movea.l	(a1)+,a0	; get art pointer
000018FE 7000                       		moveq	#0,d0
00001900 3019                       		move.w	(a1)+,d0	; get VRAM address
00001902 E588                       		lsl.l	#2,d0		; divide address by $20
00001904 E448                       		lsr.w	#2,d0
00001906 0040 4000                  		ori.w	#$4000,d0
0000190A 4840                       		swap	d0
0000190C 23C0 00C0 0004             		move.l	d0,($C00004).l	; put the VRAM address into VDP
00001912 6100 FD2A                  		bsr.w	NemDec		; decompress
00001916 51C9 FFE4                  		dbf	d1,RunPLC_Loop	; loop for number of entries
0000191A 4E75                       		rts	
0000191C                            ; End of function RunPLC_ROM
0000191C                            
0000191C                            ; ---------------------------------------------------------------------------
0000191C                            ; Enigma decompression algorithm
0000191C                            ; ---------------------------------------------------------------------------
0000191C                            
0000191C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000191C                            
0000191C                            
0000191C                            EniDec:
0000191C 48E7 FF7C                  		movem.l	d0-d7/a1-a5,-(sp)
00001920 3640                       		movea.w	d0,a3
00001922 1018                       		move.b	(a0)+,d0
00001924 4880                       		ext.w	d0
00001926 3A40                       		movea.w	d0,a5
00001928 1818                       		move.b	(a0)+,d4
0000192A E70C                       		lsl.b	#3,d4
0000192C 3458                       		movea.w	(a0)+,a2
0000192E D4CB                       		adda.w	a3,a2
00001930 3858                       		movea.w	(a0)+,a4
00001932 D8CB                       		adda.w	a3,a4
00001934 1A18                       		move.b	(a0)+,d5
00001936 E145                       		asl.w	#8,d5
00001938 1A18                       		move.b	(a0)+,d5
0000193A 7C10                       		moveq	#$10,d6
0000193C                            
0000193C                            loc_173E:				; XREF: loc_1768
0000193C 7007                       		moveq	#7,d0
0000193E 3E06                       		move.w	d6,d7
00001940 9E40                       		sub.w	d0,d7
00001942 3205                       		move.w	d5,d1
00001944 EE69                       		lsr.w	d7,d1
00001946 0241 007F                  		andi.w	#$7F,d1
0000194A 3401                       		move.w	d1,d2
0000194C 0C41 0040                  		cmpi.w	#$40,d1
00001950 6400                       		bcc.s	loc_1758
00001952 7006                       		moveq	#6,d0
00001954 E24A                       		lsr.w	#1,d2
00001956                            
00001956                            loc_1758:
00001956 6100 0000                  		bsr.w	sub_188C
0000195A 0242 000F                  		andi.w	#$F,d2
0000195E E849                       		lsr.w	#4,d1
00001960 D241                       		add.w	d1,d1
00001962 4EFB 1000                  		jmp	loc_17B4(pc,d1.w)
00001966                            ; End of function EniDec
00001966                            
00001966                            ; ===========================================================================
00001966                            
00001966                            loc_1768:				; XREF: loc_17B4
00001966 32CA                       		move.w	a2,(a1)+
00001968 524A                       		addq.w	#1,a2
0000196A 51CA FFFA                  		dbf	d2,loc_1768
0000196E 60CC                       		bra.s	loc_173E
00001970                            ; ===========================================================================
00001970                            
00001970                            loc_1772:				; XREF: loc_17B4
00001970 32CC                       		move.w	a4,(a1)+
00001972 51CA FFFC                  		dbf	d2,loc_1772
00001976 60C4                       		bra.s	loc_173E
00001978                            ; ===========================================================================
00001978                            
00001978                            loc_177A:				; XREF: loc_17B4
00001978 6100 0000                  		bsr.w	loc_17DC
0000197C                            
0000197C                            loc_177E:
0000197C 32C1                       		move.w	d1,(a1)+
0000197E 51CA FFFC                  		dbf	d2,loc_177E
00001982 60B8                       		bra.s	loc_173E
00001984                            ; ===========================================================================
00001984                            
00001984                            loc_1786:				; XREF: loc_17B4
00001984 6100 0000                  		bsr.w	loc_17DC
00001988                            
00001988                            loc_178A:
00001988 32C1                       		move.w	d1,(a1)+
0000198A 5241                       		addq.w	#1,d1
0000198C 51CA FFFA                  		dbf	d2,loc_178A
00001990 60AA                       		bra.s	loc_173E
00001992                            ; ===========================================================================
00001992                            
00001992                            loc_1794:				; XREF: loc_17B4
00001992 6100 0000                  		bsr.w	loc_17DC
00001996                            
00001996                            loc_1798:
00001996 32C1                       		move.w	d1,(a1)+
00001998 5341                       		subq.w	#1,d1
0000199A 51CA FFFA                  		dbf	d2,loc_1798
0000199E 609C                       		bra.s	loc_173E
000019A0                            ; ===========================================================================
000019A0                            
000019A0                            loc_17A2:				; XREF: loc_17B4
000019A0 0C42 000F                  		cmpi.w	#$F,d2
000019A4 6700                       		beq.s	loc_17C4
000019A6                            
000019A6                            loc_17A8:
000019A6 6100 0000                  		bsr.w	loc_17DC
000019AA 32C1                       		move.w	d1,(a1)+
000019AC 51CA FFF8                  		dbf	d2,loc_17A8
000019B0 608A                       		bra.s	loc_173E
000019B2                            ; ===========================================================================
000019B2                            
000019B2                            loc_17B4:				; XREF: EniDec
000019B2 60B2                       		bra.s	loc_1768
000019B4                            ; ===========================================================================
000019B4 60B0                       		bra.s	loc_1768
000019B6                            ; ===========================================================================
000019B6 60B8                       		bra.s	loc_1772
000019B8                            ; ===========================================================================
000019B8 60B6                       		bra.s	loc_1772
000019BA                            ; ===========================================================================
000019BA 60BC                       		bra.s	loc_177A
000019BC                            ; ===========================================================================
000019BC 60C6                       		bra.s	loc_1786
000019BE                            ; ===========================================================================
000019BE 60D2                       		bra.s	loc_1794
000019C0                            ; ===========================================================================
000019C0 60DE                       		bra.s	loc_17A2
000019C2                            ; ===========================================================================
000019C2                            
000019C2                            loc_17C4:				; XREF: loc_17A2
000019C2 5348                       		subq.w	#1,a0
000019C4 0C46 0010                  		cmpi.w	#$10,d6
000019C8 6600                       		bne.s	loc_17CE
000019CA 5348                       		subq.w	#1,a0
000019CC                            
000019CC                            loc_17CE:
000019CC 3008                       		move.w	a0,d0
000019CE E248                       		lsr.w	#1,d0
000019D0 6400                       		bcc.s	loc_17D6
000019D2 5248                       		addq.w	#1,a0
000019D4                            
000019D4                            loc_17D6:
000019D4 4CDF 3EFF                  		movem.l	(sp)+,d0-d7/a1-a5
000019D8 4E75                       		rts	
000019DA                            ; ===========================================================================
000019DA                            
000019DA                            loc_17DC:				; XREF: loc_17A2
000019DA 360B                       		move.w	a3,d3
000019DC 1204                       		move.b	d4,d1
000019DE D201                       		add.b	d1,d1
000019E0 6400                       		bcc.s	loc_17EE
000019E2 5346                       		subq.w	#1,d6
000019E4 0D05                       		btst	d6,d5
000019E6 6700                       		beq.s	loc_17EE
000019E8 0043 8000                  		ori.w	#-$8000,d3
000019EC                            
000019EC                            loc_17EE:
000019EC D201                       		add.b	d1,d1
000019EE 6400                       		bcc.s	loc_17FC
000019F0 5346                       		subq.w	#1,d6
000019F2 0D05                       		btst	d6,d5
000019F4 6700                       		beq.s	loc_17FC
000019F6 0643 4000                  		addi.w	#$4000,d3
000019FA                            
000019FA                            loc_17FC:
000019FA D201                       		add.b	d1,d1
000019FC 6400                       		bcc.s	loc_180A
000019FE 5346                       		subq.w	#1,d6
00001A00 0D05                       		btst	d6,d5
00001A02 6700                       		beq.s	loc_180A
00001A04 0643 2000                  		addi.w	#$2000,d3
00001A08                            
00001A08                            loc_180A:
00001A08 D201                       		add.b	d1,d1
00001A0A 6400                       		bcc.s	loc_1818
00001A0C 5346                       		subq.w	#1,d6
00001A0E 0D05                       		btst	d6,d5
00001A10 6700                       		beq.s	loc_1818
00001A12 0043 1000                  		ori.w	#$1000,d3
00001A16                            
00001A16                            loc_1818:
00001A16 D201                       		add.b	d1,d1
00001A18 6400                       		bcc.s	loc_1826
00001A1A 5346                       		subq.w	#1,d6
00001A1C 0D05                       		btst	d6,d5
00001A1E 6700                       		beq.s	loc_1826
00001A20 0043 0800                  		ori.w	#$800,d3
00001A24                            
00001A24                            loc_1826:
00001A24 3205                       		move.w	d5,d1
00001A26 3E06                       		move.w	d6,d7
00001A28 9E4D                       		sub.w	a5,d7
00001A2A 6400                       		bcc.s	loc_1856
00001A2C 3C07                       		move.w	d7,d6
00001A2E 0646 0010                  		addi.w	#$10,d6
00001A32 4447                       		neg.w	d7
00001A34 EF69                       		lsl.w	d7,d1
00001A36 1A10                       		move.b	(a0),d5
00001A38 EF3D                       		rol.b	d7,d5
00001A3A DE47                       		add.w	d7,d7
00001A3C CA7B 7000                  		and.w	word_186C-2(pc,d7.w),d5
00001A40 D245                       		add.w	d5,d1
00001A42                            
00001A42                            loc_1844:				; XREF: loc_1868
00001A42 300D                       		move.w	a5,d0
00001A44 D040                       		add.w	d0,d0
00001A46 C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
00001A4A D243                       		add.w	d3,d1
00001A4C 1A18                       		move.b	(a0)+,d5
00001A4E E14D                       		lsl.w	#8,d5
00001A50 1A18                       		move.b	(a0)+,d5
00001A52 4E75                       		rts	
00001A54                            ; ===========================================================================
00001A54                            
00001A54                            loc_1856:				; XREF: loc_1826
00001A54 6700                       		beq.s	loc_1868
00001A56 EE69                       		lsr.w	d7,d1
00001A58 300D                       		move.w	a5,d0
00001A5A D040                       		add.w	d0,d0
00001A5C C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
00001A60 D243                       		add.w	d3,d1
00001A62 300D                       		move.w	a5,d0
00001A64 6000                       		bra.s	sub_188C
00001A66                            ; ===========================================================================
00001A66                            
00001A66                            loc_1868:				; XREF: loc_1856
00001A66 7C10                       		moveq	#$10,d6
00001A68                            
00001A68                            loc_186A:
00001A68 60D8                       		bra.s	loc_1844
00001A6A                            ; ===========================================================================
00001A6A 0001 0003 0007 000F 001F+  word_186C:	dc.w 1,	3, 7, $F, $1F, $3F, $7F, $FF, $1FF, $3FF, $7FF
00001A80 0FFF 1FFF 3FFF 7FFF FFFF   		dc.w $FFF, $1FFF, $3FFF, $7FFF,	$FFFF	; XREF: loc_1856
00001A8A                            
00001A8A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001A8A                            
00001A8A                            
00001A8A                            sub_188C:				; XREF: EniDec
00001A8A 9C40                       		sub.w	d0,d6
00001A8C 0C46 0009                  		cmpi.w	#9,d6
00001A90 6400                       		bcc.s	locret_189A
00001A92 5046                       		addq.w	#8,d6
00001A94 E145                       		asl.w	#8,d5
00001A96 1A18                       		move.b	(a0)+,d5
00001A98                            
00001A98                            locret_189A:
00001A98 4E75                       		rts	
00001A9A                            ; End of function sub_188C
00001A9A                            
00001A9A                            ; ---------------------------------------------------------------------------
00001A9A                            ; Kosinski decompression algorithm
00001A9A                            ; ---------------------------------------------------------------------------
00001A9A                            
00001A9A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001A9A                            
00001A9A                            
00001A9A                            KosDec:
00001A9A                            
00001A9A =FFFFFFFE                  var_2		= -2
00001A9A =FFFFFFFF                  var_1		= -1
00001A9A                            
00001A9A 558F                       		subq.l	#2,sp
00001A9C 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001AA0 1E98                       		move.b	(a0)+,(sp)
00001AA2 3A17                       		move.w	(sp),d5
00001AA4 780F                       		moveq	#$F,d4
00001AA6                            
00001AA6                            loc_18A8:
00001AA6 E24D                       		lsr.w	#1,d5
00001AA8 40C6                       		move	sr,d6
00001AAA 51CC 0000                  		dbf	d4,loc_18BA
00001AAE 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001AB2 1E98                       		move.b	(a0)+,(sp)
00001AB4 3A17                       		move.w	(sp),d5
00001AB6 780F                       		moveq	#$F,d4
00001AB8                            
00001AB8                            loc_18BA:
00001AB8 44C6                       		move	d6,ccr
00001ABA 6400                       		bcc.s	loc_18C2
00001ABC 12D8                       		move.b	(a0)+,(a1)+
00001ABE 60E6                       		bra.s	loc_18A8
00001AC0                            ; ===========================================================================
00001AC0                            
00001AC0                            loc_18C2:				; XREF: KosDec
00001AC0 7600                       		moveq	#0,d3
00001AC2 E24D                       		lsr.w	#1,d5
00001AC4 40C6                       		move	sr,d6
00001AC6 51CC 0000                  		dbf	d4,loc_18D6
00001ACA 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001ACE 1E98                       		move.b	(a0)+,(sp)
00001AD0 3A17                       		move.w	(sp),d5
00001AD2 780F                       		moveq	#$F,d4
00001AD4                            
00001AD4                            loc_18D6:
00001AD4 44C6                       		move	d6,ccr
00001AD6 6500                       		bcs.s	loc_1906
00001AD8 E24D                       		lsr.w	#1,d5
00001ADA 51CC 0000                  		dbf	d4,loc_18EA
00001ADE 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001AE2 1E98                       		move.b	(a0)+,(sp)
00001AE4 3A17                       		move.w	(sp),d5
00001AE6 780F                       		moveq	#$F,d4
00001AE8                            
00001AE8                            loc_18EA:
00001AE8 E353                       		roxl.w	#1,d3
00001AEA E24D                       		lsr.w	#1,d5
00001AEC 51CC 0000                  		dbf	d4,loc_18FC
00001AF0 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001AF4 1E98                       		move.b	(a0)+,(sp)
00001AF6 3A17                       		move.w	(sp),d5
00001AF8 780F                       		moveq	#$F,d4
00001AFA                            
00001AFA                            loc_18FC:
00001AFA E353                       		roxl.w	#1,d3
00001AFC 5243                       		addq.w	#1,d3
00001AFE 74FF                       		moveq	#-1,d2
00001B00 1418                       		move.b	(a0)+,d2
00001B02 6000                       		bra.s	loc_191C
00001B04                            ; ===========================================================================
00001B04                            
00001B04                            loc_1906:				; XREF: loc_18C2
00001B04 1018                       		move.b	(a0)+,d0
00001B06 1218                       		move.b	(a0)+,d1
00001B08 74FF                       		moveq	#-1,d2
00001B0A 1401                       		move.b	d1,d2
00001B0C EB4A                       		lsl.w	#5,d2
00001B0E 1400                       		move.b	d0,d2
00001B10 0241 0007                  		andi.w	#7,d1
00001B14 6700                       		beq.s	loc_1928
00001B16 1601                       		move.b	d1,d3
00001B18 5243                       		addq.w	#1,d3
00001B1A                            
00001B1A                            loc_191C:
00001B1A 1031 2000                  		move.b	(a1,d2.w),d0
00001B1E 12C0                       		move.b	d0,(a1)+
00001B20 51CB FFF8                  		dbf	d3,loc_191C
00001B24 6080                       		bra.s	loc_18A8
00001B26                            ; ===========================================================================
00001B26                            
00001B26                            loc_1928:				; XREF: loc_1906
00001B26 1218                       		move.b	(a0)+,d1
00001B28 6700                       		beq.s	loc_1938
00001B2A 0C01 0001                  		cmpi.b	#1,d1
00001B2E 6700 FF76                  		beq.w	loc_18A8
00001B32 1601                       		move.b	d1,d3
00001B34 60E4                       		bra.s	loc_191C
00001B36                            ; ===========================================================================
00001B36                            
00001B36                            loc_1938:				; XREF: loc_1928
00001B36 548F                       		addq.l	#2,sp
00001B38 4E75                       		rts	
00001B3A                            ; End of function KosDec
00001B3A                            
00001B3A                            ; ---------------------------------------------------------------------------
00001B3A                            ; Pallet cycling routine loading subroutine
00001B3A                            ; ---------------------------------------------------------------------------
00001B3A                            
00001B3A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001B3A                            
00001B3A                            
00001B3A                            PalCycle_Load:				; XREF: Demo; Level_MainLoop; End_MainLoop
00001B3A 7400                       		moveq	#0,d2
00001B3C 7000                       		moveq	#0,d0
00001B3E 1038 FE10                  		move.b	($FFFFFE10).w,d0 ; get level number
00001B42 D040                       		add.w	d0,d0		; multiply by 2
00001B44 303B 0000                  		move.w	PalCycle(pc,d0.w),d0 ; load animated pallets offset index into d0
00001B48 4EFB 0000                  		jmp	PalCycle(pc,d0.w) ; jump to PalCycle + offset index
00001B4C                            ; End of function PalCycle_Load
00001B4C                            
00001B4C                            ; ===========================================================================
00001B4C                            ; ---------------------------------------------------------------------------
00001B4C                            ; Pallet cycling routines
00001B4C                            ; ---------------------------------------------------------------------------
00001B4C 0000                       PalCycle:	dc.w PalCycle_GHZ-PalCycle
00001B4E 0000                       		dc.w PalCycle_LZ-PalCycle
00001B50 0000                       		dc.w PalCycle_MZ-PalCycle
00001B52 0000                       		dc.w PalCycle_SLZ-PalCycle
00001B54 0000                       		dc.w PalCycle_SYZ-PalCycle
00001B56 0000                       		dc.w PalCycle_SBZ-PalCycle
00001B58 0000                       		dc.w PalCycle_GHZ-PalCycle
00001B5A 0000                       		dc.w PalCycle_GHZ-PalCycle
00001B5C                            
00001B5C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001B5C                            
00001B5C                            
00001B5C                            PalCycle_Title:				; XREF: TitleScreen
00001B5C 41F9 0000 0000             		lea	(Pal_TitleCyc).l,a0
00001B62 6000                       		bra.s	loc_196A
00001B64                            ; ===========================================================================
00001B64                            
00001B64                            PalCycle_GHZ:				; XREF: PalCycle
00001B64 41F9 0000 0000             		lea	(Pal_GHZCyc).l,a0
00001B6A                            
00001B6A                            loc_196A:				; XREF: PalCycle_Title
00001B6A 5378 F634                  		subq.w	#1,($FFFFF634).w
00001B6E 6A00                       		bpl.s	locret_1990
00001B70 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00001B76 3038 F632                  		move.w	($FFFFF632).w,d0
00001B7A 5278 F632                  		addq.w	#1,($FFFFF632).w
00001B7E 0240 0003                  		andi.w	#3,d0
00001B82 E748                       		lsl.w	#3,d0
00001B84 43F8 FB50                  		lea	($FFFFFB50).w,a1
00001B88 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001B8C 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001B90                            
00001B90                            locret_1990:
00001B90 4E75                       		rts	
00001B92                            ; End of function PalCycle_Title
00001B92                            
00001B92                            
00001B92                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001B92                            
00001B92                            
00001B92                            PalCycle_LZ:				; XREF: PalCycle
00001B92 5378 F634                  		subq.w	#1,($FFFFF634).w
00001B96 6A00                       		bpl.s	loc_19D8
00001B98 31FC 0002 F634             		move.w	#2,($FFFFF634).w
00001B9E 3038 F632                  		move.w	($FFFFF632).w,d0
00001BA2 5278 F632                  		addq.w	#1,($FFFFF632).w
00001BA6 0240 0003                  		andi.w	#3,d0
00001BAA E748                       		lsl.w	#3,d0
00001BAC 41F9 0000 0000             		lea	(Pal_LZCyc1).l,a0
00001BB2 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; check if level is SBZ3
00001BB8 6600                       		bne.s	loc_19C0
00001BBA 41F9 0000 0000             		lea	(Pal_SBZ3Cyc1).l,a0 ; load SBZ3	pallet instead
00001BC0                            
00001BC0                            loc_19C0:
00001BC0 43F8 FB56                  		lea	($FFFFFB56).w,a1
00001BC4 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001BC8 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001BCC 43F8 FAD6                  		lea	($FFFFFAD6).w,a1
00001BD0 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001BD4 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001BD8                            
00001BD8                            loc_19D8:
00001BD8 3038 FE04                  		move.w	($FFFFFE04).w,d0
00001BDC 0240 0007                  		andi.w	#7,d0
00001BE0 103B 0000                  		move.b	byte_1A3C(pc,d0.w),d0
00001BE4 6700                       		beq.s	locret_1A3A
00001BE6 7201                       		moveq	#1,d1
00001BE8 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00001BEC 6700                       		beq.s	loc_19F0
00001BEE 4441                       		neg.w	d1
00001BF0                            
00001BF0                            loc_19F0:
00001BF0 3038 F650                  		move.w	($FFFFF650).w,d0
00001BF4 0240 0003                  		andi.w	#3,d0
00001BF8 D041                       		add.w	d1,d0
00001BFA 0C40 0003                  		cmpi.w	#3,d0
00001BFE 6500                       		bcs.s	loc_1A0A
00001C00 3200                       		move.w	d0,d1
00001C02 7000                       		moveq	#0,d0
00001C04 4A41                       		tst.w	d1
00001C06 6A00                       		bpl.s	loc_1A0A
00001C08 7002                       		moveq	#2,d0
00001C0A                            
00001C0A                            loc_1A0A:
00001C0A 31C0 F650                  		move.w	d0,($FFFFF650).w
00001C0E D040                       		add.w	d0,d0
00001C10 3200                       		move.w	d0,d1
00001C12 D040                       		add.w	d0,d0
00001C14 D041                       		add.w	d1,d0
00001C16 41F9 0000 0000             		lea	(Pal_LZCyc2).l,a0
00001C1C 43F8 FB76                  		lea	($FFFFFB76).w,a1
00001C20 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001C24 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001C28 41F9 0000 0000             		lea	(Pal_LZCyc3).l,a0
00001C2E 43F8 FAF6                  		lea	($FFFFFAF6).w,a1
00001C32 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001C36 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001C3A                            
00001C3A                            locret_1A3A:
00001C3A 4E75                       		rts	
00001C3C                            ; End of function PalCycle_LZ
00001C3C                            
00001C3C                            ; ===========================================================================
00001C3C 0100 0001 0000 0100        byte_1A3C:	dc.b 1,	0, 0, 1, 0, 0, 1, 0
00001C44                            ; ===========================================================================
00001C44                            
00001C44                            PalCycle_MZ:				; XREF: PalCycle
00001C44 4E75                       		rts	
00001C46                            
00001C46                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001C46                            
00001C46                            
00001C46                            PalCycle_SLZ:				; XREF: PalCycle
00001C46 4E75                       		rts	
00001C48                            ; End of function PalCycle_SLZ
00001C48                            
00001C48                            
00001C48                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001C48                            
00001C48                            
00001C48                            PalCycle_SYZ:				; XREF: PalCycle
00001C48 5378 F634                  		subq.w	#1,($FFFFF634).w
00001C4C 6A00                       		bpl.s	locret_1AC6
00001C4E 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00001C54 3038 F632                  		move.w	($FFFFF632).w,d0
00001C58 5278 F632                  		addq.w	#1,($FFFFF632).w
00001C5C 0240 0003                  		andi.w	#3,d0
00001C60 E548                       		lsl.w	#2,d0
00001C62 3200                       		move.w	d0,d1
00001C64 D040                       		add.w	d0,d0
00001C66 41F9 0000 0000             		lea	(Pal_SYZCyc1).l,a0
00001C6C 43F8 FB6E                  		lea	($FFFFFB6E).w,a1
00001C70 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001C74 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001C78 41F9 0000 0000             		lea	(Pal_SYZCyc2).l,a0
00001C7E 43F8 FB76                  		lea	($FFFFFB76).w,a1
00001C82 32B0 1000                  		move.w	(a0,d1.w),(a1)
00001C86 3370 1002 0004             		move.w	2(a0,d1.w),4(a1)
00001C8C                            
00001C8C                            locret_1AC6:
00001C8C 4E75                       		rts	
00001C8E                            ; End of function PalCycle_SYZ
00001C8E                            
00001C8E                            
00001C8E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001C8E                            
00001C8E                            
00001C8E                            PalCycle_SBZ:				; XREF: PalCycle
00001C8E 45F9 0000 0000             		lea	(Pal_SBZCycList).l,a2
00001C94 4A38 FE11                  		tst.b	($FFFFFE11).w
00001C98 6700                       		beq.s	loc_1ADA
00001C9A 45F9 0000 0000             		lea	(Pal_SBZCycList2).l,a2
00001CA0                            
00001CA0                            loc_1ADA:
00001CA0 43F8 F650                  		lea	($FFFFF650).w,a1
00001CA4 321A                       		move.w	(a2)+,d1
00001CA6                            
00001CA6                            loc_1AE0:
00001CA6 5311                       		subq.b	#1,(a1)
00001CA8 6B00                       		bmi.s	loc_1AEA
00001CAA 5489                       		addq.l	#2,a1
00001CAC 5C8A                       		addq.l	#6,a2
00001CAE 6000                       		bra.s	loc_1B06
00001CB0                            ; ===========================================================================
00001CB0                            
00001CB0                            loc_1AEA:				; XREF: PalCycle_SBZ
00001CB0 12DA                       		move.b	(a2)+,(a1)+
00001CB2 1011                       		move.b	(a1),d0
00001CB4 5200                       		addq.b	#1,d0
00001CB6 B01A                       		cmp.b	(a2)+,d0
00001CB8 6500                       		bcs.s	loc_1AF6
00001CBA 7000                       		moveq	#0,d0
00001CBC                            
00001CBC                            loc_1AF6:
00001CBC 12C0                       		move.b	d0,(a1)+
00001CBE 0240 000F                  		andi.w	#$F,d0
00001CC2 D040                       		add.w	d0,d0
00001CC4 305A                       		movea.w	(a2)+,a0
00001CC6 365A                       		movea.w	(a2)+,a3
00001CC8 36B0 0000                  		move.w	(a0,d0.w),(a3)
00001CCC                            
00001CCC                            loc_1B06:				; XREF: PalCycle_SBZ
00001CCC 51C9 FFD8                  		dbf	d1,loc_1AE0
00001CD0 5378 F634                  		subq.w	#1,($FFFFF634).w
00001CD4 6A00                       		bpl.s	locret_1B64
00001CD6 41F9 0000 0000             		lea	(Pal_SBZCyc4).l,a0
00001CDC 31FC 0001 F634             		move.w	#1,($FFFFF634).w
00001CE2 4A38 FE11                  		tst.b	($FFFFFE11).w
00001CE6 6700                       		beq.s	loc_1B2E
00001CE8 41F9 0000 0000             		lea	(Pal_SBZCyc10).l,a0
00001CEE 31FC 0000 F634             		move.w	#0,($FFFFF634).w
00001CF4                            
00001CF4                            loc_1B2E:
00001CF4 72FF                       		moveq	#-1,d1
00001CF6 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00001CFA 6700                       		beq.s	loc_1B38
00001CFC 4441                       		neg.w	d1
00001CFE                            
00001CFE                            loc_1B38:
00001CFE 3038 F632                  		move.w	($FFFFF632).w,d0
00001D02 0240 0003                  		andi.w	#3,d0
00001D06 D041                       		add.w	d1,d0
00001D08 0C40 0003                  		cmpi.w	#3,d0
00001D0C 6500                       		bcs.s	loc_1B52
00001D0E 3200                       		move.w	d0,d1
00001D10 7000                       		moveq	#0,d0
00001D12 4A41                       		tst.w	d1
00001D14 6A00                       		bpl.s	loc_1B52
00001D16 7002                       		moveq	#2,d0
00001D18                            
00001D18                            loc_1B52:
00001D18 31C0 F632                  		move.w	d0,($FFFFF632).w
00001D1C D040                       		add.w	d0,d0
00001D1E 43F8 FB58                  		lea	($FFFFFB58).w,a1
00001D22 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001D26 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001D2A                            
00001D2A                            locret_1B64:
00001D2A 4E75                       		rts	
00001D2C                            ; End of function PalCycle_SBZ
00001D2C                            
00001D2C                            ; ===========================================================================
00001D2C                            Pal_TitleCyc:	incbin	pallet\c_title.bin
00001D4C                            Pal_GHZCyc:	incbin	pallet\c_ghz.bin
00001D6C                            Pal_LZCyc1:	incbin	pallet\c_lz_wat.bin	; waterfalls pallet
00001D8C                            Pal_LZCyc2:	incbin	pallet\c_lz_bel.bin	; conveyor belt pallet
00001D9E                            Pal_LZCyc3:	incbin	pallet\c_lz_buw.bin	; conveyor belt (underwater) pallet
00001DB0                            Pal_SBZ3Cyc1:	incbin	pallet\c_sbz3_w.bin	; waterfalls pallet
00001E18                            Pal_SLZCyc:	incbin	pallet\c_slz.bin
00001E3C                            Pal_SYZCyc1:	incbin	pallet\c_syz_1.bin
00001E5C                            Pal_SYZCyc2:	incbin	pallet\c_syz_2.bin
00001E6C                            
00001E6C                            Pal_SBZCycList:
00001E6C                            	include "_inc\SBZ pallet script 1.asm"
00001E6C                            ; ---------------------------------------------------------------------------
00001E6C                            ; Scrap Brain Zone 1 pallet cycling script
00001E6C                            ; ---------------------------------------------------------------------------
00001E6C 0008                       	dc.w 8			; number of entries - 1
00001E6E 0708                       	dc.b 7,	8		; duration in frames, number of	colours
00001E70 0000                       	dc.w Pal_SBZCyc1	; pallet pointer
00001E72 FB50                       	dc.w $FB50		; RAM address
00001E74 0D08                       	dc.b $D, 8
00001E76 0000                       	dc.w Pal_SBZCyc2
00001E78 FB52                       	dc.w $FB52
00001E7A 0E08                       	dc.b $E, 8
00001E7C 0000                       	dc.w Pal_SBZCyc3
00001E7E FB6E                       	dc.w $FB6E
00001E80 0B08                       	dc.b $B, 8
00001E82 0000                       	dc.w Pal_SBZCyc5
00001E84 FB70                       	dc.w $FB70
00001E86 0708                       	dc.b 7,	8
00001E88 0000                       	dc.w Pal_SBZCyc6
00001E8A FB72                       	dc.w $FB72
00001E8C 1C10                       	dc.b $1C, $10
00001E8E 0000                       	dc.w Pal_SBZCyc7
00001E90 FB7E                       	dc.w $FB7E
00001E92 0303                       	dc.b 3,	3
00001E94 0000                       	dc.w Pal_SBZCyc8
00001E96 FB78                       	dc.w $FB78
00001E98 0303                       	dc.b 3,	3
00001E9A 0000                       	dc.w Pal_SBZCyc8+2
00001E9C FB7A                       	dc.w $FB7A
00001E9E 0303                       	dc.b 3,	3
00001EA0 0000                       	dc.w Pal_SBZCyc8+4
00001EA2 FB7C                       	dc.w $FB7C
00001EA4                            	even
00001EA4                            	even
00001EA4                            
00001EA4                            Pal_SBZCycList2:
00001EA4                            	include "_inc\SBZ pallet script 2.asm"
00001EA4                            ; ---------------------------------------------------------------------------
00001EA4                            ; Scrap Brain Zone 2 pallet cycling script
00001EA4                            ; ---------------------------------------------------------------------------
00001EA4 0006                       	dc.w 6
00001EA6 0708                       	dc.b 7,	8
00001EA8 0000                       	dc.w Pal_SBZCyc1
00001EAA FB50                       	dc.w $FB50
00001EAC 0D08                       	dc.b $D, 8
00001EAE 0000                       	dc.w Pal_SBZCyc2
00001EB0 FB52                       	dc.w $FB52
00001EB2 0908                       	dc.b 9,	8
00001EB4 0000                       	dc.w Pal_SBZCyc9
00001EB6 FB70                       	dc.w $FB70
00001EB8 0708                       	dc.b 7,	8
00001EBA 0000                       	dc.w Pal_SBZCyc6
00001EBC FB72                       	dc.w $FB72
00001EBE 0303                       	dc.b 3,	3
00001EC0 0000                       	dc.w Pal_SBZCyc8
00001EC2 FB78                       	dc.w $FB78
00001EC4 0303                       	dc.b 3,	3
00001EC6 0000                       	dc.w Pal_SBZCyc8+2
00001EC8 FB7A                       	dc.w $FB7A
00001ECA 0303                       	dc.b 3,	3
00001ECC 0000                       	dc.w Pal_SBZCyc8+4
00001ECE FB7C                       	dc.w $FB7C
00001ED0                            	even
00001ED0                            	even
00001ED0                            
00001ED0                            Pal_SBZCyc1:	incbin	pallet\c_sbz_1.bin
00001EE0                            Pal_SBZCyc2:	incbin	pallet\c_sbz_2.bin
00001EF0                            Pal_SBZCyc3:	incbin	pallet\c_sbz_3.bin
00001F00                            Pal_SBZCyc4:	incbin	pallet\c_sbz_4.bin
00001F0C                            Pal_SBZCyc5:	incbin	pallet\c_sbz_5.bin
00001F1C                            Pal_SBZCyc6:	incbin	pallet\c_sbz_6.bin
00001F2C                            Pal_SBZCyc7:	incbin	pallet\c_sbz_7.bin
00001F4C                            Pal_SBZCyc8:	incbin	pallet\c_sbz_8.bin
00001F56                            Pal_SBZCyc9:	incbin	pallet\c_sbz_9.bin
00001F66                            Pal_SBZCyc10:	incbin	pallet\c_sbz_10.bin
00001F72                            ; ---------------------------------------------------------------------------
00001F72                            ; Subroutine to	fade out and fade in
00001F72                            ; ---------------------------------------------------------------------------
00001F72                            
00001F72                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001F72                            
00001F72                            
00001F72                            Pal_FadeTo:
00001F72 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00001F78                            
00001F78                            Pal_FadeTo2:
00001F78 7000                       		moveq	#0,d0
00001F7A 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001F7E 1038 F626                  		move.b	($FFFFF626).w,d0
00001F82 D0C0                       		adda.w	d0,a0
00001F84 7200                       		moveq	#0,d1
00001F86 1038 F627                  		move.b	($FFFFF627).w,d0
00001F8A                            
00001F8A                            Pal_ToBlack:
00001F8A 30C1                       		move.w	d1,(a0)+
00001F8C 51C8 FFFC                  		dbf	d0,Pal_ToBlack	; fill pallet with $000	(black)
00001F90                            
00001F90 383C 0015                  		move.w	#$15,d4
00001F94 1A3C 0009                  		move.b	#9,d5
00001F98                            
00001F98                            loc_1DCE:
00001F98 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001F9E 6100 0000                  		bsr.w	DelayProgram
00001FA2 6100                       		bsr.s	Pal_FadeIn
00001FA4 6100 F844                  		bsr.w	RunPLC_RAM
00001FA8 51CC FFEE                  		dbf	d4,loc_1DCE
00001FAC 4E75                       		rts	
00001FAE                            ; End of function Pal_FadeTo
00001FAE                            
00001FAE                            ; ---------------------------------------------------------------------------
00001FAE                            ; Pallet fade-in subroutine
00001FAE                            ; ---------------------------------------------------------------------------
00001FAE                            
00001FAE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001FAE                            
00001FAE                            
00001FAE                            Pal_FadeIn:				; XREF: Pal_FadeTo
00001FAE 7000                       		moveq	#0,d0
00001FB0 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001FB4 43F8 FB80                  		lea	($FFFFFB80).w,a1
00001FB8 1038 F626                  		move.b	($FFFFF626).w,d0
00001FBC D0C0                       		adda.w	d0,a0
00001FBE D2C0                       		adda.w	d0,a1
00001FC0 1038 F627                  		move.b	($FFFFF627).w,d0
00001FC4                            
00001FC4                            loc_1DFA:
00001FC4 6100                       		bsr.s	Pal_AddColor
00001FC6 51C8 FFFC                  		dbf	d0,loc_1DFA
00001FCA 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00001FD0 6600                       		bne.s	locret_1E24
00001FD2 7000                       		moveq	#0,d0
00001FD4 41F8 FA80                  		lea	($FFFFFA80).w,a0
00001FD8 43F8 FA00                  		lea	($FFFFFA00).w,a1
00001FDC 1038 F626                  		move.b	($FFFFF626).w,d0
00001FE0 D0C0                       		adda.w	d0,a0
00001FE2 D2C0                       		adda.w	d0,a1
00001FE4 1038 F627                  		move.b	($FFFFF627).w,d0
00001FE8                            
00001FE8                            loc_1E1E:
00001FE8 6100                       		bsr.s	Pal_AddColor
00001FEA 51C8 FFFC                  		dbf	d0,loc_1E1E
00001FEE                            
00001FEE                            locret_1E24:
00001FEE 4E75                       		rts	
00001FF0                            ; End of function Pal_FadeIn
00001FF0                            
00001FF0                            
00001FF0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001FF0                            
00001FF0                            
00001FF0                            Pal_AddColor:				; XREF: Pal_FadeIn
00001FF0 3419                       		move.w	(a1)+,d2
00001FF2 3610                       		move.w	(a0),d3
00001FF4 B642                       		cmp.w	d2,d3
00001FF6 6700                       		beq.s	loc_1E4E
00001FF8 3203                       		move.w	d3,d1
00001FFA 0641 0200                  		addi.w	#$200,d1	; increase blue	value
00001FFE B242                       		cmp.w	d2,d1		; has blue reached threshold level?
00002000 6200                       		bhi.s	Pal_AddGreen	; if yes, branch
00002002 30C1                       		move.w	d1,(a0)+	; update pallet
00002004 4E75                       		rts	
00002006                            ; ===========================================================================
00002006                            
00002006                            Pal_AddGreen:				; XREF: Pal_AddColor
00002006 3203                       		move.w	d3,d1
00002008 0641 0020                  		addi.w	#$20,d1		; increase green value
0000200C B242                       		cmp.w	d2,d1
0000200E 6200                       		bhi.s	Pal_AddRed
00002010 30C1                       		move.w	d1,(a0)+	; update pallet
00002012 4E75                       		rts	
00002014                            ; ===========================================================================
00002014                            
00002014                            Pal_AddRed:				; XREF: Pal_AddGreen
00002014 5458                       		addq.w	#2,(a0)+	; increase red value
00002016 4E75                       		rts	
00002018                            ; ===========================================================================
00002018                            
00002018                            loc_1E4E:				; XREF: Pal_AddColor
00002018 5448                       		addq.w	#2,a0
0000201A 4E75                       		rts	
0000201C                            ; End of function Pal_AddColor
0000201C                            
0000201C                            
0000201C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000201C                            
0000201C                            
0000201C                            Pal_FadeFrom:
0000201C 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00002022 383C 0015                  		move.w	#$15,d4
00002026                            loc_1E5C:
00002026 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
0000202C 6100 0000                  		bsr.w	DelayProgram
00002030 6100                       		bsr.s	Pal_FadeOut
00002032 6100 F7B6                  		bsr.w	RunPLC_RAM
00002036 51CC FFEE                  		dbf	d4,loc_1E5C
0000203A 4E75                       		rts	
0000203C                            ; End of function Pal_FadeFrom
0000203C                            
0000203C                            ; ---------------------------------------------------------------------------
0000203C                            ; Pallet fade-out subroutine
0000203C                            ; ---------------------------------------------------------------------------
0000203C                            
0000203C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000203C                            
0000203C                            
0000203C                            Pal_FadeOut:				; XREF: Pal_FadeFrom
0000203C 7000                       		moveq	#0,d0
0000203E 41F8 FB00                  		lea	($FFFFFB00).w,a0
00002042 1038 F626                  		move.b	($FFFFF626).w,d0
00002046 D0C0                       		adda.w	d0,a0
00002048 1038 F627                  		move.b	($FFFFF627).w,d0
0000204C                            
0000204C                            loc_1E82:
0000204C 6100                       		bsr.s	Pal_DecColor
0000204E 51C8 FFFC                  		dbf	d0,loc_1E82
00002052                            
00002052 7000                       		moveq	#0,d0
00002054 41F8 FA80                  		lea	($FFFFFA80).w,a0
00002058 1038 F626                  		move.b	($FFFFF626).w,d0
0000205C D0C0                       		adda.w	d0,a0
0000205E 1038 F627                  		move.b	($FFFFF627).w,d0
00002062                            
00002062                            loc_1E98:
00002062 6100                       		bsr.s	Pal_DecColor
00002064 51C8 FFFC                  		dbf	d0,loc_1E98
00002068 4E75                       		rts	
0000206A                            ; End of function Pal_FadeOut
0000206A                            
0000206A                            
0000206A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000206A                            
0000206A                            
0000206A                            Pal_DecColor:				; XREF: Pal_FadeOut
0000206A 3410                       		move.w	(a0),d2
0000206C 6700                       		beq.s	loc_1ECC
0000206E 3202                       		move.w	d2,d1
00002070 0241 000E                  		andi.w	#$E,d1
00002074 6700                       		beq.s	Pal_DecGreen
00002076 5558                       		subq.w	#2,(a0)+	; decrease red value
00002078 4E75                       		rts	
0000207A                            ; ===========================================================================
0000207A                            
0000207A                            Pal_DecGreen:				; XREF: Pal_DecColor
0000207A 3202                       		move.w	d2,d1
0000207C 0241 00E0                  		andi.w	#$E0,d1
00002080 6700                       		beq.s	Pal_DecBlue
00002082 0458 0020                  		subi.w	#$20,(a0)+	; decrease green value
00002086 4E75                       		rts	
00002088                            ; ===========================================================================
00002088                            
00002088                            Pal_DecBlue:				; XREF: Pal_DecGreen
00002088 3202                       		move.w	d2,d1
0000208A 0241 0E00                  		andi.w	#$E00,d1
0000208E 6700                       		beq.s	loc_1ECC
00002090 0458 0200                  		subi.w	#$200,(a0)+	; decrease blue	value
00002094 4E75                       		rts	
00002096                            ; ===========================================================================
00002096                            
00002096                            loc_1ECC:				; XREF: Pal_DecColor
00002096 5448                       		addq.w	#2,a0
00002098 4E75                       		rts	
0000209A                            ; End of function Pal_DecColor
0000209A                            
0000209A                            ; ---------------------------------------------------------------------------
0000209A                            ; Subroutine to	fill the pallet	with white (special stage)
0000209A                            ; ---------------------------------------------------------------------------
0000209A                            
0000209A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000209A                            
0000209A                            
0000209A                            Pal_MakeWhite:				; XREF: SpecialStage
0000209A 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000020A0 7000                       		moveq	#0,d0
000020A2 41F8 FB00                  		lea	($FFFFFB00).w,a0
000020A6 1038 F626                  		move.b	($FFFFF626).w,d0
000020AA D0C0                       		adda.w	d0,a0
000020AC 323C 0EEE                  		move.w	#$EEE,d1
000020B0 1038 F627                  		move.b	($FFFFF627).w,d0
000020B4                            
000020B4                            PalWhite_Loop:
000020B4 30C1                       		move.w	d1,(a0)+
000020B6 51C8 FFFC                  		dbf	d0,PalWhite_Loop
000020BA 383C 0015                  		move.w	#$15,d4
000020BE                            
000020BE                            loc_1EF4:
000020BE 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
000020C4 6100 0000                  		bsr.w	DelayProgram
000020C8 6100                       		bsr.s	Pal_WhiteToBlack
000020CA 6100 F71E                  		bsr.w	RunPLC_RAM
000020CE 51CC FFEE                  		dbf	d4,loc_1EF4
000020D2 4E75                       		rts	
000020D4                            ; End of function Pal_MakeWhite
000020D4                            
000020D4                            
000020D4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000020D4                            
000020D4                            
000020D4                            Pal_WhiteToBlack:			; XREF: Pal_MakeWhite
000020D4 7000                       		moveq	#0,d0
000020D6 41F8 FB00                  		lea	($FFFFFB00).w,a0
000020DA 43F8 FB80                  		lea	($FFFFFB80).w,a1
000020DE 1038 F626                  		move.b	($FFFFF626).w,d0
000020E2 D0C0                       		adda.w	d0,a0
000020E4 D2C0                       		adda.w	d0,a1
000020E6 1038 F627                  		move.b	($FFFFF627).w,d0
000020EA                            
000020EA                            loc_1F20:
000020EA 6100                       		bsr.s	Pal_DecColor2
000020EC 51C8 FFFC                  		dbf	d0,loc_1F20
000020F0                            
000020F0 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
000020F6 6600                       		bne.s	locret_1F4A
000020F8 7000                       		moveq	#0,d0
000020FA 41F8 FA80                  		lea	($FFFFFA80).w,a0
000020FE 43F8 FA00                  		lea	($FFFFFA00).w,a1
00002102 1038 F626                  		move.b	($FFFFF626).w,d0
00002106 D0C0                       		adda.w	d0,a0
00002108 D2C0                       		adda.w	d0,a1
0000210A 1038 F627                  		move.b	($FFFFF627).w,d0
0000210E                            
0000210E                            loc_1F44:
0000210E 6100                       		bsr.s	Pal_DecColor2
00002110 51C8 FFFC                  		dbf	d0,loc_1F44
00002114                            
00002114                            locret_1F4A:
00002114 4E75                       		rts	
00002116                            ; End of function Pal_WhiteToBlack
00002116                            
00002116                            
00002116                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002116                            
00002116                            
00002116                            Pal_DecColor2:				; XREF: Pal_WhiteToBlack
00002116 3419                       		move.w	(a1)+,d2
00002118 3610                       		move.w	(a0),d3
0000211A B642                       		cmp.w	d2,d3
0000211C 6700                       		beq.s	loc_1F78
0000211E 3203                       		move.w	d3,d1
00002120 0441 0200                  		subi.w	#$200,d1	; decrease blue	value
00002124 6500                       		bcs.s	loc_1F64
00002126 B242                       		cmp.w	d2,d1
00002128 6500                       		bcs.s	loc_1F64
0000212A 30C1                       		move.w	d1,(a0)+
0000212C 4E75                       		rts	
0000212E                            ; ===========================================================================
0000212E                            
0000212E                            loc_1F64:				; XREF: Pal_DecColor2
0000212E 3203                       		move.w	d3,d1
00002130 0441 0020                  		subi.w	#$20,d1		; decrease green value
00002134 6500                       		bcs.s	loc_1F74
00002136 B242                       		cmp.w	d2,d1
00002138 6500                       		bcs.s	loc_1F74
0000213A 30C1                       		move.w	d1,(a0)+
0000213C 4E75                       		rts	
0000213E                            ; ===========================================================================
0000213E                            
0000213E                            loc_1F74:				; XREF: loc_1F64
0000213E 5558                       		subq.w	#2,(a0)+	; decrease red value
00002140 4E75                       		rts	
00002142                            ; ===========================================================================
00002142                            
00002142                            loc_1F78:				; XREF: Pal_DecColor2
00002142 5448                       		addq.w	#2,a0
00002144 4E75                       		rts	
00002146                            ; End of function Pal_DecColor2
00002146                            
00002146                            ; ---------------------------------------------------------------------------
00002146                            ; Subroutine to	make a white flash when	you enter a special stage
00002146                            ; ---------------------------------------------------------------------------
00002146                            
00002146                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002146                            
00002146                            
00002146                            Pal_MakeFlash:				; XREF: SpecialStage
00002146 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
0000214C 383C 0015                  		move.w	#$15,d4
00002150                            
00002150                            loc_1F86:
00002150 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00002156 6100 0000                  		bsr.w	DelayProgram
0000215A 6100                       		bsr.s	Pal_ToWhite
0000215C 6100 F68C                  		bsr.w	RunPLC_RAM
00002160 51CC FFEE                  		dbf	d4,loc_1F86
00002164 4E75                       		rts	
00002166                            ; End of function Pal_MakeFlash
00002166                            
00002166                            
00002166                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002166                            
00002166                            
00002166                            Pal_ToWhite:				; XREF: Pal_MakeFlash
00002166 7000                       		moveq	#0,d0
00002168 41F8 FB00                  		lea	($FFFFFB00).w,a0
0000216C 1038 F626                  		move.b	($FFFFF626).w,d0
00002170 D0C0                       		adda.w	d0,a0
00002172 1038 F627                  		move.b	($FFFFF627).w,d0
00002176                            
00002176                            loc_1FAC:
00002176 6100                       		bsr.s	Pal_AddColor2
00002178 51C8 FFFC                  		dbf	d0,loc_1FAC
0000217C 7000                       		moveq	#0,d0
0000217E 41F8 FA80                  		lea	($FFFFFA80).w,a0
00002182 1038 F626                  		move.b	($FFFFF626).w,d0
00002186 D0C0                       		adda.w	d0,a0
00002188 1038 F627                  		move.b	($FFFFF627).w,d0
0000218C                            
0000218C                            loc_1FC2:
0000218C 6100                       		bsr.s	Pal_AddColor2
0000218E 51C8 FFFC                  		dbf	d0,loc_1FC2
00002192 4E75                       		rts	
00002194                            ; End of function Pal_ToWhite
00002194                            
00002194                            
00002194                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002194                            
00002194                            
00002194                            Pal_AddColor2:				; XREF: Pal_ToWhite
00002194 3410                       		move.w	(a0),d2
00002196 0C42 0EEE                  		cmpi.w	#$EEE,d2
0000219A 6700                       		beq.s	loc_2006
0000219C 3202                       		move.w	d2,d1
0000219E 0241 000E                  		andi.w	#$E,d1
000021A2 0C41 000E                  		cmpi.w	#$E,d1
000021A6 6700                       		beq.s	loc_1FE2
000021A8 5458                       		addq.w	#2,(a0)+	; increase red value
000021AA 4E75                       		rts	
000021AC                            ; ===========================================================================
000021AC                            
000021AC                            loc_1FE2:				; XREF: Pal_AddColor2
000021AC 3202                       		move.w	d2,d1
000021AE 0241 00E0                  		andi.w	#$E0,d1
000021B2 0C41 00E0                  		cmpi.w	#$E0,d1
000021B6 6700                       		beq.s	loc_1FF4
000021B8 0658 0020                  		addi.w	#$20,(a0)+	; increase green value
000021BC 4E75                       		rts	
000021BE                            ; ===========================================================================
000021BE                            
000021BE                            loc_1FF4:				; XREF: loc_1FE2
000021BE 3202                       		move.w	d2,d1
000021C0 0241 0E00                  		andi.w	#$E00,d1
000021C4 0C41 0E00                  		cmpi.w	#$E00,d1
000021C8 6700                       		beq.s	loc_2006
000021CA 0658 0200                  		addi.w	#$200,(a0)+	; increase blue	value
000021CE 4E75                       		rts	
000021D0                            ; ===========================================================================
000021D0                            
000021D0                            loc_2006:				; XREF: Pal_AddColor2
000021D0 5448                       		addq.w	#2,a0
000021D2 4E75                       		rts	
000021D4                            ; End of function Pal_AddColor2
000021D4                            
000021D4                            ; ---------------------------------------------------------------------------
000021D4                            ; Pallet cycling routine - Sega	logo
000021D4                            ; ---------------------------------------------------------------------------
000021D4                            
000021D4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000021D4                            
000021D4                            
000021D4                            PalCycle_Sega:				; XREF: SegaScreen
000021D4 4A38 F635                  		tst.b	($FFFFF635).w
000021D8 6600                       		bne.s	loc_206A
000021DA 43F8 FB20                  		lea	($FFFFFB20).w,a1
000021DE 41F9 0000 0000             		lea	(Pal_Sega1).l,a0
000021E4 7205                       		moveq	#5,d1
000021E6 3038 F632                  		move.w	($FFFFF632).w,d0
000021EA                            
000021EA                            loc_2020:
000021EA 6A00                       		bpl.s	loc_202A
000021EC 5448                       		addq.w	#2,a0
000021EE 5341                       		subq.w	#1,d1
000021F0 5440                       		addq.w	#2,d0
000021F2 60F6                       		bra.s	loc_2020
000021F4                            ; ===========================================================================
000021F4                            
000021F4                            loc_202A:				; XREF: PalCycle_Sega
000021F4 3400                       		move.w	d0,d2
000021F6 0242 001E                  		andi.w	#$1E,d2
000021FA 6600                       		bne.s	loc_2034
000021FC 5440                       		addq.w	#2,d0
000021FE                            
000021FE                            loc_2034:
000021FE 0C40 0060                  		cmpi.w	#$60,d0
00002202 6400                       		bcc.s	loc_203E
00002204 3398 0000                  		move.w	(a0)+,(a1,d0.w)
00002208                            
00002208                            loc_203E:
00002208 5440                       		addq.w	#2,d0
0000220A 51C9 FFE8                  		dbf	d1,loc_202A
0000220E 3038 F632                  		move.w	($FFFFF632).w,d0
00002212 5440                       		addq.w	#2,d0
00002214 3400                       		move.w	d0,d2
00002216 0242 001E                  		andi.w	#$1E,d2
0000221A 6600                       		bne.s	loc_2054
0000221C 5440                       		addq.w	#2,d0
0000221E                            
0000221E                            loc_2054:
0000221E 0C40 0064                  		cmpi.w	#$64,d0
00002222 6D00                       		blt.s	loc_2062
00002224 31FC 0401 F634             		move.w	#$401,($FFFFF634).w
0000222A 70F4                       		moveq	#-$C,d0
0000222C                            
0000222C                            loc_2062:
0000222C 31C0 F632                  		move.w	d0,($FFFFF632).w
00002230 7001                       		moveq	#1,d0
00002232 4E75                       		rts	
00002234                            ; ===========================================================================
00002234                            
00002234                            loc_206A:				; XREF: loc_202A
00002234 5338 F634                  		subq.b	#1,($FFFFF634).w
00002238 6A00                       		bpl.s	loc_20BC
0000223A 11FC 0004 F634             		move.b	#4,($FFFFF634).w
00002240 3038 F632                  		move.w	($FFFFF632).w,d0
00002244 0640 000C                  		addi.w	#$C,d0
00002248 0C40 0030                  		cmpi.w	#$30,d0
0000224C 6500                       		bcs.s	loc_2088
0000224E 7000                       		moveq	#0,d0
00002250 4E75                       		rts	
00002252                            ; ===========================================================================
00002252                            
00002252                            loc_2088:				; XREF: loc_206A
00002252 31C0 F632                  		move.w	d0,($FFFFF632).w
00002256 41F9 0000 0000             		lea	(Pal_Sega2).l,a0
0000225C 41F0 0000                  		lea	(a0,d0.w),a0
00002260 43F8 FB04                  		lea	($FFFFFB04).w,a1
00002264 22D8                       		move.l	(a0)+,(a1)+
00002266 22D8                       		move.l	(a0)+,(a1)+
00002268 3298                       		move.w	(a0)+,(a1)
0000226A 43F8 FB20                  		lea	($FFFFFB20).w,a1
0000226E 7000                       		moveq	#0,d0
00002270 722C                       		moveq	#$2C,d1
00002272                            
00002272                            loc_20A8:
00002272 3400                       		move.w	d0,d2
00002274 0242 001E                  		andi.w	#$1E,d2
00002278 6600                       		bne.s	loc_20B2
0000227A 5440                       		addq.w	#2,d0
0000227C                            
0000227C                            loc_20B2:
0000227C 3390 0000                  		move.w	(a0),(a1,d0.w)
00002280 5440                       		addq.w	#2,d0
00002282 51C9 FFEE                  		dbf	d1,loc_20A8
00002286                            
00002286                            loc_20BC:
00002286 7001                       		moveq	#1,d0
00002288 4E75                       		rts	
0000228A                            ; End of function PalCycle_Sega
0000228A                            
0000228A                            ; ===========================================================================
0000228A                            
0000228A                            Pal_Sega1:	incbin	pallet\sega1.bin
00002296                            Pal_Sega2:	incbin	pallet\sega2.bin
000022C6                            
000022C6                            ; ---------------------------------------------------------------------------
000022C6                            ; Subroutines to load pallets
000022C6                            ; ---------------------------------------------------------------------------
000022C6                            
000022C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000022C6                            
000022C6                            
000022C6                            PalLoad1:
000022C6 43F9 0000 0000             		lea	(PalPointers).l,a1
000022CC E748                       		lsl.w	#3,d0
000022CE D2C0                       		adda.w	d0,a1
000022D0 2459                       		movea.l	(a1)+,a2
000022D2 3659                       		movea.w	(a1)+,a3
000022D4 D6FC 0080                  		adda.w	#$80,a3
000022D8 3E19                       		move.w	(a1)+,d7
000022DA                            
000022DA                            loc_2110:
000022DA 26DA                       		move.l	(a2)+,(a3)+
000022DC 51CF FFFC                  		dbf	d7,loc_2110
000022E0 4E75                       		rts	
000022E2                            ; End of function PalLoad1
000022E2                            
000022E2                            
000022E2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000022E2                            
000022E2                            
000022E2                            PalLoad2:
000022E2 43F9 0000 0000             		lea	(PalPointers).l,a1
000022E8 E748                       		lsl.w	#3,d0
000022EA D2C0                       		adda.w	d0,a1
000022EC 2459                       		movea.l	(a1)+,a2
000022EE 3659                       		movea.w	(a1)+,a3
000022F0 3E19                       		move.w	(a1)+,d7
000022F2                            
000022F2                            loc_2128:
000022F2 26DA                       		move.l	(a2)+,(a3)+
000022F4 51CF FFFC                  		dbf	d7,loc_2128
000022F8 4E75                       		rts	
000022FA                            ; End of function PalLoad2
000022FA                            
000022FA                            ; ---------------------------------------------------------------------------
000022FA                            ; Underwater pallet loading subroutine
000022FA                            ; ---------------------------------------------------------------------------
000022FA                            
000022FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000022FA                            
000022FA                            
000022FA                            PalLoad3_Water:
000022FA 43F9 0000 0000             		lea	(PalPointers).l,a1
00002300 E748                       		lsl.w	#3,d0
00002302 D2C0                       		adda.w	d0,a1
00002304 2459                       		movea.l	(a1)+,a2
00002306 3659                       		movea.w	(a1)+,a3
00002308 96FC 0080                  		suba.w	#$80,a3
0000230C 3E19                       		move.w	(a1)+,d7
0000230E                            
0000230E                            loc_2144:
0000230E 26DA                       		move.l	(a2)+,(a3)+
00002310 51CF FFFC                  		dbf	d7,loc_2144
00002314 4E75                       		rts	
00002316                            ; End of function PalLoad3_Water
00002316                            
00002316                            
00002316                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002316                            
00002316                            
00002316                            PalLoad4_Water:
00002316 43F9 0000 0000             		lea	(PalPointers).l,a1
0000231C E748                       		lsl.w	#3,d0
0000231E D2C0                       		adda.w	d0,a1
00002320 2459                       		movea.l	(a1)+,a2
00002322 3659                       		movea.w	(a1)+,a3
00002324 96FC 0100                  		suba.w	#$100,a3
00002328 3E19                       		move.w	(a1)+,d7
0000232A                            
0000232A                            loc_2160:
0000232A 26DA                       		move.l	(a2)+,(a3)+
0000232C 51CF FFFC                  		dbf	d7,loc_2160
00002330 4E75                       		rts	
00002332                            ; End of function PalLoad4_Water
00002332                            
00002332                            ; ===========================================================================
00002332                            ; ---------------------------------------------------------------------------
00002332                            ; Pallet pointers
00002332                            ; ---------------------------------------------------------------------------
00002332                            PalPointers:
00002332                            	include "_inc\Pallet pointers.asm"
00002332                            ; ---------------------------------------------------------------------------
00002332                            ; Pallet pointers
00002332                            ; ---------------------------------------------------------------------------
00002332 0000 0000                  	dc.l Pal_SegaBG		; pallet address
00002336 FB00                       	dc.w $FB00		; RAM address
00002338 001F                       	dc.w $1F		; (pallet length / 2) - 1
0000233A 0000 0000                  	dc.l Pal_Title
0000233E FB00                       	dc.w $FB00
00002340 001F                       	dc.w $1F
00002342 0000 0000                  	dc.l Pal_LevelSel
00002346 FB00                       	dc.w $FB00
00002348 001F                       	dc.w $1F
0000234A 0000 0000                  	dc.l Pal_Sonic
0000234E FB00                       	dc.w $FB00
00002350 0007                       	dc.w 7
00002352 0000 0000                  	dc.l Pal_GHZ
00002356 FB20                       	dc.w $FB20
00002358 0017                       	dc.w $17
0000235A 0000 0000                  	dc.l Pal_LZ
0000235E FB20                       	dc.w $FB20
00002360 0017                       	dc.w $17
00002362 0000 0000                  	dc.l Pal_MZ
00002366 FB20                       	dc.w $FB20
00002368 0017                       	dc.w $17
0000236A 0000 0000                  	dc.l Pal_SLZ
0000236E FB20                       	dc.w $FB20
00002370 0017                       	dc.w $17
00002372 0000 0000                  	dc.l Pal_SYZ
00002376 FB20                       	dc.w $FB20
00002378 0017                       	dc.w $17
0000237A 0000 0000                  	dc.l Pal_SBZ1
0000237E FB20                       	dc.w $FB20
00002380 0017                       	dc.w $17
00002382 0000 0000                  	dc.l Pal_Special
00002386 FB00                       	dc.w $FB00
00002388 001F                       	dc.w $1F
0000238A 0000 0000                  	dc.l Pal_LZWater
0000238E FB00                       	dc.w $FB00
00002390 001F                       	dc.w $1F
00002392 0000 0000                  	dc.l Pal_SBZ3
00002396 FB20                       	dc.w $FB20
00002398 0017                       	dc.w $17
0000239A 0000 0000                  	dc.l Pal_SBZ3Water
0000239E FB00                       	dc.w $FB00
000023A0 001F                       	dc.w $1F
000023A2 0000 0000                  	dc.l Pal_SBZ2
000023A6 FB20                       	dc.w $FB20
000023A8 0017                       	dc.w $17
000023AA 0000 0000                  	dc.l Pal_LZSonWater
000023AE FB00                       	dc.w $FB00
000023B0 0007                       	dc.w 7
000023B2 0000 0000                  	dc.l Pal_SBZ3SonWat
000023B6 FB00                       	dc.w $FB00
000023B8 0007                       	dc.w 7
000023BA 0000 0000                  	dc.l Pal_SpeResult
000023BE FB00                       	dc.w $FB00
000023C0 001F                       	dc.w $1F
000023C2 0000 0000                  	dc.l Pal_SpeContinue
000023C6 FB00                       	dc.w $FB00
000023C8 000F                       	dc.w $F
000023CA 0000 0000                  	dc.l Pal_Ending
000023CE FB00                       	dc.w $FB00
000023D0 001F                       	dc.w $1F
000023D2 0000 0000                  	dc.l Pal_Idiot
000023D6 FB20                       	dc.w $FB20
000023D8 0007                       	dc.w 7
000023DA 0000 0000                  	dc.l Pal_BHZ
000023DE FB20                       	dc.w $FB20
000023E0 0017                       	dc.w $17
000023E2 0000 0000                  	dc.l Pal_Gronic
000023E6 FB00                       	dc.w $FB00
000023E8 0007                       	dc.w 7
000023EA 0000 0000                  	dc.l Pal_LZGroWater
000023EE FB00                       	dc.w $FB00
000023F0 0007                       	dc.w 7
000023F2 0000 0000                  	dc.l Pal_SBZ3GroWat
000023F6 FB00                       	dc.w $FB00
000023F8 0007                       	dc.w 7
000023FA 0000 0000                  	dc.l Pal_Anakama
000023FE FB00                       	dc.w $FB00
00002400 0007                       	dc.w 7
00002400 0007                       	dc.w 7
00002402                            
00002402                            ; ---------------------------------------------------------------------------
00002402                            ; Pallet data
00002402                            ; ---------------------------------------------------------------------------
00002402                            Pal_SegaBG:	incbin	pallet\sega_bg.bin
00002482                            Pal_Title:	incbin	pallet\title.bin
00002502                            Pal_LevelSel:	incbin	pallet\levelsel.bin
00002582                            Pal_Sonic:	incbin	pallet\sonic.bin
000025A2                            Pal_GHZ:	incbin	pallet\ghz.bin
00002602                            Pal_LZ:		incbin	pallet\lz.bin
00002662                            Pal_LZWater:	incbin	pallet\lz_uw.bin	; LZ underwater pallets
000026E2                            Pal_MZ:		incbin	pallet\mz.bin
00002742                            Pal_SLZ:	incbin	pallet\slz.bin
000027A2                            Pal_SYZ:	incbin	pallet\syz.bin
00002802                            Pal_SBZ1:	incbin	pallet\sbz_act1.bin	; SBZ act 1 pallets
00002862                            Pal_SBZ2:	incbin	pallet\sbz_act2.bin	; SBZ act 2 & Final Zone pallets
000028C2                            Pal_Special:	incbin	pallet\special.bin	; special stage pallets
00002942                            Pal_SBZ3:	incbin	pallet\sbz_act3.bin	; SBZ act 3 pallets
000029A2                            Pal_SBZ3Water:	incbin	pallet\sbz_a3uw.bin	; SBZ act 3 (underwater) pallets
00002A22                            Pal_LZSonWater:	incbin	pallet\son_lzuw.bin	; Sonic (underwater in LZ) pallet
00002A42                            Pal_SBZ3SonWat:	incbin	pallet\son_sbzu.bin	; Sonic (underwater in SBZ act 3) pallet
00002A62                            Pal_BHZ:	incbin	pallet\bhz.bin
00002AC2                            Pal_SpeResult:	incbin	pallet\ssresult.bin	; special stage results screen pallets
00002B42                            Pal_SpeContinue:incbin	pallet\sscontin.bin	; special stage results screen continue pallet
00002B82                            Pal_Ending:	incbin	pallet\ending.bin	; ending sequence pallets
00002C02                            Pal_Idiot:	incbin	pallet\idiot.bin	; idiot pallet
00002C22                            Pal_Gronic:	incbin	pallet\gronic.bin	; gronic char
00002C42                            Pal_LZGroWater:	incbin	pallet\groniclzuw.bin	; Gronic (underwater in SBZ act 3) pallet
00002C62                            Pal_SBZ3GroWat:	incbin	pallet\gronicsbz3uw.bin	; Gronic (underwater in SBZ act 3) pallet
00002C82                            Pal_Anakama:incbin	pallet\anakama.bin	; anakama char
00002D02                            
00002D02                            ; ---------------------------------------------------------------------------
00002D02                            ; Subroutine to	delay the program by ($FFFFF62A) frames
00002D02                            ; ---------------------------------------------------------------------------
00002D02                            
00002D02                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002D02                            
00002D02                            
00002D02                            DelayProgram:				; XREF: PauseGame
00002D02 46FC 2300                  		move	#$2300,sr
00002D06                            
00002D06                            loc_29AC:
00002D06 4A38 F62A                  		tst.b	($FFFFF62A).w
00002D0A 66FA                       		bne.s	loc_29AC
00002D0C 4E75                       		rts	
00002D0E                            ; End of function DelayProgram
00002D0E                            
00002D0E                            ; ---------------------------------------------------------------------------
00002D0E                            ; Subroutine to	generate a pseudo-random number	in d0
00002D0E                            ; ---------------------------------------------------------------------------
00002D0E                            
00002D0E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002D0E                            
00002D0E                            
00002D0E                            RandomNumber:
00002D0E 2238 F636                  		move.l	($FFFFF636).w,d1
00002D12 6600                       		bne.s	loc_29C0
00002D14 223C 2A6D 365A             		move.l	#$2A6D365A,d1
00002D1A                            
00002D1A                            loc_29C0:
00002D1A 2001                       		move.l	d1,d0
00002D1C E581                       		asl.l	#2,d1
00002D1E D280                       		add.l	d0,d1
00002D20 E781                       		asl.l	#3,d1
00002D22 D280                       		add.l	d0,d1
00002D24 3001                       		move.w	d1,d0
00002D26 4841                       		swap	d1
00002D28 D041                       		add.w	d1,d0
00002D2A 3200                       		move.w	d0,d1
00002D2C 4841                       		swap	d1
00002D2E 21C1 F636                  		move.l	d1,($FFFFF636).w
00002D32 4E75                       		rts	
00002D34                            ; End of function RandomNumber
00002D34                            
00002D34                            
00002D34                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002D34                            
00002D34                            
00002D34                            CalcSine:				; XREF: SS_BGAnimate; et al
00002D34 0240 00FF                  		andi.w	#$FF,d0
00002D38 D040                       		add.w	d0,d0
00002D3A 0640 0080                  		addi.w	#$80,d0
00002D3E 323B 0000                  		move.w	Sine_Data(pc,d0.w),d1
00002D42 0440 0080                  		subi.w	#$80,d0
00002D46 303B 0000                  		move.w	Sine_Data(pc,d0.w),d0
00002D4A 4E75                       		rts	
00002D4C                            ; End of function CalcSine
00002D4C                            
00002D4C                            ; ===========================================================================
00002D4C                            
00002D4C                            Sine_Data:	incbin	misc\sinewave.bin	; values for a 360ยบ sine wave
00002FCC                            
00002FCC                            ; ===========================================================================
00002FCC 48E7 6000                  		movem.l	d1-d2,-(sp)
00002FD0 3200                       		move.w	d0,d1
00002FD2 4841                       		swap	d1
00002FD4 7000                       		moveq	#0,d0
00002FD6 3200                       		move.w	d0,d1
00002FD8 7407                       		moveq	#7,d2
00002FDA                            
00002FDA                            loc_2C80:
00002FDA E599                       		rol.l	#2,d1
00002FDC D040                       		add.w	d0,d0
00002FDE 5240                       		addq.w	#1,d0
00002FE0 9240                       		sub.w	d0,d1
00002FE2 6400                       		bcc.s	loc_2C9A
00002FE4 D240                       		add.w	d0,d1
00002FE6 5340                       		subq.w	#1,d0
00002FE8 51CA FFF0                  		dbf	d2,loc_2C80
00002FEC E248                       		lsr.w	#1,d0
00002FEE 4CDF 0006                  		movem.l	(sp)+,d1-d2
00002FF2 4E75                       		rts	
00002FF4                            ; ===========================================================================
00002FF4                            
00002FF4                            loc_2C9A:
00002FF4 5240                       		addq.w	#1,d0
00002FF6 51CA FFE2                  		dbf	d2,loc_2C80
00002FFA E248                       		lsr.w	#1,d0
00002FFC 4CDF 0006                  		movem.l	(sp)+,d1-d2
00003000 4E75                       		rts	
00003002                            
00003002                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003002                            
00003002                            
00003002                            CalcAngle:
00003002 48E7 1800                  		movem.l	d3-d4,-(sp)
00003006 7600                       		moveq	#0,d3
00003008 7800                       		moveq	#0,d4
0000300A 3601                       		move.w	d1,d3
0000300C 3802                       		move.w	d2,d4
0000300E 8843                       		or.w	d3,d4
00003010 6700                       		beq.s	loc_2D04
00003012 3802                       		move.w	d2,d4
00003014 4A43                       		tst.w	d3
00003016 6A00 0000                  		bpl.w	loc_2CC2
0000301A 4443                       		neg.w	d3
0000301C                            
0000301C                            loc_2CC2:
0000301C 4A44                       		tst.w	d4
0000301E 6A00 0000                  		bpl.w	loc_2CCA
00003022 4444                       		neg.w	d4
00003024                            
00003024                            loc_2CCA:
00003024 B843                       		cmp.w	d3,d4
00003026 6400 0000                  		bcc.w	loc_2CDC
0000302A E18C                       		lsl.l	#8,d4
0000302C 88C3                       		divu.w	d3,d4
0000302E 7000                       		moveq	#0,d0
00003030 103B 4000                  		move.b	Angle_Data(pc,d4.w),d0
00003034 6000                       		bra.s	loc_2CE6
00003036                            ; ===========================================================================
00003036                            
00003036                            loc_2CDC:				; XREF: CalcAngle
00003036 E18B                       		lsl.l	#8,d3
00003038 86C4                       		divu.w	d4,d3
0000303A 7040                       		moveq	#$40,d0
0000303C 903B 3000                  		sub.b	Angle_Data(pc,d3.w),d0
00003040                            
00003040                            loc_2CE6:
00003040 4A41                       		tst.w	d1
00003042 6A00 0000                  		bpl.w	loc_2CF2
00003046 4440                       		neg.w	d0
00003048 0640 0080                  		addi.w	#$80,d0
0000304C                            
0000304C                            loc_2CF2:
0000304C 4A42                       		tst.w	d2
0000304E 6A00 0000                  		bpl.w	loc_2CFE
00003052 4440                       		neg.w	d0
00003054 0640 0100                  		addi.w	#$100,d0
00003058                            
00003058                            loc_2CFE:
00003058 4CDF 0018                  		movem.l	(sp)+,d3-d4
0000305C 4E75                       		rts	
0000305E                            ; ===========================================================================
0000305E                            
0000305E                            loc_2D04:				; XREF: CalcAngle
0000305E 303C 0040                  		move.w	#$40,d0
00003062 4CDF 0018                  		movem.l	(sp)+,d3-d4
00003066 4E75                       		rts	
00003068                            ; End of function CalcAngle
00003068                            
00003068                            ; ===========================================================================
00003068                            
00003068                            Angle_Data:	incbin	misc\angles.bin
0000316A                            
0000316A                            ; ===========================================================================
0000316A                            
0000316A                            ; ---------------------------------------------------------------------------
0000316A                            ; Sega screen
0000316A                            ; ---------------------------------------------------------------------------
0000316A                            
0000316A                            SegaScreen:				; XREF: GameModeArray
0000316A 103C 00E4                  		move.b	#$E4,d0
0000316E 6100 E42A                  		bsr.w	PlaySound_Special ; stop music
00003172 6100 E668                  		bsr.w	ClearPLC
00003176 6100 EEA4                  		bsr.w	Pal_FadeFrom
0000317A 4DF9 00C0 0004             		lea	($C00004).l,a6
00003180 3CBC 8004                  		move.w	#$8004,(a6)
00003184 3CBC 8230                  		move.w	#$8230,(a6)
00003188 3CBC 8407                  		move.w	#$8407,(a6)
0000318C 3CBC 8700                  		move.w	#$8700,(a6)
00003190 3CBC 8B00                  		move.w	#$8B00,(a6)
00003194 4238 F64E                  		clr.b	($FFFFF64E).w
00003198 46FC 2700                  		move	#$2700,sr
0000319C 3038 F60C                  		move.w	($FFFFF60C).w,d0
000031A0 0200 00BF                  		andi.b	#$BF,d0
000031A4 33C0 00C0 0004             		move.w	d0,($C00004).l
000031AA 6100 E316                  		bsr.w	ClearScreen
000031AE 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
000031B8 41F9 0000 0000             		lea	(Nem_SegaLogo).l,a0 ; load Sega	logo patterns
000031BE 6100 E47E                  		bsr.w	NemDec
000031C2 43F9 00FF 0000             		lea	($FF0000).l,a1
000031C8 41F9 0000 0000             		lea	(Eni_SegaLogo).l,a0 ; load Sega	logo mappings
000031CE 303C 0000                  		move.w	#0,d0
000031D2 6100 E748                  		bsr.w	EniDec
000031D6 43F9 00FF 0000             		lea	($FF0000).l,a1
000031DC 203C 6510 0003             		move.l	#$65100003,d0
000031E2 7217                       		moveq	#$17,d1
000031E4 7407                       		moveq	#7,d2
000031E6 6100 E436                  		bsr.w	ShowVDPGraphics
000031EA 43F9 00FF 0180             		lea	($FF0180).l,a1
000031F0 203C 4000 0003             		move.l	#$40000003,d0
000031F6 7227                       		moveq	#$27,d1
000031F8 741B                       		moveq	#$1B,d2
000031FA 6100 E422                  		bsr.w	ShowVDPGraphics
000031FE 7000                       		moveq	#0,d0
00003200 6100 F0E0                  		bsr.w	PalLoad2	; load Sega logo pallet
00003204 31FC FFF6 F632             		move.w	#-$A,($FFFFF632).w
0000320A 31FC 0000 F634             		move.w	#0,($FFFFF634).w
00003210 31FC 0000 F662             		move.w	#0,($FFFFF662).w
00003216 31FC 0000 F660             		move.w	#0,($FFFFF660).w
0000321C 3038 F60C                  		move.w	($FFFFF60C).w,d0
00003220 0000 0040                  		ori.b	#$40,d0
00003224 33C0 00C0 0004             		move.w	d0,($C00004).l
0000322A                            
0000322A                            Sega_WaitPallet:
0000322A 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
00003230 6100 FAD0                  		bsr.w	DelayProgram
00003234 6100 EF9E                  		bsr.w	PalCycle_Sega
00003238 66F0                       		bne.s	Sega_WaitPallet
0000323A                            
0000323A 103C 00E1                  		move.b	#$E1,d0
0000323E 6100 E35A                  		bsr.w	PlaySound_Special ; play "SEGA"	sound
00003242 11FC 0014 F62A             		move.b	#$14,($FFFFF62A).w
00003248 6100 FAB8                  		bsr.w	DelayProgram
0000324C 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
00003252                            
00003252                            Sega_WaitEnd:
00003252 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
00003258 6100 FAA8                  		bsr.w	DelayProgram
0000325C 4A78 F614                  		tst.w	($FFFFF614).w
00003260 6700                       		beq.s	Sega_GotoTitle
00003262 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
00003268 67E8                       		beq.s	Sega_WaitEnd	; if not, branch
0000326A                            
0000326A                            Sega_GotoTitle:
0000326A 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; go to title screen
00003270 4E75                       		rts	
00003272                            ; ===========================================================================
00003272                            
00003272                            ; ---------------------------------------------------------------------------
00003272                            ; Title	screen
00003272                            ; ---------------------------------------------------------------------------
00003272                            
00003272                            TitleScreen:				; XREF: GameModeArray
00003272 103C 00E4                  		move.b	#$E4,d0
00003276 6100 E322                  		bsr.w	PlaySound_Special ; stop music
0000327A 6100 EDA0                  		bsr.w	Pal_FadeFrom
0000327E 6100 E55C                  		bsr.w	ClearPLC
00003282 46FC 2700                  		move	#$2700,sr
00003286 6100 E2C8                  		bsr.w	SoundDriverLoad
0000328A 4DF9 00C0 0004             		lea	($C00004).l,a6
00003290 3CBC 8004                  		move.w	#$8004,(a6)
00003294 3CBC 8230                  		move.w	#$8230,(a6)
00003298 3CBC 8407                  		move.w	#$8407,(a6)
0000329C 3CBC 9001                  		move.w	#$9001,(a6)
000032A0 3CBC 9200                  		move.w	#$9200,(a6)
000032A4 3CBC 8B03                  		move.w	#$8B03,(a6)
000032A8 3CBC 8720                  		move.w	#$8720,(a6)
000032AC 4238 F64E                  		clr.b	($FFFFF64E).w
000032B0 6100 E210                  		bsr.w	ClearScreen
000032B4 43F8 D000                  		lea	($FFFFD000).w,a1
000032B8 7000                       		moveq	#0,d0
000032BA 323C 07FF                  		move.w	#$7FF,d1
000032BE                            
000032BE                            Title_ClrObjRam:
000032BE 22C0                       		move.l	d0,(a1)+
000032C0 51C9 FFFC                  		dbf	d1,Title_ClrObjRam ; fill object RAM ($D000-$EFFF) with	$0
000032C4                            
000032C4                            ; gomer
000032C4 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
000032CE 41F9 0000 0000             		lea	(Nem_Gomer).l,a0 ; load Gomer patterns
000032D4 6100 E368                  		bsr.w	NemDec
000032D8 7003                       		moveq	#3,d0		; load Sonic's pallet
000032DA 6100 EFEA                  		bsr.w	PalLoad1
000032DE                            
000032DE 43F9 00FF 0000             		lea	($FF0000).l,a1
000032E4 41F9 0000 0000             		lea	(Eni_Gomer).l,a0 ; load mappings for	Gomer credits
000032EA 303C 0000                  		move.w	#0,d0
000032EE 6100 E62C                  		bsr.w	EniDec
000032F2                            ; help how the fuck can i do this IT SHOWS NOTHING
000032F2 6100 EC7E                  		bsr.w	Pal_FadeTo
000032F6 43F9 00FF 0000             		lea	($FF0000).l,a1
000032FC 203C 4000 0003             		move.l	#$40000003,d0
00003302 7227                       		moveq	#$27,d1
00003304 741B                       		moveq	#$1B,d2
00003306 6100 E316                  		bsr.w	ShowVDPGraphics
0000330A                            
0000330A                            
0000330A 43F9 00FF 0000             		lea	($FF0000).l,a1
00003310 203C 6000 0003             		move.l	#$60000003,d0
00003316 7227                       		moveq	#$27,d1
00003318 741B                       		moveq	#$1B,d2
0000331A                            
0000331A 6100 ED00                  		bsr.w	Pal_FadeFrom
0000331E                            
0000331E                            
0000331E 6100 E1A2                  		bsr.w	ClearScreen
00003322 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
0000332C 41F9 0000 0000             		lea	(Nem_JapNames).l,a0 ; load Japanese credits
00003332 6100 E30A                  		bsr.w	NemDec
00003336 23FC 54C0 0000 00C0 0004   		move.l	#$54C00000,($C00004).l
00003340 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load alphabet
00003346 6100 E2F6                  		bsr.w	NemDec
0000334A 43F9 00FF 0000             		lea	($FF0000).l,a1
00003350 41F9 0000 0000             		lea	(Eni_JapNames).l,a0 ; load mappings for	Japanese credits
00003356 303C 0000                  		move.w	#0,d0
0000335A 6100 E5C0                  		bsr.w	EniDec
0000335E 43F9 00FF 0000             		lea	($FF0000).l,a1
00003364 203C 4000 0003             		move.l	#$40000003,d0
0000336A 7227                       		moveq	#$27,d1
0000336C 741B                       		moveq	#$1B,d2
0000336E 6100 E2AE                  		bsr.w	ShowVDPGraphics
00003372 6100 ECA8                  		bsr.w	Pal_FadeFrom
00003376 43F8 FB80                  		lea	($FFFFFB80).w,a1
0000337A 7000                       		moveq	#0,d0
0000337C 323C 001F                  		move.w	#$1F,d1
00003380                            
00003380                            
00003380                            Title_ClrPallet:
00003380 22C0                       		move.l	d0,(a1)+
00003382 51C9 FFFC                  		dbf	d1,Title_ClrPallet ; fill pallet with 0	(black)
00003386                            
00003386 7003                       		moveq	#3,d0		; load Sonic's pallet
00003388 6100 EF3C                  		bsr.w	PalLoad1
0000338C 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load "SONIC TEAM PRESENTS"	object
00003392 4EB9 0000 0000             		jsr	ObjectsLoad
00003398 4EB9 0000 0000             		jsr	BuildSprites
0000339E 6100 EBD2                  		bsr.w	Pal_FadeTo
000033A2 46FC 2700                  		move	#$2700,sr
000033A6 23FC 4000 0001 00C0 0004   		move.l	#$40000001,($C00004).l
000033B0 41F9 0000 0000             		lea	(Nem_TitleFg).l,a0 ; load title	screen patterns
000033B6 6100 E286                  		bsr.w	NemDec
000033BA 23FC 6000 0001 00C0 0004   		move.l	#$60000001,($C00004).l
000033C4 41F9 0000 0000             		lea	(Nem_TitleSonic).l,a0 ;	load Sonic title screen	patterns
000033CA 6100 E272                  		bsr.w	NemDec
000033CE 23FC 6200 0002 00C0 0004   		move.l	#$62000002,($C00004).l
000033D8 41F9 0000 0000             		lea	(Nem_TitleTM).l,a0 ; load "TM" patterns
000033DE 6100 E25E                  		bsr.w	NemDec
000033E2 4DF9 00C0 0000             		lea	($C00000).l,a6
000033E8 2D7C 5000 0003 0004        		move.l	#$50000003,4(a6)
000033F0 4BF9 0000 05E2             		lea	(Art_Text).l,a5
000033F6 323C 0BA9                  		move.w	#(Art_Text_end-Art_Text/4)-1,d1
000033FA                            
000033FA                            Title_LoadText:
000033FA 2C9D                       		move.l	(a5)+,(a6)
000033FC 51C9 FFFC                  		dbf	d1,Title_LoadText ; load uncompressed text patterns
00003400                            
00003400 11FC 0000 FE30             		move.b	#0,($FFFFFE30).w ; clear lamppost counter
00003406 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w ; disable debug item placement	mode
0000340C 31FC 0000 FFF0             		move.w	#0,($FFFFFFF0).w ; disable debug mode
00003412 31FC 0000 FFEA             		move.w	#0,($FFFFFFEA).w
00003418 31FC 0000 FE10             		move.w	#0,($FFFFFE10).w ; set level to	GHZ (00)
0000341E 31FC 0000 F634             		move.w	#0,($FFFFF634).w ; disable pallet cycling
00003424 6100 0000                  		bsr.w	LevelSizeLoad
00003428 6100 0000                  		bsr.w	DeformBgLayer
0000342C                            
0000342C 43F8 B000                  		lea	($FFFFB000).w,a1
00003430 41F9 0000 0000             		lea	(Blk16_GHZ).l,a0 ; load	GHZ 16x16 mappings
00003436 303C 0000                  		move.w	#0,d0
0000343A 6100 E4E0                  		bsr.w	EniDec
0000343E 41F9 0000 0000             		lea	(Blk256_GHZ).l,a0 ; load GHZ 256x256 mappings
00003444 43F9 00FF 0000             		lea	($FF0000).l,a1
0000344A 6100 E64E                  		bsr.w	KosDec
0000344E 6100 0000                  		bsr.w	LevelLayoutLoad
00003452                            
00003452 46FC 2700                  		move	#$2700,sr
00003456 6100 E06A                  		bsr.w	ClearScreen
0000345A 4BF9 00C0 0004             		lea	($C00004).l,a5
00003460 4DF9 00C0 0000             		lea	($C00000).l,a6
00003466 47F8 F708                  		lea	($FFFFF708).w,a3
0000346A 49F8 A440                  		lea	($FFFFA440).w,a4
0000346E 343C 6000                  		move.w	#$6000,d2
00003472 6100 0000                  		bsr.w	LoadTilesFromStart2
00003476 43F9 00FF 0000             		lea	($FF0000).l,a1
0000347C 41F9 0000 0000             		lea	(Eni_Title).l,a0 ; load	title screen mappings
00003482 303C 0000                  		move.w	#0,d0
00003486 6100 E494                  		bsr.w	EniDec
0000348A 43F9 00FF 0000             		lea	($FF0000).l,a1
00003490 203C 4206 0003             		move.l	#$42060003,d0
00003496 7221                       		moveq	#$21,d1
00003498 7415                       		moveq	#$15,d2
0000349A 6100 E182                  		bsr.w	ShowVDPGraphics
0000349E 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
000034A8 41F9 0000 0000             		lea	(Nem_GHZ_1st).l,a0 ; load GHZ patterns
000034AE 6100 E18E                  		bsr.w	NemDec
000034B2 7001                       		moveq	#1,d0		; load title screen pallet
000034B4 6100 EE10                  		bsr.w	PalLoad1
000034B8 103C 008A                  		move.b	#$8A,d0		; play title screen music
000034BC 6100 E0DC                  		bsr.w	PlaySound_Special
000034C0 11FC 0000 FFFA             		move.b	#0,($FFFFFFFA).w ; disable debug mode
000034C6 31FC 0178 F614             		move.w	#$178,($FFFFF614).w ; run title	screen for $178	frames
000034CC 43F8 D080                  		lea	($FFFFD080).w,a1
000034D0 7000                       		moveq	#0,d0
000034D2 323C 000F                  		move.w	#$F,d1
000034D6                            
000034D6                            Title_ClrObjRam2:
000034D6 22C0                       		move.l	d0,(a1)+
000034D8 51C9 FFFC                  		dbf	d1,Title_ClrObjRam2
000034DC                            
000034DC 11FC 000E D040             		move.b	#$E,($FFFFD040).w ; load big Sonic object
000034E2 11FC 000F D080             		move.b	#$F,($FFFFD080).w ; load "PRESS	START BUTTON" object
000034E8 11FC 000F D0C0             		move.b	#$F,($FFFFD0C0).w ; load "TM" object
000034EE 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
000034F4 11FC 000F D100             		move.b	#$F,($FFFFD100).w
000034FA 11FC 0002 D11A             		move.b	#2,($FFFFD11A).w
00003500 4EB9 0000 0000             		jsr	ObjectsLoad
00003506 6100 0000                  		bsr.w	DeformBgLayer
0000350A 4EB9 0000 0000             		jsr	BuildSprites
00003510 7000                       		moveq	#0,d0
00003512 6100 E29C                  		bsr.w	LoadPLC2
00003516 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
0000351C 31FC 0000 FFE6             		move.w	#0,($FFFFFFE6).w
00003522 3038 F60C                  		move.w	($FFFFF60C).w,d0
00003526 0000 0040                  		ori.b	#$40,d0
0000352A 33C0 00C0 0004             		move.w	d0,($C00004).l
00003530 6100 EA40                  		bsr.w	Pal_FadeTo
00003534                            
00003534                            loc_317C:
00003534 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
0000353A 6100 F7C6                  		bsr.w	DelayProgram
0000353E 4EB9 0000 0000             		jsr	ObjectsLoad
00003544 6100 0000                  		bsr.w	DeformBgLayer
00003548 4EB9 0000 0000             		jsr	BuildSprites
0000354E 6100 E60C                  		bsr.w	PalCycle_Title
00003552 6100 E296                  		bsr.w	RunPLC_RAM
00003556 3038 D008                  		move.w	($FFFFD008).w,d0
0000355A 5440                       		addq.w	#2,d0
0000355C 31C0 D008                  		move.w	d0,($FFFFD008).w ; move	Sonic to the right
00003560 0C40 1C00                  		cmpi.w	#$1C00,d0	; has Sonic object passed x-position $1C00?
00003564 6500                       		bcs.s	Title_ChkRegion	; if not, branch
00003566 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
0000356C 4E75                       		rts	
0000356E                            ; ===========================================================================
0000356E                            
0000356E                            Title_ChkRegion:
0000356E 4A38 FFF8                  		tst.b	($FFFFFFF8).w	; check	if the machine is US or	Japanese
00003572 6A00                       		bpl.s	Title_RegionJ	; if Japanese, branch
00003574 41F9 0000 0000             		lea	(LevelSelectCode_US).l,a0 ; load US code
0000357A 6000                       		bra.s	Title_EnterCheat
0000357C                            ; ===========================================================================
0000357C                            
0000357C                            Title_RegionJ:				; XREF: Title_ChkRegion
0000357C 41F9 0000 0000             		lea	(LevelSelectCode_J).l,a0 ; load	J code
00003582                            
00003582                            Title_EnterCheat:			; XREF: Title_ChkRegion
00003582 3038 FFE4                  		move.w	($FFFFFFE4).w,d0
00003586 D0C0                       		adda.w	d0,a0
00003588 1038 F605                  		move.b	($FFFFF605).w,d0 ; get button press
0000358C 0200 000F                  		andi.b	#$F,d0		; read only up/down/left/right buttons
00003590 B010                       		cmp.b	(a0),d0		; does button press match the cheat code?
00003592 6600                       		bne.s	loc_3210	; if not, branch
00003594 5278 FFE4                  		addq.w	#1,($FFFFFFE4).w ; next	button press
00003598 4A00                       		tst.b	d0
0000359A 6600                       		bne.s	Title_CountC
0000359C 41F8 FFE0                  		lea	($FFFFFFE0).w,a0
000035A0 3238 FFE6                  		move.w	($FFFFFFE6).w,d1
000035A4 E249                       		lsr.w	#1,d1
000035A6 0241 0003                  		andi.w	#3,d1
000035AA 6700                       		beq.s	Title_PlayRing
000035AC 4A38 FFF8                  		tst.b	($FFFFFFF8).w
000035B0 6A00                       		bpl.s	Title_PlayRing
000035B2 7201                       		moveq	#1,d1
000035B4 1181 1001                  		move.b	d1,1(a0,d1.w)
000035B8                            
000035B8                            Title_PlayRing:
000035B8 11BC 0001 1000             		move.b	#1,(a0,d1.w)	; activate cheat
000035BE 103C 00B5                  		move.b	#$B5,d0		; play ring sound when code is entered
000035C2 6100 DFD6                  		bsr.w	PlaySound_Special
000035C6 6000                       		bra.s	Title_CountC
000035C8                            ; ===========================================================================
000035C8                            
000035C8                            loc_3210:				; XREF: Title_EnterCheat
000035C8 4A00                       		tst.b	d0
000035CA 6700                       		beq.s	Title_CountC
000035CC 0C78 0009 FFE4             		cmpi.w	#9,($FFFFFFE4).w
000035D2 6700                       		beq.s	Title_CountC
000035D4 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
000035DA                            
000035DA                            Title_CountC:
000035DA 1038 F605                  		move.b	($FFFFF605).w,d0
000035DE 0200 0020                  		andi.b	#$20,d0		; is C button pressed?
000035E2 6700                       		beq.s	loc_3230	; if not, branch
000035E4 5278 FFE6                  		addq.w	#1,($FFFFFFE6).w ; increment C button counter
000035E8                            
000035E8                            loc_3230:
000035E8 4A78 F614                  		tst.w	($FFFFF614).w
000035EC 6700 0000                  		beq.w	Demo
000035F0                            		; (temporary until we have an actual options screen)
000035F0 0838 0005 F605             		btst	#5,	($FFFFF605).w ; check if c pressed
000035F6 6700                       		beq.s	@notc
000035F8                            
000035F8 5238 FFE8                  		add.b	#1,(v_character).w ; sonic/gronic 
000035FC 0C38 0003 FFE8             		cmpi.b	#3,(v_character).w
00003602 6D00                       		blt.s	@notoverflow
00003604 11FC 0000 FFE8             		move.b	#0,(v_character).w
0000360A                            	@notoverflow:
0000360A 103C 00B5                  		move.b	#$B5,d0		; play ring sound when code is entered
0000360E 6100 DF8A                  		bsr.w	PlaySound_Special
00003612                            	@notc:
00003612 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; check if Start is pressed
00003618 6700 FF1A                  		beq.w	loc_317C	; if not, branch
0000361C                            
0000361C                            Title_ChkLevSel:
0000361C 0838 0006 F604             		btst	#6,($FFFFF604).w ; check if A is pressed
00003622 6700 0000                  		beq.w	PlayLevel	; if not, play level
00003626                            		
00003626                            		
00003626 7002                       		moveq	#2,d0
00003628 6100 ECB8                  		bsr.w	PalLoad2	; load level select pallet
0000362C 43F8 CC00                  		lea	($FFFFCC00).w,a1
00003630 7000                       		moveq	#0,d0
00003632 323C 00DF                  		move.w	#$DF,d1
00003636                            
00003636                            Title_ClrScroll:
00003636 22C0                       		move.l	d0,(a1)+
00003638 51C9 FFFC                  		dbf	d1,Title_ClrScroll ; fill scroll data with 0
0000363C                            
0000363C 21C0 F616                  		move.l	d0,($FFFFF616).w
00003640 46FC 2700                  		move	#$2700,sr
00003644 4DF9 00C0 0000             		lea	($C00000).l,a6
0000364A 23FC 6000 0003 00C0 0004   		move.l	#$60000003,($C00004).l
00003654 323C 03FF                  		move.w	#$3FF,d1
00003658                            
00003658                            Title_ClrVram:
00003658 2C80                       		move.l	d0,(a6)
0000365A 51C9 FFFC                  		dbf	d1,Title_ClrVram ; fill	VRAM with 0
0000365E                            
0000365E 4A38 FFE0                  		tst.b	($FFFFFFE0).w	; check	if level select	code is	on
00003662 6700 0000                  		beq.w	GotoOptions	; if not, play level
00003666                            
00003666 6100 0000                  		bsr.w	LevSelTextLoad
0000366A                            		
0000366A                            		; sound test fix
0000366A 3C38 FF82                  		move.w	($FFFFFF82).w,d6
0000366E 31FC 0014 FF82             		move.w	#$14,($FFFFFF82).w
00003674                            		
00003674 363C C65F                  		move.w	#$C680-$21,d3 ; selected
00003678 0C46 0014                  		cmpi.w	#$14,d6
0000367C 6700                       		beq.s	@issndtst
0000367E 363C E65F                  		move.w	#$E680-$21,d3 ; not selected
00003682                            	@issndtst:
00003682 6100 0000                  		bsr.w	LevSelSndTest	; refresh text
00003686 31C6 FF82                  		move.w	d6,($FFFFFF82).w
0000368A                            		
0000368A 363C C65F                  		move.w	#$C680-$21,d3	; VRAM setting
0000368E 2D7C 6D02 0003 0004        		move.l	#lsctrlpos,4(a6)
00003696                            		
00003696 0C78 0014 FF82             		cmpi.w	#$14,($FFFFFF82).w
0000369C 6700                       		beq.s	@issndtst2
0000369E                            		
0000369E 43F9 0000 0000             		lea	(Controls_Normal).l,a1 ; control help
000036A4 6100 0000                  		bsr.w	CStringSlop
000036A8 6000                       		bra.s	LevelSelect
000036AA                            	@issndtst2:
000036AA 43F9 0000 0000             		lea	(Controls_SND).l,a1
000036B0 6100 0000                  		bsr.w	CStringSlop
000036B4                            		
000036B4                            ; ---------------------------------------------------------------------------
000036B4                            ; Level	Select
000036B4                            ; ---------------------------------------------------------------------------
000036B4                            LevelSelect:
000036B4 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
000036BA 6100 F646                  		bsr.w	DelayProgram
000036BE 6100 0000                  		bsr.w	LevSelControls
000036C2 6100 E126                  		bsr.w	RunPLC_RAM
000036C6 4AB8 F680                  		tst.l	($FFFFF680).w
000036CA 66E8                       		bne.s	LevelSelect
000036CC 0238 00F0 F605             		andi.b	#$F0,($FFFFF605).w ; is	A, B, C, or Start pressed?
000036D2 67E0                       		beq.s	LevelSelect	; if not, branch
000036D4 3038 FF82                  		move.w	($FFFFFF82).w,d0
000036D8 0C40 0000                  		cmpi.w	#lswifi,d0		; have you selected item $15 (free wifi)?
000036DC 6600                       		bne.s	@dont	; if not, dont blow this place up
000036DE                            			
000036DE 11FC 00E5 F00B             		move.b	#$E5,($FFFFF00B).w ; YOU ARE AN IDIOT BOOM
000036E4 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
000036EA 6100 F616                  		bsr.w	DelayProgram
000036EE                            	@dont:
000036EE 0C40 0000                  		cmpi.w	#lssndtest,d0		; have you selected item $14 (sound test)?
000036F2 6600                       		bne.s	LevSel_Level_SS	; if not, go to	Level/SS subroutine
000036F4                            		
000036F4 0238 00A0 F605             		andi.b	#$A0,($FFFFF605).w ; is C or Start pressed?
000036FA 67B8                       		beq.s	LevelSelect	; if not, branch
000036FC                            		
000036FC 0838 0007 F605             		btst	#7,($FFFFF605).w ; was it start?
00003702 6600                       		bne.s	LevSel_SEGA ; then go to sega screen
00003704                            		
00003704 1038 FF84                  		move.b	($FFFFFF84).w,d0
00003708 11C0 F00B                  		move.b	d0,($FFFFF00B).w ; PlaySound_Special but faster
0000370C                            		
0000370C 4EB9 0000 0000             		jsr		ShowNow_Playing
00003712 60A0                       		bra.s	LevelSelect
00003714                            ; ===========================================================================
00003714                            
00003714                            LevSel_SEGA:				; XREF: LevelSelect
00003714 11FC 0000 F600             		move.b	#$0,($FFFFF600).w ; set screen	mode to	$0 SEGA
0000371A 4E75                       		rts	
0000371C                            ; ===========================================================================
0000371C                            
0000371C                            LevSel_Ending:				; XREF: LevelSelect
0000371C 11FC 0018 F600             		move.b	#$18,($FFFFF600).w ; set screen	mode to	$18 (Ending)
00003722 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	to 0600	(Ending)
00003728 4E75                       		rts	
0000372A                            ; ===========================================================================
0000372A                            
0000372A                            LevSel_Credits:				; XREF: LevelSelect
0000372A 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set screen	mode to	$1C (Credits)
00003730 103C 0091                  		move.b	#$91,d0
00003734 6100 DE64                  		bsr.w	PlaySound_Special ; play credits music
00003738 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w
0000373E 4E75                       		rts	
00003740                            ; ===========================================================================
00003740                            
00003740                            LevSel_Level_SS:			; XREF: LevelSelect
00003740 D040                       		add.w	d0,d0
00003742 303B 0000                  		move.w	LSelectPointers(pc,d0.w),d0 ; load level number
00003746 6B00 FF6C                  		bmi.w	LevelSelect
0000374A 0C40 FFFF                  		cmpi.w	#$FFFF,d0	; check	if level is 0700 (Special Stage)
0000374E 6600                       		bne.s	LevSel_Level	; if not, branch
00003750 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
00003756 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level
0000375A 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
00003760 7000                       		moveq	#0,d0
00003762 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00003766 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
0000376A 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
0000376E 4E75                       		rts	
00003770                            ; ===========================================================================
00003770                            
00003770                            LevSel_Level:				; XREF: LevSel_Level_SS
00003770 0240 3FFF                  		andi.w	#$3FFF,d0
00003774 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
00003778                            
00003778                            PlayLevel:				; XREF: ROM:00003246j ...
00003778 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
0000377E 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
00003784 7000                       		moveq	#0,d0
00003786 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
0000378A 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
0000378E 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00003792 11C0 FE16                  		move.b	d0,($FFFFFE16).w ; clear special stage number
00003796 11C0 FE57                  		move.b	d0,($FFFFFE57).w ; clear emeralds
0000379A 21C0 FE58                  		move.l	d0,($FFFFFE58).w ; clear emeralds
0000379E 21C0 FE5C                  		move.l	d0,($FFFFFE5C).w ; clear emeralds
000037A2 11C0 FE18                  		move.b	d0,($FFFFFE18).w ; clear continues
000037A6 103C 00E0                  		move.b	#$E0,d0
000037AA 6100 DDEE                  		bsr.w	PlaySound_Special ; fade out music
000037AE 4E75                       		rts	
000037B0                            ; ===========================================================================
000037B0                            ; ---------------------------------------------------------------------------
000037B0                            ; Level	select - level pointers
000037B0                            ; ---------------------------------------------------------------------------
000037B0                            LSelectPointers:
000037B0 0000                       		dc.w $0000 ; crz
000037B2 0001                       		dc.w $0001
000037B4 0002                       		dc.w $0002
000037B6 0100                       		dc.w $0100 ; ilfez
000037B8 0101                       		dc.w $0101
000037BA 0102                       		dc.w $0102
000037BC 0200                       		dc.w $0200 ; mz
000037BE 0201                       		dc.w $0201
000037C0 0202                       		dc.w $0202
000037C2 0300                       		dc.w $0300 ; dgrotz
000037C4 0301                       		dc.w $0301 
000037C6 0302                       		dc.w $0302 
000037C8 0700                       		dc.w $0700 ; the other mz...
000037CA 0701                       		dc.w $0701 
000037CC 0702                       		dc.w $0702 
000037CE 0400                       		dc.w $0400 ; tpfbz
000037D0 0401                       		dc.w $0401
000037D2 0402                       		dc.w $0402
000037D4 0500                       		dc.w $0500 ; zzzzz
000037D6 0501                       		dc.w $0501 
000037D8 0103                       		dc.w $0103 
000037DA 0502                       		dc.w $0502 ; fz
000037DC FFFF                       		dc.w $FFFF ; special
000037DE 8000                       		dc.w $8000 ; sound test
000037E0                            		even
000037E0                            ; --------------------------------------
000037E0                            ; ---------------------------------------------------------------------------
000037E0                            ; Level	select codes
000037E0                            ; ---------------------------------------------------------------------------
000037E0                            LevelSelectCode_J:
000037E0                            		incbin	misc\ls_jcode.bin
000037E6                            		even
000037E6                            
000037E6                            LevelSelectCode_US:
000037E6                            		incbin	misc\ls_ucode.bin
000037EC                            		even
000037EC                            ; ===========================================================================
000037EC                            
000037EC                            ; ---------------------------------------------------------------------------
000037EC                            ; Demo mode
000037EC                            ; ---------------------------------------------------------------------------
000037EC                            
000037EC                            Demo:					; XREF: TitleScreen
000037EC 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
000037F2                            
000037F2                            loc_33B6:				; XREF: loc_33E4
000037F2 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
000037F8 6100 F508                  		bsr.w	DelayProgram
000037FC 6100 0000                  		bsr.w	DeformBgLayer
00003800 6100 E338                  		bsr.w	PalCycle_Load
00003804 6100 DFE4                  		bsr.w	RunPLC_RAM
00003808 3038 D008                  		move.w	($FFFFD008).w,d0
0000380C 5440                       		addq.w	#2,d0
0000380E 31C0 D008                  		move.w	d0,($FFFFD008).w
00003812 0C40 1C00                  		cmpi.w	#$1C00,d0
00003816 6500                       		bcs.s	loc_33E4
00003818 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set screen mode to 00 (level)
0000381E 4E75                       		rts	
00003820                            ; ===========================================================================
00003820                            
00003820                            loc_33E4:				; XREF: Demo
00003820 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
00003826 6600 FDF4                  		bne.w	Title_ChkLevSel	; if yes, branch
0000382A 4A78 F614                  		tst.w	($FFFFF614).w
0000382E 6600 FFC2                  		bne.w	loc_33B6
00003832 103C 00E0                  		move.b	#$E0,d0
00003836 6100 DD62                  		bsr.w	PlaySound_Special ; fade out music
0000383A 3038 FFF2                  		move.w	($FFFFFFF2).w,d0 ; load	demo number
0000383E 0240 0007                  		andi.w	#7,d0
00003842 D040                       		add.w	d0,d0
00003844 303B 0000                  		move.w	Demo_Levels(pc,d0.w),d0	; load level number for	demo
00003848 31C0 FE10                  		move.w	d0,($FFFFFE10).w
0000384C 5278 FFF2                  		addq.w	#1,($FFFFFFF2).w ; add 1 to demo number
00003850 0C78 0004 FFF2             		cmpi.w	#4,($FFFFFFF2).w ; is demo number less than 4?
00003856 6500                       		bcs.s	loc_3422	; if yes, branch
00003858 31FC 0000 FFF2             		move.w	#0,($FFFFFFF2).w ; reset demo number to	0
0000385E                            
0000385E                            loc_3422:
0000385E 31FC 0001 FFF0             		move.w	#1,($FFFFFFF0).w ; turn	demo mode on
00003864 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set screen mode to 08 (demo)
0000386A 0C40 0600                  		cmpi.w	#$600,d0	; is level number 0600 (special	stage)?
0000386E 6600                       		bne.s	Demo_Level	; if not, branch
00003870 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
00003876 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level number
0000387A 4238 FE16                  		clr.b	($FFFFFE16).w	; clear	special	stage number
0000387E                            
0000387E                            Demo_Level:
0000387E 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
00003884 7000                       		moveq	#0,d0
00003886 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
0000388A 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
0000388E 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00003892 4E75                       		rts	
00003894                            ; ===========================================================================
00003894                            ; ---------------------------------------------------------------------------
00003894                            ; Levels used in demos
00003894                            ; ---------------------------------------------------------------------------
00003894                            Demo_Levels:	incbin	misc\dm_ord1.bin
0000389C                            		even
0000389C                            
0000389C                            ; ---------------------------------------------------------------------------
0000389C                            ; Subroutine to	change what you're selecting in the level select
0000389C                            ; ---------------------------------------------------------------------------
0000389C                            
0000389C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000389C                            
0000389C                            
0000389C                            LevSelControls:				; XREF: LevelSelect
0000389C 1238 F605                  		move.b	($FFFFF605).w,d1
000038A0 0201 0003                  		andi.b	#3,d1		; is up/down pressed and held?
000038A4 6600                       		bne.s	LevSel_UpDown	; if yes, branch
000038A6 5378 FF80                  		subq.w	#1,($FFFFFF80).w ; subtract 1 from time	to next	move
000038AA 6A00 0000                  		bpl.w	LevSel_SndTest	; if time remains, branch
000038AE                            
000038AE                            LevSel_UpDown:
000038AE 31FC 000B FF80             		move.w	#$B,($FFFFFF80).w ; reset time delay
000038B4 1238 F604                  		move.b	($FFFFF604).w,d1
000038B8 0201 0003                  		andi.b	#3,d1		; is up/down pressed?
000038BC 6700 0000                  		beq.w	LevSel_SndTest	; if not, branch
000038C0 3C38 FF82                  		move.w	($FFFFFF82).w,d6
000038C4 0801 0000                  		btst	#0,d1		; is up	pressed?
000038C8 6700                       		beq.s	LevSel_Down	; if not, branch
000038CA 5346                       		subq.w	#1,d6		; move up 1 selection
000038CC 6400                       		bcc.s	LevSel_Down
000038CE 7C00                       		moveq	#lsselectable,d6		; if selection moves below 0, jump to last selection
000038D0                            
000038D0                            LevSel_Down:
000038D0 0801 0001                  		btst	#1,d1		; is down pressed?
000038D4 6700                       		beq.s	LevSel_Refresh	; if not, branch
000038D6 5246                       		addq.w	#1,d6		; move down 1 selection
000038D8 0C46 0000                  		cmpi.w	#lsselectable+1,d6
000038DC 6500                       		bcs.s	LevSel_Refresh
000038DE 7C00                       		moveq	#0,d6		; if selection moves above last selectable,	jump to	selection 0
000038E0 6000                       		bra.s	LevSel_Refresh
000038E2                            		
000038E2                            LevSel_LR:
000038E2 0801 0002                  		btst	#2,d1		; is left pressed?
000038E6 6700                       		beq.s	LevSel_Right	; if not, branch
000038E8 0446 0000                  		sub.w	#lsrow2size,d6
000038EC 64E2                       		bcc.s	LevSel_Down
000038EE 0646 0000                  		add.w	#lsrow2size,d6	; don't jump
000038F2                            LevSel_Right:
000038F2 0801 0003                  		btst	#3,d1		; is right pressed?
000038F6 6700                       		beq.s	LevSel_Refresh	; if not, branch
000038F8 0646 0000                  		add.w	#lsrow1size,d6
000038FC 0C46 0000                  		cmpi.w	#lsselectable+1,d6
00003900 6500                       		bcs.s	LevSel_Refresh
00003902 0446 0000                  		sub.w	#lsrow1size,d6	; don't jump
00003906                            ; ===========================================================================
00003906                            LevSel_Refresh:
00003906                            		
00003906 363C E65F                  		move.w	#$E680-$21,d3	; VRAM setting
0000390A 6100 0000                  		bsr.w	LevSelHighlightCode	; refresh text
0000390E                            		
0000390E 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w
00003914 6600                       		bne.s	@exitsndtest
00003916                            		
00003916 363C C65F                  		move.w	#$C680-$21,d3	; VRAM setting
0000391A 43F9 0000 0000             		lea	(Controls_Normal).l,a1
00003920 2D7C 6D02 0003 0004        		move.l	#lsctrlpos,4(a6)
00003928 6100 0000                  		bsr.w	CStringSlop
0000392C                            	@exitsndtest:
0000392C                            	
0000392C 363C C65F                  		move.w	#$C680-$21,d3
00003930 31C6 FF82                  		move.w	d6,($FFFFFF82).w ; set new selection
00003934 6100 0000                  		bsr.w	LevSelHighlightCode	; refresh text
00003938                            		
00003938 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w 
0000393E 6600                       		bne.s	@entersndtest
00003940                            		
00003940 363C C65F                  		move.w	#$C680-$21,d3
00003944 43F9 0000 0000             		lea	(Controls_SND).l,a1
0000394A 2D7C 6D02 0003 0004        		move.l	#lsctrlpos,4(a6)
00003952 6100 0000                  		bsr.w	CStringSlop
00003956                            	@entersndtest:
00003956 4E75                       		rts	
00003958                            		
00003958                            LevSel_SndTest:				; XREF: LevSelControls
00003958 1238 F605                  		move.b	($FFFFF605).w,d1
0000395C 0201 005C                  		andi.b	#$5C,d1		; is left/right/a/b	pressed?
00003960 6700                       		beq.s	LevSel_NoMove	; if not, branch
00003962 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w ; is item $14 selected?
00003968 6600 FF78                  		bne.w	LevSel_LR	; if not, branch
0000396C                            		
0000396C 1038 FF84                  		move.b	($FFFFFF84).w,d0
00003970 0801 0002                  		btst	#2,d1		; is left pressed?
00003974 6700                       		beq.s	SndTest_Right	; if not, branch
00003976 5300                       		subq.b	#1,d0		; subtract 1 from sound	test
00003978                            		; no need the fact it's a byte does the trick
00003978                            
00003978                            SndTest_Right:
00003978 0801 0003                  		btst	#3,d1		; is right pressed?
0000397C 6700                       		beq.s	SndTest_A	; if not, branch
0000397E 5200                       		addq.b	#1,d0		; add 1	to sound test
00003980                            		; same here
00003980                            		
00003980                            SndTest_A:
00003980 0801 0006                  		btst	#6,d1		; is A pressed?
00003984 6700                       		beq.s	SndTest_B	; if not, branch
00003986 5100                       		subq.b	#8,d0		; subtract $10 to sound test
00003988 5100                       		subq.b	#8,d0
0000398A                            		
0000398A                            SndTest_B:
0000398A 0801 0004                  		btst	#4,d1		; is B pressed?
0000398E 6700                       		beq.s	SndTest_Refresh	; if not, branch
00003990 5000                       		addq.b	#8,d0		; add $10 to sound test
00003992 5000                       		addq.b	#8,d0
00003994                            
00003994                            SndTest_Refresh:
00003994 363C C65F                  		move.w	#$C680-$21,d3
00003998 11C0 FF84                  		move.b	d0,($FFFFFF84).w ; set sound test number
0000399C 6000 0000                  		bra.w	LevSelSndTest	; refresh text
000039A0                            
000039A0                            LevSel_NoMove:
000039A0 4E75                       		rts	
000039A2                            ; End of function LevSelControls
000039A2                            
000039A2                            ; ---------------------------------------------------------------------------
000039A2                            ; Subroutine to load level select text
000039A2                            ; ---------------------------------------------------------------------------
000039A2                            
000039A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000039A2                            
000039A2                            LevSelTextLoad_loop:
000039A2 2D44 0004                  		move.l	d4,4(a6)
000039A6 6100 0000                  		bsr.w	LevSel_ChgLine
000039AA 0684 0080 0000             		addi.l	#$800000,d4
000039B0 51C9 FFF0                  		dbf.w	d1,LevSelTextLoad_loop
000039B4 4E75                       		rts
000039B6                            LevSelTextLoad:				; XREF: TitleScreen
000039B6 43F9 0000 0000             		lea	(LevelMenuText).l,a1
000039BC 4DF9 00C0 0000             		lea	($C00000).l,a6
000039C2 363C E65F                  		move.w	#$E680-$21,d3	; VRAM setting
000039C6 283C 6086 0003             		move.l	#lsscrpos,d4	; screen position (text)
000039CC                            		
000039CC 323C 0000                  		move.w	#lsrow1size-1,d1		; number of lines of text (first row)
000039D0 61D0                       		bsr.s	LevSelTextLoad_loop
000039D2                            		
000039D2                            		
000039D2 283C 60AA 0003             		move.l	#lsscrpos+lsoff,d4
000039D8 323C 0000                  		move.w	#lsrow2size-1,d1		; number of lines of text (second row)
000039DC 61C4                       		bsr.s	LevSelTextLoad_loop
000039DE 363C C65F                  		move.w	#$C680-$21,d3
000039E2                            		
000039E2                            LevSelHighlightCode:
000039E2 4DF9 00C0 0000             		lea	($C00000).l,a6
000039E8 7000                       		moveq	#0,d0
000039EA 3038 FF82                  		move.w	($FFFFFF82).w,d0
000039EE 3200                       		move.w	d0,d1
000039F0 283C 6086 0003             		move.l	#lsscrpos,d4
000039F6                            		
000039F6 0C40 0000                  		cmpi.w	#lsrow1size,d0
000039FA 6D00                       		blt.s	@notsecond
000039FC                            		
000039FC 0440 0000                  		sub.w	#lsrow1size,d0
00003A00 0684 0024 0000             		addi.l	#lsoff,d4
00003A06                            	@notsecond:
00003A06 EF48                       		lsl.w	#7,d0
00003A08 4840                       		swap	d0
00003A0A D880                       		add.l	d0,d4
00003A0C 43F9 0000 0000             		lea	(LevelMenuText).l,a1
00003A12 E749                       		lsl.w	#3,d1
00003A14 D241                       		add.w	d1,d1
00003A16 D2C1                       		adda.w	d1,a1
00003A18 2D44 0004                  		move.l	d4,4(a6)
00003A1C 6100 0000                  		bsr.w	LevSel_ChgLine
00003A20 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w
00003A26 6700                       		beq.s	LevSelSndTest
00003A28 4E75                       		rts
00003A2A                            
00003A2A                            LevSelSndTest:
00003A2A 0643 0030                  		add.w	#$30,d3
00003A2E 23FC 64C2 0003 00C0 0004   		move.l	#lsstpos,($C00004).l ; screen	position (sound	test)
00003A38 1038 FF84                  		move.b	($FFFFFF84).w,d0
00003A3C 1400                       		move.b	d0,d2
00003A3E E808                       		lsr.b	#4,d0
00003A40 6100 0000                  		bsr.w	LevSel_ChgSnd
00003A44 1002                       		move.b	d2,d0
00003A46 6100 0000                  		bsr.w	LevSel_ChgSnd
00003A4A 4E75                       		rts	
00003A4C                            ; End of function LevSelTextLoad
00003A4C                            
00003A4C                            
00003A4C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003A4C                            
00003A4C                            
00003A4C                            LevSel_ChgSnd:				; XREF: LevSelTextLoad
00003A4C 0240 000F                  		andi.w	#$F,d0
00003A50 0C00 000A                  		cmpi.b	#$A,d0
00003A54 6500                       		bcs.s	loc_3580
00003A56 5E00                       		addi.b	#7,d0
00003A58                            
00003A58                            loc_3580:
00003A58 D043                       		add.w	d3,d0
00003A5A 3C80                       		move.w	d0,(a6)
00003A5C 4E75                       		rts	
00003A5E                            ; End of function LevSel_ChgSnd
00003A5E                            
00003A5E                            
00003A5E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003A5E                            
00003A5E                            
00003A5E                            LevSel_ChgLine:				; XREF: LevSelTextLoad
00003A5E 740F                       		moveq	#$10-1,d2		; number of characters per line
00003A60                            
00003A60                            @loop:
00003A60 7000                       		moveq	#0,d0
00003A62 1019                       		move.b	(a1)+,d0
00003A64 0C00 0020                  		cmpi.b	#$20,d0
00003A68 6E00                       		bgt.s	@draw
00003A6A 3CBC 0000                  		move.w	#0,(a6)
00003A6E 51CA FFF0                  		dbf	d2,@loop
00003A72 4E75                       		rts	
00003A74                            ; ===========================================================================
00003A74                            
00003A74                            @draw:				; XREF: LevSel_ChgLine
00003A74 D043                       		add.w	d3,d0
00003A76 3C80                       		move.w	d0,(a6)
00003A78 51CA FFE6                  		dbf	d2,@loop
00003A7C 4E75                       		rts	
00003A7E                            ; End of function LevSel_ChgLine
00003A7E                            		
00003A7E                            CStringSlop_draw:
00003A7E D043                       		add.w	d3,d0
00003A80 3C80                       		move.w	d0,(a6)
00003A82                            CStringSlop:				; XREF: LevSelTextLoad
00003A82 7000                       		moveq	#0,d0
00003A84 1019                       		move.b	(a1)+,d0
00003A86 0C00 0020                  		cmpi.b	#$20,d0
00003A8A 6EF2                       		bgt.s	CStringSlop_draw
00003A8C                            		
00003A8C 0C00 0001                  		cmpi.b	#1,d0
00003A90 6700                       		beq.s	@InsertSpaces
00003A92 6500                       		blo.s	@end
00003A94                            		
00003A94 3CBC 0000                  		move.w	#0,(a6)
00003A98 60E8                       		bra.s	CStringSlop
00003A9A                            	@end:
00003A9A 4E75                       		rts
00003A9C                            	@InsertSpaces:
00003A9C 7000                       		moveq	#0,d0
00003A9E 1019                       		move.b	(a1)+,d0
00003AA0                            		
00003AA0                            	@insert:
00003AA0 3CBC 0000                  		move.w	#0,(a6)
00003AA4 51C8 FFFA                  		dbf.w	d0,@insert
00003AA8 60D8                       		bra.s	CStringSlop
00003AAA                            ; End of function LevSel_ChgLine
00003AAA                            
00003AAA                            ; ===========================================================================
00003AAA                            ; ---------------------------------------------------------------------------
00003AAA                            ; Level	select menu text ( this stupid level select code was brought to you by the meltdown guy )
00003AAA                            ; ---------------------------------------------------------------------------
00003AAA                            LevelMenuText:	
00003AAA 4352 554E 4348 5920 524F+  		dc.b    "CRUNCHY ROLL   1"
00003ABA 2020 2020 2020 2020 2020+          dc.b    "               2"
00003ACA 2020 2020 2020 2020 2020+          dc.b    "               3"
00003ADA 4920 4C49 4B45 2046 494C+          dc.b    "I LIKE FILE    1"
00003AEA 2045 5850 4C4F 5245 5220+          dc.b    " EXPLORER      2"
00003AFA 2020 2020 2020 2020 2020+          dc.b    "               3"
00003B0A 4D41 5242 4C20 2020 2020+          dc.b    "MARBL          1"
00003B1A 2020 2020 2020 2020 2020+          dc.b    "               2"
00003B2A 2020 2020 2020 2020 2020+          dc.b    "               3"
00003B3A 444F 4E54 4745 5452 4944+          dc.b    "DONTGETRIDOTHIS1"
00003B4A 2020 2020 2020 2020 2020+          dc.b    "               2"
00003B5A 2020 2020 2020 2020 2020+          dc.b    "               3"
00003B6A 4D41 4B4F 544F 2020 2020+          dc.b    "MAKOTO         1"
00003B7A 2020 2020 2020 2020 2020+          dc.b    "               2"
00003B8A 2020 2020 2020 2020 2020+          dc.b    "               3"
00003B9A                            LMTSecondRow:
00003B9A 5448 4520 5049 4720 4652+          dc.b    "THE PIG FROM   1"
00003BAA 2042 4152 4E59 4152 4420+          dc.b    " BARNYARD      2"
00003BBA 2020 2020 2020 2020 2020+          dc.b    "               3"
00003BCA 5A20 5A20 5A20 5A20 2020+          dc.b    "Z Z Z Z        1"
00003BDA 2020 2020 2020 2020 2020+          dc.b    "               2"
00003BEA 2020 2020 2020 2020 2020+          dc.b    "               3"
00003BFA 4649 4E41 4C20 5A4F 4E45+          dc.b    "FINAL ZONE      "
00003C0A 5350 4543 4941 4C20 5354+          dc.b    "SPECIAL STAGE   "
00003C1A 534F 554E 4420 5445 5354+          dc.b    "SOUND TEST $    "
00003C2A 4652 4545 2057 4946 4920+  		dc.b	"FREE WIFI       "
00003C3A 4F50 5449 4F4E 5320 4C41+  		dc.b	"OPTIONS LATER   "
00003C4A                            LMTSelectableEnd:
00003C4A 4341 4E54 2054 4F55 4348+  		dc.b	"CANT TOUCH ME XD"
00003C5A                            LMTEnd:
00003C5A                            
00003C5A                            Now_Playing:
00003C5A 3E3E 3E4E 4F57 2050 4C41+  		dc.b	">>>NOW PLAYING ",0
00003C6A                            		even
00003C6A                            NP_Track:
00003C6A 5452 4143 4B20 2400        		dc.b	"TRACK $",0
00003C72                            		even
00003C72                            NP_SFX:
00003C72 534F 554E 4420 2400        		dc.b	"SOUND $",0
00003C7A                            		even
00003C7A                            
00003C7A                            ShowNow_Playing:
00003C7A 1C00                       		move.b	d0,d6
00003C7C 363C C65F                  		move.w	#$C680-$21,d3	; VRAM setting
00003C80 43FA FFD8                  		lea	Now_Playing(pc),a1
00003C84 4DF9 00C0 0000             		lea		($C00000).l,a6
00003C8A 2D7C 6C82 0003 0004        		move.l	#lsnppos,4(a6)
00003C92 6100 FDEE                  		bsr.w	CStringSlop
00003C96                            		
00003C96 43FA FFD2                  		lea	NP_Track(pc),a1
00003C9A 0C06 00A0                  		cmpi.b	#$A0,d6
00003C9E 6D00                       		blt.s	@track
00003CA0                            		
00003CA0 43FA FFD0                  		lea	NP_SFX(pc),a1
00003CA4                            	@track:
00003CA4 6100 FDDC                  		bsr.w	CStringSlop
00003CA8                            		
00003CA8 0643 0030                  		add.w	#$30,d3
00003CAC 1006                       		move.b	d6,d0
00003CAE 1400                       		move.b	d0,d2
00003CB0 E808                       		lsr.b	#4,d0
00003CB2 6100 FD98                  		bsr.w	LevSel_ChgSnd
00003CB6 1002                       		move.b	d2,d0
00003CB8 6100 FD92                  		bsr.w	LevSel_ChgSnd
00003CBC 4E75                       		rts	
00003CBE                            
00003CBE                            ; 1 is insert spaces btw
00003CBE                            Controls_Normal:
00003CBE 414E 593A 2050 4C41 5901+  		dc.b	"ANY: PLAY",1,27,0
00003CCA                            		even		
00003CCA                            Controls_SND:
00003CCA 413A 202D 3130 2020 423A+  		dc.b	"A: -10  B: +10  C: PLAY  START: QUIT",0
00003CF0 00                         		even
00003CF0                            		
00003CF0                            OptionMenuText:	
00003CF0 504C 4159 2054 4845 2047+  		dc.b    "PLAY THE GAME!!!"
00003D00 4348 4152 4143 5445 5220+          dc.b    "CHARACTER       "
00003D10                            OMTEnd:
00003D10                            		
00003D10                            ; ---------------------------------------------------------------------------
00003D10                            ; Level	Select
00003D10                            ; ---------------------------------------------------------------------------
00003D10                            GotoOptions:
00003D10 43F9 0000 3CF0             		lea	(OptionMenuText).l,a1
00003D16 4DF9 00C0 0000             		lea	($C00000).l,a6
00003D1C 363C E65F                  		move.w	#$E680-$21,d3	; VRAM setting
00003D20 283C 6086 0003             		move.l	#lsscrpos,d4	; screen position (text)
00003D26                            		
00003D26 323C 0000                  		move.w	#optamm-1,d1		; number of lines of text (first row)
00003D2A 6100 FC76                  		bsr.w	LevSelTextLoad_loop
00003D2E                            
00003D2E                            OptionsMenu:
00003D2E 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00003D34 6100 EFCC                  		bsr.w	DelayProgram
00003D38 6100 0000                  		bsr.w	OptControls
00003D3C 6100 DAAC                  		bsr.w	RunPLC_RAM
00003D40 4AB8 F680                  		tst.l	($FFFFF680).w
00003D44 66E8                       		bne.s	OptionsMenu
00003D46 0238 00F0 F605             		andi.b	#$F0,($FFFFF605).w ; is	A, B, C, or Start pressed?
00003D4C 67E0                       		beq.s	OptionsMenu	; if not, branch
00003D4E 4E71                       		nop
00003D50 60DC                       		bra.s	OptionsMenu
00003D52                            		
00003D52                            OptReturn:
00003D52 4E75                       		rts
00003D54                            OptControls:				; XREF: LevelSelect
00003D54 1238 F605                  		move.b	($FFFFF605).w,d1
00003D58 0201 0003                  		andi.b	#3,d1		; is up/down pressed and held?
00003D5C 6600                       		bne.s	Opt_UpDown	; if yes, branch
00003D5E 5378 FF80                  		subq.w	#1,($FFFFFF80).w ; subtract 1 from time	to next	move
00003D62 6AEE                       		bpl.s	OptReturn	; if time remains, branch
00003D64                            Opt_UpDown:
00003D64 31FC 000B FF80             		move.w	#$B,($FFFFFF80).w ; reset time delay
00003D6A 1238 F604                  		move.b	($FFFFF604).w,d1
00003D6E 3C38 FF82                  		move.w	($FFFFFF82).w,d6
00003D72 0801 0000                  		btst	#0,d1		; is up	pressed?
00003D76 6700                       		beq.s	Opt_Down	; if not, branch
00003D78 5346                       		subq.w	#1,d6		; move up 1 selection
00003D7A 6400                       		bcc.s	Opt_Down
00003D7C 7C00                       		moveq	#lsselectable,d6		; if selection moves below 0, jump to last selection
00003D7E                            
00003D7E                            Opt_Down:
00003D7E 0801 0001                  		btst	#1,d1		; is down pressed?
00003D82 6700                       		beq.s	Opt_Refresh	; if not, branch
00003D84 5246                       		addq.w	#1,d6		; move down 1 selection
00003D86 0C46 0000                  		cmpi.w	#lsselectable+1,d6
00003D8A 6500                       		bcs.s	Opt_Refresh
00003D8C 7C00                       		moveq	#0,d6		; if selection moves above last selectable,	jump to	selection 0
00003D8E                            Opt_Refresh:
00003D8E                            		
00003D8E                            ; ---------------------------------------------------------------------------
00003D8E                            ; Music	playlist
00003D8E                            ; ---------------------------------------------------------------------------
00003D8E                            MusicList1:	incbin	misc\muslist1.bin
00003D96                            		even
00003D96                            MusicList2:	incbin	misc\muslist2.bin
00003D9E                            		even
00003D9E                            MusicList3:	incbin	misc\muslist3.bin
00003DA6                            		even
00003DA6                            MusicList4:	incbin	misc\muslist4.bin
00003DAE                            		even
00003DAE                            ; ===========================================================================
00003DAE                            
00003DAE                            ; ---------------------------------------------------------------------------
00003DAE                            ; Level
00003DAE                            ; ---------------------------------------------------------------------------
00003DAE                            
00003DAE                            Level:					; XREF: GameModeArray
00003DAE 08F8 0007 F600             		bset	#7,($FFFFF600).w ; add $80 to screen mode (for pre level sequence)
00003DB4 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003DB8 6B00                       		bmi.s	loc_37B6
00003DBA 103C 00E0                  		move.b	#$E0,d0
00003DBE 6100 D7DA                  		bsr.w	PlaySound_Special ; fade out music
00003DC2                            
00003DC2                            loc_37B6:
00003DC2 6100 DA18                  		bsr.w	ClearPLC
00003DC6 6100 E254                  		bsr.w	Pal_FadeFrom
00003DCA 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003DCE 6B00                       		bmi.s	Level_ClrRam
00003DD0 46FC 2700                  		move	#$2700,sr
00003DD4 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00003DDE 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00003DE4 6100 D858                  		bsr.w	NemDec
00003DE8 46FC 2300                  		move	#$2300,sr
00003DEC 7000                       		moveq	#0,d0
00003DEE 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003DF2 E948                       		lsl.w	#4,d0
00003DF4 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
00003DFA 45F2 0000                  		lea	(a2,d0.w),a2
00003DFE 7000                       		moveq	#0,d0
00003E00 1012                       		move.b	(a2),d0
00003E02 6700                       		beq.s	loc_37FC
00003E04 6100 D978                  		bsr.w	LoadPLC		; load level patterns
00003E08                            
00003E08                            loc_37FC:
00003E08 7001                       		moveq	#1,d0
00003E0A 6100 D972                  		bsr.w	LoadPLC		; load standard	patterns
00003E0E                            
00003E0E                            Level_ClrRam:
00003E0E 43F8 D000                  		lea	($FFFFD000).w,a1
00003E12 7000                       		moveq	#0,d0
00003E14 323C 07FF                  		move.w	#$7FF,d1
00003E18                            
00003E18                            Level_ClrObjRam:
00003E18 22C0                       		move.l	d0,(a1)+
00003E1A 51C9 FFFC                  		dbf	d1,Level_ClrObjRam ; clear object RAM
00003E1E                            
00003E1E 43F8 F628                  		lea	($FFFFF628).w,a1
00003E22 7000                       		moveq	#0,d0
00003E24 323C 0015                  		move.w	#$15,d1
00003E28                            
00003E28                            Level_ClrVars:
00003E28 22C0                       		move.l	d0,(a1)+
00003E2A 51C9 FFFC                  		dbf	d1,Level_ClrVars ; clear misc variables
00003E2E                            
00003E2E 43F8 F700                  		lea	($FFFFF700).w,a1
00003E32 7000                       		moveq	#0,d0
00003E34 323C 003F                  		move.w	#$3F,d1
00003E38                            
00003E38                            Level_ClrVars2:
00003E38 22C0                       		move.l	d0,(a1)+
00003E3A 51C9 FFFC                  		dbf	d1,Level_ClrVars2 ; clear misc variables
00003E3E                            
00003E3E 43F8 FE60                  		lea	($FFFFFE60).w,a1
00003E42 7000                       		moveq	#0,d0
00003E44 323C 0047                  		move.w	#$47,d1
00003E48                            
00003E48                            Level_ClrVars3:
00003E48 22C0                       		move.l	d0,(a1)+
00003E4A 51C9 FFFC                  		dbf	d1,Level_ClrVars3 ; clear object variables
00003E4E                            
00003E4E 46FC 2700                  		move	#$2700,sr
00003E52 6100 D66E                  		bsr.w	ClearScreen
00003E56 4DF9 00C0 0004             		lea	($C00004).l,a6
00003E5C 3CBC 8B03                  		move.w	#$8B03,(a6)
00003E60 3CBC 8230                  		move.w	#$8230,(a6)
00003E64 3CBC 8407                  		move.w	#$8407,(a6)
00003E68 3CBC 857C                  		move.w	#$857C,(a6)
00003E6C 3CBC 9001                  		move.w	#$9001,(a6)
00003E70 3CBC 8004                  		move.w	#$8004,(a6)
00003E74 3CBC 8720                  		move.w	#$8720,(a6)
00003E78 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00003E7E 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
00003E82 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00003E88 6600                       		bne.s	Level_LoadPal	; if not, branch
00003E8A 3CBC 8014                  		move.w	#$8014,(a6)
00003E8E 7000                       		moveq	#0,d0
00003E90 1038 FE11                  		move.b	($FFFFFE11).w,d0
00003E94 D040                       		add.w	d0,d0
00003E96 43F9 0000 0000             		lea	(WaterHeight).l,a1 ; load water	height array
00003E9C 3031 0000                  		move.w	(a1,d0.w),d0
00003EA0 31C0 F646                  		move.w	d0,($FFFFF646).w ; set water heights
00003EA4 31C0 F648                  		move.w	d0,($FFFFF648).w
00003EA8 31C0 F64A                  		move.w	d0,($FFFFF64A).w
00003EAC 4238 F64D                  		clr.b	($FFFFF64D).w	; clear	water routine counter
00003EB0 4238 F64E                  		clr.b	($FFFFF64E).w	; clear	water movement
00003EB4 11FC 0001 F64C             		move.b	#1,($FFFFF64C).w ; enable water
00003EBA 6000 0000                  		bra.w	Level_LoadPal
00003EBE                            Player_Palette:
00003EBE                            		; normal, lz, sbz, blank
00003EBE 0003 000F 0010 0000        		dc.w	3,$F,$10,0 ; Sonic 
00003EC6                            		
00003EC6 0016 0017 0018 0000        		dc.w	22,23,24,0 ; Pal_Gronic 
00003ECE 0019 0017 0018 0000        		dc.w	25,23,24,0 ; Pal_Anakama 
00003ED6 0003 000F 0010 0000                dc.w	3,$F,$10,0 ; LimitedSonic 
00003EDE                            
00003EDE                            		; add more player palettes
00003EDE                            Level_LoadPal:
00003EDE 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00003EE4 46FC 2300                  		move	#$2300,sr
00003EE8                            
00003EE8 7200                       		moveq	#0,d1
00003EEA 1238 FFE8                  		move.b	(v_character),d1
00003EEE D241                       		add.w	d1,d1
00003EF0 D241                       		add.w	d1,d1
00003EF2 D241                       		add.w	d1,d1
00003EF4 303B 10C8                  		move.w	Player_Palette(pc,d1.w),d0	; load palette
00003EF8                            		
00003EF8 6100 E3E8                  		bsr.w	PalLoad2	; load Sonic's pallet line
00003EFC 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00003F02 6600                       		bne.s	Level_GetBgm	; if not, branch
00003F04 303B 10BA                  		move.w	Player_Palette+2(pc,d1.w),d0	; load palette
00003F08 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is act number 3?
00003F0E 6600                       		bne.s	Level_WaterPal	; if not, branch
00003F10 303B 10B0                  		move.w	Player_Palette+4(pc,d1.w),d0	; load palette
00003F14                            
00003F14                            Level_WaterPal:
00003F14 6100 E3E4                  		bsr.w	PalLoad3_Water	; load underwater pallet (see d0)
00003F18 4A38 FE30                  		tst.b	($FFFFFE30).w
00003F1C 6700                       		beq.s	Level_GetBgm
00003F1E 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
00003F24                            
00003F24                            ; NineKode begins here - How to play different songs on different acts
00003F24                             
00003F24                            Level_GetBgm:
00003F24 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003F28 6B00 0000                  		bmi.w	loc_3946	; change from bmi.s to bmi.w or you'll get an error
00003F2C 7000                       		moveq	#0,d0
00003F2E 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003F32                             
00003F32 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
00003F38 6600                       		bne.s	Level_GetBgm2	; if not, branch
00003F3A 43F9 0000 3D8E             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
00003F40 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00003F42                             
00003F42                            Level_GetBgm2:
00003F42 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
00003F48 6600                       		bne.s	Level_GetBgm3	; if not, branch
00003F4A 43F9 0000 3D96             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
00003F50 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00003F52                             
00003F52                            Level_GetBgm3:
00003F52 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
00003F58 6600                       		bne.s	Level_GetBgm4	; if not, branch
00003F5A 43F9 0000 3D9E             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 3
00003F60 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00003F62                             
00003F62                            Level_GetBgm4:
00003F62 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
00003F68 6600                       		bne.s	Level_PlayBgm	; if not, branch
00003F6A 43F9 0000 3DA6             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
00003F70                             
00003F70                            Level_PlayBgm:
00003F70 1031 0000                  		move.b	(a1,d0.w),d0	; get d0-th entry from the playlist
00003F74 6100 D61E                  		bsr.w	PlaySound	; play music
00003F78 11FC 0034 D080             		move.b	#$34,($FFFFD080).w ; load title	card object
00003F7E                             
00003F7E                            ; NineKode ends here
00003F7E                            
00003F7E                            Level_TtlCard:
00003F7E 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
00003F84 6100 ED7C                  		bsr.w	DelayProgram
00003F88 4EB9 0000 0000             		jsr	ObjectsLoad
00003F8E 4EB9 0000 0000             		jsr	BuildSprites
00003F94 6100 D854                  		bsr.w	RunPLC_RAM
00003F98 3038 D108                  		move.w	($FFFFD108).w,d0
00003F9C B078 D130                  		cmp.w	($FFFFD130).w,d0 ; has title card sequence finished?
00003FA0 66DC                       		bne.s	Level_TtlCard	; if not, branch
00003FA2 4AB8 F680                  		tst.l	($FFFFF680).w	; are there any	items in the pattern load cue?
00003FA6 66D6                       		bne.s	Level_TtlCard	; if yes, branch
00003FA8 4EB9 0000 0000             		jsr	Hud_Base
00003FAE                            
00003FAE                            loc_3946:
00003FAE 7003                       		moveq	#3,d0
00003FB0 6100 E314                  		bsr.w	PalLoad1	; load Sonic's pallet line
00003FB4 6100 0000                  		bsr.w	LevelSizeLoad
00003FB8 6100 0000                  		bsr.w	DeformBgLayer
00003FBC 08F8 0002 F754             		bset	#2,($FFFFF754).w
00003FC2 6100 0000                  		bsr.w	MainLoadBlockLoad ; load block mappings	and pallets
00003FC6 6100 0000                  		bsr.w	LoadTilesFromStart
00003FCA 4EB9 0000 0000             		jsr	FloorLog_Unk
00003FD0 6100 0000                  		bsr.w	ColIndexLoad
00003FD4 6100 0000                  		bsr.w	LZWaterEffects
00003FD8 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
00003FDE 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003FE2 6B00                       		bmi.s	Level_ChkDebug
00003FE4 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
00003FEA                            
00003FEA                            Level_ChkDebug:
00003FEA 4A38 FFE2                  		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
00003FEE 6700                       		beq.s	Level_ChkWater	; if not, branch
00003FF0 0838 0006 F604             		btst	#6,($FFFFF604).w ; is A	button pressed?
00003FF6 6700                       		beq.s	Level_ChkWater	; if not, branch
00003FF8 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00003FFE                            
00003FFE                            Level_ChkWater:
00003FFE 31FC 0000 F602             		move.w	#0,($FFFFF602).w
00004004 31FC 0000 F604             		move.w	#0,($FFFFF604).w
0000400A 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00004010 6600                       		bne.s	Level_LoadObj	; if not, branch
00004012 11FC 001B D780             		move.b	#$1B,($FFFFD780).w ; load water	surface	object
00004018 31FC 0060 D788             		move.w	#$60,($FFFFD788).w
0000401E 11FC 001B D7C0             		move.b	#$1B,($FFFFD7C0).w
00004024 31FC 0120 D7C8             		move.w	#$120,($FFFFD7C8).w
0000402A                            
0000402A                            Level_LoadObj:
0000402A 4EB9 0000 0000             		jsr	ObjPosLoad
00004030 4EB9 0000 0000             		jsr	ObjectsLoad
00004036 4EB9 0000 0000             		jsr	BuildSprites
0000403C 7000                       		moveq	#0,d0
0000403E 4A38 FE30                  		tst.b	($FFFFFE30).w	; are you starting from	a lamppost?
00004042 6600                       		bne.s	loc_39E8	; if yes, branch
00004044 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00004048 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
0000404C 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w ; clear lives counter
00004050                            
00004050                            loc_39E8:
00004050 11C0 FE1A                  		move.b	d0,($FFFFFE1A).w
00004054 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w ; clear shield
00004058 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w ; clear invincibility
0000405C 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w ; clear speed shoes
00004060                            		; move.b	d0,($FFFFFE2F).w
00004060 0238 0001 FE2F             		andi.b	#%00000001,($FFFFFE2F).w	; GMZ: Clear every flag in FE2F aside from reversed controls
00004066 31C0 FE08                  		move.w	d0,($FFFFFE08).w
0000406A 31C0 FE02                  		move.w	d0,($FFFFFE02).w
0000406E 31C0 FE04                  		move.w	d0,($FFFFFE04).w
00004072 6100 0000                  		bsr.w	OscillateNumInit
00004076 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
0000407C 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w ; update rings	counter
00004082 11FC 0001 FE1E             		move.b	#1,($FFFFFE1E).w ; update time counter
00004088 31FC 0000 F790             		move.w	#0,($FFFFF790).w
0000408E 43F9 0000 0000             		lea	(Demo_Index).l,a1 ; load demo data
00004094 7000                       		moveq	#0,d0
00004096 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000409A E548                       		lsl.w	#2,d0
0000409C 2271 0000                  		movea.l	(a1,d0.w),a1
000040A0 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
000040A4 6A00                       		bpl.s	Level_Demo	; if yes, branch
000040A6 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1 ; load ending demo	data
000040AC 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
000040B0 5340                       		subq.w	#1,d0
000040B2 E548                       		lsl.w	#2,d0
000040B4 2271 0000                  		movea.l	(a1,d0.w),a1
000040B8                            
000040B8                            Level_Demo:
000040B8 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w ; load key press duration
000040BE 5338 F792                  		subq.b	#1,($FFFFF792).w ; subtract 1 from duration
000040C2 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
000040C8 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000040CC 6A00                       		bpl.s	Level_ChkWaterPal
000040CE 31FC 021C F614             		move.w	#540,($FFFFF614).w
000040D4 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w
000040DA 6600                       		bne.s	Level_ChkWaterPal
000040DC 31FC 01FE F614             		move.w	#510,($FFFFF614).w
000040E2                            
000040E2                            Level_ChkWaterPal:
000040E2 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ/SBZ3?
000040E8 6600                       		bne.s	Level_Delay	; if not, branch
000040EA 700B                       		moveq	#$B,d0		; pallet $0B (LZ underwater)
000040EC 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is level SBZ3?
000040F2 6600                       		bne.s	Level_WaterPal2	; if not, branch
000040F4 700D                       		moveq	#$D,d0		; pallet $0D (SBZ3 underwater)
000040F6                            
000040F6                            Level_WaterPal2:
000040F6 6100 E21E                  		bsr.w	PalLoad4_Water
000040FA                            
000040FA                            Level_Delay:
000040FA 323C 0003                  		move.w	#3,d1
000040FE                            
000040FE                            Level_DelayLoop:
000040FE 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00004104 6100 EBFC                  		bsr.w	DelayProgram
00004108 51C9 FFF4                  		dbf	d1,Level_DelayLoop
0000410C                            
0000410C 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
00004112 6100 DE64                  		bsr.w	Pal_FadeTo2
00004116 4A78 FFF0                  		tst.w	($FFFFFFF0).w
0000411A 6B00                       		bmi.s	Level_ClrCardArt
0000411C 5438 D0A4                  		addq.b	#2,($FFFFD0A4).w ; make	title card move
00004120 5838 D0E4                  		addq.b	#4,($FFFFD0E4).w
00004124 5838 D124                  		addq.b	#4,($FFFFD124).w
00004128 5838 D164                  		addq.b	#4,($FFFFD164).w
0000412C 6000                       		bra.s	Level_StartGame
0000412E                            ; ===========================================================================
0000412E                            
0000412E                            Level_ClrCardArt:
0000412E 7002                       		moveq	#2,d0
00004130 4EB9 0000 177E             		jsr	(LoadPLC).l	; load explosion patterns
00004136 7000                       		moveq	#0,d0
00004138 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000413C 0640 0015                  		addi.w	#$15,d0
00004140 4EB9 0000 177E             		jsr	(LoadPLC).l	; load animal patterns (level no. + $15)
00004146                            
00004146                            Level_StartGame:
00004146 08B8 0007 F600             		bclr	#7,($FFFFF600).w ; subtract 80 from screen mode
0000414C                            
0000414C                            ; ---------------------------------------------------------------------------
0000414C                            ; Main level loop (when	all title card and loading sequences are finished)
0000414C                            ; ---------------------------------------------------------------------------
0000414C                            
0000414C                            Level_MainLoop:
0000414C 6100 D458                  		bsr.w	PauseGame
00004150 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00004156 6100 EBAA                  		bsr.w	DelayProgram
0000415A 5278 FE04                  		addq.w	#1,($FFFFFE04).w ; add 1 to level timer
0000415E 6100 0000                  		bsr.w	MoveSonicInDemo
00004162 6100 0000                  		bsr.w	LZWaterEffects
00004166 4EB9 0000 0000             		jsr	ObjectsLoad
0000416C 4A78 FE08                  		tst.w	($FFFFFE08).w
00004170 6600                       		bne.s	loc_3B10
00004172 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00004178 6400                       		bcc.s	loc_3B14
0000417A                            
0000417A                            loc_3B10:
0000417A 6100 0000                  		bsr.w	DeformBgLayer
0000417E                            
0000417E                            loc_3B14:
0000417E 4EB9 0000 0000             		jsr	BuildSprites
00004184 4EB9 0000 0000             		jsr	ObjPosLoad
0000418A 6100 D9AE                  		bsr.w	PalCycle_Load
0000418E 6100 D65A                  		bsr.w	RunPLC_RAM
00004192 6100 0000                  		bsr.w	OscillateNumDo
00004196 6100 0000                  		bsr.w	ChangeRingFrame
0000419A 6100 0000                  		bsr.w	SignpostArtLoad
0000419E 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
000041A4 6700                       		beq.s	Level_ChkDemo	; if screen mode is 08 (demo), branch
000041A6 4A78 FE02                  		tst.w	($FFFFFE02).w	; is the level set to restart?
000041AA 6600 FC02                  		bne.w	Level		; if yes, branch
000041AE 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
000041B4 6700 FF96                  		beq.w	Level_MainLoop	; if screen mode is $0C	(level), branch
000041B8 4E75                       		rts	
000041BA                            ; ===========================================================================
000041BA                            
000041BA                            Level_ChkDemo:				; XREF: Level_MainLoop
000041BA 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
000041BE 6600                       		bne.s	Level_EndDemo	; if yes, branch
000041C0 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
000041C4 6700                       		beq.s	Level_EndDemo	; if not, branch
000041C6 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
000041CC 6700 FF7E                  		beq.w	Level_MainLoop	; if screen mode is 08 (demo), branch
000041D0 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
000041D6 4E75                       		rts	
000041D8                            ; ===========================================================================
000041D8                            
000041D8                            Level_EndDemo:				; XREF: Level_ChkDemo
000041D8 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w ; is screen mode 08 (demo)?
000041DE 6600                       		bne.s	loc_3B88	; if not, branch
000041E0 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
000041E6 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
000041EA 6A00                       		bpl.s	loc_3B88	; if yes, branch
000041EC 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; go	to credits
000041F2                            
000041F2                            loc_3B88:
000041F2 31FC 003C F614             		move.w	#$3C,($FFFFF614).w
000041F8 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000041FE 4278 F794                  		clr.w	($FFFFF794).w
00004202                            
00004202                            loc_3B98:
00004202 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00004208 6100 EAF8                  		bsr.w	DelayProgram
0000420C 6100 0000                  		bsr.w	MoveSonicInDemo
00004210 4EB9 0000 0000             		jsr	ObjectsLoad
00004216 4EB9 0000 0000             		jsr	BuildSprites
0000421C 4EB9 0000 0000             		jsr	ObjPosLoad
00004222 5378 F794                  		subq.w	#1,($FFFFF794).w
00004226 6A00                       		bpl.s	loc_3BC8
00004228 31FC 0002 F794             		move.w	#2,($FFFFF794).w
0000422E 6100 DE0C                  		bsr.w	Pal_FadeOut
00004232                            
00004232                            loc_3BC8:
00004232 4A78 F614                  		tst.w	($FFFFF614).w
00004236 66CA                       		bne.s	loc_3B98
00004238 4E75                       		rts	
0000423A                            ; ===========================================================================
0000423A                            ; ---------------------------------------------------------------------------
0000423A                            ; Subroutine to	do special water effects in Labyrinth Zone
0000423A                            ; ---------------------------------------------------------------------------
0000423A                            
0000423A                            LZWaterEffects:				; XREF: Level
0000423A 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00004240 6600                       		bne.s	locret_3C28	; if not, branch
00004242 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00004248 6400                       		bcc.s	LZMoveWater
0000424A 6100 0000                  		bsr.w	LZWindTunnels
0000424E 6100 0000                  		bsr.w	LZWaterSlides
00004252 6100 0000                  		bsr.w	LZDynamicWater
00004256                            
00004256                            LZMoveWater:
00004256 4238 F64E                  		clr.b	($FFFFF64E).w
0000425A 7000                       		moveq	#0,d0
0000425C 1038 FE60                  		move.b	($FFFFFE60).w,d0
00004260 E248                       		lsr.w	#1,d0
00004262 D078 F648                  		add.w	($FFFFF648).w,d0
00004266 31C0 F646                  		move.w	d0,($FFFFF646).w
0000426A 3038 F646                  		move.w	($FFFFF646).w,d0
0000426E 9078 F704                  		sub.w	($FFFFF704).w,d0
00004272 6400                       		bcc.s	loc_3C1A
00004274 4A40                       		tst.w	d0
00004276 6A00                       		bpl.s	loc_3C1A
00004278 11FC 00DF F625             		move.b	#-$21,($FFFFF625).w
0000427E 11FC 0001 F64E             		move.b	#1,($FFFFF64E).w
00004284                            
00004284                            loc_3C1A:
00004284 0C40 00DF                  		cmpi.w	#$DF,d0
00004288 6500                       		bcs.s	loc_3C24
0000428A 303C 00DF                  		move.w	#$DF,d0
0000428E                            
0000428E                            loc_3C24:
0000428E 11C0 F625                  		move.b	d0,($FFFFF625).w
00004292                            
00004292                            locret_3C28:
00004292 4E75                       		rts	
00004294                            ; ===========================================================================
00004294                            ; ---------------------------------------------------------------------------
00004294                            ; Labyrinth default water heights
00004294                            ; ---------------------------------------------------------------------------
00004294                            WaterHeight:	incbin	misc\lz_heigh.bin
0000429C                            		even
0000429C                            ; ===========================================================================
0000429C                            
0000429C                            ; ---------------------------------------------------------------------------
0000429C                            ; Labyrinth dynamic water routines
0000429C                            ; ---------------------------------------------------------------------------
0000429C                            
0000429C                            LZDynamicWater:				; XREF: LZWaterEffects
0000429C 7000                       		moveq	#0,d0
0000429E 1038 FE11                  		move.b	($FFFFFE11).w,d0
000042A2 D040                       		add.w	d0,d0
000042A4 303B 0000                  		move.w	DynWater_Index(pc,d0.w),d0
000042A8 4EBB 0000                  		jsr	DynWater_Index(pc,d0.w)
000042AC 7200                       		moveq	#0,d1
000042AE 1238 F64C                  		move.b	($FFFFF64C).w,d1
000042B2 3038 F64A                  		move.w	($FFFFF64A).w,d0
000042B6 9078 F648                  		sub.w	($FFFFF648).w,d0
000042BA 6700                       		beq.s	locret_3C5A
000042BC 6400                       		bcc.s	loc_3C56
000042BE 4441                       		neg.w	d1
000042C0                            
000042C0                            loc_3C56:
000042C0 D378 F648                  		add.w	d1,($FFFFF648).w
000042C4                            
000042C4                            locret_3C5A:
000042C4 4E75                       		rts	
000042C6                            ; ===========================================================================
000042C6 0000                       DynWater_Index:	dc.w DynWater_LZ1-DynWater_Index
000042C8 0000                       		dc.w DynWater_LZ2-DynWater_Index
000042CA 0000                       		dc.w DynWater_LZ3-DynWater_Index
000042CC 0000                       		dc.w DynWater_SBZ3-DynWater_Index
000042CE                            ; ===========================================================================
000042CE                            
000042CE                            DynWater_LZ1:				; XREF: DynWater_Index
000042CE 3038 F700                  		move.w	($FFFFF700).w,d0
000042D2 1438 F64D                  		move.b	($FFFFF64D).w,d2
000042D6 6600                       		bne.s	loc_3CD0
000042D8 323C 00B8                  		move.w	#$B8,d1
000042DC 0C40 0600                  		cmpi.w	#$600,d0
000042E0 6500                       		bcs.s	loc_3CB4
000042E2 323C 0108                  		move.w	#$108,d1
000042E6 0C78 0200 D00C             		cmpi.w	#$200,($FFFFD00C).w
000042EC 6500                       		bcs.s	loc_3CBA
000042EE 0C40 0C00                  		cmpi.w	#$C00,d0
000042F2 6500                       		bcs.s	loc_3CB4
000042F4 323C 0318                  		move.w	#$318,d1
000042F8 0C40 1080                  		cmpi.w	#$1080,d0
000042FC 6500                       		bcs.s	loc_3CB4
000042FE 11FC 0080 F7E5             		move.b	#-$80,($FFFFF7E5).w
00004304 323C 05C8                  		move.w	#$5C8,d1
00004308 0C40 1380                  		cmpi.w	#$1380,d0
0000430C 6500                       		bcs.s	loc_3CB4
0000430E 323C 03A8                  		move.w	#$3A8,d1
00004312 B278 F648                  		cmp.w	($FFFFF648).w,d1
00004316 6600                       		bne.s	loc_3CB4
00004318 11FC 0001 F64D             		move.b	#1,($FFFFF64D).w
0000431E                            
0000431E                            loc_3CB4:
0000431E 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004322 4E75                       		rts	
00004324                            ; ===========================================================================
00004324                            
00004324                            loc_3CBA:				; XREF: DynWater_LZ1
00004324 0C40 0C80                  		cmpi.w	#$C80,d0
00004328 65F4                       		bcs.s	loc_3CB4
0000432A 323C 00E8                  		move.w	#$E8,d1
0000432E 0C40 1500                  		cmpi.w	#$1500,d0
00004332 65EA                       		bcs.s	loc_3CB4
00004334 323C 0108                  		move.w	#$108,d1
00004338 60E4                       		bra.s	loc_3CB4
0000433A                            ; ===========================================================================
0000433A                            
0000433A                            loc_3CD0:				; XREF: DynWater_LZ1
0000433A 5302                       		subq.b	#1,d2
0000433C 6600                       		bne.s	locret_3CF4
0000433E 0C78 02E0 D00C             		cmpi.w	#$2E0,($FFFFD00C).w
00004344 6400                       		bcc.s	locret_3CF4
00004346 323C 03A8                  		move.w	#$3A8,d1
0000434A 0C40 1300                  		cmpi.w	#$1300,d0
0000434E 6500                       		bcs.s	loc_3CF0
00004350 323C 0108                  		move.w	#$108,d1
00004354 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
0000435A                            
0000435A                            loc_3CF0:
0000435A 31C1 F64A                  		move.w	d1,($FFFFF64A).w
0000435E                            
0000435E                            locret_3CF4:
0000435E 4E75                       		rts	
00004360                            ; ===========================================================================
00004360                            
00004360                            DynWater_LZ2:				; XREF: DynWater_Index
00004360 3038 F700                  		move.w	($FFFFF700).w,d0
00004364 323C 0328                  		move.w	#$328,d1
00004368 0C40 0500                  		cmpi.w	#$500,d0
0000436C 6500                       		bcs.s	loc_3D12
0000436E 323C 03C8                  		move.w	#$3C8,d1
00004372 0C40 0B00                  		cmpi.w	#$B00,d0
00004376 6500                       		bcs.s	loc_3D12
00004378 323C 0428                  		move.w	#$428,d1
0000437C                            
0000437C                            loc_3D12:
0000437C 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004380 4E75                       		rts	
00004382                            ; ===========================================================================
00004382                            
00004382                            DynWater_LZ3:				; XREF: DynWater_Index
00004382 3038 F700                  		move.w	($FFFFF700).w,d0
00004386 1438 F64D                  		move.b	($FFFFF64D).w,d2
0000438A 6600                       		bne.s	loc_3D5E
0000438C 323C 0500                  		move.w	#$500,d1
00004390 0C40 0600                  		cmpi.w	#$600,d0
00004394 6500                       		bcs.s	loc_3D54
00004396 0C40 1B00                  		cmpi.w	#$1B00,d0
0000439A 6500                       		bcs.s	loc_3D54
0000439C 323C 0850                  		move.w	#$850,d1
000043A0                            
000043A0                            loc_3D54:
000043A0 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000043A4 31C1 F648                  		move.w	d1,($FFFFF648).w
000043A8 4E75                       		rts	
000043AA                            ; ===========================================================================
000043AA                            
000043AA                            loc_3D5E:				; XREF: DynWater_LZ3
000043AA 5302                       		subq.b	#1,d2
000043AC 6600                       		bne.s	loc_3DA8
000043AE 323C 04C8                  		move.w	#$4C8,d1
000043B2 0C40 0770                  		cmpi.w	#$770,d0
000043B6 6500                       		bcs.s	loc_3DA2
000043B8 323C 0308                  		move.w	#$308,d1
000043BC 0C40 1400                  		cmpi.w	#$1400,d0
000043C0 6500                       		bcs.s	loc_3DA2
000043C2 0C78 0508 F64A             		cmpi.w	#$508,($FFFFF64A).w
000043C8 6700                       		beq.s	loc_3D8E
000043CA 0C78 0600 D00C             		cmpi.w	#$600,($FFFFD00C).w
000043D0 6400                       		bcc.s	loc_3D8E
000043D2 0C78 0280 D00C             		cmpi.w	#$280,($FFFFD00C).w
000043D8 6400                       		bcc.s	loc_3DA2
000043DA                            
000043DA                            loc_3D8E:
000043DA 323C 0508                  		move.w	#$508,d1
000043DE 31C1 F648                  		move.w	d1,($FFFFF648).w
000043E2 0C40 1770                  		cmpi.w	#$1770,d0
000043E6 6500                       		bcs.s	loc_3DA2
000043E8 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
000043EE                            
000043EE                            loc_3DA2:
000043EE 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000043F2 4E75                       		rts	
000043F4                            ; ===========================================================================
000043F4                            
000043F4                            loc_3DA8:
000043F4 5302                       		subq.b	#1,d2
000043F6 6600                       		bne.s	loc_3DD2
000043F8 323C 0508                  		move.w	#$508,d1
000043FC 0C40 1860                  		cmpi.w	#$1860,d0
00004400 6500                       		bcs.s	loc_3DCC
00004402 323C 0188                  		move.w	#$188,d1
00004406 0C40 1AF0                  		cmpi.w	#$1AF0,d0
0000440A 6400                       		bcc.s	loc_3DC6
0000440C B278 F648                  		cmp.w	($FFFFF648).w,d1
00004410 6600                       		bne.s	loc_3DCC
00004412                            
00004412                            loc_3DC6:
00004412 11FC 0003 F64D             		move.b	#3,($FFFFF64D).w
00004418                            
00004418                            loc_3DCC:
00004418 31C1 F64A                  		move.w	d1,($FFFFF64A).w
0000441C 4E75                       		rts	
0000441E                            ; ===========================================================================
0000441E                            
0000441E                            loc_3DD2:
0000441E 5302                       		subq.b	#1,d2
00004420 6600                       		bne.s	loc_3E0E
00004422 323C 0188                  		move.w	#$188,d1
00004426 0C40 1AF0                  		cmpi.w	#$1AF0,d0
0000442A 6500                       		bcs.s	loc_3E04
0000442C 323C 0900                  		move.w	#$900,d1
00004430 0C40 1BC0                  		cmpi.w	#$1BC0,d0
00004434 6500                       		bcs.s	loc_3E04
00004436 11FC 0004 F64D             		move.b	#4,($FFFFF64D).w
0000443C 31FC 0608 F64A             		move.w	#$608,($FFFFF64A).w
00004442 31FC 07C0 F648             		move.w	#$7C0,($FFFFF648).w
00004448 11FC 0001 F7E8             		move.b	#1,($FFFFF7E8).w
0000444E 4E75                       		rts	
00004450                            ; ===========================================================================
00004450                            
00004450                            loc_3E04:
00004450 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004454 31C1 F648                  		move.w	d1,($FFFFF648).w
00004458 4E75                       		rts	
0000445A                            ; ===========================================================================
0000445A                            
0000445A                            loc_3E0E:
0000445A 0C40 1E00                  		cmpi.w	#$1E00,d0
0000445E 6500                       		bcs.s	locret_3E1A
00004460 31FC 0128 F64A             		move.w	#$128,($FFFFF64A).w
00004466                            
00004466                            locret_3E1A:
00004466 4E75                       		rts	
00004468                            ; ===========================================================================
00004468                            
00004468                            DynWater_SBZ3:				; XREF: DynWater_Index
00004468 323C 0228                  		move.w	#$228,d1
0000446C 0C78 0F00 F700             		cmpi.w	#$F00,($FFFFF700).w
00004472 6500                       		bcs.s	loc_3E2C
00004474 323C 04C8                  		move.w	#$4C8,d1
00004478                            
00004478                            loc_3E2C:
00004478 31C1 F64A                  		move.w	d1,($FFFFF64A).w
0000447C 4E75                       		rts
0000447E                            
0000447E                            ; ---------------------------------------------------------------------------
0000447E                            ; Labyrinth Zone "wind tunnels"	subroutine
0000447E                            ; ---------------------------------------------------------------------------
0000447E                            
0000447E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000447E                            
0000447E                            
0000447E                            LZWindTunnels:				; XREF: LZWaterEffects
0000447E 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00004482 6600 0000                  		bne.w	locret_3F0A	; if yes, branch
00004486 45F9 0000 0000             		lea	(LZWind_Data).l,a2
0000448C 7000                       		moveq	#0,d0
0000448E 1038 FE11                  		move.b	($FFFFFE11).w,d0
00004492 E748                       		lsl.w	#3,d0
00004494 D4C0                       		adda.w	d0,a2
00004496 7200                       		moveq	#0,d1
00004498 4A38 FE11                  		tst.b	($FFFFFE11).w
0000449C 6600                       		bne.s	loc_3E56
0000449E 7201                       		moveq	#1,d1
000044A0 514A                       		subq.w	#8,a2
000044A2                            
000044A2                            loc_3E56:
000044A2 43F8 D000                  		lea	($FFFFD000).w,a1
000044A6                            
000044A6                            LZWind_Loop:
000044A6 3029 0008                  		move.w	8(a1),d0
000044AA B052                       		cmp.w	(a2),d0
000044AC 6500 0000                  		bcs.w	loc_3EF4
000044B0 B06A 0004                  		cmp.w	4(a2),d0
000044B4 6400 0000                  		bcc.w	loc_3EF4
000044B8 3429 000C                  		move.w	$C(a1),d2
000044BC B46A 0002                  		cmp.w	2(a2),d2
000044C0 6500                       		bcs.s	loc_3EF4
000044C2 B46A 0006                  		cmp.w	6(a2),d2
000044C6 6400                       		bcc.s	loc_3EF4
000044C8 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000044CC 0200 003F                  		andi.b	#$3F,d0
000044D0 6600                       		bne.s	loc_3E90
000044D2 303C 00D0                  		move.w	#$D0,d0
000044D6 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play rushing water sound
000044DC                            
000044DC                            loc_3E90:
000044DC 4A38 F7C9                  		tst.b	($FFFFF7C9).w
000044E0 6600 0000                  		bne.w	locret_3F0A
000044E4 0C29 0004 0024             		cmpi.b	#4,$24(a1)
000044EA 6400                       		bcc.s	loc_3F06
000044EC 11FC 0001 F7C7             		move.b	#1,($FFFFF7C7).w
000044F2 0440 0080                  		subi.w	#$80,d0
000044F6 B052                       		cmp.w	(a2),d0
000044F8 6400                       		bcc.s	LZWind_Move
000044FA 7002                       		moveq	#2,d0
000044FC 0C38 0001 FE11             		cmpi.b	#1,($FFFFFE11).w
00004502 6600                       		bne.s	loc_3EBA
00004504 4440                       		neg.w	d0
00004506                            
00004506                            loc_3EBA:
00004506 D169 000C                  		add.w	d0,$C(a1)
0000450A                            
0000450A                            LZWind_Move:
0000450A 5869 0008                  		addq.w	#4,8(a1)
0000450E 337C 0400 0010             		move.w	#$400,$10(a1)	; move Sonic horizontally
00004514 337C 0000 0012             		move.w	#0,$12(a1)
0000451A 137C 000F 001C             		move.b	#$F,$1C(a1)	; use floating animation
00004520 08E9 0001 0022             		bset	#1,$22(a1)
00004526 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up pressed?
0000452C 6700                       		beq.s	LZWind_MoveDown	; if not, branch
0000452E 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
00004532                            
00004532                            LZWind_MoveDown:
00004532 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00004538 6700                       		beq.s	locret_3EF2	; if not, branch
0000453A 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
0000453E                            
0000453E                            locret_3EF2:
0000453E 4E75                       		rts	
00004540                            ; ===========================================================================
00004540                            
00004540                            loc_3EF4:				; XREF: LZWindTunnels
00004540 504A                       		addq.w	#8,a2
00004542 51C9 FF62                  		dbf	d1,LZWind_Loop
00004546 4A38 F7C7                  		tst.b	($FFFFF7C7).w
0000454A 6700                       		beq.s	locret_3F0A
0000454C 137C 0000 001C             		move.b	#0,$1C(a1)
00004552                            
00004552                            loc_3F06:
00004552 4238 F7C7                  		clr.b	($FFFFF7C7).w
00004556                            
00004556                            locret_3F0A:
00004556 4E75                       		rts	
00004558                            ; End of function LZWindTunnels
00004558                            
00004558                            ; ===========================================================================
00004558 0A80 0300 0C10 0380        		dc.w $A80, $300, $C10, $380
00004560 0F80 0100 1410 0180 0460+  LZWind_Data:	dc.w $F80, $100, $1410,	$180, $460, $400, $710,	$480, $A20
00004572 0600 1610 06E0 0C80 0600+  		dc.w $600, $1610, $6E0,	$C80, $600, $13D0, $680
00004580                            					; XREF: LZWindTunnels
00004580                            		even
00004580                            
00004580                            ; ---------------------------------------------------------------------------
00004580                            ; Labyrinth Zone water slide subroutine
00004580                            ; ---------------------------------------------------------------------------
00004580                            
00004580                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004580                            
00004580                            
00004580                            LZWaterSlides:				; XREF: LZWaterEffects
00004580 43F8 D000                  		lea	($FFFFD000).w,a1
00004584 0829 0001 0022             		btst	#1,$22(a1)
0000458A 6600                       		bne.s	loc_3F6A
0000458C 3029 000C                  		move.w	$C(a1),d0
00004590 E248                       		lsr.w	#1,d0
00004592 0240 0380                  		andi.w	#$380,d0
00004596 1229 0008                  		move.b	8(a1),d1
0000459A 0241 007F                  		andi.w	#$7F,d1
0000459E D041                       		add.w	d1,d0
000045A0 45F8 A400                  		lea	($FFFFA400).w,a2
000045A4 1032 0000                  		move.b	(a2,d0.w),d0
000045A8 45FA 0000                  		lea	byte_3FCF(pc),a2
000045AC 7206                       		moveq	#6,d1
000045AE                            
000045AE                            loc_3F62:
000045AE B022                       		cmp.b	-(a2),d0
000045B0 57C9 FFFC                  		dbeq	d1,loc_3F62
000045B4 6700                       		beq.s	LZSlide_Move
000045B6                            
000045B6                            loc_3F6A:
000045B6 4A38 F7CA                  		tst.b	($FFFFF7CA).w
000045BA 6700                       		beq.s	locret_3F7A
000045BC 337C 0005 003E             		move.w	#5,$3E(a1)
000045C2 4238 F7CA                  		clr.b	($FFFFF7CA).w
000045C6                            
000045C6                            locret_3F7A:
000045C6 4E75                       		rts	
000045C8                            ; ===========================================================================
000045C8                            
000045C8                            LZSlide_Move:				; XREF: LZWaterSlides
000045C8 0C41 0003                  		cmpi.w	#3,d1
000045CC 6400                       		bcc.s	loc_3F84
000045CE 4E71                       		nop	
000045D0                            
000045D0                            loc_3F84:
000045D0 08A9 0000 0022             		bclr	#0,$22(a1)
000045D6 103B 1000                  		move.b	byte_3FC0(pc,d1.w),d0
000045DA 1340 0014                  		move.b	d0,$14(a1)
000045DE 6A00                       		bpl.s	loc_3F9A
000045E0 08E9 0000 0022             		bset	#0,$22(a1)
000045E6                            
000045E6                            loc_3F9A:
000045E6 4229 0015                  		clr.b	$15(a1)
000045EA 137C 001B 001C             		move.b	#$1B,$1C(a1)	; use Sonic's "sliding" animation
000045F0 11FC 0001 F7CA             		move.b	#1,($FFFFF7CA).w ; lock	controls (except jumping)
000045F6 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000045FA 0200 001F                  		andi.b	#$1F,d0
000045FE 6600                       		bne.s	locret_3FBE
00004600 303C 00D0                  		move.w	#$D0,d0
00004604 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play water sound
0000460A                            
0000460A                            locret_3FBE:
0000460A 4E75                       		rts	
0000460C                            ; End of function LZWaterSlides
0000460C                            
0000460C                            ; ===========================================================================
0000460C 0AF5 0AF6 F5F4 0B00 0207+  byte_3FC0:	dc.b $A, $F5, $A, $F6, $F5, $F4, $B, 0,	2, 7, 3, $4C, $4B, 8, 4
0000461B 00                         byte_3FCF:	dc.b 0			; XREF: LZWaterSlides
0000461C                            		even
0000461C                            
0000461C                            ; ---------------------------------------------------------------------------
0000461C                            ; Subroutine to	move Sonic in demo mode
0000461C                            ; ---------------------------------------------------------------------------
0000461C                            
0000461C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000461C                            
0000461C                            
0000461C                            MoveSonicInDemo:			; XREF: Level_MainLoop; et al
0000461C 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004620 6600                       		bne.s	MoveDemo_On	; if yes, branch
00004622 4E75                       		rts	
00004624                            ; ===========================================================================
00004624                            
00004624                            ; This is an unused subroutine for recording a demo
00004624                            
00004624                            MoveDemo_Record:
00004624 43F9 0008 0000             		lea	($80000).l,a1
0000462A 3038 F790                  		move.w	($FFFFF790).w,d0
0000462E D2C0                       		adda.w	d0,a1
00004630 1038 F604                  		move.b	($FFFFF604).w,d0
00004634 B011                       		cmp.b	(a1),d0
00004636 6600                       		bne.s	loc_3FFA
00004638 5229 0001                  		addq.b	#1,1(a1)
0000463C 0C29 00FF 0001             		cmpi.b	#$FF,1(a1)
00004642 6700                       		beq.s	loc_3FFA
00004644 4E75                       		rts	
00004646                            ; ===========================================================================
00004646                            
00004646                            loc_3FFA:				; XREF: MoveDemo_Record
00004646 1340 0002                  		move.b	d0,2(a1)
0000464A 137C 0000 0003             		move.b	#0,3(a1)
00004650 5478 F790                  		addq.w	#2,($FFFFF790).w
00004654 0278 03FF F790             		andi.w	#$3FF,($FFFFF790).w
0000465A 4E75                       		rts	
0000465C                            ; ===========================================================================
0000465C                            
0000465C                            MoveDemo_On:				; XREF: MoveSonicInDemo
0000465C 4A38 F604                  		tst.b	($FFFFF604).w
00004660 6A00                       		bpl.s	loc_4022
00004662 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00004666 6B00                       		bmi.s	loc_4022
00004668 11FC 0004 F600             		move.b	#4,($FFFFF600).w
0000466E                            
0000466E                            loc_4022:
0000466E 43F9 0000 0000             		lea	(Demo_Index).l,a1
00004674 7000                       		moveq	#0,d0
00004676 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000467A 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
00004680 6600                       		bne.s	loc_4038
00004682 7006                       		moveq	#6,d0
00004684                            
00004684                            loc_4038:
00004684 E548                       		lsl.w	#2,d0
00004686 2271 0000                  		movea.l	(a1,d0.w),a1
0000468A 4A78 FFF0                  		tst.w	($FFFFFFF0).w
0000468E 6A00                       		bpl.s	loc_4056
00004690 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1
00004696 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
0000469A 5340                       		subq.w	#1,d0
0000469C E548                       		lsl.w	#2,d0
0000469E 2271 0000                  		movea.l	(a1,d0.w),a1
000046A2                            
000046A2                            loc_4056:
000046A2 3038 F790                  		move.w	($FFFFF790).w,d0
000046A6 D2C0                       		adda.w	d0,a1
000046A8 1011                       		move.b	(a1),d0
000046AA 41F8 F604                  		lea	($FFFFF604).w,a0
000046AE 1200                       		move.b	d0,d1
000046B0 1410                       		move.b	(a0),d2
000046B2 B500                       		eor.b	d2,d0
000046B4 10C1                       		move.b	d1,(a0)+
000046B6 C001                       		and.b	d1,d0
000046B8 10C0                       		move.b	d0,(a0)+
000046BA 5338 F792                  		subq.b	#1,($FFFFF792).w
000046BE 6400                       		bcc.s	locret_407E
000046C0 11E9 0003 F792             		move.b	3(a1),($FFFFF792).w
000046C6 5478 F790                  		addq.w	#2,($FFFFF790).w
000046CA                            
000046CA                            locret_407E:
000046CA 4E75                       		rts	
000046CC                            ; End of function MoveSonicInDemo
000046CC                            
000046CC                            ; ===========================================================================
000046CC                            ; ---------------------------------------------------------------------------
000046CC                            ; Demo sequence	pointers
000046CC                            ; ---------------------------------------------------------------------------
000046CC                            Demo_Index:
000046CC                            	include "_inc\Demo pointers for intro.asm"
000046CC                            ; ---------------------------------------------------------------------------
000046CC                            ; Demo sequence	pointers
000046CC                            ; ---------------------------------------------------------------------------
000046CC 0000 0000                  	dc.l Demo_GHZ
000046D0 0000 0000                  	dc.l Demo_GHZ
000046D4 0000 0000                  	dc.l Demo_MZ
000046D8 0000 0000                  	dc.l Demo_MZ
000046DC 0000 0000                  	dc.l Demo_SYZ
000046E0 0000 0000                  	dc.l Demo_SYZ
000046E4 0000 0000                  	dc.l Demo_SS
000046E8 0000 0000                  	dc.l Demo_SS
000046E8 0000 0000                  	dc.l Demo_SS
000046EC                            
000046EC                            Demo_EndIndex:
000046EC                            	include "_inc\Demo pointers for ending.asm"
000046EC                            ; ---------------------------------------------------------------------------
000046EC                            ; Demo (ending) sequence pointers
000046EC                            ; ---------------------------------------------------------------------------
000046EC 0000 0000                  	dc.l Demo_EndGHZ1
000046F0 0000 0000                  	dc.l Demo_EndMZ
000046F4 0000 0000                  	dc.l Demo_EndSYZ
000046F8 0000 0000                  	dc.l Demo_EndLZ
000046FC 0000 0000                  	dc.l Demo_EndSLZ
00004700 0000 0000                  	dc.l Demo_EndSBZ1
00004704 0000 0000                  	dc.l Demo_EndSBZ2
00004708 0000 0000                  	dc.l Demo_EndGHZ2
00004708 0000 0000                  	dc.l Demo_EndGHZ2
0000470C                            
0000470C 008B 0837 0042 085C 006A+  		dc.b 0,	$8B, 8,	$37, 0,	$42, 8,	$5C, 0,	$6A, 8,	$5F, 0,	$2F, 8,	$2C
0000471C 0021 0803 2830 0808 002E+  		dc.b 0,	$21, 8,	3, $28,	$30, 8,	8, 0, $2E, 8, $15, 0, $F, 8, $46
0000472C 001A 08FF 08CA 0000 0000+  		dc.b 0,	$1A, 8,	$FF, 8,	$CA, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0
0000473C                            		even
0000473C                            
0000473C                            ; ---------------------------------------------------------------------------
0000473C                            ; Collision index loading subroutine
0000473C                            ; ---------------------------------------------------------------------------
0000473C                            
0000473C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000473C                            
0000473C                            
0000473C                            ColIndexLoad:				; XREF: Level
0000473C 7000                       		moveq	#0,d0
0000473E 1038 FE10                  		move.b	($FFFFFE10).w,d0
00004742 E548                       		lsl.w	#2,d0
00004744 21FB 0000 F796             		move.l	ColPointers(pc,d0.w),($FFFFF796).w
0000474A 4E75                       		rts	
0000474C                            ; End of function ColIndexLoad
0000474C                            
0000474C                            ; ===========================================================================
0000474C                            ; ---------------------------------------------------------------------------
0000474C                            ; Collision index pointers
0000474C                            ; ---------------------------------------------------------------------------
0000474C                            ColPointers:
0000474C                            	include "_inc\Collision index pointers.asm"
0000474C                            ; ---------------------------------------------------------------------------
0000474C                            ; Collision index pointers
0000474C                            ; ---------------------------------------------------------------------------
0000474C 0000 0000                  	dc.l Col_GHZ
00004750 0000 0000                  	dc.l Col_LZ
00004754 0000 0000                  	dc.l Col_MZ
00004758 0000 0000                  	dc.l Col_SLZ
0000475C 0000 0000                  	dc.l Col_SYZ
00004760 0000 0000                  	dc.l Col_SBZ
00004764 0000 0000                  	dc.l Col_GHZ ; this is the ending just so it does not fuck up
00004768 0000 0000                  	dc.l Col_BHZ
00004768 0000 0000                  	dc.l Col_BHZ
0000476C                            
0000476C                            ; ---------------------------------------------------------------------------
0000476C                            ; Oscillating number subroutine
0000476C                            ; ---------------------------------------------------------------------------
0000476C                            
0000476C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000476C                            
0000476C                            
0000476C                            OscillateNumInit:			; XREF: Level
0000476C 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
00004770 45F9 0000 0000             		lea	(Osc_Data).l,a2
00004776 7220                       		moveq	#$20,d1
00004778                            
00004778                            Osc_Loop:
00004778 32DA                       		move.w	(a2)+,(a1)+
0000477A 51C9 FFFC                  		dbf	d1,Osc_Loop
0000477E 4E75                       		rts	
00004780                            ; End of function OscillateNumInit
00004780                            
00004780                            ; ===========================================================================
00004780 007C 0080                  Osc_Data:	dc.w $7C, $80		; baseline values
00004784 0000 0080                  		dc.w 0,	$80
00004788 0000 0080                  		dc.w 0,	$80
0000478C 0000 0080                  		dc.w 0,	$80
00004790 0000 0080                  		dc.w 0,	$80
00004794 0000 0080                  		dc.w 0,	$80
00004798 0000 0080                  		dc.w 0,	$80
0000479C 0000 0080                  		dc.w 0,	$80
000047A0 0000 0080                  		dc.w 0,	$80
000047A4 0000 50F0                  		dc.w 0,	$50F0
000047A8 011E 2080                  		dc.w $11E, $2080
000047AC 00B4 3080                  		dc.w $B4, $3080
000047B0 010E 5080                  		dc.w $10E, $5080
000047B4 01C2 7080                  		dc.w $1C2, $7080
000047B8 0276 0080                  		dc.w $276, $80
000047BC 0000 0080                  		dc.w 0,	$80
000047C0 0000                       		dc.w 0
000047C2                            		even
000047C2                            
000047C2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000047C2                            
000047C2                            
000047C2                            OscillateNumDo:				; XREF: Level
000047C2 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000047C8 6400                       		bcc.s	locret_41C4
000047CA 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
000047CE 45F9 0000 0000             		lea	(Osc_Data2).l,a2
000047D4 3619                       		move.w	(a1)+,d3
000047D6 720F                       		moveq	#$F,d1
000047D8                            
000047D8                            loc_4184:
000047D8 341A                       		move.w	(a2)+,d2
000047DA 381A                       		move.w	(a2)+,d4
000047DC 0303                       		btst	d1,d3
000047DE 6600                       		bne.s	loc_41A4
000047E0 3029 0002                  		move.w	2(a1),d0
000047E4 D042                       		add.w	d2,d0
000047E6 3340 0002                  		move.w	d0,2(a1)
000047EA D151                       		add.w	d0,0(a1)
000047EC B811                       		cmp.b	0(a1),d4
000047EE 6200                       		bhi.s	loc_41BA
000047F0 03C3                       		bset	d1,d3
000047F2 6000                       		bra.s	loc_41BA
000047F4                            ; ===========================================================================
000047F4                            
000047F4                            loc_41A4:				; XREF: OscillateNumDo
000047F4 3029 0002                  		move.w	2(a1),d0
000047F8 9042                       		sub.w	d2,d0
000047FA 3340 0002                  		move.w	d0,2(a1)
000047FE D151                       		add.w	d0,0(a1)
00004800 B811                       		cmp.b	0(a1),d4
00004802 6300                       		bls.s	loc_41BA
00004804 0383                       		bclr	d1,d3
00004806                            
00004806                            loc_41BA:
00004806 5849                       		addq.w	#4,a1
00004808 51C9 FFCE                  		dbf	d1,loc_4184
0000480C 31C3 FE5E                  		move.w	d3,($FFFFFE5E).w
00004810                            
00004810                            locret_41C4:
00004810 4E75                       		rts	
00004812                            ; End of function OscillateNumDo
00004812                            
00004812                            ; ===========================================================================
00004812 0002 0010                  Osc_Data2:	dc.w 2,	$10		; XREF: OscillateNumDo
00004816 0002 0018                  		dc.w 2,	$18
0000481A 0002 0020                  		dc.w 2,	$20
0000481E 0002 0030                  		dc.w 2,	$30
00004822 0004 0020                  		dc.w 4,	$20
00004826 0008 0008                  		dc.w 8,	8
0000482A 0008 0040                  		dc.w 8,	$40
0000482E 0004 0040                  		dc.w 4,	$40
00004832 0002 0050                  		dc.w 2,	$50
00004836 0002 0050                  		dc.w 2,	$50
0000483A 0002 0020                  		dc.w 2,	$20
0000483E 0003 0030                  		dc.w 3,	$30
00004842 0005 0050                  		dc.w 5,	$50
00004846 0007 0070                  		dc.w 7,	$70
0000484A 0002 0010                  		dc.w 2,	$10
0000484E 0002 0010                  		dc.w 2,	$10
00004852                            		even
00004852                            
00004852                            ; ---------------------------------------------------------------------------
00004852                            ; Subroutine to	change object animation	variables (rings, giant	rings)
00004852                            ; ---------------------------------------------------------------------------
00004852                            
00004852                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004852                            
00004852                            
00004852                            ChangeRingFrame:			; XREF: Level
00004852 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
00004856 6A00                       		bpl.s	loc_421C
00004858 11FC 000B FEC0             		move.b	#$B,($FFFFFEC0).w
0000485E 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
00004862 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
00004868                            
00004868                            loc_421C:
00004868 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
0000486C 6A00                       		bpl.s	loc_4232
0000486E 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
00004874 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
00004878 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
0000487E                            
0000487E                            loc_4232:
0000487E 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
00004882 6A00                       		bpl.s	loc_4250
00004884 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
0000488A 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
0000488E 0C38 0006 FEC5             		cmpi.b	#6,($FFFFFEC5).w
00004894 6500                       		bcs.s	loc_4250
00004896 11FC 0000 FEC5             		move.b	#0,($FFFFFEC5).w
0000489C                            
0000489C                            loc_4250:
0000489C 4A38 FEC6                  		tst.b	($FFFFFEC6).w
000048A0 6700                       		beq.s	locret_4272
000048A2 7000                       		moveq	#0,d0
000048A4 1038 FEC6                  		move.b	($FFFFFEC6).w,d0
000048A8 D078 FEC8                  		add.w	($FFFFFEC8).w,d0
000048AC 31C0 FEC8                  		move.w	d0,($FFFFFEC8).w
000048B0 EF58                       		rol.w	#7,d0
000048B2 0240 0003                  		andi.w	#3,d0
000048B6 11C0 FEC7                  		move.b	d0,($FFFFFEC7).w
000048BA 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
000048BE                            
000048BE                            locret_4272:
000048BE 4E75                       		rts	
000048C0                            ; End of function ChangeRingFrame
000048C0                            
000048C0                            ; ---------------------------------------------------------------------------
000048C0                            ; End-of-act signpost pattern loading subroutine
000048C0                            ; ---------------------------------------------------------------------------
000048C0                            
000048C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000048C0                            
000048C0                            
000048C0                            SignpostArtLoad:			; XREF: Level
000048C0 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
000048C4 6600 0000                  		bne.w	Signpost_Exit	; if yes, branch
000048C8 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; is act number 02 (act 3)?
000048CE 6700                       		beq.s	Signpost_Exit	; if yes, branch
000048D0 3038 F700                  		move.w	($FFFFF700).w,d0
000048D4 3238 F72A                  		move.w	($FFFFF72A).w,d1
000048D8 0441 0100                  		subi.w	#$100,d1
000048DC B041                       		cmp.w	d1,d0		; has Sonic reached the	edge of	the level?
000048DE 6D00                       		blt.s	Signpost_Exit	; if not, branch
000048E0 4A38 FE1E                  		tst.b	($FFFFFE1E).w
000048E4 6700                       		beq.s	Signpost_Exit
000048E6 B278 F728                  		cmp.w	($FFFFF728).w,d1
000048EA 6700                       		beq.s	Signpost_Exit
000048EC 31C1 F728                  		move.w	d1,($FFFFF728).w ; move	left boundary to current screen	position
000048F0 7012                       		moveq	#$12,d0
000048F2 6000 CEBC                  		bra.w	LoadPLC2	; load signpost	patterns
000048F6                            ; ===========================================================================
000048F6                            
000048F6                            Signpost_Exit:
000048F6 4E75                       		rts	
000048F8                            ; End of function SignpostArtLoad
000048F8                            
000048F8                            ; ===========================================================================
000048F8                            Demo_GHZ:	incbin	demodata\i_ghz.bin
00004978                            Demo_MZ:	incbin	demodata\i_mz.bin
00004AA8                            Demo_SYZ:	incbin	demodata\i_syz.bin
00004B28                            Demo_SS:	incbin	demodata\i_ss.bin
00004C28                            ; ===========================================================================
00004C28                            
00004C28                            ; ---------------------------------------------------------------------------
00004C28                            ; Special Stage
00004C28                            ; ---------------------------------------------------------------------------
00004C28                            
00004C28                            SpecialStage:				; XREF: GameModeArray
00004C28 303C 00CA                  		move.w	#$CA,d0
00004C2C 6100 C96C                  		bsr.w	PlaySound_Special ; play special stage entry sound
00004C30 6100 D514                  		bsr.w	Pal_MakeFlash
00004C34 46FC 2700                  		move	#$2700,sr
00004C38 4DF9 00C0 0004             		lea	($C00004).l,a6
00004C3E 3CBC 8B03                  		move.w	#$8B03,(a6)
00004C42 3CBC 8004                  		move.w	#$8004,(a6)
00004C46 31FC 8AAF F624             		move.w	#$8AAF,($FFFFF624).w
00004C4C 3CBC 9011                  		move.w	#$9011,(a6)
00004C50 3038 F60C                  		move.w	($FFFFF60C).w,d0
00004C54 0200 00BF                  		andi.b	#$BF,d0
00004C58 33C0 00C0 0004             		move.w	d0,($C00004).l
00004C5E 6100 C862                  		bsr.w	ClearScreen
00004C62 46FC 2300                  		move	#$2300,sr
00004C66 4BF9 00C0 0004             		lea	($C00004).l,a5
00004C6C 3ABC 8F01                  		move.w	#$8F01,(a5)
00004C70 2ABC 946F 93FF             		move.l	#$946F93FF,(a5)
00004C76 3ABC 9780                  		move.w	#$9780,(a5)
00004C7A 2ABC 5000 0081             		move.l	#$50000081,(a5)
00004C80 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00004C88                            
00004C88                            loc_463C:
00004C88 3215                       		move.w	(a5),d1
00004C8A 0801 0001                  		btst	#1,d1
00004C8E 66F8                       		bne.s	loc_463C
00004C90 3ABC 8F02                  		move.w	#$8F02,(a5)
00004C94 6100 0000                  		bsr.w	SS_BGLoad
00004C98 7014                       		moveq	#$14,d0
00004C9A 6100 CC4E                  		bsr.w	RunPLC_ROM	; load special stage patterns
00004C9E 43F8 D000                  		lea	($FFFFD000).w,a1
00004CA2 7000                       		moveq	#0,d0
00004CA4 323C 07FF                  		move.w	#$7FF,d1
00004CA8                            
00004CA8                            SS_ClrObjRam:
00004CA8 22C0                       		move.l	d0,(a1)+
00004CAA 51C9 FFFC                  		dbf	d1,SS_ClrObjRam	; clear	the object RAM
00004CAE                            
00004CAE 43F8 F700                  		lea	($FFFFF700).w,a1
00004CB2 7000                       		moveq	#0,d0
00004CB4 323C 003F                  		move.w	#$3F,d1
00004CB8                            
00004CB8                            SS_ClrRam:
00004CB8 22C0                       		move.l	d0,(a1)+
00004CBA 51C9 FFFC                  		dbf	d1,SS_ClrRam	; clear	variables
00004CBE                            
00004CBE 43F8 FE60                  		lea	($FFFFFE60).w,a1
00004CC2 7000                       		moveq	#0,d0
00004CC4 323C 0027                  		move.w	#$27,d1
00004CC8                            
00004CC8                            SS_ClrRam2:
00004CC8 22C0                       		move.l	d0,(a1)+
00004CCA 51C9 FFFC                  		dbf	d1,SS_ClrRam2	; clear	variables
00004CCE                            
00004CCE 43F8 AA00                  		lea	($FFFFAA00).w,a1
00004CD2 7000                       		moveq	#0,d0
00004CD4 323C 007F                  		move.w	#$7F,d1
00004CD8                            
00004CD8                            SS_ClrNemRam:
00004CD8 22C0                       		move.l	d0,(a1)+
00004CDA 51C9 FFFC                  		dbf	d1,SS_ClrNemRam	; clear	Nemesis	buffer
00004CDE                            
00004CDE 4238 F64E                  		clr.b	($FFFFF64E).w
00004CE2 4278 FE02                  		clr.w	($FFFFFE02).w
00004CE6 700A                       		moveq	#$A,d0
00004CE8 6100 D5DC                  		bsr.w	PalLoad1	; load special stage pallet
00004CEC 4EB9 0000 0000             		jsr	SS_Load
00004CF2 21FC 0000 0000 F700        		move.l	#0,($FFFFF700).w
00004CFA 21FC 0000 0000 F704        		move.l	#0,($FFFFF704).w
00004D02 11FC 0009 D000             		move.b	#9,($FFFFD000).w ; load	special	stage Sonic object
00004D08 6100 0000                  		bsr.w	PalCycle_SS
00004D0C 4278 F780                  		clr.w	($FFFFF780).w	; set stage angle to "upright"
00004D10 4278 F784                  		clr.w	($FFFFF784).w	; set stage angle to "upright"
00004D14 31FC 0002 F786             		move.w	#2,($FFFFF786).w ; set stage rotation speed
00004D1A 303C 0089                  		move.w	#$89,d0
00004D1E 6100 C874                  		bsr.w	PlaySound	; play special stage BG	music
00004D22 31FC 0000 F790             		move.w	#0,($FFFFF790).w
00004D28 43F9 0000 46CC             		lea	(Demo_Index).l,a1
00004D2E 7006                       		moveq	#6,d0
00004D30 E548                       		lsl.w	#2,d0
00004D32 2271 0000                  		movea.l	(a1,d0.w),a1
00004D36 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w
00004D3C 5338 F792                  		subq.b	#1,($FFFFF792).w
00004D40 4278 FE20                  		clr.w	($FFFFFE20).w
00004D44 4238 FE1B                  		clr.b	($FFFFFE1B).w
00004D48 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w
00004D4E 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
00004D54                            ;		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
00004D54                            ;		beq.s	SS_NoDebug	; if not, branch
00004D54                            ;		btst	#6,($FFFFF604).w ; is A	button pressed?
00004D54                            ;		beq.s	SS_NoDebug	; if not, branch
00004D54                            ;		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00004D54                            
00004D54                            SS_NoDebug:
00004D54 3038 F60C                  		move.w	($FFFFF60C).w,d0
00004D58 0000 0040                  		ori.b	#$40,d0
00004D5C 33C0 00C0 0004             		move.w	d0,($C00004).l
00004D62 6100 D336                  		bsr.w	Pal_MakeWhite
00004D66                            
00004D66                            ; ---------------------------------------------------------------------------
00004D66                            ; Main Special Stage loop
00004D66                            ; ---------------------------------------------------------------------------
00004D66                            
00004D66                            SS_MainLoop:
00004D66 6100 C83E                  		bsr.w	PauseGame
00004D6A 11FC 000A F62A             		move.b	#$A,($FFFFF62A).w
00004D70 6100 DF90                  		bsr.w	DelayProgram
00004D74 4A78 F784                          tst.w   ($FFFFF784).w
00004D78 6700                               beq.s   SS_NotReversed
00004D7A 5378 F784                          subi.w  #1,($FFFFF784).w
00004D7E                            
00004D7E                            SS_NotReversed:
00004D7E 6100 F89C                  		bsr.w	MoveSonicInDemo
00004D82 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
00004D88 4EB9 0000 0000             		jsr	ObjectsLoad
00004D8E 4EB9 0000 0000             		jsr	BuildSprites
00004D94 4EB9 0000 0000             		jsr	SS_ShowLayout
00004D9A 6100 0000                  		bsr.w	SS_BGAnimate
00004D9E 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004DA2 6700                       		beq.s	SS_ChkEnd	; if not, branch
00004DA4 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00004DA8 6700 0000                  		beq.w	SS_ToSegaScreen	; if not, branch
00004DAC                            
00004DAC                            SS_ChkEnd:
00004DAC 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode $10 (special stage)?
00004DB2 6700 FFB2                  		beq.w	SS_MainLoop	; if yes, branch
00004DB6                            
00004DB6 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004DBA 6600 0000                  		bne.w	SS_ToSegaScreen	; if yes, branch
00004DBE 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00004DC4 0C78 0503 FE10             		cmpi.w	#$503,($FFFFFE10).w ; is level number higher than FZ?
00004DCA 6500                       		bcs.s	SS_End		; if not, branch
00004DCC 4278 FE10                  		clr.w	($FFFFFE10).w	; set to GHZ1
00004DD0                            
00004DD0                            SS_End:
00004DD0 31FC 003C F614             		move.w	#60,($FFFFF614).w ; set	delay time to 1	second
00004DD6 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00004DDC 4278 F794                  		clr.w	($FFFFF794).w
00004DE0                            
00004DE0                            SS_EndLoop:
00004DE0 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
00004DE6 6100 DF1A                  		bsr.w	DelayProgram
00004DEA 6100 F830                  		bsr.w	MoveSonicInDemo
00004DEE 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
00004DF4 4EB9 0000 0000             		jsr	ObjectsLoad
00004DFA 4EB9 0000 0000             		jsr	BuildSprites
00004E00 4EB9 0000 0000             		jsr	SS_ShowLayout
00004E06 6100 0000                  		bsr.w	SS_BGAnimate
00004E0A 5378 F794                  		subq.w	#1,($FFFFF794).w
00004E0E 6A00                       		bpl.s	loc_47D4
00004E10 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00004E16 6100 D34E                  		bsr.w	Pal_ToWhite
00004E1A                            
00004E1A                            loc_47D4:
00004E1A 4A78 F614                  		tst.w	($FFFFF614).w
00004E1E 66C0                       		bne.s	SS_EndLoop
00004E20                            
00004E20 46FC 2700                  		move	#$2700,sr
00004E24 4DF9 00C0 0004             		lea	($C00004).l,a6
00004E2A 3CBC 8230                  		move.w	#$8230,(a6)
00004E2E 3CBC 8407                  		move.w	#$8407,(a6)
00004E32 3CBC 9001                  		move.w	#$9001,(a6)
00004E36 6100 C68A                  		bsr.w	ClearScreen
00004E3A 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00004E44 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00004E4A 6100 C7F2                  		bsr.w	NemDec
00004E4E 4EB9 0000 0000             		jsr	Hud_Base
00004E54 46FC 2300                  		move	#$2300,sr
00004E58 7011                       		moveq	#$11,d0
00004E5A 6100 D486                  		bsr.w	PalLoad2	; load results screen pallet
00004E5E 7000                       		moveq	#0,d0
00004E60 6100 C94E                  		bsr.w	LoadPLC2
00004E64 701B                       		moveq	#$1B,d0
00004E66 6100 C916                  		bsr.w	LoadPLC		; load results screen patterns
00004E6A 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
00004E70 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; update ring bonus counter
00004E76 3038 FE20                  		move.w	($FFFFFE20).w,d0
00004E7A C0FC 000A                  		mulu.w	#10,d0		; multiply rings by 10
00004E7E 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set rings bonus
00004E82 303C 008E                  		move.w	#$8E,d0
00004E86 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play end-of-level music
00004E8C 43F8 D000                  		lea	($FFFFD000).w,a1
00004E90 7000                       		moveq	#0,d0
00004E92 323C 07FF                  		move.w	#$7FF,d1
00004E96                            
00004E96                            SS_EndClrObjRam:
00004E96 22C0                       		move.l	d0,(a1)+
00004E98 51C9 FFFC                  		dbf	d1,SS_EndClrObjRam ; clear object RAM
00004E9C                            
00004E9C 11FC 007E D5C0             		move.b	#$7E,($FFFFD5C0).w ; load results screen object
00004EA2                            
00004EA2                            SS_NormalExit:
00004EA2 6100 C702                  		bsr.w	PauseGame
00004EA6 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
00004EAC 6100 DE54                  		bsr.w	DelayProgram
00004EB0 4EB9 0000 0000             		jsr	ObjectsLoad
00004EB6 4EB9 0000 0000             		jsr	BuildSprites
00004EBC 6100 C92C                  		bsr.w	RunPLC_RAM
00004EC0 4A78 FE02                  		tst.w	($FFFFFE02).w
00004EC4 67DC                       		beq.s	SS_NormalExit
00004EC6 4AB8 F680                  		tst.l	($FFFFF680).w
00004ECA 66D6                       		bne.s	SS_NormalExit
00004ECC 303C 00CA                  		move.w	#$CA,d0
00004ED0 6100 C6C8                  		bsr.w	PlaySound_Special ; play special stage exit sound
00004ED4 6100 D270                  		bsr.w	Pal_MakeFlash
00004ED8 4E75                       		rts	
00004EDA                            ; ===========================================================================
00004EDA                            
00004EDA                            SS_ToSegaScreen:
00004EDA 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set screen mode to 00 (Sega screen)
00004EE0 4E75                       		rts
00004EE2                            
00004EE2                            ; ---------------------------------------------------------------------------
00004EE2                            ; Special stage	background loading subroutine
00004EE2                            ; ---------------------------------------------------------------------------
00004EE2                            
00004EE2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004EE2                            
00004EE2                            
00004EE2                            SS_BGLoad:				; XREF: SpecialStage
00004EE2 43F9 00FF 0000             		lea	($FF0000).l,a1
00004EE8 41F9 0000 0000             		lea	(Eni_SSBg1).l,a0 ; load	mappings for the birds and fish
00004EEE 303C 4051                  		move.w	#$4051,d0
00004EF2 6100 CA28                  		bsr.w	EniDec
00004EF6 263C 5000 0001             		move.l	#$50000001,d3
00004EFC 45F9 00FF 0080             		lea	($FF0080).l,a2
00004F02 7E06                       		moveq	#6,d7
00004F04                            
00004F04                            loc_48BE:
00004F04 2003                       		move.l	d3,d0
00004F06 7C03                       		moveq	#3,d6
00004F08 7800                       		moveq	#0,d4
00004F0A 0C47 0003                  		cmpi.w	#3,d7
00004F0E 6400                       		bcc.s	loc_48CC
00004F10 7801                       		moveq	#1,d4
00004F12                            
00004F12                            loc_48CC:
00004F12 7A07                       		moveq	#7,d5
00004F14                            
00004F14                            loc_48CE:
00004F14 224A                       		movea.l	a2,a1
00004F16 0A04 0001                  		eori.b	#1,d4
00004F1A 6600                       		bne.s	loc_48E2
00004F1C 0C47 0006                  		cmpi.w	#6,d7
00004F20 6600                       		bne.s	loc_48F2
00004F22 43F9 00FF 0000             		lea	($FF0000).l,a1
00004F28                            
00004F28                            loc_48E2:
00004F28 48E7 F800                  		movem.l	d0-d4,-(sp)
00004F2C 7207                       		moveq	#7,d1
00004F2E 7407                       		moveq	#7,d2
00004F30 6100 C6EC                  		bsr.w	ShowVDPGraphics
00004F34 4CDF 001F                  		movem.l	(sp)+,d0-d4
00004F38                            
00004F38                            loc_48F2:
00004F38 0680 0010 0000             		addi.l	#$100000,d0
00004F3E 51CD FFD4                  		dbf	d5,loc_48CE
00004F42 0680 0380 0000             		addi.l	#$3800000,d0
00004F48 0A04 0001                  		eori.b	#1,d4
00004F4C 51CE FFC4                  		dbf	d6,loc_48CC
00004F50 0683 1000 0000             		addi.l	#$10000000,d3
00004F56 6A00                       		bpl.s	loc_491C
00004F58 4843                       		swap	d3
00004F5A 0683 0000 C000             		addi.l	#$C000,d3
00004F60 4843                       		swap	d3
00004F62                            
00004F62                            loc_491C:
00004F62 D4FC 0080                  		adda.w	#$80,a2
00004F66 51CF FF9C                  		dbf	d7,loc_48BE
00004F6A 43F9 00FF 0000             		lea	($FF0000).l,a1
00004F70 41F9 0000 0000             		lea	(Eni_SSBg2).l,a0 ; load	mappings for the clouds
00004F76 303C 4000                  		move.w	#$4000,d0
00004F7A 6100 C9A0                  		bsr.w	EniDec
00004F7E 43F9 00FF 0000             		lea	($FF0000).l,a1
00004F84 203C 4000 0003             		move.l	#$40000003,d0
00004F8A 723F                       		moveq	#$3F,d1
00004F8C 741F                       		moveq	#$1F,d2
00004F8E 6100 C68E                  		bsr.w	ShowVDPGraphics
00004F92 43F9 00FF 0000             		lea	($FF0000).l,a1
00004F98 203C 5000 0003             		move.l	#$50000003,d0
00004F9E 723F                       		moveq	#$3F,d1
00004FA0 743F                       		moveq	#$3F,d2
00004FA2 6100 C67A                  		bsr.w	ShowVDPGraphics
00004FA6 4E75                       		rts	
00004FA8                            ; End of function SS_BGLoad
00004FA8                            
00004FA8                            ; ---------------------------------------------------------------------------
00004FA8                            ; Pallet cycling routine - special stage
00004FA8                            ; ---------------------------------------------------------------------------
00004FA8                            
00004FA8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004FA8                            
00004FA8                            
00004FA8                            PalCycle_SS:				; XREF: loc_DA6; SpecialStage
00004FA8 4A78 F63A                  		tst.w	($FFFFF63A).w
00004FAC 6600                       		bne.s	locret_49E6
00004FAE 5378 F79C                  		subq.w	#1,($FFFFF79C).w
00004FB2 6A00                       		bpl.s	locret_49E6
00004FB4 4DF9 00C0 0004             		lea	($C00004).l,a6
00004FBA 3038 F79A                  		move.w	($FFFFF79A).w,d0
00004FBE 5278 F79A                  		addq.w	#1,($FFFFF79A).w
00004FC2 0240 001F                  		andi.w	#$1F,d0
00004FC6 E548                       		lsl.w	#2,d0
00004FC8 41F9 0000 0000             		lea	(byte_4A3C).l,a0
00004FCE D0C0                       		adda.w	d0,a0
00004FD0 1018                       		move.b	(a0)+,d0
00004FD2 6A00                       		bpl.s	loc_4992
00004FD4 303C 01FF                  		move.w	#$1FF,d0
00004FD8                            
00004FD8                            loc_4992:
00004FD8 31C0 F79C                  		move.w	d0,($FFFFF79C).w
00004FDC 7000                       		moveq	#0,d0
00004FDE 1018                       		move.b	(a0)+,d0
00004FE0 31C0 F7A0                  		move.w	d0,($FFFFF7A0).w
00004FE4 43F9 0000 0000             		lea	(byte_4ABC).l,a1
00004FEA 43F1 0000                  		lea	(a1,d0.w),a1
00004FEE 303C 8200                  		move.w	#-$7E00,d0
00004FF2 1019                       		move.b	(a1)+,d0
00004FF4 3C80                       		move.w	d0,(a6)
00004FF6 11D1 F616                  		move.b	(a1),($FFFFF616).w
00004FFA 303C 8400                  		move.w	#-$7C00,d0
00004FFE 1018                       		move.b	(a0)+,d0
00005000 3C80                       		move.w	d0,(a6)
00005002 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
0000500C 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
00005014 7000                       		moveq	#0,d0
00005016 1018                       		move.b	(a0)+,d0
00005018 6B00                       		bmi.s	loc_49E8
0000501A 43F9 0000 0000             		lea	(Pal_SSCyc1).l,a1
00005020 D2C0                       		adda.w	d0,a1
00005022 45F8 FB4E                  		lea	($FFFFFB4E).w,a2
00005026 24D9                       		move.l	(a1)+,(a2)+
00005028 24D9                       		move.l	(a1)+,(a2)+
0000502A 24D9                       		move.l	(a1)+,(a2)+
0000502C                            
0000502C                            locret_49E6:
0000502C 4E75                       		rts	
0000502E                            ; ===========================================================================
0000502E                            
0000502E                            loc_49E8:				; XREF: PalCycle_SS
0000502E 3238 F79E                  		move.w	($FFFFF79E).w,d1
00005032 0C40 008A                  		cmpi.w	#$8A,d0
00005036 6500                       		bcs.s	loc_49F4
00005038 5241                       		addq.w	#1,d1
0000503A                            
0000503A                            loc_49F4:
0000503A C2FC 002A                  		mulu.w	#$2A,d1
0000503E 43F9 0000 0000             		lea	(Pal_SSCyc2).l,a1
00005044 D2C1                       		adda.w	d1,a1
00005046 0240 007F                  		andi.w	#$7F,d0
0000504A 0880 0000                  		bclr	#0,d0
0000504E 6700                       		beq.s	loc_4A18
00005050 45F8 FB6E                  		lea	($FFFFFB6E).w,a2
00005054 24D1                       		move.l	(a1),(a2)+
00005056 24E9 0004                  		move.l	4(a1),(a2)+
0000505A 24E9 0008                  		move.l	8(a1),(a2)+
0000505E                            
0000505E                            loc_4A18:
0000505E D2FC 000C                  		adda.w	#$C,a1
00005062 45F8 FB5A                  		lea	($FFFFFB5A).w,a2
00005066 0C40 000A                  		cmpi.w	#$A,d0
0000506A 6500                       		bcs.s	loc_4A2E
0000506C 0440 000A                  		subi.w	#$A,d0
00005070 45F8 FB7A                  		lea	($FFFFFB7A).w,a2
00005074                            
00005074                            loc_4A2E:
00005074 3200                       		move.w	d0,d1
00005076 D040                       		add.w	d0,d0
00005078 D041                       		add.w	d1,d0
0000507A D2C0                       		adda.w	d0,a1
0000507C 24D9                       		move.l	(a1)+,(a2)+
0000507E 34D9                       		move.w	(a1)+,(a2)+
00005080 4E75                       		rts	
00005082                            ; End of function PalCycle_SS
00005082                            
00005082                            ; ===========================================================================
00005082 0300 0792 0300 0790 0300+  byte_4A3C:	dc.b 3,	0, 7, $92, 3, 0, 7, $90, 3, 0, 7, $8E, 3, 0, 7,	$8C
00005092                            					; XREF: PalCycle_SS
00005092 0300 078B 0300 0780 0300+  		dc.b 3,	0, 7, $8B, 3, 0, 7, $80, 3, 0, 7, $82, 3, 0, 7,	$84
000050A2 0300 0786 0300 0788 0708+  		dc.b 3,	0, 7, $86, 3, 0, 7, $88, 7, 8, 7, 0, 7,	$A, 7, $C
000050B2 FF0C 0718 FF0C 0718 070A+  		dc.b $FF, $C, 7, $18, $FF, $C, 7, $18, 7, $A, 7, $C, 7,	8, 7, 0
000050C2 0300 0688 0300 0686 0300+  		dc.b 3,	0, 6, $88, 3, 0, 6, $86, 3, 0, 6, $84, 3, 0, 6,	$82
000050D2 0300 0681 0300 068A 0300+  		dc.b 3,	0, 6, $81, 3, 0, 6, $8A, 3, 0, 6, $8C, 3, 0, 6,	$8E
000050E2 0300 0690 0300 0692 0702+  		dc.b 3,	0, 6, $90, 3, 0, 6, $92, 7, 2, 6, $24, 7, 4, 6,	$30
000050F2 FF06 063C FF06 063C 0704+  		dc.b $FF, 6, 6,	$3C, $FF, 6, 6,	$3C, 7,	4, 6, $30, 7, 2, 6, $24
00005102                            		even
00005102 1001 1800 1801 2000 2001+  byte_4ABC:	dc.b $10, 1, $18, 0, $18, 1, $20, 0, $20, 1, $28, 0, $28, 1
00005110                            					; XREF: PalCycle_SS
00005110                            		even
00005110                            
00005110                            Pal_SSCyc1:	incbin	pallet\c_ss_1.bin
00005158                            		even
00005158                            Pal_SSCyc2:	incbin	pallet\c_ss_2.bin
0000522A                            		even
0000522A                            
0000522A                            ; ---------------------------------------------------------------------------
0000522A                            ; Subroutine to	make the special stage background animated
0000522A                            ; ---------------------------------------------------------------------------
0000522A                            
0000522A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000522A                            
0000522A                            
0000522A                            SS_BGAnimate:				; XREF: SpecialStage
0000522A 3038 F7A0                  		move.w	($FFFFF7A0).w,d0
0000522E 6600                       		bne.s	loc_4BF6
00005230 31FC 0000 F70C             		move.w	#0,($FFFFF70C).w
00005236 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
0000523C                            
0000523C                            loc_4BF6:
0000523C 0C40 0008                  		cmpi.w	#8,d0
00005240 6400                       		bcc.s	loc_4C4E
00005242 0C40 0006                  		cmpi.w	#6,d0
00005246 6600                       		bne.s	loc_4C10
00005248 5278 F718                  		addq.w	#1,($FFFFF718).w
0000524C 5278 F70C                  		addq.w	#1,($FFFFF70C).w
00005250 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00005256                            
00005256                            loc_4C10:
00005256 7000                       		moveq	#0,d0
00005258 3038 F708                  		move.w	($FFFFF708).w,d0
0000525C 4440                       		neg.w	d0
0000525E 4840                       		swap	d0
00005260 43F9 0000 0000             		lea	(byte_4CCC).l,a1
00005266 47F8 AA00                  		lea	($FFFFAA00).w,a3
0000526A 7609                       		moveq	#9,d3
0000526C                            
0000526C                            loc_4C26:
0000526C 302B 0002                  		move.w	2(a3),d0
00005270 6100 DAC2                  		bsr.w	CalcSine
00005274 7400                       		moveq	#0,d2
00005276 1419                       		move.b	(a1)+,d2
00005278 C1C2                       		muls.w	d2,d0
0000527A E080                       		asr.l	#8,d0
0000527C 36C0                       		move.w	d0,(a3)+
0000527E 1419                       		move.b	(a1)+,d2
00005280 4882                       		ext.w	d2
00005282 D55B                       		add.w	d2,(a3)+
00005284 51CB FFE6                  		dbf	d3,loc_4C26
00005288 47F8 AA00                  		lea	($FFFFAA00).w,a3
0000528C 45F9 0000 0000             		lea	(byte_4CB8).l,a2
00005292 6000                       		bra.s	loc_4C7E
00005294                            ; ===========================================================================
00005294                            
00005294                            loc_4C4E:				; XREF: SS_BGAnimate
00005294 0C40 000C                  		cmpi.w	#$C,d0
00005298 6600                       		bne.s	loc_4C74
0000529A 5378 F718                  		subq.w	#1,($FFFFF718).w
0000529E 47F8 AB00                  		lea	($FFFFAB00).w,a3
000052A2 243C 0001 8000             		move.l	#$18000,d2
000052A8 7206                       		moveq	#6,d1
000052AA                            
000052AA                            loc_4C64:
000052AA 2013                       		move.l	(a3),d0
000052AC 9082                       		sub.l	d2,d0
000052AE 26C0                       		move.l	d0,(a3)+
000052B0 0482 0000 2000             		subi.l	#$2000,d2
000052B6 51C9 FFF2                  		dbf	d1,loc_4C64
000052BA                            
000052BA                            loc_4C74:
000052BA 47F8 AB00                  		lea	($FFFFAB00).w,a3
000052BE 45F9 0000 0000             		lea	(byte_4CC4).l,a2
000052C4                            
000052C4                            loc_4C7E:
000052C4 43F8 CC00                  		lea	($FFFFCC00).w,a1
000052C8 3038 F718                  		move.w	($FFFFF718).w,d0
000052CC 4440                       		neg.w	d0
000052CE 4840                       		swap	d0
000052D0 7600                       		moveq	#0,d3
000052D2 161A                       		move.b	(a2)+,d3
000052D4 3438 F70C                  		move.w	($FFFFF70C).w,d2
000052D8 4442                       		neg.w	d2
000052DA 0242 00FF                  		andi.w	#$FF,d2
000052DE E54A                       		lsl.w	#2,d2
000052E0                            
000052E0                            loc_4C9A:
000052E0 301B                       		move.w	(a3)+,d0
000052E2 544B                       		addq.w	#2,a3
000052E4 7200                       		moveq	#0,d1
000052E6 121A                       		move.b	(a2)+,d1
000052E8 5341                       		subq.w	#1,d1
000052EA                            
000052EA                            loc_4CA4:
000052EA 2380 2000                  		move.l	d0,(a1,d2.w)
000052EE 5842                       		addq.w	#4,d2
000052F0 0242 03FC                  		andi.w	#$3FC,d2
000052F4 51C9 FFF4                  		dbf	d1,loc_4CA4
000052F8 51CB FFE6                  		dbf	d3,loc_4C9A
000052FC 4E75                       		rts	
000052FE                            ; End of function SS_BGAnimate
000052FE                            
000052FE                            ; ===========================================================================
000052FE 0928 1810 2818 1030 1808+  byte_4CB8:	dc.b 9,	$28, $18, $10, $28, $18, $10, $30, $18,	8, $10,	0
0000530A                            		even
0000530A 0630 3030 2818 1818        byte_4CC4:	dc.b 6,	$30, $30, $30, $28, $18, $18, $18
00005312                            		even
00005312 0802 04FF 0203 08FF 0402+  byte_4CCC:	dc.b 8,	2, 4, $FF, 2, 3, 8, $FF, 4, 2, 2, 3, 8,	$FD, 4,	2, 2, 3, 2, $FF
00005326                            		even
00005326                            					; XREF: SS_BGAnimate
00005326                            ; ===========================================================================
00005326                            
00005326                            ; ---------------------------------------------------------------------------
00005326                            ; Continue screen
00005326                            ; ---------------------------------------------------------------------------
00005326                            
00005326                            ContinueScreen:				; XREF: GameModeArray
00005326 6100 CCF4                  		bsr.w	Pal_FadeFrom
0000532A 46FC 2700                  		move	#$2700,sr
0000532E 3038 F60C                  		move.w	($FFFFF60C).w,d0
00005332 0200 00BF                  		andi.b	#$BF,d0
00005336 33C0 00C0 0004             		move.w	d0,($C00004).l
0000533C 4DF9 00C0 0004             		lea	($C00004).l,a6
00005342 3CBC 8004                  		move.w	#$8004,(a6)
00005346 3CBC 8700                  		move.w	#$8700,(a6)
0000534A 6100 C176                  		bsr.w	ClearScreen
0000534E 43F8 D000                  		lea	($FFFFD000).w,a1
00005352 7000                       		moveq	#0,d0
00005354 323C 07FF                  		move.w	#$7FF,d1
00005358                            
00005358                            Cont_ClrObjRam:
00005358 22C0                       		move.l	d0,(a1)+
0000535A 51C9 FFFC                  		dbf	d1,Cont_ClrObjRam ; clear object RAM
0000535E                            
0000535E 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00005368 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
0000536E 6100 C2CE                  		bsr.w	NemDec
00005372 23FC 6000 0002 00C0 0004   		move.l	#$60000002,($C00004).l
0000537C 41F9 0000 0000             		lea	(Nem_ContSonic).l,a0 ; load Sonic patterns
00005382 6100 C2BA                  		bsr.w	NemDec
00005386 23FC 6A20 0002 00C0 0004   		move.l	#$6A200002,($C00004).l
00005390 41F9 0000 0000             		lea	(Nem_MiniSonic).l,a0 ; load continue screen patterns
00005396 6100 C2A6                  		bsr.w	NemDec
0000539A 720A                       		moveq	#10,d1
0000539C 4EB9 0000 0000             		jsr	ContScrCounter	; run countdown	(start from 10)
000053A2 7012                       		moveq	#$12,d0
000053A4 6100 CF20                  		bsr.w	PalLoad1	; load continue	screen pallet
000053A8 103C 0090                  		move.b	#$90,d0
000053AC 6100 C1E6                  		bsr.w	PlaySound	; play continue	music
000053B0 31FC 0293 F614             		move.w	#659,($FFFFF614).w ; set time delay to 11 seconds
000053B6 42B8 F700                  		clr.l	($FFFFF700).w
000053BA 21FC 0100 0000 F704        		move.l	#$1000000,($FFFFF704).w
000053C2 11FC 0081 D000             		move.b	#$81,($FFFFD000).w ; load Sonic	object
000053C8 11FC 0080 D040             		move.b	#$80,($FFFFD040).w ; load continue screen objects
000053CE 11FC 0080 D080             		move.b	#$80,($FFFFD080).w
000053D4 11FC 0003 D098             		move.b	#3,($FFFFD098).w
000053DA 11FC 0004 D09A             		move.b	#4,($FFFFD09A).w
000053E0 11FC 0080 D0C0             		move.b	#$80,($FFFFD0C0).w
000053E6 11FC 0004 D0E4             		move.b	#4,($FFFFD0E4).w
000053EC 4EB9 0000 0000             		jsr	ObjectsLoad
000053F2 4EB9 0000 0000             		jsr	BuildSprites
000053F8 3038 F60C                  		move.w	($FFFFF60C).w,d0
000053FC 0000 0040                  		ori.b	#$40,d0
00005400 33C0 00C0 0004             		move.w	d0,($C00004).l
00005406 6100 CB6A                  		bsr.w	Pal_FadeTo
0000540A                            
0000540A                            ; ---------------------------------------------------------------------------
0000540A                            ; Continue screen main loop
0000540A                            ; ---------------------------------------------------------------------------
0000540A                            
0000540A                            Cont_MainLoop:
0000540A 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
00005410 6100 D8F0                  		bsr.w	DelayProgram
00005414 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000541A 6400                       		bcc.s	loc_4DF2
0000541C 46FC 2700                  		move	#$2700,sr
00005420 3238 F614                  		move.w	($FFFFF614).w,d1
00005424 82FC 003C                  		divu.w	#$3C,d1
00005428 0281 0000 000F             		andi.l	#$F,d1
0000542E 4EB9 0000 0000             		jsr	ContScrCounter
00005434 46FC 2300                  		move	#$2300,sr
00005438                            
00005438                            loc_4DF2:
00005438 4EB9 0000 0000             		jsr	ObjectsLoad
0000543E 4EB9 0000 0000             		jsr	BuildSprites
00005444 0C78 0180 D008             		cmpi.w	#$180,($FFFFD008).w ; has Sonic	run off	screen?
0000544A 6400                       		bcc.s	Cont_GotoLevel	; if yes, branch
0000544C 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00005452 64B6                       		bcc.s	Cont_MainLoop
00005454 4A78 F614                  		tst.w	($FFFFF614).w
00005458 6600 FFB0                  		bne.w	Cont_MainLoop
0000545C 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00005462 4E75                       		rts	
00005464                            ; ===========================================================================
00005464                            
00005464                            Cont_GotoLevel:				; XREF: Cont_MainLoop
00005464 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
0000546A 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
00005470 7000                       		moveq	#0,d0
00005472 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00005476 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
0000547A 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
0000547E 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost count
00005482 5338 FE18                  		subq.b	#1,($FFFFFE18).w ; subtract 1 from continues
00005486 4E75                       		rts	
00005488                            ; ===========================================================================
00005488                            
00005488                            ; ---------------------------------------------------------------------------
00005488                            ; Object 80 - Continue screen elements
00005488                            ; ---------------------------------------------------------------------------
00005488                            
00005488                            Obj80:					; XREF: Obj_Index
00005488 7000                       		moveq	#0,d0
0000548A 1028 0024                  		move.b	$24(a0),d0
0000548E 323B 0000                  		move.w	Obj80_Index(pc,d0.w),d1
00005492 4EFB 1000                  		jmp	Obj80_Index(pc,d1.w)
00005496                            ; ===========================================================================
00005496 0000                       Obj80_Index:	dc.w Obj80_Main-Obj80_Index
00005498 0000                       		dc.w Obj80_Display-Obj80_Index
0000549A 0000                       		dc.w Obj80_MakeMiniSonic-Obj80_Index
0000549C 0000                       		dc.w Obj80_ChkType-Obj80_Index
0000549E                            ; ===========================================================================
0000549E                            
0000549E                            Obj80_Main:				; XREF: Obj80_Index
0000549E 5428 0024                  		addq.b	#2,$24(a0)
000054A2 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
000054AA 317C 8500 0002             		move.w	#$8500,2(a0)
000054B0 117C 0000 0001             		move.b	#0,1(a0)
000054B6 117C 003C 0019             		move.b	#$3C,$19(a0)
000054BC 317C 0120 0008             		move.w	#$120,8(a0)
000054C2 317C 00C0 000A             		move.w	#$C0,$A(a0)
000054C8 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; clear rings
000054CE                            
000054CE                            Obj80_Display:				; XREF: Obj80_Index
000054CE 4EF9 0000 0000             		jmp	DisplaySprite
000054D4                            ; ===========================================================================
000054D4                            Obj80_MiniSonicPos:
000054D4 0116 012A 0102 013E 00EE+  		dc.w $116, $12A, $102, $13E, $EE, $152, $DA, $166, $C6
000054E6 017A 00B2 018E 009E 01A2+  		dc.w $17A, $B2,	$18E, $9E, $1A2, $8A
000054F2                            ; ===========================================================================
000054F2                            
000054F2                            Obj80_MakeMiniSonic:			; XREF: Obj80_Index
000054F2 2248                       		movea.l	a0,a1
000054F4 45F9 0000 54D4             		lea	(Obj80_MiniSonicPos).l,a2
000054FA 7200                       		moveq	#0,d1
000054FC 1238 FE18                  		move.b	($FFFFFE18).w,d1
00005500 5501                       		subq.b	#2,d1
00005502 6400                       		bcc.s	loc_4EC4
00005504 4EF9 0000 0000             		jmp	DeleteObject
0000550A                            ; ===========================================================================
0000550A                            
0000550A                            loc_4EC4:				; XREF: Obj80_MakeMiniSonic
0000550A 7601                       		moveq	#1,d3
0000550C 0C01 000E                  		cmpi.b	#$E,d1
00005510 6500                       		bcs.s	loc_4ED0
00005512 7600                       		moveq	#0,d3
00005514 720E                       		moveq	#$E,d1
00005516                            
00005516                            loc_4ED0:
00005516 1401                       		move.b	d1,d2
00005518 0202 0001                  		andi.b	#1,d2
0000551C                            
0000551C                            Obj80_MiniSonLoop:
0000551C 12BC 0080                  		move.b	#$80,0(a1)	; load mini Sonic object
00005520 335A 0008                  		move.w	(a2)+,8(a1)
00005524 4A02                       		tst.b	d2
00005526 6700                       		beq.s	loc_4EEA
00005528 0469 000A 0008             		subi.w	#$A,8(a1)
0000552E                            
0000552E                            loc_4EEA:
0000552E 337C 00D0 000A             		move.w	#$D0,$A(a1)
00005534 137C 0006 001A             		move.b	#6,$1A(a1)
0000553A 137C 0006 0024             		move.b	#6,$24(a1)
00005540 237C 0000 0000 0004        		move.l	#Map_obj80,4(a1)
00005548 337C 8551 0002             		move.w	#$8551,2(a1)
0000554E 137C 0000 0001             		move.b	#0,1(a1)
00005554 43E9 0040                  		lea	$40(a1),a1
00005558 51C9 FFC2                  		dbf	d1,Obj80_MiniSonLoop ; repeat for number of continues
0000555C 43E9 FFC0                  		lea	-$40(a1),a1
00005560 1343 0028                  		move.b	d3,$28(a1)
00005564                            
00005564                            Obj80_ChkType:				; XREF: Obj80_Index
00005564 4A28 0028                  		tst.b	$28(a0)
00005568 6700                       		beq.s	loc_4F40
0000556A 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00005570 6500                       		bcs.s	loc_4F40
00005572 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00005576 0200 0001                  		andi.b	#1,d0
0000557A 6600                       		bne.s	loc_4F40
0000557C 4A78 D010                  		tst.w	($FFFFD010).w
00005580 6600                       		bne.s	Obj80_Delete
00005582 4E75                       		rts	
00005584                            ; ===========================================================================
00005584                            
00005584                            loc_4F40:				; XREF: Obj80_ChkType
00005584 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00005588 0200 000F                  		andi.b	#$F,d0
0000558C 6600                       		bne.s	Obj80_Display2
0000558E 0868 0000 001A             		bchg	#0,$1A(a0)
00005594                            
00005594                            Obj80_Display2:
00005594 4EF9 0000 0000             		jmp	DisplaySprite
0000559A                            ; ===========================================================================
0000559A                            
0000559A                            Obj80_Delete:				; XREF: Obj80_ChkType
0000559A 4EF9 0000 0000             		jmp	DeleteObject
000055A0                            ; ===========================================================================
000055A0                            
000055A0                            ; ---------------------------------------------------------------------------
000055A0                            ; Object 81 - Sonic on the continue screen
000055A0                            ; ---------------------------------------------------------------------------
000055A0                            
000055A0                            Obj81:					; XREF: Obj_Index
000055A0 7000                       		moveq	#0,d0
000055A2 1028 0024                  		move.b	$24(a0),d0
000055A6 323B 0000                  		move.w	Obj81_Index(pc,d0.w),d1
000055AA 4EBB 1000                  		jsr	Obj81_Index(pc,d1.w)
000055AE 4EF9 0000 0000             		jmp	DisplaySprite
000055B4                            ; ===========================================================================
000055B4 0000                       Obj81_Index:	dc.w Obj81_Main-Obj81_Index
000055B6 0000                       		dc.w Obj81_ChkLand-Obj81_Index
000055B8 0000                       		dc.w Obj81_Animate-Obj81_Index
000055BA 0000                       		dc.w Obj81_Run-Obj81_Index
000055BC                            ; ===========================================================================
000055BC                            
000055BC                            Obj81_Main:				; XREF: Obj81_Index
000055BC 5428 0024                  		addq.b	#2,$24(a0)
000055C0 317C 00A0 0008             		move.w	#$A0,8(a0)
000055C6 317C 00C0 000C             		move.w	#$C0,$C(a0)
000055CC 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
000055D4 317C 0780 0002             		move.w	#$780,2(a0)
000055DA 117C 0004 0001             		move.b	#4,1(a0)
000055E0 117C 0002 0018             		move.b	#2,$18(a0)
000055E6 117C 001D 001C             		move.b	#$1D,$1C(a0)	; use "floating" animation
000055EC 317C 0400 0012             		move.w	#$400,$12(a0)	; make Sonic fall from above
000055F2                            
000055F2                            Obj81_ChkLand:				; XREF: Obj81_Index
000055F2 0C68 01A0 000C             		cmpi.w	#$1A0,$C(a0)	; has Sonic landed yet?
000055F8 6600                       		bne.s	Obj81_ShowFall	; if not, branch
000055FA 5428 0024                  		addq.b	#2,$24(a0)
000055FE 4268 0012                  		clr.w	$12(a0)		; stop Sonic falling
00005602 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
0000560A 317C 8500 0002             		move.w	#$8500,2(a0)
00005610 117C 0000 001C             		move.b	#0,$1C(a0)
00005616 6000                       		bra.s	Obj81_Animate
00005618                            ; ===========================================================================
00005618                            
00005618                            Obj81_ShowFall:				; XREF: Obj81_ChkLand
00005618 4EB9 0000 0000             		jsr	SpeedToPos
0000561E 4EB9 0000 0000             		jsr	Sonic_Animate
00005624 4EF9 0000 0000             		jmp	LoadSonicDynPLC
0000562A                            ; ===========================================================================
0000562A                            
0000562A                            Obj81_Animate:				; XREF: Obj81_Index
0000562A 4A38 F605                  		tst.b	($FFFFF605).w	; is any button	pressed?
0000562E 6B00                       		bmi.s	Obj81_GetUp	; if yes, branch
00005630 43F9 0000 0000             		lea	(Ani_obj81).l,a1
00005636 4EF9 0000 0000             		jmp	AnimateSprite
0000563C                            ; ===========================================================================
0000563C                            
0000563C                            Obj81_GetUp:				; XREF: Obj81_Animate
0000563C 5428 0024                  		addq.b	#2,$24(a0)
00005640 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
00005648 317C 0780 0002             		move.w	#$780,2(a0)
0000564E 117C 001E 001C             		move.b	#$1E,$1C(a0)	; use "getting up" animation
00005654 4268 0014                  		clr.w	$14(a0)
00005658 5168 000C                  		subq.w	#8,$C(a0)
0000565C 103C 00E0                  		move.b	#$E0,d0
00005660 6100 BF38                  		bsr.w	PlaySound_Special ; fade out music
00005664                            
00005664                            Obj81_Run:				; XREF: Obj81_Index
00005664 0C68 0800 0014             		cmpi.w	#$800,$14(a0)	; check	Sonic's "run speed" (not moving)
0000566A 6600                       		bne.s	Obj81_AddSpeed	; if too low, branch
0000566C 317C 1000 0010             		move.w	#$1000,$10(a0)	; move Sonic to	the right
00005672 6000                       		bra.s	Obj81_ShowRun
00005674                            ; ===========================================================================
00005674                            
00005674                            Obj81_AddSpeed:				; XREF: Obj81_Run
00005674 0668 0020 0014             		addi.w	#$20,$14(a0)	; increase "run	speed"
0000567A                            
0000567A                            Obj81_ShowRun:				; XREF: Obj81_Run
0000567A 4EB9 0000 0000             		jsr	SpeedToPos
00005680 4EB9 0000 0000             		jsr	Sonic_Animate
00005686 4EF9 0000 0000             		jmp	LoadSonicDynPLC
0000568C                            ; ===========================================================================
0000568C                            Ani_obj81:
0000568C                            	include "_anim\obj81.asm"
0000568C                            ; ---------------------------------------------------------------------------
0000568C                            ; Animation script - Sonic on the continue screen
0000568C                            ; ---------------------------------------------------------------------------
0000568C 0000                       		dc.w byte_504A-Ani_obj81
0000568E 0401 0101 0102 0202 0303+  byte_504A:	dc.b 4,	1, 1, 1, 1, 2, 2, 2, 3,	3, $FF
0000569A 00                         		even
0000569A 00                         		even
0000569A                            
0000569A                            ; ---------------------------------------------------------------------------
0000569A                            ; Sprite mappings - Continue screen
0000569A                            ; ---------------------------------------------------------------------------
0000569A                            Map_obj80:
0000569A                            	include "_maps\obj80.asm"
0000569A                            ; ---------------------------------------------------------------------------
0000569A                            ; Sprite mappings - Continue screen
0000569A                            ; ---------------------------------------------------------------------------
0000569A 0000 0000                  		dc.w byte_5066-Map_obj80, byte_509E-Map_obj80
0000569E 0000 0000                  		dc.w byte_50AE-Map_obj80, byte_50BE-Map_obj80
000056A2 0000 0000                  		dc.w byte_50CE-Map_obj80, byte_50D9-Map_obj80
000056A6 0000 0000                  		dc.w byte_50D9-Map_obj80, byte_50DF-Map_obj80
000056AA 0B                         byte_5066:	dc.b $B
000056AB F805 0088 C4               		dc.b $F8, 5, 0,	$88, $C4 ; "CONTINUE", stars and countdown
000056B0 F805 00B2 D4               		dc.b $F8, 5, 0,	$B2, $D4
000056B5 F805 00AE E4               		dc.b $F8, 5, 0,	$AE, $E4
000056BA F805 00C2 F4               		dc.b $F8, 5, 0,	$C2, $F4
000056BF F801 00A0 04               		dc.b $F8, 1, 0,	$A0, 4
000056C4 F805 00AE 0C               		dc.b $F8, 5, 0,	$AE, $C
000056C9 F805 00C6 1C               		dc.b $F8, 5, 0,	$C6, $1C
000056CE F805 0090 2C               		dc.b $F8, 5, 0,	$90, $2C
000056D3 3805 2021 E8               		dc.b $38, 5, $20, $21, $E8
000056D8 3805 2021 08               		dc.b $38, 5, $20, $21, 8
000056DD 3605 01FC F8               		dc.b $36, 5, 1,	$FC, $F8
000056E2 03                         byte_509E:	dc.b 3
000056E3 0405 0015 FC               		dc.b 4,	5, 0, $15, $FC	; Sonic	on floor
000056E8 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
000056ED F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
000056F2 03                         byte_50AE:	dc.b 3
000056F3 0405 0019 FC               		dc.b 4,	5, 0, $19, $FC	; Sonic	on floor #2
000056F8 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
000056FD F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
00005702 03                         byte_50BE:	dc.b 3
00005703 0405 001D FC               		dc.b 4,	5, 0, $1D, $FC	; Sonic	on floor #3
00005708 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
0000570D F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
00005712 02                         byte_50CE:	dc.b 2
00005713 6009 2000 E8               		dc.b $60, 9, $20, 0, $E8 ; circle on the floor
00005718 6009 2800 00               		dc.b $60, 9, $28, 0, 0
0000571D 01                         byte_50D9:	dc.b 1
0000571E 0006 0012 00               		dc.b 0,	6, 0, $12, 0	; mini Sonic
00005723 01                         byte_50DF:	dc.b 1
00005724 0006 0018 00               		dc.b 0,	6, 0, $18, 0	; mini Sonic #2
0000572A 00                         		even
0000572A 00                         		even
0000572A                            
0000572A                            ; ===========================================================================
0000572A                            ; ---------------------------------------------------------------------------
0000572A                            ; Ending sequence in Green Hill	Zone
0000572A                            ; ---------------------------------------------------------------------------
0000572A                            
0000572A                            EndingSequence:				; XREF: GameModeArray
0000572A 103C 00E4                  		move.b	#$E4,d0
0000572E 6100 BE6A                  		bsr.w	PlaySound_Special ; stop music
00005732 6100 C8E8                  		bsr.w	Pal_FadeFrom
00005736 43F8 D000                  		lea	($FFFFD000).w,a1
0000573A 7000                       		moveq	#0,d0
0000573C 323C 07FF                  		move.w	#$7FF,d1
00005740                            
00005740                            End_ClrObjRam:
00005740 22C0                       		move.l	d0,(a1)+
00005742 51C9 FFFC                  		dbf	d1,End_ClrObjRam ; clear object	RAM
00005746                            
00005746 43F8 F628                  		lea	($FFFFF628).w,a1
0000574A 7000                       		moveq	#0,d0
0000574C 323C 0015                  		move.w	#$15,d1
00005750                            
00005750                            End_ClrRam:
00005750 22C0                       		move.l	d0,(a1)+
00005752 51C9 FFFC                  		dbf	d1,End_ClrRam	; clear	variables
00005756                            
00005756 43F8 F700                  		lea	($FFFFF700).w,a1
0000575A 7000                       		moveq	#0,d0
0000575C 323C 003F                  		move.w	#$3F,d1
00005760                            
00005760                            End_ClrRam2:
00005760 22C0                       		move.l	d0,(a1)+
00005762 51C9 FFFC                  		dbf	d1,End_ClrRam2	; clear	variables
00005766                            
00005766 43F8 FE60                  		lea	($FFFFFE60).w,a1
0000576A 7000                       		moveq	#0,d0
0000576C 323C 0047                  		move.w	#$47,d1
00005770                            
00005770                            End_ClrRam3:
00005770 22C0                       		move.l	d0,(a1)+
00005772 51C9 FFFC                  		dbf	d1,End_ClrRam3	; clear	variables
00005776                            
00005776 46FC 2700                  		move	#$2700,sr
0000577A 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000577E 0200 00BF                  		andi.b	#$BF,d0
00005782 33C0 00C0 0004             		move.w	d0,($C00004).l
00005788 6100 BD38                  		bsr.w	ClearScreen
0000578C 4DF9 00C0 0004             		lea	($C00004).l,a6
00005792 3CBC 8B03                  		move.w	#$8B03,(a6)
00005796 3CBC 8230                  		move.w	#$8230,(a6)
0000579A 3CBC 8407                  		move.w	#$8407,(a6)
0000579E 3CBC 857C                  		move.w	#$857C,(a6)
000057A2 3CBC 9001                  		move.w	#$9001,(a6)
000057A6 3CBC 8004                  		move.w	#$8004,(a6)
000057AA 3CBC 8720                  		move.w	#$8720,(a6)
000057AE 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
000057B4 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
000057B8 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
000057BE 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	number to 0600 (extra flowers)
000057C4 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
000057CA 6700                       		beq.s	End_LoadData	; if yes, branch
000057CC 31FC 0601 FE10             		move.w	#$601,($FFFFFE10).w ; set level	number to 0601 (no flowers)
000057D2                            
000057D2                            End_LoadData:
000057D2 701C                       		moveq	#$1C,d0
000057D4 6100 C114                  		bsr.w	RunPLC_ROM	; load ending sequence patterns
000057D8 4EB9 0000 0000             		jsr	Hud_Base
000057DE 6100 0000                  		bsr.w	LevelSizeLoad
000057E2 6100 0000                  		bsr.w	DeformBgLayer
000057E6 08F8 0002 F754             		bset	#2,($FFFFF754).w
000057EC 6100 0000                  		bsr.w	MainLoadBlockLoad
000057F0 6100 0000                  		bsr.w	LoadTilesFromStart
000057F4 21FC 0000 0000 F796        		move.l	#Col_GHZ,($FFFFF796).w ; load collision	index
000057FC 46FC 2300                  		move	#$2300,sr
00005800 41F9 0000 0000             		lea	(Kos_EndFlowers).l,a0 ;	load extra flower patterns
00005806 43F8 9400                  		lea	($FFFF9400).w,a1 ; RAM address to buffer the patterns
0000580A 6100 C28E                  		bsr.w	KosDec
0000580E 7003                       		moveq	#3,d0
00005810 6100 CAB4                  		bsr.w	PalLoad1	; load Sonic's pallet
00005814 303C 008B                  		move.w	#$8B,d0
00005818 6100 BD7A                  		bsr.w	PlaySound	; play ending sequence music
0000581C 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
00005822 6700                       		beq.s	End_LoadSonic	; if not, branch
00005824 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
0000582A                            
0000582A                            End_LoadSonic:
0000582A 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
00005830 08F8 0000 D022             		bset	#0,($FFFFD022).w ; make	Sonic face left
00005836 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0000583C 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; move Sonic to the	left
00005842 31FC F800 D014             		move.w	#$F800,($FFFFD014).w ; set Sonic's speed
00005848 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
0000584E 4EB9 0000 0000             		jsr	ObjPosLoad
00005854 4EB9 0000 0000             		jsr	ObjectsLoad
0000585A 4EB9 0000 0000             		jsr	BuildSprites
00005860 7000                       		moveq	#0,d0
00005862 31C0 FE20                  		move.w	d0,($FFFFFE20).w
00005866 21C0 FE22                  		move.l	d0,($FFFFFE22).w
0000586A 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w
0000586E 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w
00005872 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w
00005876 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w
0000587A 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
0000587E 31C0 FE08                  		move.w	d0,($FFFFFE08).w
00005882 31C0 FE02                  		move.w	d0,($FFFFFE02).w
00005886 31C0 FE04                  		move.w	d0,($FFFFFE04).w
0000588A 6100 EEE0                  		bsr.w	OscillateNumInit
0000588E 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w
00005894 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w
0000589A 11FC 0000 FE1E             		move.b	#0,($FFFFFE1E).w
000058A0 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
000058A6 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
000058AC 6100 D454                  		bsr.w	DelayProgram
000058B0 3038 F60C                  		move.w	($FFFFF60C).w,d0
000058B4 0000 0040                  		ori.b	#$40,d0
000058B8 33C0 00C0 0004             		move.w	d0,($C00004).l
000058BE 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000058C4 6100 C6AC                  		bsr.w	Pal_FadeTo
000058C8                            
000058C8                            ; ---------------------------------------------------------------------------
000058C8                            ; Main ending sequence loop
000058C8                            ; ---------------------------------------------------------------------------
000058C8                            
000058C8                            End_MainLoop:
000058C8 6100 BCDC                  		bsr.w	PauseGame
000058CC 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
000058D2 6100 D42E                  		bsr.w	DelayProgram
000058D6 5278 FE04                  		addq.w	#1,($FFFFFE04).w
000058DA 6100 0000                  		bsr.w	End_MoveSonic
000058DE 4EB9 0000 0000             		jsr	ObjectsLoad
000058E4 6100 0000                  		bsr.w	DeformBgLayer
000058E8 4EB9 0000 0000             		jsr	BuildSprites
000058EE 4EB9 0000 0000             		jsr	ObjPosLoad
000058F4 6100 C244                  		bsr.w	PalCycle_Load
000058F8 6100 EEC8                  		bsr.w	OscillateNumDo
000058FC 6100 EF54                  		bsr.w	ChangeRingFrame
00005900 0C38 0018 F600             		cmpi.b	#$18,($FFFFF600).w ; is	scene number $18 (ending)?
00005906 6700                       		beq.s	loc_52DA	; if yes, branch
00005908 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set scene to $1C (credits)
0000590E 103C 0091                  		move.b	#$91,d0
00005912 6100 BC86                  		bsr.w	PlaySound_Special ; play credits music
00005916 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w ; set credits index number to 0
0000591C 4E75                       		rts	
0000591E                            ; ===========================================================================
0000591E                            
0000591E                            loc_52DA:
0000591E 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
00005922 6700 FFA4                  		beq.w	End_MainLoop	; if not, branch
00005926                            
00005926 4278 FE02                  		clr.w	($FFFFFE02).w
0000592A 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00005930 4278 F794                  		clr.w	($FFFFF794).w
00005934                            
00005934                            End_AllEmlds:				; XREF: loc_5334
00005934 6100 BC70                  		bsr.w	PauseGame
00005938 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
0000593E 6100 D3C2                  		bsr.w	DelayProgram
00005942 5278 FE04                  		addq.w	#1,($FFFFFE04).w
00005946 6100 0000                  		bsr.w	End_MoveSonic
0000594A 4EB9 0000 0000             		jsr	ObjectsLoad
00005950 6100 0000                  		bsr.w	DeformBgLayer
00005954 4EB9 0000 0000             		jsr	BuildSprites
0000595A 4EB9 0000 0000             		jsr	ObjPosLoad
00005960 6100 EE60                  		bsr.w	OscillateNumDo
00005964 6100 EEEC                  		bsr.w	ChangeRingFrame
00005968 5378 F794                  		subq.w	#1,($FFFFF794).w
0000596C 6A00                       		bpl.s	loc_5334
0000596E 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00005974 6100 C7F0                  		bsr.w	Pal_ToWhite
00005978                            
00005978                            loc_5334:
00005978 4A78 FE02                  		tst.w	($FFFFFE02).w
0000597C 6700 FFB6                  		beq.w	End_AllEmlds
00005980 4278 FE02                  		clr.w	($FFFFFE02).w
00005984 31FC 2E2F A480             		move.w	#$2E2F,($FFFFA480).w ; modify level layout
0000598A 4BF9 00C0 0004             		lea	($C00004).l,a5
00005990 4DF9 00C0 0000             		lea	($C00000).l,a6
00005996 47F8 F700                  		lea	($FFFFF700).w,a3
0000599A 49F8 A400                  		lea	($FFFFA400).w,a4
0000599E 343C 4000                  		move.w	#$4000,d2
000059A2 6100 0000                  		bsr.w	LoadTilesFromStart2
000059A6 7013                       		moveq	#$13,d0
000059A8 6100 C91C                  		bsr.w	PalLoad1	; load ending pallet
000059AC 6100 C6EC                  		bsr.w	Pal_MakeWhite
000059B0 6000 FF16                  		bra.w	End_MainLoop
000059B4                            
000059B4                            ; ---------------------------------------------------------------------------
000059B4                            ; Subroutine controlling Sonic on the ending sequence
000059B4                            ; ---------------------------------------------------------------------------
000059B4                            
000059B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000059B4                            
000059B4                            
000059B4                            End_MoveSonic:				; XREF: End_MainLoop
000059B4 1038 F7D7                  		move.b	($FFFFF7D7).w,d0
000059B8 6600                       		bne.s	End_MoveSonic2
000059BA 0C78 0090 D008             		cmpi.w	#$90,($FFFFD008).w ; has Sonic passed $90 on y-axis?
000059C0 6400                       		bcc.s	End_MoveSonExit	; if not, branch
000059C2 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
000059C6 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	player's controls
000059CC 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; move Sonic to the	right
000059D2 4E75                       		rts	
000059D4                            ; ===========================================================================
000059D4                            
000059D4                            End_MoveSonic2:				; XREF: End_MoveSonic
000059D4 5500                       		subq.b	#2,d0
000059D6 6600                       		bne.s	End_MoveSonic3
000059D8 0C78 00A0 D008             		cmpi.w	#$A0,($FFFFD008).w ; has Sonic passed $A0 on y-axis?
000059DE 6500                       		bcs.s	End_MoveSonExit	; if not, branch
000059E0 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
000059E4 7000                       		moveq	#0,d0
000059E6 11C0 F7CC                  		move.b	d0,($FFFFF7CC).w
000059EA 31C0 F602                  		move.w	d0,($FFFFF602).w ; stop	Sonic moving
000059EE 31C0 D014                  		move.w	d0,($FFFFD014).w
000059F2 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w
000059F8 11FC 0003 D01A             		move.b	#3,($FFFFD01A).w
000059FE 31FC 0505 D01C             		move.w	#$505,($FFFFD01C).w ; use "standing" animation
00005A04 11FC 0003 D01E             		move.b	#3,($FFFFD01E).w
00005A0A 4E75                       		rts	
00005A0C                            ; ===========================================================================
00005A0C                            
00005A0C                            End_MoveSonic3:				; XREF: End_MoveSonic
00005A0C 5500                       		subq.b	#2,d0
00005A0E 6600                       		bne.s	End_MoveSonExit
00005A10 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
00005A14 31FC 00A0 D008             		move.w	#$A0,($FFFFD008).w
00005A1A 11FC 0087 D000             		move.b	#$87,($FFFFD000).w ; load Sonic	ending sequence	object
00005A20 4278 D024                  		clr.w	($FFFFD024).w
00005A24                            
00005A24                            End_MoveSonExit:
00005A24 4E75                       		rts	
00005A26                            ; End of function End_MoveSonic
00005A26                            
00005A26                            ; ===========================================================================
00005A26                            ; ---------------------------------------------------------------------------
00005A26                            ; Object 87 - Sonic on ending sequence
00005A26                            ; ---------------------------------------------------------------------------
00005A26                            
00005A26                            Obj87:					; XREF: Obj_Index
00005A26 7000                       		moveq	#0,d0
00005A28 1028 0025                  		move.b	$25(a0),d0
00005A2C 323B 0000                  		move.w	Obj87_Index(pc,d0.w),d1
00005A30 4EBB 1000                  		jsr	Obj87_Index(pc,d1.w)
00005A34 4EF9 0000 0000             		jmp	DisplaySprite
00005A3A                            ; ===========================================================================
00005A3A 0000 0000                  Obj87_Index:	dc.w Obj87_Main-Obj87_Index, Obj87_MakeEmlds-Obj87_Index
00005A3E 0000 0000                  		dc.w Obj87_Animate-Obj87_Index,	Obj87_LookUp-Obj87_Index
00005A42 0000 0000                  		dc.w Obj87_ClrObjRam-Obj87_Index, Obj87_Animate-Obj87_Index
00005A46 0000 0000                  		dc.w Obj87_MakeLogo-Obj87_Index, Obj87_Animate-Obj87_Index
00005A4A 0000 0000                  		dc.w Obj87_Leap-Obj87_Index, Obj87_Animate-Obj87_Index
00005A4E                            ; ===========================================================================
00005A4E                            
00005A4E                            Obj87_Main:				; XREF: Obj87_Index
00005A4E 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00005A54 6700                       		beq.s	Obj87_Main2	; if yes, branch
00005A56 0628 0010 0025             		addi.b	#$10,$25(a0)	; else,	skip emerald sequence
00005A5C 317C 00D8 0030             		move.w	#$D8,$30(a0)
00005A62 4E75                       		rts	
00005A64                            ; ===========================================================================
00005A64                            
00005A64                            Obj87_Main2:				; XREF: Obj87_Main
00005A64 5428 0025                  		addq.b	#2,$25(a0)
00005A68 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
00005A70 317C 03E1 0002             		move.w	#$3E1,2(a0)
00005A76 117C 0004 0001             		move.b	#4,1(a0)
00005A7C 4228 0022                  		clr.b	$22(a0)
00005A80 117C 0002 0018             		move.b	#2,$18(a0)
00005A86 117C 0000 001A             		move.b	#0,$1A(a0)
00005A8C 317C 0050 0030             		move.w	#$50,$30(a0)	; set duration for Sonic to pause
00005A92                            
00005A92                            Obj87_MakeEmlds:			; XREF: Obj87_Index
00005A92 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
00005A96 6600                       		bne.s	Obj87_Wait
00005A98 5428 0025                  		addq.b	#2,$25(a0)
00005A9C 317C 0001 001C             		move.w	#1,$1C(a0)
00005AA2 11FC 0088 D400             		move.b	#$88,($FFFFD400).w ; load chaos	emeralds objects
00005AA8                            
00005AA8                            Obj87_Wait:
00005AA8 4E75                       		rts	
00005AAA                            ; ===========================================================================
00005AAA                            
00005AAA                            Obj87_LookUp:				; XREF: Obj87_Index
00005AAA 0C79 2000 00FF D43C        		cmpi.w	#$2000,($FFD43C).l
00005AB2 6600                       		bne.s	locret_5480
00005AB4 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; set level to	restart	(causes	flash)
00005ABA 317C 005A 0030             		move.w	#$5A,$30(a0)
00005AC0 5428 0025                  		addq.b	#2,$25(a0)
00005AC4                            
00005AC4                            locret_5480:
00005AC4 4E75                       		rts	
00005AC6                            ; ===========================================================================
00005AC6                            
00005AC6                            Obj87_ClrObjRam:			; XREF: Obj87_Index
00005AC6 5368 0030                  		subq.w	#1,$30(a0)
00005ACA 6600                       		bne.s	Obj87_Wait2
00005ACC 43F8 D400                  		lea	($FFFFD400).w,a1
00005AD0 323C 00FF                  		move.w	#$FF,d1
00005AD4                            
00005AD4                            Obj87_ClrLoop:
00005AD4 4299                       		clr.l	(a1)+
00005AD6 51C9 FFFC                  		dbf	d1,Obj87_ClrLoop ; clear the object RAM
00005ADA 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w
00005AE0 5428 0025                  		addq.b	#2,$25(a0)
00005AE4 117C 0001 001C             		move.b	#1,$1C(a0)
00005AEA 317C 003C 0030             		move.w	#$3C,$30(a0)
00005AF0                            
00005AF0                            Obj87_Wait2:
00005AF0 4E75                       		rts	
00005AF2                            ; ===========================================================================
00005AF2                            
00005AF2                            Obj87_MakeLogo:				; XREF: Obj87_Index
00005AF2 5368 0030                  		subq.w	#1,$30(a0)
00005AF6 6600                       		bne.s	Obj87_Wait3
00005AF8 5428 0025                  		addq.b	#2,$25(a0)
00005AFC 317C 00B4 0030             		move.w	#$B4,$30(a0)
00005B02 117C 0002 001C             		move.b	#2,$1C(a0)
00005B08 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
00005B0E                            
00005B0E                            Obj87_Wait3:
00005B0E 4E75                       		rts	
00005B10                            ; ===========================================================================
00005B10                            
00005B10                            Obj87_Animate:				; XREF: Obj87_Index
00005B10 43F9 0000 0000             		lea	(Ani_obj87).l,a1
00005B16 4EF9 0000 0000             		jmp	AnimateSprite
00005B1C                            ; ===========================================================================
00005B1C                            
00005B1C                            Obj87_Leap:				; XREF: Obj87_Index
00005B1C 5368 0030                  		subq.w	#1,$30(a0)
00005B20 6600                       		bne.s	Obj87_Wait4
00005B22 5428 0025                  		addq.b	#2,$25(a0)
00005B26 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
00005B2E 317C 03E1 0002             		move.w	#$3E1,2(a0)
00005B34 117C 0004 0001             		move.b	#4,1(a0)
00005B3A 4228 0022                  		clr.b	$22(a0)
00005B3E 117C 0002 0018             		move.b	#2,$18(a0)
00005B44 117C 0005 001A             		move.b	#5,$1A(a0)
00005B4A 117C 0002 001C             		move.b	#2,$1C(a0)	; use "leaping"	animation
00005B50 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
00005B56 60B8                       		bra.s	Obj87_Animate
00005B58                            ; ===========================================================================
00005B58                            
00005B58                            Obj87_Wait4:				; XREF: Obj87_Leap
00005B58 4E75                       		rts	
00005B5A                            ; ===========================================================================
00005B5A                            Ani_obj87:
00005B5A                            	include "_anim\obj87.asm"
00005B5A                            ; ---------------------------------------------------------------------------
00005B5A                            ; Animation script - Sonic on the ending sequence
00005B5A                            ; ---------------------------------------------------------------------------
00005B5A 0000                       		dc.w byte_551C-Ani_obj87
00005B5C 0000                       		dc.w byte_552A-Ani_obj87
00005B5E 0000                       		dc.w byte_5534-Ani_obj87
00005B60 0301 0001 0001 0001 0001+  byte_551C:	dc.b 3,	1, 0, 1, 0, 1, 0, 1, 0,	1, 0, 1, 2, $FA
00005B6E 0503 0403 0403 0403 FA00   byte_552A:	dc.b 5,	3, 4, 3, 4, 3, 4, 3, $FA, 0
00005B78 0305 0505 0607 FE01        byte_5534:	dc.b 3,	5, 5, 5, 6, 7, $FE, 1
00005B80                            		even
00005B80                            		even
00005B80                            
00005B80                            ; ===========================================================================
00005B80                            ; ---------------------------------------------------------------------------
00005B80                            ; Object 88 - chaos emeralds on	the ending sequence
00005B80                            ; ---------------------------------------------------------------------------
00005B80                            
00005B80                            Obj88:					; XREF: Obj_Index
00005B80 7000                       		moveq	#0,d0
00005B82 1028 0024                  		move.b	$24(a0),d0
00005B86 323B 0000                  		move.w	Obj88_Index(pc,d0.w),d1
00005B8A 4EBB 1000                  		jsr	Obj88_Index(pc,d1.w)
00005B8E 4EF9 0000 0000             		jmp	DisplaySprite
00005B94                            ; ===========================================================================
00005B94 0000                       Obj88_Index:	dc.w Obj88_Main-Obj88_Index
00005B96 0000                       		dc.w Obj88_Move-Obj88_Index
00005B98                            ; ===========================================================================
00005B98                            
00005B98                            Obj88_Main:				; XREF: Obj88_Index
00005B98 0C38 0002 D01A             		cmpi.b	#2,($FFFFD01A).w
00005B9E 6700                       		beq.s	Obj88_Main2
00005BA0 588F                       		addq.l	#4,sp
00005BA2 4E75                       		rts	
00005BA4                            ; ===========================================================================
00005BA4                            
00005BA4                            Obj88_Main2:				; XREF: Obj88_Main
00005BA4 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; match X position with Sonic
00005BAA 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0) ; match Y position	with Sonic
00005BB0 2248                       		movea.l	a0,a1
00005BB2 7600                       		moveq	#0,d3
00005BB4 7401                       		moveq	#1,d2
00005BB6 7205                       		moveq	#5,d1
00005BB8                            
00005BB8                            Obj88_MainLoop:
00005BB8 12BC 0088                  		move.b	#$88,(a1)	; load chaos emerald object
00005BBC 5429 0024                  		addq.b	#2,$24(a1)
00005BC0 237C 0000 0000 0004        		move.l	#Map_obj88,4(a1)
00005BC8 337C 03C5 0002             		move.w	#$3C5,2(a1)
00005BCE 137C 0004 0001             		move.b	#4,1(a1)
00005BD4 137C 0001 0018             		move.b	#1,$18(a1)
00005BDA 3368 0008 0038             		move.w	8(a0),$38(a1)
00005BE0 3368 000C 003A             		move.w	$C(a0),$3A(a1)
00005BE6 1342 001C                  		move.b	d2,$1C(a1)
00005BEA 1342 001A                  		move.b	d2,$1A(a1)
00005BEE 5202                       		addq.b	#1,d2
00005BF0 1343 0026                  		move.b	d3,$26(a1)
00005BF4 0603 002A                  		addi.b	#$2A,d3
00005BF8 43E9 0040                  		lea	$40(a1),a1
00005BFC 51C9 FFBA                  		dbf	d1,Obj88_MainLoop ; repeat 5 more times
00005C00                            
00005C00                            Obj88_Move:				; XREF: Obj88_Index
00005C00 3028 003E                  		move.w	$3E(a0),d0
00005C04 D168 0026                  		add.w	d0,$26(a0)
00005C08 1028 0026                  		move.b	$26(a0),d0
00005C0C 4EB9 0000 2D34             		jsr	(CalcSine).l
00005C12 7800                       		moveq	#0,d4
00005C14 1828 003C                  		move.b	$3C(a0),d4
00005C18 C3C4                       		muls.w	d4,d1
00005C1A E081                       		asr.l	#8,d1
00005C1C C1C4                       		muls.w	d4,d0
00005C1E E080                       		asr.l	#8,d0
00005C20 D268 0038                  		add.w	$38(a0),d1
00005C24 D068 003A                  		add.w	$3A(a0),d0
00005C28 3141 0008                  		move.w	d1,8(a0)
00005C2C 3140 000C                  		move.w	d0,$C(a0)
00005C30 0C68 2000 003C             		cmpi.w	#$2000,$3C(a0)
00005C36 6700                       		beq.s	loc_55FA
00005C38 0668 0020 003C             		addi.w	#$20,$3C(a0)
00005C3E                            
00005C3E                            loc_55FA:
00005C3E 0C68 2000 003E             		cmpi.w	#$2000,$3E(a0)
00005C44 6700                       		beq.s	loc_5608
00005C46 0668 0020 003E             		addi.w	#$20,$3E(a0)
00005C4C                            
00005C4C                            loc_5608:
00005C4C 0C68 0140 003A             		cmpi.w	#$140,$3A(a0)
00005C52 6700                       		beq.s	locret_5614
00005C54 5368 003A                  		subq.w	#1,$3A(a0)
00005C58                            
00005C58                            locret_5614:
00005C58 4E75                       		rts	
00005C5A                            ; ===========================================================================
00005C5A                            ; ---------------------------------------------------------------------------
00005C5A                            ; Object 89 - "SONIC THE HEDGEHOG" text	on the ending sequence
00005C5A                            ; ---------------------------------------------------------------------------
00005C5A                            
00005C5A                            Obj89:					; XREF: Obj_Index
00005C5A 7000                       		moveq	#0,d0
00005C5C 1028 0024                  		move.b	$24(a0),d0
00005C60 323B 0000                  		move.w	Obj89_Index(pc,d0.w),d1
00005C64 4EFB 1000                  		jmp	Obj89_Index(pc,d1.w)
00005C68                            ; ===========================================================================
00005C68 0000                       Obj89_Index:	dc.w Obj89_Main-Obj89_Index
00005C6A 0000                       		dc.w Obj89_Move-Obj89_Index
00005C6C 0000                       		dc.w Obj89_GotoCredits-Obj89_Index
00005C6E                            ; ===========================================================================
00005C6E                            
00005C6E                            Obj89_Main:				; XREF: Obj89_Index
00005C6E 5428 0024                  		addq.b	#2,$24(a0)
00005C72 317C FFE0 0008             		move.w	#-$20,8(a0)	; object starts	outside	the level boundary
00005C78 317C 00D8 000A             		move.w	#$D8,$A(a0)
00005C7E 217C 0000 0000 0004        		move.l	#Map_obj89,4(a0)
00005C86 317C 05C5 0002             		move.w	#$5C5,2(a0)
00005C8C 117C 0000 0001             		move.b	#0,1(a0)
00005C92 117C 0000 0018             		move.b	#0,$18(a0)
00005C98                            
00005C98                            Obj89_Move:				; XREF: Obj89_Index
00005C98 0C68 00C0 0008             		cmpi.w	#$C0,8(a0)	; has object reached $C0?
00005C9E 6700                       		beq.s	Obj89_Delay	; if yes, branch
00005CA0 0668 0010 0008             		addi.w	#$10,8(a0)	; move object to the right
00005CA6 4EB9 0000 0000             		jsr	DisplaySprite
00005CAC                            ; ===========================================================================
00005CAC                            
00005CAC                            Obj89_Delay:				; XREF: Obj89_Move
00005CAC 5428 0024                  		addq.b	#2,$24(a0)
00005CB0 317C 0078 0030             		move.w	#120,$30(a0)	; set duration for delay (2 seconds)
00005CB6                            
00005CB6                            Obj89_GotoCredits:			; XREF: Obj89_Index
00005CB6 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
00005CBA 6A00                       		bpl.s	Obj89_Display
00005CBC 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; exit to credits
00005CC2                            
00005CC2                            Obj89_Display:
00005CC2 4EB9 0000 0000             		jsr	DisplaySprite
00005CC8                            ; ===========================================================================
00005CC8                            ; ---------------------------------------------------------------------------
00005CC8                            ; Sprite mappings - Sonic on the ending	sequence
00005CC8                            ; ---------------------------------------------------------------------------
00005CC8                            Map_obj87:
00005CC8                            	include "_maps\obj87.asm"
00005CC8                            ; ---------------------------------------------------------------------------
00005CC8                            ; Sprite mappings - Sonic on the ending	sequence
00005CC8                            ; ---------------------------------------------------------------------------
00005CC8 0000 0000                  		dc.w byte_5690-Map_obj87, byte_569B-Map_obj87
00005CCC 0000 0000                  		dc.w byte_56AB-Map_obj87, byte_56B6-Map_obj87
00005CD0 0000 0000                  		dc.w byte_56C1-Map_obj87, byte_56CC-Map_obj87
00005CD4 0000 0000                  		dc.w byte_56DC-Map_obj87, byte_5700-Map_obj87
00005CD8 02                         byte_5690:	dc.b 2
00005CD9 EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8	; holding emeralds
00005CDE 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
00005CE3 03                         byte_569B:	dc.b 3
00005CE4 FC0D 0010 F0               		dc.b $FC, $D, 0, $10, $F0 ; holding emeralds (glowing)
00005CE9 EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8
00005CEE 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
00005CF3 02                         byte_56AB:	dc.b 2
00005CF4 EC09 0018 F8               		dc.b $EC, 9, 0,	$18, $F8 ; looking up
00005CF9 FC0E 001E F0               		dc.b $FC, $E, 0, $1E, $F0
00005CFE 02                         byte_56B6:	dc.b 2
00005CFF EC09 002A F8               		dc.b $EC, 9, 0,	$2A, $F8 ; confused
00005D04 FC0E 0030 F0               		dc.b $FC, $E, 0, $30, $F0
00005D09 02                         byte_56C1:	dc.b 2
00005D0A EC09 082A F0               		dc.b $EC, 9, 8,	$2A, $F0 ; confused #2
00005D0F FC0E 0830 F0               		dc.b $FC, $E, 8, $30, $F0
00005D14 03                         byte_56CC:	dc.b 3
00005D15 EC06 003C F0               		dc.b $EC, 6, 0,	$3C, $F0 ; leaping
00005D1A EC06 083C 00               		dc.b $EC, 6, 8,	$3C, 0
00005D1F 040D 0042 F0               		dc.b 4,	$D, 0, $42, $F0
00005D24 07                         byte_56DC:	dc.b 7
00005D25 B20C 004A F8               		dc.b $B2, $C, 0, $4A, $F8 ; leaping #2
00005D2A BA0F 004E F0               		dc.b $BA, $F, 0, $4E, $F0
00005D2F BA05 005E 10               		dc.b $BA, 5, 0,	$5E, $10
00005D34 CA02 0062 10               		dc.b $CA, 2, 0,	$62, $10
00005D39 DA0C 0065 F0               		dc.b $DA, $C, 0, $65, $F0
00005D3E E208 0069 F8               		dc.b $E2, 8, 0,	$69, $F8
00005D43 EA05 006C F8               		dc.b $EA, 5, 0,	$6C, $F8
00005D48 18                         byte_5700:	dc.b $18
00005D49 800F 0070 F8               		dc.b $80, $F, 0, $70, $F8 ; leaping #3
00005D4E 900B 0080 E0               		dc.b $90, $B, 0, $80, $E0
00005D53 900B 008C 18               		dc.b $90, $B, 0, $8C, $18
00005D58 980B 0098 30               		dc.b $98, $B, 0, $98, $30
00005D5D A00F 00A4 58               		dc.b $A0, $F, 0, $A4, $58
00005D62 8800 00B4 F0               		dc.b $88, 0, 0,	$B4, $F0
00005D67 8005 00B5 18               		dc.b $80, 5, 0,	$B5, $18
00005D6C A00F 00B9 F8               		dc.b $A0, $F, 0, $B9, $F8
00005D71 B00B 00C9 E0               		dc.b $B0, $B, 0, $C9, $E0
00005D76 B80F 00D5 38               		dc.b $B8, $F, 0, $D5, $38
00005D7B A805 00E5 48               		dc.b $A8, 5, 0,	$E5, $48
00005D80 C002 00E9 58               		dc.b $C0, 2, 0,	$E9, $58
00005D85 C00F 00EC F8               		dc.b $C0, $F, 0, $EC, $F8
00005D8A B80F 00FC 18               		dc.b $B8, $F, 0, $FC, $18
00005D8F B008 010C 18               		dc.b $B0, 8, 1,	$C, $18
00005D94 D80D 010F 30               		dc.b $D8, $D, 1, $F, $30
00005D99 D808 0117 18               		dc.b $D8, 8, 1,	$17, $18
00005D9E D80F 011A D8               		dc.b $D8, $F, 1, $1A, $D8
00005DA3 E00D 012A F8               		dc.b $E0, $D, 1, $2A, $F8
00005DA8 E000 0132 28               		dc.b $E0, 0, 1,	$32, $28
00005DAD D004 0133 E0               		dc.b $D0, 4, 1,	$33, $E0
00005DB2 E805 0135 C8               		dc.b $E8, 5, 1,	$35, $C8
00005DB7 F80C 0139 C8               		dc.b $F8, $C, 1, $39, $C8
00005DBC F006 013D F8               		dc.b $F0, 6, 1,	$3D, $F8
00005DC2 00                         		even
00005DC2 00                         		even
00005DC2                            
00005DC2                            ; ---------------------------------------------------------------------------
00005DC2                            ; Sprite mappings - chaos emeralds on the ending sequence
00005DC2                            ; ---------------------------------------------------------------------------
00005DC2                            Map_obj88:
00005DC2                            	include "_maps\obj88.asm"
00005DC2                            ; ---------------------------------------------------------------------------
00005DC2                            ; Sprite mappings - chaos emeralds on the ending sequence
00005DC2                            ; ---------------------------------------------------------------------------
00005DC2 0000 0000                  		dc.w byte_5788-Map_obj88, byte_578E-Map_obj88
00005DC6 0000 0000                  		dc.w byte_5794-Map_obj88, byte_579A-Map_obj88
00005DCA 0000 0000                  		dc.w byte_57A0-Map_obj88, byte_57A6-Map_obj88
00005DCE 0000                       		dc.w byte_57AC-Map_obj88
00005DD0 01                         byte_5788:	dc.b 1
00005DD1 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00005DD6 01                         byte_578E:	dc.b 1
00005DD7 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
00005DDC 01                         byte_5794:	dc.b 1
00005DDD F805 4010 F8               		dc.b $F8, 5, $40, $10, $F8
00005DE2 01                         byte_579A:	dc.b 1
00005DE3 F805 2018 F8               		dc.b $F8, 5, $20, $18, $F8
00005DE8 01                         byte_57A0:	dc.b 1
00005DE9 F805 4014 F8               		dc.b $F8, 5, $40, $14, $F8
00005DEE 01                         byte_57A6:	dc.b 1
00005DEF F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
00005DF4 01                         byte_57AC:	dc.b 1
00005DF5 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
00005DFA                            		even
00005DFA                            		even
00005DFA                            
00005DFA                            ; ---------------------------------------------------------------------------
00005DFA                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
00005DFA                            ; ---------------------------------------------------------------------------
00005DFA                            Map_obj89:
00005DFA                            	include "_maps\obj89.asm"
00005DFA                            ; ---------------------------------------------------------------------------
00005DFA                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
00005DFA                            ; ---------------------------------------------------------------------------
00005DFA 0000                       		dc.w byte_57B4-Map_obj89
00005DFC 03                         byte_57B4:	dc.b 3
00005DFD F00F 0000 D0               		dc.b $F0, $F, 0, 0, $D0
00005E02 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
00005E07 F00F 0020 10               		dc.b $F0, $F, 0, $20, $10
00005E0C                            		even
00005E0C                            		even
00005E0C                            
00005E0C                            ; ===========================================================================
00005E0C                            ; ---------------------------------------------------------------------------
00005E0C                            ; Credits ending sequence
00005E0C                            ; ---------------------------------------------------------------------------
00005E0C                            
00005E0C                            Credits:				; XREF: GameModeArray
00005E0C 6100 B9CE                  		bsr.w	ClearPLC
00005E10 6100 C20A                  		bsr.w	Pal_FadeFrom
00005E14 4DF9 00C0 0004             		lea	($C00004).l,a6
00005E1A 3CBC 8004                  		move.w	#$8004,(a6)
00005E1E 3CBC 8230                  		move.w	#$8230,(a6)
00005E22 3CBC 8407                  		move.w	#$8407,(a6)
00005E26 3CBC 9001                  		move.w	#$9001,(a6)
00005E2A 3CBC 9200                  		move.w	#$9200,(a6)
00005E2E 3CBC 8B03                  		move.w	#$8B03,(a6)
00005E32 3CBC 8720                  		move.w	#$8720,(a6)
00005E36 4238 F64E                  		clr.b	($FFFFF64E).w
00005E3A 6100 B686                  		bsr.w	ClearScreen
00005E3E 43F8 D000                  		lea	($FFFFD000).w,a1
00005E42 7000                       		moveq	#0,d0
00005E44 323C 07FF                  		move.w	#$7FF,d1
00005E48                            
00005E48                            Cred_ClrObjRam:
00005E48 22C0                       		move.l	d0,(a1)+
00005E4A 51C9 FFFC                  		dbf	d1,Cred_ClrObjRam ; clear object RAM
00005E4E                            
00005E4E 23FC 7400 0002 00C0 0004   		move.l	#$74000002,($C00004).l
00005E58 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load credits alphabet patterns
00005E5E 6100 B7DE                  		bsr.w	NemDec
00005E62 43F8 FB80                  		lea	($FFFFFB80).w,a1
00005E66 7000                       		moveq	#0,d0
00005E68 323C 001F                  		move.w	#$1F,d1
00005E6C                            
00005E6C                            Cred_ClrPallet:
00005E6C 22C0                       		move.l	d0,(a1)+
00005E6E 51C9 FFFC                  		dbf	d1,Cred_ClrPallet ; fill pallet	with black ($0000)
00005E72                            
00005E72 7003                       		moveq	#3,d0
00005E74 6100 C450                  		bsr.w	PalLoad1	; load Sonic's pallet
00005E78 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load credits object
00005E7E 4EB9 0000 0000             		jsr	ObjectsLoad
00005E84 4EB9 0000 0000             		jsr	BuildSprites
00005E8A 6100 0000                  		bsr.w	EndingDemoLoad
00005E8E 7000                       		moveq	#0,d0
00005E90 1038 FE10                  		move.b	($FFFFFE10).w,d0
00005E94 E948                       		lsl.w	#4,d0
00005E96 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2 ;	load block mappings etc
00005E9C 45F2 0000                  		lea	(a2,d0.w),a2
00005EA0 7000                       		moveq	#0,d0
00005EA2 1012                       		move.b	(a2),d0
00005EA4 6700                       		beq.s	loc_5862
00005EA6 6100 B8D6                  		bsr.w	LoadPLC		; load level patterns
00005EAA                            
00005EAA                            loc_5862:
00005EAA 7001                       		moveq	#1,d0
00005EAC 6100 B8D0                  		bsr.w	LoadPLC		; load standard	level patterns
00005EB0 31FC 0078 F614             		move.w	#120,($FFFFF614).w ; display a credit for 2 seconds
00005EB6 6100 C0BA                  		bsr.w	Pal_FadeTo
00005EBA                            
00005EBA                            Cred_WaitLoop:
00005EBA 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00005EC0 6100 CE40                  		bsr.w	DelayProgram
00005EC4 6100 B924                  		bsr.w	RunPLC_RAM
00005EC8 4A78 F614                  		tst.w	($FFFFF614).w	; have 2 seconds elapsed?
00005ECC 66EC                       		bne.s	Cred_WaitLoop	; if not, branch
00005ECE 4AB8 F680                  		tst.l	($FFFFF680).w	; have level gfx finished decompressing?
00005ED2 66E6                       		bne.s	Cred_WaitLoop	; if not, branch
00005ED4 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	the credits finished?
00005EDA 6700 0000                  		beq.w	TryAgainEnd	; if yes, branch
00005EDE 4E75                       		rts	
00005EE0                            
00005EE0                            ; ---------------------------------------------------------------------------
00005EE0                            ; Ending sequence demo loading subroutine
00005EE0                            ; ---------------------------------------------------------------------------
00005EE0                            
00005EE0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005EE0                            
00005EE0                            
00005EE0                            EndingDemoLoad:				; XREF: Credits
00005EE0 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00005EE4 0240 000F                  		andi.w	#$F,d0
00005EE8 D040                       		add.w	d0,d0
00005EEA 303B 0000                  		move.w	EndDemo_Levels(pc,d0.w),d0 ; load level	array
00005EEE 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level from level	array
00005EF2 5278 FFF4                  		addq.w	#1,($FFFFFFF4).w
00005EF6 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	credits	finished?
00005EFC 6400                       		bcc.s	EndDemo_Exit	; if yes, branch
00005EFE 31FC 8001 FFF0             		move.w	#$8001,($FFFFFFF0).w ; force demo mode
00005F04 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set game mode to 08 (demo)
00005F0A 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
00005F10 7000                       		moveq	#0,d0
00005F12 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00005F16 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00005F1A 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00005F1E 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost counter
00005F22 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w ; is SLZ demo running?
00005F28 6600                       		bne.s	EndDemo_Exit	; if not, branch
00005F2A 43F9 0000 0000             		lea	(EndDemo_LampVar).l,a1 ; load lamppost variables
00005F30 45F8 FE30                  		lea	($FFFFFE30).w,a2
00005F34 303C 0008                  		move.w	#8,d0
00005F38                            
00005F38                            EndDemo_LampLoad:
00005F38 24D9                       		move.l	(a1)+,(a2)+
00005F3A 51C8 FFFC                  		dbf	d0,EndDemo_LampLoad
00005F3E                            
00005F3E                            EndDemo_Exit:
00005F3E 4E75                       		rts	
00005F40                            ; End of function EndingDemoLoad
00005F40                            
00005F40                            ; ===========================================================================
00005F40                            ; ---------------------------------------------------------------------------
00005F40                            ; Levels used in the end sequence demos
00005F40                            ; ---------------------------------------------------------------------------
00005F40                            EndDemo_Levels:	incbin	misc\dm_ord2.bin
00005F50                            
00005F50                            ; ---------------------------------------------------------------------------
00005F50                            ; Lamppost variables in the end sequence demo (Star Light Zone)
00005F50                            ; ---------------------------------------------------------------------------
00005F50                            EndDemo_LampVar:
00005F50 0101                       		dc.b 1,	1		; XREF: EndingDemoLoad
00005F52 0A00 062C 000D             		dc.w $A00, $62C, $D
00005F58 0000 0000                  		dc.l 0
00005F5C 0000                       		dc.b 0,	0
00005F5E 0800 0957 05CC 04AB 03A6+  		dc.w $800, $957, $5CC, $4AB, $3A6, 0, $28C, 0, 0, $308
00005F72 0101                       		dc.b 1,	1
00005F74                            ; ===========================================================================
00005F74                            ; ---------------------------------------------------------------------------
00005F74                            ; "TRY AGAIN" and "END"	screens
00005F74                            ; ---------------------------------------------------------------------------
00005F74                            
00005F74                            TryAgainEnd:				; XREF: Credits
00005F74 6100 B866                  		bsr.w	ClearPLC
00005F78 6100 C0A2                  		bsr.w	Pal_FadeFrom
00005F7C 4DF9 00C0 0004             		lea	($C00004).l,a6
00005F82 3CBC 8004                  		move.w	#$8004,(a6)
00005F86 3CBC 8230                  		move.w	#$8230,(a6)
00005F8A 3CBC 8407                  		move.w	#$8407,(a6)
00005F8E 3CBC 9001                  		move.w	#$9001,(a6)
00005F92 3CBC 9200                  		move.w	#$9200,(a6)
00005F96 3CBC 8B03                  		move.w	#$8B03,(a6)
00005F9A 3CBC 8720                  		move.w	#$8720,(a6)
00005F9E 4238 F64E                  		clr.b	($FFFFF64E).w
00005FA2 6100 B51E                  		bsr.w	ClearScreen
00005FA6 43F8 D000                  		lea	($FFFFD000).w,a1
00005FAA 7000                       		moveq	#0,d0
00005FAC 323C 07FF                  		move.w	#$7FF,d1
00005FB0                            
00005FB0                            TryAg_ClrObjRam:
00005FB0 22C0                       		move.l	d0,(a1)+
00005FB2 51C9 FFFC                  		dbf	d1,TryAg_ClrObjRam ; clear object RAM
00005FB6                            
00005FB6 701D                       		moveq	#$1D,d0
00005FB8 6100 B930                  		bsr.w	RunPLC_ROM	; load "TRY AGAIN" or "END" patterns
00005FBC 43F8 FB80                  		lea	($FFFFFB80).w,a1
00005FC0 7000                       		moveq	#0,d0
00005FC2 323C 001F                  		move.w	#$1F,d1
00005FC6                            
00005FC6                            TryAg_ClrPallet:
00005FC6 22C0                       		move.l	d0,(a1)+
00005FC8 51C9 FFFC                  		dbf	d1,TryAg_ClrPallet ; fill pallet with black ($0000)
00005FCC                            
00005FCC 7013                       		moveq	#$13,d0
00005FCE 6100 C2F6                  		bsr.w	PalLoad1	; load ending pallet
00005FD2 4278 FBC0                  		clr.w	($FFFFFBC0).w
00005FD6 11FC 008B D080             		move.b	#$8B,($FFFFD080).w ; load Eggman object
00005FDC 4EB9 0000 0000             		jsr	ObjectsLoad
00005FE2 4EB9 0000 0000             		jsr	BuildSprites
00005FE8 31FC 0708 F614             		move.w	#1800,($FFFFF614).w ; show screen for 30 seconds
00005FEE 6100 BF82                  		bsr.w	Pal_FadeTo
00005FF2                            
00005FF2                            ; ---------------------------------------------------------------------------
00005FF2                            ; "TRY AGAIN" and "END"	screen main loop
00005FF2                            ; ---------------------------------------------------------------------------
00005FF2                            TryAg_MainLoop:
00005FF2 6100 B5B2                  		bsr.w	PauseGame
00005FF6 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00005FFC 6100 CD04                  		bsr.w	DelayProgram
00006000 4EB9 0000 0000             		jsr	ObjectsLoad
00006006 4EB9 0000 0000             		jsr	BuildSprites
0000600C 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
00006012 6600                       		bne.s	TryAg_Exit	; if yes, branch
00006014 4A78 F614                  		tst.w	($FFFFF614).w	; has 30 seconds elapsed?
00006018 6700                       		beq.s	TryAg_Exit	; if yes, branch
0000601A 0C38 001C F600             		cmpi.b	#$1C,($FFFFF600).w
00006020 67D0                       		beq.s	TryAg_MainLoop
00006022                            
00006022                            TryAg_Exit:
00006022 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00006028 4E75                       		rts	
0000602A                            
0000602A                            ; ===========================================================================
0000602A                            ; ---------------------------------------------------------------------------
0000602A                            ; Object 8B - Eggman on "TRY AGAIN" and "END"	screens
0000602A                            ; ---------------------------------------------------------------------------
0000602A                            
0000602A                            Obj8B:					; XREF: Obj_Index
0000602A 7000                       		moveq	#0,d0
0000602C 1028 0024                  		move.b	$24(a0),d0
00006030 323B 0000                  		move.w	Obj8B_Index(pc,d0.w),d1
00006034 4EBB 1000                  		jsr	Obj8B_Index(pc,d1.w)
00006038 4EF9 0000 0000             		jmp	DisplaySprite
0000603E                            ; ===========================================================================
0000603E 0000                       Obj8B_Index:	dc.w Obj8B_Main-Obj8B_Index
00006040 0000                       		dc.w Obj8B_Animate-Obj8B_Index
00006042 0000                       		dc.w Obj8B_Juggle-Obj8B_Index
00006044 0000                       		dc.w loc_5A8E-Obj8B_Index
00006046                            ; ===========================================================================
00006046                            
00006046                            Obj8B_Main:				; XREF: Obj8B_Index
00006046 5428 0024                  		addq.b	#2,$24(a0)
0000604A 317C 0120 0008             		move.w	#$120,8(a0)
00006050 317C 00F4 000A             		move.w	#$F4,$A(a0)
00006056 217C 0000 0000 0004        		move.l	#Map_obj8B,4(a0)
0000605E 317C 03E1 0002             		move.w	#$3E1,2(a0)
00006064 117C 0000 0001             		move.b	#0,1(a0)
0000606A 117C 0002 0018             		move.b	#2,$18(a0)
00006070 117C 0002 001C             		move.b	#2,$1C(a0)	; use "END" animation
00006076 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
0000607C 6700                       		beq.s	Obj8B_Animate	; if yes, branch
0000607E 11FC 008A D0C0             		move.b	#$8A,($FFFFD0C0).w ; load credits object
00006084 31FC 0009 FFF4             		move.w	#9,($FFFFFFF4).w ; use "TRY AGAIN" text
0000608A 11FC 008C D800             		move.b	#$8C,($FFFFD800).w ; load emeralds object on "TRY AGAIN" screen
00006090 117C 0000 001C             		move.b	#0,$1C(a0)	; use "TRY AGAIN" animation
00006096                            
00006096                            Obj8B_Animate:				; XREF: Obj8B_Index
00006096 43F9 0000 0000             		lea	(Ani_obj8B).l,a1
0000609C 4EF9 0000 0000             		jmp	AnimateSprite
000060A2                            ; ===========================================================================
000060A2                            
000060A2                            Obj8B_Juggle:				; XREF: Obj8B_Index
000060A2 5428 0024                  		addq.b	#2,$24(a0)
000060A6 7002                       		moveq	#2,d0
000060A8 0828 0000 001C             		btst	#0,$1C(a0)
000060AE 6700                       		beq.s	loc_5A6A
000060B0 4440                       		neg.w	d0
000060B2                            
000060B2                            loc_5A6A:
000060B2 43F8 D800                  		lea	($FFFFD800).w,a1
000060B6 7205                       		moveq	#5,d1
000060B8                            
000060B8                            loc_5A70:
000060B8 1340 003E                  		move.b	d0,$3E(a1)
000060BC 3400                       		move.w	d0,d2
000060BE E742                       		asl.w	#3,d2
000060C0 D529 0026                  		add.b	d2,$26(a1)
000060C4 43E9 0040                  		lea	$40(a1),a1
000060C8 51C9 FFEE                  		dbf	d1,loc_5A70
000060CC 5228 001A                  		addq.b	#1,$1A(a0)
000060D0 317C 0070 0030             		move.w	#112,$30(a0)
000060D6                            
000060D6                            loc_5A8E:				; XREF: Obj8B_Index
000060D6 5368 0030                  		subq.w	#1,$30(a0)
000060DA 6A00                       		bpl.s	locret_5AA0
000060DC 0868 0000 001C             		bchg	#0,$1C(a0)
000060E2 117C 0002 0024             		move.b	#2,$24(a0)
000060E8                            
000060E8                            locret_5AA0:
000060E8 4E75                       		rts	
000060EA                            ; ===========================================================================
000060EA                            Ani_obj8B:
000060EA                            	include "_anim\obj8B.asm"
000060EA                            ; ---------------------------------------------------------------------------
000060EA                            ; Animation script - Eggman on the "TRY AGAIN" and "END" screens
000060EA                            ; ---------------------------------------------------------------------------
000060EA 0000                       		dc.w byte_5AA8-Ani_obj8B
000060EC 0000                       		dc.w byte_5AAC-Ani_obj8B
000060EE 0000                       		dc.w byte_5AB0-Ani_obj8B
000060F0 0500 FC01                  byte_5AA8:	dc.b 5,	0, $FC,	1
000060F4 0502 FC03                  byte_5AAC:	dc.b 5,	2, $FC,	3
000060F8 0704 0506 0504 0506 0504+  byte_5AB0:	dc.b 7,	4, 5, 6, 5, 4, 5, 6, 5,	4, 5, 6, 5, 7, 5, 6, 5,	$FF
0000610A                            		even
0000610A                            		even
0000610A                            
0000610A                            ; ===========================================================================
0000610A                            ; ---------------------------------------------------------------------------
0000610A                            ; Object 8C - chaos emeralds on	the "TRY AGAIN"	screen
0000610A                            ; ---------------------------------------------------------------------------
0000610A                            
0000610A                            Obj8C:					; XREF: Obj_Index
0000610A 7000                       		moveq	#0,d0
0000610C 1028 0024                  		move.b	$24(a0),d0
00006110 323B 0000                  		move.w	Obj8C_Index(pc,d0.w),d1
00006114 4EBB 1000                  		jsr	Obj8C_Index(pc,d1.w)
00006118 4EF9 0000 0000             		jmp	DisplaySprite
0000611E                            ; ===========================================================================
0000611E 0000                       Obj8C_Index:	dc.w Obj8C_Main-Obj8C_Index
00006120 0000                       		dc.w Obj8C_Move-Obj8C_Index
00006122                            ; ===========================================================================
00006122                            
00006122                            Obj8C_Main:				; XREF: Obj8C_Index
00006122 2248                       		movea.l	a0,a1
00006124 7400                       		moveq	#0,d2
00006126 7600                       		moveq	#0,d3
00006128 7205                       		moveq	#5,d1
0000612A 9238 FE57                  		sub.b	($FFFFFE57).w,d1
0000612E                            
0000612E                            Obj8C_MakeEms:				; XREF: loc_5B42
0000612E 12BC 008C                  		move.b	#$8C,(a1)	; load emerald object
00006132 5429 0024                  		addq.b	#2,$24(a1)
00006136 237C 0000 5DC2 0004        		move.l	#Map_obj88,4(a1)
0000613E 337C 03C5 0002             		move.w	#$3C5,2(a1)
00006144 137C 0000 0001             		move.b	#0,1(a1)
0000614A 137C 0001 0018             		move.b	#1,$18(a1)
00006150 337C 0104 0008             		move.w	#$104,8(a1)
00006156 337C 0120 0038             		move.w	#$120,$38(a1)
0000615C 337C 00EC 000A             		move.w	#$EC,$A(a1)
00006162 3369 000A 003A             		move.w	$A(a1),$3A(a1)
00006168 137C 001C 003C             		move.b	#$1C,$3C(a1)
0000616E 47F8 FE58                  		lea	($FFFFFE58).w,a3
00006172                            
00006172                            Obj8C_ChkEms:
00006172 7000                       		moveq	#0,d0
00006174 1038 FE57                  		move.b	($FFFFFE57).w,d0
00006178 5340                       		subq.w	#1,d0
0000617A 6500                       		bcs.s	loc_5B42
0000617C                            
0000617C                            Obj8C_ChkEmLoop:
0000617C B433 0000                  		cmp.b	(a3,d0.w),d2
00006180 6600                       		bne.s	loc_5B3E
00006182 5202                       		addq.b	#1,d2
00006184 60EC                       		bra.s	Obj8C_ChkEms
00006186                            ; ===========================================================================
00006186                            
00006186                            loc_5B3E:
00006186 51C8 FFF4                  		dbf	d0,Obj8C_ChkEmLoop ; checks which emeralds you have
0000618A                            
0000618A                            loc_5B42:
0000618A 1342 001A                  		move.b	d2,$1A(a1)
0000618E 5229 001A                  		addq.b	#1,$1A(a1)
00006192 5202                       		addq.b	#1,d2
00006194 137C 0080 0026             		move.b	#$80,$26(a1)
0000619A 1343 001E                  		move.b	d3,$1E(a1)
0000619E 1343 001F                  		move.b	d3,$1F(a1)
000061A2 0643 000A                  		addi.w	#$A,d3
000061A6 43E9 0040                  		lea	$40(a1),a1
000061AA 51C9 FF82                  		dbf	d1,Obj8C_MakeEms
000061AE                            
000061AE                            Obj8C_Move:				; XREF: Obj8C_Index
000061AE 4A68 003E                  		tst.w	$3E(a0)
000061B2 6700                       		beq.s	locret_5BBA
000061B4 4A28 001E                  		tst.b	$1E(a0)
000061B8 6700                       		beq.s	loc_5B78
000061BA 5328 001E                  		subq.b	#1,$1E(a0)
000061BE 6600                       		bne.s	loc_5B80
000061C0                            
000061C0                            loc_5B78:
000061C0 3028 003E                  		move.w	$3E(a0),d0
000061C4 D168 0026                  		add.w	d0,$26(a0)
000061C8                            
000061C8                            loc_5B80:
000061C8 1028 0026                  		move.b	$26(a0),d0
000061CC 6700                       		beq.s	loc_5B8C
000061CE 0C00 0080                  		cmpi.b	#$80,d0
000061D2 6600                       		bne.s	loc_5B96
000061D4                            
000061D4                            loc_5B8C:
000061D4 4268 003E                  		clr.w	$3E(a0)
000061D8 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
000061DE                            
000061DE                            loc_5B96:
000061DE 4EB9 0000 2D34             		jsr	(CalcSine).l
000061E4 7800                       		moveq	#0,d4
000061E6 1828 003C                  		move.b	$3C(a0),d4
000061EA C3C4                       		muls.w	d4,d1
000061EC E081                       		asr.l	#8,d1
000061EE C1C4                       		muls.w	d4,d0
000061F0 E080                       		asr.l	#8,d0
000061F2 D268 0038                  		add.w	$38(a0),d1
000061F6 D068 003A                  		add.w	$3A(a0),d0
000061FA 3141 0008                  		move.w	d1,8(a0)
000061FE 3140 000A                  		move.w	d0,$A(a0)
00006202                            
00006202                            locret_5BBA:
00006202 4E75                       		rts	
00006204                            ; ===========================================================================
00006204                            ; ---------------------------------------------------------------------------
00006204                            ; Sprite mappings - Eggman on	the "TRY AGAIN"	and "END" screens
00006204                            ; ---------------------------------------------------------------------------
00006204                            Map_obj8B:
00006204                            	include "_maps\obj8B.asm"
00006204                            ; ---------------------------------------------------------------------------
00006204                            ; Sprite mappings - Robotnik on	the "TRY AGAIN"	and "END" screens
00006204                            ; ---------------------------------------------------------------------------
00006204 0000 0000                  		dc.w byte_5BCC-Map_obj8B, byte_5BF5-Map_obj8B
00006208 0000 0000                  		dc.w byte_5C1E-Map_obj8B, byte_5C47-Map_obj8B
0000620C 0000 0000                  		dc.w byte_5C70-Map_obj8B, byte_5CAD-Map_obj8B
00006210 0000 0000                  		dc.w byte_5CE0-Map_obj8B, byte_5D13-Map_obj8B
00006214 08                         byte_5BCC:	dc.b 8
00006215 E905 0000 F0               		dc.b $E9, 5, 0,	0, $F0
0000621A F90C 0004 E0               		dc.b $F9, $C, 0, 4, $E0
0000621F E904 0008 00               		dc.b $E9, 4, 0,	8, 0
00006224 F10D 000A 00               		dc.b $F1, $D, 0, $A, 0
00006229 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
0000622E 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00006233 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006238 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
0000623D 08                         byte_5BF5:	dc.b 8
0000623E E80D 0012 E0               		dc.b $E8, $D, 0, $12, $E0
00006243 F808 001A E8               		dc.b $F8, 8, 0,	$1A, $E8
00006248 E805 0800 00               		dc.b $E8, 5, 8,	0, 0
0000624D F80C 0804 00               		dc.b $F8, $C, 8, 4, 0
00006252 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
00006257 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
0000625C 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006261 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006266 08                         byte_5C1E:	dc.b 8
00006267 E904 0808 F0               		dc.b $E9, 4, 8,	8, $F0
0000626C F10D 080A E0               		dc.b $F1, $D, 8, $A, $E0
00006271 E905 0800 00               		dc.b $E9, 5, 8,	0, 0
00006276 F90C 0804 00               		dc.b $F9, $C, 8, 4, 0
0000627B 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00006280 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00006285 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
0000628A 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
0000628F 08                         byte_5C47:	dc.b 8
00006290 E805 0000 F0               		dc.b $E8, 5, 0,	0, $F0
00006295 F80C 0004 E0               		dc.b $F8, $C, 0, 4, $E0
0000629A E80D 0812 00               		dc.b $E8, $D, 8, $12, 0
0000629F F808 081A 00               		dc.b $F8, 8, 8,	$1A, 0
000062A4 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
000062A9 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
000062AE 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
000062B3 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
000062B8 0C                         byte_5C70:	dc.b $C
000062B9 ED0A 002B E8               		dc.b $ED, $A, 0, $2B, $E8
000062BE F500 0034 E0               		dc.b $F5, 0, 0,	$34, $E0
000062C3 0504 0035 F0               		dc.b 5,	4, 0, $35, $F0
000062C8 0D08 0037 E8               		dc.b $D, 8, 0, $37, $E8
000062CD ED0A 082B 00               		dc.b $ED, $A, 8, $2B, 0
000062D2 F500 0834 18               		dc.b $F5, 0, 8,	$34, $18
000062D7 0504 0835 00               		dc.b 5,	4, 8, $35, 0
000062DC 0D08 0837 00               		dc.b $D, 8, 8, $37, 0
000062E1 100D 0073 E0               		dc.b $10, $D, 0, $73, $E0
000062E6 100D 007B 00               		dc.b $10, $D, 0, $7B, 0
000062EB 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
000062F0 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
000062F5 0A                         byte_5CAD:	dc.b $A
000062F6 D207 003A F0               		dc.b $D2, 7, 0,	$3A, $F0
000062FB DA00 0042 E8               		dc.b $DA, 0, 0,	$42, $E8
00006300 F207 0043 F0               		dc.b $F2, 7, 0,	$43, $F0
00006305 D207 083A 00               		dc.b $D2, 7, 8,	$3A, 0
0000630A DA00 0842 10               		dc.b $DA, 0, 8,	$42, $10
0000630F F207 0843 00               		dc.b $F2, 7, 8,	$43, 0
00006314 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00006319 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
0000631E 1C0C 005F E0               		dc.b $1C, $C, 0, $5F, $E0
00006323 1C0C 085F 00               		dc.b $1C, $C, 8, $5F, 0
00006328 0A                         byte_5CE0:	dc.b $A
00006329 C40B 004B E8               		dc.b $C4, $B, 0, $4B, $E8
0000632E E408 0057 E8               		dc.b $E4, 8, 0,	$57, $E8
00006333 EC00 005A F0               		dc.b $EC, 0, 0,	$5A, $F0
00006338 C40B 084B 00               		dc.b $C4, $B, 8, $4B, 0
0000633D E408 0857 00               		dc.b $E4, 8, 8,	$57, 0
00006342 EC00 085A 08               		dc.b $EC, 0, 8,	$5A, 8
00006347 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
0000634C 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
00006351 1C0C 0063 E0               		dc.b $1C, $C, 0, $63, $E0
00006356 1C0C 0863 00               		dc.b $1C, $C, 8, $63, 0
0000635B 0C                         byte_5D13:	dc.b $C
0000635C F40A 002B E8               		dc.b $F4, $A, 0, $2B, $E8
00006361 FC00 0034 E0               		dc.b $FC, 0, 0,	$34, $E0
00006366 0C04 0035 F0               		dc.b $C, 4, 0, $35, $F0
0000636B 1408 0037 E8               		dc.b $14, 8, 0,	$37, $E8
00006370 F40A 082B 00               		dc.b $F4, $A, 8, $2B, 0
00006375 FC00 0834 18               		dc.b $FC, 0, 8,	$34, $18
0000637A 0C04 0835 00               		dc.b $C, 4, 8, $35, 0
0000637F 1408 0837 00               		dc.b $14, 8, 8,	$37, 0
00006384 180C 0083 E0               		dc.b $18, $C, 0, $83, $E0
00006389 180C 0087 00               		dc.b $18, $C, 0, $87, 0
0000638E 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
00006393 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
00006398                            		even
00006398                            		even
00006398                            
00006398                            ; ---------------------------------------------------------------------------
00006398                            ; Ending sequence demos
00006398                            ; ---------------------------------------------------------------------------
00006398                            Demo_EndGHZ1:	incbin	demodata\e_ghz1.bin
000063C6                            		even
000063C6                            Demo_EndMZ:	incbin	demodata\e_mz.bin
00006406                            		even
00006406                            Demo_EndSYZ:	incbin	demodata\e_syz.bin
00006436                            		even
00006436                            Demo_EndLZ:	incbin	demodata\e_lz.bin
00006466                            		even
00006466                            Demo_EndSLZ:	incbin	demodata\e_slz.bin
00006486                            		even
00006486                            Demo_EndSBZ1:	incbin	demodata\e_sbz1.bin
000064A6                            		even
000064A6                            Demo_EndSBZ2:	incbin	demodata\e_sbz2.bin
000064D6                            		even
000064D6                            Demo_EndGHZ2:	incbin	demodata\e_ghz2.bin
00006506                            		even
00006506                            
00006506                            ; ---------------------------------------------------------------------------
00006506                            ; Subroutine to	load level boundaries and start	locations
00006506                            ; ---------------------------------------------------------------------------
00006506                            
00006506                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006506                            
00006506                            
00006506                            LevelSizeLoad:				; XREF: TitleScreen; Level; EndingSequence
00006506 7000                       		moveq	#0,d0
00006508 11C0 F740                  		move.b	d0,($FFFFF740).w
0000650C 11C0 F741                  		move.b	d0,($FFFFF741).w
00006510 11C0 F746                  		move.b	d0,($FFFFF746).w
00006514 11C0 F748                  		move.b	d0,($FFFFF748).w
00006518 11C0 F742                  		move.b	d0,($FFFFF742).w
0000651C 3038 FE10                  		move.w	($FFFFFE10).w,d0
00006520 ED08                       		lsl.b	#6,d0
00006522 E848                       		lsr.w	#4,d0
00006524 3200                       		move.w	d0,d1
00006526 D040                       		add.w	d0,d0
00006528 D041                       		add.w	d1,d0
0000652A 41FB 0000                  		lea	LevelSizeArray(pc,d0.w),a0 ; load level	boundaries
0000652E 3018                       		move.w	(a0)+,d0
00006530 31C0 F730                  		move.w	d0,($FFFFF730).w
00006534 2018                       		move.l	(a0)+,d0
00006536 21C0 F728                  		move.l	d0,($FFFFF728).w
0000653A 21C0 F720                  		move.l	d0,($FFFFF720).w
0000653E 2018                       		move.l	(a0)+,d0
00006540 21C0 F72C                  		move.l	d0,($FFFFF72C).w
00006544 21C0 F724                  		move.l	d0,($FFFFF724).w
00006548 3038 F728                  		move.w	($FFFFF728).w,d0
0000654C 0640 0240                  		addi.w	#$240,d0
00006550 31C0 F732                  		move.w	d0,($FFFFF732).w
00006554 31FC 1010 F74A             		move.w	#$1010,($FFFFF74A).w
0000655A 3018                       		move.w	(a0)+,d0
0000655C 31C0 F73E                  		move.w	d0,($FFFFF73E).w
00006560 6000 0000                  		bra.w	LevSz_ChkLamp
00006564                            ; ===========================================================================
00006564                            ; ---------------------------------------------------------------------------
00006564                            ; Level size array and ending start location array
00006564                            ; ---------------------------------------------------------------------------
00006564                            LevelSizeArray:        ; GHZ
00006564 0004 0000 24BF 0000 0300+          dc.w $0004, $0000, $24BF, $0000, $0300, $0060 ; Act 1
00006570 0004 0000 1EBF 0000 0300+          dc.w $0004, $0000, $1EBF, $0000, $0300, $0060 ; Act 2
0000657C 0004 0000 2960 0000 0300+          dc.w $0004, $0000, $2960, $0000, $0300, $0060 ; Act 3
00006588 0004 0000 2ABF 0000 0300+          dc.w $0004, $0000, $2ABF, $0000, $0300, $0060 ; Act 4 (Unused)
00006594                                    ; LZ
00006594 0004 0000 19BF 0000 0530+          dc.w $0004, $0000, $19BF, $0000, $0530, $0060 ; Act 1
000065A0 0004 0000 10AF 0000 0720+          dc.w $0004, $0000, $10AF, $0000, $0720, $0060 ; Act 2
000065AC 0004 0000 1D00 FF00 0800+          dc.w $0004, $0000, $1D00, $FF00, $0800, $0060 ; Act 3
000065B8 0004 0000 20BF 0000 0720+          dc.w $0004, $0000, $20BF, $0000, $0720, $0060 ; Act 4 (Scrap Brain Act 3)
000065C4                                    ; MZ
000065C4 0004 0000 17BF 0000 01D0+          dc.w $0004, $0000, $17BF, $0000, $01D0, $0060 ; Act 1
000065D0 0004 0000 17BF 0000 0520+          dc.w $0004, $0000, $17BF, $0000, $0520, $0060 ; Act 2
000065DC 0004 0000 1800 0000 0720+          dc.w $0004, $0000, $1800, $0000, $0720, $0060 ; Act 3
000065E8 0004 0000 16BF 0000 0720+          dc.w $0004, $0000, $16BF, $0000, $0720, $0060 ; Act 4 (Unused)
000065F4                                    ; SLZ
000065F4 0004 0000 1FBF 0000 0640+          dc.w $0004, $0000, $1FBF, $0000, $0640, $0060 ; Act 1
00006600 0004 0000 1FBF 0000 0640+          dc.w $0004, $0000, $1FBF, $0000, $0640, $0060 ; Act 2
0000660C 0004 0000 2000 0000 06C0+          dc.w $0004, $0000, $2000, $0000, $06C0, $0060 ; Act 3
00006618 0004 0000 3EC0 0000 0720+          dc.w $0004, $0000, $3EC0, $0000, $0720, $0060 ; Act 4 (Unused)
00006624                                    ; SYZ
00006624 0004 0000 22C0 0000 0420+          dc.w $0004, $0000, $22C0, $0000, $0420, $0060 ; Act 1
00006630 0004 0000 28C0 0000 0520+          dc.w $0004, $0000, $28C0, $0000, $0520, $0060 ; Act 2
0000663C 0004 0000 2C00 0000 0620+          dc.w $0004, $0000, $2C00, $0000, $0620, $0060 ; Act 3
00006648 0004 0000 2EC0 0000 0620+          dc.w $0004, $0000, $2EC0, $0000, $0620, $0060 ; Act 4 (Unused)
00006654                                    ; SBZ
00006654 0004 0000 21C0 0000 0720+          dc.w $0004, $0000, $21C0, $0000, $0720, $0060 ; Act 1
00006660 0004 0000 1E40 FF00 0800+          dc.w $0004, $0000, $1E40, $FF00, $0800, $0060 ; Act 2
0000666C 0004 2080 2460 0510 0510+          dc.w $0004, $2080, $2460, $0510, $0510, $0060 ; Act 3 (Final Zone)
00006678 0004 0000 3EC0 0000 0720+          dc.w $0004, $0000, $3EC0, $0000, $0720, $0060 ; Act 4 (Unused)
00006684                                    ; Ending
00006684 0004 0000 0500 0110 0110+          dc.w $0004, $0000, $0500, $0110, $0110, $0060 ; Act 1 (Good Ending)
00006690 0004 0000 0DC0 0110 0110+          dc.w $0004, $0000, $0DC0, $0110, $0110, $0060 ; Act 2 (Bad Ending)
0000669C 0004 0000 2FFF 0000 0320+          dc.w $0004, $0000, $2FFF, $0000, $0320, $0060 ; Act 3 (Unused)
000066A8 0004 0000 2FFF 0000 0320+          dc.w $0004, $0000, $2FFF, $0000, $0320, $0060 ; Act 4 (Unused)
000066B4                                    ; BHZ
000066B4 0004 0000 24BF 0000 0300+          dc.w $0004, $0000, $24BF, $0000, $0300, $0060 ; Act 1
000066C0 0004 0000 1EBF 0000 0300+          dc.w $0004, $0000, $1EBF, $0000, $0300, $0060 ; Act 2
000066CC 0004 0000 2960 0000 0300+          dc.w $0004, $0000, $2960, $0000, $0300, $0060 ; Act 3
000066D8 0004 0000 2ABF 0000 0300+          dc.w $0004, $0000, $2ABF, $0000, $0300, $0060 ; Act 4 (Unused)
000066E4                                    even
000066E4                            
000066E4                            ; ===========================================================================
000066E4                            
000066E4                            LevSz_ChkLamp:				; XREF: LevelSizeLoad
000066E4 4A38 FE30                  		tst.b	($FFFFFE30).w	; have any lampposts been hit?
000066E8 6700                       		beq.s	LevSz_StartLoc	; if not, branch
000066EA 4EB9 0000 0000             		jsr	Obj79_LoadInfo
000066F0 3238 D008                  		move.w	($FFFFD008).w,d1
000066F4 3038 D00C                  		move.w	($FFFFD00C).w,d0
000066F8 6000 0000                  		bra.w	loc_60D0
000066FC                            ; ===========================================================================
000066FC                            
000066FC                            
000066FC                            LevSz_StartLoc:				; XREF: LevelSizeLoad
000066FC 3038 FE10                  		move.w	($FFFFFE10).w,d0
00006700 ED08                       		lsl.b	#6,d0
00006702 E848                       		lsr.w	#4,d0
00006704 43FB 0000                  		lea	StartLocArray(pc,d0.w),a1 ; load Sonic's start location
00006708 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
0000670C 6A00 0000                  		bpl.w	LevSz_SonicPos	; if not, branch
00006710 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00006714 5340                       		subq.w	#1,d0
00006716 E548                       		lsl.w	#2,d0
00006718 43FB 0000                  		lea	EndingStLocArray(pc,d0.w),a1 ; load Sonic's start location
0000671C 6000 0000                  		bra.w	LevSz_SonicPos
00006720                            
00006720                            EndingStLocArray:
00006720                            		incbin	misc\sloc_end.bin
00006740                            		even
00006740                            		
00006740                            ; ===========================================================================
00006740                            ; ---------------------------------------------------------------------------
00006740                            ; Sonic	start location array
00006740                            ; ---------------------------------------------------------------------------
00006740                            StartLocArray:	incbin	misc\sloc_lev.bin
000067C0                            		even
000067C0                            
000067C0                            LevSz_SonicPos:
000067C0 7200                       		moveq	#0,d1
000067C2 3219                       		move.w	(a1)+,d1
000067C4 31C1 D008                  		move.w	d1,($FFFFD008).w ; set Sonic's position on x-axis
000067C8 7000                       		moveq	#0,d0
000067CA 3011                       		move.w	(a1),d0
000067CC 31C0 D00C                  		move.w	d0,($FFFFD00C).w ; set Sonic's position on y-axis
000067D0                            
000067D0                            loc_60D0:				; XREF: LevSz_ChkLamp
000067D0 0441 00A0                  		subi.w	#$A0,d1
000067D4 6400                       		bcc.s	loc_60D8
000067D6 7200                       		moveq	#0,d1
000067D8                            
000067D8                            loc_60D8:
000067D8 3438 F72A                  		move.w	($FFFFF72A).w,d2
000067DC B242                       		cmp.w	d2,d1
000067DE 6500                       		bcs.s	loc_60E2
000067E0 3202                       		move.w	d2,d1
000067E2                            
000067E2                            loc_60E2:
000067E2 31C1 F700                  		move.w	d1,($FFFFF700).w
000067E6 0440 0060                  		subi.w	#$60,d0
000067EA 6400                       		bcc.s	loc_60EE
000067EC 7000                       		moveq	#0,d0
000067EE                            
000067EE                            loc_60EE:
000067EE B078 F72E                  		cmp.w	($FFFFF72E).w,d0
000067F2 6D00                       		blt.s	loc_60F8
000067F4 3038 F72E                  		move.w	($FFFFF72E).w,d0
000067F8                            
000067F8                            loc_60F8:
000067F8 31C0 F704                  		move.w	d0,($FFFFF704).w
000067FC 6100 0000                  		bsr.w	BgScrollSpeed
00006800 7000                       		moveq	#0,d0
00006802 1038 FE10                  		move.b	($FFFFFE10).w,d0
00006806 E508                       		lsl.b	#2,d0
00006808 21FB 0000 F7AC             		move.l	LoopTileNums(pc,d0.w),($FFFFF7AC).w
0000680E 6000 0000                  		bra.w	LevSz_Unk
00006812                            
00006812                            ; ---------------------------------------------------------------------------
00006812                            ; Which	256x256	tiles contain loops or roll-tunnels
00006812                            ; ---------------------------------------------------------------------------
00006812                            ; Format - 4 bytes per zone, referring to which 256x256 evoke special events:
00006812                            ; loop,	loop, tunnel, tunnel
00006812                            ; ---------------------------------------------------------------------------
00006812                            LoopTileNums:	incbin	misc\loopnums.bin
00006832                            		even
00006832                            ; this is from the cwa source code i will share kaito x gakupo mpreg if this does not work i swear t ogod if this does not
00006832                            ; ITS GONJE HELP
00006832                            ; ===========================================================================
00006832                            
00006832                            LevSz_Unk:				; XREF: LevelSizeLoad
00006832 7000                       		moveq	#0,d0
00006834 1038 FE10                  		move.b	($FFFFFE10).w,d0
00006838 E748                       		lsl.w	#3,d0
0000683A 43FB 0000                  		lea	dword_61B4(pc,d0.w),a1
0000683E 45F8 F7F0                  		lea	($FFFFF7F0).w,a2
00006842 24D9                       		move.l	(a1)+,(a2)+
00006844 24D9                       		move.l	(a1)+,(a2)+
00006846 4E75                       		rts	
00006848                            ; End of function LevelSizeLoad
00006848                            
00006848                            ; ===========================================================================
00006848 0070 0100 0100 0100        dword_61B4:	dc.l $700100, $1000100
00006850 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006858 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006860 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006868 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006870 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006878 0070 0100 0100 0100        		dc.l $700100, $1000100
00006880                            
00006880                            ; ---------------------------------------------------------------------------
00006880                            ; Subroutine to	set scroll speed of some backgrounds
00006880                            ; ---------------------------------------------------------------------------
00006880                            
00006880                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006880                            
00006880                            
00006880                            BgScrollSpeed:				; XREF: LevelSizeLoad
00006880 4A38 FE30                  		tst.b	($FFFFFE30).w
00006884 6600                       		bne.s	loc_6206
00006886 31C0 F70C                  		move.w	d0,($FFFFF70C).w
0000688A 31C0 F714                  		move.w	d0,($FFFFF714).w
0000688E 31C1 F708                  		move.w	d1,($FFFFF708).w
00006892 31C1 F710                  		move.w	d1,($FFFFF710).w
00006896 31C1 F718                  		move.w	d1,($FFFFF718).w
0000689A                            
0000689A                            loc_6206:
0000689A 7400                       		moveq	#0,d2
0000689C 1438 FE10                  		move.b	($FFFFFE10).w,d2
000068A0 D442                       		add.w	d2,d2
000068A2 343B 2000                  		move.w	BgScroll_Index(pc,d2.w),d2
000068A6 4EFB 2000                  		jmp	BgScroll_Index(pc,d2.w)
000068AA                            ; End of function BgScrollSpeed
000068AA                            
000068AA                            ; ===========================================================================
000068AA 0000 0000                  BgScroll_Index:	dc.w BgScroll_GHZ-BgScroll_Index, BgScroll_LZ-BgScroll_Index
000068AE 0000 0000                  		dc.w BgScroll_MZ-BgScroll_Index, BgScroll_SLZ-BgScroll_Index
000068B2 0000 0000                  		dc.w BgScroll_SYZ-BgScroll_Index, BgScroll_SBZ-BgScroll_Index
000068B6 0000 0000                  		dc.w BgScroll_End-BgScroll_Index, BgScroll_MZ-BgScroll_Index ; MAKOTO
000068BA                            ; ===========================================================================
000068BA                            
000068BA                            BgScroll_GHZ:				; XREF: BgScroll_Index
000068BA 6000 0000                  		bra.w	Deform_GHZ
000068BE                            ; ===========================================================================
000068BE                            
000068BE                            BgScroll_LZ:				; XREF: BgScroll_Index
000068BE E280                       		asr.l	#1,d0
000068C0 31C0 F70C                  		move.w	d0,($FFFFF70C).w
000068C4 4E75                       		rts	
000068C6                            ; ===========================================================================
000068C6                            
000068C6                            BgScroll_MZ:				; XREF: BgScroll_Index
000068C6 4E75                       		rts	
000068C8                            ; ===========================================================================
000068C8                            
000068C8                            BgScroll_SLZ:				; XREF: BgScroll_Index
000068C8 E280                       		asr.l	#1,d0
000068CA 0640 00C0                  		addi.w	#$C0,d0
000068CE 31C0 F70C                  		move.w	d0,($FFFFF70C).w
000068D2 4E75                       		rts	
000068D4                            ; ===========================================================================
000068D4                            
000068D4                            BgScroll_SYZ:				; XREF: BgScroll_Index
000068D4 E980                       		asl.l	#4,d0
000068D6 2400                       		move.l	d0,d2
000068D8 E380                       		asl.l	#1,d0
000068DA D082                       		add.l	d2,d0
000068DC E080                       		asr.l	#8,d0
000068DE 31C0 F70C                  		move.w	d0,($FFFFF70C).w
000068E2 31C0 F714                  		move.w	d0,($FFFFF714).w
000068E6 4E75                       		rts	
000068E8                            ; ===========================================================================
000068E8                            
000068E8                            BgScroll_SBZ:				; XREF: BgScroll_Index
000068E8 E980                       		asl.l	#4,d0
000068EA E380                       		asl.l	#1,d0
000068EC E080                       		asr.l	#8,d0
000068EE 31C0 F70C                  		move.w	d0,($FFFFF70C).w
000068F2 4E75                       		rts	
000068F4                            ; ===========================================================================
000068F4                            
000068F4                            BgScroll_End:				; XREF: BgScroll_Index
000068F4 31FC 001E F70C             		move.w	#$1E,($FFFFF70C).w
000068FA 31FC 001E F714             		move.w	#$1E,($FFFFF714).w
00006900 4E75                       		rts	
00006902                            ; ===========================================================================
00006902 31FC 00A8 F708             		move.w	#$A8,($FFFFF708).w
00006908 31FC 001E F70C             		move.w	#$1E,($FFFFF70C).w
0000690E 31FC FFC0 F710             		move.w	#-$40,($FFFFF710).w
00006914 31FC 001E F714             		move.w	#$1E,($FFFFF714).w
0000691A 4E75                       		rts
0000691C                            
0000691C                            ; ---------------------------------------------------------------------------
0000691C                            ; Background layer deformation subroutines
0000691C                            ; ---------------------------------------------------------------------------
0000691C                            
0000691C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000691C                            
0000691C                            
0000691C                            DeformBgLayer:				; XREF: TitleScreen; Level; EndingSequence
0000691C 4A38 F744                  		tst.b	($FFFFF744).w
00006920 6700                       		beq.s	loc_628E
00006922 4E75                       		rts	
00006924                            ; ===========================================================================
00006924                            
00006924                            loc_628E:
00006924 4278 F754                  		clr.w	($FFFFF754).w
00006928 4278 F756                  		clr.w	($FFFFF756).w
0000692C 4278 F758                  		clr.w	($FFFFF758).w
00006930 4278 F75A                  		clr.w	($FFFFF75A).w
00006934 6100 0000                  		bsr.w	ScrollHoriz
00006938 6100 0000                  		bsr.w	ScrollVertical
0000693C 6100 0000                  		bsr.w	DynScrResizeLoad
00006940 31F8 F700 F61A             		move.w	($FFFFF700).w,($FFFFF61A).w
00006946 31F8 F704 F616             		move.w	($FFFFF704).w,($FFFFF616).w
0000694C 31F8 F708 F61C             		move.w	($FFFFF708).w,($FFFFF61C).w
00006952 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006958 31F8 F718 F620             		move.w	($FFFFF718).w,($FFFFF620).w
0000695E 31F8 F71C F61E             		move.w	($FFFFF71C).w,($FFFFF61E).w
00006964 7000                       		moveq	#0,d0
00006966 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000696A D040                       		add.w	d0,d0
0000696C 303B 0000                  		move.w	Deform_Index(pc,d0.w),d0
00006970 4EFB 0000                  		jmp	Deform_Index(pc,d0.w)
00006974                            ; End of function DeformBgLayer
00006974                            
00006974                            ; ===========================================================================
00006974                            ; ---------------------------------------------------------------------------
00006974                            ; Offset index for background layer deformation	code
00006974                            ; ---------------------------------------------------------------------------
00006974 0000 0000                  Deform_Index:	dc.w Deform_GHZ-Deform_Index, Deform_LZ-Deform_Index
00006978 0000 0000                  		dc.w Deform_MZ-Deform_Index, Deform_SLZ-Deform_Index
0000697C 0000 0000                  		dc.w Deform_SYZ-Deform_Index, Deform_SBZ-Deform_Index
00006980 0000 0000                  		dc.w Deform_GHZ-Deform_Index, Deform_BHZ-Deform_Index ; MAKOTO
00006984                            ; ---------------------------------------------------------------------------
00006984                            ; Green	Hill Zone background layer deformation code
00006984                            ; ---------------------------------------------------------------------------
00006984                            
00006984                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006984                            
00006984                            
00006984                            Deform_GHZ:				; XREF: Deform_Index
00006984 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006988 48C4                       		ext.l	d4
0000698A EB84                       		asl.l	#5,d4
0000698C 2204                       		move.l	d4,d1
0000698E E384                       		asl.l	#1,d4
00006990 D881                       		add.l	d1,d4
00006992 7A00                       		moveq	#0,d5
00006994 6100 0000                  		bsr.w	ScrollBlock1
00006998 6100 0000                  		bsr.w	ScrollBlock4
0000699C 43F8 CC00                  		lea	($FFFFCC00).w,a1
000069A0 3038 F704                  		move.w	($FFFFF704).w,d0
000069A4 0240 07FF                  		andi.w	#$7FF,d0
000069A8 EA48                       		lsr.w	#5,d0
000069AA 4440                       		neg.w	d0
000069AC 0640 0026                  		addi.w	#$26,d0
000069B0 31C0 F714                  		move.w	d0,($FFFFF714).w
000069B4 3800                       		move.w	d0,d4
000069B6 6100 0000                  		bsr.w	ScrollBlock3
000069BA 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
000069C0 323C 006F                  		move.w	#$6F,d1
000069C4 9244                       		sub.w	d4,d1
000069C6 3038 F700                  		move.w	($FFFFF700).w,d0
000069CA 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w
000069D0 6600                       		bne.s	loc_633C
000069D2 7000                       		moveq	#0,d0
000069D4                            
000069D4                            loc_633C:
000069D4 4440                       		neg.w	d0
000069D6 4840                       		swap	d0
000069D8 3038 F708                  		move.w	($FFFFF708).w,d0
000069DC 4440                       		neg.w	d0
000069DE                            
000069DE                            loc_6346:
000069DE 22C0                       		move.l	d0,(a1)+
000069E0 51C9 FFFC                  		dbf	d1,loc_6346
000069E4 323C 0027                  		move.w	#$27,d1
000069E8 3038 F710                  		move.w	($FFFFF710).w,d0
000069EC 4440                       		neg.w	d0
000069EE                            
000069EE                            loc_6356:
000069EE 22C0                       		move.l	d0,(a1)+
000069F0 51C9 FFFC                  		dbf	d1,loc_6356
000069F4 3038 F710                  		move.w	($FFFFF710).w,d0
000069F8 0640 0000                  		addi.w	#0,d0
000069FC 3438 F700                  		move.w	($FFFFF700).w,d2
00006A00 0642 FE00                  		addi.w	#-$200,d2
00006A04 9440                       		sub.w	d0,d2
00006A06 48C2                       		ext.l	d2
00006A08 E182                       		asl.l	#8,d2
00006A0A 85FC 0068                  		divs.w	#$68,d2
00006A0E 48C2                       		ext.l	d2
00006A10 E182                       		asl.l	#8,d2
00006A12 7600                       		moveq	#0,d3
00006A14 3600                       		move.w	d0,d3
00006A16 323C 0047                  		move.w	#$47,d1
00006A1A D244                       		add.w	d4,d1
00006A1C                            
00006A1C                            loc_6384:
00006A1C 3003                       		move.w	d3,d0
00006A1E 4440                       		neg.w	d0
00006A20 22C0                       		move.l	d0,(a1)+
00006A22 4843                       		swap	d3
00006A24 D682                       		add.l	d2,d3
00006A26 4843                       		swap	d3
00006A28 51C9 FFF2                  		dbf	d1,loc_6384
00006A2C 4E75                       		rts	
00006A2E                            ; End of function Deform_GHZ
00006A2E                            
00006A2E                            ; ---------------------------------------------------------------------------
00006A2E                            ; Labyrinth Zone background layer deformation code
00006A2E                            ; ---------------------------------------------------------------------------
00006A2E                            
00006A2E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006A2E                            
00006A2E                            
00006A2E                            Deform_LZ:				; XREF: Deform_Index
00006A2E 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006A32 48C4                       		ext.l	d4
00006A34 EF84                       		asl.l	#7,d4
00006A36 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00006A3A 48C5                       		ext.l	d5
00006A3C EF85                       		asl.l	#7,d5
00006A3E 6100 0000                  		bsr.w	ScrollBlock1
00006A42 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006A48 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006A4C 323C 00DF                  		move.w	#$DF,d1
00006A50 3038 F700                  		move.w	($FFFFF700).w,d0
00006A54 4440                       		neg.w	d0
00006A56 4840                       		swap	d0
00006A58 3038 F708                  		move.w	($FFFFF708).w,d0
00006A5C 4440                       		neg.w	d0
00006A5E                            
00006A5E                            loc_63C6:
00006A5E 22C0                       		move.l	d0,(a1)+
00006A60 51C9 FFFC                  		dbf	d1,loc_63C6
00006A64 3038 F646                  		move.w	($FFFFF646).w,d0
00006A68 9078 F704                  		sub.w	($FFFFF704).w,d0
00006A6C 4E75                       		rts	
00006A6E                            ; End of function Deform_LZ
00006A6E                            
00006A6E                            ; ---------------------------------------------------------------------------
00006A6E                            ; Marble Zone background layer deformation code
00006A6E                            ; ---------------------------------------------------------------------------
00006A6E                            
00006A6E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006A6E                            
00006A6E                            
00006A6E                            Deform_MZ:				; XREF: Deform_Index
00006A6E 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006A72 48C4                       		ext.l	d4
00006A74 ED84                       		asl.l	#6,d4
00006A76 2204                       		move.l	d4,d1
00006A78 E384                       		asl.l	#1,d4
00006A7A D881                       		add.l	d1,d4
00006A7C 7A00                       		moveq	#0,d5
00006A7E 6100 0000                  		bsr.w	ScrollBlock1
00006A82 303C 0200                  		move.w	#$200,d0
00006A86 3238 F704                  		move.w	($FFFFF704).w,d1
00006A8A 0441 01C8                  		subi.w	#$1C8,d1
00006A8E 6500                       		bcs.s	loc_6402
00006A90 3401                       		move.w	d1,d2
00006A92 D241                       		add.w	d1,d1
00006A94 D242                       		add.w	d2,d1
00006A96 E441                       		asr.w	#2,d1
00006A98 D041                       		add.w	d1,d0
00006A9A                            
00006A9A                            loc_6402:
00006A9A 31C0 F714                  		move.w	d0,($FFFFF714).w
00006A9E 6100 0000                  		bsr.w	ScrollBlock3
00006AA2 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006AA8 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006AAC 323C 00DF                  		move.w	#$DF,d1
00006AB0 3038 F700                  		move.w	($FFFFF700).w,d0
00006AB4 4440                       		neg.w	d0
00006AB6 4840                       		swap	d0
00006AB8 3038 F708                  		move.w	($FFFFF708).w,d0
00006ABC 4440                       		neg.w	d0
00006ABE                            
00006ABE                            loc_6426:
00006ABE 22C0                       		move.l	d0,(a1)+
00006AC0 51C9 FFFC                  		dbf	d1,loc_6426
00006AC4 4E75                       		rts	
00006AC6                            ; End of function Deform_MZ
00006AC6                            
00006AC6                            ; ---------------------------------------------------------------------------
00006AC6                            ; Star Light Zone background layer deformation code
00006AC6                            ; ---------------------------------------------------------------------------
00006AC6                            
00006AC6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006AC6                            
00006AC6                            
00006AC6                            Deform_SLZ:				; XREF: Deform_Index
00006AC6 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006ACA 48C4                       		ext.l	d4
00006ACC EB84                       		asl.l	#5,d4
00006ACE 2204                       		move.l	d4,d1
00006AD0 E384                       		asl.l	#1,d4
00006AD2 D881                       		add.l	d1,d4
00006AD4 7A00                       		moveq	#0,d5
00006AD6 6100 0000                  		bsr.w	ScrollBlock1
00006ADA 6100 0000                  		bsr.w	ScrollBlock3
00006ADE 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006AE2                            	;	move.w	($FFFFF704).w,d0
00006AE2                            	;	andi.w	#$7FF,d0
00006AE2 EA48                       		lsr.w	#5,d0
00006AE4 4440                       		neg.w	d0
00006AE6 0640 0026                  		addi.w	#$26,d0
00006AEA 31C0 F714                  		move.w	d0,($FFFFF714).w
00006AEE 3800                       		move.w	d0,d4
00006AF0                            	;	bsr.w	ScrollBlock3
00006AF0 31FC FFFA F70C                     move.w #-$6,($FFFFF70C).w ; lock the background vertically in place
00006AF6 43F8 CC00                  		lea	($FFFFCC00).w,a1	; load beginning address of horizontal scroll buffer to a1
00006AFA                            
00006AFA 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006AFE 4440                       		neg.w	d0			; negate (positive to negative)
00006B00 4840                       		swap	d0			; send to the left side of d0
00006B02 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006B06 45F8 A800                  		lea	($FFFFA800).w,a2
00006B0A 069A 0000 5000             		addi.l	#$5000,(a2)+
00006B10 069A 0000 C000             		addi.l	#$C000,(a2)+
00006B16 3038 A800                  		move.w	($FFFFA800).w,d0
00006B1A 4440                       		neg.w	d0			; negate (positive to negative)
00006B1C E240                       		asr.w	#1,d0			; divide by 2 (Slow down the scroll position)
00006B1E 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006B22                            slz_DeformLoop_1:
00006B22 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006B24 51C9 FFFC                  		dbf	d1,slz_DeformLoop_1	; repeat d1 number of scanlines
00006B28                            
00006B28 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006B2C 4440                       		neg.w	d0			; negate (positive to negative)
00006B2E 4840                       		swap	d0			; send to the left side of d0
00006B30 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006B34 45F8 A800                  		lea	($FFFFA800).w,a2
00006B38 069A 0000 5000             		addi.l	#$5000,(a2)+
00006B3E 069A 0000 C000             		addi.l	#$C000,(a2)+
00006B44 3038 A800                  		move.w	($FFFFA800).w,d0
00006B48 4440                       		neg.w	d0			; negate (positive to negative)
00006B4A E440                       		asr.w	#2,d0			; divide by 4 (Slow down the scroll position)
00006B4C 323C 001A                  		move.w	#27-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006B50                            slz_DeformLoop_2:
00006B50 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006B52 51C9 FFFC                  		dbf	d1,slz_DeformLoop_2	; repeat d1 number of scanlines
00006B56                            
00006B56 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006B5A 4440                       		neg.w	d0			; negate (positive to negative)
00006B5C 4840                       		swap	d0			; send to the left side of d0
00006B5E 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006B62 45F8 A800                  		lea	($FFFFA800).w,a2
00006B66 069A 0000 5000             		addi.l	#$5000,(a2)+
00006B6C 069A 0000 C000             		addi.l	#$C000,(a2)+
00006B72 3038 A800                  		move.w	($FFFFA800).w,d0
00006B76 4440                       		neg.w	d0			; negate (positive to negative)
00006B78 E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
00006B7A 323C 0011                  		move.w	#18-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006B7E                            slz_DeformLoop_3:
00006B7E 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006B80 51C9 FFFC                  		dbf	d1,slz_DeformLoop_3	; repeat d1 number of scanlines
00006B84                            
00006B84 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006B88 4440                       		neg.w	d0			; negate (positive to negative)
00006B8A 4840                       		swap	d0			; send to the left side of d0
00006B8C 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006B90 45F8 A800                  		lea	($FFFFA800).w,a2
00006B94 069A 0000 5000             		addi.l	#$5000,(a2)+
00006B9A 069A 0000 C000             		addi.l	#$C000,(a2)+
00006BA0 3038 A800                  		move.w	($FFFFA800).w,d0
00006BA4 4440                       		neg.w	d0			; negate (positive to negative)
00006BA6 E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
00006BA8 323C 0009                  		move.w	#10-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006BAC                            slz_DeformLoop_4:
00006BAC 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006BAE 51C9 FFFC                  		dbf	d1,slz_DeformLoop_4	; repeat d1 number of scanlines
00006BB2                            
00006BB2 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006BB6 4440                       		neg.w	d0			; negate (positive to negative)
00006BB8 4840                       		swap	d0			; send to the left side of d0
00006BBA 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006BBE 45F8 A800                  		lea	($FFFFA800).w,a2
00006BC2 069A 0000 5000             		addi.l	#$5000,(a2)+
00006BC8 069A 0000 C000             		addi.l	#$C000,(a2)+
00006BCE 3038 A800                  		move.w	($FFFFA800).w,d0
00006BD2 4440                       		neg.w	d0			; negate (positive to negative)
00006BD4 E840                       		asr.w	#4,d0			; divide by 16 (Slow down the scroll position)
00006BD6 323C 000F                  		move.w	#16-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006BDA                            slz_DeformLoop_5:
00006BDA 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006BDC 51C9 FFFC                  		dbf	d1,slz_DeformLoop_5	; repeat d1 number of scanlines
00006BE0                            
00006BE0 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006BE4 4440                       		neg.w	d0			; negate (positive to negative)
00006BE6 4840                       		swap	d0			; send to the left side of d0
00006BE8 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006BEC 4440                       		neg.w	d0			; negate (positive to negative)
00006BEE EA40                       		asr.w	#5,d0			; divide by 32 (Slow down the scroll position)
00006BF0 323C 001C                  		move.w	#29-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006BF4                            slz_DeformLoop_6:
00006BF4 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006BF6 51C9 FFFC                  		dbf	d1,slz_DeformLoop_6	; repeat d1 number of scanlines
00006BFA                            
00006BFA 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006BFE 4440                       		neg.w	d0			; negate (positive to negative)
00006C00 4840                       		swap	d0			; send to the left side of d0
00006C02 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006C06 4440                       		neg.w	d0			; negate (positive to negative)
00006C08 EE40                       		asr.w	#7,d0			; divide by 128 (Slow down the scroll position)
00006C0A 323C 0005                  		move.w	#6-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006C0E                            slz_DeformLoop_7:
00006C0E 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006C10 51C9 FFFC                  		dbf	d1,slz_DeformLoop_7	; repeat d1 number of scanlines
00006C14                            
00006C14 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006C18 4440                       		neg.w	d0			; negate (positive to negative)
00006C1A 4840                       		swap	d0			; send to the left side of d0
00006C1C 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006C20 4440                       		neg.w	d0			; negate (positive to negative)
00006C22 EC40                       		asr.w	#6,d0			; divide by 64 (Slow down the scroll position)
00006C24 323C 0004                  		move.w	#5-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006C28                            slz_DeformLoop_8:
00006C28 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006C2A 51C9 FFFC                  		dbf	d1,slz_DeformLoop_8	; repeat d1 number of scanlines
00006C2E                            
00006C2E 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006C32 4440                       		neg.w	d0			; negate (positive to negative)
00006C34 4840                       		swap	d0			; send to the left side of d0
00006C36 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006C3A 4440                       		neg.w	d0			; negate (positive to negative)
00006C3C EA40                       		asr.w	#5,d0			; divide by 32 (Slow down the scroll position)
00006C3E 323C 0007                  		move.w	#8-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006C42                            slz_DeformLoop_9:
00006C42 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006C44 51C9 FFFC                  		dbf	d1,slz_DeformLoop_9	; repeat d1 number of scanlines
00006C48                            
00006C48 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006C4C 4440                       		neg.w	d0			; negate (positive to negative)
00006C4E 4840                       		swap	d0			; send to the left side of d0
00006C50 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006C54 4440                       		neg.w	d0			; negate (positive to negative)
00006C56 E840                       		asr.w	#4,d0			; divide by 16 (Slow down the scroll position)
00006C58 323C 0006                  		move.w	#7-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006C5C                            slz_DeformLoop_10:
00006C5C 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006C5E 51C9 FFFC                  		dbf	d1,slz_DeformLoop_10	; repeat d1 number of scanlines
00006C62                            
00006C62 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006C66 4440                       		neg.w	d0			; negate (positive to negative)
00006C68 4840                       		swap	d0			; send to the left side of d0
00006C6A 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006C6E 4440                       		neg.w	d0			; negate (positive to negative)
00006C70 E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
00006C72 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006C76                            slz_DeformLoop_11:
00006C76 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006C78 51C9 FFFC                  		dbf	d1,slz_DeformLoop_11	; repeat d1 number of scanlines
00006C7C                            
00006C7C 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006C80 4440                       		neg.w	d0			; negate (positive to negative)
00006C82 4840                       		swap	d0			; send to the left side of d0
00006C84 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006C88 4440                       		neg.w	d0			; negate (positive to negative)
00006C8A E440                       		asr.w	#2,d0			; divide by 4 (Slow down the scroll position)
00006C8C 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006C90                            slz_DeformLoop_12:
00006C90 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006C92 51C9 FFFC                  		dbf	d1,slz_DeformLoop_12	; repeat d1 number of scanlines
00006C96                            
00006C96 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006C9A 4440                       		neg.w	d0			; negate (positive to negative)
00006C9C 4840                       		swap	d0			; send to the left side of d0
00006C9E 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006CA2 4440                       		neg.w	d0			; negate (positive to negative)
00006CA4 E240                       		asr.w	#1,d0			; divide by 2 (Slow down the scroll position)
00006CA6 323C 0031                  		move.w	#50-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006CAA                            slz_DeformLoop_13:
00006CAA 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006CAC 51C9 FFFC                  		dbf	d1,slz_DeformLoop_13	; repeat d1 number of scanlines
00006CB0 4E75                       		rts	
00006CB2                            ; End of function Deform_SLZ
00006CB2 4E75                       		rts	
00006CB4                            ; End of function Deform_SLZ_2
00006CB4                            
00006CB4                            ; ---------------------------------------------------------------------------
00006CB4                            ; Spring Yard Zone background layer deformation	code
00006CB4                            ; ---------------------------------------------------------------------------
00006CB4                            
00006CB4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006CB4                            
00006CB4                            
00006CB4                            Deform_SYZ:				; XREF: Deform_Index
00006CB4 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006CB8 48C4                       		ext.l	d4
00006CBA ED84                       		asl.l	#6,d4
00006CBC 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00006CC0 48C5                       		ext.l	d5
00006CC2 E985                       		asl.l	#4,d5
00006CC4 2205                       		move.l	d5,d1
00006CC6 E385                       		asl.l	#1,d5
00006CC8 DA81                       		add.l	d1,d5
00006CCA 6100 0000                  		bsr.w	ScrollBlock1
00006CCE 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006CD4 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006CD8 323C 00DF                  		move.w	#$DF,d1
00006CDC 3038 F700                  		move.w	($FFFFF700).w,d0
00006CE0 4440                       		neg.w	d0
00006CE2 4840                       		swap	d0
00006CE4 3038 F708                  		move.w	($FFFFF708).w,d0
00006CE8 4440                       		neg.w	d0
00006CEA                            
00006CEA                            loc_653C:
00006CEA 22C0                       		move.l	d0,(a1)+
00006CEC 51C9 FFFC                  		dbf	d1,loc_653C
00006CF0 4E75                       		rts	
00006CF2                            ; End of function Deform_SYZ
00006CF2                            
00006CF2                            ; ---------------------------------------------------------------------------
00006CF2                            ; Scrap	Brain Zone background layer deformation	code
00006CF2                            ; ---------------------------------------------------------------------------
00006CF2                            
00006CF2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006CF2                            
00006CF2                            
00006CF2                            Deform_SBZ:				; XREF: Deform_Index
00006CF2 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006CF6 48C4                       		ext.l	d4
00006CF8 ED84                       		asl.l	#6,d4
00006CFA 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00006CFE 48C5                       		ext.l	d5
00006D00 E985                       		asl.l	#4,d5
00006D02 E385                       		asl.l	#1,d5
00006D04 6100 0000                  		bsr.w	ScrollBlock1
00006D08 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006D0E 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006D12 323C 00DF                  		move.w	#$DF,d1
00006D16 3038 F700                  		move.w	($FFFFF700).w,d0
00006D1A 4440                       		neg.w	d0
00006D1C 4840                       		swap	d0
00006D1E 3038 F708                  		move.w	($FFFFF708).w,d0
00006D22 4440                       		neg.w	d0
00006D24                            
00006D24                            loc_6576:
00006D24 22C0                       		move.l	d0,(a1)+
00006D26 51C9 FFFC                  		dbf	d1,loc_6576
00006D2A 4E75                       		rts	
00006D2C                            ; End of function Deform_SBZ
00006D2C                            ; ---------------------------------------------------------------------------
00006D2C                            ; Makoto Zone background layer deformation code
00006D2C                            ; ---------------------------------------------------------------------------
00006D2C                            
00006D2C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006D2C                            
00006D2C                            
00006D2C                            Deform_BHZ:				; XREF: Deform_Index
00006D2C 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006D30 48C4                       		ext.l	d4
00006D32 E984                       		asl.l	#4,d4
00006D34 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00006D38 48C5                       		ext.l	d5
00006D3A E985                       		asl.l	#4,d5
00006D3C 7A00                       		moveq	#0,d5	; reset bg position in title screen
00006D3E 6100 0000                  		bsr.w	ScrollBlock1
00006D42 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006D48 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006D4C 323C 00DF                  		move.w	#$DF,d1
00006D50 3038 F700                  		move.w	($FFFFF700).w,d0
00006D54 4440                       		neg.w	d0
00006D56 4840                       		swap	d0
00006D58 3038 F708                  		move.w	($FFFFF708).w,d0
00006D5C 4440                       		neg.w	d0
00006D5E                            
00006D5E                            loc_63COCK6:
00006D5E 22C0                       		move.l	d0,(a1)+
00006D60 51C9 FFFC                  		dbf	d1,loc_63COCK6
00006D64 3038 F646                  		move.w	($FFFFF646).w,d0
00006D68 9078 F704                  		sub.w	($FFFFF704).w,d0
00006D6C 4E75                       		rts	
00006D6E                            ; End of function Deform_BHZ
00006D6E                            ; ---------------------------------------------------------------------------
00006D6E                            ; Subroutine to	scroll the level horizontally as Sonic moves
00006D6E                            ; ---------------------------------------------------------------------------
00006D6E                            
00006D6E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006D6E                            
00006D6E                            
00006D6E                            ScrollHoriz:				; XREF: DeformBgLayer
00006D6E 3838 F700                  		move.w	($FFFFF700).w,d4
00006D72 6100                       		bsr.s	ScrollHoriz2
00006D74 3038 F700                  		move.w	($FFFFF700).w,d0
00006D78 0240 0010                  		andi.w	#$10,d0
00006D7C 1238 F74A                  		move.b	($FFFFF74A).w,d1
00006D80 B300                       		eor.b	d1,d0
00006D82 6600                       		bne.s	locret_65B0
00006D84 0A38 0010 F74A             		eori.b	#$10,($FFFFF74A).w
00006D8A 3038 F700                  		move.w	($FFFFF700).w,d0
00006D8E 9044                       		sub.w	d4,d0
00006D90 6A00                       		bpl.s	loc_65AA
00006D92 08F8 0002 F754             		bset	#2,($FFFFF754).w
00006D98 4E75                       		rts	
00006D9A                            ; ===========================================================================
00006D9A                            
00006D9A                            loc_65AA:
00006D9A 08F8 0003 F754             		bset	#3,($FFFFF754).w
00006DA0                            
00006DA0                            locret_65B0:
00006DA0 4E75                       		rts	
00006DA2                            ; End of function ScrollHoriz
00006DA2                            
00006DA2                            
00006DA2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006DA2                            
00006DA2                            
00006DA2                            ScrollHoriz2:				; XREF: ScrollHoriz
00006DA2 3038 D008                  		move.w	($FFFFD008).w,d0
00006DA6 9078 F700                  		sub.w	($FFFFF700).w,d0
00006DAA 0440 0090                  		subi.w	#$90,d0
00006DAE 6500                       		bcs.s	loc_65F6
00006DB0 0440 0010                  		subi.w	#$10,d0
00006DB4 6400                       		bcc.s	loc_65CC
00006DB6 4278 F73A                  		clr.w	($FFFFF73A).w
00006DBA 4E75                       		rts	
00006DBC                            ; ===========================================================================
00006DBC                            
00006DBC                            loc_65CC:
00006DBC 0C40 0010                  		cmpi.w	#$10,d0
00006DC0 6500                       		bcs.s	loc_65D6
00006DC2 303C 0010                  		move.w	#$10,d0
00006DC6                            
00006DC6                            loc_65D6:
00006DC6 D078 F700                  		add.w	($FFFFF700).w,d0
00006DCA B078 F72A                  		cmp.w	($FFFFF72A).w,d0
00006DCE 6D00                       		blt.s	loc_65E4
00006DD0 3038 F72A                  		move.w	($FFFFF72A).w,d0
00006DD4                            
00006DD4                            loc_65E4:
00006DD4 3200                       		move.w	d0,d1
00006DD6 9278 F700                  		sub.w	($FFFFF700).w,d1
00006DDA E141                       		asl.w	#8,d1
00006DDC 31C0 F700                  		move.w	d0,($FFFFF700).w
00006DE0 31C1 F73A                  		move.w	d1,($FFFFF73A).w
00006DE4 4E75                       		rts	
00006DE6                            ; ===========================================================================
00006DE6                            
00006DE6                            loc_65F6:				; XREF: ScrollHoriz2
00006DE6 D078 F700                  		add.w	($FFFFF700).w,d0
00006DEA B078 F728                  		cmp.w	($FFFFF728).w,d0
00006DEE 6EE4                       		bgt.s	loc_65E4
00006DF0 3038 F728                  		move.w	($FFFFF728).w,d0
00006DF4 60DE                       		bra.s	loc_65E4
00006DF6                            ; End of function ScrollHoriz2
00006DF6                            
00006DF6                            ; ===========================================================================
00006DF6 4A40                       		tst.w	d0
00006DF8 6A00                       		bpl.s	loc_6610
00006DFA 303C FFFE                  		move.w	#-2,d0
00006DFE 60E6                       		bra.s	loc_65F6
00006E00                            ; ===========================================================================
00006E00                            
00006E00                            loc_6610:
00006E00 303C 0002                  		move.w	#2,d0
00006E04 60B6                       		bra.s	loc_65CC
00006E06                            
00006E06                            ; ---------------------------------------------------------------------------
00006E06                            ; Subroutine to	scroll the level vertically as Sonic moves
00006E06                            ; ---------------------------------------------------------------------------
00006E06                            
00006E06                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006E06                            
00006E06                            
00006E06                            ScrollVertical:				; XREF: DeformBgLayer
00006E06 7200                       		moveq	#0,d1
00006E08 3038 D00C                  		move.w	($FFFFD00C).w,d0
00006E0C 9078 F704                  		sub.w	($FFFFF704).w,d0
00006E10 0838 0002 D022             		btst	#2,($FFFFD022).w
00006E16 6700                       		beq.s	loc_662A
00006E18 5B40                       		subq.w	#5,d0
00006E1A                            
00006E1A                            loc_662A:
00006E1A 0838 0001 D022             		btst	#1,($FFFFD022).w
00006E20 6700                       		beq.s	loc_664A
00006E22 0640 0020                  		addi.w	#$20,d0
00006E26 9078 F73E                  		sub.w	($FFFFF73E).w,d0
00006E2A 6500                       		bcs.s	loc_6696
00006E2C 0440 0040                  		subi.w	#$40,d0
00006E30 6400                       		bcc.s	loc_6696
00006E32 4A38 F75C                  		tst.b	($FFFFF75C).w
00006E36 6600                       		bne.s	loc_66A8
00006E38 6000                       		bra.s	loc_6656
00006E3A                            ; ===========================================================================
00006E3A                            
00006E3A                            loc_664A:
00006E3A 9078 F73E                  		sub.w	($FFFFF73E).w,d0
00006E3E 6600                       		bne.s	loc_665C
00006E40 4A38 F75C                  		tst.b	($FFFFF75C).w
00006E44 6600                       		bne.s	loc_66A8
00006E46                            
00006E46                            loc_6656:
00006E46 4278 F73C                  		clr.w	($FFFFF73C).w
00006E4A 4E75                       		rts	
00006E4C                            ; ===========================================================================
00006E4C                            
00006E4C                            loc_665C:
00006E4C 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w
00006E52 6600                       		bne.s	loc_6684
00006E54 3238 D014                  		move.w	($FFFFD014).w,d1
00006E58 6A00                       		bpl.s	loc_666C
00006E5A 4441                       		neg.w	d1
00006E5C                            
00006E5C                            loc_666C:
00006E5C 0C41 0800                  		cmpi.w	#$800,d1
00006E60 6400                       		bcc.s	loc_6696
00006E62 323C 0600                  		move.w	#$600,d1
00006E66 0C40 0006                  		cmpi.w	#6,d0
00006E6A 6E00                       		bgt.s	loc_66F6
00006E6C 0C40 FFFA                  		cmpi.w	#-6,d0
00006E70 6D00                       		blt.s	loc_66C0
00006E72 6000                       		bra.s	loc_66AE
00006E74                            ; ===========================================================================
00006E74                            
00006E74                            loc_6684:
00006E74 323C 0200                  		move.w	#$200,d1
00006E78 0C40 0002                  		cmpi.w	#2,d0
00006E7C 6E00                       		bgt.s	loc_66F6
00006E7E 0C40 FFFE                  		cmpi.w	#-2,d0
00006E82 6D00                       		blt.s	loc_66C0
00006E84 6000                       		bra.s	loc_66AE
00006E86                            ; ===========================================================================
00006E86                            
00006E86                            loc_6696:
00006E86 323C 1000                  		move.w	#$1000,d1
00006E8A 0C40 0010                  		cmpi.w	#$10,d0
00006E8E 6E00                       		bgt.s	loc_66F6
00006E90 0C40 FFF0                  		cmpi.w	#-$10,d0
00006E94 6D00                       		blt.s	loc_66C0
00006E96 6000                       		bra.s	loc_66AE
00006E98                            ; ===========================================================================
00006E98                            
00006E98                            loc_66A8:
00006E98 7000                       		moveq	#0,d0
00006E9A 11C0 F75C                  		move.b	d0,($FFFFF75C).w
00006E9E                            
00006E9E                            loc_66AE:
00006E9E 7200                       		moveq	#0,d1
00006EA0 3200                       		move.w	d0,d1
00006EA2 D278 F704                  		add.w	($FFFFF704).w,d1
00006EA6 4A40                       		tst.w	d0
00006EA8 6A00 0000                  		bpl.w	loc_6700
00006EAC 6000 0000                  		bra.w	loc_66CC
00006EB0                            ; ===========================================================================
00006EB0                            
00006EB0                            loc_66C0:
00006EB0 4441                       		neg.w	d1
00006EB2 48C1                       		ext.l	d1
00006EB4 E181                       		asl.l	#8,d1
00006EB6 D2B8 F704                  		add.l	($FFFFF704).w,d1
00006EBA 4841                       		swap	d1
00006EBC                            
00006EBC                            loc_66CC:
00006EBC B278 F72C                  		cmp.w	($FFFFF72C).w,d1
00006EC0 6E00                       		bgt.s	loc_6724
00006EC2 0C41 FF00                  		cmpi.w	#-$100,d1
00006EC6 6E00                       		bgt.s	loc_66F0
00006EC8 0241 07FF                  		andi.w	#$7FF,d1
00006ECC 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
00006ED2 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
00006ED8 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
00006EDE 6000                       		bra.s	loc_6724
00006EE0                            ; ===========================================================================
00006EE0                            
00006EE0                            loc_66F0:
00006EE0 3238 F72C                  		move.w	($FFFFF72C).w,d1
00006EE4 6000                       		bra.s	loc_6724
00006EE6                            ; ===========================================================================
00006EE6                            
00006EE6                            loc_66F6:
00006EE6 48C1                       		ext.l	d1
00006EE8 E181                       		asl.l	#8,d1
00006EEA D2B8 F704                  		add.l	($FFFFF704).w,d1
00006EEE 4841                       		swap	d1
00006EF0                            
00006EF0                            loc_6700:
00006EF0 B278 F72E                  		cmp.w	($FFFFF72E).w,d1
00006EF4 6D00                       		blt.s	loc_6724
00006EF6 0441 0800                  		subi.w	#$800,d1
00006EFA 6500                       		bcs.s	loc_6720
00006EFC 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
00006F02 0478 0800 F704             		subi.w	#$800,($FFFFF704).w
00006F08 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
00006F0E 6000                       		bra.s	loc_6724
00006F10                            ; ===========================================================================
00006F10                            
00006F10                            loc_6720:
00006F10 3238 F72E                  		move.w	($FFFFF72E).w,d1
00006F14                            
00006F14                            loc_6724:
00006F14 3838 F704                  		move.w	($FFFFF704).w,d4
00006F18 4841                       		swap	d1
00006F1A 2601                       		move.l	d1,d3
00006F1C 96B8 F704                  		sub.l	($FFFFF704).w,d3
00006F20 E09B                       		ror.l	#8,d3
00006F22 31C3 F73C                  		move.w	d3,($FFFFF73C).w
00006F26 21C1 F704                  		move.l	d1,($FFFFF704).w
00006F2A 3038 F704                  		move.w	($FFFFF704).w,d0
00006F2E 0240 0010                  		andi.w	#$10,d0
00006F32 1238 F74B                  		move.b	($FFFFF74B).w,d1
00006F36 B300                       		eor.b	d1,d0
00006F38 6600                       		bne.s	locret_6766
00006F3A 0A38 0010 F74B             		eori.b	#$10,($FFFFF74B).w
00006F40 3038 F704                  		move.w	($FFFFF704).w,d0
00006F44 9044                       		sub.w	d4,d0
00006F46 6A00                       		bpl.s	loc_6760
00006F48 08F8 0000 F754             		bset	#0,($FFFFF754).w
00006F4E 4E75                       		rts	
00006F50                            ; ===========================================================================
00006F50                            
00006F50                            loc_6760:
00006F50 08F8 0001 F754             		bset	#1,($FFFFF754).w
00006F56                            
00006F56                            locret_6766:
00006F56 4E75                       		rts	
00006F58                            ; End of function ScrollVertical
00006F58                            
00006F58                            
00006F58                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006F58                            
00006F58                            
00006F58                            ScrollBlock1:				; XREF: Deform_GHZ; et al
00006F58 2438 F708                  		move.l	($FFFFF708).w,d2
00006F5C 2002                       		move.l	d2,d0
00006F5E D084                       		add.l	d4,d0
00006F60 21C0 F708                  		move.l	d0,($FFFFF708).w
00006F64 2200                       		move.l	d0,d1
00006F66 4841                       		swap	d1
00006F68 0241 0010                  		andi.w	#$10,d1
00006F6C 1638 F74C                  		move.b	($FFFFF74C).w,d3
00006F70 B701                       		eor.b	d3,d1
00006F72 6600                       		bne.s	loc_679C
00006F74 0A38 0010 F74C             		eori.b	#$10,($FFFFF74C).w
00006F7A 9082                       		sub.l	d2,d0
00006F7C 6A00                       		bpl.s	loc_6796
00006F7E 08F8 0002 F756             		bset	#2,($FFFFF756).w
00006F84 6000                       		bra.s	loc_679C
00006F86                            ; ===========================================================================
00006F86                            
00006F86                            loc_6796:
00006F86 08F8 0003 F756             		bset	#3,($FFFFF756).w
00006F8C                            
00006F8C                            loc_679C:
00006F8C 2638 F70C                  		move.l	($FFFFF70C).w,d3
00006F90 2003                       		move.l	d3,d0
00006F92 D085                       		add.l	d5,d0
00006F94 21C0 F70C                  		move.l	d0,($FFFFF70C).w
00006F98 2200                       		move.l	d0,d1
00006F9A 4841                       		swap	d1
00006F9C 0241 0010                  		andi.w	#$10,d1
00006FA0 1438 F74D                  		move.b	($FFFFF74D).w,d2
00006FA4 B501                       		eor.b	d2,d1
00006FA6 6600                       		bne.s	locret_67D0
00006FA8 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00006FAE 9083                       		sub.l	d3,d0
00006FB0 6A00                       		bpl.s	loc_67CA
00006FB2 08F8 0000 F756             		bset	#0,($FFFFF756).w
00006FB8 4E75                       		rts	
00006FBA                            ; ===========================================================================
00006FBA                            
00006FBA                            loc_67CA:
00006FBA 08F8 0001 F756             		bset	#1,($FFFFF756).w
00006FC0                            
00006FC0                            locret_67D0:
00006FC0 4E75                       		rts	
00006FC2                            ; End of function ScrollBlock1
00006FC2                            
00006FC2                            
00006FC2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006FC2                            
00006FC2                            
00006FC2                            ScrollBlock2:				; XREF: Deform_SLZ
00006FC2 2438 F708                  		move.l	($FFFFF708).w,d2
00006FC6 2002                       		move.l	d2,d0
00006FC8 D084                       		add.l	d4,d0
00006FCA 21C0 F708                  		move.l	d0,($FFFFF708).w
00006FCE 2638 F70C                  		move.l	($FFFFF70C).w,d3
00006FD2 2003                       		move.l	d3,d0
00006FD4 D085                       		add.l	d5,d0
00006FD6 21C0 F70C                  		move.l	d0,($FFFFF70C).w
00006FDA 2200                       		move.l	d0,d1
00006FDC 4841                       		swap	d1
00006FDE 0241 0010                  		andi.w	#$10,d1
00006FE2 1438 F74D                  		move.b	($FFFFF74D).w,d2
00006FE6 B501                       		eor.b	d2,d1
00006FE8 6600                       		bne.s	locret_6812
00006FEA 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00006FF0 9083                       		sub.l	d3,d0
00006FF2 6A00                       		bpl.s	loc_680C
00006FF4 08F8 0000 F756             		bset	#0,($FFFFF756).w
00006FFA 4E75                       		rts	
00006FFC                            ; ===========================================================================
00006FFC                            
00006FFC                            loc_680C:
00006FFC 08F8 0001 F756             		bset	#1,($FFFFF756).w
00007002                            
00007002                            locret_6812:
00007002 4E75                       		rts	
00007004                            ; End of function ScrollBlock2
00007004                            
00007004                            
00007004                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007004                            
00007004                            
00007004                            ScrollBlock3:				; XREF: Deform_GHZ; et al
00007004 3638 F70C                  		move.w	($FFFFF70C).w,d3
00007008 31C0 F70C                  		move.w	d0,($FFFFF70C).w
0000700C 3200                       		move.w	d0,d1
0000700E 0241 0010                  		andi.w	#$10,d1
00007012 1438 F74D                  		move.b	($FFFFF74D).w,d2
00007016 B501                       		eor.b	d2,d1
00007018 6600                       		bne.s	locret_6842
0000701A 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00007020 9043                       		sub.w	d3,d0
00007022 6A00                       		bpl.s	loc_683C
00007024 08F8 0000 F756             		bset	#0,($FFFFF756).w
0000702A 4E75                       		rts	
0000702C                            ; ===========================================================================
0000702C                            
0000702C                            loc_683C:
0000702C 08F8 0001 F756             		bset	#1,($FFFFF756).w
00007032                            
00007032                            locret_6842:
00007032 4E75                       		rts	
00007034                            ; End of function ScrollBlock3
00007034                            
00007034                            
00007034                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007034                            
00007034                            
00007034                            ScrollBlock4:				; XREF: Deform_GHZ
00007034 3438 F710                  		move.w	($FFFFF710).w,d2
00007038 3638 F714                  		move.w	($FFFFF714).w,d3
0000703C 3038 F73A                  		move.w	($FFFFF73A).w,d0
00007040 48C0                       		ext.l	d0
00007042 EF80                       		asl.l	#7,d0
00007044 D1B8 F710                  		add.l	d0,($FFFFF710).w
00007048 3038 F710                  		move.w	($FFFFF710).w,d0
0000704C 0240 0010                  		andi.w	#$10,d0
00007050 1238 F74E                  		move.b	($FFFFF74E).w,d1
00007054 B300                       		eor.b	d1,d0
00007056 6600                       		bne.s	locret_6884
00007058 0A38 0010 F74E             		eori.b	#$10,($FFFFF74E).w
0000705E 3038 F710                  		move.w	($FFFFF710).w,d0
00007062 9042                       		sub.w	d2,d0
00007064 6A00                       		bpl.s	loc_687E
00007066 08F8 0002 F758             		bset	#2,($FFFFF758).w
0000706C 6000                       		bra.s	locret_6884
0000706E                            ; ===========================================================================
0000706E                            
0000706E                            loc_687E:
0000706E 08F8 0003 F758             		bset	#3,($FFFFF758).w
00007074                            
00007074                            locret_6884:
00007074 4E75                       		rts	
00007076                            ; End of function ScrollBlock4
00007076                            
00007076                            
00007076                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007076                            
00007076                            
00007076                            sub_6886:				; XREF: loc_C44
00007076 4BF9 00C0 0004             		lea	($C00004).l,a5
0000707C 4DF9 00C0 0000             		lea	($C00000).l,a6
00007082 45F8 F756                  		lea	($FFFFF756).w,a2
00007086 47F8 F708                  		lea	($FFFFF708).w,a3
0000708A 49F8 A440                  		lea	($FFFFA440).w,a4
0000708E 343C 6000                  		move.w	#$6000,d2
00007092 6100 0000                  		bsr.w	sub_6954
00007096 45F8 F758                  		lea	($FFFFF758).w,a2
0000709A 47F8 F710                  		lea	($FFFFF710).w,a3
0000709E 6000 0000                  		bra.w	sub_69F4
000070A2                            ; End of function sub_6886
000070A2                            
000070A2                            ; ---------------------------------------------------------------------------
000070A2                            ; Subroutine to	display	correct	tiles as you move
000070A2                            ; ---------------------------------------------------------------------------
000070A2                            
000070A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000070A2                            
000070A2                            
000070A2                            LoadTilesAsYouMove:			; XREF: Demo_Time
000070A2 4BF9 00C0 0004             		lea	($C00004).l,a5
000070A8 4DF9 00C0 0000             		lea	($C00000).l,a6
000070AE 45F8 FF32                  		lea	($FFFFFF32).w,a2
000070B2 47F8 FF18                  		lea	($FFFFFF18).w,a3
000070B6 49F8 A440                  		lea	($FFFFA440).w,a4
000070BA 343C 6000                  		move.w	#$6000,d2
000070BE 6100 0000                  		bsr.w	sub_6954
000070C2 45F8 FF34                  		lea	($FFFFFF34).w,a2
000070C6 47F8 FF20                  		lea	($FFFFFF20).w,a3
000070CA 6100 0000                  		bsr.w	sub_69F4
000070CE 45F8 FF30                  		lea	($FFFFFF30).w,a2
000070D2 47F8 FF10                  		lea	($FFFFFF10).w,a3
000070D6 49F8 A400                  		lea	($FFFFA400).w,a4
000070DA 343C 4000                  		move.w	#$4000,d2
000070DE 4A12                       		tst.b	(a2)
000070E0 6700                       		beq.s	locret_6952
000070E2 0892 0000                  		bclr	#0,(a2)
000070E6 6700                       		beq.s	loc_6908
000070E8 78F0                       		moveq	#-$10,d4
000070EA 7AF0                       		moveq	#-$10,d5
000070EC 6100 0000                  		bsr.w	sub_6C20
000070F0 78F0                       		moveq	#-$10,d4
000070F2 7AF0                       		moveq	#-$10,d5
000070F4 6100 0000                  		bsr.w	sub_6AD8
000070F8                            
000070F8                            loc_6908:
000070F8 0892 0001                  		bclr	#1,(a2)
000070FC 6700                       		beq.s	loc_6922
000070FE 383C 00E0                  		move.w	#$E0,d4
00007102 7AF0                       		moveq	#-$10,d5
00007104 6100 0000                  		bsr.w	sub_6C20
00007108 383C 00E0                  		move.w	#$E0,d4
0000710C 7AF0                       		moveq	#-$10,d5
0000710E 6100 0000                  		bsr.w	sub_6AD8
00007112                            
00007112                            loc_6922:
00007112 0892 0002                  		bclr	#2,(a2)
00007116 6700                       		beq.s	loc_6938
00007118 78F0                       		moveq	#-$10,d4
0000711A 7AF0                       		moveq	#-$10,d5
0000711C 6100 0000                  		bsr.w	sub_6C20
00007120 78F0                       		moveq	#-$10,d4
00007122 7AF0                       		moveq	#-$10,d5
00007124 6100 0000                  		bsr.w	sub_6B04
00007128                            
00007128                            loc_6938:
00007128 0892 0003                  		bclr	#3,(a2)
0000712C 6700                       		beq.s	locret_6952
0000712E 78F0                       		moveq	#-$10,d4
00007130 3A3C 0140                  		move.w	#$140,d5
00007134 6100 0000                  		bsr.w	sub_6C20
00007138 78F0                       		moveq	#-$10,d4
0000713A 3A3C 0140                  		move.w	#$140,d5
0000713E 6100 0000                  		bsr.w	sub_6B04
00007142                            
00007142                            locret_6952:
00007142 4E75                       		rts	
00007144                            ; End of function LoadTilesAsYouMove
00007144                            
00007144                            
00007144                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007144                            
00007144                            
00007144                            sub_6954:				; XREF: sub_6886; LoadTilesAsYouMove
00007144 4A12                       		tst.b	(a2)
00007146 6700 0000                  		beq.w	locret_69F2
0000714A 0892 0000                  		bclr	#0,(a2)
0000714E 6700                       		beq.s	loc_6972
00007150 78F0                       		moveq	#-$10,d4
00007152 7AF0                       		moveq	#-$10,d5
00007154 6100 0000                  		bsr.w	sub_6C20
00007158 78F0                       		moveq	#-$10,d4
0000715A 7AF0                       		moveq	#-$10,d5
0000715C 7C1F                       		moveq	#$1F,d6
0000715E 6100 0000                  		bsr.w	sub_6ADA
00007162                            
00007162                            loc_6972:
00007162 0892 0001                  		bclr	#1,(a2)
00007166 6700                       		beq.s	loc_698E
00007168 383C 00E0                  		move.w	#$E0,d4
0000716C 7AF0                       		moveq	#-$10,d5
0000716E 6100 0000                  		bsr.w	sub_6C20
00007172 383C 00E0                  		move.w	#$E0,d4
00007176 7AF0                       		moveq	#-$10,d5
00007178 7C1F                       		moveq	#$1F,d6
0000717A 6100 0000                  		bsr.w	sub_6ADA
0000717E                            
0000717E                            loc_698E:
0000717E 0892 0002                  		bclr	#2,(a2)
00007182 6700                       		beq.s	loc_69BE
00007184 78F0                       		moveq	#-$10,d4
00007186 7AF0                       		moveq	#-$10,d5
00007188 6100 0000                  		bsr.w	sub_6C20
0000718C 78F0                       		moveq	#-$10,d4
0000718E 7AF0                       		moveq	#-$10,d5
00007190 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00007194 322B 0004                  		move.w	4(a3),d1
00007198 0241 FFF0                  		andi.w	#-$10,d1
0000719C 9C41                       		sub.w	d1,d6
0000719E 6D00                       		blt.s	loc_69BE
000071A0 E84E                       		lsr.w	#4,d6
000071A2 0C46 000F                  		cmpi.w	#$F,d6
000071A6 6500                       		bcs.s	loc_69BA
000071A8 7C0F                       		moveq	#$F,d6
000071AA                            
000071AA                            loc_69BA:
000071AA 6100 0000                  		bsr.w	sub_6B06
000071AE                            
000071AE                            loc_69BE:
000071AE 0892 0003                  		bclr	#3,(a2)
000071B2 6700                       		beq.s	locret_69F2
000071B4 78F0                       		moveq	#-$10,d4
000071B6 3A3C 0140                  		move.w	#$140,d5
000071BA 6100 0000                  		bsr.w	sub_6C20
000071BE 78F0                       		moveq	#-$10,d4
000071C0 3A3C 0140                  		move.w	#$140,d5
000071C4 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
000071C8 322B 0004                  		move.w	4(a3),d1
000071CC 0241 FFF0                  		andi.w	#-$10,d1
000071D0 9C41                       		sub.w	d1,d6
000071D2 6D00                       		blt.s	locret_69F2
000071D4 E84E                       		lsr.w	#4,d6
000071D6 0C46 000F                  		cmpi.w	#$F,d6
000071DA 6500                       		bcs.s	loc_69EE
000071DC 7C0F                       		moveq	#$F,d6
000071DE                            
000071DE                            loc_69EE:
000071DE 6100 0000                  		bsr.w	sub_6B06
000071E2                            
000071E2                            locret_69F2:
000071E2 4E75                       		rts	
000071E4                            ; End of function sub_6954
000071E4                            
000071E4                            
000071E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000071E4                            
000071E4                            
000071E4                            sub_69F4:				; XREF: sub_6886; LoadTilesAsYouMove
000071E4 4A12                       		tst.b	(a2)
000071E6 6700 0000                  		beq.w	locret_6A80
000071EA 0892 0002                  		bclr	#2,(a2)
000071EE 6700                       		beq.s	loc_6A3E
000071F0 0C53 0010                  		cmpi.w	#$10,(a3)
000071F4 6500                       		bcs.s	loc_6A3E
000071F6 3838 F7F0                  		move.w	($FFFFF7F0).w,d4
000071FA 322B 0004                  		move.w	4(a3),d1
000071FE 0241 FFF0                  		andi.w	#-$10,d1
00007202 9841                       		sub.w	d1,d4
00007204 3F04                       		move.w	d4,-(sp)
00007206 7AF0                       		moveq	#-$10,d5
00007208 6100 0000                  		bsr.w	sub_6C20
0000720C 381F                       		move.w	(sp)+,d4
0000720E 7AF0                       		moveq	#-$10,d5
00007210 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00007214 322B 0004                  		move.w	4(a3),d1
00007218 0241 FFF0                  		andi.w	#-$10,d1
0000721C 9C41                       		sub.w	d1,d6
0000721E 6D00                       		blt.s	loc_6A3E
00007220 E84E                       		lsr.w	#4,d6
00007222 0446 000E                  		subi.w	#$E,d6
00007226 6400                       		bcc.s	loc_6A3E
00007228 4446                       		neg.w	d6
0000722A 6100 0000                  		bsr.w	sub_6B06
0000722E                            
0000722E                            loc_6A3E:
0000722E 0892 0003                  		bclr	#3,(a2)
00007232 6700                       		beq.s	locret_6A80
00007234 3838 F7F0                  		move.w	($FFFFF7F0).w,d4
00007238 322B 0004                  		move.w	4(a3),d1
0000723C 0241 FFF0                  		andi.w	#-$10,d1
00007240 9841                       		sub.w	d1,d4
00007242 3F04                       		move.w	d4,-(sp)
00007244 3A3C 0140                  		move.w	#$140,d5
00007248 6100 0000                  		bsr.w	sub_6C20
0000724C 381F                       		move.w	(sp)+,d4
0000724E 3A3C 0140                  		move.w	#$140,d5
00007252 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00007256 322B 0004                  		move.w	4(a3),d1
0000725A 0241 FFF0                  		andi.w	#-$10,d1
0000725E 9C41                       		sub.w	d1,d6
00007260 6D00                       		blt.s	locret_6A80
00007262 E84E                       		lsr.w	#4,d6
00007264 0446 000E                  		subi.w	#$E,d6
00007268 6400                       		bcc.s	locret_6A80
0000726A 4446                       		neg.w	d6
0000726C 6100 0000                  		bsr.w	sub_6B06
00007270                            
00007270                            locret_6A80:
00007270 4E75                       		rts	
00007272                            ; End of function sub_69F4
00007272                            
00007272                            ; ===========================================================================
00007272 4A12                       		tst.b	(a2)
00007274 6700                       		beq.s	locret_6AD6
00007276 0892 0002                  		bclr	#2,(a2)
0000727A 6700                       		beq.s	loc_6AAC
0000727C 383C 00D0                  		move.w	#$D0,d4
00007280 322B 0004                  		move.w	4(a3),d1
00007284 0241 FFF0                  		andi.w	#-$10,d1
00007288 9841                       		sub.w	d1,d4
0000728A 3F04                       		move.w	d4,-(sp)
0000728C 7AF0                       		moveq	#-$10,d5
0000728E 6100 0000                  		bsr.w	sub_6C3C
00007292 381F                       		move.w	(sp)+,d4
00007294 7AF0                       		moveq	#-$10,d5
00007296 7C02                       		moveq	#2,d6
00007298 6100 0000                  		bsr.w	sub_6B06
0000729C                            
0000729C                            loc_6AAC:
0000729C 0892 0003                  		bclr	#3,(a2)
000072A0 6700                       		beq.s	locret_6AD6
000072A2 383C 00D0                  		move.w	#$D0,d4
000072A6 322B 0004                  		move.w	4(a3),d1
000072AA 0241 FFF0                  		andi.w	#-$10,d1
000072AE 9841                       		sub.w	d1,d4
000072B0 3F04                       		move.w	d4,-(sp)
000072B2 3A3C 0140                  		move.w	#$140,d5
000072B6 6100 0000                  		bsr.w	sub_6C3C
000072BA 381F                       		move.w	(sp)+,d4
000072BC 3A3C 0140                  		move.w	#$140,d5
000072C0 7C02                       		moveq	#2,d6
000072C2 6100 0000                  		bsr.w	sub_6B06
000072C6                            
000072C6                            locret_6AD6:
000072C6 4E75                       		rts	
000072C8                            
000072C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000072C8                            
000072C8                            
000072C8                            sub_6AD8:				; XREF: LoadTilesAsYouMove
000072C8 7C15                       		moveq	#$15,d6
000072CA                            ; End of function sub_6AD8
000072CA                            
000072CA                            
000072CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000072CA                            
000072CA                            
000072CA                            sub_6ADA:				; XREF: sub_6954; LoadTilesFromStart2
000072CA 2E3C 0080 0000             		move.l	#$800000,d7
000072D0 2200                       		move.l	d0,d1
000072D2                            
000072D2                            loc_6AE2:
000072D2 48E7 0C00                  		movem.l	d4-d5,-(sp)
000072D6 6100 0000                  		bsr.w	sub_6BD6
000072DA 2001                       		move.l	d1,d0
000072DC 6100 0000                  		bsr.w	sub_6B32
000072E0 5801                       		addq.b	#4,d1
000072E2 0201 007F                  		andi.b	#$7F,d1
000072E6 4CDF 0030                  		movem.l	(sp)+,d4-d5
000072EA 0645 0010                  		addi.w	#$10,d5
000072EE 51CE FFE2                  		dbf	d6,loc_6AE2
000072F2 4E75                       		rts	
000072F4                            ; End of function sub_6ADA
000072F4                            
000072F4                            
000072F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000072F4                            
000072F4                            
000072F4                            sub_6B04:				; XREF: LoadTilesAsYouMove
000072F4 7C0F                       		moveq	#$F,d6
000072F6                            ; End of function sub_6B04
000072F6                            
000072F6                            
000072F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000072F6                            
000072F6                            
000072F6                            sub_6B06:				; XREF: sub_6954
000072F6 2E3C 0080 0000             		move.l	#$800000,d7
000072FC 2200                       		move.l	d0,d1
000072FE                            
000072FE                            loc_6B0E:
000072FE 48E7 0C00                  		movem.l	d4-d5,-(sp)
00007302 6100 0000                  		bsr.w	sub_6BD6
00007306 2001                       		move.l	d1,d0
00007308 6100 0000                  		bsr.w	sub_6B32
0000730C 0641 0100                  		addi.w	#$100,d1
00007310 0241 0FFF                  		andi.w	#$FFF,d1
00007314 4CDF 0030                  		movem.l	(sp)+,d4-d5
00007318 0644 0010                  		addi.w	#$10,d4
0000731C 51CE FFE0                  		dbf	d6,loc_6B0E
00007320 4E75                       		rts	
00007322                            ; End of function sub_6B06
00007322                            
00007322                            
00007322                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007322                            
00007322                            
00007322                            sub_6B32:				; XREF: sub_6ADA; sub_6B06
00007322 8042                       		or.w	d2,d0
00007324 4840                       		swap	d0
00007326 0810 0004                  		btst	#4,(a0)
0000732A 6600                       		bne.s	loc_6B6E
0000732C 0810 0003                  		btst	#3,(a0)
00007330 6600                       		bne.s	loc_6B4E
00007332 2A80                       		move.l	d0,(a5)
00007334 2C99                       		move.l	(a1)+,(a6)
00007336 D087                       		add.l	d7,d0
00007338 2A80                       		move.l	d0,(a5)
0000733A 2C99                       		move.l	(a1)+,(a6)
0000733C 4E75                       		rts	
0000733E                            ; ===========================================================================
0000733E                            
0000733E                            loc_6B4E:
0000733E 2A80                       		move.l	d0,(a5)
00007340 2819                       		move.l	(a1)+,d4
00007342 0A84 0800 0800             		eori.l	#$8000800,d4
00007348 4844                       		swap	d4
0000734A 2C84                       		move.l	d4,(a6)
0000734C D087                       		add.l	d7,d0
0000734E 2A80                       		move.l	d0,(a5)
00007350 2819                       		move.l	(a1)+,d4
00007352 0A84 0800 0800             		eori.l	#$8000800,d4
00007358 4844                       		swap	d4
0000735A 2C84                       		move.l	d4,(a6)
0000735C 4E75                       		rts	
0000735E                            ; ===========================================================================
0000735E                            
0000735E                            loc_6B6E:
0000735E 0810 0003                  		btst	#3,(a0)
00007362 6600                       		bne.s	loc_6B90
00007364 2A80                       		move.l	d0,(a5)
00007366 2A19                       		move.l	(a1)+,d5
00007368 2819                       		move.l	(a1)+,d4
0000736A 0A84 1000 1000             		eori.l	#$10001000,d4
00007370 2C84                       		move.l	d4,(a6)
00007372 D087                       		add.l	d7,d0
00007374 2A80                       		move.l	d0,(a5)
00007376 0A85 1000 1000             		eori.l	#$10001000,d5
0000737C 2C85                       		move.l	d5,(a6)
0000737E 4E75                       		rts	
00007380                            ; ===========================================================================
00007380                            
00007380                            loc_6B90:
00007380 2A80                       		move.l	d0,(a5)
00007382 2A19                       		move.l	(a1)+,d5
00007384 2819                       		move.l	(a1)+,d4
00007386 0A84 1800 1800             		eori.l	#$18001800,d4
0000738C 4844                       		swap	d4
0000738E 2C84                       		move.l	d4,(a6)
00007390 D087                       		add.l	d7,d0
00007392 2A80                       		move.l	d0,(a5)
00007394 0A85 1800 1800             		eori.l	#$18001800,d5
0000739A 4845                       		swap	d5
0000739C 2C85                       		move.l	d5,(a6)
0000739E 4E75                       		rts	
000073A0                            ; End of function sub_6B32
000073A0                            
000073A0                            ; ===========================================================================
000073A0 4E75                       		rts	
000073A2                            ; ===========================================================================
000073A2 2A80                       		move.l	d0,(a5)
000073A4 3A3C 2000                  		move.w	#$2000,d5
000073A8 3819                       		move.w	(a1)+,d4
000073AA D845                       		add.w	d5,d4
000073AC 3C84                       		move.w	d4,(a6)
000073AE 3819                       		move.w	(a1)+,d4
000073B0 D845                       		add.w	d5,d4
000073B2 3C84                       		move.w	d4,(a6)
000073B4 D087                       		add.l	d7,d0
000073B6 2A80                       		move.l	d0,(a5)
000073B8 3819                       		move.w	(a1)+,d4
000073BA D845                       		add.w	d5,d4
000073BC 3C84                       		move.w	d4,(a6)
000073BE 3819                       		move.w	(a1)+,d4
000073C0 D845                       		add.w	d5,d4
000073C2 3C84                       		move.w	d4,(a6)
000073C4 4E75                       		rts	
000073C6                            
000073C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000073C6                            
000073C6                            
000073C6                            sub_6BD6:				; XREF: sub_6ADA; sub_6B06
000073C6 43F8 B000                  		lea	($FFFFB000).w,a1
000073CA D86B 0004                  		add.w	4(a3),d4
000073CE DA53                       		add.w	(a3),d5
000073D0 3604                       		move.w	d4,d3
000073D2 E24B                       		lsr.w	#1,d3
000073D4 0243 0380                  		andi.w	#$380,d3
000073D8 E64D                       		lsr.w	#3,d5
000073DA 3005                       		move.w	d5,d0
000073DC EA48                       		lsr.w	#5,d0
000073DE 0240 007F                  		andi.w	#$7F,d0
000073E2 D043                       		add.w	d3,d0
000073E4 76FF                       		moveq	#-1,d3
000073E6 1634 0000                  		move.b	(a4,d0.w),d3
000073EA 6700                       		beq.s	locret_6C1E
000073EC 5303                       		subq.b	#1,d3
000073EE 0243 007F                  		andi.w	#$7F,d3
000073F2 EE5B                       		ror.w	#7,d3
000073F4 D844                       		add.w	d4,d4
000073F6 0244 01E0                  		andi.w	#$1E0,d4
000073FA 0245 001E                  		andi.w	#$1E,d5
000073FE D644                       		add.w	d4,d3
00007400 D645                       		add.w	d5,d3
00007402 2043                       		movea.l	d3,a0
00007404 3610                       		move.w	(a0),d3
00007406 0243 03FF                  		andi.w	#$3FF,d3
0000740A E74B                       		lsl.w	#3,d3
0000740C D2C3                       		adda.w	d3,a1
0000740E                            
0000740E                            locret_6C1E:
0000740E 4E75                       		rts	
00007410                            ; End of function sub_6BD6
00007410                            
00007410                            
00007410                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007410                            
00007410                            
00007410                            sub_6C20:				; XREF: LoadTilesAsYouMove; et al
00007410 D86B 0004                  		add.w	4(a3),d4
00007414 DA53                       		add.w	(a3),d5
00007416 0244 00F0                  		andi.w	#$F0,d4
0000741A 0245 01F0                  		andi.w	#$1F0,d5
0000741E E94C                       		lsl.w	#4,d4
00007420 E44D                       		lsr.w	#2,d5
00007422 D845                       		add.w	d5,d4
00007424 7003                       		moveq	#3,d0
00007426 4840                       		swap	d0
00007428 3004                       		move.w	d4,d0
0000742A 4E75                       		rts	
0000742C                            ; End of function sub_6C20
0000742C                            
0000742C                            
0000742C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000742C                            ; not used
0000742C                            
0000742C                            
0000742C                            sub_6C3C:
0000742C D86B 0004                  		add.w	4(a3),d4
00007430 DA53                       		add.w	(a3),d5
00007432 0244 00F0                  		andi.w	#$F0,d4
00007436 0245 01F0                  		andi.w	#$1F0,d5
0000743A E94C                       		lsl.w	#4,d4
0000743C E44D                       		lsr.w	#2,d5
0000743E D845                       		add.w	d5,d4
00007440 7002                       		moveq	#2,d0
00007442 4840                       		swap	d0
00007444 3004                       		move.w	d4,d0
00007446 4E75                       		rts	
00007448                            ; End of function sub_6C3C
00007448                            
00007448                            ; ---------------------------------------------------------------------------
00007448                            ; Subroutine to	load tiles as soon as the level	appears
00007448                            ; ---------------------------------------------------------------------------
00007448                            
00007448                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007448                            
00007448                            
00007448                            LoadTilesFromStart:			; XREF: Level; EndingSequence
00007448 4BF9 00C0 0004             		lea	($C00004).l,a5
0000744E 4DF9 00C0 0000             		lea	($C00000).l,a6
00007454 47F8 F700                  		lea	($FFFFF700).w,a3
00007458 49F8 A400                  		lea	($FFFFA400).w,a4
0000745C 343C 4000                  		move.w	#$4000,d2
00007460 6100                       		bsr.s	LoadTilesFromStart2
00007462 47F8 F708                  		lea	($FFFFF708).w,a3
00007466 49F8 A440                  		lea	($FFFFA440).w,a4
0000746A 343C 6000                  		move.w	#$6000,d2
0000746E                            ; End of function LoadTilesFromStart
0000746E                            
0000746E                            
0000746E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000746E                            
0000746E                            
0000746E                            LoadTilesFromStart2:			; XREF: LoadTilesFromStart
0000746E 78F0                       		moveq	#-$10,d4
00007470 7C0F                       		moveq	#$F,d6
00007472                            
00007472                            loc_6C82:
00007472 48E7 0E00                  		movem.l	d4-d6,-(sp)
00007476 7A00                       		moveq	#0,d5
00007478 3204                       		move.w	d4,d1
0000747A 6100 FF94                  		bsr.w	sub_6C20
0000747E 3801                       		move.w	d1,d4
00007480 7A00                       		moveq	#0,d5
00007482 7C1F                       		moveq	#$1F,d6
00007484 6100 FE44                  		bsr.w	sub_6ADA
00007488 4CDF 0070                  		movem.l	(sp)+,d4-d6
0000748C 0644 0010                  		addi.w	#$10,d4
00007490 51CE FFE0                  		dbf	d6,loc_6C82
00007494 4E75                       		rts	
00007496                            ; End of function LoadTilesFromStart2
00007496                            
00007496                            ; ---------------------------------------------------------------------------
00007496                            ; Main Load Block loading subroutine
00007496                            ; ---------------------------------------------------------------------------
00007496                            
00007496                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007496                            
00007496                            
00007496                            MainLoadBlockLoad:			; XREF: Level; EndingSequence
00007496 7000                       		moveq	#0,d0
00007498 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000749C E948                       		lsl.w	#4,d0
0000749E 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
000074A4 45F2 0000                  		lea	(a2,d0.w),a2
000074A8 2F0A                       		move.l	a2,-(sp)
000074AA 588A                       		addq.l	#4,a2
000074AC 205A                       		movea.l	(a2)+,a0
000074AE 43F8 B000                  		lea	($FFFFB000).w,a1 ; RAM address for 16x16 mappings
000074B2 303C 0000                  		move.w	#0,d0
000074B6 6100 A464                  		bsr.w	EniDec
000074BA 205A                       		movea.l	(a2)+,a0
000074BC 43F9 00FF 0000             		lea	($FF0000).l,a1	; RAM address for 256x256 mappings
000074C2 6100 A5D6                  		bsr.w	KosDec
000074C6 6100 0000                  		bsr.w	LevelLayoutLoad
000074CA 301A                       		move.w	(a2)+,d0
000074CC 3012                       		move.w	(a2),d0
000074CE 0240 00FF                  		andi.w	#$FF,d0
000074D2 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; is level SBZ3 (LZ4) ?
000074D8 6600                       		bne.s	MLB_ChkSBZPal	; if not, branch
000074DA 700C                       		moveq	#$C,d0		; use SB3 pallet
000074DC                            
000074DC                            MLB_ChkSBZPal:
000074DC 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2?
000074E2 6700                       		beq.s	MLB_UsePal0E	; if yes, branch
000074E4 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; is level FZ?
000074EA 6600                       		bne.s	MLB_NormalPal	; if not, branch
000074EC                            
000074EC                            MLB_UsePal0E:
000074EC 700E                       		moveq	#$E,d0		; use SBZ2/FZ pallet
000074EE                            
000074EE                            MLB_NormalPal:
000074EE 6100 ADD6                  		bsr.w	PalLoad1	; load pallet (based on	d0)
000074F2 245F                       		movea.l	(sp)+,a2
000074F4 584A                       		addq.w	#4,a2
000074F6 7000                       		moveq	#0,d0
000074F8 1012                       		move.b	(a2),d0
000074FA 6700                       		beq.s	locret_6D10
000074FC 6100 A280                  		bsr.w	LoadPLC		; load pattern load cues
00007500                            
00007500                            locret_6D10:
00007500 4E75                       		rts	
00007502                            ; End of function MainLoadBlockLoad
00007502                            
00007502                            ; ---------------------------------------------------------------------------
00007502                            ; Level	layout loading subroutine
00007502                            ; ---------------------------------------------------------------------------
00007502                            
00007502                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007502                            
00007502                            
00007502                            LevelLayoutLoad:			; XREF: TitleScreen; MainLoadBlockLoad
00007502 47F8 A400                  		lea	($FFFFA400).w,a3
00007506 323C 01FF                  		move.w	#$1FF,d1
0000750A 7000                       		moveq	#0,d0
0000750C                            
0000750C                            LevLoad_ClrRam:
0000750C 26C0                       		move.l	d0,(a3)+
0000750E 51C9 FFFC                  		dbf	d1,LevLoad_ClrRam ; clear the RAM ($FFFFA400-A7FF)
00007512                            
00007512 47F8 A400                  		lea	($FFFFA400).w,a3 ; RAM address for level layout
00007516 7200                       		moveq	#0,d1
00007518 6100 0000                  		bsr.w	LevelLayoutLoad2 ; load	level layout into RAM
0000751C 47F8 A440                  		lea	($FFFFA440).w,a3 ; RAM address for background layout
00007520 7202                       		moveq	#2,d1
00007522                            ; End of function LevelLayoutLoad
00007522                            
00007522                            ; "LevelLayoutLoad2" is	run twice - for	the level and the background
00007522                            
00007522                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007522                            
00007522                            
00007522                            LevelLayoutLoad2:			; XREF: LevelLayoutLoad
00007522 3038 FE10                  		move.w	($FFFFFE10).w,d0
00007526 ED08                       		lsl.b	#6,d0
00007528 EA48                       		lsr.w	#5,d0
0000752A 3400                       		move.w	d0,d2
0000752C D040                       		add.w	d0,d0
0000752E D042                       		add.w	d2,d0
00007530 D041                       		add.w	d1,d0
00007532 43F9 0000 0000             		lea	(Level_Index).l,a1
00007538 3031 0000                  		move.w	(a1,d0.w),d0
0000753C 43F1 0000                  		lea	(a1,d0.w),a1
00007540 7200                       		moveq	#0,d1
00007542 3401                       		move.w	d1,d2
00007544 1219                       		move.b	(a1)+,d1	; load level width (in tiles)
00007546 1419                       		move.b	(a1)+,d2	; load level height (in	tiles)
00007548                            
00007548                            LevLoad_NumRows:
00007548 3001                       		move.w	d1,d0
0000754A 204B                       		movea.l	a3,a0
0000754C                            
0000754C                            LevLoad_Row:
0000754C 10D9                       		move.b	(a1)+,(a0)+
0000754E 51C8 FFFC                  		dbf	d0,LevLoad_Row	; load 1 row
00007552 47EB 0080                  		lea	$80(a3),a3	; do next row
00007556 51CA FFF0                  		dbf	d2,LevLoad_NumRows ; repeat for	number of rows
0000755A 4E75                       		rts	
0000755C                            ; End of function LevelLayoutLoad2
0000755C                            
0000755C                            ; ---------------------------------------------------------------------------
0000755C                            ; Dynamic screen resize	loading	subroutine
0000755C                            ; ---------------------------------------------------------------------------
0000755C                            
0000755C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000755C                            
0000755C                            
0000755C                            DynScrResizeLoad:			; XREF: DeformBgLayer
0000755C 7000                       		moveq	#0,d0
0000755E 1038 FE10                  		move.b	($FFFFFE10).w,d0
00007562 D040                       		add.w	d0,d0
00007564 303B 0000                  		move.w	Resize_Index(pc,d0.w),d0
00007568 4EBB 0000                  		jsr	Resize_Index(pc,d0.w)
0000756C 7202                       		moveq	#2,d1
0000756E 3038 F726                  		move.w	($FFFFF726).w,d0
00007572 9078 F72E                  		sub.w	($FFFFF72E).w,d0
00007576 6700                       		beq.s	locret_6DAA
00007578 6400                       		bcc.s	loc_6DAC
0000757A 4441                       		neg.w	d1
0000757C 3038 F704                  		move.w	($FFFFF704).w,d0
00007580 B078 F726                  		cmp.w	($FFFFF726).w,d0
00007584 6300                       		bls.s	loc_6DA0
00007586 31C0 F72E                  		move.w	d0,($FFFFF72E).w
0000758A 0278 FFFE F72E             		andi.w	#-2,($FFFFF72E).w
00007590                            
00007590                            loc_6DA0:
00007590 D378 F72E                  		add.w	d1,($FFFFF72E).w
00007594 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
0000759A                            
0000759A                            locret_6DAA:
0000759A 4E75                       		rts	
0000759C                            ; ===========================================================================
0000759C                            
0000759C                            loc_6DAC:				; XREF: DynScrResizeLoad
0000759C 3038 F704                  		move.w	($FFFFF704).w,d0
000075A0 5040                       		addq.w	#8,d0
000075A2 B078 F72E                  		cmp.w	($FFFFF72E).w,d0
000075A6 6500                       		bcs.s	loc_6DC4
000075A8 0838 0001 D022             		btst	#1,($FFFFD022).w
000075AE 6700                       		beq.s	loc_6DC4
000075B0 D241                       		add.w	d1,d1
000075B2 D241                       		add.w	d1,d1
000075B4                            
000075B4                            loc_6DC4:
000075B4 D378 F72E                  		add.w	d1,($FFFFF72E).w
000075B8 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
000075BE 4E75                       		rts	
000075C0                            ; End of function DynScrResizeLoad
000075C0                            
000075C0                            ; ===========================================================================
000075C0                            ; ---------------------------------------------------------------------------
000075C0                            ; Offset index for dynamic screen resizing
000075C0                            ; ---------------------------------------------------------------------------
000075C0 0000 0000                  Resize_Index:	dc.w Resize_GHZ-Resize_Index, Resize_LZ-Resize_Index
000075C4 0000 0000                  		dc.w Resize_MZ-Resize_Index, Resize_SLZ-Resize_Index
000075C8 0000 0000                  		dc.w Resize_SYZ-Resize_Index, Resize_SBZ-Resize_Index
000075CC 0000 0000                  		dc.w Resize_Ending-Resize_Index, Resize_GHZ-Resize_Index
000075D0                            ; ===========================================================================
000075D0                            ; ---------------------------------------------------------------------------
000075D0                            ; Green	Hill Zone dynamic screen resizing
000075D0                            ; ---------------------------------------------------------------------------
000075D0                            
000075D0                            Resize_GHZ:				; XREF: Resize_Index
000075D0 7000                       		moveq	#0,d0
000075D2 1038 FE11                  		move.b	($FFFFFE11).w,d0
000075D6 D040                       		add.w	d0,d0
000075D8 303B 0000                  		move.w	Resize_GHZx(pc,d0.w),d0
000075DC 4EFB 0000                  		jmp	Resize_GHZx(pc,d0.w)
000075E0                            ; ===========================================================================
000075E0 0000                       Resize_GHZx:	dc.w Resize_GHZ1-Resize_GHZx
000075E2 0000                       		dc.w Resize_GHZ2-Resize_GHZx
000075E4 0000                       		dc.w Resize_GHZ3-Resize_GHZx
000075E6                            ; ===========================================================================
000075E6                            
000075E6                            Resize_GHZ1:
000075E6 31FC 0300 F726             		move.w	#$300,($FFFFF726).w ; set lower	y-boundary
000075EC 0C78 1780 F700             		cmpi.w	#$1780,($FFFFF700).w ; has the camera reached $1780 on x-axis?
000075F2 6500                       		bcs.s	locret_6E08	; if not, branch
000075F4 31FC 0400 F726             		move.w	#$400,($FFFFF726).w ; set lower	y-boundary
000075FA                            
000075FA                            locret_6E08:
000075FA 4E75                       		rts	
000075FC                            ; ===========================================================================
000075FC                            
000075FC                            Resize_GHZ2:
000075FC 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00007602 0C78 0ED0 F700             		cmpi.w	#$ED0,($FFFFF700).w
00007608 6500                       		bcs.s	locret_6E3A
0000760A 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
00007610 0C78 1600 F700             		cmpi.w	#$1600,($FFFFF700).w
00007616 6500                       		bcs.s	locret_6E3A
00007618 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
0000761E 0C78 1C00 F700             		cmpi.w	#$1C00,($FFFFF700).w
00007624 6500                       		bcs.s	locret_6E3A
00007626 31FC 0100 F726             		move.w	#$100,($FFFFF726).w
0000762C 0C78 1D00 F700             		cmpi.w	#$1D00,($FFFFF700).w
00007632 6500                       		bcs.s	locret_6E3A
00007634 31FC 0020 F726             		move.w	#$20,($FFFFF726).w
0000763A                            		
0000763A                            locret_6E3A:
0000763A 4E75                       		rts	
0000763C                            ; ===========================================================================
0000763C                            
0000763C                            Resize_GHZ3:
0000763C 7000                       		moveq	#0,d0
0000763E 1038 F742                  		move.b	($FFFFF742).w,d0
00007642 303B 0000                  		move.w	off_6E4A(pc,d0.w),d0
00007646 4EFB 0000                  		jmp	off_6E4A(pc,d0.w)
0000764A                            ; ===========================================================================
0000764A 0000                       off_6E4A:	dc.w Resize_GHZ3main-off_6E4A
0000764C 0000                       		dc.w Resize_GHZ3boss-off_6E4A
0000764E 0000                       		dc.w Resize_GHZ3end-off_6E4A
00007650                            ; ===========================================================================
00007650                            
00007650                            Resize_GHZ3main:
00007650 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00007656 0C78 0380 F700             		cmpi.w	#$380,($FFFFF700).w
0000765C 6500                       		bcs.s	locret_6E96
0000765E 31FC 0310 F726             		move.w	#$310,($FFFFF726).w
00007664 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
0000766A 6500                       		bcs.s	locret_6E96
0000766C 0C78 0280 F704             		cmpi.w	#$280,($FFFFF704).w
00007672 6500                       		bcs.s	loc_6E98
00007674 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
0000767A 0C78 1380 F700             		cmpi.w	#$1380,($FFFFF700).w
00007680 6400                       		bcc.s	loc_6E8E
00007682 31FC 04C0 F726             		move.w	#$4C0,($FFFFF726).w
00007688 31FC 04C0 F72E             		move.w	#$4C0,($FFFFF72E).w
0000768E                            
0000768E                            loc_6E8E:
0000768E 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
00007694 6400                       		bcc.s	loc_6E98
00007696                            
00007696                            locret_6E96:
00007696 4E75                       		rts	
00007698                            ; ===========================================================================
00007698                            
00007698                            loc_6E98:
00007698 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
0000769E 5438 F742                  		addq.b	#2,($FFFFF742).w
000076A2 4E75                       		rts	
000076A4                            ; ===========================================================================
000076A4                            
000076A4                            Resize_GHZ3boss:
000076A4 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
000076AA 6400                       		bcc.s	loc_6EB0
000076AC 5538 F742                  		subq.b	#2,($FFFFF742).w
000076B0                            
000076B0                            loc_6EB0:
000076B0 0C78 2960 F700             		cmpi.w	#$2960,($FFFFF700).w
000076B6 6500                       		bcs.s	locret_6EE8
000076B8 6100 0000                  		bsr.w	SingleObjLoad
000076BC 6600                       		bne.s	loc_6ED0
000076BE 12BC 003D                  		move.b	#$3D,0(a1)	; load GHZ boss	object
000076C2 337C 2A60 0008             		move.w	#$2A60,8(a1)
000076C8 337C 0280 000C             		move.w	#$280,$C(a1)
000076CE                            
000076CE                            loc_6ED0:
000076CE 303C 008C                  		move.w	#$8C,d0
000076D2 6100 9EC0                  		bsr.w	PlaySound	; play boss music
000076D6 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000076DC 5438 F742                  		addq.b	#2,($FFFFF742).w
000076E0 7011                       		moveq	#$11,d0
000076E2 6000 A09A                  		bra.w	LoadPLC		; load boss patterns
000076E6                            ; ===========================================================================
000076E6                            
000076E6                            locret_6EE8:
000076E6 4E75                       		rts	
000076E8                            ; ===========================================================================
000076E8                            
000076E8                            Resize_GHZ3end:
000076E8 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
000076EE 4E75                       		rts	
000076F0                            ; ===========================================================================
000076F0                            ; ---------------------------------------------------------------------------
000076F0                            ; Labyrinth Zone dynamic screen	resizing
000076F0                            ; ---------------------------------------------------------------------------
000076F0                            
000076F0                            Resize_LZ:				; XREF: Resize_Index
000076F0 7000                       		moveq	#0,d0
000076F2 1038 FE11                  		move.b	($FFFFFE11).w,d0
000076F6 D040                       		add.w	d0,d0
000076F8 303B 0000                  		move.w	Resize_LZx(pc,d0.w),d0
000076FC 4EFB 0000                  		jmp	Resize_LZx(pc,d0.w)
00007700                            ; ===========================================================================
00007700 0000                       Resize_LZx:	dc.w Resize_LZ12-Resize_LZx
00007702 0000                       		dc.w Resize_LZ12-Resize_LZx
00007704 0000                       		dc.w Resize_LZ3-Resize_LZx
00007706 0000                       		dc.w Resize_SBZ3-Resize_LZx
00007708                            ; ===========================================================================
00007708                            
00007708                            Resize_LZ12:
00007708 4E75                       		rts	
0000770A                            ; ===========================================================================
0000770A                            
0000770A                            Resize_LZ3:
0000770A 7000                       		moveq	#0,d0
0000770C 1038 F742                  		move.b	($FFFFF742).w,d0
00007710 303B 0000                  		move.w	off_6E4A2(pc,d0.w),d0
00007714 4EFB 0000                  		jmp	off_6E4A2(pc,d0.w)
00007718                            ; ===========================================================================
00007718                            off_6E4A2:	
00007718 0000                       		dc.w Resize_LZ3boss-off_6E4A2
0000771A 0000                       		dc.w Resize_LZ3end-off_6E4A2
0000771C                            ; ===========================================================================
0000771C                            Resize_LZ3boss:
0000771C 4A38 F742                  		tst.b	($FFFFF742).w
00007720 6600                       		bne.s	locret_6F62
00007722 0C78 1CA0 F700             		cmpi.w	#$1CA0,($FFFFF700).w
00007728 6500                       		bcs.s	locret_6F62
0000772A 31FC 0640 F726             		move.w	#$640,($FFFFF726).w ; set lower	y-boundary
00007730 31FC 0000 F634             		move.w	#0,($FFFFF634).w ; disable pallet cycling
00007736                            
00007736 6100 0000                  		bsr.w	SingleObjLoad
0000773A 6600                       		bne.s	loc_6F4A
0000773C 12BC 0077                  		move.b	#$77,0(a1)	; load LZ boss object
00007740 337C 1EA0 0008             		move.w	#$1EA0,8(a1)
00007746 337C 06E0 000C             		move.w	#$6E0,$C(a1)
0000774C                            loc_6F4A:
0000774C 303C 008C                  		move.w	#$8C,d0
00007750 6100 9E42                  		bsr.w	PlaySound	; play boss music
00007754 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
0000775A 5438 F742                  		addq.b	#2,($FFFFF742).w
0000775E 7022                       		moveq	#$22,d0
00007760 6000 A01C                  		bra.w	LoadPLC		; load boss patterns
00007764                            ; ===========================================================================
00007764                            
00007764                            locret_6F62:
00007764 4E75                       		rts	
00007766                            ; ===========================================================================
00007766                            
00007766                            Resize_LZ3end:
00007766 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
0000776C 4E75                       		rts	
0000776E                            ; ===========================================================================
0000776E                            
0000776E                            Resize_SBZ3:
0000776E 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
00007774 6500                       		bcs.s	locret_6F8C
00007776 0C78 0018 D00C             		cmpi.w	#$18,($FFFFD00C).w ; has Sonic reached the top of the level?
0000777C 6400                       		bcc.s	locret_6F8C	; if not, branch
0000777E 4238 FE30                  		clr.b	($FFFFFE30).w
00007782 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
00007788 31FC 0502 FE10             		move.w	#$502,($FFFFFE10).w ; set level	number to 0502 (FZ)
0000778E 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; freeze Sonic
00007794                            
00007794                            locret_6F8C:
00007794 4E75                       		rts	
00007796                            ; ===========================================================================
00007796                            ; ---------------------------------------------------------------------------
00007796                            ; Marble Zone dynamic screen resizing
00007796                            ; ---------------------------------------------------------------------------
00007796                            
00007796                            Resize_MZ:				; XREF: Resize_Index
00007796 7000                       		moveq	#0,d0
00007798 1038 FE11                  		move.b	($FFFFFE11).w,d0
0000779C D040                       		add.w	d0,d0
0000779E 303B 0000                  		move.w	Resize_MZx(pc,d0.w),d0
000077A2 4EFB 0000                  		jmp	Resize_MZx(pc,d0.w)
000077A6                            ; ===========================================================================
000077A6 0000                       Resize_MZx:	dc.w Resize_MZ1-Resize_MZx
000077A8 0000                       		dc.w Resize_MZ2-Resize_MZx
000077AA 0000                       		dc.w Resize_MZ3-Resize_MZx
000077AC                            ; ===========================================================================
000077AC                            
000077AC                            Resize_MZ1:
000077AC 7000                       		moveq	#0,d0
000077AE 1038 F742                  		move.b	($FFFFF742).w,d0
000077B2 303B 0000                  		move.w	off_6FB2(pc,d0.w),d0
000077B6 4EFB 0000                  		jmp	off_6FB2(pc,d0.w)
000077BA                            ; ===========================================================================
000077BA 0000                       off_6FB2:	dc.w loc_6FBA-off_6FB2
000077BC 0000                       		dc.w loc_6FEA-off_6FB2
000077BE 0000                       		dc.w loc_702E-off_6FB2
000077C0 0000                       		dc.w loc_7050-off_6FB2
000077C2                            ; ===========================================================================
000077C2                            
000077C2                            loc_6FBA:
000077C2 31FC 01D0 F726             		move.w	#$1D0,($FFFFF726).w
000077C8 0C78 0700 F700             		cmpi.w	#$700,($FFFFF700).w
000077CE 6500                       		bcs.s	locret_6FE8
000077D0 31FC 0220 F726             		move.w	#$220,($FFFFF726).w
000077D6 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
000077DC 6500                       		bcs.s	locret_6FE8
000077DE 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
000077E4 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
000077EA 6500                       		bcs.s	locret_6FE8
000077EC 5438 F742                  		addq.b	#2,($FFFFF742).w
000077F0                            
000077F0                            locret_6FE8:
000077F0 4E75                       		rts	
000077F2                            ; ===========================================================================
000077F2                            
000077F2                            loc_6FEA:
000077F2 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
000077F8 6400                       		bcc.s	loc_6FF8
000077FA 5538 F742                  		subq.b	#2,($FFFFF742).w
000077FE 4E75                       		rts	
00007800                            ; ===========================================================================
00007800                            
00007800                            loc_6FF8:
00007800 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
00007806 0C78 0E00 F700             		cmpi.w	#$E00,($FFFFF700).w
0000780C 6400                       		bcc.s	locret_702C
0000780E 31FC 0340 F72C             		move.w	#$340,($FFFFF72C).w
00007814 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
0000781A 0C78 0A90 F700             		cmpi.w	#$A90,($FFFFF700).w
00007820 6400                       		bcc.s	locret_702C
00007822 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
00007828 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
0000782E 6500                       		bcs.s	locret_702C
00007830 5438 F742                  		addq.b	#2,($FFFFF742).w
00007834                            
00007834                            locret_702C:
00007834 4E75                       		rts	
00007836                            ; ===========================================================================
00007836                            
00007836                            loc_702E:
00007836 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
0000783C 6400                       		bcc.s	loc_703C
0000783E 5538 F742                  		subq.b	#2,($FFFFF742).w
00007842 4E75                       		rts	
00007844                            ; ===========================================================================
00007844                            
00007844                            loc_703C:
00007844 0C78 0500 F704             		cmpi.w	#$500,($FFFFF704).w
0000784A 6500                       		bcs.s	locret_704E
0000784C 31FC 0500 F72C             		move.w	#$500,($FFFFF72C).w
00007852 5438 F742                  		addq.b	#2,($FFFFF742).w
00007856                            
00007856                            locret_704E:
00007856 4E75                       		rts	
00007858                            ; ===========================================================================
00007858                            
00007858                            loc_7050:
00007858 0C78 0E70 F700             		cmpi.w	#$E70,($FFFFF700).w
0000785E 6500                       		bcs.s	locret_7072
00007860 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
00007866 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
0000786C 0C78 1430 F700             		cmpi.w	#$1430,($FFFFF700).w
00007872 6500                       		bcs.s	locret_7072
00007874 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
0000787A                            
0000787A                            locret_7072:
0000787A 4E75                       		rts	
0000787C                            ; ===========================================================================
0000787C                            
0000787C                            Resize_MZ2:
0000787C 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
00007882 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
00007888 6500                       		bcs.s	locret_7088
0000788A 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
00007890                            
00007890                            locret_7088:
00007890 4E75                       		rts	
00007892                            ; ===========================================================================
00007892                            
00007892                            Resize_MZ3:
00007892 7000                       		moveq	#0,d0
00007894 1038 F742                  		move.b	($FFFFF742).w,d0
00007898 303B 0000                  		move.w	off_7098(pc,d0.w),d0
0000789C 4EFB 0000                  		jmp	off_7098(pc,d0.w)
000078A0                            ; ===========================================================================
000078A0 0000                       off_7098:	dc.w Resize_MZ3boss-off_7098
000078A2 0000                       		dc.w Resize_MZ3end-off_7098
000078A4                            ; ===========================================================================
000078A4                            
000078A4                            Resize_MZ3boss:
000078A4 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
000078AA 0C78 1560 F700             		cmpi.w	#$1560,($FFFFF700).w
000078B0 6500                       		bcs.s	locret_70E8
000078B2 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
000078B8 0C78 17F0 F700             		cmpi.w	#$17F0,($FFFFF700).w
000078BE 6500                       		bcs.s	locret_70E8
000078C0 6100 0000                  		bsr.w	SingleObjLoad
000078C4 6600                       		bne.s	loc_70D0
000078C6 12BC 0073                  		move.b	#$73,0(a1)	; load MZ boss object
000078CA 337C 19F0 0008             		move.w	#$19F0,8(a1)
000078D0 337C 022C 000C             		move.w	#$22C,$C(a1)
000078D6                            
000078D6                            loc_70D0:
000078D6 303C 008C                  		move.w	#$8C,d0
000078DA 6100 9CB8                  		bsr.w	PlaySound	; play boss music
000078DE 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000078E4 5438 F742                  		addq.b	#2,($FFFFF742).w
000078E8 7011                       		moveq	#$11,d0
000078EA 6000 9E92                  		bra.w	LoadPLC		; load boss patterns
000078EE                            ; ===========================================================================
000078EE                            
000078EE                            locret_70E8:
000078EE 4E75                       		rts	
000078F0                            ; ===========================================================================
000078F0                            
000078F0                            Resize_MZ3end:
000078F0 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
000078F6 4E75                       		rts	
000078F8                            ; ===========================================================================
000078F8                            ; ---------------------------------------------------------------------------
000078F8                            ; Star Light Zone dynamic screen resizing
000078F8                            ; ---------------------------------------------------------------------------
000078F8                            
000078F8                            Resize_SLZ:				; XREF: Resize_Index
000078F8 7000                       		moveq	#0,d0
000078FA 1038 FE11                  		move.b	($FFFFFE11).w,d0
000078FE D040                       		add.w	d0,d0
00007900 303B 0000                  		move.w	Resize_SLZx(pc,d0.w),d0
00007904 4EFB 0000                  		jmp	Resize_SLZx(pc,d0.w)
00007908                            ; ===========================================================================
00007908 0000                       Resize_SLZx:	dc.w Resize_SLZ1-Resize_SLZx
0000790A 0000                       		dc.w Resize_SLZ2-Resize_SLZx
0000790C 0000                       		dc.w Resize_SLZ3-Resize_SLZx
0000790E                            ; ===========================================================================
0000790E                            
0000790E                            Resize_SLZ1:
0000790E 31FC 0100 F726             		move.w	#$100,($FFFFF726).w ; set lower	y-boundary
00007914 4E75                       		rts	
00007916                            
00007916                            Resize_SLZ2:
00007916 4E75                       		rts	
00007918                            ; ===========================================================================
00007918                            
00007918                            Resize_SLZ3:
00007918 7000                       		moveq	#0,d0
0000791A 1038 F742                  		move.b	($FFFFF742).w,d0
0000791E 303B 0000                  		move.w	off_7118(pc,d0.w),d0
00007922 4EFB 0000                  		jmp	off_7118(pc,d0.w)
00007926                            ; ===========================================================================
00007926 0000                       off_7118:	dc.w Resize_SLZ3main-off_7118
00007928 0000                       		dc.w Resize_SLZ3boss-off_7118
0000792A 0000                       		dc.w Resize_SLZ3end-off_7118
0000792C                            ; ===========================================================================
0000792C                            
0000792C                            Resize_SLZ3main:
0000792C 0C78 1E70 F700             		cmpi.w	#$1E70,($FFFFF700).w
00007932 6500                       		bcs.s	locret_7130
00007934 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
0000793A 5438 F742                  		addq.b	#2,($FFFFF742).w
0000793E                            
0000793E                            locret_7130:
0000793E 4E75                       		rts	
00007940                            ; ===========================================================================
00007940                            
00007940                            Resize_SLZ3boss:
00007940 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
00007946 6500                       		bcs.s	locret_715C
00007948 6100 0000                  		bsr.w	SingleObjLoad
0000794C 6600                       		bne.s	loc_7144
0000794E 12BC 007A                  		move.b	#$7A,(a1)	; load SLZ boss	object
00007952                            
00007952                            loc_7144:
00007952 303C 008C                  		move.w	#$8C,d0
00007956 6100 9C3C                  		bsr.w	PlaySound	; play boss music
0000795A 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007960 5438 F742                  		addq.b	#2,($FFFFF742).w
00007964 7011                       		moveq	#$11,d0
00007966 6000 9E16                  		bra.w	LoadPLC		; load boss patterns
0000796A                            ; ===========================================================================
0000796A                            
0000796A                            locret_715C:
0000796A 4E75                       		rts	
0000796C                            ; ===========================================================================
0000796C                            
0000796C                            Resize_SLZ3end:
0000796C 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007972 4E75                       		rts
00007974 4E75                       		rts
00007976                            ; ===========================================================================
00007976                            ; ---------------------------------------------------------------------------
00007976                            ; Spring Yard Zone dynamic screen resizing
00007976                            ; ---------------------------------------------------------------------------
00007976                            
00007976                            Resize_SYZ:				; XREF: Resize_Index
00007976 7000                       		moveq	#0,d0
00007978 1038 FE11                  		move.b	($FFFFFE11).w,d0
0000797C D040                       		add.w	d0,d0
0000797E 303B 0000                  		move.w	Resize_SYZx(pc,d0.w),d0
00007982 4EFB 0000                  		jmp	Resize_SYZx(pc,d0.w)
00007986                            ; ===========================================================================
00007986 0000                       Resize_SYZx:	dc.w Resize_SYZ1-Resize_SYZx
00007988 0000                       		dc.w Resize_SYZ2-Resize_SYZx
0000798A 0000                       		dc.w Resize_SYZ3-Resize_SYZx
0000798C                            ; ===========================================================================
0000798C                            
0000798C                            Resize_SYZ1:
0000798C 4E75                       		rts	
0000798E                            ; ===========================================================================
0000798E                            
0000798E                            Resize_SYZ2:
0000798E 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
00007994 0C78 25A0 F700             		cmpi.w	#$25A0,($FFFFF700).w
0000799A 6500                       		bcs.s	locret_71A2
0000799C 31FC 0420 F726             		move.w	#$420,($FFFFF726).w
000079A2 0C78 04D0 D00C             		cmpi.w	#$4D0,($FFFFD00C).w
000079A8 6500                       		bcs.s	locret_71A2
000079AA 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
000079B0                            
000079B0                            locret_71A2:
000079B0 4E75                       		rts	
000079B2                            ; ===========================================================================
000079B2                            
000079B2                            Resize_SYZ3:
000079B2 7000                       		moveq	#0,d0
000079B4 1038 F742                  		move.b	($FFFFF742).w,d0
000079B8 303B 0000                  		move.w	off_71B2(pc,d0.w),d0
000079BC 4EFB 0000                  		jmp	off_71B2(pc,d0.w)
000079C0                            ; ===========================================================================
000079C0 0000                       off_71B2:	dc.w Resize_SYZ3main-off_71B2
000079C2 0000                       		dc.w Resize_SYZ3boss-off_71B2
000079C4 0000                       		dc.w Resize_SYZ3end-off_71B2
000079C6                            ; ===========================================================================
000079C6                            
000079C6                            Resize_SYZ3main:
000079C6 0C78 2AC0 F700             		cmpi.w	#$2AC0,($FFFFF700).w
000079CC 6500                       		bcs.s	locret_71CE
000079CE 6100 0000                  		bsr.w	SingleObjLoad
000079D2 6600                       		bne.s	locret_71CE
000079D4 12BC 0076                  		move.b	#$76,(a1)	; load blocks that boss	picks up
000079D8 5438 F742                  		addq.b	#2,($FFFFF742).w
000079DC                            
000079DC                            locret_71CE:
000079DC 4E75                       		rts	
000079DE                            ; ===========================================================================
000079DE                            
000079DE                            Resize_SYZ3boss:
000079DE 0C78 2C00 F700             		cmpi.w	#$2C00,($FFFFF700).w
000079E4 6500                       		bcs.s	locret_7200
000079E6 31FC 04CC F726             		move.w	#$4CC,($FFFFF726).w
000079EC 6100 0000                  		bsr.w	SingleObjLoad
000079F0 6600                       		bne.s	loc_71EC
000079F2 12BC 0075                  		move.b	#$75,(a1)	; load SYZ boss	object
000079F6 5438 F742                  		addq.b	#2,($FFFFF742).w
000079FA                            
000079FA                            loc_71EC:
000079FA 303C 008C                  		move.w	#$8C,d0
000079FE 6100 9B94                  		bsr.w	PlaySound	; play boss music
00007A02 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007A08 7011                       		moveq	#$11,d0
00007A0A 6000 9D72                  		bra.w	LoadPLC		; load boss patterns
00007A0E                            ; ===========================================================================
00007A0E                            
00007A0E                            locret_7200:
00007A0E 4E75                       		rts	
00007A10                            ; ===========================================================================
00007A10                            
00007A10                            Resize_SYZ3end:
00007A10 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007A16 4E75                       		rts	
00007A18                            ; ===========================================================================
00007A18                            ; ---------------------------------------------------------------------------
00007A18                            ; Scrap	Brain Zone dynamic screen resizing
00007A18                            ; ---------------------------------------------------------------------------
00007A18                            
00007A18                            Resize_SBZ:				; XREF: Resize_Index
00007A18 7000                       		moveq	#0,d0
00007A1A 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007A1E D040                       		add.w	d0,d0
00007A20 303B 0000                  		move.w	Resize_SBZx(pc,d0.w),d0
00007A24 4EFB 0000                  		jmp	Resize_SBZx(pc,d0.w)
00007A28                            ; ===========================================================================
00007A28 0000                       Resize_SBZx:	dc.w Resize_SBZ1-Resize_SBZx
00007A2A 0000                       		dc.w Resize_SBZ2-Resize_SBZx
00007A2C 0000                       		dc.w Resize_FZ-Resize_SBZx
00007A2E                            ; ===========================================================================
00007A2E                            
00007A2E                            Resize_SBZ1:
00007A2E 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
00007A34 0C78 1880 F700             		cmpi.w	#$1880,($FFFFF700).w
00007A3A 6500                       		bcs.s	locret_7242
00007A3C 31FC 0620 F726             		move.w	#$620,($FFFFF726).w
00007A42 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
00007A48 6500                       		bcs.s	locret_7242
00007A4A 31FC 02A0 F726             		move.w	#$2A0,($FFFFF726).w
00007A50                            
00007A50                            locret_7242:
00007A50 4E75                       		rts	
00007A52                            ; ===========================================================================
00007A52                            
00007A52                            Resize_SBZ2:
00007A52 7000                       		moveq	#0,d0
00007A54 1038 F742                  		move.b	($FFFFF742).w,d0
00007A58 303B 0000                  		move.w	off_7252(pc,d0.w),d0
00007A5C 4EFB 0000                  		jmp	off_7252(pc,d0.w)
00007A60                            ; ===========================================================================
00007A60 0000                       off_7252:	dc.w Resize_SBZ2main-off_7252
00007A62 0000                       		dc.w Resize_SBZ2boss-off_7252
00007A64 0000                       		dc.w Resize_SBZ2boss2-off_7252
00007A66 0000                       		dc.w Resize_SBZ2end-off_7252
00007A68                            ; ===========================================================================
00007A68                            
00007A68                            Resize_SBZ2main:
00007A68 31FC 0800 F726             		move.w	#$800,($FFFFF726).w
00007A6E 0C78 1800 F700             		cmpi.w	#$1800,($FFFFF700).w
00007A74 6500                       		bcs.s	locret_727A
00007A76 31FC 0510 F726             		move.w	#$510,($FFFFF726).w
00007A7C 0C78 1E00 F700             		cmpi.w	#$1E00,($FFFFF700).w
00007A82 6500                       		bcs.s	locret_727A
00007A84 5438 F742                  		addq.b	#2,($FFFFF742).w
00007A88                            
00007A88                            locret_727A:
00007A88 4E75                       		rts	
00007A8A                            ; ===========================================================================
00007A8A                            
00007A8A                            Resize_SBZ2boss:
00007A8A 0C78 1EB0 F700             		cmpi.w	#$1EB0,($FFFFF700).w
00007A90 6500                       		bcs.s	locret_7298
00007A92 6100 0000                  		bsr.w	SingleObjLoad
00007A96 6600                       		bne.s	locret_7298
00007A98 12BC 0083                  		move.b	#$83,(a1)	; load collapsing block	object
00007A9C 5438 F742                  		addq.b	#2,($FFFFF742).w
00007AA0 701E                       		moveq	#$1E,d0
00007AA2 6000 9CDA                  		bra.w	LoadPLC		; load SBZ2 Eggman patterns
00007AA6                            ; ===========================================================================
00007AA6                            
00007AA6                            locret_7298:
00007AA6 4E75                       		rts	
00007AA8                            ; ===========================================================================
00007AA8                            
00007AA8                            Resize_SBZ2boss2:
00007AA8 0C78 1F60 F700             		cmpi.w	#$1F60,($FFFFF700).w
00007AAE 6500                       		bcs.s	loc_72B6
00007AB0 6100 0000                  		bsr.w	SingleObjLoad
00007AB4 6600                       		bne.s	loc_72B0
00007AB6 12BC 0082                  		move.b	#$82,(a1)	; load SBZ2 Eggman object
00007ABA 5438 F742                  		addq.b	#2,($FFFFF742).w
00007ABE                            
00007ABE                            loc_72B0:
00007ABE 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007AC4                            
00007AC4                            loc_72B6:
00007AC4 6000                       		bra.s	loc_72C2
00007AC6                            ; ===========================================================================
00007AC6                            
00007AC6                            Resize_SBZ2end:
00007AC6 0C78 2050 F700             		cmpi.w	#$2050,($FFFFF700).w
00007ACC 6500                       		bcs.s	loc_72C2
00007ACE 4E75                       		rts	
00007AD0                            ; ===========================================================================
00007AD0                            
00007AD0                            loc_72C2:
00007AD0 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007AD6 4E75                       		rts	
00007AD8                            ; ===========================================================================
00007AD8                            
00007AD8                            Resize_FZ:
00007AD8 7000                       		moveq	#0,d0
00007ADA 1038 F742                  		move.b	($FFFFF742).w,d0
00007ADE 303B 0000                  		move.w	off_72D8(pc,d0.w),d0
00007AE2 4EFB 0000                  		jmp	off_72D8(pc,d0.w)
00007AE6                            ; ===========================================================================
00007AE6 0000 0000                  off_72D8:	dc.w Resize_FZmain-off_72D8, Resize_FZboss-off_72D8
00007AEA 0000 0000                  		dc.w Resize_FZend-off_72D8, locret_7322-off_72D8
00007AEE 0000                       		dc.w Resize_FZend2-off_72D8
00007AF0                            ; ===========================================================================
00007AF0                            
00007AF0                            Resize_FZmain:
00007AF0 0C78 2148 F700             		cmpi.w	#$2148,($FFFFF700).w
00007AF6 6500                       		bcs.s	loc_72F4
00007AF8 5438 F742                  		addq.b	#2,($FFFFF742).w
00007AFC 701F                       		moveq	#$1F,d0
00007AFE 6100 9C7E                  		bsr.w	LoadPLC		; load FZ boss patterns
00007B02                            
00007B02                            loc_72F4:
00007B02 60CC                       		bra.s	loc_72C2
00007B04                            ; ===========================================================================
00007B04                            
00007B04                            Resize_FZboss:
00007B04 0C78 2300 F700             		cmpi.w	#$2300,($FFFFF700).w
00007B0A 6500                       		bcs.s	loc_7312
00007B0C 6100 0000                  		bsr.w	SingleObjLoad
00007B10 6600                       		bne.s	loc_7312
00007B12 12BC 0085                  		move.b	#$85,(a1)	; load FZ boss object
00007B16 5438 F742                  		addq.b	#2,($FFFFF742).w
00007B1A 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007B20                            
00007B20                            loc_7312:
00007B20 60AE                       		bra.s	loc_72C2
00007B22                            ; ===========================================================================
00007B22                            
00007B22                            Resize_FZend:
00007B22 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
00007B28 6500                       		bcs.s	loc_7320
00007B2A 5438 F742                  		addq.b	#2,($FFFFF742).w
00007B2E                            
00007B2E                            loc_7320:
00007B2E 60A0                       		bra.s	loc_72C2
00007B30                            ; ===========================================================================
00007B30                            
00007B30                            locret_7322:
00007B30 4E75                       		rts	
00007B32                            ; ===========================================================================
00007B32                            
00007B32                            Resize_FZend2:
00007B32 609C                       		bra.s	loc_72C2
00007B34                            ; ===========================================================================
00007B34                            ; ---------------------------------------------------------------------------
00007B34                            ; Ending sequence dynamic screen resizing (empty)
00007B34                            ; ---------------------------------------------------------------------------
00007B34                            
00007B34                            Resize_Ending:				; XREF: Resize_Index
00007B34 4E75                       		rts	
00007B36                            ; ===========================================================================
00007B36                            ; ---------------------------------------------------------------------------
00007B36                            ; Object 11 - GHZ bridge
00007B36                            ; ---------------------------------------------------------------------------
00007B36                            
00007B36                            Obj11:					; XREF: Obj_Index
00007B36 7000                       		moveq	#0,d0
00007B38 1028 0024                  		move.b	$24(a0),d0
00007B3C 323B 0000                  		move.w	Obj11_Index(pc,d0.w),d1
00007B40 4EFB 1000                  		jmp	Obj11_Index(pc,d1.w)
00007B44                            ; ===========================================================================
00007B44 0000 0000                  Obj11_Index:	dc.w Obj11_Main-Obj11_Index, Obj11_Action-Obj11_Index
00007B48 0000 0000                  		dc.w Obj11_Action2-Obj11_Index,	Obj11_Delete2-Obj11_Index
00007B4C 0000 0000                  		dc.w Obj11_Delete2-Obj11_Index,	Obj11_Display2-Obj11_Index
00007B50                            ; ===========================================================================
00007B50                            
00007B50                            Obj11_Main:				; XREF: Obj11_Index
00007B50 5428 0024                  		addq.b	#2,$24(a0)
00007B54 217C 0000 0000 0004        		move.l	#Map_obj11,4(a0)
00007B5C 317C 438E 0002             		move.w	#$438E,2(a0)
00007B62 117C 0004 0001             		move.b	#4,1(a0)
00007B68 117C 0003 0018             		move.b	#3,$18(a0)
00007B6E 117C 0080 0019             		move.b	#$80,$19(a0)
00007B74 3428 000C                  		move.w	$C(a0),d2
00007B78 3628 0008                  		move.w	8(a0),d3
00007B7C 1810                       		move.b	0(a0),d4	; copy object number ($11) to d4
00007B7E 45E8 0028                  		lea	$28(a0),a2	; copy bridge subtype to a2
00007B82 7200                       		moveq	#0,d1
00007B84 1212                       		move.b	(a2),d1		; copy a2 to d1
00007B86 14FC 0000                  		move.b	#0,(a2)+
00007B8A 3001                       		move.w	d1,d0
00007B8C E248                       		lsr.w	#1,d0
00007B8E E948                       		lsl.w	#4,d0
00007B90 9640                       		sub.w	d0,d3
00007B92 5501                       		subq.b	#2,d1
00007B94 6500                       		bcs.s	Obj11_Action
00007B96                            
00007B96                            Obj11_MakeBdg:
00007B96 6100 0000                  		bsr.w	SingleObjLoad
00007B9A 6600                       		bne.s	Obj11_Action
00007B9C 5228 0028                  		addq.b	#1,$28(a0)
00007BA0 B668 0008                  		cmp.w	8(a0),d3
00007BA4 6600                       		bne.s	loc_73B8
00007BA6 0643 0010                  		addi.w	#$10,d3
00007BAA 3142 000C                  		move.w	d2,$C(a0)
00007BAE 3142 003C                  		move.w	d2,$3C(a0)
00007BB2 3A08                       		move.w	a0,d5
00007BB4 0445 D000                  		subi.w	#-$3000,d5
00007BB8 EC4D                       		lsr.w	#6,d5
00007BBA 0245 007F                  		andi.w	#$7F,d5
00007BBE 14C5                       		move.b	d5,(a2)+
00007BC0 5228 0028                  		addq.b	#1,$28(a0)
00007BC4                            
00007BC4                            loc_73B8:				; XREF: ROM:00007398j
00007BC4 3A09                       		move.w	a1,d5
00007BC6 0445 D000                  		subi.w	#-$3000,d5
00007BCA EC4D                       		lsr.w	#6,d5
00007BCC 0245 007F                  		andi.w	#$7F,d5
00007BD0 14C5                       		move.b	d5,(a2)+
00007BD2 137C 000A 0024             		move.b	#$A,$24(a1)
00007BD8 1284                       		move.b	d4,0(a1)	; load bridge object (d4 = $11)
00007BDA 3342 000C                  		move.w	d2,$C(a1)
00007BDE 3342 003C                  		move.w	d2,$3C(a1)
00007BE2 3343 0008                  		move.w	d3,8(a1)
00007BE6 237C 0000 0000 0004        		move.l	#Map_obj11,4(a1)
00007BEE 337C 438E 0002             		move.w	#$438E,2(a1)
00007BF4 137C 0004 0001             		move.b	#4,1(a1)
00007BFA 137C 0003 0018             		move.b	#3,$18(a1)
00007C00 137C 0008 0019             		move.b	#8,$19(a1)
00007C06 0643 0010                  		addi.w	#$10,d3
00007C0A 51C9 FF8A                  		dbf	d1,Obj11_MakeBdg ; repeat d1 times (length of bridge)
00007C0E                            
00007C0E                            Obj11_Action:				; XREF: Obj11_Index
00007C0E 6100                       		bsr.s	Obj11_Solid
00007C10 4A28 003E                  		tst.b	$3E(a0)
00007C14 6700                       		beq.s	Obj11_Display
00007C16 5928 003E                  		subq.b	#4,$3E(a0)
00007C1A 6100 0000                  		bsr.w	Obj11_Bend
00007C1E                            
00007C1E                            Obj11_Display:
00007C1E 6100 0000                  		bsr.w	DisplaySprite
00007C22 6000 0000                  		bra.w	Obj11_ChkDel
00007C26                            
00007C26                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007C26                            
00007C26                            
00007C26                            Obj11_Solid:				; XREF: Obj11_Action
00007C26 7200                       		moveq	#0,d1
00007C28 1228 0028                  		move.b	$28(a0),d1
00007C2C E749                       		lsl.w	#3,d1
00007C2E 3401                       		move.w	d1,d2
00007C30 5041                       		addq.w	#8,d1
00007C32 D442                       		add.w	d2,d2
00007C34 43F8 D000                  		lea	($FFFFD000).w,a1
00007C38 4A69 0012                  		tst.w	$12(a1)
00007C3C 6B00 0000                  		bmi.w	locret_751E
00007C40 3029 0008                  		move.w	8(a1),d0
00007C44 9068 0008                  		sub.w	8(a0),d0
00007C48 D041                       		add.w	d1,d0
00007C4A 6B00 0000                  		bmi.w	locret_751E
00007C4E B042                       		cmp.w	d2,d0
00007C50 6400 0000                  		bcc.w	locret_751E
00007C54 6000                       		bra.s	Platform2
00007C56                            ; End of function Obj11_Solid
00007C56                            
00007C56                            ; ---------------------------------------------------------------------------
00007C56                            ; Platform subroutine
00007C56                            ; ---------------------------------------------------------------------------
00007C56                            
00007C56                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007C56                            
00007C56                            
00007C56                            PlatformObject:
00007C56 43F8 D000                  		lea	($FFFFD000).w,a1
00007C5A 4A69 0012                  		tst.w	$12(a1)
00007C5E 6B00 0000                  		bmi.w	locret_751E
00007C62 3029 0008                  		move.w	8(a1),d0
00007C66 9068 0008                  		sub.w	8(a0),d0
00007C6A D041                       		add.w	d1,d0
00007C6C 6B00 0000                  		bmi.w	locret_751E
00007C70 D241                       		add.w	d1,d1
00007C72 B041                       		cmp.w	d1,d0
00007C74 6400 0000                  		bcc.w	locret_751E
00007C78                            
00007C78                            Platform2:
00007C78 3028 000C                  		move.w	$C(a0),d0
00007C7C 5140                       		subq.w	#8,d0
00007C7E                            
00007C7E                            Platform3:
00007C7E 3429 000C                  		move.w	$C(a1),d2
00007C82 1229 0016                  		move.b	$16(a1),d1
00007C86 4881                       		ext.w	d1
00007C88 D242                       		add.w	d2,d1
00007C8A 5841                       		addq.w	#4,d1
00007C8C 9041                       		sub.w	d1,d0
00007C8E 6200 0000                  		bhi.w	locret_751E
00007C92 0C40 FFF0                  		cmpi.w	#-$10,d0
00007C96 6500 0000                  		bcs.w	locret_751E
00007C9A 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00007C9E 6B00 0000                  		bmi.w	locret_751E
00007CA2 0C29 0006 0024             		cmpi.b	#6,$24(a1)
00007CA8 6400 0000                  		bcc.w	locret_751E
00007CAC D440                       		add.w	d0,d2
00007CAE 5642                       		addq.w	#3,d2
00007CB0 3342 000C                  		move.w	d2,$C(a1)
00007CB4 5428 0024                  		addq.b	#2,$24(a0)
00007CB8                            
00007CB8                            loc_74AE:
00007CB8 0829 0003 0022             		btst	#3,$22(a1)
00007CBE 6700                       		beq.s	loc_74DC
00007CC0 7000                       		moveq	#0,d0
00007CC2 1029 003D                  		move.b	$3D(a1),d0
00007CC6 ED48                       		lsl.w	#6,d0
00007CC8 0680 00FF D000             		addi.l	#$FFD000,d0
00007CCE 2440                       		movea.l	d0,a2
00007CD0 08AA 0003 0022             		bclr	#3,$22(a2)
00007CD6 422A 0025                  		clr.b	$25(a2)
00007CDA 0C2A 0004 0024             		cmpi.b	#4,$24(a2)
00007CE0 6600                       		bne.s	loc_74DC
00007CE2 552A 0024                  		subq.b	#2,$24(a2)
00007CE6                            
00007CE6                            loc_74DC:
00007CE6 3008                       		move.w	a0,d0
00007CE8 0440 D000                  		subi.w	#-$3000,d0
00007CEC EC48                       		lsr.w	#6,d0
00007CEE 0240 007F                  		andi.w	#$7F,d0
00007CF2 1340 003D                  		move.b	d0,$3D(a1)
00007CF6 137C 0000 0026             		move.b	#0,$26(a1)
00007CFC 337C 0000 0012             		move.w	#0,$12(a1)
00007D02 3369 0010 0014             		move.w	$10(a1),$14(a1)
00007D08 0829 0001 0022             		btst	#1,$22(a1)
00007D0E 6700                       		beq.s	loc_7512
00007D10 2F08                       		move.l	a0,-(sp)
00007D12 2049                       		movea.l	a1,a0
00007D14 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
00007D1A 205F                       		movea.l	(sp)+,a0
00007D1C                            
00007D1C                            loc_7512:
00007D1C 08E9 0003 0022             		bset	#3,$22(a1)
00007D22 08E8 0003 0022             		bset	#3,$22(a0)
00007D28                            
00007D28                            locret_751E:
00007D28 4E75                       		rts	
00007D2A                            ; End of function PlatformObject
00007D2A                            
00007D2A                            ; ---------------------------------------------------------------------------
00007D2A                            ; Sloped platform subroutine (GHZ collapsing ledges and	SLZ seesaws)
00007D2A                            ; ---------------------------------------------------------------------------
00007D2A                            
00007D2A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007D2A                            
00007D2A                            
00007D2A                            SlopeObject:				; XREF: Obj1A_Slope; Obj5E_Slope
00007D2A 43F8 D000                  		lea	($FFFFD000).w,a1
00007D2E 4A69 0012                  		tst.w	$12(a1)
00007D32 6B00 FFF4                  		bmi.w	locret_751E
00007D36 3029 0008                  		move.w	8(a1),d0
00007D3A 9068 0008                  		sub.w	8(a0),d0
00007D3E D041                       		add.w	d1,d0
00007D40 6BE6                       		bmi.s	locret_751E
00007D42 D241                       		add.w	d1,d1
00007D44 B041                       		cmp.w	d1,d0
00007D46 64E0                       		bcc.s	locret_751E
00007D48 0828 0000 0001             		btst	#0,1(a0)
00007D4E 6700                       		beq.s	loc_754A
00007D50 4640                       		not.w	d0
00007D52 D041                       		add.w	d1,d0
00007D54                            
00007D54                            loc_754A:
00007D54 E248                       		lsr.w	#1,d0
00007D56 7600                       		moveq	#0,d3
00007D58 1632 0000                  		move.b	(a2,d0.w),d3
00007D5C 3028 000C                  		move.w	$C(a0),d0
00007D60 9043                       		sub.w	d3,d0
00007D62 6000 FF1A                  		bra.w	Platform3
00007D66                            ; End of function SlopeObject
00007D66                            
00007D66                            
00007D66                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007D66                            
00007D66                            
00007D66                            Obj15_Solid:				; XREF: Obj15_SetSolid
00007D66 43F8 D000                  		lea	($FFFFD000).w,a1
00007D6A 4A69 0012                  		tst.w	$12(a1)
00007D6E 6B00 FFB8                  		bmi.w	locret_751E
00007D72 3029 0008                  		move.w	8(a1),d0
00007D76 9068 0008                  		sub.w	8(a0),d0
00007D7A D041                       		add.w	d1,d0
00007D7C 6B00 FFAA                  		bmi.w	locret_751E
00007D80 D241                       		add.w	d1,d1
00007D82 B041                       		cmp.w	d1,d0
00007D84 6400 FFA2                  		bcc.w	locret_751E
00007D88 3028 000C                  		move.w	$C(a0),d0
00007D8C 9043                       		sub.w	d3,d0
00007D8E 6000 FEEE                  		bra.w	Platform3
00007D92                            ; End of function Obj15_Solid
00007D92                            
00007D92                            ; ===========================================================================
00007D92                            
00007D92                            Obj11_Action2:				; XREF: Obj11_Index
00007D92 6100                       		bsr.s	Obj11_WalkOff
00007D94 6100 0000                  		bsr.w	DisplaySprite
00007D98 6000 0000                  		bra.w	Obj11_ChkDel
00007D9C                            
00007D9C                            ; ---------------------------------------------------------------------------
00007D9C                            ; Subroutine allowing Sonic to walk off a bridge
00007D9C                            ; ---------------------------------------------------------------------------
00007D9C                            
00007D9C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007D9C                            
00007D9C                            
00007D9C                            Obj11_WalkOff:				; XREF: Obj11_Action2
00007D9C 7200                       		moveq	#0,d1
00007D9E 1228 0028                  		move.b	$28(a0),d1
00007DA2 E749                       		lsl.w	#3,d1
00007DA4 3401                       		move.w	d1,d2
00007DA6 5041                       		addq.w	#8,d1
00007DA8 6100                       		bsr.s	ExitPlatform2
00007DAA 6400                       		bcc.s	locret_75BE
00007DAC E848                       		lsr.w	#4,d0
00007DAE 1140 003F                  		move.b	d0,$3F(a0)
00007DB2 1028 003E                  		move.b	$3E(a0),d0
00007DB6 0C00 0040                  		cmpi.b	#$40,d0
00007DBA 6700                       		beq.s	loc_75B6
00007DBC 5828 003E                  		addq.b	#4,$3E(a0)
00007DC0                            
00007DC0                            loc_75B6:
00007DC0 6100 0000                  		bsr.w	Obj11_Bend
00007DC4 6100 0000                  		bsr.w	Obj11_MoveSonic
00007DC8                            
00007DC8                            locret_75BE:
00007DC8 4E75                       		rts	
00007DCA                            ; End of function Obj11_WalkOff
00007DCA                            
00007DCA                            ; ---------------------------------------------------------------------------
00007DCA                            ; Subroutine allowing Sonic to walk or jump off	a platform
00007DCA                            ; ---------------------------------------------------------------------------
00007DCA                            
00007DCA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007DCA                            
00007DCA                            
00007DCA                            ExitPlatform:
00007DCA 3401                       		move.w	d1,d2
00007DCC                            
00007DCC                            ExitPlatform2:
00007DCC D442                       		add.w	d2,d2
00007DCE 43F8 D000                  		lea	($FFFFD000).w,a1
00007DD2 0829 0001 0022             		btst	#1,$22(a1)
00007DD8 6600                       		bne.s	loc_75E0
00007DDA 3029 0008                  		move.w	8(a1),d0
00007DDE 9068 0008                  		sub.w	8(a0),d0
00007DE2 D041                       		add.w	d1,d0
00007DE4 6B00                       		bmi.s	loc_75E0
00007DE6 B042                       		cmp.w	d2,d0
00007DE8 6500                       		bcs.s	locret_75F2
00007DEA                            
00007DEA                            loc_75E0:
00007DEA 08A9 0003 0022             		bclr	#3,$22(a1)
00007DF0 117C 0002 0024             		move.b	#2,$24(a0)
00007DF6 08A8 0003 0022             		bclr	#3,$22(a0)
00007DFC                            
00007DFC                            locret_75F2:
00007DFC 4E75                       		rts	
00007DFE                            ; End of function ExitPlatform
00007DFE                            
00007DFE                            
00007DFE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007DFE                            
00007DFE                            
00007DFE                            Obj11_MoveSonic:			; XREF: Obj11_WalkOff
00007DFE 7000                       		moveq	#0,d0
00007E00 1028 003F                  		move.b	$3F(a0),d0
00007E04 1030 0029                  		move.b	$29(a0,d0.w),d0
00007E08 ED48                       		lsl.w	#6,d0
00007E0A 0680 00FF D000             		addi.l	#$FFD000,d0
00007E10 2440                       		movea.l	d0,a2
00007E12 43F8 D000                  		lea	($FFFFD000).w,a1
00007E16 302A 000C                  		move.w	$C(a2),d0
00007E1A 5140                       		subq.w	#8,d0
00007E1C 7200                       		moveq	#0,d1
00007E1E 1229 0016                  		move.b	$16(a1),d1
00007E22 9041                       		sub.w	d1,d0
00007E24 3340 000C                  		move.w	d0,$C(a1)	; change Sonic's position on y-axis
00007E28 4E75                       		rts	
00007E2A                            ; End of function Obj11_MoveSonic
00007E2A                            
00007E2A                            
00007E2A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007E2A                            
00007E2A                            
00007E2A                            Obj11_Bend:				; XREF: Obj11_Action; Obj11_WalkOff
00007E2A 1028 003E                  		move.b	$3E(a0),d0
00007E2E 6100 AF04                  		bsr.w	CalcSine
00007E32 3800                       		move.w	d0,d4
00007E34 49F9 0000 0000             		lea	(Obj11_BendData2).l,a4
00007E3A 7000                       		moveq	#0,d0
00007E3C 1028 0028                  		move.b	$28(a0),d0
00007E40 E948                       		lsl.w	#4,d0
00007E42 7600                       		moveq	#0,d3
00007E44 1628 003F                  		move.b	$3F(a0),d3
00007E48 3403                       		move.w	d3,d2
00007E4A D640                       		add.w	d0,d3
00007E4C 7A00                       		moveq	#0,d5
00007E4E 4BF9 0000 0000             		lea	(Obj11_BendData).l,a5
00007E54 1A35 3000                  		move.b	(a5,d3.w),d5
00007E58 0243 000F                  		andi.w	#$F,d3
00007E5C E94B                       		lsl.w	#4,d3
00007E5E 47F4 3000                  		lea	(a4,d3.w),a3
00007E62 45E8 0029                  		lea	$29(a0),a2
00007E66                            
00007E66                            loc_765C:
00007E66 7000                       		moveq	#0,d0
00007E68 101A                       		move.b	(a2)+,d0
00007E6A ED48                       		lsl.w	#6,d0
00007E6C 0680 00FF D000             		addi.l	#$FFD000,d0
00007E72 2240                       		movea.l	d0,a1
00007E74 7000                       		moveq	#0,d0
00007E76 101B                       		move.b	(a3)+,d0
00007E78 5240                       		addq.w	#1,d0
00007E7A C0C5                       		mulu.w	d5,d0
00007E7C C0C4                       		mulu.w	d4,d0
00007E7E 4840                       		swap	d0
00007E80 D069 003C                  		add.w	$3C(a1),d0
00007E84 3340 000C                  		move.w	d0,$C(a1)
00007E88 51CA FFDC                  		dbf	d2,loc_765C
00007E8C 7000                       		moveq	#0,d0
00007E8E 1028 0028                  		move.b	$28(a0),d0
00007E92 7600                       		moveq	#0,d3
00007E94 1628 003F                  		move.b	$3F(a0),d3
00007E98 5203                       		addq.b	#1,d3
00007E9A 9600                       		sub.b	d0,d3
00007E9C 4403                       		neg.b	d3
00007E9E 6B00                       		bmi.s	locret_76CA
00007EA0 3403                       		move.w	d3,d2
00007EA2 E94B                       		lsl.w	#4,d3
00007EA4 47F4 3000                  		lea	(a4,d3.w),a3
00007EA8 D6C2                       		adda.w	d2,a3
00007EAA 5342                       		subq.w	#1,d2
00007EAC 6500                       		bcs.s	locret_76CA
00007EAE                            
00007EAE                            loc_76A4:
00007EAE 7000                       		moveq	#0,d0
00007EB0 101A                       		move.b	(a2)+,d0
00007EB2 ED48                       		lsl.w	#6,d0
00007EB4 0680 00FF D000             		addi.l	#$FFD000,d0
00007EBA 2240                       		movea.l	d0,a1
00007EBC 7000                       		moveq	#0,d0
00007EBE 1023                       		move.b	-(a3),d0
00007EC0 5240                       		addq.w	#1,d0
00007EC2 C0C5                       		mulu.w	d5,d0
00007EC4 C0C4                       		mulu.w	d4,d0
00007EC6 4840                       		swap	d0
00007EC8 D069 003C                  		add.w	$3C(a1),d0
00007ECC 3340 000C                  		move.w	d0,$C(a1)
00007ED0 51CA FFDC                  		dbf	d2,loc_76A4
00007ED4                            
00007ED4                            locret_76CA:
00007ED4 4E75                       		rts	
00007ED6                            ; End of function Obj11_Bend
00007ED6                            
00007ED6                            ; ===========================================================================
00007ED6                            ; ---------------------------------------------------------------------------
00007ED6                            ; GHZ bridge-bending data
00007ED6                            ; (Defines how the bridge bends	when Sonic walks across	it)
00007ED6                            ; ---------------------------------------------------------------------------
00007ED6                            Obj11_BendData:	incbin	misc\ghzbend1.bin
00007FE6                            		even
00007FE6                            Obj11_BendData2:incbin	misc\ghzbend2.bin
000080E6                            		even
000080E6                            
000080E6                            ; ===========================================================================
000080E6                            
000080E6                            Obj11_ChkDel:				; XREF: Obj11_Display; Obj11_Action2
000080E6 3028 0008                  		move.w	8(a0),d0
000080EA 0240 FF80                  		andi.w	#$FF80,d0
000080EE 3238 F700                  		move.w	($FFFFF700).w,d1
000080F2 0441 0080                  		subi.w	#$80,d1
000080F6 0241 FF80                  		andi.w	#$FF80,d1
000080FA 9041                       		sub.w	d1,d0
000080FC 0C40 0280                  		cmpi.w	#$280,d0
00008100 6200 0000                  		bhi.w	Obj11_DelAll
00008104 4E75                       		rts	
00008106                            ; ===========================================================================
00008106                            
00008106                            Obj11_DelAll:				; XREF: Obj11_ChkDel
00008106 7400                       		moveq	#0,d2
00008108 45E8 0028                  		lea	$28(a0),a2	; load bridge length
0000810C 141A                       		move.b	(a2)+,d2	; move bridge length to	d2
0000810E 5302                       		subq.b	#1,d2		; subtract 1
00008110 6500                       		bcs.s	Obj11_Delete
00008112                            
00008112                            Obj11_DelLoop:
00008112 7000                       		moveq	#0,d0
00008114 101A                       		move.b	(a2)+,d0
00008116 ED48                       		lsl.w	#6,d0
00008118 0680 00FF D000             		addi.l	#$FFD000,d0
0000811E 2240                       		movea.l	d0,a1
00008120 B048                       		cmp.w	a0,d0
00008122 6700                       		beq.s	loc_791E
00008124 6100 0000                  		bsr.w	DeleteObject2
00008128                            
00008128                            loc_791E:
00008128 51CA FFE8                  		dbf	d2,Obj11_DelLoop ; repeat d2 times (bridge length)
0000812C                            
0000812C                            Obj11_Delete:
0000812C 6100 0000                  		bsr.w	DeleteObject
00008130 4E75                       		rts	
00008132                            ; ===========================================================================
00008132                            
00008132                            Obj11_Delete2:				; XREF: Obj11_Index
00008132 6100 0000                  		bsr.w	DeleteObject
00008136 4E75                       		rts	
00008138                            ; ===========================================================================
00008138                            
00008138                            Obj11_Display2:				; XREF: Obj11_Index
00008138 6100 0000                  		bsr.w	DisplaySprite
0000813C 4E75                       		rts	
0000813E                            ; ===========================================================================
0000813E                            ; ---------------------------------------------------------------------------
0000813E                            ; Sprite mappings - GHZ	bridge
0000813E                            ; ---------------------------------------------------------------------------
0000813E                            Map_obj11:
0000813E                            	include "_maps\obj11.asm"
0000813E                            ; ---------------------------------------------------------------------------
0000813E                            ; Sprite mappings - GHZ	bridge
0000813E                            ; ---------------------------------------------------------------------------
0000813E 0000 0000                  		dc.w byte_793A-Map_obj11, byte_7940-Map_obj11
00008142 0000                       		dc.w byte_794B-Map_obj11
00008144 01                         byte_793A:	dc.b 1
00008145 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000814A 02                         byte_7940:	dc.b 2
0000814B F804 0004 F0               		dc.b $F8, 4, 0,	4, $F0
00008150 000C 0006 F0               		dc.b 0,	$C, 0, 6, $F0
00008155 01                         byte_794B:	dc.b 1
00008156 FC04 0008 F8               		dc.b $FC, 4, 0,	8, $F8
0000815C 00                         		even
0000815C 00                         		even
0000815C                            
0000815C                            ; ===========================================================================
0000815C                            ; ---------------------------------------------------------------------------
0000815C                            ; Object 15 - swinging platforms (GHZ, MZ, SLZ)
0000815C                            ;	    - spiked ball on a chain (SBZ)
0000815C                            ; ---------------------------------------------------------------------------
0000815C                            
0000815C                            Obj15:					; XREF: Obj_Index
0000815C 7000                       		moveq	#0,d0
0000815E 1028 0024                  		move.b	$24(a0),d0
00008162 323B 0000                  		move.w	Obj15_Index(pc,d0.w),d1
00008166 4EFB 1000                  		jmp	Obj15_Index(pc,d1.w)
0000816A                            ; ===========================================================================
0000816A 0000 0000                  Obj15_Index:	dc.w Obj15_Main-Obj15_Index, Obj15_SetSolid-Obj15_Index
0000816E 0000 0000                  		dc.w Obj15_Action2-Obj15_Index,	Obj15_Delete-Obj15_Index
00008172 0000 0000                  		dc.w Obj15_Delete-Obj15_Index, Obj15_Display-Obj15_Index
00008176 0000                       		dc.w Obj15_Action-Obj15_Index
00008178                            ; ===========================================================================
00008178                            
00008178                            Obj15_Main:				; XREF: Obj15_Index
00008178 5428 0024                  		addq.b	#2,$24(a0)
0000817C 217C 0000 0000 0004        		move.l	#Map_obj15,4(a0) ; GHZ and MZ specific code
00008184 317C 4380 0002             		move.w	#$4380,2(a0)
0000818A 117C 0004 0001             		move.b	#4,1(a0)
00008190 117C 0003 0018             		move.b	#3,$18(a0)
00008196 117C 0018 0019             		move.b	#$18,$19(a0)
0000819C 117C 0008 0016             		move.b	#8,$16(a0)
000081A2 3168 000C 0038             		move.w	$C(a0),$38(a0)
000081A8 3168 0008 003A             		move.w	8(a0),$3A(a0)
000081AE 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
000081B4 6600                       		bne.s	Obj15_NotSLZ
000081B6 217C 0000 0000 0004        		move.l	#Map_obj15a,4(a0) ; SLZ	specific code
000081BE 317C 43DC 0002             		move.w	#$43DC,2(a0)
000081C4 117C 0020 0019             		move.b	#$20,$19(a0)
000081CA 117C 0010 0016             		move.b	#$10,$16(a0)
000081D0 117C 0099 0020             		move.b	#$99,$20(a0)
000081D6                            
000081D6                            Obj15_NotSLZ:
000081D6 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
000081DC 6600                       		bne.s	Obj15_SetLength
000081DE 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0) ; SBZ	specific code
000081E6 317C 0391 0002             		move.w	#$391,2(a0)
000081EC 117C 0018 0019             		move.b	#$18,$19(a0)
000081F2 117C 0018 0016             		move.b	#$18,$16(a0)
000081F8 117C 0086 0020             		move.b	#$86,$20(a0)
000081FE 117C 000C 0024             		move.b	#$C,$24(a0)
00008204                            
00008204                            Obj15_SetLength:
00008204 1810                       		move.b	0(a0),d4
00008206 7200                       		moveq	#0,d1
00008208 45E8 0028                  		lea	$28(a0),a2	; move chain length to a2
0000820C 1212                       		move.b	(a2),d1		; move a2 to d1
0000820E 3F01                       		move.w	d1,-(sp)
00008210 0241 000F                  		andi.w	#$F,d1
00008214 14FC 0000                  		move.b	#0,(a2)+
00008218 3601                       		move.w	d1,d3
0000821A E94B                       		lsl.w	#4,d3
0000821C 5003                       		addq.b	#8,d3
0000821E 1143 003C                  		move.b	d3,$3C(a0)
00008222 5103                       		subq.b	#8,d3
00008224 4A28 001A                  		tst.b	$1A(a0)
00008228 6700                       		beq.s	Obj15_MakeChain
0000822A 5003                       		addq.b	#8,d3
0000822C 5341                       		subq.w	#1,d1
0000822E                            
0000822E                            Obj15_MakeChain:
0000822E 6100 0000                  		bsr.w	SingleObjLoad
00008232 6600                       		bne.s	loc_7A92
00008234 5228 0028                  		addq.b	#1,$28(a0)
00008238 3A09                       		move.w	a1,d5
0000823A 0445 D000                  		subi.w	#-$3000,d5
0000823E EC4D                       		lsr.w	#6,d5
00008240 0245 007F                  		andi.w	#$7F,d5
00008244 14C5                       		move.b	d5,(a2)+
00008246 137C 000A 0024             		move.b	#$A,$24(a1)
0000824C 1284                       		move.b	d4,0(a1)	; load swinging	object
0000824E 2368 0004 0004             		move.l	4(a0),4(a1)
00008254 3368 0002 0002             		move.w	2(a0),2(a1)
0000825A 08A9 0006 0002             		bclr	#6,2(a1)
00008260 137C 0004 0001             		move.b	#4,1(a1)
00008266 137C 0004 0018             		move.b	#4,$18(a1)
0000826C 137C 0008 0019             		move.b	#8,$19(a1)
00008272 137C 0001 001A             		move.b	#1,$1A(a1)
00008278 1343 003C                  		move.b	d3,$3C(a1)
0000827C 0403 0010                  		subi.b	#$10,d3
00008280 6400                       		bcc.s	loc_7A8E
00008282 137C 0002 001A             		move.b	#2,$1A(a1)
00008288 137C 0003 0018             		move.b	#3,$18(a1)
0000828E 08E9 0006 0002             		bset	#6,2(a1)
00008294                            
00008294                            loc_7A8E:
00008294 51C9 FF98                  		dbf	d1,Obj15_MakeChain ; repeat d1 times (chain length)
00008298                            
00008298                            loc_7A92:
00008298 3A08                       		move.w	a0,d5
0000829A 0445 D000                  		subi.w	#-$3000,d5
0000829E EC4D                       		lsr.w	#6,d5
000082A0 0245 007F                  		andi.w	#$7F,d5
000082A4 14C5                       		move.b	d5,(a2)+
000082A6 317C 4080 0026             		move.w	#$4080,$26(a0)
000082AC 317C FE00 003E             		move.w	#-$200,$3E(a0)
000082B2 321F                       		move.w	(sp)+,d1
000082B4 0801 0004                  		btst	#4,d1		; is object type $8X ?
000082B8 6700                       		beq.s	loc_7AD4	; if not, branch
000082BA 217C 0000 0000 0004        		move.l	#Map_obj48,4(a0) ; use GHZ ball	mappings
000082C2 317C 43AA 0002             		move.w	#$43AA,2(a0)
000082C8 117C 0001 001A             		move.b	#1,$1A(a0)
000082CE 117C 0002 0018             		move.b	#2,$18(a0)
000082D4 117C 0081 0020             		move.b	#$81,$20(a0)	; make object hurt when	touched
000082DA                            
000082DA                            loc_7AD4:
000082DA 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; is zone SBZ?
000082E0 6700                       		beq.s	Obj15_Action	; if yes, branch
000082E2                            
000082E2                            Obj15_SetSolid:				; XREF: Obj15_Index
000082E2 7200                       		moveq	#0,d1
000082E4 1228 0019                  		move.b	$19(a0),d1
000082E8 7600                       		moveq	#0,d3
000082EA 1628 0016                  		move.b	$16(a0),d3
000082EE 6100 FA76                  		bsr.w	Obj15_Solid
000082F2                            
000082F2                            Obj15_Action:				; XREF: Obj15_Index
000082F2 6100 0000                  		bsr.w	Obj15_Move
000082F6 6100 0000                  		bsr.w	DisplaySprite
000082FA 6000 0000                  		bra.w	Obj15_ChkDel
000082FE                            ; ===========================================================================
000082FE                            
000082FE                            Obj15_Action2:				; XREF: Obj15_Index
000082FE 7200                       		moveq	#0,d1
00008300 1228 0019                  		move.b	$19(a0),d1
00008304 6100 FAC4                  		bsr.w	ExitPlatform
00008308 3F28 0008                  		move.w	8(a0),-(sp)
0000830C 6100 0000                  		bsr.w	Obj15_Move
00008310 341F                       		move.w	(sp)+,d2
00008312 7600                       		moveq	#0,d3
00008314 1628 0016                  		move.b	$16(a0),d3
00008318 5203                       		addq.b	#1,d3
0000831A 6100 0000                  		bsr.w	MvSonicOnPtfm
0000831E 6100 0000                  		bsr.w	DisplaySprite
00008322 6000 0000                  		bra.w	Obj15_ChkDel
00008326                            
00008326 4E75                       		rts
00008328                            
00008328                            ; ---------------------------------------------------------------------------
00008328                            ; Subroutine to	change Sonic's position with a platform
00008328                            ; ---------------------------------------------------------------------------
00008328                            
00008328                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008328                            
00008328                            
00008328                            MvSonicOnPtfm:
00008328 43F8 D000                  		lea	($FFFFD000).w,a1
0000832C 3028 000C                  		move.w	$C(a0),d0
00008330 9043                       		sub.w	d3,d0
00008332 6000                       		bra.s	MvSonic2
00008334                            ; End of function MvSonicOnPtfm
00008334                            
00008334                            ; ---------------------------------------------------------------------------
00008334                            ; Subroutine to	change Sonic's position with a platform
00008334                            ; ---------------------------------------------------------------------------
00008334                            
00008334                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008334                            
00008334                            
00008334                            MvSonicOnPtfm2:
00008334 43F8 D000                  		lea	($FFFFD000).w,a1
00008338 3028 000C                  		move.w	$C(a0),d0
0000833C 0440 0009                  		subi.w	#9,d0
00008340                            
00008340                            MvSonic2:
00008340 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00008344 6B00                       		bmi.s	locret_7B62
00008346 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000834C 6400                       		bcc.s	locret_7B62
0000834E 4A78 FE08                  		tst.w	($FFFFFE08).w
00008352 6600                       		bne.s	locret_7B62
00008354 7200                       		moveq	#0,d1
00008356 1229 0016                  		move.b	$16(a1),d1
0000835A 9041                       		sub.w	d1,d0
0000835C 3340 000C                  		move.w	d0,$C(a1)
00008360 9468 0008                  		sub.w	8(a0),d2
00008364 9569 0008                  		sub.w	d2,8(a1)
00008368                            
00008368                            locret_7B62:
00008368 4E75                       		rts	
0000836A                            ; End of function MvSonicOnPtfm2
0000836A                            
0000836A                            
0000836A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000836A                            
0000836A                            
0000836A                            Obj15_Move:				; XREF: Obj15_Action; Obj15_Action2
0000836A 1038 FE78                  		move.b	($FFFFFE78).w,d0
0000836E 323C 0080                  		move.w	#$80,d1
00008372 0828 0000 0022             		btst	#0,$22(a0)
00008378 6700                       		beq.s	loc_7B78
0000837A 4440                       		neg.w	d0
0000837C D041                       		add.w	d1,d0
0000837E                            
0000837E                            loc_7B78:
0000837E 6000                       		bra.s	Obj15_Move2
00008380                            ; End of function Obj15_Move
00008380                            
00008380                            
00008380                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008380                            
00008380                            
00008380                            Obj48_Move:				; XREF: Obj48_Display2
00008380 4A28 003D                  		tst.b	$3D(a0)
00008384 6600                       		bne.s	loc_7B9C
00008386 3028 003E                  		move.w	$3E(a0),d0
0000838A 5040                       		addq.w	#8,d0
0000838C 3140 003E                  		move.w	d0,$3E(a0)
00008390 D168 0026                  		add.w	d0,$26(a0)
00008394 0C40 0200                  		cmpi.w	#$200,d0
00008398 6600                       		bne.s	loc_7BB6
0000839A 117C 0001 003D             		move.b	#1,$3D(a0)
000083A0 6000                       		bra.s	loc_7BB6
000083A2                            ; ===========================================================================
000083A2                            
000083A2                            loc_7B9C:
000083A2 3028 003E                  		move.w	$3E(a0),d0
000083A6 5140                       		subq.w	#8,d0
000083A8 3140 003E                  		move.w	d0,$3E(a0)
000083AC D168 0026                  		add.w	d0,$26(a0)
000083B0 0C40 FE00                  		cmpi.w	#-$200,d0
000083B4 6600                       		bne.s	loc_7BB6
000083B6 117C 0000 003D             		move.b	#0,$3D(a0)
000083BC                            
000083BC                            loc_7BB6:
000083BC 1028 0026                  		move.b	$26(a0),d0
000083C0                            ; End of function Obj48_Move
000083C0                            
000083C0                            
000083C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000083C0                            
000083C0                            
000083C0                            Obj15_Move2:				; XREF: Obj15_Move; Obj48_Display
000083C0 6100 A972                  		bsr.w	CalcSine
000083C4 3428 0038                  		move.w	$38(a0),d2
000083C8 3628 003A                  		move.w	$3A(a0),d3
000083CC 45E8 0028                  		lea	$28(a0),a2
000083D0 7C00                       		moveq	#0,d6
000083D2 1C1A                       		move.b	(a2)+,d6
000083D4                            
000083D4                            loc_7BCE:
000083D4 7800                       		moveq	#0,d4
000083D6 181A                       		move.b	(a2)+,d4
000083D8 ED4C                       		lsl.w	#6,d4
000083DA 0684 00FF D000             		addi.l	#$FFD000,d4
000083E0 2244                       		movea.l	d4,a1
000083E2 7800                       		moveq	#0,d4
000083E4 1829 003C                  		move.b	$3C(a1),d4
000083E8 2A04                       		move.l	d4,d5
000083EA C9C0                       		muls.w	d0,d4
000083EC E084                       		asr.l	#8,d4
000083EE CBC1                       		muls.w	d1,d5
000083F0 E085                       		asr.l	#8,d5
000083F2 D842                       		add.w	d2,d4
000083F4 DA43                       		add.w	d3,d5
000083F6 3344 000C                  		move.w	d4,$C(a1)
000083FA 3345 0008                  		move.w	d5,8(a1)
000083FE 51CE FFD4                  		dbf	d6,loc_7BCE
00008402 4E75                       		rts	
00008404                            ; End of function Obj15_Move2
00008404                            
00008404                            ; ===========================================================================
00008404                            
00008404                            Obj15_ChkDel:				; XREF: Obj15_Action; Obj15_Action2
00008404 3028 003A                  		move.w	$3A(a0),d0
00008408 0240 FF80                  		andi.w	#$FF80,d0
0000840C 3238 F700                  		move.w	($FFFFF700).w,d1
00008410 0441 0080                  		subi.w	#$80,d1
00008414 0241 FF80                  		andi.w	#$FF80,d1
00008418 9041                       		sub.w	d1,d0
0000841A 0C40 0280                  		cmpi.w	#$280,d0
0000841E 6200 0000                  		bhi.w	Obj15_DelAll
00008422 4E75                       		rts	
00008424                            ; ===========================================================================
00008424                            
00008424                            Obj15_DelAll:				; XREF: Obj15_ChkDel
00008424 7400                       		moveq	#0,d2
00008426 45E8 0028                  		lea	$28(a0),a2
0000842A 141A                       		move.b	(a2)+,d2
0000842C                            
0000842C                            Obj15_DelLoop:
0000842C 7000                       		moveq	#0,d0
0000842E 101A                       		move.b	(a2)+,d0
00008430 ED48                       		lsl.w	#6,d0
00008432 0680 00FF D000             		addi.l	#$FFD000,d0
00008438 2240                       		movea.l	d0,a1
0000843A 6100 0000                  		bsr.w	DeleteObject2
0000843E 51CA FFEC                  		dbf	d2,Obj15_DelLoop ; repeat for length of	chain
00008442 4E75                       		rts	
00008444                            ; ===========================================================================
00008444                            
00008444                            Obj15_Delete:				; XREF: Obj15_Index
00008444 6100 0000                  		bsr.w	DeleteObject
00008448 4E75                       		rts	
0000844A                            ; ===========================================================================
0000844A                            
0000844A                            Obj15_Display:				; XREF: Obj15_Index
0000844A 6000 0000                  		bra.w	DisplaySprite
0000844E                            ; ===========================================================================
0000844E                            ; ---------------------------------------------------------------------------
0000844E                            ; Sprite mappings - GHZ	and MZ swinging	platforms
0000844E                            ; ---------------------------------------------------------------------------
0000844E                            Map_obj15:
0000844E                            	include "_maps\obj15ghz.asm"
0000844E                            ; ---------------------------------------------------------------------------
0000844E                            ; Sprite mappings - GHZ	and MZ swinging	platforms
0000844E                            ; ---------------------------------------------------------------------------
0000844E 0000                       		dc.w byte_7C4E-Map_obj15
00008450 0000                       		dc.w byte_7C59-Map_obj15
00008452 0000                       		dc.w byte_7C5F-Map_obj15
00008454 02                         byte_7C4E:	dc.b 2
00008455 F809 0004 E8               		dc.b $F8, 9, 0,	4, $E8
0000845A F809 0004 00               		dc.b $F8, 9, 0,	4, 0
0000845F 01                         byte_7C59:	dc.b 1
00008460 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00008465 01                         byte_7C5F:	dc.b 1
00008466 F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
0000846C 00                         		even
0000846C 00                         		even
0000846C                            
0000846C                            ; ---------------------------------------------------------------------------
0000846C                            ; Sprite mappings - SLZ	swinging platforms
0000846C                            ; ---------------------------------------------------------------------------
0000846C                            Map_obj15a:
0000846C                            	include "_maps\obj15slz.asm"
0000846C                            ; ---------------------------------------------------------------------------
0000846C                            ; Sprite mappings - SLZ	swinging platforms
0000846C                            ; ---------------------------------------------------------------------------
0000846C 0000                       		dc.w byte_7C6C-Map_obj15a
0000846E 0000                       		dc.w byte_7C95-Map_obj15a
00008470 0000                       		dc.w byte_7C9B-Map_obj15a
00008472 08                         byte_7C6C:	dc.b 8
00008473 F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
00008478 F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
0000847D F005 0014 D0               		dc.b $F0, 5, 0,	$14, $D0
00008482 F005 0814 20               		dc.b $F0, 5, 8,	$14, $20
00008487 1004 0018 E0               		dc.b $10, 4, 0,	$18, $E0
0000848C 1004 0818 10               		dc.b $10, 4, 8,	$18, $10
00008491 1001 001A F8               		dc.b $10, 1, 0,	$1A, $F8
00008496 1001 081A 00               		dc.b $10, 1, 8,	$1A, 0
0000849B 01                         byte_7C95:	dc.b 1
0000849C F805 4000 F8               		dc.b $F8, 5, $40, 0, $F8
000084A1 01                         byte_7C9B:	dc.b 1
000084A2 F805 001C F8               		dc.b $F8, 5, 0,	$1C, $F8
000084A8 00                         		even
000084A8 00                         		even
000084A8                            
000084A8                            ; ===========================================================================
000084A8                            ; ---------------------------------------------------------------------------
000084A8                            ; Object 17 - helix of spikes on a pole	(GHZ)
000084A8                            ; ---------------------------------------------------------------------------
000084A8                            
000084A8                            Obj17:					; XREF: Obj_Index
000084A8 7000                       		moveq	#0,d0
000084AA 1028 0024                  		move.b	$24(a0),d0
000084AE 323B 0000                  		move.w	Obj17_Index(pc,d0.w),d1
000084B2 4EFB 1000                  		jmp	Obj17_Index(pc,d1.w)
000084B6                            ; ===========================================================================
000084B6 0000                       Obj17_Index:	dc.w Obj17_Main-Obj17_Index
000084B8 0000                       		dc.w Obj17_Action-Obj17_Index
000084BA 0000                       		dc.w Obj17_Action-Obj17_Index
000084BC 0000                       		dc.w Obj17_Delete-Obj17_Index
000084BE 0000                       		dc.w Obj17_Display-Obj17_Index
000084C0                            ; ===========================================================================
000084C0                            
000084C0                            Obj17_Main:				; XREF: Obj17_Index
000084C0 5428 0024                  		addq.b	#2,$24(a0)
000084C4 217C 0000 0000 0004        		move.l	#Map_obj17,4(a0)
000084CC 317C 4398 0002             		move.w	#$4398,2(a0)
000084D2 117C 0007 0022             		move.b	#7,$22(a0)
000084D8 117C 0004 0001             		move.b	#4,1(a0)
000084DE 117C 0003 0018             		move.b	#3,$18(a0)
000084E4 117C 0008 0019             		move.b	#8,$19(a0)
000084EA 3428 000C                  		move.w	$C(a0),d2
000084EE 3628 0008                  		move.w	8(a0),d3
000084F2 1810                       		move.b	0(a0),d4
000084F4 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
000084F8 7200                       		moveq	#0,d1
000084FA 1212                       		move.b	(a2),d1		; move a2 to d1
000084FC 14FC 0000                  		move.b	#0,(a2)+
00008500 3001                       		move.w	d1,d0
00008502 E248                       		lsr.w	#1,d0
00008504 E948                       		lsl.w	#4,d0
00008506 9640                       		sub.w	d0,d3
00008508 5501                       		subq.b	#2,d1
0000850A 6500                       		bcs.s	Obj17_Action
0000850C 7C00                       		moveq	#0,d6
0000850E                            
0000850E                            Obj17_MakeHelix:
0000850E 6100 0000                  		bsr.w	SingleObjLoad
00008512 6600                       		bne.s	Obj17_Action
00008514 5228 0028                  		addq.b	#1,$28(a0)
00008518 3A09                       		move.w	a1,d5
0000851A 0445 D000                  		subi.w	#$D000,d5
0000851E EC4D                       		lsr.w	#6,d5
00008520 0245 007F                  		andi.w	#$7F,d5
00008524 14C5                       		move.b	d5,(a2)+
00008526 137C 0008 0024             		move.b	#8,$24(a1)
0000852C 1284                       		move.b	d4,0(a1)
0000852E 3342 000C                  		move.w	d2,$C(a1)
00008532 3343 0008                  		move.w	d3,8(a1)
00008536 2368 0004 0004             		move.l	4(a0),4(a1)
0000853C 337C 4398 0002             		move.w	#$4398,2(a1)
00008542 137C 0004 0001             		move.b	#4,1(a1)
00008548 137C 0003 0018             		move.b	#3,$18(a1)
0000854E 137C 0008 0019             		move.b	#8,$19(a1)
00008554 1346 003E                  		move.b	d6,$3E(a1)
00008558 5206                       		addq.b	#1,d6
0000855A 0206 0007                  		andi.b	#7,d6
0000855E 0643 0010                  		addi.w	#$10,d3
00008562 B668 0008                  		cmp.w	8(a0),d3
00008566 6600                       		bne.s	loc_7D78
00008568 1146 003E                  		move.b	d6,$3E(a0)
0000856C 5206                       		addq.b	#1,d6
0000856E 0206 0007                  		andi.b	#7,d6
00008572 0643 0010                  		addi.w	#$10,d3
00008576 5228 0028                  		addq.b	#1,$28(a0)
0000857A                            
0000857A                            loc_7D78:
0000857A 51C9 FF92                  		dbf	d1,Obj17_MakeHelix ; repeat d1 times (helix length)
0000857E                            
0000857E                            Obj17_Action:				; XREF: Obj17_Index
0000857E 6100 0000                  		bsr.w	Obj17_RotateSpikes
00008582 6100 0000                  		bsr.w	DisplaySprite
00008586 6000 0000                  		bra.w	Obj17_ChkDel
0000858A                            
0000858A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000858A                            
0000858A                            
0000858A                            Obj17_RotateSpikes:			; XREF: Obj17_Action; Obj17_Display
0000858A 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
0000858E 117C 0000 0020             		move.b	#0,$20(a0)	; make object harmless
00008594 D028 003E                  		add.b	$3E(a0),d0
00008598 0200 0007                  		andi.b	#7,d0
0000859C 1140 001A                  		move.b	d0,$1A(a0)	; change current frame
000085A0 6600                       		bne.s	locret_7DA6
000085A2 117C 0084 0020             		move.b	#$84,$20(a0)	; make object harmful
000085A8                            
000085A8                            locret_7DA6:
000085A8 4E75                       		rts	
000085AA                            ; End of function Obj17_RotateSpikes
000085AA                            
000085AA                            ; ===========================================================================
000085AA                            
000085AA                            Obj17_ChkDel:				; XREF: Obj17_Action
000085AA 3028 0008                  		move.w	8(a0),d0
000085AE 0240 FF80                  		andi.w	#$FF80,d0
000085B2 3238 F700                  		move.w	($FFFFF700).w,d1
000085B6 0441 0080                  		subi.w	#$80,d1
000085BA 0241 FF80                  		andi.w	#$FF80,d1
000085BE 9041                       		sub.w	d1,d0
000085C0 0C40 0280                  		cmpi.w	#$280,d0
000085C4 6200 0000                  		bhi.w	Obj17_DelAll
000085C8 4E75                       		rts	
000085CA                            ; ===========================================================================
000085CA                            
000085CA                            Obj17_DelAll:				; XREF: Obj17_ChkDel
000085CA 7400                       		moveq	#0,d2
000085CC 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
000085D0 141A                       		move.b	(a2)+,d2	; move a2 to d2
000085D2 5502                       		subq.b	#2,d2
000085D4 6500                       		bcs.s	Obj17_Delete
000085D6                            
000085D6                            Obj17_DelLoop:
000085D6 7000                       		moveq	#0,d0
000085D8 101A                       		move.b	(a2)+,d0
000085DA ED48                       		lsl.w	#6,d0
000085DC 0680 00FF D000             		addi.l	#$FFD000,d0
000085E2 2240                       		movea.l	d0,a1
000085E4 6100 0000                  		bsr.w	DeleteObject2	; delete object
000085E8 51CA FFEC                  		dbf	d2,Obj17_DelLoop ; repeat d2 times (helix length)
000085EC                            
000085EC                            Obj17_Delete:				; XREF: Obj17_Index
000085EC 6100 0000                  		bsr.w	DeleteObject
000085F0 4E75                       		rts	
000085F2                            ; ===========================================================================
000085F2                            
000085F2                            Obj17_Display:				; XREF: Obj17_Index
000085F2 6100 FF96                  		bsr.w	Obj17_RotateSpikes
000085F6 6000 0000                  		bra.w	DisplaySprite
000085FA                            ; ===========================================================================
000085FA                            ; ---------------------------------------------------------------------------
000085FA                            ; Sprite mappings - helix of spikes on a pole (GHZ)
000085FA                            ; ---------------------------------------------------------------------------
000085FA                            Map_obj17:
000085FA                            	include "_maps\obj17.asm"
000085FA                            ; ---------------------------------------------------------------------------
000085FA                            ; Sprite mappings - helix of spikes on a pole (GHZ)
000085FA                            ; ---------------------------------------------------------------------------
000085FA 0000 0000                  		dc.w byte_7E08-Map_obj17, byte_7E0E-Map_obj17
000085FE 0000 0000                  		dc.w byte_7E14-Map_obj17, byte_7E1A-Map_obj17
00008602 0000 0000                  		dc.w byte_7E20-Map_obj17, byte_7E26-Map_obj17
00008606 0000 0000                  		dc.w byte_7E2D+1-Map_obj17, byte_7E2C-Map_obj17
0000860A 01                         byte_7E08:	dc.b 1
0000860B F001 0000 FC               		dc.b $F0, 1, 0,	0, $FC
00008610 01                         byte_7E0E:	dc.b 1
00008611 F505 0002 F8               		dc.b $F5, 5, 0,	2, $F8
00008616 01                         byte_7E14:	dc.b 1
00008617 F805 0006 F8               		dc.b $F8, 5, 0,	6, $F8
0000861C 01                         byte_7E1A:	dc.b 1
0000861D FB05 000A F8               		dc.b $FB, 5, 0,	$A, $F8
00008622 01                         byte_7E20:	dc.b 1
00008623 0001 000E FC               		dc.b 0,	1, 0, $E, $FC
00008628 01                         byte_7E26:	dc.b 1
00008629 0400 0010 FD               		dc.b 4,	0, 0, $10, $FD
0000862E 01                         byte_7E2C:	dc.b 1
0000862F F400 0011 FD               byte_7E2D:	dc.b $F4, 0, 0,	$11, $FD
00008634                            		even
00008634                            		even
00008634                            
00008634                            ; ===========================================================================
00008634                            ; ---------------------------------------------------------------------------
00008634                            ; Object 18 - platforms	(GHZ, SYZ, SLZ)
00008634                            ; ---------------------------------------------------------------------------
00008634                            
00008634                            Obj18:					; XREF: Obj_Index
00008634 7000                       		moveq	#0,d0
00008636 1028 0024                  		move.b	$24(a0),d0
0000863A 323B 0000                  		move.w	Obj18_Index(pc,d0.w),d1
0000863E 4EFB 1000                  		jmp	Obj18_Index(pc,d1.w)
00008642                            ; ===========================================================================
00008642 0000                       Obj18_Index:	dc.w Obj18_Main-Obj18_Index
00008644 0000                       		dc.w Obj18_Solid-Obj18_Index
00008646 0000                       		dc.w Obj18_Action2-Obj18_Index
00008648 0000                       		dc.w Obj18_Delete-Obj18_Index
0000864A 0000                       		dc.w Obj18_Action-Obj18_Index
0000864C                            ; ===========================================================================
0000864C                            
0000864C                            Obj18_Main:				; XREF: Obj18_Index
0000864C 5428 0024                  		addq.b	#2,$24(a0)
00008650 317C 4000 0002             		move.w	#$4000,2(a0)
00008656 217C 0000 0000 0004        		move.l	#Map_obj18,4(a0)
0000865E 117C 0020 0019             		move.b	#$20,$19(a0)
00008664 0C38 0004 FE10             		cmpi.b	#4,($FFFFFE10).w ; check if level is SYZ
0000866A 6600                       		bne.s	Obj18_NotSYZ
0000866C 217C 0000 0000 0004        		move.l	#Map_obj18a,4(a0) ; SYZ	specific code
00008674 117C 0020 0019             		move.b	#$20,$19(a0)
0000867A                            
0000867A                            Obj18_NotSYZ:
0000867A 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00008680 6600                       		bne.s	Obj18_NotSLZ
00008682 217C 0000 0000 0004        		move.l	#Map_obj18b,4(a0) ; SLZ	specific code
0000868A 117C 0020 0019             		move.b	#$20,$19(a0)
00008690 317C 4000 0002             		move.w	#$4000,2(a0)
00008696 117C 0003 0028             		move.b	#3,$28(a0)
0000869C                            
0000869C                            Obj18_NotSLZ:
0000869C 117C 0004 0001             		move.b	#4,1(a0)
000086A2 117C 0004 0018             		move.b	#4,$18(a0)
000086A8 3168 000C 002C             		move.w	$C(a0),$2C(a0)
000086AE 3168 000C 0034             		move.w	$C(a0),$34(a0)
000086B4 3168 0008 0032             		move.w	8(a0),$32(a0)
000086BA 317C 0080 0026             		move.w	#$80,$26(a0)
000086C0 7200                       		moveq	#0,d1
000086C2 1028 0028                  		move.b	$28(a0),d0
000086C6 0C00 000A                  		cmpi.b	#$A,d0		; is object type $A (large platform)?
000086CA 6600                       		bne.s	Obj18_SetFrame	; if not, branch
000086CC 5201                       		addq.b	#1,d1		; use frame #1
000086CE 117C 0020 0019             		move.b	#$20,$19(a0)	; set width
000086D4                            
000086D4                            Obj18_SetFrame:
000086D4 1141 001A                  		move.b	d1,$1A(a0)	; set frame to d1
000086D8                            
000086D8                            Obj18_Solid:				; XREF: Obj18_Index
000086D8 4A28 0038                  		tst.b	$38(a0)
000086DC 6700                       		beq.s	loc_7EE0
000086DE 5928 0038                  		subq.b	#4,$38(a0)
000086E2                            
000086E2                            loc_7EE0:
000086E2 7200                       		moveq	#0,d1
000086E4 1228 0019                  		move.b	$19(a0),d1
000086E8 6100 F56C                  		bsr.w	PlatformObject
000086EC                            
000086EC                            Obj18_Action:				; XREF: Obj18_Index
000086EC 6100 0000                  		bsr.w	Obj18_Move
000086F0 6100 0000                  		bsr.w	Obj18_Nudge
000086F4 6100 0000                  		bsr.w	DisplaySprite
000086F8 6000 0000                  		bra.w	Obj18_ChkDel
000086FC                            ; ===========================================================================
000086FC                            
000086FC                            Obj18_Action2:				; XREF: Obj18_Index
000086FC 0C28 0040 0038             		cmpi.b	#$40,$38(a0)
00008702 6700                       		beq.s	loc_7F06
00008704 5828 0038                  		addq.b	#4,$38(a0)
00008708                            
00008708                            loc_7F06:
00008708 7200                       		moveq	#0,d1
0000870A 1228 0019                  		move.b	$19(a0),d1
0000870E 6100 F6BA                  		bsr.w	ExitPlatform
00008712 3F28 0008                  		move.w	8(a0),-(sp)
00008716 6100 0000                  		bsr.w	Obj18_Move
0000871A 6100 0000                  		bsr.w	Obj18_Nudge
0000871E 341F                       		move.w	(sp)+,d2
00008720 6100 FC12                  		bsr.w	MvSonicOnPtfm2
00008724 6100 0000                  		bsr.w	DisplaySprite
00008728 6000 0000                  		bra.w	Obj18_ChkDel
0000872C                            
0000872C 4E75                       		rts
0000872E                            
0000872E                            ; ---------------------------------------------------------------------------
0000872E                            ; Subroutine to	move platform slightly when you	stand on it
0000872E                            ; ---------------------------------------------------------------------------
0000872E                            
0000872E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000872E                            
0000872E                            
0000872E                            Obj18_Nudge:				; XREF: Obj18_Action; Obj18_Action2
0000872E 1028 0038                  		move.b	$38(a0),d0
00008732 6100 A600                  		bsr.w	CalcSine
00008736 323C 0400                  		move.w	#$400,d1
0000873A C1C1                       		muls.w	d1,d0
0000873C 4840                       		swap	d0
0000873E D068 002C                  		add.w	$2C(a0),d0
00008742 3140 000C                  		move.w	d0,$C(a0)
00008746 4E75                       		rts	
00008748                            ; End of function Obj18_Nudge
00008748                            
00008748                            ; ---------------------------------------------------------------------------
00008748                            ; Subroutine to	move platforms
00008748                            ; ---------------------------------------------------------------------------
00008748                            
00008748                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008748                            
00008748                            
00008748                            Obj18_Move:				; XREF: Obj18_Action; Obj18_Action2
00008748 7000                       		moveq	#0,d0
0000874A 1028 0028                  		move.b	$28(a0),d0
0000874E 0240 000F                  		andi.w	#$F,d0
00008752 D040                       		add.w	d0,d0
00008754 323B 0000                  		move.w	Obj18_TypeIndex(pc,d0.w),d1
00008758 4EFB 1000                  		jmp	Obj18_TypeIndex(pc,d1.w)
0000875C                            ; End of function Obj18_Move
0000875C                            
0000875C                            ; ===========================================================================
0000875C 0000 0000                  Obj18_TypeIndex:dc.w Obj18_Type00-Obj18_TypeIndex, Obj18_Type01-Obj18_TypeIndex
00008760 0000 0000                  		dc.w Obj18_Type02-Obj18_TypeIndex, Obj18_Type03-Obj18_TypeIndex
00008764 0000 0000                  		dc.w Obj18_Type04-Obj18_TypeIndex, Obj18_Type05-Obj18_TypeIndex
00008768 0000 0000                  		dc.w Obj18_Type06-Obj18_TypeIndex, Obj18_Type07-Obj18_TypeIndex
0000876C 0000 0000                  		dc.w Obj18_Type08-Obj18_TypeIndex, Obj18_Type00-Obj18_TypeIndex
00008770 0000 0000                  		dc.w Obj18_Type0A-Obj18_TypeIndex, Obj18_Type0B-Obj18_TypeIndex
00008774 0000                       		dc.w Obj18_Type0C-Obj18_TypeIndex
00008776                            ; ===========================================================================
00008776                            
00008776                            Obj18_Type00:
00008776 4E75                       		rts			; platform 00 doesn't move
00008778                            ; ===========================================================================
00008778                            
00008778                            Obj18_Type05:
00008778 3028 0032                  		move.w	$32(a0),d0
0000877C 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00008780 4401                       		neg.b	d1		; reverse platform-motion
00008782 0601 0040                  		addi.b	#$40,d1
00008786 6000                       		bra.s	Obj18_01_Move
00008788                            ; ===========================================================================
00008788                            
00008788                            Obj18_Type01:
00008788 3028 0032                  		move.w	$32(a0),d0
0000878C 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00008790 0401 0040                  		subi.b	#$40,d1
00008794                            
00008794                            Obj18_01_Move:
00008794 4881                       		ext.w	d1
00008796 D041                       		add.w	d1,d0
00008798 3140 0008                  		move.w	d0,8(a0)	; change position on x-axis
0000879C 6000 0000                  		bra.w	Obj18_ChgMotion
000087A0                            ; ===========================================================================
000087A0                            
000087A0                            Obj18_Type0C:
000087A0 3028 0034                  		move.w	$34(a0),d0
000087A4 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
000087A8 4401                       		neg.b	d1		; reverse platform-motion
000087AA 0601 0030                  		addi.b	#$30,d1
000087AE 6000                       		bra.s	Obj18_02_Move
000087B0                            ; ===========================================================================
000087B0                            
000087B0                            Obj18_Type0B:
000087B0 3028 0034                  		move.w	$34(a0),d0
000087B4 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
000087B8 0401 0030                  		subi.b	#$30,d1
000087BC 6000                       		bra.s	Obj18_02_Move
000087BE                            ; ===========================================================================
000087BE                            
000087BE                            Obj18_Type06:
000087BE 3028 0034                  		move.w	$34(a0),d0
000087C2 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
000087C6 4401                       		neg.b	d1		; reverse platform-motion
000087C8 0601 0040                  		addi.b	#$40,d1
000087CC 6000                       		bra.s	Obj18_02_Move
000087CE                            ; ===========================================================================
000087CE                            
000087CE                            Obj18_Type02:
000087CE 3028 0034                  		move.w	$34(a0),d0
000087D2 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
000087D6 0401 0040                  		subi.b	#$40,d1
000087DA                            
000087DA                            Obj18_02_Move:
000087DA 4881                       		ext.w	d1
000087DC D041                       		add.w	d1,d0
000087DE 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
000087E2 6000 0000                  		bra.w	Obj18_ChgMotion
000087E6                            ; ===========================================================================
000087E6                            
000087E6                            Obj18_Type03:
000087E6 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
000087EA 6600                       		bne.s	Obj18_03_Wait	; if yes, branch
000087EC 0828 0003 0022             		btst	#3,$22(a0)	; is Sonic standing on the platform?
000087F2 6700                       		beq.s	Obj18_03_NoMove	; if not, branch
000087F4 317C 001E 003A             		move.w	#30,$3A(a0)	; set time delay to 0.5	seconds
000087FA                            
000087FA                            Obj18_03_NoMove:
000087FA 4E75                       		rts	
000087FC                            ; ===========================================================================
000087FC                            
000087FC                            Obj18_03_Wait:
000087FC 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time
00008800 66F8                       		bne.s	Obj18_03_NoMove	; if time is > 0, branch
00008802 317C 0020 003A             		move.w	#32,$3A(a0)
00008808 5228 0028                  		addq.b	#1,$28(a0)	; change to type 04 (falling)
0000880C 4E75                       		rts	
0000880E                            ; ===========================================================================
0000880E                            
0000880E                            Obj18_Type04:
0000880E 4A68 003A                  		tst.w	$3A(a0)
00008812 6700                       		beq.s	loc_8048
00008814 5368 003A                  		subq.w	#1,$3A(a0)
00008818 6600                       		bne.s	loc_8048
0000881A 0828 0003 0022             		btst	#3,$22(a0)
00008820 6700                       		beq.s	loc_8042
00008822 08E9 0001 0022             		bset	#1,$22(a1)
00008828 08A9 0003 0022             		bclr	#3,$22(a1)
0000882E 137C 0002 0024             		move.b	#2,$24(a1)
00008834 08A8 0003 0022             		bclr	#3,$22(a0)
0000883A 4228 0025                  		clr.b	$25(a0)
0000883E 3368 0012 0012             		move.w	$12(a0),$12(a1)
00008844                            
00008844                            loc_8042:
00008844 117C 0008 0024             		move.b	#8,$24(a0)
0000884A                            
0000884A                            loc_8048:
0000884A 2628 002C                  		move.l	$2C(a0),d3
0000884E 3028 0012                  		move.w	$12(a0),d0
00008852 48C0                       		ext.l	d0
00008854 E180                       		asl.l	#8,d0
00008856 D680                       		add.l	d0,d3
00008858 2143 002C                  		move.l	d3,$2C(a0)
0000885C 0668 0038 0012             		addi.w	#$38,$12(a0)
00008862 3038 F72E                  		move.w	($FFFFF72E).w,d0
00008866 0640 00E0                  		addi.w	#$E0,d0
0000886A B068 002C                  		cmp.w	$2C(a0),d0
0000886E 6400                       		bcc.s	locret_8074
00008870 117C 0006 0024             		move.b	#6,$24(a0)
00008876                            
00008876                            locret_8074:
00008876 4E75                       		rts	
00008878                            ; ===========================================================================
00008878                            
00008878                            Obj18_Type07:
00008878 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
0000887C 6600                       		bne.s	Obj18_07_Wait	; if yes, branch
0000887E 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
00008882 7000                       		moveq	#0,d0
00008884 1028 0028                  		move.b	$28(a0),d0	; move object type ($x7) to d0
00008888 E848                       		lsr.w	#4,d0		; divide d0 by 8, round	down
0000888A 4A32 0000                  		tst.b	(a2,d0.w)	; has switch no. d0 been pressed?
0000888E 6700                       		beq.s	Obj18_07_NoMove	; if not, branch
00008890 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
00008896                            
00008896                            Obj18_07_NoMove:
00008896 4E75                       		rts	
00008898                            ; ===========================================================================
00008898                            
00008898                            Obj18_07_Wait:
00008898 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
0000889C 66F8                       		bne.s	Obj18_07_NoMove	; if time is > 0, branch
0000889E 5228 0028                  		addq.b	#1,$28(a0)	; change to type 08
000088A2 4E75                       		rts	
000088A4                            ; ===========================================================================
000088A4                            
000088A4                            Obj18_Type08:
000088A4 5568 002C                  		subq.w	#2,$2C(a0)	; move platform	up
000088A8 3028 0034                  		move.w	$34(a0),d0
000088AC 0440 0200                  		subi.w	#$200,d0
000088B0 B068 002C                  		cmp.w	$2C(a0),d0	; has platform moved $200 pixels?
000088B4 6600                       		bne.s	Obj18_08_NoStop	; if not, branch
000088B6 4228 0028                  		clr.b	$28(a0)		; change to type 00 (stop moving)
000088BA                            
000088BA                            Obj18_08_NoStop:
000088BA 4E75                       		rts	
000088BC                            ; ===========================================================================
000088BC                            
000088BC                            Obj18_Type0A:
000088BC 3028 0034                  		move.w	$34(a0),d0
000088C0 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
000088C4 0401 0040                  		subi.b	#$40,d1
000088C8 4881                       		ext.w	d1
000088CA E241                       		asr.w	#1,d1
000088CC D041                       		add.w	d1,d0
000088CE 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
000088D2                            
000088D2                            Obj18_ChgMotion:
000088D2 1178 FE78 0026             		move.b	($FFFFFE78).w,$26(a0) ;	update platform-movement variable
000088D8 4E75                       		rts	
000088DA                            ; ===========================================================================
000088DA                            
000088DA                            Obj18_ChkDel:				; XREF: Obj18_Action; Obj18_Action2
000088DA 3028 0032                  		move.w	$32(a0),d0
000088DE 0240 FF80                  		andi.w	#$FF80,d0
000088E2 3238 F700                  		move.w	($FFFFF700).w,d1
000088E6 0441 0080                  		subi.w	#$80,d1
000088EA 0241 FF80                  		andi.w	#$FF80,d1
000088EE 9041                       		sub.w	d1,d0
000088F0 0C40 0280                  		cmpi.w	#$280,d0
000088F4 6200                       		bhi.s	Obj18_Delete
000088F6 4E75                       		rts	
000088F8                            ; ===========================================================================
000088F8                            
000088F8                            Obj18_Delete:				; XREF: Obj18_Index
000088F8 6000 0000                  		bra.w	DeleteObject
000088FC                            ; ===========================================================================
000088FC                            ; ---------------------------------------------------------------------------
000088FC                            ; Sprite mappings - unused
000088FC                            ; ---------------------------------------------------------------------------
000088FC                            Map_obj18x:
000088FC                            	include "_maps\obj18x.asm"
000088FC                            ; ---------------------------------------------------------------------------
000088FC                            ; Sprite mappings - unused
000088FC                            ; ---------------------------------------------------------------------------
000088FC 0000                       		dc.w byte_80FE-Map_obj18x
000088FE 0000                       		dc.w byte_8109-Map_obj18x
00008900 02                         byte_80FE:	dc.b 2
00008901 F40B 003C E8               		dc.b $F4, $B, 0, $3C, $E8
00008906 F40B 0048 00               		dc.b $F4, $B, 0, $48, 0
0000890B 0A                         byte_8109:	dc.b $A
0000890C F40F 00CA E0               		dc.b $F4, $F, 0, $CA, $E0
00008911 040F 00DA E0               		dc.b 4,	$F, 0, $DA, $E0
00008916 240F 00DA E0               		dc.b $24, $F, 0, $DA, $E0
0000891B 440F 00DA E0               		dc.b $44, $F, 0, $DA, $E0
00008920 640F 00DA E0               		dc.b $64, $F, 0, $DA, $E0
00008925 F40F 08CA 00               		dc.b $F4, $F, 8, $CA, 0
0000892A 040F 08DA 00               		dc.b 4,	$F, 8, $DA, 0
0000892F 240F 08DA 00               		dc.b $24, $F, 8, $DA, 0
00008934 440F 08DA 00               		dc.b $44, $F, 8, $DA, 0
00008939 640F 08DA 00               		dc.b $64, $F, 8, $DA, 0
0000893E                            		even
0000893E                            		even
0000893E                            
0000893E                            ; ---------------------------------------------------------------------------
0000893E                            ; Sprite mappings - GHZ	platforms
0000893E                            ; ---------------------------------------------------------------------------
0000893E                            Map_obj18:
0000893E                            	include "_maps\obj18ghz.asm"
0000893E                            ; ---------------------------------------------------------------------------
0000893E                            ; Sprite mappings - GHZ	platforms
0000893E                            ; ---------------------------------------------------------------------------
0000893E 0000                       		dc.w byte_8140-Map_obj18
00008940 0000                       		dc.w byte_8155-Map_obj18
00008942 04                         byte_8140:	dc.b 4
00008943 F40B 003B E0               		dc.b $F4, $B, 0, $3B, $E0 ; small platform
00008948 F407 003F F8               		dc.b $F4, 7, 0,	$3F, $F8
0000894D F407 003F 08               		dc.b $F4, 7, 0,	$3F, 8
00008952 F403 0047 18               		dc.b $F4, 3, 0,	$47, $18
00008957 0A                         byte_8155:	dc.b $A
00008958 F40F 00C5 E0               		dc.b $F4, $F, 0, $C5, $E0 ; large column platform
0000895D 040F 00D5 E0               		dc.b 4,	$F, 0, $D5, $E0
00008962 240F 00D5 E0               		dc.b $24, $F, 0, $D5, $E0
00008967 440F 00D5 E0               		dc.b $44, $F, 0, $D5, $E0
0000896C 640F 00D5 E0               		dc.b $64, $F, 0, $D5, $E0
00008971 F40F 08C5 00               		dc.b $F4, $F, 8, $C5, 0
00008976 040F 08D5 00               		dc.b 4,	$F, 8, $D5, 0
0000897B 240F 08D5 00               		dc.b $24, $F, 8, $D5, 0
00008980 440F 08D5 00               		dc.b $44, $F, 8, $D5, 0
00008985 640F 08D5 00               		dc.b $64, $F, 8, $D5, 0
0000898A                            		even
0000898A                            		even
0000898A                            
0000898A                            ; ---------------------------------------------------------------------------
0000898A                            ; Sprite mappings - SYZ	platforms
0000898A                            ; ---------------------------------------------------------------------------
0000898A                            Map_obj18a:
0000898A                            	include "_maps\obj18syz.asm"
0000898A                            ; ---------------------------------------------------------------------------
0000898A                            ; Sprite mappings - SYZ	platforms
0000898A                            ; ---------------------------------------------------------------------------
0000898A 0000                       		dc.w byte_818A-Map_obj18a
0000898C 03                         byte_818A:	dc.b 3
0000898D F60B 0049 E0               		dc.b $F6, $B, 0, $49, $E0
00008992 F607 0051 F8               		dc.b $F6, 7, 0,	$51, $F8
00008997 F60B 0055 08               		dc.b $F6, $B, 0, $55, 8
0000899C                            		even
0000899C                            		even
0000899C                            
0000899C                            ; ---------------------------------------------------------------------------
0000899C                            ; Sprite mappings - SLZ	platforms
0000899C                            ; ---------------------------------------------------------------------------
0000899C                            Map_obj18b:
0000899C                            	include "_maps\obj18slz.asm"
0000899C                            ; ---------------------------------------------------------------------------
0000899C                            ; Sprite mappings - SLZ	platforms
0000899C                            ; ---------------------------------------------------------------------------
0000899C 0000                       		dc.w byte_819C-Map_obj18b
0000899E 02                         byte_819C:	dc.b 2
0000899F F80F 0021 E0               		dc.b $F8, $F, 0, $21, $E0
000089A4 F80F 0021 00               		dc.b $F8, $F, 0, $21, 0
000089AA 00                         		even
000089AA 00                         		even
000089AA                            
000089AA                            ; ===========================================================================
000089AA                            ; ---------------------------------------------------------------------------
000089AA                            ; Object 19 - Pearto bombs
000089AA                            ; ---------------------------------------------------------------------------
000089AA                            Obj19:					; XREF: Obj_Index
000089AA 7000                       		moveq	#0,d0
000089AC 1028 0024                  		move.b	$24(a0),d0
000089B0 323B 0000                  		move.w	off_7070(pc,d0.w),d1
000089B4 4EFB 1000                  		jmp	off_7070(pc,d1.w)
000089B8                            ; ---------------------------------------------------------------------------
000089B8                            
000089B8 0000 0000 0000             off_7070:	dc.w loc_7076-off_7070, loc_70A6-off_7070, loc_70EE-off_7070
000089BE                            ; ---------------------------------------------------------------------------
000089BE                            
000089BE                            loc_7076:
000089BE 5428 0024                  		addq.b	#2,$24(a0)
000089C2 217C 0000 0000 0004        		move.l	#Map_obj19,4(a0)
000089CA 317C 0480 0002             		move.w	#($9000/$20),2(a0)
000089D0 117C 0004 0001             		move.b	#4,1(a0)
000089D6 117C 0003 0019             		move.b	#3,$19(a0)
000089DC 117C 0087 0020             		move.b	#$87,$20(a0)
000089E2 117C 0008 0018             		move.b	#8,$18(a0)
000089E8 317C 0018 0030             		move.w	#$18,$30(a0)
000089EE                            
000089EE                            loc_70A6:
000089EE 0828 0007 0022             		btst	#7,$22(a0)
000089F4 6600                       		bne.s	loc_70C2
000089F6 4A68 0030                  		tst.w	$30(a0)
000089FA 6600                       		bne.s	loc_70D2
000089FC 4EB9 0000 0000             		jsr	ObjHitFloor
00008A02 4A41                       		tst.w	d1
00008A04 6A00                       		bpl.s	loc_70D6
00008A06 D368 000C                  		add.w	d1,$C(a0)
00008A0A                            
00008A0A                            loc_70C2:
00008A0A 10BC 0027                  		move.b	#$27,0(a0); change object to explosion (why was this even here with the 3F branch)
00008A0E 117C 0000 0024             		move.b	#0,$24(a0)
00008A14                            ; ---------------------------------------------------------------------------
00008A14                            
00008A14                            loc_70D2:
00008A14 5368 0030                  		subq.w	#1,$30(a0)
00008A18                            
00008A18                            loc_70D6:
00008A18 6100 0000                  		bsr.w	ObjectFall
00008A1C 6100 0000                  		bsr.w	DisplaySprite
00008A20 3038 F72E                  		move.w	($FFFFF72E).w,d0
00008A24 0640 00E0                  		addi.w	#$E0,d0
00008A28 B068 000C                  		cmp.w	$C(a0),d0
00008A2C 6500                       		bcs.s	loc_70EE
00008A2E 4E75                       		rts
00008A30                            ; ---------------------------------------------------------------------------
00008A30                            
00008A30                            loc_70EE:
00008A30 6100 0000                  		bsr.w	DeleteObject
00008A34 4E75                       		rts
00008A36                            		
00008A36                            Map_obj19:
00008A36                            	include "_maps\obj19.asm"
00008A36                            Map_02b4:
00008A36 0000                       Map_02b4_0: 	dc.w Map_02b4_2-Map_02b4
00008A38 01                         Map_02b4_2: 	dc.b $1
00008A39 F706 2000 F8               	dc.b $F7, $6, $20, $0, $F8
00008A3E                            	even
00008A3E                            	even
00008A3E                            ; ===========================================================================
00008A3E                            ; ---------------------------------------------------------------------------
00008A3E                            ; Sprite mappings - swinging ball on a chain from GHZ boss
00008A3E                            ; ---------------------------------------------------------------------------
00008A3E                            Map_obj48:
00008A3E                            	include "_maps\obj48.asm"
00008A3E                            ; ---------------------------------------------------------------------------
00008A3E                            ; Sprite mappings - swinging ball on a chain from GHZ boss
00008A3E                            ; ---------------------------------------------------------------------------
00008A3E 0000 0000                  		dc.w byte_81B2-Map_obj48, byte_81D1-Map_obj48
00008A42 0000 0000                  		dc.w byte_81E6-Map_obj48, byte_81FB-Map_obj48
00008A46 06                         byte_81B2:	dc.b 6
00008A47 F004 0024 F0               		dc.b $F0, 4, 0,	$24, $F0
00008A4C F804 1024 F0               		dc.b $F8, 4, $10, $24, $F0
00008A51 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00008A56 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00008A5B 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
00008A60 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00008A65 04                         byte_81D1:	dc.b 4
00008A66 E80A 0009 E8               		dc.b $E8, $A, 0, 9, $E8
00008A6B E80A 0809 00               		dc.b $E8, $A, 8, 9, 0
00008A70 000A 1009 E8               		dc.b 0,	$A, $10, 9, $E8
00008A75 000A 1809 00               		dc.b 0,	$A, $18, 9, 0
00008A7A 04                         byte_81E6:	dc.b 4
00008A7B E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
00008A80 E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
00008A85 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
00008A8A 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
00008A8F 04                         byte_81FB:	dc.b 4
00008A90 E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
00008A95 E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
00008A9A 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
00008A9F 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
00008AA4                            		even
00008AA4                            		even
00008AA4                            
00008AA4                            ; ===========================================================================
00008AA4                            ; ---------------------------------------------------------------------------
00008AA4                            ; Object 1A - GHZ collapsing ledge
00008AA4                            ; ---------------------------------------------------------------------------
00008AA4                            
00008AA4                            Obj1A:					; XREF: Obj_Index
00008AA4 7000                       		moveq	#0,d0
00008AA6 1028 0024                  		move.b	$24(a0),d0
00008AAA 323B 0000                  		move.w	Obj1A_Index(pc,d0.w),d1
00008AAE 4EFB 1000                  		jmp	Obj1A_Index(pc,d1.w)
00008AB2                            ; ===========================================================================
00008AB2 0000 0000                  Obj1A_Index:	dc.w Obj1A_Main-Obj1A_Index, Obj1A_ChkTouch-Obj1A_Index
00008AB6 0000 0000                  		dc.w Obj1A_Touch-Obj1A_Index, Obj1A_Display-Obj1A_Index
00008ABA 0000 0000                  		dc.w Obj1A_Delete-Obj1A_Index, Obj1A_WalkOff-Obj1A_Index
00008ABE                            ; ===========================================================================
00008ABE                            
00008ABE                            Obj1A_Main:				; XREF: Obj1A_Index
00008ABE 5428 0024                  		addq.b	#2,$24(a0)
00008AC2 217C 0000 0000 0004        		move.l	#Map_obj1A,4(a0)
00008ACA 317C 4000 0002             		move.w	#$4000,2(a0)
00008AD0 0028 0004 0001             		ori.b	#4,1(a0)
00008AD6 117C 0004 0018             		move.b	#4,$18(a0)
00008ADC 117C 0007 0038             		move.b	#7,$38(a0)	; set time delay for collapse
00008AE2 117C 0064 0019             		move.b	#$64,$19(a0)
00008AE8 1168 0028 001A             		move.b	$28(a0),$1A(a0)
00008AEE 117C 0038 0016             		move.b	#$38,$16(a0)
00008AF4 08E8 0004 0001             		bset	#4,1(a0)
00008AFA                            
00008AFA                            Obj1A_ChkTouch:				; XREF: Obj1A_Index
00008AFA 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	platform?
00008AFE 6700                       		beq.s	Obj1A_Slope	; if not, branch
00008B00 4A28 0038                  		tst.b	$38(a0)		; has time reached zero?
00008B04 6700 0000                  		beq.w	Obj1A_Collapse	; if yes, branch
00008B08 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008B0C                            
00008B0C                            Obj1A_Slope:
00008B0C 323C 0030                  		move.w	#$30,d1
00008B10 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
00008B16 6100 F212                  		bsr.w	SlopeObject
00008B1A 6000 0000                  		bra.w	MarkObjGone
00008B1E                            ; ===========================================================================
00008B1E                            
00008B1E                            Obj1A_Touch:				; XREF: Obj1A_Index
00008B1E 4A28 0038                  		tst.b	$38(a0)
00008B22 6700 0000                  		beq.w	loc_847A
00008B26 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
00008B2C 5328 0038                  		subq.b	#1,$38(a0)
00008B30                            
00008B30                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008B30                            
00008B30                            
00008B30                            Obj1A_WalkOff:				; XREF: Obj1A_Index
00008B30 323C 0030                  		move.w	#$30,d1
00008B34 6100 F294                  		bsr.w	ExitPlatform
00008B38 323C 0030                  		move.w	#$30,d1
00008B3C 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
00008B42 3428 0008                  		move.w	8(a0),d2
00008B46 6100 0000                  		bsr.w	SlopeObject2
00008B4A 6000 0000                  		bra.w	MarkObjGone
00008B4E                            ; End of function Obj1A_WalkOff
00008B4E                            
00008B4E                            ; ===========================================================================
00008B4E                            
00008B4E                            Obj1A_Display:				; XREF: Obj1A_Index
00008B4E 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00008B52 6700                       		beq.s	Obj1A_TimeZero	; if yes, branch
00008B54 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00008B58 6600 0000                  		bne.w	loc_82D0	; if yes, branch
00008B5C 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008B60 6000 0000                  		bra.w	DisplaySprite
00008B64                            ; ===========================================================================
00008B64                            
00008B64                            loc_82D0:				; XREF: Obj1A_Display
00008B64 5328 0038                  		subq.b	#1,$38(a0)
00008B68 6100 FFC6                  		bsr.w	Obj1A_WalkOff
00008B6C 43F8 D000                  		lea	($FFFFD000).w,a1
00008B70 0829 0003 0022             		btst	#3,$22(a1)
00008B76 6700                       		beq.s	loc_82FC
00008B78 4A28 0038                  		tst.b	$38(a0)
00008B7C 6600                       		bne.s	locret_8308
00008B7E 08A9 0003 0022             		bclr	#3,$22(a1)
00008B84 08A9 0005 0022             		bclr	#5,$22(a1)
00008B8A 137C 0001 001D             		move.b	#1,$1D(a1)
00008B90                            
00008B90                            loc_82FC:
00008B90 117C 0000 003A             		move.b	#0,$3A(a0)
00008B96 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj1A_Display" routine
00008B9C                            
00008B9C                            locret_8308:
00008B9C 4E75                       		rts	
00008B9E                            ; ===========================================================================
00008B9E                            
00008B9E                            Obj1A_TimeZero:				; XREF: Obj1A_Display
00008B9E 6100 0000                  		bsr.w	ObjectFall
00008BA2 6100 0000                  		bsr.w	DisplaySprite
00008BA6 4A28 0001                  		tst.b	1(a0)
00008BAA 6A00                       		bpl.s	Obj1A_Delete
00008BAC 4E75                       		rts	
00008BAE                            ; ===========================================================================
00008BAE                            
00008BAE                            Obj1A_Delete:				; XREF: Obj1A_Index
00008BAE 6100 0000                  		bsr.w	DeleteObject
00008BB2 4E75                       		rts	
00008BB4                            ; ===========================================================================
00008BB4                            ; ---------------------------------------------------------------------------
00008BB4                            ; Object 53 - collapsing floors	(MZ, SLZ, SBZ)
00008BB4                            ; ---------------------------------------------------------------------------
00008BB4                            
00008BB4                            Obj53:					; XREF: Obj_Index
00008BB4 7000                       		moveq	#0,d0
00008BB6 1028 0024                  		move.b	$24(a0),d0
00008BBA 323B 0000                  		move.w	Obj53_Index(pc,d0.w),d1
00008BBE 4EFB 1000                  		jmp	Obj53_Index(pc,d1.w)
00008BC2                            ; ===========================================================================
00008BC2 0000 0000                  Obj53_Index:	dc.w Obj53_Main-Obj53_Index, Obj53_ChkTouch-Obj53_Index
00008BC6 0000 0000                  		dc.w Obj53_Touch-Obj53_Index, Obj53_Display-Obj53_Index
00008BCA 0000 0000                  		dc.w Obj53_Delete-Obj53_Index, Obj53_WalkOff-Obj53_Index
00008BCE                            ; ===========================================================================
00008BCE                            
00008BCE                            Obj53_Main:				; XREF: Obj53_Index
00008BCE 5428 0024                  		addq.b	#2,$24(a0)
00008BD2 217C 0000 0000 0004        		move.l	#Map_obj53,4(a0)
00008BDA 317C 42B8 0002             		move.w	#$42B8,2(a0)
00008BE0 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00008BE6 6600                       		bne.s	Obj53_NotSLZ
00008BE8 317C 44E0 0002             		move.w	#$44E0,2(a0)	; SLZ specific code
00008BEE 5428 001A                  		addq.b	#2,$1A(a0)
00008BF2                            
00008BF2                            Obj53_NotSLZ:
00008BF2 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00008BF8 6600                       		bne.s	Obj53_NotSBZ
00008BFA 317C 43F5 0002             		move.w	#$43F5,2(a0)	; SBZ specific code
00008C00                            
00008C00                            Obj53_NotSBZ:
00008C00 0028 0004 0001             		ori.b	#4,1(a0)
00008C06 117C 0004 0018             		move.b	#4,$18(a0)
00008C0C 117C 0007 0038             		move.b	#7,$38(a0)
00008C12 117C 0044 0019             		move.b	#$44,$19(a0)
00008C18                            
00008C18                            Obj53_ChkTouch:				; XREF: Obj53_Index
00008C18 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00008C1C 6700                       		beq.s	Obj53_Solid	; if not, branch
00008C1E 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00008C22 6700 0000                  		beq.w	Obj53_Collapse	; if yes, branch
00008C26 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008C2A                            
00008C2A                            Obj53_Solid:
00008C2A 323C 0020                  		move.w	#$20,d1
00008C2E 6100 F026                  		bsr.w	PlatformObject
00008C32 4A28 0028                  		tst.b	$28(a0)
00008C36 6A00                       		bpl.s	Obj53_MarkAsGone
00008C38 0829 0003 0022             		btst	#3,$22(a1)
00008C3E 6700                       		beq.s	Obj53_MarkAsGone
00008C40 08A8 0000 0001             		bclr	#0,1(a0)
00008C46 3029 0008                  		move.w	8(a1),d0
00008C4A 9068 0008                  		sub.w	8(a0),d0
00008C4E 6400                       		bcc.s	Obj53_MarkAsGone
00008C50 08E8 0000 0001             		bset	#0,1(a0)
00008C56                            
00008C56                            Obj53_MarkAsGone:
00008C56 6000 0000                  		bra.w	MarkObjGone
00008C5A                            ; ===========================================================================
00008C5A                            
00008C5A                            Obj53_Touch:				; XREF: Obj53_Index
00008C5A 4A28 0038                  		tst.b	$38(a0)
00008C5E 6700 0000                  		beq.w	loc_8458
00008C62 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
00008C68 5328 0038                  		subq.b	#1,$38(a0)
00008C6C                            
00008C6C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008C6C                            
00008C6C                            
00008C6C                            Obj53_WalkOff:				; XREF: Obj53_Index
00008C6C 323C 0020                  		move.w	#$20,d1
00008C70 6100 F158                  		bsr.w	ExitPlatform
00008C74 3428 0008                  		move.w	8(a0),d2
00008C78 6100 F6BA                  		bsr.w	MvSonicOnPtfm2
00008C7C 6000 0000                  		bra.w	MarkObjGone
00008C80                            ; End of function Obj53_WalkOff
00008C80                            
00008C80                            ; ===========================================================================
00008C80                            
00008C80                            Obj53_Display:				; XREF: Obj53_Index
00008C80 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00008C84 6700                       		beq.s	Obj53_TimeZero	; if yes, branch
00008C86 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00008C8A 6600 0000                  		bne.w	loc_8402	; if yes, branch
00008C8E 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008C92 6000 0000                  		bra.w	DisplaySprite
00008C96                            ; ===========================================================================
00008C96                            
00008C96                            loc_8402:
00008C96 5328 0038                  		subq.b	#1,$38(a0)
00008C9A 6100 FFD0                  		bsr.w	Obj53_WalkOff
00008C9E 43F8 D000                  		lea	($FFFFD000).w,a1
00008CA2 0829 0003 0022             		btst	#3,$22(a1)
00008CA8 6700                       		beq.s	loc_842E
00008CAA 4A28 0038                  		tst.b	$38(a0)
00008CAE 6600                       		bne.s	locret_843A
00008CB0 08A9 0003 0022             		bclr	#3,$22(a1)
00008CB6 08A9 0005 0022             		bclr	#5,$22(a1)
00008CBC 137C 0001 001D             		move.b	#1,$1D(a1)
00008CC2                            
00008CC2                            loc_842E:
00008CC2 117C 0000 003A             		move.b	#0,$3A(a0)
00008CC8 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj53_Display" routine
00008CCE                            
00008CCE                            locret_843A:
00008CCE 4E75                       		rts	
00008CD0                            ; ===========================================================================
00008CD0                            
00008CD0                            Obj53_TimeZero:				; XREF: Obj53_Display
00008CD0 6100 0000                  		bsr.w	ObjectFall
00008CD4 6100 0000                  		bsr.w	DisplaySprite
00008CD8 4A28 0001                  		tst.b	1(a0)
00008CDC 6A00                       		bpl.s	Obj53_Delete
00008CDE 4E75                       		rts	
00008CE0                            ; ===========================================================================
00008CE0                            
00008CE0                            Obj53_Delete:				; XREF: Obj53_Index
00008CE0 6100 0000                  		bsr.w	DeleteObject
00008CE4 4E75                       		rts	
00008CE6                            ; ===========================================================================
00008CE6                            
00008CE6                            Obj53_Collapse:				; XREF: Obj53_ChkTouch
00008CE6 117C 0000 003A             		move.b	#0,$3A(a0)
00008CEC                            
00008CEC                            loc_8458:				; XREF: Obj53_Touch
00008CEC 49F9 0000 0000             		lea	(Obj53_Data2).l,a4
00008CF2 0828 0000 0028             		btst	#0,$28(a0)
00008CF8 6700                       		beq.s	loc_846C
00008CFA 49F9 0000 0000             		lea	(Obj53_Data3).l,a4
00008D00                            
00008D00                            loc_846C:
00008D00 7207                       		moveq	#7,d1
00008D02 5228 001A                  		addq.b	#1,$1A(a0)
00008D06 6000                       		bra.s	loc_8486
00008D08                            ; ===========================================================================
00008D08                            
00008D08                            Obj1A_Collapse:				; XREF: Obj1A_ChkTouch
00008D08 117C 0000 003A             		move.b	#0,$3A(a0)
00008D0E                            
00008D0E                            loc_847A:				; XREF: Obj1A_Touch
00008D0E 49F9 0000 0000             		lea	(Obj53_Data1).l,a4
00008D14 7218                       		moveq	#$18,d1
00008D16 5428 001A                  		addq.b	#2,$1A(a0)
00008D1A                            
00008D1A                            loc_8486:				; XREF: Obj53_Collapse
00008D1A 7000                       		moveq	#0,d0
00008D1C 1028 001A                  		move.b	$1A(a0),d0
00008D20 D040                       		add.w	d0,d0
00008D22 2668 0004                  		movea.l	4(a0),a3
00008D26 D6F3 0000                  		adda.w	(a3,d0.w),a3
00008D2A 524B                       		addq.w	#1,a3
00008D2C 08E8 0005 0001             		bset	#5,1(a0)
00008D32 1810                       		move.b	0(a0),d4
00008D34 1A28 0001                  		move.b	1(a0),d5
00008D38 2248                       		movea.l	a0,a1
00008D3A 6000                       		bra.s	loc_84B2
00008D3C                            ; ===========================================================================
00008D3C                            
00008D3C                            loc_84AA:
00008D3C 6100 0000                  		bsr.w	SingleObjLoad
00008D40 6600                       		bne.s	loc_84F2
00008D42 5A4B                       		addq.w	#5,a3
00008D44                            
00008D44                            loc_84B2:
00008D44 137C 0006 0024             		move.b	#6,$24(a1)
00008D4A 1284                       		move.b	d4,0(a1)
00008D4C 234B 0004                  		move.l	a3,4(a1)
00008D50 1345 0001                  		move.b	d5,1(a1)
00008D54 3368 0008 0008             		move.w	8(a0),8(a1)
00008D5A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00008D60 3368 0002 0002             		move.w	2(a0),2(a1)
00008D66 1368 0018 0018             		move.b	$18(a0),$18(a1)
00008D6C 1368 0019 0019             		move.b	$19(a0),$19(a1)
00008D72 135C 0038                  		move.b	(a4)+,$38(a1)
00008D76 B3C8                       		cmpa.l	a0,a1
00008D78 6400                       		bcc.s	loc_84EE
00008D7A 6100 0000                  		bsr.w	DisplaySprite2
00008D7E                            
00008D7E                            loc_84EE:
00008D7E 51C9 FFBC                  		dbf	d1,loc_84AA
00008D82                            
00008D82                            loc_84F2:
00008D82 6100 0000                  		bsr.w	DisplaySprite
00008D86 303C 00B9                  		move.w	#$B9,d0
00008D8A 4EF9 0000 159A             		jmp	(PlaySound_Special).l ;	play collapsing	sound
00008D90                            ; ===========================================================================
00008D90                            ; ---------------------------------------------------------------------------
00008D90                            ; Disintegration data for collapsing ledges (MZ, SLZ, SBZ)
00008D90                            ; ---------------------------------------------------------------------------
00008D90 1C18 1410 1A16 120E 0A06+  Obj53_Data1:	dc.b $1C, $18, $14, $10, $1A, $16, $12,	$E, $A,	6, $18,	$14, $10, $C, 8, 4
00008DA0 1612 0E0A 0602 1410 0C00   		dc.b $16, $12, $E, $A, 6, 2, $14, $10, $C, 0
00008DAA 1E16 0E06 1A12 0A02        Obj53_Data2:	dc.b $1E, $16, $E, 6, $1A, $12,	$A, 2
00008DB2 161E 1A12 060E 0A02        Obj53_Data3:	dc.b $16, $1E, $1A, $12, 6, $E,	$A, 2
00008DBA                            
00008DBA                            ; ---------------------------------------------------------------------------
00008DBA                            ; Sloped platform subroutine (GHZ collapsing ledges and	MZ platforms)
00008DBA                            ; ---------------------------------------------------------------------------
00008DBA                            
00008DBA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008DBA                            
00008DBA                            
00008DBA                            SlopeObject2:				; XREF: Obj1A_WalkOff; et al
00008DBA 43F8 D000                  		lea	($FFFFD000).w,a1
00008DBE 0829 0003 0022             		btst	#3,$22(a1)
00008DC4 6700                       		beq.s	locret_856E
00008DC6 3029 0008                  		move.w	8(a1),d0
00008DCA 9068 0008                  		sub.w	8(a0),d0
00008DCE D041                       		add.w	d1,d0
00008DD0 E248                       		lsr.w	#1,d0
00008DD2 0828 0000 0001             		btst	#0,1(a0)
00008DD8 6700                       		beq.s	loc_854E
00008DDA 4640                       		not.w	d0
00008DDC D041                       		add.w	d1,d0
00008DDE                            
00008DDE                            loc_854E:
00008DDE 7200                       		moveq	#0,d1
00008DE0 1232 0000                  		move.b	(a2,d0.w),d1
00008DE4 3028 000C                  		move.w	$C(a0),d0
00008DE8 9041                       		sub.w	d1,d0
00008DEA 7200                       		moveq	#0,d1
00008DEC 1229 0016                  		move.b	$16(a1),d1
00008DF0 9041                       		sub.w	d1,d0
00008DF2 3340 000C                  		move.w	d0,$C(a1)
00008DF6 9468 0008                  		sub.w	8(a0),d2
00008DFA 9569 0008                  		sub.w	d2,8(a1)
00008DFE                            
00008DFE                            locret_856E:
00008DFE 4E75                       		rts	
00008E00                            ; End of function SlopeObject2
00008E00                            
00008E00                            ; ===========================================================================
00008E00                            ; ---------------------------------------------------------------------------
00008E00                            ; Collision data for GHZ collapsing ledge
00008E00                            ; ---------------------------------------------------------------------------
00008E00                            Obj1A_SlopeData:
00008E00                            		incbin	misc\ghzledge.bin
00008E30                            		even
00008E30                            
00008E30                            ; ---------------------------------------------------------------------------
00008E30                            ; Sprite mappings - GHZ	collapsing ledge
00008E30                            ; ---------------------------------------------------------------------------
00008E30                            Map_obj1A:
00008E30                            	include "_maps\obj1A.asm"
00008E30                            ; ---------------------------------------------------------------------------
00008E30                            ; Sprite mappings - GHZ	collapsing ledge
00008E30                            ; ---------------------------------------------------------------------------
00008E30 0000 0000                  		dc.w byte_85A8-Map_obj1A, byte_85F9-Map_obj1A
00008E34 0000 0000                  		dc.w byte_864A-Map_obj1A, byte_86C8-Map_obj1A
00008E38 10                         byte_85A8:	dc.b $10
00008E39 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing left
00008E3E D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
00008E43 E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
00008E48 E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
00008E4D D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008E52 D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
00008E57 F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
00008E5C F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
00008E61 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008E66 F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
00008E6B 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
00008E70 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008E75 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
00008E7A 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
00008E7F 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
00008E84 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008E89 10                         byte_85F9:	dc.b $10
00008E8A C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing right
00008E8F D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
00008E94 E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
00008E99 E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
00008E9E D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008EA3 D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
00008EA8 F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
00008EAD F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
00008EB2 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008EB7 F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
00008EBC 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
00008EC1 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008EC6 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
00008ECB 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
00008ED0 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
00008ED5 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008EDA 19                         byte_864A:	dc.b $19
00008EDB C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	left in	pieces
00008EE0 C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
00008EE5 D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
00008EEA D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
00008EEF E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
00008EF4 E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
00008EF9 E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
00008EFE E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
00008F03 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008F08 D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
00008F0D F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
00008F12 F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
00008F17 F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
00008F1C F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
00008F21 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008F26 F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
00008F2B 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
00008F30 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
00008F35 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008F3A 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
00008F3F 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
00008F44 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
00008F49 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
00008F4E 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
00008F53 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008F58 19                         byte_86C8:	dc.b $19
00008F59 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	right in pieces
00008F5E C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
00008F63 D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
00008F68 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
00008F6D E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
00008F72 E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
00008F77 E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
00008F7C E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
00008F81 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008F86 D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
00008F8B F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
00008F90 F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
00008F95 F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
00008F9A F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
00008F9F F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008FA4 F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
00008FA9 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
00008FAE 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
00008FB3 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008FB8 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
00008FBD 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
00008FC2 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
00008FC7 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
00008FCC 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
00008FD1 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008FD6                            		even
00008FD6                            		even
00008FD6                            
00008FD6                            ; ---------------------------------------------------------------------------
00008FD6                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
00008FD6                            ; ---------------------------------------------------------------------------
00008FD6                            Map_obj53:
00008FD6                            	include "_maps\obj53.asm"
00008FD6                            ; ---------------------------------------------------------------------------
00008FD6                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
00008FD6                            ; ---------------------------------------------------------------------------
00008FD6 0000 0000                  		dc.w byte_874E-Map_obj53, byte_8763-Map_obj53
00008FDA 0000 0000                  		dc.w byte_878C-Map_obj53, byte_87A1-Map_obj53
00008FDE 04                         byte_874E:	dc.b 4
00008FDF F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; MZ and SBZ blocks
00008FE4 080D 0000 E0               		dc.b 8,	$D, 0, 0, $E0
00008FE9 F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
00008FEE 080D 0000 00               		dc.b 8,	$D, 0, 0, 0
00008FF3 08                         byte_8763:	dc.b 8
00008FF4 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
00008FF9 F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
00008FFE F805 0000 00               		dc.b $F8, 5, 0,	0, 0
00009003 F805 0000 10               		dc.b $F8, 5, 0,	0, $10
00009008 0805 0000 E0               		dc.b 8,	5, 0, 0, $E0
0000900D 0805 0000 F0               		dc.b 8,	5, 0, 0, $F0
00009012 0805 0000 00               		dc.b 8,	5, 0, 0, 0
00009017 0805 0000 10               		dc.b 8,	5, 0, 0, $10
0000901C 04                         byte_878C:	dc.b 4
0000901D F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; SLZ blocks
00009022 080D 0008 E0               		dc.b 8,	$D, 0, 8, $E0
00009027 F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
0000902C 080D 0008 00               		dc.b 8,	$D, 0, 8, 0
00009031 08                         byte_87A1:	dc.b 8
00009032 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
00009037 F805 0004 F0               		dc.b $F8, 5, 0,	4, $F0
0000903C F805 0000 00               		dc.b $F8, 5, 0,	0, 0
00009041 F805 0004 10               		dc.b $F8, 5, 0,	4, $10
00009046 0805 0008 E0               		dc.b 8,	5, 0, 8, $E0
0000904B 0805 000C F0               		dc.b 8,	5, 0, $C, $F0
00009050 0805 0008 00               		dc.b 8,	5, 0, 8, 0
00009055 0805 000C 10               		dc.b 8,	5, 0, $C, $10
0000905A                            		even
0000905A                            		even
0000905A                            
0000905A                            ; ===========================================================================
0000905A                            ; ---------------------------------------------------------------------------
0000905A                            ; Object 1C - scenery (GHZ bridge stump, SLZ lava thrower)
0000905A                            ; ---------------------------------------------------------------------------
0000905A                            
0000905A                            Obj1C:					; XREF: Obj_Index
0000905A 7000                       		moveq	#0,d0
0000905C 1028 0024                  		move.b	$24(a0),d0
00009060 323B 0000                  		move.w	Obj1C_Index(pc,d0.w),d1
00009064 4EFB 1000                  		jmp	Obj1C_Index(pc,d1.w)
00009068                            ; ===========================================================================
00009068 0000                       Obj1C_Index:	dc.w Obj1C_Main-Obj1C_Index
0000906A 0000                       		dc.w Obj1C_ChkDel-Obj1C_Index
0000906C                            ; ===========================================================================
0000906C                            
0000906C                            Obj1C_Main:				; XREF: Obj1C_Index
0000906C 5428 0024                  		addq.b	#2,$24(a0)
00009070 7000                       		moveq	#0,d0
00009072 1028 0028                  		move.b	$28(a0),d0	; copy object type to d0
00009076 C0FC 000A                  		mulu.w	#$A,d0		; multiply by $A
0000907A 43FB 0000                  		lea	Obj1C_Var(pc,d0.w),a1
0000907E 2159 0004                  		move.l	(a1)+,4(a0)
00009082 3159 0002                  		move.w	(a1)+,2(a0)
00009086 0028 0004 0001             		ori.b	#4,1(a0)
0000908C 1159 001A                  		move.b	(a1)+,$1A(a0)
00009090 1159 0019                  		move.b	(a1)+,$19(a0)
00009094 1159 0018                  		move.b	(a1)+,$18(a0)
00009098 1159 0020                  		move.b	(a1)+,$20(a0)
0000909C                            
0000909C                            Obj1C_ChkDel:				; XREF: Obj1C_Index
0000909C 3028 0008                  		move.w	8(a0),d0
000090A0 0240 FF80                  		andi.w	#$FF80,d0
000090A4 3238 F700                  		move.w	($FFFFF700).w,d1
000090A8 0441 0080                  		subi.w	#$80,d1
000090AC 0241 FF80                  		andi.w	#$FF80,d1
000090B0 9041                       		sub.w	d1,d0
000090B2 0C40 0280                  		cmpi.w	#$280,d0
000090B6 6200 0000                  		bhi.w	DeleteObject
000090BA 6000 0000                  		bra.w	DisplaySprite
000090BE                            ; ===========================================================================
000090BE                            ; ---------------------------------------------------------------------------
000090BE                            ; Variables for	object $1C are stored in an array
000090BE                            ; ---------------------------------------------------------------------------
000090BE 0000 0000                  Obj1C_Var:	dc.l Map_obj1C		; mappings address
000090C2 44D8                       		dc.w $44D8		; VRAM setting
000090C4 0008 0200                  		dc.b 0,	8, 2, 0		; frame, width,	priority, collision response
000090C8 0000 0000                  		dc.l Map_obj1C
000090CC 44D8                       		dc.w $44D8
000090CE 0008 0200                  		dc.b 0,	8, 2, 0
000090D2 0000 0000                  		dc.l Map_obj1C
000090D6 44D8                       		dc.w $44D8
000090D8 0008 0200                  		dc.b 0,	8, 2, 0
000090DC 0000 813E                  		dc.l Map_obj11
000090E0 438E                       		dc.w $438E
000090E2 0110 0100                  		dc.b 1,	$10, 1,	0
000090E6                            ; ---------------------------------------------------------------------------
000090E6                            ; Sprite mappings - SLZ	lava thrower
000090E6                            ; ---------------------------------------------------------------------------
000090E6                            Map_obj1C:
000090E6                            	include "_maps\obj1C.asm"
000090E6                            ; ---------------------------------------------------------------------------
000090E6                            ; Sprite mappings - SLZ	lava thrower
000090E6                            ; ---------------------------------------------------------------------------
000090E6 0000                       		dc.w byte_8858-Map_obj1C
000090E8 01                         byte_8858:	dc.b 1
000090E9 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
000090EE                            		even
000090EE                            		even
000090EE                            
000090EE                            ; ===========================================================================
000090EE                            ; ---------------------------------------------------------------------------
000090EE                            ; Object 1D - switch that activates when Sonic touches it
000090EE                            ; (this	is not used anywhere in	the game)
000090EE                            ; ---------------------------------------------------------------------------
000090EE                            
000090EE                            Obj1D:					; XREF: Obj_Index
000090EE 7000                       		moveq	#0,d0
000090F0 1028 0024                  		move.b	$24(a0),d0
000090F4 323B 0000                  		move.w	Obj1D_Index(pc,d0.w),d1
000090F8 4EFB 1000                  		jmp	Obj1D_Index(pc,d1.w)
000090FC                            ; ===========================================================================
000090FC 0000                       Obj1D_Index:	dc.w Obj1D_Main-Obj1D_Index
000090FE 0000                       		dc.w Obj1D_Action-Obj1D_Index
00009100 0000                       		dc.w Obj1D_Delete-Obj1D_Index
00009102                            ; ===========================================================================
00009102                            
00009102                            Obj1D_Main:				; XREF: Obj1D_Index
00009102 5428 0024                  		addq.b	#2,$24(a0)
00009106 217C 0000 0000 0004        		move.l	#Map_obj1D,4(a0)
0000910E 317C 4000 0002             		move.w	#$4000,2(a0)
00009114 117C 0004 0001             		move.b	#4,1(a0)
0000911A 3168 000C 0030             		move.w	$C(a0),$30(a0)	; save position	on y-axis
00009120 117C 0010 0019             		move.b	#$10,$19(a0)
00009126 117C 0005 0018             		move.b	#5,$18(a0)
0000912C                            
0000912C                            Obj1D_Action:				; XREF: Obj1D_Index
0000912C 3168 0030 000C             		move.w	$30(a0),$C(a0)	; restore position on y-axis
00009132 323C 0010                  		move.w	#$10,d1
00009136 6100 0000                  		bsr.w	Obj1D_ChkTouch
0000913A 6700                       		beq.s	Obj1D_ChkDel
0000913C 5468 000C                  		addq.w	#2,$C(a0)	; move object 2	pixels
00009140 7001                       		moveq	#1,d0
00009142 31C0 F7E0                  		move.w	d0,($FFFFF7E0).w ; set switch 0	as "pressed"
00009146                            
00009146                            Obj1D_ChkDel:
00009146 6100 0000                  		bsr.w	DisplaySprite
0000914A 3028 0008                  		move.w	8(a0),d0
0000914E 0240 FF80                  		andi.w	#$FF80,d0
00009152 3238 F700                  		move.w	($FFFFF700).w,d1
00009156 0441 0080                  		subi.w	#$80,d1
0000915A 0241 FF80                  		andi.w	#$FF80,d1
0000915E 9041                       		sub.w	d1,d0
00009160 0C40 0280                  		cmpi.w	#$280,d0
00009164 6200 0000                  		bhi.w	Obj1D_Delete
00009168 4E75                       		rts	
0000916A                            ; ===========================================================================
0000916A                            
0000916A                            Obj1D_Delete:				; XREF: Obj1D_Index
0000916A 6100 0000                  		bsr.w	DeleteObject
0000916E 4E75                       		rts	
00009170                            ; ---------------------------------------------------------------------------
00009170                            ; Subroutine to	check if Sonic touches the object
00009170                            ; ---------------------------------------------------------------------------
00009170                            
00009170                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009170                            
00009170                            
00009170                            Obj1D_ChkTouch:				; XREF: Obj1D_Action
00009170 43F8 D000                  		lea	($FFFFD000).w,a1
00009174 3029 0008                  		move.w	8(a1),d0
00009178 9068 0008                  		sub.w	8(a0),d0
0000917C D041                       		add.w	d1,d0
0000917E 6B00                       		bmi.s	loc_8918
00009180 D241                       		add.w	d1,d1
00009182 B041                       		cmp.w	d1,d0
00009184 6400                       		bcc.s	loc_8918
00009186 3429 000C                  		move.w	$C(a1),d2
0000918A 1229 0016                  		move.b	$16(a1),d1
0000918E 4881                       		ext.w	d1
00009190 D242                       		add.w	d2,d1
00009192 3028 000C                  		move.w	$C(a0),d0
00009196 0440 0010                  		subi.w	#$10,d0
0000919A 9041                       		sub.w	d1,d0
0000919C 6200                       		bhi.s	loc_8918
0000919E 0C40 FFF0                  		cmpi.w	#-$10,d0
000091A2 6500                       		bcs.s	loc_8918
000091A4 70FF                       		moveq	#-1,d0
000091A6 4E75                       		rts	
000091A8                            ; ===========================================================================
000091A8                            
000091A8                            loc_8918:
000091A8 7000                       		moveq	#0,d0
000091AA 4E75                       		rts	
000091AC                            ; End of function Obj1D_ChkTouch
000091AC                            
000091AC                            ; ===========================================================================
000091AC                            ; ---------------------------------------------------------------------------
000091AC                            ; Sprite mappings - object 1D
000091AC                            ; ---------------------------------------------------------------------------
000091AC                            Map_obj1D:
000091AC                            	include "_maps\obj1D.asm"
000091AC                            ; ---------------------------------------------------------------------------
000091AC                            ; Sprite mappings - object 1D
000091AC                            ; ---------------------------------------------------------------------------
000091AC 0000                       		dc.w byte_891E-Map_obj1D
000091AE 04                         byte_891E:	dc.b 4
000091AF E807 0054 F0               		dc.b $E8, 7, 0,	$54, $F0
000091B4 0805 005C F0               		dc.b 8,	5, 0, $5C, $F0
000091B9 E807 0054 00               		dc.b $E8, 7, 0,	$54, 0
000091BE 0805 005C 00               		dc.b 8,	5, 0, $5C, 0
000091C4 00                         		even
000091C4 00                         		even
000091C4                            
000091C4                            ; ===========================================================================
000091C4                            ; ---------------------------------------------------------------------------
000091C4                            ; Object 2A - doors (SBZ)
000091C4                            ; ---------------------------------------------------------------------------
000091C4                            
000091C4                            Obj2A:					; XREF: Obj_Index
000091C4 7000                       		moveq	#0,d0
000091C6 1028 0024                  		move.b	$24(a0),d0
000091CA 323B 0000                  		move.w	Obj2A_Index(pc,d0.w),d1
000091CE 4EFB 1000                  		jmp	Obj2A_Index(pc,d1.w)
000091D2                            ; ===========================================================================
000091D2 0000                       Obj2A_Index:	dc.w Obj2A_Main-Obj2A_Index
000091D4 0000                       		dc.w Obj2A_OpenShut-Obj2A_Index
000091D6                            ; ===========================================================================
000091D6                            
000091D6                            Obj2A_Main:				; XREF: Obj2A_Index
000091D6 5428 0024                  		addq.b	#2,$24(a0)
000091DA 217C 0000 0000 0004        		move.l	#Map_obj2A,4(a0)
000091E2 317C 42E8 0002             		move.w	#$42E8,2(a0)
000091E8 0028 0004 0001             		ori.b	#4,1(a0)
000091EE 117C 0008 0019             		move.b	#8,$19(a0)
000091F4 117C 0004 0018             		move.b	#4,$18(a0)
000091FA                            
000091FA                            Obj2A_OpenShut:				; XREF: Obj2A_Index
000091FA 323C 0040                  		move.w	#$40,d1
000091FE 4228 001C                  		clr.b	$1C(a0)		; use "closing"	animation
00009202 3038 D008                  		move.w	($FFFFD008).w,d0
00009206 D041                       		add.w	d1,d0
00009208 B068 0008                  		cmp.w	8(a0),d0
0000920C 6500                       		bcs.s	Obj2A_Animate
0000920E 9041                       		sub.w	d1,d0
00009210 9041                       		sub.w	d1,d0
00009212 B068 0008                  		cmp.w	8(a0),d0
00009216 6400                       		bcc.s	Obj2A_Animate
00009218 D041                       		add.w	d1,d0
0000921A B068 0008                  		cmp.w	8(a0),d0
0000921E 6400                       		bcc.s	loc_899A
00009220 0828 0000 0022             		btst	#0,$22(a0)
00009226 6600                       		bne.s	Obj2A_Animate
00009228 6000                       		bra.s	Obj2A_Open
0000922A                            ; ===========================================================================
0000922A                            
0000922A                            loc_899A:				; XREF: Obj2A_OpenShut
0000922A 0828 0000 0022             		btst	#0,$22(a0)
00009230 6700                       		beq.s	Obj2A_Animate
00009232                            
00009232                            Obj2A_Open:				; XREF: Obj2A_OpenShut
00009232 117C 0001 001C             		move.b	#1,$1C(a0)	; use "opening"	animation
00009238                            
00009238                            Obj2A_Animate:				; XREF: Obj2A_OpenShut; loc_899A
00009238 43F9 0000 0000             		lea	(Ani_obj2A).l,a1
0000923E 6100 0000                  		bsr.w	AnimateSprite
00009242 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
00009246 6600                       		bne.s	Obj2A_MarkAsUsed ; if yes, branch
00009248 323C 0011                  		move.w	#$11,d1
0000924C 343C 0020                  		move.w	#$20,d2
00009250 3602                       		move.w	d2,d3
00009252 5243                       		addq.w	#1,d3
00009254 3828 0008                  		move.w	8(a0),d4
00009258 6100 0000                  		bsr.w	SolidObject
0000925C                            
0000925C                            Obj2A_MarkAsUsed:
0000925C 6000 0000                  		bra.w	MarkObjGone
00009260                            ; ===========================================================================
00009260                            Ani_obj2A:
00009260                            	include "_anim\obj2A.asm"
00009260                            ; ---------------------------------------------------------------------------
00009260                            ; Animation script - doors (SBZ)
00009260                            ; ---------------------------------------------------------------------------
00009260 0000                       		dc.w Ani_obj2A_Shut-Ani_obj2A
00009262 0000                       		dc.w Ani_obj2A_Open-Ani_obj2A
00009264 0008 0706 0504 0302 0100+  Ani_obj2A_Shut:	dc.b 0,	8, 7, 6, 5, 4, 3, 2, 1,	0, $FE,	1
00009270 0000 0102 0304 0506 0708+  Ani_obj2A_Open:	dc.b 0,	0, 1, 2, 3, 4, 5, 6, 7,	8, $FE,	1
0000927C                            		even
0000927C                            		even
0000927C                            
0000927C                            ; ---------------------------------------------------------------------------
0000927C                            ; Sprite mappings - doors (SBZ)
0000927C                            ; ---------------------------------------------------------------------------
0000927C                            Map_obj2A:
0000927C                            	include "_maps\obj2A.asm"
0000927C                            ; ---------------------------------------------------------------------------
0000927C                            ; Sprite mappings - doors (SBZ)
0000927C                            ; ---------------------------------------------------------------------------
0000927C 0000 0000                  		dc.w byte_89FE-Map_obj2A, byte_8A09-Map_obj2A
00009280 0000 0000                  		dc.w byte_8A14-Map_obj2A, byte_8A1F-Map_obj2A
00009284 0000 0000                  		dc.w byte_8A2A-Map_obj2A, byte_8A35-Map_obj2A
00009288 0000 0000                  		dc.w byte_8A40-Map_obj2A, byte_8A4B-Map_obj2A
0000928C 0000                       		dc.w byte_8A56-Map_obj2A
0000928E 02                         byte_89FE:	dc.b 2
0000928F E007 0800 F8               		dc.b $E0, 7, 8,	0, $F8	; door closed
00009294 0007 0800 F8               		dc.b 0,	7, 8, 0, $F8
00009299 02                         byte_8A09:	dc.b 2
0000929A DC07 0800 F8               		dc.b $DC, 7, 8,	0, $F8
0000929F 0407 0800 F8               		dc.b 4,	7, 8, 0, $F8
000092A4 02                         byte_8A14:	dc.b 2
000092A5 D807 0800 F8               		dc.b $D8, 7, 8,	0, $F8
000092AA 0807 0800 F8               		dc.b 8,	7, 8, 0, $F8
000092AF 02                         byte_8A1F:	dc.b 2
000092B0 D407 0800 F8               		dc.b $D4, 7, 8,	0, $F8
000092B5 0C07 0800 F8               		dc.b $C, 7, 8, 0, $F8
000092BA 02                         byte_8A2A:	dc.b 2
000092BB D007 0800 F8               		dc.b $D0, 7, 8,	0, $F8
000092C0 1007 0800 F8               		dc.b $10, 7, 8,	0, $F8
000092C5 02                         byte_8A35:	dc.b 2
000092C6 CC07 0800 F8               		dc.b $CC, 7, 8,	0, $F8
000092CB 1407 0800 F8               		dc.b $14, 7, 8,	0, $F8
000092D0 02                         byte_8A40:	dc.b 2
000092D1 C807 0800 F8               		dc.b $C8, 7, 8,	0, $F8
000092D6 1807 0800 F8               		dc.b $18, 7, 8,	0, $F8
000092DB 02                         byte_8A4B:	dc.b 2
000092DC C407 0800 F8               		dc.b $C4, 7, 8,	0, $F8
000092E1 1C07 0800 F8               		dc.b $1C, 7, 8,	0, $F8
000092E6 02                         byte_8A56:	dc.b 2
000092E7 C007 0800 F8               		dc.b $C0, 7, 8,	0, $F8	; door fully open
000092EC 2007 0800 F8               		dc.b $20, 7, 8,	0, $F8
000092F2 00                         		even
000092F2 00                         		even
000092F2                            
000092F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000092F2                            
000092F2                            
000092F2                            Obj44_SolidWall:			; XREF: Obj44_Solid
000092F2 6100 0000                  		bsr.w	Obj44_SolidWall2
000092F6 6700                       		beq.s	loc_8AA8
000092F8 6B00 0000                  		bmi.w	loc_8AC4
000092FC 4A40                       		tst.w	d0
000092FE 6700 0000                  		beq.w	loc_8A92
00009302 6B00                       		bmi.s	loc_8A7C
00009304 4A69 0010                  		tst.w	$10(a1)
00009308 6B00                       		bmi.s	loc_8A92
0000930A 6000                       		bra.s	loc_8A82
0000930C                            ; ===========================================================================
0000930C                            
0000930C                            loc_8A7C:
0000930C 4A69 0010                  		tst.w	$10(a1)
00009310 6A00                       		bpl.s	loc_8A92
00009312                            
00009312                            loc_8A82:
00009312 9169 0008                  		sub.w	d0,8(a1)
00009316 337C 0000 0014             		move.w	#0,$14(a1)
0000931C 337C 0000 0010             		move.w	#0,$10(a1)
00009322                            
00009322                            loc_8A92:
00009322 0829 0001 0022             		btst	#1,$22(a1)
00009328 6600                       		bne.s	loc_8AB6
0000932A 08E9 0005 0022             		bset	#5,$22(a1)
00009330 08E8 0005 0022             		bset	#5,$22(a0)
00009336 4E75                       		rts	
00009338                            ; ===========================================================================
00009338                            
00009338                            loc_8AA8:
00009338 0828 0005 0022             		btst	#5,$22(a0)
0000933E 6700                       		beq.s	locret_8AC2
00009340 337C 0001 001C             		move.w	#1,$1C(a1)
00009346                            
00009346                            loc_8AB6:
00009346 08A8 0005 0022             		bclr	#5,$22(a0)
0000934C 08A9 0005 0022             		bclr	#5,$22(a1)
00009352                            
00009352                            locret_8AC2:
00009352 4E75                       		rts	
00009354                            ; ===========================================================================
00009354                            
00009354                            loc_8AC4:
00009354 4A69 0012                  		tst.w	$12(a1)
00009358 6A00                       		bpl.s	locret_8AD8
0000935A 4A43                       		tst.w	d3
0000935C 6A00                       		bpl.s	locret_8AD8
0000935E 9769 000C                  		sub.w	d3,$C(a1)
00009362 337C 0000 0012             		move.w	#0,$12(a1)
00009368                            
00009368                            locret_8AD8:
00009368 4E75                       		rts	
0000936A                            ; End of function Obj44_SolidWall
0000936A                            
0000936A                            
0000936A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000936A                            
0000936A                            
0000936A                            Obj44_SolidWall2:			; XREF: Obj44_SolidWall
0000936A 43F8 D000                  		lea	($FFFFD000).w,a1
0000936E 3029 0008                  		move.w	8(a1),d0
00009372 9068 0008                  		sub.w	8(a0),d0
00009376 D041                       		add.w	d1,d0
00009378 6B00                       		bmi.s	loc_8B48
0000937A 3601                       		move.w	d1,d3
0000937C D643                       		add.w	d3,d3
0000937E B043                       		cmp.w	d3,d0
00009380 6200                       		bhi.s	loc_8B48
00009382 1629 0016                  		move.b	$16(a1),d3
00009386 4883                       		ext.w	d3
00009388 D443                       		add.w	d3,d2
0000938A 3629 000C                  		move.w	$C(a1),d3
0000938E 9668 000C                  		sub.w	$C(a0),d3
00009392 D642                       		add.w	d2,d3
00009394 6B00                       		bmi.s	loc_8B48
00009396 3802                       		move.w	d2,d4
00009398 D844                       		add.w	d4,d4
0000939A B644                       		cmp.w	d4,d3
0000939C 6400                       		bcc.s	loc_8B48
0000939E 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000093A2 6B00                       		bmi.s	loc_8B48
000093A4 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000093AA 6400                       		bcc.s	loc_8B48
000093AC 4A78 FE08                  		tst.w	($FFFFFE08).w
000093B0 6600                       		bne.s	loc_8B48
000093B2 3A00                       		move.w	d0,d5
000093B4 B240                       		cmp.w	d0,d1
000093B6 6400                       		bcc.s	loc_8B30
000093B8 D241                       		add.w	d1,d1
000093BA 9041                       		sub.w	d1,d0
000093BC 3A00                       		move.w	d0,d5
000093BE 4445                       		neg.w	d5
000093C0                            
000093C0                            loc_8B30:
000093C0 3203                       		move.w	d3,d1
000093C2 B443                       		cmp.w	d3,d2
000093C4 6400                       		bcc.s	loc_8B3C
000093C6 9644                       		sub.w	d4,d3
000093C8 3203                       		move.w	d3,d1
000093CA 4441                       		neg.w	d1
000093CC                            
000093CC                            loc_8B3C:
000093CC BA41                       		cmp.w	d1,d5
000093CE 6200                       		bhi.s	loc_8B44
000093D0 7801                       		moveq	#1,d4
000093D2 4E75                       		rts	
000093D4                            ; ===========================================================================
000093D4                            
000093D4                            loc_8B44:
000093D4 78FF                       		moveq	#-1,d4
000093D6 4E75                       		rts	
000093D8                            ; ===========================================================================
000093D8                            
000093D8                            loc_8B48:
000093D8 7800                       		moveq	#0,d4
000093DA 4E75                       		rts	
000093DC                            ; End of function Obj44_SolidWall2
000093DC                            
000093DC                            ; ===========================================================================
000093DC                            ; ---------------------------------------------------------------------------
000093DC                            ; Object 1E - Ball Hog enemy (SBZ)
000093DC                            ; ---------------------------------------------------------------------------
000093DC                            
000093DC                            Obj1E:					; XREF: Obj_Index
000093DC 7000                       		moveq	#0,d0
000093DE 1028 0024                  		move.b	$24(a0),d0
000093E2 323B 0000                  		move.w	Obj1E_Index(pc,d0.w),d1
000093E6 4EFB 1000                  		jmp	Obj1E_Index(pc,d1.w)
000093EA                            ; ===========================================================================
000093EA 0000                       Obj1E_Index:	dc.w Obj1E_Main-Obj1E_Index
000093EC 0000                       		dc.w Obj1E_Action-Obj1E_Index
000093EE                            ; ===========================================================================
000093EE                            
000093EE                            Obj1E_Main:				; XREF: Obj1E_Index
000093EE 117C 0013 0016             		move.b	#$13,$16(a0)
000093F4 117C 0008 0017             		move.b	#8,$17(a0)
000093FA 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
00009402 317C 2302 0002             		move.w	#$2302,2(a0)
00009408 117C 0004 0001             		move.b	#4,1(a0)
0000940E 117C 0004 0018             		move.b	#4,$18(a0)
00009414 117C 0005 0020             		move.b	#5,$20(a0)
0000941A 117C 000C 0019             		move.b	#$C,$19(a0)
00009420 6100 0000                  		bsr.w	ObjectFall
00009424 4EB9 0000 0000             		jsr	ObjHitFloor
0000942A 4A41                       		tst.w	d1
0000942C 6A00                       		bpl.s	locret_8BAC
0000942E D368 000C                  		add.w	d1,$C(a0)
00009432 317C 0000 0012             		move.w	#0,$12(a0)
00009438 5428 0024                  		addq.b	#2,$24(a0)
0000943C                            
0000943C                            locret_8BAC:
0000943C 4E75                       		rts	
0000943E                            ; ===========================================================================
0000943E                            
0000943E                            Obj1E_Action:				; XREF: Obj1E_Index
0000943E 43F9 0000 0000             		lea	(Ani_obj1E).l,a1
00009444 6100 0000                  		bsr.w	AnimateSprite
00009448 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is final frame (01) displayed?
0000944E 6600                       		bne.s	Obj1E_SetBall	; if not, branch
00009450 4A28 0032                  		tst.b	$32(a0)		; is it	set to launch cannonball?
00009454 6700                       		beq.s	Obj1E_MakeBall	; if yes, branch
00009456 6000                       		bra.s	Obj1E_MarkAsGone
00009458                            ; ===========================================================================
00009458                            
00009458                            Obj1E_SetBall:				; XREF: Obj1E_Action
00009458 4228 0032                  		clr.b	$32(a0)		; set to launch	cannonball
0000945C                            
0000945C                            Obj1E_MarkAsGone:			; XREF: Obj1E_Action
0000945C 6000 0000                  		bra.w	MarkObjGone
00009460                            ; ===========================================================================
00009460                            
00009460                            Obj1E_MakeBall:				; XREF: Obj1E_Action
00009460 117C 0001 0032             		move.b	#1,$32(a0)
00009466 6100 0000                  		bsr.w	SingleObjLoad
0000946A 6600                       		bne.s	loc_8C1A
0000946C 12BC 0020                  		move.b	#$20,0(a1)	; load cannonball object ($20)
00009470 3368 0008 0008             		move.w	8(a0),8(a1)
00009476 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000947C 337C FF00 0010             		move.w	#-$100,$10(a1)	; cannonball bounces to	the left
00009482 337C 0000 0012             		move.w	#0,$12(a1)
00009488 70FC                       		moveq	#-4,d0
0000948A 0828 0000 0022             		btst	#0,$22(a0)	; is Ball Hog facing right?
00009490 6700                       		beq.s	loc_8C0A	; if not, branch
00009492 4440                       		neg.w	d0
00009494 4469 0010                  		neg.w	$10(a1)		; cannonball bounces to	the right
00009498                            
00009498                            loc_8C0A:
00009498 D169 0008                  		add.w	d0,8(a1)
0000949C 0669 000C 000C             		addi.w	#$C,$C(a1)
000094A2 1368 0028 0028             		move.b	$28(a0),$28(a1)	; copy object type from	Ball Hog
000094A8                            
000094A8                            loc_8C1A:
000094A8 60B2                       		bra.s	Obj1E_MarkAsGone
000094AA                            ; ===========================================================================
000094AA                            ; ---------------------------------------------------------------------------
000094AA                            ; Object 20 - cannonball that Ball Hog throws (SBZ)
000094AA                            ; ---------------------------------------------------------------------------
000094AA                            
000094AA                            Obj20:					; XREF: Obj_Index
000094AA 7000                       		moveq	#0,d0
000094AC 1028 0024                  		move.b	$24(a0),d0
000094B0 323B 0000                  		move.w	Obj20_Index(pc,d0.w),d1
000094B4 4EFB 1000                  		jmp	Obj20_Index(pc,d1.w)
000094B8                            ; ===========================================================================
000094B8 0000                       Obj20_Index:	dc.w Obj20_Main-Obj20_Index
000094BA 0000                       		dc.w Obj20_Bounce-Obj20_Index
000094BC                            ; ===========================================================================
000094BC                            
000094BC                            Obj20_Main:				; XREF: Obj20_Index
000094BC 5428 0024                  		addq.b	#2,$24(a0)
000094C0 117C 0007 0016             		move.b	#7,$16(a0)
000094C6 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
000094CE 317C 2302 0002             		move.w	#$2302,2(a0)
000094D4 117C 0004 0001             		move.b	#4,1(a0)
000094DA 117C 0003 0018             		move.b	#3,$18(a0)
000094E0 117C 0087 0020             		move.b	#$87,$20(a0)
000094E6 117C 0008 0019             		move.b	#8,$19(a0)
000094EC 7000                       		moveq	#0,d0
000094EE 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
000094F2 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 frames	(1 second)
000094F6 3140 0030                  		move.w	d0,$30(a0)	; set explosion	time
000094FA 117C 0004 001A             		move.b	#4,$1A(a0)
00009500                            
00009500                            Obj20_Bounce:				; XREF: Obj20_Index
00009500 4EB9 0000 0000             		jsr	ObjectFall
00009506 4A68 0012                  		tst.w	$12(a0)
0000950A 6B00                       		bmi.s	Obj20_ChkExplode
0000950C 4EB9 0000 0000             		jsr	ObjHitFloor
00009512 4A41                       		tst.w	d1
00009514 6A00                       		bpl.s	Obj20_ChkExplode
00009516 D368 000C                  		add.w	d1,$C(a0)
0000951A 317C FD00 0012             		move.w	#-$300,$12(a0)
00009520 4A03                       		tst.b	d3
00009522 6700                       		beq.s	Obj20_ChkExplode
00009524 6B00                       		bmi.s	loc_8CA4
00009526 4A68 0010                  		tst.w	$10(a0)
0000952A 6A00                       		bpl.s	Obj20_ChkExplode
0000952C 4468 0010                  		neg.w	$10(a0)
00009530 6000                       		bra.s	Obj20_ChkExplode
00009532                            ; ===========================================================================
00009532                            
00009532                            loc_8CA4:				; XREF: Obj20_Bounce
00009532 4A68 0010                  		tst.w	$10(a0)
00009536 6B00                       		bmi.s	Obj20_ChkExplode
00009538 4468 0010                  		neg.w	$10(a0)
0000953C                            
0000953C                            Obj20_ChkExplode:			; XREF: Obj20_Bounce
0000953C 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from explosion time
00009540 6A00                       		bpl.s	Obj20_Animate	; if time is > 0, branch
00009542 10BC 0024                  		move.b	#$24,0(a0)
00009546 10BC 003F                  		move.b	#$3F,0(a0)	; change object	to an explosion	($3F)
0000954A 117C 0000 0024             		move.b	#0,$24(a0)	; reset	routine	counter
00009550 6000 0000                  		bra.w	Obj3F		; jump to explosion code
00009554                            ; ===========================================================================
00009554                            
00009554                            Obj20_Animate:				; XREF: Obj20_ChkExplode
00009554 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00009558 6A00                       		bpl.s	Obj20_Display
0000955A 117C 0005 001E             		move.b	#5,$1E(a0)	; set frame duration to	5 frames
00009560 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
00009566                            
00009566                            Obj20_Display:
00009566 6100 0000                  		bsr.w	DisplaySprite
0000956A 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000956E 0640 00E0                  		addi.w	#$E0,d0
00009572 B068 000C                  		cmp.w	$C(a0),d0	; has object fallen off	the level?
00009576 6500 0000                  		bcs.w	DeleteObject	; if yes, branch
0000957A 4E75                       		rts	
0000957C                            ; ===========================================================================
0000957C                            ; ---------------------------------------------------------------------------
0000957C                            ; Object 24 - explosion	from a destroyed monitor
0000957C                            ; ---------------------------------------------------------------------------
0000957C                            
0000957C                            Obj24:					; XREF: Obj_Index
0000957C 7000                       		moveq	#0,d0
0000957E 1028 0024                  		move.b	$24(a0),d0
00009582 323B 0000                  		move.w	Obj24_Index(pc,d0.w),d1
00009586 4EFB 1000                  		jmp	Obj24_Index(pc,d1.w)
0000958A                            ; ===========================================================================
0000958A 0000                       Obj24_Index:	dc.w Obj24_Main-Obj24_Index
0000958C 0000                       		dc.w Obj24_Animate-Obj24_Index
0000958E                            ; ===========================================================================
0000958E                            
0000958E                            Obj24_Main:				; XREF: Obj24_Index
0000958E 5428 0024                  		addq.b	#2,$24(a0)
00009592 217C 0000 0000 0004        		move.l	#Map_obj24,4(a0)
0000959A 317C 041C 0002             		move.w	#$41C,2(a0)
000095A0 117C 0004 0001             		move.b	#4,1(a0)
000095A6 117C 0001 0018             		move.b	#1,$18(a0)
000095AC 117C 0000 0020             		move.b	#0,$20(a0)
000095B2 117C 000C 0019             		move.b	#$C,$19(a0)
000095B8 117C 0009 001E             		move.b	#9,$1E(a0)
000095BE 117C 0000 001A             		move.b	#0,$1A(a0)
000095C4 303C 00A5                  		move.w	#$A5,d0
000095C8 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play explosion sound
000095CE                            
000095CE                            Obj24_Animate:				; XREF: Obj24_Index
000095CE 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
000095D2 6A00                       		bpl.s	Obj24_Display
000095D4 117C 0009 001E             		move.b	#9,$1E(a0)	; set frame duration to	9 frames
000095DA 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
000095DE 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is the final frame (04) displayed?
000095E4 6700 0000                  		beq.w	DeleteObject	; if yes, branch
000095E8                            
000095E8                            Obj24_Display:
000095E8 6000 0000                  		bra.w	DisplaySprite
000095EC                            ; ===========================================================================
000095EC                            ; ---------------------------------------------------------------------------
000095EC                            ; Object 27 - explosion	from a destroyed enemy
000095EC                            ; ---------------------------------------------------------------------------
000095EC                            
000095EC                            Obj27:					; XREF: Obj_Index
000095EC 7000                       		moveq	#0,d0
000095EE 1028 0024                  		move.b	$24(a0),d0
000095F2 323B 0000                  		move.w	Obj27_Index(pc,d0.w),d1
000095F6 4EFB 1000                  		jmp	Obj27_Index(pc,d1.w)
000095FA                            ; ===========================================================================
000095FA 0000                       Obj27_Index:	dc.w Obj27_LoadAnimal-Obj27_Index
000095FC 0000                       		dc.w Obj27_Main-Obj27_Index
000095FE 0000                       		dc.w Obj27_Animate-Obj27_Index
00009600                            ; ===========================================================================
00009600                            
00009600                            Obj27_LoadAnimal:			; XREF: Obj27_Index
00009600 5428 0024                  		addq.b	#2,$24(a0)
00009604 6100 0000                  		bsr.w	SingleObjLoad
00009608 6600                       		bne.s	Obj27_Main
0000960A 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0000960E 3368 0008 0008             		move.w	8(a0),8(a1)
00009614 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000961A 3368 003E 003E             		move.w	$3E(a0),$3E(a1)
00009620                            
00009620                            Obj27_Main:				; XREF: Obj27_Index
00009620 5428 0024                  		addq.b	#2,$24(a0)
00009624 217C 0000 0000 0004        		move.l	#Map_obj27,4(a0)
0000962C 317C 05A0 0002             		move.w	#$5A0,2(a0)
00009632 117C 0004 0001             		move.b	#4,1(a0)
00009638 117C 0001 0018             		move.b	#1,$18(a0)
0000963E 117C 0000 0020             		move.b	#0,$20(a0)
00009644 117C 000C 0019             		move.b	#$C,$19(a0)
0000964A                            		; move.b	#7,$1E(a0)	; set frame duration to	7 frames
0000964A 117C 000E 001E             		move.b	#$E,$1E(a0)	; GMZ
00009650 117C 0000 001A             		move.b	#0,$1A(a0)
00009656 303C 00C1                  		move.w	#$C1,d0
0000965A 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play breaking enemy sound
00009660                            
00009660 45F9 0000 0000             		lea	(Obj27_ExplosionXYSpd).l,a2	; GMZ: Get Explosion X/Y Speeds according to subtype
00009666 1028 0028                  		move.b	$28(a0),d0
0000966A 3172 0000 0010             		move.w	(a2,d0.w),$10(a0)
00009670 3172 0002 0012             		move.w	2(a2,d0.w),$12(a0)
00009676                            
00009676                            Obj27_Animate:				; XREF: Obj27_Index
00009676 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000967A 6A00                       		bpl.s	Obj27_Display
0000967C                            		; move.b	#7,$1E(a0)	; set frame duration to	7 frames
0000967C 117C 000E 001E             		move.b	#$E,$1E(a0)	; GMZ
00009682 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
00009686 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is the final frame (05) displayed?
0000968C 6700 0000                  		beq.w	DeleteObject	; if yes, branch
00009690                            
00009690                            Obj27_Display:
00009690 4EB9 0000 0000             		jsr	SpeedToPos	; GMZ
00009696 0668 0038 0012             		addi.w	#$38,$12(a0)	; GMZ: Explosion Gravity
0000969C 6000 0000                  		bra.w	DisplaySprite
000096A0                            ; ===========================================================================
000096A0                            ; ---------------------------------------------------------------------------
000096A0                            Obj27_ExplosionXYSpd:
000096A0                            		; dc.w	-$350, -$300	; Left
000096A0                            		; dc.w	-$200, -$450	; Near middle (left)
000096A0                            		; dc.w	0, -$500	; Middle
000096A0                            		; dc.w	$200, -$450	; Near middle (right)
000096A0                            		; dc.w	$350, -$300	; Right
000096A0                            
000096A0 FEB0 FC00                  		dc.w	-$150, -$400	; Left
000096A4 FF00 FAB0                  		dc.w	-$100, -$550	; Near middle (left)
000096A8 0000 FA00                  		dc.w	0, -$600	; Middle
000096AC 0100 FAB0                  		dc.w	$100, -$550	; Near middle (right)
000096B0 0150 FC00                  		dc.w	$150, -$400	; Right
000096B4                            
000096B4 6869 2068 656C 6C6F 2068+  		dc.b	"hi hello hru -garblemarden"
000096CE                            ; ---------------------------------------------------------------------------
000096CE                            ; Object 3F - explosion	from a destroyed boss, bomb or cannonball
000096CE                            ; ---------------------------------------------------------------------------
000096CE                            
000096CE                            Obj3F:					; XREF: Obj_Index
000096CE 7000                       		moveq	#0,d0
000096D0 1028 0024                  		move.b	$24(a0),d0
000096D4 323B 0000                  		move.w	Obj3F_Index(pc,d0.w),d1
000096D8 4EFB 1000                  		jmp	Obj3F_Index(pc,d1.w)
000096DC                            ; ===========================================================================
000096DC 0000                       Obj3F_Index:	dc.w Obj3F_Main-Obj3F_Index
000096DE FF9A                       		dc.w Obj27_Animate-Obj3F_Index
000096E0                            ; ===========================================================================
000096E0                            
000096E0                            Obj3F_Main:				; XREF: Obj3F_Index
000096E0 5428 0024                  		addq.b	#2,$24(a0)
000096E4 217C 0000 0000 0004        		move.l	#Map_obj3F,4(a0)
000096EC 317C 05A0 0002             		move.w	#$5A0,2(a0)
000096F2 117C 0004 0001             		move.b	#4,1(a0)
000096F8 117C 0001 0018             		move.b	#1,$18(a0)
000096FE 117C 0000 0020             		move.b	#0,$20(a0)
00009704 117C 000C 0019             		move.b	#$C,$19(a0)
0000970A 117C 0007 001E             		move.b	#7,$1E(a0)
00009710 117C 0000 001A             		move.b	#0,$1A(a0)
00009716 303C 00C4                  		move.w	#$C4,d0
0000971A 4EF9 0000 159A             		jmp	(PlaySound_Special).l ;	play exploding bomb sound
00009720                            ; ===========================================================================
00009720                            Ani_obj1E:
00009720                            	include "_anim\obj1E.asm"
00009720                            ; ---------------------------------------------------------------------------
00009720                            ; Animation script - doors (SBZ)
00009720                            ; ---------------------------------------------------------------------------
00009720 0000                       		dc.w byte_8E4A-Ani_obj1E
00009722 0900 0002 0203 0200 0002+  byte_8E4A:	dc.b 9,	0, 0, 2, 2, 3, 2, 0, 0,	2, 2, 3, 2, 0, 0, 2, 2, 3, 2, 0, 0, 1, $FF
0000973A 00                         		even
0000973A 00                         		even
0000973A                            
0000973A                            ; ---------------------------------------------------------------------------
0000973A                            ; Sprite mappings - Ball Hog enemy (SBZ)
0000973A                            ; ---------------------------------------------------------------------------
0000973A                            Map_obj1E:
0000973A                            	include "_maps\obj1E.asm"
0000973A                            Map_a7ad:
0000973A 0000                       Map_a7ad_0: 	dc.w Map_a7ad_C-Map_a7ad
0000973C 0000                       Map_a7ad_2: 	dc.w Map_a7ad_17-Map_a7ad
0000973E 0000                       Map_a7ad_4: 	dc.w Map_a7ad_22-Map_a7ad
00009740 0000                       Map_a7ad_6: 	dc.w Map_a7ad_2D-Map_a7ad
00009742 0000                       Map_a7ad_8: 	dc.w Map_a7ad_38-Map_a7ad
00009744 0000                       Map_a7ad_A: 	dc.w Map_a7ad_43-Map_a7ad
00009746 02                         Map_a7ad_C: 	dc.b $2
00009747 EF09 0000 F4               	dc.b $EF, $9, $0, $0, $F4
0000974C FF0A 0006 F4               	dc.b $FF, $A, $0, $6, $F4
00009751 02                         Map_a7ad_17: 	dc.b $2
00009752 EF09 0000 F4               	dc.b $EF, $9, $0, $0, $F4
00009757 FF0A 0006 F4               	dc.b $FF, $A, $0, $6, $F4
0000975C 02                         Map_a7ad_22: 	dc.b $2
0000975D F409 0000 F4               	dc.b $F4, $9, $0, $0, $F4
00009762 0409 0018 F4               	dc.b $4, $9, $0, $18, $F4
00009767 02                         Map_a7ad_2D: 	dc.b $2
00009768 E409 0000 F4               	dc.b $E4, $9, $0, $0, $F4
0000976D F40A 001E F4               	dc.b $F4, $A, $0, $1E, $F4
00009772 02                         Map_a7ad_38: 	dc.b $2
00009773 F805 0027 F8               	dc.b $F8, $5, $0, $27, $F8
00009778 E805 000F F8               	dc.b $E8, $5, $0, $F, $F8
0000977D 02                         Map_a7ad_43: 	dc.b $2
0000977E F805 002B F8               	dc.b $F8, $5, $0, $2B, $F8
00009783 E805 0013 F8               	dc.b $E8, $5, $0, $13, $F8
00009788                            	even
00009788                            	even
00009788                            
00009788                            ; ---------------------------------------------------------------------------
00009788                            ; Sprite mappings - explosion
00009788                            ; ---------------------------------------------------------------------------
00009788                            Map_obj24:
00009788                            	include "_maps\obj24.asm"
00009788                            ; ---------------------------------------------------------------------------
00009788                            ; Sprite mappings - explosion
00009788                            ; ---------------------------------------------------------------------------
00009788 0000 0000                  		dc.w byte_8EAE-Map_obj24, byte_8EB4-Map_obj24
0000978C 0000 0000                  		dc.w byte_8EBA-Map_obj24, byte_8EC0-Map_obj24
00009790 01                         byte_8EAE:	dc.b 1
00009791 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00009796 01                         byte_8EB4:	dc.b 1
00009797 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0000979C 01                         byte_8EBA:	dc.b 1
0000979D F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
000097A2 01                         byte_8EC0:	dc.b 1
000097A3 F40A 001B F4               		dc.b $F4, $A, 0, $1B, $F4
000097A8                            		even
000097A8                            		even
000097A8                            
000097A8                            ; ---------------------------------------------------------------------------
000097A8                            ; Sprite mappings - explosion
000097A8                            ; ---------------------------------------------------------------------------
000097A8 0000 0000                  Map_obj27:	dc.w byte_8ED0-Map_obj27, byte_8ED6-Map_obj27
000097AC 0000 0000                  		dc.w byte_8EDC-Map_obj27, byte_8EE2-Map_obj27
000097B0 0000                       		dc.w byte_8EF7-Map_obj27
000097B2 01                         byte_8ED0:	dc.b 1
000097B3 F809 0000 F4               		dc.b $F8, 9, 0,	0, $F4
000097B8 01                         byte_8ED6:	dc.b 1
000097B9 F00F 0006 F0               		dc.b $F0, $F, 0, 6, $F0
000097BE 01                         byte_8EDC:	dc.b 1
000097BF F00F 0016 F0               		dc.b $F0, $F, 0, $16, $F0
000097C4 04                         byte_8EE2:	dc.b 4
000097C5 EC0A 0026 EC               		dc.b $EC, $A, 0, $26, $EC
000097CA EC05 002F 04               		dc.b $EC, 5, 0,	$2F, 4
000097CF 0405 182F EC               		dc.b 4,	5, $18,	$2F, $EC
000097D4 FC0A 1826 FC               		dc.b $FC, $A, $18, $26,	$FC
000097D9 04                         byte_8EF7:	dc.b 4
000097DA EC0A 0033 EC               		dc.b $EC, $A, 0, $33, $EC
000097DF EC05 003C 04               		dc.b $EC, 5, 0,	$3C, 4
000097E4 0405 183C EC               		dc.b 4,	5, $18,	$3C, $EC
000097E9 FC0A 1833 FC               		dc.b $FC, $A, $18, $33,	$FC
000097EE                            		even
000097EE                            ; ---------------------------------------------------------------------------
000097EE                            ; Sprite mappings - explosion from when	a boss is destroyed
000097EE                            ; ---------------------------------------------------------------------------
000097EE FFC4                       Map_obj3F:	dc.w byte_8ED0-Map_obj3F
000097F0 0000                       		dc.w byte_8F16-Map_obj3F
000097F2 0000                       		dc.w byte_8F1C-Map_obj3F
000097F4 FFD6                       		dc.w byte_8EE2-Map_obj3F
000097F6 FFEB                       		dc.w byte_8EF7-Map_obj3F
000097F8 01                         byte_8F16:	dc.b 1
000097F9 F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
000097FE 01                         byte_8F1C:	dc.b 1
000097FF F00F 0050 F0               		dc.b $F0, $F, 0, $50, $F0
00009804                            		even
00009804                            ; ===========================================================================
00009804                            ; ---------------------------------------------------------------------------
00009804                            ; Object 28 - animals
00009804                            ; ---------------------------------------------------------------------------
00009804                            
00009804                            Obj28:					; XREF: Obj_Index
00009804 7000                       		moveq	#0,d0
00009806 1028 0024                  		move.b	$24(a0),d0
0000980A 323B 0000                  		move.w	Obj28_Index(pc,d0.w),d1
0000980E 4EFB 1000                  		jmp	Obj28_Index(pc,d1.w)
00009812                            ; ===========================================================================
00009812 0000 0000                  Obj28_Index:	dc.w Obj28_Ending-Obj28_Index, loc_912A-Obj28_Index
00009816 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
0000981A 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9184-Obj28_Index
0000981E 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
00009822 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9240-Obj28_Index
00009826 0000 0000                  		dc.w loc_9260-Obj28_Index, loc_9260-Obj28_Index
0000982A 0000 0000                  		dc.w loc_9280-Obj28_Index, loc_92BA-Obj28_Index
0000982E 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
00009832 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
00009836 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9370-Obj28_Index
0000983A 0000                       		dc.w loc_92D6-Obj28_Index
0000983C                            
0000983C 0005 0203 0603 0405 0401+  Obj28_VarIndex:	dc.b 0,	5, 2, 3, 6, 3, 4, 5, 4,	1, 0, 1, 0,	5, 0,	5
0000984C                            
0000984C FE00 FC00                  Obj28_Variables:dc.w $FE00, $FC00
00009850 0000 0000                  		dc.l Map_obj28
00009854 FE00 FD00                  		dc.w $FE00, $FD00	; horizontal speed, vertical speed
00009858 0000 0000                  		dc.l Map_obj28a		; mappings address
0000985C FE80 FD00                  		dc.w $FE80, $FD00
00009860 0000 0000                  		dc.l Map_obj28
00009864 FEC0 FE80                  		dc.w $FEC0, $FE80
00009868 0000 0000                  		dc.l Map_obj28a
0000986C FE40 FD00                  		dc.w $FE40, $FD00
00009870 0000 0000                  		dc.l Map_obj28b
00009874 FD00 FC00                  		dc.w $FD00, $FC00
00009878 0000 0000                  		dc.l Map_obj28a
0000987C FD80 FC80                  		dc.w $FD80, $FC80
00009880 0000 0000                  		dc.l Map_obj28b
00009884                            
00009884 FBC0 FC00 FBC0 FC00 FBC0+  Obj28_EndSpeed:	dc.w $FBC0, $FC00, $FBC0, $FC00, $FBC0,	$FC00, $FD00, $FC00
00009894 FD00 FC00 FE80 FD00 FE80+  		dc.w $FD00, $FC00, $FE80, $FD00, $FE80,	$FD00, $FEC0, $FE80
000098A4 FE40 FD00 FE00 FD00 FD80+  		dc.w $FE40, $FD00, $FE00, $FD00, $FD80,	$FC80
000098B0                            
000098B0 0000 0000 0000 0000 0000+  Obj28_EndMap:	dc.l Map_obj28a, Map_obj28a, Map_obj28a, Map_obj28, Map_obj28
000098C4 0000 0000 0000 0000 0000+  		dc.l Map_obj28,	Map_obj28, Map_obj28a, Map_obj28b, Map_obj28a
000098D8 0000 0000                  		dc.l Map_obj28b
000098DC                            
000098DC 05A5 05A5 05A5 0553 0553+  Obj28_EndVram:	dc.w $5A5, $5A5, $5A5, $553, $553, $573, $573, $585, $593
000098EE 0565 05B3                  		dc.w $565, $5B3
000098F2                            ; ===========================================================================
000098F2                            
000098F2                            Obj28_Ending:				; XREF: Obj28_Index
000098F2 4A28 0028                  		tst.b	$28(a0)		; did animal come from a destroyed enemy?
000098F6 6700 0000                  		beq.w	Obj28_FromEnemy	; if yes, branch
000098FA 7000                       		moveq	#0,d0
000098FC 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
00009900 D040                       		add.w	d0,d0		; multiply d0 by 2
00009902 1140 0024                  		move.b	d0,$24(a0)	; move d0 to routine counter
00009906 0440 0014                  		subi.w	#$14,d0
0000990A 317B 00D0 0002             		move.w	Obj28_EndVram(pc,d0.w),2(a0)
00009910 D040                       		add.w	d0,d0
00009912 217B 009C 0004             		move.l	Obj28_EndMap(pc,d0.w),4(a0)
00009918 43FA FF6A                  		lea	Obj28_EndSpeed(pc),a1
0000991C 3171 0000 0032             		move.w	(a1,d0.w),$32(a0) ; load horizontal speed
00009922 3171 0000 0010             		move.w	(a1,d0.w),$10(a0)
00009928 3171 0002 0034             		move.w	2(a1,d0.w),$34(a0) ; load vertical speed
0000992E 3171 0002 0012             		move.w	2(a1,d0.w),$12(a0)
00009934 117C 000C 0016             		move.b	#$C,$16(a0)
0000993A 117C 0004 0001             		move.b	#4,1(a0)
00009940 08E8 0000 0001             		bset	#0,1(a0)
00009946 117C 0006 0018             		move.b	#6,$18(a0)
0000994C 117C 0008 0019             		move.b	#8,$19(a0)
00009952 117C 0007 001E             		move.b	#7,$1E(a0)
00009958 6000 0000                  		bra.w	DisplaySprite
0000995C                            ; ===========================================================================
0000995C                            
0000995C                            Obj28_FromEnemy:			; XREF: Obj28_Ending
0000995C 5428 0024                  		addq.b	#2,$24(a0)
00009960 6100 93AC                  		bsr.w	RandomNumber
00009964 0240 0001                  		andi.w	#1,d0
00009968 7200                       		moveq	#0,d1
0000996A 1238 FE10                  		move.b	($FFFFFE10).w,d1
0000996E D241                       		add.w	d1,d1
00009970 D240                       		add.w	d0,d1
00009972 43FA FEC8                  		lea	Obj28_VarIndex(pc),a1
00009976 1031 1000                  		move.b	(a1,d1.w),d0
0000997A 1140 0030                  		move.b	d0,$30(a0)
0000997E E748                       		lsl.w	#3,d0
00009980 43FA FECA                  		lea	Obj28_Variables(pc),a1
00009984 D2C0                       		adda.w	d0,a1
00009986 3159 0032                  		move.w	(a1)+,$32(a0)	; load horizontal speed
0000998A 3159 0034                  		move.w	(a1)+,$34(a0)	; load vertical	speed
0000998E 2159 0004                  		move.l	(a1)+,4(a0)	; load mappings
00009992 317C 0580 0002             		move.w	#$580,2(a0)	; VRAM setting for 1st animal
00009998 0828 0000 0030             		btst	#0,$30(a0)	; is 1st animal	used?
0000999E 6700                       		beq.s	loc_90C0	; if yes, branch
000099A0 317C 0592 0002             		move.w	#$592,2(a0)	; VRAM setting for 2nd animal
000099A6                            
000099A6                            loc_90C0:
000099A6 117C 000C 0016             		move.b	#$C,$16(a0)
000099AC 117C 0004 0001             		move.b	#4,1(a0)
000099B2 08E8 0000 0001             		bset	#0,1(a0)
000099B8 117C 0006 0018             		move.b	#6,$18(a0)
000099BE 117C 0008 0019             		move.b	#8,$19(a0)
000099C4 117C 0007 001E             		move.b	#7,$1E(a0)
000099CA 117C 0002 001A             		move.b	#2,$1A(a0)
000099D0 317C FC00 0012             		move.w	#-$400,$12(a0)
000099D6 4A38 F7A7                  		tst.b	($FFFFF7A7).w
000099DA 6600                       		bne.s	loc_911C
000099DC 6100 0000                  		bsr.w	SingleObjLoad
000099E0 6600                       		bne.s	Obj28_Display
000099E2 12BC 0029                  		move.b	#$29,0(a1)	; load points object
000099E6 3368 0008 0008             		move.w	8(a0),8(a1)
000099EC 3368 000C 000C             		move.w	$C(a0),$C(a1)
000099F2 3028 003E                  		move.w	$3E(a0),d0
000099F6 E248                       		lsr.w	#1,d0
000099F8 1340 001A                  		move.b	d0,$1A(a1)
000099FC                            
000099FC                            Obj28_Display:
000099FC 6000 0000                  		bra.w	DisplaySprite
00009A00                            ; ===========================================================================
00009A00                            
00009A00                            loc_911C:
00009A00 117C 0012 0024             		move.b	#$12,$24(a0)
00009A06 4268 0010                  		clr.w	$10(a0)
00009A0A 6000 0000                  		bra.w	DisplaySprite
00009A0E                            ; ===========================================================================
00009A0E                            
00009A0E                            loc_912A:				; XREF: Obj28_Index
00009A0E 4A28 0001                  		tst.b	1(a0)
00009A12 6A00 0000                  		bpl.w	DeleteObject
00009A16 6100 0000                  		bsr.w	ObjectFall
00009A1A 4A68 0012                  		tst.w	$12(a0)
00009A1E 6B00                       		bmi.s	loc_9180
00009A20 4EB9 0000 0000             		jsr	ObjHitFloor
00009A26 4A41                       		tst.w	d1
00009A28 6A00                       		bpl.s	loc_9180
00009A2A D368 000C                  		add.w	d1,$C(a0)
00009A2E 3168 0032 0010             		move.w	$32(a0),$10(a0)
00009A34 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009A3A 117C 0001 001A             		move.b	#1,$1A(a0)
00009A40 1028 0030                  		move.b	$30(a0),d0
00009A44 D000                       		add.b	d0,d0
00009A46 5800                       		addq.b	#4,d0
00009A48 1140 0024                  		move.b	d0,$24(a0)
00009A4C 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00009A50 6700                       		beq.s	loc_9180
00009A52 0838 0004 FE0F             		btst	#4,($FFFFFE0F).w
00009A58 6700                       		beq.s	loc_9180
00009A5A 4468 0010                  		neg.w	$10(a0)
00009A5E 0868 0000 0001             		bchg	#0,1(a0)
00009A64                            
00009A64                            loc_9180:
00009A64 6000 0000                  		bra.w	DisplaySprite
00009A68                            ; ===========================================================================
00009A68                            
00009A68                            loc_9184:				; XREF: Obj28_Index
00009A68 6100 0000                  		bsr.w	ObjectFall
00009A6C 117C 0001 001A             		move.b	#1,$1A(a0)
00009A72 4A68 0012                  		tst.w	$12(a0)
00009A76 6B00                       		bmi.s	loc_91AE
00009A78 117C 0000 001A             		move.b	#0,$1A(a0)
00009A7E 4EB9 0000 0000             		jsr	ObjHitFloor
00009A84 4A41                       		tst.w	d1
00009A86 6A00                       		bpl.s	loc_91AE
00009A88 D368 000C                  		add.w	d1,$C(a0)
00009A8C 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009A92                            
00009A92                            loc_91AE:
00009A92 4A28 0028                  		tst.b	$28(a0)
00009A96 6600                       		bne.s	loc_9224
00009A98 4A28 0001                  		tst.b	1(a0)
00009A9C 6A00 0000                  		bpl.w	DeleteObject
00009AA0 6000 0000                  		bra.w	DisplaySprite
00009AA4                            ; ===========================================================================
00009AA4                            
00009AA4                            loc_91C0:				; XREF: Obj28_Index
00009AA4 6100 0000                  		bsr.w	SpeedToPos
00009AA8 0668 0018 0012             		addi.w	#$18,$12(a0)
00009AAE 4A68 0012                  		tst.w	$12(a0)
00009AB2 6B00                       		bmi.s	loc_91FC
00009AB4 4EB9 0000 0000             		jsr	ObjHitFloor
00009ABA 4A41                       		tst.w	d1
00009ABC 6A00                       		bpl.s	loc_91FC
00009ABE D368 000C                  		add.w	d1,$C(a0)
00009AC2 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009AC8 4A28 0028                  		tst.b	$28(a0)
00009ACC 6700                       		beq.s	loc_91FC
00009ACE 0C28 000A 0028             		cmpi.b	#$A,$28(a0)
00009AD4 6700                       		beq.s	loc_91FC
00009AD6 4468 0010                  		neg.w	$10(a0)
00009ADA 0868 0000 0001             		bchg	#0,1(a0)
00009AE0                            
00009AE0                            loc_91FC:
00009AE0 5328 001E                  		subq.b	#1,$1E(a0)
00009AE4 6A00                       		bpl.s	loc_9212
00009AE6 117C 0001 001E             		move.b	#1,$1E(a0)
00009AEC 5228 001A                  		addq.b	#1,$1A(a0)
00009AF0 0228 0001 001A             		andi.b	#1,$1A(a0)
00009AF6                            
00009AF6                            loc_9212:
00009AF6 4A28 0028                  		tst.b	$28(a0)
00009AFA 6600                       		bne.s	loc_9224
00009AFC 4A28 0001                  		tst.b	1(a0)
00009B00 6A00 0000                  		bpl.w	DeleteObject
00009B04 6000 0000                  		bra.w	DisplaySprite
00009B08                            ; ===========================================================================
00009B08                            
00009B08                            loc_9224:				; XREF: Obj28_Index
00009B08 3028 0008                  		move.w	8(a0),d0
00009B0C 9078 D008                  		sub.w	($FFFFD008).w,d0
00009B10 6500                       		bcs.s	loc_923C
00009B12 0440 0180                  		subi.w	#$180,d0
00009B16 6A00                       		bpl.s	loc_923C
00009B18 4A28 0001                  		tst.b	1(a0)
00009B1C 6A00 0000                  		bpl.w	DeleteObject
00009B20                            
00009B20                            loc_923C:
00009B20 6000 0000                  		bra.w	DisplaySprite
00009B24                            ; ===========================================================================
00009B24                            
00009B24                            loc_9240:				; XREF: Obj28_Index
00009B24 4A28 0001                  		tst.b	1(a0)
00009B28 6A00 0000                  		bpl.w	DeleteObject
00009B2C 5368 0036                  		subq.w	#1,$36(a0)
00009B30 6600 0000                  		bne.w	loc_925C
00009B34 117C 0002 0024             		move.b	#2,$24(a0)
00009B3A 117C 0003 0018             		move.b	#3,$18(a0)
00009B40                            
00009B40                            loc_925C:
00009B40 6000 0000                  		bra.w	DisplaySprite
00009B44                            ; ===========================================================================
00009B44                            
00009B44                            loc_9260:				; XREF: Obj28_Index
00009B44 6100 0000                  		bsr.w	sub_9404
00009B48 6400                       		bcc.s	loc_927C
00009B4A 3168 0032 0010             		move.w	$32(a0),$10(a0)
00009B50 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009B56 117C 000E 0024             		move.b	#$E,$24(a0)
00009B5C 6000 FF46                  		bra.w	loc_91C0
00009B60                            ; ===========================================================================
00009B60                            
00009B60                            loc_927C:
00009B60 6000 FFA6                  		bra.w	loc_9224
00009B64                            ; ===========================================================================
00009B64                            
00009B64                            loc_9280:				; XREF: Obj28_Index
00009B64 6100 0000                  		bsr.w	sub_9404
00009B68 6A00                       		bpl.s	loc_92B6
00009B6A 4268 0010                  		clr.w	$10(a0)
00009B6E 4268 0032                  		clr.w	$32(a0)
00009B72 6100 0000                  		bsr.w	SpeedToPos
00009B76 0668 0018 0012             		addi.w	#$18,$12(a0)
00009B7C 6100 0000                  		bsr.w	loc_93C4
00009B80 6100 0000                  		bsr.w	loc_93EC
00009B84 5328 001E                  		subq.b	#1,$1E(a0)
00009B88 6A00                       		bpl.s	loc_92B6
00009B8A 117C 0001 001E             		move.b	#1,$1E(a0)
00009B90 5228 001A                  		addq.b	#1,$1A(a0)
00009B94 0228 0001 001A             		andi.b	#1,$1A(a0)
00009B9A                            
00009B9A                            loc_92B6:
00009B9A 6000 FF6C                  		bra.w	loc_9224
00009B9E                            ; ===========================================================================
00009B9E                            
00009B9E                            loc_92BA:				; XREF: Obj28_Index
00009B9E 6100 0000                  		bsr.w	sub_9404
00009BA2 6A00                       		bpl.s	loc_9310
00009BA4 3168 0032 0010             		move.w	$32(a0),$10(a0)
00009BAA 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009BB0 117C 0004 0024             		move.b	#4,$24(a0)
00009BB6 6000 FEB0                  		bra.w	loc_9184
00009BBA                            ; ===========================================================================
00009BBA                            
00009BBA                            loc_92D6:				; XREF: Obj28_Index
00009BBA 6100 0000                  		bsr.w	ObjectFall
00009BBE 117C 0001 001A             		move.b	#1,$1A(a0)
00009BC4 4A68 0012                  		tst.w	$12(a0)
00009BC8 6B00                       		bmi.s	loc_9310
00009BCA 117C 0000 001A             		move.b	#0,$1A(a0)
00009BD0 4EB9 0000 0000             		jsr	ObjHitFloor
00009BD6 4A41                       		tst.w	d1
00009BD8 6A00                       		bpl.s	loc_9310
00009BDA 4628 0029                  		not.b	$29(a0)
00009BDE 6600                       		bne.s	loc_9306
00009BE0 4468 0010                  		neg.w	$10(a0)
00009BE4 0868 0000 0001             		bchg	#0,1(a0)
00009BEA                            
00009BEA                            loc_9306:
00009BEA D368 000C                  		add.w	d1,$C(a0)
00009BEE 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009BF4                            
00009BF4                            loc_9310:
00009BF4 6000 FF12                  		bra.w	loc_9224
00009BF8                            ; ===========================================================================
00009BF8                            
00009BF8                            loc_9314:				; XREF: Obj28_Index
00009BF8 6100 0000                  		bsr.w	sub_9404
00009BFC 6A00                       		bpl.s	loc_932E
00009BFE 4268 0010                  		clr.w	$10(a0)
00009C02 4268 0032                  		clr.w	$32(a0)
00009C06 6100 0000                  		bsr.w	ObjectFall
00009C0A 6100 0000                  		bsr.w	loc_93C4
00009C0E 6100 0000                  		bsr.w	loc_93EC
00009C12                            
00009C12                            loc_932E:
00009C12 6000 FEF4                  		bra.w	loc_9224
00009C16                            ; ===========================================================================
00009C16                            
00009C16                            loc_9332:				; XREF: Obj28_Index
00009C16 6100 0000                  		bsr.w	sub_9404
00009C1A 6A00                       		bpl.s	loc_936C
00009C1C 6100 0000                  		bsr.w	ObjectFall
00009C20 117C 0001 001A             		move.b	#1,$1A(a0)
00009C26 4A68 0012                  		tst.w	$12(a0)
00009C2A 6B00                       		bmi.s	loc_936C
00009C2C 117C 0000 001A             		move.b	#0,$1A(a0)
00009C32 4EB9 0000 0000             		jsr	ObjHitFloor
00009C38 4A41                       		tst.w	d1
00009C3A 6A00                       		bpl.s	loc_936C
00009C3C 4468 0010                  		neg.w	$10(a0)
00009C40 0868 0000 0001             		bchg	#0,1(a0)
00009C46 D368 000C                  		add.w	d1,$C(a0)
00009C4A 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009C50                            
00009C50                            loc_936C:
00009C50 6000 FEB6                  		bra.w	loc_9224
00009C54                            ; ===========================================================================
00009C54                            
00009C54                            loc_9370:				; XREF: Obj28_Index
00009C54 6100 0000                  		bsr.w	sub_9404
00009C58 6A00                       		bpl.s	loc_93C0
00009C5A 6100 0000                  		bsr.w	SpeedToPos
00009C5E 0668 0018 0012             		addi.w	#$18,$12(a0)
00009C64 4A68 0012                  		tst.w	$12(a0)
00009C68 6B00                       		bmi.s	loc_93AA
00009C6A 4EB9 0000 0000             		jsr	ObjHitFloor
00009C70 4A41                       		tst.w	d1
00009C72 6A00                       		bpl.s	loc_93AA
00009C74 4628 0029                  		not.b	$29(a0)
00009C78 6600                       		bne.s	loc_93A0
00009C7A 4468 0010                  		neg.w	$10(a0)
00009C7E 0868 0000 0001             		bchg	#0,1(a0)
00009C84                            
00009C84                            loc_93A0:
00009C84 D368 000C                  		add.w	d1,$C(a0)
00009C88 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009C8E                            
00009C8E                            loc_93AA:
00009C8E 5328 001E                  		subq.b	#1,$1E(a0)
00009C92 6A00                       		bpl.s	loc_93C0
00009C94 117C 0001 001E             		move.b	#1,$1E(a0)
00009C9A 5228 001A                  		addq.b	#1,$1A(a0)
00009C9E 0228 0001 001A             		andi.b	#1,$1A(a0)
00009CA4                            
00009CA4                            loc_93C0:
00009CA4 6000 FE62                  		bra.w	loc_9224
00009CA8                            ; ===========================================================================
00009CA8                            
00009CA8                            loc_93C4:
00009CA8 117C 0001 001A             		move.b	#1,$1A(a0)
00009CAE 4A68 0012                  		tst.w	$12(a0)
00009CB2 6B00                       		bmi.s	locret_93EA
00009CB4 117C 0000 001A             		move.b	#0,$1A(a0)
00009CBA 4EB9 0000 0000             		jsr	ObjHitFloor
00009CC0 4A41                       		tst.w	d1
00009CC2 6A00                       		bpl.s	locret_93EA
00009CC4 D368 000C                  		add.w	d1,$C(a0)
00009CC8 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009CCE                            
00009CCE                            locret_93EA:
00009CCE 4E75                       		rts	
00009CD0                            ; ===========================================================================
00009CD0                            
00009CD0                            loc_93EC:
00009CD0 08E8 0000 0001             		bset	#0,1(a0)
00009CD6 3028 0008                  		move.w	8(a0),d0
00009CDA 9078 D008                  		sub.w	($FFFFD008).w,d0
00009CDE 6400                       		bcc.s	locret_9402
00009CE0 08A8 0000 0001             		bclr	#0,1(a0)
00009CE6                            
00009CE6                            locret_9402:
00009CE6 4E75                       		rts	
00009CE8                            
00009CE8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009CE8                            
00009CE8                            
00009CE8                            sub_9404:
00009CE8 3038 D008                  		move.w	($FFFFD008).w,d0
00009CEC 9068 0008                  		sub.w	8(a0),d0
00009CF0 0440 00B8                  		subi.w	#$B8,d0
00009CF4 4E75                       		rts	
00009CF6                            ; End of function sub_9404
00009CF6                            
00009CF6                            ; ===========================================================================
00009CF6                            ; ---------------------------------------------------------------------------
00009CF6                            ; Object 29 - points that appear when you destroy something
00009CF6                            ; ---------------------------------------------------------------------------
00009CF6                            
00009CF6                            Obj29:					; XREF: Obj_Index
00009CF6 7000                       		moveq	#0,d0
00009CF8 1028 0024                  		move.b	$24(a0),d0
00009CFC 323B 0000                  		move.w	Obj29_Index(pc,d0.w),d1
00009D00 4EBB 1000                  		jsr	Obj29_Index(pc,d1.w)
00009D04 6000 0000                  		bra.w	DisplaySprite
00009D08                            ; ===========================================================================
00009D08 0000                       Obj29_Index:	dc.w Obj29_Main-Obj29_Index
00009D0A 0000                       		dc.w Obj29_Slower-Obj29_Index
00009D0C                            ; ===========================================================================
00009D0C                            
00009D0C                            Obj29_Main:				; XREF: Obj29_Index
00009D0C 5428 0024                  		addq.b	#2,$24(a0)
00009D10 217C 0000 0000 0004        		move.l	#Map_obj29,4(a0)
00009D18 317C 2797 0002             		move.w	#$2797,2(a0)
00009D1E 117C 0004 0001             		move.b	#4,1(a0)
00009D24 117C 0001 0018             		move.b	#1,$18(a0)
00009D2A 117C 0008 0019             		move.b	#8,$19(a0)
00009D30 317C FD00 0012             		move.w	#-$300,$12(a0)	; move object upwards
00009D36                            
00009D36                            Obj29_Slower:				; XREF: Obj29_Index
00009D36 4A68 0012                  		tst.w	$12(a0)		; is object moving?
00009D3A 6A00 0000                  		bpl.w	DeleteObject	; if not, branch
00009D3E 6100 0000                  		bsr.w	SpeedToPos
00009D42 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
00009D48 4E75                       		rts	
00009D4A                            ; ===========================================================================
00009D4A                            ; ---------------------------------------------------------------------------
00009D4A                            ; Sprite mappings - animals
00009D4A                            ; ---------------------------------------------------------------------------
00009D4A                            Map_obj28:
00009D4A                            	include "_maps\obj28.asm"
00009D4A                            ; ---------------------------------------------------------------------------
00009D4A                            ; Sprite mappings - animals
00009D4A                            ; ---------------------------------------------------------------------------
00009D4A 0000                       		dc.w byte_9472-Map_obj28
00009D4C 0000                       		dc.w byte_9478-Map_obj28
00009D4E 0000                       		dc.w byte_946C-Map_obj28
00009D50 01                         byte_946C:	dc.b 1
00009D51 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00009D56 01                         byte_9472:	dc.b 1
00009D57 F406 0006 F8               		dc.b $F4, 6, 0,	6, $F8
00009D5C 01                         byte_9478:	dc.b 1
00009D5D F406 000C F8               		dc.b $F4, 6, 0,	$C, $F8
00009D62                            		even
00009D62                            		even
00009D62                            
00009D62                            Map_obj28a:
00009D62                            	include "_maps\obj28a.asm"
00009D62                            ; ---------------------------------------------------------------------------
00009D62                            ; Sprite mappings - animals
00009D62                            ; ---------------------------------------------------------------------------
00009D62 0000                       		dc.w byte_948A-Map_obj28a
00009D64 0000                       		dc.w byte_9490-Map_obj28a
00009D66 0000                       		dc.w byte_9484-Map_obj28a
00009D68 01                         byte_9484:	dc.b 1
00009D69 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00009D6E 01                         byte_948A:	dc.b 1
00009D6F FC05 0006 F8               		dc.b $FC, 5, 0,	6, $F8
00009D74 01                         byte_9490:	dc.b 1
00009D75 FC05 000A F8               		dc.b $FC, 5, 0,	$A, $F8
00009D7A                            		even
00009D7A                            		even
00009D7A                            
00009D7A                            Map_obj28b:
00009D7A                            	include "_maps\obj28b.asm"
00009D7A                            ; ---------------------------------------------------------------------------
00009D7A                            ; Sprite mappings - animals
00009D7A                            ; ---------------------------------------------------------------------------
00009D7A 0000                       		dc.w byte_94A2-Map_obj28b
00009D7C 0000                       		dc.w byte_94A8-Map_obj28b
00009D7E 0000                       		dc.w byte_949C-Map_obj28b
00009D80 01                         byte_949C:	dc.b 1
00009D81 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00009D86 01                         byte_94A2:	dc.b 1
00009D87 FC09 0006 F4               		dc.b $FC, 9, 0,	6, $F4
00009D8C 01                         byte_94A8:	dc.b 1
00009D8D FC09 000C F4               		dc.b $FC, 9, 0,	$C, $F4
00009D92                            		even
00009D92                            		even
00009D92                            
00009D92                            ; ---------------------------------------------------------------------------
00009D92                            ; Sprite mappings - points that	appear when you	destroy	something
00009D92                            ; ---------------------------------------------------------------------------
00009D92                            Map_obj29:
00009D92                            	include "_maps\obj29.asm"
00009D92                            ; ---------------------------------------------------------------------------
00009D92                            ; Sprite mappings - points that	appear when you	destroy	something
00009D92                            ; ---------------------------------------------------------------------------
00009D92 0000 0000                  		dc.w byte_94BC-Map_obj29, byte_94C2-Map_obj29
00009D96 0000 0000                  		dc.w byte_94C8-Map_obj29, byte_94CE-Map_obj29
00009D9A 0000 0000                  		dc.w byte_94D4-Map_obj29, byte_94DA-Map_obj29
00009D9E 0000                       		dc.w byte_94E5-Map_obj29
00009DA0 01                         byte_94BC:	dc.b 1
00009DA1 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8	; 100 points
00009DA6 01                         byte_94C2:	dc.b 1
00009DA7 FC04 0002 F8               		dc.b $FC, 4, 0,	2, $F8	; 200 points
00009DAC 01                         byte_94C8:	dc.b 1
00009DAD FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8	; 500 points
00009DB2 01                         byte_94CE:	dc.b 1
00009DB3 FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8	; 1000 points
00009DB8 01                         byte_94D4:	dc.b 1
00009DB9 FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC	; 10 points
00009DBE 02                         byte_94DA:	dc.b 2
00009DBF FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 10,000 points
00009DC4 FC04 0007 01               		dc.b $FC, 4, 0,	7, 1
00009DC9 02                         byte_94E5:	dc.b 2
00009DCA FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 100,000 points
00009DCF FC04 0007 06               		dc.b $FC, 4, 0,	7, 6
00009DD4                            		even
00009DD4                            		even
00009DD4                            
00009DD4                            ; ===========================================================================
00009DD4                            ; ---------------------------------------------------------------------------
00009DD4                            ; Object 1F - Crabmeat enemy (GHZ, SYZ)
00009DD4                            ; ---------------------------------------------------------------------------
00009DD4                            
00009DD4                            Obj1F:					; XREF: Obj_Index
00009DD4 7000                       		moveq	#0,d0
00009DD6 1028 0024                  		move.b	$24(a0),d0
00009DDA 323B 0000                  		move.w	Obj1F_Index(pc,d0.w),d1
00009DDE 4EFB 1000                  		jmp	Obj1F_Index(pc,d1.w)
00009DE2                            ; ===========================================================================
00009DE2 0000                       Obj1F_Index:	dc.w Obj1F_Main-Obj1F_Index
00009DE4 0000                       		dc.w Obj1F_Action-Obj1F_Index
00009DE6 0000                       		dc.w Obj1F_Delete-Obj1F_Index
00009DE8 0000                       		dc.w Obj1F_BallMain-Obj1F_Index
00009DEA 0000                       		dc.w Obj1F_BallMove-Obj1F_Index
00009DEC                            ; ===========================================================================
00009DEC                            
00009DEC                            Obj1F_Main:				; XREF: Obj1F_Index
00009DEC 117C 0010 0016             		move.b	#$10,$16(a0)
00009DF2 117C 0008 0017             		move.b	#8,$17(a0)
00009DF8 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
00009E00 317C 0400 0002             		move.w	#$400,2(a0)
00009E06 117C 0004 0001             		move.b	#4,1(a0)
00009E0C 117C 0003 0018             		move.b	#3,$18(a0)
00009E12 117C 0006 0020             		move.b	#6,$20(a0)
00009E18 117C 0015 0019             		move.b	#$15,$19(a0)
00009E1E 6100 0000                  		bsr.w	ObjectFall
00009E22 4EB9 0000 0000             		jsr	ObjHitFloor
00009E28 4A41                       		tst.w	d1
00009E2A 6A00                       		bpl.s	locret_955A
00009E2C D368 000C                  		add.w	d1,$C(a0)
00009E30 1143 0026                  		move.b	d3,$26(a0)
00009E34 317C 0000 0012             		move.w	#0,$12(a0)
00009E3A 5428 0024                  		addq.b	#2,$24(a0)
00009E3E                            
00009E3E                            locret_955A:
00009E3E 4E75                       		rts	
00009E40                            ; ===========================================================================
00009E40                            
00009E40                            Obj1F_Action:				; XREF: Obj1F_Index
00009E40 7000                       		moveq	#0,d0
00009E42 1028 0025                  		move.b	$25(a0),d0
00009E46 323B 0000                  		move.w	Obj1F_Index2(pc,d0.w),d1
00009E4A 4EBB 1000                  		jsr	Obj1F_Index2(pc,d1.w)
00009E4E 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
00009E54 6100 0000                  		bsr.w	AnimateSprite
00009E58 6000 0000                  		bra.w	MarkObjGone
00009E5C                            ; ===========================================================================
00009E5C 0000                       Obj1F_Index2:	dc.w Obj1F_WaitFire-Obj1F_Index2
00009E5E 0000                       		dc.w Obj1F_WalkOnFloor-Obj1F_Index2
00009E60                            ; ===========================================================================
00009E60                            
00009E60                            Obj1F_WaitFire:				; XREF: Obj1F_Index2
00009E60 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00009E64 6A00                       		bpl.s	locret_95B6
00009E66 4A28 0001                  		tst.b	1(a0)
00009E6A 6A00                       		bpl.s	Obj1F_Move
00009E6C 0868 0001 0032             		bchg	#1,$32(a0)
00009E72 6600                       		bne.s	Obj1F_MakeFire
00009E74                            
00009E74                            Obj1F_Move:
00009E74 5428 0025                  		addq.b	#2,$25(a0)
00009E78 317C 007F 0030             		move.w	#127,$30(a0)	; set time delay to approx 2 seconds
00009E7E 317C 0080 0010             		move.w	#$80,$10(a0)	; move Crabmeat	to the right
00009E84 6100 0000                  		bsr.w	Obj1F_SetAni
00009E88 5600                       		addq.b	#3,d0
00009E8A 1140 001C                  		move.b	d0,$1C(a0)
00009E8E 0868 0000 0022             		bchg	#0,$22(a0)
00009E94 6600                       		bne.s	locret_95B6
00009E96 4468 0010                  		neg.w	$10(a0)		; change direction
00009E9A                            
00009E9A                            locret_95B6:
00009E9A 4E75                       		rts	
00009E9C                            ; ===========================================================================
00009E9C                            
00009E9C                            Obj1F_MakeFire:				; XREF: Obj1F_WaitFire
00009E9C 317C 003B 0030             		move.w	#$3B,$30(a0)
00009EA2 117C 0006 001C             		move.b	#6,$1C(a0)	; use firing animation
00009EA8 6100 0000                  		bsr.w	SingleObjLoad
00009EAC 6600                       		bne.s	Obj1F_MakeFire2
00009EAE 12BC 001F                  		move.b	#$1F,0(a1)	; load left fireball
00009EB2 137C 0006 0024             		move.b	#6,$24(a1)
00009EB8 3368 0008 0008             		move.w	8(a0),8(a1)
00009EBE 0469 0010 0008             		subi.w	#$10,8(a1)
00009EC4 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009ECA 337C FF00 0010             		move.w	#-$100,$10(a1)
00009ED0                            
00009ED0                            Obj1F_MakeFire2:
00009ED0 6100 0000                  		bsr.w	SingleObjLoad
00009ED4 6600                       		bne.s	locret_9618
00009ED6 12BC 001F                  		move.b	#$1F,0(a1)	; load right fireball
00009EDA 137C 0006 0024             		move.b	#6,$24(a1)
00009EE0 3368 0008 0008             		move.w	8(a0),8(a1)
00009EE6 0669 0010 0008             		addi.w	#$10,8(a1)
00009EEC 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009EF2 337C 0100 0010             		move.w	#$100,$10(a1)
00009EF8                            
00009EF8                            locret_9618:
00009EF8 4E75                       		rts	
00009EFA                            ; ===========================================================================
00009EFA                            
00009EFA                            Obj1F_WalkOnFloor:			; XREF: Obj1F_Index2
00009EFA 5368 0030                  		subq.w	#1,$30(a0)
00009EFE 6B00                       		bmi.s	loc_966E
00009F00 6100 0000                  		bsr.w	SpeedToPos
00009F04 0868 0000 0032             		bchg	#0,$32(a0)
00009F0A 6600                       		bne.s	loc_9654
00009F0C 3628 0008                  		move.w	8(a0),d3
00009F10 0643 0010                  		addi.w	#$10,d3
00009F14 0828 0000 0022             		btst	#0,$22(a0)
00009F1A 6700                       		beq.s	loc_9640
00009F1C 0443 0020                  		subi.w	#$20,d3
00009F20                            
00009F20                            loc_9640:
00009F20 4EB9 0000 0000             		jsr	ObjHitFloor2
00009F26 0C41 FFF8                  		cmpi.w	#-8,d1
00009F2A 6D00                       		blt.s	loc_966E
00009F2C 0C41 000C                  		cmpi.w	#$C,d1
00009F30 6C00                       		bge.s	loc_966E
00009F32 4E75                       		rts	
00009F34                            ; ===========================================================================
00009F34                            
00009F34                            loc_9654:				; XREF: Obj1F_WalkOnFloor
00009F34 4EB9 0000 0000             		jsr	ObjHitFloor
00009F3A D368 000C                  		add.w	d1,$C(a0)
00009F3E 1143 0026                  		move.b	d3,$26(a0)
00009F42 6100 0000                  		bsr.w	Obj1F_SetAni
00009F46 5600                       		addq.b	#3,d0
00009F48 1140 001C                  		move.b	d0,$1C(a0)
00009F4C 4E75                       		rts	
00009F4E                            ; ===========================================================================
00009F4E                            
00009F4E                            loc_966E:				; XREF: Obj1F_WalkOnFloor
00009F4E 5528 0025                  		subq.b	#2,$25(a0)
00009F52 317C 003B 0030             		move.w	#59,$30(a0)
00009F58 317C 0000 0010             		move.w	#0,$10(a0)
00009F5E 6100 0000                  		bsr.w	Obj1F_SetAni
00009F62 1140 001C                  		move.b	d0,$1C(a0)
00009F66 4E75                       		rts	
00009F68                            ; ---------------------------------------------------------------------------
00009F68                            ; Subroutine to	set the	correct	animation for a	Crabmeat
00009F68                            ; ---------------------------------------------------------------------------
00009F68                            
00009F68                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009F68                            
00009F68                            
00009F68                            Obj1F_SetAni:				; XREF: loc_966E
00009F68 7000                       		moveq	#0,d0
00009F6A 1628 0026                  		move.b	$26(a0),d3
00009F6E 6B00                       		bmi.s	loc_96A4
00009F70 0C03 0006                  		cmpi.b	#6,d3
00009F74 6500                       		bcs.s	locret_96A2
00009F76 7001                       		moveq	#1,d0
00009F78 0828 0000 0022             		btst	#0,$22(a0)
00009F7E 6600                       		bne.s	locret_96A2
00009F80 7002                       		moveq	#2,d0
00009F82                            
00009F82                            locret_96A2:
00009F82 4E75                       		rts	
00009F84                            ; ===========================================================================
00009F84                            
00009F84                            loc_96A4:				; XREF: Obj1F_SetAni
00009F84 0C03 00FA                  		cmpi.b	#-6,d3
00009F88 6200                       		bhi.s	locret_96B6
00009F8A 7002                       		moveq	#2,d0
00009F8C 0828 0000 0022             		btst	#0,$22(a0)
00009F92 6600                       		bne.s	locret_96B6
00009F94 7001                       		moveq	#1,d0
00009F96                            
00009F96                            locret_96B6:
00009F96 4E75                       		rts	
00009F98                            ; End of function Obj1F_SetAni
00009F98                            
00009F98                            ; ===========================================================================
00009F98                            
00009F98                            Obj1F_Delete:				; XREF: Obj1F_Index
00009F98 6100 0000                  		bsr.w	DeleteObject
00009F9C 4E75                       		rts	
00009F9E                            ; ===========================================================================
00009F9E                            ; ---------------------------------------------------------------------------
00009F9E                            ; Sub-object - missile that the	Crabmeat throws
00009F9E                            ; ---------------------------------------------------------------------------
00009F9E                            
00009F9E                            Obj1F_BallMain:				; XREF: Obj1F_Index
00009F9E 5428 0024                  		addq.b	#2,$24(a0)
00009FA2 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
00009FAA 317C 0400 0002             		move.w	#$400,2(a0)
00009FB0 117C 0004 0001             		move.b	#4,1(a0)
00009FB6 117C 0003 0018             		move.b	#3,$18(a0)
00009FBC 117C 0087 0020             		move.b	#$87,$20(a0)
00009FC2 117C 0008 0019             		move.b	#8,$19(a0)
00009FC8 317C FC00 0012             		move.w	#-$400,$12(a0)
00009FCE 117C 0007 001C             		move.b	#7,$1C(a0)
00009FD4                            
00009FD4                            Obj1F_BallMove:				; XREF: Obj1F_Index
00009FD4 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
00009FDA 6100 0000                  		bsr.w	AnimateSprite
00009FDE 6100 0000                  		bsr.w	ObjectFall
00009FE2 6100 0000                  		bsr.w	DisplaySprite
00009FE6 3038 F72E                  		move.w	($FFFFF72E).w,d0
00009FEA 0640 00E0                  		addi.w	#$E0,d0
00009FEE B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
00009FF2 6500                       		bcs.s	Obj1F_Delete2	; if yes, branch
00009FF4 4E75                       		rts	
00009FF6                            ; ===========================================================================
00009FF6                            
00009FF6                            Obj1F_Delete2:
00009FF6 6000 0000                  		bra.w	DeleteObject
00009FFA                            ; ===========================================================================
00009FFA                            Ani_obj1F:
00009FFA                            	include "_anim\obj1F.asm"
00009FFA                            ; ---------------------------------------------------------------------------
00009FFA                            ; Animation script - Crabmeat enemy
00009FFA                            ; ---------------------------------------------------------------------------
00009FFA 0000 0000 0000             		dc.w byte_972A-Ani_obj1F, byte_972E-Ani_obj1F, byte_9732-Ani_obj1F
0000A000 0000 0000 0000             		dc.w byte_9736-Ani_obj1F, byte_973C-Ani_obj1F, byte_9742-Ani_obj1F
0000A006 0000 0000                  		dc.w byte_9748-Ani_obj1F, byte_974C-Ani_obj1F
0000A00A 0F00 FF00                  byte_972A:	dc.b $F, 0, $FF, 0
0000A00E 0F02 FF00                  byte_972E:	dc.b $F, 2, $FF, 0
0000A012 0F22 FF00                  byte_9732:	dc.b $F, $22, $FF, 0
0000A016 0F01 2100 FF00             byte_9736:	dc.b $F, 1, $21, 0, $FF, 0
0000A01C 0F21 0302 FF00             byte_973C:	dc.b $F, $21, 3, 2, $FF, 0
0000A022 0F01 2322 FF00             byte_9742:	dc.b $F, 1, $23, $22, $FF, 0
0000A028 0F04 FF00                  byte_9748:	dc.b $F, 4, $FF, 0
0000A02C 0105 06FF                  byte_974C:	dc.b 1,	5, 6, $FF
0000A030                            		even
0000A030                            		even
0000A030                            
0000A030                            ; ---------------------------------------------------------------------------
0000A030                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
0000A030                            ; ---------------------------------------------------------------------------
0000A030                            Map_obj1F:
0000A030                            	include "_maps\obj1F.asm"
0000A030                            Map_1514:
0000A030 0000                       Map_1514_0: 	dc.w Map_1514_E-Map_1514
0000A032 0000                       Map_1514_2: 	dc.w Map_1514_1E-Map_1514
0000A034 0000                       Map_1514_4: 	dc.w Map_1514_2E-Map_1514
0000A036 0000                       Map_1514_6: 	dc.w Map_1514_3E-Map_1514
0000A038 0000                       Map_1514_8: 	dc.w Map_1514_4E-Map_1514
0000A03A 0000                       Map_1514_A: 	dc.w Map_1514_5E-Map_1514
0000A03C 0000                       Map_1514_C: 	dc.w Map_1514_64-Map_1514
0000A03E 03                         Map_1514_E: 	dc.b $3
0000A03F F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
0000A044 F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
0000A049 F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
0000A04E 03                         Map_1514_1E: 	dc.b $3
0000A04F F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
0000A054 F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
0000A059 F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
0000A05E 03                         Map_1514_2E: 	dc.b $3
0000A05F F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
0000A064 F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
0000A069 F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
0000A06E 03                         Map_1514_3E: 	dc.b $3
0000A06F F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
0000A074 F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
0000A079 F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
0000A07E 03                         Map_1514_4E: 	dc.b $3
0000A07F F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
0000A084 F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
0000A089 F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
0000A08E 01                         Map_1514_5E: 	dc.b $1
0000A08F F805 0017 F8               	dc.b $F8, $5, $0, $17, $F8
0000A094 01                         Map_1514_64: 	dc.b $1
0000A095 F805 2017 F8               	dc.b $F8, $5, $20, $17, $F8
0000A09A                            	even
0000A09A                            	even
0000A09A                            
0000A09A                            ; ===========================================================================
0000A09A                            ; ---------------------------------------------------------------------------
0000A09A                            ; Object 22 - Buzz Bomber enemy	(GHZ, MZ, SYZ)
0000A09A                            ; ---------------------------------------------------------------------------
0000A09A                            
0000A09A                            Obj22:					; XREF: Obj_Index
0000A09A 7000                       		moveq	#0,d0
0000A09C 1028 0024                  		move.b	$24(a0),d0
0000A0A0 323B 0000                  		move.w	Obj22_Index(pc,d0.w),d1
0000A0A4 4EFB 1000                  		jmp	Obj22_Index(pc,d1.w)
0000A0A8                            ; ===========================================================================
0000A0A8 0000                       Obj22_Index:	dc.w Obj22_Main-Obj22_Index
0000A0AA 0000                       		dc.w Obj22_Action-Obj22_Index
0000A0AC 0000                       		dc.w Obj22_Delete-Obj22_Index
0000A0AE                            ; ===========================================================================
0000A0AE                            
0000A0AE                            Obj22_Main:				; XREF: Obj22_Index
0000A0AE 5428 0024                  		addq.b	#2,$24(a0)
0000A0B2 217C 0000 0000 0004        		move.l	#Map_obj22,4(a0)
0000A0BA 317C 0444 0002             		move.w	#$444,2(a0)
0000A0C0 117C 0004 0001             		move.b	#4,1(a0)
0000A0C6 117C 0003 0018             		move.b	#3,$18(a0)
0000A0CC 117C 0008 0020             		move.b	#8,$20(a0)
0000A0D2 117C 0018 0019             		move.b	#$18,$19(a0)
0000A0D8                            
0000A0D8                            Obj22_Action:				; XREF: Obj22_Index
0000A0D8 7000                       		moveq	#0,d0
0000A0DA 1028 0025                  		move.b	$25(a0),d0
0000A0DE 323B 0000                  		move.w	Obj22_Index2(pc,d0.w),d1
0000A0E2 4EBB 1000                  		jsr	Obj22_Index2(pc,d1.w)
0000A0E6 43F9 0000 0000             		lea	(Ani_obj22).l,a1
0000A0EC 6100 0000                  		bsr.w	AnimateSprite
0000A0F0 6000 0000                  		bra.w	MarkObjGone
0000A0F4                            ; ===========================================================================
0000A0F4 0000                       Obj22_Index2:	dc.w Obj22_Move-Obj22_Index2
0000A0F6 0000                       		dc.w Obj22_ChkNrSonic-Obj22_Index2
0000A0F8                            ; ===========================================================================
0000A0F8                            
0000A0F8                            Obj22_Move:				; XREF: Obj22_Index2
0000A0F8 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000A0FC 6A00                       		bpl.s	locret_986C	; if time remains, branch
0000A0FE 0828 0001 0034             		btst	#1,$34(a0)	; is Buzz Bomber near Sonic?
0000A104 6600                       		bne.s	Obj22_Fire	; if yes, branch
0000A106 5428 0025                  		addq.b	#2,$25(a0)
0000A10A 317C 007F 0032             		move.w	#127,$32(a0)	; set time delay to just over 2	seconds
0000A110 317C 0400 0010             		move.w	#$400,$10(a0)	; move Buzz Bomber to the right
0000A116 117C 0001 001C             		move.b	#1,$1C(a0)	; use "flying" animation
0000A11C 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
0000A122 6600                       		bne.s	locret_986C	; if not, branch
0000A124 4468 0010                  		neg.w	$10(a0)		; move Buzz Bomber to the left
0000A128                            
0000A128                            locret_986C:
0000A128 4E75                       		rts	
0000A12A                            ; ===========================================================================
0000A12A                            
0000A12A                            Obj22_Fire:				; XREF: Obj22_Move
0000A12A 6100 0000                  		bsr.w	SingleObjLoad
0000A12E 6600                       		bne.s	locret_98D0
0000A130 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
0000A134 3368 0008 0008             		move.w	8(a0),8(a1)
0000A13A 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A140 0669 001C 000C             		addi.w	#$1C,$C(a1)
0000A146 337C 0200 0012             		move.w	#$200,$12(a1)	; move missile downwards
0000A14C 337C 0200 0010             		move.w	#$200,$10(a1)	; move missile to the right
0000A152 303C 0018                  		move.w	#$18,d0
0000A156 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
0000A15C 6600                       		bne.s	loc_98AA	; if not, branch
0000A15E 4440                       		neg.w	d0
0000A160 4469 0010                  		neg.w	$10(a1)		; move missile to the left
0000A164                            
0000A164                            loc_98AA:
0000A164 D169 0008                  		add.w	d0,8(a1)
0000A168 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000A16E 337C 000E 0032             		move.w	#$E,$32(a1)
0000A174 2348 003C                  		move.l	a0,$3C(a1)
0000A178 117C 0001 0034             		move.b	#1,$34(a0)	; set to "already fired" to prevent refiring
0000A17E 317C 003B 0032             		move.w	#$3B,$32(a0)
0000A184 117C 0002 001C             		move.b	#2,$1C(a0)	; use "firing" animation
0000A18A                            
0000A18A                            locret_98D0:
0000A18A 4E75                       		rts	
0000A18C                            ; ===========================================================================
0000A18C                            
0000A18C                            Obj22_ChkNrSonic:			; XREF: Obj22_Index2
0000A18C 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000A190 6B00                       		bmi.s	Obj22_ChgDir
0000A192 6100 0000                  		bsr.w	SpeedToPos
0000A196 4A28 0034                  		tst.b	$34(a0)
0000A19A 6600                       		bne.s	locret_992A
0000A19C 3038 D008                  		move.w	($FFFFD008).w,d0
0000A1A0 9068 0008                  		sub.w	8(a0),d0
0000A1A4 6A00                       		bpl.s	Obj22_SetNrSonic
0000A1A6 4440                       		neg.w	d0
0000A1A8                            
0000A1A8                            Obj22_SetNrSonic:
0000A1A8 0C40 0060                  		cmpi.w	#$60,d0		; is Buzz Bomber within	$60 pixels of Sonic?
0000A1AC 6400                       		bcc.s	locret_992A	; if not, branch
0000A1AE 4A28 0001                  		tst.b	1(a0)
0000A1B2 6A00                       		bpl.s	locret_992A
0000A1B4 117C 0002 0034             		move.b	#2,$34(a0)	; set Buzz Bomber to "near Sonic"
0000A1BA 317C 001D 0032             		move.w	#29,$32(a0)	; set time delay to half a second
0000A1C0 6000                       		bra.s	Obj22_Stop
0000A1C2                            ; ===========================================================================
0000A1C2                            
0000A1C2                            Obj22_ChgDir:				; XREF: Obj22_ChkNrSonic
0000A1C2 117C 0000 0034             		move.b	#0,$34(a0)	; set Buzz Bomber to "normal"
0000A1C8 0868 0000 0022             		bchg	#0,$22(a0)	; change direction
0000A1CE 317C 003B 0032             		move.w	#59,$32(a0)
0000A1D4                            
0000A1D4                            Obj22_Stop:				; XREF: Obj22_SetNrSonic
0000A1D4 5528 0025                  		subq.b	#2,$25(a0)	; run "Obj22_Fire" routine
0000A1D8 317C 0000 0010             		move.w	#0,$10(a0)	; stop Buzz Bomber moving
0000A1DE 117C 0000 001C             		move.b	#0,$1C(a0)	; use "hovering" animation
0000A1E4                            
0000A1E4                            locret_992A:
0000A1E4 4E75                       		rts	
0000A1E6                            ; ===========================================================================
0000A1E6                            
0000A1E6                            Obj22_Delete:				; XREF: Obj22_Index
0000A1E6 6100 0000                  		bsr.w	DeleteObject
0000A1EA 4E75                       		rts	
0000A1EC                            ; ===========================================================================
0000A1EC                            ; ---------------------------------------------------------------------------
0000A1EC                            ; Object 23 - missile that Buzz	Bomber throws
0000A1EC                            ; ---------------------------------------------------------------------------
0000A1EC                            
0000A1EC                            Obj23:					; XREF: Obj_Index
0000A1EC 7000                       		moveq	#0,d0
0000A1EE 1028 0024                  		move.b	$24(a0),d0
0000A1F2 323B 0000                  		move.w	Obj23_Index(pc,d0.w),d1
0000A1F6 4EFB 1000                  		jmp	Obj23_Index(pc,d1.w)
0000A1FA                            ; ===========================================================================
0000A1FA 0000                       Obj23_Index:	dc.w Obj23_Main-Obj23_Index
0000A1FC 0000                       		dc.w Obj23_Animate-Obj23_Index
0000A1FE 0000                       		dc.w Obj23_FromBuzz-Obj23_Index
0000A200 0000                       		dc.w Obj23_Delete-Obj23_Index
0000A202 0000                       		dc.w Obj23_FromNewt-Obj23_Index
0000A204                            ; ===========================================================================
0000A204                            
0000A204                            Obj23_Main:				; XREF: Obj23_Index
0000A204 5368 0032                  		subq.w	#1,$32(a0)
0000A208 6A00                       		bpl.s	Obj23_ChkCancel
0000A20A 5428 0024                  		addq.b	#2,$24(a0)
0000A20E 217C 0000 0000 0004        		move.l	#Map_obj23,4(a0)
0000A216 317C 2444 0002             		move.w	#$2444,2(a0)
0000A21C 117C 0004 0001             		move.b	#4,1(a0)
0000A222 117C 0003 0018             		move.b	#3,$18(a0)
0000A228 117C 0008 0019             		move.b	#8,$19(a0)
0000A22E 0228 0003 0022             		andi.b	#3,$22(a0)
0000A234 4A28 0028                  		tst.b	$28(a0)		; was object created by	a Newtron?
0000A238 6700                       		beq.s	Obj23_Animate	; if not, branch
0000A23A 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj23_FromNewt" routine
0000A240 117C 0087 0020             		move.b	#$87,$20(a0)
0000A246 117C 0001 001C             		move.b	#1,$1C(a0)
0000A24C 6000                       		bra.s	Obj23_Animate2
0000A24E                            ; ===========================================================================
0000A24E                            
0000A24E                            Obj23_Animate:				; XREF: Obj23_Index
0000A24E 6100                       		bsr.s	Obj23_ChkCancel
0000A250 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000A256 6100 0000                  		bsr.w	AnimateSprite
0000A25A 6000 0000                  		bra.w	DisplaySprite
0000A25E                            ; ---------------------------------------------------------------------------
0000A25E                            ; Subroutine to	check if the Buzz Bomber which fired the missile has been
0000A25E                            ; destroyed, and if it has, then cancel	the missile
0000A25E                            ; ---------------------------------------------------------------------------
0000A25E                            
0000A25E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A25E                            
0000A25E                            
0000A25E                            Obj23_ChkCancel:			; XREF: Obj23_Main
0000A25E 2268 003C                  		movea.l	$3C(a0),a1
0000A262 0C11 0027                  		cmpi.b	#$27,0(a1)	; has Buzz Bomber been destroyed?
0000A266 6700                       		beq.s	Obj23_Delete	; if yes, branch
0000A268 4E75                       		rts	
0000A26A                            ; End of function Obj23_ChkCancel
0000A26A                            
0000A26A                            ; ===========================================================================
0000A26A                            
0000A26A                            Obj23_FromBuzz:				; XREF: Obj23_Index
0000A26A 0828 0007 0022             		btst	#7,$22(a0)
0000A270 6600                       		bne.s	Obj23_Explode
0000A272 117C 0087 0020             		move.b	#$87,$20(a0)
0000A278 117C 0001 001C             		move.b	#1,$1C(a0)
0000A27E 6100 0000                  		bsr.w	SpeedToPos
0000A282 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000A288 6100 0000                  		bsr.w	AnimateSprite
0000A28C 6100 0000                  		bsr.w	DisplaySprite
0000A290 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000A294 0640 00E0                  		addi.w	#$E0,d0
0000A298 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
0000A29C 6500                       		bcs.s	Obj23_Delete	; if yes, branch
0000A29E 4E75                       		rts	
0000A2A0                            ; ===========================================================================
0000A2A0                            
0000A2A0                            Obj23_Explode:				; XREF: Obj23_FromBuzz
0000A2A0 10BC 0024                  		move.b	#$24,0(a0)	; change object	to an explosion	(Obj24)
0000A2A4 117C 0000 0024             		move.b	#0,$24(a0)
0000A2AA 6000 F2D0                  		bra.w	Obj24
0000A2AE                            ; ===========================================================================
0000A2AE                            
0000A2AE                            Obj23_Delete:				; XREF: Obj23_Index
0000A2AE 6100 0000                  		bsr.w	DeleteObject
0000A2B2 4E75                       		rts	
0000A2B4                            ; ===========================================================================
0000A2B4                            
0000A2B4                            Obj23_FromNewt:				; XREF: Obj23_Index
0000A2B4 4A28 0001                  		tst.b	1(a0)
0000A2B8 6AF4                       		bpl.s	Obj23_Delete
0000A2BA 6100 0000                  		bsr.w	SpeedToPos
0000A2BE                            
0000A2BE                            Obj23_Animate2:				; XREF: Obj23_Main
0000A2BE 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000A2C4 6100 0000                  		bsr.w	AnimateSprite
0000A2C8 6100 0000                  		bsr.w	DisplaySprite
0000A2CC 4E75                       		rts	
0000A2CE                            ; ===========================================================================
0000A2CE                            Ani_obj22:
0000A2CE                            	include "_anim\obj22.asm"
0000A2CE                            ; ---------------------------------------------------------------------------
0000A2CE                            ; Animation script - Buzz Bomber enemy
0000A2CE                            ; ---------------------------------------------------------------------------
0000A2CE 0000                       		dc.w byte_9A1E-Ani_obj22
0000A2D0 0000                       		dc.w byte_9A22-Ani_obj22
0000A2D2 0000                       		dc.w byte_9A26-Ani_obj22
0000A2D4 0100 01FF                  byte_9A1E:	dc.b 1,	0, 1, $FF
0000A2D8 0102 03FF                  byte_9A22:	dc.b 1,	2, 3, $FF
0000A2DC 0104 05FF                  byte_9A26:	dc.b 1,	4, 5, $FF
0000A2E0                            		even
0000A2E0                            		even
0000A2E0                            
0000A2E0                            Ani_obj23:
0000A2E0                            	include "_anim\obj23.asm"
0000A2E0                            ; ---------------------------------------------------------------------------
0000A2E0                            ; Animation script - missile that Buzz Bomber throws
0000A2E0                            ; ---------------------------------------------------------------------------
0000A2E0 0000                       		dc.w byte_9A2E-Ani_obj23
0000A2E2 0000                       		dc.w byte_9A32-Ani_obj23
0000A2E4 0700 01FC                  byte_9A2E:	dc.b 7,	0, 1, $FC
0000A2E8 0102 03FF                  byte_9A32:	dc.b 1,	2, 3, $FF
0000A2EC                            		even
0000A2EC                            		even
0000A2EC                            
0000A2EC                            ; ---------------------------------------------------------------------------
0000A2EC                            ; Sprite mappings - Buzz Bomber	enemy
0000A2EC                            ; ---------------------------------------------------------------------------
0000A2EC                            Map_obj22:
0000A2EC                            	include "_maps\obj22.asm"
0000A2EC                            Map_e97a:
0000A2EC 0000                       Map_e97a_0: 	dc.w Map_e97a_C-Map_e97a
0000A2EE 0000                       Map_e97a_2: 	dc.w Map_e97a_2B-Map_e97a
0000A2F0 0000                       Map_e97a_4: 	dc.w Map_e97a_4A-Map_e97a
0000A2F2 0000                       Map_e97a_6: 	dc.w Map_e97a_6E-Map_e97a
0000A2F4 0000                       Map_e97a_8: 	dc.w Map_e97a_92-Map_e97a
0000A2F6 0000                       Map_e97a_A: 	dc.w Map_e97a_B1-Map_e97a
0000A2F8 06                         Map_e97a_C: 	dc.b $6
0000A2F9 F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
0000A2FE F409 000F 00               	dc.b $F4, $9, $0, $F, $0
0000A303 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
0000A308 0404 0018 00               	dc.b $4, $4, $0, $18, $0
0000A30D F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
0000A312 F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
0000A317 06                         Map_e97a_2B: 	dc.b $6
0000A318 F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
0000A31D F409 000F 00               	dc.b $F4, $9, $0, $F, $0
0000A322 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
0000A327 0404 0018 00               	dc.b $4, $4, $0, $18, $0
0000A32C F408 001F EC               	dc.b $F4, $8, $0, $1F, $EC
0000A331 F404 0022 04               	dc.b $F4, $4, $0, $22, $4
0000A336 07                         Map_e97a_4A: 	dc.b $7
0000A337 0400 0030 0C               	dc.b $4, $0, $0, $30, $C
0000A33C F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
0000A341 F409 000F 00               	dc.b $F4, $9, $0, $F, $0
0000A346 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
0000A34B 0404 0018 00               	dc.b $4, $4, $0, $18, $0
0000A350 F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
0000A355 F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
0000A35A 07                         Map_e97a_6E: 	dc.b $7
0000A35B 0404 0031 0C               	dc.b $4, $4, $0, $31, $C
0000A360 F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
0000A365 F409 000F 00               	dc.b $F4, $9, $0, $F, $0
0000A36A 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
0000A36F 0404 0018 00               	dc.b $4, $4, $0, $18, $0
0000A374 F408 001F EC               	dc.b $F4, $8, $0, $1F, $EC
0000A379 F404 0022 04               	dc.b $F4, $4, $0, $22, $4
0000A37E 06                         Map_e97a_92: 	dc.b $6
0000A37F F40D 0000 EC               	dc.b $F4, $D, $0, $0, $EC
0000A384 040C 0008 EC               	dc.b $4, $C, $0, $8, $EC
0000A389 0400 000C 0C               	dc.b $4, $0, $0, $C, $C
0000A38E 0C04 000D F4               	dc.b $C, $4, $0, $D, $F4
0000A393 F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
0000A398 F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
0000A39D 04                         Map_e97a_B1: 	dc.b $4
0000A39E F40D 0000 EC               	dc.b $F4, $D, $0, $0, $EC
0000A3A3 040C 0008 EC               	dc.b $4, $C, $0, $8, $EC
0000A3A8 0400 000C 0C               	dc.b $4, $0, $0, $C, $C
0000A3AD 0C04 000D F4               	dc.b $C, $4, $0, $D, $F4
0000A3B2                            	even
0000A3B2                            	even
0000A3B2                            
0000A3B2                            ; ---------------------------------------------------------------------------
0000A3B2                            ; Sprite mappings - missile that Buzz Bomber throws
0000A3B2                            ; ---------------------------------------------------------------------------
0000A3B2                            Map_obj23:
0000A3B2                            	include "_maps\obj23.asm"
0000A3B2                            ; ---------------------------------------------------------------------------
0000A3B2                            ; Sprite mappings - missile that Buzz Bomber throws
0000A3B2                            ; ---------------------------------------------------------------------------
0000A3B2 0000 0000                  		dc.w byte_9B0E-Map_obj23, byte_9B14-Map_obj23
0000A3B6 0000 0000                  		dc.w byte_9B1A-Map_obj23, byte_9B20-Map_obj23
0000A3BA 01                         byte_9B0E:	dc.b 1
0000A3BB F805 0024 F8               		dc.b $F8, 5, 0,	$24, $F8
0000A3C0 01                         byte_9B14:	dc.b 1
0000A3C1 F805 0028 F8               		dc.b $F8, 5, 0,	$28, $F8
0000A3C6 01                         byte_9B1A:	dc.b 1
0000A3C7 F805 002C F8               		dc.b $F8, 5, 0,	$2C, $F8
0000A3CC 01                         byte_9B20:	dc.b 1
0000A3CD F805 0033 F8               		dc.b $F8, 5, 0,	$33, $F8
0000A3D2                            		even
0000A3D2                            		even
0000A3D2                            
0000A3D2                            ; ===========================================================================
0000A3D2                            ; ---------------------------------------------------------------------------
0000A3D2                            ; Object 25 - rings
0000A3D2                            ; ---------------------------------------------------------------------------
0000A3D2                            
0000A3D2                            Obj25:					; XREF: Obj_Index
0000A3D2 7000                       		moveq	#0,d0
0000A3D4 1028 0024                  		move.b	$24(a0),d0
0000A3D8 323B 0000                  		move.w	Obj25_Index(pc,d0.w),d1
0000A3DC 4EFB 1000                  		jmp	Obj25_Index(pc,d1.w)
0000A3E0                            ; ===========================================================================
0000A3E0 0000                       Obj25_Index:	dc.w Obj25_Main-Obj25_Index
0000A3E2 0000                       		dc.w Obj25_Animate-Obj25_Index
0000A3E4 0000                       		dc.w Obj25_Collect-Obj25_Index
0000A3E6 0000                       		dc.w Obj25_Sparkle-Obj25_Index
0000A3E8 0000                       		dc.w Obj25_Delete-Obj25_Index
0000A3EA                            ; ---------------------------------------------------------------------------
0000A3EA                            ; Distances between rings (format: horizontal, vertical)
0000A3EA                            ; ---------------------------------------------------------------------------
0000A3EA 1000                       Obj25_PosData:	dc.b $10, 0		; horizontal tight
0000A3EC 1800                       		dc.b $18, 0		; horizontal normal
0000A3EE 2000                       		dc.b $20, 0		; horizontal wide
0000A3F0 0010                       		dc.b 0,	$10		; vertical tight
0000A3F2 0018                       		dc.b 0,	$18		; vertical normal
0000A3F4 0020                       		dc.b 0,	$20		; vertical wide
0000A3F6 1010                       		dc.b $10, $10		; diagonal
0000A3F8 1818                       		dc.b $18, $18
0000A3FA 2020                       		dc.b $20, $20
0000A3FC F010                       		dc.b $F0, $10
0000A3FE E818                       		dc.b $E8, $18
0000A400 E020                       		dc.b $E0, $20
0000A402 1008                       		dc.b $10, 8
0000A404 1810                       		dc.b $18, $10
0000A406 F008                       		dc.b $F0, 8
0000A408 E810                       		dc.b $E8, $10
0000A40A                            ; ===========================================================================
0000A40A                            
0000A40A                            Obj25_Main:				; XREF: Obj25_Index
0000A40A 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A40E 7000                       		moveq	#0,d0
0000A410 1028 0023                  		move.b	$23(a0),d0
0000A414 45F2 0002                  		lea	2(a2,d0.w),a2
0000A418 1812                       		move.b	(a2),d4
0000A41A 1228 0028                  		move.b	$28(a0),d1
0000A41E 1001                       		move.b	d1,d0
0000A420 0241 0007                  		andi.w	#7,d1
0000A424 0C41 0007                  		cmpi.w	#7,d1
0000A428 6600                       		bne.s	loc_9B80
0000A42A 7206                       		moveq	#6,d1
0000A42C                            
0000A42C                            loc_9B80:
0000A42C 4841                       		swap	d1
0000A42E 323C 0000                  		move.w	#0,d1
0000A432 E808                       		lsr.b	#4,d0
0000A434 D040                       		add.w	d0,d0
0000A436 1A3B 00B2                  		move.b	Obj25_PosData(pc,d0.w),d5 ; load ring spacing data
0000A43A 4885                       		ext.w	d5
0000A43C 1C3B 00AD                  		move.b	Obj25_PosData+1(pc,d0.w),d6
0000A440 4886                       		ext.w	d6
0000A442 2248                       		movea.l	a0,a1
0000A444 3428 0008                  		move.w	8(a0),d2
0000A448 3628 000C                  		move.w	$C(a0),d3
0000A44C E20C                       		lsr.b	#1,d4
0000A44E 6500                       		bcs.s	loc_9C02
0000A450 0892 0007                  		bclr	#7,(a2)
0000A454 6000                       		bra.s	loc_9BBA
0000A456                            ; ===========================================================================
0000A456                            
0000A456                            Obj25_MakeRings:
0000A456 4841                       		swap	d1
0000A458 E20C                       		lsr.b	#1,d4
0000A45A 6500                       		bcs.s	loc_9C02
0000A45C 0892 0007                  		bclr	#7,(a2)
0000A460 6100 0000                  		bsr.w	SingleObjLoad
0000A464 6600                       		bne.s	loc_9C0E
0000A466                            
0000A466                            loc_9BBA:				; XREF: Obj25_Main
0000A466 12BC 0025                  		move.b	#$25,0(a1)	; load ring object
0000A46A 5429 0024                  		addq.b	#2,$24(a1)
0000A46E 3342 0008                  		move.w	d2,8(a1)	; set x-axis position based on d2
0000A472 3368 0008 0032             		move.w	8(a0),$32(a1)
0000A478 3343 000C                  		move.w	d3,$C(a1)	; set y-axis position based on d3
0000A47C 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
0000A484 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000A48A 137C 0004 0001             		move.b	#4,1(a1)
0000A490 137C 0002 0018             		move.b	#2,$18(a1)
0000A496 137C 0047 0020             		move.b	#$47,$20(a1)
0000A49C 137C 0008 0019             		move.b	#8,$19(a1)
0000A4A2 1368 0023 0023             		move.b	$23(a0),$23(a1)
0000A4A8 1341 0034                  		move.b	d1,$34(a1)
0000A4AC                            
0000A4AC                            loc_9C02:
0000A4AC 5241                       		addq.w	#1,d1
0000A4AE D445                       		add.w	d5,d2		; add ring spacing value to d2
0000A4B0 D646                       		add.w	d6,d3		; add ring spacing value to d3
0000A4B2 4841                       		swap	d1
0000A4B4 51C9 FFA0                  		dbf	d1,Obj25_MakeRings ; repeat for	number of rings
0000A4B8                            
0000A4B8                            loc_9C0E:
0000A4B8 0812 0000                  		btst	#0,(a2)
0000A4BC 6600 0000                  		bne.w	DeleteObject
0000A4C0                            
0000A4C0                            Obj25_Animate:				; XREF: Obj25_Index
0000A4C0 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0) ;	set frame
0000A4C6 6100 0000                  		bsr.w	DisplaySprite
0000A4CA 3028 0032                  		move.w	$32(a0),d0
0000A4CE 0240 FF80                  		andi.w	#$FF80,d0
0000A4D2 3238 F700                  		move.w	($FFFFF700).w,d1
0000A4D6 0441 0080                  		subi.w	#$80,d1
0000A4DA 0241 FF80                  		andi.w	#$FF80,d1
0000A4DE 9041                       		sub.w	d1,d0
0000A4E0 0C40 0280                  		cmpi.w	#$280,d0
0000A4E4 6200                       		bhi.s	Obj25_Delete
0000A4E6 4E75                       		rts	
0000A4E8                            ; ===========================================================================
0000A4E8                            
0000A4E8                            Obj25_Collect:				; XREF: Obj25_Index
0000A4E8 5428 0024                  		addq.b	#2,$24(a0)
0000A4EC 117C 0000 0020             		move.b	#0,$20(a0)
0000A4F2 117C 0001 0018             		move.b	#1,$18(a0)
0000A4F8 6100 0000                  		bsr.w	CollectRing
0000A4FC 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A500 7000                       		moveq	#0,d0
0000A502 1028 0023                  		move.b	$23(a0),d0
0000A506 1228 0034                  		move.b	$34(a0),d1
0000A50A 03F2 0002                  		bset	d1,2(a2,d0.w)
0000A50E                            
0000A50E                            Obj25_Sparkle:				; XREF: Obj25_Index
0000A50E 43F9 0000 0000             		lea	(Ani_obj25).l,a1
0000A514 6100 0000                  		bsr.w	AnimateSprite
0000A518 6000 0000                  		bra.w	DisplaySprite
0000A51C                            ; ===========================================================================
0000A51C                            
0000A51C                            Obj25_Delete:				; XREF: Obj25_Index
0000A51C 6000 0000                  		bra.w	DeleteObject
0000A520                            
0000A520                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A520                            
0000A520                            
0000A520                            CollectRing:				; XREF: Obj25_Collect
0000A520 5278 FE20                  		addq.w	#1,($FFFFFE20).w ; add 1 to rings
0000A524 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the rings counter
0000A52A 303C 00B5                  		move.w	#$B5,d0		; play ring sound
0000A52E 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; do	you have < 100 rings?
0000A534 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
0000A536 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w ; update lives	counter
0000A53C 6700                       		beq.s	loc_9CA4
0000A53E 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; do	you have < 200 rings?
0000A544 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
0000A546 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w ; update lives	counter
0000A54C 6600                       		bne.s	Obj25_PlaySnd
0000A54E                            
0000A54E                            loc_9CA4:
0000A54E 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000A552 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000A556 303C 0088                  		move.w	#$88,d0		; play extra life music
0000A55A                            
0000A55A                            Obj25_PlaySnd:
0000A55A 4EF9 0000 159A             		jmp	(PlaySound_Special).l
0000A560                            ; End of function CollectRing
0000A560                            
0000A560                            ; ===========================================================================
0000A560                            ; ---------------------------------------------------------------------------
0000A560                            ; Object 37 - rings flying out of Sonic	when he's hit
0000A560                            ; ---------------------------------------------------------------------------
0000A560                            
0000A560                            Obj37:					; XREF: Obj_Index
0000A560 7000                       		moveq	#0,d0
0000A562 1028 0024                  		move.b	$24(a0),d0
0000A566 323B 0000                  		move.w	Obj37_Index(pc,d0.w),d1
0000A56A 4EFB 1000                  		jmp	Obj37_Index(pc,d1.w)
0000A56E                            ; ===========================================================================
0000A56E 0000                       Obj37_Index:	dc.w Obj37_CountRings-Obj37_Index
0000A570 0000                       		dc.w Obj37_Bounce-Obj37_Index
0000A572 0000                       		dc.w Obj37_Collect-Obj37_Index
0000A574 0000                       		dc.w Obj37_Sparkle-Obj37_Index
0000A576 0000                       		dc.w Obj37_Delete-Obj37_Index
0000A578                            ; ===========================================================================
0000A578                            
0000A578                            Obj37_CountRings:			; XREF: Obj37_Index
0000A578 2248                       		movea.l	a0,a1
0000A57A 7A00                       		moveq	#0,d5
0000A57C 3A38 FE20                  		move.w	($FFFFFE20).w,d5 ; check number	of rings you have
0000A580 7020                       		moveq	#32,d0
0000A582 BA40                       		cmp.w	d0,d5		; do you have 32 or more?
0000A584 6500                       		bcs.s	loc_9CDE	; if not, branch
0000A586 3A00                       		move.w	d0,d5		; if yes, set d5 to 32
0000A588                            
0000A588                            loc_9CDE:
0000A588 5345                       		subq.w	#1,d5
0000A58A 383C 0288                  		move.w	#$288,d4
0000A58E 6000                       		bra.s	Obj37_MakeRings
0000A590                            ; ===========================================================================
0000A590                            
0000A590                            Obj37_Loop:
0000A590 6100 0000                  		bsr.w	SingleObjLoad
0000A594 6600 0000                  		bne.w	Obj37_ResetCounter
0000A598                            
0000A598                            Obj37_MakeRings:			; XREF: Obj37_CountRings
0000A598 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	ring object
0000A59C 5429 0024                  		addq.b	#2,$24(a1)
0000A5A0 137C 0008 0016             		move.b	#8,$16(a1)
0000A5A6 137C 0008 0017             		move.b	#8,$17(a1)
0000A5AC 3368 0008 0008             		move.w	8(a0),8(a1)
0000A5B2 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A5B8 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
0000A5C0 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000A5C6 137C 0004 0001             		move.b	#4,1(a1)
0000A5CC 137C 0003 0018             		move.b	#3,$18(a1)
0000A5D2 137C 0047 0020             		move.b	#$47,$20(a1)
0000A5D8 137C 0008 0019             		move.b	#8,$19(a1)
0000A5DE 11FC 00FF FEC6             		move.b	#-1,($FFFFFEC6).w
0000A5E4 4A44                       		tst.w	d4
0000A5E6 6B00                       		bmi.s	loc_9D62
0000A5E8 3004                       		move.w	d4,d0
0000A5EA 6100 8748                  		bsr.w	CalcSine
0000A5EE 3404                       		move.w	d4,d2
0000A5F0 E04A                       		lsr.w	#8,d2
0000A5F2 E560                       		asl.w	d2,d0
0000A5F4 E561                       		asl.w	d2,d1
0000A5F6 3400                       		move.w	d0,d2
0000A5F8 3601                       		move.w	d1,d3
0000A5FA 0604 0010                  		addi.b	#$10,d4
0000A5FE 6400                       		bcc.s	loc_9D62
0000A600 0444 0080                  		subi.w	#$80,d4
0000A604 6400                       		bcc.s	loc_9D62
0000A606 383C 0288                  		move.w	#$288,d4
0000A60A                            
0000A60A                            loc_9D62:
0000A60A 3342 0010                  		move.w	d2,$10(a1)
0000A60E 3343 0012                  		move.w	d3,$12(a1)
0000A612 4442                       		neg.w	d2
0000A614 4444                       		neg.w	d4
0000A616 51CD FF78                  		dbf	d5,Obj37_Loop	; repeat for number of rings (max 31)
0000A61A                            
0000A61A                            Obj37_ResetCounter:			; XREF: Obj37_Loop
0000A61A 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; reset number	of rings to zero
0000A620 11FC 0080 FE1D             		move.b	#$80,($FFFFFE1D).w ; update ring counter
0000A626 11FC 0000 FE1B             		move.b	#0,($FFFFFE1B).w
0000A62C 303C 00C6                  		move.w	#$C6,d0
0000A630 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play ring loss sound
0000A636                            
0000A636                            Obj37_Bounce:				; XREF: Obj37_Index
0000A636 1178 FEC7 001A             		move.b	($FFFFFEC7).w,$1A(a0)
0000A63C 6100 0000                  		bsr.w	SpeedToPos
0000A640 0668 0018 0012             		addi.w	#$18,$12(a0)
0000A646 6B00                       		bmi.s	Obj37_ChkDel
0000A648 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000A64C D007                       		add.b	d7,d0
0000A64E 0200 0003                  		andi.b	#3,d0
0000A652 6600                       		bne.s	Obj37_ChkDel
0000A654 4EB9 0000 0000             		jsr	ObjHitFloor
0000A65A 4A41                       		tst.w	d1
0000A65C 6A00                       		bpl.s	Obj37_ChkDel
0000A65E D368 000C                  		add.w	d1,$C(a0)
0000A662 3028 0012                  		move.w	$12(a0),d0
0000A666 E440                       		asr.w	#2,d0
0000A668 9168 0012                  		sub.w	d0,$12(a0)
0000A66C 4468 0012                  		neg.w	$12(a0)
0000A670                            
0000A670                            Obj37_ChkDel:				; XREF: Obj37_Bounce
0000A670 4A38 FEC6                  		tst.b	($FFFFFEC6).w
0000A674 6700                       		beq.s	Obj37_Delete
0000A676 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000A67A 0640 00E0                  		addi.w	#$E0,d0
0000A67E B068 000C                  		cmp.w	$C(a0),d0	; has object moved below level boundary?
0000A682 6500                       		bcs.s	Obj37_Delete	; if yes, branch
0000A684 6000 0000                  		bra.w	DisplaySprite
0000A688                            ; ===========================================================================
0000A688                            
0000A688                            Obj37_Collect:				; XREF: Obj37_Index
0000A688 5428 0024                  		addq.b	#2,$24(a0)
0000A68C 117C 0000 0020             		move.b	#0,$20(a0)
0000A692 117C 0001 0018             		move.b	#1,$18(a0)
0000A698 6100 FE86                  		bsr.w	CollectRing
0000A69C                            
0000A69C                            Obj37_Sparkle:				; XREF: Obj37_Index
0000A69C 43F9 0000 0000             		lea	(Ani_obj25).l,a1
0000A6A2 6100 0000                  		bsr.w	AnimateSprite
0000A6A6 6000 0000                  		bra.w	DisplaySprite
0000A6AA                            ; ===========================================================================
0000A6AA                            
0000A6AA                            Obj37_Delete:				; XREF: Obj37_Index
0000A6AA 6000 0000                  		bra.w	DeleteObject
0000A6AE                            ; ===========================================================================
0000A6AE                            ; ---------------------------------------------------------------------------
0000A6AE                            ; Object 4B - giant ring for entry to special stage
0000A6AE                            ; ---------------------------------------------------------------------------
0000A6AE                            
0000A6AE                            Obj4B:					; XREF: Obj_Index
0000A6AE 7000                       		moveq	#0,d0
0000A6B0 1028 0024                  		move.b	$24(a0),d0
0000A6B4 323B 0000                  		move.w	Obj4B_Index(pc,d0.w),d1
0000A6B8 4EFB 1000                  		jmp	Obj4B_Index(pc,d1.w)
0000A6BC                            ; ===========================================================================
0000A6BC 0000                       Obj4B_Index:	dc.w Obj4B_Main-Obj4B_Index
0000A6BE 0000                       		dc.w Obj4B_Animate-Obj4B_Index
0000A6C0 0000                       		dc.w Obj4B_Collect-Obj4B_Index
0000A6C2 0000                       		dc.w Obj4B_Delete-Obj4B_Index
0000A6C4                            ; ===========================================================================
0000A6C4                            
0000A6C4                            Obj4B_Main:				; XREF: Obj4B_Index
0000A6C4 217C 0000 0000 0004        		move.l	#Map_obj4B,4(a0)
0000A6CC 317C 2400 0002             		move.w	#$2400,2(a0)
0000A6D2 0028 0004 0001             		ori.b	#4,1(a0)
0000A6D8 117C 0040 0019             		move.b	#$40,$19(a0)
0000A6DE 4A28 0001                  		tst.b	1(a0)
0000A6E2 6A00                       		bpl.s	Obj4B_Animate
0000A6E4 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have 6 emeralds?
0000A6EA 6700 0000                  		beq.w	Obj4B_Delete	; if yes, branch
0000A6EE 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000A6F4 6400                       		bcc.s	Obj4B_Okay	; if yes, branch
0000A6F6 4E75                       		rts	
0000A6F8                            ; ===========================================================================
0000A6F8                            
0000A6F8                            Obj4B_Okay:				; XREF: Obj4B_Main
0000A6F8 5428 0024                  		addq.b	#2,$24(a0)
0000A6FC 117C 0002 0018             		move.b	#2,$18(a0)
0000A702 117C 0052 0020             		move.b	#$52,$20(a0)
0000A708 31FC 0C40 F7BE             		move.w	#$C40,($FFFFF7BE).w
0000A70E                            
0000A70E                            Obj4B_Animate:				; XREF: Obj4B_Index
0000A70E 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0)
0000A714 3028 0008                  		move.w	8(a0),d0
0000A718 0240 FF80                  		andi.w	#$FF80,d0
0000A71C 3238 F700                  		move.w	($FFFFF700).w,d1
0000A720 0441 0080                  		subi.w	#$80,d1
0000A724 0241 FF80                  		andi.w	#$FF80,d1
0000A728 9041                       		sub.w	d1,d0
0000A72A 0C40 0280                  		cmpi.w	#$280,d0
0000A72E 6200 0000                  		bhi.w	DeleteObject
0000A732 6000 0000                  		bra.w	DisplaySprite
0000A736                            ; ===========================================================================
0000A736                            
0000A736                            Obj4B_Collect:				; XREF: Obj4B_Index
0000A736 5528 0024                  		subq.b	#2,$24(a0)
0000A73A 117C 0000 0020             		move.b	#0,$20(a0)
0000A740 6100 0000                  		bsr.w	SingleObjLoad
0000A744 6600 0000                  		bne.w	Obj4B_PlaySnd
0000A748 12BC 007C                  		move.b	#$7C,0(a1)	; load giant ring flash	object
0000A74C 3368 0008 0008             		move.w	8(a0),8(a1)
0000A752 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A758 2348 003C                  		move.l	a0,$3C(a1)
0000A75C 3038 D008                  		move.w	($FFFFD008).w,d0
0000A760 B068 0008                  		cmp.w	8(a0),d0	; has Sonic come from the left?
0000A764 6500                       		bcs.s	Obj4B_PlaySnd	; if yes, branch
0000A766 08E9 0000 0001             		bset	#0,1(a1)	; reverse flash	object
0000A76C                            
0000A76C                            Obj4B_PlaySnd:
0000A76C 303C 00C3                  		move.w	#$C3,d0
0000A770 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play giant ring	sound
0000A776 6096                       		bra.s	Obj4B_Animate
0000A778                            ; ===========================================================================
0000A778                            
0000A778                            Obj4B_Delete:				; XREF: Obj4B_Index
0000A778 6000 0000                  		bra.w	DeleteObject
0000A77C                            ; ===========================================================================
0000A77C                            ; ---------------------------------------------------------------------------
0000A77C                            ; Object 7C - flash effect when	you collect the	giant ring
0000A77C                            ; ---------------------------------------------------------------------------
0000A77C                            
0000A77C                            Obj7C:					; XREF: Obj_Index
0000A77C 7000                       		moveq	#0,d0
0000A77E 1028 0024                  		move.b	$24(a0),d0
0000A782 323B 0000                  		move.w	Obj7C_Index(pc,d0.w),d1
0000A786 4EFB 1000                  		jmp	Obj7C_Index(pc,d1.w)
0000A78A                            ; ===========================================================================
0000A78A 0000                       Obj7C_Index:	dc.w Obj7C_Main-Obj7C_Index
0000A78C 0000                       		dc.w Obj7C_ChkDel-Obj7C_Index
0000A78E 0000                       		dc.w Obj7C_Delete-Obj7C_Index
0000A790                            ; ===========================================================================
0000A790                            
0000A790                            Obj7C_Main:				; XREF: Obj7C_Index
0000A790 5428 0024                  		addq.b	#2,$24(a0)
0000A794 217C 0000 0000 0004        		move.l	#Map_obj7C,4(a0)
0000A79C 317C 2462 0002             		move.w	#$2462,2(a0)
0000A7A2 0028 0004 0001             		ori.b	#4,1(a0)
0000A7A8 117C 0000 0018             		move.b	#0,$18(a0)
0000A7AE 117C 0020 0019             		move.b	#$20,$19(a0)
0000A7B4 117C 00FF 001A             		move.b	#$FF,$1A(a0)
0000A7BA                            
0000A7BA                            Obj7C_ChkDel:				; XREF: Obj7C_Index
0000A7BA 6100                       		bsr.s	Obj7C_Collect
0000A7BC 3028 0008                  		move.w	8(a0),d0
0000A7C0 0240 FF80                  		andi.w	#$FF80,d0
0000A7C4 3238 F700                  		move.w	($FFFFF700).w,d1
0000A7C8 0441 0080                  		subi.w	#$80,d1
0000A7CC 0241 FF80                  		andi.w	#$FF80,d1
0000A7D0 9041                       		sub.w	d1,d0
0000A7D2 0C40 0280                  		cmpi.w	#$280,d0
0000A7D6 6200 0000                  		bhi.w	DeleteObject
0000A7DA 6000 0000                  		bra.w	DisplaySprite
0000A7DE                            
0000A7DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A7DE                            
0000A7DE                            
0000A7DE                            Obj7C_Collect:				; XREF: Obj7C_ChkDel
0000A7DE 5328 001E                  		subq.b	#1,$1E(a0)
0000A7E2 6A00                       		bpl.s	locret_9F76
0000A7E4 117C 0001 001E             		move.b	#1,$1E(a0)
0000A7EA 5228 001A                  		addq.b	#1,$1A(a0)
0000A7EE 0C28 0008 001A             		cmpi.b	#8,$1A(a0)	; has animation	finished?
0000A7F4 6400                       		bcc.s	Obj7C_End	; if yes, branch
0000A7F6 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is 3rd frame displayed?
0000A7FC 6600                       		bne.s	locret_9F76	; if not, branch
0000A7FE 2268 003C                  		movea.l	$3C(a0),a1
0000A802 137C 0006 0024             		move.b	#6,$24(a1)	; delete giant ring object (Obj4B)
0000A808 11FC 001C D01C             		move.b	#$1C,($FFFFD01C).w ; make Sonic	invisible
0000A80E 11FC 0001 F7CD             		move.b	#1,($FFFFF7CD).w ; stop	Sonic getting bonuses
0000A814 4238 FE2D                  		clr.b	($FFFFFE2D).w	; remove invincibility
0000A818 4238 FE2C                  		clr.b	($FFFFFE2C).w	; remove shield
0000A81C                            
0000A81C                            locret_9F76:
0000A81C 4E75                       		rts	
0000A81E                            ; ===========================================================================
0000A81E                            
0000A81E                            Obj7C_End:				; XREF: Obj7C_Collect
0000A81E 5428 0024                  		addq.b	#2,$24(a0)
0000A822 31FC 0000 D000             		move.w	#0,($FFFFD000).w ; remove Sonic	object
0000A828 588F                       		addq.l	#4,sp
0000A82A 4E75                       		rts	
0000A82C                            ; End of function Obj7C_Collect
0000A82C                            
0000A82C                            ; ===========================================================================
0000A82C                            
0000A82C                            Obj7C_Delete:				; XREF: Obj7C_Index
0000A82C 6000 0000                  		bra.w	DeleteObject
0000A830                            ; ===========================================================================
0000A830                            Ani_obj25:
0000A830                            	include "_anim\obj25.asm"
0000A830                            ; ---------------------------------------------------------------------------
0000A830                            ; Animation script - ring
0000A830                            ; ---------------------------------------------------------------------------
0000A830 0000                       		dc.w byte_9F8C-Ani_obj25
0000A832 0504 0506 07FC             byte_9F8C:	dc.b 5,	4, 5, 6, 7, $FC
0000A838                            		even
0000A838                            		even
0000A838                            
0000A838                            ; ---------------------------------------------------------------------------
0000A838                            ; Sprite mappings - rings
0000A838                            ; ---------------------------------------------------------------------------
0000A838                            Map_obj25:
0000A838                            	include "_maps\obj25.asm"
0000A838                            ; ---------------------------------------------------------------------------
0000A838                            ; Sprite mappings - rings
0000A838                            ; ---------------------------------------------------------------------------
0000A838 0000 0000                  		dc.w byte_9FA2-Map_obj25, byte_9FA8-Map_obj25
0000A83C 0000 0000                  		dc.w byte_9FAE-Map_obj25, byte_9FB4-Map_obj25
0000A840 0000 0000                  		dc.w byte_9FBA-Map_obj25, byte_9FC0-Map_obj25
0000A844 0000 0000                  		dc.w byte_9FC6-Map_obj25, byte_9FCC-Map_obj25
0000A848 01                         byte_9FA2:	dc.b 1
0000A849 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000A84E 01                         byte_9FA8:	dc.b 1
0000A84F F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0000A854 01                         byte_9FAE:	dc.b 1
0000A855 F801 0008 FC               		dc.b $F8, 1, 0,	8, $FC
0000A85A 01                         byte_9FB4:	dc.b 1
0000A85B F805 0804 F8               		dc.b $F8, 5, 8,	4, $F8
0000A860 01                         byte_9FBA:	dc.b 1
0000A861 F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
0000A866 01                         byte_9FC0:	dc.b 1
0000A867 F805 180A F8               		dc.b $F8, 5, $18, $A, $F8
0000A86C 01                         byte_9FC6:	dc.b 1
0000A86D F805 080A F8               		dc.b $F8, 5, 8,	$A, $F8
0000A872 01                         byte_9FCC:	dc.b 1
0000A873 F805 100A F8               		dc.b $F8, 5, $10, $A, $F8
0000A878                            		even
0000A878                            		even
0000A878                            
0000A878                            ; ---------------------------------------------------------------------------
0000A878                            ; Sprite mappings - giant ring
0000A878                            ; ---------------------------------------------------------------------------
0000A878                            Map_obj4B:
0000A878                            	include "_maps\obj4B.asm"
0000A878                            ; ---------------------------------------------------------------------------
0000A878                            ; Sprite mappings - giant ring
0000A878                            ; ---------------------------------------------------------------------------
0000A878 0000 0000                  		dc.w byte_9FDA-Map_obj4B, byte_A00D-Map_obj4B
0000A87C 0000 0000                  		dc.w byte_A036-Map_obj4B, byte_A04B-Map_obj4B
0000A880 0A                         byte_9FDA:	dc.b $A
0000A881 E008 0000 E8               		dc.b $E0, 8, 0,	0, $E8
0000A886 E008 0003 00               		dc.b $E0, 8, 0,	3, 0
0000A88B E80C 0006 E0               		dc.b $E8, $C, 0, 6, $E0
0000A890 E80C 000A 00               		dc.b $E8, $C, 0, $A, 0
0000A895 F007 000E E0               		dc.b $F0, 7, 0,	$E, $E0
0000A89A F007 0016 10               		dc.b $F0, 7, 0,	$16, $10
0000A89F 100C 001E E0               		dc.b $10, $C, 0, $1E, $E0
0000A8A4 100C 0022 00               		dc.b $10, $C, 0, $22, 0
0000A8A9 1808 0026 E8               		dc.b $18, 8, 0,	$26, $E8
0000A8AE 1808 0029 00               		dc.b $18, 8, 0,	$29, 0
0000A8B3 08                         byte_A00D:	dc.b 8
0000A8B4 E00C 002C F0               		dc.b $E0, $C, 0, $2C, $F0
0000A8B9 E808 0030 E8               		dc.b $E8, 8, 0,	$30, $E8
0000A8BE E809 0033 00               		dc.b $E8, 9, 0,	$33, 0
0000A8C3 F007 0039 E8               		dc.b $F0, 7, 0,	$39, $E8
0000A8C8 F805 0041 08               		dc.b $F8, 5, 0,	$41, 8
0000A8CD 0809 0045 00               		dc.b 8,	9, 0, $45, 0
0000A8D2 1008 004B E8               		dc.b $10, 8, 0,	$4B, $E8
0000A8D7 180C 004E F0               		dc.b $18, $C, 0, $4E, $F0
0000A8DC 04                         byte_A036:	dc.b 4
0000A8DD E007 0052 F4               		dc.b $E0, 7, 0,	$52, $F4
0000A8E2 E003 0852 04               		dc.b $E0, 3, 8,	$52, 4
0000A8E7 0007 005A F4               		dc.b 0,	7, 0, $5A, $F4
0000A8EC 0003 085A 04               		dc.b 0,	3, 8, $5A, 4
0000A8F1 08                         byte_A04B:	dc.b 8
0000A8F2 E00C 082C F0               		dc.b $E0, $C, 8, $2C, $F0
0000A8F7 E808 0830 00               		dc.b $E8, 8, 8,	$30, 0
0000A8FC E809 0833 E8               		dc.b $E8, 9, 8,	$33, $E8
0000A901 F007 0839 08               		dc.b $F0, 7, 8,	$39, 8
0000A906 F805 0841 E8               		dc.b $F8, 5, 8,	$41, $E8
0000A90B 0809 0845 E8               		dc.b 8,	9, 8, $45, $E8
0000A910 1008 084B 00               		dc.b $10, 8, 8,	$4B, 0
0000A915 180C 084E F0               		dc.b $18, $C, 8, $4E, $F0
0000A91A                            		even
0000A91A                            		even
0000A91A                            
0000A91A                            ; ---------------------------------------------------------------------------
0000A91A                            ; Sprite mappings - flash effect when you collect the giant ring
0000A91A                            ; ---------------------------------------------------------------------------
0000A91A                            Map_obj7C:
0000A91A                            	include "_maps\obj7C.asm"
0000A91A                            ; ---------------------------------------------------------------------------
0000A91A                            ; Sprite mappings - flash effect when you collect the giant ring
0000A91A                            ; ---------------------------------------------------------------------------
0000A91A 0000 0000                  		dc.w byte_A084-Map_obj7C, byte_A08F-Map_obj7C
0000A91E 0000 0000                  		dc.w byte_A0A4-Map_obj7C, byte_A0B9-Map_obj7C
0000A922 0000 0000                  		dc.w byte_A0CE-Map_obj7C, byte_A0E3-Map_obj7C
0000A926 0000 0000                  		dc.w byte_A0F8-Map_obj7C, byte_A103-Map_obj7C
0000A92A 02                         byte_A084:	dc.b 2
0000A92B E00F 0000 00               		dc.b $E0, $F, 0, 0, 0
0000A930 000F 1000 00               		dc.b 0,	$F, $10, 0, 0
0000A935 04                         byte_A08F:	dc.b 4
0000A936 E00F 0010 F0               		dc.b $E0, $F, 0, $10, $F0
0000A93B E007 0020 10               		dc.b $E0, 7, 0,	$20, $10
0000A940 000F 1010 F0               		dc.b 0,	$F, $10, $10, $F0
0000A945 0007 1020 10               		dc.b 0,	7, $10,	$20, $10
0000A94A 04                         byte_A0A4:	dc.b 4
0000A94B E00F 0028 E8               		dc.b $E0, $F, 0, $28, $E8
0000A950 E00B 0038 08               		dc.b $E0, $B, 0, $38, 8
0000A955 000F 1028 E8               		dc.b 0,	$F, $10, $28, $E8
0000A95A 000B 1038 08               		dc.b 0,	$B, $10, $38, 8
0000A95F 04                         byte_A0B9:	dc.b 4
0000A960 E00F 0834 E0               		dc.b $E0, $F, 8, $34, $E0
0000A965 E00F 0034 00               		dc.b $E0, $F, 0, $34, 0
0000A96A 000F 1834 E0               		dc.b 0,	$F, $18, $34, $E0
0000A96F 000F 1034 00               		dc.b 0,	$F, $10, $34, 0
0000A974 04                         byte_A0CE:	dc.b 4
0000A975 E00B 0838 E0               		dc.b $E0, $B, 8, $38, $E0
0000A97A E00F 0828 F8               		dc.b $E0, $F, 8, $28, $F8
0000A97F 000B 1838 E0               		dc.b 0,	$B, $18, $38, $E0
0000A984 000F 1828 F8               		dc.b 0,	$F, $18, $28, $F8
0000A989 04                         byte_A0E3:	dc.b 4
0000A98A E007 0820 E0               		dc.b $E0, 7, 8,	$20, $E0
0000A98F E00F 0810 F0               		dc.b $E0, $F, 8, $10, $F0
0000A994 0007 1820 E0               		dc.b 0,	7, $18,	$20, $E0
0000A999 000F 1810 F0               		dc.b 0,	$F, $18, $10, $F0
0000A99E 02                         byte_A0F8:	dc.b 2
0000A99F E00F 0800 E0               		dc.b $E0, $F, 8, 0, $E0
0000A9A4 000F 1800 E0               		dc.b 0,	$F, $18, 0, $E0
0000A9A9 04                         byte_A103:	dc.b 4
0000A9AA E00F 0044 E0               		dc.b $E0, $F, 0, $44, $E0
0000A9AF E00F 0844 00               		dc.b $E0, $F, 8, $44, 0
0000A9B4 000F 1044 E0               		dc.b 0,	$F, $10, $44, $E0
0000A9B9 000F 1844 00               		dc.b 0,	$F, $18, $44, 0
0000A9BE                            		even
0000A9BE                            		even
0000A9BE                            
0000A9BE                            ; ===========================================================================
0000A9BE                            ; ---------------------------------------------------------------------------
0000A9BE                            ; Object 26 - monitors
0000A9BE                            ; ---------------------------------------------------------------------------
0000A9BE                            
0000A9BE                            Obj26:					; XREF: Obj_Index
0000A9BE 7000                       		moveq	#0,d0
0000A9C0 1028 0024                  		move.b	$24(a0),d0
0000A9C4 323B 0000                  		move.w	Obj26_Index(pc,d0.w),d1
0000A9C8 4EFB 1000                  		jmp	Obj26_Index(pc,d1.w)
0000A9CC                            ; ===========================================================================
0000A9CC 0000                       Obj26_Index:	dc.w Obj26_Main-Obj26_Index
0000A9CE 0000                       		dc.w Obj26_Solid-Obj26_Index
0000A9D0 0000                       		dc.w Obj26_BreakOpen-Obj26_Index
0000A9D2 0000                       		dc.w Obj26_Animate-Obj26_Index
0000A9D4 0000                       		dc.w Obj26_Display-Obj26_Index
0000A9D6                            ; ===========================================================================
0000A9D6                            
0000A9D6                            Obj26_Main:				; XREF: Obj26_Index
0000A9D6 5428 0024                  		addq.b	#2,$24(a0)
0000A9DA 117C 000E 0016             		move.b	#$E,$16(a0)
0000A9E0 117C 000E 0017             		move.b	#$E,$17(a0)
0000A9E6 217C 0000 0000 0004        		move.l	#Map_obj26,4(a0)
0000A9EE 317C 0680 0002             		move.w	#$680,2(a0)
0000A9F4 117C 0004 0001             		move.b	#4,1(a0)
0000A9FA 117C 0003 0018             		move.b	#3,$18(a0)
0000AA00 117C 000F 0019             		move.b	#$F,$19(a0)
0000AA06 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000AA0A 7000                       		moveq	#0,d0
0000AA0C 1028 0023                  		move.b	$23(a0),d0
0000AA10 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000AA16 0832 0000 0002             		btst	#0,2(a2,d0.w)	; has monitor been broken?
0000AA1C 6700                       		beq.s	Obj26_NotBroken	; if not, branch
0000AA1E 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj26_Display" routine
0000AA24 117C 000B 001A             		move.b	#$B,$1A(a0)	; use broken monitor frame
0000AA2A 4E75                       		rts	
0000AA2C                            ; ===========================================================================
0000AA2C                            
0000AA2C                            Obj26_NotBroken:			; XREF: Obj26_Main
0000AA2C 117C 0046 0020             		move.b	#$46,$20(a0)
0000AA32 1168 0028 001C             		move.b	$28(a0),$1C(a0)
0000AA38                            
0000AA38                            Obj26_Solid:				; XREF: Obj26_Index
0000AA38 1028 0025                  		move.b	$25(a0),d0	; is monitor set to fall?
0000AA3C 6700                       		beq.s	loc_A1EC	; if not, branch
0000AA3E 5500                       		subq.b	#2,d0
0000AA40 6600                       		bne.s	Obj26_Fall
0000AA42 7200                       		moveq	#0,d1
0000AA44 1228 0019                  		move.b	$19(a0),d1
0000AA48 0641 000B                  		addi.w	#$B,d1
0000AA4C 6100 D37C                  		bsr.w	ExitPlatform
0000AA50 0829 0003 0022             		btst	#3,$22(a1)
0000AA56 6600 0000                  		bne.w	loc_A1BC
0000AA5A 4228 0025                  		clr.b	$25(a0)
0000AA5E 6000 0000                  		bra.w	Obj26_Animate
0000AA62                            ; ===========================================================================
0000AA62                            
0000AA62                            loc_A1BC:				; XREF: Obj26_Solid
0000AA62 363C 0010                  		move.w	#$10,d3
0000AA66 3428 0008                  		move.w	8(a0),d2
0000AA6A 6100 D8BC                  		bsr.w	MvSonicOnPtfm
0000AA6E 6000 0000                  		bra.w	Obj26_Animate
0000AA72                            ; ===========================================================================
0000AA72                            
0000AA72                            Obj26_Fall:				; XREF: Obj26_Solid
0000AA72 6100 0000                  		bsr.w	ObjectFall
0000AA76 4EB9 0000 0000             		jsr	ObjHitFloor
0000AA7C 4A41                       		tst.w	d1
0000AA7E 6A00 0000                  		bpl.w	Obj26_Animate
0000AA82 D368 000C                  		add.w	d1,$C(a0)
0000AA86 4268 0012                  		clr.w	$12(a0)
0000AA8A 4228 0025                  		clr.b	$25(a0)
0000AA8E 6000 0000                  		bra.w	Obj26_Animate
0000AA92                            ; ===========================================================================
0000AA92                            
0000AA92                            loc_A1EC:				; XREF: Obj26_Solid
0000AA92 323C 001A                  		move.w	#$1A,d1
0000AA96 343C 000F                  		move.w	#$F,d2
0000AA9A 6100 0000                  		bsr.w	Obj26_SolidSides
0000AA9E 6700 0000                  		beq.w	loc_A25C
0000AAA2 4A69 0012                  		tst.w	$12(a1)
0000AAA6 6B00                       		bmi.s	loc_A20A
0000AAA8 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000AAAE 6700                       		beq.s	loc_A25C	; if yes, branch
0000AAB0                            
0000AAB0                            loc_A20A:
0000AAB0 4A41                       		tst.w	d1
0000AAB2 6A00                       		bpl.s	loc_A220
0000AAB4 9769 000C                  		sub.w	d3,$C(a1)
0000AAB8 6100 D1FE                  		bsr.w	loc_74AE
0000AABC 117C 0002 0025             		move.b	#2,$25(a0)
0000AAC2 6000 0000                  		bra.w	Obj26_Animate
0000AAC6                            ; ===========================================================================
0000AAC6                            
0000AAC6                            loc_A220:
0000AAC6 4A40                       		tst.w	d0
0000AAC8 6700 0000                  		beq.w	loc_A246
0000AACC 6B00                       		bmi.s	loc_A230
0000AACE 4A69 0010                  		tst.w	$10(a1)
0000AAD2 6B00                       		bmi.s	loc_A246
0000AAD4 6000                       		bra.s	loc_A236
0000AAD6                            ; ===========================================================================
0000AAD6                            
0000AAD6                            loc_A230:
0000AAD6 4A69 0010                  		tst.w	$10(a1)
0000AADA 6A00                       		bpl.s	loc_A246
0000AADC                            
0000AADC                            loc_A236:
0000AADC 9169 0008                  		sub.w	d0,8(a1)
0000AAE0 337C 0000 0014             		move.w	#0,$14(a1)
0000AAE6 337C 0000 0010             		move.w	#0,$10(a1)
0000AAEC                            
0000AAEC                            loc_A246:
0000AAEC 0829 0001 0022             		btst	#1,$22(a1)
0000AAF2 6600                       		bne.s	loc_A26A
0000AAF4 08E9 0005 0022             		bset	#5,$22(a1)
0000AAFA 08E8 0005 0022             		bset	#5,$22(a0)
0000AB00 6000                       		bra.s	Obj26_Animate
0000AB02                            ; ===========================================================================
0000AB02                            
0000AB02                            loc_A25C:
0000AB02 0828 0005 0022             		btst	#5,$22(a0)
0000AB08 6700                       		beq.s	Obj26_Animate
0000AB0A 337C 0001 001C             		move.w	#1,$1C(a1)
0000AB10                            
0000AB10                            loc_A26A:
0000AB10 08A8 0005 0022             		bclr	#5,$22(a0)
0000AB16 08A9 0005 0022             		bclr	#5,$22(a1)
0000AB1C                            
0000AB1C                            Obj26_Animate:				; XREF: Obj26_Index
0000AB1C 43F9 0000 0000             		lea	(Ani_obj26).l,a1
0000AB22 6100 0000                  		bsr.w	AnimateSprite
0000AB26                            
0000AB26                            Obj26_Display:				; XREF: Obj26_Index
0000AB26 6100 0000                  		bsr.w	DisplaySprite
0000AB2A 3028 0008                  		move.w	8(a0),d0
0000AB2E 0240 FF80                  		andi.w	#$FF80,d0
0000AB32 3238 F700                  		move.w	($FFFFF700).w,d1
0000AB36 0441 0080                  		subi.w	#$80,d1
0000AB3A 0241 FF80                  		andi.w	#$FF80,d1
0000AB3E 9041                       		sub.w	d1,d0
0000AB40 0C40 0280                  		cmpi.w	#$280,d0
0000AB44 6200 0000                  		bhi.w	DeleteObject
0000AB48 4E75                       		rts	
0000AB4A                            ; ===========================================================================
0000AB4A                            
0000AB4A                            Obj26_BreakOpen:			; XREF: Obj26_Index
0000AB4A 5428 0024                  		addq.b	#2,$24(a0)
0000AB4E 117C 0000 0020             		move.b	#0,$20(a0)
0000AB54 6100 0000                  		bsr.w	SingleObjLoad
0000AB58 6600                       		bne.s	Obj26_Explode
0000AB5A 12BC 002E                  		move.b	#$2E,0(a1)	; load monitor contents	object
0000AB5E 3368 0008 0008             		move.w	8(a0),8(a1)
0000AB64 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000AB6A 1368 001C 001C             		move.b	$1C(a0),$1C(a1)
0000AB70 7400                       		moveq	#0,d2	; GMZ
0000AB72 7205                       		moveq	#5,d1	; GMZ: Amount of explosion objects
0000AB74                            
0000AB74                            Obj26_Explode:
0000AB74 6100 0000                  		bsr.w	SingleObjLoad
0000AB78 6600                       		bne.s	Obj26_SetBroken
0000AB7A 12BC 0027                  		move.b	#$27,0(a1)	; GMZ: Load explosion object
0000AB7E 5429 0024                  		addq.b	#2,$24(a1)
0000AB82 1342 0028                  		move.b	d2,$28(a1)	; GMZ: Set subtype
0000AB86 3368 0008 0008             		move.w	8(a0),8(a1)
0000AB8C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000AB92                            
0000AB92                            Obj26_NextExplosion:
0000AB92 5802                       		addq.b	#4,d2
0000AB94 51C9 FFDE                  		dbf	d1,Obj26_Explode
0000AB98                            
0000AB98                            Obj26_SetBroken:
0000AB98 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000AB9C 7000                       		moveq	#0,d0
0000AB9E 1028 0023                  		move.b	$23(a0),d0
0000ABA2 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000ABA8 117C 0009 001C             		move.b	#9,$1C(a0)	; set monitor type to broken
0000ABAE 6000 0000                  		bra.w	DisplaySprite
0000ABB2                            ; ===========================================================================
0000ABB2                            ; ---------------------------------------------------------------------------
0000ABB2                            ; Object 2E - contents of monitors
0000ABB2                            ; ---------------------------------------------------------------------------
0000ABB2                            
0000ABB2                            Obj2E:					; XREF: Obj_Index
0000ABB2 7000                       		moveq	#0,d0
0000ABB4 1028 0024                  		move.b	$24(a0),d0
0000ABB8 323B 0000                  		move.w	Obj2E_Index(pc,d0.w),d1
0000ABBC 4EBB 1000                  		jsr	Obj2E_Index(pc,d1.w)
0000ABC0 6000 0000                  		bra.w	DisplaySprite
0000ABC4                            ; ===========================================================================
0000ABC4 0000                       Obj2E_Index:	dc.w Obj2E_Main-Obj2E_Index
0000ABC6 0000                       		dc.w Obj2E_Move-Obj2E_Index
0000ABC8 0000                       		dc.w Obj2E_Delete-Obj2E_Index
0000ABCA                            ; ===========================================================================
0000ABCA                            
0000ABCA                            Obj2E_Main:				; XREF: Obj2E_Index
0000ABCA 5428 0024                  		addq.b	#2,$24(a0)
0000ABCE 317C 0680 0002             		move.w	#$680,2(a0)
0000ABD4 117C 0024 0001             		move.b	#$24,1(a0)
0000ABDA 117C 0003 0018             		move.b	#3,$18(a0)
0000ABE0 117C 0008 0019             		move.b	#8,$19(a0)
0000ABE6 317C FD00 0012             		move.w	#-$300,$12(a0)
0000ABEC 7000                       		moveq	#0,d0
0000ABEE 1028 001C                  		move.b	$1C(a0),d0
0000ABF2 5400                       		addq.b	#2,d0
0000ABF4 1140 001A                  		move.b	d0,$1A(a0)
0000ABF8 227C 0000 0000             		movea.l	#Map_obj26,a1
0000ABFE D000                       		add.b	d0,d0
0000AC00 D2F1 0000                  		adda.w	(a1,d0.w),a1
0000AC04 5249                       		addq.w	#1,a1
0000AC06 2149 0004                  		move.l	a1,4(a0)
0000AC0A                            
0000AC0A                            Obj2E_Move:				; XREF: Obj2E_Index
0000AC0A 4A68 0012                  		tst.w	$12(a0)		; is object moving?
0000AC0E 6A00 0000                  		bpl.w	Obj2E_ChkEggman	; if not, branch
0000AC12 6100 0000                  		bsr.w	SpeedToPos
0000AC16 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
0000AC1C 4E75                       		rts	
0000AC1E                            ; ===========================================================================
0000AC1E                            
0000AC1E                            Obj2E_ChkEggman:			; XREF: Obj2E_Move
0000AC1E 5428 0024                  		addq.b	#2,$24(a0)
0000AC22 317C 001D 001E             		move.w	#29,$1E(a0)
0000AC28 1028 001C                  		move.b	$1C(a0),d0
0000AC2C 0C00 0001                  		cmpi.b	#1,d0		; does monitor contain Eggman?
0000AC30 6600                       		bne.s	Obj2E_ChkSonic
0000AC32 4E75                       		rts			; Eggman monitor does nothing
0000AC34                            ; ===========================================================================
0000AC34                            
0000AC34                            Obj2E_ChkSonic:
0000AC34 0C00 0002                  		cmpi.b	#2,d0		; does monitor contain Sonic?
0000AC38 6600                       		bne.s	Obj2E_ChkShoes
0000AC3A                            
0000AC3A                            ExtraLife:
0000AC3A 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000AC3E 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000AC42 303C 0088                  		move.w	#$88,d0
0000AC46 4EF9 0000 1594             		jmp	(PlaySound).l	; play extra life music
0000AC4C                            ; ===========================================================================
0000AC4C                            
0000AC4C                            Obj2E_ChkShoes:
0000AC4C 0C00 0003                  		cmpi.b	#3,d0		; does monitor contain speed shoes?
0000AC50 6600                       		bne.s	Obj2E_ChkShield
0000AC52 11FC 0001 FE2E             		move.b	#1,($FFFFFE2E).w ; speed up the	BG music
0000AC58 31FC 04B0 D034             		move.w	#$4B0,($FFFFD034).w ; time limit for the power-up
0000AC5E 31FC 0C00 F760             		move.w	#$C00,($FFFFF760).w ; change Sonic's top speed
0000AC64 31FC 0018 F762             		move.w	#$18,($FFFFF762).w
0000AC6A 31FC 0080 F764             		move.w	#$80,($FFFFF764).w
0000AC70 303C 00E2                  		move.w	#$E2,d0
0000AC74 4EF9 0000 1594             		jmp	(PlaySound).l	; Speed	up the music
0000AC7A                            ; ===========================================================================
0000AC7A                            
0000AC7A                            Obj2E_ChkShield:
0000AC7A 0C00 0004                  		cmpi.b	#4,d0		; does monitor contain a shield?
0000AC7E 6600                       		bne.s	Obj2E_ChkInvinc
0000AC80 11FC 0001 FE2C             		move.b	#1,($FFFFFE2C).w ; give	Sonic a	shield
0000AC86 11FC 0038 D180             		move.b	#$38,($FFFFD180).w ; load shield object	($38)
0000AC8C 303C 00AF                  		move.w	#$AF,d0
0000AC90 4EF9 0000 1594             		jmp	(PlaySound).l	; play shield sound
0000AC96                            ; ===========================================================================
0000AC96                            
0000AC96                            Obj2E_ChkInvinc:
0000AC96 0C00 0005                  		cmpi.b	#5,d0		; does monitor contain invincibility?
0000AC9A 6600                       		bne.s	Obj2E_ChkRings
0000AC9C 11FC 0001 FE2D             		move.b	#1,($FFFFFE2D).w ; make	Sonic invincible
0000ACA2 31FC 04B0 D032             		move.w	#$4B0,($FFFFD032).w ; time limit for the power-up
0000ACA8 11FC 0038 D200             		move.b	#$38,($FFFFD200).w ; load stars	object ($3801)
0000ACAE 11FC 0001 D21C             		move.b	#1,($FFFFD21C).w
0000ACB4 11FC 0038 D240             		move.b	#$38,($FFFFD240).w ; load stars	object ($3802)
0000ACBA 11FC 0002 D25C             		move.b	#2,($FFFFD25C).w
0000ACC0 11FC 0038 D280             		move.b	#$38,($FFFFD280).w ; load stars	object ($3803)
0000ACC6 11FC 0003 D29C             		move.b	#3,($FFFFD29C).w
0000ACCC 11FC 0038 D2C0             		move.b	#$38,($FFFFD2C0).w ; load stars	object ($3804)
0000ACD2 11FC 0004 D2DC             		move.b	#4,($FFFFD2DC).w
0000ACD8 4A38 F7AA                  		tst.b	($FFFFF7AA).w	; is boss mode on?
0000ACDC 6600                       		bne.s	Obj2E_NoMusic	; if yes, branch
0000ACDE 303C 0087                  		move.w	#$87,d0
0000ACE2 4EF9 0000 1594             		jmp	(PlaySound).l	; play invincibility music
0000ACE8                            ; ===========================================================================
0000ACE8                            
0000ACE8                            Obj2E_NoMusic:
0000ACE8 4E75                       		rts	
0000ACEA                            ; ===========================================================================
0000ACEA                            
0000ACEA                            Obj2E_ChkRings:
0000ACEA 0C00 0006                  		cmpi.b	#6,d0		; does monitor contain 10 rings?
0000ACEE 6600                       		bne.s	Obj2E_ChkS
0000ACF0 0678 000A FE20             		addi.w	#$A,($FFFFFE20).w ; add	10 rings to the	number of rings	you have
0000ACF6 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the ring counter
0000ACFC 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; check if you have 100 rings
0000AD02 6500                       		bcs.s	Obj2E_RingSound
0000AD04 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w
0000AD0A 6700 FF2E                  		beq.w	ExtraLife
0000AD0E 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; check if you have 200 rings
0000AD14 6500                       		bcs.s	Obj2E_RingSound
0000AD16 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w
0000AD1C 6700 FF1C                  		beq.w	ExtraLife
0000AD20                            
0000AD20                            Obj2E_RingSound:
0000AD20 303C 00B5                  		move.w	#$B5,d0
0000AD24 4EF9 0000 1594             		jmp	(PlaySound).l	; play ring sound
0000AD2A                            ; ===========================================================================
0000AD2A                            
0000AD2A                            Obj2E_ChkS:
0000AD2A 0C00 0007                  		cmpi.b	#7,d0		; does monitor contain 'S'
0000AD2E 6600                       		bne.s	Obj2E_ChkEnd
0000AD30                            		; nop	
0000AD30 7201                       		moveq	#1,d1
0000AD32 B338 FE2F                  		eor.b	d1,($FFFFFE2F).w	; GMZ: Set reverse controls flag when broken, revert when another monitor of same type is broken again
0000AD36                            
0000AD36                            Obj2E_ChkEnd:
0000AD36 4E75                       		rts			; 'S' and goggles monitors do nothing
0000AD38                            ; ===========================================================================
0000AD38                            
0000AD38                            Obj2E_Delete:				; XREF: Obj2E_Index
0000AD38 5368 001E                  		subq.w	#1,$1E(a0)
0000AD3C 6B00 0000                  		bmi.w	DeleteObject
0000AD40 4E75                       		rts	
0000AD42                            ; ---------------------------------------------------------------------------
0000AD42                            ; Subroutine to	make the sides of a monitor solid
0000AD42                            ; ---------------------------------------------------------------------------
0000AD42                            
0000AD42                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000AD42                            
0000AD42                            
0000AD42                            Obj26_SolidSides:			; XREF: loc_A1EC
0000AD42 43F8 D000                  		lea	($FFFFD000).w,a1
0000AD46 3029 0008                  		move.w	8(a1),d0
0000AD4A 9068 0008                  		sub.w	8(a0),d0
0000AD4E D041                       		add.w	d1,d0
0000AD50 6B00                       		bmi.s	loc_A4E6
0000AD52 3601                       		move.w	d1,d3
0000AD54 D643                       		add.w	d3,d3
0000AD56 B043                       		cmp.w	d3,d0
0000AD58 6200                       		bhi.s	loc_A4E6
0000AD5A 1629 0016                  		move.b	$16(a1),d3
0000AD5E 4883                       		ext.w	d3
0000AD60 D443                       		add.w	d3,d2
0000AD62 3629 000C                  		move.w	$C(a1),d3
0000AD66 9668 000C                  		sub.w	$C(a0),d3
0000AD6A D642                       		add.w	d2,d3
0000AD6C 6B00                       		bmi.s	loc_A4E6
0000AD6E D442                       		add.w	d2,d2
0000AD70 B642                       		cmp.w	d2,d3
0000AD72 6400                       		bcc.s	loc_A4E6
0000AD74 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0000AD78 6B00                       		bmi.s	loc_A4E6
0000AD7A 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000AD80 6400                       		bcc.s	loc_A4E6
0000AD82 4A78 FE08                  		tst.w	($FFFFFE08).w
0000AD86 6600                       		bne.s	loc_A4E6
0000AD88 B240                       		cmp.w	d0,d1
0000AD8A 6400                       		bcc.s	loc_A4DC
0000AD8C D241                       		add.w	d1,d1
0000AD8E 9041                       		sub.w	d1,d0
0000AD90                            
0000AD90                            loc_A4DC:
0000AD90 0C43 0010                  		cmpi.w	#$10,d3
0000AD94 6500                       		bcs.s	loc_A4EA
0000AD96                            
0000AD96                            loc_A4E2:
0000AD96 7201                       		moveq	#1,d1
0000AD98 4E75                       		rts	
0000AD9A                            ; ===========================================================================
0000AD9A                            
0000AD9A                            loc_A4E6:
0000AD9A 7200                       		moveq	#0,d1
0000AD9C 4E75                       		rts	
0000AD9E                            ; ===========================================================================
0000AD9E                            
0000AD9E                            loc_A4EA:
0000AD9E 7200                       		moveq	#0,d1
0000ADA0 1228 0019                  		move.b	$19(a0),d1
0000ADA4 5841                       		addq.w	#4,d1
0000ADA6 3401                       		move.w	d1,d2
0000ADA8 D442                       		add.w	d2,d2
0000ADAA D269 0008                  		add.w	8(a1),d1
0000ADAE 9268 0008                  		sub.w	8(a0),d1
0000ADB2 6BE2                       		bmi.s	loc_A4E2
0000ADB4 B242                       		cmp.w	d2,d1
0000ADB6 64DE                       		bcc.s	loc_A4E2
0000ADB8 72FF                       		moveq	#-1,d1
0000ADBA 4E75                       		rts	
0000ADBC                            ; End of function Obj26_SolidSides
0000ADBC                            
0000ADBC                            ; ===========================================================================
0000ADBC                            Ani_obj26:
0000ADBC                            	include "_anim\obj26.asm"
0000ADBC                            ; ---------------------------------------------------------------------------
0000ADBC                            ; Animation script - monitors
0000ADBC                            ; ---------------------------------------------------------------------------
0000ADBC 0000 0000 0000             		dc.w byte_A51C-Ani_obj26, byte_A522-Ani_obj26, byte_A52E-Ani_obj26
0000ADC2 0000 0000 0000             		dc.w byte_A53A-Ani_obj26, byte_A546-Ani_obj26, byte_A552-Ani_obj26
0000ADC8 0000 0000 0000             		dc.w byte_A55E-Ani_obj26, byte_A56A-Ani_obj26, byte_A576-Ani_obj26
0000ADCE 0000                       		dc.w byte_A582-Ani_obj26
0000ADD0 0100 0102 FF00             byte_A51C:	dc.b 1,	0, 1, 2, $FF, 0
0000ADD6 0100 0303 0103 0302 0303+  byte_A522:	dc.b 1,	0, 3, 3, 1, 3, 3, 2, 3,	3, $FF,	0
0000ADE2 0100 0404 0104 0402 0404+  byte_A52E:	dc.b 1,	0, 4, 4, 1, 4, 4, 2, 4,	4, $FF,	0
0000ADEE 0100 0505 0105 0502 0505+  byte_A53A:	dc.b 1,	0, 5, 5, 1, 5, 5, 2, 5,	5, $FF,	0
0000ADFA 0100 0606 0106 0602 0606+  byte_A546:	dc.b 1,	0, 6, 6, 1, 6, 6, 2, 6,	6, $FF,	0
0000AE06 0100 0707 0107 0702 0707+  byte_A552:	dc.b 1,	0, 7, 7, 1, 7, 7, 2, 7,	7, $FF,	0
0000AE12 0100 0808 0108 0802 0808+  byte_A55E:	dc.b 1,	0, 8, 8, 1, 8, 8, 2, 8,	8, $FF,	0
0000AE1E 0100 0909 0109 0902 0909+  byte_A56A:	dc.b 1,	0, 9, 9, 1, 9, 9, 2, 9,	9, $FF,	0
0000AE2A 0100 0A0A 010A 0A02 0A0A+  byte_A576:	dc.b 1,	0, $A, $A, 1, $A, $A, 2, $A, $A, $FF, 0
0000AE36 0200 0102 0BFE 0100        byte_A582:	dc.b 2,	0, 1, 2, $B, $FE, 1, 0
0000AE3E                            		even
0000AE3E                            		even
0000AE3E                            
0000AE3E                            ; ---------------------------------------------------------------------------
0000AE3E                            ; Sprite mappings - monitors
0000AE3E                            ; ---------------------------------------------------------------------------
0000AE3E                            Map_obj26:
0000AE3E                            	include "_maps\obj26.asm"
0000AE3E                            ; ================================================================================
0000AE3E                            ; Sprite Mappings - generated by Flex 2 Sat Mar 22 2025 11:29:00 GMT-0500 (Central Daylight Time)
0000AE3E                            ; ================================================================================
0000AE3E                            
0000AE3E                            DATAY1U343IF3L:
0000AE3E 0000 0000                  	dc.w DATAY1U343IF3L_0-DATAY1U343IF3L, DATAY1U343IF3L_1-DATAY1U343IF3L
0000AE42 0000 0000                  	dc.w DATAY1U343IF3L_2-DATAY1U343IF3L, DATAY1U343IF3L_3-DATAY1U343IF3L
0000AE46 0000 0000                  	dc.w DATAY1U343IF3L_4-DATAY1U343IF3L, DATAY1U343IF3L_5-DATAY1U343IF3L
0000AE4A 0000 0000                  	dc.w DATAY1U343IF3L_6-DATAY1U343IF3L, DATAY1U343IF3L_7-DATAY1U343IF3L
0000AE4E 0000 0000                  	dc.w DATAY1U343IF3L_8-DATAY1U343IF3L, DATAY1U343IF3L_9-DATAY1U343IF3L
0000AE52 0000 0000                  	dc.w DATAY1U343IF3L_A-DATAY1U343IF3L, DATAY1U343IF3L_B-DATAY1U343IF3L
0000AE56 05                         DATAY1U343IF3L_0: dc.b $5
0000AE57 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AE5C 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AE61 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AE66 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AE6B 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AE70 06                         DATAY1U343IF3L_1: dc.b $6
0000AE71 F205 0023 F8               	dc.b $F2, $5, $0, $23, $F8
0000AE76 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AE7B 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AE80 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AE85 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AE8A 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AE8F 05                         DATAY1U343IF3L_2: dc.b $5
0000AE90 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AE95 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AE9A E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AE9F 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AEA4 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AEA9 05                         DATAY1U343IF3L_3: dc.b $5
0000AEAA E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AEAF 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AEB4 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AEB9 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AEBE 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AEC3 06                         DATAY1U343IF3L_4: dc.b $6
0000AEC4 F205 0027 F8               	dc.b $F2, $5, $0, $27, $F8
0000AEC9 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AECE 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AED3 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AED8 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AEDD 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AEE2 06                         DATAY1U343IF3L_5: dc.b $6
0000AEE3 F205 002B F8               	dc.b $F2, $5, $0, $2B, $F8
0000AEE8 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AEED 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AEF2 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AEF7 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AEFC 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AF01 06                         DATAY1U343IF3L_6: dc.b $6
0000AF02 F205 002F F8               	dc.b $F2, $5, $0, $2F, $F8
0000AF07 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AF0C 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AF11 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AF16 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AF1B 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AF20 06                         DATAY1U343IF3L_7: dc.b $6
0000AF21 F205 0033 F8               	dc.b $F2, $5, $0, $33, $F8
0000AF26 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AF2B 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AF30 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AF35 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AF3A 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AF3F 06                         DATAY1U343IF3L_8: dc.b $6
0000AF40 F205 0037 F8               	dc.b $F2, $5, $0, $37, $F8
0000AF45 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AF4A 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AF4F E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AF54 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AF59 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AF5E 06                         DATAY1U343IF3L_9: dc.b $6
0000AF5F F205 003B F8               	dc.b $F2, $5, $0, $3B, $F8
0000AF64 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AF69 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AF6E E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AF73 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AF78 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AF7D 05                         DATAY1U343IF3L_A: dc.b $5
0000AF7E E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AF83 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AF88 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AF8D 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AF92 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AF97 01                         DATAY1U343IF3L_B: dc.b $1
0000AF98 FF0D 003F F0               	dc.b $FF, $D, $0, $3F, $F0
0000AF9E 00                         	even
0000AF9E 00                         	even
0000AF9E                            
0000AF9E                            ; ===========================================================================
0000AF9E                            ; ---------------------------------------------------------------------------
0000AF9E                            ; Object 0E - Sonic on the title screen
0000AF9E                            ; ---------------------------------------------------------------------------
0000AF9E                            
0000AF9E                            Obj0E:					; XREF: Obj_Index
0000AF9E 7000                       		moveq	#0,d0
0000AFA0 1028 0024                  		move.b	$24(a0),d0
0000AFA4 323B 0000                  		move.w	Obj0E_Index(pc,d0.w),d1
0000AFA8 4EFB 1000                  		jmp	Obj0E_Index(pc,d1.w)
0000AFAC                            ; ===========================================================================
0000AFAC 0000                       Obj0E_Index:	dc.w Obj0E_Main-Obj0E_Index
0000AFAE 0000                       		dc.w Obj0E_Delay-Obj0E_Index
0000AFB0 0000                       		dc.w Obj0E_Move-Obj0E_Index
0000AFB2 0000                       		dc.w Obj0E_Animate-Obj0E_Index
0000AFB4                            ; ===========================================================================
0000AFB4                            
0000AFB4                            Obj0E_Main:				; XREF: Obj0E_Index
0000AFB4 5428 0024                  		addq.b	#2,$24(a0)
0000AFB8 317C 00F0 0008             		move.w	#$F0,8(a0)
0000AFBE 317C 00DE 000A             		move.w	#$DE,$A(a0)
0000AFC4 217C 0000 0000 0004        		move.l	#Map_obj0E,4(a0)
0000AFCC 317C 2300 0002             		move.w	#$2300,2(a0)
0000AFD2 117C 0001 0018             		move.b	#1,$18(a0)
0000AFD8 117C 001D 001F             		move.b	#29,$1F(a0)	; set time delay to 0.5	seconds
0000AFDE 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000AFE4 6100 0000                  		bsr.w	AnimateSprite
0000AFE8                            
0000AFE8                            Obj0E_Delay:				; XREF: Obj0E_Index
0000AFE8 5328 001F                  		subq.b	#1,$1F(a0)	; subtract 1 from time delay
0000AFEC 6A00                       		bpl.s	Obj0E_Wait	; if time remains, branch
0000AFEE 5428 0024                  		addq.b	#2,$24(a0)	; go to	next routine
0000AFF2 6000 0000                  		bra.w	DisplaySprite
0000AFF6                            ; ===========================================================================
0000AFF6                            
0000AFF6                            Obj0E_Wait:				; XREF: Obj0E_Delay
0000AFF6 4E75                       		rts	
0000AFF8                            ; ===========================================================================
0000AFF8                            
0000AFF8                            Obj0E_Move:				; XREF: Obj0E_Index
0000AFF8 5168 000A                  		subq.w	#8,$A(a0)
0000AFFC 0C68 0096 000A             		cmpi.w	#$96,$A(a0)
0000B002 6600                       		bne.s	Obj0E_Display
0000B004 5428 0024                  		addq.b	#2,$24(a0)
0000B008                            
0000B008                            Obj0E_Display:
0000B008 6000 0000                  		bra.w	DisplaySprite
0000B00C                            ; ===========================================================================
0000B00C 4E75                       		rts	
0000B00E                            ; ===========================================================================
0000B00E                            
0000B00E                            Obj0E_Animate:				; XREF: Obj0E_Index
0000B00E 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000B014 6100 0000                  		bsr.w	AnimateSprite
0000B018 6000 0000                  		bra.w	DisplaySprite
0000B01C                            ; ===========================================================================
0000B01C 4E75                       		rts	
0000B01E                            ; ===========================================================================
0000B01E                            ; ---------------------------------------------------------------------------
0000B01E                            ; Object 0F - "PRESS START BUTTON" and "TM" from title screen
0000B01E                            ; ---------------------------------------------------------------------------
0000B01E                            
0000B01E                            Obj0F:					; XREF: Obj_Index
0000B01E 7000                       		moveq	#0,d0
0000B020 1028 0024                  		move.b	$24(a0),d0
0000B024 323B 0000                  		move.w	Obj0F_Index(pc,d0.w),d1
0000B028 4EBB 1000                  		jsr	Obj0F_Index(pc,d1.w)
0000B02C 6000 0000                  		bra.w	DisplaySprite
0000B030                            ; ===========================================================================
0000B030 0000                       Obj0F_Index:	dc.w Obj0F_Main-Obj0F_Index
0000B032 0000                       		dc.w Obj0F_PrsStart-Obj0F_Index
0000B034 0000                       		dc.w locret_A6F8-Obj0F_Index
0000B036                            ; ===========================================================================
0000B036                            
0000B036                            Obj0F_Main:				; XREF: Obj0F_Index
0000B036 5428 0024                  		addq.b	#2,$24(a0)
0000B03A 317C 00D0 0008             		move.w	#$D0,8(a0)
0000B040 317C 0130 000A             		move.w	#$130,$A(a0)
0000B046 217C 0000 0000 0004        		move.l	#Map_obj0F,4(a0)
0000B04E 317C 0200 0002             		move.w	#$200,2(a0)
0000B054 0C28 0002 001A             		cmpi.b	#2,$1A(a0)	; is object "PRESS START"?
0000B05A 6500                       		bcs.s	Obj0F_PrsStart	; if yes, branch
0000B05C 5428 0024                  		addq.b	#2,$24(a0)
0000B060 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is the object	"TM"?
0000B066 6600                       		bne.s	locret_A6F8	; if not, branch
0000B068 317C 2510 0002             		move.w	#$2510,2(a0)	; "TM" specific	code
0000B06E 317C 0170 0008             		move.w	#$170,8(a0)
0000B074 317C 00F8 000A             		move.w	#$F8,$A(a0)
0000B07A                            
0000B07A                            locret_A6F8:				; XREF: Obj0F_Index
0000B07A 4E75                       		rts	
0000B07C                            ; ===========================================================================
0000B07C                            
0000B07C                            Obj0F_PrsStart:				; XREF: Obj0F_Index
0000B07C 43F9 0000 0000             		lea	(Ani_obj0F).l,a1
0000B082 6000 0000                  		bra.w	AnimateSprite
0000B086                            ; ===========================================================================
0000B086                            Ani_obj0E:
0000B086                            	include "_anim\obj0E.asm"
0000B086                            ; ---------------------------------------------------------------------------
0000B086                            ; Animation script - Sonic on the title screen
0000B086                            ; ---------------------------------------------------------------------------
0000B086 0000                       		dc.w byte_A706-Ani_obj0E
0000B088 0700 0102 0304 0506 07FE+  byte_A706:	dc.b 7,	0, 1, 2, 3, 4, 5, 6, 7,	$FE, 2,	0
0000B094                            		even
0000B094                            		even
0000B094                            
0000B094                            Ani_obj0F:
0000B094                            	include "_anim\obj0F.asm"
0000B094                            ; ---------------------------------------------------------------------------
0000B094                            ; Animation script - "TM" and "PRESS START BUTTON" on the title screen
0000B094                            ; ---------------------------------------------------------------------------
0000B094 0000                       		dc.w byte_A714-Ani_obj0F
0000B096 1F00 01FF                  byte_A714:	dc.b $1F, 0, 1,	$FF
0000B09A                            		even
0000B09A                            		even
0000B09A                            
0000B09A                            ; ---------------------------------------------------------------------------
0000B09A                            ; Subroutine to	animate	a sprite using an animation script
0000B09A                            ; ---------------------------------------------------------------------------
0000B09A                            
0000B09A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B09A                            
0000B09A                            
0000B09A                            AnimateSprite:
0000B09A 7000                       		moveq	#0,d0
0000B09C 1028 001C                  		move.b	$1C(a0),d0	; move animation number	to d0
0000B0A0 B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
0000B0A4 6700                       		beq.s	Anim_Run	; if not, branch
0000B0A6 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
0000B0AA 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000B0B0 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
0000B0B6                            
0000B0B6                            Anim_Run:
0000B0B6 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000B0BA 6A00                       		bpl.s	Anim_Wait	; if time remains, branch
0000B0BC D040                       		add.w	d0,d0
0000B0BE D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
0000B0C2 1151 001E                  		move.b	(a1),$1E(a0)	; load frame duration
0000B0C6 7200                       		moveq	#0,d1
0000B0C8 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
0000B0CC 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
0000B0D0 6B00                       		bmi.s	Anim_End_FF	; if animation is complete, branch
0000B0D2                            
0000B0D2                            Anim_Next:
0000B0D2 1200                       		move.b	d0,d1
0000B0D4 0200 001F                  		andi.b	#$1F,d0
0000B0D8 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
0000B0DC 1028 0022                  		move.b	$22(a0),d0
0000B0E0 E719                       		rol.b	#3,d1
0000B0E2 B101                       		eor.b	d0,d1
0000B0E4 0201 0003                  		andi.b	#3,d1
0000B0E8 0228 00FC 0001             		andi.b	#$FC,1(a0)
0000B0EE 8328 0001                  		or.b	d1,1(a0)
0000B0F2 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
0000B0F6                            
0000B0F6                            Anim_Wait:
0000B0F6 4E75                       		rts	
0000B0F8                            ; ===========================================================================
0000B0F8                            
0000B0F8                            Anim_End_FF:
0000B0F8 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
0000B0FA 6600                       		bne.s	Anim_End_FE	; if not, branch
0000B0FC 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
0000B102 1029 0001                  		move.b	1(a1),d0	; read sprite number
0000B106 60CA                       		bra.s	Anim_Next
0000B108                            ; ===========================================================================
0000B108                            
0000B108                            Anim_End_FE:
0000B108 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
0000B10A 6600                       		bne.s	Anim_End_FD	; if not, branch
0000B10C 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
0000B110 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
0000B114 9200                       		sub.b	d0,d1
0000B116 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
0000B11A 60B6                       		bra.s	Anim_Next
0000B11C                            ; ===========================================================================
0000B11C                            
0000B11C                            Anim_End_FD:
0000B11C 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
0000B11E 6600                       		bne.s	Anim_End_FC	; if not, branch
0000B120 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
0000B126                            
0000B126                            Anim_End_FC:
0000B126 5200                       		addq.b	#1,d0		; is the end flag = $FC	?
0000B128 6600                       		bne.s	Anim_End_FB	; if not, branch
0000B12A 5428 0024                  		addq.b	#2,$24(a0)	; jump to next routine
0000B12E                            
0000B12E                            Anim_End_FB:
0000B12E 5200                       		addq.b	#1,d0		; is the end flag = $FB	?
0000B130 6600                       		bne.s	Anim_End_FA	; if not, branch
0000B132 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000B138 4228 0025                  		clr.b	$25(a0)		; reset	2nd routine counter
0000B13C                            
0000B13C                            Anim_End_FA:
0000B13C 5200                       		addq.b	#1,d0		; is the end flag = $FA	?
0000B13E 6600                       		bne.s	Anim_End	; if not, branch
0000B140 5428 0025                  		addq.b	#2,$25(a0)	; jump to next routine
0000B144                            
0000B144                            Anim_End:
0000B144 4E75                       		rts	
0000B146                            ; End of function AnimateSprite
0000B146                            
0000B146                            ; ===========================================================================
0000B146                            ; ---------------------------------------------------------------------------
0000B146                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000B146                            ; ---------------------------------------------------------------------------
0000B146                            Map_obj0F:
0000B146                            	include "_maps\obj0F.asm"
0000B146                            ; ---------------------------------------------------------------------------
0000B146                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000B146                            ; ---------------------------------------------------------------------------
0000B146 0000                       		dc.w byte_A7CD-Map_obj0F
0000B148 0000                       		dc.w byte_A7CC-Map_obj0F
0000B14A 0000                       		dc.w byte_A7EB-Map_obj0F
0000B14C 0000                       		dc.w byte_A882-Map_obj0F
0000B14E 06                         byte_A7CC:	dc.b 6			; "PRESS START BUTTON"
0000B14F 000C 00F0 00               byte_A7CD:	dc.b 0,	$C, 0, $F0, 0
0000B154 0000 00F3 20               		dc.b 0,	0, 0, $F3, $20
0000B159 0000 00F3 30               		dc.b 0,	0, 0, $F3, $30
0000B15E 000C 00F4 38               		dc.b 0,	$C, 0, $F4, $38
0000B163 0008 00F8 60               		dc.b 0,	8, 0, $F8, $60
0000B168 0008 00FB 78               		dc.b 0,	8, 0, $FB, $78
0000B16D 1E                         byte_A7EB:	dc.b $1E		; sprite list filler
0000B16E B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B173 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B178 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B17D B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B182 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B187 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B18C B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B191 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B196 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B19B B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B1A0 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B1A5 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B1AA D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B1AF D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B1B4 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B1B9 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B1BE D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B1C3 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B1C8 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B1CD D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B1D2 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B1D7 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B1DC F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B1E1 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B1E6 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B1EB F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B1F0 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B1F5 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B1FA F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B1FF F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B204 01                         byte_A882:	dc.b 1			; "TM"
0000B205 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
0000B20A                            		even
0000B20A                            		even
0000B20A                            
0000B20A                            ; ---------------------------------------------------------------------------
0000B20A                            ; Sprite mappings - Sonic on the title screen
0000B20A                            ; ---------------------------------------------------------------------------
0000B20A                            Map_obj0E:
0000B20A                            	include "_maps\obj0E.asm"
0000B20A                            ; ================================================================================
0000B20A                            ; Sprite Mappings - generated by Flex 2 Sun Mar 23 2025 15:32:50 GMT-0500 (Central Daylight Time)
0000B20A                            ; ================================================================================
0000B20A                            
0000B20A                            DATAGKI0HYDQBXP:
0000B20A 0000 0000                  	dc.w DATAGKI0HYDQBXP_0-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_1-DATAGKI0HYDQBXP
0000B20E 0000 0000                  	dc.w DATAGKI0HYDQBXP_2-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_3-DATAGKI0HYDQBXP
0000B212 0000 0000                  	dc.w DATAGKI0HYDQBXP_4-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_5-DATAGKI0HYDQBXP
0000B216 0000 0000                  	dc.w DATAGKI0HYDQBXP_6-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_7-DATAGKI0HYDQBXP
0000B21A 08                         DATAGKI0HYDQBXP_0: dc.b $8
0000B21B 0C0F 0126 08               	dc.b $C, $F, $1, $26, $8
0000B220 2C0F 0136 08               	dc.b $2C, $F, $1, $36, $8
0000B225 4C0D 0146 08               	dc.b $4C, $D, $1, $46, $8
0000B22A 0408 014E 20               	dc.b $4, $8, $1, $4E, $20
0000B22F 0C0B 0151 28               	dc.b $C, $B, $1, $51, $28
0000B234 2C0B 015D 28               	dc.b $2C, $B, $1, $5D, $28
0000B239 4C05 0169 28               	dc.b $4C, $5, $1, $69, $28
0000B23E 1407 016D 40               	dc.b $14, $7, $1, $6D, $40
0000B243 0B                         DATAGKI0HYDQBXP_1: dc.b $B
0000B244 060F 0175 01               	dc.b $6, $F, $1, $75, $1
0000B249 060F 0185 21               	dc.b $6, $F, $1, $85, $21
0000B24E 0607 0195 41               	dc.b $6, $7, $1, $95, $41
0000B253 260F 019D 01               	dc.b $26, $F, $1, $9D, $1
0000B258 260F 01AD 21               	dc.b $26, $F, $1, $AD, $21
0000B25D 2607 01BD 41               	dc.b $26, $7, $1, $BD, $41
0000B262 460C 01C5 01               	dc.b $46, $C, $1, $C5, $1
0000B267 460E 01C9 21               	dc.b $46, $E, $1, $C9, $21
0000B26C 4606 01D5 41               	dc.b $46, $6, $1, $D5, $41
0000B271 4E08 01DB 09               	dc.b $4E, $8, $1, $DB, $9
0000B276 5604 01DE 11               	dc.b $56, $4, $1, $DE, $11
0000B27B 0B                         DATAGKI0HYDQBXP_2: dc.b $B
0000B27C F20F 0175 01               	dc.b $F2, $F, $1, $75, $1
0000B281 F20F 0185 21               	dc.b $F2, $F, $1, $85, $21
0000B286 F207 0195 41               	dc.b $F2, $7, $1, $95, $41
0000B28B 120F 019D 01               	dc.b $12, $F, $1, $9D, $1
0000B290 120F 01AD 21               	dc.b $12, $F, $1, $AD, $21
0000B295 1207 01BD 41               	dc.b $12, $7, $1, $BD, $41
0000B29A 320C 01C5 01               	dc.b $32, $C, $1, $C5, $1
0000B29F 320E 01C9 21               	dc.b $32, $E, $1, $C9, $21
0000B2A4 3206 01D5 41               	dc.b $32, $6, $1, $D5, $41
0000B2A9 3A08 01DB 09               	dc.b $3A, $8, $1, $DB, $9
0000B2AE 4204 01DE 11               	dc.b $42, $4, $1, $DE, $11
0000B2B3 0A                         DATAGKI0HYDQBXP_3: dc.b $A
0000B2B4 FC0F 0000 08               	dc.b $FC, $F, $0, $0, $8
0000B2B9 F408 0010 28               	dc.b $F4, $8, $0, $10, $28
0000B2BE FC0F 0013 28               	dc.b $FC, $F, $0, $13, $28
0000B2C3 0400 0023 48               	dc.b $4, $0, $0, $23, $48
0000B2C8 0C06 0024 48               	dc.b $C, $6, $0, $24, $48
0000B2CD 2400 002A 48               	dc.b $24, $0, $0, $2A, $48
0000B2D2 1C0D 002B 08               	dc.b $1C, $D, $0, $2B, $8
0000B2D7 1C0E 0033 28               	dc.b $1C, $E, $0, $33, $28
0000B2DC 2C0B 003F 10               	dc.b $2C, $B, $0, $3F, $10
0000B2E1 3408 004B 28               	dc.b $34, $8, $0, $4B, $28
0000B2E6 10                         DATAGKI0HYDQBXP_4: dc.b $10
0000B2E7 F80F 01E0 09               	dc.b $F8, $F, $1, $E0, $9
0000B2EC F807 01F0 29               	dc.b $F8, $7, $1, $F0, $29
0000B2F1 0003 01F8 01               	dc.b $0, $3, $1, $F8, $1
0000B2F6 0003 01FC 39               	dc.b $0, $3, $1, $FC, $39
0000B2FB 1001 0200 F9               	dc.b $10, $1, $2, $0, $F9
0000B300 180D 0202 09               	dc.b $18, $D, $2, $2, $9
0000B305 1807 020A 29               	dc.b $18, $7, $2, $A, $29
0000B30A 1803 0212 41               	dc.b $18, $3, $2, $12, $41
0000B30F 2001 0216 01               	dc.b $20, $1, $2, $16, $1
0000B314 2003 0218 39               	dc.b $20, $3, $2, $18, $39
0000B319 2808 021C 11               	dc.b $28, $8, $2, $1C, $11
0000B31E 3007 021F 19               	dc.b $30, $7, $2, $1F, $19
0000B323 3801 0227 11               	dc.b $38, $1, $2, $27, $11
0000B328 3806 0229 29               	dc.b $38, $6, $2, $29, $29
0000B32D 3801 022F 41               	dc.b $38, $1, $2, $2F, $41
0000B332 4001 0231 39               	dc.b $40, $1, $2, $31, $39
0000B337 0B                         DATAGKI0HYDQBXP_5: dc.b $B
0000B338 2C0F 006E E2               	dc.b $2C, $F, $0, $6E, $E2
0000B33D EC0F 007E 02               	dc.b $EC, $F, $0, $7E, $2
0000B342 0C0F 008E 02               	dc.b $C, $F, $0, $8E, $2
0000B347 2C0F 009E 02               	dc.b $2C, $F, $0, $9E, $2
0000B34C EC0F 00AE 22               	dc.b $EC, $F, $0, $AE, $22
0000B351 0C0F 00BE 22               	dc.b $C, $F, $0, $BE, $22
0000B356 2C0F 00CE 22               	dc.b $2C, $F, $0, $CE, $22
0000B35B EC0F 00DE 42               	dc.b $EC, $F, $0, $DE, $42
0000B360 0C0F 00EE 42               	dc.b $C, $F, $0, $EE, $42
0000B365 2C0F 00FE 42               	dc.b $2C, $F, $0, $FE, $42
0000B36A 0C07 0116 62               	dc.b $C, $7, $1, $16, $62
0000B36F 0F                         DATAGKI0HYDQBXP_6: dc.b $F
0000B370 EC0F 004E E2               	dc.b $EC, $F, $0, $4E, $E2
0000B375 0C0F 005E E2               	dc.b $C, $F, $0, $5E, $E2
0000B37A 2C0F 006E E2               	dc.b $2C, $F, $0, $6E, $E2
0000B37F EC0F 007E 02               	dc.b $EC, $F, $0, $7E, $2
0000B384 0C0F 008E 02               	dc.b $C, $F, $0, $8E, $2
0000B389 2C0F 009E 02               	dc.b $2C, $F, $0, $9E, $2
0000B38E EC0F 00AE 22               	dc.b $EC, $F, $0, $AE, $22
0000B393 0C0F 00BE 22               	dc.b $C, $F, $0, $BE, $22
0000B398 2C0F 00CE 22               	dc.b $2C, $F, $0, $CE, $22
0000B39D EC0F 00DE 42               	dc.b $EC, $F, $0, $DE, $42
0000B3A2 0C0F 00EE 42               	dc.b $C, $F, $0, $EE, $42
0000B3A7 2C0F 00FE 42               	dc.b $2C, $F, $0, $FE, $42
0000B3AC EC07 010E 62               	dc.b $EC, $7, $1, $E, $62
0000B3B1 0C07 0116 62               	dc.b $C, $7, $1, $16, $62
0000B3B6 2C07 011E 62               	dc.b $2C, $7, $1, $1E, $62
0000B3BB 0F                         DATAGKI0HYDQBXP_7: dc.b $F
0000B3BC EC0F 0233 E2               	dc.b $EC, $F, $2, $33, $E2
0000B3C1 0C0F 0243 E2               	dc.b $C, $F, $2, $43, $E2
0000B3C6 2C0F 0253 E2               	dc.b $2C, $F, $2, $53, $E2
0000B3CB EC0F 0263 02               	dc.b $EC, $F, $2, $63, $2
0000B3D0 0C0F 0273 02               	dc.b $C, $F, $2, $73, $2
0000B3D5 2C0F 0283 02               	dc.b $2C, $F, $2, $83, $2
0000B3DA EC0F 0293 22               	dc.b $EC, $F, $2, $93, $22
0000B3DF 0C0F 02A3 22               	dc.b $C, $F, $2, $A3, $22
0000B3E4 2C0F 02B3 22               	dc.b $2C, $F, $2, $B3, $22
0000B3E9 EC0F 02C3 42               	dc.b $EC, $F, $2, $C3, $42
0000B3EE 0C0F 02D3 42               	dc.b $C, $F, $2, $D3, $42
0000B3F3 2C0F 02E3 42               	dc.b $2C, $F, $2, $E3, $42
0000B3F8 EC07 02F3 62               	dc.b $EC, $7, $2, $F3, $62
0000B3FD 0C07 02FB 62               	dc.b $C, $7, $2, $FB, $62
0000B402 2C07 0303 62               	dc.b $2C, $7, $3, $3, $62
0000B408 00                         	even
0000B408 00                         	even
0000B408                            
0000B408                            ; ===========================================================================
0000B408                            ; ---------------------------------------------------------------------------
0000B408                            ; Object 2B - Chopper enemy (GHZ)
0000B408                            ; ---------------------------------------------------------------------------
0000B408                            
0000B408                            Obj2B:					; XREF: Obj_Index
0000B408 7000                       		moveq	#0,d0
0000B40A 1028 0024                  		move.b	$24(a0),d0
0000B40E 323B 0000                  		move.w	Obj2B_Index(pc,d0.w),d1
0000B412 4EBB 1000                  		jsr	Obj2B_Index(pc,d1.w)
0000B416 6000 0000                  		bra.w	MarkObjGone
0000B41A                            ; ===========================================================================
0000B41A 0000                       Obj2B_Index:	dc.w Obj2B_Main-Obj2B_Index
0000B41C 0000                       		dc.w Obj2B_ChgSpeed-Obj2B_Index
0000B41E                            ; ===========================================================================
0000B41E                            
0000B41E                            Obj2B_Main:				; XREF: Obj2B_Index
0000B41E 5428 0024                  		addq.b	#2,$24(a0)
0000B422 217C 0000 0000 0004        		move.l	#Map_obj2B,4(a0)
0000B42A 317C 047B 0002             		move.w	#$47B,2(a0)
0000B430 117C 0004 0001             		move.b	#4,1(a0)
0000B436 117C 0004 0018             		move.b	#4,$18(a0)
0000B43C 117C 0009 0020             		move.b	#9,$20(a0)
0000B442 117C 0010 0019             		move.b	#$10,$19(a0)
0000B448 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000B44E 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000B454                            
0000B454                            Obj2B_ChgSpeed:				; XREF: Obj2B_Index
0000B454 43F9 0000 0000             		lea	(Ani_obj2B).l,a1
0000B45A 6100 FC3E                  		bsr.w	AnimateSprite
0000B45E 6100 0000                  		bsr.w	SpeedToPos
0000B462 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce speed
0000B468 3028 0030                  		move.w	$30(a0),d0
0000B46C B068 000C                  		cmp.w	$C(a0),d0
0000B470 6400                       		bcc.s	Obj2B_ChgAni
0000B472 3140 000C                  		move.w	d0,$C(a0)
0000B476 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000B47C                            
0000B47C                            Obj2B_ChgAni:
0000B47C 117C 0001 001C             		move.b	#1,$1C(a0)	; use fast animation
0000B482 0440 00C0                  		subi.w	#$C0,d0
0000B486 B068 000C                  		cmp.w	$C(a0),d0
0000B48A 6400                       		bcc.s	locret_ABB6
0000B48C 117C 0000 001C             		move.b	#0,$1C(a0)	; use slow animation
0000B492 4A68 0012                  		tst.w	$12(a0)		; is Chopper at	its highest point?
0000B496 6B00                       		bmi.s	locret_ABB6	; if not, branch
0000B498 117C 0002 001C             		move.b	#2,$1C(a0)	; use stationary animation
0000B49E                            
0000B49E                            locret_ABB6:
0000B49E 4E75                       		rts	
0000B4A0                            ; ===========================================================================
0000B4A0                            Ani_obj2B:
0000B4A0                            	include "_anim\obj2B.asm"
0000B4A0                            ; ---------------------------------------------------------------------------
0000B4A0                            ; Animation script - Chopper enemy
0000B4A0                            ; ---------------------------------------------------------------------------
0000B4A0 0000                       		dc.w byte_ABBE-Ani_obj2B
0000B4A2 0000                       		dc.w byte_ABC2-Ani_obj2B
0000B4A4 0000                       		dc.w byte_ABC6-Ani_obj2B
0000B4A6 0700 01FF                  byte_ABBE:	dc.b 7,	0, 1, $FF
0000B4AA 0300 01FF                  byte_ABC2:	dc.b 3,	0, 1, $FF
0000B4AE 0700 FF                    byte_ABC6:	dc.b 7,	0, $FF
0000B4B2 00                         		even
0000B4B2 00                         		even
0000B4B2                            
0000B4B2                            ; ---------------------------------------------------------------------------
0000B4B2                            ; Sprite mappings - Chopper enemy (GHZ)
0000B4B2                            ; ---------------------------------------------------------------------------
0000B4B2                            Map_obj2B:
0000B4B2                            	include "_maps\obj2B.asm"
0000B4B2                            Map_1ff1:
0000B4B2 0000                       Map_1ff1_0: 	dc.w Map_1ff1_4-Map_1ff1
0000B4B4 0000                       Map_1ff1_2: 	dc.w Map_1ff1_F-Map_1ff1
0000B4B6 02                         Map_1ff1_4: 	dc.b $2
0000B4B7 E80B 0000 F4               	dc.b $E8, $B, $0, $0, $F4
0000B4BC 0809 000C F4               	dc.b $8, $9, $0, $C, $F4
0000B4C1 02                         Map_1ff1_F: 	dc.b $2
0000B4C2 E80B 0012 F4               	dc.b $E8, $B, $0, $12, $F4
0000B4C7 0809 000C F4               	dc.b $8, $9, $0, $C, $F4
0000B4CC                            	even
0000B4CC                            	even
0000B4CC                            
0000B4CC                            ; ===========================================================================
0000B4CC                            ; ---------------------------------------------------------------------------
0000B4CC                            ; Object 2C - Jaws enemy (LZ)
0000B4CC                            ; ---------------------------------------------------------------------------
0000B4CC                            
0000B4CC                            Obj2C:					; XREF: Obj_Index
0000B4CC 7000                       		moveq	#0,d0
0000B4CE 1028 0024                  		move.b	$24(a0),d0
0000B4D2 323B 0000                  		move.w	Obj2C_Index(pc,d0.w),d1
0000B4D6 4EFB 1000                  		jmp	Obj2C_Index(pc,d1.w)
0000B4DA                            ; ===========================================================================
0000B4DA 0000                       Obj2C_Index:	dc.w Obj2C_Main-Obj2C_Index
0000B4DC 0000                       		dc.w Obj2C_Turn-Obj2C_Index
0000B4DE                            ; ===========================================================================
0000B4DE                            
0000B4DE                            Obj2C_Main:				; XREF: Obj2C_Index
0000B4DE 5428 0024                  		addq.b	#2,$24(a0)
0000B4E2 217C 0000 0000 0004        		move.l	#Map_obj2C,4(a0)
0000B4EA 317C 2486 0002             		move.w	#$2486,2(a0)
0000B4F0 0028 0004 0001             		ori.b	#4,1(a0)
0000B4F6 117C 000A 0020             		move.b	#$A,$20(a0)
0000B4FC 117C 0004 0018             		move.b	#4,$18(a0)
0000B502 117C 0010 0019             		move.b	#$10,$19(a0)
0000B508 7000                       		moveq	#0,d0
0000B50A 1028 0028                  		move.b	$28(a0),d0	; load object subtype number
0000B50E ED48                       		lsl.w	#6,d0		; multiply d0 by 64
0000B510 5340                       		subq.w	#1,d0
0000B512 3140 0030                  		move.w	d0,$30(a0)	; set turn delay time
0000B516 3140 0032                  		move.w	d0,$32(a0)
0000B51A 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move Jaws to the left
0000B520 0828 0000 0022             		btst	#0,$22(a0)	; is Jaws facing left?
0000B526 6700                       		beq.s	Obj2C_Turn	; if yes, branch
0000B528 4468 0010                  		neg.w	$10(a0)		; move Jaws to the right
0000B52C                            
0000B52C                            Obj2C_Turn:				; XREF: Obj2C_Index
0000B52C 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from turn delay time
0000B530 6A00                       		bpl.s	Obj2C_Animate	; if time remains, branch
0000B532 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	turn delay time
0000B538 4468 0010                  		neg.w	$10(a0)		; change speed direction
0000B53C 0868 0000 0022             		bchg	#0,$22(a0)	; change Jaws facing direction
0000B542 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000B548                            
0000B548                            Obj2C_Animate:
0000B548 43F9 0000 0000             		lea	(Ani_obj2C).l,a1
0000B54E 6100 FB4A                  		bsr.w	AnimateSprite
0000B552 6100 0000                  		bsr.w	SpeedToPos
0000B556 6000 0000                  		bra.w	MarkObjGone
0000B55A                            ; ===========================================================================
0000B55A                            Ani_obj2C:
0000B55A                            	include "_anim\obj2C.asm"
0000B55A                            ; ---------------------------------------------------------------------------
0000B55A                            ; Animation script - Jaws enemy
0000B55A                            ; ---------------------------------------------------------------------------
0000B55A 0000                       		dc.w byte_AC6A-Ani_obj2C
0000B55C 0700 0102 03FF             byte_AC6A:	dc.b 7,	0, 1, 2, 3, $FF
0000B562                            		even
0000B562                            		even
0000B562                            
0000B562                            ; ---------------------------------------------------------------------------
0000B562                            ; Sprite mappings - Jaws enemy (LZ)
0000B562                            ; ---------------------------------------------------------------------------
0000B562                            Map_obj2C:
0000B562                            	include "_maps\obj2C.asm"
0000B562                            ; ---------------------------------------------------------------------------
0000B562                            ; Sprite mappings - Jaws enemy (LZ)
0000B562                            ; ---------------------------------------------------------------------------
0000B562 0000                       		dc.w byte_AC78-Map_obj2C
0000B564 0000                       		dc.w byte_AC83-Map_obj2C
0000B566 0000                       		dc.w byte_AC8E-Map_obj2C
0000B568 0000                       		dc.w byte_AC99-Map_obj2C
0000B56A 02                         byte_AC78:	dc.b 2
0000B56B F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0000B570 F505 0018 10               		dc.b $F5, 5, 0,	$18, $10
0000B575 02                         byte_AC83:	dc.b 2
0000B576 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0000B57B F505 001C 10               		dc.b $F5, 5, 0,	$1C, $10
0000B580 02                         byte_AC8E:	dc.b 2
0000B581 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0000B586 F505 1018 10               		dc.b $F5, 5, $10, $18, $10
0000B58B 02                         byte_AC99:	dc.b 2
0000B58C F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0000B591 F505 101C 10               		dc.b $F5, 5, $10, $1C, $10
0000B596                            		even
0000B596                            		even
0000B596                            
0000B596                            ; ===========================================================================
0000B596                            ; ---------------------------------------------------------------------------
0000B596                            ; Object 2D - Burrobot enemy (LZ)
0000B596                            ; ---------------------------------------------------------------------------
0000B596                            
0000B596                            Obj2D:					; XREF: Obj_Index
0000B596 7000                       		moveq	#0,d0
0000B598 1028 0024                  		move.b	$24(a0),d0
0000B59C 323B 0000                  		move.w	Obj2D_Index(pc,d0.w),d1
0000B5A0 4EFB 1000                  		jmp	Obj2D_Index(pc,d1.w)
0000B5A4                            ; ===========================================================================
0000B5A4 0000                       Obj2D_Index:	dc.w Obj2D_Main-Obj2D_Index
0000B5A6 0000                       		dc.w Obj2D_Action-Obj2D_Index
0000B5A8                            ; ===========================================================================
0000B5A8                            
0000B5A8                            Obj2D_Main:				; XREF: Obj2D_Index
0000B5A8 5428 0024                  		addq.b	#2,$24(a0)
0000B5AC 117C 0013 0016             		move.b	#$13,$16(a0)
0000B5B2 117C 0008 0017             		move.b	#8,$17(a0)
0000B5B8 217C 0000 0000 0004        		move.l	#Map_obj2D,4(a0)
0000B5C0 317C 04A6 0002             		move.w	#$4A6,2(a0)
0000B5C6 0028 0004 0001             		ori.b	#4,1(a0)
0000B5CC 117C 0004 0018             		move.b	#4,$18(a0)
0000B5D2 117C 0005 0020             		move.b	#5,$20(a0)
0000B5D8 117C 000C 0019             		move.b	#$C,$19(a0)
0000B5DE 5C28 0025                  		addq.b	#6,$25(a0)	; run "Obj2D_ChkSonic" routine
0000B5E2 117C 0002 001C             		move.b	#2,$1C(a0)
0000B5E8                            
0000B5E8                            Obj2D_Action:				; XREF: Obj2D_Index
0000B5E8 7000                       		moveq	#0,d0
0000B5EA 1028 0025                  		move.b	$25(a0),d0
0000B5EE 323B 0000                  		move.w	Obj2D_Index2(pc,d0.w),d1
0000B5F2 4EBB 1000                  		jsr	Obj2D_Index2(pc,d1.w)
0000B5F6 43F9 0000 0000             		lea	(Ani_obj2D).l,a1
0000B5FC 6100 FA9C                  		bsr.w	AnimateSprite
0000B600 6000 0000                  		bra.w	MarkObjGone
0000B604                            ; ===========================================================================
0000B604 0000                       Obj2D_Index2:	dc.w Obj2D_ChgDir-Obj2D_Index2
0000B606 0000                       		dc.w Obj2D_Move-Obj2D_Index2
0000B608 0000                       		dc.w Obj2D_Jump-Obj2D_Index2
0000B60A 0000                       		dc.w Obj2D_ChkSonic-Obj2D_Index2
0000B60C                            ; ===========================================================================
0000B60C                            
0000B60C                            Obj2D_ChgDir:				; XREF: Obj2D_Index2
0000B60C 5368 0030                  		subq.w	#1,$30(a0)
0000B610 6A00                       		bpl.s	locret_AD42
0000B612 5428 0025                  		addq.b	#2,$25(a0)
0000B616 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000B61C 317C 0080 0010             		move.w	#$80,$10(a0)
0000B622 117C 0001 001C             		move.b	#1,$1C(a0)
0000B628 0868 0000 0022             		bchg	#0,$22(a0)	; change direction the Burrobot	is facing
0000B62E 6700                       		beq.s	locret_AD42
0000B630 4468 0010                  		neg.w	$10(a0)		; change direction the Burrobot	is moving
0000B634                            
0000B634                            locret_AD42:
0000B634 4E75                       		rts	
0000B636                            ; ===========================================================================
0000B636                            
0000B636                            Obj2D_Move:				; XREF: Obj2D_Index2
0000B636 5368 0030                  		subq.w	#1,$30(a0)
0000B63A 6B00                       		bmi.s	loc_AD84
0000B63C 6100 0000                  		bsr.w	SpeedToPos
0000B640 0868 0000 0032             		bchg	#0,$32(a0)
0000B646 6600                       		bne.s	loc_AD78
0000B648 3628 0008                  		move.w	8(a0),d3
0000B64C 0643 000C                  		addi.w	#$C,d3
0000B650 0828 0000 0022             		btst	#0,$22(a0)
0000B656 6600                       		bne.s	loc_AD6A
0000B658 0443 0018                  		subi.w	#$18,d3
0000B65C                            
0000B65C                            loc_AD6A:
0000B65C 4EB9 0000 0000             		jsr	ObjHitFloor2
0000B662 0C41 000C                  		cmpi.w	#$C,d1
0000B666 6C00                       		bge.s	loc_AD84
0000B668 4E75                       		rts	
0000B66A                            ; ===========================================================================
0000B66A                            
0000B66A                            loc_AD78:				; XREF: Obj2D_Move
0000B66A 4EB9 0000 0000             		jsr	ObjHitFloor
0000B670 D368 000C                  		add.w	d1,$C(a0)
0000B674 4E75                       		rts	
0000B676                            ; ===========================================================================
0000B676                            
0000B676                            loc_AD84:				; XREF: Obj2D_Move
0000B676 0838 0002 FE0F             		btst	#2,($FFFFFE0F).w
0000B67C 6700                       		beq.s	loc_ADA4
0000B67E 5528 0025                  		subq.b	#2,$25(a0)
0000B682 317C 003B 0030             		move.w	#$3B,$30(a0)
0000B688 317C 0000 0010             		move.w	#0,$10(a0)
0000B68E 117C 0000 001C             		move.b	#0,$1C(a0)
0000B694 4E75                       		rts	
0000B696                            ; ===========================================================================
0000B696                            
0000B696                            loc_ADA4:
0000B696 5428 0025                  		addq.b	#2,$25(a0)
0000B69A 317C FC00 0012             		move.w	#-$400,$12(a0)
0000B6A0 117C 0002 001C             		move.b	#2,$1C(a0)
0000B6A6 4E75                       		rts	
0000B6A8                            ; ===========================================================================
0000B6A8                            
0000B6A8                            Obj2D_Jump:				; XREF: Obj2D_Index2
0000B6A8 6100 0000                  		bsr.w	SpeedToPos
0000B6AC 0668 0018 0012             		addi.w	#$18,$12(a0)
0000B6B2 6B00                       		bmi.s	locret_ADF0
0000B6B4 117C 0003 001C             		move.b	#3,$1C(a0)
0000B6BA 4EB9 0000 0000             		jsr	ObjHitFloor
0000B6C0 4A41                       		tst.w	d1
0000B6C2 6A00                       		bpl.s	locret_ADF0
0000B6C4 D368 000C                  		add.w	d1,$C(a0)
0000B6C8 317C 0000 0012             		move.w	#0,$12(a0)
0000B6CE 117C 0001 001C             		move.b	#1,$1C(a0)
0000B6D4 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000B6DA 5528 0025                  		subq.b	#2,$25(a0)
0000B6DE 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000B6E2                            
0000B6E2                            locret_ADF0:
0000B6E2 4E75                       		rts	
0000B6E4                            ; ===========================================================================
0000B6E4                            
0000B6E4                            Obj2D_ChkSonic:				; XREF: Obj2D_Index2
0000B6E4 343C 0060                  		move.w	#$60,d2
0000B6E8 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000B6EC 6400                       		bcc.s	locret_AE20
0000B6EE 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000B6F2 9068 000C                  		sub.w	$C(a0),d0
0000B6F6 6400                       		bcc.s	locret_AE20
0000B6F8 0C40 FF80                  		cmpi.w	#-$80,d0
0000B6FC 6500                       		bcs.s	locret_AE20
0000B6FE 4A78 FE08                  		tst.w	($FFFFFE08).w
0000B702 6600                       		bne.s	locret_AE20
0000B704 5528 0025                  		subq.b	#2,$25(a0)
0000B708 3141 0010                  		move.w	d1,$10(a0)
0000B70C 317C FC00 0012             		move.w	#-$400,$12(a0)
0000B712                            
0000B712                            locret_AE20:
0000B712 4E75                       		rts	
0000B714                            
0000B714                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B714                            
0000B714                            
0000B714                            Obj2D_ChkSonic2:			; XREF: Obj2D_ChkSonic
0000B714 323C 0080                  		move.w	#$80,d1
0000B718 08E8 0000 0022             		bset	#0,$22(a0)
0000B71E 3038 D008                  		move.w	($FFFFD008).w,d0
0000B722 9068 0008                  		sub.w	8(a0),d0
0000B726 6400                       		bcc.s	loc_AE40
0000B728 4440                       		neg.w	d0
0000B72A 4441                       		neg.w	d1
0000B72C 08A8 0000 0022             		bclr	#0,$22(a0)
0000B732                            
0000B732                            loc_AE40:
0000B732 B042                       		cmp.w	d2,d0
0000B734 4E75                       		rts	
0000B736                            ; End of function Obj2D_ChkSonic2
0000B736                            
0000B736                            ; ===========================================================================
0000B736                            Ani_obj2D:
0000B736                            	include "_anim\obj2D.asm"
0000B736                            ; ---------------------------------------------------------------------------
0000B736                            ; Animation script - Burrobot enemy but craig
0000B736                            ; ---------------------------------------------------------------------------
0000B736 0000                       		dc.w byte_AE4C-Ani_obj2D
0000B738 0000                       		dc.w byte_AE50-Ani_obj2D
0000B73A 0000                       		dc.w byte_AE54-Ani_obj2D
0000B73C 0000                       		dc.w byte_AE58-Ani_obj2D
0000B73E 0300 FF                    byte_AE4C:	dc.b 3,	0, $FF ; wait
0000B741 0300 01FF                  byte_AE50:	dc.b 3,	0, 1, $FF ; waddle
0000B745 0100 0102 0304 0506 0708+  byte_AE54:	dc.b 1,	0, 1, 2, 3, 4, 5, 6, 7, 8, 3, 9, $A, $FF ; speen
0000B753 0304 FF                    byte_AE58:	dc.b 3,	4, $FF
0000B756                            		even
0000B756                            		even
0000B756                            
0000B756                            ; ---------------------------------------------------------------------------
0000B756                            ; Sprite mappings - Burrobot enemy (LZ)
0000B756                            ; ---------------------------------------------------------------------------
0000B756                            Map_obj2D:
0000B756                            	include "_maps\obj2D.asm"
0000B756                            Map_e3a3:
0000B756 0000                       Map_e3a3_0: 	dc.w Map_e3a3_16-Map_e3a3
0000B758 0000                       Map_e3a3_2: 	dc.w Map_e3a3_21-Map_e3a3
0000B75A 0000                       Map_e3a3_4: 	dc.w Map_e3a3_2C-Map_e3a3
0000B75C 0000                       Map_e3a3_6: 	dc.w Map_e3a3_37-Map_e3a3
0000B75E 0000                       Map_e3a3_8: 	dc.w Map_e3a3_42-Map_e3a3
0000B760 0000                       Map_e3a3_A: 	dc.w Map_e3a3_4D-Map_e3a3
0000B762 0000                       Map_e3a3_C: 	dc.w Map_e3a3_58-Map_e3a3
0000B764 0000                       Map_e3a3_E: 	dc.w Map_e3a3_63-Map_e3a3
0000B766 0000                       Map_e3a3_10: 	dc.w Map_e3a3_6E-Map_e3a3
0000B768 0000                       Map_e3a3_12: 	dc.w Map_e3a3_79-Map_e3a3
0000B76A 0000                       Map_e3a3_14: 	dc.w Map_e3a3_84-Map_e3a3
0000B76C 02                         Map_e3a3_16: 	dc.b $2
0000B76D EC0B 0800 F4               	dc.b $EC, $B, $8, $0, $F4
0000B772 0C08 080C F4               	dc.b $C, $8, $8, $C, $F4
0000B777 02                         Map_e3a3_21: 	dc.b $2
0000B778 EC07 080F F8               	dc.b $EC, $7, $8, $F, $F8
0000B77D 0C04 0817 F8               	dc.b $C, $4, $8, $17, $F8
0000B782 02                         Map_e3a3_2C: 	dc.b $2
0000B783 EC07 0819 F8               	dc.b $EC, $7, $8, $19, $F8
0000B788 0C04 0821 F8               	dc.b $C, $4, $8, $21, $F8
0000B78D 02                         Map_e3a3_37: 	dc.b $2
0000B78E EC02 0823 FC               	dc.b $EC, $2, $8, $23, $FC
0000B793 FC02 1823 FC               	dc.b $FC, $2, $18, $23, $FC
0000B798 02                         Map_e3a3_42: 	dc.b $2
0000B799 EC06 0826 F8               	dc.b $EC, $6, $8, $26, $F8
0000B79E FC06 1826 F8               	dc.b $FC, $6, $18, $26, $F8
0000B7A3 02                         Map_e3a3_4D: 	dc.b $2
0000B7A4 EC06 082C F8               	dc.b $EC, $6, $8, $2C, $F8
0000B7A9 FC06 182C F8               	dc.b $FC, $6, $18, $2C, $F8
0000B7AE 02                         Map_e3a3_58: 	dc.b $2
0000B7AF EC0A 0832 F4               	dc.b $EC, $A, $8, $32, $F4
0000B7B4 FC0A 1832 F4               	dc.b $FC, $A, $18, $32, $F4
0000B7B9 02                         Map_e3a3_63: 	dc.b $2
0000B7BA EC06 002C F8               	dc.b $EC, $6, $0, $2C, $F8
0000B7BF FC06 102C F8               	dc.b $FC, $6, $10, $2C, $F8
0000B7C4 02                         Map_e3a3_6E: 	dc.b $2
0000B7C5 EC06 0026 F8               	dc.b $EC, $6, $0, $26, $F8
0000B7CA FC06 1026 F8               	dc.b $FC, $6, $10, $26, $F8
0000B7CF 02                         Map_e3a3_79: 	dc.b $2
0000B7D0 EC07 0019 F8               	dc.b $EC, $7, $0, $19, $F8
0000B7D5 0C04 0021 F8               	dc.b $C, $4, $0, $21, $F8
0000B7DA 02                         Map_e3a3_84: 	dc.b $2
0000B7DB EC07 000F F8               	dc.b $EC, $7, $0, $F, $F8
0000B7E0 0C04 0017 F8               	dc.b $C, $4, $0, $17, $F8
0000B7E6 00                         	even
0000B7E6 00                         	even
0000B7E6                            
0000B7E6                            ; ===========================================================================
0000B7E6                            ; ---------------------------------------------------------------------------
0000B7E6                            ; Object 2F - large moving platforms (MZ)
0000B7E6                            ; ---------------------------------------------------------------------------
0000B7E6                            
0000B7E6                            Obj2F:					; XREF: Obj_Index
0000B7E6 7000                       		moveq	#0,d0
0000B7E8 1028 0024                  		move.b	$24(a0),d0
0000B7EC 323B 0000                  		move.w	Obj2F_Index(pc,d0.w),d1
0000B7F0 4EFB 1000                  		jmp	Obj2F_Index(pc,d1.w)
0000B7F4                            ; ===========================================================================
0000B7F4 0000                       Obj2F_Index:	dc.w Obj2F_Main-Obj2F_Index
0000B7F6 0000                       		dc.w Obj2F_Action-Obj2F_Index
0000B7F8                            
0000B7F8 0000                       Obj2F_Data:	dc.w Obj2F_Data1-Obj2F_Data 	; collision angle data
0000B7FA 0040                       		dc.b 0,	$40			; frame	number,	platform width
0000B7FC 0000                       		dc.w Obj2F_Data3-Obj2F_Data
0000B7FE 0140                       		dc.b 1,	$40
0000B800 0000                       		dc.w Obj2F_Data2-Obj2F_Data
0000B802 0220                       		dc.b 2,	$20
0000B804                            ; ===========================================================================
0000B804                            
0000B804                            Obj2F_Main:				; XREF: Obj2F_Index
0000B804 5428 0024                  		addq.b	#2,$24(a0)
0000B808 217C 0000 0000 0004        		move.l	#Map_obj2F,4(a0)
0000B810 317C C000 0002             		move.w	#$C000,2(a0)
0000B816 117C 0004 0001             		move.b	#4,1(a0)
0000B81C 117C 0005 0018             		move.b	#5,$18(a0)
0000B822 3168 000C 002C             		move.w	$C(a0),$2C(a0)
0000B828 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000B82E 7000                       		moveq	#0,d0
0000B830 1028 0028                  		move.b	$28(a0),d0
0000B834 E448                       		lsr.w	#2,d0
0000B836 0240 001C                  		andi.w	#$1C,d0
0000B83A 43FB 00BC                  		lea	Obj2F_Data(pc,d0.w),a1
0000B83E 3019                       		move.w	(a1)+,d0
0000B840 45FB 00B6                  		lea	Obj2F_Data(pc,d0.w),a2
0000B844 214A 0030                  		move.l	a2,$30(a0)
0000B848 1159 001A                  		move.b	(a1)+,$1A(a0)
0000B84C 1151 0019                  		move.b	(a1),$19(a0)
0000B850 0228 000F 0028             		andi.b	#$F,$28(a0)
0000B856 117C 0040 0016             		move.b	#$40,$16(a0)
0000B85C 08E8 0004 0001             		bset	#4,1(a0)
0000B862                            
0000B862                            Obj2F_Action:				; XREF: Obj2F_Index
0000B862 6100 0000                  		bsr.w	Obj2F_Types
0000B866 4A28 0025                  		tst.b	$25(a0)
0000B86A 6700                       		beq.s	Obj2F_Solid
0000B86C 7200                       		moveq	#0,d1
0000B86E 1228 0019                  		move.b	$19(a0),d1
0000B872 0641 000B                  		addi.w	#$B,d1
0000B876 6100 C552                  		bsr.w	ExitPlatform
0000B87A 0829 0003 0022             		btst	#3,$22(a1)
0000B880 6600 0000                  		bne.w	Obj2F_Slope
0000B884 4228 0025                  		clr.b	$25(a0)
0000B888 6000                       		bra.s	Obj2F_Display
0000B88A                            ; ===========================================================================
0000B88A                            
0000B88A                            Obj2F_Slope:				; XREF: Obj2F_Action
0000B88A 7200                       		moveq	#0,d1
0000B88C 1228 0019                  		move.b	$19(a0),d1
0000B890 0641 000B                  		addi.w	#$B,d1
0000B894 2468 0030                  		movea.l	$30(a0),a2
0000B898 3428 0008                  		move.w	8(a0),d2
0000B89C 6100 D51C                  		bsr.w	SlopeObject2
0000B8A0 6000                       		bra.s	Obj2F_Display
0000B8A2                            ; ===========================================================================
0000B8A2                            
0000B8A2                            Obj2F_Solid:				; XREF: Obj2F_Action
0000B8A2 7200                       		moveq	#0,d1
0000B8A4 1228 0019                  		move.b	$19(a0),d1
0000B8A8 0641 000B                  		addi.w	#$B,d1
0000B8AC 343C 0020                  		move.w	#$20,d2
0000B8B0 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000B8B6 6600                       		bne.s	loc_AF8E
0000B8B8 343C 0030                  		move.w	#$30,d2
0000B8BC                            
0000B8BC                            loc_AF8E:
0000B8BC 2468 0030                  		movea.l	$30(a0),a2
0000B8C0 6100 0000                  		bsr.w	SolidObject2F
0000B8C4                            
0000B8C4                            Obj2F_Display:				; XREF: Obj2F_Action
0000B8C4 6100 0000                  		bsr.w	DisplaySprite
0000B8C8 6000 0000                  		bra.w	Obj2F_ChkDel
0000B8CC                            
0000B8CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B8CC                            
0000B8CC                            
0000B8CC                            Obj2F_Types:				; XREF: Obj2F_Action
0000B8CC 7000                       		moveq	#0,d0
0000B8CE 1028 0028                  		move.b	$28(a0),d0
0000B8D2 0240 0007                  		andi.w	#7,d0
0000B8D6 D040                       		add.w	d0,d0
0000B8D8 323B 0000                  		move.w	Obj2F_TypeIndex(pc,d0.w),d1
0000B8DC 4EFB 1000                  		jmp	Obj2F_TypeIndex(pc,d1.w)
0000B8E0                            ; End of function Obj2F_Types
0000B8E0                            
0000B8E0                            ; ===========================================================================
0000B8E0 0000                       Obj2F_TypeIndex:dc.w Obj2F_Type00-Obj2F_TypeIndex
0000B8E2 0000                       		dc.w Obj2F_Type01-Obj2F_TypeIndex
0000B8E4 0000                       		dc.w Obj2F_Type02-Obj2F_TypeIndex
0000B8E6 0000                       		dc.w Obj2F_Type03-Obj2F_TypeIndex
0000B8E8 0000                       		dc.w Obj2F_Type04-Obj2F_TypeIndex
0000B8EA 0000                       		dc.w Obj2F_Type05-Obj2F_TypeIndex
0000B8EC                            ; ===========================================================================
0000B8EC                            
0000B8EC                            Obj2F_Type00:				; XREF: Obj2F_TypeIndex
0000B8EC 4E75                       		rts			; type 00 platform doesn't move
0000B8EE                            ; ===========================================================================
0000B8EE                            
0000B8EE                            Obj2F_Type01:				; XREF: Obj2F_TypeIndex
0000B8EE 1038 FE60                  		move.b	($FFFFFE60).w,d0
0000B8F2 323C 0020                  		move.w	#$20,d1
0000B8F6 6000                       		bra.s	Obj2F_Move
0000B8F8                            ; ===========================================================================
0000B8F8                            
0000B8F8                            Obj2F_Type02:				; XREF: Obj2F_TypeIndex
0000B8F8 1038 FE64                  		move.b	($FFFFFE64).w,d0
0000B8FC 323C 0030                  		move.w	#$30,d1
0000B900 6000                       		bra.s	Obj2F_Move
0000B902                            ; ===========================================================================
0000B902                            
0000B902                            Obj2F_Type03:				; XREF: Obj2F_TypeIndex
0000B902 1038 FE68                  		move.b	($FFFFFE68).w,d0
0000B906 323C 0040                  		move.w	#$40,d1
0000B90A 6000                       		bra.s	Obj2F_Move
0000B90C                            ; ===========================================================================
0000B90C                            
0000B90C                            Obj2F_Type04:				; XREF: Obj2F_TypeIndex
0000B90C 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0000B910 323C 0060                  		move.w	#$60,d1
0000B914                            
0000B914                            Obj2F_Move:
0000B914 0828 0003 0028             		btst	#3,$28(a0)
0000B91A 6700                       		beq.s	loc_AFF2
0000B91C 4440                       		neg.w	d0
0000B91E D041                       		add.w	d1,d0
0000B920                            
0000B920                            loc_AFF2:
0000B920 3228 002C                  		move.w	$2C(a0),d1
0000B924 9240                       		sub.w	d0,d1
0000B926 3141 000C                  		move.w	d1,$C(a0)	; update position on y-axis
0000B92A 4E75                       		rts	
0000B92C                            ; ===========================================================================
0000B92C                            
0000B92C                            Obj2F_Type05:				; XREF: Obj2F_TypeIndex
0000B92C 1028 0034                  		move.b	$34(a0),d0
0000B930 4A28 0025                  		tst.b	$25(a0)
0000B934 6600                       		bne.s	loc_B010
0000B936 5500                       		subq.b	#2,d0
0000B938 6400                       		bcc.s	loc_B01C
0000B93A 7000                       		moveq	#0,d0
0000B93C 6000                       		bra.s	loc_B01C
0000B93E                            ; ===========================================================================
0000B93E                            
0000B93E                            loc_B010:
0000B93E 5800                       		addq.b	#4,d0
0000B940 0C00 0040                  		cmpi.b	#$40,d0
0000B944 6500                       		bcs.s	loc_B01C
0000B946 103C 0040                  		move.b	#$40,d0
0000B94A                            
0000B94A                            loc_B01C:
0000B94A 1140 0034                  		move.b	d0,$34(a0)
0000B94E 4EB9 0000 2D34             		jsr	(CalcSine).l
0000B954 E848                       		lsr.w	#4,d0
0000B956 3200                       		move.w	d0,d1
0000B958 D068 002C                  		add.w	$2C(a0),d0
0000B95C 3140 000C                  		move.w	d0,$C(a0)
0000B960 0C28 0020 0034             		cmpi.b	#$20,$34(a0)
0000B966 6600                       		bne.s	loc_B07A
0000B968 4A28 0035                  		tst.b	$35(a0)
0000B96C 6600                       		bne.s	loc_B07A
0000B96E 117C 0001 0035             		move.b	#1,$35(a0)
0000B974 6100 0000                  		bsr.w	SingleObjLoad2
0000B978 6600                       		bne.s	loc_B07A
0000B97A 12BC 0035                  		move.b	#$35,0(a1)	; load sitting flame object
0000B97E 3368 0008 0008             		move.w	8(a0),8(a1)
0000B984 3368 002C 002C             		move.w	$2C(a0),$2C(a1)
0000B98A 5069 002C                  		addq.w	#8,$2C(a1)
0000B98E 5769 002C                  		subq.w	#3,$2C(a1)
0000B992 0469 0040 0008             		subi.w	#$40,8(a1)
0000B998 2368 0030 0030             		move.l	$30(a0),$30(a1)
0000B99E 2348 0038                  		move.l	a0,$38(a1)
0000B9A2 2448                       		movea.l	a0,a2
0000B9A4 6100                       		bsr.s	sub_B09C
0000B9A6                            
0000B9A6                            loc_B07A:
0000B9A6 7400                       		moveq	#0,d2
0000B9A8 45E8 0036                  		lea	$36(a0),a2
0000B9AC 141A                       		move.b	(a2)+,d2
0000B9AE 5302                       		subq.b	#1,d2
0000B9B0 6500                       		bcs.s	locret_B09A
0000B9B2                            
0000B9B2                            loc_B086:
0000B9B2 7000                       		moveq	#0,d0
0000B9B4 101A                       		move.b	(a2)+,d0
0000B9B6 ED48                       		lsl.w	#6,d0
0000B9B8 0640 D000                  		addi.w	#-$3000,d0
0000B9BC 3240                       		movea.w	d0,a1
0000B9BE 3341 003C                  		move.w	d1,$3C(a1)
0000B9C2 51CA FFEE                  		dbf	d2,loc_B086
0000B9C6                            
0000B9C6                            locret_B09A:
0000B9C6 4E75                       		rts	
0000B9C8                            
0000B9C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B9C8                            
0000B9C8                            
0000B9C8                            sub_B09C:
0000B9C8 45EA 0036                  		lea	$36(a2),a2
0000B9CC 7000                       		moveq	#0,d0
0000B9CE 1012                       		move.b	(a2),d0
0000B9D0 5212                       		addq.b	#1,(a2)
0000B9D2 45F2 0001                  		lea	1(a2,d0.w),a2
0000B9D6 3009                       		move.w	a1,d0
0000B9D8 0440 D000                  		subi.w	#-$3000,d0
0000B9DC EC48                       		lsr.w	#6,d0
0000B9DE 0240 007F                  		andi.w	#$7F,d0
0000B9E2 1480                       		move.b	d0,(a2)
0000B9E4 4E75                       		rts	
0000B9E6                            ; End of function sub_B09C
0000B9E6                            
0000B9E6                            ; ===========================================================================
0000B9E6                            
0000B9E6                            Obj2F_ChkDel:				; XREF: Obj2F_Display
0000B9E6 4A28 0035                  		tst.b	$35(a0)
0000B9EA 6700                       		beq.s	loc_B0C6
0000B9EC 4A28 0001                  		tst.b	1(a0)
0000B9F0 6A00                       		bpl.s	Obj2F_DelFlames
0000B9F2                            
0000B9F2                            loc_B0C6:
0000B9F2 3028 002A                  		move.w	$2A(a0),d0
0000B9F6 0240 FF80                  		andi.w	#$FF80,d0
0000B9FA 3238 F700                  		move.w	($FFFFF700).w,d1
0000B9FE 0441 0080                  		subi.w	#$80,d1
0000BA02 0241 FF80                  		andi.w	#$FF80,d1
0000BA06 9041                       		sub.w	d1,d0
0000BA08 0C40 0280                  		cmpi.w	#$280,d0
0000BA0C 6200 0000                  		bhi.w	DeleteObject
0000BA10 4E75                       		rts	
0000BA12                            ; ===========================================================================
0000BA12                            
0000BA12                            Obj2F_DelFlames:			; XREF: Obj2F_ChkDel
0000BA12 7400                       		moveq	#0,d2
0000BA14                            
0000BA14                            loc_B0E8:
0000BA14 45E8 0036                  		lea	$36(a0),a2
0000BA18 1412                       		move.b	(a2),d2
0000BA1A 421A                       		clr.b	(a2)+
0000BA1C 5302                       		subq.b	#1,d2
0000BA1E 6500                       		bcs.s	locret_B116
0000BA20                            
0000BA20                            loc_B0F4:
0000BA20 7000                       		moveq	#0,d0
0000BA22 1012                       		move.b	(a2),d0
0000BA24 421A                       		clr.b	(a2)+
0000BA26 ED48                       		lsl.w	#6,d0
0000BA28 0640 D000                  		addi.w	#-$3000,d0
0000BA2C 3240                       		movea.w	d0,a1
0000BA2E 6100 0000                  		bsr.w	DeleteObject2
0000BA32 51CA FFEC                  		dbf	d2,loc_B0F4
0000BA36 117C 0000 0035             		move.b	#0,$35(a0)
0000BA3C 117C 0000 0034             		move.b	#0,$34(a0)
0000BA42                            
0000BA42                            locret_B116:
0000BA42 4E75                       		rts	
0000BA44                            ; ===========================================================================
0000BA44                            ; ---------------------------------------------------------------------------
0000BA44                            ; Collision data for large moving platforms (MZ)
0000BA44                            ; ---------------------------------------------------------------------------
0000BA44                            Obj2F_Data1:	incbin	misc\mz_pfm1.bin
0000BA90                            		even
0000BA90                            Obj2F_Data2:	incbin	misc\mz_pfm2.bin
0000BABC                            		even
0000BABC                            Obj2F_Data3:	incbin	misc\mz_pfm3.bin
0000BB08                            		even
0000BB08                            ; ===========================================================================
0000BB08                            ; ---------------------------------------------------------------------------
0000BB08                            ; Object 35 - fireball that sits on the	floor (MZ)
0000BB08                            ; (appears when	you walk on sinking platforms)
0000BB08                            ; ---------------------------------------------------------------------------
0000BB08                            
0000BB08                            Obj35:					; XREF: Obj_Index
0000BB08 7000                       		moveq	#0,d0
0000BB0A 1028 0024                  		move.b	$24(a0),d0
0000BB0E 323B 0000                  		move.w	Obj35_Index(pc,d0.w),d1
0000BB12 4EFB 1000                  		jmp	Obj35_Index(pc,d1.w)
0000BB16                            ; ===========================================================================
0000BB16 0000                       Obj35_Index:	dc.w Obj35_Main-Obj35_Index
0000BB18 0000                       		dc.w loc_B238-Obj35_Index
0000BB1A 0000                       		dc.w Obj35_Move-Obj35_Index
0000BB1C                            ; ===========================================================================
0000BB1C                            
0000BB1C                            Obj35_Main:				; XREF: Obj35_Index
0000BB1C 5428 0024                  		addq.b	#2,$24(a0)
0000BB20 217C 0000 0000 0004        		move.l	#Map_obj14,4(a0)
0000BB28 317C 0345 0002             		move.w	#$345,2(a0)
0000BB2E 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000BB34 117C 0004 0001             		move.b	#4,1(a0)
0000BB3A 117C 0001 0018             		move.b	#1,$18(a0)
0000BB40 117C 008B 0020             		move.b	#$8B,$20(a0)
0000BB46 117C 0008 0019             		move.b	#8,$19(a0)
0000BB4C 303C 00C8                  		move.w	#$C8,d0
0000BB50 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play flame sound
0000BB56 4A28 0028                  		tst.b	$28(a0)
0000BB5A 6700                       		beq.s	loc_B238
0000BB5C 5428 0024                  		addq.b	#2,$24(a0)
0000BB60 6000 0000                  		bra.w	Obj35_Move
0000BB64                            ; ===========================================================================
0000BB64                            
0000BB64                            loc_B238:				; XREF: Obj35_Index
0000BB64 2268 0030                  		movea.l	$30(a0),a1
0000BB68 3228 0008                  		move.w	8(a0),d1
0000BB6C 9268 002A                  		sub.w	$2A(a0),d1
0000BB70 0641 000C                  		addi.w	#$C,d1
0000BB74 3001                       		move.w	d1,d0
0000BB76 E248                       		lsr.w	#1,d0
0000BB78 1031 0000                  		move.b	(a1,d0.w),d0
0000BB7C 4440                       		neg.w	d0
0000BB7E D068 002C                  		add.w	$2C(a0),d0
0000BB82 3400                       		move.w	d0,d2
0000BB84 D068 003C                  		add.w	$3C(a0),d0
0000BB88 3140 000C                  		move.w	d0,$C(a0)
0000BB8C 0C41 0084                  		cmpi.w	#$84,d1
0000BB90 6400                       		bcc.s	loc_B2B0
0000BB92 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000BB9A 0C41 0080                  		cmpi.w	#$80,d1
0000BB9E 6400                       		bcc.s	loc_B2B0
0000BBA0 2028 0008                  		move.l	8(a0),d0
0000BBA4 0680 0008 0000             		addi.l	#$80000,d0
0000BBAA 0280 000F FFFF             		andi.l	#$FFFFF,d0
0000BBB0 6600                       		bne.s	loc_B2B0
0000BBB2 6100 0000                  		bsr.w	SingleObjLoad2
0000BBB6 6600                       		bne.s	loc_B2B0
0000BBB8 12BC 0035                  		move.b	#$35,0(a1)
0000BBBC 3368 0008 0008             		move.w	8(a0),8(a1)
0000BBC2 3342 002C                  		move.w	d2,$2C(a1)
0000BBC6 3368 003C 003C             		move.w	$3C(a0),$3C(a1)
0000BBCC 137C 0001 0028             		move.b	#1,$28(a1)
0000BBD2 2468 0038                  		movea.l	$38(a0),a2
0000BBD6 6100 FDF0                  		bsr.w	sub_B09C
0000BBDA                            
0000BBDA                            loc_B2B0:
0000BBDA 6000                       		bra.s	Obj35_Animate
0000BBDC                            ; ===========================================================================
0000BBDC                            
0000BBDC                            Obj35_Move:				; XREF: Obj35_Index
0000BBDC 3028 002C                  		move.w	$2C(a0),d0
0000BBE0 D068 003C                  		add.w	$3C(a0),d0
0000BBE4 3140 000C                  		move.w	d0,$C(a0)
0000BBE8                            
0000BBE8                            Obj35_Animate:				; XREF: loc_B238
0000BBE8 43F9 0000 0000             		lea	(Ani_obj35).l,a1
0000BBEE 6100 F4AA                  		bsr.w	AnimateSprite
0000BBF2 6000 0000                  		bra.w	DisplaySprite
0000BBF6                            ; ===========================================================================
0000BBF6                            Ani_obj35:
0000BBF6                            	include "_anim\obj35.asm"
0000BBF6                            ; ---------------------------------------------------------------------------
0000BBF6                            ; Animation script - fireball that sits on the	floor (MZ)
0000BBF6                            ; ---------------------------------------------------------------------------
0000BBF6 0000                       		dc.w byte_B2CE-Ani_obj35
0000BBF8 0500 2001 21FF             byte_B2CE:	dc.b 5,	0, $20,	1, $21,	$FF
0000BBFE                            		even
0000BBFE                            		even
0000BBFE                            
0000BBFE                            ; ---------------------------------------------------------------------------
0000BBFE                            ; Sprite mappings - large moving platforms (MZ)
0000BBFE                            ; ---------------------------------------------------------------------------
0000BBFE                            Map_obj2F:
0000BBFE                            	include "_maps\obj2F.asm"
0000BBFE                            ; ---------------------------------------------------------------------------
0000BBFE                            ; Sprite mappings - large moving platforms (MZ)
0000BBFE                            ; ---------------------------------------------------------------------------
0000BBFE 0000                       		dc.w byte_B2DA-Map_obj2F
0000BC00 0000                       		dc.w byte_B31C-Map_obj2F
0000BC02 0000                       		dc.w byte_B34F-Map_obj2F
0000BC04 0D                         byte_B2DA:	dc.b $D
0000BC05 D806 0057 C0               		dc.b $D8, 6, 0,	$57, $C0
0000BC0A F005 0053 C0               		dc.b $F0, 5, 0,	$53, $C0
0000BC0F 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000BC14 D00F 0027 D0               		dc.b $D0, $F, 0, $27, $D0
0000BC19 F00D 0037 D0               		dc.b $F0, $D, 0, $37, $D0
0000BC1E F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000BC23 D00F 0011 F0               		dc.b $D0, $F, 0, $11, $F0
0000BC28 D00F 003F 10               		dc.b $D0, $F, 0, $3F, $10
0000BC2D F00D 004F 10               		dc.b $F0, $D, 0, $4F, $10
0000BC32 F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000BC37 000F 0001 20               		dc.b 0,	$F, 0, 1, $20
0000BC3C D806 0057 30               		dc.b $D8, 6, 0,	$57, $30
0000BC41 F005 0053 30               		dc.b $F0, 5, 0,	$53, $30
0000BC46 0A                         byte_B31C:	dc.b $A
0000BC47 D00F 0027 C0               		dc.b $D0, $F, 0, $27, $C0
0000BC4C F00D 0037 C0               		dc.b $F0, $D, 0, $37, $C0
0000BC51 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000BC56 C00F 0027 E0               		dc.b $C0, $F, 0, $27, $E0
0000BC5B E00D 0037 E0               		dc.b $E0, $D, 0, $37, $E0
0000BC60 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000BC65 C00F 0011 00               		dc.b $C0, $F, 0, $11, 0
0000BC6A E00F 0001 00               		dc.b $E0, $F, 0, 1, 0
0000BC6F C00F 003F 20               		dc.b $C0, $F, 0, $3F, $20
0000BC74 E00D 004F 20               		dc.b $E0, $D, 0, $4F, $20
0000BC79 06                         byte_B34F:	dc.b 6
0000BC7A D00F 0011 E0               		dc.b $D0, $F, 0, $11, $E0
0000BC7F F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000BC84 100F 0001 E0               		dc.b $10, $F, 0, 1, $E0
0000BC89 D00F 0011 00               		dc.b $D0, $F, 0, $11, 0
0000BC8E F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000BC93 100F 0001 00               		dc.b $10, $F, 0, 1, 0
0000BC98                            		even
0000BC98                            		even
0000BC98                            
0000BC98                            ; ---------------------------------------------------------------------------
0000BC98                            ; Sprite mappings - lava balls (MZ, SLZ)
0000BC98                            ; ---------------------------------------------------------------------------
0000BC98                            Map_obj14:
0000BC98                            	include "_maps\obj14.asm"
0000BC98                            ; --------------------------------------------------------------------------------
0000BC98                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000BC98                            ; --------------------------------------------------------------------------------
0000BC98                            
0000BC98                            SME_C6wT7:	
0000BC98 0000 0000                  		dc.w SME_C6wT7_C-SME_C6wT7, SME_C6wT7_12-SME_C6wT7	
0000BC9C 0000 0000                  		dc.w SME_C6wT7_18-SME_C6wT7, SME_C6wT7_23-SME_C6wT7	
0000BCA0 0000 0000                  		dc.w SME_C6wT7_29-SME_C6wT7, SME_C6wT7_2F-SME_C6wT7	
0000BCA4 01                         SME_C6wT7_C:	dc.b 1	
0000BCA5 E80F 0000 F8               		dc.b $E8, $F, 0, 0, $F8	
0000BCAA 01                         SME_C6wT7_12:	dc.b 1	
0000BCAB E80F 0000 F8               		dc.b $E8, $F, 0, 0, $F8	
0000BCB0 02                         SME_C6wT7_18:	dc.b 2	
0000BCB1 EF06 0010 F8               		dc.b $EF, 6, 0, $10, $F8	
0000BCB6 E707 0016 08               		dc.b $E7, 7, 0, $16, 8	
0000BCBB 01                         SME_C6wT7_23:	dc.b 1	
0000BCBC F00F 0000 E8               		dc.b $F0, $F, 0, 0, $E8	
0000BCC1 01                         SME_C6wT7_29:	dc.b 1	
0000BCC2 F00F 0000 E8               		dc.b $F0, $F, 0, 0, $E8	
0000BCC7 01                         SME_C6wT7_2F:	dc.b 1	
0000BCC8 F00B 001E E8               		dc.b $F0, $B, 0, $1E, $E8	
0000BCCE 00                         		even
0000BCCE 00                         		even
0000BCCE                            
0000BCCE                            ; ===========================================================================
0000BCCE                            ; ---------------------------------------------------------------------------
0000BCCE                            ; Object 30 - large green glassy blocks	(MZ)
0000BCCE                            ; ---------------------------------------------------------------------------
0000BCCE                            
0000BCCE                            Obj30:					; XREF: Obj_Index
0000BCCE 7000                       		moveq	#0,d0
0000BCD0 1028 0024                  		move.b	$24(a0),d0
0000BCD4 323B 0000                  		move.w	Obj30_Index(pc,d0.w),d1
0000BCD8 4EBB 1000                  		jsr	Obj30_Index(pc,d1.w)
0000BCDC 3028 0008                  		move.w	8(a0),d0
0000BCE0 0240 FF80                  		andi.w	#$FF80,d0
0000BCE4 3238 F700                  		move.w	($FFFFF700).w,d1
0000BCE8 0441 0080                  		subi.w	#$80,d1
0000BCEC 0241 FF80                  		andi.w	#$FF80,d1
0000BCF0 9041                       		sub.w	d1,d0
0000BCF2 0C40 0280                  		cmpi.w	#$280,d0
0000BCF6 6200 0000                  		bhi.w	Obj30_Delete
0000BCFA 6000 0000                  		bra.w	DisplaySprite
0000BCFE                            ; ===========================================================================
0000BCFE                            
0000BCFE                            Obj30_Delete:
0000BCFE 6000 0000                  		bra.w	DeleteObject
0000BD02                            ; ===========================================================================
0000BD02 0000                       Obj30_Index:	dc.w Obj30_Main-Obj30_Index
0000BD04 0000                       		dc.w Obj30_Block012-Obj30_Index
0000BD06 0000                       		dc.w Obj30_Reflect012-Obj30_Index
0000BD08 0000                       		dc.w Obj30_Block34-Obj30_Index
0000BD0A 0000                       		dc.w Obj30_Reflect34-Obj30_Index
0000BD0C                            
0000BD0C 0200 00                    Obj30_Vars1:	dc.b 2,	0, 0	; routine num, y-axis dist from	origin,	frame num
0000BD0F 0400 01                    		dc.b 4,	0, 1
0000BD12 0600 02                    Obj30_Vars2:	dc.b 6,	0, 2
0000BD15 0800 01                    		dc.b 8,	0, 1
0000BD18                            ; ===========================================================================
0000BD18                            
0000BD18                            Obj30_Main:				; XREF: Obj30_Index
0000BD18 45F9 0000 BD0C             		lea	(Obj30_Vars1).l,a2
0000BD1E 7201                       		moveq	#1,d1
0000BD20 117C 0048 0016             		move.b	#$48,$16(a0)
0000BD26 0C28 0003 0028             		cmpi.b	#3,$28(a0)	; is object type 0/1/2 ?
0000BD2C 6500                       		bcs.s	loc_B40C	; if yes, branch
0000BD2E 45F9 0000 BD12             		lea	(Obj30_Vars2).l,a2
0000BD34 7201                       		moveq	#1,d1
0000BD36 117C 0038 0016             		move.b	#$38,$16(a0)
0000BD3C                            
0000BD3C                            loc_B40C:
0000BD3C 2248                       		movea.l	a0,a1
0000BD3E 6000                       		bra.s	Obj30_Load	; load main object
0000BD40                            ; ===========================================================================
0000BD40                            
0000BD40                            Obj30_Loop:
0000BD40 6100 0000                  		bsr.w	SingleObjLoad2
0000BD44 6600                       		bne.s	loc_B480
0000BD46                            
0000BD46                            Obj30_Load:				; XREF: Obj30_Main
0000BD46 135A 0024                  		move.b	(a2)+,$24(a1)
0000BD4A 12BC 0030                  		move.b	#$30,0(a1)
0000BD4E 3368 0008 0008             		move.w	8(a0),8(a1)
0000BD54 101A                       		move.b	(a2)+,d0
0000BD56 4880                       		ext.w	d0
0000BD58 D068 000C                  		add.w	$C(a0),d0
0000BD5C 3340 000C                  		move.w	d0,$C(a1)
0000BD60 237C 0000 0000 0004        		move.l	#Map_obj30,4(a1)
0000BD68 337C C38E 0002             		move.w	#$C38E,2(a1)
0000BD6E 137C 0004 0001             		move.b	#4,1(a1)
0000BD74 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000BD7A 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000BD80 137C 0020 0019             		move.b	#$20,$19(a1)
0000BD86 137C 0004 0018             		move.b	#4,$18(a1)
0000BD8C 135A 001A                  		move.b	(a2)+,$1A(a1)
0000BD90 2348 003C                  		move.l	a0,$3C(a1)
0000BD94 51C9 FFAA                  		dbf	d1,Obj30_Loop	; repeat once to load "reflection object"
0000BD98                            
0000BD98 137C 0010 0019             		move.b	#$10,$19(a1)
0000BD9E 137C 0003 0018             		move.b	#3,$18(a1)
0000BDA4 5029 0028                  		addq.b	#8,$28(a1)
0000BDA8 0229 000F 0028             		andi.b	#$F,$28(a1)
0000BDAE                            
0000BDAE                            loc_B480:
0000BDAE 317C 0090 0032             		move.w	#$90,$32(a0)
0000BDB4 08E8 0004 0001             		bset	#4,1(a0)
0000BDBA                            
0000BDBA                            Obj30_Block012:				; XREF: Obj30_Index
0000BDBA 6100 0000                  		bsr.w	Obj30_Types
0000BDBE 323C 002B                  		move.w	#$2B,d1
0000BDC2 343C 0048                  		move.w	#$48,d2
0000BDC6 363C 0049                  		move.w	#$49,d3
0000BDCA 3828 0008                  		move.w	8(a0),d4
0000BDCE 6000 0000                  		bra.w	SolidObject
0000BDD2                            ; ===========================================================================
0000BDD2                            
0000BDD2                            Obj30_Reflect012:			; XREF: Obj30_Index
0000BDD2 2268 003C                  		movea.l	$3C(a0),a1
0000BDD6 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000BDDC 6000 0000                  		bra.w	Obj30_Types
0000BDE0                            ; ===========================================================================
0000BDE0                            
0000BDE0                            Obj30_Block34:				; XREF: Obj30_Index
0000BDE0 6100 0000                  		bsr.w	Obj30_Types
0000BDE4 323C 002B                  		move.w	#$2B,d1
0000BDE8 343C 0038                  		move.w	#$38,d2
0000BDEC 363C 0039                  		move.w	#$39,d3
0000BDF0 3828 0008                  		move.w	8(a0),d4
0000BDF4 6000 0000                  		bra.w	SolidObject
0000BDF8                            ; ===========================================================================
0000BDF8                            
0000BDF8                            Obj30_Reflect34:			; XREF: Obj30_Index
0000BDF8 2268 003C                  		movea.l	$3C(a0),a1
0000BDFC 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000BE02 3169 000C 0030             		move.w	$C(a1),$30(a0)
0000BE08 6000 0002                  		bra.w	*+4
0000BE0C                            
0000BE0C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000BE0C                            
0000BE0C                            
0000BE0C                            Obj30_Types:				; XREF: Obj30_Block012; et al
0000BE0C 7000                       		moveq	#0,d0
0000BE0E 1028 0028                  		move.b	$28(a0),d0
0000BE12 0240 0007                  		andi.w	#7,d0
0000BE16 D040                       		add.w	d0,d0
0000BE18 323B 0000                  		move.w	Obj30_TypeIndex(pc,d0.w),d1
0000BE1C 4EFB 1000                  		jmp	Obj30_TypeIndex(pc,d1.w)
0000BE20                            ; End of function Obj30_Types
0000BE20                            
0000BE20                            ; ===========================================================================
0000BE20 0000                       Obj30_TypeIndex:dc.w Obj30_Type00-Obj30_TypeIndex
0000BE22 0000                       		dc.w Obj30_Type01-Obj30_TypeIndex
0000BE24 0000                       		dc.w Obj30_Type02-Obj30_TypeIndex
0000BE26 0000                       		dc.w Obj30_Type03-Obj30_TypeIndex
0000BE28 0000                       		dc.w Obj30_Type04-Obj30_TypeIndex
0000BE2A                            ; ===========================================================================
0000BE2A                            
0000BE2A                            Obj30_Type00:				; XREF: Obj30_TypeIndex
0000BE2A 4E75                       		rts	
0000BE2C                            ; ===========================================================================
0000BE2C                            
0000BE2C                            Obj30_Type01:				; XREF: Obj30_TypeIndex
0000BE2C 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000BE30 323C 0040                  		move.w	#$40,d1
0000BE34 6000                       		bra.s	loc_B514
0000BE36                            ; ===========================================================================
0000BE36                            
0000BE36                            Obj30_Type02:				; XREF: Obj30_TypeIndex
0000BE36 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000BE3A 323C 0040                  		move.w	#$40,d1
0000BE3E 4440                       		neg.w	d0
0000BE40 D041                       		add.w	d1,d0
0000BE42                            
0000BE42                            loc_B514:				; XREF: Obj30_Type01
0000BE42 0828 0003 0028             		btst	#3,$28(a0)
0000BE48 6700                       		beq.s	loc_B526
0000BE4A 4440                       		neg.w	d0
0000BE4C D041                       		add.w	d1,d0
0000BE4E E208                       		lsr.b	#1,d0
0000BE50 0640 0020                  		addi.w	#$20,d0
0000BE54                            
0000BE54                            loc_B526:
0000BE54 6000 0000                  		bra.w	loc_B5EE
0000BE58                            ; ===========================================================================
0000BE58                            
0000BE58                            Obj30_Type03:				; XREF: Obj30_TypeIndex
0000BE58 0828 0003 0028             		btst	#3,$28(a0)
0000BE5E 6700                       		beq.s	loc_B53E
0000BE60 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000BE64 0440 0010                  		subi.w	#$10,d0
0000BE68 6000 0000                  		bra.w	loc_B5EE
0000BE6C                            ; ===========================================================================
0000BE6C                            
0000BE6C                            loc_B53E:
0000BE6C 0828 0003 0022             		btst	#3,$22(a0)
0000BE72 6600                       		bne.s	loc_B54E
0000BE74 08A8 0000 0034             		bclr	#0,$34(a0)
0000BE7A 6000                       		bra.s	loc_B582
0000BE7C                            ; ===========================================================================
0000BE7C                            
0000BE7C                            loc_B54E:
0000BE7C 4A28 0034                  		tst.b	$34(a0)
0000BE80 6600                       		bne.s	loc_B582
0000BE82 117C 0001 0034             		move.b	#1,$34(a0)
0000BE88 08E8 0000 0035             		bset	#0,$35(a0)
0000BE8E 6700                       		beq.s	loc_B582
0000BE90 08E8 0007 0034             		bset	#7,$34(a0)
0000BE96 317C 0010 0036             		move.w	#$10,$36(a0)
0000BE9C 117C 000A 0038             		move.b	#$A,$38(a0)
0000BEA2 0C68 0040 0032             		cmpi.w	#$40,$32(a0)
0000BEA8 6600                       		bne.s	loc_B582
0000BEAA 317C 0040 0036             		move.w	#$40,$36(a0)
0000BEB0                            
0000BEB0                            loc_B582:
0000BEB0 4A28 0034                  		tst.b	$34(a0)
0000BEB4 6A00                       		bpl.s	loc_B5AA
0000BEB6 4A28 0038                  		tst.b	$38(a0)
0000BEBA 6700                       		beq.s	loc_B594
0000BEBC 5328 0038                  		subq.b	#1,$38(a0)
0000BEC0 6600                       		bne.s	loc_B5AA
0000BEC2                            
0000BEC2                            loc_B594:
0000BEC2 4A68 0032                  		tst.w	$32(a0)
0000BEC6 6700                       		beq.s	loc_B5A4
0000BEC8 5368 0032                  		subq.w	#1,$32(a0)
0000BECC 5368 0036                  		subq.w	#1,$36(a0)
0000BED0 6600                       		bne.s	loc_B5AA
0000BED2                            
0000BED2                            loc_B5A4:
0000BED2 08A8 0007 0034             		bclr	#7,$34(a0)
0000BED8                            
0000BED8                            loc_B5AA:
0000BED8 3028 0032                  		move.w	$32(a0),d0
0000BEDC 6000                       		bra.s	loc_B5EE
0000BEDE                            ; ===========================================================================
0000BEDE                            
0000BEDE                            Obj30_Type04:				; XREF: Obj30_TypeIndex
0000BEDE 0828 0003 0028             		btst	#3,$28(a0)
0000BEE4 6700                       		beq.s	Obj30_ChkSwitch
0000BEE6 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000BEEA 0440 0010                  		subi.w	#$10,d0
0000BEEE 6000                       		bra.s	loc_B5EE
0000BEF0                            ; ===========================================================================
0000BEF0                            
0000BEF0                            Obj30_ChkSwitch:			; XREF: Obj30_Type04
0000BEF0 4A28 0034                  		tst.b	$34(a0)
0000BEF4 6600                       		bne.s	loc_B5E0
0000BEF6 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0000BEFA 7000                       		moveq	#0,d0
0000BEFC 1028 0028                  		move.b	$28(a0),d0	; load object type number
0000BF00 E848                       		lsr.w	#4,d0		; read only the	first nybble
0000BF02 4A32 0000                  		tst.b	(a2,d0.w)	; has switch number d0 been pressed?
0000BF06 6700                       		beq.s	loc_B5EA	; if not, branch
0000BF08 117C 0001 0034             		move.b	#1,$34(a0)
0000BF0E                            
0000BF0E                            loc_B5E0:
0000BF0E 4A68 0032                  		tst.w	$32(a0)
0000BF12 6700                       		beq.s	loc_B5EA
0000BF14 5568 0032                  		subq.w	#2,$32(a0)
0000BF18                            
0000BF18                            loc_B5EA:
0000BF18 3028 0032                  		move.w	$32(a0),d0
0000BF1C                            
0000BF1C                            loc_B5EE:
0000BF1C 3228 0030                  		move.w	$30(a0),d1
0000BF20 9240                       		sub.w	d0,d1
0000BF22 3141 000C                  		move.w	d1,$C(a0)
0000BF26 4E75                       		rts	
0000BF28                            ; ===========================================================================
0000BF28                            ; ---------------------------------------------------------------------------
0000BF28                            ; Sprite mappings - large green	glassy blocks (MZ)
0000BF28                            ; ---------------------------------------------------------------------------
0000BF28                            Map_obj30:
0000BF28                            	include "_maps\obj30.asm"
0000BF28                            ; ---------------------------------------------------------------------------
0000BF28                            ; Sprite mappings - large green	glassy blocks (MZ)
0000BF28                            ; ---------------------------------------------------------------------------
0000BF28 0000                       		dc.w byte_B600-Map_obj30
0000BF2A 0000                       		dc.w byte_B63D-Map_obj30
0000BF2C 0000                       		dc.w byte_B648-Map_obj30
0000BF2E 0C                         byte_B600:	dc.b $C
0000BF2F B80C 0000 E0               		dc.b $B8, $C, 0, 0, $E0
0000BF34 B80C 0800 00               		dc.b $B8, $C, 8, 0, 0
0000BF39 C00F 0004 E0               		dc.b $C0, $F, 0, 4, $E0
0000BF3E C00F 0804 00               		dc.b $C0, $F, 8, 4, 0
0000BF43 E00F 0004 E0               		dc.b $E0, $F, 0, 4, $E0
0000BF48 E00F 0804 00               		dc.b $E0, $F, 8, 4, 0
0000BF4D 000F 0004 E0               		dc.b 0,	$F, 0, 4, $E0
0000BF52 000F 0804 00               		dc.b 0,	$F, 8, 4, 0
0000BF57 200F 0004 E0               		dc.b $20, $F, 0, 4, $E0
0000BF5C 200F 0804 00               		dc.b $20, $F, 8, 4, 0
0000BF61 400C 1000 E0               		dc.b $40, $C, $10, 0, $E0
0000BF66 400C 1800 00               		dc.b $40, $C, $18, 0, 0
0000BF6B 02                         byte_B63D:	dc.b 2
0000BF6C 0806 0014 F0               		dc.b 8,	6, 0, $14, $F0
0000BF71 0006 0014 00               		dc.b 0,	6, 0, $14, 0
0000BF76 0A                         byte_B648:	dc.b $A
0000BF77 C80C 0000 E0               		dc.b $C8, $C, 0, 0, $E0
0000BF7C C80C 0800 00               		dc.b $C8, $C, 8, 0, 0
0000BF81 D00F 0004 E0               		dc.b $D0, $F, 0, 4, $E0
0000BF86 D00F 0804 00               		dc.b $D0, $F, 8, 4, 0
0000BF8B F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
0000BF90 F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
0000BF95 100F 0004 E0               		dc.b $10, $F, 0, 4, $E0
0000BF9A 100F 0804 00               		dc.b $10, $F, 8, 4, 0
0000BF9F 300C 1000 E0               		dc.b $30, $C, $10, 0, $E0
0000BFA4 300C 1800 00               		dc.b $30, $C, $18, 0, 0
0000BFAA 00                         		even
0000BFAA 00                         		even
0000BFAA                            
0000BFAA                            ; ===========================================================================
0000BFAA                            ; ---------------------------------------------------------------------------
0000BFAA                            ; Object 31 - stomping metal blocks on chains (MZ)
0000BFAA                            ; ---------------------------------------------------------------------------
0000BFAA                            
0000BFAA                            Obj31:					; XREF: Obj_Index
0000BFAA 7000                       		moveq	#0,d0
0000BFAC 1028 0024                  		move.b	$24(a0),d0
0000BFB0 323B 0000                  		move.w	Obj31_Index(pc,d0.w),d1
0000BFB4 4EFB 1000                  		jmp	Obj31_Index(pc,d1.w)
0000BFB8                            ; ===========================================================================
0000BFB8 0000                       Obj31_Index:	dc.w Obj31_Main-Obj31_Index
0000BFBA 0000                       		dc.w loc_B798-Obj31_Index
0000BFBC 0000                       		dc.w loc_B7FE-Obj31_Index
0000BFBE 0000                       		dc.w Obj31_Display2-Obj31_Index
0000BFC0 0000                       		dc.w loc_B7E2-Obj31_Index
0000BFC2                            
0000BFC2 0000                       Obj31_SwchNums:	dc.b 0,	0		; switch number, obj number
0000BFC4 0100                       		dc.b 1,	0
0000BFC6                            
0000BFC6 0200 00                    Obj31_Var:	dc.b 2,	0, 0		; XREF: ROM:0000B6E0o
0000BFC9 041C 01                    		dc.b 4,	$1C, 1		; routine number, y-position, frame number
0000BFCC 08CC 03                    		dc.b 8,	$CC, 3
0000BFCF 06F0 02                    		dc.b 6,	$F0, 2
0000BFD2                            
0000BFD2 7000 A000                  word_B6A4:	dc.w $7000, $A000
0000BFD6 5000 7800                  		dc.w $5000, $7800
0000BFDA 3800 5800                  		dc.w $3800, $5800
0000BFDE B800                       		dc.w $B800
0000BFE0                            ; ===========================================================================
0000BFE0                            
0000BFE0                            Obj31_Main:				; XREF: Obj31_Index
0000BFE0 7000                       		moveq	#0,d0
0000BFE2 1028 0028                  		move.b	$28(a0),d0
0000BFE6 6A00                       		bpl.s	loc_B6CE
0000BFE8 0240 007F                  		andi.w	#$7F,d0
0000BFEC D040                       		add.w	d0,d0
0000BFEE 45FB 00D2                  		lea	Obj31_SwchNums(pc,d0.w),a2
0000BFF2 115A 003A                  		move.b	(a2)+,$3A(a0)
0000BFF6 101A                       		move.b	(a2)+,d0
0000BFF8 1140 0028                  		move.b	d0,$28(a0)
0000BFFC                            
0000BFFC                            loc_B6CE:
0000BFFC 0200 000F                  		andi.b	#$F,d0
0000C000 D040                       		add.w	d0,d0
0000C002 343B 00CE                  		move.w	word_B6A4(pc,d0.w),d2
0000C006 4A40                       		tst.w	d0
0000C008 6600                       		bne.s	loc_B6E0
0000C00A 3142 0032                  		move.w	d2,$32(a0)
0000C00E                            
0000C00E                            loc_B6E0:
0000C00E 45F9 0000 BFC6             		lea	(Obj31_Var).l,a2
0000C014 2248                       		movea.l	a0,a1
0000C016 7203                       		moveq	#3,d1
0000C018 6000                       		bra.s	Obj31_MakeStomper
0000C01A                            ; ===========================================================================
0000C01A                            
0000C01A                            Obj31_Loop:
0000C01A 6100 0000                  		bsr.w	SingleObjLoad2
0000C01E 6600 0000                  		bne.w	Obj31_SetSize
0000C022                            
0000C022                            Obj31_MakeStomper:			; XREF: Obj31_Main
0000C022 135A 0024                  		move.b	(a2)+,$24(a1)
0000C026 12BC 0031                  		move.b	#$31,0(a1)
0000C02A 3368 0008 0008             		move.w	8(a0),8(a1)
0000C030 101A                       		move.b	(a2)+,d0
0000C032 4880                       		ext.w	d0
0000C034 D068 000C                  		add.w	$C(a0),d0
0000C038 3340 000C                  		move.w	d0,$C(a1)
0000C03C 237C 0000 0000 0004        		move.l	#Map_obj31,4(a1)
0000C044 337C 0300 0002             		move.w	#$300,2(a1)
0000C04A 137C 0004 0001             		move.b	#4,1(a1)
0000C050 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000C056 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000C05C 137C 0010 0019             		move.b	#$10,$19(a1)
0000C062 3342 0034                  		move.w	d2,$34(a1)
0000C066 137C 0004 0018             		move.b	#4,$18(a1)
0000C06C 135A 001A                  		move.b	(a2)+,$1A(a1)
0000C070 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
0000C076 6600                       		bne.s	loc_B76A
0000C078 5341                       		subq.w	#1,d1
0000C07A 1028 0028                  		move.b	$28(a0),d0
0000C07E 0240 00F0                  		andi.w	#$F0,d0
0000C082 0C40 0020                  		cmpi.w	#$20,d0
0000C086 679A                       		beq.s	Obj31_MakeStomper
0000C088 137C 0038 0019             		move.b	#$38,$19(a1)
0000C08E 137C 0090 0020             		move.b	#$90,$20(a1)
0000C094 5241                       		addq.w	#1,d1
0000C096                            
0000C096                            loc_B76A:
0000C096 2348 003C                  		move.l	a0,$3C(a1)
0000C09A 51C9 FF7E                  		dbf	d1,Obj31_Loop
0000C09E                            
0000C09E 137C 0003 0018             		move.b	#3,$18(a1)
0000C0A4                            
0000C0A4                            Obj31_SetSize:
0000C0A4 7000                       		moveq	#0,d0
0000C0A6 1028 0028                  		move.b	$28(a0),d0
0000C0AA E648                       		lsr.w	#3,d0
0000C0AC 0200 000E                  		andi.b	#$E,d0
0000C0B0 45FB 0000                  		lea	Obj31_Var2(pc,d0.w),a2
0000C0B4 115A 0019                  		move.b	(a2)+,$19(a0)
0000C0B8 115A 001A                  		move.b	(a2)+,$1A(a0)
0000C0BC 6000                       		bra.s	loc_B798
0000C0BE                            ; ===========================================================================
0000C0BE 3800                       Obj31_Var2:	dc.b $38, 0		; width, frame number
0000C0C0 3009                       		dc.b $30, 9
0000C0C2 100A                       		dc.b $10, $A
0000C0C4                            ; ===========================================================================
0000C0C4                            
0000C0C4                            loc_B798:				; XREF: Obj31_Index
0000C0C4 6100 0000                  		bsr.w	Obj31_Types
0000C0C8 31E8 000C F7A4             		move.w	$C(a0),($FFFFF7A4).w
0000C0CE 7200                       		moveq	#0,d1
0000C0D0 1228 0019                  		move.b	$19(a0),d1
0000C0D4 0641 000B                  		addi.w	#$B,d1
0000C0D8 343C 000C                  		move.w	#$C,d2
0000C0DC 363C 000D                  		move.w	#$D,d3
0000C0E0 3828 0008                  		move.w	8(a0),d4
0000C0E4 6100 0000                  		bsr.w	SolidObject
0000C0E8 0828 0003 0022             		btst	#3,$22(a0)
0000C0EE 6700                       		beq.s	Obj31_Display
0000C0F0 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000C0F6 6400                       		bcc.s	Obj31_Display
0000C0F8 2448                       		movea.l	a0,a2
0000C0FA 41F8 D000                  		lea	($FFFFD000).w,a0
0000C0FE 4EB9 0000 0000             		jsr	KillSonic
0000C104 204A                       		movea.l	a2,a0
0000C106                            
0000C106                            Obj31_Display:
0000C106 6100 0000                  		bsr.w	DisplaySprite
0000C10A 6000 0000                  		bra.w	Obj31_ChkDel
0000C10E                            ; ===========================================================================
0000C10E                            
0000C10E                            loc_B7E2:				; XREF: Obj31_Index
0000C10E 117C 0080 0016             		move.b	#$80,$16(a0)
0000C114 08E8 0004 0001             		bset	#4,1(a0)
0000C11A 2268 003C                  		movea.l	$3C(a0),a1
0000C11E 1029 0032                  		move.b	$32(a1),d0
0000C122 EA08                       		lsr.b	#5,d0
0000C124 5600                       		addq.b	#3,d0
0000C126 1140 001A                  		move.b	d0,$1A(a0)
0000C12A                            
0000C12A                            loc_B7FE:				; XREF: Obj31_Index
0000C12A 2268 003C                  		movea.l	$3C(a0),a1
0000C12E 7000                       		moveq	#0,d0
0000C130 1029 0032                  		move.b	$32(a1),d0
0000C134 D068 0030                  		add.w	$30(a0),d0
0000C138 3140 000C                  		move.w	d0,$C(a0)
0000C13C                            
0000C13C                            Obj31_Display2:				; XREF: Obj31_Index
0000C13C 6100 0000                  		bsr.w	DisplaySprite
0000C140                            
0000C140                            Obj31_ChkDel:				; XREF: Obj31_Display
0000C140 3028 0008                  		move.w	8(a0),d0
0000C144 0240 FF80                  		andi.w	#$FF80,d0
0000C148 3238 F700                  		move.w	($FFFFF700).w,d1
0000C14C 0441 0080                  		subi.w	#$80,d1
0000C150 0241 FF80                  		andi.w	#$FF80,d1
0000C154 9041                       		sub.w	d1,d0
0000C156 0C40 0280                  		cmpi.w	#$280,d0
0000C15A 6200 0000                  		bhi.w	DeleteObject
0000C15E 4E75                       		rts	
0000C160                            ; ===========================================================================
0000C160                            
0000C160                            Obj31_Types:				; XREF: loc_B798
0000C160 1028 0028                  		move.b	$28(a0),d0
0000C164 0240 000F                  		andi.w	#$F,d0
0000C168 D040                       		add.w	d0,d0
0000C16A 323B 0000                  		move.w	Obj31_TypeIndex(pc,d0.w),d1
0000C16E 4EFB 1000                  		jmp	Obj31_TypeIndex(pc,d1.w)
0000C172                            ; ===========================================================================
0000C172 0000                       Obj31_TypeIndex:dc.w Obj31_Type00-Obj31_TypeIndex
0000C174 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000C176 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000C178 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000C17A 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000C17C 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000C17E 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000C180                            ; ===========================================================================
0000C180                            
0000C180                            Obj31_Type00:				; XREF: Obj31_TypeIndex
0000C180 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
0000C184 7000                       		moveq	#0,d0
0000C186 1028 003A                  		move.b	$3A(a0),d0	; move number 0	or 1 to	d0
0000C18A 4A32 0000                  		tst.b	(a2,d0.w)	; has switch (d0) been pressed?
0000C18E 6700                       		beq.s	loc_B8A8	; if not, branch
0000C190 4A78 F7A4                  		tst.w	($FFFFF7A4).w
0000C194 6A00                       		bpl.s	loc_B872
0000C196 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000C19C 6700                       		beq.s	loc_B8A0
0000C19E                            
0000C19E                            loc_B872:
0000C19E 4A68 0032                  		tst.w	$32(a0)
0000C1A2 6700                       		beq.s	loc_B8A0
0000C1A4 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000C1A8 0200 000F                  		andi.b	#$F,d0
0000C1AC 6600                       		bne.s	loc_B892
0000C1AE 4A28 0001                  		tst.b	1(a0)
0000C1B2 6A00                       		bpl.s	loc_B892
0000C1B4 303C 00C7                  		move.w	#$C7,d0
0000C1B8 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000C1BE                            
0000C1BE                            loc_B892:
0000C1BE 0468 0080 0032             		subi.w	#$80,$32(a0)
0000C1C4 6400                       		bcc.s	Obj31_Restart
0000C1C6 317C 0000 0032             		move.w	#0,$32(a0)
0000C1CC                            
0000C1CC                            loc_B8A0:
0000C1CC 317C 0000 0012             		move.w	#0,$12(a0)
0000C1D2 6000                       		bra.s	Obj31_Restart
0000C1D4                            ; ===========================================================================
0000C1D4                            
0000C1D4                            loc_B8A8:				; XREF: Obj31_Type00
0000C1D4 3228 0034                  		move.w	$34(a0),d1
0000C1D8 B268 0032                  		cmp.w	$32(a0),d1
0000C1DC 6700                       		beq.s	Obj31_Restart
0000C1DE 3028 0012                  		move.w	$12(a0),d0
0000C1E2 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000C1E8 D168 0032                  		add.w	d0,$32(a0)
0000C1EC B268 0032                  		cmp.w	$32(a0),d1
0000C1F0 6200                       		bhi.s	Obj31_Restart
0000C1F2 3141 0032                  		move.w	d1,$32(a0)
0000C1F6 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000C1FC 4A28 0001                  		tst.b	1(a0)
0000C200 6A00                       		bpl.s	Obj31_Restart
0000C202 303C 00BD                  		move.w	#$BD,d0
0000C206 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play stomping sound
0000C20C                            
0000C20C                            Obj31_Restart:
0000C20C 7000                       		moveq	#0,d0
0000C20E 1028 0032                  		move.b	$32(a0),d0
0000C212 D068 0030                  		add.w	$30(a0),d0
0000C216 3140 000C                  		move.w	d0,$C(a0)
0000C21A 4E75                       		rts	
0000C21C                            ; ===========================================================================
0000C21C                            
0000C21C                            Obj31_Type01:				; XREF: Obj31_TypeIndex
0000C21C 4A68 0036                  		tst.w	$36(a0)
0000C220 6700                       		beq.s	loc_B938
0000C222 4A68 0038                  		tst.w	$38(a0)
0000C226 6700                       		beq.s	loc_B902
0000C228 5368 0038                  		subq.w	#1,$38(a0)
0000C22C 6000                       		bra.s	loc_B97C
0000C22E                            ; ===========================================================================
0000C22E                            
0000C22E                            loc_B902:
0000C22E 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000C232 0200 000F                  		andi.b	#$F,d0
0000C236 6600                       		bne.s	loc_B91C
0000C238 4A28 0001                  		tst.b	1(a0)
0000C23C 6A00                       		bpl.s	loc_B91C
0000C23E 303C 00C7                  		move.w	#$C7,d0
0000C242 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000C248                            
0000C248                            loc_B91C:
0000C248 0468 0080 0032             		subi.w	#$80,$32(a0)
0000C24E 6400                       		bcc.s	loc_B97C
0000C250 317C 0000 0032             		move.w	#0,$32(a0)
0000C256 317C 0000 0012             		move.w	#0,$12(a0)
0000C25C 317C 0000 0036             		move.w	#0,$36(a0)
0000C262 6000                       		bra.s	loc_B97C
0000C264                            ; ===========================================================================
0000C264                            
0000C264                            loc_B938:				; XREF: Obj31_Type01
0000C264 3228 0034                  		move.w	$34(a0),d1
0000C268 B268 0032                  		cmp.w	$32(a0),d1
0000C26C 6700                       		beq.s	loc_B97C
0000C26E 3028 0012                  		move.w	$12(a0),d0
0000C272 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000C278 D168 0032                  		add.w	d0,$32(a0)
0000C27C B268 0032                  		cmp.w	$32(a0),d1
0000C280 6200                       		bhi.s	loc_B97C
0000C282 3141 0032                  		move.w	d1,$32(a0)
0000C286 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000C28C 317C 0001 0036             		move.w	#1,$36(a0)
0000C292 317C 003C 0038             		move.w	#$3C,$38(a0)
0000C298 4A28 0001                  		tst.b	1(a0)
0000C29C 6A00                       		bpl.s	loc_B97C
0000C29E 303C 00BD                  		move.w	#$BD,d0
0000C2A2 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play stomping sound
0000C2A8                            
0000C2A8                            loc_B97C:
0000C2A8 6000 FF62                  		bra.w	Obj31_Restart
0000C2AC                            ; ===========================================================================
0000C2AC                            
0000C2AC                            Obj31_Type03:				; XREF: Obj31_TypeIndex
0000C2AC 3038 D008                  		move.w	($FFFFD008).w,d0
0000C2B0 9068 0008                  		sub.w	8(a0),d0
0000C2B4 6400                       		bcc.s	loc_B98C
0000C2B6 4440                       		neg.w	d0
0000C2B8                            
0000C2B8                            loc_B98C:
0000C2B8 0C40 0090                  		cmpi.w	#$90,d0
0000C2BC 6400                       		bcc.s	loc_B996
0000C2BE 5228 0028                  		addq.b	#1,$28(a0)
0000C2C2                            
0000C2C2                            loc_B996:
0000C2C2 6000 FF48                  		bra.w	Obj31_Restart
0000C2C6                            ; ===========================================================================
0000C2C6                            ; ---------------------------------------------------------------------------
0000C2C6                            ; Object 45 - spiked metal block from beta version (MZ)
0000C2C6                            ; ---------------------------------------------------------------------------
0000C2C6                            
0000C2C6                            Obj45:					; XREF: Obj_Index
0000C2C6 7000                       		moveq	#0,d0
0000C2C8 1028 0024                  		move.b	$24(a0),d0
0000C2CC 323B 0000                  		move.w	Obj45_Index(pc,d0.w),d1
0000C2D0 4EFB 1000                  		jmp	Obj45_Index(pc,d1.w)
0000C2D4                            ; ===========================================================================
0000C2D4 0000                       Obj45_Index:	dc.w Obj45_Main-Obj45_Index
0000C2D6 0000                       		dc.w Obj45_Solid-Obj45_Index
0000C2D8 0000                       		dc.w loc_BA8E-Obj45_Index
0000C2DA 0000                       		dc.w Obj45_Display-Obj45_Index
0000C2DC 0000                       		dc.w loc_BA7A-Obj45_Index
0000C2DE                            
0000C2DE 0204 00                    Obj45_Var:	dc.b	2,   4,	  0	; routine number, x-position, frame number
0000C2E1 04E4 01                    		dc.b	4, $E4,	  1
0000C2E4 0834 03                    		dc.b	8, $34,	  3
0000C2E7 0628 02                    		dc.b	6, $28,	  2
0000C2EA                            
0000C2EA 3800                       word_B9BE:	dc.w $3800
0000C2EC A000                       		dc.w -$6000
0000C2EE 5000                       		dc.w $5000
0000C2F0                            ; ===========================================================================
0000C2F0                            
0000C2F0                            Obj45_Main:				; XREF: Obj45_Index
0000C2F0 7000                       		moveq	#0,d0
0000C2F2 1028 0028                  		move.b	$28(a0),d0
0000C2F6 D040                       		add.w	d0,d0
0000C2F8 343B 00F0                  		move.w	word_B9BE(pc,d0.w),d2
0000C2FC 45F9 0000 C2DE             		lea	(Obj45_Var).l,a2
0000C302 2248                       		movea.l	a0,a1
0000C304 7203                       		moveq	#3,d1
0000C306 6000                       		bra.s	Obj45_Load
0000C308                            ; ===========================================================================
0000C308                            
0000C308                            Obj45_Loop:
0000C308 6100 0000                  		bsr.w	SingleObjLoad2
0000C30C 6600                       		bne.s	loc_BA52
0000C30E                            
0000C30E                            Obj45_Load:				; XREF: Obj45_Main
0000C30E 135A 0024                  		move.b	(a2)+,$24(a1)
0000C312 12BC 0045                  		move.b	#$45,0(a1)
0000C316 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000C31C 101A                       		move.b	(a2)+,d0
0000C31E 4880                       		ext.w	d0
0000C320 D068 0008                  		add.w	8(a0),d0
0000C324 3340 0008                  		move.w	d0,8(a1)
0000C328 237C 0000 0000 0004        		move.l	#Map_obj45,4(a1)
0000C330 337C 0300 0002             		move.w	#$300,2(a1)
0000C336 137C 0004 0001             		move.b	#4,1(a1)
0000C33C 3369 0008 0030             		move.w	8(a1),$30(a1)
0000C342 3368 0008 003A             		move.w	8(a0),$3A(a1)
0000C348 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000C34E 137C 0020 0019             		move.b	#$20,$19(a1)
0000C354 3342 0034                  		move.w	d2,$34(a1)
0000C358 137C 0004 0018             		move.b	#4,$18(a1)
0000C35E 0C12 0001                  		cmpi.b	#1,(a2)
0000C362 6600                       		bne.s	loc_BA40
0000C364 137C 0091 0020             		move.b	#$91,$20(a1)
0000C36A                            
0000C36A                            loc_BA40:
0000C36A 135A 001A                  		move.b	(a2)+,$1A(a1)
0000C36E 2348 003C                  		move.l	a0,$3C(a1)
0000C372 51C9 FF94                  		dbf	d1,Obj45_Loop	; repeat 3 times
0000C376                            
0000C376 137C 0003 0018             		move.b	#3,$18(a1)
0000C37C                            
0000C37C                            loc_BA52:
0000C37C 117C 0010 0019             		move.b	#$10,$19(a0)
0000C382                            
0000C382                            Obj45_Solid:				; XREF: Obj45_Index
0000C382 3F28 0008                  		move.w	8(a0),-(sp)
0000C386 6100 0000                  		bsr.w	Obj45_Move
0000C38A 323C 0017                  		move.w	#$17,d1
0000C38E 343C 0020                  		move.w	#$20,d2
0000C392 363C 0020                  		move.w	#$20,d3
0000C396 381F                       		move.w	(sp)+,d4
0000C398 6100 0000                  		bsr.w	SolidObject
0000C39C 6100 0000                  		bsr.w	DisplaySprite
0000C3A0 6000 0000                  		bra.w	Obj45_ChkDel
0000C3A4                            ; ===========================================================================
0000C3A4                            
0000C3A4                            loc_BA7A:				; XREF: Obj45_Index
0000C3A4 2268 003C                  		movea.l	$3C(a0),a1
0000C3A8 1029 0032                  		move.b	$32(a1),d0
0000C3AC 0600 0010                  		addi.b	#$10,d0
0000C3B0 EA08                       		lsr.b	#5,d0
0000C3B2 5600                       		addq.b	#3,d0
0000C3B4 1140 001A                  		move.b	d0,$1A(a0)
0000C3B8                            
0000C3B8                            loc_BA8E:				; XREF: Obj45_Index
0000C3B8 2268 003C                  		movea.l	$3C(a0),a1
0000C3BC 7000                       		moveq	#0,d0
0000C3BE 1029 0032                  		move.b	$32(a1),d0
0000C3C2 4440                       		neg.w	d0
0000C3C4 D068 0030                  		add.w	$30(a0),d0
0000C3C8 3140 0008                  		move.w	d0,8(a0)
0000C3CC                            
0000C3CC                            Obj45_Display:				; XREF: Obj45_Index
0000C3CC 6100 0000                  		bsr.w	DisplaySprite
0000C3D0                            
0000C3D0                            Obj45_ChkDel:				; XREF: Obj45_Solid
0000C3D0 3028 003A                  		move.w	$3A(a0),d0
0000C3D4 0240 FF80                  		andi.w	#$FF80,d0
0000C3D8 3238 F700                  		move.w	($FFFFF700).w,d1
0000C3DC 0441 0080                  		subi.w	#$80,d1
0000C3E0 0241 FF80                  		andi.w	#$FF80,d1
0000C3E4 9041                       		sub.w	d1,d0
0000C3E6 0C40 0280                  		cmpi.w	#$280,d0
0000C3EA 6200 0000                  		bhi.w	DeleteObject
0000C3EE 4E75                       		rts	
0000C3F0                            
0000C3F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C3F0                            
0000C3F0                            
0000C3F0                            Obj45_Move:				; XREF: Obj45_Solid
0000C3F0 7000                       		moveq	#0,d0
0000C3F2 1028 0028                  		move.b	$28(a0),d0
0000C3F6 D040                       		add.w	d0,d0
0000C3F8 323B 0000                  		move.w	off_BAD6(pc,d0.w),d1
0000C3FC 4EFB 1000                  		jmp	off_BAD6(pc,d1.w)
0000C400                            ; End of function Obj45_Move
0000C400                            
0000C400                            ; ===========================================================================
0000C400 0000                       off_BAD6:	dc.w loc_BADA-off_BAD6
0000C402 0000                       		dc.w loc_BADA-off_BAD6
0000C404                            ; ===========================================================================
0000C404                            
0000C404                            loc_BADA:				; XREF: off_BAD6
0000C404 4A68 0036                  		tst.w	$36(a0)
0000C408 6700                       		beq.s	loc_BB08
0000C40A 4A68 0038                  		tst.w	$38(a0)
0000C40E 6700                       		beq.s	loc_BAEC
0000C410 5368 0038                  		subq.w	#1,$38(a0)
0000C414 6000                       		bra.s	loc_BB3C
0000C416                            ; ===========================================================================
0000C416                            
0000C416                            loc_BAEC:
0000C416 0468 0080 0032             		subi.w	#$80,$32(a0)
0000C41C 6400                       		bcc.s	loc_BB3C
0000C41E 317C 0000 0032             		move.w	#0,$32(a0)
0000C424 317C 0000 0010             		move.w	#0,$10(a0)
0000C42A 317C 0000 0036             		move.w	#0,$36(a0)
0000C430 6000                       		bra.s	loc_BB3C
0000C432                            ; ===========================================================================
0000C432                            
0000C432                            loc_BB08:				; XREF: loc_BADA
0000C432 3228 0034                  		move.w	$34(a0),d1
0000C436 B268 0032                  		cmp.w	$32(a0),d1
0000C43A 6700                       		beq.s	loc_BB3C
0000C43C 3028 0010                  		move.w	$10(a0),d0
0000C440 0668 0070 0010             		addi.w	#$70,$10(a0)
0000C446 D168 0032                  		add.w	d0,$32(a0)
0000C44A B268 0032                  		cmp.w	$32(a0),d1
0000C44E 6200                       		bhi.s	loc_BB3C
0000C450 3141 0032                  		move.w	d1,$32(a0)
0000C454 317C 0000 0010             		move.w	#0,$10(a0)
0000C45A 317C 0001 0036             		move.w	#1,$36(a0)
0000C460 317C 003C 0038             		move.w	#$3C,$38(a0)
0000C466                            
0000C466                            loc_BB3C:
0000C466 7000                       		moveq	#0,d0
0000C468 1028 0032                  		move.b	$32(a0),d0
0000C46C 4440                       		neg.w	d0
0000C46E D068 0030                  		add.w	$30(a0),d0
0000C472 3140 0008                  		move.w	d0,8(a0)
0000C476 4E75                       		rts	
0000C478                            ; ===========================================================================
0000C478                            ; ---------------------------------------------------------------------------
0000C478                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000C478                            ; ---------------------------------------------------------------------------
0000C478                            Map_obj31:
0000C478                            	include "_maps\obj31.asm"
0000C478                            ; ---------------------------------------------------------------------------
0000C478                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000C478                            ; ---------------------------------------------------------------------------
0000C478 0000                       		dc.w byte_BB64-Map_obj31
0000C47A 0000                       		dc.w byte_BB7E-Map_obj31
0000C47C 0000                       		dc.w byte_BB98-Map_obj31
0000C47E 0000                       		dc.w byte_BB9E-Map_obj31
0000C480 0000                       		dc.w byte_BBA9-Map_obj31
0000C482 0000                       		dc.w byte_BBBE-Map_obj31
0000C484 0000                       		dc.w byte_BBDD-Map_obj31
0000C486 0000                       		dc.w byte_BC06-Map_obj31
0000C488 0000                       		dc.w byte_BC06-Map_obj31
0000C48A 0000                       		dc.w byte_BC39-Map_obj31
0000C48C 0000                       		dc.w byte_BC53-Map_obj31
0000C48E 05                         byte_BB64:	dc.b 5
0000C48F F406 0000 C8               		dc.b $F4, 6, 0,	0, $C8
0000C494 F40A 0006 D8               		dc.b $F4, $A, 0, 6, $D8
0000C499 EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000C49E F40A 0806 10               		dc.b $F4, $A, 8, 6, $10
0000C4A3 F406 0800 28               		dc.b $F4, 6, 8,	0, $28
0000C4A8 05                         byte_BB7E:	dc.b 5
0000C4A9 F003 121F D4               		dc.b $F0, 3, $12, $1F, $D4
0000C4AE F003 121F E8               		dc.b $F0, 3, $12, $1F, $E8
0000C4B3 F003 121F FC               		dc.b $F0, 3, $12, $1F, $FC
0000C4B8 F003 121F 10               		dc.b $F0, 3, $12, $1F, $10
0000C4BD F003 121F 24               		dc.b $F0, 3, $12, $1F, $24
0000C4C2 01                         byte_BB98:	dc.b 1
0000C4C3 DC0F 100F F0               		dc.b $DC, $F, $10, $F, $F0
0000C4C8 02                         byte_BB9E:	dc.b 2
0000C4C9 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C4CE 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C4D3 04                         byte_BBA9:	dc.b 4
0000C4D4 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C4D9 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C4DE 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C4E3 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C4E8 06                         byte_BBBE:	dc.b 6
0000C4E9 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000C4EE D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000C4F3 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C4F8 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C4FD 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C502 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C507 08                         byte_BBDD:	dc.b 8
0000C508 A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000C50D B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000C512 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000C517 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000C51C E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C521 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C526 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C52B 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C530 0A                         byte_BC06:	dc.b $A
0000C531 8001 003F FC               		dc.b $80, 1, 0,	$3F, $FC
0000C536 9001 003F FC               		dc.b $90, 1, 0,	$3F, $FC
0000C53B A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000C540 B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000C545 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000C54A D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000C54F E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C554 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C559 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C55E 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C563 05                         byte_BC39:	dc.b 5
0000C564 F406 0000 D0               		dc.b $F4, 6, 0,	0, $D0
0000C569 F40A 0006 E0               		dc.b $F4, $A, 0, 6, $E0
0000C56E F40A 0806 08               		dc.b $F4, $A, 8, 6, 8
0000C573 F406 0800 20               		dc.b $F4, 6, 8,	0, $20
0000C578 EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000C57D 01                         byte_BC53:	dc.b 1
0000C57E EC0F 002F F0               		dc.b $EC, $F, 0, $2F, $F0
0000C584 00                         		even
0000C584 00                         		even
0000C584                            
0000C584                            ; ---------------------------------------------------------------------------
0000C584                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000C584                            ; ---------------------------------------------------------------------------
0000C584                            Map_obj45:
0000C584                            	include "_maps\obj45.asm"
0000C584                            ; ---------------------------------------------------------------------------
0000C584                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000C584                            ; ---------------------------------------------------------------------------
0000C584 0000                       		dc.w byte_BC6C-Map_obj45
0000C586 0000                       		dc.w byte_BC7C-Map_obj45
0000C588 0000                       		dc.w byte_BC8C-Map_obj45
0000C58A 0000                       		dc.w byte_BC92-Map_obj45
0000C58C 0000                       		dc.w byte_BC9D-Map_obj45
0000C58E 0000                       		dc.w byte_BCB2-Map_obj45
0000C590 0000                       		dc.w byte_BCD1-Map_obj45
0000C592 0000                       		dc.w byte_BCFA-Map_obj45
0000C594 0000                       		dc.w byte_BCFA-Map_obj45
0000C596 03                         byte_BC6C:	dc.b 3
0000C597 E00B 001F F4               		dc.b $E0, $B, 0, $1F, $F4
0000C59C 000B 101F F4               		dc.b 0,	$B, $10, $1F, $F4
0000C5A1 F003 002B 0C               		dc.b $F0, 3, 0,	$2B, $C
0000C5A6 03                         byte_BC7C:	dc.b 3
0000C5A7 E80C 121B F0               		dc.b $E8, $C, $12, $1B,	$F0
0000C5AC FC0C 121B F0               		dc.b $FC, $C, $12, $1B,	$F0
0000C5B1 100C 121B F0               		dc.b $10, $C, $12, $1B,	$F0
0000C5B6 01                         byte_BC8C:	dc.b 1
0000C5B7 F003 082B FC               		dc.b $F0, 3, 8,	$2B, $FC
0000C5BC 02                         byte_BC92:	dc.b 2
0000C5BD F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C5C2 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C5C7 04                         byte_BC9D:	dc.b 4
0000C5C8 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C5CD F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C5D2 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C5D7 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C5DC 06                         byte_BCB2:	dc.b 6
0000C5DD F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C5E2 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C5E7 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C5EC F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C5F1 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C5F6 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C5FB 08                         byte_BCD1:	dc.b 8
0000C5FC F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C601 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C606 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C60B F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C610 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C615 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C61A F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000C61F F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000C624 08                         byte_BCFA:	dc.b 8
0000C625 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C62A F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C62F F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C634 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C639 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C63E F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C643 F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000C648 F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000C64D F805 0041 60               		dc.b $F8, 5, 0,	$41, $60
0000C652 F805 0041 70               		dc.b $F8, 5, 0,	$41, $70
0000C658 00                         		even
0000C658 00                         		even
0000C658                            
0000C658                            ; ===========================================================================
0000C658                            ; ---------------------------------------------------------------------------
0000C658                            ; Object 32 - switches (MZ, SYZ, LZ, SBZ)
0000C658                            ; ---------------------------------------------------------------------------
0000C658                            
0000C658                            Obj32:					; XREF: Obj_Index
0000C658 7000                       		moveq	#0,d0
0000C65A 1028 0024                  		move.b	$24(a0),d0
0000C65E 323B 0000                  		move.w	Obj32_Index(pc,d0.w),d1
0000C662 4EFB 1000                  		jmp	Obj32_Index(pc,d1.w)
0000C666                            ; ===========================================================================
0000C666 0000                       Obj32_Index:	dc.w Obj32_Main-Obj32_Index
0000C668 0000                       		dc.w Obj32_Pressed-Obj32_Index
0000C66A                            ; ===========================================================================
0000C66A                            
0000C66A                            Obj32_Main:				; XREF: Obj32_Index
0000C66A 5428 0024                  		addq.b	#2,$24(a0)
0000C66E 217C 0000 0000 0004        		move.l	#Map_obj32,4(a0)
0000C676 317C 4513 0002             		move.w	#$4513,2(a0)	; MZ specific code
0000C67C 0C38 0002 FE10             		cmpi.b	#2,($FFFFFE10).w
0000C682 6700                       		beq.s	loc_BD60
0000C684 317C 0513 0002             		move.w	#$513,2(a0)	; SYZ, LZ and SBZ specific code
0000C68A                            
0000C68A                            loc_BD60:
0000C68A 117C 0004 0001             		move.b	#4,1(a0)
0000C690 117C 0010 0019             		move.b	#$10,$19(a0)
0000C696 117C 0004 0018             		move.b	#4,$18(a0)
0000C69C 5668 000C                  		addq.w	#3,$C(a0)
0000C6A0                            
0000C6A0                            Obj32_Pressed:				; XREF: Obj32_Index
0000C6A0 4A28 0001                  		tst.b	1(a0)
0000C6A4 6A00                       		bpl.s	Obj32_Display
0000C6A6 323C 001B                  		move.w	#$1B,d1
0000C6AA 343C 0005                  		move.w	#5,d2
0000C6AE 363C 0005                  		move.w	#5,d3
0000C6B2 3828 0008                  		move.w	8(a0),d4
0000C6B6 6100 0000                  		bsr.w	SolidObject
0000C6BA 08A8 0000 001A             		bclr	#0,$1A(a0)	; use "unpressed" frame
0000C6C0 1028 0028                  		move.b	$28(a0),d0
0000C6C4 0240 000F                  		andi.w	#$F,d0
0000C6C8 47F8 F7E0                  		lea	($FFFFF7E0).w,a3
0000C6CC 47F3 0000                  		lea	(a3,d0.w),a3
0000C6D0 7600                       		moveq	#0,d3
0000C6D2 0828 0006 0028             		btst	#6,$28(a0)
0000C6D8 6700                       		beq.s	loc_BDB2
0000C6DA 7607                       		moveq	#7,d3
0000C6DC                            
0000C6DC                            loc_BDB2:
0000C6DC 4A28 0028                  		tst.b	$28(a0)
0000C6E0 6A00                       		bpl.s	loc_BDBE
0000C6E2 6100 0000                  		bsr.w	Obj32_MZBlock
0000C6E6 6600                       		bne.s	loc_BDC8
0000C6E8                            
0000C6E8                            loc_BDBE:
0000C6E8 4A28 0025                  		tst.b	$25(a0)
0000C6EC 6600                       		bne.s	loc_BDC8
0000C6EE 0793                       		bclr	d3,(a3)
0000C6F0 6000                       		bra.s	loc_BDDE
0000C6F2                            ; ===========================================================================
0000C6F2                            
0000C6F2                            loc_BDC8:
0000C6F2 4A13                       		tst.b	(a3)
0000C6F4 6600                       		bne.s	loc_BDD6
0000C6F6 303C 00CD                  		move.w	#$CD,d0
0000C6FA 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play switch sound
0000C700                            
0000C700                            loc_BDD6:
0000C700 07D3                       		bset	d3,(a3)
0000C702 08E8 0000 001A             		bset	#0,$1A(a0)	; use "pressed"	frame
0000C708                            
0000C708                            loc_BDDE:
0000C708 0828 0005 0028             		btst	#5,$28(a0)
0000C70E 6700                       		beq.s	Obj32_Display
0000C710 5328 001E                  		subq.b	#1,$1E(a0)
0000C714 6A00                       		bpl.s	Obj32_Display
0000C716 117C 0007 001E             		move.b	#7,$1E(a0)
0000C71C 0868 0001 001A             		bchg	#1,$1A(a0)
0000C722                            
0000C722                            Obj32_Display:
0000C722 6100 0000                  		bsr.w	DisplaySprite
0000C726 3028 0008                  		move.w	8(a0),d0
0000C72A 0240 FF80                  		andi.w	#$FF80,d0
0000C72E 3238 F700                  		move.w	($FFFFF700).w,d1
0000C732 0441 0080                  		subi.w	#$80,d1
0000C736 0241 FF80                  		andi.w	#$FF80,d1
0000C73A 9041                       		sub.w	d1,d0
0000C73C 0C40 0280                  		cmpi.w	#$280,d0
0000C740 6200 0000                  		bhi.w	Obj32_Delete
0000C744 4E75                       		rts	
0000C746                            ; ===========================================================================
0000C746                            
0000C746                            Obj32_Delete:
0000C746 6100 0000                  		bsr.w	DeleteObject
0000C74A 4E75                       		rts	
0000C74C                            
0000C74C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C74C                            
0000C74C                            
0000C74C                            Obj32_MZBlock:				; XREF: Obj32_Pressed
0000C74C 3F03                       		move.w	d3,-(sp)
0000C74E 3428 0008                  		move.w	8(a0),d2
0000C752 3628 000C                  		move.w	$C(a0),d3
0000C756 0442 0010                  		subi.w	#$10,d2
0000C75A 5143                       		subq.w	#8,d3
0000C75C 383C 0020                  		move.w	#$20,d4
0000C760 3A3C 0010                  		move.w	#$10,d5
0000C764 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking object RAM
0000C768 3C3C 005F                  		move.w	#$5F,d6
0000C76C                            
0000C76C                            Obj32_MZLoop:
0000C76C 4A29 0001                  		tst.b	1(a1)
0000C770 6A00                       		bpl.s	loc_BE4E
0000C772 0C11 0033                  		cmpi.b	#$33,(a1)	; is the object	a green	MZ block?
0000C776 6700                       		beq.s	loc_BE5E	; if yes, branch
0000C778                            
0000C778                            loc_BE4E:
0000C778 43E9 0040                  		lea	$40(a1),a1	; check	next object
0000C77C 51CE FFEE                  		dbf	d6,Obj32_MZLoop	; repeat $5F times
0000C780                            
0000C780 361F                       		move.w	(sp)+,d3
0000C782 7000                       		moveq	#0,d0
0000C784                            
0000C784                            locret_BE5A:
0000C784 4E75                       		rts	
0000C786                            ; ===========================================================================
0000C786 1010                       Obj32_MZData:	dc.b $10, $10
0000C788                            ; ===========================================================================
0000C788                            
0000C788                            loc_BE5E:				; XREF: Obj32_MZBlock
0000C788 7001                       		moveq	#1,d0
0000C78A 0240 003F                  		andi.w	#$3F,d0
0000C78E D040                       		add.w	d0,d0
0000C790 45FB 00F2                  		lea	Obj32_MZData-2(pc,d0.w),a2
0000C794 121A                       		move.b	(a2)+,d1
0000C796 4881                       		ext.w	d1
0000C798 3029 0008                  		move.w	8(a1),d0
0000C79C 9041                       		sub.w	d1,d0
0000C79E 9042                       		sub.w	d2,d0
0000C7A0 6400                       		bcc.s	loc_BE80
0000C7A2 D241                       		add.w	d1,d1
0000C7A4 D041                       		add.w	d1,d0
0000C7A6 6500                       		bcs.s	loc_BE84
0000C7A8 60CE                       		bra.s	loc_BE4E
0000C7AA                            ; ===========================================================================
0000C7AA                            
0000C7AA                            loc_BE80:
0000C7AA B044                       		cmp.w	d4,d0
0000C7AC 62CA                       		bhi.s	loc_BE4E
0000C7AE                            
0000C7AE                            loc_BE84:
0000C7AE 121A                       		move.b	(a2)+,d1
0000C7B0 4881                       		ext.w	d1
0000C7B2 3029 000C                  		move.w	$C(a1),d0
0000C7B6 9041                       		sub.w	d1,d0
0000C7B8 9043                       		sub.w	d3,d0
0000C7BA 6400                       		bcc.s	loc_BE9A
0000C7BC D241                       		add.w	d1,d1
0000C7BE D041                       		add.w	d1,d0
0000C7C0 6500                       		bcs.s	loc_BE9E
0000C7C2 60B4                       		bra.s	loc_BE4E
0000C7C4                            ; ===========================================================================
0000C7C4                            
0000C7C4                            loc_BE9A:
0000C7C4 B045                       		cmp.w	d5,d0
0000C7C6 62B0                       		bhi.s	loc_BE4E
0000C7C8                            
0000C7C8                            loc_BE9E:
0000C7C8 361F                       		move.w	(sp)+,d3
0000C7CA 7001                       		moveq	#1,d0
0000C7CC 4E75                       		rts	
0000C7CE                            ; End of function Obj32_MZBlock
0000C7CE                            
0000C7CE                            ; ===========================================================================
0000C7CE                            ; ---------------------------------------------------------------------------
0000C7CE                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000C7CE                            ; ---------------------------------------------------------------------------
0000C7CE                            Map_obj32:
0000C7CE                            	include "_maps\obj32.asm"
0000C7CE                            ; ---------------------------------------------------------------------------
0000C7CE                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000C7CE                            ; ---------------------------------------------------------------------------
0000C7CE 0000                       		dc.w byte_BEAC-Map_obj32
0000C7D0 0000                       		dc.w byte_BEB7-Map_obj32
0000C7D2 0000                       		dc.w byte_BEC2-Map_obj32
0000C7D4 0000                       		dc.w byte_BEB7-Map_obj32
0000C7D6 02                         byte_BEAC:	dc.b 2
0000C7D7 F505 0000 F0               		dc.b $F5, 5, 0,	0, $F0
0000C7DC F505 0800 00               		dc.b $F5, 5, 8,	0, 0
0000C7E1 02                         byte_BEB7:	dc.b 2
0000C7E2 F505 0004 F0               		dc.b $F5, 5, 0,	4, $F0
0000C7E7 F505 0804 00               		dc.b $F5, 5, 8,	4, 0
0000C7EC 02                         byte_BEC2:	dc.b 2
0000C7ED F505 FFFC F0               		dc.b $F5, 5, $FF, $FC, $F0
0000C7F2 F505 07FC 00               		dc.b $F5, 5, 7,	$FC, 0
0000C7F7 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000C7FC                            		even
0000C7FC                            		even
0000C7FC                            
0000C7FC                            ; ===========================================================================
0000C7FC                            ; ---------------------------------------------------------------------------
0000C7FC                            ; Object 33 - pushable blocks (MZ, LZ)
0000C7FC                            ; ---------------------------------------------------------------------------
0000C7FC                            
0000C7FC                            Obj33:					; XREF: Obj_Index
0000C7FC 7000                       		moveq	#0,d0
0000C7FE 1028 0024                  		move.b	$24(a0),d0
0000C802 323B 0000                  		move.w	Obj33_Index(pc,d0.w),d1
0000C806 4EFB 1000                  		jmp	Obj33_Index(pc,d1.w)
0000C80A                            ; ===========================================================================
0000C80A 0000                       Obj33_Index:	dc.w Obj33_Main-Obj33_Index
0000C80C 0000                       		dc.w loc_BF6E-Obj33_Index
0000C80E 0000                       		dc.w loc_C02C-Obj33_Index
0000C810                            
0000C810 1000                       Obj33_Var:	dc.b $10, 0	; object width,	frame number
0000C812 4001                       		dc.b $40, 1
0000C814                            ; ===========================================================================
0000C814                            
0000C814                            Obj33_Main:				; XREF: Obj33_Index
0000C814 5428 0024                  		addq.b	#2,$24(a0)
0000C818 117C 000F 0016             		move.b	#$F,$16(a0)
0000C81E 117C 000F 0017             		move.b	#$F,$17(a0)
0000C824 217C 0000 0000 0004        		move.l	#Map_obj33,4(a0)
0000C82C 317C 42B8 0002             		move.w	#$42B8,2(a0)	; MZ specific code
0000C832 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
0000C838 6600                       		bne.s	loc_BF16
0000C83A 317C 43DE 0002             		move.w	#$43DE,2(a0)	; LZ specific code
0000C840                            
0000C840                            loc_BF16:
0000C840 117C 0004 0001             		move.b	#4,1(a0)
0000C846 117C 0003 0018             		move.b	#3,$18(a0)
0000C84C 3168 0008 0034             		move.w	8(a0),$34(a0)
0000C852 3168 000C 0036             		move.w	$C(a0),$36(a0)
0000C858 7000                       		moveq	#0,d0
0000C85A 1028 0028                  		move.b	$28(a0),d0
0000C85E D040                       		add.w	d0,d0
0000C860 0240 000E                  		andi.w	#$E,d0
0000C864 45FB 00AA                  		lea	Obj33_Var(pc,d0.w),a2
0000C868 115A 0019                  		move.b	(a2)+,$19(a0)
0000C86C 115A 001A                  		move.b	(a2)+,$1A(a0)
0000C870 4A28 0028                  		tst.b	$28(a0)
0000C874 6700                       		beq.s	Obj33_ChkGone
0000C876 317C C2B8 0002             		move.w	#$C2B8,2(a0)
0000C87C                            
0000C87C                            Obj33_ChkGone:
0000C87C 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000C880 7000                       		moveq	#0,d0
0000C882 1028 0023                  		move.b	$23(a0),d0
0000C886 6700                       		beq.s	loc_BF6E
0000C888 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000C88E 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000C894 6600 0000                  		bne.w	DeleteObject
0000C898                            
0000C898                            loc_BF6E:				; XREF: Obj33_Index
0000C898 4A28 0032                  		tst.b	$32(a0)
0000C89C 6600 0000                  		bne.w	loc_C046
0000C8A0 7200                       		moveq	#0,d1
0000C8A2 1228 0019                  		move.b	$19(a0),d1
0000C8A6 0641 000B                  		addi.w	#$B,d1
0000C8AA 343C 0010                  		move.w	#$10,d2
0000C8AE 363C 0011                  		move.w	#$11,d3
0000C8B2 3828 0008                  		move.w	8(a0),d4
0000C8B6 6100 0000                  		bsr.w	loc_C186
0000C8BA 0C78 0200 FE10             		cmpi.w	#$200,($FFFFFE10).w ; is the level MZ act 1?
0000C8C0 6600                       		bne.s	loc_BFC6	; if not, branch
0000C8C2 08A8 0007 0028             		bclr	#7,$28(a0)
0000C8C8 3028 0008                  		move.w	8(a0),d0
0000C8CC 0C40 0A20                  		cmpi.w	#$A20,d0
0000C8D0 6500                       		bcs.s	loc_BFC6
0000C8D2 0C40 0AA1                  		cmpi.w	#$AA1,d0
0000C8D6 6400                       		bcc.s	loc_BFC6
0000C8D8 3038 F7A4                  		move.w	($FFFFF7A4).w,d0
0000C8DC 0440 001C                  		subi.w	#$1C,d0
0000C8E0 3140 000C                  		move.w	d0,$C(a0)
0000C8E4 08F8 0007 F7A4             		bset	#7,($FFFFF7A4).w
0000C8EA 08E8 0007 0028             		bset	#7,$28(a0)
0000C8F0                            
0000C8F0                            loc_BFC6:
0000C8F0 3028 0008                  		move.w	8(a0),d0
0000C8F4 0240 FF80                  		andi.w	#$FF80,d0
0000C8F8 3238 F700                  		move.w	($FFFFF700).w,d1
0000C8FC 0441 0080                  		subi.w	#$80,d1
0000C900 0241 FF80                  		andi.w	#$FF80,d1
0000C904 9041                       		sub.w	d1,d0
0000C906 0C40 0280                  		cmpi.w	#$280,d0
0000C90A 6200                       		bhi.s	loc_BFE6
0000C90C 6000 0000                  		bra.w	DisplaySprite
0000C910                            ; ===========================================================================
0000C910                            
0000C910                            loc_BFE6:
0000C910 3028 0034                  		move.w	$34(a0),d0
0000C914 0240 FF80                  		andi.w	#$FF80,d0
0000C918 3238 F700                  		move.w	($FFFFF700).w,d1
0000C91C 0441 0080                  		subi.w	#$80,d1
0000C920 0241 FF80                  		andi.w	#$FF80,d1
0000C924 9041                       		sub.w	d1,d0
0000C926 0C40 0280                  		cmpi.w	#$280,d0
0000C92A 6200                       		bhi.s	loc_C016
0000C92C 3168 0034 0008             		move.w	$34(a0),8(a0)
0000C932 3168 0036 000C             		move.w	$36(a0),$C(a0)
0000C938 117C 0004 0024             		move.b	#4,$24(a0)
0000C93E 6000                       		bra.s	loc_C02C
0000C940                            ; ===========================================================================
0000C940                            
0000C940                            loc_C016:
0000C940 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000C944 7000                       		moveq	#0,d0
0000C946 1028 0023                  		move.b	$23(a0),d0
0000C94A 6700                       		beq.s	loc_C028
0000C94C 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
0000C952                            
0000C952                            loc_C028:
0000C952 6000 0000                  		bra.w	DeleteObject
0000C956                            ; ===========================================================================
0000C956                            
0000C956                            loc_C02C:				; XREF: Obj33_Index
0000C956 6100 0000                  		bsr.w	ChkObjOnScreen2
0000C95A 6700                       		beq.s	locret_C044
0000C95C 117C 0002 0024             		move.b	#2,$24(a0)
0000C962 4228 0032                  		clr.b	$32(a0)
0000C966 4268 0010                  		clr.w	$10(a0)
0000C96A 4268 0012                  		clr.w	$12(a0)
0000C96E                            
0000C96E                            locret_C044:
0000C96E 4E75                       		rts	
0000C970                            ; ===========================================================================
0000C970                            
0000C970                            loc_C046:				; XREF: loc_BF6E
0000C970 3F28 0008                  		move.w	8(a0),-(sp)
0000C974 0C28 0004 0025             		cmpi.b	#4,$25(a0)
0000C97A 6400                       		bcc.s	loc_C056
0000C97C 6100 0000                  		bsr.w	SpeedToPos
0000C980                            
0000C980                            loc_C056:
0000C980 0828 0001 0022             		btst	#1,$22(a0)
0000C986 6700                       		beq.s	loc_C0A0
0000C988 0668 0018 0012             		addi.w	#$18,$12(a0)
0000C98E 4EB9 0000 0000             		jsr	ObjHitFloor
0000C994 4A41                       		tst.w	d1
0000C996 6A00 0000                  		bpl.w	loc_C09E
0000C99A D368 000C                  		add.w	d1,$C(a0)
0000C99E 4268 0012                  		clr.w	$12(a0)
0000C9A2 08A8 0001 0022             		bclr	#1,$22(a0)
0000C9A8 3011                       		move.w	(a1),d0
0000C9AA 0240 03FF                  		andi.w	#$3FF,d0
0000C9AE 0C40 016A                  		cmpi.w	#$16A,d0
0000C9B2 6500                       		bcs.s	loc_C09E
0000C9B4 3028 0030                  		move.w	$30(a0),d0
0000C9B8 E640                       		asr.w	#3,d0
0000C9BA 3140 0010                  		move.w	d0,$10(a0)
0000C9BE 117C 0001 0032             		move.b	#1,$32(a0)
0000C9C4 4268 000E                  		clr.w	$E(a0)
0000C9C8                            
0000C9C8                            loc_C09E:
0000C9C8 6000                       		bra.s	loc_C0E6
0000C9CA                            ; ===========================================================================
0000C9CA                            
0000C9CA                            loc_C0A0:
0000C9CA 4A68 0010                  		tst.w	$10(a0)
0000C9CE 6700 0000                  		beq.w	loc_C0D6
0000C9D2 6B00                       		bmi.s	loc_C0BC
0000C9D4 7600                       		moveq	#0,d3
0000C9D6 1628 0019                  		move.b	$19(a0),d3
0000C9DA 4EB9 0000 0000             		jsr	ObjHitWallRight
0000C9E0 4A41                       		tst.w	d1		; has block touched a wall?
0000C9E2 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000C9E4 6000                       		bra.s	loc_C0E6
0000C9E6                            ; ===========================================================================
0000C9E6                            
0000C9E6                            loc_C0BC:
0000C9E6 7600                       		moveq	#0,d3
0000C9E8 1628 0019                  		move.b	$19(a0),d3
0000C9EC 4643                       		not.w	d3
0000C9EE 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000C9F4 4A41                       		tst.w	d1		; has block touched a wall?
0000C9F6 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000C9F8 6000                       		bra.s	loc_C0E6
0000C9FA                            ; ===========================================================================
0000C9FA                            
0000C9FA                            Obj33_StopPush:
0000C9FA 4268 0010                  		clr.w	$10(a0)		; stop block moving
0000C9FE 6000                       		bra.s	loc_C0E6
0000CA00                            ; ===========================================================================
0000CA00                            
0000CA00                            loc_C0D6:
0000CA00 06A8 0000 2001 000C        		addi.l	#$2001,$C(a0)
0000CA08 0C28 00A0 000F             		cmpi.b	#-$60,$F(a0)
0000CA0E 6400                       		bcc.s	loc_C104
0000CA10                            
0000CA10                            loc_C0E6:
0000CA10 7200                       		moveq	#0,d1
0000CA12 1228 0019                  		move.b	$19(a0),d1
0000CA16 0641 000B                  		addi.w	#$B,d1
0000CA1A 343C 0010                  		move.w	#$10,d2
0000CA1E 363C 0011                  		move.w	#$11,d3
0000CA22 381F                       		move.w	(sp)+,d4
0000CA24 6100 0000                  		bsr.w	loc_C186
0000CA28 6100                       		bsr.s	Obj33_ChkLava
0000CA2A 6000 FEC4                  		bra.w	loc_BFC6
0000CA2E                            ; ===========================================================================
0000CA2E                            
0000CA2E                            loc_C104:
0000CA2E 381F                       		move.w	(sp)+,d4
0000CA30 43F8 D000                  		lea	($FFFFD000).w,a1
0000CA34 08A9 0003 0022             		bclr	#3,$22(a1)
0000CA3A 08A8 0003 0022             		bclr	#3,$22(a0)
0000CA40 6000 FECE                  		bra.w	loc_BFE6
0000CA44                            ; ===========================================================================
0000CA44                            
0000CA44                            Obj33_ChkLava:
0000CA44 0C78 0201 FE10             		cmpi.w	#$201,($FFFFFE10).w ; is the level MZ act 2?
0000CA4A 6600                       		bne.s	Obj33_ChkLava2	; if not, branch
0000CA4C 343C FFE0                  		move.w	#-$20,d2
0000CA50 0C68 0DD0 0008             		cmpi.w	#$DD0,8(a0)
0000CA56 6700                       		beq.s	Obj33_LoadLava
0000CA58 0C68 0CC0 0008             		cmpi.w	#$CC0,8(a0)
0000CA5E 6700                       		beq.s	Obj33_LoadLava
0000CA60 0C68 0BA0 0008             		cmpi.w	#$BA0,8(a0)
0000CA66 6700                       		beq.s	Obj33_LoadLava
0000CA68 4E75                       		rts	
0000CA6A                            ; ===========================================================================
0000CA6A                            
0000CA6A                            Obj33_ChkLava2:
0000CA6A 0C78 0202 FE10             		cmpi.w	#$202,($FFFFFE10).w ; is the level MZ act 3?
0000CA70 6600                       		bne.s	Obj33_NoLava	; if not, branch
0000CA72 343C 0020                  		move.w	#$20,d2
0000CA76 0C68 0560 0008             		cmpi.w	#$560,8(a0)
0000CA7C 6700                       		beq.s	Obj33_LoadLava
0000CA7E 0C68 05C0 0008             		cmpi.w	#$5C0,8(a0)
0000CA84 6700                       		beq.s	Obj33_LoadLava
0000CA86                            
0000CA86                            Obj33_NoLava:
0000CA86 4E75                       		rts	
0000CA88                            ; ===========================================================================
0000CA88                            
0000CA88                            Obj33_LoadLava:
0000CA88 6100 0000                  		bsr.w	SingleObjLoad
0000CA8C 6600                       		bne.s	locret_C184
0000CA8E 12BC 004C                  		move.b	#$4C,0(a1)	; load lava geyser object
0000CA92 3368 0008 0008             		move.w	8(a0),8(a1)
0000CA98 D569 0008                  		add.w	d2,8(a1)
0000CA9C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000CAA2 0669 0010 000C             		addi.w	#$10,$C(a1)
0000CAA8 2348 003C                  		move.l	a0,$3C(a1)
0000CAAC                            
0000CAAC                            locret_C184:
0000CAAC 4E75                       		rts	
0000CAAE                            ; ===========================================================================
0000CAAE                            
0000CAAE                            loc_C186:				; XREF: loc_BF6E
0000CAAE 1028 0025                  		move.b	$25(a0),d0
0000CAB2 6700 0000                  		beq.w	loc_C218
0000CAB6 5500                       		subq.b	#2,d0
0000CAB8 6600                       		bne.s	loc_C1AA
0000CABA 6100 B30E                  		bsr.w	ExitPlatform
0000CABE 0829 0003 0022             		btst	#3,$22(a1)
0000CAC4 6600                       		bne.s	loc_C1A4
0000CAC6 4228 0025                  		clr.b	$25(a0)
0000CACA 4E75                       		rts	
0000CACC                            ; ===========================================================================
0000CACC                            
0000CACC                            loc_C1A4:
0000CACC 3404                       		move.w	d4,d2
0000CACE 6000 B858                  		bra.w	MvSonicOnPtfm
0000CAD2                            ; ===========================================================================
0000CAD2                            
0000CAD2                            loc_C1AA:
0000CAD2 5500                       		subq.b	#2,d0
0000CAD4 6600                       		bne.s	loc_C1F2
0000CAD6 6100 0000                  		bsr.w	SpeedToPos
0000CADA 0668 0018 0012             		addi.w	#$18,$12(a0)
0000CAE0 4EB9 0000 0000             		jsr	ObjHitFloor
0000CAE6 4A41                       		tst.w	d1
0000CAE8 6A00 0000                  		bpl.w	locret_C1F0
0000CAEC D368 000C                  		add.w	d1,$C(a0)
0000CAF0 4268 0012                  		clr.w	$12(a0)
0000CAF4 4228 0025                  		clr.b	$25(a0)
0000CAF8 3011                       		move.w	(a1),d0
0000CAFA 0240 03FF                  		andi.w	#$3FF,d0
0000CAFE 0C40 016A                  		cmpi.w	#$16A,d0
0000CB02 6500                       		bcs.s	locret_C1F0
0000CB04 3028 0030                  		move.w	$30(a0),d0
0000CB08 E640                       		asr.w	#3,d0
0000CB0A 3140 0010                  		move.w	d0,$10(a0)
0000CB0E 117C 0001 0032             		move.b	#1,$32(a0)
0000CB14 4268 000E                  		clr.w	$E(a0)
0000CB18                            
0000CB18                            locret_C1F0:
0000CB18 4E75                       		rts	
0000CB1A                            ; ===========================================================================
0000CB1A                            
0000CB1A                            loc_C1F2:
0000CB1A 6100 0000                  		bsr.w	SpeedToPos
0000CB1E 3028 0008                  		move.w	8(a0),d0
0000CB22 0240 000C                  		andi.w	#$C,d0
0000CB26 6600 0000                  		bne.w	locret_C2E4
0000CB2A 0268 FFF0 0008             		andi.w	#-$10,8(a0)
0000CB30 3168 0010 0030             		move.w	$10(a0),$30(a0)
0000CB36 4268 0010                  		clr.w	$10(a0)
0000CB3A 5528 0025                  		subq.b	#2,$25(a0)
0000CB3E 4E75                       		rts	
0000CB40                            ; ===========================================================================
0000CB40                            
0000CB40                            loc_C218:
0000CB40 6100 0000                  		bsr.w	loc_FAC8
0000CB44 4A44                       		tst.w	d4
0000CB46 6700 0000                  		beq.w	locret_C2E4
0000CB4A 6B00 0000                  		bmi.w	locret_C2E4
0000CB4E 4A28 0032                  		tst.b	$32(a0)
0000CB52 6700                       		beq.s	loc_C230
0000CB54 6000 0000                  		bra.w	locret_C2E4
0000CB58                            ; ===========================================================================
0000CB58                            
0000CB58                            loc_C230:
0000CB58 4A40                       		tst.w	d0
0000CB5A 6700 0000                  		beq.w	locret_C2E4
0000CB5E 6B00                       		bmi.s	loc_C268
0000CB60 0829 0000 0022             		btst	#0,$22(a1)
0000CB66 6600 0000                  		bne.w	locret_C2E4
0000CB6A 3F00                       		move.w	d0,-(sp)
0000CB6C 7600                       		moveq	#0,d3
0000CB6E 1628 0019                  		move.b	$19(a0),d3
0000CB72 4EB9 0000 0000             		jsr	ObjHitWallRight
0000CB78 301F                       		move.w	(sp)+,d0
0000CB7A 4A41                       		tst.w	d1
0000CB7C 6B00 0000                  		bmi.w	locret_C2E4
0000CB80 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000CB88 7001                       		moveq	#1,d0
0000CB8A 323C 0040                  		move.w	#$40,d1
0000CB8E 6000                       		bra.s	loc_C294
0000CB90                            ; ===========================================================================
0000CB90                            
0000CB90                            loc_C268:
0000CB90 0829 0000 0022             		btst	#0,$22(a1)
0000CB96 6700                       		beq.s	locret_C2E4
0000CB98 3F00                       		move.w	d0,-(sp)
0000CB9A 7600                       		moveq	#0,d3
0000CB9C 1628 0019                  		move.b	$19(a0),d3
0000CBA0 4643                       		not.w	d3
0000CBA2 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000CBA8 301F                       		move.w	(sp)+,d0
0000CBAA 4A41                       		tst.w	d1
0000CBAC 6B00                       		bmi.s	locret_C2E4
0000CBAE 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
0000CBB6 70FF                       		moveq	#-1,d0
0000CBB8 323C FFC0                  		move.w	#-$40,d1
0000CBBC                            
0000CBBC                            loc_C294:
0000CBBC 43F8 D000                  		lea	($FFFFD000).w,a1
0000CBC0 D169 0008                  		add.w	d0,8(a1)
0000CBC4 3341 0014                  		move.w	d1,$14(a1)
0000CBC8 337C 0000 0010             		move.w	#0,$10(a1)
0000CBCE 3F00                       		move.w	d0,-(sp)
0000CBD0 303C 00A7                  		move.w	#$A7,d0
0000CBD4 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play pushing sound
0000CBDA 301F                       		move.w	(sp)+,d0
0000CBDC 4A28 0028                  		tst.b	$28(a0)
0000CBE0 6B00                       		bmi.s	locret_C2E4
0000CBE2 3F00                       		move.w	d0,-(sp)
0000CBE4 4EB9 0000 0000             		jsr	ObjHitFloor
0000CBEA 301F                       		move.w	(sp)+,d0
0000CBEC 0C41 0004                  		cmpi.w	#4,d1
0000CBF0 6F00                       		ble.s	loc_C2E0
0000CBF2 317C 0400 0010             		move.w	#$400,$10(a0)
0000CBF8 4A40                       		tst.w	d0
0000CBFA 6A00                       		bpl.s	loc_C2D8
0000CBFC 4468 0010                  		neg.w	$10(a0)
0000CC00                            
0000CC00                            loc_C2D8:
0000CC00 117C 0006 0025             		move.b	#6,$25(a0)
0000CC06 6000                       		bra.s	locret_C2E4
0000CC08                            ; ===========================================================================
0000CC08                            
0000CC08                            loc_C2E0:
0000CC08 D368 000C                  		add.w	d1,$C(a0)
0000CC0C                            
0000CC0C                            locret_C2E4:
0000CC0C 4E75                       		rts	
0000CC0E                            ; ===========================================================================
0000CC0E                            ; ---------------------------------------------------------------------------
0000CC0E                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000CC0E                            ; ---------------------------------------------------------------------------
0000CC0E                            Map_obj33:
0000CC0E                            	include "_maps\obj33.asm"
0000CC0E                            ; ---------------------------------------------------------------------------
0000CC0E                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000CC0E                            ; ---------------------------------------------------------------------------
0000CC0E 0000                       		dc.w byte_C2EA-Map_obj33
0000CC10 0000                       		dc.w byte_C2F0-Map_obj33
0000CC12 01                         byte_C2EA:	dc.b 1
0000CC13 F00F 0008 F0               		dc.b $F0, $F, 0, 8, $F0	; single block
0000CC18 04                         byte_C2F0:	dc.b 4
0000CC19 F00F 0008 C0               		dc.b $F0, $F, 0, 8, $C0	; row of 4 blocks
0000CC1E F00F 0008 E0               		dc.b $F0, $F, 0, 8, $E0
0000CC23 F00F 0008 00               		dc.b $F0, $F, 0, 8, 0
0000CC28 F00F 0008 20               		dc.b $F0, $F, 0, 8, $20
0000CC2E 00                         		even
0000CC2E 00                         		even
0000CC2E                            
0000CC2E                            ; ===========================================================================
0000CC2E                            ; ---------------------------------------------------------------------------
0000CC2E                            ; Object 34 - zone title cards
0000CC2E                            ; ---------------------------------------------------------------------------
0000CC2E                            Obj34:					; XREF: Obj_Index
0000CC2E 7000                       		moveq	#0,d0
0000CC30 1028 0024                  		move.b	$24(a0),d0
0000CC34 323B 0000                  		move.w	Obj34_Index(pc,d0.w),d1
0000CC38 4EFB 1000                  		jmp	Obj34_Index(pc,d1.w)
0000CC3C                            ; ===========================================================================
0000CC3C 0000                       Obj34_Index:	dc.w Obj34_CheckSBZ3-Obj34_Index
0000CC3E 0000                       		dc.w Obj34_ChkPos-Obj34_Index
0000CC40 0000                       		dc.w Obj34_Wait-Obj34_Index
0000CC42 0000                       		dc.w Obj34_Wait-Obj34_Index
0000CC44                            ; ===========================================================================
0000CC44                            
0000CC44                            Obj34_CheckSBZ3:			; XREF: Obj34_Index
0000CC44 2248                       		movea.l	a0,a1
0000CC46 7000                       		moveq	#0,d0
0000CC48 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000CC4C 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; check if level is	SBZ 3
0000CC52 6600                       		bne.s	Obj34_CheckFZ
0000CC54 7005                       		moveq	#5,d0		; load title card number 5 (SBZ)
0000CC56                            
0000CC56                            Obj34_CheckFZ:
0000CC56 3400                       		move.w	d0,d2
0000CC58 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; check if level is	FZ
0000CC5E 6600                       		bne.s	Obj34_LoadConfig
0000CC60 7006                       		moveq	#6,d0		; load title card number 6 (FZ)
0000CC62 740B                       		moveq	#$B,d2		; use "FINAL" mappings
0000CC64                            
0000CC64                            Obj34_LoadConfig:
0000CC64 47F9 0000 0000             		lea	(Obj34_ConData).l,a3
0000CC6A E948                       		lsl.w	#4,d0
0000CC6C D6C0                       		adda.w	d0,a3
0000CC6E 45F9 0000 0000             		lea	(Obj34_ItemData).l,a2
0000CC74 7203                       		moveq	#3,d1
0000CC76                            
0000CC76                            Obj34_Loop:
0000CC76 12BC 0034                  		move.b	#$34,0(a1)
0000CC7A 3353 0008                  		move.w	(a3),8(a1)	; load start x-position
0000CC7E 335B 0032                  		move.w	(a3)+,$32(a1)	; load finish x-position (same as start)
0000CC82 335B 0030                  		move.w	(a3)+,$30(a1)	; load main x-position
0000CC86 335A 000A                  		move.w	(a2)+,$A(a1)
0000CC8A 135A 0024                  		move.b	(a2)+,$24(a1)
0000CC8E 101A                       		move.b	(a2)+,d0
0000CC90 6600                       		bne.s	Obj34_ActNumber
0000CC92 1002                       		move.b	d2,d0
0000CC94                            
0000CC94                            Obj34_ActNumber:
0000CC94 0C00 0007                  		cmpi.b	#7,d0
0000CC98 6600                       		bne.s	Obj34_MakeSprite
0000CC9A D038 FE11                  		add.b	($FFFFFE11).w,d0
0000CC9E 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w
0000CCA4 6600                       		bne.s	Obj34_MakeSprite
0000CCA6 5300                       		subq.b	#1,d0
0000CCA8                            
0000CCA8                            Obj34_MakeSprite:
0000CCA8 1340 001A                  		move.b	d0,$1A(a1)	; display frame	number d0
0000CCAC 237C 0000 0000 0004        		move.l	#Map_obj34,4(a1)
0000CCB4 337C 8580 0002             		move.w	#$8580,2(a1)
0000CCBA 137C 0078 0019             		move.b	#$78,$19(a1)
0000CCC0 137C 0000 0001             		move.b	#0,1(a1)
0000CCC6 137C 0000 0018             		move.b	#0,$18(a1)
0000CCCC 337C 003C 001E             		move.w	#60,$1E(a1)	; set time delay to 1 second
0000CCD2 43E9 0040                  		lea	$40(a1),a1	; next object
0000CCD6 51C9 FF9E                  		dbf	d1,Obj34_Loop	; repeat sequence another 3 times
0000CCDA                            
0000CCDA                            Obj34_ChkPos:				; XREF: Obj34_Index
0000CCDA 7210                       		moveq	#$10,d1		; set horizontal speed
0000CCDC 3028 0030                  		move.w	$30(a0),d0
0000CCE0 B068 0008                  		cmp.w	8(a0),d0	; has item reached the target position?
0000CCE4 6700                       		beq.s	loc_C3C8	; if yes, branch
0000CCE6 6C00                       		bge.s	Obj34_Move
0000CCE8 4441                       		neg.w	d1
0000CCEA                            
0000CCEA                            Obj34_Move:
0000CCEA D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CCEE                            
0000CCEE                            loc_C3C8:
0000CCEE 3028 0008                  		move.w	8(a0),d0
0000CCF2 6B00                       		bmi.s	locret_C3D8
0000CCF4 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CCF8 6400                       		bcc.s	locret_C3D8	; if yes, branch
0000CCFA 6000 0000                  		bra.w	DisplaySprite
0000CCFE                            ; ===========================================================================
0000CCFE                            
0000CCFE                            locret_C3D8:
0000CCFE 4E75                       		rts	
0000CD00                            ; ===========================================================================
0000CD00                            
0000CD00                            Obj34_Wait:				; XREF: Obj34_Index
0000CD00 4A68 001E                  		tst.w	$1E(a0)		; is time remaining zero?
0000CD04 6700                       		beq.s	Obj34_ChkPos2	; if yes, branch
0000CD06 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time
0000CD0A 6000 0000                  		bra.w	DisplaySprite
0000CD0E                            ; ===========================================================================
0000CD0E                            
0000CD0E                            Obj34_ChkPos2:				; XREF: Obj34_Wait
0000CD0E 4A28 0001                  		tst.b	1(a0)
0000CD12 6A00                       		bpl.s	Obj34_ChangeArt
0000CD14 7220                       		moveq	#$20,d1
0000CD16 3028 0032                  		move.w	$32(a0),d0
0000CD1A B068 0008                  		cmp.w	8(a0),d0	; has item reached the finish position?
0000CD1E 6700                       		beq.s	Obj34_ChangeArt	; if yes, branch
0000CD20 6C00                       		bge.s	Obj34_Move2
0000CD22 4441                       		neg.w	d1
0000CD24                            
0000CD24                            Obj34_Move2:
0000CD24 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CD28 3028 0008                  		move.w	8(a0),d0
0000CD2C 6B00                       		bmi.s	locret_C412
0000CD2E 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CD32 6400                       		bcc.s	locret_C412	; if yes, branch
0000CD34 6000 0000                  		bra.w	DisplaySprite
0000CD38                            ; ===========================================================================
0000CD38                            
0000CD38                            locret_C412:
0000CD38 4E75                       		rts	
0000CD3A                            ; ===========================================================================
0000CD3A                            
0000CD3A                            Obj34_ChangeArt:			; XREF: Obj34_ChkPos2
0000CD3A 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000CD40 6600                       		bne.s	Obj34_Delete
0000CD42 7002                       		moveq	#2,d0
0000CD44 4EB9 0000 177E             		jsr	(LoadPLC).l	; load explosion patterns
0000CD4A 7000                       		moveq	#0,d0
0000CD4C 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000CD50 103B 0000                  		move.b	Obj34_AnimalPLC(pc,d0.w),d0
0000CD54 4EB9 0000 177E             		jsr	(LoadPLC).l	; load animal patterns
0000CD5A                            
0000CD5A                            Obj34_Delete:
0000CD5A 6000 0000                  		bra.w	DeleteObject
0000CD5E                            
0000CD5E                            ; ===========================================================================
0000CD5E                            Obj34_AnimalPLC:
0000CD5E 15                         		dc.b $15	; "GHZ"
0000CD5F 16                         		dc.b $16
0000CD60 17                         		dc.b $17
0000CD61 18                         		dc.b $18
0000CD62 19                         		dc.b $19
0000CD63 1A                         		dc.b $1A	; "SBZ"
0000CD64 15                         		dc.b $15	; Ending (placeholder?
0000CD65 1A                         		dc.b $1A	; MAKOTO
0000CD66                            	even
0000CD66 00D0                       Obj34_ItemData:	dc.w $D0	; y-axis position
0000CD68 0200                       		dc.b 2,	0	; routine number, frame	number (changes)
0000CD6A 00E4                       		dc.w $E4
0000CD6C 0206                       		dc.b 2,	6
0000CD6E 00EA                       		dc.w $EA
0000CD70 0207                       		dc.b 2,	7
0000CD72 00E0                       		dc.w $E0
0000CD74 020A                       		dc.b 2,	$A
0000CD76                            ; ---------------------------------------------------------------------------
0000CD76                            ; Title	card configuration data
0000CD76                            ; Format:
0000CD76                            ; 4 bytes per item (YYYY XXXX)
0000CD76                            ; 4 items per level (GREEN HILL, ZONE, ACT X, oval)
0000CD76                            ; ---------------------------------------------------------------------------
0000CD76 0000 0120 FEFC 013C 0414+  Obj34_ConData:	dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; GHZ
0000CD86 0000 0120 FEF4 0134 040C+  		dc.w 0,	$120, $FEF4, $134, $40C, $14C, $20C, $14C ; LZ
0000CD96 0000 0120 FEE0 0120 03F8+  		dc.w 0,	$120, $FEE0, $120, $3F8, $138, $1F8, $138 ; MZ
0000CDA6 0000 0120 FEFC 013C 0414+  		dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; SLZ
0000CDB6 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SYZ
0000CDC6 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SBZ
0000CDD6 0000 0120 FEE4 0124 03EC+  		dc.w 0,	$120, $FEE4, $124, $3EC, $3EC, $1EC, $12C ; FZ
0000CDE6 0000 0120 FEFC 013C 0414+  		dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; GHZ
0000CDF6 0000 0120 FEFC 013C 0414+  		dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; GHZ
0000CE06                            ; ===========================================================================
0000CE06                            ; ---------------------------------------------------------------------------
0000CE06                            ; Object 39 - "GAME OVER" and "TIME OVER"
0000CE06                            ; ---------------------------------------------------------------------------
0000CE06                            
0000CE06                            Obj39:					; XREF: Obj_Index
0000CE06 7000                       		moveq	#0,d0
0000CE08 1028 0024                  		move.b	$24(a0),d0
0000CE0C 323B 0000                  		move.w	Obj39_Index(pc,d0.w),d1
0000CE10 4EFB 1000                  		jmp	Obj39_Index(pc,d1.w)
0000CE14                            ; ===========================================================================
0000CE14 0000                       Obj39_Index:	dc.w Obj39_ChkPLC-Obj39_Index
0000CE16 0000                       		dc.w loc_C50C-Obj39_Index
0000CE18 0000                       		dc.w Obj39_Wait-Obj39_Index
0000CE1A                            ; ===========================================================================
0000CE1A                            
0000CE1A                            Obj39_ChkPLC:				; XREF: Obj39_Index
0000CE1A 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000CE1E 6700                       		beq.s	Obj39_Main	; if yes, branch
0000CE20 4E75                       		rts	
0000CE22                            ; ===========================================================================
0000CE22                            
0000CE22                            Obj39_Main:
0000CE22 5428 0024                  		addq.b	#2,$24(a0)
0000CE26 317C 0050 0008             		move.w	#$50,8(a0)	; set x-position
0000CE2C 0828 0000 001A             		btst	#0,$1A(a0)	; is the object	"OVER"?
0000CE32 6700                       		beq.s	loc_C4EC	; if not, branch
0000CE34 317C 01F0 0008             		move.w	#$1F0,8(a0)	; set x-position for "OVER"
0000CE3A                            
0000CE3A                            loc_C4EC:
0000CE3A 317C 00F0 000A             		move.w	#$F0,$A(a0)
0000CE40 217C 0000 0000 0004        		move.l	#Map_obj39,4(a0)
0000CE48 317C 855E 0002             		move.w	#$855E,2(a0)
0000CE4E 117C 0000 0001             		move.b	#0,1(a0)
0000CE54 117C 0000 0018             		move.b	#0,$18(a0)
0000CE5A                            
0000CE5A                            loc_C50C:				; XREF: Obj39_Index
0000CE5A 7210                       		moveq	#$10,d1		; set horizontal speed
0000CE5C 0C68 0120 0008             		cmpi.w	#$120,8(a0)	; has item reached its target position?
0000CE62 6700                       		beq.s	Obj39_SetWait	; if yes, branch
0000CE64 6500                       		bcs.s	Obj39_Move
0000CE66 4441                       		neg.w	d1
0000CE68                            
0000CE68                            Obj39_Move:
0000CE68 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CE6C 6000 0000                  		bra.w	DisplaySprite
0000CE70                            ; ===========================================================================
0000CE70                            
0000CE70                            Obj39_SetWait:				; XREF: Obj39_Main
0000CE70 317C 02D0 001E             		move.w	#720,$1E(a0)	; set time delay to 12 seconds
0000CE76 5428 0024                  		addq.b	#2,$24(a0)
0000CE7A 4E75                       		rts	
0000CE7C                            ; ===========================================================================
0000CE7C                            
0000CE7C                            Obj39_Wait:				; XREF: Obj39_Index
0000CE7C 1038 F605                  		move.b	($FFFFF605).w,d0
0000CE80 0200 0070                  		andi.b	#$70,d0		; is button A, B or C pressed?
0000CE84 6600                       		bne.s	Obj39_ChgMode	; if yes, branch
0000CE86 0828 0000 001A             		btst	#0,$1A(a0)
0000CE8C 6600                       		bne.s	Obj39_Display
0000CE8E 4A68 001E                  		tst.w	$1E(a0)		; has time delay reached zero?
0000CE92 6700                       		beq.s	Obj39_ChgMode	; if yes, branch
0000CE94 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000CE98 6000 0000                  		bra.w	DisplaySprite
0000CE9C                            ; ===========================================================================
0000CE9C                            
0000CE9C                            Obj39_ChgMode:				; XREF: Obj39_Wait
0000CE9C 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is time over flag set?
0000CEA0 6600                       		bne.s	Obj39_ResetLvl	; if yes, branch
0000CEA2 11FC 0014 F600             		move.b	#$14,($FFFFF600).w ; set mode to $14 (continue screen)
0000CEA8 4A38 FE18                  		tst.b	($FFFFFE18).w	; do you have any continues?
0000CEAC 6600                       		bne.s	Obj39_Display	; if yes, branch
0000CEAE 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set mode to 0 (Sega screen)
0000CEB4 6000                       		bra.s	Obj39_Display
0000CEB6                            ; ===========================================================================
0000CEB6                            
0000CEB6                            Obj39_ResetLvl:				; XREF: Obj39_ChgMode
0000CEB6 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000CEBC                            
0000CEBC                            Obj39_Display:				; XREF: Obj39_ChgMode
0000CEBC 6000 0000                  		bra.w	DisplaySprite
0000CEC0                            ; ===========================================================================
0000CEC0                            ; ---------------------------------------------------------------------------
0000CEC0                            ; Object 3A - "SONIC GOT THROUGH" title	card
0000CEC0                            ; ---------------------------------------------------------------------------
0000CEC0                            
0000CEC0                            Obj3A:					; XREF: Obj_Index
0000CEC0 7000                       		moveq	#0,d0
0000CEC2 1028 0024                  		move.b	$24(a0),d0
0000CEC6 323B 0000                  		move.w	Obj3A_Index(pc,d0.w),d1
0000CECA 4EFB 1000                  		jmp	Obj3A_Index(pc,d1.w)
0000CECE                            ; ===========================================================================
0000CECE 0000                       Obj3A_Index:	dc.w Obj3A_ChkPLC-Obj3A_Index
0000CED0 0000                       		dc.w Obj3A_ChkPos-Obj3A_Index
0000CED2 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000CED4 0000                       		dc.w Obj3A_TimeBonus-Obj3A_Index
0000CED6 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000CED8 0000                       		dc.w Obj3A_NextLevel-Obj3A_Index
0000CEDA 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000CEDC 0000                       		dc.w Obj3A_ChkPos2-Obj3A_Index
0000CEDE 0000                       		dc.w loc_C766-Obj3A_Index
0000CEE0                            ; ===========================================================================
0000CEE0                            
0000CEE0                            Obj3A_ChkPLC:				; XREF: Obj3A_Index
0000CEE0 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000CEE4 6700                       		beq.s	Obj3A_Main	; if yes, branch
0000CEE6 4E75                       		rts	
0000CEE8                            ; ===========================================================================
0000CEE8                            
0000CEE8                            Obj3A_Main:
0000CEE8 2248                       		movea.l	a0,a1
0000CEEA 45F9 0000 0000             		lea	(Obj3A_Config).l,a2
0000CEF0 7206                       		moveq	#6,d1
0000CEF2                            
0000CEF2                            Obj3A_Loop:
0000CEF2 12BC 003A                  		move.b	#$3A,0(a1)
0000CEF6 3352 0008                  		move.w	(a2),8(a1)	; load start x-position
0000CEFA 335A 0032                  		move.w	(a2)+,$32(a1)	; load finish x-position (same as start)
0000CEFE 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000CF02 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000CF06 135A 0024                  		move.b	(a2)+,$24(a1)
0000CF0A 101A                       		move.b	(a2)+,d0
0000CF0C 0C00 0006                  		cmpi.b	#6,d0
0000CF10 6600                       		bne.s	loc_C5CA
0000CF12 D038 FE11                  		add.b	($FFFFFE11).w,d0 ; add act number to frame number
0000CF16                            
0000CF16                            loc_C5CA:
0000CF16 1340 001A                  		move.b	d0,$1A(a1)
0000CF1A 237C 0000 0000 0004        		move.l	#Map_obj3A,4(a1)
0000CF22 337C 8580 0002             		move.w	#$8580,2(a1)
0000CF28 137C 0000 0001             		move.b	#0,1(a1)
0000CF2E 43E9 0040                  		lea	$40(a1),a1
0000CF32 51C9 FFBE                  		dbf	d1,Obj3A_Loop	; repeat 6 times
0000CF36                            
0000CF36                            Obj3A_ChkPos:				; XREF: Obj3A_Index
0000CF36 7210                       		moveq	#$10,d1		; set horizontal speed
0000CF38 3028 0030                  		move.w	$30(a0),d0
0000CF3C B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000CF40 6700                       		beq.s	loc_C61A	; if yes, branch
0000CF42 6C00                       		bge.s	Obj3A_Move
0000CF44 4441                       		neg.w	d1
0000CF46                            
0000CF46                            Obj3A_Move:
0000CF46 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CF4A                            
0000CF4A                            loc_C5FE:				; XREF: loc_C61A
0000CF4A 3028 0008                  		move.w	8(a0),d0
0000CF4E 6B00                       		bmi.s	locret_C60E
0000CF50 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CF54 6400                       		bcc.s	locret_C60E	; if yes, branch
0000CF56 6000 0000                  		bra.w	DisplaySprite
0000CF5A                            ; ===========================================================================
0000CF5A                            
0000CF5A                            locret_C60E:
0000CF5A 4E75                       		rts	
0000CF5C                            ; ===========================================================================
0000CF5C                            
0000CF5C                            loc_C610:				; XREF: loc_C61A
0000CF5C 117C 000E 0024             		move.b	#$E,$24(a0)
0000CF62 6000 0000                  		bra.w	Obj3A_ChkPos2
0000CF66                            ; ===========================================================================
0000CF66                            
0000CF66                            loc_C61A:				; XREF: Obj3A_ChkPos
0000CF66 0C38 000E D724             		cmpi.b	#$E,($FFFFD724).w
0000CF6C 67EE                       		beq.s	loc_C610
0000CF6E 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000CF74 66D4                       		bne.s	loc_C5FE
0000CF76 5428 0024                  		addq.b	#2,$24(a0)
0000CF7A 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000CF80                            
0000CF80                            Obj3A_Wait:				; XREF: Obj3A_Index
0000CF80 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000CF84 6600                       		bne.s	Obj3A_Display
0000CF86 5428 0024                  		addq.b	#2,$24(a0)
0000CF8A                            
0000CF8A                            Obj3A_Display:
0000CF8A 6000 0000                  		bra.w	DisplaySprite
0000CF8E                            ; ===========================================================================
0000CF8E                            
0000CF8E                            Obj3A_TimeBonus:			; XREF: Obj3A_Index
0000CF8E 6100 0000                  		bsr.w	DisplaySprite
0000CF92 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set time/ring bonus update flag
0000CF98 7000                       		moveq	#0,d0
0000CF9A 4A78 F7D2                  		tst.w	($FFFFF7D2).w	; is time bonus	= zero?
0000CF9E 6700                       		beq.s	Obj3A_RingBonus	; if yes, branch
0000CFA0 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000CFA4 0478 000A F7D2             		subi.w	#10,($FFFFF7D2).w ; subtract 10	from time bonus
0000CFAA                            
0000CFAA                            Obj3A_RingBonus:
0000CFAA 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000CFAE 6700                       		beq.s	Obj3A_ChkBonus	; if yes, branch
0000CFB0 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000CFB4 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000CFBA                            
0000CFBA                            Obj3A_ChkBonus:
0000CFBA 4A40                       		tst.w	d0		; is there any bonus?
0000CFBC 6600                       		bne.s	Obj3A_AddBonus	; if yes, branch
0000CFBE 303C 00C5                  		move.w	#$C5,d0
0000CFC2 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000CFC8 5428 0024                  		addq.b	#2,$24(a0)
0000CFCC 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w
0000CFD2 6600                       		bne.s	Obj3A_SetDelay
0000CFD4 5828 0024                  		addq.b	#4,$24(a0)
0000CFD8                            
0000CFD8                            Obj3A_SetDelay:
0000CFD8 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000CFDE                            
0000CFDE                            locret_C692:
0000CFDE 4E75                       		rts	
0000CFE0                            ; ===========================================================================
0000CFE0                            
0000CFE0                            Obj3A_AddBonus:				; XREF: Obj3A_ChkBonus
0000CFE0 4EB9 0000 0000             		jsr	AddPoints
0000CFE6 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000CFEA 0200 0003                  		andi.b	#3,d0
0000CFEE 66EE                       		bne.s	locret_C692
0000CFF0 303C 00CD                  		move.w	#$CD,d0
0000CFF4 4EF9 0000 159A             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000CFFA                            ; ===========================================================================
0000CFFA                            
0000CFFA                            Obj3A_NextLevel:			; XREF: Obj3A_Index
0000CFFA 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000CFFE 0240 0007                  		andi.w	#7,d0
0000D002 E748                       		lsl.w	#3,d0
0000D004 1238 FE11                  		move.b	($FFFFFE11).w,d1
0000D008 0241 0003                  		andi.w	#3,d1
0000D00C D241                       		add.w	d1,d1
0000D00E D041                       		add.w	d1,d0
0000D010 303B 0000                  		move.w	LevelOrder(pc,d0.w),d0 ; load level from level order array
0000D014 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
0000D018 4A40                       		tst.w	d0
0000D01A 6600                       		bne.s	Obj3A_ChkSS
0000D01C 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set game mode to level (00)
0000D022 6000                       		bra.s	Obj3A_Display2
0000D024                            ; ===========================================================================
0000D024                            
0000D024                            Obj3A_ChkSS:				; XREF: Obj3A_NextLevel
0000D024 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
0000D028 4A38 F7CD                  		tst.b	($FFFFF7CD).w	; has Sonic jumped into	a giant	ring?
0000D02C 6700                       		beq.s	loc_C6EA	; if not, branch
0000D02E 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set game mode to Special Stage (10)
0000D034 6000                       		bra.s	Obj3A_Display2
0000D036                            ; ===========================================================================
0000D036                            
0000D036                            loc_C6EA:				; XREF: Obj3A_ChkSS
0000D036 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000D03C                            
0000D03C                            Obj3A_Display2:				; XREF: Obj3A_NextLevel, Obj3A_ChkSS
0000D03C 6000 0000                  		bra.w	DisplaySprite
0000D040                            ; ===========================================================================
0000D040                            ; ---------------------------------------------------------------------------
0000D040                            ; Level	order array
0000D040                            ; ---------------------------------------------------------------------------
0000D040                            LevelOrder:	incbin	misc\lvl_ord.bin
0000D078                            		even
0000D078                            ; ===========================================================================
0000D078                            
0000D078                            Obj3A_ChkPos2:				; XREF: Obj3A_Index
0000D078 7220                       		moveq	#$20,d1		; set horizontal speed
0000D07A 3028 0032                  		move.w	$32(a0),d0
0000D07E B068 0008                  		cmp.w	8(a0),d0	; has item reached its finish position?
0000D082 6700                       		beq.s	Obj3A_SBZ2	; if yes, branch
0000D084 6C00                       		bge.s	Obj3A_Move2
0000D086 4441                       		neg.w	d1
0000D088                            
0000D088                            Obj3A_Move2:
0000D088 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000D08C 3028 0008                  		move.w	8(a0),d0
0000D090 6B00                       		bmi.s	locret_C748
0000D092 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000D096 6400                       		bcc.s	locret_C748	; if yes, branch
0000D098 6000 0000                  		bra.w	DisplaySprite
0000D09C                            ; ===========================================================================
0000D09C                            
0000D09C                            locret_C748:
0000D09C 4E75                       		rts	
0000D09E                            ; ===========================================================================
0000D09E                            
0000D09E                            Obj3A_SBZ2:				; XREF: Obj3A_ChkPos2
0000D09E 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000D0A4 6600 0000                  		bne.w	DeleteObject
0000D0A8 5428 0024                  		addq.b	#2,$24(a0)
0000D0AC 4238 F7CC                  		clr.b	($FFFFF7CC).w	; unlock controls
0000D0B0 303C 008D                  		move.w	#$8D,d0
0000D0B4 4EF9 0000 1594             		jmp	(PlaySound).l	; play FZ music
0000D0BA                            ; ===========================================================================
0000D0BA                            
0000D0BA                            loc_C766:				; XREF: Obj3A_Index
0000D0BA 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0000D0BE 0C78 2100 F72A             		cmpi.w	#$2100,($FFFFF72A).w
0000D0C4 6700 0000                  		beq.w	DeleteObject
0000D0C8 4E75                       		rts	
0000D0CA                            ; ===========================================================================
0000D0CA 0004 0124 00BC             Obj3A_Config:	dc.w 4,	$124, $BC	; x-start, x-main, y-main
0000D0D0 0200                       		dc.b 2,	0		; routine number, frame	number (changes)
0000D0D2 FEE0 0120 00D0             		dc.w $FEE0, $120, $D0
0000D0D8 0201                       		dc.b 2,	1
0000D0DA 040C 014C 00D6             		dc.w $40C, $14C, $D6
0000D0E0 0206                       		dc.b 2,	6
0000D0E2 0520 0120 00EC             		dc.w $520, $120, $EC
0000D0E8 0202                       		dc.b 2,	2
0000D0EA 0540 0120 00FC             		dc.w $540, $120, $FC
0000D0F0 0203                       		dc.b 2,	3
0000D0F2 0560 0120 010C             		dc.w $560, $120, $10C
0000D0F8 0204                       		dc.b 2,	4
0000D0FA 020C 014C 00CC             		dc.w $20C, $14C, $CC
0000D100 0205                       		dc.b 2,	5
0000D102                            ; ===========================================================================
0000D102                            ; ---------------------------------------------------------------------------
0000D102                            ; Object 7E - special stage results screen
0000D102                            ; ---------------------------------------------------------------------------
0000D102                            
0000D102                            Obj7E:					; XREF: Obj_Index
0000D102 7000                       		moveq	#0,d0
0000D104 1028 0024                  		move.b	$24(a0),d0
0000D108 323B 0000                  		move.w	Obj7E_Index(pc,d0.w),d1
0000D10C 4EFB 1000                  		jmp	Obj7E_Index(pc,d1.w)
0000D110                            ; ===========================================================================
0000D110 0000                       Obj7E_Index:	dc.w Obj7E_ChkPLC-Obj7E_Index
0000D112 0000                       		dc.w Obj7E_ChkPos-Obj7E_Index
0000D114 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000D116 0000                       		dc.w Obj7E_RingBonus-Obj7E_Index
0000D118 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000D11A 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000D11C 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000D11E 0000                       		dc.w Obj7E_Continue-Obj7E_Index
0000D120 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000D122 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000D124 0000                       		dc.w loc_C91A-Obj7E_Index
0000D126                            ; ===========================================================================
0000D126                            
0000D126                            Obj7E_ChkPLC:				; XREF: Obj7E_Index
0000D126 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000D12A 6700                       		beq.s	Obj7E_Main	; if yes, branch
0000D12C 4E75                       		rts	
0000D12E                            ; ===========================================================================
0000D12E                            
0000D12E                            Obj7E_Main:
0000D12E 2248                       		movea.l	a0,a1
0000D130 45F9 0000 0000             		lea	(Obj7E_Config).l,a2
0000D136 7203                       		moveq	#3,d1
0000D138 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	50 or more rings?
0000D13E 6500                       		bcs.s	Obj7E_Loop	; if no, branch
0000D140 5241                       		addq.w	#1,d1		; if yes, add 1	to d1 (number of sprites)
0000D142                            
0000D142                            Obj7E_Loop:
0000D142 12BC 007E                  		move.b	#$7E,0(a1)
0000D146 335A 0008                  		move.w	(a2)+,8(a1)	; load start x-position
0000D14A 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000D14E 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000D152 135A 0024                  		move.b	(a2)+,$24(a1)
0000D156 135A 001A                  		move.b	(a2)+,$1A(a1)
0000D15A 237C 0000 0000 0004        		move.l	#Map_obj7E,4(a1)
0000D162 337C 8580 0002             		move.w	#$8580,2(a1)
0000D168 137C 0000 0001             		move.b	#0,1(a1)
0000D16E 43E9 0040                  		lea	$40(a1),a1
0000D172 51C9 FFCE                  		dbf	d1,Obj7E_Loop	; repeat sequence 3 or 4 times
0000D176                            
0000D176 7007                       		moveq	#7,d0
0000D178 1238 FE57                  		move.b	($FFFFFE57).w,d1
0000D17C 6700                       		beq.s	loc_C842
0000D17E 7000                       		moveq	#0,d0
0000D180 0C01 0006                  		cmpi.b	#6,d1		; do you have all chaos	emeralds?
0000D184 6600                       		bne.s	loc_C842	; if not, branch
0000D186 7008                       		moveq	#8,d0		; load "Sonic got them all" text
0000D188 317C 0018 0008             		move.w	#$18,8(a0)
0000D18E 317C 0118 0030             		move.w	#$118,$30(a0)	; change position of text
0000D194                            
0000D194                            loc_C842:
0000D194 1140 001A                  		move.b	d0,$1A(a0)
0000D198                            
0000D198                            Obj7E_ChkPos:				; XREF: Obj7E_Index
0000D198 7210                       		moveq	#$10,d1		; set horizontal speed
0000D19A 3028 0030                  		move.w	$30(a0),d0
0000D19E B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000D1A2 6700                       		beq.s	loc_C86C	; if yes, branch
0000D1A4 6C00                       		bge.s	Obj7E_Move
0000D1A6 4441                       		neg.w	d1
0000D1A8                            
0000D1A8                            Obj7E_Move:
0000D1A8 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000D1AC                            
0000D1AC                            loc_C85A:				; XREF: loc_C86C
0000D1AC 3028 0008                  		move.w	8(a0),d0
0000D1B0 6B00                       		bmi.s	locret_C86A
0000D1B2 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000D1B6 6400                       		bcc.s	locret_C86A	; if yes, branch
0000D1B8 6000 0000                  		bra.w	DisplaySprite
0000D1BC                            ; ===========================================================================
0000D1BC                            
0000D1BC                            locret_C86A:
0000D1BC 4E75                       		rts	
0000D1BE                            ; ===========================================================================
0000D1BE                            
0000D1BE                            loc_C86C:				; XREF: Obj7E_ChkPos
0000D1BE 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000D1C4 66E6                       		bne.s	loc_C85A
0000D1C6 5428 0024                  		addq.b	#2,$24(a0)
0000D1CA 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000D1D0 11FC 007F D800             		move.b	#$7F,($FFFFD800).w ; load chaos	emerald	object
0000D1D6                            
0000D1D6                            Obj7E_Wait:				; XREF: Obj7E_Index
0000D1D6 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000D1DA 6600                       		bne.s	Obj7E_Display
0000D1DC 5428 0024                  		addq.b	#2,$24(a0)
0000D1E0                            
0000D1E0                            Obj7E_Display:
0000D1E0 6000 0000                  		bra.w	DisplaySprite
0000D1E4                            ; ===========================================================================
0000D1E4                            
0000D1E4                            Obj7E_RingBonus:			; XREF: Obj7E_Index
0000D1E4 6100 0000                  		bsr.w	DisplaySprite
0000D1E8 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set ring bonus update flag
0000D1EE 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000D1F2 6700                       		beq.s	loc_C8C4	; if yes, branch
0000D1F4 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000D1FA 700A                       		moveq	#10,d0		; add 10 to score
0000D1FC 4EB9 0000 0000             		jsr	AddPoints
0000D202 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000D206 0200 0003                  		andi.b	#3,d0
0000D20A 6600                       		bne.s	locret_C8EA
0000D20C 303C 00CD                  		move.w	#$CD,d0
0000D210 4EF9 0000 159A             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000D216                            ; ===========================================================================
0000D216                            
0000D216                            loc_C8C4:				; XREF: Obj7E_RingBonus
0000D216 303C 00C5                  		move.w	#$C5,d0
0000D21A 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000D220 5428 0024                  		addq.b	#2,$24(a0)
0000D224 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000D22A 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000D230 6500                       		bcs.s	locret_C8EA	; if not, branch
0000D232 317C 003C 001E             		move.w	#60,$1E(a0)	; set time delay to 1 second
0000D238 5828 0024                  		addq.b	#4,$24(a0)	; goto "Obj7E_Continue"	routine
0000D23C                            
0000D23C                            locret_C8EA:
0000D23C 4E75                       		rts	
0000D23E                            ; ===========================================================================
0000D23E                            
0000D23E                            Obj7E_Exit:				; XREF: Obj7E_Index
0000D23E 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000D244 6000 0000                  		bra.w	DisplaySprite
0000D248                            ; ===========================================================================
0000D248                            
0000D248                            Obj7E_Continue:				; XREF: Obj7E_Index
0000D248 11FC 0004 D6DA             		move.b	#4,($FFFFD6DA).w
0000D24E 11FC 0014 D6E4             		move.b	#$14,($FFFFD6E4).w
0000D254 303C 00BF                  		move.w	#$BF,d0
0000D258 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play continues music
0000D25E 5428 0024                  		addq.b	#2,$24(a0)
0000D262 317C 0168 001E             		move.w	#360,$1E(a0)	; set time delay to 6 seconds
0000D268 6000 0000                  		bra.w	DisplaySprite
0000D26C                            ; ===========================================================================
0000D26C                            
0000D26C                            loc_C91A:				; XREF: Obj7E_Index
0000D26C 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000D270 0200 000F                  		andi.b	#$F,d0
0000D274 6600                       		bne.s	Obj7E_Display2
0000D276 0868 0000 001A             		bchg	#0,$1A(a0)
0000D27C                            
0000D27C                            Obj7E_Display2:
0000D27C 6000 0000                  		bra.w	DisplaySprite
0000D280                            ; ===========================================================================
0000D280 0020 0120 00C4             Obj7E_Config:	dc.w $20, $120,	$C4	; start	x-pos, main x-pos, y-pos
0000D286 0200                       		dc.b 2,	0		; rountine number, frame number
0000D288 0320 0120 0118             		dc.w $320, $120, $118
0000D28E 0201                       		dc.b 2,	1
0000D290 0360 0120 0128             		dc.w $360, $120, $128
0000D296 0202                       		dc.b 2,	2
0000D298 01EC 011C 00C4             		dc.w $1EC, $11C, $C4
0000D29E 0203                       		dc.b 2,	3
0000D2A0 03A0 0120 0138             		dc.w $3A0, $120, $138
0000D2A6 0206                       		dc.b 2,	6
0000D2A8                            ; ===========================================================================
0000D2A8                            ; ---------------------------------------------------------------------------
0000D2A8                            ; Object 7F - chaos emeralds from the special stage results screen
0000D2A8                            ; ---------------------------------------------------------------------------
0000D2A8                            
0000D2A8                            Obj7F:					; XREF: Obj_Index
0000D2A8 7000                       		moveq	#0,d0
0000D2AA 1028 0024                  		move.b	$24(a0),d0
0000D2AE 323B 0000                  		move.w	Obj7F_Index(pc,d0.w),d1
0000D2B2 4EFB 1000                  		jmp	Obj7F_Index(pc,d1.w)
0000D2B6                            ; ===========================================================================
0000D2B6 0000                       Obj7F_Index:	dc.w Obj7F_Main-Obj7F_Index
0000D2B8 0000                       		dc.w Obj7F_Flash-Obj7F_Index
0000D2BA                            
0000D2BA                            ; ---------------------------------------------------------------------------
0000D2BA                            ; X-axis positions for chaos emeralds
0000D2BA                            ; ---------------------------------------------------------------------------
0000D2BA 0110 0128 00F8 0140 00E0+  Obj7F_PosData:	dc.w $110, $128, $F8, $140, $E0, $158
0000D2C6                            ; ===========================================================================
0000D2C6                            
0000D2C6                            Obj7F_Main:				; XREF: Obj7F_Index
0000D2C6 2248                       		movea.l	a0,a1
0000D2C8 45F9 0000 D2BA             		lea	(Obj7F_PosData).l,a2
0000D2CE 7400                       		moveq	#0,d2
0000D2D0 7200                       		moveq	#0,d1
0000D2D2 1238 FE57                  		move.b	($FFFFFE57).w,d1 ; d1 is number	of emeralds
0000D2D6 5301                       		subq.b	#1,d1		; subtract 1 from d1
0000D2D8 6500 0000                  		bcs.w	DeleteObject	; if you have 0	emeralds, branch
0000D2DC                            
0000D2DC                            Obj7F_Loop:
0000D2DC 12BC 007F                  		move.b	#$7F,0(a1)
0000D2E0 335A 0008                  		move.w	(a2)+,8(a1)	; set x-position
0000D2E4 337C 00F0 000A             		move.w	#$F0,$A(a1)	; set y-position
0000D2EA 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0000D2EE 1633 2000                  		move.b	(a3,d2.w),d3
0000D2F2 1343 001A                  		move.b	d3,$1A(a1)
0000D2F6 1343 001C                  		move.b	d3,$1C(a1)
0000D2FA 5202                       		addq.b	#1,d2
0000D2FC 5429 0024                  		addq.b	#2,$24(a1)
0000D300 237C 0000 0000 0004        		move.l	#Map_obj7F,4(a1)
0000D308 337C 8541 0002             		move.w	#$8541,2(a1)
0000D30E 137C 0000 0001             		move.b	#0,1(a1)
0000D314 43E9 0040                  		lea	$40(a1),a1	; next object
0000D318 51C9 FFC2                  		dbf	d1,Obj7F_Loop	; loop for d1 number of	emeralds
0000D31C                            
0000D31C                            Obj7F_Flash:				; XREF: Obj7F_Index
0000D31C 1028 001A                  		move.b	$1A(a0),d0
0000D320 117C 0006 001A             		move.b	#6,$1A(a0)	; load 6th frame (blank)
0000D326 0C00 0006                  		cmpi.b	#6,d0
0000D32A 6600                       		bne.s	Obj7F_Display
0000D32C 1168 001C 001A             		move.b	$1C(a0),$1A(a0)	; load visible frame
0000D332                            
0000D332                            Obj7F_Display:
0000D332 6000 0000                  		bra.w	DisplaySprite
0000D336                            ; ===========================================================================
0000D336                            ; ---------------------------------------------------------------------------
0000D336                            ; Sprite mappings - zone title cards
0000D336                            ; ---------------------------------------------------------------------------
0000D336                            Map_obj34:
0000D336                                    include "_maps\obj34.asm"
0000D336                            Map_c5df:
0000D336 0000                       Map_c5df_0: 	dc.w Map_c5df_18-Map_c5df
0000D338 0000                       Map_c5df_2: 	dc.w Map_c5df_55-Map_c5df
0000D33A 0000                       Map_c5df_4: 	dc.w Map_c5df_C4-Map_c5df
0000D33C 0000                       Map_c5df_6: 	dc.w Map_c5df_DE-Map_c5df
0000D33E 0000                       Map_c5df_8: 	dc.w Map_c5df_134-Map_c5df
0000D340 0000                       Map_c5df_A: 	dc.w Map_c5df_19E-Map_c5df
0000D342 0000                       Map_c5df_C: 	dc.w Map_c5df_1C2-Map_c5df
0000D344 0000                       Map_c5df_E: 	dc.w Map_c5df_1D7-Map_c5df
0000D346 0000                       Map_c5df_10: 	dc.w Map_c5df_1E2-Map_c5df
0000D348 0000                       Map_c5df_12: 	dc.w Map_c5df_1ED-Map_c5df
0000D34A 0000                       Map_c5df_14: 	dc.w Map_c5df_1F8-Map_c5df
0000D34C 0000                       Map_c5df_16: 	dc.w Map_c5df_23A-Map_c5df
0000D34E 0C                         Map_c5df_18: 	dc.b $C
0000D34F F805 0008 80               	dc.b $F8, $5, $0, $8, $80
0000D354 F805 003A 90               	dc.b $F8, $5, $0, $3A, $90
0000D359 F805 0046 A0               	dc.b $F8, $5, $0, $46, $A0
0000D35E F805 002E B0               	dc.b $F8, $5, $0, $2E, $B0
0000D363 F805 0008 C0               	dc.b $F8, $5, $0, $8, $C0
0000D368 F805 001C D0               	dc.b $F8, $5, $0, $1C, $D0
0000D36D F805 004A E0               	dc.b $F8, $5, $0, $4A, $E0
0000D372 F800 0056 F0               	dc.b $F8, $0, $0, $56, $F0
0000D377 F805 003A 00               	dc.b $F8, $5, $0, $3A, $0
0000D37C F805 0032 10               	dc.b $F8, $5, $0, $32, $10
0000D381 F805 0026 20               	dc.b $F8, $5, $0, $26, $20
0000D386 F805 0026 30               	dc.b $F8, $5, $0, $26, $30
0000D38B 16                         Map_c5df_55: 	dc.b $16
0000D38C F801 0020 80               	dc.b $F8, $1, $0, $20, $80
0000D391 F800 0056 88               	dc.b $F8, $0, $0, $56, $88
0000D396 F805 0026 98               	dc.b $F8, $5, $0, $26, $98
0000D39B F801 0020 A8               	dc.b $F8, $1, $0, $20, $A8
0000D3A0 F805 0022 B0               	dc.b $F8, $5, $0, $22, $B0
0000D3A5 F805 0010 C0               	dc.b $F8, $5, $0, $10, $C0
0000D3AA F800 0056 D0               	dc.b $F8, $0, $0, $56, $D0
0000D3AF F805 0014 E0               	dc.b $F8, $5, $0, $14, $E0
0000D3B4 F801 0020 F0               	dc.b $F8, $1, $0, $20, $F0
0000D3B9 F805 0026 F8               	dc.b $F8, $5, $0, $26, $F8
0000D3BE F805 0010 08               	dc.b $F8, $5, $0, $10, $8
0000D3C3 F800 0056 18               	dc.b $F8, $0, $0, $56, $18
0000D3C8 F805 0010 28               	dc.b $F8, $5, $0, $10, $28
0000D3CD F805 0018 38               	dc.b $F8, $5, $0, $18, $38
0000D3D2 F805 0018 48               	dc.b $F8, $5, $0, $18, $48
0000D3D7 F805 003E 58               	dc.b $F8, $5, $0, $3E, $58
0000D3DC F805 0036 68               	dc.b $F8, $5, $0, $36, $68
0000D3E1 F805 0026 78               	dc.b $F8, $5, $0, $26, $78
0000D3E6 F805 0032 88               	dc.b $F8, $5, $0, $32, $88
0000D3EB F805 003A 98               	dc.b $F8, $5, $0, $3A, $98
0000D3F0 F805 0010 A8               	dc.b $F8, $5, $0, $10, $A8
0000D3F5 F805 003A B8               	dc.b $F8, $5, $0, $3A, $B8
0000D3FA 05                         Map_c5df_C4: 	dc.b $5
0000D3FB F805 002A 80               	dc.b $F8, $5, $0, $2A, $80
0000D400 F805 0000 90               	dc.b $F8, $5, $0, $0, $90
0000D405 F805 003A A0               	dc.b $F8, $5, $0, $3A, $A0
0000D40A F805 0004 B0               	dc.b $F8, $5, $0, $4, $B0
0000D40F F805 0026 C0               	dc.b $F8, $5, $0, $26, $C0
0000D414 11                         Map_c5df_DE: 	dc.b $11
0000D415 F805 000C 80               	dc.b $F8, $5, $0, $C, $80
0000D41A F805 0032 90               	dc.b $F8, $5, $0, $32, $90
0000D41F F805 002E A0               	dc.b $F8, $5, $0, $2E, $A0
0000D424 F805 0042 B0               	dc.b $F8, $5, $0, $42, $B0
0000D429 F800 0056 C0               	dc.b $F8, $0, $0, $56, $C0
0000D42E F805 0018 D0               	dc.b $F8, $5, $0, $18, $D0
0000D433 F805 0010 E0               	dc.b $F8, $5, $0, $10, $E0
0000D438 F805 0042 F0               	dc.b $F8, $5, $0, $42, $F0
0000D43D F800 0056 00               	dc.b $F8, $0, $0, $56, $0
0000D442 F805 003A 10               	dc.b $F8, $5, $0, $3A, $10
0000D447 F801 0020 20               	dc.b $F8, $1, $0, $20, $20
0000D44C F805 000C 28               	dc.b $F8, $5, $0, $C, $28
0000D451 F805 0032 38               	dc.b $F8, $5, $0, $32, $38
0000D456 F805 0042 48               	dc.b $F8, $5, $0, $42, $48
0000D45B F805 001C 58               	dc.b $F8, $5, $0, $1C, $58
0000D460 F801 0020 68               	dc.b $F8, $1, $0, $20, $68
0000D465 F805 003E 70               	dc.b $F8, $5, $0, $3E, $70
0000D46A 15                         Map_c5df_134: 	dc.b $15
0000D46B F805 0042 80               	dc.b $F8, $5, $0, $42, $80
0000D470 F805 001C 90               	dc.b $F8, $5, $0, $1C, $90
0000D475 F805 0010 A0               	dc.b $F8, $5, $0, $10, $A0
0000D47A F800 0056 B0               	dc.b $F8, $0, $0, $56, $B0
0000D47F F805 0036 C0               	dc.b $F8, $5, $0, $36, $C0
0000D484 F801 0020 D0               	dc.b $F8, $1, $0, $20, $D0
0000D489 F805 0018 D8               	dc.b $F8, $5, $0, $18, $D8
0000D48E F800 0056 E8               	dc.b $F8, $0, $0, $56, $E8
0000D493 F805 0014 F8               	dc.b $F8, $5, $0, $14, $F8
0000D498 F805 003A 08               	dc.b $F8, $5, $0, $3A, $8
0000D49D F805 0032 18               	dc.b $F8, $5, $0, $32, $18
0000D4A2 F805 002A 28               	dc.b $F8, $5, $0, $2A, $28
0000D4A7 F800 0056 38               	dc.b $F8, $0, $0, $56, $38
0000D4AC F805 0004 48               	dc.b $F8, $5, $0, $4, $48
0000D4B1 F805 0000 58               	dc.b $F8, $5, $0, $0, $58
0000D4B6 F805 003A 68               	dc.b $F8, $5, $0, $3A, $68
0000D4BB F805 002E 78               	dc.b $F8, $5, $0, $2E, $78
0000D4C0 F805 004A 88               	dc.b $F8, $5, $0, $4A, $88
0000D4C5 F805 0000 98               	dc.b $F8, $5, $0, $0, $98
0000D4CA F805 003A A8               	dc.b $F8, $5, $0, $3A, $A8
0000D4CF F805 000C B8               	dc.b $F8, $5, $0, $C, $B8
0000D4D4 07                         Map_c5df_19E: 	dc.b $7
0000D4D5 F805 004E 80               	dc.b $F8, $5, $0, $4E, $80
0000D4DA F800 0056 90               	dc.b $F8, $0, $0, $56, $90
0000D4DF F805 004E A0               	dc.b $F8, $5, $0, $4E, $A0
0000D4E4 F800 0056 B0               	dc.b $F8, $0, $0, $56, $B0
0000D4E9 F805 004E C0               	dc.b $F8, $5, $0, $4E, $C0
0000D4EE F800 0056 D0               	dc.b $F8, $0, $0, $56, $D0
0000D4F3 F805 004E E0               	dc.b $F8, $5, $0, $4E, $E0
0000D4F8 04                         Map_c5df_1C2: 	dc.b $4
0000D4F9 F805 004E E0               	dc.b $F8, $5, $0, $4E, $E0
0000D4FE F805 0032 F0               	dc.b $F8, $5, $0, $32, $F0
0000D503 F805 002E 00               	dc.b $F8, $5, $0, $2E, $0
0000D508 F805 0010 10               	dc.b $F8, $5, $0, $10, $10
0000D50D 02                         Map_c5df_1D7: 	dc.b $2
0000D50E 040C 0053 EC               	dc.b $4, $C, $0, $53, $EC
0000D513 F402 0057 0C               	dc.b $F4, $2, $0, $57, $C
0000D518 02                         Map_c5df_1E2: 	dc.b $2
0000D519 040C 0053 EC               	dc.b $4, $C, $0, $53, $EC
0000D51E F406 005A 08               	dc.b $F4, $6, $0, $5A, $8
0000D523 02                         Map_c5df_1ED: 	dc.b $2
0000D524 040C 0053 EC               	dc.b $4, $C, $0, $53, $EC
0000D529 F406 0060 08               	dc.b $F4, $6, $0, $60, $8
0000D52E 0D                         Map_c5df_1F8: 	dc.b $D
0000D52F E40C 0070 F4               	dc.b $E4, $C, $0, $70, $F4
0000D534 E402 0074 14               	dc.b $E4, $2, $0, $74, $14
0000D539 EC04 0077 EC               	dc.b $EC, $4, $0, $77, $EC
0000D53E F405 0079 E4               	dc.b $F4, $5, $0, $79, $E4
0000D543 140C 1870 EC               	dc.b $14, $C, $18, $70, $EC
0000D548 0402 1874 E4               	dc.b $4, $2, $18, $74, $E4
0000D54D 0C04 1877 04               	dc.b $C, $4, $18, $77, $4
0000D552 FC05 1879 0C               	dc.b $FC, $5, $18, $79, $C
0000D557 EC08 007D FC               	dc.b $EC, $8, $0, $7D, $FC
0000D55C F40C 007C F4               	dc.b $F4, $C, $0, $7C, $F4
0000D561 FC08 007C F4               	dc.b $FC, $8, $0, $7C, $F4
0000D566 040C 007C EC               	dc.b $4, $C, $0, $7C, $EC
0000D56B 0C08 007C EC               	dc.b $C, $8, $0, $7C, $EC
0000D570 05                         Map_c5df_23A: 	dc.b $5
0000D571 F805 0014 DC               	dc.b $F8, $5, $0, $14, $DC
0000D576 F801 0020 EC               	dc.b $F8, $1, $0, $20, $EC
0000D57B F805 002E F4               	dc.b $F8, $5, $0, $2E, $F4
0000D580 F805 0000 04               	dc.b $F8, $5, $0, $0, $4
0000D585 F805 0026 14               	dc.b $F8, $5, $0, $26, $14
0000D58A                            	even
0000D58A                            	even
0000D58A                            ; ---------------------------------------------------------------------------
0000D58A                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000D58A                            ; ---------------------------------------------------------------------------
0000D58A                            Map_obj39:
0000D58A                            	include "_maps\obj39.asm"
0000D58A                            ; ---------------------------------------------------------------------------
0000D58A                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000D58A                            ; ---------------------------------------------------------------------------
0000D58A 0000                       		dc.w byte_CBAC-Map_obj39
0000D58C 0000                       		dc.w byte_CBB7-Map_obj39
0000D58E 0000                       		dc.w byte_CBC2-Map_obj39
0000D590 0000                       		dc.w byte_CBCD-Map_obj39
0000D592 02                         byte_CBAC:	dc.b 2
0000D593 F80D 0000 B8               		dc.b $F8, $D, 0, 0, $B8
0000D598 F80D 0008 D8               		dc.b $F8, $D, 0, 8, $D8
0000D59D 02                         byte_CBB7:	dc.b 2
0000D59E F80D 0014 08               		dc.b $F8, $D, 0, $14, 8
0000D5A3 F80D 000C 28               		dc.b $F8, $D, 0, $C, $28
0000D5A8 02                         byte_CBC2:	dc.b 2
0000D5A9 F809 001C C4               		dc.b $F8, 9, 0,	$1C, $C4
0000D5AE F80D 0008 DC               		dc.b $F8, $D, 0, 8, $DC
0000D5B3 02                         byte_CBCD:	dc.b 2
0000D5B4 F80D 0014 0C               		dc.b $F8, $D, 0, $14, $C
0000D5B9 F80D 000C 2C               		dc.b $F8, $D, 0, $C, $2C
0000D5BE                            		even
0000D5BE                            		even
0000D5BE                            
0000D5BE                            ; ---------------------------------------------------------------------------
0000D5BE                            ; Sprite mappings - "SONIC HAS PASSED" title card
0000D5BE                            ; ---------------------------------------------------------------------------
0000D5BE 0000                       Map_obj3A:	dc.w byte_CBEA-Map_obj3A
0000D5C0 0000                       		dc.w byte_CC13-Map_obj3A
0000D5C2 0000                       		dc.w byte_CC32-Map_obj3A
0000D5C4 0000                       		dc.w byte_CC51-Map_obj3A
0000D5C6 0000                       		dc.w byte_CC75-Map_obj3A
0000D5C8                            		;dc.w byte_CB47-Map_obj3A
0000D5C8                            		;dc.w byte_CB26-Map_obj3A
0000D5C8                            		;dc.w byte_CB31-Map_obj3A
0000D5C8                            		;dc.w byte_CB3C-Map_obj3A
0000D5C8 0F                         byte_CBEA:	dc.b $F	;  SONIC HAS | CADNIUM SULFIDE
0000D5C9 F805 0008 7C               		dc.b $F8, 5, 0, 8, $7C		; C
0000D5CE F805 0000 8C               		dc.b $F8, 5, 0, 0, $8C		; A
0000D5D3 F805 000C 9C               		dc.b $F8, 5, 0, $0C, $9C	; D
0000D5D8 F805 002E AC               		dc.b $F8, 5, 0, $2E, $AC	; N
0000D5DD F801 0020 BC               		dc.b $F8, 1, 0, $20, $BC	; I
0000D5E2 F805 0046 C4               		dc.b $F8, 5, 0, $46, $C4	; U
0000D5E7 F805 002A D4               		dc.b $F8, 5, 0, $2A, $D4	; M
0000D5EC F800 0056 E4               		dc.b $F8, 0, 0, $56, $E4	; Space
0000D5F1 F805 003E F4               		dc.b $F8, 5, 0, $3E, $F4	; S
0000D5F6 F805 0046 04               		dc.b $F8, 5, 0, $46, $4	; U
0000D5FB F805 0026 14               		dc.b $F8, 5, 0, $26, $14	; L
0000D600 F805 0014 24               		dc.b $F8, 5, 0, $14, $24	; F
0000D605 F801 0020 34               		dc.b $F8, 1, 0, $20, $34	; I
0000D60A F805 000C 3C               		dc.b $F8, 5, 0, $0C, $3C	; D
0000D60F F805 0010 4C               		dc.b $F8, 5, 0, $10, $4C	; E
0000D614 06                         byte_CC13:	dc.b 6			; PASSED
0000D615 F805 0036 D0               		dc.b $F8, 5, 0,	$36, $D0
0000D61A F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000D61F F805 003E F0               		dc.b $F8, 5, 0,	$3E, $F0
0000D624 F805 003E 00               		dc.b $F8, 5, 0,	$3E, 0
0000D629 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000D62E F805 000C 20               		dc.b $F8, 5, 0,	$C, $20
0000D633 06                         byte_CC32:	dc.b 6			; SCORE
0000D634 F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000D639 F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000D63E F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000D643 F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000D648 F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000D64D FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000D652 07                         byte_CC51:	dc.b 7			; TIME BONUS
0000D653 F80D 015A B0               		dc.b $F8, $D, 1, $5A, $B0
0000D658 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D65D F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D662 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D667 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D66C F80D FFF0 28               		dc.b $F8, $D, $FF, $F0,	$28
0000D671 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D676 07                         byte_CC75:	dc.b 7			; RING BONUS
0000D677 F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000D67C F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D681 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D686 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D68B FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D690 F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000D695 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D69A                            		even
0000D69A                            ; ---------------------------------------------------------------------------
0000D69A                            ; Sprite mappings - special stage results screen
0000D69A                            ; ---------------------------------------------------------------------------
0000D69A 0000                       Map_obj7E:	dc.w byte_CCAC-Map_obj7E
0000D69C 0000                       		dc.w byte_CCEE-Map_obj7E
0000D69E 0000                       		dc.w byte_CD0D-Map_obj7E
0000D6A0                            		;dc.w byte_CB47-Map_obj7E
0000D6A0 0000                       		dc.w byte_CD31-Map_obj7E
0000D6A2 0000                       		dc.w byte_CD46-Map_obj7E
0000D6A4 0000                       		dc.w byte_CD5B-Map_obj7E
0000D6A6 0000                       		dc.w byte_CD6B-Map_obj7E
0000D6A8 0000                       		dc.w byte_CDA8-Map_obj7E
0000D6AA 0D                         byte_CCAC:	dc.b $D			; "CHAOS EMERALDS"
0000D6AB F805 0008 90               		dc.b $F8, 5, 0,	8, $90
0000D6B0 F805 001C A0               		dc.b $F8, 5, 0,	$1C, $A0
0000D6B5 F805 0000 B0               		dc.b $F8, 5, 0,	0, $B0
0000D6BA F805 0032 C0               		dc.b $F8, 5, 0,	$32, $C0
0000D6BF F805 003E D0               		dc.b $F8, 5, 0,	$3E, $D0
0000D6C4 F805 0010 F0               		dc.b $F8, 5, 0,	$10, $F0
0000D6C9 F805 002A 00               		dc.b $F8, 5, 0,	$2A, 0
0000D6CE F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000D6D3 F805 003A 20               		dc.b $F8, 5, 0,	$3A, $20
0000D6D8 F805 0000 30               		dc.b $F8, 5, 0,	0, $30
0000D6DD F805 0026 40               		dc.b $F8, 5, 0,	$26, $40
0000D6E2 F805 000C 50               		dc.b $F8, 5, 0,	$C, $50
0000D6E7 F805 003E 60               		dc.b $F8, 5, 0,	$3E, $60
0000D6EC 06                         byte_CCEE:	dc.b 6			; "SCORE"
0000D6ED F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000D6F2 F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000D6F7 F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000D6FC F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000D701 F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000D706 FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000D70B 07                         byte_CD0D:	dc.b 7
0000D70C F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000D711 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D716 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D71B F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D720 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D725 F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000D72A F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D72F 04                         byte_CD31:	dc.b 4
0000D730 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D735 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D73A F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D73F F806 1FE3 40               		dc.b $F8, 6, $1F, $E3, $40
0000D744 04                         byte_CD46:	dc.b 4
0000D745 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D74A F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D74F F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D754 F806 1FE9 40               		dc.b $F8, 6, $1F, $E9, $40
0000D759 03                         byte_CD5B:	dc.b 3
0000D75A F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D75F F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D764 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D769 0C                         byte_CD6B:	dc.b $C			; "SPECIAL STAGE"
0000D76A F805 003E 9C               		dc.b $F8, 5, 0,	$3E, $9C
0000D76F F805 0036 AC               		dc.b $F8, 5, 0,	$36, $AC
0000D774 F805 0010 BC               		dc.b $F8, 5, 0,	$10, $BC
0000D779 F805 0008 CC               		dc.b $F8, 5, 0,	8, $CC
0000D77E F801 0020 DC               		dc.b $F8, 1, 0,	$20, $DC
0000D783 F805 0000 E4               		dc.b $F8, 5, 0,	0, $E4
0000D788 F805 0026 F4               		dc.b $F8, 5, 0,	$26, $F4
0000D78D F805 003E 14               		dc.b $F8, 5, 0,	$3E, $14
0000D792 F805 0042 24               		dc.b $F8, 5, 0,	$42, $24
0000D797 F805 0000 34               		dc.b $F8, 5, 0,	0, $34
0000D79C F805 0018 44               		dc.b $F8, 5, 0,	$18, $44
0000D7A1 F805 0010 54               		dc.b $F8, 5, 0,	$10, $54
0000D7A6 0F                         byte_CDA8:	dc.b $F			; "SONIC GOT THEM ALL"
0000D7A7 F805 003E 88               		dc.b $F8, 5, 0,	$3E, $88
0000D7AC F805 0032 98               		dc.b $F8, 5, 0,	$32, $98
0000D7B1 F805 002E A8               		dc.b $F8, 5, 0,	$2E, $A8
0000D7B6 F801 0020 B8               		dc.b $F8, 1, 0,	$20, $B8
0000D7BB F805 0008 C0               		dc.b $F8, 5, 0,	8, $C0
0000D7C0 F805 0018 D8               		dc.b $F8, 5, 0,	$18, $D8
0000D7C5 F805 0032 E8               		dc.b $F8, 5, 0,	$32, $E8
0000D7CA F805 0042 F8               		dc.b $F8, 5, 0,	$42, $F8
0000D7CF F805 0042 10               		dc.b $F8, 5, 0,	$42, $10
0000D7D4 F805 001C 20               		dc.b $F8, 5, 0,	$1C, $20
0000D7D9 F805 0010 30               		dc.b $F8, 5, 0,	$10, $30
0000D7DE F805 002A 40               		dc.b $F8, 5, 0,	$2A, $40
0000D7E3 F805 0000 58               		dc.b $F8, 5, 0,	0, $58
0000D7E8 F805 0026 68               		dc.b $F8, 5, 0,	$26, $68
0000D7ED F805 0026 78               		dc.b $F8, 5, 0,	$26, $78
0000D7F2                            		even
0000D7F2                            ; ---------------------------------------------------------------------------
0000D7F2                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000D7F2                            ; ---------------------------------------------------------------------------
0000D7F2                            Map_obj7F:
0000D7F2                            	include "_maps\obj7F.asm"
0000D7F2                            ; ---------------------------------------------------------------------------
0000D7F2                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000D7F2                            ; ---------------------------------------------------------------------------
0000D7F2 0000                       		dc.w byte_CE02-Map_obj7F
0000D7F4 0000                       		dc.w byte_CE08-Map_obj7F
0000D7F6 0000                       		dc.w byte_CE0E-Map_obj7F
0000D7F8 0000                       		dc.w byte_CE14-Map_obj7F
0000D7FA 0000                       		dc.w byte_CE1A-Map_obj7F
0000D7FC 0000                       		dc.w byte_CE20-Map_obj7F
0000D7FE 0000                       		dc.w byte_CE26-Map_obj7F
0000D800 01                         byte_CE02:	dc.b 1
0000D801 F805 2004 F8               		dc.b $F8, 5, $20, 4, $F8
0000D806 01                         byte_CE08:	dc.b 1
0000D807 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000D80C 01                         byte_CE0E:	dc.b 1
0000D80D F805 4004 F8               		dc.b $F8, 5, $40, 4, $F8
0000D812 01                         byte_CE14:	dc.b 1
0000D813 F805 6004 F8               		dc.b $F8, 5, $60, 4, $F8
0000D818 01                         byte_CE1A:	dc.b 1
0000D819 F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8
0000D81E 01                         byte_CE20:	dc.b 1
0000D81F F805 200C F8               		dc.b $F8, 5, $20, $C, $F8
0000D824 00                         byte_CE26:	dc.b 0			; Blank frame
0000D826 00                         		even
0000D826 00                         		even
0000D826                            
0000D826                            ; ===========================================================================
0000D826                            ; ---------------------------------------------------------------------------
0000D826                            ; Object 36 - spikes
0000D826                            ; ---------------------------------------------------------------------------
0000D826                            
0000D826                            Obj36:					; XREF: Obj_Index
0000D826 7000                       		moveq	#0,d0
0000D828 1028 0024                  		move.b	$24(a0),d0
0000D82C 323B 0000                  		move.w	Obj36_Index(pc,d0.w),d1
0000D830 4EFB 1000                  		jmp	Obj36_Index(pc,d1.w)
0000D834                            ; ===========================================================================
0000D834 0000                       Obj36_Index:	dc.w Obj36_Main-Obj36_Index
0000D836 0000                       		dc.w Obj36_Solid-Obj36_Index
0000D838                            
0000D838 0014                       Obj36_Var:	dc.b 0,	$14		; frame	number,	object width
0000D83A 0110                       		dc.b 1,	$10
0000D83C 0204                       		dc.b 2,	4
0000D83E 031C                       		dc.b 3,	$1C
0000D840 0440                       		dc.b 4,	$40
0000D842 0510                       		dc.b 5,	$10
0000D844                            ; ===========================================================================
0000D844                            
0000D844                            Obj36_Main:				; XREF: Obj36_Index
0000D844 5428 0024                  		addq.b	#2,$24(a0)
0000D848 217C 0000 0000 0004        		move.l	#Map_obj36,4(a0)
0000D850 317C 051B 0002             		move.w	#$51B,2(a0)
0000D856 0028 0004 0001             		ori.b	#4,1(a0)
0000D85C 117C 0004 0018             		move.b	#4,$18(a0)
0000D862 1028 0028                  		move.b	$28(a0),d0
0000D866 0228 000F 0028             		andi.b	#$F,$28(a0)
0000D86C 0240 00F0                  		andi.w	#$F0,d0
0000D870 43F9 0000 D838             		lea	(Obj36_Var).l,a1
0000D876 E648                       		lsr.w	#3,d0
0000D878 D2C0                       		adda.w	d0,a1
0000D87A 1159 001A                  		move.b	(a1)+,$1A(a0)
0000D87E 1159 0019                  		move.b	(a1)+,$19(a0)
0000D882 3168 0008 0030             		move.w	8(a0),$30(a0)
0000D888 3168 000C 0032             		move.w	$C(a0),$32(a0)
0000D88E                            
0000D88E                            Obj36_Solid:				; XREF: Obj36_Index
0000D88E 6100 0000                  		bsr.w	Obj36_Type0x	; make the object move
0000D892 343C 0004                  		move.w	#4,d2
0000D896 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is object type $5x ?
0000D89C 6700                       		beq.s	Obj36_SideWays	; if yes, branch
0000D89E 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is object type $1x ?
0000D8A4 6600                       		bne.s	Obj36_Upright	; if not, branch
0000D8A6 343C 0014                  		move.w	#$14,d2
0000D8AA                            
0000D8AA                            ; Spikes types $1x and $5x face	sideways
0000D8AA                            
0000D8AA                            Obj36_SideWays:				; XREF: Obj36_Solid
0000D8AA 323C 001B                  		move.w	#$1B,d1
0000D8AE 3602                       		move.w	d2,d3
0000D8B0 5243                       		addq.w	#1,d3
0000D8B2 3828 0008                  		move.w	8(a0),d4
0000D8B6 6100 0000                  		bsr.w	SolidObject
0000D8BA 0828 0003 0022             		btst	#3,$22(a0)
0000D8C0 6600                       		bne.s	Obj36_Display
0000D8C2 0C44 0001                  		cmpi.w	#1,d4
0000D8C6 6700                       		beq.s	Obj36_Hurt
0000D8C8 6000                       		bra.s	Obj36_Display
0000D8CA                            ; ===========================================================================
0000D8CA                            
0000D8CA                            ; Spikes types $0x, $2x, $3x and $4x face up or	down
0000D8CA                            
0000D8CA                            Obj36_Upright:				; XREF: Obj36_Solid
0000D8CA 7200                       		moveq	#0,d1
0000D8CC 1228 0019                  		move.b	$19(a0),d1
0000D8D0 0641 000B                  		addi.w	#$B,d1
0000D8D4 343C 0010                  		move.w	#$10,d2
0000D8D8 363C 0011                  		move.w	#$11,d3
0000D8DC 3828 0008                  		move.w	8(a0),d4
0000D8E0 6100 0000                  		bsr.w	SolidObject
0000D8E4 0828 0003 0022             		btst	#3,$22(a0)
0000D8EA 6600                       		bne.s	Obj36_Hurt
0000D8EC 4A44                       		tst.w	d4
0000D8EE 6A00                       		bpl.s	Obj36_Display
0000D8F0                            
0000D8F0                            Obj36_Hurt:				; XREF: Obj36_SideWays; Obj36_Upright
0000D8F0 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0000D8F4 6600                       		bne.s	Obj36_Display	; if yes, branch
0000D8F6 2F08                       		move.l	a0,-(sp)
0000D8F8 2448                       		movea.l	a0,a2
0000D8FA 41F8 D000                  		lea	($FFFFD000).w,a0
0000D8FE 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000D904 6400                       		bcc.s	loc_CF20
0000D906 2628 000C                  		move.l	$C(a0),d3
0000D90A 3028 0012                  		move.w	$12(a0),d0
0000D90E 48C0                       		ext.l	d0
0000D910 E180                       		asl.l	#8,d0
0000D912 9680                       		sub.l	d0,d3
0000D914 2143 000C                  		move.l	d3,$C(a0)
0000D918 4EB9 0000 0000             		jsr	HurtSonic
0000D91E                            
0000D91E                            loc_CF20:
0000D91E 205F                       		movea.l	(sp)+,a0
0000D920                            
0000D920                            Obj36_Display:
0000D920 6100 0000                  		bsr.w	DisplaySprite
0000D924 3028 0030                  		move.w	$30(a0),d0
0000D928 0240 FF80                  		andi.w	#$FF80,d0
0000D92C 3238 F700                  		move.w	($FFFFF700).w,d1
0000D930 0441 0080                  		subi.w	#$80,d1
0000D934 0241 FF80                  		andi.w	#$FF80,d1
0000D938 9041                       		sub.w	d1,d0
0000D93A 0C40 0280                  		cmpi.w	#$280,d0
0000D93E 6200 0000                  		bhi.w	DeleteObject
0000D942 4E75                       		rts	
0000D944                            ; ===========================================================================
0000D944                            
0000D944                            Obj36_Type0x:				; XREF: Obj36_Solid
0000D944 7000                       		moveq	#0,d0
0000D946 1028 0028                  		move.b	$28(a0),d0
0000D94A D040                       		add.w	d0,d0
0000D94C 323B 0000                  		move.w	Obj36_TypeIndex(pc,d0.w),d1
0000D950 4EFB 1000                  		jmp	Obj36_TypeIndex(pc,d1.w)
0000D954                            ; ===========================================================================
0000D954 0000                       Obj36_TypeIndex:dc.w Obj36_Type00-Obj36_TypeIndex
0000D956 0000                       		dc.w Obj36_Type01-Obj36_TypeIndex
0000D958 0000                       		dc.w Obj36_Type02-Obj36_TypeIndex
0000D95A                            ; ===========================================================================
0000D95A                            
0000D95A                            Obj36_Type00:				; XREF: Obj36_TypeIndex
0000D95A 4E75                       		rts			; don't move the object
0000D95C                            ; ===========================================================================
0000D95C                            
0000D95C                            Obj36_Type01:				; XREF: Obj36_TypeIndex
0000D95C 6100 0000                  		bsr.w	Obj36_Wait
0000D960 7000                       		moveq	#0,d0
0000D962 1028 0034                  		move.b	$34(a0),d0
0000D966 D068 0032                  		add.w	$32(a0),d0
0000D96A 3140 000C                  		move.w	d0,$C(a0)	; move the object vertically
0000D96E 4E75                       		rts	
0000D970                            ; ===========================================================================
0000D970                            
0000D970                            Obj36_Type02:				; XREF: Obj36_TypeIndex
0000D970 6100 0000                  		bsr.w	Obj36_Wait
0000D974 7000                       		moveq	#0,d0
0000D976 1028 0034                  		move.b	$34(a0),d0
0000D97A D068 0030                  		add.w	$30(a0),d0
0000D97E 3140 0008                  		move.w	d0,8(a0)	; move the object horizontally
0000D982 4E75                       		rts	
0000D984                            ; ===========================================================================
0000D984                            
0000D984                            Obj36_Wait:
0000D984 4A68 0038                  		tst.w	$38(a0)		; is time delay	= zero?
0000D988 6700                       		beq.s	loc_CFA4	; if yes, branch
0000D98A 5368 0038                  		subq.w	#1,$38(a0)	; subtract 1 from time delay
0000D98E 6600                       		bne.s	locret_CFE6
0000D990 4A28 0001                  		tst.b	1(a0)
0000D994 6A00                       		bpl.s	locret_CFE6
0000D996 303C 00B6                  		move.w	#$B6,d0
0000D99A 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play "spikes moving" sound
0000D9A0 6000                       		bra.s	locret_CFE6
0000D9A2                            ; ===========================================================================
0000D9A2                            
0000D9A2                            loc_CFA4:
0000D9A2 4A68 0036                  		tst.w	$36(a0)
0000D9A6 6700                       		beq.s	loc_CFC6
0000D9A8 0468 0800 0034             		subi.w	#$800,$34(a0)
0000D9AE 6400                       		bcc.s	locret_CFE6
0000D9B0 317C 0000 0034             		move.w	#0,$34(a0)
0000D9B6 317C 0000 0036             		move.w	#0,$36(a0)
0000D9BC 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000D9C2 6000                       		bra.s	locret_CFE6
0000D9C4                            ; ===========================================================================
0000D9C4                            
0000D9C4                            loc_CFC6:
0000D9C4 0668 0800 0034             		addi.w	#$800,$34(a0)
0000D9CA 0C68 2000 0034             		cmpi.w	#$2000,$34(a0)
0000D9D0 6500                       		bcs.s	locret_CFE6
0000D9D2 317C 2000 0034             		move.w	#$2000,$34(a0)
0000D9D8 317C 0001 0036             		move.w	#1,$36(a0)
0000D9DE 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000D9E4                            
0000D9E4                            locret_CFE6:
0000D9E4 4E75                       		rts	
0000D9E6                            ; ===========================================================================
0000D9E6                            ; ---------------------------------------------------------------------------
0000D9E6                            ; Sprite mappings - spikes
0000D9E6                            ; ---------------------------------------------------------------------------
0000D9E6                            Map_obj36:
0000D9E6                            	include "_maps\obj36.asm"
0000D9E6                            Map_obj36_inner:
0000D9E6 0000                       Map_obj36_inner_0: 	dc.w Map_obj36_inner_C-Map_obj36_inner
0000D9E8 0000                       Map_obj36_inner_2: 	dc.w Map_obj36_inner_1C-Map_obj36_inner
0000D9EA 0000                       Map_obj36_inner_4: 	dc.w Map_obj36_inner_2C-Map_obj36_inner
0000D9EC 0000                       Map_obj36_inner_6: 	dc.w Map_obj36_inner_32-Map_obj36_inner
0000D9EE 0000                       Map_obj36_inner_8: 	dc.w Map_obj36_inner_42-Map_obj36_inner
0000D9F0 0000                       Map_obj36_inner_A: 	dc.w Map_obj36_inner_61-Map_obj36_inner
0000D9F2 03                         Map_obj36_inner_C: 	dc.b $3
0000D9F3 F003 0004 EC               	dc.b $F0, $3, $0, $4, $EC
0000D9F8 F003 0004 FC               	dc.b $F0, $3, $0, $4, $FC
0000D9FD F003 0004 0C               	dc.b $F0, $3, $0, $4, $C
0000DA02 03                         Map_obj36_inner_1C: 	dc.b $3
0000DA03 EC0C 0000 F0               	dc.b $EC, $C, $0, $0, $F0
0000DA08 FC0C 0000 F0               	dc.b $FC, $C, $0, $0, $F0
0000DA0D 0C0C 0000 F0               	dc.b $C, $C, $0, $0, $F0
0000DA12 01                         Map_obj36_inner_2C: 	dc.b $1
0000DA13 F003 0004 FC               	dc.b $F0, $3, $0, $4, $FC
0000DA18 03                         Map_obj36_inner_32: 	dc.b $3
0000DA19 F003 0004 E4               	dc.b $F0, $3, $0, $4, $E4
0000DA1E F003 0004 FC               	dc.b $F0, $3, $0, $4, $FC
0000DA23 F003 0004 14               	dc.b $F0, $3, $0, $4, $14
0000DA28 06                         Map_obj36_inner_42: 	dc.b $6
0000DA29 F003 0004 C0               	dc.b $F0, $3, $0, $4, $C0
0000DA2E F003 0004 D8               	dc.b $F0, $3, $0, $4, $D8
0000DA33 F003 0004 F0               	dc.b $F0, $3, $0, $4, $F0
0000DA38 F003 0004 08               	dc.b $F0, $3, $0, $4, $8
0000DA3D F003 0004 20               	dc.b $F0, $3, $0, $4, $20
0000DA42 F003 0004 38               	dc.b $F0, $3, $0, $4, $38
0000DA47 01                         Map_obj36_inner_61: 	dc.b $1
0000DA48 FC0C 0000 F0               	dc.b $FC, $C, $0, $0, $F0
0000DA4E 00                         	even
0000DA4E 00                         	even
0000DA4E                            
0000DA4E                            ; ===========================================================================
0000DA4E                            ; ---------------------------------------------------------------------------
0000DA4E                            ; Object 3B - purple rock (GHZ)
0000DA4E                            ; ---------------------------------------------------------------------------
0000DA4E                            
0000DA4E                            Obj3B:					; XREF: Obj_Index
0000DA4E 7000                       		moveq	#0,d0
0000DA50 1028 0024                  		move.b	$24(a0),d0
0000DA54 323B 0000                  		move.w	Obj3B_Index(pc,d0.w),d1
0000DA58 4EFB 1000                  		jmp	Obj3B_Index(pc,d1.w)
0000DA5C                            ; ===========================================================================
0000DA5C 0000                       Obj3B_Index:	dc.w Obj3B_Main-Obj3B_Index
0000DA5E 0000                       		dc.w Obj3B_Solid-Obj3B_Index
0000DA60                            ; ===========================================================================
0000DA60                            
0000DA60                            Obj3B_Main:				; XREF: Obj3B_Index
0000DA60 5428 0024                  		addq.b	#2,$24(a0)
0000DA64 217C 0000 0000 0004        		move.l	#Map_obj3B,4(a0)
0000DA6C 317C 63D0 0002             		move.w	#$63D0,2(a0)
0000DA72 117C 0004 0001             		move.b	#4,1(a0)
0000DA78 117C 0013 0019             		move.b	#$13,$19(a0)
0000DA7E 117C 0004 0018             		move.b	#4,$18(a0)
0000DA84                            
0000DA84                            Obj3B_Solid:				; XREF: Obj3B_Index
0000DA84 323C 001B                  		move.w	#$1B,d1
0000DA88 343C 0010                  		move.w	#$10,d2
0000DA8C 363C 0010                  		move.w	#$10,d3
0000DA90 3828 0008                  		move.w	8(a0),d4
0000DA94 6100 0000                  		bsr.w	SolidObject
0000DA98 6100 0000                  		bsr.w	DisplaySprite
0000DA9C 3028 0008                  		move.w	8(a0),d0
0000DAA0 0240 FF80                  		andi.w	#$FF80,d0
0000DAA4 3238 F700                  		move.w	($FFFFF700).w,d1
0000DAA8 0441 0080                  		subi.w	#$80,d1
0000DAAC 0241 FF80                  		andi.w	#$FF80,d1
0000DAB0 9041                       		sub.w	d1,d0
0000DAB2 0C40 0280                  		cmpi.w	#$280,d0
0000DAB6 6200 0000                  		bhi.w	DeleteObject
0000DABA 4E75                       		rts	
0000DABC                            ; ===========================================================================
0000DABC                            ; ---------------------------------------------------------------------------
0000DABC                            ; Object 49 - waterfall	sound effect (GHZ)
0000DABC                            ; ---------------------------------------------------------------------------
0000DABC                            
0000DABC                            Obj49:					; XREF: Obj_Index
0000DABC 7000                       		moveq	#0,d0
0000DABE 1028 0024                  		move.b	$24(a0),d0
0000DAC2 323B 0000                  		move.w	Obj49_Index(pc,d0.w),d1
0000DAC6 4EFB 1000                  		jmp	Obj49_Index(pc,d1.w)
0000DACA                            ; ===========================================================================
0000DACA 0000                       Obj49_Index:	dc.w Obj49_Main-Obj49_Index
0000DACC 0000                       		dc.w Obj49_PlaySnd-Obj49_Index
0000DACE                            ; ===========================================================================
0000DACE                            
0000DACE                            Obj49_Main:				; XREF: Obj49_Index
0000DACE 5428 0024                  		addq.b	#2,$24(a0)
0000DAD2 117C 0004 0001             		move.b	#4,1(a0)
0000DAD8                            
0000DAD8                            Obj49_PlaySnd:				; XREF: Obj49_Index
0000DAD8 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000DADC 0200 003F                  		andi.b	#$3F,d0
0000DAE0 6600                       		bne.s	Obj49_ChkDel
0000DAE2 303C 00D0                  		move.w	#$D0,d0
0000DAE6 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play waterfall sound
0000DAEC                            
0000DAEC                            Obj49_ChkDel:
0000DAEC 3028 0008                  		move.w	8(a0),d0
0000DAF0 0240 FF80                  		andi.w	#$FF80,d0
0000DAF4 3238 F700                  		move.w	($FFFFF700).w,d1
0000DAF8 0441 0080                  		subi.w	#$80,d1
0000DAFC 0241 FF80                  		andi.w	#$FF80,d1
0000DB00 9041                       		sub.w	d1,d0
0000DB02 0C40 0280                  		cmpi.w	#$280,d0
0000DB06 6200 0000                  		bhi.w	DeleteObject
0000DB0A 4E75                       		rts	
0000DB0C                            ; ===========================================================================
0000DB0C                            ; ---------------------------------------------------------------------------
0000DB0C                            ; Sprite mappings - purple rock	(GHZ)
0000DB0C                            ; ---------------------------------------------------------------------------
0000DB0C                            Map_obj3B:
0000DB0C                            	include "_maps\obj3B.asm"
0000DB0C                            ; ---------------------------------------------------------------------------
0000DB0C                            ; Sprite mappings - purple rock	(GHZ)
0000DB0C                            ; ---------------------------------------------------------------------------
0000DB0C 0000                       		dc.w byte_D110-Map_obj3B
0000DB0E 02                         byte_D110:	dc.b 2
0000DB0F F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000DB14 F00B 000C 00               		dc.b $F0, $B, 0, $C, 0
0000DB1A 00                         		even
0000DB1A 00                         		even
0000DB1A                            
0000DB1A                            ; ===========================================================================
0000DB1A                            ; ---------------------------------------------------------------------------
0000DB1A                            ; Object 3C - smashable	wall (GHZ, SLZ)
0000DB1A                            ; ---------------------------------------------------------------------------
0000DB1A                            
0000DB1A                            Obj3C:					; XREF: Obj_Index
0000DB1A 7000                       		moveq	#0,d0
0000DB1C 1028 0024                  		move.b	$24(a0),d0
0000DB20 323B 0000                  		move.w	Obj3C_Index(pc,d0.w),d1
0000DB24 4EBB 1000                  		jsr	Obj3C_Index(pc,d1.w)
0000DB28 6000 0000                  		bra.w	MarkObjGone
0000DB2C                            ; ===========================================================================
0000DB2C 0000                       Obj3C_Index:	dc.w Obj3C_Main-Obj3C_Index
0000DB2E 0000                       		dc.w Obj3C_Solid-Obj3C_Index
0000DB30 0000                       		dc.w Obj3C_FragMove-Obj3C_Index
0000DB32                            ; ===========================================================================
0000DB32                            
0000DB32                            Obj3C_Main:				; XREF: Obj3C_Index
0000DB32 5428 0024                  		addq.b	#2,$24(a0)
0000DB36 217C 0000 0000 0004        		move.l	#Map_obj3C,4(a0)
0000DB3E 317C 450F 0002             		move.w	#$450F,2(a0)
0000DB44 117C 0004 0001             		move.b	#4,1(a0)
0000DB4A 117C 0010 0019             		move.b	#$10,$19(a0)
0000DB50 117C 0004 0018             		move.b	#4,$18(a0)
0000DB56 1168 0028 001A             		move.b	$28(a0),$1A(a0)
0000DB5C                            
0000DB5C                            Obj3C_Solid:				; XREF: Obj3C_Index
0000DB5C 3178 D010 0030             		move.w	($FFFFD010).w,$30(a0) ;	load Sonic's horizontal speed
0000DB62 323C 001B                  		move.w	#$1B,d1
0000DB66 343C 0020                  		move.w	#$20,d2
0000DB6A 363C 0020                  		move.w	#$20,d3
0000DB6E 3828 0008                  		move.w	8(a0),d4
0000DB72 6100 0000                  		bsr.w	SolidObject
0000DB76 0828 0005 0022             		btst	#5,$22(a0)
0000DB7C 6600                       		bne.s	Obj3C_ChkRoll
0000DB7E                            
0000DB7E                            locret_D180:
0000DB7E 4E75                       		rts	
0000DB80                            ; ===========================================================================
0000DB80                            
0000DB80                            Obj3C_ChkRoll:				; XREF: Obj3C_Solid
0000DB80 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000DB86 66F6                       		bne.s	locret_D180	; if not, branch
0000DB88 3028 0030                  		move.w	$30(a0),d0
0000DB8C 6A00                       		bpl.s	Obj3C_ChkSpeed
0000DB8E 4440                       		neg.w	d0
0000DB90                            
0000DB90                            Obj3C_ChkSpeed:
0000DB90 0C40 0480                  		cmpi.w	#$480,d0	; is Sonic's speed $480 or higher?
0000DB94 65E8                       		bcs.s	locret_D180	; if not, branch
0000DB96 3368 0030 0010             		move.w	$30(a0),$10(a1)
0000DB9C 5869 0008                  		addq.w	#4,8(a1)
0000DBA0 49F9 0000 0000             		lea	(Obj3C_FragSpd1).l,a4 ;	use fragments that move	right
0000DBA6 3028 0008                  		move.w	8(a0),d0
0000DBAA B069 0008                  		cmp.w	8(a1),d0	; is Sonic to the right	of the block?
0000DBAE 6500                       		bcs.s	Obj3C_Smash	; if yes, branch
0000DBB0 5169 0008                  		subq.w	#8,8(a1)
0000DBB4 49F9 0000 0000             		lea	(Obj3C_FragSpd2).l,a4 ;	use fragments that move	left
0000DBBA                            
0000DBBA                            Obj3C_Smash:
0000DBBA 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000DBC0 08A8 0005 0022             		bclr	#5,$22(a0)
0000DBC6 08A9 0005 0022             		bclr	#5,$22(a1)
0000DBCC 7207                       		moveq	#7,d1		; load 8 fragments
0000DBCE 343C 0070                  		move.w	#$70,d2
0000DBD2 6100                       		bsr.s	SmashObject
0000DBD4                            
0000DBD4                            Obj3C_FragMove:				; XREF: Obj3C_Index
0000DBD4 6100 0000                  		bsr.w	SpeedToPos
0000DBD8 0668 0070 0012             		addi.w	#$70,$12(a0)	; make fragment	fall faster
0000DBDE 6100 0000                  		bsr.w	DisplaySprite
0000DBE2 4A28 0001                  		tst.b	1(a0)
0000DBE6 6A00 0000                  		bpl.w	DeleteObject
0000DBEA 4E75                       		rts	
0000DBEC                            
0000DBEC                            ; ---------------------------------------------------------------------------
0000DBEC                            ; Subroutine to	smash a	block (GHZ walls and MZ	blocks)
0000DBEC                            ; ---------------------------------------------------------------------------
0000DBEC                            
0000DBEC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DBEC                            
0000DBEC                            
0000DBEC                            SmashObject:				; XREF: Obj3C_Smash
0000DBEC 7000                       		moveq	#0,d0
0000DBEE 1028 001A                  		move.b	$1A(a0),d0
0000DBF2 D040                       		add.w	d0,d0
0000DBF4 2668 0004                  		movea.l	4(a0),a3
0000DBF8 D6F3 0000                  		adda.w	(a3,d0.w),a3
0000DBFC 524B                       		addq.w	#1,a3
0000DBFE 08E8 0005 0001             		bset	#5,1(a0)
0000DC04 1810                       		move.b	0(a0),d4
0000DC06 1A28 0001                  		move.b	1(a0),d5
0000DC0A 2248                       		movea.l	a0,a1
0000DC0C 6000                       		bra.s	Smash_LoadFrag
0000DC0E                            ; ===========================================================================
0000DC0E                            
0000DC0E                            Smash_Loop:
0000DC0E 6100 0000                  		bsr.w	SingleObjLoad
0000DC12 6600                       		bne.s	Smash_PlaySnd
0000DC14 5A4B                       		addq.w	#5,a3
0000DC16                            
0000DC16                            Smash_LoadFrag:				; XREF: SmashObject
0000DC16 137C 0004 0024             		move.b	#4,$24(a1)
0000DC1C 1284                       		move.b	d4,0(a1)
0000DC1E 234B 0004                  		move.l	a3,4(a1)
0000DC22 1345 0001                  		move.b	d5,1(a1)
0000DC26 3368 0008 0008             		move.w	8(a0),8(a1)
0000DC2C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000DC32 3368 0002 0002             		move.w	2(a0),2(a1)
0000DC38 1368 0018 0018             		move.b	$18(a0),$18(a1)
0000DC3E 1368 0019 0019             		move.b	$19(a0),$19(a1)
0000DC44 335C 0010                  		move.w	(a4)+,$10(a1)
0000DC48 335C 0012                  		move.w	(a4)+,$12(a1)
0000DC4C B3C8                       		cmpa.l	a0,a1
0000DC4E 6400                       		bcc.s	loc_D268
0000DC50 2F08                       		move.l	a0,-(sp)
0000DC52 2049                       		movea.l	a1,a0
0000DC54 6100 0000                  		bsr.w	SpeedToPos
0000DC58 D568 0012                  		add.w	d2,$12(a0)
0000DC5C 205F                       		movea.l	(sp)+,a0
0000DC5E 6100 0000                  		bsr.w	DisplaySprite2
0000DC62                            
0000DC62                            loc_D268:
0000DC62 51C9 FFAA                  		dbf	d1,Smash_Loop
0000DC66                            
0000DC66                            Smash_PlaySnd:
0000DC66 303C 00CB                  		move.w	#$CB,d0
0000DC6A 4EF9 0000 159A             		jmp	(PlaySound_Special).l ;	play smashing sound
0000DC70                            ; End of function SmashObject
0000DC70                            
0000DC70                            ; ===========================================================================
0000DC70                            ; Smashed block	fragment speeds
0000DC70                            ;
0000DC70 0400 FB00                  Obj3C_FragSpd1:	dc.w $400, $FB00	; x-move speed,	y-move speed
0000DC74 0600 FF00                  		dc.w $600, $FF00
0000DC78 0600 0100                  		dc.w $600, $100
0000DC7C 0400 0500                  		dc.w $400, $500
0000DC80 0600 FA00                  		dc.w $600, $FA00
0000DC84 0800 FE00                  		dc.w $800, $FE00
0000DC88 0800 0200                  		dc.w $800, $200
0000DC8C 0600 0600                  		dc.w $600, $600
0000DC90                            
0000DC90 FA00 FA00                  Obj3C_FragSpd2:	dc.w $FA00, $FA00
0000DC94 F800 FE00                  		dc.w $F800, $FE00
0000DC98 F800 0200                  		dc.w $F800, $200
0000DC9C FA00 0600                  		dc.w $FA00, $600
0000DCA0 FC00 FB00                  		dc.w $FC00, $FB00
0000DCA4 FA00 FF00                  		dc.w $FA00, $FF00
0000DCA8 FA00 0100                  		dc.w $FA00, $100
0000DCAC FC00 0500                  		dc.w $FC00, $500
0000DCB0                            ; ---------------------------------------------------------------------------
0000DCB0                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000DCB0                            ; ---------------------------------------------------------------------------
0000DCB0                            Map_obj3C:
0000DCB0                            	include "_maps\obj3C.asm"
0000DCB0                            ; ---------------------------------------------------------------------------
0000DCB0                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000DCB0                            ; ---------------------------------------------------------------------------
0000DCB0 0000                       		dc.w byte_D2BC-Map_obj3C
0000DCB2 0000                       		dc.w byte_D2E5-Map_obj3C
0000DCB4 0000                       		dc.w byte_D30E-Map_obj3C
0000DCB6 08                         byte_D2BC:	dc.b 8
0000DCB7 E005 0000 F0               		dc.b $E0, 5, 0,	0, $F0
0000DCBC F005 0000 F0               		dc.b $F0, 5, 0,	0, $F0
0000DCC1 0005 0000 F0               		dc.b 0,	5, 0, 0, $F0
0000DCC6 1005 0000 F0               		dc.b $10, 5, 0,	0, $F0
0000DCCB E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000DCD0 F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000DCD5 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000DCDA 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000DCDF 08                         byte_D2E5:	dc.b 8
0000DCE0 E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000DCE5 F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000DCEA 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000DCEF 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000DCF4 E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000DCF9 F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000DCFE 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000DD03 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000DD08 08                         byte_D30E:	dc.b 8
0000DD09 E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000DD0E F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000DD13 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000DD18 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000DD1D E005 0008 00               		dc.b $E0, 5, 0,	8, 0
0000DD22 F005 0008 00               		dc.b $F0, 5, 0,	8, 0
0000DD27 0005 0008 00               		dc.b 0,	5, 0, 8, 0
0000DD2C 1005 0008 00               		dc.b $10, 5, 0,	8, 0
0000DD32 00                         		even
0000DD32 00                         		even
0000DD32                            
0000DD32                            ; ---------------------------------------------------------------------------
0000DD32                            ; Object code loading subroutine
0000DD32                            ; ---------------------------------------------------------------------------
0000DD32                            
0000DD32                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DD32                            
0000DD32                            
0000DD32                            ObjectsLoad:				; XREF: TitleScreen; et al
0000DD32 41F8 D000                  		lea	($FFFFD000).w,a0 ; set address for object RAM
0000DD36 7E7F                       		moveq	#$7F,d7
0000DD38 7000                       		moveq	#0,d0
0000DD3A 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000DD40 6400                       		bcc.s	loc_D362
0000DD42                            
0000DD42                            loc_D348:
0000DD42 1010                       		move.b	(a0),d0		; load object number from RAM
0000DD44 6700                       		beq.s	loc_D358
0000DD46 D040                       		add.w	d0,d0
0000DD48 D040                       		add.w	d0,d0
0000DD4A 227B 0000                  		movea.l	Obj_Index-4(pc,d0.w),a1
0000DD4E 4E91                       		jsr	(a1)		; run the object's code
0000DD50 7000                       		moveq	#0,d0
0000DD52                            
0000DD52                            loc_D358:
0000DD52 41E8 0040                  		lea	$40(a0),a0	; next object
0000DD56 51CF FFEA                  		dbf	d7,loc_D348
0000DD5A 4E75                       		rts	
0000DD5C                            ; ===========================================================================
0000DD5C                            
0000DD5C                            loc_D362:
0000DD5C 7E1F                       		moveq	#$1F,d7
0000DD5E 61E2                       		bsr.s	loc_D348
0000DD60 7E5F                       		moveq	#$5F,d7
0000DD62                            
0000DD62                            loc_D368:
0000DD62 7000                       		moveq	#0,d0
0000DD64 1010                       		move.b	(a0),d0
0000DD66 6700                       		beq.s	loc_D378
0000DD68 4A28 0001                  		tst.b	1(a0)
0000DD6C 6A00                       		bpl.s	loc_D378
0000DD6E 6100 0000                  		bsr.w	DisplaySprite
0000DD72                            
0000DD72                            loc_D378:
0000DD72 41E8 0040                  		lea	$40(a0),a0
0000DD76                            
0000DD76                            loc_D37C:
0000DD76 51CF FFEA                  		dbf	d7,loc_D368
0000DD7A 4E75                       		rts	
0000DD7C                            ; End of function ObjectsLoad
0000DD7C                            
0000DD7C                            ; ===========================================================================
0000DD7C                            ; ---------------------------------------------------------------------------
0000DD7C                            ; Object pointers
0000DD7C                            ; ---------------------------------------------------------------------------
0000DD7C                            Obj_Index:
0000DD7C                            	include "_inc\Object pointers.asm"
0000DD7C                            ; ---------------------------------------------------------------------------
0000DD7C                            ; Object pointers
0000DD7C                            ; ---------------------------------------------------------------------------
0000DD7C 0000 0000 0000 0000 0000+  	dc.l Obj01, ObjectFall,	ObjectFall, ObjectFall
0000DD8C 0000 0000 0000 0000 0000+  	dc.l ObjectFall, ObjectFall, ObjectFall, Obj08
0000DD9C 0000 0000 0000 0000 0000+  	dc.l Obj09, Obj0A, Obj0B, Obj0C
0000DDAC 0000 0000 0000 AF9E 0000+  	dc.l Obj0D, Obj0E, Obj0F, Obj10
0000DDBC 0000 7B36 0000 0000 0000+  	dc.l Obj11, Obj12, Obj13, Obj14
0000DDCC 0000 815C 0000 0000 0000+  	dc.l Obj15, Obj16, Obj17, Obj18
0000DDDC 0000 89AA 0000 8AA4 0000+  	dc.l Obj19, Obj1A, Obj1B, Obj1C
0000DDEC 0000 90EE 0000 93DC 0000+  	dc.l Obj1D, Obj1E, Obj1F, Obj20
0000DDFC 0000 0000 0000 A09A 0000+  	dc.l Obj21, Obj22, Obj23, Obj24
0000DE0C 0000 A3D2 0000 A9BE 0000+  	dc.l Obj25, Obj26, Obj27, Obj28
0000DE1C 0000 9CF6 0000 91C4 0000+  	dc.l Obj29, Obj2A, Obj2B, Obj2C
0000DE2C 0000 B596 0000 ABB2 0000+  	dc.l Obj2D, Obj2E, Obj2F, Obj30
0000DE3C 0000 BFAA 0000 C658 0000+  	dc.l Obj31, Obj32, Obj33, Obj34
0000DE4C 0000 BB08 0000 D826 0000+  	dc.l Obj35, Obj36, Obj37, Obj38
0000DE5C 0000 CE06 0000 CEC0 0000+  	dc.l Obj39, Obj3A, Obj3B, Obj3C
0000DE6C 0000 0000 0000 0000 0000+  	dc.l Obj3D, Obj3E, Obj3F, Obj40
0000DE7C 0000 0000 0000 0000 0000+  	dc.l Obj41, Obj42, Obj43, Obj44
0000DE8C 0000 C2C6 0000 0000 0000+  	dc.l Obj45, Obj46, Obj47, Obj48
0000DE9C 0000 DABC 0000 0000 0000+  	dc.l Obj49, Obj4A, Obj4B, Obj4C
0000DEAC 0000 0000 0000 0000 0000+  	dc.l Obj4D, Obj4E, Obj4F, Obj50
0000DEBC 0000 0000 0000 0000 0000+  	dc.l Obj51, Obj52, Obj53, Obj54
0000DECC 0000 0000 0000 0000 0000+  	dc.l Obj55, Obj56, Obj57, Obj58
0000DEDC 0000 0000 0000 0000 0000+  	dc.l Obj59, Obj5A, Obj5B, Obj5C
0000DEEC 0000 0000 0000 0000 0000+  	dc.l Obj5D, Obj5E, Obj5F, Obj60
0000DEFC 0000 0000 0000 0000 0000+  	dc.l Obj61, Obj62, Obj63, Obj64
0000DF0C 0000 0000 0000 0000 0000+  	dc.l Obj65, Obj66, Obj67, Obj68
0000DF1C 0000 0000 0000 0000 0000+  	dc.l Obj69, Obj6A, Obj6B, Obj6C
0000DF2C 0000 0000 0000 0000 0000+  	dc.l Obj6D, Obj6E, Obj6F, Obj70
0000DF3C 0000 0000 0000 0000 0000+  	dc.l Obj71, Obj72, Obj73, Obj74
0000DF4C 0000 0000 0000 0000 0000+  	dc.l Obj75, Obj76, Obj77, Obj78
0000DF5C 0000 0000 0000 0000 0000+  	dc.l Obj79, Obj7A, Obj7B, Obj7C
0000DF6C 0000 0000 0000 D102 0000+  	dc.l Obj7D, Obj7E, Obj7F, Obj80
0000DF7C 0000 55A0 0000 0000 0000+  	dc.l Obj81, Obj82, Obj83, Obj84
0000DF8C 0000 0000 0000 0000 0000+  	dc.l Obj85, Obj86, Obj87, Obj88
0000DF9C 0000 5C5A 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000DF9C 0000 5C5A 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000DFAC                            
0000DFAC                            ; ---------------------------------------------------------------------------
0000DFAC                            ; Subroutine to	make an	object fall downwards, increasingly fast
0000DFAC                            ; ---------------------------------------------------------------------------
0000DFAC                            
0000DFAC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DFAC                            
0000DFAC                            
0000DFAC                            ObjectFall:
0000DFAC 2428 0008                  		move.l	8(a0),d2
0000DFB0 2628 000C                  		move.l	$C(a0),d3
0000DFB4 3028 0010                  		move.w	$10(a0),d0
0000DFB8 48C0                       		ext.l	d0
0000DFBA E180                       		asl.l	#8,d0
0000DFBC D480                       		add.l	d0,d2
0000DFBE 3028 0012                  		move.w	$12(a0),d0
0000DFC2 0668 0038 0012             		addi.w	#$38,$12(a0)	; increase vertical speed
0000DFC8 48C0                       		ext.l	d0
0000DFCA E180                       		asl.l	#8,d0
0000DFCC D680                       		add.l	d0,d3
0000DFCE 2142 0008                  		move.l	d2,8(a0)
0000DFD2 2143 000C                  		move.l	d3,$C(a0)
0000DFD6 4E75                       		rts	
0000DFD8                            ; End of function ObjectFall
0000DFD8                            
0000DFD8                            ; ---------------------------------------------------------------------------
0000DFD8                            ; Subroutine to	make an	object fall downwards, increasingly fast
0000DFD8                            ; ---------------------------------------------------------------------------
0000DFD8                            
0000DFD8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DFD8                            
0000DFD8                            
0000DFD8                            ObjectFallNoJump:
0000DFD8 2428 0008                  		move.l	8(a0),d2
0000DFDC 2628 000C                  		move.l	$C(a0),d3
0000DFE0 3028 0010                  		move.w	$10(a0),d0
0000DFE4 48C0                       		ext.l	d0
0000DFE6 E180                       		asl.l	#8,d0
0000DFE8 D480                       		add.l	d0,d2
0000DFEA                            ;		cmpi.b	#1,obID(a0)
0000DFEA                            ;		beq.s	ObjectFallSonic
0000DFEA 3028 000C                  		move.w	$C(a0),d0
0000DFEE 5868 000C                  		addi.w	#4,$C(a0)	; increase vertical speed
0000DFF2                            ;		ext.l	d0
0000DFF2                            ;		asl.l	#8,d0
0000DFF2                            ;		add.l	d0,d3
0000DFF2 2142 0008                  		move.l	d2,$8(a0)
0000DFF6                            ;		move.l	d3,obY(a0)
0000DFF6 4E75                       		rts	
0000DFF8                            
0000DFF8                            ; End of function ObjectFall
0000DFF8                            
0000DFF8                            JumpFallSonic:
0000DFF8 4CA8 0003 0010                     movem.w    $10(a0),d0-d1        ; Get speed
0000DFFE                                    
0000DFFE E180                               asl.l    #8,d0                ; Apply X speed
0000E000 D1A8 0008                          add.l    d0,$8(a0)
0000E004                                    
0000E004 303C 0300                          move.w    #$300,d0            ; Y movement speed
0000E008 4A41                               tst.w    d1                ; Are we falling?
0000E00A 6A00                               bpl.s    .SetYSpeed            ; If so, branch
0000E00C 4440                               neg.w    d0                ; Make Y movement go up
0000E00E                                    
0000E00E                            .SetYSpeed:
0000E00E 48C0                               ext.l    d0                ; Apply Y speed
0000E010 E180                               asl.l    #8,d0
0000E012 D1A8 000C                          add.l    d0,$C(a0)
0000E016 0668 0038 0012                     addi.w    #$38,$12(a0)            ; Apply gravity
0000E01C 4E75                               rts
0000E01E                            
0000E01E                            ; ---------------------------------------------------------------------------
0000E01E                            ; Subroutine translating object	speed to update	object position
0000E01E                            ; ---------------------------------------------------------------------------
0000E01E                            
0000E01E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E01E                            
0000E01E                            
0000E01E                            SpeedToPos:
0000E01E 2428 0008                  		move.l	8(a0),d2
0000E022 2628 000C                  		move.l	$C(a0),d3
0000E026 3028 0010                  		move.w	$10(a0),d0	; load horizontal speed
0000E02A 48C0                       		ext.l	d0
0000E02C E180                       		asl.l	#8,d0		; multiply speed by $100
0000E02E D480                       		add.l	d0,d2		; add to x-axis	position
0000E030 3028 0012                  		move.w	$12(a0),d0	; load vertical	speed
0000E034 48C0                       		ext.l	d0
0000E036 E180                       		asl.l	#8,d0		; multiply by $100
0000E038 D680                       		add.l	d0,d3		; add to y-axis	position
0000E03A 2142 0008                  		move.l	d2,8(a0)	; update x-axis	position
0000E03E 2143 000C                  		move.l	d3,$C(a0)	; update y-axis	position
0000E042 4E75                       		rts	
0000E044                            ; End of function SpeedToPos
0000E044                            
0000E044                            ; ---------------------------------------------------------------------------
0000E044                            ; Subroutine to	display	a sprite/object, when a0 is the	object RAM
0000E044                            ; ---------------------------------------------------------------------------
0000E044                            
0000E044                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E044                            
0000E044                            
0000E044                            DisplaySprite:
0000E044 43F8 AC00                  		lea	($FFFFAC00).w,a1
0000E048 3028 0018                  		move.w	$18(a0),d0
0000E04C E248                       		lsr.w	#1,d0
0000E04E 0240 0380                  		andi.w	#$380,d0
0000E052 D2C0                       		adda.w	d0,a1
0000E054 0C51 007E                  		cmpi.w	#$7E,(a1)
0000E058 6400                       		bcc.s	locret_D620
0000E05A 5451                       		addq.w	#2,(a1)
0000E05C D2D1                       		adda.w	(a1),a1
0000E05E 3288                       		move.w	a0,(a1)
0000E060                            
0000E060                            locret_D620:
0000E060 4E75                       		rts	
0000E062                            ; End of function DisplaySprite
0000E062                            
0000E062                            ; ---------------------------------------------------------------------------
0000E062                            ; Subroutine to	display	a 2nd sprite/object, when a1 is	the object RAM
0000E062                            ; ---------------------------------------------------------------------------
0000E062                            
0000E062                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E062                            
0000E062                            
0000E062                            DisplaySprite2:
0000E062 45F8 AC00                  		lea	($FFFFAC00).w,a2
0000E066 3029 0018                  		move.w	$18(a1),d0
0000E06A E248                       		lsr.w	#1,d0
0000E06C 0240 0380                  		andi.w	#$380,d0
0000E070 D4C0                       		adda.w	d0,a2
0000E072 0C52 007E                  		cmpi.w	#$7E,(a2)
0000E076 6400                       		bcc.s	locret_D63E
0000E078 5452                       		addq.w	#2,(a2)
0000E07A D4D2                       		adda.w	(a2),a2
0000E07C 3489                       		move.w	a1,(a2)
0000E07E                            
0000E07E                            locret_D63E:
0000E07E 4E75                       		rts	
0000E080                            ; End of function DisplaySprite2
0000E080                            
0000E080                            ; ---------------------------------------------------------------------------
0000E080                            ; Subroutine to	delete an object
0000E080                            ; ---------------------------------------------------------------------------
0000E080                            
0000E080                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E080                            
0000E080                            
0000E080                            DeleteObject:
0000E080 2248                       		movea.l	a0,a1
0000E082                            
0000E082                            DeleteObject2:
0000E082 7200                       		moveq	#0,d1
0000E084 700F                       		moveq	#$F,d0
0000E086                            
0000E086                            loc_D646:
0000E086 22C1                       		move.l	d1,(a1)+	; clear	the object RAM
0000E088 51C8 FFFC                  		dbf	d0,loc_D646	; repeat $F times (length of object RAM)
0000E08C 4E75                       		rts	
0000E08E                            ; End of function DeleteObject
0000E08E                            
0000E08E                            ; ===========================================================================
0000E08E 0000 0000                  BldSpr_ScrPos:	dc.l 0			; blank
0000E092 00FF F700                  		dc.l $FFF700		; main screen x-position
0000E096 00FF F708                  		dc.l $FFF708		; background x-position	1
0000E09A 00FF F718                  		dc.l $FFF718		; background x-position	2
0000E09E                            ; ---------------------------------------------------------------------------
0000E09E                            ; Subroutine to	convert	mappings (etc) to proper Megadrive sprites
0000E09E                            ; ---------------------------------------------------------------------------
0000E09E                            
0000E09E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E09E                            
0000E09E                            
0000E09E                            BuildSprites:				; XREF: TitleScreen; et al
0000E09E 45F8 F800                  		lea	($FFFFF800).w,a2 ; set address for sprite table
0000E0A2 7A00                       		moveq	#0,d5
0000E0A4 49F8 AC00                  		lea	($FFFFAC00).w,a4
0000E0A8 7E07                       		moveq	#7,d7
0000E0AA                            
0000E0AA                            loc_D66A:
0000E0AA 4A54                       		tst.w	(a4)
0000E0AC 6700 0000                  		beq.w	loc_D72E
0000E0B0 7C02                       		moveq	#2,d6
0000E0B2                            
0000E0B2                            loc_D672:
0000E0B2 3074 6000                  		movea.w	(a4,d6.w),a0
0000E0B6 4A10                       		tst.b	(a0)
0000E0B8 6700 0000                  		beq.w	loc_D726
0000E0BC 08A8 0007 0001             		bclr	#7,1(a0)
0000E0C2 1028 0001                  		move.b	1(a0),d0
0000E0C6 1800                       		move.b	d0,d4
0000E0C8 0240 000C                  		andi.w	#$C,d0
0000E0CC 6700                       		beq.s	loc_D6DE
0000E0CE 227B 00BE                  		movea.l	BldSpr_ScrPos(pc,d0.w),a1
0000E0D2 7000                       		moveq	#0,d0
0000E0D4 1028 0019                  		move.b	$19(a0),d0
0000E0D8 3628 0008                  		move.w	8(a0),d3
0000E0DC 9651                       		sub.w	(a1),d3
0000E0DE 3203                       		move.w	d3,d1
0000E0E0 D240                       		add.w	d0,d1
0000E0E2 6B00 0000                  		bmi.w	loc_D726
0000E0E6 3203                       		move.w	d3,d1
0000E0E8 9240                       		sub.w	d0,d1
0000E0EA 0C41 0140                  		cmpi.w	#$140,d1
0000E0EE 6C00                       		bge.s	loc_D726
0000E0F0 0643 0080                  		addi.w	#$80,d3
0000E0F4 0804 0004                  		btst	#4,d4
0000E0F8 6700                       		beq.s	loc_D6E8
0000E0FA 7000                       		moveq	#0,d0
0000E0FC 1028 0016                  		move.b	$16(a0),d0
0000E100 3428 000C                  		move.w	$C(a0),d2
0000E104 9469 0004                  		sub.w	4(a1),d2
0000E108 3202                       		move.w	d2,d1
0000E10A D240                       		add.w	d0,d1
0000E10C 6B00                       		bmi.s	loc_D726
0000E10E 3202                       		move.w	d2,d1
0000E110 9240                       		sub.w	d0,d1
0000E112 0C41 00E0                  		cmpi.w	#$E0,d1
0000E116 6C00                       		bge.s	loc_D726
0000E118 0642 0080                  		addi.w	#$80,d2
0000E11C 6000                       		bra.s	loc_D700
0000E11E                            ; ===========================================================================
0000E11E                            
0000E11E                            loc_D6DE:
0000E11E 3428 000A                  		move.w	$A(a0),d2
0000E122 3628 0008                  		move.w	8(a0),d3
0000E126 6000                       		bra.s	loc_D700
0000E128                            ; ===========================================================================
0000E128                            
0000E128                            loc_D6E8:
0000E128 3428 000C                  		move.w	$C(a0),d2
0000E12C 9469 0004                  		sub.w	4(a1),d2
0000E130 0642 0080                  		addi.w	#$80,d2
0000E134 0C42 0060                  		cmpi.w	#$60,d2
0000E138 6500                       		bcs.s	loc_D726
0000E13A 0C42 0180                  		cmpi.w	#$180,d2
0000E13E 6400                       		bcc.s	loc_D726
0000E140                            
0000E140                            loc_D700:
0000E140 2268 0004                  		movea.l	4(a0),a1
0000E144 7200                       		moveq	#0,d1
0000E146 0804 0005                  		btst	#5,d4
0000E14A 6600                       		bne.s	loc_D71C
0000E14C 1228 001A                  		move.b	$1A(a0),d1
0000E150 D201                       		add.b	d1,d1
0000E152 D2F1 1000                  		adda.w	(a1,d1.w),a1
0000E156 1219                       		move.b	(a1)+,d1
0000E158 5301                       		subq.b	#1,d1
0000E15A 6B00                       		bmi.s	loc_D720
0000E15C                            
0000E15C                            loc_D71C:
0000E15C 6100 0000                  		bsr.w	sub_D750
0000E160                            
0000E160                            loc_D720:
0000E160 08E8 0007 0001             		bset	#7,1(a0)
0000E166                            
0000E166                            loc_D726:
0000E166 5446                       		addq.w	#2,d6
0000E168 5554                       		subq.w	#2,(a4)
0000E16A 6600 FF46                  		bne.w	loc_D672
0000E16E                            
0000E16E                            loc_D72E:
0000E16E 49EC 0080                  		lea	$80(a4),a4
0000E172 51CF FF36                  		dbf	d7,loc_D66A
0000E176 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0000E17A 0C05 0050                  		cmpi.b	#$50,d5
0000E17E 6700                       		beq.s	loc_D748
0000E180 24BC 0000 0000             		move.l	#0,(a2)
0000E186 4E75                       		rts	
0000E188                            ; ===========================================================================
0000E188                            
0000E188                            loc_D748:
0000E188 157C 0000 FFFB             		move.b	#0,-5(a2)
0000E18E 4E75                       		rts	
0000E190                            ; End of function BuildSprites
0000E190                            
0000E190                            
0000E190                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E190                            
0000E190                            
0000E190                            sub_D750:				; XREF: BuildSprites
0000E190 3668 0002                  		movea.w	2(a0),a3
0000E194 0804 0000                  		btst	#0,d4
0000E198 6600                       		bne.s	loc_D796
0000E19A 0804 0001                  		btst	#1,d4
0000E19E 6600 0000                  		bne.w	loc_D7E4
0000E1A2                            ; End of function sub_D750
0000E1A2                            
0000E1A2                            
0000E1A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E1A2                            
0000E1A2                            
0000E1A2                            sub_D762:				; XREF: sub_D762; SS_ShowLayout
0000E1A2 0C05 0050                  		cmpi.b	#$50,d5
0000E1A6 6700                       		beq.s	locret_D794
0000E1A8 1019                       		move.b	(a1)+,d0
0000E1AA 4880                       		ext.w	d0
0000E1AC D042                       		add.w	d2,d0
0000E1AE 34C0                       		move.w	d0,(a2)+
0000E1B0 14D9                       		move.b	(a1)+,(a2)+
0000E1B2 5205                       		addq.b	#1,d5
0000E1B4 14C5                       		move.b	d5,(a2)+
0000E1B6 1019                       		move.b	(a1)+,d0
0000E1B8 E148                       		lsl.w	#8,d0
0000E1BA 1019                       		move.b	(a1)+,d0
0000E1BC D04B                       		add.w	a3,d0
0000E1BE 34C0                       		move.w	d0,(a2)+
0000E1C0 1019                       		move.b	(a1)+,d0
0000E1C2 4880                       		ext.w	d0
0000E1C4 D043                       		add.w	d3,d0
0000E1C6 0240 01FF                  		andi.w	#$1FF,d0
0000E1CA 6600                       		bne.s	loc_D78E
0000E1CC 5240                       		addq.w	#1,d0
0000E1CE                            
0000E1CE                            loc_D78E:
0000E1CE 34C0                       		move.w	d0,(a2)+
0000E1D0 51C9 FFD0                  		dbf	d1,sub_D762
0000E1D4                            
0000E1D4                            locret_D794:
0000E1D4 4E75                       		rts	
0000E1D6                            ; End of function sub_D762
0000E1D6                            
0000E1D6                            ; ===========================================================================
0000E1D6                            
0000E1D6                            loc_D796:
0000E1D6 0804 0001                  		btst	#1,d4
0000E1DA 6600 0000                  		bne.w	loc_D82A
0000E1DE                            
0000E1DE                            loc_D79E:
0000E1DE 0C05 0050                  		cmpi.b	#$50,d5
0000E1E2 6700                       		beq.s	locret_D7E2
0000E1E4 1019                       		move.b	(a1)+,d0
0000E1E6 4880                       		ext.w	d0
0000E1E8 D042                       		add.w	d2,d0
0000E1EA 34C0                       		move.w	d0,(a2)+
0000E1EC 1819                       		move.b	(a1)+,d4
0000E1EE 14C4                       		move.b	d4,(a2)+
0000E1F0 5205                       		addq.b	#1,d5
0000E1F2 14C5                       		move.b	d5,(a2)+
0000E1F4 1019                       		move.b	(a1)+,d0
0000E1F6 E148                       		lsl.w	#8,d0
0000E1F8 1019                       		move.b	(a1)+,d0
0000E1FA D04B                       		add.w	a3,d0
0000E1FC 0A40 0800                  		eori.w	#$800,d0
0000E200 34C0                       		move.w	d0,(a2)+
0000E202 1019                       		move.b	(a1)+,d0
0000E204 4880                       		ext.w	d0
0000E206 4440                       		neg.w	d0
0000E208 D804                       		add.b	d4,d4
0000E20A 0244 0018                  		andi.w	#$18,d4
0000E20E 5044                       		addq.w	#8,d4
0000E210 9044                       		sub.w	d4,d0
0000E212 D043                       		add.w	d3,d0
0000E214 0240 01FF                  		andi.w	#$1FF,d0
0000E218 6600                       		bne.s	loc_D7DC
0000E21A 5240                       		addq.w	#1,d0
0000E21C                            
0000E21C                            loc_D7DC:
0000E21C 34C0                       		move.w	d0,(a2)+
0000E21E 51C9 FFBE                  		dbf	d1,loc_D79E
0000E222                            
0000E222                            locret_D7E2:
0000E222 4E75                       		rts	
0000E224                            ; ===========================================================================
0000E224                            
0000E224                            loc_D7E4:				; XREF: sub_D750
0000E224 0C05 0050                  		cmpi.b	#$50,d5
0000E228 6700                       		beq.s	locret_D828
0000E22A 1019                       		move.b	(a1)+,d0
0000E22C 1811                       		move.b	(a1),d4
0000E22E 4880                       		ext.w	d0
0000E230 4440                       		neg.w	d0
0000E232 E70C                       		lsl.b	#3,d4
0000E234 0244 0018                  		andi.w	#$18,d4
0000E238 5044                       		addq.w	#8,d4
0000E23A 9044                       		sub.w	d4,d0
0000E23C D042                       		add.w	d2,d0
0000E23E 34C0                       		move.w	d0,(a2)+
0000E240 14D9                       		move.b	(a1)+,(a2)+
0000E242 5205                       		addq.b	#1,d5
0000E244 14C5                       		move.b	d5,(a2)+
0000E246 1019                       		move.b	(a1)+,d0
0000E248 E148                       		lsl.w	#8,d0
0000E24A 1019                       		move.b	(a1)+,d0
0000E24C D04B                       		add.w	a3,d0
0000E24E 0A40 1000                  		eori.w	#$1000,d0
0000E252 34C0                       		move.w	d0,(a2)+
0000E254 1019                       		move.b	(a1)+,d0
0000E256 4880                       		ext.w	d0
0000E258 D043                       		add.w	d3,d0
0000E25A 0240 01FF                  		andi.w	#$1FF,d0
0000E25E 6600                       		bne.s	loc_D822
0000E260 5240                       		addq.w	#1,d0
0000E262                            
0000E262                            loc_D822:
0000E262 34C0                       		move.w	d0,(a2)+
0000E264 51C9 FFBE                  		dbf	d1,loc_D7E4
0000E268                            
0000E268                            locret_D828:
0000E268 4E75                       		rts	
0000E26A                            ; ===========================================================================
0000E26A                            
0000E26A                            loc_D82A:
0000E26A 0C05 0050                  		cmpi.b	#$50,d5
0000E26E 6700                       		beq.s	locret_D87C
0000E270 1019                       		move.b	(a1)+,d0
0000E272 1811                       		move.b	(a1),d4
0000E274 4880                       		ext.w	d0
0000E276 4440                       		neg.w	d0
0000E278 E70C                       		lsl.b	#3,d4
0000E27A 0244 0018                  		andi.w	#$18,d4
0000E27E 5044                       		addq.w	#8,d4
0000E280 9044                       		sub.w	d4,d0
0000E282 D042                       		add.w	d2,d0
0000E284 34C0                       		move.w	d0,(a2)+
0000E286 1819                       		move.b	(a1)+,d4
0000E288 14C4                       		move.b	d4,(a2)+
0000E28A 5205                       		addq.b	#1,d5
0000E28C 14C5                       		move.b	d5,(a2)+
0000E28E 1019                       		move.b	(a1)+,d0
0000E290 E148                       		lsl.w	#8,d0
0000E292 1019                       		move.b	(a1)+,d0
0000E294 D04B                       		add.w	a3,d0
0000E296 0A40 1800                  		eori.w	#$1800,d0
0000E29A 34C0                       		move.w	d0,(a2)+
0000E29C 1019                       		move.b	(a1)+,d0
0000E29E 4880                       		ext.w	d0
0000E2A0 4440                       		neg.w	d0
0000E2A2 D804                       		add.b	d4,d4
0000E2A4 0244 0018                  		andi.w	#$18,d4
0000E2A8 5044                       		addq.w	#8,d4
0000E2AA 9044                       		sub.w	d4,d0
0000E2AC D043                       		add.w	d3,d0
0000E2AE 0240 01FF                  		andi.w	#$1FF,d0
0000E2B2 6600                       		bne.s	loc_D876
0000E2B4 5240                       		addq.w	#1,d0
0000E2B6                            
0000E2B6                            loc_D876:
0000E2B6 34C0                       		move.w	d0,(a2)+
0000E2B8 51C9 FFB0                  		dbf	d1,loc_D82A
0000E2BC                            
0000E2BC                            locret_D87C:
0000E2BC 4E75                       		rts	
0000E2BE                            ; ---------------------------------------------------------------------------
0000E2BE                            ; Subroutine to	check if an object is on the screen
0000E2BE                            ; ---------------------------------------------------------------------------
0000E2BE                            
0000E2BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E2BE                            
0000E2BE                            
0000E2BE                            ChkObjOnScreen:
0000E2BE 3028 0008                  		move.w	8(a0),d0	; get object x-position
0000E2C2 9078 F700                  		sub.w	($FFFFF700).w,d0 ; subtract screen x-position
0000E2C6 6B00                       		bmi.s	NotOnScreen
0000E2C8 0C40 0140                  		cmpi.w	#320,d0		; is object on the screen?
0000E2CC 6C00                       		bge.s	NotOnScreen	; if not, branch
0000E2CE                            
0000E2CE 3228 000C                  		move.w	$C(a0),d1	; get object y-position
0000E2D2 9278 F704                  		sub.w	($FFFFF704).w,d1 ; subtract screen y-position
0000E2D6 6B00                       		bmi.s	NotOnScreen
0000E2D8 0C41 00E0                  		cmpi.w	#224,d1		; is object on the screen?
0000E2DC 6C00                       		bge.s	NotOnScreen	; if not, branch
0000E2DE                            
0000E2DE 7000                       		moveq	#0,d0		; set flag to 0
0000E2E0 4E75                       		rts	
0000E2E2                            ; ===========================================================================
0000E2E2                            
0000E2E2                            NotOnScreen:				; XREF: ChkObjOnScreen
0000E2E2 7001                       		moveq	#1,d0		; set flag to 1
0000E2E4 4E75                       		rts	
0000E2E6                            ; End of function ChkObjOnScreen
0000E2E6                            
0000E2E6                            
0000E2E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E2E6                            
0000E2E6                            
0000E2E6                            ChkObjOnScreen2:
0000E2E6 7200                       		moveq	#0,d1
0000E2E8 1228 0019                  		move.b	$19(a0),d1
0000E2EC 3028 0008                  		move.w	8(a0),d0
0000E2F0 9078 F700                  		sub.w	($FFFFF700).w,d0
0000E2F4 D041                       		add.w	d1,d0
0000E2F6 6B00                       		bmi.s	NotOnScreen2
0000E2F8 D241                       		add.w	d1,d1
0000E2FA 9041                       		sub.w	d1,d0
0000E2FC 0C40 0140                  		cmpi.w	#320,d0
0000E300 6C00                       		bge.s	NotOnScreen2
0000E302                            
0000E302 3228 000C                  		move.w	$C(a0),d1
0000E306 9278 F704                  		sub.w	($FFFFF704).w,d1
0000E30A 6B00                       		bmi.s	NotOnScreen2
0000E30C 0C41 00E0                  		cmpi.w	#224,d1
0000E310 6C00                       		bge.s	NotOnScreen2
0000E312                            
0000E312 7000                       		moveq	#0,d0
0000E314 4E75                       		rts	
0000E316                            ; ===========================================================================
0000E316                            
0000E316                            NotOnScreen2:				; XREF: ChkObjOnScreen2
0000E316 7001                       		moveq	#1,d0
0000E318 4E75                       		rts	
0000E31A                            ; End of function ChkObjOnScreen2
0000E31A                            
0000E31A                            ; ---------------------------------------------------------------------------
0000E31A                            ; Subroutine to	load a level's objects
0000E31A                            ; ---------------------------------------------------------------------------
0000E31A                            
0000E31A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E31A                            
0000E31A                            
0000E31A                            ObjPosLoad:				; XREF: Level; et al
0000E31A 7000                       		moveq	#0,d0
0000E31C 1038 F76C                  		move.b	($FFFFF76C).w,d0
0000E320 303B 0000                  		move.w	OPL_Index(pc,d0.w),d0
0000E324 4EFB 0000                  		jmp	OPL_Index(pc,d0.w)
0000E328                            ; End of function ObjPosLoad
0000E328                            
0000E328                            ; ===========================================================================
0000E328 0000                       OPL_Index:	dc.w OPL_Main-OPL_Index
0000E32A 0000                       		dc.w OPL_Next-OPL_Index
0000E32C                            ; ===========================================================================
0000E32C                            
0000E32C                            OPL_Main:				; XREF: OPL_Index
0000E32C 5438 F76C                  		addq.b	#2,($FFFFF76C).w
0000E330 3038 FE10                  		move.w	($FFFFFE10).w,d0
0000E334 ED08                       		lsl.b	#6,d0
0000E336 E848                       		lsr.w	#4,d0
0000E338 41F9 0000 0000             		lea	(ObjPos_Index).l,a0
0000E33E 2248                       		movea.l	a0,a1
0000E340 D0F0 0000                  		adda.w	(a0,d0.w),a0
0000E344 21C8 F770                  		move.l	a0,($FFFFF770).w
0000E348 21C8 F774                  		move.l	a0,($FFFFF774).w
0000E34C D2F1 0002                  		adda.w	2(a1,d0.w),a1
0000E350 21C9 F778                  		move.l	a1,($FFFFF778).w
0000E354 21C9 F77C                  		move.l	a1,($FFFFF77C).w
0000E358 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E35C 34FC 0101                  		move.w	#$101,(a2)+
0000E360 303C 005E                  		move.w	#$5E,d0
0000E364                            
0000E364                            OPL_ClrList:
0000E364 429A                       		clr.l	(a2)+
0000E366 51C8 FFFC                  		dbf	d0,OPL_ClrList	; clear	pre-destroyed object list
0000E36A                            
0000E36A 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E36E 7400                       		moveq	#0,d2
0000E370 3C38 F700                  		move.w	($FFFFF700).w,d6
0000E374 0446 0080                  		subi.w	#$80,d6
0000E378 6400                       		bcc.s	loc_D93C
0000E37A 7C00                       		moveq	#0,d6
0000E37C                            
0000E37C                            loc_D93C:
0000E37C 0246 FF80                  		andi.w	#$FF80,d6
0000E380 2078 F770                  		movea.l	($FFFFF770).w,a0
0000E384                            
0000E384                            loc_D944:
0000E384 BC50                       		cmp.w	(a0),d6
0000E386 6300                       		bls.s	loc_D956
0000E388 4A28 0004                  		tst.b	4(a0)
0000E38C 6A00                       		bpl.s	loc_D952
0000E38E 1412                       		move.b	(a2),d2
0000E390 5212                       		addq.b	#1,(a2)
0000E392                            
0000E392                            loc_D952:
0000E392 5C48                       		addq.w	#6,a0
0000E394 60EE                       		bra.s	loc_D944
0000E396                            ; ===========================================================================
0000E396                            
0000E396                            loc_D956:
0000E396 21C8 F770                  		move.l	a0,($FFFFF770).w
0000E39A 2078 F774                  		movea.l	($FFFFF774).w,a0
0000E39E 0446 0080                  		subi.w	#$80,d6
0000E3A2 6500                       		bcs.s	loc_D976
0000E3A4                            
0000E3A4                            loc_D964:
0000E3A4 BC50                       		cmp.w	(a0),d6
0000E3A6 6300                       		bls.s	loc_D976
0000E3A8 4A28 0004                  		tst.b	4(a0)
0000E3AC 6A00                       		bpl.s	loc_D972
0000E3AE 522A 0001                  		addq.b	#1,1(a2)
0000E3B2                            
0000E3B2                            loc_D972:
0000E3B2 5C48                       		addq.w	#6,a0
0000E3B4 60EE                       		bra.s	loc_D964
0000E3B6                            ; ===========================================================================
0000E3B6                            
0000E3B6                            loc_D976:
0000E3B6 21C8 F774                  		move.l	a0,($FFFFF774).w
0000E3BA 31FC FFFF F76E             		move.w	#-1,($FFFFF76E).w
0000E3C0                            
0000E3C0                            OPL_Next:				; XREF: OPL_Index
0000E3C0 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E3C4 7400                       		moveq	#0,d2
0000E3C6 3C38 F700                  		move.w	($FFFFF700).w,d6
0000E3CA 0246 FF80                  		andi.w	#$FF80,d6
0000E3CE BC78 F76E                  		cmp.w	($FFFFF76E).w,d6
0000E3D2 6700 0000                  		beq.w	locret_DA3A
0000E3D6 6C00                       		bge.s	loc_D9F6
0000E3D8 31C6 F76E                  		move.w	d6,($FFFFF76E).w
0000E3DC 2078 F774                  		movea.l	($FFFFF774).w,a0
0000E3E0 0446 0080                  		subi.w	#$80,d6
0000E3E4 6500                       		bcs.s	loc_D9D2
0000E3E6                            
0000E3E6                            loc_D9A6:
0000E3E6 BC68 FFFA                  		cmp.w	-6(a0),d6
0000E3EA 6C00                       		bge.s	loc_D9D2
0000E3EC 5D48                       		subq.w	#6,a0
0000E3EE 4A28 0004                  		tst.b	4(a0)
0000E3F2 6A00                       		bpl.s	loc_D9BC
0000E3F4 532A 0001                  		subq.b	#1,1(a2)
0000E3F8 142A 0001                  		move.b	1(a2),d2
0000E3FC                            
0000E3FC                            loc_D9BC:
0000E3FC 6100 0000                  		bsr.w	loc_DA3C
0000E400 6600                       		bne.s	loc_D9C6
0000E402 5D48                       		subq.w	#6,a0
0000E404 60E0                       		bra.s	loc_D9A6
0000E406                            ; ===========================================================================
0000E406                            
0000E406                            loc_D9C6:
0000E406 4A28 0004                  		tst.b	4(a0)
0000E40A 6A00                       		bpl.s	loc_D9D0
0000E40C 522A 0001                  		addq.b	#1,1(a2)
0000E410                            
0000E410                            loc_D9D0:
0000E410 5C48                       		addq.w	#6,a0
0000E412                            
0000E412                            loc_D9D2:
0000E412 21C8 F774                  		move.l	a0,($FFFFF774).w
0000E416 2078 F770                  		movea.l	($FFFFF770).w,a0
0000E41A 0646 0300                  		addi.w	#$300,d6
0000E41E                            
0000E41E                            loc_D9DE:
0000E41E BC68 FFFA                  		cmp.w	-6(a0),d6
0000E422 6E00                       		bgt.s	loc_D9F0
0000E424 4A28 FFFE                  		tst.b	-2(a0)
0000E428 6A00                       		bpl.s	loc_D9EC
0000E42A 5312                       		subq.b	#1,(a2)
0000E42C                            
0000E42C                            loc_D9EC:
0000E42C 5D48                       		subq.w	#6,a0
0000E42E 60EE                       		bra.s	loc_D9DE
0000E430                            ; ===========================================================================
0000E430                            
0000E430                            loc_D9F0:
0000E430 21C8 F770                  		move.l	a0,($FFFFF770).w
0000E434 4E75                       		rts	
0000E436                            ; ===========================================================================
0000E436                            
0000E436                            loc_D9F6:
0000E436 31C6 F76E                  		move.w	d6,($FFFFF76E).w
0000E43A 2078 F770                  		movea.l	($FFFFF770).w,a0
0000E43E 0646 0280                  		addi.w	#$280,d6
0000E442                            
0000E442                            loc_DA02:
0000E442 BC50                       		cmp.w	(a0),d6
0000E444 6300                       		bls.s	loc_DA16
0000E446 4A28 0004                  		tst.b	4(a0)
0000E44A 6A00                       		bpl.s	loc_DA10
0000E44C 1412                       		move.b	(a2),d2
0000E44E 5212                       		addq.b	#1,(a2)
0000E450                            
0000E450                            loc_DA10:
0000E450 6100 0000                  		bsr.w	loc_DA3C
0000E454 67EC                       		beq.s	loc_DA02
0000E456                            
0000E456                            loc_DA16:
0000E456 21C8 F770                  		move.l	a0,($FFFFF770).w
0000E45A 2078 F774                  		movea.l	($FFFFF774).w,a0
0000E45E 0446 0300                  		subi.w	#$300,d6
0000E462 6500                       		bcs.s	loc_DA36
0000E464                            
0000E464                            loc_DA24:
0000E464 BC50                       		cmp.w	(a0),d6
0000E466 6300                       		bls.s	loc_DA36
0000E468 4A28 0004                  		tst.b	4(a0)
0000E46C 6A00                       		bpl.s	loc_DA32
0000E46E 522A 0001                  		addq.b	#1,1(a2)
0000E472                            
0000E472                            loc_DA32:
0000E472 5C48                       		addq.w	#6,a0
0000E474 60EE                       		bra.s	loc_DA24
0000E476                            ; ===========================================================================
0000E476                            
0000E476                            loc_DA36:
0000E476 21C8 F774                  		move.l	a0,($FFFFF774).w
0000E47A                            
0000E47A                            locret_DA3A:
0000E47A 4E75                       		rts	
0000E47C                            ; ===========================================================================
0000E47C                            
0000E47C                            loc_DA3C:
0000E47C 4A28 0004                  		tst.b	4(a0)
0000E480 6A00                       		bpl.s	OPL_MakeItem
0000E482 08F2 0007 2002             		bset	#7,2(a2,d2.w)
0000E488 6700                       		beq.s	OPL_MakeItem
0000E48A 5C48                       		addq.w	#6,a0
0000E48C 7000                       		moveq	#0,d0
0000E48E 4E75                       		rts	
0000E490                            ; ===========================================================================
0000E490                            
0000E490                            OPL_MakeItem:
0000E490 6100 0000                  		bsr.w	SingleObjLoad
0000E494 6600                       		bne.s	locret_DA8A
0000E496 3358 0008                  		move.w	(a0)+,8(a1)
0000E49A 3018                       		move.w	(a0)+,d0
0000E49C 3200                       		move.w	d0,d1
0000E49E 0240 0FFF                  		andi.w	#$FFF,d0
0000E4A2 3340 000C                  		move.w	d0,$C(a1)
0000E4A6 E559                       		rol.w	#2,d1
0000E4A8 0201 0003                  		andi.b	#3,d1
0000E4AC 1341 0001                  		move.b	d1,1(a1)
0000E4B0 1341 0022                  		move.b	d1,$22(a1)
0000E4B4 1018                       		move.b	(a0)+,d0
0000E4B6 6A00                       		bpl.s	loc_DA80
0000E4B8 0200 007F                  		andi.b	#$7F,d0
0000E4BC 1342 0023                  		move.b	d2,$23(a1)
0000E4C0                            
0000E4C0                            loc_DA80:
0000E4C0 1280                       		move.b	d0,0(a1)
0000E4C2 1358 0028                  		move.b	(a0)+,$28(a1)
0000E4C6 7000                       		moveq	#0,d0
0000E4C8                            
0000E4C8                            locret_DA8A:
0000E4C8 4E75                       		rts	
0000E4CA                            ; ---------------------------------------------------------------------------
0000E4CA                            ; Single object	loading	subroutine
0000E4CA                            ; ---------------------------------------------------------------------------
0000E4CA                            
0000E4CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E4CA                            
0000E4CA                            
0000E4CA                            SingleObjLoad:
0000E4CA 43F8 D800                  		lea	($FFFFD800).w,a1 ; start address for object RAM
0000E4CE 303C 005F                  		move.w	#$5F,d0
0000E4D2                            
0000E4D2                            loc_DA94:
0000E4D2 4A11                       		tst.b	(a1)		; is object RAM	slot empty?
0000E4D4 6700                       		beq.s	locret_DAA0	; if yes, branch
0000E4D6 43E9 0040                  		lea	$40(a1),a1	; goto next object RAM slot
0000E4DA 51C8 FFF6                  		dbf	d0,loc_DA94	; repeat $5F times
0000E4DE                            
0000E4DE                            locret_DAA0:
0000E4DE 4E75                       		rts	
0000E4E0                            ; End of function SingleObjLoad
0000E4E0                            
0000E4E0                            
0000E4E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E4E0                            
0000E4E0                            
0000E4E0                            SingleObjLoad2:
0000E4E0 2248                       		movea.l	a0,a1
0000E4E2 303C F000                  		move.w	#-$1000,d0
0000E4E6 9048                       		sub.w	a0,d0
0000E4E8 EC48                       		lsr.w	#6,d0
0000E4EA 5340                       		subq.w	#1,d0
0000E4EC 6500                       		bcs.s	locret_DABC
0000E4EE                            
0000E4EE                            loc_DAB0:
0000E4EE 4A11                       		tst.b	(a1)
0000E4F0 6700                       		beq.s	locret_DABC
0000E4F2 43E9 0040                  		lea	$40(a1),a1
0000E4F6 51C8 FFF6                  		dbf	d0,loc_DAB0
0000E4FA                            
0000E4FA                            locret_DABC:
0000E4FA 4E75                       		rts	
0000E4FC                            ; End of function SingleObjLoad2
0000E4FC                            
0000E4FC                            ; ===========================================================================
0000E4FC                            ; ---------------------------------------------------------------------------
0000E4FC                            ; Object 41 - springs
0000E4FC                            ; ---------------------------------------------------------------------------
0000E4FC                            
0000E4FC                            Obj41:					; XREF: Obj_Index
0000E4FC 7000                       		moveq	#0,d0
0000E4FE 1028 0024                  		move.b	$24(a0),d0
0000E502 323B 0000                  		move.w	Obj41_Index(pc,d0.w),d1
0000E506 4EBB 1000                  		jsr	Obj41_Index(pc,d1.w)
0000E50A 6100 FB38                  		bsr.w	DisplaySprite
0000E50E 3028 0008                  		move.w	8(a0),d0
0000E512 0240 FF80                  		andi.w	#$FF80,d0
0000E516 3238 F700                  		move.w	($FFFFF700).w,d1
0000E51A 0441 0080                  		subi.w	#$80,d1
0000E51E 0241 FF80                  		andi.w	#$FF80,d1
0000E522 9041                       		sub.w	d1,d0
0000E524 0C40 0280                  		cmpi.w	#$280,d0
0000E528 6200 FB56                  		bhi.w	DeleteObject
0000E52C 4E75                       		rts	
0000E52E                            ; ===========================================================================
0000E52E 0000                       Obj41_Index:	dc.w Obj41_Main-Obj41_Index
0000E530 0000                       		dc.w Obj41_Up-Obj41_Index
0000E532 0000                       		dc.w Obj41_AniUp-Obj41_Index
0000E534 0000                       		dc.w Obj41_ResetUp-Obj41_Index
0000E536 0000                       		dc.w Obj41_LR-Obj41_Index
0000E538 0000                       		dc.w Obj41_AniLR-Obj41_Index
0000E53A 0000                       		dc.w Obj41_ResetLR-Obj41_Index
0000E53C 0000                       		dc.w Obj41_Dwn-Obj41_Index
0000E53E 0000                       		dc.w Obj41_AniDwn-Obj41_Index
0000E540 0000                       		dc.w Obj41_ResetDwn-Obj41_Index
0000E542                            
0000E542 F000                       Obj41_Powers:	dc.w -$1000		; power	of red spring
0000E544 F600                       		dc.w -$A00		; power	of yellow spring
0000E546                            ; ===========================================================================
0000E546                            
0000E546                            Obj41_Main:				; XREF: Obj41_Index
0000E546 5428 0024                  		addq.b	#2,$24(a0)
0000E54A 217C 0000 0000 0004        		move.l	#Map_obj41,4(a0)
0000E552 317C 0523 0002             		move.w	#$523,2(a0)
0000E558 0028 0004 0001             		ori.b	#4,1(a0)
0000E55E 117C 0010 0019             		move.b	#$10,$19(a0)
0000E564 117C 0004 0018             		move.b	#4,$18(a0)
0000E56A 1028 0028                  		move.b	$28(a0),d0
0000E56E 0800 0004                  		btst	#4,d0		; does the spring face left/right?
0000E572 6700                       		beq.s	loc_DB54	; if not, branch
0000E574 117C 0008 0024             		move.b	#8,$24(a0)	; use "Obj41_LR" routine
0000E57A 117C 0001 001C             		move.b	#1,$1C(a0)
0000E580 117C 0003 001A             		move.b	#3,$1A(a0)
0000E586 317C 0533 0002             		move.w	#$533,2(a0)
0000E58C 117C 0008 0019             		move.b	#8,$19(a0)
0000E592                            
0000E592                            loc_DB54:
0000E592 0800 0005                  		btst	#5,d0		; does the spring face downwards?
0000E596 6700                       		beq.s	loc_DB66	; if not, branch
0000E598 117C 000E 0024             		move.b	#$E,$24(a0)	; use "Obj41_Dwn" routine
0000E59E 08E8 0001 0022             		bset	#1,$22(a0)
0000E5A4                            
0000E5A4                            loc_DB66:
0000E5A4 0800 0001                  		btst	#1,d0
0000E5A8 6700                       		beq.s	loc_DB72
0000E5AA 08E8 0005 0002             		bset	#5,2(a0)
0000E5B0                            
0000E5B0                            loc_DB72:
0000E5B0 0240 000F                  		andi.w	#$F,d0
0000E5B4 317B 008C 0030             		move.w	Obj41_Powers(pc,d0.w),$30(a0)
0000E5BA 4E75                       		rts	
0000E5BC                            ; ===========================================================================
0000E5BC                            
0000E5BC                            Obj41_Up:				; XREF: Obj41_Index
0000E5BC 323C 001B                  		move.w	#$1B,d1
0000E5C0 343C 0008                  		move.w	#8,d2
0000E5C4 363C 0010                  		move.w	#$10,d3
0000E5C8 3828 0008                  		move.w	8(a0),d4
0000E5CC 6100 0000                  		bsr.w	SolidObject
0000E5D0 4A28 0025                  		tst.b	$25(a0)		; is Sonic on top of the spring?
0000E5D4 6600                       		bne.s	Obj41_BounceUp	; if yes, branch
0000E5D6 4E75                       		rts	
0000E5D8                            ; ===========================================================================
0000E5D8                            
0000E5D8                            Obj41_BounceUp:				; XREF: Obj41_Up
0000E5D8 5428 0024                  		addq.b	#2,$24(a0)
0000E5DC 5069 000C                  		addq.w	#8,$C(a1)
0000E5E0 3368 0030 0012             		move.w	$30(a0),$12(a1)	; move Sonic upwards
0000E5E6 08E9 0001 0022             		bset	#1,$22(a1)
0000E5EC 08A9 0003 0022             		bclr	#3,$22(a1)
0000E5F2 137C 0010 001C             		move.b	#$10,$1C(a1)	; use "bouncing" animation
0000E5F8 137C 0002 0024             		move.b	#2,$24(a1)
0000E5FE 08A8 0003 0022             		bclr	#3,$22(a0)
0000E604 4228 0025                  		clr.b	$25(a0)
0000E608 303C 00CC                  		move.w	#$CC,d0
0000E60C 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play spring sound
0000E612                            
0000E612                            Obj41_AniUp:				; XREF: Obj41_Index
0000E612 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000E618 6000 CA80                  		bra.w	AnimateSprite
0000E61C                            ; ===========================================================================
0000E61C                            
0000E61C                            Obj41_ResetUp:				; XREF: Obj41_Index
0000E61C 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000E622 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Up" routine
0000E626 4E75                       		rts	
0000E628                            ; ===========================================================================
0000E628                            
0000E628                            Obj41_LR:				; XREF: Obj41_Index
0000E628 323C 0013                  		move.w	#$13,d1
0000E62C 343C 000E                  		move.w	#$E,d2
0000E630 363C 000F                  		move.w	#$F,d3
0000E634 3828 0008                  		move.w	8(a0),d4
0000E638 6100 0000                  		bsr.w	SolidObject
0000E63C 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000E642 6600                       		bne.s	loc_DC0C
0000E644 117C 0008 0024             		move.b	#8,$24(a0)
0000E64A                            
0000E64A                            loc_DC0C:
0000E64A 0828 0005 0022             		btst	#5,$22(a0)
0000E650 6600                       		bne.s	Obj41_BounceLR
0000E652 4E75                       		rts	
0000E654                            ; ===========================================================================
0000E654                            
0000E654                            Obj41_BounceLR:				; XREF: Obj41_LR
0000E654 5428 0024                  		addq.b	#2,$24(a0)
0000E658 3368 0030 0010             		move.w	$30(a0),$10(a1)	; move Sonic to	the left
0000E65E 5069 0008                  		addq.w	#8,8(a1)
0000E662 0828 0000 0022             		btst	#0,$22(a0)	; is object flipped?
0000E668 6600                       		bne.s	loc_DC36	; if yes, branch
0000E66A 0469 0010 0008             		subi.w	#$10,8(a1)
0000E670 4469 0010                  		neg.w	$10(a1)		; move Sonic to	the right
0000E674                            
0000E674                            loc_DC36:
0000E674 337C 000F 003E             		move.w	#$F,$3E(a1)
0000E67A 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000E680 0869 0000 0022             		bchg	#0,$22(a1)
0000E686 0829 0002 0022             		btst	#2,$22(a1)
0000E68C 6600                       		bne.s	loc_DC56
0000E68E 137C 0000 001C             		move.b	#0,$1C(a1)	; use running animation
0000E694                            
0000E694                            loc_DC56:
0000E694 08A8 0005 0022             		bclr	#5,$22(a0)
0000E69A 08A9 0005 0022             		bclr	#5,$22(a1)
0000E6A0 303C 00CC                  		move.w	#$CC,d0
0000E6A4 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play spring sound
0000E6AA                            
0000E6AA                            Obj41_AniLR:				; XREF: Obj41_Index
0000E6AA 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000E6B0 6000 C9E8                  		bra.w	AnimateSprite
0000E6B4                            ; ===========================================================================
0000E6B4                            
0000E6B4                            Obj41_ResetLR:				; XREF: Obj41_Index
0000E6B4 117C 0002 001D             		move.b	#2,$1D(a0)	; reset	animation
0000E6BA 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_LR" routine
0000E6BE 4E75                       		rts	
0000E6C0                            ; ===========================================================================
0000E6C0                            
0000E6C0                            Obj41_Dwn:				; XREF: Obj41_Index
0000E6C0 323C 001B                  		move.w	#$1B,d1
0000E6C4 343C 0008                  		move.w	#8,d2
0000E6C8 363C 0010                  		move.w	#$10,d3
0000E6CC 3828 0008                  		move.w	8(a0),d4
0000E6D0 6100 0000                  		bsr.w	SolidObject
0000E6D4 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000E6DA 6600                       		bne.s	loc_DCA4
0000E6DC 117C 000E 0024             		move.b	#$E,$24(a0)
0000E6E2                            
0000E6E2                            loc_DCA4:
0000E6E2 4A28 0025                  		tst.b	$25(a0)
0000E6E6 6600                       		bne.s	locret_DCAE
0000E6E8 4A44                       		tst.w	d4
0000E6EA 6B00                       		bmi.s	Obj41_BounceDwn
0000E6EC                            
0000E6EC                            locret_DCAE:
0000E6EC 4E75                       		rts	
0000E6EE                            ; ===========================================================================
0000E6EE                            
0000E6EE                            Obj41_BounceDwn:			; XREF: Obj41_Dwn
0000E6EE 5428 0024                  		addq.b	#2,$24(a0)
0000E6F2 5169 000C                  		subq.w	#8,$C(a1)
0000E6F6 3368 0030 0012             		move.w	$30(a0),$12(a1)
0000E6FC 4469 0012                  		neg.w	$12(a1)		; move Sonic downwards
0000E700 08E9 0001 0022             		bset	#1,$22(a1)
0000E706 08A9 0003 0022             		bclr	#3,$22(a1)
0000E70C 137C 0002 0024             		move.b	#2,$24(a1)
0000E712 08A8 0003 0022             		bclr	#3,$22(a0)
0000E718 4228 0025                  		clr.b	$25(a0)
0000E71C 303C 00CC                  		move.w	#$CC,d0
0000E720 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play spring sound
0000E726                            
0000E726                            Obj41_AniDwn:				; XREF: Obj41_Index
0000E726 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000E72C 6000 C96C                  		bra.w	AnimateSprite
0000E730                            ; ===========================================================================
0000E730                            
0000E730                            Obj41_ResetDwn:				; XREF: Obj41_Index
0000E730 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000E736 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Dwn" routine
0000E73A 4E75                       		rts	
0000E73C                            ; ===========================================================================
0000E73C                            Ani_obj41:
0000E73C                            	include "_anim\obj41.asm"
0000E73C                            ; ---------------------------------------------------------------------------
0000E73C                            ; Animation script - springs
0000E73C                            ; ---------------------------------------------------------------------------
0000E73C 0000                       		dc.w byte_DD02-Ani_obj41
0000E73E 0000                       		dc.w byte_DD0E-Ani_obj41
0000E740 0001 0000 0202 0202 0202+  byte_DD02:	dc.b 0,	1, 0, 0, 2, 2, 2, 2, 2,	2, 0, $FC
0000E74C 0004 0303 0505 0505 0505+  byte_DD0E:	dc.b 0,	4, 3, 3, 5, 5, 5, 5, 5,	5, 3, $FC
0000E758                            		even
0000E758                            		even
0000E758                            
0000E758                            ; ---------------------------------------------------------------------------
0000E758                            ; Sprite mappings - springs
0000E758                            ; ---------------------------------------------------------------------------
0000E758                            Map_obj41:
0000E758                            	include "_maps\obj41.asm"
0000E758                            ; ---------------------------------------------------------------------------
0000E758                            ; Sprite mappings - springs
0000E758                            ; ---------------------------------------------------------------------------
0000E758 0000                       		dc.w byte_DD26-Map_obj41
0000E75A 0000                       		dc.w byte_DD31-Map_obj41
0000E75C 0000                       		dc.w byte_DD37-Map_obj41
0000E75E 0000                       		dc.w byte_DD47-Map_obj41
0000E760 0000                       		dc.w byte_DD4D-Map_obj41
0000E762 0000                       		dc.w byte_DD53-Map_obj41
0000E764 02                         byte_DD26:	dc.b 2
0000E765 F80C 0000 F0               		dc.b $F8, $C, 0, 0, $F0
0000E76A 000C 0004 F0               		dc.b 0,	$C, 0, 4, $F0
0000E76F 01                         byte_DD31:	dc.b 1
0000E770 000C 0000 F0               		dc.b 0,	$C, 0, 0, $F0
0000E775 03                         byte_DD37:	dc.b 3
0000E776 E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0
0000E77B F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000E780 000C 000C F0               		dc.b 0,	$C, 0, $C, $F0
0000E785 01                         byte_DD47:	dc.b 1
0000E786 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
0000E78B 01                         byte_DD4D:	dc.b 1
0000E78C F003 0004 F8               		dc.b $F0, 3, 0,	4, $F8
0000E791 04                         byte_DD53:	dc.b 4
0000E792 F003 0004 10               		dc.b $F0, 3, 0,	4, $10
0000E797 F809 0008 F8               		dc.b $F8, 9, 0,	8, $F8
0000E79C F000 0000 F8               		dc.b $F0, 0, 0,	0, $F8
0000E7A1 0800 0003 F8               		dc.b 8,	0, 0, 3, $F8
0000E7A6                            		even
0000E7A6                            		even
0000E7A6                            
0000E7A6                            ; ===========================================================================
0000E7A6                            ; ---------------------------------------------------------------------------
0000E7A6                            ; Object 42 - Newtron enemy (GHZ)
0000E7A6                            ; ---------------------------------------------------------------------------
0000E7A6                            
0000E7A6                            Obj42:					; XREF: Obj_Index
0000E7A6 7000                       		moveq	#0,d0
0000E7A8 1028 0024                  		move.b	$24(a0),d0
0000E7AC 323B 0000                  		move.w	Obj42_Index(pc,d0.w),d1
0000E7B0 4EFB 1000                  		jmp	Obj42_Index(pc,d1.w)
0000E7B4                            ; ===========================================================================
0000E7B4 0000                       Obj42_Index:	dc.w Obj42_Main-Obj42_Index
0000E7B6 0000                       		dc.w Obj42_Action-Obj42_Index
0000E7B8 0000                       		dc.w Obj42_Delete-Obj42_Index
0000E7BA                            ; ===========================================================================
0000E7BA                            
0000E7BA                            Obj42_Main:				; XREF: Obj42_Index
0000E7BA 5428 0024                  		addq.b	#2,$24(a0)
0000E7BE 217C 0000 0000 0004        		move.l	#Map_obj42,4(a0)
0000E7C6 317C 049B 0002             		move.w	#$49B,2(a0)
0000E7CC 117C 0004 0001             		move.b	#4,1(a0)
0000E7D2 117C 0004 0018             		move.b	#4,$18(a0)
0000E7D8 117C 0014 0019             		move.b	#$14,$19(a0)
0000E7DE 117C 0010 0016             		move.b	#$10,$16(a0)
0000E7E4 117C 0008 0017             		move.b	#8,$17(a0)
0000E7EA                            
0000E7EA                            Obj42_Action:				; XREF: Obj42_Index
0000E7EA 7000                       		moveq	#0,d0
0000E7EC 1028 0025                  		move.b	$25(a0),d0
0000E7F0 323B 0000                  		move.w	Obj42_Index2(pc,d0.w),d1
0000E7F4 4EBB 1000                  		jsr	Obj42_Index2(pc,d1.w)
0000E7F8 43F9 0000 0000             		lea	(Ani_obj42).l,a1
0000E7FE 6100 C89A                  		bsr.w	AnimateSprite
0000E802 6000 0000                  		bra.w	MarkObjGone
0000E806                            ; ===========================================================================
0000E806 0000                       Obj42_Index2:	dc.w Obj42_ChkDist-Obj42_Index2
0000E808 0000                       		dc.w Obj42_Type00-Obj42_Index2
0000E80A 0000                       		dc.w Obj42_MatchFloor-Obj42_Index2
0000E80C 0000                       		dc.w Obj42_Speed-Obj42_Index2
0000E80E 0000                       		dc.w Obj42_Type01-Obj42_Index2
0000E810                            ; ===========================================================================
0000E810                            
0000E810                            Obj42_ChkDist:				; XREF: Obj42_Index2
0000E810 08E8 0000 0022             		bset	#0,$22(a0)
0000E816 3038 D008                  		move.w	($FFFFD008).w,d0
0000E81A 9068 0008                  		sub.w	8(a0),d0
0000E81E 6400                       		bcc.s	loc_DDEA
0000E820 4440                       		neg.w	d0
0000E822 08A8 0000 0022             		bclr	#0,$22(a0)
0000E828                            
0000E828                            loc_DDEA:
0000E828 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	the newtron?
0000E82C 6400                       		bcc.s	locret_DE12	; if not, branch
0000E82E 5428 0025                  		addq.b	#2,$25(a0)
0000E832 117C 0001 001C             		move.b	#1,$1C(a0)
0000E838 4A28 0028                  		tst.b	$28(a0)		; check	object type
0000E83C 6700                       		beq.s	locret_DE12	; if type is 00, branch
0000E83E 317C 249B 0002             		move.w	#$249B,2(a0)
0000E844 117C 0008 0025             		move.b	#8,$25(a0)	; run type 01 newtron subroutine
0000E84A 117C 0004 001C             		move.b	#4,$1C(a0)	; use different	animation
0000E850                            
0000E850                            locret_DE12:
0000E850 4E75                       		rts	
0000E852                            ; ===========================================================================
0000E852                            
0000E852                            Obj42_Type00:				; XREF: Obj42_Index2
0000E852 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; has "appearing" animation finished?
0000E858 6400                       		bcc.s	Obj42_Fall	; is yes, branch
0000E85A 08E8 0000 0022             		bset	#0,$22(a0)
0000E860 3038 D008                  		move.w	($FFFFD008).w,d0
0000E864 9068 0008                  		sub.w	8(a0),d0
0000E868 6400                       		bcc.s	locret_DE32
0000E86A 08A8 0000 0022             		bclr	#0,$22(a0)
0000E870                            
0000E870                            locret_DE32:
0000E870 4E75                       		rts	
0000E872                            ; ===========================================================================
0000E872                            
0000E872                            Obj42_Fall:				; XREF: Obj42_Type00
0000E872 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000E878 6600                       		bne.s	loc_DE42
0000E87A 117C 000C 0020             		move.b	#$C,$20(a0)
0000E880                            
0000E880                            loc_DE42:
0000E880 6100 F72A                  		bsr.w	ObjectFall
0000E884 6100 0000                  		bsr.w	ObjHitFloor
0000E888 4A41                       		tst.w	d1		; has newtron hit the floor?
0000E88A 6A00                       		bpl.s	locret_DE86	; if not, branch
0000E88C D368 000C                  		add.w	d1,$C(a0)
0000E890 317C 0000 0012             		move.w	#0,$12(a0)	; stop newtron falling
0000E896 5428 0025                  		addq.b	#2,$25(a0)
0000E89A 117C 0002 001C             		move.b	#2,$1C(a0)
0000E8A0 0828 0005 0002             		btst	#5,2(a0)
0000E8A6 6700                       		beq.s	Obj42_Move
0000E8A8 5228 001C                  		addq.b	#1,$1C(a0)
0000E8AC                            
0000E8AC                            Obj42_Move:
0000E8AC 117C 000D 0020             		move.b	#$D,$20(a0)
0000E8B2 317C 0200 0010             		move.w	#$200,$10(a0)	; move newtron horizontally
0000E8B8 0828 0000 0022             		btst	#0,$22(a0)
0000E8BE 6600                       		bne.s	locret_DE86
0000E8C0 4468 0010                  		neg.w	$10(a0)
0000E8C4                            
0000E8C4                            locret_DE86:
0000E8C4 4E75                       		rts	
0000E8C6                            ; ===========================================================================
0000E8C6                            
0000E8C6                            Obj42_MatchFloor:			; XREF: Obj42_Index2
0000E8C6 6100 F756                  		bsr.w	SpeedToPos
0000E8CA 6100 0000                  		bsr.w	ObjHitFloor
0000E8CE 0C41 FFF8                  		cmpi.w	#-8,d1
0000E8D2 6D00                       		blt.s	loc_DEA2
0000E8D4 0C41 000C                  		cmpi.w	#$C,d1
0000E8D8 6C00                       		bge.s	loc_DEA2
0000E8DA D368 000C                  		add.w	d1,$C(a0)	; match	newtron's position with floor
0000E8DE 4E75                       		rts	
0000E8E0                            ; ===========================================================================
0000E8E0                            
0000E8E0                            loc_DEA2:
0000E8E0 5428 0025                  		addq.b	#2,$25(a0)
0000E8E4 4E75                       		rts	
0000E8E6                            ; ===========================================================================
0000E8E6                            
0000E8E6                            Obj42_Speed:				; XREF: Obj42_Index2
0000E8E6 6100 F736                  		bsr.w	SpeedToPos
0000E8EA 4E75                       		rts	
0000E8EC                            ; ===========================================================================
0000E8EC                            
0000E8EC                            Obj42_Type01:				; XREF: Obj42_Index2
0000E8EC 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000E8F2 6600                       		bne.s	Obj42_FireMissile
0000E8F4 117C 000C 0020             		move.b	#$C,$20(a0)
0000E8FA                            
0000E8FA                            Obj42_FireMissile:
0000E8FA 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000E900 6600                       		bne.s	locret_DF14
0000E902 4A28 0032                  		tst.b	$32(a0)
0000E906 6600                       		bne.s	locret_DF14
0000E908 117C 0001 0032             		move.b	#1,$32(a0)
0000E90E 6100 FBBA                  		bsr.w	SingleObjLoad
0000E912 6600                       		bne.s	locret_DF14
0000E914 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
0000E918 3368 0008 0008             		move.w	8(a0),8(a1)
0000E91E 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000E924 5169 000C                  		subq.w	#8,$C(a1)
0000E928 337C 0200 0010             		move.w	#$200,$10(a1)
0000E92E 303C 0014                  		move.w	#$14,d0
0000E932 0828 0000 0022             		btst	#0,$22(a0)
0000E938 6600                       		bne.s	loc_DF04
0000E93A 4440                       		neg.w	d0
0000E93C 4469 0010                  		neg.w	$10(a1)
0000E940                            
0000E940                            loc_DF04:
0000E940 D169 0008                  		add.w	d0,8(a1)
0000E944 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000E94A 137C 0001 0028             		move.b	#1,$28(a1)
0000E950                            
0000E950                            locret_DF14:
0000E950 4E75                       		rts	
0000E952                            ; ===========================================================================
0000E952                            
0000E952                            Obj42_Delete:				; XREF: Obj42_Index
0000E952 6000 F72C                  		bra.w	DeleteObject
0000E956                            ; ===========================================================================
0000E956                            Ani_obj42:
0000E956                            	include "_anim\obj42.asm"
0000E956                            ; ---------------------------------------------------------------------------
0000E956                            ; Animation script - Newtron enemy
0000E956                            ; ---------------------------------------------------------------------------
0000E956 0000                       		dc.w byte_DF24-Ani_obj42
0000E958 0000                       		dc.w byte_DF28-Ani_obj42
0000E95A 0000                       		dc.w byte_DF30-Ani_obj42
0000E95C 0000                       		dc.w byte_DF34-Ani_obj42
0000E95E 0000                       		dc.w byte_DF38-Ani_obj42
0000E960 0F0A FF00                  byte_DF24:	dc.b $F, $A, $FF, 0
0000E964 1300 0103 0405 FE01        byte_DF28:	dc.b $13, 0, 1,	3, 4, 5, $FE, 1
0000E96C 0206 07FF                  byte_DF30:	dc.b 2,	6, 7, $FF
0000E970 0208 09FF                  byte_DF34:	dc.b 2,	8, 9, $FF
0000E974 1300 0101 0201 0100 FC00   byte_DF38:	dc.b $13, 0, 1,	1, 2, 1, 1, 0, $FC, 0
0000E97E                            		even
0000E97E                            		even
0000E97E                            
0000E97E                            ; ---------------------------------------------------------------------------
0000E97E                            ; Sprite mappings - Newtron enemy (GHZ)
0000E97E                            ; ---------------------------------------------------------------------------
0000E97E                            Map_obj42:
0000E97E                            	include "_maps\obj42.asm"
0000E97E                            ; ---------------------------------------------------------------------------
0000E97E                            ; Sprite mappings - Newtron enemy (GHZ)
0000E97E                            ; ---------------------------------------------------------------------------
0000E97E 0000 0000                  		dc.w byte_DF58-Map_obj42, byte_DF68-Map_obj42
0000E982 0000 0000                  		dc.w byte_DF78-Map_obj42, byte_DF88-Map_obj42
0000E986 0000 0000                  		dc.w byte_DF9D-Map_obj42, byte_DFAD-Map_obj42
0000E98A 0000 0000                  		dc.w byte_DFB8-Map_obj42, byte_DFC8-Map_obj42
0000E98E 0000 0000                  		dc.w byte_DFD8-Map_obj42, byte_DFE8-Map_obj42
0000E992 0000                       		dc.w byte_DFF8-Map_obj42
0000E994 03                         byte_DF58:	dc.b 3
0000E995 EC0D 0000 EC               		dc.b $EC, $D, 0, 0, $EC
0000E99A F400 0008 0C               		dc.b $F4, 0, 0,	8, $C
0000E99F FC0E 0009 F4               		dc.b $FC, $E, 0, 9, $F4
0000E9A4 03                         byte_DF68:	dc.b 3
0000E9A5 EC06 0015 EC               		dc.b $EC, 6, 0,	$15, $EC
0000E9AA EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000E9AF FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000E9B4 03                         byte_DF78:	dc.b 3
0000E9B5 EC06 002A EC               		dc.b $EC, 6, 0,	$2A, $EC
0000E9BA EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000E9BF FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000E9C4 04                         byte_DF88:	dc.b 4
0000E9C5 EC06 0030 EC               		dc.b $EC, 6, 0,	$30, $EC
0000E9CA EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000E9CF FC09 0036 FC               		dc.b $FC, 9, 0,	$36, $FC
0000E9D4 0C00 003C 0C               		dc.b $C, 0, 0, $3C, $C
0000E9D9 03                         byte_DF9D:	dc.b 3
0000E9DA F40D 003D EC               		dc.b $F4, $D, 0, $3D, $EC
0000E9DF FC00 0020 0C               		dc.b $FC, 0, 0,	$20, $C
0000E9E4 0408 0045 FC               		dc.b 4,	8, 0, $45, $FC
0000E9E9 02                         byte_DFAD:	dc.b 2
0000E9EA F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E9EF F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E9F4 03                         byte_DFB8:	dc.b 3
0000E9F5 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E9FA F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E9FF FE00 0052 14               		dc.b $FE, 0, 0,	$52, $14
0000EA04 03                         byte_DFC8:	dc.b 3
0000EA05 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000EA0A F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000EA0F FE04 0053 14               		dc.b $FE, 4, 0,	$53, $14
0000EA14 03                         byte_DFD8:	dc.b 3
0000EA15 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000EA1A F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000EA1F FE00 E052 14               		dc.b $FE, 0, $E0, $52, $14
0000EA24 03                         byte_DFE8:	dc.b 3
0000EA25 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000EA2A F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000EA2F FE04 E053 14               		dc.b $FE, 4, $E0, $53, $14
0000EA34 00                         byte_DFF8:	dc.b 0
0000EA36 00                         		even
0000EA36 00                         		even
0000EA36                            
0000EA36                            ; ===========================================================================
0000EA36                            ; ---------------------------------------------------------------------------
0000EA36                            ; Object 43 - Roller enemy (SYZ)
0000EA36                            ; ---------------------------------------------------------------------------
0000EA36                            
0000EA36                            Obj43:					; XREF: Obj_Index
0000EA36 7000                       		moveq	#0,d0
0000EA38 1028 0024                  		move.b	$24(a0),d0
0000EA3C 323B 0000                  		move.w	Obj43_Index(pc,d0.w),d1
0000EA40 4EFB 1000                  		jmp	Obj43_Index(pc,d1.w)
0000EA44                            ; ===========================================================================
0000EA44 0000                       Obj43_Index:	dc.w Obj43_Main-Obj43_Index
0000EA46 0000                       		dc.w Obj43_Action-Obj43_Index
0000EA48                            ; ===========================================================================
0000EA48                            
0000EA48                            Obj43_Main:				; XREF: Obj43_Index
0000EA48 117C 000E 0016             		move.b	#$E,$16(a0)
0000EA4E 117C 0008 0017             		move.b	#8,$17(a0)
0000EA54 6100 F556                  		bsr.w	ObjectFall
0000EA58 6100 0000                  		bsr.w	ObjHitFloor
0000EA5C 4A41                       		tst.w	d1
0000EA5E 6A00                       		bpl.s	locret_E052
0000EA60 D368 000C                  		add.w	d1,$C(a0)	; match	roller's position with the floor
0000EA64 317C 0000 0012             		move.w	#0,$12(a0)
0000EA6A 5428 0024                  		addq.b	#2,$24(a0)
0000EA6E 217C 0000 0000 0004        		move.l	#Map_obj43,4(a0)
0000EA76 317C 04B8 0002             		move.w	#$4B8,2(a0)
0000EA7C 117C 0004 0001             		move.b	#4,1(a0)
0000EA82 117C 0004 0018             		move.b	#4,$18(a0)
0000EA88 117C 0010 0019             		move.b	#$10,$19(a0)
0000EA8E                            
0000EA8E                            locret_E052:
0000EA8E 4E75                       		rts	
0000EA90                            ; ===========================================================================
0000EA90                            
0000EA90                            Obj43_Action:				; XREF: Obj43_Index
0000EA90 7000                       		moveq	#0,d0
0000EA92 1028 0025                  		move.b	$25(a0),d0
0000EA96 323B 0000                  		move.w	Obj43_Index2(pc,d0.w),d1
0000EA9A 4EBB 1000                  		jsr	Obj43_Index2(pc,d1.w)
0000EA9E 43F9 0000 0000             		lea	(Ani_obj43).l,a1
0000EAA4 6100 C5F4                  		bsr.w	AnimateSprite
0000EAA8 3028 0008                  		move.w	8(a0),d0
0000EAAC 0240 FF80                  		andi.w	#$FF80,d0
0000EAB0 3238 F700                  		move.w	($FFFFF700).w,d1
0000EAB4 0441 0080                  		subi.w	#$80,d1
0000EAB8 0241 FF80                  		andi.w	#$FF80,d1
0000EABC 9041                       		sub.w	d1,d0
0000EABE 0C40 0280                  		cmpi.w	#$280,d0
0000EAC2 6E00 0000                  		bgt.w	Obj43_ChkGone
0000EAC6 6000 F57C                  		bra.w	DisplaySprite
0000EACA                            ; ===========================================================================
0000EACA                            
0000EACA                            Obj43_ChkGone:				; XREF: Obj43_Action
0000EACA 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000EACE 7000                       		moveq	#0,d0
0000EAD0 1028 0023                  		move.b	$23(a0),d0
0000EAD4 6700                       		beq.s	Obj43_Delete
0000EAD6 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000EADC                            
0000EADC                            Obj43_Delete:
0000EADC 6000 F5A2                  		bra.w	DeleteObject
0000EAE0                            ; ===========================================================================
0000EAE0 0000                       Obj43_Index2:	dc.w Obj43_RollChk-Obj43_Index2
0000EAE2 0000                       		dc.w Obj43_RollNoChk-Obj43_Index2
0000EAE4 0000                       		dc.w Obj43_ChkJump-Obj43_Index2
0000EAE6 0000                       		dc.w Obj43_MatchFloor-Obj43_Index2
0000EAE8                            ; ===========================================================================
0000EAE8                            
0000EAE8                            Obj43_RollChk:				; XREF: Obj43_Index2
0000EAE8 3038 D008                  		move.w	($FFFFD008).w,d0
0000EAEC 0440 0100                  		subi.w	#$100,d0
0000EAF0 6500                       		bcs.s	loc_E0D2
0000EAF2 9068 0008                  		sub.w	8(a0),d0	; check	distance between Roller	and Sonic
0000EAF6 6500                       		bcs.s	loc_E0D2
0000EAF8 5828 0025                  		addq.b	#4,$25(a0)
0000EAFC 117C 0002 001C             		move.b	#2,$1C(a0)
0000EB02 317C 0700 0010             		move.w	#$700,$10(a0)	; move Roller horizontally
0000EB08 117C 008E 0020             		move.b	#$8E,$20(a0)	; make Roller invincible
0000EB0E                            
0000EB0E                            loc_E0D2:
0000EB0E 588F                       		addq.l	#4,sp
0000EB10 4E75                       		rts	
0000EB12                            ; ===========================================================================
0000EB12                            
0000EB12                            Obj43_RollNoChk:			; XREF: Obj43_Index2
0000EB12 0C28 0002 001C             		cmpi.b	#2,$1C(a0)
0000EB18 6700                       		beq.s	loc_E0F8
0000EB1A 5368 0030                  		subq.w	#1,$30(a0)
0000EB1E 6A00                       		bpl.s	locret_E0F6
0000EB20 117C 0001 001C             		move.b	#1,$1C(a0)
0000EB26 317C 0700 0010             		move.w	#$700,$10(a0)
0000EB2C 117C 008E 0020             		move.b	#$8E,$20(a0)
0000EB32                            
0000EB32                            locret_E0F6:
0000EB32 4E75                       		rts	
0000EB34                            ; ===========================================================================
0000EB34                            
0000EB34                            loc_E0F8:
0000EB34 5428 0025                  		addq.b	#2,$25(a0)
0000EB38 4E75                       		rts	
0000EB3A                            ; ===========================================================================
0000EB3A                            
0000EB3A                            Obj43_ChkJump:				; XREF: Obj43_Index2
0000EB3A 6100 0000                  		bsr.w	Obj43_Stop
0000EB3E 6100 F4DE                  		bsr.w	SpeedToPos
0000EB42 6100 0000                  		bsr.w	ObjHitFloor
0000EB46 0C41 FFF8                  		cmpi.w	#-8,d1
0000EB4A 6D00                       		blt.s	Obj43_Jump
0000EB4C 0C41 000C                  		cmpi.w	#$C,d1
0000EB50 6C00                       		bge.s	Obj43_Jump
0000EB52 D368 000C                  		add.w	d1,$C(a0)
0000EB56 4E75                       		rts	
0000EB58                            ; ===========================================================================
0000EB58                            
0000EB58                            Obj43_Jump:
0000EB58 5428 0025                  		addq.b	#2,$25(a0)
0000EB5C 08E8 0000 0032             		bset	#0,$32(a0)
0000EB62 6700                       		beq.s	locret_E12E
0000EB64 317C FA00 0012             		move.w	#-$600,$12(a0)	; move Roller vertically
0000EB6A                            
0000EB6A                            locret_E12E:
0000EB6A 4E75                       		rts	
0000EB6C                            ; ===========================================================================
0000EB6C                            
0000EB6C                            Obj43_MatchFloor:			; XREF: Obj43_Index2
0000EB6C 6100 F43E                  		bsr.w	ObjectFall
0000EB70 4A68 0012                  		tst.w	$12(a0)
0000EB74 6B00                       		bmi.s	locret_E150
0000EB76 6100 0000                  		bsr.w	ObjHitFloor
0000EB7A 4A41                       		tst.w	d1
0000EB7C 6A00                       		bpl.s	locret_E150
0000EB7E D368 000C                  		add.w	d1,$C(a0)	; match	Roller's position with the floor
0000EB82 5528 0025                  		subq.b	#2,$25(a0)
0000EB86 317C 0000 0012             		move.w	#0,$12(a0)
0000EB8C                            
0000EB8C                            locret_E150:
0000EB8C 4E75                       		rts	
0000EB8E                            
0000EB8E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000EB8E                            
0000EB8E                            
0000EB8E                            Obj43_Stop:				; XREF: Obj43_ChkJump
0000EB8E 4A28 0032                  		tst.b	$32(a0)
0000EB92 6B00                       		bmi.s	locret_E188
0000EB94 3038 D008                  		move.w	($FFFFD008).w,d0
0000EB98 0440 0030                  		subi.w	#$30,d0
0000EB9C 9068 0008                  		sub.w	8(a0),d0
0000EBA0 6400                       		bcc.s	locret_E188
0000EBA2 117C 0000 001C             		move.b	#0,$1C(a0)
0000EBA8 117C 000E 0020             		move.b	#$E,$20(a0)
0000EBAE 4268 0010                  		clr.w	$10(a0)
0000EBB2 317C 0078 0030             		move.w	#120,$30(a0)	; set waiting time to 2	seconds
0000EBB8 117C 0002 0025             		move.b	#2,$25(a0)
0000EBBE 08E8 0007 0032             		bset	#7,$32(a0)
0000EBC4                            
0000EBC4                            locret_E188:
0000EBC4 4E75                       		rts	
0000EBC6                            ; End of function Obj43_Stop
0000EBC6                            
0000EBC6                            ; ===========================================================================
0000EBC6                            Ani_obj43:
0000EBC6                            	include "_anim\obj43.asm"
0000EBC6                            ; ---------------------------------------------------------------------------
0000EBC6                            ; Animation script - Roller enemy
0000EBC6                            ; ---------------------------------------------------------------------------
0000EBC6 0000                       		dc.w byte_E190-Ani_obj43
0000EBC8 0000                       		dc.w byte_E196-Ani_obj43
0000EBCA 0000                       		dc.w byte_E19C-Ani_obj43
0000EBCC 0F02 0100 FE01             byte_E190:	dc.b $F, 2, 1, 0, $FE, 1
0000EBD2 0F01 02FD 0200             byte_E196:	dc.b $F, 1, 2, $FD, 2, 0
0000EBD8 0303 0402 FF               byte_E19C:	dc.b 3,	3, 4, 2, $FF
0000EBDE 00                         		even
0000EBDE 00                         		even
0000EBDE                            
0000EBDE                            ; ---------------------------------------------------------------------------
0000EBDE                            ; Sprite mappings - Roller enemy (SYZ)
0000EBDE                            ; ---------------------------------------------------------------------------
0000EBDE                            Map_obj43:
0000EBDE                            	include "_maps\obj43.asm"
0000EBDE                            Map_61da:
0000EBDE 0000                       Map_61da_0: 	dc.w Map_61da_A-Map_61da
0000EBE0 0000                       Map_61da_2: 	dc.w Map_61da_15-Map_61da
0000EBE2 0000                       Map_61da_4: 	dc.w Map_61da_20-Map_61da
0000EBE4 0000                       Map_61da_6: 	dc.w Map_61da_26-Map_61da
0000EBE6 0000                       Map_61da_8: 	dc.w Map_61da_2C-Map_61da
0000EBE8 02                         Map_61da_A: 	dc.b $2
0000EBE9 DE0E 0000 F0               	dc.b $DE, $E, $0, $0, $F0
0000EBEE F60E 000C F0               	dc.b $F6, $E, $0, $C, $F0
0000EBF3 02                         Map_61da_15: 	dc.b $2
0000EBF4 E60E 0000 F0               	dc.b $E6, $E, $0, $0, $F0
0000EBF9 FE0D 0018 F0               	dc.b $FE, $D, $0, $18, $F0
0000EBFE 01                         Map_61da_20: 	dc.b $1
0000EBFF F00F 0020 F0               	dc.b $F0, $F, $0, $20, $F0
0000EC04 01                         Map_61da_26: 	dc.b $1
0000EC05 F00F 0030 F0               	dc.b $F0, $F, $0, $30, $F0
0000EC0A 01                         Map_61da_2C: 	dc.b $1
0000EC0B F00F 0040 F0               	dc.b $F0, $F, $0, $40, $F0
0000EC10                            	even
0000EC10                            	even
0000EC10                            
0000EC10                            ; ===========================================================================
0000EC10                            ; ---------------------------------------------------------------------------
0000EC10                            ; Object 44 - walls (GHZ)
0000EC10                            ; ---------------------------------------------------------------------------
0000EC10                            
0000EC10                            Obj44:					; XREF: Obj_Index
0000EC10 7000                       		moveq	#0,d0
0000EC12 1028 0024                  		move.b	$24(a0),d0
0000EC16 323B 0000                  		move.w	Obj44_Index(pc,d0.w),d1
0000EC1A 4EFB 1000                  		jmp	Obj44_Index(pc,d1.w)
0000EC1E                            ; ===========================================================================
0000EC1E 0000                       Obj44_Index:	dc.w Obj44_Main-Obj44_Index
0000EC20 0000                       		dc.w Obj44_Solid-Obj44_Index
0000EC22 0000                       		dc.w Obj44_Display-Obj44_Index
0000EC24                            ; ===========================================================================
0000EC24                            
0000EC24                            Obj44_Main:				; XREF: Obj44_Index
0000EC24 5428 0024                  		addq.b	#2,$24(a0)
0000EC28 217C 0000 0000 0004        		move.l	#Map_obj44,4(a0)
0000EC30 317C 434C 0002             		move.w	#$434C,2(a0)
0000EC36 0028 0004 0001             		ori.b	#4,1(a0)
0000EC3C 117C 0008 0019             		move.b	#8,$19(a0)
0000EC42 117C 0006 0018             		move.b	#6,$18(a0)
0000EC48 1168 0028 001A             		move.b	$28(a0),$1A(a0)	; copy object type number to frame number
0000EC4E 08A8 0004 001A             		bclr	#4,$1A(a0)	; clear	4th bit	(deduct	$10)
0000EC54 6700                       		beq.s	Obj44_Solid	; make object solid if 4th bit = 0
0000EC56 5428 0024                  		addq.b	#2,$24(a0)
0000EC5A 6000                       		bra.s	Obj44_Display	; don't make it solid if 4th bit = 1
0000EC5C                            ; ===========================================================================
0000EC5C                            
0000EC5C                            Obj44_Solid:				; XREF: Obj44_Index
0000EC5C 323C 0013                  		move.w	#$13,d1
0000EC60 343C 0028                  		move.w	#$28,d2
0000EC64 6100 A68C                  		bsr.w	Obj44_SolidWall
0000EC68                            
0000EC68                            Obj44_Display:				; XREF: Obj44_Index
0000EC68 6100 F3DA                  		bsr.w	DisplaySprite
0000EC6C 3028 0008                  		move.w	8(a0),d0
0000EC70 0240 FF80                  		andi.w	#$FF80,d0
0000EC74 3238 F700                  		move.w	($FFFFF700).w,d1
0000EC78 0441 0080                  		subi.w	#$80,d1
0000EC7C 0241 FF80                  		andi.w	#$FF80,d1
0000EC80 9041                       		sub.w	d1,d0
0000EC82 0C40 0280                  		cmpi.w	#$280,d0
0000EC86 6200 F3F8                  		bhi.w	DeleteObject
0000EC8A 4E75                       		rts	
0000EC8C                            ; ===========================================================================
0000EC8C                            ; ---------------------------------------------------------------------------
0000EC8C                            ; Sprite mappings - walls (GHZ)
0000EC8C                            ; ---------------------------------------------------------------------------
0000EC8C                            Map_obj44:
0000EC8C                            	include "_maps\obj44.asm"
0000EC8C                            ; ---------------------------------------------------------------------------
0000EC8C                            ; Sprite mappings - walls (GHZ)
0000EC8C                            ; ---------------------------------------------------------------------------
0000EC8C 0000                       		dc.w byte_E256-Map_obj44
0000EC8E 0000                       		dc.w byte_E26B-Map_obj44
0000EC90 0000                       		dc.w byte_E280-Map_obj44
0000EC92 04                         byte_E256:	dc.b 4
0000EC93 E005 0004 F8               		dc.b $E0, 5, 0,	4, $F8
0000EC98 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000EC9D 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000ECA2 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000ECA7 04                         byte_E26B:	dc.b 4
0000ECA8 E005 0008 F8               		dc.b $E0, 5, 0,	8, $F8
0000ECAD F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000ECB2 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000ECB7 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000ECBC 04                         byte_E280:	dc.b 4
0000ECBD E005 0000 F8               		dc.b $E0, 5, 0,	0, $F8
0000ECC2 F005 0000 F8               		dc.b $F0, 5, 0,	0, $F8
0000ECC7 0005 0000 F8               		dc.b 0,	5, 0, 0, $F8
0000ECCC 1005 0000 F8               		dc.b $10, 5, 0,	0, $F8
0000ECD2 00                         		even
0000ECD2 00                         		even
0000ECD2                            
0000ECD2                            ; ===========================================================================
0000ECD2                            ; ---------------------------------------------------------------------------
0000ECD2                            ; Object 13 - lava ball	producer (MZ, SLZ)
0000ECD2                            ; ---------------------------------------------------------------------------
0000ECD2                            
0000ECD2                            Obj13:					; XREF: Obj_Index
0000ECD2 7000                       		moveq	#0,d0
0000ECD4 1028 0024                  		move.b	$24(a0),d0
0000ECD8 323B 0000                  		move.w	Obj13_Index(pc,d0.w),d1
0000ECDC 4EBB 1000                  		jsr	Obj13_Index(pc,d1.w)
0000ECE0 6000 0000                  		bra.w	Obj14_ChkDel
0000ECE4                            ; ===========================================================================
0000ECE4 0000                       Obj13_Index:	dc.w Obj13_Main-Obj13_Index
0000ECE6 0000                       		dc.w Obj13_MakeLava-Obj13_Index
0000ECE8                            ; ---------------------------------------------------------------------------
0000ECE8                            ;
0000ECE8                            ; Lava ball production rates
0000ECE8                            ;
0000ECE8 1E3C 5A78 96B4             Obj13_Rates:	dc.b 30, 60, 90, 120, 150, 180
0000ECEE                            ; ===========================================================================
0000ECEE                            
0000ECEE                            Obj13_Main:				; XREF: Obj13_Index
0000ECEE 5428 0024                  		addq.b	#2,$24(a0)
0000ECF2 1028 0028                  		move.b	$28(a0),d0
0000ECF6 E848                       		lsr.w	#4,d0
0000ECF8 0240 000F                  		andi.w	#$F,d0
0000ECFC 117B 00EA 001F             		move.b	Obj13_Rates(pc,d0.w),$1F(a0)
0000ED02 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; set time delay for lava balls
0000ED08 0228 000F 0028             		andi.b	#$F,$28(a0)
0000ED0E                            
0000ED0E                            Obj13_MakeLava:				; XREF: Obj13_Index
0000ED0E 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from time delay
0000ED12 6600                       		bne.s	locret_E302	; if time still	remains, branch
0000ED14 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; reset	time delay
0000ED1A 6100 F5A2                  		bsr.w	ChkObjOnScreen
0000ED1E 6600                       		bne.s	locret_E302
0000ED20 6100 F7A8                  		bsr.w	SingleObjLoad
0000ED24 6600                       		bne.s	locret_E302
0000ED26 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
0000ED2A 3368 0008 0008             		move.w	8(a0),8(a1)
0000ED30 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000ED36 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000ED3C                            
0000ED3C                            locret_E302:
0000ED3C 4E75                       		rts	
0000ED3E                            ; ===========================================================================
0000ED3E                            ; ---------------------------------------------------------------------------
0000ED3E                            ; Object 14 - lava balls (MZ, SLZ)
0000ED3E                            ; ---------------------------------------------------------------------------
0000ED3E                            
0000ED3E                            Obj14:					; XREF: Obj_Index
0000ED3E 7000                       		moveq	#0,d0
0000ED40 1028 0024                  		move.b	$24(a0),d0
0000ED44 323B 0000                  		move.w	Obj14_Index(pc,d0.w),d1
0000ED48 4EBB 1000                  		jsr	Obj14_Index(pc,d1.w)
0000ED4C 6000 F2F6                  		bra.w	DisplaySprite
0000ED50                            ; ===========================================================================
0000ED50 0000                       Obj14_Index:	dc.w Obj14_Main-Obj14_Index
0000ED52 0000                       		dc.w Obj14_Action-Obj14_Index
0000ED54 0000                       		dc.w Obj14_Delete-Obj14_Index
0000ED56                            
0000ED56 FC00 FB00 FA00 F900 FE00   Obj14_Speeds:	dc.w $FC00, $FB00, $FA00, $F900, $FE00
0000ED60 0200 FE00 0200 0000        		dc.w $200, $FE00, $200,	0
0000ED68                            ; ===========================================================================
0000ED68                            
0000ED68                            Obj14_Main:				; XREF: Obj14_Index
0000ED68 5428 0024                  		addq.b	#2,$24(a0)
0000ED6C 117C 0008 0016             		move.b	#8,$16(a0)
0000ED72 117C 0008 0017             		move.b	#8,$17(a0)
0000ED78 217C 0000 BC98 0004        		move.l	#Map_obj14,4(a0)
0000ED80 317C 0345 0002             		move.w	#$345,2(a0)
0000ED86 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
0000ED8C 6600                       		bne.s	loc_E35A
0000ED8E 317C 0480 0002             		move.w	#$480,2(a0)	; SLZ specific code
0000ED94                            
0000ED94                            loc_E35A:
0000ED94 117C 0004 0001             		move.b	#4,1(a0)
0000ED9A 117C 0003 0018             		move.b	#3,$18(a0)
0000EDA0 117C 008B 0020             		move.b	#$8B,$20(a0)
0000EDA6 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000EDAC 4A28 0029                  		tst.b	$29(a0)
0000EDB0 6700                       		beq.s	Obj14_SetSpeed
0000EDB2 5428 0018                  		addq.b	#2,$18(a0)
0000EDB6                            
0000EDB6                            Obj14_SetSpeed:
0000EDB6 7000                       		moveq	#0,d0
0000EDB8 1028 0028                  		move.b	$28(a0),d0
0000EDBC D040                       		add.w	d0,d0
0000EDBE 317B 0096 0012             		move.w	Obj14_Speeds(pc,d0.w),$12(a0) ;	load object speed (vertical)
0000EDC4 117C 0008 0019             		move.b	#8,$19(a0)
0000EDCA 0C28 0006 0028             		cmpi.b	#6,$28(a0)	; is object type below $6 ?
0000EDD0 6500                       		bcs.s	Obj14_PlaySnd	; if yes, branch
0000EDD2 117C 0010 0019             		move.b	#$10,$19(a0)
0000EDD8 117C 0002 001C             		move.b	#2,$1C(a0)	; use horizontal animation
0000EDDE 3168 0012 0010             		move.w	$12(a0),$10(a0)	; set horizontal speed
0000EDE4 317C 0000 0012             		move.w	#0,$12(a0)	; delete vertical speed
0000EDEA                            
0000EDEA                            Obj14_PlaySnd:
0000EDEA 303C 00AE                  		move.w	#$AE,d0
0000EDEE 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play lava ball sound
0000EDF4                            
0000EDF4                            Obj14_Action:				; XREF: Obj14_Index
0000EDF4 7000                       		moveq	#0,d0
0000EDF6 1028 0028                  		move.b	$28(a0),d0
0000EDFA D040                       		add.w	d0,d0
0000EDFC 323B 0000                  		move.w	Obj14_TypeIndex(pc,d0.w),d1
0000EE00 4EBB 1000                  		jsr	Obj14_TypeIndex(pc,d1.w)
0000EE04 6100 F218                  		bsr.w	SpeedToPos
0000EE08 43F9 0000 0000             		lea	(Ani_obj14).l,a1
0000EE0E 6100 C28A                  		bsr.w	AnimateSprite
0000EE12                            
0000EE12                            Obj14_ChkDel:				; XREF: Obj13
0000EE12 3028 0008                  		move.w	8(a0),d0
0000EE16 0240 FF80                  		andi.w	#$FF80,d0
0000EE1A 3238 F700                  		move.w	($FFFFF700).w,d1
0000EE1E 0441 0080                  		subi.w	#$80,d1
0000EE22 0241 FF80                  		andi.w	#$FF80,d1
0000EE26 9041                       		sub.w	d1,d0
0000EE28 0C40 0280                  		cmpi.w	#$280,d0
0000EE2C 6200 F252                  		bhi.w	DeleteObject
0000EE30 4E75                       		rts	
0000EE32                            ; ===========================================================================
0000EE32 0000 0000                  Obj14_TypeIndex:dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000EE36 0000 0000                  		dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000EE3A 0000 0000                  		dc.w Obj14_Type04-Obj14_TypeIndex, Obj14_Type05-Obj14_TypeIndex
0000EE3E 0000 0000                  		dc.w Obj14_Type06-Obj14_TypeIndex, Obj14_Type07-Obj14_TypeIndex
0000EE42 0000                       		dc.w Obj14_Type08-Obj14_TypeIndex
0000EE44                            ; ===========================================================================
0000EE44                            ; lavaball types 00-03 fly up and fall back down
0000EE44                            
0000EE44                            Obj14_Type00:				; XREF: Obj14_TypeIndex
0000EE44 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's downward speed
0000EE4A 3028 0030                  		move.w	$30(a0),d0
0000EE4E B068 000C                  		cmp.w	$C(a0),d0	; has object fallen back to its	original position?
0000EE52 6400                       		bcc.s	loc_E41E	; if not, branch
0000EE54 5428 0024                  		addq.b	#2,$24(a0)	; goto "Obj14_Delete" routine
0000EE58                            
0000EE58                            loc_E41E:
0000EE58 08A8 0001 0022             		bclr	#1,$22(a0)
0000EE5E 4A68 0012                  		tst.w	$12(a0)
0000EE62 6A00                       		bpl.s	locret_E430
0000EE64 08E8 0001 0022             		bset	#1,$22(a0)
0000EE6A                            
0000EE6A                            locret_E430:
0000EE6A 4E75                       		rts	
0000EE6C                            ; ===========================================================================
0000EE6C                            ; lavaball type	04 flies up until it hits the ceiling
0000EE6C                            
0000EE6C                            Obj14_Type04:				; XREF: Obj14_TypeIndex
0000EE6C 08E8 0001 0022             		bset	#1,$22(a0)
0000EE72 6100 0000                  		bsr.w	ObjHitCeiling
0000EE76 4A41                       		tst.w	d1
0000EE78 6A00                       		bpl.s	locret_E452
0000EE7A 117C 0008 0028             		move.b	#8,$28(a0)
0000EE80 117C 0001 001C             		move.b	#1,$1C(a0)
0000EE86 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the ceiling
0000EE8C                            
0000EE8C                            locret_E452:
0000EE8C 4E75                       		rts	
0000EE8E                            ; ===========================================================================
0000EE8E                            ; lavaball type	05 falls down until it hits the	floor
0000EE8E                            
0000EE8E                            Obj14_Type05:				; XREF: Obj14_TypeIndex
0000EE8E 08A8 0001 0022             		bclr	#1,$22(a0)
0000EE94 6100 0000                  		bsr.w	ObjHitFloor
0000EE98 4A41                       		tst.w	d1
0000EE9A 6A00                       		bpl.s	locret_E474
0000EE9C 117C 0008 0028             		move.b	#8,$28(a0)
0000EEA2 117C 0001 001C             		move.b	#1,$1C(a0)
0000EEA8 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the floor
0000EEAE                            
0000EEAE                            locret_E474:
0000EEAE 4E75                       		rts	
0000EEB0                            ; ===========================================================================
0000EEB0                            ; lavaball types 06-07 move sideways
0000EEB0                            
0000EEB0                            Obj14_Type06:				; XREF: Obj14_TypeIndex
0000EEB0 08E8 0000 0022             		bset	#0,$22(a0)
0000EEB6 76F8                       		moveq	#-8,d3
0000EEB8 6100 0000                  		bsr.w	ObjHitWallLeft
0000EEBC 4A41                       		tst.w	d1
0000EEBE 6A00                       		bpl.s	locret_E498
0000EEC0 117C 0008 0028             		move.b	#8,$28(a0)
0000EEC6 117C 0003 001C             		move.b	#3,$1C(a0)
0000EECC 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000EED2                            
0000EED2                            locret_E498:
0000EED2 4E75                       		rts	
0000EED4                            ; ===========================================================================
0000EED4                            
0000EED4                            Obj14_Type07:				; XREF: Obj14_TypeIndex
0000EED4 08A8 0000 0022             		bclr	#0,$22(a0)
0000EEDA 7608                       		moveq	#8,d3
0000EEDC 6100 0000                  		bsr.w	ObjHitWallRight
0000EEE0 4A41                       		tst.w	d1
0000EEE2 6A00                       		bpl.s	locret_E4BC
0000EEE4 117C 0008 0028             		move.b	#8,$28(a0)
0000EEEA 117C 0003 001C             		move.b	#3,$1C(a0)
0000EEF0 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000EEF6                            
0000EEF6                            locret_E4BC:
0000EEF6 4E75                       		rts	
0000EEF8                            ; ===========================================================================
0000EEF8                            
0000EEF8                            Obj14_Type08:				; XREF: Obj14_TypeIndex
0000EEF8 4E75                       		rts	
0000EEFA                            ; ===========================================================================
0000EEFA                            
0000EEFA                            Obj14_Delete:				; XREF: Obj14_Index
0000EEFA 6000 F184                  		bra.w	DeleteObject
0000EEFE                            ; ===========================================================================
0000EEFE                            Ani_obj14:
0000EEFE                            	include "_anim\obj14.asm"
0000EEFE                            ; ---------------------------------------------------------------------------
0000EEFE                            ; Animation script - lava balls
0000EEFE                            ; ---------------------------------------------------------------------------
0000EEFE 0000                       		dc.w byte_E4CC-Ani_obj14
0000EF00 0000                       		dc.w byte_E4D2-Ani_obj14
0000EF02 0000                       		dc.w byte_E4D6-Ani_obj14
0000EF04 0000                       		dc.w byte_E4DC-Ani_obj14
0000EF06 0500 2001 21FF             byte_E4CC:	dc.b 5,	0, $20,	1, $21,	$FF
0000EF0C 0502 FC00                  byte_E4D2:	dc.b 5,	2, $FC,	0
0000EF10 0503 4304 44FF             byte_E4D6:	dc.b 5,	3, $43,	4, $44,	$FF
0000EF16 0505 FC00                  byte_E4DC:	dc.b 5,	5, $FC,	0
0000EF1A                            		even
0000EF1A                            		even
0000EF1A                            
0000EF1A                            ; ===========================================================================
0000EF1A                            ; ---------------------------------------------------------------------------
0000EF1A                            ; Object 6D - flame thrower (SBZ)
0000EF1A                            ; ---------------------------------------------------------------------------
0000EF1A                            
0000EF1A                            Obj6D:					; XREF: Obj_Index
0000EF1A 7000                       		moveq	#0,d0
0000EF1C 1028 0024                  		move.b	$24(a0),d0
0000EF20 323B 0000                  		move.w	Obj6D_Index(pc,d0.w),d1
0000EF24 4EFB 1000                  		jmp	Obj6D_Index(pc,d1.w)
0000EF28                            ; ===========================================================================
0000EF28 0000                       Obj6D_Index:	dc.w Obj6D_Main-Obj6D_Index
0000EF2A 0000                       		dc.w Obj6D_Action-Obj6D_Index
0000EF2C                            ; ===========================================================================
0000EF2C                            
0000EF2C                            Obj6D_Main:				; XREF: Obj6D_Index
0000EF2C 5428 0024                  		addq.b	#2,$24(a0)
0000EF30 217C 0000 0000 0004        		move.l	#Map_obj6D,4(a0)
0000EF38 317C 83D9 0002             		move.w	#$83D9,2(a0)
0000EF3E 0028 0004 0001             		ori.b	#4,1(a0)
0000EF44 117C 0001 0018             		move.b	#1,$18(a0)
0000EF4A 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000EF50 117C 000C 0019             		move.b	#$C,$19(a0)
0000EF56 1028 0028                  		move.b	$28(a0),d0
0000EF5A 0240 00F0                  		andi.w	#$F0,d0		; read 1st digit of object type
0000EF5E D040                       		add.w	d0,d0		; multiply by 2
0000EF60 3140 0030                  		move.w	d0,$30(a0)
0000EF64 3140 0032                  		move.w	d0,$32(a0)	; set flaming time
0000EF68 1028 0028                  		move.b	$28(a0),d0
0000EF6C 0240 000F                  		andi.w	#$F,d0		; read 2nd digit of object type
0000EF70 EB48                       		lsl.w	#5,d0		; multiply by $20
0000EF72 3140 0034                  		move.w	d0,$34(a0)	; set pause time
0000EF76 117C 000A 0036             		move.b	#$A,$36(a0)
0000EF7C 0828 0001 0022             		btst	#1,$22(a0)
0000EF82 6700                       		beq.s	Obj6D_Action
0000EF84 117C 0002 001C             		move.b	#2,$1C(a0)
0000EF8A 117C 0015 0036             		move.b	#$15,$36(a0)
0000EF90                            
0000EF90                            Obj6D_Action:				; XREF: Obj6D_Index
0000EF90 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
0000EF94 6A00                       		bpl.s	loc_E57A	; if time remains, branch
0000EF96 3168 0034 0030             		move.w	$34(a0),$30(a0)	; begin	pause time
0000EF9C 0868 0000 001C             		bchg	#0,$1C(a0)
0000EFA2 6700                       		beq.s	loc_E57A
0000EFA4 3168 0032 0030             		move.w	$32(a0),$30(a0)	; begin	flaming	time
0000EFAA 303C 00B3                  		move.w	#$B3,d0
0000EFAE 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play flame sound
0000EFB4                            
0000EFB4                            loc_E57A:
0000EFB4 43F9 0000 0000             		lea	(Ani_obj6D).l,a1
0000EFBA 6100 C0DE                  		bsr.w	AnimateSprite
0000EFBE 117C 0000 0020             		move.b	#0,$20(a0)
0000EFC4 1028 0036                  		move.b	$36(a0),d0
0000EFC8 B028 001A                  		cmp.b	$1A(a0),d0
0000EFCC 6600                       		bne.s	Obj6D_ChkDel
0000EFCE 117C 00A3 0020             		move.b	#$A3,$20(a0)
0000EFD4                            
0000EFD4                            Obj6D_ChkDel:
0000EFD4 3028 0008                  		move.w	8(a0),d0
0000EFD8 0240 FF80                  		andi.w	#$FF80,d0
0000EFDC 3238 F700                  		move.w	($FFFFF700).w,d1
0000EFE0 0441 0080                  		subi.w	#$80,d1
0000EFE4 0241 FF80                  		andi.w	#$FF80,d1
0000EFE8 9041                       		sub.w	d1,d0
0000EFEA 0C40 0280                  		cmpi.w	#$280,d0
0000EFEE 6200 F090                  		bhi.w	DeleteObject
0000EFF2 6000 F050                  		bra.w	DisplaySprite
0000EFF6                            ; ===========================================================================
0000EFF6                            Ani_obj6D:
0000EFF6                            	include "_anim\obj6D.asm"
0000EFF6                            ; ---------------------------------------------------------------------------
0000EFF6                            ; Animation script - flamethrower (SBZ)
0000EFF6                            ; ---------------------------------------------------------------------------
0000EFF6 0000                       		dc.w byte_E5C4-Ani_obj6D
0000EFF8 0000                       		dc.w byte_E5D2-Ani_obj6D
0000EFFA 0000                       		dc.w byte_E5DC-Ani_obj6D
0000EFFC 0000                       		dc.w byte_E5EA-Ani_obj6D
0000EFFE 0300 0102 0304 0506 0708+  byte_E5C4:	dc.b 3,	0, 1, 2, 3, 4, 5, 6, 7,	8, 9, $A, $FE, 2
0000F00C 0009 0705 0301 00FE 0100   byte_E5D2:	dc.b 0,	9, 7, 5, 3, 1, 0, $FE, 1, 0
0000F016 030B 0C0D 0E0F 1011 1213+  byte_E5DC:	dc.b 3,	$B, $C,	$D, $E,	$F, $10, $11, $12, $13,	$14, $15, $FE, 2
0000F024 0014 1211 0F0D 0BFE 0100   byte_E5EA:	dc.b 0,	$14, $12, $11, $F, $D, $B, $FE,	1, 0
0000F02E                            		even
0000F02E                            		even
0000F02E                            
0000F02E                            ; ---------------------------------------------------------------------------
0000F02E                            ; Sprite mappings - flame thrower (SBZ)
0000F02E                            ; ---------------------------------------------------------------------------
0000F02E                            Map_obj6D:
0000F02E                            	include "_maps\obj6D.asm"
0000F02E                            ; ---------------------------------------------------------------------------
0000F02E                            ; Sprite mappings - flame thrower (SBZ)
0000F02E                            ; ---------------------------------------------------------------------------
0000F02E 0000 0000                  		dc.w byte_E620-Map_obj6D, byte_E626-Map_obj6D
0000F032 0000 0000                  		dc.w byte_E631-Map_obj6D, byte_E63C-Map_obj6D
0000F036 0000 0000                  		dc.w byte_E64C-Map_obj6D, byte_E65C-Map_obj6D
0000F03A 0000 0000                  		dc.w byte_E671-Map_obj6D, byte_E686-Map_obj6D
0000F03E 0000 0000                  		dc.w byte_E6A0-Map_obj6D, byte_E6BA-Map_obj6D
0000F042 0000 0000                  		dc.w byte_E6D9-Map_obj6D, byte_E6F8-Map_obj6D
0000F046 0000 0000                  		dc.w byte_E6FE-Map_obj6D, byte_E709-Map_obj6D
0000F04A 0000 0000                  		dc.w byte_E714-Map_obj6D, byte_E724-Map_obj6D
0000F04E 0000 0000                  		dc.w byte_E734-Map_obj6D, byte_E749-Map_obj6D
0000F052 0000 0000                  		dc.w byte_E75E-Map_obj6D, byte_E778-Map_obj6D
0000F056 0000 0000                  		dc.w byte_E792-Map_obj6D, byte_E7B1-Map_obj6D
0000F05A 01                         byte_E620:	dc.b 1
0000F05B 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F060 02                         byte_E626:	dc.b 2
0000F061 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F066 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F06B 02                         byte_E631:	dc.b 2
0000F06C 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F071 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F076 03                         byte_E63C:	dc.b 3
0000F077 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000F07C 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F081 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F086 03                         byte_E64C:	dc.b 3
0000F087 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F08C 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F091 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F096 04                         byte_E65C:	dc.b 4
0000F097 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000F09C 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000F0A1 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F0A6 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F0AB 04                         byte_E671:	dc.b 4
0000F0AC 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000F0B1 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F0B6 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F0BB 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F0C0 05                         byte_E686:	dc.b 5
0000F0C1 F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0000F0C6 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000F0CB 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000F0D0 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F0D5 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F0DA 05                         byte_E6A0:	dc.b 5
0000F0DB F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000F0E0 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000F0E5 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F0EA 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F0EF 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F0F4 06                         byte_E6BA:	dc.b 6
0000F0F5 E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0000F0FA F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0000F0FF 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000F104 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0000F109 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F10E 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F113 06                         byte_E6D9:	dc.b 6
0000F114 E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0000F119 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000F11E 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0000F123 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F128 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F12D 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F132 01                         byte_E6F8:	dc.b 1
0000F133 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F138 02                         byte_E6FE:	dc.b 2
0000F139 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F13E 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F143 02                         byte_E709:	dc.b 2
0000F144 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F149 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F14E 03                         byte_E714:	dc.b 3
0000F14F 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000F154 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F159 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F15E 03                         byte_E724:	dc.b 3
0000F15F 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F164 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F169 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F16E 04                         byte_E734:	dc.b 4
0000F16F 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000F174 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000F179 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F17E 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F183 04                         byte_E749:	dc.b 4
0000F184 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000F189 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F18E 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F193 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F198 05                         byte_E75E:	dc.b 5
0000F199 F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0000F19E 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000F1A3 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000F1A8 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F1AD 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F1B2 05                         byte_E778:	dc.b 5
0000F1B3 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000F1B8 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000F1BD 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F1C2 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F1C7 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F1CC 06                         byte_E792:	dc.b 6
0000F1CD E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0000F1D2 F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0000F1D7 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000F1DC 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0000F1E1 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F1E6 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F1EB 06                         byte_E7B1:	dc.b 6
0000F1EC E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0000F1F1 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000F1F6 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0000F1FB 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F200 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F205 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F20A                            		even
0000F20A                            		even
0000F20A                            
0000F20A                            ; ===========================================================================
0000F20A                            ; ---------------------------------------------------------------------------
0000F20A                            ; Object 46 - solid blocks and blocks that fall	from the ceiling (MZ)
0000F20A                            ; ---------------------------------------------------------------------------
0000F20A                            
0000F20A                            Obj46:					; XREF: Obj_Index
0000F20A 7000                       		moveq	#0,d0
0000F20C 1028 0024                  		move.b	$24(a0),d0
0000F210 323B 0000                  		move.w	Obj46_Index(pc,d0.w),d1
0000F214 4EFB 1000                  		jmp	Obj46_Index(pc,d1.w)
0000F218                            ; ===========================================================================
0000F218 0000                       Obj46_Index:	dc.w Obj46_Main-Obj46_Index
0000F21A 0000                       		dc.w Obj46_Action-Obj46_Index
0000F21C                            ; ===========================================================================
0000F21C                            
0000F21C                            Obj46_Main:				; XREF: Obj46_Index
0000F21C 5428 0024                  		addq.b	#2,$24(a0)
0000F220 117C 000F 0016             		move.b	#$F,$16(a0)
0000F226 117C 000F 0017             		move.b	#$F,$17(a0)
0000F22C 217C 0000 0000 0004        		move.l	#Map_obj46,4(a0)
0000F234 317C 4000 0002             		move.w	#$4000,2(a0)
0000F23A 117C 0004 0001             		move.b	#4,1(a0)
0000F240 117C 0003 0018             		move.b	#3,$18(a0)
0000F246 117C 0010 0019             		move.b	#$10,$19(a0)
0000F24C 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000F252 317C 05C0 0032             		move.w	#$5C0,$32(a0)
0000F258                            
0000F258                            Obj46_Action:				; XREF: Obj46_Index
0000F258 4A28 0001                  		tst.b	1(a0)
0000F25C 6A00                       		bpl.s	Obj46_ChkDel
0000F25E 7000                       		moveq	#0,d0
0000F260 1028 0028                  		move.b	$28(a0),d0	; get object type
0000F264 0240 0007                  		andi.w	#7,d0		; read only the	1st digit
0000F268 D040                       		add.w	d0,d0
0000F26A 323B 0000                  		move.w	Obj46_TypeIndex(pc,d0.w),d1
0000F26E 4EBB 1000                  		jsr	Obj46_TypeIndex(pc,d1.w)
0000F272 323C 001B                  		move.w	#$1B,d1
0000F276 343C 0010                  		move.w	#$10,d2
0000F27A 363C 0011                  		move.w	#$11,d3
0000F27E 3828 0008                  		move.w	8(a0),d4
0000F282 6100 0000                  		bsr.w	SolidObject
0000F286                            
0000F286                            Obj46_ChkDel:
0000F286 6100 EDBC                  		bsr.w	DisplaySprite
0000F28A 3028 0008                  		move.w	8(a0),d0
0000F28E 0240 FF80                  		andi.w	#$FF80,d0
0000F292 3238 F700                  		move.w	($FFFFF700).w,d1
0000F296 0441 0080                  		subi.w	#$80,d1
0000F29A 0241 FF80                  		andi.w	#$FF80,d1
0000F29E 9041                       		sub.w	d1,d0
0000F2A0 0C40 0280                  		cmpi.w	#$280,d0
0000F2A4 6200 EDDA                  		bhi.w	DeleteObject
0000F2A8 4E75                       		rts	
0000F2AA                            ; ===========================================================================
0000F2AA 0000                       Obj46_TypeIndex:dc.w Obj46_Type00-Obj46_TypeIndex
0000F2AC 0000                       		dc.w Obj46_Type01-Obj46_TypeIndex
0000F2AE 0000                       		dc.w Obj46_Type02-Obj46_TypeIndex
0000F2B0 0000                       		dc.w Obj46_Type03-Obj46_TypeIndex
0000F2B2 0000                       		dc.w Obj46_Type04-Obj46_TypeIndex
0000F2B4                            ; ===========================================================================
0000F2B4                            
0000F2B4                            Obj46_Type00:				; XREF: Obj46_TypeIndex
0000F2B4 4E75                       		rts	
0000F2B6                            ; ===========================================================================
0000F2B6                            
0000F2B6                            Obj46_Type02:				; XREF: Obj46_TypeIndex
0000F2B6 3038 D008                  		move.w	($FFFFD008).w,d0
0000F2BA 9068 0008                  		sub.w	8(a0),d0
0000F2BE 6400                       		bcc.s	loc_E888
0000F2C0 4440                       		neg.w	d0
0000F2C2                            
0000F2C2                            loc_E888:
0000F2C2 0C40 0090                  		cmpi.w	#$90,d0		; is Sonic within $90 pixels of	the block?
0000F2C6 6400                       		bcc.s	Obj46_Type01	; if not, resume wobbling
0000F2C8 117C 0003 0028             		move.b	#3,$28(a0)	; if yes, make the block fall
0000F2CE                            
0000F2CE                            Obj46_Type01:				; XREF: Obj46_TypeIndex
0000F2CE 7000                       		moveq	#0,d0
0000F2D0 1038 FE74                  		move.b	($FFFFFE74).w,d0
0000F2D4 0828 0003 0028             		btst	#3,$28(a0)
0000F2DA 6700                       		beq.s	loc_E8A8
0000F2DC 4440                       		neg.w	d0
0000F2DE 0640 0010                  		addi.w	#$10,d0
0000F2E2                            
0000F2E2                            loc_E8A8:
0000F2E2 3228 0030                  		move.w	$30(a0),d1
0000F2E6 9240                       		sub.w	d0,d1
0000F2E8 3141 000C                  		move.w	d1,$C(a0)	; update the block's position to make it wobble
0000F2EC 4E75                       		rts	
0000F2EE                            ; ===========================================================================
0000F2EE                            
0000F2EE                            Obj46_Type03:				; XREF: Obj46_TypeIndex
0000F2EE 6100 ED2E                  		bsr.w	SpeedToPos
0000F2F2 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase falling speed
0000F2F8 6100 0000                  		bsr.w	ObjHitFloor
0000F2FC 4A41                       		tst.w	d1		; has the block	hit the	floor?
0000F2FE 6A00 0000                  		bpl.w	locret_E8EE	; if not, branch
0000F302 D368 000C                  		add.w	d1,$C(a0)
0000F306 4268 0012                  		clr.w	$12(a0)		; stop the block falling
0000F30A 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000F310 117C 0004 0028             		move.b	#4,$28(a0)
0000F316 3011                       		move.w	(a1),d0
0000F318 0240 03FF                  		andi.w	#$3FF,d0
0000F31C 0C40 02E8                  		cmpi.w	#$2E8,d0
0000F320 6400                       		bcc.s	locret_E8EE
0000F322 117C 0000 0028             		move.b	#0,$28(a0)
0000F328                            
0000F328                            locret_E8EE:
0000F328 4E75                       		rts	
0000F32A                            ; ===========================================================================
0000F32A                            
0000F32A                            Obj46_Type04:				; XREF: Obj46_TypeIndex
0000F32A 7000                       		moveq	#0,d0
0000F32C 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000F330 E648                       		lsr.w	#3,d0
0000F332 3228 0030                  		move.w	$30(a0),d1
0000F336 9240                       		sub.w	d0,d1
0000F338 3141 000C                  		move.w	d1,$C(a0)	; make the block wobble
0000F33C 4E75                       		rts	
0000F33E                            ; ===========================================================================
0000F33E                            ; ---------------------------------------------------------------------------
0000F33E                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0000F33E                            ; ---------------------------------------------------------------------------
0000F33E                            Map_obj46:
0000F33E                            	include "_maps\obj46.asm"
0000F33E                            ; ---------------------------------------------------------------------------
0000F33E                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0000F33E                            ; ---------------------------------------------------------------------------
0000F33E 0000                       		dc.w byte_E906-Map_obj46
0000F340 01                         byte_E906:	dc.b 1
0000F341 F00F 0001 F0               		dc.b $F0, $F, 0, 1, $F0
0000F346                            		even
0000F346                            		even
0000F346                            
0000F346                            ; ===========================================================================
0000F346                            ; ---------------------------------------------------------------------------
0000F346                            ; Object 12 - lamp (SYZ)
0000F346                            ; ---------------------------------------------------------------------------
0000F346                            
0000F346                            Obj12:					; XREF: Obj_Index
0000F346 7000                       		moveq	#0,d0
0000F348 1028 0024                  		move.b	$24(a0),d0
0000F34C 323B 0000                  		move.w	Obj12_Index(pc,d0.w),d1
0000F350 4EFB 1000                  		jmp	Obj12_Index(pc,d1.w)
0000F354                            ; ===========================================================================
0000F354 0000                       Obj12_Index:	dc.w Obj12_Main-Obj12_Index
0000F356 0000                       		dc.w Obj12_Animate-Obj12_Index
0000F358                            ; ===========================================================================
0000F358                            
0000F358                            Obj12_Main:				; XREF: Obj12_Index
0000F358 5428 0024                  		addq.b	#2,$24(a0)
0000F35C 217C 0000 0000 0004        		move.l	#Map_obj12,4(a0)
0000F364 317C 0000 0002             		move.w	#0,2(a0)
0000F36A 117C 0004 0001             		move.b	#4,1(a0)
0000F370 117C 0010 0019             		move.b	#$10,$19(a0)
0000F376 117C 0006 0018             		move.b	#6,$18(a0)
0000F37C                            
0000F37C                            Obj12_Animate:				; XREF: Obj12_Index
0000F37C 5328 001E                  		subq.b	#1,$1E(a0)
0000F380 6A00                       		bpl.s	Obj12_ChkDel
0000F382 117C 0007 001E             		move.b	#7,$1E(a0)
0000F388 5228 001A                  		addq.b	#1,$1A(a0)
0000F38C 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
0000F392 6500                       		bcs.s	Obj12_ChkDel
0000F394 117C 0000 001A             		move.b	#0,$1A(a0)
0000F39A                            
0000F39A                            Obj12_ChkDel:
0000F39A 3028 0008                  		move.w	8(a0),d0
0000F39E 0240 FF80                  		andi.w	#$FF80,d0
0000F3A2 3238 F700                  		move.w	($FFFFF700).w,d1
0000F3A6 0441 0080                  		subi.w	#$80,d1
0000F3AA 0241 FF80                  		andi.w	#$FF80,d1
0000F3AE 9041                       		sub.w	d1,d0
0000F3B0 0C40 0280                  		cmpi.w	#$280,d0
0000F3B4 6200 ECCA                  		bhi.w	DeleteObject
0000F3B8 6000 EC8A                  		bra.w	DisplaySprite
0000F3BC                            ; ===========================================================================
0000F3BC                            ; ---------------------------------------------------------------------------
0000F3BC                            ; Sprite mappings - lamp (SYZ)
0000F3BC                            ; ---------------------------------------------------------------------------
0000F3BC                            Map_obj12:
0000F3BC                            	include "_maps\obj12.asm"
0000F3BC                            ; ---------------------------------------------------------------------------
0000F3BC                            ; Sprite mappings - lamp (SYZ)
0000F3BC                            ; ---------------------------------------------------------------------------
0000F3BC 0000 0000                  		dc.w byte_E98E-Map_obj12, byte_E999-Map_obj12
0000F3C0 0000 0000                  		dc.w byte_E9A4-Map_obj12, byte_E9AF-Map_obj12
0000F3C4 0000 0000                  		dc.w byte_E9BA-Map_obj12, byte_E9C5-Map_obj12
0000F3C8 02                         byte_E98E:	dc.b 2
0000F3C9 F80C 0031 F0               		dc.b $F8, $C, 0, $31, $F0
0000F3CE 000C 1031 F0               		dc.b 0,	$C, $10, $31, $F0
0000F3D3 02                         byte_E999:	dc.b 2
0000F3D4 F80C 0035 F0               		dc.b $F8, $C, 0, $35, $F0
0000F3D9 000C 1035 F0               		dc.b 0,	$C, $10, $35, $F0
0000F3DE 02                         byte_E9A4:	dc.b 2
0000F3DF F80C 0039 F0               		dc.b $F8, $C, 0, $39, $F0
0000F3E4 000C 1039 F0               		dc.b 0,	$C, $10, $39, $F0
0000F3E9 02                         byte_E9AF:	dc.b 2
0000F3EA F80C 003D F0               		dc.b $F8, $C, 0, $3D, $F0
0000F3EF 000C 103D F0               		dc.b 0,	$C, $10, $3D, $F0
0000F3F4 02                         byte_E9BA:	dc.b 2
0000F3F5 F80C 0041 F0               		dc.b $F8, $C, 0, $41, $F0
0000F3FA 000C 1041 F0               		dc.b 0,	$C, $10, $41, $F0
0000F3FF 02                         byte_E9C5:	dc.b 2
0000F400 F80C 0045 F0               		dc.b $F8, $C, 0, $45, $F0
0000F405 000C 1045 F0               		dc.b 0,	$C, $10, $45, $F0
0000F40A                            		even
0000F40A                            		even
0000F40A                            
0000F40A                            ; ===========================================================================
0000F40A                            ; ---------------------------------------------------------------------------
0000F40A                            ; Object 47 - pinball bumper (SYZ)
0000F40A                            ; ---------------------------------------------------------------------------
0000F40A                            
0000F40A                            Obj47:					; XREF: Obj_Index
0000F40A 7000                       		moveq	#0,d0
0000F40C 1028 0024                  		move.b	$24(a0),d0
0000F410 323B 0000                  		move.w	Obj47_Index(pc,d0.w),d1
0000F414 4EFB 1000                  		jmp	Obj47_Index(pc,d1.w)
0000F418                            ; ===========================================================================
0000F418 0000                       Obj47_Index:	dc.w Obj47_Main-Obj47_Index
0000F41A 0000                       		dc.w Obj47_Hit-Obj47_Index
0000F41C                            ; ===========================================================================
0000F41C                            
0000F41C                            Obj47_Main:				; XREF: Obj47_Index
0000F41C 5428 0024                  		addq.b	#2,$24(a0)
0000F420 217C 0000 0000 0004        		move.l	#Map_obj47,4(a0)
0000F428 317C 0380 0002             		move.w	#$380,2(a0)
0000F42E 117C 0004 0001             		move.b	#4,1(a0)
0000F434 117C 0010 0019             		move.b	#$10,$19(a0)
0000F43A 117C 0001 0018             		move.b	#1,$18(a0)
0000F440 117C 00D7 0020             		move.b	#$D7,$20(a0)
0000F446                            
0000F446                            Obj47_Hit:				; XREF: Obj47_Index
0000F446 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	bumper?
0000F44A 6700 0000                  		beq.w	Obj47_Display	; if not, branch
0000F44E 4228 0021                  		clr.b	$21(a0)
0000F452 43F8 D000                  		lea	($FFFFD000).w,a1
0000F456 3228 0008                  		move.w	8(a0),d1
0000F45A 3428 000C                  		move.w	$C(a0),d2
0000F45E 9269 0008                  		sub.w	8(a1),d1
0000F462 9469 000C                  		sub.w	$C(a1),d2
0000F466 4EB9 0000 3002             		jsr	(CalcAngle).l
0000F46C 4EB9 0000 2D34             		jsr	(CalcSine).l
0000F472 C3FC F900                  		muls.w	#-$700,d1
0000F476 E081                       		asr.l	#8,d1
0000F478 3341 0010                  		move.w	d1,$10(a1)	; bounce Sonic away
0000F47C C1FC F900                  		muls.w	#-$700,d0
0000F480 E080                       		asr.l	#8,d0
0000F482 3340 0012                  		move.w	d0,$12(a1)	; bounce Sonic away
0000F486 08E9 0001 0022             		bset	#1,$22(a1)
0000F48C 08A9 0004 0022             		bclr	#4,$22(a1)
0000F492 08A9 0005 0022             		bclr	#5,$22(a1)
0000F498 4229 003C                  		clr.b	$3C(a1)
0000F49C 117C 0001 001C             		move.b	#1,$1C(a0)
0000F4A2 303C 00B4                  		move.w	#$B4,d0
0000F4A6 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play bumper sound
0000F4AC 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F4B0 7000                       		moveq	#0,d0
0000F4B2 1028 0023                  		move.b	$23(a0),d0
0000F4B6 6700                       		beq.s	Obj47_Score
0000F4B8 0C32 008A 0002             		cmpi.b	#$8A,2(a2,d0.w)	; has bumper been hit $8A times?
0000F4BE 6400                       		bcc.s	Obj47_Display	; if yes, Sonic	gets no	points
0000F4C0 5232 0002                  		addq.b	#1,2(a2,d0.w)
0000F4C4                            
0000F4C4                            Obj47_Score:
0000F4C4 7001                       		moveq	#1,d0
0000F4C6 4EB9 0000 0000             		jsr	AddPoints	; add 10 to score
0000F4CC 6100 EFFC                  		bsr.w	SingleObjLoad
0000F4D0 6600                       		bne.s	Obj47_Display
0000F4D2 12BC 0029                  		move.b	#$29,0(a1)	; load points object
0000F4D6 3368 0008 0008             		move.w	8(a0),8(a1)
0000F4DC 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F4E2 137C 0004 001A             		move.b	#4,$1A(a1)
0000F4E8                            
0000F4E8                            Obj47_Display:
0000F4E8 43F9 0000 0000             		lea	(Ani_obj47).l,a1
0000F4EE 6100 BBAA                  		bsr.w	AnimateSprite
0000F4F2 3028 0008                  		move.w	8(a0),d0
0000F4F6 0240 FF80                  		andi.w	#$FF80,d0
0000F4FA 3238 F700                  		move.w	($FFFFF700).w,d1
0000F4FE 0441 0080                  		subi.w	#$80,d1
0000F502 0241 FF80                  		andi.w	#$FF80,d1
0000F506 9041                       		sub.w	d1,d0
0000F508 0C40 0280                  		cmpi.w	#$280,d0
0000F50C 6200                       		bhi.s	Obj47_ChkHit
0000F50E 6000 EB34                  		bra.w	DisplaySprite
0000F512                            ; ===========================================================================
0000F512                            
0000F512                            Obj47_ChkHit:				; XREF: Obj47_Display
0000F512 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F516 7000                       		moveq	#0,d0
0000F518 1028 0023                  		move.b	$23(a0),d0
0000F51C 6700                       		beq.s	Obj47_Delete
0000F51E 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000F524                            
0000F524                            Obj47_Delete:
0000F524 6000 EB5A                  		bra.w	DeleteObject
0000F528                            ; ===========================================================================
0000F528                            Ani_obj47:
0000F528                            	include "_anim\obj47.asm"
0000F528                            ; ---------------------------------------------------------------------------
0000F528                            ; Animation script - flamethrower (SBZ)
0000F528                            ; ---------------------------------------------------------------------------
0000F528 0000                       		dc.w byte_EAF4-Ani_obj47
0000F52A 0000                       		dc.w byte_EAF8-Ani_obj47
0000F52C 0F00 FF00                  byte_EAF4:	dc.b $F, 0, $FF, 0
0000F530 0301 0201 02FD 0000        byte_EAF8:	dc.b 3,	1, 2, 1, 2, $FD, 0, 0
0000F538                            		even
0000F538                            		even
0000F538                            
0000F538                            ; ---------------------------------------------------------------------------
0000F538                            ; Sprite mappings - pinball bumper (SYZ)
0000F538                            ; ---------------------------------------------------------------------------
0000F538                            Map_obj47:
0000F538                            	include "_maps\obj47.asm"
0000F538                            ; ---------------------------------------------------------------------------
0000F538                            ; Sprite mappings - pinball bumper (SYZ)
0000F538                            ; ---------------------------------------------------------------------------
0000F538 0000                       		dc.w byte_EB06-Map_obj47
0000F53A 0000                       		dc.w byte_EB11-Map_obj47
0000F53C 0000                       		dc.w byte_EB1C-Map_obj47
0000F53E 02                         byte_EB06:	dc.b 2
0000F53F F007 0000 F0               		dc.b $F0, 7, 0,	0, $F0
0000F544 F007 0800 00               		dc.b $F0, 7, 8,	0, 0
0000F549 02                         byte_EB11:	dc.b 2
0000F54A F406 0008 F4               		dc.b $F4, 6, 0,	8, $F4
0000F54F F402 0808 04               		dc.b $F4, 2, 8,	8, 4
0000F554 02                         byte_EB1C:	dc.b 2
0000F555 F007 000E F0               		dc.b $F0, 7, 0,	$E, $F0
0000F55A F007 080E 00               		dc.b $F0, 7, 8,	$E, 0
0000F560 00                         		even
0000F560 00                         		even
0000F560                            
0000F560                            ; ===========================================================================
0000F560                            ; ---------------------------------------------------------------------------
0000F560                            ; Object 0D - signpost at the end of a level
0000F560                            ; ---------------------------------------------------------------------------
0000F560                            
0000F560                            Obj0D:					; XREF: Obj_Index
0000F560 7000                       		moveq	#0,d0
0000F562 1028 0024                  		move.b	$24(a0),d0
0000F566 323B 0000                  		move.w	Obj0D_Index(pc,d0.w),d1
0000F56A 4EBB 1000                  		jsr	Obj0D_Index(pc,d1.w)
0000F56E 43F9 0000 0000             		lea	(Ani_obj0D).l,a1
0000F574 6100 BB24                  		bsr.w	AnimateSprite
0000F578 6100 EACA                  		bsr.w	DisplaySprite
0000F57C 3028 0008                  		move.w	8(a0),d0
0000F580 0240 FF80                  		andi.w	#$FF80,d0
0000F584 3238 F700                  		move.w	($FFFFF700).w,d1
0000F588 0441 0080                  		subi.w	#$80,d1
0000F58C 0241 FF80                  		andi.w	#$FF80,d1
0000F590 9041                       		sub.w	d1,d0
0000F592 0C40 0280                  		cmpi.w	#$280,d0
0000F596 6200 EAE8                  		bhi.w	DeleteObject
0000F59A 4E75                       		rts	
0000F59C                            ; ===========================================================================
0000F59C 0000                       Obj0D_Index:	dc.w Obj0D_Main-Obj0D_Index
0000F59E 0000                       		dc.w Obj0D_Touch-Obj0D_Index
0000F5A0 0000                       		dc.w Obj0D_Spin-Obj0D_Index
0000F5A2 0000                       		dc.w Obj0D_SonicRun-Obj0D_Index
0000F5A4 0000                       		dc.w locret_ED1A-Obj0D_Index
0000F5A6                            ; ===========================================================================
0000F5A6                            
0000F5A6                            Obj0D_Main:				; XREF: Obj0D_Index
0000F5A6 5428 0024                  		addq.b	#2,$24(a0)
0000F5AA 217C 0000 0000 0004        		move.l	#Map_obj0D,4(a0)
0000F5B2 317C 0680 0002             		move.w	#$680,2(a0)
0000F5B8 117C 0004 0001             		move.b	#4,1(a0)
0000F5BE 117C 0018 0019             		move.b	#$18,$19(a0)
0000F5C4 117C 0004 0018             		move.b	#4,$18(a0)
0000F5CA                            
0000F5CA                            Obj0D_Touch:				; XREF: Obj0D_Index
0000F5CA 3038 D008                  		move.w	($FFFFD008).w,d0
0000F5CE 9068 0008                  		sub.w	8(a0),d0
0000F5D2 6500                       		bcs.s	locret_EBBA
0000F5D4 0C40 0020                  		cmpi.w	#$20,d0		; is Sonic within $20 pixels of	the signpost?
0000F5D8 6400                       		bcc.s	locret_EBBA	; if not, branch
0000F5DA 303C 00CF                  		move.w	#$CF,d0
0000F5DE 4EB9 0000 1594             		jsr	(PlaySound).l	; play signpost	sound
0000F5E4 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0000F5E8 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w ; lock screen position
0000F5EE 5428 0024                  		addq.b	#2,$24(a0)
0000F5F2                            
0000F5F2                            locret_EBBA:
0000F5F2 4E75                       		rts	
0000F5F4                            ; ===========================================================================
0000F5F4                            
0000F5F4                            Obj0D_Spin:				; XREF: Obj0D_Index
0000F5F4 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from spin time
0000F5F8 6A00                       		bpl.s	Obj0D_Sparkle	; if time remains, branch
0000F5FA 317C 003C 0030             		move.w	#60,$30(a0)	; set spin cycle time to 1 second
0000F600 5228 001C                  		addq.b	#1,$1C(a0)	; next spin cycle
0000F604 0C28 0003 001C             		cmpi.b	#3,$1C(a0)	; have 3 spin cycles completed?
0000F60A 6600                       		bne.s	Obj0D_Sparkle	; if not, branch
0000F60C 5428 0024                  		addq.b	#2,$24(a0)
0000F610                            
0000F610                            Obj0D_Sparkle:
0000F610 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000F614 6A00                       		bpl.s	locret_EC42	; if time remains, branch
0000F616 317C 000B 0032             		move.w	#$B,$32(a0)	; set time between sparkles to $B frames
0000F61C 7000                       		moveq	#0,d0
0000F61E 1028 0034                  		move.b	$34(a0),d0
0000F622 5428 0034                  		addq.b	#2,$34(a0)
0000F626 0228 000E 0034             		andi.b	#$E,$34(a0)
0000F62C 45FB 0000                  		lea	Obj0D_SparkPos(pc,d0.w),a2 ; load sparkle position data
0000F630 6100 EE98                  		bsr.w	SingleObjLoad
0000F634 6600                       		bne.s	locret_EC42
0000F636 12BC 0025                  		move.b	#$25,0(a1)	; load rings object
0000F63A 137C 0006 0024             		move.b	#6,$24(a1)	; jump to ring sparkle subroutine
0000F640 101A                       		move.b	(a2)+,d0
0000F642 4880                       		ext.w	d0
0000F644 D068 0008                  		add.w	8(a0),d0
0000F648 3340 0008                  		move.w	d0,8(a1)
0000F64C 101A                       		move.b	(a2)+,d0
0000F64E 4880                       		ext.w	d0
0000F650 D068 000C                  		add.w	$C(a0),d0
0000F654 3340 000C                  		move.w	d0,$C(a1)
0000F658 237C 0000 A838 0004        		move.l	#Map_obj25,4(a1)
0000F660 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000F666 137C 0004 0001             		move.b	#4,1(a1)
0000F66C 137C 0002 0018             		move.b	#2,$18(a1)
0000F672 137C 0008 0019             		move.b	#8,$19(a1)
0000F678                            
0000F678                            locret_EC42:
0000F678 4E75                       		rts	
0000F67A                            ; ===========================================================================
0000F67A E8F0                       Obj0D_SparkPos:	dc.b -$18,-$10		; x-position, y-position
0000F67C 0808                       		dc.b	8,   8
0000F67E F000                       		dc.b -$10,   0
0000F680 18F8                       		dc.b  $18,  -8
0000F682 00F8                       		dc.b	0,  -8
0000F684 1000                       		dc.b  $10,   0
0000F686 E808                       		dc.b -$18,   8
0000F688 1810                       		dc.b  $18, $10
0000F68A                            ; ===========================================================================
0000F68A                            
0000F68A                            Obj0D_SonicRun:				; XREF: Obj0D_Index
0000F68A 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
0000F68E 6600 0000                  		bne.w	locret_ECEE	; if yes, branch
0000F692 0838 0001 D022             		btst	#1,($FFFFD022).w
0000F698 6600                       		bne.s	loc_EC70
0000F69A 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0000F6A0 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0000F6A6 6700                       		beq.s	Obj0D_MoveLeft	; GMZ: If not, branch
0000F6A8 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; make Sonic run to	the right
0000F6AE 6000                       		bra.s	loc_EC70
0000F6B0                            
0000F6B0                            Obj0D_MoveLeft:
0000F6B0 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0000F6B6                            
0000F6B6                            loc_EC70:
0000F6B6 4A38 D000                  		tst.b	($FFFFD000).w
0000F6BA 6700                       		beq.s	loc_EC86
0000F6BC 3038 D008                  		move.w	($FFFFD008).w,d0
0000F6C0 3238 F72A                  		move.w	($FFFFF72A).w,d1
0000F6C4 0641 0128                  		addi.w	#$128,d1
0000F6C8 B041                       		cmp.w	d1,d0
0000F6CA 6500                       		bcs.s	locret_ECEE
0000F6CC                            
0000F6CC                            loc_EC86:
0000F6CC 5428 0024                  		addq.b	#2,$24(a0)
0000F6D0                            
0000F6D0                            ; ---------------------------------------------------------------------------
0000F6D0                            ; Subroutine to	set up bonuses at the end of an	act
0000F6D0                            ; ---------------------------------------------------------------------------
0000F6D0                            
0000F6D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F6D0                            
0000F6D0                            
0000F6D0                            GotThroughAct:				; XREF: Obj3E_EndAct
0000F6D0 4A38 D5C0                  		tst.b	($FFFFD5C0).w
0000F6D4 6600                       		bne.s	locret_ECEE
0000F6D6 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w
0000F6DC 4238 FE2D                  		clr.b	($FFFFFE2D).w	; disable invincibility
0000F6E0 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0000F6E4 11FC 003A D5C0             		move.b	#$3A,($FFFFD5C0).w
0000F6EA 7010                       		moveq	#$10,d0
0000F6EC 4EB9 0000 17B0             		jsr	(LoadPLC2).l	; load title card patterns
0000F6F2 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w
0000F6F8 7000                       		moveq	#0,d0
0000F6FA 1038 FE23                  		move.b	($FFFFFE23).w,d0
0000F6FE C0FC 003C                  		mulu.w	#60,d0		; convert minutes to seconds
0000F702 7200                       		moveq	#0,d1
0000F704 1238 FE24                  		move.b	($FFFFFE24).w,d1
0000F708 D041                       		add.w	d1,d0		; add up your time
0000F70A 80FC 000F                  		divu.w	#15,d0		; divide by 15
0000F70E 7214                       		moveq	#$14,d1
0000F710 B041                       		cmp.w	d1,d0		; is time 5 minutes or higher?
0000F712 6500                       		bcs.s	loc_ECD0	; if not, branch
0000F714 3001                       		move.w	d1,d0		; use minimum time bonus (0)
0000F716                            
0000F716                            loc_ECD0:
0000F716 D040                       		add.w	d0,d0
0000F718 31FB 0000 F7D2             		move.w	TimeBonuses(pc,d0.w),($FFFFF7D2).w ; set time bonus
0000F71E 3038 FE20                  		move.w	($FFFFFE20).w,d0 ; load	number of rings
0000F722 C0FC 000A                  		mulu.w	#10,d0		; multiply by 10
0000F726 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set ring bonus
0000F72A 303C 008E                  		move.w	#$8E,d0
0000F72E 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play "Sonic got	through" music
0000F734                            
0000F734                            locret_ECEE:
0000F734 4E75                       		rts	
0000F736                            ; End of function GotThroughAct
0000F736                            
0000F736                            ; ===========================================================================
0000F736 1388 1388 03E8 01F4 0190+  TimeBonuses:	dc.w 5000, 5000, 1000, 500, 400, 400, 300, 300,	200, 200
0000F74A 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
0000F760                            ; ===========================================================================
0000F760                            
0000F760                            locret_ED1A:				; XREF: Obj0D_Index
0000F760 4E75                       		rts	
0000F762                            ; ===========================================================================
0000F762                            Ani_obj0D:
0000F762                            	include "_anim\obj0D.asm"
0000F762                            ; ---------------------------------------------------------------------------
0000F762                            ; Animation script - signpost
0000F762                            ; ---------------------------------------------------------------------------
0000F762 0000                       		dc.w byte_ED24-Ani_obj0D
0000F764 0000                       		dc.w byte_ED28-Ani_obj0D
0000F766 0000                       		dc.w byte_ED2E-Ani_obj0D
0000F768 0000                       		dc.w byte_ED34-Ani_obj0D
0000F76A 0F00 FF00                  byte_ED24:	dc.b $F, 0, $FF, 0
0000F76E 0100 0102 03FF             byte_ED28:	dc.b 1,	0, 1, 2, 3, $FF
0000F774 0104 0102 03FF             byte_ED2E:	dc.b 1,	4, 1, 2, 3, $FF
0000F77A 0F04 FF                    byte_ED34:	dc.b $F, 4, $FF
0000F77E 00                         		even
0000F77E 00                         		even
0000F77E                            
0000F77E                            ; ---------------------------------------------------------------------------
0000F77E                            ; Sprite mappings - signpost
0000F77E                            ; ---------------------------------------------------------------------------
0000F77E                            Map_obj0D:
0000F77E                            	include "_maps\obj0D.asm"
0000F77E                            ; ---------------------------------------------------------------------------
0000F77E                            ; Sprite mappings - signpost
0000F77E                            ; ---------------------------------------------------------------------------
0000F77E 0000 0000                  		dc.w byte_ED42-Map_obj0D, byte_ED52-Map_obj0D
0000F782 0000 0000                  		dc.w byte_ED5D-Map_obj0D, byte_ED68-Map_obj0D
0000F786 0000                       		dc.w byte_ED73-Map_obj0D
0000F788 03                         byte_ED42:	dc.b 3
0000F789 F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000F78E F00B 0800 00               		dc.b $F0, $B, 8, 0, 0
0000F793 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F798 02                         byte_ED52:	dc.b 2
0000F799 F00F 000C F0               		dc.b $F0, $F, 0, $C, $F0
0000F79E 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F7A3 02                         byte_ED5D:	dc.b 2
0000F7A4 F003 001C FC               		dc.b $F0, 3, 0,	$1C, $FC
0000F7A9 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
0000F7AE 02                         byte_ED68:	dc.b 2
0000F7AF F00F 080C F0               		dc.b $F0, $F, 8, $C, $F0
0000F7B4 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
0000F7B9 03                         byte_ED73:	dc.b 3
0000F7BA F00B 0020 E8               		dc.b $F0, $B, 0, $20, $E8
0000F7BF F00B 002C 00               		dc.b $F0, $B, 0, $2C, 0
0000F7C4 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F7CA 00                         		even
0000F7CA 00                         		even
0000F7CA                            
0000F7CA                            ; ===========================================================================
0000F7CA                            ; ---------------------------------------------------------------------------
0000F7CA                            ; Object 4C - lava geyser / lavafall producer (MZ)
0000F7CA                            ; ---------------------------------------------------------------------------
0000F7CA                            
0000F7CA                            Obj4C:					; XREF: Obj_Index
0000F7CA 7000                       		moveq	#0,d0
0000F7CC 1028 0024                  		move.b	$24(a0),d0
0000F7D0 323B 0000                  		move.w	Obj4C_Index(pc,d0.w),d1
0000F7D4 4EBB 1000                  		jsr	Obj4C_Index(pc,d1.w)
0000F7D8 6000 0000                  		bra.w	Obj4D_ChkDel
0000F7DC                            ; ===========================================================================
0000F7DC 0000                       Obj4C_Index:	dc.w Obj4C_Main-Obj4C_Index
0000F7DE 0000                       		dc.w loc_EDCC-Obj4C_Index
0000F7E0 0000                       		dc.w loc_EE3E-Obj4C_Index
0000F7E2 0000                       		dc.w Obj4C_MakeLava-Obj4C_Index
0000F7E4 0000                       		dc.w Obj4C_Display-Obj4C_Index
0000F7E6 0000                       		dc.w Obj4C_Delete-Obj4C_Index
0000F7E8                            ; ===========================================================================
0000F7E8                            
0000F7E8                            Obj4C_Main:				; XREF: Obj4C_Index
0000F7E8 5428 0024                  		addq.b	#2,$24(a0)
0000F7EC 217C 0000 0000 0004        		move.l	#Map_obj4C,4(a0)
0000F7F4 317C E3A8 0002             		move.w	#$E3A8,2(a0)
0000F7FA 117C 0004 0001             		move.b	#4,1(a0)
0000F800 117C 0001 0018             		move.b	#1,$18(a0)
0000F806 117C 0038 0019             		move.b	#$38,$19(a0)
0000F80C 317C 0078 0034             		move.w	#120,$34(a0)	; set time delay to 2 seconds
0000F812                            
0000F812                            loc_EDCC:				; XREF: Obj4C_Index
0000F812 5368 0032                  		subq.w	#1,$32(a0)
0000F816 6A00                       		bpl.s	locret_EDF0
0000F818 3168 0034 0032             		move.w	$34(a0),$32(a0)
0000F81E 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000F822 3228 000C                  		move.w	$C(a0),d1
0000F826 B041                       		cmp.w	d1,d0
0000F828 6400                       		bcc.s	locret_EDF0
0000F82A 0441 0170                  		subi.w	#$170,d1
0000F82E B041                       		cmp.w	d1,d0
0000F830 6500                       		bcs.s	locret_EDF0
0000F832 5428 0024                  		addq.b	#2,$24(a0)
0000F836                            
0000F836                            locret_EDF0:
0000F836 4E75                       		rts	
0000F838                            ; ===========================================================================
0000F838                            
0000F838                            Obj4C_MakeLava:				; XREF: Obj4C_Index
0000F838 5428 0024                  		addq.b	#2,$24(a0)
0000F83C 6100 ECA2                  		bsr.w	SingleObjLoad2
0000F840 6600                       		bne.s	loc_EE18
0000F842 12BC 004D                  		move.b	#$4D,0(a1)	; load lavafall	object
0000F846 3368 0008 0008             		move.w	8(a0),8(a1)
0000F84C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F852 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000F858 2348 003C                  		move.l	a0,$3C(a1)
0000F85C                            
0000F85C                            loc_EE18:
0000F85C 117C 0001 001C             		move.b	#1,$1C(a0)
0000F862 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
0000F866 6700                       		beq.s	Obj4C_Type00	; if yes, branch
0000F868 117C 0004 001C             		move.b	#4,$1C(a0)
0000F86E 6000                       		bra.s	Obj4C_Display
0000F870                            ; ===========================================================================
0000F870                            
0000F870                            Obj4C_Type00:				; XREF: Obj4C_MakeLava
0000F870 2268 003C                  		movea.l	$3C(a0),a1	; load geyser object
0000F874 08E9 0001 0022             		bset	#1,$22(a1)
0000F87A 337C FA80 0012             		move.w	#-$580,$12(a1)
0000F880 6000                       		bra.s	Obj4C_Display
0000F882                            ; ===========================================================================
0000F882                            
0000F882                            loc_EE3E:				; XREF: Obj4C_Index
0000F882 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
0000F886 6700                       		beq.s	Obj4C_Display	; if yes, branch
0000F888 5428 0024                  		addq.b	#2,$24(a0)
0000F88C 4E75                       		rts	
0000F88E                            ; ===========================================================================
0000F88E                            
0000F88E                            Obj4C_Display:				; XREF: Obj4C_Index
0000F88E 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
0000F894 6100 B804                  		bsr.w	AnimateSprite
0000F898 6100 E7AA                  		bsr.w	DisplaySprite
0000F89C 4E75                       		rts	
0000F89E                            ; ===========================================================================
0000F89E                            
0000F89E                            Obj4C_Delete:				; XREF: Obj4C_Index
0000F89E 117C 0000 001C             		move.b	#0,$1C(a0)
0000F8A4 117C 0002 0024             		move.b	#2,$24(a0)
0000F8AA 4A28 0028                  		tst.b	$28(a0)
0000F8AE 6700 E7D0                  		beq.w	DeleteObject
0000F8B2 4E75                       		rts	
0000F8B4                            ; ===========================================================================
0000F8B4                            ; ---------------------------------------------------------------------------
0000F8B4                            ; Object 4D - lava geyser / lavafall (MZ)
0000F8B4                            ; ---------------------------------------------------------------------------
0000F8B4                            
0000F8B4                            Obj4D:					; XREF: Obj_Index
0000F8B4 7000                       		moveq	#0,d0
0000F8B6 1028 0024                  		move.b	$24(a0),d0
0000F8BA 323B 0000                  		move.w	Obj4D_Index(pc,d0.w),d1
0000F8BE 4EBB 1000                  		jsr	Obj4D_Index(pc,d1.w)
0000F8C2 6000 E780                  		bra.w	DisplaySprite
0000F8C6                            ; ===========================================================================
0000F8C6 0000                       Obj4D_Index:	dc.w Obj4D_Main-Obj4D_Index
0000F8C8 0000                       		dc.w Obj4D_Action-Obj4D_Index
0000F8CA 0000                       		dc.w loc_EFFC-Obj4D_Index
0000F8CC 0000                       		dc.w Obj4D_Delete-Obj4D_Index
0000F8CE                            
0000F8CE FB00 0000                  Obj4D_Speeds:	dc.w $FB00, 0
0000F8D2                            ; ===========================================================================
0000F8D2                            
0000F8D2                            Obj4D_Main:				; XREF: Obj4D_Index
0000F8D2 5428 0024                  		addq.b	#2,$24(a0)
0000F8D6 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000F8DC 4A28 0028                  		tst.b	$28(a0)
0000F8E0 6700                       		beq.s	loc_EEA4
0000F8E2 0468 0250 000C             		subi.w	#$250,$C(a0)
0000F8E8                            
0000F8E8                            loc_EEA4:
0000F8E8 7000                       		moveq	#0,d0
0000F8EA 1028 0028                  		move.b	$28(a0),d0
0000F8EE D040                       		add.w	d0,d0
0000F8F0 317B 00DC 0012             		move.w	Obj4D_Speeds(pc,d0.w),$12(a0)
0000F8F6 2248                       		movea.l	a0,a1
0000F8F8 7201                       		moveq	#1,d1
0000F8FA 6100                       		bsr.s	Obj4D_MakeLava
0000F8FC 6000                       		bra.s	loc_EF10
0000F8FE                            ; ===========================================================================
0000F8FE                            
0000F8FE                            Obj4D_Loop:
0000F8FE 6100 EBE0                  		bsr.w	SingleObjLoad2
0000F902 6600                       		bne.s	loc_EF0A
0000F904                            
0000F904                            Obj4D_MakeLava:				; XREF: Obj4D_Main
0000F904 12BC 004D                  		move.b	#$4D,0(a1)
0000F908 237C 0000 0000 0004        		move.l	#Map_obj4C,4(a1)
0000F910 337C 63A8 0002             		move.w	#$63A8,2(a1)
0000F916 137C 0004 0001             		move.b	#4,1(a1)
0000F91C 137C 0020 0019             		move.b	#$20,$19(a1)
0000F922 3368 0008 0008             		move.w	8(a0),8(a1)
0000F928 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F92E 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000F934 137C 0001 0018             		move.b	#1,$18(a1)
0000F93A 137C 0005 001C             		move.b	#5,$1C(a1)
0000F940 4A28 0028                  		tst.b	$28(a0)
0000F944 6700                       		beq.s	loc_EF0A
0000F946 137C 0002 001C             		move.b	#2,$1C(a1)
0000F94C                            
0000F94C                            loc_EF0A:
0000F94C 51C9 FFB0                  		dbf	d1,Obj4D_Loop
0000F950 4E75                       		rts	
0000F952                            ; ===========================================================================
0000F952                            
0000F952                            loc_EF10:				; XREF: Obj4D_Main
0000F952 0669 0060 000C             		addi.w	#$60,$C(a1)
0000F958 3368 0030 0030             		move.w	$30(a0),$30(a1)
0000F95E 0669 0060 0030             		addi.w	#$60,$30(a1)
0000F964 137C 0093 0020             		move.b	#$93,$20(a1)
0000F96A 137C 0080 0016             		move.b	#$80,$16(a1)
0000F970 08E9 0004 0001             		bset	#4,1(a1)
0000F976 5829 0024                  		addq.b	#4,$24(a1)
0000F97A 2348 003C                  		move.l	a0,$3C(a1)
0000F97E 4A28 0028                  		tst.b	$28(a0)
0000F982 6700                       		beq.s	Obj4D_PlaySnd
0000F984 7200                       		moveq	#0,d1
0000F986 6100 FF76                  		bsr.w	Obj4D_Loop
0000F98A 5429 0024                  		addq.b	#2,$24(a1)
0000F98E 08E9 0004 0002             		bset	#4,2(a1)
0000F994 0669 0100 000C             		addi.w	#$100,$C(a1)
0000F99A 137C 0000 0018             		move.b	#0,$18(a1)
0000F9A0 3368 0030 0030             		move.w	$30(a0),$30(a1)
0000F9A6 2368 003C 003C             		move.l	$3C(a0),$3C(a1)
0000F9AC 117C 0000 0028             		move.b	#0,$28(a0)
0000F9B2                            
0000F9B2                            Obj4D_PlaySnd:
0000F9B2 303C 00C8                  		move.w	#$C8,d0
0000F9B6 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play flame sound
0000F9BC                            
0000F9BC                            Obj4D_Action:				; XREF: Obj4D_Index
0000F9BC 7000                       		moveq	#0,d0
0000F9BE 1028 0028                  		move.b	$28(a0),d0
0000F9C2 D040                       		add.w	d0,d0
0000F9C4 323B 0000                  		move.w	Obj4D_TypeIndex(pc,d0.w),d1
0000F9C8 4EBB 1000                  		jsr	Obj4D_TypeIndex(pc,d1.w)
0000F9CC 6100 E650                  		bsr.w	SpeedToPos
0000F9D0 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
0000F9D6 6100 B6C2                  		bsr.w	AnimateSprite
0000F9DA                            
0000F9DA                            Obj4D_ChkDel:				; XREF: Obj4C
0000F9DA 3028 0008                  		move.w	8(a0),d0
0000F9DE 0240 FF80                  		andi.w	#$FF80,d0
0000F9E2 3238 F700                  		move.w	($FFFFF700).w,d1
0000F9E6 0441 0080                  		subi.w	#$80,d1
0000F9EA 0241 FF80                  		andi.w	#$FF80,d1
0000F9EE 9041                       		sub.w	d1,d0
0000F9F0 0C40 0280                  		cmpi.w	#$280,d0
0000F9F4 6200 E68A                  		bhi.w	DeleteObject
0000F9F8 4E75                       		rts	
0000F9FA                            ; ===========================================================================
0000F9FA 0000                       Obj4D_TypeIndex:dc.w Obj4D_Type00-Obj4D_TypeIndex
0000F9FC 0000                       		dc.w Obj4D_Type01-Obj4D_TypeIndex
0000F9FE                            ; ===========================================================================
0000F9FE                            
0000F9FE                            Obj4D_Type00:				; XREF: Obj4D_TypeIndex
0000F9FE 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
0000FA04 3028 0030                  		move.w	$30(a0),d0
0000FA08 B068 000C                  		cmp.w	$C(a0),d0
0000FA0C 6400                       		bcc.s	locret_EFDA
0000FA0E 5828 0024                  		addq.b	#4,$24(a0)
0000FA12 2268 003C                  		movea.l	$3C(a0),a1
0000FA16 137C 0003 001C             		move.b	#3,$1C(a1)
0000FA1C                            
0000FA1C                            locret_EFDA:
0000FA1C 4E75                       		rts	
0000FA1E                            ; ===========================================================================
0000FA1E                            
0000FA1E                            Obj4D_Type01:				; XREF: Obj4D_TypeIndex
0000FA1E 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
0000FA24 3028 0030                  		move.w	$30(a0),d0
0000FA28 B068 000C                  		cmp.w	$C(a0),d0
0000FA2C 6400                       		bcc.s	locret_EFFA
0000FA2E 5828 0024                  		addq.b	#4,$24(a0)
0000FA32 2268 003C                  		movea.l	$3C(a0),a1
0000FA36 137C 0001 001C             		move.b	#1,$1C(a1)
0000FA3C                            
0000FA3C                            locret_EFFA:
0000FA3C 4E75                       		rts	
0000FA3E                            ; ===========================================================================
0000FA3E                            
0000FA3E                            loc_EFFC:				; XREF: Obj4D_Index
0000FA3E 2268 003C                  		movea.l	$3C(a0),a1
0000FA42 0C29 0006 0024             		cmpi.b	#6,$24(a1)
0000FA48 6700 0000                  		beq.w	Obj4D_Delete
0000FA4C 3029 000C                  		move.w	$C(a1),d0
0000FA50 0640 0060                  		addi.w	#$60,d0
0000FA54 3140 000C                  		move.w	d0,$C(a0)
0000FA58 9068 0030                  		sub.w	$30(a0),d0
0000FA5C 4440                       		neg.w	d0
0000FA5E 7208                       		moveq	#8,d1
0000FA60 0C40 0040                  		cmpi.w	#$40,d0
0000FA64 6C00                       		bge.s	loc_F026
0000FA66 720B                       		moveq	#$B,d1
0000FA68                            
0000FA68                            loc_F026:
0000FA68 0C40 0080                  		cmpi.w	#$80,d0
0000FA6C 6F00                       		ble.s	loc_F02E
0000FA6E 720E                       		moveq	#$E,d1
0000FA70                            
0000FA70                            loc_F02E:
0000FA70 5328 001E                  		subq.b	#1,$1E(a0)
0000FA74 6A00                       		bpl.s	loc_F04C
0000FA76 117C 0007 001E             		move.b	#7,$1E(a0)
0000FA7C 5228 001B                  		addq.b	#1,$1B(a0)
0000FA80 0C28 0002 001B             		cmpi.b	#2,$1B(a0)
0000FA86 6500                       		bcs.s	loc_F04C
0000FA88 117C 0000 001B             		move.b	#0,$1B(a0)
0000FA8E                            
0000FA8E                            loc_F04C:
0000FA8E 1028 001B                  		move.b	$1B(a0),d0
0000FA92 D001                       		add.b	d1,d0
0000FA94 1140 001A                  		move.b	d0,$1A(a0)
0000FA98 6000 FF40                  		bra.w	Obj4D_ChkDel
0000FA9C                            ; ===========================================================================
0000FA9C                            
0000FA9C                            Obj4D_Delete:				; XREF: Obj4D_Index
0000FA9C 6000 E5E2                  		bra.w	DeleteObject
0000FAA0                            ; ===========================================================================
0000FAA0                            ; ---------------------------------------------------------------------------
0000FAA0                            ; Object 4E - advancing	wall of	lava (MZ)
0000FAA0                            ; ---------------------------------------------------------------------------
0000FAA0                            
0000FAA0                            Obj4E:					; XREF: Obj_Index
0000FAA0 7000                       		moveq	#0,d0
0000FAA2 1028 0024                  		move.b	$24(a0),d0
0000FAA6 323B 0000                  		move.w	Obj4E_Index(pc,d0.w),d1
0000FAAA 4EFB 1000                  		jmp	Obj4E_Index(pc,d1.w)
0000FAAE                            ; ===========================================================================
0000FAAE 0000                       Obj4E_Index:	dc.w Obj4E_Main-Obj4E_Index
0000FAB0 0000                       		dc.w Obj4E_Solid-Obj4E_Index
0000FAB2 0000                       		dc.w Obj4E_Action-Obj4E_Index
0000FAB4 0000                       		dc.w Obj4E_Move2-Obj4E_Index
0000FAB6 0000                       		dc.w Obj4E_Delete-Obj4E_Index
0000FAB8                            ; ===========================================================================
0000FAB8                            
0000FAB8                            Obj4E_Main:				; XREF: Obj4E_Index
0000FAB8 5828 0024                  		addq.b	#4,$24(a0)
0000FABC 2248                       		movea.l	a0,a1
0000FABE 7201                       		moveq	#1,d1
0000FAC0 6000                       		bra.s	Obj4E_Main2
0000FAC2                            ; ===========================================================================
0000FAC2                            
0000FAC2                            Obj4E_Loop:
0000FAC2 6100 EA1C                  		bsr.w	SingleObjLoad2
0000FAC6 6600                       		bne.s	loc_F0C8
0000FAC8                            
0000FAC8                            Obj4E_Main2:				; XREF: Obj4E_Main
0000FAC8 12BC 004E                  		move.b	#$4E,0(a1)	; load object
0000FACC 237C 0000 0000 0004        		move.l	#Map_obj4E,4(a1)
0000FAD4 337C 63A8 0002             		move.w	#$63A8,2(a1)
0000FADA 137C 0004 0001             		move.b	#4,1(a1)
0000FAE0 137C 0050 0019             		move.b	#$50,$19(a1)
0000FAE6 3368 0008 0008             		move.w	8(a0),8(a1)
0000FAEC 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000FAF2 137C 0001 0018             		move.b	#1,$18(a1)
0000FAF8 137C 0000 001C             		move.b	#0,$1C(a1)
0000FAFE 137C 0094 0020             		move.b	#$94,$20(a1)
0000FB04 2348 003C                  		move.l	a0,$3C(a1)
0000FB08                            
0000FB08                            loc_F0C8:
0000FB08 51C9 FFB8                  		dbf	d1,Obj4E_Loop	; repeat sequence once
0000FB0C                            
0000FB0C 5C29 0024                  		addq.b	#6,$24(a1)
0000FB10 137C 0004 001A             		move.b	#4,$1A(a1)
0000FB16                            
0000FB16                            Obj4E_Action:				; XREF: Obj4E_Index
0000FB16 3038 D008                  		move.w	($FFFFD008).w,d0
0000FB1A 9068 0008                  		sub.w	8(a0),d0
0000FB1E 6400                       		bcc.s	Obj4E_ChkSonic
0000FB20 4440                       		neg.w	d0
0000FB22                            
0000FB22                            Obj4E_ChkSonic:
0000FB22 0C40 00C0                  		cmpi.w	#$C0,d0		; is Sonic within $C0 pixels (x-axis)?
0000FB26 6400                       		bcc.s	Obj4E_Move	; if not, branch
0000FB28 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000FB2C 9068 000C                  		sub.w	$C(a0),d0
0000FB30 6400                       		bcc.s	loc_F0F4
0000FB32 4440                       		neg.w	d0
0000FB34                            
0000FB34                            loc_F0F4:
0000FB34 0C40 0060                  		cmpi.w	#$60,d0		; is Sonic within $60 pixels (y-axis)?
0000FB38 6400                       		bcc.s	Obj4E_Move	; if not, branch
0000FB3A 117C 0001 0036             		move.b	#1,$36(a0)	; set object to	move
0000FB40 6000                       		bra.s	Obj4E_Solid
0000FB42                            ; ===========================================================================
0000FB42                            
0000FB42                            Obj4E_Move:				; XREF: Obj4E_ChkSonic
0000FB42 4A28 0036                  		tst.b	$36(a0)		; is object set	to move?
0000FB46 6700                       		beq.s	Obj4E_Solid	; if not, branch
0000FB48 317C 0180 0010             		move.w	#$180,$10(a0)	; set object speed
0000FB4E 5528 0024                  		subq.b	#2,$24(a0)
0000FB52                            
0000FB52                            Obj4E_Solid:				; XREF: Obj4E_Index
0000FB52 323C 002B                  		move.w	#$2B,d1
0000FB56 343C 0018                  		move.w	#$18,d2
0000FB5A 3602                       		move.w	d2,d3
0000FB5C 5243                       		addq.w	#1,d3
0000FB5E 3828 0008                  		move.w	8(a0),d4
0000FB62 1028 0024                  		move.b	$24(a0),d0
0000FB66 3F00                       		move.w	d0,-(sp)
0000FB68 6100 0000                  		bsr.w	SolidObject
0000FB6C 301F                       		move.w	(sp)+,d0
0000FB6E 1140 0024                  		move.b	d0,$24(a0)
0000FB72 0C68 06A0 0008             		cmpi.w	#$6A0,8(a0)	; has object reached $6A0 on the x-axis?
0000FB78 6600                       		bne.s	Obj4E_Animate	; if not, branch
0000FB7A 4268 0010                  		clr.w	$10(a0)		; stop object moving
0000FB7E 4228 0036                  		clr.b	$36(a0)
0000FB82                            
0000FB82                            Obj4E_Animate:
0000FB82 43F9 0000 0000             		lea	(Ani_obj4E).l,a1
0000FB88 6100 B510                  		bsr.w	AnimateSprite
0000FB8C 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0000FB92 6400                       		bcc.s	Obj4E_ChkDel
0000FB94 6100 E488                  		bsr.w	SpeedToPos
0000FB98                            
0000FB98                            Obj4E_ChkDel:
0000FB98 6100 E4AA                  		bsr.w	DisplaySprite
0000FB9C 4A28 0036                  		tst.b	$36(a0)
0000FBA0 6600                       		bne.s	locret_F17E
0000FBA2 3028 0008                  		move.w	8(a0),d0
0000FBA6 0240 FF80                  		andi.w	#$FF80,d0
0000FBAA 3238 F700                  		move.w	($FFFFF700).w,d1
0000FBAE 0441 0080                  		subi.w	#$80,d1
0000FBB2 0241 FF80                  		andi.w	#$FF80,d1
0000FBB6 9041                       		sub.w	d1,d0
0000FBB8 0C40 0280                  		cmpi.w	#$280,d0
0000FBBC 6200                       		bhi.s	Obj4E_ChkGone
0000FBBE                            
0000FBBE                            locret_F17E:
0000FBBE 4E75                       		rts	
0000FBC0                            ; ===========================================================================
0000FBC0                            
0000FBC0                            Obj4E_ChkGone:				; XREF: Obj4E_ChkDel
0000FBC0 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000FBC4 7000                       		moveq	#0,d0
0000FBC6 1028 0023                  		move.b	$23(a0),d0
0000FBCA 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000FBD0 117C 0008 0024             		move.b	#8,$24(a0)
0000FBD6 4E75                       		rts	
0000FBD8                            ; ===========================================================================
0000FBD8                            
0000FBD8                            Obj4E_Move2:				; XREF: Obj4E_Index
0000FBD8 2268 003C                  		movea.l	$3C(a0),a1
0000FBDC 0C29 0008 0024             		cmpi.b	#8,$24(a1)
0000FBE2 6700                       		beq.s	Obj4E_Delete
0000FBE4 3169 0008 0008             		move.w	8(a1),8(a0)	; move rest of lava wall
0000FBEA 0468 0080 0008             		subi.w	#$80,8(a0)
0000FBF0 6000 E452                  		bra.w	DisplaySprite
0000FBF4                            ; ===========================================================================
0000FBF4                            
0000FBF4                            Obj4E_Delete:				; XREF: Obj4E_Index
0000FBF4 6000 E48A                  		bra.w	DeleteObject
0000FBF8                            ; ===========================================================================
0000FBF8                            ; ---------------------------------------------------------------------------
0000FBF8                            ; Object 54 - invisible	lava tag (MZ)
0000FBF8                            ; ---------------------------------------------------------------------------
0000FBF8                            
0000FBF8                            Obj54:					; XREF: Obj_Index
0000FBF8 7000                       		moveq	#0,d0
0000FBFA 1028 0024                  		move.b	$24(a0),d0
0000FBFE 323B 0000                  		move.w	Obj54_Index(pc,d0.w),d1
0000FC02 4EFB 1000                  		jmp	Obj54_Index(pc,d1.w)
0000FC06                            ; ===========================================================================
0000FC06 0000                       Obj54_Index:	dc.w Obj54_Main-Obj54_Index
0000FC08 0000                       		dc.w Obj54_ChkDel-Obj54_Index
0000FC0A                            
0000FC0A 9694 9500                  Obj54_Sizes:	dc.b $96, $94, $95, 0
0000FC0E                            ; ===========================================================================
0000FC0E                            
0000FC0E                            Obj54_Main:				; XREF: Obj54_Index
0000FC0E 5428 0024                  		addq.b	#2,$24(a0)
0000FC12 7000                       		moveq	#0,d0
0000FC14 1028 0028                  		move.b	$28(a0),d0
0000FC18 117B 00F0 0020             		move.b	Obj54_Sizes(pc,d0.w),$20(a0)
0000FC1E 217C 0000 0000 0004        		move.l	#Map_obj54,4(a0)
0000FC26 117C 0084 0001             		move.b	#$84,1(a0)
0000FC2C                            
0000FC2C                            Obj54_ChkDel:				; XREF: Obj54_Index
0000FC2C 3028 0008                  		move.w	8(a0),d0
0000FC30 0240 FF80                  		andi.w	#$FF80,d0
0000FC34 3238 F700                  		move.w	($FFFFF700).w,d1
0000FC38 0441 0080                  		subi.w	#$80,d1
0000FC3C 0241 FF80                  		andi.w	#$FF80,d1
0000FC40 9041                       		sub.w	d1,d0
0000FC42 6B00 E43C                  		bmi.w	DeleteObject
0000FC46 0C40 0280                  		cmpi.w	#$280,d0
0000FC4A 6200 E434                  		bhi.w	DeleteObject
0000FC4E 4E75                       		rts	
0000FC50                            ; ===========================================================================
0000FC50                            ; ---------------------------------------------------------------------------
0000FC50                            ; Sprite mappings - invisible lava tag (MZ)
0000FC50                            ; ---------------------------------------------------------------------------
0000FC50                            Map_obj54:
0000FC50                            	include "_maps\obj54.asm"
0000FC50                            ; ---------------------------------------------------------------------------
0000FC50                            ; Sprite mappings - invisible lava tag (MZ)
0000FC50                            ; ---------------------------------------------------------------------------
0000FC50 0000                       		dc.w byte_F212-Map_obj54
0000FC52 00                         byte_F212:	dc.b 0			; no sprite, because the tag is invisible!
0000FC54 00                         		even
0000FC54 00                         		even
0000FC54                            
0000FC54                            Ani_obj4C:
0000FC54                            	include "_anim\obj4C.asm"
0000FC54                            ; ---------------------------------------------------------------------------
0000FC54                            ; Animation script - geyser of lava (MZ)
0000FC54                            ; ---------------------------------------------------------------------------
0000FC54 0000                       		dc.w byte_F220-Ani_obj4C
0000FC56 0000                       		dc.w byte_F22A-Ani_obj4C
0000FC58 0000                       		dc.w byte_F22E-Ani_obj4C
0000FC5A 0000                       		dc.w byte_F232-Ani_obj4C
0000FC5C 0000                       		dc.w byte_F23A-Ani_obj4C
0000FC5E 0000                       		dc.w byte_F23E-Ani_obj4C
0000FC60 0200 0100 0104 0504 05FC   byte_F220:	dc.b 2,	0, 1, 0, 1, 4, 5, 4, 5,	$FC
0000FC6A 0202 03FF                  byte_F22A:	dc.b 2,	2, 3, $FF
0000FC6E 0206 07FF                  byte_F22E:	dc.b 2,	6, 7, $FF
0000FC72 0202 0300 0100 01FC        byte_F232:	dc.b 2,	2, 3, 0, 1, 0, 1, $FC
0000FC7A 0F13 FF00                  byte_F23A:	dc.b $F, $13, $FF, 0
0000FC7E 0211 12FF                  byte_F23E:	dc.b 2,	$11, $12, $FF
0000FC82                            		even
0000FC82                            		even
0000FC82                            
0000FC82                            Ani_obj4E:
0000FC82                            	include "_anim\obj4E.asm"
0000FC82                            ; ---------------------------------------------------------------------------
0000FC82                            ; Animation script - advancing wall of lava (MZ)
0000FC82                            ; ---------------------------------------------------------------------------
0000FC82 0000                       		dc.w byte_F244-Ani_obj4E
0000FC84 0900 0102 03FF             byte_F244:	dc.b 9,	0, 1, 2, 3, $FF
0000FC8A                            		even
0000FC8A                            		even
0000FC8A                            
0000FC8A                            ; ---------------------------------------------------------------------------
0000FC8A                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
0000FC8A                            ; ---------------------------------------------------------------------------
0000FC8A                            Map_obj4C:
0000FC8A                            	include "_maps\obj4C.asm"
0000FC8A                            ; ---------------------------------------------------------------------------
0000FC8A                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
0000FC8A                            ; ---------------------------------------------------------------------------
0000FC8A 0000 0000                  		dc.w byte_F272-Map_obj4C, byte_F27D-Map_obj4C
0000FC8E 0000 0000                  		dc.w byte_F288-Map_obj4C, byte_F29D-Map_obj4C
0000FC92 0000 0000                  		dc.w byte_F2B2-Map_obj4C, byte_F2D1-Map_obj4C
0000FC96 0000 0000                  		dc.w byte_F2F0-Map_obj4C, byte_F2FB-Map_obj4C
0000FC9A 0000 0000                  		dc.w byte_F306-Map_obj4C, byte_F339-Map_obj4C
0000FC9E 0000 0000                  		dc.w byte_F36C-Map_obj4C, byte_F39F-Map_obj4C
0000FCA2 0000 0000                  		dc.w byte_F3BE-Map_obj4C, byte_F3DD-Map_obj4C
0000FCA6 0000 0000                  		dc.w byte_F3FC-Map_obj4C, byte_F44D-Map_obj4C
0000FCAA 0000 0000                  		dc.w byte_F49E-Map_obj4C, byte_F4EF-Map_obj4C
0000FCAE 0000 0000                  		dc.w byte_F50E-Map_obj4C, byte_F52D-Map_obj4C
0000FCB2 02                         byte_F272:	dc.b 2
0000FCB3 EC0B 0000 E8               		dc.b $EC, $B, 0, 0, $E8
0000FCB8 EC0B 0800 00               		dc.b $EC, $B, 8, 0, 0
0000FCBD 02                         byte_F27D:	dc.b 2
0000FCBE EC0B 0018 E8               		dc.b $EC, $B, 0, $18, $E8
0000FCC3 EC0B 0818 00               		dc.b $EC, $B, 8, $18, 0
0000FCC8 04                         byte_F288:	dc.b 4
0000FCC9 EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
0000FCCE F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
0000FCD3 F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
0000FCD8 EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
0000FCDD 04                         byte_F29D:	dc.b 4
0000FCDE EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
0000FCE3 F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
0000FCE8 F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
0000FCED EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
0000FCF2 06                         byte_F2B2:	dc.b 6
0000FCF3 EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
0000FCF8 F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
0000FCFD F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
0000FD02 EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
0000FD07 E80E 0090 E0               		dc.b $E8, $E, 0, $90, $E0
0000FD0C E80E 0890 00               		dc.b $E8, $E, 8, $90, 0
0000FD11 06                         byte_F2D1:	dc.b 6
0000FD12 EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
0000FD17 F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
0000FD1C F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
0000FD21 EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
0000FD26 E80E 0890 E0               		dc.b $E8, $E, 8, $90, $E0
0000FD2B E80E 0090 00               		dc.b $E8, $E, 0, $90, 0
0000FD30 02                         byte_F2F0:	dc.b 2
0000FD31 E00F 0030 E0               		dc.b $E0, $F, 0, $30, $E0
0000FD36 E00F 0830 00               		dc.b $E0, $F, 8, $30, 0
0000FD3B 02                         byte_F2FB:	dc.b 2
0000FD3C E00F 0830 E0               		dc.b $E0, $F, 8, $30, $E0
0000FD41 E00F 0030 00               		dc.b $E0, $F, 0, $30, 0
0000FD46 0A                         byte_F306:	dc.b $A
0000FD47 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000FD4C 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000FD51 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000FD56 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000FD5B D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000FD60 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000FD65 F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
0000FD6A F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
0000FD6F 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
0000FD74 100F 0840 00               		dc.b $10, $F, 8, $40, 0
0000FD79 0A                         byte_F339:	dc.b $A
0000FD7A 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000FD7F 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000FD84 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000FD89 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000FD8E D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000FD93 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000FD98 F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
0000FD9D F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
0000FDA2 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
0000FDA7 100F 0850 00               		dc.b $10, $F, 8, $50, 0
0000FDAC 0A                         byte_F36C:	dc.b $A
0000FDAD 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000FDB2 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000FDB7 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000FDBC B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000FDC1 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000FDC6 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000FDCB F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
0000FDD0 F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
0000FDD5 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
0000FDDA 100F 0860 00               		dc.b $10, $F, 8, $60, 0
0000FDDF 06                         byte_F39F:	dc.b 6
0000FDE0 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000FDE5 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000FDEA B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000FDEF B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000FDF4 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000FDF9 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000FDFE 06                         byte_F3BE:	dc.b 6
0000FDFF 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000FE04 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000FE09 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000FE0E B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000FE13 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000FE18 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000FE1D 06                         byte_F3DD:	dc.b 6
0000FE1E 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000FE23 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000FE28 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000FE2D B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000FE32 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000FE37 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000FE3C 10                         byte_F3FC:	dc.b $10
0000FE3D 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000FE42 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000FE47 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000FE4C B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000FE51 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000FE56 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000FE5B F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
0000FE60 F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
0000FE65 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
0000FE6A 100F 0840 00               		dc.b $10, $F, 8, $40, 0
0000FE6F 300F 0040 E0               		dc.b $30, $F, 0, $40, $E0
0000FE74 300F 0840 00               		dc.b $30, $F, 8, $40, 0
0000FE79 500F 0040 E0               		dc.b $50, $F, 0, $40, $E0
0000FE7E 500F 0840 00               		dc.b $50, $F, 8, $40, 0
0000FE83 700F 0040 E0               		dc.b $70, $F, 0, $40, $E0
0000FE88 700F 0840 00               		dc.b $70, $F, 8, $40, 0
0000FE8D 10                         byte_F44D:	dc.b $10
0000FE8E 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000FE93 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000FE98 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000FE9D B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000FEA2 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000FEA7 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000FEAC F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
0000FEB1 F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
0000FEB6 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
0000FEBB 100F 0850 00               		dc.b $10, $F, 8, $50, 0
0000FEC0 300F 0050 E0               		dc.b $30, $F, 0, $50, $E0
0000FEC5 300F 0850 00               		dc.b $30, $F, 8, $50, 0
0000FECA 500F 0050 E0               		dc.b $50, $F, 0, $50, $E0
0000FECF 500F 0850 00               		dc.b $50, $F, 8, $50, 0
0000FED4 700F 0050 E0               		dc.b $70, $F, 0, $50, $E0
0000FED9 700F 0850 00               		dc.b $70, $F, 8, $50, 0
0000FEDE 10                         byte_F49E:	dc.b $10
0000FEDF 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000FEE4 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000FEE9 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000FEEE B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000FEF3 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000FEF8 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000FEFD F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
0000FF02 F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
0000FF07 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
0000FF0C 100F 0860 00               		dc.b $10, $F, 8, $60, 0
0000FF11 300F 0060 E0               		dc.b $30, $F, 0, $60, $E0
0000FF16 300F 0860 00               		dc.b $30, $F, 8, $60, 0
0000FF1B 500F 0060 E0               		dc.b $50, $F, 0, $60, $E0
0000FF20 500F 0860 00               		dc.b $50, $F, 8, $60, 0
0000FF25 700F 0060 E0               		dc.b $70, $F, 0, $60, $E0
0000FF2A 700F 0860 00               		dc.b $70, $F, 8, $60, 0
0000FF2F 06                         byte_F4EF:	dc.b 6
0000FF30 E00B 0000 C8               		dc.b $E0, $B, 0, 0, $C8
0000FF35 E80E 000C E0               		dc.b $E8, $E, 0, $C, $E0
0000FF3A E80E 080C 00               		dc.b $E8, $E, 8, $C, 0
0000FF3F E00B 0800 20               		dc.b $E0, $B, 8, 0, $20
0000FF44 D80E 0090 E0               		dc.b $D8, $E, 0, $90, $E0
0000FF49 D80E 0890 00               		dc.b $D8, $E, 8, $90, 0
0000FF4E 06                         byte_F50E:	dc.b 6
0000FF4F E00B 0018 C8               		dc.b $E0, $B, 0, $18, $C8
0000FF54 E80E 0024 E0               		dc.b $E8, $E, 0, $24, $E0
0000FF59 E80E 0824 00               		dc.b $E8, $E, 8, $24, 0
0000FF5E E00B 0818 20               		dc.b $E0, $B, 8, $18, $20
0000FF63 D80E 0890 E0               		dc.b $D8, $E, 8, $90, $E0
0000FF68 D80E 0090 00               		dc.b $D8, $E, 0, $90, 0
0000FF6D 00                         byte_F52D:	dc.b 0
0000FF6E                            		even
0000FF6E                            		even
0000FF6E                            
0000FF6E                            ; ---------------------------------------------------------------------------
0000FF6E                            ; Sprite mappings - advancing wall of lava (MZ)
0000FF6E                            ; ---------------------------------------------------------------------------
0000FF6E                            Map_obj4E:
0000FF6E                            	include "_maps\obj4E.asm"
0000FF6E                            ; ---------------------------------------------------------------------------
0000FF6E                            ; Sprite mappings - advancing wall of lava (MZ)
0000FF6E                            ; ---------------------------------------------------------------------------
0000FF6E 0000                       		dc.w byte_F538-Map_obj4E
0000FF70 0000                       		dc.w byte_F566-Map_obj4E
0000FF72 0000                       		dc.w byte_F594-Map_obj4E
0000FF74 0000                       		dc.w byte_F5C2-Map_obj4E
0000FF76 0000                       		dc.w byte_F5F0-Map_obj4E
0000FF78 09                         byte_F538:	dc.b 9
0000FF79 E00F 0060 20               		dc.b $E0, $F, 0, $60, $20
0000FF7E 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
0000FF83 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FF88 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FF8D 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FF92 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FF97 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FF9C E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FFA1 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FFA6 09                         byte_F566:	dc.b 9
0000FFA7 E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
0000FFAC 000F 0080 3C               		dc.b 0,	$F, 0, $80, $3C
0000FFB1 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FFB6 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FFBB 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FFC0 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FFC5 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FFCA E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FFCF 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FFD4 09                         byte_F594:	dc.b 9
0000FFD5 E00F 0080 20               		dc.b $E0, $F, 0, $80, $20
0000FFDA 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
0000FFDF 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FFE4 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FFE9 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FFEE E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FFF3 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FFF8 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FFFD 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
00010002 09                         byte_F5C2:	dc.b 9
00010003 E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
00010008 000F 0060 3C               		dc.b 0,	$F, 0, $60, $3C
0001000D 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
00010012 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
00010017 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0001001C E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
00010021 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
00010026 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0001002B 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
00010030 08                         byte_F5F0:	dc.b 8
00010031 E00F FF2A 20               		dc.b $E0, $F, $FF, $2A,	$20
00010036 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0001003B E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
00010040 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
00010045 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0001004A 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0001004F E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
00010054 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0001005A 00                         		even
0001005A 00                         		even
0001005A                            
0001005A                            ; ===========================================================================
0001005A                            ; ---------------------------------------------------------------------------
0001005A                            ; Object 40 - Moto Bug enemy (GHZ)
0001005A                            ; ---------------------------------------------------------------------------
0001005A                            
0001005A                            Obj40:					; XREF: Obj_Index
0001005A 7000                       		moveq	#0,d0
0001005C 1028 0024                  		move.b	$24(a0),d0
00010060 323B 0000                  		move.w	Obj40_Index(pc,d0.w),d1
00010064 4EFB 1000                  		jmp	Obj40_Index(pc,d1.w)
00010068                            ; ===========================================================================
00010068 0000                       Obj40_Index:	dc.w Obj40_Main-Obj40_Index
0001006A 0000                       		dc.w Obj40_Action-Obj40_Index
0001006C 0000                       		dc.w Obj40_Animate-Obj40_Index
0001006E 0000                       		dc.w Obj40_Delete-Obj40_Index
00010070                            ; ===========================================================================
00010070                            
00010070                            Obj40_Main:				; XREF: Obj40_Index
00010070 217C 0000 0000 0004        		move.l	#Map_obj40,4(a0)
00010078 317C 04F0 0002             		move.w	#$4F0,2(a0)
0001007E 117C 0004 0001             		move.b	#4,1(a0)
00010084 117C 0004 0018             		move.b	#4,$18(a0)
0001008A 117C 0014 0019             		move.b	#$14,$19(a0)
00010090 4A28 001C                  		tst.b	$1C(a0)		; is object a smoke trail?
00010094 6600                       		bne.s	Obj40_SetSmoke	; if yes, branch
00010096 117C 000E 0016             		move.b	#$E,$16(a0)
0001009C 117C 0008 0017             		move.b	#8,$17(a0)
000100A2 117C 000C 0020             		move.b	#$C,$20(a0)
000100A8 6100 DF02                  		bsr.w	ObjectFall
000100AC 4EB9 0000 0000             		jsr	ObjHitFloor
000100B2 4A41                       		tst.w	d1
000100B4 6A00                       		bpl.s	locret_F68A
000100B6 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
000100BA 317C 0000 0012             		move.w	#0,$12(a0)
000100C0 5428 0024                  		addq.b	#2,$24(a0)
000100C4 0868 0000 0022             		bchg	#0,$22(a0)
000100CA                            
000100CA                            locret_F68A:
000100CA 4E75                       		rts	
000100CC                            ; ===========================================================================
000100CC                            
000100CC                            Obj40_SetSmoke:				; XREF: Obj40_Main
000100CC 5828 0024                  		addq.b	#4,$24(a0)
000100D0 6000 0000                  		bra.w	Obj40_Animate
000100D4                            ; ===========================================================================
000100D4                            
000100D4                            Obj40_Action:				; XREF: Obj40_Index
000100D4 7000                       		moveq	#0,d0
000100D6 1028 0025                  		move.b	$25(a0),d0
000100DA 323B 0000                  		move.w	Obj40_Index2(pc,d0.w),d1
000100DE 4EBB 1000                  		jsr	Obj40_Index2(pc,d1.w)
000100E2 43F9 0000 0000             		lea	(Ani_obj40).l,a1
000100E8 6100 AFB0                  		bsr.w	AnimateSprite
000100EC                            
000100EC                            ; ---------------------------------------------------------------------------
000100EC                            ; Routine to mark an enemy/monitor/ring	as destroyed
000100EC                            ; ---------------------------------------------------------------------------
000100EC                            
000100EC                            MarkObjGone:
000100EC 3028 0008                  		move.w	8(a0),d0
000100F0 0240 FF80                  		andi.w	#$FF80,d0
000100F4 3238 F700                  		move.w	($FFFFF700).w,d1
000100F8 0441 0080                  		subi.w	#$80,d1
000100FC 0241 FF80                  		andi.w	#$FF80,d1
00010100 9041                       		sub.w	d1,d0
00010102 0C40 0280                  		cmpi.w	#$280,d0
00010106 6200 0000                  		bhi.w	Mark_ChkGone
0001010A 6000 DF38                  		bra.w	DisplaySprite
0001010E                            ; ===========================================================================
0001010E                            
0001010E                            Mark_ChkGone:
0001010E 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010112 7000                       		moveq	#0,d0
00010114 1028 0023                  		move.b	$23(a0),d0
00010118 6700                       		beq.s	Mark_Delete
0001011A 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00010120                            
00010120                            Mark_Delete:
00010120 6000 DF5E                  		bra.w	DeleteObject
00010124                            
00010124                            ; ===========================================================================
00010124 0000                       Obj40_Index2:	dc.w Obj40_Move-Obj40_Index2
00010126 0000                       		dc.w Obj40_FixToFloor-Obj40_Index2
00010128                            ; ===========================================================================
00010128                            
00010128                            Obj40_Move:				; XREF: Obj40_Index2
00010128 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
0001012C 6A00                       		bpl.s	locret_F70A	; if time remains, branch
0001012E 5428 0025                  		addq.b	#2,$25(a0)
00010132 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object to the left
00010138 117C 0001 001C             		move.b	#1,$1C(a0)
0001013E 0868 0000 0022             		bchg	#0,$22(a0)
00010144 6600                       		bne.s	locret_F70A
00010146 4468 0010                  		neg.w	$10(a0)		; change direction
0001014A                            
0001014A                            locret_F70A:
0001014A 4E75                       		rts	
0001014C                            ; ===========================================================================
0001014C                            
0001014C                            Obj40_FixToFloor:			; XREF: Obj40_Index2
0001014C 6100 DED0                  		bsr.w	SpeedToPos
00010150 4EB9 0000 0000             		jsr	ObjHitFloor
00010156 0C41 FFF8                  		cmpi.w	#-8,d1
0001015A 6D00                       		blt.s	Obj40_Pause
0001015C 0C41 000C                  		cmpi.w	#$C,d1
00010160 6C00                       		bge.s	Obj40_Pause
00010162 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
00010166 5328 0033                  		subq.b	#1,$33(a0)
0001016A 6A00                       		bpl.s	locret_F756
0001016C 117C 000F 0033             		move.b	#$F,$33(a0)
00010172 6100 E356                  		bsr.w	SingleObjLoad
00010176 6600                       		bne.s	locret_F756
00010178 12BC 0040                  		move.b	#$40,0(a1)	; load exhaust smoke object
0001017C 3368 0008 0008             		move.w	8(a0),8(a1)
00010182 3368 000C 000C             		move.w	$C(a0),$C(a1)
00010188 1368 0022 0022             		move.b	$22(a0),$22(a1)
0001018E 137C 0002 001C             		move.b	#2,$1C(a1)
00010194                            
00010194                            locret_F756:
00010194 4E75                       		rts	
00010196                            ; ===========================================================================
00010196                            
00010196                            Obj40_Pause:				; XREF: Obj40_FixToFloor
00010196 5528 0025                  		subq.b	#2,$25(a0)
0001019A 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
000101A0 317C 0000 0010             		move.w	#0,$10(a0)	; stop the object moving
000101A6 117C 0000 001C             		move.b	#0,$1C(a0)
000101AC 4E75                       		rts	
000101AE                            ; ===========================================================================
000101AE                            
000101AE                            Obj40_Animate:				; XREF: Obj40_Index
000101AE 43F9 0000 0000             		lea	(Ani_obj40).l,a1
000101B4 6100 AEE4                  		bsr.w	AnimateSprite
000101B8 6000 DE8A                  		bra.w	DisplaySprite
000101BC                            ; ===========================================================================
000101BC                            
000101BC                            Obj40_Delete:				; XREF: Obj40_Index
000101BC 6000 DEC2                  		bra.w	DeleteObject
000101C0                            ; ===========================================================================
000101C0                            Ani_obj40:
000101C0                            	include "_anim\obj40.asm"
000101C0                            ; ---------------------------------------------------------------------------
000101C0                            ; Animation script - Motobug enemy
000101C0                            ; ---------------------------------------------------------------------------
000101C0 0000                       		dc.w byte_F788-Ani_obj40
000101C2 0000                       		dc.w byte_F78C-Ani_obj40
000101C4 0000                       		dc.w byte_F792-Ani_obj40
000101C6 0F02 FF00                  byte_F788:	dc.b $F, 2, $FF, 0
000101CA 0700 0100 02FF             byte_F78C:	dc.b 7,	0, 1, 0, 2, $FF
000101D0 0103 0603 0604 0604 0604+  byte_F792:	dc.b 1,	3, 6, 3, 6, 4, 6, 4, 6,	4, 6, 5, $FC, 0
000101DE                            		even
000101DE                            		even
000101DE                            
000101DE                            ; ---------------------------------------------------------------------------
000101DE                            ; Sprite mappings - Moto Bug enemy (GHZ)
000101DE                            ; ---------------------------------------------------------------------------
000101DE                            Map_obj40:
000101DE                            	include "_maps\obj40.asm"
000101DE                            Map_cedc:
000101DE 0000                       Map_cedc_0: 	dc.w Map_cedc_E-Map_cedc
000101E0 0000                       Map_cedc_2: 	dc.w Map_cedc_23-Map_cedc
000101E2 0000                       Map_cedc_4: 	dc.w Map_cedc_38-Map_cedc
000101E4 0000                       Map_cedc_6: 	dc.w Map_cedc_52-Map_cedc
000101E6 0000                       Map_cedc_8: 	dc.w Map_cedc_58-Map_cedc
000101E8 0000                       Map_cedc_A: 	dc.w Map_cedc_5E-Map_cedc
000101EA 0000                       Map_cedc_C: 	dc.w Map_cedc_64-Map_cedc
000101EC 04                         Map_cedc_E: 	dc.b $4
000101ED F00D 0000 EC               	dc.b $F0, $D, $0, $0, $EC
000101F2 000C 0008 EC               	dc.b $0, $C, $0, $8, $EC
000101F7 F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
000101FC 0808 000E F4               	dc.b $8, $8, $0, $E, $F4
00010201 04                         Map_cedc_23: 	dc.b $4
00010202 F10D 0000 EC               	dc.b $F1, $D, $0, $0, $EC
00010207 010C 0008 EC               	dc.b $1, $C, $0, $8, $EC
0001020C F901 000C 0C               	dc.b $F9, $1, $0, $C, $C
00010211 0908 0011 F4               	dc.b $9, $8, $0, $11, $F4
00010216 05                         Map_cedc_38: 	dc.b $5
00010217 F00D 0000 EC               	dc.b $F0, $D, $0, $0, $EC
0001021C 000C 0014 EC               	dc.b $0, $C, $0, $14, $EC
00010221 F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
00010226 0804 0018 EC               	dc.b $8, $4, $0, $18, $EC
0001022B 0804 0012 FC               	dc.b $8, $4, $0, $12, $FC
00010230 01                         Map_cedc_52: 	dc.b $1
00010231 FA00 001A 10               	dc.b $FA, $0, $0, $1A, $10
00010236 01                         Map_cedc_58: 	dc.b $1
00010237 FA00 001B 10               	dc.b $FA, $0, $0, $1B, $10
0001023C 01                         Map_cedc_5E: 	dc.b $1
0001023D FA00 001C 10               	dc.b $FA, $0, $0, $1C, $10
00010242 00                         Map_cedc_64: 	dc.b $0
00010244 00                         	even
00010244 00                         	even
00010244                            
00010244                            ; ===========================================================================
00010244                            ; ---------------------------------------------------------------------------
00010244                            ; Object 4F - blank
00010244                            ; ---------------------------------------------------------------------------
00010244                            
00010244                            Obj4F:					; XREF: Obj_Index
00010244 4E75                       		rts	
00010246                            
00010246                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00010246                            
00010246                            
00010246                            Obj50_ChkWall:				; XREF: Obj50_FixToFloor
00010246 3038 FE04                  		move.w	($FFFFFE04).w,d0
0001024A D047                       		add.w	d7,d0
0001024C 0240 0003                  		andi.w	#3,d0
00010250 6600                       		bne.s	loc_F836
00010252 7600                       		moveq	#0,d3
00010254 1628 0019                  		move.b	$19(a0),d3
00010258 4A68 0010                  		tst.w	$10(a0)
0001025C 6B00                       		bmi.s	loc_F82C
0001025E 6100 0000                  		bsr.w	ObjHitWallRight
00010262 4A41                       		tst.w	d1
00010264 6A00                       		bpl.s	loc_F836
00010266                            
00010266                            loc_F828:
00010266 7001                       		moveq	#1,d0
00010268 4E75                       		rts	
0001026A                            ; ===========================================================================
0001026A                            
0001026A                            loc_F82C:
0001026A 4643                       		not.w	d3
0001026C 6100 0000                  		bsr.w	ObjHitWallLeft
00010270 4A41                       		tst.w	d1
00010272 6BF2                       		bmi.s	loc_F828
00010274                            
00010274                            loc_F836:
00010274 7000                       		moveq	#0,d0
00010276 4E75                       		rts	
00010278                            ; End of function Obj50_ChkWall
00010278                            
00010278                            ; ===========================================================================
00010278                            ; ---------------------------------------------------------------------------
00010278                            ; Object 50 - Yadrin enemy (SYZ)
00010278                            ; ---------------------------------------------------------------------------
00010278                            
00010278                            Obj50:					; XREF: Obj_Index
00010278 7000                       		moveq	#0,d0
0001027A 1028 0024                  		move.b	$24(a0),d0
0001027E 323B 0000                  		move.w	Obj50_Index(pc,d0.w),d1
00010282 4EFB 1000                  		jmp	Obj50_Index(pc,d1.w)
00010286                            ; ===========================================================================
00010286 0000                       Obj50_Index:	dc.w Obj50_Main-Obj50_Index
00010288 0000                       		dc.w Obj50_Action-Obj50_Index
0001028A                            ; ===========================================================================
0001028A                            
0001028A                            Obj50_Main:				; XREF: Obj50_Index
0001028A 217C 0000 0000 0004        		move.l	#Map_obj50,4(a0)
00010292 317C 247B 0002             		move.w	#$247B,2(a0)
00010298 117C 0004 0001             		move.b	#4,1(a0)
0001029E 117C 0004 0018             		move.b	#4,$18(a0)
000102A4 117C 0014 0019             		move.b	#$14,$19(a0)
000102AA 117C 0011 0016             		move.b	#$11,$16(a0)
000102B0 117C 0008 0017             		move.b	#8,$17(a0)
000102B6 117C 00CC 0020             		move.b	#$CC,$20(a0)
000102BC 6100 DCEE                  		bsr.w	ObjectFall
000102C0 6100 0000                  		bsr.w	ObjHitFloor
000102C4 4A41                       		tst.w	d1
000102C6 6A00                       		bpl.s	locret_F89E
000102C8 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
000102CC 317C 0000 0012             		move.w	#0,$12(a0)
000102D2 5428 0024                  		addq.b	#2,$24(a0)
000102D6 0868 0000 0022             		bchg	#0,$22(a0)
000102DC                            
000102DC                            locret_F89E:
000102DC 4E75                       		rts	
000102DE                            ; ===========================================================================
000102DE                            
000102DE                            Obj50_Action:				; XREF: Obj50_Index
000102DE 7000                       		moveq	#0,d0
000102E0 1028 0025                  		move.b	$25(a0),d0
000102E4 323B 0000                  		move.w	Obj50_Index2(pc,d0.w),d1
000102E8 4EBB 1000                  		jsr	Obj50_Index2(pc,d1.w)
000102EC 43F9 0000 0000             		lea	(Ani_obj50).l,a1
000102F2 6100 ADA6                  		bsr.w	AnimateSprite
000102F6 6000 FDF4                  		bra.w	MarkObjGone
000102FA                            ; ===========================================================================
000102FA 0000                       Obj50_Index2:	dc.w Obj50_Move-Obj50_Index2
000102FC 0000                       		dc.w Obj50_FixToFloor-Obj50_Index2
000102FE                            ; ===========================================================================
000102FE                            
000102FE                            Obj50_Move:				; XREF: Obj50_Index2
000102FE 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
00010302 6A00                       		bpl.s	locret_F8E2	; if time remains, branch
00010304 5428 0025                  		addq.b	#2,$25(a0)
00010308 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object
0001030E 117C 0001 001C             		move.b	#1,$1C(a0)
00010314 0868 0000 0022             		bchg	#0,$22(a0)
0001031A 6600                       		bne.s	locret_F8E2
0001031C 4468 0010                  		neg.w	$10(a0)		; change direction
00010320                            
00010320                            locret_F8E2:
00010320 4E75                       		rts	
00010322                            ; ===========================================================================
00010322                            
00010322                            Obj50_FixToFloor:			; XREF: Obj50_Index2
00010322 6100 DCFA                  		bsr.w	SpeedToPos
00010326 6100 0000                  		bsr.w	ObjHitFloor
0001032A 0C41 FFF8                  		cmpi.w	#-8,d1
0001032E 6D00                       		blt.s	Obj50_Pause
00010330 0C41 000C                  		cmpi.w	#$C,d1
00010334 6C00                       		bge.s	Obj50_Pause
00010336 D368 000C                  		add.w	d1,$C(a0)	; match	object's position to the floor
0001033A 6100 FF0A                  		bsr.w	Obj50_ChkWall
0001033E 6600                       		bne.s	Obj50_Pause
00010340 4E75                       		rts	
00010342                            ; ===========================================================================
00010342                            
00010342                            Obj50_Pause:				; XREF: Obj50_FixToFloor
00010342 5528 0025                  		subq.b	#2,$25(a0)
00010346 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
0001034C 317C 0000 0010             		move.w	#0,$10(a0)
00010352 117C 0000 001C             		move.b	#0,$1C(a0)
00010358 4E75                       		rts	
0001035A                            ; ===========================================================================
0001035A                            Ani_obj50:
0001035A                            	include "_anim\obj50.asm"
0001035A                            ; ---------------------------------------------------------------------------
0001035A                            ; Animation script - Yadrin enemy
0001035A                            ; ---------------------------------------------------------------------------
0001035A 0000                       		dc.w byte_F920-Ani_obj50
0001035C 0000                       		dc.w byte_F924-Ani_obj50
0001035E 0700 FF00                  byte_F920:	dc.b 7,	0, $FF,	0
00010362 0700 0301 0400 0302 05FF   byte_F924:	dc.b 7,	0, 3, 1, 4, 0, 3, 2, 5,	$FF
0001036C                            		even
0001036C                            		even
0001036C                            
0001036C                            ; ---------------------------------------------------------------------------
0001036C                            ; Sprite mappings - Yadrin enemy (SYZ)
0001036C                            ; ---------------------------------------------------------------------------
0001036C                            Map_obj50:
0001036C                            	include "_maps\obj50.asm"
0001036C                            Map_ff24:
0001036C 0000                       Map_ff24_0: 	dc.w Map_ff24_C-Map_ff24
0001036E 0000                       Map_ff24_2: 	dc.w Map_ff24_26-Map_ff24
00010370 0000                       Map_ff24_4: 	dc.w Map_ff24_40-Map_ff24
00010372 0000                       Map_ff24_6: 	dc.w Map_ff24_5A-Map_ff24
00010374 0000                       Map_ff24_8: 	dc.w Map_ff24_74-Map_ff24
00010376 0000                       Map_ff24_A: 	dc.w Map_ff24_8E-Map_ff24
00010378 05                         Map_ff24_C: 	dc.b $5
00010379 F408 0000 F4               	dc.b $F4, $8, $0, $0, $F4
0001037E FC0E 0003 EC               	dc.b $FC, $E, $0, $3, $EC
00010383 EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
00010388 F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
0001038D 0409 0031 FC               	dc.b $4, $9, $0, $31, $FC
00010392 05                         Map_ff24_26: 	dc.b $5
00010393 F408 0014 F4               	dc.b $F4, $8, $0, $14, $F4
00010398 FC0E 0017 EC               	dc.b $FC, $E, $0, $17, $EC
0001039D EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
000103A2 F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
000103A7 0409 0031 FC               	dc.b $4, $9, $0, $31, $FC
000103AC 05                         Map_ff24_40: 	dc.b $5
000103AD F409 0023 F4               	dc.b $F4, $9, $0, $23, $F4
000103B2 040D 0029 EC               	dc.b $4, $D, $0, $29, $EC
000103B7 EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
000103BC F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
000103C1 0409 0031 FC               	dc.b $4, $9, $0, $31, $FC
000103C6 05                         Map_ff24_5A: 	dc.b $5
000103C7 F408 0000 F4               	dc.b $F4, $8, $0, $0, $F4
000103CC FC0E 0003 EC               	dc.b $FC, $E, $0, $3, $EC
000103D1 EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
000103D6 F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
000103DB 0409 0037 FC               	dc.b $4, $9, $0, $37, $FC
000103E0 05                         Map_ff24_74: 	dc.b $5
000103E1 F408 0014 F4               	dc.b $F4, $8, $0, $14, $F4
000103E6 FC0E 0017 EC               	dc.b $FC, $E, $0, $17, $EC
000103EB EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
000103F0 F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
000103F5 0409 0037 FC               	dc.b $4, $9, $0, $37, $FC
000103FA 05                         Map_ff24_8E: 	dc.b $5
000103FB F409 0023 F4               	dc.b $F4, $9, $0, $23, $F4
00010400 040D 0029 EC               	dc.b $4, $D, $0, $29, $EC
00010405 EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
0001040A F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
0001040F 0409 0037 FC               	dc.b $4, $9, $0, $37, $FC
00010414                            	even
00010414                            	even
00010414                            
00010414                            ; ---------------------------------------------------------------------------
00010414                            ; Solid	object subroutine (includes spikes, blocks, rocks etc)
00010414                            ;
00010414                            ; variables:
00010414                            ; d1 = width
00010414                            ; d2 = height /	2 (when	jumping)
00010414                            ; d3 = height /	2 (when	walking)
00010414                            ; d4 = x-axis position
00010414                            ; ---------------------------------------------------------------------------
00010414                            
00010414                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00010414                            
00010414                            
00010414                            SolidObject:
00010414 4A28 0025                  		tst.b	$25(a0)
00010418 6700 0000                  		beq.w	loc_FAC8
0001041C 3401                       		move.w	d1,d2
0001041E D442                       		add.w	d2,d2
00010420 43F8 D000                  		lea	($FFFFD000).w,a1
00010424 0829 0001 0022             		btst	#1,$22(a1)
0001042A 6600                       		bne.s	loc_F9FE
0001042C 3029 0008                  		move.w	8(a1),d0
00010430 9068 0008                  		sub.w	8(a0),d0
00010434 D041                       		add.w	d1,d0
00010436 6B00                       		bmi.s	loc_F9FE
00010438 B042                       		cmp.w	d2,d0
0001043A 6500                       		bcs.s	loc_FA12
0001043C                            
0001043C                            loc_F9FE:
0001043C 08A9 0003 0022             		bclr	#3,$22(a1)
00010442 08A8 0003 0022             		bclr	#3,$22(a0)
00010448 4228 0025                  		clr.b	$25(a0)
0001044C 7800                       		moveq	#0,d4
0001044E 4E75                       		rts	
00010450                            ; ===========================================================================
00010450                            
00010450                            loc_FA12:
00010450 3404                       		move.w	d4,d2
00010452 4EB9 0000 8328             		jsr	MvSonicOnPtfm 
00010458 7800                       		moveq	#0,d4
0001045A 4E75                       		rts	
0001045C                            ; ===========================================================================
0001045C                            
0001045C                            SolidObject71:				; XREF: Obj71_Solid
0001045C 4A28 0025                  		tst.b	$25(a0)
00010460 6700 0000                  		beq.w	loc_FAD0
00010464 3401                       		move.w	d1,d2
00010466 D442                       		add.w	d2,d2
00010468 43F8 D000                  		lea	($FFFFD000).w,a1
0001046C 0829 0001 0022             		btst	#1,$22(a1)
00010472 6600                       		bne.s	loc_FA44
00010474 3029 0008                  		move.w	8(a1),d0
00010478 9068 0008                  		sub.w	8(a0),d0
0001047C D041                       		add.w	d1,d0
0001047E 6B00                       		bmi.s	loc_FA44
00010480 B042                       		cmp.w	d2,d0
00010482 6500                       		bcs.s	loc_FA58
00010484                            
00010484                            loc_FA44:
00010484 08A9 0003 0022             		bclr	#3,$22(a1)
0001048A 08A8 0003 0022             		bclr	#3,$22(a0)
00010490 4228 0025                  		clr.b	$25(a0)
00010494 7800                       		moveq	#0,d4
00010496 4E75                       		rts	
00010498                            ; ===========================================================================
00010498                            
00010498                            loc_FA58:
00010498 3404                       		move.w	d4,d2
0001049A                            	;	bsr.w	MvSonicOnPtfm  Causes an error in building (Come back to this)
0001049A 7800                       		moveq	#0,d4
0001049C 4E75                       		rts	
0001049E                            ; ===========================================================================
0001049E                            
0001049E                            SolidObject2F:				; XREF: Obj2F_Solid
0001049E 43F8 D000                  		lea	($FFFFD000).w,a1
000104A2 4A28 0001                  		tst.b	1(a0)
000104A6 6A00 0000                  		bpl.w	loc_FB92
000104AA 3029 0008                  		move.w	8(a1),d0
000104AE 9068 0008                  		sub.w	8(a0),d0
000104B2 D041                       		add.w	d1,d0
000104B4 6B00 0000                  		bmi.w	loc_FB92
000104B8 3601                       		move.w	d1,d3
000104BA D643                       		add.w	d3,d3
000104BC B043                       		cmp.w	d3,d0
000104BE 6200 0000                  		bhi.w	loc_FB92
000104C2 3A00                       		move.w	d0,d5
000104C4 0828 0000 0001             		btst	#0,1(a0)
000104CA 6700                       		beq.s	loc_FA94
000104CC 4645                       		not.w	d5
000104CE DA43                       		add.w	d3,d5
000104D0                            
000104D0                            loc_FA94:
000104D0 E24D                       		lsr.w	#1,d5
000104D2 7600                       		moveq	#0,d3
000104D4 1632 5000                  		move.b	(a2,d5.w),d3
000104D8 9612                       		sub.b	(a2),d3
000104DA 3A28 000C                  		move.w	$C(a0),d5
000104DE 9A43                       		sub.w	d3,d5
000104E0 1629 0016                  		move.b	$16(a1),d3
000104E4 4883                       		ext.w	d3
000104E6 D443                       		add.w	d3,d2
000104E8 3629 000C                  		move.w	$C(a1),d3
000104EC 9645                       		sub.w	d5,d3
000104EE 5843                       		addq.w	#4,d3
000104F0 D642                       		add.w	d2,d3
000104F2 6B00 0000                  		bmi.w	loc_FB92
000104F6 3802                       		move.w	d2,d4
000104F8 D844                       		add.w	d4,d4
000104FA B644                       		cmp.w	d4,d3
000104FC 6400 0000                  		bcc.w	loc_FB92
00010500 6000 0000                  		bra.w	loc_FB0E
00010504                            ; ===========================================================================
00010504                            
00010504                            loc_FAC8:
00010504 4A28 0001                  		tst.b	1(a0)
00010508 6A00 0000                  		bpl.w	loc_FB92
0001050C                            
0001050C                            loc_FAD0:
0001050C 43F8 D000                  		lea	($FFFFD000).w,a1
00010510 3029 0008                  		move.w	8(a1),d0
00010514 9068 0008                  		sub.w	8(a0),d0
00010518 D041                       		add.w	d1,d0
0001051A 6B00 0000                  		bmi.w	loc_FB92
0001051E 3601                       		move.w	d1,d3
00010520 D643                       		add.w	d3,d3
00010522 B043                       		cmp.w	d3,d0
00010524 6200 0000                  		bhi.w	loc_FB92
00010528 1629 0016                  		move.b	$16(a1),d3
0001052C 4883                       		ext.w	d3
0001052E D443                       		add.w	d3,d2
00010530 3629 000C                  		move.w	$C(a1),d3
00010534 9668 000C                  		sub.w	$C(a0),d3
00010538 5843                       		addq.w	#4,d3
0001053A D642                       		add.w	d2,d3
0001053C 6B00 0000                  		bmi.w	loc_FB92
00010540 3802                       		move.w	d2,d4
00010542 D844                       		add.w	d4,d4
00010544 B644                       		cmp.w	d4,d3
00010546 6400 0000                  		bcc.w	loc_FB92
0001054A                            
0001054A                            loc_FB0E:
0001054A 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0001054E 6B00 0000                  		bmi.w	loc_FB92
00010552 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00010558 6400 0000                  		bcc.w	loc_FB92
0001055C 4A78 FE08                  		tst.w	($FFFFFE08).w
00010560 6600 0000                  		bne.w	loc_FBAC
00010564 3A00                       		move.w	d0,d5
00010566 B240                       		cmp.w	d0,d1
00010568 6400                       		bcc.s	loc_FB36
0001056A D241                       		add.w	d1,d1
0001056C 9041                       		sub.w	d1,d0
0001056E 3A00                       		move.w	d0,d5
00010570 4445                       		neg.w	d5
00010572                            
00010572                            loc_FB36:
00010572 3203                       		move.w	d3,d1
00010574 B443                       		cmp.w	d3,d2
00010576 6400                       		bcc.s	loc_FB44
00010578 5943                       		subq.w	#4,d3
0001057A 9644                       		sub.w	d4,d3
0001057C 3203                       		move.w	d3,d1
0001057E 4441                       		neg.w	d1
00010580                            
00010580                            loc_FB44:
00010580 BA41                       		cmp.w	d1,d5
00010582 6200 0000                  		bhi.w	loc_FBB0
00010586 0C41 0004                  		cmpi.w	#4,d1
0001058A 6300                       		bls.s	loc_FB8C
0001058C 4A40                       		tst.w	d0
0001058E 6700                       		beq.s	loc_FB70
00010590 6B00                       		bmi.s	loc_FB5E
00010592 4A69 0010                  		tst.w	$10(a1)
00010596 6B00                       		bmi.s	loc_FB70
00010598 6000                       		bra.s	loc_FB64
0001059A                            ; ===========================================================================
0001059A                            
0001059A                            loc_FB5E:
0001059A 4A69 0010                  		tst.w	$10(a1)
0001059E 6A00                       		bpl.s	loc_FB70
000105A0                            
000105A0                            loc_FB64:
000105A0 337C 0000 0014             		move.w	#0,$14(a1)	; stop Sonic moving
000105A6 337C 0000 0010             		move.w	#0,$10(a1)
000105AC                            
000105AC                            loc_FB70:
000105AC 9169 0008                  		sub.w	d0,8(a1)
000105B0 0829 0001 0022             		btst	#1,$22(a1)
000105B6 6600                       		bne.s	loc_FB8C
000105B8 08E9 0005 0022             		bset	#5,$22(a1)
000105BE 08E8 0005 0022             		bset	#5,$22(a0)
000105C4 7801                       		moveq	#1,d4
000105C6 4E75                       		rts	
000105C8                            ; ===========================================================================
000105C8                            
000105C8                            loc_FB8C:
000105C8 6100                       		bsr.s	loc_FBA0
000105CA 7801                       		moveq	#1,d4
000105CC 4E75                       		rts	
000105CE                            ; ===========================================================================
000105CE                            
000105CE                            loc_FB92:
000105CE 0828 0005 0022             		btst	#5,$22(a0)
000105D4 6700                       		beq.s	loc_FBAC
000105D6 337C 0001 001C             		move.w	#1,$1C(a1)	; use walking animation
000105DC                            
000105DC                            loc_FBA0:
000105DC 08A8 0005 0022             		bclr	#5,$22(a0)
000105E2 08A9 0005 0022             		bclr	#5,$22(a1)
000105E8                            
000105E8                            loc_FBAC:
000105E8 7800                       		moveq	#0,d4
000105EA 4E75                       		rts	
000105EC                            ; ===========================================================================
000105EC                            
000105EC                            loc_FBB0:
000105EC 4A43                       		tst.w	d3
000105EE 6B00                       		bmi.s	loc_FBBC
000105F0 0C43 0010                  		cmpi.w	#$10,d3
000105F4 6500                       		bcs.s	loc_FBEE
000105F6 60D6                       		bra.s	loc_FB92
000105F8                            ; ===========================================================================
000105F8                            
000105F8                            loc_FBBC:
000105F8 4A69 0012                  		tst.w	$12(a1)
000105FC 6700                       		beq.s	loc_FBD6
000105FE 6A00                       		bpl.s	loc_FBD2
00010600 4A43                       		tst.w	d3
00010602 6A00                       		bpl.s	loc_FBD2
00010604 9769 000C                  		sub.w	d3,$C(a1)
00010608 337C 0000 0012             		move.w	#0,$12(a1)	; stop Sonic moving
0001060E                            
0001060E                            loc_FBD2:
0001060E 78FF                       		moveq	#-1,d4
00010610 4E75                       		rts	
00010612                            ; ===========================================================================
00010612                            
00010612                            loc_FBD6:
00010612 0829 0001 0022             		btst	#1,$22(a1)
00010618 66F4                       		bne.s	loc_FBD2
0001061A 2F08                       		move.l	a0,-(sp)
0001061C 2049                       		movea.l	a1,a0
0001061E 4EB9 0000 0000             		jsr	KillSonic
00010624 205F                       		movea.l	(sp)+,a0
00010626 78FF                       		moveq	#-1,d4
00010628 4E75                       		rts	
0001062A                            ; ===========================================================================
0001062A                            
0001062A                            loc_FBEE:
0001062A 5943                       		subq.w	#4,d3
0001062C 7200                       		moveq	#0,d1
0001062E 1228 0019                  		move.b	$19(a0),d1
00010632 3401                       		move.w	d1,d2
00010634 D442                       		add.w	d2,d2
00010636 D269 0008                  		add.w	8(a1),d1
0001063A 9268 0008                  		sub.w	8(a0),d1
0001063E 6B00                       		bmi.s	loc_FC28
00010640 B242                       		cmp.w	d2,d1
00010642 6400                       		bcc.s	loc_FC28
00010644 4A69 0012                  		tst.w	$12(a1)
00010648 6B00                       		bmi.s	loc_FC28
0001064A 9769 000C                  		sub.w	d3,$C(a1)
0001064E 5369 000C                  		subq.w	#1,$C(a1)
00010652 6100                       		bsr.s	sub_FC2C
00010654 117C 0002 0025             		move.b	#2,$25(a0)
0001065A 08E8 0003 0022             		bset	#3,$22(a0)
00010660 78FF                       		moveq	#-1,d4
00010662 4E75                       		rts	
00010664                            ; ===========================================================================
00010664                            
00010664                            loc_FC28:
00010664 7800                       		moveq	#0,d4
00010666 4E75                       		rts	
00010668                            ; End of function SolidObject
00010668                            
00010668                            
00010668                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00010668                            
00010668                            
00010668                            sub_FC2C:				; XREF: SolidObject
00010668 0829 0003 0022             		btst	#3,$22(a1)
0001066E 6700                       		beq.s	loc_FC4E
00010670 7000                       		moveq	#0,d0
00010672 1029 003D                  		move.b	$3D(a1),d0
00010676 ED48                       		lsl.w	#6,d0
00010678 0680 00FF D000             		addi.l	#$FFD000,d0
0001067E 2440                       		movea.l	d0,a2
00010680 08AA 0003 0022             		bclr	#3,$22(a2)
00010686 422A 0025                  		clr.b	$25(a2)
0001068A                            
0001068A                            loc_FC4E:
0001068A 3008                       		move.w	a0,d0
0001068C 0440 D000                  		subi.w	#-$3000,d0
00010690 EC48                       		lsr.w	#6,d0
00010692 0240 007F                  		andi.w	#$7F,d0
00010696 1340 003D                  		move.b	d0,$3D(a1)
0001069A 137C 0000 0026             		move.b	#0,$26(a1)
000106A0 337C 0000 0012             		move.w	#0,$12(a1)
000106A6 3369 0010 0014             		move.w	$10(a1),$14(a1)
000106AC 0829 0001 0022             		btst	#1,$22(a1)
000106B2 6700                       		beq.s	loc_FC84
000106B4 2F08                       		move.l	a0,-(sp)
000106B6 2049                       		movea.l	a1,a0
000106B8 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
000106BE 205F                       		movea.l	(sp)+,a0
000106C0                            
000106C0                            loc_FC84:
000106C0 08E9 0003 0022             		bset	#3,$22(a1)
000106C6 08E8 0003 0022             		bset	#3,$22(a0)
000106CC 4E75                       		rts	
000106CE                            ; End of function sub_FC2C
000106CE                            
000106CE                            ; ===========================================================================
000106CE                            ; ---------------------------------------------------------------------------
000106CE                            ; Object 51 - smashable	green block (MZ)
000106CE                            ; ---------------------------------------------------------------------------
000106CE                            
000106CE                            Obj51:					; XREF: Obj_Index
000106CE 7000                       		moveq	#0,d0
000106D0 1028 0024                  		move.b	$24(a0),d0
000106D4 323B 0000                  		move.w	Obj51_Index(pc,d0.w),d1
000106D8 4EBB 1000                  		jsr	Obj51_Index(pc,d1.w)
000106DC 6000 FA0E                  		bra.w	MarkObjGone
000106E0                            ; ===========================================================================
000106E0 0000                       Obj51_Index:	dc.w Obj51_Main-Obj51_Index
000106E2 0000                       		dc.w Obj51_Solid-Obj51_Index
000106E4 0000                       		dc.w Obj51_Display-Obj51_Index
000106E6                            ; ===========================================================================
000106E6                            
000106E6                            Obj51_Main:				; XREF: Obj51_Index
000106E6 5428 0024                  		addq.b	#2,$24(a0)
000106EA 217C 0000 0000 0004        		move.l	#Map_obj51,4(a0)
000106F2 317C 42B8 0002             		move.w	#$42B8,2(a0)
000106F8 117C 0004 0001             		move.b	#4,1(a0)
000106FE 117C 0010 0019             		move.b	#$10,$19(a0)
00010704 117C 0004 0018             		move.b	#4,$18(a0)
0001070A 1168 0028 001A             		move.b	$28(a0),$1A(a0)
00010710                            
00010710                            Obj51_Solid:				; XREF: Obj51_Index
00010710 3178 F7D0 0034             		move.w	($FFFFF7D0).w,$34(a0)
00010716 1178 D01C 0032             		move.b	($FFFFD01C).w,$32(a0) ;	load Sonic's animation number
0001071C 323C 001B                  		move.w	#$1B,d1
00010720 343C 0010                  		move.w	#$10,d2
00010724 363C 0011                  		move.w	#$11,d3
00010728 3828 0008                  		move.w	8(a0),d4
0001072C 6100 FCE6                  		bsr.w	SolidObject
00010730 0828 0003 0022             		btst	#3,$22(a0)
00010736 6600                       		bne.s	Obj51_Smash
00010738                            
00010738                            locret_FCFC:
00010738 4E75                       		rts	
0001073A                            ; ===========================================================================
0001073A                            
0001073A                            Obj51_Smash:				; XREF: Obj51_Solid
0001073A 0C28 0002 0032             		cmpi.b	#2,$32(a0)	; is Sonic rolling/jumping?
00010740 66F6                       		bne.s	locret_FCFC	; if not, branch
00010742 31E8 0034 F7D0             		move.w	$34(a0),($FFFFF7D0).w
00010748 08E9 0002 0022             		bset	#2,$22(a1)
0001074E 137C 000E 0016             		move.b	#$E,$16(a1)
00010754 137C 0007 0017             		move.b	#7,$17(a1)
0001075A 137C 0002 001C             		move.b	#2,$1C(a1)
00010760 337C FD00 0012             		move.w	#-$300,$12(a1)	; bounce Sonic upwards
00010766 08E9 0001 0022             		bset	#1,$22(a1)
0001076C 08A9 0003 0022             		bclr	#3,$22(a1)
00010772 137C 0002 0024             		move.b	#2,$24(a1)
00010778 08A8 0003 0022             		bclr	#3,$22(a0)
0001077E 4228 0025                  		clr.b	$25(a0)
00010782 117C 0001 001A             		move.b	#1,$1A(a0)
00010788 49F9 0000 0000             		lea	(Obj51_Speeds).l,a4 ; load broken	fragment speed data
0001078E 7203                       		moveq	#3,d1		; set number of	fragments to 4
00010790 343C 0038                  		move.w	#$38,d2
00010794 6100 D456                  		bsr.w	SmashObject
00010798 6100 DD30                  		bsr.w	SingleObjLoad
0001079C 6600                       		bne.s	Obj51_Display
0001079E 12BC 0029                  		move.b	#$29,0(a1)	; load points object
000107A2 3368 0008 0008             		move.w	8(a0),8(a1)
000107A8 3368 000C 000C             		move.w	$C(a0),$C(a1)
000107AE 3438 F7D0                  		move.w	($FFFFF7D0).w,d2
000107B2 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w
000107B6 0C42 0006                  		cmpi.w	#6,d2
000107BA 6500                       		bcs.s	Obj51_Bonus
000107BC 7406                       		moveq	#6,d2
000107BE                            
000107BE                            Obj51_Bonus:
000107BE 7000                       		moveq	#0,d0
000107C0 303B 2000                  		move.w	Obj51_Points(pc,d2.w),d0
000107C4 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 blocks been smashed?
000107CA 6500                       		bcs.s	loc_FD98	; if not, branch
000107CC 303C 03E8                  		move.w	#1000,d0	; give higher points for 16th block
000107D0 740A                       		moveq	#10,d2
000107D2                            
000107D2                            loc_FD98:
000107D2 4EB9 0000 0000             		jsr	AddPoints
000107D8 E24A                       		lsr.w	#1,d2
000107DA 1342 001A                  		move.b	d2,$1A(a1)
000107DE                            
000107DE                            Obj51_Display:				; XREF: Obj51_Index
000107DE 6100 D83E                  		bsr.w	SpeedToPos
000107E2 0668 0038 0012             		addi.w	#$38,$12(a0)
000107E8 6100 D85A                  		bsr.w	DisplaySprite
000107EC 4A28 0001                  		tst.b	1(a0)
000107F0 6A00 D88E                  		bpl.w	DeleteObject
000107F4 4E75                       		rts	
000107F6                            ; ===========================================================================
000107F6 FE00 FE00                  Obj51_Speeds:	dc.w $FE00, $FE00	; x-speed, y-speed
000107FA FF00 FF00                  		dc.w $FF00, $FF00
000107FE 0200 FE00                  		dc.w $200, $FE00
00010802 0100 FF00                  		dc.w $100, $FF00
00010806                            
00010806 000A 0014 0032 0064        Obj51_Points:	dc.w 10, 20, 50, 100
0001080E                            ; ---------------------------------------------------------------------------
0001080E                            ; Sprite mappings - smashable green block (MZ)
0001080E                            ; ---------------------------------------------------------------------------
0001080E                            Map_obj51:
0001080E                            	include "_maps\obj51.asm"
0001080E                            ; ---------------------------------------------------------------------------
0001080E                            ; Sprite mappings - smashable green block (MZ)
0001080E                            ; ---------------------------------------------------------------------------
0001080E 0000                       		dc.w byte_FDD8-Map_obj51
00010810 0000                       		dc.w byte_FDE3-Map_obj51
00010812 02                         byte_FDD8:	dc.b 2
00010813 F00D 0000 F0               		dc.b $F0, $D, 0, 0, $F0
00010818 000D 0000 F0               		dc.b 0,	$D, 0, 0, $F0
0001081D 04                         byte_FDE3:	dc.b 4
0001081E F005 8000 F0               		dc.b $F0, 5, $80, 0, $F0
00010823 0005 8000 F0               		dc.b 0,	5, $80,	0, $F0
00010828 F005 8000 00               		dc.b $F0, 5, $80, 0, 0
0001082D 0005 8000 00               		dc.b 0,	5, $80,	0, 0
00010832                            		even
00010832                            		even
00010832                            
00010832                            ; ===========================================================================
00010832                            ; ---------------------------------------------------------------------------
00010832                            ; Object 52 - moving platform blocks (MZ, LZ, SBZ)
00010832                            ; ---------------------------------------------------------------------------
00010832                            
00010832                            Obj52:					; XREF: Obj_Index
00010832 7000                       		moveq	#0,d0
00010834 1028 0024                  		move.b	$24(a0),d0
00010838 323B 0000                  		move.w	Obj52_Index(pc,d0.w),d1
0001083C 4EFB 1000                  		jmp	Obj52_Index(pc,d1.w)
00010840                            ; ===========================================================================
00010840 0000                       Obj52_Index:	dc.w Obj52_Main-Obj52_Index
00010842 0000                       		dc.w Obj52_Platform-Obj52_Index
00010844 0000                       		dc.w Obj52_StandOn-Obj52_Index
00010846                            
00010846 1000                       Obj52_Var:	dc.b $10, 0		; object width,	frame number
00010848 2001                       		dc.b $20, 1
0001084A 2002                       		dc.b $20, 2
0001084C 4003                       		dc.b $40, 3
0001084E 3004                       		dc.b $30, 4
00010850                            ; ===========================================================================
00010850                            
00010850                            Obj52_Main:				; XREF: Obj52_Index
00010850 5428 0024                  		addq.b	#2,$24(a0)
00010854 217C 0000 0000 0004        		move.l	#Map_obj52,4(a0)
0001085C 317C 42B8 0002             		move.w	#$42B8,2(a0)
00010862 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010868 6600                       		bne.s	loc_FE44
0001086A 217C 0000 0000 0004        		move.l	#Map_obj52a,4(a0) ; LZ specific	code
00010872 317C 43BC 0002             		move.w	#$43BC,2(a0)
00010878 117C 0007 0016             		move.b	#7,$16(a0)
0001087E                            
0001087E                            loc_FE44:
0001087E 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00010884 6600                       		bne.s	loc_FE60
00010886 317C 22C0 0002             		move.w	#$22C0,2(a0)	; SBZ specific code (object 5228)
0001088C 0C28 0028 0028             		cmpi.b	#$28,$28(a0)	; is object 5228 ?
00010892 6700                       		beq.s	loc_FE60	; if yes, branch
00010894 317C 4460 0002             		move.w	#$4460,2(a0)	; SBZ specific code (object 523x)
0001089A                            
0001089A                            loc_FE60:
0001089A 117C 0004 0001             		move.b	#4,1(a0)
000108A0 7000                       		moveq	#0,d0
000108A2 1028 0028                  		move.b	$28(a0),d0
000108A6 E648                       		lsr.w	#3,d0
000108A8 0240 001E                  		andi.w	#$1E,d0
000108AC 45FB 0098                  		lea	Obj52_Var(pc,d0.w),a2
000108B0 115A 0019                  		move.b	(a2)+,$19(a0)
000108B4 115A 001A                  		move.b	(a2)+,$1A(a0)
000108B8 117C 0004 0018             		move.b	#4,$18(a0)
000108BE 3168 0008 0030             		move.w	8(a0),$30(a0)
000108C4 3168 000C 0032             		move.w	$C(a0),$32(a0)
000108CA 0228 000F 0028             		andi.b	#$F,$28(a0)
000108D0                            
000108D0                            Obj52_Platform:				; XREF: Obj52_Index
000108D0 6100 0000                  		bsr.w	Obj52_Move
000108D4 7200                       		moveq	#0,d1
000108D6 1228 0019                  		move.b	$19(a0),d1
000108DA 4EB9 0000 7C56             		jsr	(PlatformObject).l
000108E0 6000                       		bra.s	Obj52_ChkDel
000108E2                            ; ===========================================================================
000108E2                            
000108E2                            Obj52_StandOn:				; XREF: Obj52_Index
000108E2 7200                       		moveq	#0,d1
000108E4 1228 0019                  		move.b	$19(a0),d1
000108E8 4EB9 0000 7DCA             		jsr	(ExitPlatform).l
000108EE 3F28 0008                  		move.w	8(a0),-(sp)
000108F2 6100 0000                  		bsr.w	Obj52_Move
000108F6 341F                       		move.w	(sp)+,d2
000108F8 4EB9 0000 8334             		jsr	(MvSonicOnPtfm2).l
000108FE                            
000108FE                            Obj52_ChkDel:				; XREF: Obj52_Platform
000108FE 3028 0030                  		move.w	$30(a0),d0
00010902 0240 FF80                  		andi.w	#$FF80,d0
00010906 3238 F700                  		move.w	($FFFFF700).w,d1
0001090A 0441 0080                  		subi.w	#$80,d1
0001090E 0241 FF80                  		andi.w	#$FF80,d1
00010912 9041                       		sub.w	d1,d0
00010914 0C40 0280                  		cmpi.w	#$280,d0
00010918 6200 D766                  		bhi.w	DeleteObject
0001091C 6000 D726                  		bra.w	DisplaySprite
00010920                            ; ===========================================================================
00010920                            
00010920                            Obj52_Move:				; XREF: Obj52_Platform; Obj52_StandOn
00010920 7000                       		moveq	#0,d0
00010922 1028 0028                  		move.b	$28(a0),d0
00010926 0240 000F                  		andi.w	#$F,d0
0001092A D040                       		add.w	d0,d0
0001092C 323B 0000                  		move.w	Obj52_TypeIndex(pc,d0.w),d1
00010930 4EFB 1000                  		jmp	Obj52_TypeIndex(pc,d1.w)
00010934                            ; ===========================================================================
00010934 0000 0000                  Obj52_TypeIndex:dc.w Obj52_Type00-Obj52_TypeIndex, Obj52_Type01-Obj52_TypeIndex
00010938 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type03-Obj52_TypeIndex
0001093C 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type05-Obj52_TypeIndex
00010940 0000 0000                  		dc.w Obj52_Type06-Obj52_TypeIndex, Obj52_Type07-Obj52_TypeIndex
00010944 0000 0000                  		dc.w Obj52_Type08-Obj52_TypeIndex, Obj52_Type02-Obj52_TypeIndex
00010948 0000                       		dc.w Obj52_Type0A-Obj52_TypeIndex
0001094A                            ; ===========================================================================
0001094A                            
0001094A                            Obj52_Type00:				; XREF: Obj52_TypeIndex
0001094A 4E75                       		rts	
0001094C                            ; ===========================================================================
0001094C                            
0001094C                            Obj52_Type01:				; XREF: Obj52_TypeIndex
0001094C 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00010950 323C 0060                  		move.w	#$60,d1
00010954 0828 0000 0022             		btst	#0,$22(a0)
0001095A 6700                       		beq.s	loc_FF26
0001095C 4440                       		neg.w	d0
0001095E D041                       		add.w	d1,d0
00010960                            
00010960                            loc_FF26:
00010960 3228 0030                  		move.w	$30(a0),d1
00010964 9240                       		sub.w	d0,d1
00010966 3141 0008                  		move.w	d1,8(a0)
0001096A 4E75                       		rts	
0001096C                            ; ===========================================================================
0001096C                            
0001096C                            Obj52_Type02:				; XREF: Obj52_TypeIndex
0001096C 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; is Sonic standing on the platform?
00010972 6600                       		bne.s	Obj52_02_Wait
00010974 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
00010978                            
00010978                            Obj52_02_Wait:
00010978 4E75                       		rts	
0001097A                            ; ===========================================================================
0001097A                            
0001097A                            Obj52_Type03:				; XREF: Obj52_TypeIndex
0001097A 7600                       		moveq	#0,d3
0001097C 1628 0019                  		move.b	$19(a0),d3
00010980 6100 0000                  		bsr.w	ObjHitWallRight
00010984 4A41                       		tst.w	d1		; has the platform hit a wall?
00010986 6B00                       		bmi.s	Obj52_03_End	; if yes, branch
00010988 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
0001098C 3168 0008 0030             		move.w	8(a0),$30(a0)
00010992 4E75                       		rts	
00010994                            ; ===========================================================================
00010994                            
00010994                            Obj52_03_End:
00010994 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving	type)
00010998 4E75                       		rts	
0001099A                            ; ===========================================================================
0001099A                            
0001099A                            Obj52_Type05:				; XREF: Obj52_TypeIndex
0001099A 7600                       		moveq	#0,d3
0001099C 1628 0019                  		move.b	$19(a0),d3
000109A0 6100 0000                  		bsr.w	ObjHitWallRight
000109A4 4A41                       		tst.w	d1		; has the platform hit a wall?
000109A6 6B00                       		bmi.s	Obj52_05_End	; if yes, branch
000109A8 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
000109AC 3168 0008 0030             		move.w	8(a0),$30(a0)
000109B2 4E75                       		rts	
000109B4                            ; ===========================================================================
000109B4                            
000109B4                            Obj52_05_End:
000109B4 5228 0028                  		addq.b	#1,$28(a0)	; change to type 06 (falling)
000109B8 4E75                       		rts	
000109BA                            ; ===========================================================================
000109BA                            
000109BA                            Obj52_Type06:				; XREF: Obj52_TypeIndex
000109BA 6100 D662                  		bsr.w	SpeedToPos
000109BE 0668 0018 0012             		addi.w	#$18,$12(a0)	; make the platform fall
000109C4 6100 0000                  		bsr.w	ObjHitFloor
000109C8 4A41                       		tst.w	d1		; has platform hit the floor?
000109CA 6A00 0000                  		bpl.w	locret_FFA0	; if not, branch
000109CE D368 000C                  		add.w	d1,$C(a0)
000109D2 4268 0012                  		clr.w	$12(a0)		; stop platform	falling
000109D6 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving)
000109DA                            
000109DA                            locret_FFA0:
000109DA 4E75                       		rts	
000109DC                            ; ===========================================================================
000109DC                            
000109DC                            Obj52_Type07:				; XREF: Obj52_TypeIndex
000109DC 4A38 F7E2                  		tst.b	($FFFFF7E2).w	; has switch number 02 been pressed?
000109E0 6700                       		beq.s	Obj52_07_ChkDel
000109E2 5728 0028                  		subq.b	#3,$28(a0)	; if yes, change object	type to	04
000109E6                            
000109E6                            Obj52_07_ChkDel:
000109E6 588F                       		addq.l	#4,sp
000109E8 3028 0030                  		move.w	$30(a0),d0
000109EC 0240 FF80                  		andi.w	#$FF80,d0
000109F0 3238 F700                  		move.w	($FFFFF700).w,d1
000109F4 0441 0080                  		subi.w	#$80,d1
000109F8 0241 FF80                  		andi.w	#$FF80,d1
000109FC 9041                       		sub.w	d1,d0
000109FE 0C40 0280                  		cmpi.w	#$280,d0
00010A02 6200 D67C                  		bhi.w	DeleteObject
00010A06 4E75                       		rts	
00010A08                            ; ===========================================================================
00010A08                            
00010A08                            Obj52_Type08:				; XREF: Obj52_TypeIndex
00010A08 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00010A0C 323C 0080                  		move.w	#$80,d1
00010A10 0828 0000 0022             		btst	#0,$22(a0)
00010A16 6700                       		beq.s	loc_FFE2
00010A18 4440                       		neg.w	d0
00010A1A D041                       		add.w	d1,d0
00010A1C                            
00010A1C                            loc_FFE2:
00010A1C 3228 0032                  		move.w	$32(a0),d1
00010A20 9240                       		sub.w	d0,d1
00010A22 3141 000C                  		move.w	d1,$C(a0)
00010A26 4E75                       		rts	
00010A28                            ; ===========================================================================
00010A28                            
00010A28                            Obj52_Type0A:				; XREF: Obj52_TypeIndex
00010A28 7600                       		moveq	#0,d3
00010A2A 1628 0019                  		move.b	$19(a0),d3
00010A2E D643                       		add.w	d3,d3
00010A30 7208                       		moveq	#8,d1
00010A32 0828 0000 0022             		btst	#0,$22(a0)
00010A38 6700                       		beq.s	loc_10004
00010A3A 4441                       		neg.w	d1
00010A3C 4443                       		neg.w	d3
00010A3E                            
00010A3E                            loc_10004:
00010A3E 4A68 0036                  		tst.w	$36(a0)		; is platform set to move back?
00010A42 6600                       		bne.s	Obj52_0A_Back	; if yes, branch
00010A44 3028 0008                  		move.w	8(a0),d0
00010A48 9068 0030                  		sub.w	$30(a0),d0
00010A4C B043                       		cmp.w	d3,d0
00010A4E 6700                       		beq.s	Obj52_0A_Wait
00010A50 D368 0008                  		add.w	d1,8(a0)	; move platform
00010A54 317C 012C 0034             		move.w	#300,$34(a0)	; set time delay to 5 seconds
00010A5A 4E75                       		rts	
00010A5C                            ; ===========================================================================
00010A5C                            
00010A5C                            Obj52_0A_Wait:
00010A5C 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time delay
00010A60 6600                       		bne.s	locret_1002E	; if time remains, branch
00010A62 317C 0001 0036             		move.w	#1,$36(a0)	; set platform to move back to its original position
00010A68                            
00010A68                            locret_1002E:
00010A68 4E75                       		rts	
00010A6A                            ; ===========================================================================
00010A6A                            
00010A6A                            Obj52_0A_Back:
00010A6A 3028 0008                  		move.w	8(a0),d0
00010A6E 9068 0030                  		sub.w	$30(a0),d0
00010A72 6700                       		beq.s	Obj52_0A_Reset
00010A74 9368 0008                  		sub.w	d1,8(a0)	; return platform to its original position
00010A78 4E75                       		rts	
00010A7A                            ; ===========================================================================
00010A7A                            
00010A7A                            Obj52_0A_Reset:
00010A7A 4268 0036                  		clr.w	$36(a0)
00010A7E 5328 0028                  		subq.b	#1,$28(a0)
00010A82 4E75                       		rts	
00010A84                            ; ===========================================================================
00010A84                            ; ---------------------------------------------------------------------------
00010A84                            ; Sprite mappings - moving blocks (MZ, SBZ)
00010A84                            ; ---------------------------------------------------------------------------
00010A84                            Map_obj52:
00010A84                            	include "_maps\obj52mz.asm"
00010A84                            ; ---------------------------------------------------------------------------
00010A84                            ; Sprite mappings - moving blocks (MZ, SBZ)
00010A84                            ; ---------------------------------------------------------------------------
00010A84 0000 0000                  		dc.w byte_10054-Map_obj52, byte_1005A-Map_obj52
00010A88 0000 0000                  		dc.w byte_10065-Map_obj52, byte_1007A-Map_obj52
00010A8C 0000                       		dc.w byte_1008F-Map_obj52
00010A8E 01                         byte_10054:	dc.b 1
00010A8F F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
00010A94 02                         byte_1005A:	dc.b 2
00010A95 F80F 0008 E0               		dc.b $F8, $F, 0, 8, $E0
00010A9A F80F 0008 00               		dc.b $F8, $F, 0, 8, 0
00010A9F 04                         byte_10065:	dc.b 4
00010AA0 F80C 2000 E0               		dc.b $F8, $C, $20, 0, $E0
00010AA5 000D 0004 E0               		dc.b 0,	$D, 0, 4, $E0
00010AAA F80C 2000 00               		dc.b $F8, $C, $20, 0, 0
00010AAF 000D 0004 00               		dc.b 0,	$D, 0, 4, 0
00010AB4 04                         byte_1007A:	dc.b 4
00010AB5 F80E 0000 C0               		dc.b $F8, $E, 0, 0, $C0
00010ABA F80E 0003 E0               		dc.b $F8, $E, 0, 3, $E0
00010ABF F80E 0003 00               		dc.b $F8, $E, 0, 3, 0
00010AC4 F80E 0800 20               		dc.b $F8, $E, 8, 0, $20
00010AC9 03                         byte_1008F:	dc.b 3
00010ACA F80F 0008 D0               		dc.b $F8, $F, 0, 8, $D0
00010ACF F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
00010AD4 F80F 0008 10               		dc.b $F8, $F, 0, 8, $10
00010ADA 00                         		even
00010ADA 00                         		even
00010ADA                            
00010ADA                            ; ---------------------------------------------------------------------------
00010ADA                            ; Sprite mappings - moving block (LZ)
00010ADA                            ; ---------------------------------------------------------------------------
00010ADA                            Map_obj52a:
00010ADA                            	include "_maps\obj52lz.asm"
00010ADA                            ; ---------------------------------------------------------------------------
00010ADA                            ; Sprite mappings - moving block (LZ)
00010ADA                            ; ---------------------------------------------------------------------------
00010ADA 0000                       		dc.w byte_100A2-Map_obj52a
00010ADC 01                         byte_100A2:	dc.b 1
00010ADD F80D 0000 F0               		dc.b $F8, $D, 0, 0, $F0
00010AE2                            		even
00010AE2                            		even
00010AE2                            
00010AE2                            ; ===========================================================================
00010AE2                            ; ---------------------------------------------------------------------------
00010AE2                            ; Object 55 - Basaran enemy (MZ)
00010AE2                            ; ---------------------------------------------------------------------------
00010AE2                            
00010AE2                            Obj55:					; XREF: Obj_Index
00010AE2 7000                       		moveq	#0,d0
00010AE4 1028 0024                  		move.b	$24(a0),d0
00010AE8 323B 0000                  		move.w	Obj55_Index(pc,d0.w),d1
00010AEC 4EFB 1000                  		jmp	Obj55_Index(pc,d1.w)
00010AF0                            ; ===========================================================================
00010AF0 0000                       Obj55_Index:	dc.w Obj55_Main-Obj55_Index
00010AF2 0000                       		dc.w Obj55_Action-Obj55_Index
00010AF4                            ; ===========================================================================
00010AF4                            
00010AF4                            Obj55_Main:				; XREF: Obj55_Index
00010AF4 5428 0024                  		addq.b	#2,$24(a0)
00010AF8 217C 0000 0000 0004        		move.l	#Map_obj55,4(a0)
00010B00 317C 84B8 0002             		move.w	#$84B8,2(a0)
00010B06 117C 0004 0001             		move.b	#4,1(a0)
00010B0C 117C 000C 0016             		move.b	#$C,$16(a0)
00010B12 117C 0002 0018             		move.b	#2,$18(a0)
00010B18 117C 000B 0020             		move.b	#$B,$20(a0)
00010B1E 117C 0010 0019             		move.b	#$10,$19(a0)
00010B24                            
00010B24                            Obj55_Action:				; XREF: Obj55_Index
00010B24 7000                       		moveq	#0,d0
00010B26 1028 0025                  		move.b	$25(a0),d0
00010B2A 323B 0000                  		move.w	Obj55_Index2(pc,d0.w),d1
00010B2E 4EBB 1000                  		jsr	Obj55_Index2(pc,d1.w)
00010B32 43F9 0000 0000             		lea	(Ani_obj55).l,a1
00010B38 6100 A560                  		bsr.w	AnimateSprite
00010B3C 6000 F5AE                  		bra.w	MarkObjGone
00010B40                            ; ===========================================================================
00010B40 0000                       Obj55_Index2:	dc.w Obj55_ChkDrop-Obj55_Index2
00010B42 0000                       		dc.w Obj55_DropFly-Obj55_Index2
00010B44 0000                       		dc.w Obj55_PlaySnd-Obj55_Index2
00010B46 0000                       		dc.w Obj55_FlyUp-Obj55_Index2
00010B48                            ; ===========================================================================
00010B48                            
00010B48                            Obj55_ChkDrop:				; XREF: Obj55_Index2
00010B48 343C 0080                  		move.w	#$80,d2
00010B4C 6100 0000                  		bsr.w	Obj55_ChkSonic
00010B50 6400                       		bcc.s	Obj55_NoDrop
00010B52 3038 D00C                  		move.w	($FFFFD00C).w,d0
00010B56 3140 0036                  		move.w	d0,$36(a0)
00010B5A 9068 000C                  		sub.w	$C(a0),d0
00010B5E 6500                       		bcs.s	Obj55_NoDrop
00010B60 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	basaran?
00010B64 6400                       		bcc.s	Obj55_NoDrop	; if not, branch
00010B66 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
00010B6A 6600                       		bne.s	Obj55_NoDrop	; if yes, branch
00010B6C 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00010B70 D007                       		add.b	d7,d0
00010B72 0200 0007                  		andi.b	#7,d0
00010B76 6600                       		bne.s	Obj55_NoDrop
00010B78 117C 0001 001C             		move.b	#1,$1C(a0)
00010B7E 5428 0025                  		addq.b	#2,$25(a0)
00010B82                            
00010B82                            Obj55_NoDrop:
00010B82 4E75                       		rts	
00010B84                            ; ===========================================================================
00010B84                            
00010B84                            Obj55_DropFly:				; XREF: Obj55_Index2
00010B84 6100 D498                  		bsr.w	SpeedToPos
00010B88 0668 0018 0012             		addi.w	#$18,$12(a0)	; make basaran fall
00010B8E 343C 0080                  		move.w	#$80,d2
00010B92 6100 0000                  		bsr.w	Obj55_ChkSonic
00010B96 3028 0036                  		move.w	$36(a0),d0
00010B9A 9068 000C                  		sub.w	$C(a0),d0
00010B9E 6500                       		bcs.s	Obj55_ChkDel
00010BA0 0C40 0010                  		cmpi.w	#$10,d0
00010BA4 6400                       		bcc.s	locret_10180
00010BA6 3141 0010                  		move.w	d1,$10(a0)	; make basaran fly horizontally
00010BAA 317C 0000 0012             		move.w	#0,$12(a0)	; stop basaran falling
00010BB0 117C 0002 001C             		move.b	#2,$1C(a0)
00010BB6 5428 0025                  		addq.b	#2,$25(a0)
00010BBA                            
00010BBA                            locret_10180:
00010BBA 4E75                       		rts	
00010BBC                            ; ===========================================================================
00010BBC                            
00010BBC                            Obj55_ChkDel:				; XREF: Obj55_DropFly
00010BBC 4A28 0001                  		tst.b	1(a0)
00010BC0 6A00 D4BE                  		bpl.w	DeleteObject
00010BC4 4E75                       		rts	
00010BC6                            ; ===========================================================================
00010BC6                            
00010BC6                            Obj55_PlaySnd:				; XREF: Obj55_Index2
00010BC6 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00010BCA 0200 000F                  		andi.b	#$F,d0
00010BCE 6600                       		bne.s	loc_101A0
00010BD0 303C 00C0                  		move.w	#$C0,d0
00010BD4 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play flapping sound
00010BDA                            
00010BDA                            loc_101A0:
00010BDA 6100 D442                  		bsr.w	SpeedToPos
00010BDE 3038 D008                  		move.w	($FFFFD008).w,d0
00010BE2 9068 0008                  		sub.w	8(a0),d0
00010BE6 6400                       		bcc.s	loc_101B0
00010BE8 4440                       		neg.w	d0
00010BEA                            
00010BEA                            loc_101B0:
00010BEA 0C40 0080                  		cmpi.w	#$80,d0
00010BEE 6500                       		bcs.s	locret_101C6
00010BF0 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00010BF4 D007                       		add.b	d7,d0
00010BF6 0200 0007                  		andi.b	#7,d0
00010BFA 6600                       		bne.s	locret_101C6
00010BFC 5428 0025                  		addq.b	#2,$25(a0)
00010C00                            
00010C00                            locret_101C6:
00010C00 4E75                       		rts	
00010C02                            ; ===========================================================================
00010C02                            
00010C02                            Obj55_FlyUp:				; XREF: Obj55_Index2
00010C02 6100 D41A                  		bsr.w	SpeedToPos
00010C06 0468 0018 0012             		subi.w	#$18,$12(a0)	; make basaran fly upwards
00010C0C 6100 0000                  		bsr.w	ObjHitCeiling
00010C10 4A41                       		tst.w	d1		; has basaran hit the ceiling?
00010C12 6A00                       		bpl.s	locret_101F4	; if not, branch
00010C14 9368 000C                  		sub.w	d1,$C(a0)
00010C18 0268 FFF8 0008             		andi.w	#$FFF8,8(a0)
00010C1E 4268 0010                  		clr.w	$10(a0)		; stop basaran moving
00010C22 4268 0012                  		clr.w	$12(a0)
00010C26 4228 001C                  		clr.b	$1C(a0)
00010C2A 4228 0025                  		clr.b	$25(a0)
00010C2E                            
00010C2E                            locret_101F4:
00010C2E 4E75                       		rts	
00010C30                            ; ===========================================================================
00010C30                            
00010C30                            Obj55_ChkSonic:				; XREF: Obj55_ChkDrop
00010C30 323C 0100                  		move.w	#$100,d1
00010C34 08E8 0000 0022             		bset	#0,$22(a0)
00010C3A 3038 D008                  		move.w	($FFFFD008).w,d0
00010C3E 9068 0008                  		sub.w	8(a0),d0
00010C42 6400                       		bcc.s	loc_10214
00010C44 4440                       		neg.w	d0
00010C46 4441                       		neg.w	d1
00010C48 08A8 0000 0022             		bclr	#0,$22(a0)
00010C4E                            
00010C4E                            loc_10214:
00010C4E B042                       		cmp.w	d2,d0
00010C50 4E75                       		rts	
00010C52                            ; ===========================================================================
00010C52 6100 D3CA                  		bsr.w	SpeedToPos
00010C56 6100 D3EC                  		bsr.w	DisplaySprite
00010C5A 4A28 0001                  		tst.b	1(a0)
00010C5E 6A00 D420                  		bpl.w	DeleteObject
00010C62 4E75                       		rts	
00010C64                            ; ===========================================================================
00010C64                            Ani_obj55:
00010C64                            	include "_anim\obj55.asm"
00010C64                            ; ---------------------------------------------------------------------------
00010C64                            ; Animation script - Basaran enemy
00010C64                            ; ---------------------------------------------------------------------------
00010C64 0000                       		dc.w byte_10230-Ani_obj55
00010C66 0000                       		dc.w byte_10234-Ani_obj55
00010C68 0000                       		dc.w byte_10238-Ani_obj55
00010C6A 0F00 FF00                  byte_10230:	dc.b $F, 0, $FF, 0
00010C6E 0F01 FF00                  byte_10234:	dc.b $F, 1, $FF, 0
00010C72 0301 0203 02FF             byte_10238:	dc.b 3,	1, 2, 3, 2, $FF
00010C78                            		even
00010C78                            		even
00010C78                            
00010C78                            ; ---------------------------------------------------------------------------
00010C78                            ; Sprite mappings - Basaran enemy (MZ)
00010C78                            ; ---------------------------------------------------------------------------
00010C78                            Map_obj55:
00010C78                            	include "_maps\obj55.asm"
00010C78                            ; ---------------------------------------------------------------------------
00010C78                            ; Sprite mappings - Basaran enemy (MZ)
00010C78                            ; ---------------------------------------------------------------------------
00010C78 0000 0000                  		dc.w byte_10246-Map_obj55, byte_1024C-Map_obj55
00010C7C 0000 0000                  		dc.w byte_1025C-Map_obj55, byte_10271-Map_obj55
00010C80 01                         byte_10246:	dc.b 1
00010C81 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00010C86 03                         byte_1024C:	dc.b 3
00010C87 F20E 0006 F4               		dc.b $F2, $E, 0, 6, $F4
00010C8C 0A04 0012 FC               		dc.b $A, 4, 0, $12, $FC
00010C91 0200 0027 0C               		dc.b 2,	0, 0, $27, $C
00010C96 04                         byte_1025C:	dc.b 4
00010C97 F804 0014 F8               		dc.b $F8, 4, 0,	$14, $F8
00010C9C 000C 0016 F0               		dc.b 0,	$C, 0, $16, $F0
00010CA1 0804 001A 00               		dc.b 8,	4, 0, $1A, 0
00010CA6 0000 0028 0C               		dc.b 0,	0, 0, $28, $C
00010CAB 04                         byte_10271:	dc.b 4
00010CAC F609 001C F5               		dc.b $F6, 9, 0,	$1C, $F5
00010CB1 0608 0022 F4               		dc.b 6,	8, 0, $22, $F4
00010CB6 0E04 0025 F4               		dc.b $E, 4, 0, $25, $F4
00010CBB FE00 0027 0C               		dc.b $FE, 0, 0,	$27, $C
00010CC0                            		even
00010CC0                            		even
00010CC0                            
00010CC0                            ; ===========================================================================
00010CC0                            ; ---------------------------------------------------------------------------
00010CC0                            ; Object 56 - moving blocks (SYZ/SLZ), large doors (LZ)
00010CC0                            ; ---------------------------------------------------------------------------
00010CC0                            
00010CC0                            Obj56:					; XREF: Obj_Index
00010CC0 7000                       		moveq	#0,d0
00010CC2 1028 0024                  		move.b	$24(a0),d0
00010CC6 323B 0000                  		move.w	Obj56_Index(pc,d0.w),d1
00010CCA 4EFB 1000                  		jmp	Obj56_Index(pc,d1.w)
00010CCE                            ; ===========================================================================
00010CCE 0000                       Obj56_Index:	dc.w Obj56_Main-Obj56_Index
00010CD0 0000                       		dc.w Obj56_Action-Obj56_Index
00010CD2                            
00010CD2 1010                       Obj56_Var:	dc.b  $10, $10		; width, height
00010CD4 2020                       		dc.b  $20, $20
00010CD6 1020                       		dc.b  $10, $20
00010CD8 201A                       		dc.b  $20, $1A
00010CDA 1027                       		dc.b  $10, $27
00010CDC 1010                       		dc.b  $10, $10
00010CDE 0820                       		dc.b	8, $20
00010CE0 4010                       		dc.b  $40, $10
00010CE2                            ; ===========================================================================
00010CE2                            
00010CE2                            Obj56_Main:				; XREF: Obj56_Index
00010CE2 5428 0024                  		addq.b	#2,$24(a0)
00010CE6 217C 0000 0000 0004        		move.l	#Map_obj56,4(a0)
00010CEE 317C 4000 0002             		move.w	#$4000,2(a0)
00010CF4 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010CFA 6600                       		bne.s	loc_102C8
00010CFC 317C 43C4 0002             		move.w	#$43C4,2(a0)	; LZ specific code
00010D02                            
00010D02                            loc_102C8:
00010D02 117C 0004 0001             		move.b	#4,1(a0)
00010D08 117C 0003 0018             		move.b	#3,$18(a0)
00010D0E 7000                       		moveq	#0,d0
00010D10 1028 0028                  		move.b	$28(a0),d0
00010D14 E648                       		lsr.w	#3,d0
00010D16 0240 000E                  		andi.w	#$E,d0
00010D1A 45FB 00B6                  		lea	Obj56_Var(pc,d0.w),a2
00010D1E 115A 0019                  		move.b	(a2)+,$19(a0)
00010D22 1152 0016                  		move.b	(a2),$16(a0)
00010D26 E248                       		lsr.w	#1,d0
00010D28 1140 001A                  		move.b	d0,$1A(a0)
00010D2C 3168 0008 0034             		move.w	8(a0),$34(a0)
00010D32 3168 000C 0030             		move.w	$C(a0),$30(a0)
00010D38 7000                       		moveq	#0,d0
00010D3A 1012                       		move.b	(a2),d0
00010D3C D040                       		add.w	d0,d0
00010D3E 3140 003A                  		move.w	d0,$3A(a0)
00010D42 7000                       		moveq	#0,d0
00010D44 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010D4A 6700                       		beq.s	loc_10332
00010D4C 1028 0028                  		move.b	$28(a0),d0	; SYZ/SLZ specific code
00010D50 0240 000F                  		andi.w	#$F,d0
00010D54 5140                       		subq.w	#8,d0
00010D56 6500                       		bcs.s	loc_10332
00010D58 E548                       		lsl.w	#2,d0
00010D5A 45F8 FE8A                  		lea	($FFFFFE8A).w,a2
00010D5E 45F2 0000                  		lea	(a2,d0.w),a2
00010D62 4A52                       		tst.w	(a2)
00010D64 6A00                       		bpl.s	loc_10332
00010D66 0868 0000 0022             		bchg	#0,$22(a0)
00010D6C                            
00010D6C                            loc_10332:
00010D6C 1028 0028                  		move.b	$28(a0),d0
00010D70 6A00                       		bpl.s	Obj56_Action
00010D72 0200 000F                  		andi.b	#$F,d0
00010D76 1140 003C                  		move.b	d0,$3C(a0)
00010D7A 117C 0005 0028             		move.b	#5,$28(a0)
00010D80 0C28 0007 001A             		cmpi.b	#7,$1A(a0)
00010D86 6600                       		bne.s	Obj56_ChkGone
00010D88 117C 000C 0028             		move.b	#$C,$28(a0)
00010D8E 317C 0080 003A             		move.w	#$80,$3A(a0)
00010D94                            
00010D94                            Obj56_ChkGone:
00010D94 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010D98 7000                       		moveq	#0,d0
00010D9A 1028 0023                  		move.b	$23(a0),d0
00010D9E 6700                       		beq.s	Obj56_Action
00010DA0 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00010DA6 0832 0000 0002             		btst	#0,2(a2,d0.w)
00010DAC 6700                       		beq.s	Obj56_Action
00010DAE 5228 0028                  		addq.b	#1,$28(a0)
00010DB2 4268 003A                  		clr.w	$3A(a0)
00010DB6                            
00010DB6                            Obj56_Action:				; XREF: Obj56_Index
00010DB6 3F28 0008                  		move.w	8(a0),-(sp)
00010DBA 7000                       		moveq	#0,d0
00010DBC 1028 0028                  		move.b	$28(a0),d0	; get object type
00010DC0 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00010DC4 D040                       		add.w	d0,d0
00010DC6 323B 0000                  		move.w	Obj56_TypeIndex(pc,d0.w),d1
00010DCA 4EBB 1000                  		jsr	Obj56_TypeIndex(pc,d1.w)
00010DCE 381F                       		move.w	(sp)+,d4
00010DD0 4A28 0001                  		tst.b	1(a0)
00010DD4 6A00                       		bpl.s	Obj56_ChkDel
00010DD6 7200                       		moveq	#0,d1
00010DD8 1228 0019                  		move.b	$19(a0),d1
00010DDC 0641 000B                  		addi.w	#$B,d1
00010DE0 7400                       		moveq	#0,d2
00010DE2 1428 0016                  		move.b	$16(a0),d2
00010DE6 3602                       		move.w	d2,d3
00010DE8 5243                       		addq.w	#1,d3
00010DEA 6100 F628                  		bsr.w	SolidObject
00010DEE                            
00010DEE                            Obj56_ChkDel:
00010DEE 3028 0034                  		move.w	$34(a0),d0
00010DF2 0240 FF80                  		andi.w	#$FF80,d0
00010DF6 3238 F700                  		move.w	($FFFFF700).w,d1
00010DFA 0441 0080                  		subi.w	#$80,d1
00010DFE 0241 FF80                  		andi.w	#$FF80,d1
00010E02 9041                       		sub.w	d1,d0
00010E04 0C40 0280                  		cmpi.w	#$280,d0
00010E08 6200 D276                  		bhi.w	DeleteObject
00010E0C 6000 D236                  		bra.w	DisplaySprite
00010E10                            ; ===========================================================================
00010E10 0000 0000                  Obj56_TypeIndex:dc.w Obj56_Type00-Obj56_TypeIndex, Obj56_Type01-Obj56_TypeIndex
00010E14 0000 0000                  		dc.w Obj56_Type02-Obj56_TypeIndex, Obj56_Type03-Obj56_TypeIndex
00010E18 0000 0000                  		dc.w Obj56_Type04-Obj56_TypeIndex, Obj56_Type05-Obj56_TypeIndex
00010E1C 0000 0000                  		dc.w Obj56_Type06-Obj56_TypeIndex, Obj56_Type07-Obj56_TypeIndex
00010E20 0000 0000                  		dc.w Obj56_Type08-Obj56_TypeIndex, Obj56_Type09-Obj56_TypeIndex
00010E24 0000 0000                  		dc.w Obj56_Type0A-Obj56_TypeIndex, Obj56_Type0B-Obj56_TypeIndex
00010E28 0000 0000                  		dc.w Obj56_Type0C-Obj56_TypeIndex, Obj56_Type0D-Obj56_TypeIndex
00010E2C                            ; ===========================================================================
00010E2C                            
00010E2C                            Obj56_Type00:				; XREF: Obj56_TypeIndex
00010E2C 4E75                       		rts	
00010E2E                            ; ===========================================================================
00010E2E                            
00010E2E                            Obj56_Type01:				; XREF: Obj56_TypeIndex
00010E2E 323C 0040                  		move.w	#$40,d1
00010E32 7000                       		moveq	#0,d0
00010E34 1038 FE68                  		move.b	($FFFFFE68).w,d0
00010E38 6000                       		bra.s	Obj56_Move_LR
00010E3A                            ; ===========================================================================
00010E3A                            
00010E3A                            Obj56_Type02:				; XREF: Obj56_TypeIndex
00010E3A 323C 0080                  		move.w	#$80,d1
00010E3E 7000                       		moveq	#0,d0
00010E40 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00010E44                            
00010E44                            Obj56_Move_LR:
00010E44 0828 0000 0022             		btst	#0,$22(a0)
00010E4A 6700                       		beq.s	loc_10416
00010E4C 4440                       		neg.w	d0
00010E4E D041                       		add.w	d1,d0
00010E50                            
00010E50                            loc_10416:
00010E50 3228 0034                  		move.w	$34(a0),d1
00010E54 9240                       		sub.w	d0,d1
00010E56 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
00010E5A 4E75                       		rts	
00010E5C                            ; ===========================================================================
00010E5C                            
00010E5C                            Obj56_Type03:				; XREF: Obj56_TypeIndex
00010E5C 323C 0040                  		move.w	#$40,d1
00010E60 7000                       		moveq	#0,d0
00010E62 1038 FE68                  		move.b	($FFFFFE68).w,d0
00010E66 6000                       		bra.s	Obj56_Move_UD
00010E68                            ; ===========================================================================
00010E68                            
00010E68                            Obj56_Type04:				; XREF: Obj56_TypeIndex
00010E68 323C 0080                  		move.w	#$80,d1
00010E6C 7000                       		moveq	#0,d0
00010E6E 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00010E72                            
00010E72                            Obj56_Move_UD:
00010E72 0828 0000 0022             		btst	#0,$22(a0)
00010E78 6700                       		beq.s	loc_10444
00010E7A 4440                       		neg.w	d0
00010E7C D041                       		add.w	d1,d0
00010E7E                            
00010E7E                            loc_10444:
00010E7E 3228 0030                  		move.w	$30(a0),d1
00010E82 9240                       		sub.w	d0,d1
00010E84 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
00010E88 4E75                       		rts	
00010E8A                            ; ===========================================================================
00010E8A                            
00010E8A                            Obj56_Type05:				; XREF: Obj56_TypeIndex
00010E8A 4A28 0038                  		tst.b	$38(a0)
00010E8E 6600                       		bne.s	loc_104A4
00010E90 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
00010E96 6600                       		bne.s	loc_1047A	; if not, branch
00010E98 0C28 0003 003C             		cmpi.b	#3,$3C(a0)
00010E9E 6600                       		bne.s	loc_1047A
00010EA0 4238 F7C9                  		clr.b	($FFFFF7C9).w
00010EA4 3038 D008                  		move.w	($FFFFD008).w,d0
00010EA8 B068 0008                  		cmp.w	8(a0),d0
00010EAC 6400                       		bcc.s	loc_1047A
00010EAE 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w
00010EB4                            
00010EB4                            loc_1047A:
00010EB4 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010EB8 7000                       		moveq	#0,d0
00010EBA 1028 003C                  		move.b	$3C(a0),d0
00010EBE 0832 0000 0000             		btst	#0,(a2,d0.w)
00010EC4 6700                       		beq.s	loc_104AE
00010EC6 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
00010ECC 6600                       		bne.s	loc_1049E	; if not, branch
00010ECE 0C00 0003                  		cmpi.b	#3,d0
00010ED2 6600                       		bne.s	loc_1049E
00010ED4 4238 F7C9                  		clr.b	($FFFFF7C9).w
00010ED8                            
00010ED8                            loc_1049E:
00010ED8 117C 0001 0038             		move.b	#1,$38(a0)
00010EDE                            
00010EDE                            loc_104A4:
00010EDE 4A68 003A                  		tst.w	$3A(a0)
00010EE2 6700                       		beq.s	loc_104C8
00010EE4 5568 003A                  		subq.w	#2,$3A(a0)
00010EE8                            
00010EE8                            loc_104AE:
00010EE8 3028 003A                  		move.w	$3A(a0),d0
00010EEC 0828 0000 0022             		btst	#0,$22(a0)
00010EF2 6700                       		beq.s	loc_104BC
00010EF4 4440                       		neg.w	d0
00010EF6                            
00010EF6                            loc_104BC:
00010EF6 3228 0030                  		move.w	$30(a0),d1
00010EFA D240                       		add.w	d0,d1
00010EFC 3141 000C                  		move.w	d1,$C(a0)
00010F00 4E75                       		rts	
00010F02                            ; ===========================================================================
00010F02                            
00010F02                            loc_104C8:
00010F02 5228 0028                  		addq.b	#1,$28(a0)
00010F06 4228 0038                  		clr.b	$38(a0)
00010F0A 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010F0E 7000                       		moveq	#0,d0
00010F10 1028 0023                  		move.b	$23(a0),d0
00010F14 67D2                       		beq.s	loc_104AE
00010F16 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00010F1C 60CA                       		bra.s	loc_104AE
00010F1E                            ; ===========================================================================
00010F1E                            
00010F1E                            Obj56_Type06:				; XREF: Obj56_TypeIndex
00010F1E 4A28 0038                  		tst.b	$38(a0)
00010F22 6600                       		bne.s	loc_10500
00010F24 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010F28 7000                       		moveq	#0,d0
00010F2A 1028 003C                  		move.b	$3C(a0),d0
00010F2E 4A32 0000                  		tst.b	(a2,d0.w)
00010F32 6A00                       		bpl.s	loc_10512
00010F34 117C 0001 0038             		move.b	#1,$38(a0)
00010F3A                            
00010F3A                            loc_10500:
00010F3A 7000                       		moveq	#0,d0
00010F3C 1028 0016                  		move.b	$16(a0),d0
00010F40 D040                       		add.w	d0,d0
00010F42 B068 003A                  		cmp.w	$3A(a0),d0
00010F46 6700                       		beq.s	loc_1052C
00010F48 5468 003A                  		addq.w	#2,$3A(a0)
00010F4C                            
00010F4C                            loc_10512:
00010F4C 3028 003A                  		move.w	$3A(a0),d0
00010F50 0828 0000 0022             		btst	#0,$22(a0)
00010F56 6700                       		beq.s	loc_10520
00010F58 4440                       		neg.w	d0
00010F5A                            
00010F5A                            loc_10520:
00010F5A 3228 0030                  		move.w	$30(a0),d1
00010F5E D240                       		add.w	d0,d1
00010F60 3141 000C                  		move.w	d1,$C(a0)
00010F64 4E75                       		rts	
00010F66                            ; ===========================================================================
00010F66                            
00010F66                            loc_1052C:
00010F66 5328 0028                  		subq.b	#1,$28(a0)
00010F6A 4228 0038                  		clr.b	$38(a0)
00010F6E 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010F72 7000                       		moveq	#0,d0
00010F74 1028 0023                  		move.b	$23(a0),d0
00010F78 67D2                       		beq.s	loc_10512
00010F7A 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00010F80 60CA                       		bra.s	loc_10512
00010F82                            ; ===========================================================================
00010F82                            
00010F82                            Obj56_Type07:				; XREF: Obj56_TypeIndex
00010F82 4A28 0038                  		tst.b	$38(a0)
00010F86 6600                       		bne.s	loc_1055E
00010F88 4A38 F7EF                  		tst.b	($FFFFF7EF).w	; has switch number $F been pressed?
00010F8C 6700                       		beq.s	locret_10578
00010F8E 117C 0001 0038             		move.b	#1,$38(a0)
00010F94 4268 003A                  		clr.w	$3A(a0)
00010F98                            
00010F98                            loc_1055E:
00010F98 5268 0008                  		addq.w	#1,8(a0)
00010F9C 3168 0008 0034             		move.w	8(a0),$34(a0)
00010FA2 5268 003A                  		addq.w	#1,$3A(a0)
00010FA6 0C68 0380 003A             		cmpi.w	#$380,$3A(a0)
00010FAC 6600                       		bne.s	locret_10578
00010FAE 4228 0028                  		clr.b	$28(a0)
00010FB2                            
00010FB2                            locret_10578:
00010FB2 4E75                       		rts	
00010FB4                            ; ===========================================================================
00010FB4                            
00010FB4                            Obj56_Type0C:				; XREF: Obj56_TypeIndex
00010FB4 4A28 0038                  		tst.b	$38(a0)
00010FB8 6600                       		bne.s	loc_10598
00010FBA 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010FBE 7000                       		moveq	#0,d0
00010FC0 1028 003C                  		move.b	$3C(a0),d0
00010FC4 0832 0000 0000             		btst	#0,(a2,d0.w)
00010FCA 6700                       		beq.s	loc_105A2
00010FCC 117C 0001 0038             		move.b	#1,$38(a0)
00010FD2                            
00010FD2                            loc_10598:
00010FD2 4A68 003A                  		tst.w	$3A(a0)
00010FD6 6700                       		beq.s	loc_105C0
00010FD8 5568 003A                  		subq.w	#2,$3A(a0)
00010FDC                            
00010FDC                            loc_105A2:
00010FDC 3028 003A                  		move.w	$3A(a0),d0
00010FE0 0828 0000 0022             		btst	#0,$22(a0)
00010FE6 6700                       		beq.s	loc_105B4
00010FE8 4440                       		neg.w	d0
00010FEA 0640 0080                  		addi.w	#$80,d0
00010FEE                            
00010FEE                            loc_105B4:
00010FEE 3228 0034                  		move.w	$34(a0),d1
00010FF2 D240                       		add.w	d0,d1
00010FF4 3141 0008                  		move.w	d1,8(a0)
00010FF8 4E75                       		rts	
00010FFA                            ; ===========================================================================
00010FFA                            
00010FFA                            loc_105C0:
00010FFA 5228 0028                  		addq.b	#1,$28(a0)
00010FFE 4228 0038                  		clr.b	$38(a0)
00011002 45F8 FC00                  		lea	($FFFFFC00).w,a2
00011006 7000                       		moveq	#0,d0
00011008 1028 0023                  		move.b	$23(a0),d0
0001100C 67CE                       		beq.s	loc_105A2
0001100E 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00011014 60C6                       		bra.s	loc_105A2
00011016                            ; ===========================================================================
00011016                            
00011016                            Obj56_Type0D:				; XREF: Obj56_TypeIndex
00011016 4A28 0038                  		tst.b	$38(a0)
0001101A 6600                       		bne.s	loc_105F8
0001101C 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00011020 7000                       		moveq	#0,d0
00011022 1028 003C                  		move.b	$3C(a0),d0
00011026 4A32 0000                  		tst.b	(a2,d0.w)
0001102A 6A00                       		bpl.s	loc_10606
0001102C 117C 0001 0038             		move.b	#1,$38(a0)
00011032                            
00011032                            loc_105F8:
00011032 303C 0080                  		move.w	#$80,d0
00011036 B068 003A                  		cmp.w	$3A(a0),d0
0001103A 6700                       		beq.s	loc_10624
0001103C 5468 003A                  		addq.w	#2,$3A(a0)
00011040                            
00011040                            loc_10606:
00011040 3028 003A                  		move.w	$3A(a0),d0
00011044 0828 0000 0022             		btst	#0,$22(a0)
0001104A 6700                       		beq.s	loc_10618
0001104C 4440                       		neg.w	d0
0001104E 0640 0080                  		addi.w	#$80,d0
00011052                            
00011052                            loc_10618:
00011052 3228 0034                  		move.w	$34(a0),d1
00011056 D240                       		add.w	d0,d1
00011058 3141 0008                  		move.w	d1,8(a0)
0001105C 4E75                       		rts	
0001105E                            ; ===========================================================================
0001105E                            
0001105E                            loc_10624:
0001105E 5328 0028                  		subq.b	#1,$28(a0)
00011062 4228 0038                  		clr.b	$38(a0)
00011066 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001106A 7000                       		moveq	#0,d0
0001106C 1028 0023                  		move.b	$23(a0),d0
00011070 67CE                       		beq.s	loc_10606
00011072 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00011078 60C6                       		bra.s	loc_10606
0001107A                            ; ===========================================================================
0001107A                            
0001107A                            Obj56_Type08:				; XREF: Obj56_TypeIndex
0001107A 323C 0010                  		move.w	#$10,d1
0001107E 7000                       		moveq	#0,d0
00011080 1038 FE88                  		move.b	($FFFFFE88).w,d0
00011084 E248                       		lsr.w	#1,d0
00011086 3638 FE8A                  		move.w	($FFFFFE8A).w,d3
0001108A 6000                       		bra.s	Obj56_Move_Sqr
0001108C                            ; ===========================================================================
0001108C                            
0001108C                            Obj56_Type09:				; XREF: Obj56_TypeIndex
0001108C 323C 0030                  		move.w	#$30,d1
00011090 7000                       		moveq	#0,d0
00011092 1038 FE8C                  		move.b	($FFFFFE8C).w,d0
00011096 3638 FE8E                  		move.w	($FFFFFE8E).w,d3
0001109A 6000                       		bra.s	Obj56_Move_Sqr
0001109C                            ; ===========================================================================
0001109C                            
0001109C                            Obj56_Type0A:				; XREF: Obj56_TypeIndex
0001109C 323C 0050                  		move.w	#$50,d1
000110A0 7000                       		moveq	#0,d0
000110A2 1038 FE90                  		move.b	($FFFFFE90).w,d0
000110A6 3638 FE92                  		move.w	($FFFFFE92).w,d3
000110AA 6000                       		bra.s	Obj56_Move_Sqr
000110AC                            ; ===========================================================================
000110AC                            
000110AC                            Obj56_Type0B:				; XREF: Obj56_TypeIndex
000110AC 323C 0070                  		move.w	#$70,d1
000110B0 7000                       		moveq	#0,d0
000110B2 1038 FE94                  		move.b	($FFFFFE94).w,d0
000110B6 3638 FE96                  		move.w	($FFFFFE96).w,d3
000110BA                            
000110BA                            Obj56_Move_Sqr:
000110BA 4A43                       		tst.w	d3
000110BC 6600                       		bne.s	loc_1068E
000110BE 5228 0022                  		addq.b	#1,$22(a0)
000110C2 0228 0003 0022             		andi.b	#3,$22(a0)
000110C8                            
000110C8                            loc_1068E:
000110C8 1428 0022                  		move.b	$22(a0),d2
000110CC 0202 0003                  		andi.b	#3,d2
000110D0 6600                       		bne.s	loc_106AE
000110D2 9041                       		sub.w	d1,d0
000110D4 D068 0034                  		add.w	$34(a0),d0
000110D8 3140 0008                  		move.w	d0,8(a0)
000110DC 4441                       		neg.w	d1
000110DE D268 0030                  		add.w	$30(a0),d1
000110E2 3141 000C                  		move.w	d1,$C(a0)
000110E6 4E75                       		rts	
000110E8                            ; ===========================================================================
000110E8                            
000110E8                            loc_106AE:
000110E8 5302                       		subq.b	#1,d2
000110EA 6600                       		bne.s	loc_106CC
000110EC 5341                       		subq.w	#1,d1
000110EE 9041                       		sub.w	d1,d0
000110F0 4440                       		neg.w	d0
000110F2 D068 0030                  		add.w	$30(a0),d0
000110F6 3140 000C                  		move.w	d0,$C(a0)
000110FA 5241                       		addq.w	#1,d1
000110FC D268 0034                  		add.w	$34(a0),d1
00011100 3141 0008                  		move.w	d1,8(a0)
00011104 4E75                       		rts	
00011106                            ; ===========================================================================
00011106                            
00011106                            loc_106CC:
00011106 5302                       		subq.b	#1,d2
00011108 6600                       		bne.s	loc_106EA
0001110A 5341                       		subq.w	#1,d1
0001110C 9041                       		sub.w	d1,d0
0001110E 4440                       		neg.w	d0
00011110 D068 0034                  		add.w	$34(a0),d0
00011114 3140 0008                  		move.w	d0,8(a0)
00011118 5241                       		addq.w	#1,d1
0001111A D268 0030                  		add.w	$30(a0),d1
0001111E 3141 000C                  		move.w	d1,$C(a0)
00011122 4E75                       		rts	
00011124                            ; ===========================================================================
00011124                            
00011124                            loc_106EA:
00011124 9041                       		sub.w	d1,d0
00011126 D068 0030                  		add.w	$30(a0),d0
0001112A 3140 000C                  		move.w	d0,$C(a0)
0001112E 4441                       		neg.w	d1
00011130 D268 0034                  		add.w	$34(a0),d1
00011134 3141 0008                  		move.w	d1,8(a0)
00011138 4E75                       		rts	
0001113A                            ; ===========================================================================
0001113A                            ; ---------------------------------------------------------------------------
0001113A                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
0001113A                            ; ---------------------------------------------------------------------------
0001113A                            Map_obj56:
0001113A                            	include "_maps\obj56.asm"
0001113A                            ; ---------------------------------------------------------------------------
0001113A                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
0001113A                            ; ---------------------------------------------------------------------------
0001113A 0000 0000                  		dc.w byte_10710-Map_obj56, byte_10716-Map_obj56
0001113E 0000 0000                  		dc.w byte_1072B-Map_obj56, byte_10736-Map_obj56
00011142 0000 0000                  		dc.w byte_1074B-Map_obj56, byte_1075B-Map_obj56
00011146 0000 0000                  		dc.w byte_10761-Map_obj56, byte_1076C-Map_obj56
0001114A 01                         byte_10710:	dc.b 1
0001114B F00F 0061 F0               		dc.b $F0, $F, 0, $61, $F0
00011150 04                         byte_10716:	dc.b 4
00011151 E00F 0061 E0               		dc.b $E0, $F, 0, $61, $E0
00011156 E00F 0061 00               		dc.b $E0, $F, 0, $61, 0
0001115B 000F 0061 E0               		dc.b 0,	$F, 0, $61, $E0
00011160 000F 0061 00               		dc.b 0,	$F, 0, $61, 0
00011165 02                         byte_1072B:	dc.b 2
00011166 E00F 0061 F0               		dc.b $E0, $F, 0, $61, $F0
0001116B 000F 0061 F0               		dc.b 0,	$F, 0, $61, $F0
00011170 04                         byte_10736:	dc.b 4
00011171 E60F 0081 E0               		dc.b $E6, $F, 0, $81, $E0
00011176 E60F 0081 00               		dc.b $E6, $F, 0, $81, 0
0001117B 000F 0081 E0               		dc.b 0,	$F, 0, $81, $E0
00011180 000F 0081 00               		dc.b 0,	$F, 0, $81, 0
00011185 03                         byte_1074B:	dc.b 3
00011186 D90F 0081 F0               		dc.b $D9, $F, 0, $81, $F0
0001118B F30F 0081 F0               		dc.b $F3, $F, 0, $81, $F0
00011190 0D0F 0081 F0               		dc.b $D, $F, 0,	$81, $F0
00011195 01                         byte_1075B:	dc.b 1
00011196 F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
0001119B 02                         byte_10761:	dc.b 2
0001119C E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
000111A1 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
000111A6 04                         byte_1076C:	dc.b 4
000111A7 F00F 0022 C0               		dc.b $F0, $F, 0, $22, $C0
000111AC F00F 0022 E0               		dc.b $F0, $F, 0, $22, $E0
000111B1 F00F 0022 00               		dc.b $F0, $F, 0, $22, 0
000111B6 F00F 0022 20               		dc.b $F0, $F, 0, $22, $20
000111BC 00                         		even
000111BC 00                         		even
000111BC                            
000111BC                            ; ===========================================================================
000111BC                            ; ---------------------------------------------------------------------------
000111BC                            ; Object 57 - spiked balls (SYZ, LZ)
000111BC                            ; ---------------------------------------------------------------------------
000111BC                            
000111BC                            Obj57:					; XREF: Obj_Index
000111BC 7000                       		moveq	#0,d0
000111BE 1028 0024                  		move.b	$24(a0),d0
000111C2 323B 0000                  		move.w	Obj57_Index(pc,d0.w),d1
000111C6 4EFB 1000                  		jmp	Obj57_Index(pc,d1.w)
000111CA                            ; ===========================================================================
000111CA 0000                       Obj57_Index:	dc.w Obj57_Main-Obj57_Index
000111CC 0000                       		dc.w Obj57_Move-Obj57_Index
000111CE 0000                       		dc.w Obj57_Display-Obj57_Index
000111D0                            ; ===========================================================================
000111D0                            
000111D0                            Obj57_Main:				; XREF: Obj57_Index
000111D0 5428 0024                  		addq.b	#2,$24(a0)
000111D4 217C 0000 0000 0004        		move.l	#Map_obj57,4(a0)
000111DC 317C 03BA 0002             		move.w	#$3BA,2(a0)
000111E2 117C 0004 0001             		move.b	#4,1(a0)
000111E8 117C 0004 0018             		move.b	#4,$18(a0)
000111EE 117C 0008 0019             		move.b	#8,$19(a0)
000111F4 3168 0008 003A             		move.w	8(a0),$3A(a0)
000111FA 3168 000C 0038             		move.w	$C(a0),$38(a0)
00011200 117C 0098 0020             		move.b	#$98,$20(a0)	; SYZ specific code (chain hurts Sonic)
00011206 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
0001120C 6600                       		bne.s	loc_107E8
0001120E 117C 0000 0020             		move.b	#0,$20(a0)	; LZ specific code (chain doesn't hurt)
00011214 317C 0310 0002             		move.w	#$310,2(a0)
0001121A 217C 0000 0000 0004        		move.l	#Map_obj57a,4(a0)
00011222                            
00011222                            loc_107E8:
00011222 1228 0028                  		move.b	$28(a0),d1	; get object type
00011226 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
0001122A 4881                       		ext.w	d1
0001122C E741                       		asl.w	#3,d1		; multiply by 8
0001122E 3141 003E                  		move.w	d1,$3E(a0)	; set object twirl speed
00011232 1028 0022                  		move.b	$22(a0),d0
00011236 E418                       		ror.b	#2,d0
00011238 0200 00C0                  		andi.b	#-$40,d0
0001123C 1140 0026                  		move.b	d0,$26(a0)
00011240 45E8 0029                  		lea	$29(a0),a2
00011244 1228 0028                  		move.b	$28(a0),d1	; get object type
00011248 0241 0007                  		andi.w	#7,d1		; read only the	2nd digit
0001124C 14FC 0000                  		move.b	#0,(a2)+
00011250 3601                       		move.w	d1,d3
00011252 E94B                       		lsl.w	#4,d3
00011254 1143 003C                  		move.b	d3,$3C(a0)
00011258 5341                       		subq.w	#1,d1		; set chain length (type-1)
0001125A 6500                       		bcs.s	loc_10894
0001125C 0828 0003 0028             		btst	#3,$28(a0)
00011262 6700                       		beq.s	Obj57_MakeChain
00011264 5341                       		subq.w	#1,d1
00011266 6500                       		bcs.s	loc_10894
00011268                            
00011268                            Obj57_MakeChain:
00011268 6100 D260                  		bsr.w	SingleObjLoad
0001126C 6600                       		bne.s	loc_10894
0001126E 5228 0029                  		addq.b	#1,$29(a0)
00011272 3A09                       		move.w	a1,d5
00011274 0445 D000                  		subi.w	#-$3000,d5
00011278 EC4D                       		lsr.w	#6,d5
0001127A 0245 007F                  		andi.w	#$7F,d5
0001127E 14C5                       		move.b	d5,(a2)+
00011280 137C 0004 0024             		move.b	#4,$24(a1)
00011286 1290                       		move.b	0(a0),0(a1)
00011288 2368 0004 0004             		move.l	4(a0),4(a1)
0001128E 3368 0002 0002             		move.w	2(a0),2(a1)
00011294 1368 0001 0001             		move.b	1(a0),1(a1)
0001129A 1368 0018 0018             		move.b	$18(a0),$18(a1)
000112A0 1368 0019 0019             		move.b	$19(a0),$19(a1)
000112A6 1368 0020 0020             		move.b	$20(a0),$20(a1)
000112AC 0403 0010                  		subi.b	#$10,d3
000112B0 1343 003C                  		move.b	d3,$3C(a1)
000112B4 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
000112BA 6600                       		bne.s	loc_10890
000112BC 4A03                       		tst.b	d3
000112BE 6600                       		bne.s	loc_10890
000112C0 137C 0002 001A             		move.b	#2,$1A(a1)
000112C6                            
000112C6                            loc_10890:
000112C6 51C9 FFA0                  		dbf	d1,Obj57_MakeChain ; repeat for	length of chain
000112CA                            
000112CA                            loc_10894:
000112CA 3A08                       		move.w	a0,d5
000112CC 0445 D000                  		subi.w	#-$3000,d5
000112D0 EC4D                       		lsr.w	#6,d5
000112D2 0245 007F                  		andi.w	#$7F,d5
000112D6 14C5                       		move.b	d5,(a2)+
000112D8 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
000112DE 6600                       		bne.s	Obj57_Move
000112E0 117C 008B 0020             		move.b	#$8B,$20(a0)	; if yes, make last spikeball larger
000112E6 117C 0001 001A             		move.b	#1,$1A(a0)	; use different	frame
000112EC                            
000112EC                            Obj57_Move:				; XREF: Obj57_Index
000112EC 6100 0000                  		bsr.w	Obj57_MoveSub
000112F0 6000 0000                  		bra.w	Obj57_ChkDel
000112F4                            ; ===========================================================================
000112F4                            
000112F4                            Obj57_MoveSub:				; XREF: Obj57_Move
000112F4 3028 003E                  		move.w	$3E(a0),d0
000112F8 D168 0026                  		add.w	d0,$26(a0)
000112FC 1028 0026                  		move.b	$26(a0),d0
00011300 4EB9 0000 2D34             		jsr	(CalcSine).l
00011306 3428 0038                  		move.w	$38(a0),d2
0001130A 3628 003A                  		move.w	$3A(a0),d3
0001130E 45E8 0029                  		lea	$29(a0),a2
00011312 7C00                       		moveq	#0,d6
00011314 1C1A                       		move.b	(a2)+,d6
00011316                            
00011316                            Obj57_MoveLoop:
00011316 7800                       		moveq	#0,d4
00011318 181A                       		move.b	(a2)+,d4
0001131A ED4C                       		lsl.w	#6,d4
0001131C 0684 00FF D000             		addi.l	#$FFD000,d4
00011322 2244                       		movea.l	d4,a1
00011324 7800                       		moveq	#0,d4
00011326 1829 003C                  		move.b	$3C(a1),d4
0001132A 2A04                       		move.l	d4,d5
0001132C C9C0                       		muls.w	d0,d4
0001132E E084                       		asr.l	#8,d4
00011330 CBC1                       		muls.w	d1,d5
00011332 E085                       		asr.l	#8,d5
00011334 D842                       		add.w	d2,d4
00011336 DA43                       		add.w	d3,d5
00011338 3344 000C                  		move.w	d4,$C(a1)
0001133C 3345 0008                  		move.w	d5,8(a1)
00011340 51CE FFD4                  		dbf	d6,Obj57_MoveLoop
00011344 4E75                       		rts	
00011346                            ; ===========================================================================
00011346                            
00011346                            Obj57_ChkDel:				; XREF: Obj57_Move
00011346 3028 003A                  		move.w	$3A(a0),d0
0001134A 0240 FF80                  		andi.w	#$FF80,d0
0001134E 3238 F700                  		move.w	($FFFFF700).w,d1
00011352 0441 0080                  		subi.w	#$80,d1
00011356 0241 FF80                  		andi.w	#$FF80,d1
0001135A 9041                       		sub.w	d1,d0
0001135C 0C40 0280                  		cmpi.w	#$280,d0
00011360 6200 0000                  		bhi.w	Obj57_Delete
00011364 6000 CCDE                  		bra.w	DisplaySprite
00011368                            ; ===========================================================================
00011368                            
00011368                            Obj57_Delete:				; XREF: Obj57_ChkDel
00011368 7400                       		moveq	#0,d2
0001136A 45E8 0029                  		lea	$29(a0),a2
0001136E 141A                       		move.b	(a2)+,d2
00011370                            
00011370                            Obj57_DelLoop:
00011370 7000                       		moveq	#0,d0
00011372 101A                       		move.b	(a2)+,d0
00011374 ED48                       		lsl.w	#6,d0
00011376 0680 00FF D000             		addi.l	#$FFD000,d0
0001137C 2240                       		movea.l	d0,a1
0001137E 6100 CD02                  		bsr.w	DeleteObject2
00011382 51CA FFEC                  		dbf	d2,Obj57_DelLoop ; delete all pieces of	chain
00011386                            
00011386 4E75                       		rts	
00011388                            ; ===========================================================================
00011388                            
00011388                            Obj57_Display:				; XREF: Obj57_Index
00011388 6000 CCBA                  		bra.w	DisplaySprite
0001138C                            ; ===========================================================================
0001138C                            ; ---------------------------------------------------------------------------
0001138C                            ; Sprite mappings - chain of spiked balls (SYZ)
0001138C                            ; ---------------------------------------------------------------------------
0001138C                            Map_obj57:
0001138C                            	include "_maps\obj57syz.asm"
0001138C                            ; ---------------------------------------------------------------------------
0001138C                            ; Sprite mappings - chain of spiked balls (SYZ)
0001138C                            ; ---------------------------------------------------------------------------
0001138C 0000                       		dc.w byte_10958-Map_obj57
0001138E 01                         byte_10958:	dc.b 1
0001138F F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00011394                            		even
00011394                            		even
00011394                            
00011394                            ; ---------------------------------------------------------------------------
00011394                            ; Sprite mappings - spiked ball	on a chain (LZ)
00011394                            ; ---------------------------------------------------------------------------
00011394                            Map_obj57a:
00011394                            	include "_maps\obj57lz.asm"
00011394                            ; ---------------------------------------------------------------------------
00011394                            ; Sprite mappings - spiked ball	on a chain (LZ)
00011394                            ; ---------------------------------------------------------------------------
00011394 0000                       		dc.w byte_10964-Map_obj57a
00011396 0000                       		dc.w byte_1096A-Map_obj57a
00011398 0000                       		dc.w byte_10970-Map_obj57a
0001139A 01                         byte_10964:	dc.b 1
0001139B F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000113A0 01                         byte_1096A:	dc.b 1
000113A1 F00F 0004 F0               		dc.b $F0, $F, 0, 4, $F0
000113A6 01                         byte_10970:	dc.b 1
000113A7 F805 0014 F8               		dc.b $F8, 5, 0,	$14, $F8
000113AC                            		even
000113AC                            		even
000113AC                            
000113AC                            ; ===========================================================================
000113AC                            ; ---------------------------------------------------------------------------
000113AC                            ; Object 58 - giant spiked balls (SYZ)
000113AC                            ; ---------------------------------------------------------------------------
000113AC                            
000113AC                            Obj58:					; XREF: Obj_Index
000113AC 7000                       		moveq	#0,d0
000113AE 1028 0024                  		move.b	$24(a0),d0
000113B2 323B 0000                  		move.w	Obj58_Index(pc,d0.w),d1
000113B6 4EFB 1000                  		jmp	Obj58_Index(pc,d1.w)
000113BA                            ; ===========================================================================
000113BA 0000                       Obj58_Index:	dc.w Obj58_Main-Obj58_Index
000113BC 0000                       		dc.w Obj58_Move-Obj58_Index
000113BE                            ; ===========================================================================
000113BE                            
000113BE                            Obj58_Main:				; XREF: Obj58_Index
000113BE 5428 0024                  		addq.b	#2,$24(a0)
000113C2 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0)
000113CA 317C 0396 0002             		move.w	#$396,2(a0)
000113D0 117C 0004 0001             		move.b	#4,1(a0)
000113D6 117C 0004 0018             		move.b	#4,$18(a0)
000113DC 117C 0018 0019             		move.b	#$18,$19(a0)
000113E2 3168 0008 003A             		move.w	8(a0),$3A(a0)
000113E8 3168 000C 0038             		move.w	$C(a0),$38(a0)
000113EE 117C 0086 0020             		move.b	#$86,$20(a0)
000113F4 1228 0028                  		move.b	$28(a0),d1	; get object type
000113F8 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
000113FC 4881                       		ext.w	d1
000113FE E741                       		asl.w	#3,d1		; multiply by 8
00011400 3141 003E                  		move.w	d1,$3E(a0)	; set object speed
00011404 1028 0022                  		move.b	$22(a0),d0
00011408 E418                       		ror.b	#2,d0
0001140A 0200 00C0                  		andi.b	#$C0,d0
0001140E 1140 0026                  		move.b	d0,$26(a0)
00011412 117C 0050 003C             		move.b	#$50,$3C(a0)	; set diameter of circle of rotation
00011418                            
00011418                            Obj58_Move:				; XREF: Obj58_Index
00011418 7000                       		moveq	#0,d0
0001141A 1028 0028                  		move.b	$28(a0),d0	; get object type
0001141E 0240 0007                  		andi.w	#7,d0		; read only the	2nd digit
00011422 D040                       		add.w	d0,d0
00011424 323B 0000                  		move.w	Obj58_TypeIndex(pc,d0.w),d1
00011428 4EBB 1000                  		jsr	Obj58_TypeIndex(pc,d1.w)
0001142C 3028 003A                  		move.w	$3A(a0),d0
00011430 0240 FF80                  		andi.w	#$FF80,d0
00011434 3238 F700                  		move.w	($FFFFF700).w,d1
00011438 0441 0080                  		subi.w	#$80,d1
0001143C 0241 FF80                  		andi.w	#$FF80,d1
00011440 9041                       		sub.w	d1,d0
00011442 0C40 0280                  		cmpi.w	#$280,d0
00011446 6200 CC38                  		bhi.w	DeleteObject
0001144A 6000 CBF8                  		bra.w	DisplaySprite
0001144E                            ; ===========================================================================
0001144E 0000                       Obj58_TypeIndex:dc.w Obj58_Type00-Obj58_TypeIndex
00011450 0000                       		dc.w Obj58_Type01-Obj58_TypeIndex
00011452 0000                       		dc.w Obj58_Type02-Obj58_TypeIndex
00011454 0000                       		dc.w Obj58_Type03-Obj58_TypeIndex
00011456                            ; ===========================================================================
00011456                            
00011456                            Obj58_Type00:				; XREF: Obj58_TypeIndex
00011456 4E75                       		rts	
00011458                            ; ===========================================================================
00011458                            
00011458                            Obj58_Type01:				; XREF: Obj58_TypeIndex
00011458 323C 0060                  		move.w	#$60,d1
0001145C 7000                       		moveq	#0,d0
0001145E 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00011462 0828 0000 0022             		btst	#0,$22(a0)
00011468 6700                       		beq.s	loc_10A38
0001146A 4440                       		neg.w	d0
0001146C D041                       		add.w	d1,d0
0001146E                            
0001146E                            loc_10A38:
0001146E 3228 003A                  		move.w	$3A(a0),d1
00011472 9240                       		sub.w	d0,d1
00011474 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
00011478 4E75                       		rts	
0001147A                            ; ===========================================================================
0001147A                            
0001147A                            Obj58_Type02:				; XREF: Obj58_TypeIndex
0001147A 323C 0060                  		move.w	#$60,d1
0001147E 7000                       		moveq	#0,d0
00011480 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00011484 0828 0000 0022             		btst	#0,$22(a0)
0001148A 6700                       		beq.s	loc_10A5C
0001148C 4440                       		neg.w	d0
0001148E 0640 0080                  		addi.w	#$80,d0
00011492                            
00011492                            loc_10A5C:
00011492 3228 0038                  		move.w	$38(a0),d1
00011496 9240                       		sub.w	d0,d1
00011498 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
0001149C 4E75                       		rts	
0001149E                            ; ===========================================================================
0001149E                            
0001149E                            Obj58_Type03:				; XREF: Obj58_TypeIndex
0001149E 3028 003E                  		move.w	$3E(a0),d0
000114A2 D168 0026                  		add.w	d0,$26(a0)
000114A6 1028 0026                  		move.b	$26(a0),d0
000114AA 4EB9 0000 2D34             		jsr	(CalcSine).l
000114B0 3428 0038                  		move.w	$38(a0),d2
000114B4 3628 003A                  		move.w	$3A(a0),d3
000114B8 7800                       		moveq	#0,d4
000114BA 1828 003C                  		move.b	$3C(a0),d4
000114BE 2A04                       		move.l	d4,d5
000114C0 C9C0                       		muls.w	d0,d4
000114C2 E084                       		asr.l	#8,d4
000114C4 CBC1                       		muls.w	d1,d5
000114C6 E085                       		asr.l	#8,d5
000114C8 D842                       		add.w	d2,d4
000114CA DA43                       		add.w	d3,d5
000114CC 3144 000C                  		move.w	d4,$C(a0)
000114D0 3145 0008                  		move.w	d5,8(a0)
000114D4 4E75                       		rts	
000114D6                            ; ===========================================================================
000114D6                            ; ---------------------------------------------------------------------------
000114D6                            ; Sprite mappings - SBZ	spiked ball on a chain
000114D6                            ; ---------------------------------------------------------------------------
000114D6                            Map_obj15b:
000114D6                            	include "_maps\obj15sbz.asm"
000114D6                            ; ---------------------------------------------------------------------------
000114D6                            ; Sprite mappings - spiked ball on a chain (SBZ)
000114D6                            ; ---------------------------------------------------------------------------
000114D6 0000 0000                  		dc.w byte_10AA6-Map_obj15b, byte_10AC0-Map_obj15b
000114DA 0000                       		dc.w byte_10AC6-Map_obj15b
000114DC 05                         byte_10AA6:	dc.b 5
000114DD E804 0000 F8               		dc.b $E8, 4, 0,	0, $F8
000114E2 F00F 0002 F0               		dc.b $F0, $F, 0, 2, $F0
000114E7 F801 0012 E8               		dc.b $F8, 1, 0,	$12, $E8
000114EC F801 0014 10               		dc.b $F8, 1, 0,	$14, $10
000114F1 1004 0016 F8               		dc.b $10, 4, 0,	$16, $F8
000114F6 01                         byte_10AC0:	dc.b 1
000114F7 F805 0020 F8               		dc.b $F8, 5, 0,	$20, $F8
000114FC 02                         byte_10AC6:	dc.b 2
000114FD F80D 0018 F0               		dc.b $F8, $D, 0, $18, $F0
00011502 E80D 1018 F0               		dc.b $E8, $D, $10, $18,	$F0
00011508 00                         		even
00011508 00                         		even
00011508                            
00011508                            ; ===========================================================================
00011508                            ; ---------------------------------------------------------------------------
00011508                            ; Object 59 - platforms	that move when you stand on them (SLZ)
00011508                            ; ---------------------------------------------------------------------------
00011508                            
00011508                            Obj59:					; XREF: Obj_Index
00011508 7000                       		moveq	#0,d0
0001150A 1028 0024                  		move.b	$24(a0),d0
0001150E 323B 0000                  		move.w	Obj59_Index(pc,d0.w),d1
00011512 4EBB 1000                  		jsr	Obj59_Index(pc,d1.w)
00011516 3028 0032                  		move.w	$32(a0),d0
0001151A 0240 FF80                  		andi.w	#$FF80,d0
0001151E 3238 F700                  		move.w	($FFFFF700).w,d1
00011522 0441 0080                  		subi.w	#$80,d1
00011526 0241 FF80                  		andi.w	#$FF80,d1
0001152A 9041                       		sub.w	d1,d0
0001152C 0C40 0280                  		cmpi.w	#$280,d0
00011530 6200 CB4E                  		bhi.w	DeleteObject
00011534 6000 CB0E                  		bra.w	DisplaySprite
00011538                            ; ===========================================================================
00011538 0000                       Obj59_Index:	dc.w Obj59_Main-Obj59_Index
0001153A 0000                       		dc.w Obj59_Platform-Obj59_Index
0001153C 0000                       		dc.w Obj59_Action-Obj59_Index
0001153E 0000                       		dc.w Obj59_MakeMulti-Obj59_Index
00011540                            
00011540 2800                       Obj59_Var1:	dc.b $28, 0		; width, frame number
00011542                            
00011542 1001                       Obj59_Var2:	dc.b $10, 1		; width, action	type
00011544 2001                       		dc.b $20, 1
00011546 3401                       		dc.b $34, 1
00011548 1003                       		dc.b $10, 3
0001154A 2003                       		dc.b $20, 3
0001154C 3403                       		dc.b $34, 3
0001154E 1401                       		dc.b $14, 1
00011550 2401                       		dc.b $24, 1
00011552 2C01                       		dc.b $2C, 1
00011554 1403                       		dc.b $14, 3
00011556 2403                       		dc.b $24, 3
00011558 2C03                       		dc.b $2C, 3
0001155A 2005                       		dc.b $20, 5
0001155C 2007                       		dc.b $20, 7
0001155E 3009                       		dc.b $30, 9
00011560                            ; ===========================================================================
00011560                            
00011560                            Obj59_Main:				; XREF: Obj59_Index
00011560 5428 0024                  		addq.b	#2,$24(a0)
00011564 7000                       		moveq	#0,d0
00011566 1028 0028                  		move.b	$28(a0),d0
0001156A 6A00                       		bpl.s	Obj59_Main2
0001156C 5828 0024                  		addq.b	#4,$24(a0)
00011570 0240 007F                  		andi.w	#$7F,d0
00011574 C0FC 0006                  		mulu.w	#6,d0
00011578 3140 003C                  		move.w	d0,$3C(a0)
0001157C 3140 003E                  		move.w	d0,$3E(a0)
00011580 588F                       		addq.l	#4,sp
00011582 4E75                       		rts	
00011584                            ; ===========================================================================
00011584                            
00011584                            Obj59_Main2:
00011584 E648                       		lsr.w	#3,d0
00011586 0240 001E                  		andi.w	#$1E,d0
0001158A 45FB 00B4                  		lea	Obj59_Var1(pc,d0.w),a2
0001158E 115A 0019                  		move.b	(a2)+,$19(a0)
00011592 115A 001A                  		move.b	(a2)+,$1A(a0)
00011596 7000                       		moveq	#0,d0
00011598 1028 0028                  		move.b	$28(a0),d0
0001159C D040                       		add.w	d0,d0
0001159E 0240 001E                  		andi.w	#$1E,d0
000115A2 45FB 009E                  		lea	Obj59_Var2(pc,d0.w),a2
000115A6 101A                       		move.b	(a2)+,d0
000115A8 E548                       		lsl.w	#2,d0
000115AA 3140 003C                  		move.w	d0,$3C(a0)
000115AE 115A 0028                  		move.b	(a2)+,$28(a0)
000115B2 217C 0000 0000 0004        		move.l	#Map_obj59,4(a0)
000115BA 317C 4000 0002             		move.w	#$4000,2(a0)
000115C0 117C 0004 0001             		move.b	#4,1(a0)
000115C6 117C 0004 0018             		move.b	#4,$18(a0)
000115CC 3168 0008 0032             		move.w	8(a0),$32(a0)
000115D2 3168 000C 0030             		move.w	$C(a0),$30(a0)
000115D8                            
000115D8                            Obj59_Platform:				; XREF: Obj59_Index
000115D8 7200                       		moveq	#0,d1
000115DA 1228 0019                  		move.b	$19(a0),d1
000115DE 4EB9 0000 7C56             		jsr	(PlatformObject).l
000115E4 6000 0000                  		bra.w	Obj59_Types
000115E8                            ; ===========================================================================
000115E8                            
000115E8                            Obj59_Action:				; XREF: Obj59_Index
000115E8 7200                       		moveq	#0,d1
000115EA 1228 0019                  		move.b	$19(a0),d1
000115EE 4EB9 0000 7DCA             		jsr	(ExitPlatform).l
000115F4 3F28 0008                  		move.w	8(a0),-(sp)
000115F8 6100 0000                  		bsr.w	Obj59_Types
000115FC 341F                       		move.w	(sp)+,d2
000115FE 4A10                       		tst.b	0(a0)
00011600 6700                       		beq.s	locret_10BD4
00011602 4EF9 0000 8334             		jmp	(MvSonicOnPtfm2).l
00011608                            ; ===========================================================================
00011608                            
00011608                            locret_10BD4:
00011608 4E75                       		rts	
0001160A                            ; ===========================================================================
0001160A                            
0001160A                            Obj59_Types:
0001160A 7000                       		moveq	#0,d0
0001160C 1028 0028                  		move.b	$28(a0),d0
00011610 0240 000F                  		andi.w	#$F,d0
00011614 D040                       		add.w	d0,d0
00011616 323B 0000                  		move.w	Obj59_TypeIndex(pc,d0.w),d1
0001161A 4EFB 1000                  		jmp	Obj59_TypeIndex(pc,d1.w)
0001161E                            ; ===========================================================================
0001161E 0000 0000                  Obj59_TypeIndex:dc.w Obj59_Type00-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00011622 0000 0000                  		dc.w Obj59_Type02-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00011626 0000 0000                  		dc.w Obj59_Type04-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
0001162A 0000 0000                  		dc.w Obj59_Type06-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
0001162E 0000 0000                  		dc.w Obj59_Type08-Obj59_TypeIndex, Obj59_Type09-Obj59_TypeIndex
00011632                            ; ===========================================================================
00011632                            
00011632                            Obj59_Type00:				; XREF: Obj59_TypeIndex
00011632 4E75                       		rts	
00011634                            ; ===========================================================================
00011634                            
00011634                            Obj59_Type01:				; XREF: Obj59_TypeIndex
00011634 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; check	if Sonic is standing on	the object
0001163A 6600                       		bne.s	locret_10C0C
0001163C 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
00011640                            
00011640                            locret_10C0C:
00011640 4E75                       		rts	
00011642                            ; ===========================================================================
00011642                            
00011642                            Obj59_Type02:				; XREF: Obj59_TypeIndex
00011642 6100 0000                  		bsr.w	Obj59_Move
00011646 3028 0034                  		move.w	$34(a0),d0
0001164A 4440                       		neg.w	d0
0001164C D068 0030                  		add.w	$30(a0),d0
00011650 3140 000C                  		move.w	d0,$C(a0)
00011654 4E75                       		rts	
00011656                            ; ===========================================================================
00011656                            
00011656                            Obj59_Type04:				; XREF: Obj59_TypeIndex
00011656 6100 0000                  		bsr.w	Obj59_Move
0001165A 3028 0034                  		move.w	$34(a0),d0
0001165E D068 0030                  		add.w	$30(a0),d0
00011662 3140 000C                  		move.w	d0,$C(a0)
00011666 4E75                       		rts	
00011668                            ; ===========================================================================
00011668                            
00011668                            Obj59_Type06:				; XREF: Obj59_TypeIndex
00011668 6100 0000                  		bsr.w	Obj59_Move
0001166C 3028 0034                  		move.w	$34(a0),d0
00011670 E240                       		asr.w	#1,d0
00011672 4440                       		neg.w	d0
00011674 D068 0030                  		add.w	$30(a0),d0
00011678 3140 000C                  		move.w	d0,$C(a0)
0001167C 3028 0034                  		move.w	$34(a0),d0
00011680 D068 0032                  		add.w	$32(a0),d0
00011684 3140 0008                  		move.w	d0,8(a0)
00011688 4E75                       		rts	
0001168A                            ; ===========================================================================
0001168A                            
0001168A                            Obj59_Type08:				; XREF: Obj59_TypeIndex
0001168A 6100 0000                  		bsr.w	Obj59_Move
0001168E 3028 0034                  		move.w	$34(a0),d0
00011692 E240                       		asr.w	#1,d0
00011694 D068 0030                  		add.w	$30(a0),d0
00011698 3140 000C                  		move.w	d0,$C(a0)
0001169C 3028 0034                  		move.w	$34(a0),d0
000116A0 4440                       		neg.w	d0
000116A2 D068 0032                  		add.w	$32(a0),d0
000116A6 3140 0008                  		move.w	d0,8(a0)
000116AA 4E75                       		rts	
000116AC                            ; ===========================================================================
000116AC                            
000116AC                            Obj59_Type09:				; XREF: Obj59_TypeIndex
000116AC 6100 0000                  		bsr.w	Obj59_Move
000116B0 3028 0034                  		move.w	$34(a0),d0
000116B4 4440                       		neg.w	d0
000116B6 D068 0030                  		add.w	$30(a0),d0
000116BA 3140 000C                  		move.w	d0,$C(a0)
000116BE 4A28 0028                  		tst.b	$28(a0)
000116C2 6700 0000                  		beq.w	loc_10C94
000116C6 4E75                       		rts	
000116C8                            ; ===========================================================================
000116C8                            
000116C8                            loc_10C94:
000116C8 0828 0003 0022             		btst	#3,$22(a0)
000116CE 6700                       		beq.s	Obj59_Delete
000116D0 08E9 0001 0022             		bset	#1,$22(a1)
000116D6 08A9 0003 0022             		bclr	#3,$22(a1)
000116DC 137C 0002 0024             		move.b	#2,$24(a1)
000116E2                            
000116E2                            Obj59_Delete:
000116E2 6000 C99C                  		bra.w	DeleteObject
000116E6                            
000116E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000116E6                            
000116E6                            
000116E6                            Obj59_Move:				; XREF: Obj59_Type02; et al
000116E6 3028 0038                  		move.w	$38(a0),d0
000116EA 4A28 003A                  		tst.b	$3A(a0)
000116EE 6600                       		bne.s	loc_10CC8
000116F0 0C40 0800                  		cmpi.w	#$800,d0
000116F4 6400                       		bcc.s	loc_10CD0
000116F6 0640 0010                  		addi.w	#$10,d0
000116FA 6000                       		bra.s	loc_10CD0
000116FC                            ; ===========================================================================
000116FC                            
000116FC                            loc_10CC8:
000116FC 4A40                       		tst.w	d0
000116FE 6700                       		beq.s	loc_10CD0
00011700 0440 0010                  		subi.w	#$10,d0
00011704                            
00011704                            loc_10CD0:
00011704 3140 0038                  		move.w	d0,$38(a0)
00011708 48C0                       		ext.l	d0
0001170A E180                       		asl.l	#8,d0
0001170C D0A8 0034                  		add.l	$34(a0),d0
00011710 2140 0034                  		move.l	d0,$34(a0)
00011714 4840                       		swap	d0
00011716 3428 003C                  		move.w	$3C(a0),d2
0001171A B042                       		cmp.w	d2,d0
0001171C 6300                       		bls.s	loc_10CF0
0001171E 117C 0001 003A             		move.b	#1,$3A(a0)
00011724                            
00011724                            loc_10CF0:
00011724 D442                       		add.w	d2,d2
00011726 B042                       		cmp.w	d2,d0
00011728 6600                       		bne.s	locret_10CFA
0001172A 4228 0028                  		clr.b	$28(a0)
0001172E                            
0001172E                            locret_10CFA:
0001172E 4E75                       		rts	
00011730                            ; End of function Obj59_Move
00011730                            
00011730                            ; ===========================================================================
00011730                            
00011730                            Obj59_MakeMulti:			; XREF: Obj59_Index
00011730 5368 003C                  		subq.w	#1,$3C(a0)
00011734 6600                       		bne.s	Obj59_ChkDel
00011736 3168 003E 003C             		move.w	$3E(a0),$3C(a0)
0001173C 6100 CD8C                  		bsr.w	SingleObjLoad
00011740 6600                       		bne.s	Obj59_ChkDel
00011742 12BC 0059                  		move.b	#$59,0(a1)	; duplicate the	object
00011746 3368 0008 0008             		move.w	8(a0),8(a1)
0001174C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011752 137C 000E 0028             		move.b	#$E,$28(a1)
00011758                            
00011758                            Obj59_ChkDel:
00011758 588F                       		addq.l	#4,sp
0001175A 3028 0008                  		move.w	8(a0),d0
0001175E 0240 FF80                  		andi.w	#$FF80,d0
00011762 3238 F700                  		move.w	($FFFFF700).w,d1
00011766 0441 0080                  		subi.w	#$80,d1
0001176A 0241 FF80                  		andi.w	#$FF80,d1
0001176E 9041                       		sub.w	d1,d0
00011770 0C40 0280                  		cmpi.w	#$280,d0
00011774 6200 C90A                  		bhi.w	DeleteObject
00011778 4E75                       		rts	
0001177A                            ; ===========================================================================
0001177A                            ; ---------------------------------------------------------------------------
0001177A                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
0001177A                            ; ---------------------------------------------------------------------------
0001177A                            Map_obj59:
0001177A                            	include "_maps\obj59.asm"
0001177A                            ; ---------------------------------------------------------------------------
0001177A                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
0001177A                            ; ---------------------------------------------------------------------------
0001177A 0000                       		dc.w byte_10D4A-Map_obj59
0001177C 03                         byte_10D4A:	dc.b 3
0001177D F80F 0041 D8               		dc.b $F8, $F, 0, $41, $D8
00011782 F80F 0041 F8               		dc.b $F8, $F, 0, $41, $F8
00011787 F807 0041 18               		dc.b $F8, 7, 0,	$41, $18
0001178C                            		even
0001178C                            		even
0001178C                            
0001178C                            ; ===========================================================================
0001178C                            ; ---------------------------------------------------------------------------
0001178C                            ; Object 5A - platforms	moving in circles (SLZ)
0001178C                            ; ---------------------------------------------------------------------------
0001178C                            
0001178C                            Obj5A:					; XREF: Obj_Index
0001178C 7000                       		moveq	#0,d0
0001178E 1028 0024                  		move.b	$24(a0),d0
00011792 323B 0000                  		move.w	Obj5A_Index(pc,d0.w),d1
00011796 4EBB 1000                  		jsr	Obj5A_Index(pc,d1.w)
0001179A 3028 0032                  		move.w	$32(a0),d0
0001179E 0240 FF80                  		andi.w	#$FF80,d0
000117A2 3238 F700                  		move.w	($FFFFF700).w,d1
000117A6 0441 0080                  		subi.w	#$80,d1
000117AA 0241 FF80                  		andi.w	#$FF80,d1
000117AE 9041                       		sub.w	d1,d0
000117B0 0C40 0280                  		cmpi.w	#$280,d0
000117B4 6200 C8CA                  		bhi.w	DeleteObject
000117B8 6000 C88A                  		bra.w	DisplaySprite
000117BC                            ; ===========================================================================
000117BC 0000                       Obj5A_Index:	dc.w Obj5A_Main-Obj5A_Index
000117BE 0000                       		dc.w Obj5A_Platform-Obj5A_Index
000117C0 0000                       		dc.w Obj5A_Action-Obj5A_Index
000117C2                            ; ===========================================================================
000117C2                            
000117C2                            Obj5A_Main:				; XREF: Obj5A_Index
000117C2 5428 0024                  		addq.b	#2,$24(a0)
000117C6 217C 0000 0000 0004        		move.l	#Map_obj5A,4(a0)
000117CE 317C 4000 0002             		move.w	#$4000,2(a0)
000117D4 117C 0004 0001             		move.b	#4,1(a0)
000117DA 117C 0004 0018             		move.b	#4,$18(a0)
000117E0 117C 0018 0019             		move.b	#$18,$19(a0)
000117E6 3168 0008 0032             		move.w	8(a0),$32(a0)
000117EC 3168 000C 0030             		move.w	$C(a0),$30(a0)
000117F2                            
000117F2                            Obj5A_Platform:				; XREF: Obj5A_Index
000117F2 7200                       		moveq	#0,d1
000117F4 1228 0019                  		move.b	$19(a0),d1
000117F8 4EB9 0000 7C56             		jsr	(PlatformObject).l
000117FE 6000 0000                  		bra.w	Obj5A_Types
00011802                            ; ===========================================================================
00011802                            
00011802                            Obj5A_Action:				; XREF: Obj5A_Index
00011802 7200                       		moveq	#0,d1
00011804 1228 0019                  		move.b	$19(a0),d1
00011808 4EB9 0000 7DCA             		jsr	(ExitPlatform).l
0001180E 3F28 0008                  		move.w	8(a0),-(sp)
00011812 6100 0000                  		bsr.w	Obj5A_Types
00011816 341F                       		move.w	(sp)+,d2
00011818 4EF9 0000 8334             		jmp	(MvSonicOnPtfm2).l
0001181E                            ; ===========================================================================
0001181E                            
0001181E                            Obj5A_Types:
0001181E 7000                       		moveq	#0,d0
00011820 1028 0028                  		move.b	$28(a0),d0
00011824 0240 000C                  		andi.w	#$C,d0
00011828 E248                       		lsr.w	#1,d0
0001182A 323B 0000                  		move.w	Obj5A_TypeIndex(pc,d0.w),d1
0001182E 4EFB 1000                  		jmp	Obj5A_TypeIndex(pc,d1.w)
00011832                            ; ===========================================================================
00011832 0000                       Obj5A_TypeIndex:dc.w Obj5A_Type00-Obj5A_TypeIndex
00011834 0000                       		dc.w Obj5A_Type04-Obj5A_TypeIndex
00011836                            ; ===========================================================================
00011836                            
00011836                            Obj5A_Type00:				; XREF: Obj5A_TypeIndex
00011836 1238 FE80                  		move.b	($FFFFFE80).w,d1
0001183A 0401 0050                  		subi.b	#$50,d1
0001183E 4881                       		ext.w	d1
00011840 1438 FE84                  		move.b	($FFFFFE84).w,d2
00011844 0402 0050                  		subi.b	#$50,d2
00011848 4882                       		ext.w	d2
0001184A 0828 0000 0028             		btst	#0,$28(a0)
00011850 6700                       		beq.s	loc_10E24
00011852 4441                       		neg.w	d1
00011854 4442                       		neg.w	d2
00011856                            
00011856                            loc_10E24:
00011856 0828 0001 0028             		btst	#1,$28(a0)
0001185C 6700                       		beq.s	loc_10E30
0001185E 4441                       		neg.w	d1
00011860 C342                       		exg	d1,d2
00011862                            
00011862                            loc_10E30:
00011862 D268 0032                  		add.w	$32(a0),d1
00011866 3141 0008                  		move.w	d1,8(a0)
0001186A D468 0030                  		add.w	$30(a0),d2
0001186E 3142 000C                  		move.w	d2,$C(a0)
00011872 4E75                       		rts	
00011874                            ; ===========================================================================
00011874                            
00011874                            Obj5A_Type04:				; XREF: Obj5A_TypeIndex
00011874 1238 FE80                  		move.b	($FFFFFE80).w,d1
00011878 0401 0050                  		subi.b	#$50,d1
0001187C 4881                       		ext.w	d1
0001187E 1438 FE84                  		move.b	($FFFFFE84).w,d2
00011882 0402 0050                  		subi.b	#$50,d2
00011886 4882                       		ext.w	d2
00011888 0828 0000 0028             		btst	#0,$28(a0)
0001188E 6700                       		beq.s	loc_10E62
00011890 4441                       		neg.w	d1
00011892 4442                       		neg.w	d2
00011894                            
00011894                            loc_10E62:
00011894 0828 0001 0028             		btst	#1,$28(a0)
0001189A 6700                       		beq.s	loc_10E6E
0001189C 4441                       		neg.w	d1
0001189E C342                       		exg	d1,d2
000118A0                            
000118A0                            loc_10E6E:
000118A0 4441                       		neg.w	d1
000118A2 D268 0032                  		add.w	$32(a0),d1
000118A6 3141 0008                  		move.w	d1,8(a0)
000118AA D468 0030                  		add.w	$30(a0),d2
000118AE 3142 000C                  		move.w	d2,$C(a0)
000118B2 4E75                       		rts	
000118B4                            ; ===========================================================================
000118B4                            ; ---------------------------------------------------------------------------
000118B4                            ; Sprite mappings - platforms that move	in circles (SLZ)
000118B4                            ; ---------------------------------------------------------------------------
000118B4                            Map_obj5A:
000118B4                            	include "_maps\obj5A.asm"
000118B4                            ; ---------------------------------------------------------------------------
000118B4                            ; Sprite mappings - platforms that move	in circles (SLZ)
000118B4                            ; ---------------------------------------------------------------------------
000118B4 0000                       		dc.w byte_10E84-Map_obj5A
000118B6 02                         byte_10E84:	dc.b 2
000118B7 F809 0051 E8               		dc.b $F8, 9, 0,	$51, $E8
000118BC F809 0851 00               		dc.b $F8, 9, 8,	$51, 0
000118C2 00                         		even
000118C2 00                         		even
000118C2                            
000118C2                            ; ===========================================================================
000118C2                            ; ---------------------------------------------------------------------------
000118C2                            ; Object 5B - blocks that form a staircase (SLZ)
000118C2                            ; ---------------------------------------------------------------------------
000118C2                            
000118C2                            Obj5B:					; XREF: Obj_Index
000118C2 7000                       		moveq	#0,d0
000118C4 1028 0024                  		move.b	$24(a0),d0
000118C8 323B 0000                  		move.w	Obj5B_Index(pc,d0.w),d1
000118CC 4EBB 1000                  		jsr	Obj5B_Index(pc,d1.w)
000118D0 3028 0030                  		move.w	$30(a0),d0
000118D4 0240 FF80                  		andi.w	#$FF80,d0
000118D8 3238 F700                  		move.w	($FFFFF700).w,d1
000118DC 0441 0080                  		subi.w	#$80,d1
000118E0 0241 FF80                  		andi.w	#$FF80,d1
000118E4 9041                       		sub.w	d1,d0
000118E6 0C40 0280                  		cmpi.w	#$280,d0
000118EA 6200 C794                  		bhi.w	DeleteObject
000118EE 6000 C754                  		bra.w	DisplaySprite
000118F2                            ; ===========================================================================
000118F2 0000                       Obj5B_Index:	dc.w Obj5B_Main-Obj5B_Index
000118F4 0000                       		dc.w Obj5B_Move-Obj5B_Index
000118F6 0000                       		dc.w Obj5B_Solid-Obj5B_Index
000118F8                            ; ===========================================================================
000118F8                            
000118F8                            Obj5B_Main:				; XREF: Obj5B_Index
000118F8 5428 0024                  		addq.b	#2,$24(a0)
000118FC 7638                       		moveq	#$38,d3
000118FE 7801                       		moveq	#1,d4
00011900 0828 0000 0022             		btst	#0,$22(a0)
00011906 6700                       		beq.s	loc_10EDA
00011908 763B                       		moveq	#$3B,d3
0001190A 78FF                       		moveq	#-1,d4
0001190C                            
0001190C                            loc_10EDA:
0001190C 3428 0008                  		move.w	8(a0),d2
00011910 2248                       		movea.l	a0,a1
00011912 7203                       		moveq	#3,d1
00011914 6000                       		bra.s	Obj5B_MakeBlocks
00011916                            ; ===========================================================================
00011916                            
00011916                            Obj5B_Loop:
00011916 6100 CBC8                  		bsr.w	SingleObjLoad2
0001191A 6600 0000                  		bne.w	Obj5B_Move
0001191E 137C 0004 0024             		move.b	#4,$24(a1)
00011924                            
00011924                            Obj5B_MakeBlocks:			; XREF: Obj5B_Main
00011924 12BC 005B                  		move.b	#$5B,0(a1)	; load another block object
00011928 237C 0000 0000 0004        		move.l	#Map_obj5B,4(a1)
00011930 337C 4000 0002             		move.w	#$4000,2(a1)
00011936 137C 0004 0001             		move.b	#4,1(a1)
0001193C 137C 0003 0018             		move.b	#3,$18(a1)
00011942 137C 0010 0019             		move.b	#$10,$19(a1)
00011948 1368 0028 0028             		move.b	$28(a0),$28(a1)
0001194E 3342 0008                  		move.w	d2,8(a1)
00011952 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011958 3368 0008 0030             		move.w	8(a0),$30(a1)
0001195E 3369 000C 0032             		move.w	$C(a1),$32(a1)
00011964 0642 0020                  		addi.w	#$20,d2
00011968 1343 0037                  		move.b	d3,$37(a1)
0001196C 2348 003C                  		move.l	a0,$3C(a1)
00011970 D604                       		add.b	d4,d3
00011972 51C9 FFA2                  		dbf	d1,Obj5B_Loop	; repeat sequence 3 times
00011976                            
00011976                            Obj5B_Move:				; XREF: Obj5B_Index
00011976 7000                       		moveq	#0,d0
00011978 1028 0028                  		move.b	$28(a0),d0
0001197C 0240 0007                  		andi.w	#7,d0
00011980 D040                       		add.w	d0,d0
00011982 323B 0000                  		move.w	Obj5B_TypeIndex(pc,d0.w),d1
00011986 4EBB 1000                  		jsr	Obj5B_TypeIndex(pc,d1.w)
0001198A                            
0001198A                            Obj5B_Solid:				; XREF: Obj5B_Index
0001198A 2468 003C                  		movea.l	$3C(a0),a2
0001198E 7000                       		moveq	#0,d0
00011990 1028 0037                  		move.b	$37(a0),d0
00011994 1032 0000                  		move.b	(a2,d0.w),d0
00011998 D068 0032                  		add.w	$32(a0),d0
0001199C 3140 000C                  		move.w	d0,$C(a0)
000119A0 7200                       		moveq	#0,d1
000119A2 1228 0019                  		move.b	$19(a0),d1
000119A6 0641 000B                  		addi.w	#$B,d1
000119AA 343C 0010                  		move.w	#$10,d2
000119AE 363C 0011                  		move.w	#$11,d3
000119B2 3828 0008                  		move.w	8(a0),d4
000119B6 6100 EA5C                  		bsr.w	SolidObject
000119BA 4A04                       		tst.b	d4
000119BC 6A00                       		bpl.s	loc_10F92
000119BE 1544 0036                  		move.b	d4,$36(a2)
000119C2                            
000119C2                            loc_10F92:
000119C2 0828 0003 0022             		btst	#3,$22(a0)
000119C8 6700                       		beq.s	locret_10FA0
000119CA 157C 0001 0036             		move.b	#1,$36(a2)
000119D0                            
000119D0                            locret_10FA0:
000119D0 4E75                       		rts	
000119D2                            ; ===========================================================================
000119D2 0000                       Obj5B_TypeIndex:dc.w Obj5B_Type00-Obj5B_TypeIndex
000119D4 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
000119D6 0000                       		dc.w Obj5B_Type02-Obj5B_TypeIndex
000119D8 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
000119DA                            ; ===========================================================================
000119DA                            
000119DA                            Obj5B_Type00:				; XREF: Obj5B_TypeIndex
000119DA 4A68 0034                  		tst.w	$34(a0)
000119DE 6600                       		bne.s	loc_10FC0
000119E0 0C28 0001 0036             		cmpi.b	#1,$36(a0)
000119E6 6600                       		bne.s	locret_10FBE
000119E8 317C 001E 0034             		move.w	#$1E,$34(a0)
000119EE                            
000119EE                            locret_10FBE:
000119EE 4E75                       		rts	
000119F0                            ; ===========================================================================
000119F0                            
000119F0                            loc_10FC0:
000119F0 5368 0034                  		subq.w	#1,$34(a0)
000119F4 66F8                       		bne.s	locret_10FBE
000119F6 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
000119FA 4E75                       		rts	
000119FC                            ; ===========================================================================
000119FC                            
000119FC                            Obj5B_Type02:				; XREF: Obj5B_TypeIndex
000119FC 4A68 0034                  		tst.w	$34(a0)
00011A00 6600                       		bne.s	loc_10FE0
00011A02 4A28 0036                  		tst.b	$36(a0)
00011A06 6A00                       		bpl.s	locret_10FDE
00011A08 317C 003C 0034             		move.w	#$3C,$34(a0)
00011A0E                            
00011A0E                            locret_10FDE:
00011A0E 4E75                       		rts	
00011A10                            ; ===========================================================================
00011A10                            
00011A10                            loc_10FE0:
00011A10 5368 0034                  		subq.w	#1,$34(a0)
00011A14 6600                       		bne.s	loc_10FEC
00011A16 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00011A1A 4E75                       		rts	
00011A1C                            ; ===========================================================================
00011A1C                            
00011A1C                            loc_10FEC:
00011A1C 43E8 0038                  		lea	$38(a0),a1
00011A20 3028 0034                  		move.w	$34(a0),d0
00011A24 E408                       		lsr.b	#2,d0
00011A26 0200 0001                  		andi.b	#1,d0
00011A2A 12C0                       		move.b	d0,(a1)+
00011A2C 0A00 0001                  		eori.b	#1,d0
00011A30 12C0                       		move.b	d0,(a1)+
00011A32 0A00 0001                  		eori.b	#1,d0
00011A36 12C0                       		move.b	d0,(a1)+
00011A38 0A00 0001                  		eori.b	#1,d0
00011A3C 12C0                       		move.b	d0,(a1)+
00011A3E 4E75                       		rts	
00011A40                            ; ===========================================================================
00011A40                            
00011A40                            Obj5B_Type01:				; XREF: Obj5B_TypeIndex
00011A40 43E8 0038                  		lea	$38(a0),a1
00011A44 0C11 0080                  		cmpi.b	#$80,(a1)
00011A48 6700                       		beq.s	locret_11038
00011A4A 5211                       		addq.b	#1,(a1)
00011A4C 7200                       		moveq	#0,d1
00011A4E 1219                       		move.b	(a1)+,d1
00011A50 4841                       		swap	d1
00011A52 E289                       		lsr.l	#1,d1
00011A54 2401                       		move.l	d1,d2
00011A56 E289                       		lsr.l	#1,d1
00011A58 2601                       		move.l	d1,d3
00011A5A D682                       		add.l	d2,d3
00011A5C 4841                       		swap	d1
00011A5E 4842                       		swap	d2
00011A60 4843                       		swap	d3
00011A62 12C3                       		move.b	d3,(a1)+
00011A64 12C2                       		move.b	d2,(a1)+
00011A66 12C1                       		move.b	d1,(a1)+
00011A68                            
00011A68                            locret_11038:
00011A68 4E75                       		rts	
00011A6A 4E75                       		rts	
00011A6C                            ; ===========================================================================
00011A6C                            ; ---------------------------------------------------------------------------
00011A6C                            ; Sprite mappings - blocks that	form a staircase (SLZ)
00011A6C                            ; ---------------------------------------------------------------------------
00011A6C                            Map_obj5B:
00011A6C                            	include "_maps\obj5B.asm"
00011A6C                            ; ---------------------------------------------------------------------------
00011A6C                            ; Sprite mappings - blocks that	form a staircase (SLZ)
00011A6C                            ; ---------------------------------------------------------------------------
00011A6C 0000                       		dc.w byte_1103E-Map_obj5B
00011A6E 01                         byte_1103E:	dc.b 1
00011A6F F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
00011A74                            		even
00011A74                            		even
00011A74                            
00011A74                            ; ===========================================================================
00011A74                            ; ---------------------------------------------------------------------------
00011A74                            ; Object 5C - metal girders in foreground (SLZ)
00011A74                            ; ---------------------------------------------------------------------------
00011A74                            
00011A74                            Obj5C:					; XREF: Obj_Index
00011A74 7000                       		moveq	#0,d0
00011A76 1028 0024                  		move.b	$24(a0),d0
00011A7A 323B 0000                  		move.w	Obj5C_Index(pc,d0.w),d1
00011A7E 4EFB 1000                  		jmp	Obj5C_Index(pc,d1.w)
00011A82                            ; ===========================================================================
00011A82 0000                       Obj5C_Index:	dc.w Obj5C_Main-Obj5C_Index
00011A84 0000                       		dc.w Obj5C_Display-Obj5C_Index
00011A86                            ; ===========================================================================
00011A86                            
00011A86                            Obj5C_Main:				; XREF: Obj5C_Index
00011A86 5428 0024                  		addq.b	#2,$24(a0)
00011A8A 217C 0000 0000 0004        		move.l	#Map_obj5C,4(a0)
00011A92 317C 83CC 0002             		move.w	#$83CC,2(a0)
00011A98 117C 0010 0019             		move.b	#$10,$19(a0)
00011A9E                            
00011A9E                            Obj5C_Display:				; XREF: Obj5C_Index
00011A9E 2238 F700                  		move.l	($FFFFF700).w,d1
00011AA2 D281                       		add.l	d1,d1
00011AA4 4841                       		swap	d1
00011AA6 4441                       		neg.w	d1
00011AA8 3141 0008                  		move.w	d1,8(a0)
00011AAC 2238 F704                  		move.l	($FFFFF704).w,d1
00011AB0 D281                       		add.l	d1,d1
00011AB2 4841                       		swap	d1
00011AB4 0241 003F                  		andi.w	#$3F,d1
00011AB8 4441                       		neg.w	d1
00011ABA 0641 0100                  		addi.w	#$100,d1
00011ABE 3141 000A                  		move.w	d1,$A(a0)
00011AC2 6000 C580                  		bra.w	DisplaySprite
00011AC6                            ; ===========================================================================
00011AC6                            ; ---------------------------------------------------------------------------
00011AC6                            ; Sprite mappings - metal girders in foreground	(SLZ)
00011AC6                            ; ---------------------------------------------------------------------------
00011AC6                            Map_obj5C:
00011AC6                            	include "_maps\obj5C.asm"
00011AC6                            ; ---------------------------------------------------------------------------
00011AC6                            ; Sprite mappings - metal girders in foreground	(SLZ)
00011AC6                            ; ---------------------------------------------------------------------------
00011AC6 0000                       		dc.w byte_11098-Map_obj5C
00011AC8 09                         byte_11098:	dc.b 9
00011AC9 800F 0000 F0               		dc.b $80, $F, 0, 0, $F0
00011ACE A00F 1000 F0               		dc.b $A0, $F, $10, 0, $F0
00011AD3 C00F 0000 F0               		dc.b $C0, $F, 0, 0, $F0
00011AD8 E00F 1000 F0               		dc.b $E0, $F, $10, 0, $F0
00011ADD 000F 0000 F0               		dc.b 0,	$F, 0, 0, $F0
00011AE2 200F 1000 F0               		dc.b $20, $F, $10, 0, $F0
00011AE7 400F 0000 F0               		dc.b $40, $F, 0, 0, $F0
00011AEC 600F 1000 F0               		dc.b $60, $F, $10, 0, $F0
00011AF1 7F0F 0000 F0               		dc.b $7F, $F, 0, 0, $F0
00011AF6                            		even
00011AF6                            		even
00011AF6                            
00011AF6                            ; ===========================================================================
00011AF6                            ; ---------------------------------------------------------------------------
00011AF6                            ; Object 1B - water surface (LZ)
00011AF6                            ; ---------------------------------------------------------------------------
00011AF6                            
00011AF6                            Obj1B:					; XREF: Obj_Index
00011AF6 7000                       		moveq	#0,d0
00011AF8 1028 0024                  		move.b	$24(a0),d0
00011AFC 323B 0000                  		move.w	Obj1B_Index(pc,d0.w),d1
00011B00 4EFB 1000                  		jmp	Obj1B_Index(pc,d1.w)
00011B04                            ; ===========================================================================
00011B04 0000                       Obj1B_Index:	dc.w Obj1B_Main-Obj1B_Index
00011B06 0000                       		dc.w Obj1B_Action-Obj1B_Index
00011B08                            ; ===========================================================================
00011B08                            
00011B08                            Obj1B_Main:				; XREF: Obj1B_Index
00011B08 5428 0024                  		addq.b	#2,$24(a0)
00011B0C 217C 0000 0000 0004        		move.l	#Map_obj1B,4(a0)
00011B14 317C C300 0002             		move.w	#$C300,2(a0)
00011B1A 117C 0004 0001             		move.b	#4,1(a0)
00011B20 117C 0080 0019             		move.b	#$80,$19(a0)
00011B26 3168 0008 0030             		move.w	8(a0),$30(a0)
00011B2C                            
00011B2C                            Obj1B_Action:				; XREF: Obj1B_Index
00011B2C 3238 F700                  		move.w	($FFFFF700).w,d1
00011B30 0241 FFE0                  		andi.w	#$FFE0,d1
00011B34 D268 0030                  		add.w	$30(a0),d1
00011B38 0838 0000 FE05             		btst	#0,($FFFFFE05).w
00011B3E 6700                       		beq.s	loc_11114
00011B40 0641 0020                  		addi.w	#$20,d1
00011B44                            
00011B44                            loc_11114:
00011B44 3141 0008                  		move.w	d1,8(a0)	; match	obj x-position to screen position
00011B48 3238 F646                  		move.w	($FFFFF646).w,d1
00011B4C 3141 000C                  		move.w	d1,$C(a0)	; match	obj y-position to water	height
00011B50 4A28 0032                  		tst.b	$32(a0)
00011B54 6600                       		bne.s	Obj1B_Animate
00011B56 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
00011B5C 6700                       		beq.s	loc_1114A	; if not, branch
00011B5E 5628 001A                  		addq.b	#3,$1A(a0)	; use different	frames
00011B62 117C 0001 0032             		move.b	#1,$32(a0)	; stop animation
00011B68 6000                       		bra.s	Obj1B_Display
00011B6A                            ; ===========================================================================
00011B6A                            
00011B6A                            Obj1B_Animate:				; XREF: loc_11114
00011B6A 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
00011B6E 6600                       		bne.s	Obj1B_Display	; if yes, branch
00011B70 117C 0000 0032             		move.b	#0,$32(a0)	; resume animation
00011B76 5728 001A                  		subq.b	#3,$1A(a0)	; use normal frames
00011B7A                            
00011B7A                            loc_1114A:				; XREF: loc_11114
00011B7A 5328 001E                  		subq.b	#1,$1E(a0)
00011B7E 6A00                       		bpl.s	Obj1B_Display
00011B80 117C 0007 001E             		move.b	#7,$1E(a0)
00011B86 5228 001A                  		addq.b	#1,$1A(a0)
00011B8A 0C28 0003 001A             		cmpi.b	#3,$1A(a0)
00011B90 6500                       		bcs.s	Obj1B_Display
00011B92 117C 0000 001A             		move.b	#0,$1A(a0)
00011B98                            
00011B98                            Obj1B_Display:
00011B98 6000 C4AA                  		bra.w	DisplaySprite
00011B9C                            ; ===========================================================================
00011B9C                            ; ---------------------------------------------------------------------------
00011B9C                            ; Sprite mappings - water surface (LZ)
00011B9C                            ; ---------------------------------------------------------------------------
00011B9C                            Map_obj1B:
00011B9C                            	include "_maps\obj1B.asm"
00011B9C                            ; ---------------------------------------------------------------------------
00011B9C                            ; Sprite mappings - water surface (LZ)
00011B9C                            ; ---------------------------------------------------------------------------
00011B9C 0000 0000                  		dc.w byte_11178-Map_obj1B, byte_11188-Map_obj1B
00011BA0 0000 0000                  		dc.w byte_11198-Map_obj1B, byte_111A8-Map_obj1B
00011BA4 0000 0000                  		dc.w byte_111C7-Map_obj1B, byte_111E6-Map_obj1B
00011BA8 03                         byte_11178:	dc.b 3
00011BA9 FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
00011BAE FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
00011BB3 FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
00011BB8 03                         byte_11188:	dc.b 3
00011BB9 FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
00011BBE FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
00011BC3 FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
00011BC8 03                         byte_11198:	dc.b 3
00011BC9 FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
00011BCE FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
00011BD3 FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
00011BD8 06                         byte_111A8:	dc.b 6
00011BD9 FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
00011BDE FD0D 0000 C0               		dc.b $FD, $D, 0, 0, $C0
00011BE3 FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
00011BE8 FD0D 0000 00               		dc.b $FD, $D, 0, 0, 0
00011BED FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
00011BF2 FD0D 0000 40               		dc.b $FD, $D, 0, 0, $40
00011BF7 06                         byte_111C7:	dc.b 6
00011BF8 FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
00011BFD FD0D 0008 C0               		dc.b $FD, $D, 0, 8, $C0
00011C02 FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
00011C07 FD0D 0008 00               		dc.b $FD, $D, 0, 8, 0
00011C0C FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
00011C11 FD0D 0008 40               		dc.b $FD, $D, 0, 8, $40
00011C16 06                         byte_111E6:	dc.b 6
00011C17 FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
00011C1C FD0D 0800 C0               		dc.b $FD, $D, 8, 0, $C0
00011C21 FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
00011C26 FD0D 0800 00               		dc.b $FD, $D, 8, 0, 0
00011C2B FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
00011C30 FD0D 0800 40               		dc.b $FD, $D, 8, 0, $40
00011C36 00                         		even
00011C36 00                         		even
00011C36                            
00011C36                            ; ===========================================================================
00011C36                            ; ---------------------------------------------------------------------------
00011C36                            ; Object 0B - pole that	breaks (LZ)
00011C36                            ; ---------------------------------------------------------------------------
00011C36                            
00011C36                            Obj0B:					; XREF: Obj_Index
00011C36 7000                       		moveq	#0,d0
00011C38 1028 0024                  		move.b	$24(a0),d0
00011C3C 323B 0000                  		move.w	Obj0B_Index(pc,d0.w),d1
00011C40 4EFB 1000                  		jmp	Obj0B_Index(pc,d1.w)
00011C44                            ; ===========================================================================
00011C44 0000                       Obj0B_Index:	dc.w Obj0B_Main-Obj0B_Index
00011C46 0000                       		dc.w Obj0B_Action-Obj0B_Index
00011C48 0000                       		dc.w Obj0B_Display-Obj0B_Index
00011C4A                            ; ===========================================================================
00011C4A                            
00011C4A                            Obj0B_Main:				; XREF: Obj0B_Index
00011C4A 5428 0024                  		addq.b	#2,$24(a0)
00011C4E 217C 0000 0000 0004        		move.l	#Map_obj0B,4(a0)
00011C56 317C 43DE 0002             		move.w	#$43DE,2(a0)
00011C5C 117C 0004 0001             		move.b	#4,1(a0)
00011C62 117C 0008 0019             		move.b	#8,$19(a0)
00011C68 117C 0004 0018             		move.b	#4,$18(a0)
00011C6E 117C 00E1 0020             		move.b	#$E1,$20(a0)
00011C74 7000                       		moveq	#0,d0
00011C76 1028 0028                  		move.b	$28(a0),d0	; get object type
00011C7A C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
00011C7E 3140 0030                  		move.w	d0,$30(a0)	; set breakage time
00011C82                            
00011C82                            Obj0B_Action:				; XREF: Obj0B_Index
00011C82 4A28 0032                  		tst.b	$32(a0)
00011C86 6700                       		beq.s	Obj0B_Grab
00011C88 4A68 0030                  		tst.w	$30(a0)
00011C8C 6700                       		beq.s	Obj0B_MoveUp
00011C8E 5368 0030                  		subq.w	#1,$30(a0)
00011C92 6600                       		bne.s	Obj0B_MoveUp
00011C94 117C 0001 001A             		move.b	#1,$1A(a0)	; break	the pole
00011C9A 6000                       		bra.s	Obj0B_Release
00011C9C                            ; ===========================================================================
00011C9C                            
00011C9C                            Obj0B_MoveUp:				; XREF: Obj0B_Action
00011C9C 43F8 D000                  		lea	($FFFFD000).w,a1
00011CA0 3028 000C                  		move.w	$C(a0),d0
00011CA4 0440 0018                  		subi.w	#$18,d0
00011CA8 0838 0000 F604             		btst	#0,($FFFFF604).w ; check if "up" is pressed
00011CAE 6700                       		beq.s	Obj0B_MoveDown
00011CB0 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
00011CB4 B069 000C                  		cmp.w	$C(a1),d0
00011CB8 6500                       		bcs.s	Obj0B_MoveDown
00011CBA 3340 000C                  		move.w	d0,$C(a1)
00011CBE                            
00011CBE                            Obj0B_MoveDown:
00011CBE 0640 0024                  		addi.w	#$24,d0
00011CC2 0838 0001 F604             		btst	#1,($FFFFF604).w ; check if "down" is pressed
00011CC8 6700                       		beq.s	Obj0B_LetGo
00011CCA 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
00011CCE B069 000C                  		cmp.w	$C(a1),d0
00011CD2 6400                       		bcc.s	Obj0B_LetGo
00011CD4 3340 000C                  		move.w	d0,$C(a1)
00011CD8                            
00011CD8                            Obj0B_LetGo:
00011CD8 1038 F603                  		move.b	($FFFFF603).w,d0
00011CDC 0240 0070                  		andi.w	#$70,d0
00011CE0 6700                       		beq.s	Obj0B_Display
00011CE2                            
00011CE2                            Obj0B_Release:				; XREF: Obj0B_Action
00011CE2 4228 0020                  		clr.b	$20(a0)
00011CE6 5428 0024                  		addq.b	#2,$24(a0)
00011CEA 4238 F7C8                  		clr.b	($FFFFF7C8).w
00011CEE 4238 F7C9                  		clr.b	($FFFFF7C9).w
00011CF2 4228 0032                  		clr.b	$32(a0)
00011CF6 6000                       		bra.s	Obj0B_Display
00011CF8                            ; ===========================================================================
00011CF8                            
00011CF8                            Obj0B_Grab:				; XREF: Obj0B_Action
00011CF8 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	pole?
00011CFC 6700                       		beq.s	Obj0B_Display	; if not, branch
00011CFE 43F8 D000                  		lea	($FFFFD000).w,a1
00011D02 3028 0008                  		move.w	8(a0),d0
00011D06 0640 0014                  		addi.w	#$14,d0
00011D0A B069 0008                  		cmp.w	8(a1),d0
00011D0E 6400                       		bcc.s	Obj0B_Display
00011D10 4228 0021                  		clr.b	$21(a0)
00011D14 0C29 0004 0024             		cmpi.b	#4,$24(a1)
00011D1A 6400                       		bcc.s	Obj0B_Display
00011D1C 4269 0010                  		clr.w	$10(a1)		; stop Sonic moving
00011D20 4269 0012                  		clr.w	$12(a1)		; stop Sonic moving
00011D24 3028 0008                  		move.w	8(a0),d0
00011D28 0640 0014                  		addi.w	#$14,d0
00011D2C 3340 0008                  		move.w	d0,8(a1)
00011D30 08A9 0000 0022             		bclr	#0,$22(a1)
00011D36 137C 0011 001C             		move.b	#$11,$1C(a1)	; set Sonic's animation to "hanging" ($11)
00011D3C 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
00011D42 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
00011D48 117C 0001 0032             		move.b	#1,$32(a0)	; begin	countdown to breakage
00011D4E                            
00011D4E                            Obj0B_Display:				; XREF: Obj0B_Index
00011D4E 6000 E39C                  		bra.w	MarkObjGone
00011D52                            ; ===========================================================================
00011D52                            ; ---------------------------------------------------------------------------
00011D52                            ; Sprite mappings - pole that breaks (LZ)
00011D52                            ; ---------------------------------------------------------------------------
00011D52                            Map_obj0B:
00011D52                            	include "_maps\obj0B.asm"
00011D52                            ; ---------------------------------------------------------------------------
00011D52                            ; Sprite mappings - pole that breaks (LZ)
00011D52                            ; ---------------------------------------------------------------------------
00011D52 0000                       		dc.w byte_11326-Map_obj0B
00011D54 0000                       		dc.w byte_11331-Map_obj0B
00011D56 02                         byte_11326:	dc.b 2			; normal pole
00011D57 E003 0000 FC               		dc.b $E0, 3, 0,	0, $FC
00011D5C 0003 1000 FC               		dc.b 0,	3, $10,	0, $FC
00011D61 04                         byte_11331:	dc.b 4			; broken pole
00011D62 E001 0000 FC               		dc.b $E0, 1, 0,	0, $FC
00011D67 F005 0004 FC               		dc.b $F0, 5, 0,	4, $FC
00011D6C 0005 1004 FC               		dc.b 0,	5, $10,	4, $FC
00011D71 1001 1000 FC               		dc.b $10, 1, $10, 0, $FC
00011D76                            		even
00011D76                            		even
00011D76                            
00011D76                            ; ===========================================================================
00011D76                            ; ---------------------------------------------------------------------------
00011D76                            ; Object 0C - flapping door (LZ)
00011D76                            ; ---------------------------------------------------------------------------
00011D76                            
00011D76                            Obj0C:					; XREF: Obj_Index
00011D76 7000                       		moveq	#0,d0
00011D78 1028 0024                  		move.b	$24(a0),d0
00011D7C 323B 0000                  		move.w	Obj0C_Index(pc,d0.w),d1
00011D80 4EFB 1000                  		jmp	Obj0C_Index(pc,d1.w)
00011D84                            ; ===========================================================================
00011D84 0000                       Obj0C_Index:	dc.w Obj0C_Main-Obj0C_Index
00011D86 0000                       		dc.w Obj0C_OpenClose-Obj0C_Index
00011D88                            ; ===========================================================================
00011D88                            
00011D88                            Obj0C_Main:				; XREF: Obj0C_Index
00011D88 5428 0024                  		addq.b	#2,$24(a0)
00011D8C 217C 0000 0000 0004        		move.l	#Map_obj0C,4(a0)
00011D94 317C 4328 0002             		move.w	#$4328,2(a0)
00011D9A 0028 0004 0001             		ori.b	#4,1(a0)
00011DA0 117C 0028 0019             		move.b	#$28,$19(a0)
00011DA6 7000                       		moveq	#0,d0
00011DA8 1028 0028                  		move.b	$28(a0),d0	; get object type
00011DAC C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
00011DB0 3140 0032                  		move.w	d0,$32(a0)	; set flap delay time
00011DB4                            
00011DB4                            Obj0C_OpenClose:			; XREF: Obj0C_Index
00011DB4 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00011DB8 6A00                       		bpl.s	Obj0C_Solid	; if time remains, branch
00011DBA 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	time delay
00011DC0 0868 0000 001C             		bchg	#0,$1C(a0)	; open/close door
00011DC6 4A28 0001                  		tst.b	1(a0)
00011DCA 6A00                       		bpl.s	Obj0C_Solid
00011DCC 303C 00BB                  		move.w	#$BB,d0
00011DD0 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play door sound
00011DD6                            
00011DD6                            Obj0C_Solid:
00011DD6 43F9 0000 0000             		lea	(Ani_obj0C).l,a1
00011DDC 6100 92BC                  		bsr.w	AnimateSprite
00011DE0 4238 F7C9                  		clr.b	($FFFFF7C9).w	; enable wind tunnel
00011DE4 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
00011DE8 6600                       		bne.s	Obj0C_Display	; if yes, branch
00011DEA 3038 D008                  		move.w	($FFFFD008).w,d0
00011DEE B068 0008                  		cmp.w	8(a0),d0	; is Sonic in front of the door?
00011DF2 6400                       		bcc.s	Obj0C_Display	; if yes, branch
00011DF4 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
00011DFA 323C 0013                  		move.w	#$13,d1
00011DFE 343C 0020                  		move.w	#$20,d2
00011E02 3602                       		move.w	d2,d3
00011E04 5243                       		addq.w	#1,d3
00011E06 3828 0008                  		move.w	8(a0),d4
00011E0A 6100 E608                  		bsr.w	SolidObject	; make the door	solid
00011E0E                            
00011E0E                            Obj0C_Display:
00011E0E 6000 E2DC                  		bra.w	MarkObjGone
00011E12                            ; ===========================================================================
00011E12                            Ani_obj0C:
00011E12                            	include "_anim\obj0C.asm"
00011E12                            ; ---------------------------------------------------------------------------
00011E12                            ; Animation script - flapping door (LZ)
00011E12                            ; ---------------------------------------------------------------------------
00011E12 0000                       		dc.w byte_113E6-Ani_obj0C
00011E14 0000                       		dc.w byte_113EC-Ani_obj0C
00011E16 0300 0102 FE01             byte_113E6:	dc.b 3,	0, 1, 2, $FE, 1
00011E1C 0302 0100 FE01             byte_113EC:	dc.b 3,	2, 1, 0, $FE, 1
00011E22                            		even
00011E22                            		even
00011E22                            
00011E22                            ; ---------------------------------------------------------------------------
00011E22                            ; Sprite mappings - flapping door (LZ)
00011E22                            ; ---------------------------------------------------------------------------
00011E22                            Map_obj0C:
00011E22                            	include "_maps\obj0C.asm"
00011E22                            ; ---------------------------------------------------------------------------
00011E22                            ; Sprite mappings - flapping door (LZ)
00011E22                            ; ---------------------------------------------------------------------------
00011E22 0000                       		dc.w byte_113F8-Map_obj0C
00011E24 0000                       		dc.w byte_11403-Map_obj0C
00011E26 0000                       		dc.w byte_1140E-Map_obj0C
00011E28 02                         byte_113F8:	dc.b 2
00011E29 E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
00011E2E 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
00011E33 02                         byte_11403:	dc.b 2
00011E34 DA0F 0008 FB               		dc.b $DA, $F, 0, 8, $FB
00011E39 060F 1008 FB               		dc.b 6,	$F, $10, 8, $FB
00011E3E 02                         byte_1140E:	dc.b 2
00011E3F D80D 0018 00               		dc.b $D8, $D, 0, $18, 0
00011E44 180D 1018 00               		dc.b $18, $D, $10, $18,	0
00011E4A 00                         		even
00011E4A 00                         		even
00011E4A                            
00011E4A                            ; ===========================================================================
00011E4A                            ; ---------------------------------------------------------------------------
00011E4A                            ; Object 71 - invisible	solid blocks
00011E4A                            ; ---------------------------------------------------------------------------
00011E4A                            
00011E4A                            Obj71:					; XREF: Obj_Index
00011E4A 7000                       		moveq	#0,d0
00011E4C 1028 0024                  		move.b	$24(a0),d0
00011E50 323B 0000                  		move.w	Obj71_Index(pc,d0.w),d1
00011E54 4EFB 1000                  		jmp	Obj71_Index(pc,d1.w)
00011E58                            ; ===========================================================================
00011E58 0000                       Obj71_Index:	dc.w Obj71_Main-Obj71_Index
00011E5A 0000                       		dc.w Obj71_Solid-Obj71_Index
00011E5C                            ; ===========================================================================
00011E5C                            
00011E5C                            Obj71_Main:				; XREF: Obj71_Index
00011E5C 5428 0024                  		addq.b	#2,$24(a0)
00011E60 217C 0000 0000 0004        		move.l	#Map_obj71,4(a0)
00011E68 317C 8680 0002             		move.w	#$8680,2(a0)
00011E6E 0028 0004 0001             		ori.b	#4,1(a0)
00011E74 1028 0028                  		move.b	$28(a0),d0	; get object type
00011E78 1200                       		move.b	d0,d1
00011E7A 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st byte
00011E7E 0640 0010                  		addi.w	#$10,d0
00011E82 E248                       		lsr.w	#1,d0
00011E84 1140 0019                  		move.b	d0,$19(a0)	; set object width
00011E88 0241 000F                  		andi.w	#$F,d1		; read only the	2nd byte
00011E8C 5241                       		addq.w	#1,d1
00011E8E E749                       		lsl.w	#3,d1
00011E90 1141 0016                  		move.b	d1,$16(a0)	; set object height
00011E94                            
00011E94                            Obj71_Solid:				; XREF: Obj71_Index
00011E94 6100 C428                  		bsr.w	ChkObjOnScreen
00011E98 6600                       		bne.s	Obj71_ChkDel
00011E9A 7200                       		moveq	#0,d1
00011E9C 1228 0019                  		move.b	$19(a0),d1
00011EA0 0641 000B                  		addi.w	#$B,d1
00011EA4 7400                       		moveq	#0,d2
00011EA6 1428 0016                  		move.b	$16(a0),d2
00011EAA 3602                       		move.w	d2,d3
00011EAC 5243                       		addq.w	#1,d3
00011EAE 3828 0008                  		move.w	8(a0),d4
00011EB2 6100 E5A8                  		bsr.w	SolidObject71
00011EB6                            
00011EB6                            Obj71_ChkDel:
00011EB6 3028 0008                  		move.w	8(a0),d0
00011EBA 0240 FF80                  		andi.w	#$FF80,d0
00011EBE 3238 F700                  		move.w	($FFFFF700).w,d1
00011EC2 0441 0080                  		subi.w	#$80,d1
00011EC6 0241 FF80                  		andi.w	#$FF80,d1
00011ECA 9041                       		sub.w	d1,d0
00011ECC 0C40 0280                  		cmpi.w	#$280,d0
00011ED0 6200                       		bhi.s	Obj71_Delete
00011ED2 4A78 FE08                  		tst.w	($FFFFFE08).w	; are you using	debug mode?
00011ED6 6700                       		beq.s	Obj71_NoDisplay	; if not, branch
00011ED8 4EFA C16A                  		jmp	DisplaySprite	; if yes, display the object
00011EDC                            ; ===========================================================================
00011EDC                            
00011EDC                            Obj71_NoDisplay:
00011EDC 4E75                       		rts	
00011EDE                            ; ===========================================================================
00011EDE                            
00011EDE                            Obj71_Delete:
00011EDE 4EFA C1A0                  		jmp	DeleteObject
00011EE2                            ; ===========================================================================
00011EE2                            ; ---------------------------------------------------------------------------
00011EE2                            ; Sprite mappings - invisible solid blocks
00011EE2                            ; ---------------------------------------------------------------------------
00011EE2                            Map_obj71:
00011EE2                            	include "_maps\obj71.asm"
00011EE2                            ; ---------------------------------------------------------------------------
00011EE2                            ; Sprite mappings - invisible solid blocks
00011EE2                            ; ---------------------------------------------------------------------------
00011EE2 0000                       		dc.w byte_114BC-Map_obj71
00011EE4 0000                       		dc.w byte_114D1-Map_obj71
00011EE6 0000                       		dc.w byte_114E6-Map_obj71
00011EE8 04                         byte_114BC:	dc.b 4
00011EE9 F005 0018 F0               		dc.b $F0, 5, 0,	$18, $F0
00011EEE F005 0018 00               		dc.b $F0, 5, 0,	$18, 0
00011EF3 0005 0018 F0               		dc.b 0,	5, 0, $18, $F0
00011EF8 0005 0018 00               		dc.b 0,	5, 0, $18, 0
00011EFD 04                         byte_114D1:	dc.b 4
00011EFE E005 0018 C0               		dc.b $E0, 5, 0,	$18, $C0
00011F03 E005 0018 30               		dc.b $E0, 5, 0,	$18, $30
00011F08 1005 0018 C0               		dc.b $10, 5, 0,	$18, $C0
00011F0D 1005 0018 30               		dc.b $10, 5, 0,	$18, $30
00011F12 04                         byte_114E6:	dc.b 4
00011F13 E005 0018 80               		dc.b $E0, 5, 0,	$18, $80
00011F18 E005 0018 70               		dc.b $E0, 5, 0,	$18, $70
00011F1D 1005 0018 80               		dc.b $10, 5, 0,	$18, $80
00011F22 1005 0018 70               		dc.b $10, 5, 0,	$18, $70
00011F28 00                         		even
00011F28 00                         		even
00011F28                            
00011F28                            ; ===========================================================================
00011F28                            ; ---------------------------------------------------------------------------
00011F28                            ; Object 5D - fans (SLZ)
00011F28                            ; ---------------------------------------------------------------------------
00011F28                            
00011F28                            Obj5D:					; XREF: Obj_Index
00011F28 7000                       		moveq	#0,d0
00011F2A 1028 0024                  		move.b	$24(a0),d0
00011F2E 323B 0000                  		move.w	Obj5D_Index(pc,d0.w),d1
00011F32 4EFB 1000                  		jmp	Obj5D_Index(pc,d1.w)
00011F36                            ; ===========================================================================
00011F36 0000                       Obj5D_Index:	dc.w Obj5D_Main-Obj5D_Index
00011F38 0000                       		dc.w Obj5D_Delay-Obj5D_Index
00011F3A                            ; ===========================================================================
00011F3A                            
00011F3A                            Obj5D_Main:				; XREF: Obj5D_Index
00011F3A 5428 0024                  		addq.b	#2,$24(a0)
00011F3E 217C 0000 0000 0004        		move.l	#Map_obj5D,4(a0)
00011F46 317C 43A0 0002             		move.w	#$43A0,2(a0)
00011F4C 0028 0004 0001             		ori.b	#4,1(a0)
00011F52 117C 0010 0019             		move.b	#$10,$19(a0)
00011F58 117C 0004 0018             		move.b	#4,$18(a0)
00011F5E                            
00011F5E                            Obj5D_Delay:				; XREF: Obj5D_Index
00011F5E 0828 0001 0028             		btst	#1,$28(a0)	; is object type 02/03?
00011F64 6600                       		bne.s	Obj5D_Blow	; if yes, branch
00011F66 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00011F6A 6A00                       		bpl.s	Obj5D_Blow	; if time remains, branch
00011F6C 317C 0078 0030             		move.w	#120,$30(a0)	; set delay to 2 seconds
00011F72 0868 0000 0032             		bchg	#0,$32(a0)	; switch fan on/off
00011F78 6700                       		beq.s	Obj5D_Blow	; if fan is off, branch
00011F7A 317C 00B4 0030             		move.w	#180,$30(a0)	; set delay to 3 seconds
00011F80                            
00011F80                            Obj5D_Blow:
00011F80 4A28 0032                  		tst.b	$32(a0)		; is fan switched on?
00011F84 6600 0000                  		bne.w	Obj5D_ChkDel	; if not, branch
00011F88 43F8 D000                  		lea	($FFFFD000).w,a1
00011F8C 3029 0008                  		move.w	8(a1),d0
00011F90 9068 0008                  		sub.w	8(a0),d0
00011F94 0828 0000 0022             		btst	#0,$22(a0)
00011F9A 6600                       		bne.s	Obj5D_ChkSonic
00011F9C 4440                       		neg.w	d0
00011F9E                            
00011F9E                            Obj5D_ChkSonic:
00011F9E 0640 0050                  		addi.w	#$50,d0
00011FA2 0C40 00F0                  		cmpi.w	#$F0,d0		; is Sonic more	than $A0 pixels	from the fan?
00011FA6 6400                       		bcc.s	Obj5D_Animate	; if yes, branch
00011FA8 3229 000C                  		move.w	$C(a1),d1
00011FAC 0641 0060                  		addi.w	#$60,d1
00011FB0 9268 000C                  		sub.w	$C(a0),d1
00011FB4 6500                       		bcs.s	Obj5D_Animate
00011FB6 0C41 0070                  		cmpi.w	#$70,d1
00011FBA 6400                       		bcc.s	Obj5D_Animate
00011FBC 0440 0050                  		subi.w	#$50,d0
00011FC0 6400                       		bcc.s	loc_1159A
00011FC2 4640                       		not.w	d0
00011FC4 D040                       		add.w	d0,d0
00011FC6                            
00011FC6                            loc_1159A:
00011FC6 0640 0060                  		addi.w	#$60,d0
00011FCA 0828 0000 0022             		btst	#0,$22(a0)
00011FD0 6600                       		bne.s	loc_115A8
00011FD2 4440                       		neg.w	d0
00011FD4                            
00011FD4                            loc_115A8:
00011FD4 4400                       		neg.b	d0
00011FD6 E840                       		asr.w	#4,d0
00011FD8 0828 0000 0028             		btst	#0,$28(a0)
00011FDE 6700                       		beq.s	Obj5D_MoveSonic
00011FE0 4440                       		neg.w	d0
00011FE2                            
00011FE2                            Obj5D_MoveSonic:
00011FE2 D169 0008                  		add.w	d0,8(a1)	; push Sonic away from the fan
00011FE6                            
00011FE6                            Obj5D_Animate:				; XREF: Obj5D_ChkSonic
00011FE6 5328 001E                  		subq.b	#1,$1E(a0)
00011FEA 6A00                       		bpl.s	Obj5D_ChkDel
00011FEC 117C 0000 001E             		move.b	#0,$1E(a0)
00011FF2 5228 001B                  		addq.b	#1,$1B(a0)
00011FF6 0C28 0003 001B             		cmpi.b	#3,$1B(a0)
00011FFC 6500                       		bcs.s	loc_115D8
00011FFE 117C 0000 001B             		move.b	#0,$1B(a0)
00012004                            
00012004                            loc_115D8:
00012004 7000                       		moveq	#0,d0
00012006 0828 0000 0028             		btst	#0,$28(a0)
0001200C 6700                       		beq.s	loc_115E4
0001200E 7002                       		moveq	#2,d0
00012010                            
00012010                            loc_115E4:
00012010 D028 001B                  		add.b	$1B(a0),d0
00012014 1140 001A                  		move.b	d0,$1A(a0)
00012018                            
00012018                            Obj5D_ChkDel:				; XREF: Obj5D_Animate
00012018 6100 C02A                  		bsr.w	DisplaySprite
0001201C 3028 0008                  		move.w	8(a0),d0
00012020 0240 FF80                  		andi.w	#$FF80,d0
00012024 3238 F700                  		move.w	($FFFFF700).w,d1
00012028 0441 0080                  		subi.w	#$80,d1
0001202C 0241 FF80                  		andi.w	#$FF80,d1
00012030 9041                       		sub.w	d1,d0
00012032 0C40 0280                  		cmpi.w	#$280,d0
00012036 6200 C048                  		bhi.w	DeleteObject
0001203A 4E75                       		rts	
0001203C                            ; ===========================================================================
0001203C                            ; ---------------------------------------------------------------------------
0001203C                            ; Sprite mappings - fans (SLZ)
0001203C                            ; ---------------------------------------------------------------------------
0001203C                            Map_obj5D:
0001203C                            	include "_maps\obj5D.asm"
0001203C                            ; ---------------------------------------------------------------------------
0001203C                            ; Sprite mappings - fans (SLZ)
0001203C                            ; ---------------------------------------------------------------------------
0001203C 0000 0000                  		dc.w byte_1161A-Map_obj5D, byte_11625-Map_obj5D
00012040 0000 0000                  		dc.w byte_11630-Map_obj5D, byte_11625-Map_obj5D
00012044 0000                       		dc.w byte_1161A-Map_obj5D
00012046 02                         byte_1161A:	dc.b 2
00012047 F009 0000 F8               		dc.b $F0, 9, 0,	0, $F8
0001204C 000D 0006 F0               		dc.b 0,	$D, 0, 6, $F0
00012051 02                         byte_11625:	dc.b 2
00012052 F00D 000E F0               		dc.b $F0, $D, 0, $E, $F0
00012057 000D 0016 F0               		dc.b 0,	$D, 0, $16, $F0
0001205C 02                         byte_11630:	dc.b 2
0001205D F00D 001E F0               		dc.b $F0, $D, 0, $1E, $F0
00012062 0009 0026 F8               		dc.b 0,	9, 0, $26, $F8
00012068 00                         		even
00012068 00                         		even
00012068                            
00012068                            ; ===========================================================================
00012068                            ; ---------------------------------------------------------------------------
00012068                            ; Object 5E - seesaws (SLZ)
00012068                            ; ---------------------------------------------------------------------------
00012068                            
00012068                            Obj5E:					; XREF: Obj_Index
00012068 7000                       		moveq	#0,d0
0001206A 1028 0024                  		move.b	$24(a0),d0
0001206E 323B 0000                  		move.w	Obj5E_Index(pc,d0.w),d1
00012072 4EBB 1000                  		jsr	Obj5E_Index(pc,d1.w)
00012076 3028 0030                  		move.w	$30(a0),d0
0001207A 0240 FF80                  		andi.w	#$FF80,d0
0001207E 3238 F700                  		move.w	($FFFFF700).w,d1
00012082 0441 0080                  		subi.w	#$80,d1
00012086 0241 FF80                  		andi.w	#$FF80,d1
0001208A 9041                       		sub.w	d1,d0
0001208C 6B00 BFF2                  		bmi.w	DeleteObject
00012090 0C40 0280                  		cmpi.w	#$280,d0
00012094 6200 BFEA                  		bhi.w	DeleteObject
00012098 6000 BFAA                  		bra.w	DisplaySprite
0001209C                            ; ===========================================================================
0001209C 0000                       Obj5E_Index:	dc.w Obj5E_Main-Obj5E_Index
0001209E 0000                       		dc.w Obj5E_Slope-Obj5E_Index
000120A0 0000                       		dc.w Obj5E_Slope2-Obj5E_Index
000120A2 0000                       		dc.w Obj5E_Spikeball-Obj5E_Index
000120A4 0000                       		dc.w Obj5E_MoveSpike-Obj5E_Index
000120A6 0000                       		dc.w Obj5E_SpikeFall-Obj5E_Index
000120A8                            ; ===========================================================================
000120A8                            
000120A8                            Obj5E_Main:				; XREF: Obj5E_Index
000120A8 5428 0024                  		addq.b	#2,$24(a0)
000120AC 217C 0000 0000 0004        		move.l	#Map_obj5E,4(a0)
000120B4 317C 0374 0002             		move.w	#$374,2(a0)
000120BA 0028 0004 0001             		ori.b	#4,1(a0)
000120C0 117C 0004 0018             		move.b	#4,$18(a0)
000120C6 117C 0030 0019             		move.b	#$30,$19(a0)
000120CC 3168 0008 0030             		move.w	8(a0),$30(a0)
000120D2 4A28 0028                  		tst.b	$28(a0)		; is object type 00 ?
000120D6 6600                       		bne.s	loc_116D2	; if not, branch
000120D8 6100 C406                  		bsr.w	SingleObjLoad2
000120DC 6600                       		bne.s	loc_116D2
000120DE 12BC 005E                  		move.b	#$5E,0(a1)	; load spikeball object
000120E2 5C29 0024                  		addq.b	#6,$24(a1)
000120E6 3368 0008 0008             		move.w	8(a0),8(a1)
000120EC 3368 000C 000C             		move.w	$C(a0),$C(a1)
000120F2 1368 0022 0022             		move.b	$22(a0),$22(a1)
000120F8 2348 003C                  		move.l	a0,$3C(a1)
000120FC                            
000120FC                            loc_116D2:
000120FC 0828 0000 0022             		btst	#0,$22(a0)
00012102 6700                       		beq.s	loc_116E0
00012104 117C 0002 001A             		move.b	#2,$1A(a0)
0001210A                            
0001210A                            loc_116E0:
0001210A 1168 001A 003A             		move.b	$1A(a0),$3A(a0)
00012110                            
00012110                            Obj5E_Slope:				; XREF: Obj5E_Index
00012110 1228 003A                  		move.b	$3A(a0),d1
00012114 6100 0000                  		bsr.w	loc_11766
00012118 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
0001211E 0828 0000 001A             		btst	#0,$1A(a0)
00012124 6700                       		beq.s	loc_11702
00012126 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
0001212C                            
0001212C                            loc_11702:
0001212C 43F8 D000                  		lea	($FFFFD000).w,a1
00012130 3169 0012 0038             		move.w	$12(a1),$38(a0)
00012136 323C 0030                  		move.w	#$30,d1
0001213A 4EB9 0000 7D2A             		jsr	(SlopeObject).l
00012140 4E75                       		rts	
00012142                            ; ===========================================================================
00012142                            
00012142                            Obj5E_Slope2:				; XREF: Obj5E_Index
00012142 6100 0000                  		bsr.w	loc_1174A
00012146 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
0001214C 0828 0000 001A             		btst	#0,$1A(a0)
00012152 6700                       		beq.s	loc_11730
00012154 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
0001215A                            
0001215A                            loc_11730:
0001215A 323C 0030                  		move.w	#$30,d1
0001215E 4EB9 0000 7DCA             		jsr	(ExitPlatform).l
00012164 323C 0030                  		move.w	#$30,d1
00012168 3428 0008                  		move.w	8(a0),d2
0001216C 4EB9 0000 8DBA             		jsr	SlopeObject2
00012172 4E75                       		rts	
00012174                            ; ===========================================================================
00012174                            
00012174                            loc_1174A:				; XREF: Obj5E_Slope2
00012174 7202                       		moveq	#2,d1
00012176 43F8 D000                  		lea	($FFFFD000).w,a1
0001217A 3028 0008                  		move.w	8(a0),d0
0001217E 9069 0008                  		sub.w	8(a1),d0
00012182 6400                       		bcc.s	loc_1175E
00012184 4440                       		neg.w	d0
00012186 7200                       		moveq	#0,d1
00012188                            
00012188                            loc_1175E:
00012188 0C40 0008                  		cmpi.w	#8,d0
0001218C 6400                       		bcc.s	loc_11766
0001218E 7201                       		moveq	#1,d1
00012190                            
00012190                            loc_11766:
00012190 1028 001A                  		move.b	$1A(a0),d0
00012194 B001                       		cmp.b	d1,d0
00012196 6700                       		beq.s	locret_11790
00012198 6400                       		bcc.s	loc_11772
0001219A 5400                       		addq.b	#2,d0
0001219C                            
0001219C                            loc_11772:
0001219C 5300                       		subq.b	#1,d0
0001219E 1140 001A                  		move.b	d0,$1A(a0)
000121A2 1141 003A                  		move.b	d1,$3A(a0)
000121A6 08A8 0000 0001             		bclr	#0,1(a0)
000121AC 0828 0001 001A             		btst	#1,$1A(a0)
000121B2 6700                       		beq.s	locret_11790
000121B4 08E8 0000 0001             		bset	#0,1(a0)
000121BA                            
000121BA                            locret_11790:
000121BA 4E75                       		rts	
000121BC                            ; ===========================================================================
000121BC                            
000121BC                            Obj5E_Spikeball:			; XREF: Obj5E_Index
000121BC 5428 0024                  		addq.b	#2,$24(a0)
000121C0 217C 0000 0000 0004        		move.l	#Map_obj5Ea,4(a0)
000121C8 317C 04F0 0002             		move.w	#$4F0,2(a0)
000121CE 0028 0004 0001             		ori.b	#4,1(a0)
000121D4 117C 0004 0018             		move.b	#4,$18(a0)
000121DA 117C 008B 0020             		move.b	#$8B,$20(a0)
000121E0 117C 000C 0019             		move.b	#$C,$19(a0)
000121E6 3168 0008 0030             		move.w	8(a0),$30(a0)
000121EC 0668 0028 0008             		addi.w	#$28,8(a0)
000121F2 3168 000C 0034             		move.w	$C(a0),$34(a0)
000121F8 117C 0001 001A             		move.b	#1,$1A(a0)
000121FE 0828 0000 0022             		btst	#0,$22(a0)
00012204 6700                       		beq.s	Obj5E_MoveSpike
00012206 0468 0050 0008             		subi.w	#$50,8(a0)
0001220C 117C 0002 003A             		move.b	#2,$3A(a0)
00012212                            
00012212                            Obj5E_MoveSpike:			; XREF: Obj5E_Index
00012212 2268 003C                  		movea.l	$3C(a0),a1
00012216 7000                       		moveq	#0,d0
00012218 1028 003A                  		move.b	$3A(a0),d0
0001221C 9029 003A                  		sub.b	$3A(a1),d0
00012220 6700                       		beq.s	loc_1183E
00012222 6400                       		bcc.s	loc_117FC
00012224 4400                       		neg.b	d0
00012226                            
00012226                            loc_117FC:
00012226 323C F7E8                  		move.w	#-$818,d1
0001222A 343C FEEC                  		move.w	#-$114,d2
0001222E 0C00 0001                  		cmpi.b	#1,d0
00012232 6700                       		beq.s	loc_11822
00012234 323C F510                  		move.w	#-$AF0,d1
00012238 343C FF34                  		move.w	#-$CC,d2
0001223C 0C69 0A00 0038             		cmpi.w	#$A00,$38(a1)
00012242 6D00                       		blt.s	loc_11822
00012244 323C F200                  		move.w	#-$E00,d1
00012248 343C FF60                  		move.w	#-$A0,d2
0001224C                            
0001224C                            loc_11822:
0001224C 3141 0012                  		move.w	d1,$12(a0)
00012250 3142 0010                  		move.w	d2,$10(a0)
00012254 3028 0008                  		move.w	8(a0),d0
00012258 9068 0030                  		sub.w	$30(a0),d0
0001225C 6400                       		bcc.s	loc_11838
0001225E 4468 0010                  		neg.w	$10(a0)
00012262                            
00012262                            loc_11838:
00012262 5428 0024                  		addq.b	#2,$24(a0)
00012266 6000                       		bra.s	Obj5E_SpikeFall
00012268                            ; ===========================================================================
00012268                            
00012268                            loc_1183E:				; XREF: Obj5E_MoveSpike
00012268 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
0001226E 7000                       		moveq	#0,d0
00012270 1029 001A                  		move.b	$1A(a1),d0
00012274 343C 0028                  		move.w	#$28,d2
00012278 3228 0008                  		move.w	8(a0),d1
0001227C 9268 0030                  		sub.w	$30(a0),d1
00012280 6400                       		bcc.s	loc_1185C
00012282 4442                       		neg.w	d2
00012284 5440                       		addq.w	#2,d0
00012286                            
00012286                            loc_1185C:
00012286 D040                       		add.w	d0,d0
00012288 3228 0034                  		move.w	$34(a0),d1
0001228C D272 0000                  		add.w	(a2,d0.w),d1
00012290 3141 000C                  		move.w	d1,$C(a0)
00012294 D468 0030                  		add.w	$30(a0),d2
00012298 3142 0008                  		move.w	d2,8(a0)
0001229C 4268 000E                  		clr.w	$E(a0)
000122A0 4268 000A                  		clr.w	$A(a0)
000122A4 4E75                       		rts	
000122A6                            ; ===========================================================================
000122A6                            
000122A6                            Obj5E_SpikeFall:			; XREF: Obj5E_Index
000122A6 4A68 0012                  		tst.w	$12(a0)
000122AA 6A00                       		bpl.s	loc_1189A
000122AC 6100 BCFE                  		bsr.w	ObjectFall
000122B0 3028 0034                  		move.w	$34(a0),d0
000122B4 0440 002F                  		subi.w	#$2F,d0
000122B8 B068 000C                  		cmp.w	$C(a0),d0
000122BC 6E00                       		bgt.s	locret_11898
000122BE 6100 BCEC                  		bsr.w	ObjectFall
000122C2                            
000122C2                            locret_11898:
000122C2 4E75                       		rts	
000122C4                            ; ===========================================================================
000122C4                            
000122C4                            loc_1189A:				; XREF: Obj5E_SpikeFall
000122C4 6100 BCE6                  		bsr.w	ObjectFall
000122C8 2268 003C                  		movea.l	$3C(a0),a1
000122CC 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
000122D2 7000                       		moveq	#0,d0
000122D4 1029 001A                  		move.b	$1A(a1),d0
000122D8 3228 0008                  		move.w	8(a0),d1
000122DC 9268 0030                  		sub.w	$30(a0),d1
000122E0 6400                       		bcc.s	loc_118BA
000122E2 5440                       		addq.w	#2,d0
000122E4                            
000122E4                            loc_118BA:
000122E4 D040                       		add.w	d0,d0
000122E6 3228 0034                  		move.w	$34(a0),d1
000122EA D272 0000                  		add.w	(a2,d0.w),d1
000122EE B268 000C                  		cmp.w	$C(a0),d1
000122F2 6E00                       		bgt.s	locret_11938
000122F4 2268 003C                  		movea.l	$3C(a0),a1
000122F8 7202                       		moveq	#2,d1
000122FA 4A68 0010                  		tst.w	$10(a0)
000122FE 6B00                       		bmi.s	Obj5E_Spring
00012300 7200                       		moveq	#0,d1
00012302                            
00012302                            Obj5E_Spring:
00012302 1341 003A                  		move.b	d1,$3A(a1)
00012306 1141 003A                  		move.b	d1,$3A(a0)
0001230A B229 001A                  		cmp.b	$1A(a1),d1
0001230E 6700                       		beq.s	loc_1192C
00012310 08A9 0003 0022             		bclr	#3,$22(a1)
00012316 6700                       		beq.s	loc_1192C
00012318 4229 0025                  		clr.b	$25(a1)
0001231C 137C 0002 0024             		move.b	#2,$24(a1)
00012322 45F8 D000                  		lea	($FFFFD000).w,a2
00012326 3568 0012 0012             		move.w	$12(a0),$12(a2)
0001232C 446A 0012                  		neg.w	$12(a2)
00012330 08EA 0001 0022             		bset	#1,$22(a2)
00012336 08AA 0003 0022             		bclr	#3,$22(a2)
0001233C 422A 003C                  		clr.b	$3C(a2)
00012340 157C 0010 001C             		move.b	#$10,$1C(a2)	; change Sonic's animation to "spring" ($10)
00012346 157C 0002 0024             		move.b	#2,$24(a2)
0001234C 303C 00CC                  		move.w	#$CC,d0
00012350 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play spring sound
00012356                            
00012356                            loc_1192C:
00012356 4268 0010                  		clr.w	$10(a0)
0001235A 4268 0012                  		clr.w	$12(a0)
0001235E 5528 0024                  		subq.b	#2,$24(a0)
00012362                            
00012362                            locret_11938:
00012362 4E75                       		rts	
00012364                            ; ===========================================================================
00012364 FFF8 FFE4 FFD1 FFE4 FFF8   Obj5E_Speeds:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
0001236E                            
0001236E                            Obj5E_Data1:	incbin	misc\slzssaw1.bin
0001239E                            		even
0001239E                            Obj5E_Data2:	incbin	misc\slzssaw2.bin
000123CE                            		even
000123CE                            ; ---------------------------------------------------------------------------
000123CE                            ; Sprite mappings - seesaws (SLZ)
000123CE                            ; ---------------------------------------------------------------------------
000123CE                            Map_obj5E:
000123CE                            	include "_maps\obj5E.asm"
000123CE                            ; ---------------------------------------------------------------------------
000123CE                            ; Sprite mappings - seesaws (SLZ)
000123CE                            ; ---------------------------------------------------------------------------
000123CE 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
000123D2 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
000123D6 07                         byte_119AC:	dc.b 7
000123D7 D406 0000 D3               		dc.b $D4, 6, 0,	0, $D3
000123DC DC06 0006 E3               		dc.b $DC, 6, 0,	6, $E3
000123E1 E404 000C F3               		dc.b $E4, 4, 0,	$C, $F3
000123E6 EC0D 000E F3               		dc.b $EC, $D, 0, $E, $F3
000123EB FC08 0016 FB               		dc.b $FC, 8, 0,	$16, $FB
000123F0 F406 0006 13               		dc.b $F4, 6, 0,	6, $13
000123F5 FC05 0019 23               		dc.b $FC, 5, 0,	$19, $23
000123FA 04                         byte_119D0:	dc.b 4
000123FB E60A 001D D0               		dc.b $E6, $A, 0, $1D, $D0
00012400 E60A 0023 E8               		dc.b $E6, $A, 0, $23, $E8
00012405 E60A 0823 00               		dc.b $E6, $A, 8, $23, 0
0001240A E60A 081D 18               		dc.b $E6, $A, 8, $1D, $18
00012410 00                         		even
00012410 00                         		even
00012410                            
00012410                            ; ---------------------------------------------------------------------------
00012410                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
00012410                            ; ---------------------------------------------------------------------------
00012410                            Map_obj5Ea:
00012410                            	include "_maps\obj5Eballs.asm"
00012410                            ; ---------------------------------------------------------------------------
00012410                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
00012410                            ; ---------------------------------------------------------------------------
00012410 0000                       		dc.w byte_119EA-Map_obj5Ea
00012412 0000                       		dc.w byte_119F0-Map_obj5Ea
00012414 01                         byte_119EA:	dc.b 1
00012415 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001241A 01                         byte_119F0:	dc.b 1
0001241B F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
00012420                            		even
00012420                            		even
00012420                            
00012420                            ; ===========================================================================
00012420                            ; ---------------------------------------------------------------------------
00012420                            ; Object 5F - walking bomb enemy (SLZ, SBZ)
00012420                            ; ---------------------------------------------------------------------------
00012420                            
00012420                            Obj5F:					; XREF: Obj_Index
00012420 7000                       		moveq	#0,d0
00012422 1028 0024                  		move.b	$24(a0),d0
00012426 323B 0000                  		move.w	Obj5F_Index(pc,d0.w),d1
0001242A 4EFB 1000                  		jmp	Obj5F_Index(pc,d1.w)
0001242E                            ; ===========================================================================
0001242E 0000                       Obj5F_Index:	dc.w Obj5F_Main-Obj5F_Index
00012430 0000                       		dc.w Obj5F_Action-Obj5F_Index
00012432 0000                       		dc.w Obj5F_Display-Obj5F_Index
00012434 0000                       		dc.w Obj5F_End-Obj5F_Index
00012436                            ; ===========================================================================
00012436                            
00012436                            Obj5F_Main:				; XREF: Obj5F_Index
00012436 5428 0024                  		addq.b	#2,$24(a0)
0001243A 217C 0000 0000 0004        		move.l	#Map_obj5F,4(a0)
00012442 317C 0400 0002             		move.w	#$400,2(a0)
00012448 0028 0004 0001             		ori.b	#4,1(a0)
0001244E 117C 0003 0018             		move.b	#3,$18(a0)
00012454 117C 000C 0019             		move.b	#$C,$19(a0)
0001245A 1028 0028                  		move.b	$28(a0),d0
0001245E 6700                       		beq.s	loc_11A3C
00012460 1140 0024                  		move.b	d0,$24(a0)
00012464 4E75                       		rts	
00012466                            ; ===========================================================================
00012466                            
00012466                            loc_11A3C:
00012466 117C 009A 0020             		move.b	#$9A,$20(a0)
0001246C 0868 0000 0022             		bchg	#0,$22(a0)
00012472                            
00012472                            Obj5F_Action:				; XREF: Obj5F_Index
00012472 7000                       		moveq	#0,d0
00012474 1028 0025                  		move.b	$25(a0),d0
00012478 323B 0000                  		move.w	Obj5F_Index2(pc,d0.w),d1
0001247C 4EBB 1000                  		jsr	Obj5F_Index2(pc,d1.w)
00012480 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
00012486 6100 8C12                  		bsr.w	AnimateSprite
0001248A 6000 DC60                  		bra.w	MarkObjGone
0001248E                            ; ===========================================================================
0001248E 0000                       Obj5F_Index2:	dc.w Obj5F_Walk-Obj5F_Index2
00012490 0000                       		dc.w Obj5F_Wait-Obj5F_Index2
00012492 0000                       		dc.w Obj5F_Explode-Obj5F_Index2
00012494                            ; ===========================================================================
00012494                            
00012494                            Obj5F_Walk:				; XREF: Obj5F_Index2
00012494 6100 0000                  		bsr.w	Obj5F_ChkSonic
00012498 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
0001249C 6A00                       		bpl.s	locret_11A96	; if time remains, branch
0001249E 5428 0025                  		addq.b	#2,$25(a0)
000124A2 317C 05FF 0030             		move.w	#1535,$30(a0)	; set time delay to 25 seconds
000124A8 317C 0010 0010             		move.w	#$10,$10(a0)
000124AE 117C 0001 001C             		move.b	#1,$1C(a0)
000124B4 0868 0000 0022             		bchg	#0,$22(a0)
000124BA 6700                       		beq.s	locret_11A96
000124BC 4468 0010                  		neg.w	$10(a0)		; change direction
000124C0                            
000124C0                            locret_11A96:
000124C0 4E75                       		rts	
000124C2                            ; ===========================================================================
000124C2                            
000124C2                            Obj5F_Wait:				; XREF: Obj5F_Index2
000124C2 6100 0000                  		bsr.w	Obj5F_ChkSonic
000124C6 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
000124CA 6B00                       		bmi.s	loc_11AA8
000124CC 6100 BB50                  		bsr.w	SpeedToPos
000124D0 4E75                       		rts	
000124D2                            ; ===========================================================================
000124D2                            
000124D2                            loc_11AA8:
000124D2 5528 0025                  		subq.b	#2,$25(a0)
000124D6 317C 00B3 0030             		move.w	#179,$30(a0)	; set time delay to 3 seconds
000124DC 4268 0010                  		clr.w	$10(a0)		; stop walking
000124E0 117C 0000 001C             		move.b	#0,$1C(a0)	; stop animation
000124E6 4E75                       		rts	
000124E8                            ; ===========================================================================
000124E8                            
000124E8                            Obj5F_Explode:				; XREF: Obj5F_Index2
000124E8 5368 0030                  		subq.w	#1,$30(a0)
000124EC 6A00                       		bpl.s	locret_11AD0
000124EE 10BC 003F                  		move.b	#$3F,0(a0)	; change bomb into an explosion
000124F2 117C 0000 0024             		move.b	#0,$24(a0)
000124F8                            
000124F8                            locret_11AD0:
000124F8 4E75                       		rts	
000124FA                            ; ===========================================================================
000124FA                            
000124FA                            Obj5F_ChkSonic:				; XREF: Obj5F_Walk; Obj5F_Wait
000124FA 3038 D008                  		move.w	($FFFFD008).w,d0
000124FE 9068 0008                  		sub.w	8(a0),d0
00012502 6400                       		bcc.s	loc_11ADE
00012504 4440                       		neg.w	d0
00012506                            
00012506                            loc_11ADE:
00012506 0C40 0060                  		cmpi.w	#$60,d0
0001250A 6400                       		bcc.s	locret_11B5E
0001250C 3038 D00C                  		move.w	($FFFFD00C).w,d0
00012510 9068 000C                  		sub.w	$C(a0),d0
00012514 6400                       		bcc.s	Obj5F_MakeFuse
00012516 4440                       		neg.w	d0
00012518                            
00012518                            Obj5F_MakeFuse:
00012518 0C40 0060                  		cmpi.w	#$60,d0
0001251C 6400                       		bcc.s	locret_11B5E
0001251E 4A78 FE08                  		tst.w	($FFFFFE08).w
00012522 6600                       		bne.s	locret_11B5E
00012524 117C 0004 0025             		move.b	#4,$25(a0)
0001252A 317C 008F 0030             		move.w	#143,$30(a0)	; set fuse time
00012530 4268 0010                  		clr.w	$10(a0)
00012534 117C 0002 001C             		move.b	#2,$1C(a0)
0001253A 6100 BFA4                  		bsr.w	SingleObjLoad2
0001253E 6600                       		bne.s	locret_11B5E
00012540 12BC 005F                  		move.b	#$5F,0(a1)	; load fuse object
00012544 3368 0008 0008             		move.w	8(a0),8(a1)
0001254A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012550 3368 000C 0034             		move.w	$C(a0),$34(a1)
00012556 1368 0022 0022             		move.b	$22(a0),$22(a1)
0001255C 137C 0004 0028             		move.b	#4,$28(a1)
00012562 137C 0003 001C             		move.b	#3,$1C(a1)
00012568 337C 0010 0012             		move.w	#$10,$12(a1)
0001256E 0828 0001 0022             		btst	#1,$22(a0)
00012574 6700                       		beq.s	loc_11B54
00012576 4469 0012                  		neg.w	$12(a1)
0001257A                            
0001257A                            loc_11B54:
0001257A 337C 008F 0030             		move.w	#143,$30(a1)	; set fuse time
00012580 2348 003C                  		move.l	a0,$3C(a1)
00012584                            
00012584                            locret_11B5E:
00012584 4E75                       		rts	
00012586                            ; ===========================================================================
00012586                            
00012586                            Obj5F_Display:				; XREF: Obj5F_Index
00012586 6100                       		bsr.s	loc_11B70
00012588 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
0001258E 6100 8B0A                  		bsr.w	AnimateSprite
00012592 6000 DB58                  		bra.w	MarkObjGone
00012596                            ; ===========================================================================
00012596                            
00012596                            loc_11B70:
00012596 5368 0030                  		subq.w	#1,$30(a0)
0001259A 6B00                       		bmi.s	loc_11B7C
0001259C 6100 BA80                  		bsr.w	SpeedToPos
000125A0 4E75                       		rts	
000125A2                            ; ===========================================================================
000125A2                            
000125A2                            loc_11B7C:
000125A2 4268 0030                  		clr.w	$30(a0)
000125A6 4228 0024                  		clr.b	$24(a0)
000125AA 3168 0034 000C             		move.w	$34(a0),$C(a0)
000125B0 7203                       		moveq	#3,d1
000125B2 2248                       		movea.l	a0,a1
000125B4 45F9 0000 0000             		lea	(Obj5F_ShrSpeed).l,a2 ;	load shrapnel speed data
000125BA 6000                       		bra.s	Obj5F_MakeShrap
000125BC                            ; ===========================================================================
000125BC                            
000125BC                            Obj5F_Loop:
000125BC 6100 BF22                  		bsr.w	SingleObjLoad2
000125C0 6600                       		bne.s	loc_11BCE
000125C2                            
000125C2                            Obj5F_MakeShrap:			; XREF: loc_11B7C
000125C2 12BC 005F                  		move.b	#$5F,0(a1)	; load shrapnel	object
000125C6 3368 0008 0008             		move.w	8(a0),8(a1)
000125CC 3368 000C 000C             		move.w	$C(a0),$C(a1)
000125D2 137C 0006 0028             		move.b	#6,$28(a1)
000125D8 137C 0004 001C             		move.b	#4,$1C(a1)
000125DE 335A 0010                  		move.w	(a2)+,$10(a1)
000125E2 335A 0012                  		move.w	(a2)+,$12(a1)
000125E6 137C 0098 0020             		move.b	#$98,$20(a1)
000125EC 08E9 0007 0001             		bset	#7,1(a1)
000125F2                            
000125F2                            loc_11BCE:
000125F2 51C9 FFC8                  		dbf	d1,Obj5F_Loop	; repeat 3 more	times
000125F6                            
000125F6 117C 0006 0024             		move.b	#6,$24(a0)
000125FC                            
000125FC                            Obj5F_End:				; XREF: Obj5F_Index
000125FC 6100 BA20                  		bsr.w	SpeedToPos
00012600 0668 0018 0012             		addi.w	#$18,$12(a0)
00012606 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
0001260C 6100 8A8C                  		bsr.w	AnimateSprite
00012610 4A28 0001                  		tst.b	1(a0)
00012614 6A00 BA6A                  		bpl.w	DeleteObject
00012618 6000 BA2A                  		bra.w	DisplaySprite
0001261C                            ; ===========================================================================
0001261C FE00 FD00 FF00 FE00 0200+  Obj5F_ShrSpeed:	dc.w $FE00, $FD00, $FF00, $FE00, $200, $FD00, $100, $FE00
0001262C                            
0001262C                            Ani_obj5F:
0001262C                            	include "_anim\obj5F.asm"
0001262C                            ; ---------------------------------------------------------------------------
0001262C                            ; Animation script - Bomb enemy
0001262C                            ; ---------------------------------------------------------------------------
0001262C 0000                       		dc.w byte_11C12-Ani_obj5F
0001262E 0000                       		dc.w byte_11C16-Ani_obj5F
00012630 0000                       		dc.w byte_11C1C-Ani_obj5F
00012632 0000                       		dc.w byte_11C20-Ani_obj5F
00012634 0000                       		dc.w byte_11C24-Ani_obj5F
00012636 1301 00FF                  byte_11C12:	dc.b $13, 1, 0,	$FF
0001263A 1305 0403 02FF             byte_11C16:	dc.b $13, 5, 4,	3, 2, $FF
00012640 1307 06FF                  byte_11C1C:	dc.b $13, 7, 6,	$FF
00012644 0308 09FF                  byte_11C20:	dc.b 3,	8, 9, $FF
00012648 030A 0BFF                  byte_11C24:	dc.b 3,	$A, $B,	$FF
0001264C                            		even
0001264C                            		even
0001264C                            
0001264C                            ; ---------------------------------------------------------------------------
0001264C                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
0001264C                            ; ---------------------------------------------------------------------------
0001264C                            Map_obj5F:
0001264C                            	include "_maps\obj5F.asm"
0001264C                            ; ---------------------------------------------------------------------------
0001264C                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
0001264C                            ; ---------------------------------------------------------------------------
0001264C 0000 0000                  		dc.w byte_11C40-Map_obj5F, byte_11C50-Map_obj5F
00012650 0000 0000                  		dc.w byte_11C60-Map_obj5F, byte_11C70-Map_obj5F
00012654 0000 0000                  		dc.w byte_11C80-Map_obj5F, byte_11C90-Map_obj5F
00012658 0000 0000                  		dc.w byte_11CA0-Map_obj5F, byte_11CAB-Map_obj5F
0001265C 0000 0000                  		dc.w byte_11CB6-Map_obj5F, byte_11CBC-Map_obj5F
00012660 0000 0000                  		dc.w byte_11CC2-Map_obj5F, byte_11CC8-Map_obj5F
00012664 03                         byte_11C40:	dc.b 3
00012665 F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
0001266A 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
0001266F E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00012674 03                         byte_11C50:	dc.b 3
00012675 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
0001267A 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
0001267F E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00012684 03                         byte_11C60:	dc.b 3
00012685 F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
0001268A 0808 0015 F4               		dc.b 8,	8, 0, $15, $F4
0001268F E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
00012694 03                         byte_11C70:	dc.b 3
00012695 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
0001269A 0908 0018 F4               		dc.b 9,	8, 0, $18, $F4
0001269F E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
000126A4 03                         byte_11C80:	dc.b 3
000126A5 F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
000126AA 0808 001B F4               		dc.b 8,	8, 0, $1B, $F4
000126AF E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
000126B4 03                         byte_11C90:	dc.b 3
000126B5 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
000126BA 0908 001E F4               		dc.b 9,	8, 0, $1E, $F4
000126BF E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
000126C4 02                         byte_11CA0:	dc.b 2
000126C5 F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
000126CA 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
000126CF 02                         byte_11CAB:	dc.b 2
000126D0 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
000126D5 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
000126DA 01                         byte_11CB6:	dc.b 1			; fuse	(just before it	explodes)
000126DB E701 0023 FC               		dc.b $E7, 1, 0,	$23, $FC
000126E0 01                         byte_11CBC:	dc.b 1			; fuse
000126E1 E701 0025 FC               		dc.b $E7, 1, 0,	$25, $FC
000126E6 01                         byte_11CC2:	dc.b 1			; fireball (after it exploded)
000126E7 FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
000126EC 01                         byte_11CC8:	dc.b 1			; fireball
000126ED FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
000126F2                            		even
000126F2                            		even
000126F2                            
000126F2                            ; ===========================================================================
000126F2                            ; ---------------------------------------------------------------------------
000126F2                            ; Object 60 - Orbinaut enemy (LZ, SLZ, SBZ)
000126F2                            ; ---------------------------------------------------------------------------
000126F2                            
000126F2                            Obj60:					; XREF: Obj_Index
000126F2 7000                       		moveq	#0,d0
000126F4 1028 0024                  		move.b	$24(a0),d0
000126F8 323B 0000                  		move.w	Obj60_Index(pc,d0.w),d1
000126FC 4EFB 1000                  		jmp	Obj60_Index(pc,d1.w)
00012700                            ; ===========================================================================
00012700 0000                       Obj60_Index:	dc.w Obj60_Main-Obj60_Index
00012702 0000                       		dc.w Obj60_ChkSonic-Obj60_Index
00012704 0000                       		dc.w Obj60_Display-Obj60_Index
00012706 0000                       		dc.w Obj60_MoveOrb-Obj60_Index
00012708 0000                       		dc.w Obj60_ChkDel2-Obj60_Index
0001270A                            ; ===========================================================================
0001270A                            
0001270A                            Obj60_Main:				; XREF: Obj60_Index
0001270A 217C 0000 0000 0004        		move.l	#Map_obj60,4(a0)
00012712 317C 0429 0002             		move.w	#$429,2(a0)	; SBZ specific code
00012718 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
0001271E 6700                       		beq.s	loc_11D02
00012720 317C 2429 0002             		move.w	#$2429,2(a0)	; SLZ specific code
00012726                            
00012726                            loc_11D02:
00012726 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
0001272C 6600                       		bne.s	loc_11D10
0001272E 317C 0467 0002             		move.w	#$467,2(a0)	; LZ specific code
00012734                            
00012734                            loc_11D10:
00012734 0028 0004 0001             		ori.b	#4,1(a0)
0001273A 117C 0004 0018             		move.b	#4,$18(a0)
00012740 117C 000B 0020             		move.b	#$B,$20(a0)
00012746 117C 000C 0019             		move.b	#$C,$19(a0)
0001274C 7400                       		moveq	#0,d2
0001274E 45E8 0037                  		lea	$37(a0),a2
00012752 264A                       		movea.l	a2,a3
00012754 524A                       		addq.w	#1,a2
00012756 7203                       		moveq	#3,d1
00012758                            
00012758                            Obj60_MakeOrbs:
00012758 6100 BD86                  		bsr.w	SingleObjLoad2
0001275C 6600                       		bne.s	loc_11D90
0001275E 5213                       		addq.b	#1,(a3)
00012760 3A09                       		move.w	a1,d5
00012762 0445 D000                  		subi.w	#-$3000,d5
00012766 EC4D                       		lsr.w	#6,d5
00012768 0245 007F                  		andi.w	#$7F,d5
0001276C 14C5                       		move.b	d5,(a2)+
0001276E 1290                       		move.b	0(a0),0(a1)	; load spiked orb object
00012770 137C 0006 0024             		move.b	#6,$24(a1)
00012776 2368 0004 0004             		move.l	4(a0),4(a1)
0001277C 3368 0002 0002             		move.w	2(a0),2(a1)
00012782 0029 0004 0001             		ori.b	#4,1(a1)
00012788 137C 0004 0018             		move.b	#4,$18(a1)
0001278E 137C 0008 0019             		move.b	#8,$19(a1)
00012794 137C 0003 001A             		move.b	#3,$1A(a1)
0001279A 137C 0098 0020             		move.b	#$98,$20(a1)
000127A0 1342 0026                  		move.b	d2,$26(a1)
000127A4 0602 0040                  		addi.b	#$40,d2
000127A8 2348 003C                  		move.l	a0,$3C(a1)
000127AC 51C9 FFAA                  		dbf	d1,Obj60_MakeOrbs ; repeat sequence 3 more times
000127B0                            
000127B0                            loc_11D90:
000127B0 7001                       		moveq	#1,d0
000127B2 0828 0000 0022             		btst	#0,$22(a0)
000127B8 6700                       		beq.s	Obj60_Move
000127BA 4440                       		neg.w	d0
000127BC                            
000127BC                            Obj60_Move:
000127BC 1140 0036                  		move.b	d0,$36(a0)
000127C0 1168 0028 0024             		move.b	$28(a0),$24(a0)	; if type is 02, skip the firing rountine
000127C6 5428 0024                  		addq.b	#2,$24(a0)
000127CA 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move orbinaut	to the left
000127D0 0828 0000 0022             		btst	#0,$22(a0)	; is orbinaut reversed?
000127D6 6700                       		beq.s	locret_11DBC	; if not, branch
000127D8 4468 0010                  		neg.w	$10(a0)		; move orbinaut	to the right
000127DC                            
000127DC                            locret_11DBC:
000127DC 4E75                       		rts	
000127DE                            ; ===========================================================================
000127DE                            
000127DE                            Obj60_ChkSonic:				; XREF: Obj60_Index
000127DE 3038 D008                  		move.w	($FFFFD008).w,d0
000127E2 9068 0008                  		sub.w	8(a0),d0
000127E6 6400                       		bcc.s	loc_11DCA
000127E8 4440                       		neg.w	d0
000127EA                            
000127EA                            loc_11DCA:
000127EA 0C40 00A0                  		cmpi.w	#$A0,d0		; is Sonic within $A0 pixels of	orbinaut?
000127EE 6400                       		bcc.s	Obj60_Animate	; if not, branch
000127F0 3038 D00C                  		move.w	($FFFFD00C).w,d0
000127F4 9068 000C                  		sub.w	$C(a0),d0
000127F8 6400                       		bcc.s	loc_11DDC
000127FA 4440                       		neg.w	d0
000127FC                            
000127FC                            loc_11DDC:
000127FC 0C40 0050                  		cmpi.w	#$50,d0		; is Sonic within $50 pixels of	orbinaut?
00012800 6400                       		bcc.s	Obj60_Animate	; if not, branch
00012802 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
00012806 6600                       		bne.s	Obj60_Animate	; if yes, branch
00012808 117C 0001 001C             		move.b	#1,$1C(a0)	; use "angry" animation
0001280E                            
0001280E                            Obj60_Animate:
0001280E 43F9 0000 0000             		lea	(Ani_obj60).l,a1
00012814 6100 8884                  		bsr.w	AnimateSprite
00012818 6000 0000                  		bra.w	Obj60_ChkDel
0001281C                            ; ===========================================================================
0001281C                            
0001281C                            Obj60_Display:				; XREF: Obj60_Index
0001281C 6100 B800                  		bsr.w	SpeedToPos
00012820                            
00012820                            Obj60_ChkDel:				; XREF: Obj60_Animate
00012820 3028 0008                  		move.w	8(a0),d0
00012824 0240 FF80                  		andi.w	#$FF80,d0
00012828 3238 F700                  		move.w	($FFFFF700).w,d1
0001282C 0441 0080                  		subi.w	#$80,d1
00012830 0241 FF80                  		andi.w	#$FF80,d1
00012834 9041                       		sub.w	d1,d0
00012836 0C40 0280                  		cmpi.w	#$280,d0
0001283A 6200 0000                  		bhi.w	Obj60_ChkGone
0001283E 6000 B804                  		bra.w	DisplaySprite
00012842                            ; ===========================================================================
00012842                            
00012842                            Obj60_ChkGone:				; XREF: Obj60_ChkDel
00012842 45F8 FC00                  		lea	($FFFFFC00).w,a2
00012846 7000                       		moveq	#0,d0
00012848 1028 0023                  		move.b	$23(a0),d0
0001284C 6700                       		beq.s	loc_11E34
0001284E 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00012854                            
00012854                            loc_11E34:
00012854 45E8 0037                  		lea	$37(a0),a2
00012858 7400                       		moveq	#0,d2
0001285A 141A                       		move.b	(a2)+,d2
0001285C 5342                       		subq.w	#1,d2
0001285E 6500                       		bcs.s	Obj60_Delete
00012860                            
00012860                            loc_11E40:
00012860 7000                       		moveq	#0,d0
00012862 101A                       		move.b	(a2)+,d0
00012864 ED48                       		lsl.w	#6,d0
00012866 0680 00FF D000             		addi.l	#$FFD000,d0
0001286C 2240                       		movea.l	d0,a1
0001286E 6100 B812                  		bsr.w	DeleteObject2
00012872 51CA FFEC                  		dbf	d2,loc_11E40
00012876                            
00012876                            Obj60_Delete:
00012876 6000 B808                  		bra.w	DeleteObject
0001287A                            ; ===========================================================================
0001287A                            
0001287A                            Obj60_MoveOrb:				; XREF: Obj60_Index
0001287A 2268 003C                  		movea.l	$3C(a0),a1
0001287E 0C11 0060                  		cmpi.b	#$60,0(a1)
00012882 6600 B7FC                  		bne.w	DeleteObject
00012886 0C29 0002 001A             		cmpi.b	#2,$1A(a1)
0001288C 6600                       		bne.s	Obj60_Circle
0001288E 0C28 0040 0026             		cmpi.b	#$40,$26(a0)
00012894 6600                       		bne.s	Obj60_Circle
00012896 5428 0024                  		addq.b	#2,$24(a0)
0001289A 5329 0037                  		subq.b	#1,$37(a1)
0001289E 6600                       		bne.s	Obj60_FireOrb
000128A0 5429 0024                  		addq.b	#2,$24(a1)
000128A4                            
000128A4                            Obj60_FireOrb:
000128A4 317C FE00 0010             		move.w	#-$200,$10(a0)	; move orb to the left (quickly)
000128AA 0829 0000 0022             		btst	#0,$22(a1)
000128B0 6700                       		beq.s	Obj60_Display2
000128B2 4468 0010                  		neg.w	$10(a0)
000128B6                            
000128B6                            Obj60_Display2:
000128B6 6000 B78C                  		bra.w	DisplaySprite
000128BA                            ; ===========================================================================
000128BA                            
000128BA                            Obj60_Circle:				; XREF: Obj60_MoveOrb
000128BA 1028 0026                  		move.b	$26(a0),d0
000128BE 4EB9 0000 2D34             		jsr	(CalcSine).l
000128C4 E841                       		asr.w	#4,d1
000128C6 D269 0008                  		add.w	8(a1),d1
000128CA 3141 0008                  		move.w	d1,8(a0)
000128CE E840                       		asr.w	#4,d0
000128D0 D069 000C                  		add.w	$C(a1),d0
000128D4 3140 000C                  		move.w	d0,$C(a0)
000128D8 1029 0036                  		move.b	$36(a1),d0
000128DC D128 0026                  		add.b	d0,$26(a0)
000128E0 6000 B762                  		bra.w	DisplaySprite
000128E4                            ; ===========================================================================
000128E4                            
000128E4                            Obj60_ChkDel2:				; XREF: Obj60_Index
000128E4 6100 B738                  		bsr.w	SpeedToPos
000128E8 4A28 0001                  		tst.b	1(a0)
000128EC 6A00 B792                  		bpl.w	DeleteObject
000128F0 6000 B752                  		bra.w	DisplaySprite
000128F4                            ; ===========================================================================
000128F4                            Ani_obj60:
000128F4                            	include "_anim\obj60.asm"
000128F4                            ; ---------------------------------------------------------------------------
000128F4                            ; Animation script - Orbinaut enemy
000128F4                            ; ---------------------------------------------------------------------------
000128F4 0000                       		dc.w byte_11EDA-Ani_obj60
000128F6 0000                       		dc.w byte_11EDE-Ani_obj60
000128F8 0F00 FF00                  byte_11EDA:	dc.b $F, 0, $FF, 0
000128FC 0F01 02FE 0100             byte_11EDE:	dc.b $F, 1, 2, $FE, 1, 0
00012902                            		even
00012902                            		even
00012902                            
00012902                            ; ---------------------------------------------------------------------------
00012902                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
00012902                            ; ---------------------------------------------------------------------------
00012902                            Map_obj60:
00012902                            	include "_maps\obj60.asm"
00012902                            ; ---------------------------------------------------------------------------
00012902                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
00012902                            ; ---------------------------------------------------------------------------
00012902 0000 0000                  		dc.w byte_11EEC-Map_obj60, byte_11EF2-Map_obj60
00012906 0000 0000                  		dc.w byte_11EF8-Map_obj60, byte_11EFE-Map_obj60
0001290A 01                         byte_11EEC:	dc.b 1
0001290B F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00012910 01                         byte_11EF2:	dc.b 1
00012911 F40A 2009 F4               		dc.b $F4, $A, $20, 9, $F4
00012916 01                         byte_11EF8:	dc.b 1
00012917 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001291C 01                         byte_11EFE:	dc.b 1
0001291D F805 001B F8               		dc.b $F8, 5, 0,	$1B, $F8
00012922                            		even
00012922                            		even
00012922                            
00012922                            ; ===========================================================================
00012922                            ; ---------------------------------------------------------------------------
00012922                            ; Object 16 - harpoon (LZ)
00012922                            ; ---------------------------------------------------------------------------
00012922                            
00012922                            Obj16:					; XREF: Obj_Index
00012922 7000                       		moveq	#0,d0
00012924 1028 0024                  		move.b	$24(a0),d0
00012928 323B 0000                  		move.w	Obj16_Index(pc,d0.w),d1
0001292C 4EFB 1000                  		jmp	Obj16_Index(pc,d1.w)
00012930                            ; ===========================================================================
00012930 0000                       Obj16_Index:	dc.w Obj16_Main-Obj16_Index
00012932 0000                       		dc.w Obj16_Move-Obj16_Index
00012934 0000                       		dc.w Obj16_Wait-Obj16_Index
00012936                            ; ===========================================================================
00012936                            
00012936                            Obj16_Main:				; XREF: Obj16_Index
00012936 5428 0024                  		addq.b	#2,$24(a0)
0001293A 217C 0000 0000 0004        		move.l	#Map_obj16,4(a0)
00012942 317C 03CC 0002             		move.w	#$3CC,2(a0)
00012948 0028 0004 0001             		ori.b	#4,1(a0)
0001294E 117C 0004 0018             		move.b	#4,$18(a0)
00012954 1168 0028 001C             		move.b	$28(a0),$1C(a0)
0001295A 117C 0014 0019             		move.b	#$14,$19(a0)
00012960 317C 003C 0030             		move.w	#60,$30(a0)
00012966                            
00012966                            Obj16_Move:				; XREF: Obj16_Index
00012966 43F9 0000 0000             		lea	(Ani_obj16).l,a1
0001296C 6100 872C                  		bsr.w	AnimateSprite
00012970 7000                       		moveq	#0,d0
00012972 1028 001A                  		move.b	$1A(a0),d0	; move frame number to d0
00012976 117B 0000 0020             		move.b	Obj16_Data(pc,d0.w),$20(a0) ; load collision response (based on	d0)
0001297C 6000 D76E                  		bra.w	MarkObjGone
00012980                            ; ===========================================================================
00012980 9B9C 9D9E 9FA0             Obj16_Data:	dc.b $9B, $9C, $9D, $9E, $9F, $A0
00012986                            ; ===========================================================================
00012986                            
00012986                            Obj16_Wait:				; XREF: Obj16_Index
00012986 5368 0030                  		subq.w	#1,$30(a0)
0001298A 6A00                       		bpl.s	Obj16_ChkDel
0001298C 317C 003C 0030             		move.w	#60,$30(a0)
00012992 5528 0024                  		subq.b	#2,$24(a0)	; run "Obj16_Move" subroutine
00012996 0868 0000 001C             		bchg	#0,$1C(a0)	; reverse animation
0001299C                            
0001299C                            Obj16_ChkDel:
0001299C 6000 D74E                  		bra.w	MarkObjGone
000129A0                            ; ===========================================================================
000129A0                            Ani_obj16:
000129A0                            	include "_anim\obj16.asm"
000129A0                            ; ---------------------------------------------------------------------------
000129A0                            ; Animation script - harpoon (LZ)
000129A0                            ; ---------------------------------------------------------------------------
000129A0 0000                       		dc.w byte_11F8A-Ani_obj16
000129A2 0000                       		dc.w byte_11F8E-Ani_obj16
000129A4 0000                       		dc.w byte_11F92-Ani_obj16
000129A6 0000                       		dc.w byte_11F96-Ani_obj16
000129A8 0301 02FC                  byte_11F8A:	dc.b 3,	1, 2, $FC
000129AC 0301 00FC                  byte_11F8E:	dc.b 3,	1, 0, $FC
000129B0 0304 05FC                  byte_11F92:	dc.b 3,	4, 5, $FC
000129B4 0304 03FC                  byte_11F96:	dc.b 3,	4, 3, $FC
000129B8                            		even
000129B8                            		even
000129B8                            
000129B8                            ; ---------------------------------------------------------------------------
000129B8                            ; Sprite mappings - harpoon (LZ)
000129B8                            ; ---------------------------------------------------------------------------
000129B8                            Map_obj16:
000129B8                            	include "_maps\obj16.asm"
000129B8                            ; ---------------------------------------------------------------------------
000129B8                            ; Sprite mappings - harpoon (LZ)
000129B8                            ; ---------------------------------------------------------------------------
000129B8 0000 0000                  		dc.w byte_11FA6-Map_obj16, byte_11FAC-Map_obj16
000129BC 0000 0000                  		dc.w byte_11FB2-Map_obj16, byte_11FBD-Map_obj16
000129C0 0000 0000                  		dc.w byte_11FC3-Map_obj16, byte_11FC9-Map_obj16
000129C4 01                         byte_11FA6:	dc.b 1
000129C5 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
000129CA 01                         byte_11FAC:	dc.b 1
000129CB FC0C 0002 F8               		dc.b $FC, $C, 0, 2, $F8
000129D0 02                         byte_11FB2:	dc.b 2
000129D1 FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8
000129D6 FC08 0003 10               		dc.b $FC, 8, 0,	3, $10
000129DB 01                         byte_11FBD:	dc.b 1
000129DC F801 0009 FC               		dc.b $F8, 1, 0,	9, $FC
000129E1 01                         byte_11FC3:	dc.b 1
000129E2 E803 000B FC               		dc.b $E8, 3, 0,	$B, $FC
000129E7 02                         byte_11FC9:	dc.b 2
000129E8 D802 000B FC               		dc.b $D8, 2, 0,	$B, $FC
000129ED F002 000F FC               		dc.b $F0, 2, 0,	$F, $FC
000129F2                            		even
000129F2                            		even
000129F2                            
000129F2                            ; ===========================================================================
000129F2                            ; ---------------------------------------------------------------------------
000129F2                            ; Object 61 - blocks (LZ)
000129F2                            ; ---------------------------------------------------------------------------
000129F2                            
000129F2                            Obj61:					; XREF: Obj_Index
000129F2 7000                       		moveq	#0,d0
000129F4 1028 0024                  		move.b	$24(a0),d0
000129F8 323B 0000                  		move.w	Obj61_Index(pc,d0.w),d1
000129FC 4EFB 1000                  		jmp	Obj61_Index(pc,d1.w)
00012A00                            ; ===========================================================================
00012A00 0000                       Obj61_Index:	dc.w Obj61_Main-Obj61_Index
00012A02 0000                       		dc.w Obj61_Action-Obj61_Index
00012A04                            
00012A04 1010                       Obj61_Var:	dc.b $10, $10		; width, height
00012A06 200C                       		dc.b $20, $C
00012A08 1010                       		dc.b $10, $10
00012A0A 1010                       		dc.b $10, $10
00012A0C                            ; ===========================================================================
00012A0C                            
00012A0C                            Obj61_Main:				; XREF: Obj61_Index
00012A0C 5428 0024                  		addq.b	#2,$24(a0)
00012A10 217C 0000 0000 0004        		move.l	#Map_obj61,4(a0)
00012A18 317C 43E6 0002             		move.w	#$43E6,2(a0)
00012A1E 117C 0004 0001             		move.b	#4,1(a0)
00012A24 117C 0003 0018             		move.b	#3,$18(a0)
00012A2A 7000                       		moveq	#0,d0
00012A2C 1028 0028                  		move.b	$28(a0),d0
00012A30 E648                       		lsr.w	#3,d0
00012A32 0240 000E                  		andi.w	#$E,d0
00012A36 45FB 00CC                  		lea	Obj61_Var(pc,d0.w),a2
00012A3A 115A 0019                  		move.b	(a2)+,$19(a0)
00012A3E 1152 0016                  		move.b	(a2),$16(a0)
00012A42 E248                       		lsr.w	#1,d0
00012A44 1140 001A                  		move.b	d0,$1A(a0)
00012A48 3168 0008 0034             		move.w	8(a0),$34(a0)
00012A4E 3168 000C 0030             		move.w	$C(a0),$30(a0)
00012A54 1028 0028                  		move.b	$28(a0),d0
00012A58 0200 000F                  		andi.b	#$F,d0
00012A5C 6700                       		beq.s	Obj61_Action
00012A5E 0C00 0007                  		cmpi.b	#7,d0
00012A62 6700                       		beq.s	Obj61_Action
00012A64 117C 0001 0038             		move.b	#1,$38(a0)
00012A6A                            
00012A6A                            Obj61_Action:				; XREF: Obj61_Index
00012A6A 3F28 0008                  		move.w	8(a0),-(sp)
00012A6E 7000                       		moveq	#0,d0
00012A70 1028 0028                  		move.b	$28(a0),d0
00012A74 0240 000F                  		andi.w	#$F,d0
00012A78 D040                       		add.w	d0,d0
00012A7A 323B 0000                  		move.w	Obj61_TypeIndex(pc,d0.w),d1
00012A7E 4EBB 1000                  		jsr	Obj61_TypeIndex(pc,d1.w)
00012A82 381F                       		move.w	(sp)+,d4
00012A84 4A28 0001                  		tst.b	1(a0)
00012A88 6A00                       		bpl.s	Obj61_ChkDel
00012A8A 7200                       		moveq	#0,d1
00012A8C 1228 0019                  		move.b	$19(a0),d1
00012A90 0641 000B                  		addi.w	#$B,d1
00012A94 7400                       		moveq	#0,d2
00012A96 1428 0016                  		move.b	$16(a0),d2
00012A9A 3602                       		move.w	d2,d3
00012A9C 5243                       		addq.w	#1,d3
00012A9E 6100 D974                  		bsr.w	SolidObject
00012AA2 1144 003F                  		move.b	d4,$3F(a0)
00012AA6 6100 0000                  		bsr.w	loc_12180
00012AAA                            
00012AAA                            Obj61_ChkDel:
00012AAA 3028 0034                  		move.w	$34(a0),d0
00012AAE 0240 FF80                  		andi.w	#$FF80,d0
00012AB2 3238 F700                  		move.w	($FFFFF700).w,d1
00012AB6 0441 0080                  		subi.w	#$80,d1
00012ABA 0241 FF80                  		andi.w	#$FF80,d1
00012ABE 9041                       		sub.w	d1,d0
00012AC0 0C40 0280                  		cmpi.w	#$280,d0
00012AC4 6200 B5BA                  		bhi.w	DeleteObject
00012AC8 6000 B57A                  		bra.w	DisplaySprite
00012ACC                            ; ===========================================================================
00012ACC 0000 0000                  Obj61_TypeIndex:dc.w Obj61_Type00-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
00012AD0 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
00012AD4 0000 0000                  		dc.w Obj61_Type04-Obj61_TypeIndex, Obj61_Type05-Obj61_TypeIndex
00012AD8 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type07-Obj61_TypeIndex
00012ADC                            ; ===========================================================================
00012ADC                            
00012ADC                            Obj61_Type00:				; XREF: Obj61_TypeIndex
00012ADC 4E75                       		rts	
00012ADE                            ; ===========================================================================
00012ADE                            
00012ADE                            Obj61_Type01:				; XREF: Obj61_TypeIndex
00012ADE 4A68 0036                  		tst.w	$36(a0)		; is Sonic standing on the object?
00012AE2 6600                       		bne.s	loc_120D6	; if yes, branch
00012AE4 0828 0003 0022             		btst	#3,$22(a0)
00012AEA 6700                       		beq.s	locret_120D4
00012AEC 317C 001E 0036             		move.w	#30,$36(a0)	; wait for ยซ second
00012AF2                            
00012AF2                            locret_120D4:
00012AF2 4E75                       		rts	
00012AF4                            ; ===========================================================================
00012AF4                            
00012AF4                            loc_120D6:
00012AF4 5368 0036                  		subq.w	#1,$36(a0)	; subtract 1 from waiting time
00012AF8 66F8                       		bne.s	locret_120D4	; if time remains, branch
00012AFA 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00012AFE 4228 0038                  		clr.b	$38(a0)
00012B02 4E75                       		rts	
00012B04                            ; ===========================================================================
00012B04                            
00012B04                            Obj61_Type02:				; XREF: Obj61_TypeIndex
00012B04 6100 B518                  		bsr.w	SpeedToPos
00012B08 5068 0012                  		addq.w	#8,$12(a0)	; make object fall
00012B0C 6100 0000                  		bsr.w	ObjHitFloor
00012B10 4A41                       		tst.w	d1
00012B12 6A00 0000                  		bpl.w	locret_12106
00012B16 5241                       		addq.w	#1,d1
00012B18 D368 000C                  		add.w	d1,$C(a0)
00012B1C 4268 0012                  		clr.w	$12(a0)		; stop when it touches the floor
00012B20 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
00012B24                            
00012B24                            locret_12106:
00012B24 4E75                       		rts	
00012B26                            ; ===========================================================================
00012B26                            
00012B26                            Obj61_Type04:				; XREF: Obj61_TypeIndex
00012B26 6100 B4F6                  		bsr.w	SpeedToPos
00012B2A 5168 0012                  		subq.w	#8,$12(a0)	; make object rise
00012B2E 6100 0000                  		bsr.w	ObjHitCeiling
00012B32 4A41                       		tst.w	d1
00012B34 6A00 0000                  		bpl.w	locret_12126
00012B38 9368 000C                  		sub.w	d1,$C(a0)
00012B3C 4268 0012                  		clr.w	$12(a0)		; stop when it touches the ceiling
00012B40 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
00012B44                            
00012B44                            locret_12126:
00012B44 4E75                       		rts	
00012B46                            ; ===========================================================================
00012B46                            
00012B46                            Obj61_Type05:				; XREF: Obj61_TypeIndex
00012B46 0C28 0001 003F             		cmpi.b	#1,$3F(a0)	; is Sonic touching the	object?
00012B4C 6600                       		bne.s	locret_12138	; if not, branch
00012B4E 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
00012B52 4228 0038                  		clr.b	$38(a0)
00012B56                            
00012B56                            locret_12138:
00012B56 4E75                       		rts	
00012B58                            ; ===========================================================================
00012B58                            
00012B58                            Obj61_Type07:				; XREF: Obj61_TypeIndex
00012B58 3038 F646                  		move.w	($FFFFF646).w,d0
00012B5C 9068 000C                  		sub.w	$C(a0),d0
00012B60 6700                       		beq.s	locret_1217E
00012B62 6400                       		bcc.s	loc_12162
00012B64 0C40 FFFE                  		cmpi.w	#-2,d0
00012B68 6C00                       		bge.s	loc_1214E
00012B6A 70FE                       		moveq	#-2,d0
00012B6C                            
00012B6C                            loc_1214E:
00012B6C D168 000C                  		add.w	d0,$C(a0)	; make the block rise with water level
00012B70 6100 0000                  		bsr.w	ObjHitCeiling
00012B74 4A41                       		tst.w	d1
00012B76 6A00 0000                  		bpl.w	locret_12160
00012B7A 9368 000C                  		sub.w	d1,$C(a0)
00012B7E                            
00012B7E                            locret_12160:
00012B7E 4E75                       		rts	
00012B80                            ; ===========================================================================
00012B80                            
00012B80                            loc_12162:				; XREF: Obj61_Type07
00012B80 0C40 0002                  		cmpi.w	#2,d0
00012B84 6F00                       		ble.s	loc_1216A
00012B86 7002                       		moveq	#2,d0
00012B88                            
00012B88                            loc_1216A:
00012B88 D168 000C                  		add.w	d0,$C(a0)	; make the block sink with water level
00012B8C 6100 0000                  		bsr.w	ObjHitFloor
00012B90 4A41                       		tst.w	d1
00012B92 6A00 0000                  		bpl.w	locret_1217E
00012B96 5241                       		addq.w	#1,d1
00012B98 D368 000C                  		add.w	d1,$C(a0)
00012B9C                            
00012B9C                            locret_1217E:
00012B9C 4E75                       		rts	
00012B9E                            ; ===========================================================================
00012B9E                            
00012B9E                            loc_12180:				; XREF: Obj61_Action
00012B9E 4A28 0038                  		tst.b	$38(a0)
00012BA2 6700                       		beq.s	locret_121C0
00012BA4 0828 0003 0022             		btst	#3,$22(a0)
00012BAA 6600                       		bne.s	loc_1219A
00012BAC 4A28 003E                  		tst.b	$3E(a0)
00012BB0 6700                       		beq.s	locret_121C0
00012BB2 5928 003E                  		subq.b	#4,$3E(a0)
00012BB6 6000                       		bra.s	loc_121A6
00012BB8                            ; ===========================================================================
00012BB8                            
00012BB8                            loc_1219A:
00012BB8 0C28 0040 003E             		cmpi.b	#$40,$3E(a0)
00012BBE 6700                       		beq.s	locret_121C0
00012BC0 5828 003E                  		addq.b	#4,$3E(a0)
00012BC4                            
00012BC4                            loc_121A6:
00012BC4 1028 003E                  		move.b	$3E(a0),d0
00012BC8 4EB9 0000 2D34             		jsr	(CalcSine).l
00012BCE 323C 0400                  		move.w	#$400,d1
00012BD2 C1C1                       		muls.w	d1,d0
00012BD4 4840                       		swap	d0
00012BD6 D068 0030                  		add.w	$30(a0),d0
00012BDA 3140 000C                  		move.w	d0,$C(a0)
00012BDE                            
00012BDE                            locret_121C0:
00012BDE 4E75                       		rts	
00012BE0                            ; ===========================================================================
00012BE0                            ; ---------------------------------------------------------------------------
00012BE0                            ; Sprite mappings - blocks (LZ)
00012BE0                            ; ---------------------------------------------------------------------------
00012BE0                            Map_obj61:
00012BE0                            	include "_maps\obj61.asm"
00012BE0                            ; ---------------------------------------------------------------------------
00012BE0                            ; Sprite mappings - blocks (LZ)
00012BE0                            ; ---------------------------------------------------------------------------
00012BE0 0000 0000                  		dc.w byte_121CA-Map_obj61, byte_121D0-Map_obj61
00012BE4 0000 0000                  		dc.w byte_121DB-Map_obj61, byte_121E1-Map_obj61
00012BE8 01                         byte_121CA:	dc.b 1
00012BE9 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00012BEE 02                         byte_121D0:	dc.b 2
00012BEF F40E 0069 E0               		dc.b $F4, $E, 0, $69, $E0
00012BF4 F40E 0075 00               		dc.b $F4, $E, 0, $75, 0
00012BF9 01                         byte_121DB:	dc.b 1
00012BFA F00F 011A F0               		dc.b $F0, $F, 1, $1A, $F0
00012BFF 01                         byte_121E1:	dc.b 1
00012C00 F00F FDFA F0               		dc.b $F0, $F, $FD, $FA,	$F0
00012C06 00                         		even
00012C06 00                         		even
00012C06                            
00012C06                            ; ===========================================================================
00012C06                            ; ---------------------------------------------------------------------------
00012C06                            ; Object 62 - gargoyle head (LZ)
00012C06                            ; ---------------------------------------------------------------------------
00012C06                            
00012C06                            Obj62:					; XREF: Obj_Index
00012C06 7000                       		moveq	#0,d0
00012C08 1028 0024                  		move.b	$24(a0),d0
00012C0C 323B 0000                  		move.w	Obj62_Index(pc,d0.w),d1
00012C10 4EBB 1000                  		jsr	Obj62_Index(pc,d1.w)
00012C14 6000 D4D6                  		bra.w	MarkObjGone
00012C18                            ; ===========================================================================
00012C18 0000                       Obj62_Index:	dc.w Obj62_Main-Obj62_Index
00012C1A 0000                       		dc.w Obj62_MakeFire-Obj62_Index
00012C1C 0000                       		dc.w Obj62_FireBall-Obj62_Index
00012C1E 0000                       		dc.w Obj62_AniFire-Obj62_Index
00012C20                            
00012C20 1E3C 5A78 96B4 D2F0        Obj62_SpitRate:	dc.b 30, 60, 90, 120, 150, 180,	210, 240
00012C28                            ; ===========================================================================
00012C28                            
00012C28                            Obj62_Main:				; XREF: Obj62_Index
00012C28 5428 0024                  		addq.b	#2,$24(a0)
00012C2C 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
00012C34 317C 42E9 0002             		move.w	#$42E9,2(a0)
00012C3A 0028 0004 0001             		ori.b	#4,1(a0)
00012C40 117C 0003 0018             		move.b	#3,$18(a0)
00012C46 117C 0010 0019             		move.b	#$10,$19(a0)
00012C4C 1028 0028                  		move.b	$28(a0),d0	; get object type
00012C50 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00012C54 117B 00CA 001F             		move.b	Obj62_SpitRate(pc,d0.w),$1F(a0)	; set fireball spit rate
00012C5A 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00012C60 0228 000F 0028             		andi.b	#$F,$28(a0)
00012C66                            
00012C66                            Obj62_MakeFire:				; XREF: Obj62_Index
00012C66 5328 001E                  		subq.b	#1,$1E(a0)
00012C6A 6600                       		bne.s	Obj62_NoFire
00012C6C 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00012C72 6100 B64A                  		bsr.w	ChkObjOnScreen
00012C76 6600                       		bne.s	Obj62_NoFire
00012C78 6100 B850                  		bsr.w	SingleObjLoad
00012C7C 6600                       		bne.s	Obj62_NoFire
00012C7E 12BC 0062                  		move.b	#$62,0(a1)	; load fireball	object
00012C82 5829 0024                  		addq.b	#4,$24(a1)
00012C86 3368 0008 0008             		move.w	8(a0),8(a1)
00012C8C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012C92 1368 0001 0001             		move.b	1(a0),1(a1)
00012C98 1368 0022 0022             		move.b	$22(a0),$22(a1)
00012C9E                            
00012C9E                            Obj62_NoFire:
00012C9E 4E75                       		rts	
00012CA0                            ; ===========================================================================
00012CA0                            
00012CA0                            Obj62_FireBall:				; XREF: Obj62_Index
00012CA0 5428 0024                  		addq.b	#2,$24(a0)
00012CA4 117C 0008 0016             		move.b	#8,$16(a0)
00012CAA 117C 0008 0017             		move.b	#8,$17(a0)
00012CB0 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
00012CB8 317C 02E9 0002             		move.w	#$2E9,2(a0)
00012CBE 0028 0004 0001             		ori.b	#4,1(a0)
00012CC4 117C 0004 0018             		move.b	#4,$18(a0)
00012CCA 117C 0098 0020             		move.b	#$98,$20(a0)
00012CD0 117C 0008 0019             		move.b	#8,$19(a0)
00012CD6 117C 0002 001A             		move.b	#2,$1A(a0)
00012CDC 5068 000C                  		addq.w	#8,$C(a0)
00012CE0 317C 0200 0010             		move.w	#$200,$10(a0)
00012CE6 0828 0000 0022             		btst	#0,$22(a0)
00012CEC 6600                       		bne.s	Obj62_Sound
00012CEE 4468 0010                  		neg.w	$10(a0)
00012CF2                            
00012CF2                            Obj62_Sound:
00012CF2 303C 00AE                  		move.w	#$AE,d0
00012CF6 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play lava ball sound
00012CFC                            
00012CFC                            Obj62_AniFire:				; XREF: Obj62_Index
00012CFC 1038 FE05                  		move.b	($FFFFFE05).w,d0
00012D00 0200 0007                  		andi.b	#7,d0
00012D04 6600                       		bne.s	Obj62_StopFire
00012D06 0868 0000 001A             		bchg	#0,$1A(a0)	; switch between frame 01 and 02
00012D0C                            
00012D0C                            Obj62_StopFire:
00012D0C 6100 B310                  		bsr.w	SpeedToPos
00012D10 0828 0000 0022             		btst	#0,$22(a0)
00012D16 6600                       		bne.s	Obj62_StopFire2
00012D18 76F8                       		moveq	#-8,d3
00012D1A 6100 0000                  		bsr.w	ObjHitWallLeft
00012D1E 4A41                       		tst.w	d1
00012D20 6B00 B35E                  		bmi.w	DeleteObject	; delete if the	fireball hits a	wall
00012D24 4E75                       		rts	
00012D26                            ; ===========================================================================
00012D26                            
00012D26                            Obj62_StopFire2:
00012D26 7608                       		moveq	#8,d3
00012D28 6100 0000                  		bsr.w	ObjHitWallRight
00012D2C 4A41                       		tst.w	d1
00012D2E 6B00 B350                  		bmi.w	DeleteObject
00012D32 4E75                       		rts	
00012D34                            ; ===========================================================================
00012D34                            ; ---------------------------------------------------------------------------
00012D34                            ; Sprite mappings - gargoyle head (LZ)
00012D34                            ; ---------------------------------------------------------------------------
00012D34                            Map_obj62:
00012D34                            	include "_maps\obj62.asm"
00012D34                            ; ---------------------------------------------------------------------------
00012D34                            ; Sprite mappings - gargoyle head (LZ)
00012D34                            ; ---------------------------------------------------------------------------
00012D34 0000 0000                  		dc.w byte_12320-Map_obj62, byte_12320-Map_obj62
00012D38 0000 0000                  		dc.w byte_12330-Map_obj62, byte_12336-Map_obj62
00012D3C 03                         byte_12320:	dc.b 3
00012D3D F004 0000 00               		dc.b $F0, 4, 0,	0, 0
00012D42 F80D 0002 F0               		dc.b $F8, $D, 0, 2, $F0
00012D47 0808 000A F8               		dc.b 8,	8, 0, $A, $F8
00012D4C 01                         byte_12330:	dc.b 1
00012D4D FC04 000D F8               		dc.b $FC, 4, 0,	$D, $F8
00012D52 01                         byte_12336:	dc.b 1
00012D53 FC04 000F F8               		dc.b $FC, 4, 0,	$F, $F8
00012D58                            		even
00012D58                            		even
00012D58                            
00012D58                            ; ===========================================================================
00012D58                            ; ---------------------------------------------------------------------------
00012D58                            ; Object 63 - platforms	on a conveyor belt (LZ)
00012D58                            ; ---------------------------------------------------------------------------
00012D58                            
00012D58                            Obj63:					; XREF: Obj_Index
00012D58 7000                       		moveq	#0,d0
00012D5A 1028 0024                  		move.b	$24(a0),d0
00012D5E 323B 0000                  		move.w	Obj63_Index(pc,d0.w),d1
00012D62 4EBB 1000                  		jsr	Obj63_Index(pc,d1.w)
00012D66 3028 0030                  		move.w	$30(a0),d0
00012D6A 0240 FF80                  		andi.w	#$FF80,d0
00012D6E 3238 F700                  		move.w	($FFFFF700).w,d1
00012D72 0441 0080                  		subi.w	#$80,d1
00012D76 0241 FF80                  		andi.w	#$FF80,d1
00012D7A 9041                       		sub.w	d1,d0
00012D7C 0C40 0280                  		cmpi.w	#$280,d0
00012D80 6200                       		bhi.s	loc_1236A
00012D82                            
00012D82                            Obj63_Display:				; XREF: loc_1236A
00012D82 6000 B2C0                  		bra.w	DisplaySprite
00012D86                            ; ===========================================================================
00012D86                            
00012D86                            loc_1236A:				; XREF: Obj63
00012D86 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w
00012D8C 6600                       		bne.s	loc_12378
00012D8E 0C40 FF80                  		cmpi.w	#-$80,d0
00012D92 64EE                       		bcc.s	Obj63_Display
00012D94                            
00012D94                            loc_12378:
00012D94 1028 002F                  		move.b	$2F(a0),d0
00012D98 6A00 B2E6                  		bpl.w	DeleteObject
00012D9C 0240 007F                  		andi.w	#$7F,d0
00012DA0 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00012DA4 08B2 0000 0000             		bclr	#0,(a2,d0.w)
00012DAA 6000 B2D4                  		bra.w	DeleteObject
00012DAE                            ; ===========================================================================
00012DAE 0000                       Obj63_Index:	dc.w Obj63_Main-Obj63_Index
00012DB0 0000                       		dc.w loc_124B2-Obj63_Index
00012DB2 0000                       		dc.w loc_124C2-Obj63_Index
00012DB4 0000                       		dc.w loc_124DE-Obj63_Index
00012DB6                            ; ===========================================================================
00012DB6                            
00012DB6                            Obj63_Main:				; XREF: Obj63_Index
00012DB6 1028 0028                  		move.b	$28(a0),d0
00012DBA 6B00 0000                  		bmi.w	loc_12460
00012DBE 5428 0024                  		addq.b	#2,$24(a0)
00012DC2 217C 0000 0000 0004        		move.l	#Map_obj63,4(a0)
00012DCA 317C 43F6 0002             		move.w	#$43F6,2(a0)
00012DD0 0028 0004 0001             		ori.b	#4,1(a0)
00012DD6 117C 0010 0019             		move.b	#$10,$19(a0)
00012DDC 117C 0004 0018             		move.b	#4,$18(a0)
00012DE2 0C28 007F 0028             		cmpi.b	#$7F,$28(a0)
00012DE8 6600                       		bne.s	loc_123E2
00012DEA 5828 0024                  		addq.b	#4,$24(a0)
00012DEE 317C 03F6 0002             		move.w	#$3F6,2(a0)
00012DF4 117C 0001 0018             		move.b	#1,$18(a0)
00012DFA 6000 0000                  		bra.w	loc_124DE
00012DFE                            ; ===========================================================================
00012DFE                            
00012DFE                            loc_123E2:
00012DFE 117C 0004 001A             		move.b	#4,$1A(a0)
00012E04 7000                       		moveq	#0,d0
00012E06 1028 0028                  		move.b	$28(a0),d0
00012E0A 3200                       		move.w	d0,d1
00012E0C E648                       		lsr.w	#3,d0
00012E0E 0240 001E                  		andi.w	#$1E,d0
00012E12 45FA 0000                  		lea	Obj63_Data(pc),a2
00012E16 D4F2 0000                  		adda.w	(a2,d0.w),a2
00012E1A 315A 0038                  		move.w	(a2)+,$38(a0)
00012E1E 315A 0030                  		move.w	(a2)+,$30(a0)
00012E22 214A 003C                  		move.l	a2,$3C(a0)
00012E26 0241 000F                  		andi.w	#$F,d1
00012E2A E549                       		lsl.w	#2,d1
00012E2C 1141 0038                  		move.b	d1,$38(a0)
00012E30 117C 0004 003A             		move.b	#4,$3A(a0)
00012E36 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00012E3A 6700                       		beq.s	loc_1244C
00012E3C 117C 0001 003B             		move.b	#1,$3B(a0)
00012E42 4428 003A                  		neg.b	$3A(a0)
00012E46 7200                       		moveq	#0,d1
00012E48 1228 0038                  		move.b	$38(a0),d1
00012E4C D228 003A                  		add.b	$3A(a0),d1
00012E50 B228 0039                  		cmp.b	$39(a0),d1
00012E54 6500                       		bcs.s	loc_12448
00012E56 1001                       		move.b	d1,d0
00012E58 7200                       		moveq	#0,d1
00012E5A 4A00                       		tst.b	d0
00012E5C 6A00                       		bpl.s	loc_12448
00012E5E 1228 0039                  		move.b	$39(a0),d1
00012E62 5901                       		subq.b	#4,d1
00012E64                            
00012E64                            loc_12448:
00012E64 1141 0038                  		move.b	d1,$38(a0)
00012E68                            
00012E68                            loc_1244C:
00012E68 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
00012E6E 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
00012E74 6100 0000                  		bsr.w	Obj63_ChangeDir
00012E78 6000 0000                  		bra.w	loc_124B2
00012E7C                            ; ===========================================================================
00012E7C                            
00012E7C                            loc_12460:				; XREF: Obj63_Main
00012E7C 1140 002F                  		move.b	d0,$2F(a0)
00012E80 0240 007F                  		andi.w	#$7F,d0
00012E84 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00012E88 08F2 0000 0000             		bset	#0,(a2,d0.w)
00012E8E 6600 B1F0                  		bne.w	DeleteObject
00012E92 D040                       		add.w	d0,d0
00012E94 0240 001E                  		andi.w	#$1E,d0
00012E98 45F9 0000 0000             		lea	(ObjPos_LZxpf_Index).l,a2
00012E9E D4F2 0000                  		adda.w	(a2,d0.w),a2
00012EA2 321A                       		move.w	(a2)+,d1
00012EA4 2248                       		movea.l	a0,a1
00012EA6 6000                       		bra.s	Obj63_MakePtfms
00012EA8                            ; ===========================================================================
00012EA8                            
00012EA8                            Obj63_Loop:
00012EA8 6100 B620                  		bsr.w	SingleObjLoad
00012EAC 6600                       		bne.s	loc_124AA
00012EAE                            
00012EAE                            Obj63_MakePtfms:			; XREF: loc_12460
00012EAE 12BC 0063                  		move.b	#$63,0(a1)
00012EB2 335A 0008                  		move.w	(a2)+,8(a1)
00012EB6 335A 000C                  		move.w	(a2)+,$C(a1)
00012EBA 301A                       		move.w	(a2)+,d0
00012EBC 1340 0028                  		move.b	d0,$28(a1)
00012EC0                            
00012EC0                            loc_124AA:
00012EC0 51C9 FFE6                  		dbf	d1,Obj63_Loop
00012EC4                            
00012EC4 588F                       		addq.l	#4,sp
00012EC6 4E75                       		rts	
00012EC8                            ; ===========================================================================
00012EC8                            
00012EC8                            loc_124B2:				; XREF: Obj63_Index
00012EC8 7200                       		moveq	#0,d1
00012ECA 1228 0019                  		move.b	$19(a0),d1
00012ECE 4EB9 0000 7C56             		jsr	(PlatformObject).l
00012ED4 6000 0000                  		bra.w	sub_12502
00012ED8                            ; ===========================================================================
00012ED8                            
00012ED8                            loc_124C2:				; XREF: Obj63_Index
00012ED8 7200                       		moveq	#0,d1
00012EDA 1228 0019                  		move.b	$19(a0),d1
00012EDE 4EB9 0000 7DCA             		jsr	(ExitPlatform).l
00012EE4 3F28 0008                  		move.w	8(a0),-(sp)
00012EE8 6100 0000                  		bsr.w	sub_12502
00012EEC 341F                       		move.w	(sp)+,d2
00012EEE 4EF9 0000 8334             		jmp	(MvSonicOnPtfm2).l
00012EF4                            ; ===========================================================================
00012EF4                            
00012EF4                            loc_124DE:				; XREF: Obj63_Index
00012EF4 3038 FE04                  		move.w	($FFFFFE04).w,d0
00012EF8 0240 0003                  		andi.w	#3,d0
00012EFC 6600                       		bne.s	loc_124FC
00012EFE 7201                       		moveq	#1,d1
00012F00 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00012F04 6700                       		beq.s	loc_124F2
00012F06 4401                       		neg.b	d1
00012F08                            
00012F08                            loc_124F2:
00012F08 D328 001A                  		add.b	d1,$1A(a0)
00012F0C 0228 0003 001A             		andi.b	#3,$1A(a0)
00012F12                            
00012F12                            loc_124FC:
00012F12 588F                       		addq.l	#4,sp
00012F14 6000 D1D6                  		bra.w	MarkObjGone
00012F18                            
00012F18                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012F18                            
00012F18                            
00012F18                            sub_12502:				; XREF: loc_124B2; loc_124C2
00012F18 4A38 F7EE                  		tst.b	($FFFFF7EE).w
00012F1C 6700                       		beq.s	loc_12520
00012F1E 4A28 003B                  		tst.b	$3B(a0)
00012F22 6600                       		bne.s	loc_12520
00012F24 117C 0001 003B             		move.b	#1,$3B(a0)
00012F2A 11FC 0001 F7C0             		move.b	#1,($FFFFF7C0).w
00012F30 4428 003A                  		neg.b	$3A(a0)
00012F34 6000                       		bra.s	loc_12534
00012F36                            ; ===========================================================================
00012F36                            
00012F36                            loc_12520:
00012F36 3028 0008                  		move.w	8(a0),d0
00012F3A B068 0034                  		cmp.w	$34(a0),d0
00012F3E 6600                       		bne.s	loc_1256A
00012F40 3028 000C                  		move.w	$C(a0),d0
00012F44 B068 0036                  		cmp.w	$36(a0),d0
00012F48 6600                       		bne.s	loc_1256A
00012F4A                            
00012F4A                            loc_12534:
00012F4A 7200                       		moveq	#0,d1
00012F4C 1228 0038                  		move.b	$38(a0),d1
00012F50 D228 003A                  		add.b	$3A(a0),d1
00012F54 B228 0039                  		cmp.b	$39(a0),d1
00012F58 6500                       		bcs.s	loc_12552
00012F5A 1001                       		move.b	d1,d0
00012F5C 7200                       		moveq	#0,d1
00012F5E 4A00                       		tst.b	d0
00012F60 6A00                       		bpl.s	loc_12552
00012F62 1228 0039                  		move.b	$39(a0),d1
00012F66 5901                       		subq.b	#4,d1
00012F68                            
00012F68                            loc_12552:
00012F68 1141 0038                  		move.b	d1,$38(a0)
00012F6C 2268 003C                  		movea.l	$3C(a0),a1
00012F70 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
00012F76 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
00012F7C 6100 0000                  		bsr.w	Obj63_ChangeDir
00012F80                            
00012F80                            loc_1256A:
00012F80 6100 B09C                  		bsr.w	SpeedToPos
00012F84 4E75                       		rts	
00012F86                            ; End of function sub_12502
00012F86                            
00012F86                            
00012F86                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012F86                            
00012F86                            
00012F86                            Obj63_ChangeDir:			; XREF: loc_123E2; sub_12502
00012F86 7000                       		moveq	#0,d0
00012F88 343C FF00                  		move.w	#-$100,d2
00012F8C 3028 0008                  		move.w	8(a0),d0
00012F90 9068 0034                  		sub.w	$34(a0),d0
00012F94 6400                       		bcc.s	loc_12584
00012F96 4440                       		neg.w	d0
00012F98 4442                       		neg.w	d2
00012F9A                            
00012F9A                            loc_12584:
00012F9A 7200                       		moveq	#0,d1
00012F9C 363C FF00                  		move.w	#-$100,d3
00012FA0 3228 000C                  		move.w	$C(a0),d1
00012FA4 9268 0036                  		sub.w	$36(a0),d1
00012FA8 6400                       		bcc.s	loc_12598
00012FAA 4441                       		neg.w	d1
00012FAC 4443                       		neg.w	d3
00012FAE                            
00012FAE                            loc_12598:
00012FAE B240                       		cmp.w	d0,d1
00012FB0 6500                       		bcs.s	loc_125C2
00012FB2 3028 0008                  		move.w	8(a0),d0
00012FB6 9068 0034                  		sub.w	$34(a0),d0
00012FBA 6700                       		beq.s	loc_125AE
00012FBC 48C0                       		ext.l	d0
00012FBE E180                       		asl.l	#8,d0
00012FC0 81C1                       		divs.w	d1,d0
00012FC2 4440                       		neg.w	d0
00012FC4                            
00012FC4                            loc_125AE:
00012FC4 3140 0010                  		move.w	d0,$10(a0)
00012FC8 3143 0012                  		move.w	d3,$12(a0)
00012FCC 4840                       		swap	d0
00012FCE 3140 000A                  		move.w	d0,$A(a0)
00012FD2 4268 000E                  		clr.w	$E(a0)
00012FD6 4E75                       		rts	
00012FD8                            ; ===========================================================================
00012FD8                            
00012FD8                            loc_125C2:				; XREF: Obj63_ChangeDir
00012FD8 3228 000C                  		move.w	$C(a0),d1
00012FDC 9268 0036                  		sub.w	$36(a0),d1
00012FE0 6700                       		beq.s	loc_125D4
00012FE2 48C1                       		ext.l	d1
00012FE4 E181                       		asl.l	#8,d1
00012FE6 83C0                       		divs.w	d0,d1
00012FE8 4441                       		neg.w	d1
00012FEA                            
00012FEA                            loc_125D4:
00012FEA 3141 0012                  		move.w	d1,$12(a0)
00012FEE 3142 0010                  		move.w	d2,$10(a0)
00012FF2 4841                       		swap	d1
00012FF4 3141 000E                  		move.w	d1,$E(a0)
00012FF8 4268 000A                  		clr.w	$A(a0)
00012FFC 4E75                       		rts	
00012FFE                            ; End of function Obj63_ChangeDir
00012FFE                            
00012FFE                            ; ===========================================================================
00012FFE 0000                       Obj63_Data:	dc.w word_125F4-Obj63_Data
00013000 0000                       		dc.w word_12610-Obj63_Data
00013002 0000                       		dc.w word_12628-Obj63_Data
00013004 0000                       		dc.w word_1263C-Obj63_Data
00013006 0000                       		dc.w word_12650-Obj63_Data
00013008 0000                       		dc.w word_12668-Obj63_Data
0001300A 0018 1070 1078 021A 10BE+  word_125F4:	dc.w $18, $1070, $1078,	$21A, $10BE, $260, $10BE, $393
0001301A 108C 03C5 1022 0390 1022+  		dc.w $108C, $3C5, $1022, $390, $1022, $244
00013026 0014 1280 127E 0280 12CE+  word_12610:	dc.w $14, $1280, $127E,	$280, $12CE, $2D0, $12CE, $46E
00013036 1232 0420 1232 02CC        		dc.w $1232, $420, $1232, $2CC
0001303E 0010 0D68 0D22 0482 0D22+  word_12628:	dc.w $10, $D68,	$D22, $482, $D22, $5DE,	$DAE, $5DE, $DAE, $482
00013052 0010 0DA0 0D62 03A2 0DEE+  word_1263C:	dc.w $10, $DA0,	$D62, $3A2, $DEE, $3A2,	$DEE, $4DE, $D62, $4DE
00013066 0014 0D00 0CAC 0242 0DDE+  word_12650:	dc.w $14, $D00,	$CAC, $242, $DDE, $242,	$DDE, $3DE, $C52, $3DE,	$C52, $29C
0001307E 0010 1300 1252 020A 13DE+  word_12668:	dc.w $10, $1300, $1252,	$20A, $13DE, $20A, $13DE, $2BE,	$1252, $2BE
00013092                            
00013092                            ; ---------------------------------------------------------------------------
00013092                            ; Sprite mappings - platforms on a conveyor belt (LZ)
00013092                            ; ---------------------------------------------------------------------------
00013092                            Map_obj63:
00013092                            	include "_maps\obj63.asm"
00013092                            ; ---------------------------------------------------------------------------
00013092                            ; Sprite mappings - platforms on a conveyor belt (LZ)
00013092                            ; ---------------------------------------------------------------------------
00013092 0000 0000                  		dc.w byte_12686-Map_obj63, byte_1268C-Map_obj63
00013096 0000 0000                  		dc.w byte_12692-Map_obj63, byte_12698-Map_obj63
0001309A 0000                       		dc.w byte_1269E-Map_obj63
0001309C 01                         byte_12686:	dc.b 1
0001309D F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
000130A2 01                         byte_1268C:	dc.b 1
000130A3 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
000130A8 01                         byte_12692:	dc.b 1
000130A9 F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
000130AE 01                         byte_12698:	dc.b 1
000130AF F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
000130B4 01                         byte_1269E:	dc.b 1
000130B5 F80D 0040 F0               		dc.b $F8, $D, 0, $40, $F0
000130BA                            		even
000130BA                            		even
000130BA                            
000130BA                            ; ===========================================================================
000130BA                            ; ---------------------------------------------------------------------------
000130BA                            ; Object 64 - bubbles (LZ)
000130BA                            ; ---------------------------------------------------------------------------
000130BA                            
000130BA                            Obj64:					; XREF: Obj_Index
000130BA 7000                       		moveq	#0,d0
000130BC 1028 0024                  		move.b	$24(a0),d0
000130C0 323B 0000                  		move.w	Obj64_Index(pc,d0.w),d1
000130C4 4EFB 1000                  		jmp	Obj64_Index(pc,d1.w)
000130C8                            ; ===========================================================================
000130C8 0000                       Obj64_Index:	dc.w Obj64_Main-Obj64_Index
000130CA 0000                       		dc.w Obj64_Animate-Obj64_Index
000130CC 0000                       		dc.w Obj64_ChkWater-Obj64_Index
000130CE 0000                       		dc.w Obj64_Display2-Obj64_Index
000130D0 0000                       		dc.w Obj64_Delete3-Obj64_Index
000130D2 0000                       		dc.w Obj64_BblMaker-Obj64_Index
000130D4                            ; ===========================================================================
000130D4                            
000130D4                            Obj64_Main:				; XREF: Obj64_Index
000130D4 5428 0024                  		addq.b	#2,$24(a0)
000130D8 217C 0000 0000 0004        		move.l	#Map_obj64,4(a0)
000130E0 317C 8348 0002             		move.w	#$8348,2(a0)
000130E6 117C 0084 0001             		move.b	#$84,1(a0)
000130EC 117C 0010 0019             		move.b	#$10,$19(a0)
000130F2 117C 0001 0018             		move.b	#1,$18(a0)
000130F8 1028 0028                  		move.b	$28(a0),d0	; get object type
000130FC 6A00                       		bpl.s	Obj64_Bubble	; if type is $0-$7F, branch
000130FE 5028 0024                  		addq.b	#8,$24(a0)
00013102 0240 007F                  		andi.w	#$7F,d0		; read only last 7 bits	(deduct	$80)
00013106 1140 0032                  		move.b	d0,$32(a0)
0001310A 1140 0033                  		move.b	d0,$33(a0)
0001310E 117C 0006 001C             		move.b	#6,$1C(a0)
00013114 6000 0000                  		bra.w	Obj64_BblMaker
00013118                            ; ===========================================================================
00013118                            
00013118                            Obj64_Bubble:				; XREF: Obj64_Main
00013118 1140 001C                  		move.b	d0,$1C(a0)
0001311C 3168 0008 0030             		move.w	8(a0),$30(a0)
00013122 317C FF78 0012             		move.w	#-$88,$12(a0)	; float	bubble upwards
00013128 4EB9 0000 2D0E             		jsr	(RandomNumber).l
0001312E 1140 0026                  		move.b	d0,$26(a0)
00013132                            
00013132                            Obj64_Animate:				; XREF: Obj64_Index
00013132 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00013138 4EB9 0000 B09A             		jsr	AnimateSprite
0001313E 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
00013144 6600                       		bne.s	Obj64_ChkWater
00013146 117C 0001 002E             		move.b	#1,$2E(a0)
0001314C                            
0001314C                            Obj64_ChkWater:				; XREF: Obj64_Index
0001314C 3038 F646                  		move.w	($FFFFF646).w,d0
00013150 B068 000C                  		cmp.w	$C(a0),d0	; is bubble underwater?
00013154 6500                       		bcs.s	Obj64_Wobble	; if yes, branch
00013156                            
00013156                            Obj64_Burst:				; XREF: Obj64_Wobble
00013156 117C 0006 0024             		move.b	#6,$24(a0)
0001315C 5628 001C                  		addq.b	#3,$1C(a0)	; run "bursting" animation
00013160 6000 0000                  		bra.w	Obj64_Display2
00013164                            ; ===========================================================================
00013164                            
00013164                            Obj64_Wobble:				; XREF: Obj64_ChkWater
00013164 1028 0026                  		move.b	$26(a0),d0
00013168 5228 0026                  		addq.b	#1,$26(a0)
0001316C 0240 007F                  		andi.w	#$7F,d0
00013170 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
00013176 1031 0000                  		move.b	(a1,d0.w),d0
0001317A 4880                       		ext.w	d0
0001317C D068 0030                  		add.w	$30(a0),d0
00013180 3140 0008                  		move.w	d0,8(a0)	; change bubble's horizontal position
00013184 4A28 002E                  		tst.b	$2E(a0)
00013188 6700                       		beq.s	Obj64_Display
0001318A 6100 0000                  		bsr.w	Obj64_ChkSonic	; has Sonic touched the	bubble?
0001318E 6700                       		beq.s	Obj64_Display	; if not, branch
00013190                            
00013190 6100 0000                  		bsr.w	ResumeMusic	; cancel countdown music
00013194 303C 00AD                  		move.w	#$AD,d0
00013198 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play collecting	bubble sound
0001319E 43F8 D000                  		lea	($FFFFD000).w,a1
000131A2 4269 0010                  		clr.w	$10(a1)
000131A6 4269 0012                  		clr.w	$12(a1)
000131AA 4269 0014                  		clr.w	$14(a1)
000131AE 137C 0015 001C             		move.b	#$15,$1C(a1)
000131B4 337C 0023 003E             		move.w	#$23,$3E(a1)
000131BA 137C 0000 003C             		move.b	#0,$3C(a1)
000131C0 08A9 0005 0022             		bclr	#5,$22(a1)
000131C6 08A9 0004 0022             		bclr	#4,$22(a1)
000131CC 0829 0002 0022             		btst	#2,$22(a1)
000131D2 6700 FF82                  		beq.w	Obj64_Burst
000131D6 08A9 0002 0022             		bclr	#2,$22(a1)
000131DC 137C 0013 0016             		move.b	#$13,$16(a1)
000131E2 137C 0009 0017             		move.b	#9,$17(a1)
000131E8 5B69 000C                  		subq.w	#5,$C(a1)
000131EC 6000 FF68                  		bra.w	Obj64_Burst
000131F0                            ; ===========================================================================
000131F0                            
000131F0                            Obj64_Display:				; XREF: Obj64_Wobble
000131F0 6100 AE2C                  		bsr.w	SpeedToPos
000131F4 4A28 0001                  		tst.b	1(a0)
000131F8 6A00                       		bpl.s	Obj64_Delete
000131FA 4EFA AE48                  		jmp	DisplaySprite
000131FE                            ; ===========================================================================
000131FE                            
000131FE                            Obj64_Delete:
000131FE 4EFA AE80                  		jmp	DeleteObject
00013202                            ; ===========================================================================
00013202                            
00013202                            Obj64_Display2:				; XREF: Obj64_Index
00013202 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00013208 4EB9 0000 B09A             		jsr	AnimateSprite
0001320E 4A28 0001                  		tst.b	1(a0)
00013212 6A00                       		bpl.s	Obj64_Delete2
00013214 4EFA AE2E                  		jmp	DisplaySprite
00013218                            ; ===========================================================================
00013218                            
00013218                            Obj64_Delete2:
00013218 4EFA AE66                  		jmp	DeleteObject
0001321C                            ; ===========================================================================
0001321C                            
0001321C                            Obj64_Delete3:				; XREF: Obj64_Index
0001321C 6000 AE62                  		bra.w	DeleteObject
00013220                            ; ===========================================================================
00013220                            
00013220                            Obj64_BblMaker:				; XREF: Obj64_Index
00013220 4A68 0036                  		tst.w	$36(a0)
00013224 6600                       		bne.s	loc_12874
00013226 3038 F646                  		move.w	($FFFFF646).w,d0
0001322A B068 000C                  		cmp.w	$C(a0),d0	; is bubble maker underwater?
0001322E 6400 0000                  		bcc.w	Obj64_ChkDel	; if not, branch
00013232 4A28 0001                  		tst.b	1(a0)
00013236 6A00 0000                  		bpl.w	Obj64_ChkDel
0001323A 5368 0038                  		subq.w	#1,$38(a0)
0001323E 6A00 0000                  		bpl.w	loc_12914
00013242 317C 0001 0036             		move.w	#1,$36(a0)
00013248                            
00013248                            loc_1283A:
00013248 4EB9 0000 2D0E             		jsr	(RandomNumber).l
0001324E 3200                       		move.w	d0,d1
00013250 0240 0007                  		andi.w	#7,d0
00013254 0C40 0006                  		cmpi.w	#6,d0
00013258 64EE                       		bcc.s	loc_1283A
0001325A                            
0001325A 1140 0034                  		move.b	d0,$34(a0)
0001325E 0241 000C                  		andi.w	#$C,d1
00013262 43F9 0000 0000             		lea	(Obj64_BblTypes).l,a1
00013268 D2C1                       		adda.w	d1,a1
0001326A 2149 003C                  		move.l	a1,$3C(a0)
0001326E 5328 0032                  		subq.b	#1,$32(a0)
00013272 6A00                       		bpl.s	loc_12872
00013274 1168 0033 0032             		move.b	$33(a0),$32(a0)
0001327A 08E8 0007 0036             		bset	#7,$36(a0)
00013280                            
00013280                            loc_12872:
00013280 6000                       		bra.s	loc_1287C
00013282                            ; ===========================================================================
00013282                            
00013282                            loc_12874:				; XREF: Obj64_BblMaker
00013282 5368 0038                  		subq.w	#1,$38(a0)
00013286 6A00 0000                  		bpl.w	loc_12914
0001328A                            
0001328A                            loc_1287C:
0001328A 4EB9 0000 2D0E             		jsr	(RandomNumber).l
00013290 0240 001F                  		andi.w	#$1F,d0
00013294 3140 0038                  		move.w	d0,$38(a0)
00013298 6100 B230                  		bsr.w	SingleObjLoad
0001329C 6600                       		bne.s	loc_128F8
0001329E 12BC 0064                  		move.b	#$64,0(a1)	; load bubble object
000132A2 3368 0008 0008             		move.w	8(a0),8(a1)
000132A8 4EB9 0000 2D0E             		jsr	(RandomNumber).l
000132AE 0240 000F                  		andi.w	#$F,d0
000132B2 5140                       		subq.w	#8,d0
000132B4 D169 0008                  		add.w	d0,8(a1)
000132B8 3368 000C 000C             		move.w	$C(a0),$C(a1)
000132BE 7000                       		moveq	#0,d0
000132C0 1028 0034                  		move.b	$34(a0),d0
000132C4 2468 003C                  		movea.l	$3C(a0),a2
000132C8 1372 0000 0028             		move.b	(a2,d0.w),$28(a1)
000132CE 0828 0007 0036             		btst	#7,$36(a0)
000132D4 6700                       		beq.s	loc_128F8
000132D6 4EB9 0000 2D0E             		jsr	(RandomNumber).l
000132DC 0240 0003                  		andi.w	#3,d0
000132E0 6600                       		bne.s	loc_128E4
000132E2 08E8 0006 0036             		bset	#6,$36(a0)
000132E8 6600                       		bne.s	loc_128F8
000132EA 137C 0002 0028             		move.b	#2,$28(a1)
000132F0                            
000132F0                            loc_128E4:
000132F0 4A28 0034                  		tst.b	$34(a0)
000132F4 6600                       		bne.s	loc_128F8
000132F6 08E8 0006 0036             		bset	#6,$36(a0)
000132FC 6600                       		bne.s	loc_128F8
000132FE 137C 0002 0028             		move.b	#2,$28(a1)
00013304                            
00013304                            loc_128F8:
00013304 5328 0034                  		subq.b	#1,$34(a0)
00013308 6A00                       		bpl.s	loc_12914
0001330A 4EB9 0000 2D0E             		jsr	(RandomNumber).l
00013310 0240 007F                  		andi.w	#$7F,d0
00013314 0640 0080                  		addi.w	#$80,d0
00013318 D168 0038                  		add.w	d0,$38(a0)
0001331C 4268 0036                  		clr.w	$36(a0)
00013320                            
00013320                            loc_12914:
00013320 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00013326 4EB9 0000 B09A             		jsr	AnimateSprite
0001332C                            
0001332C                            Obj64_ChkDel:				; XREF: Obj64_BblMaker
0001332C 3028 0008                  		move.w	8(a0),d0
00013330 0240 FF80                  		andi.w	#$FF80,d0
00013334 3238 F700                  		move.w	($FFFFF700).w,d1
00013338 0441 0080                  		subi.w	#$80,d1
0001333C 0241 FF80                  		andi.w	#$FF80,d1
00013340 9041                       		sub.w	d1,d0
00013342 0C40 0280                  		cmpi.w	#$280,d0
00013346 6200 AD38                  		bhi.w	DeleteObject
0001334A 3038 F646                  		move.w	($FFFFF646).w,d0
0001334E B068 000C                  		cmp.w	$C(a0),d0
00013352 6500 ACF0                  		bcs.w	DisplaySprite
00013356 4E75                       		rts	
00013358                            ; ===========================================================================
00013358                            ; bubble production sequence
00013358                            
00013358                            ; 0 = small bubble, 1 =	large bubble
00013358                            
00013358 0001 0000 0000 0100 0000+  Obj64_BblTypes:	dc.b 0,	1, 0, 0, 0, 0, 1, 0, 0,	0, 0, 1, 0, 1, 0, 0, 1,	0
0001336A                            
0001336A                            ; ===========================================================================
0001336A                            
0001336A                            Obj64_ChkSonic:				; XREF: Obj64_Wobble
0001336A 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0001336E 6B00                       		bmi.s	loc_12998
00013370 43F8 D000                  		lea	($FFFFD000).w,a1
00013374 3029 0008                  		move.w	8(a1),d0
00013378 3228 0008                  		move.w	8(a0),d1
0001337C 0441 0010                  		subi.w	#$10,d1
00013380 B240                       		cmp.w	d0,d1
00013382 6400                       		bcc.s	loc_12998
00013384 0641 0020                  		addi.w	#$20,d1
00013388 B240                       		cmp.w	d0,d1
0001338A 6500                       		bcs.s	loc_12998
0001338C 3029 000C                  		move.w	$C(a1),d0
00013390 3228 000C                  		move.w	$C(a0),d1
00013394 B240                       		cmp.w	d0,d1
00013396 6400                       		bcc.s	loc_12998
00013398 0641 0010                  		addi.w	#$10,d1
0001339C B240                       		cmp.w	d0,d1
0001339E 6500                       		bcs.s	loc_12998
000133A0 7001                       		moveq	#1,d0
000133A2 4E75                       		rts	
000133A4                            ; ===========================================================================
000133A4                            
000133A4                            loc_12998:
000133A4 7000                       		moveq	#0,d0
000133A6 4E75                       		rts	
000133A8                            ; ===========================================================================
000133A8                            Ani_obj64:
000133A8                            	include "_anim\obj64.asm"
000133A8                            ; ---------------------------------------------------------------------------
000133A8                            ; Animation script - bubbles (LZ)
000133A8                            ; ---------------------------------------------------------------------------
000133A8 0000                       		dc.w byte_129AA-Ani_obj64
000133AA 0000                       		dc.w byte_129B0-Ani_obj64
000133AC 0000                       		dc.w byte_129B6-Ani_obj64
000133AE 0000                       		dc.w byte_129BE-Ani_obj64
000133B0 0000                       		dc.w byte_129BE-Ani_obj64
000133B2 0000                       		dc.w byte_129C0-Ani_obj64
000133B4 0000                       		dc.w byte_129C6-Ani_obj64
000133B6 0E00 0102 FC00             byte_129AA:	dc.b $E, 0, 1, 2, $FC, 0
000133BC 0E01 0203 04FC             byte_129B0:	dc.b $E, 1, 2, 3, 4, $FC
000133C2 0E02 0304 0506 FC00        byte_129B6:	dc.b $E, 2, 3, 4, 5, 6,	$FC, 0
000133CA 04FC                       byte_129BE:	dc.b 4,	$FC
000133CC 0406 0708 FC00             byte_129C0:	dc.b 4,	6, 7, 8, $FC, 0
000133D2 0F13 1415 FF               byte_129C6:	dc.b $F, $13, $14, $15,	$FF
000133D8 00                         		even
000133D8 00                         		even
000133D8                            
000133D8                            ; ---------------------------------------------------------------------------
000133D8                            ; Sprite mappings - bubbles (LZ)
000133D8                            ; ---------------------------------------------------------------------------
000133D8                            Map_obj64:
000133D8                            	include "_maps\obj64.asm"
000133D8                            ; ---------------------------------------------------------------------------
000133D8                            ; Sprite mappings - bubbles (LZ)
000133D8                            ; ---------------------------------------------------------------------------
000133D8 0000 0000                  		dc.w byte_129FA-Map_obj64, byte_12A00-Map_obj64
000133DC 0000 0000                  		dc.w byte_12A06-Map_obj64, byte_12A0C-Map_obj64
000133E0 0000 0000                  		dc.w byte_12A12-Map_obj64, byte_12A18-Map_obj64
000133E4 0000 0000                  		dc.w byte_12A1E-Map_obj64, byte_12A24-Map_obj64
000133E8 0000 0000                  		dc.w byte_12A39-Map_obj64, byte_12A4E-Map_obj64
000133EC 0000 0000                  		dc.w byte_12A54-Map_obj64, byte_12A5A-Map_obj64
000133F0 0000 0000                  		dc.w byte_12A60-Map_obj64, byte_12A66-Map_obj64
000133F4 0000 0000                  		dc.w byte_12A6C-Map_obj64, byte_12A72-Map_obj64
000133F8 0000 0000                  		dc.w byte_12A78-Map_obj64, byte_12A7E-Map_obj64
000133FC 0000 0000                  		dc.w byte_12A84-Map_obj64, byte_12A8A-Map_obj64
00013400 0000 0000                  		dc.w byte_12A90-Map_obj64, byte_12A96-Map_obj64
00013404 0000                       		dc.w byte_12A9C-Map_obj64
00013406 01                         byte_129FA:	dc.b 1
00013407 FC00 0000 FC               		dc.b $FC, 0, 0,	0, $FC
0001340C 01                         byte_12A00:	dc.b 1
0001340D FC00 0001 FC               		dc.b $FC, 0, 0,	1, $FC
00013412 01                         byte_12A06:	dc.b 1
00013413 FC00 0002 FC               		dc.b $FC, 0, 0,	2, $FC
00013418 01                         byte_12A0C:	dc.b 1
00013419 F805 0003 F8               		dc.b $F8, 5, 0,	3, $F8
0001341E 01                         byte_12A12:	dc.b 1
0001341F F805 0007 F8               		dc.b $F8, 5, 0,	7, $F8
00013424 01                         byte_12A18:	dc.b 1
00013425 F40A 000B F4               		dc.b $F4, $A, 0, $B, $F4
0001342A 01                         byte_12A1E:	dc.b 1
0001342B F00F 0014 F0               		dc.b $F0, $F, 0, $14, $F0
00013430 04                         byte_12A24:	dc.b 4
00013431 F005 0024 F0               		dc.b $F0, 5, 0,	$24, $F0
00013436 F005 0824 00               		dc.b $F0, 5, 8,	$24, 0
0001343B 0005 1024 F0               		dc.b 0,	5, $10,	$24, $F0
00013440 0005 1824 00               		dc.b 0,	5, $18,	$24, 0
00013445 04                         byte_12A39:	dc.b 4
00013446 F005 0028 F0               		dc.b $F0, 5, 0,	$28, $F0
0001344B F005 0828 00               		dc.b $F0, 5, 8,	$28, 0
00013450 0005 1028 F0               		dc.b 0,	5, $10,	$28, $F0
00013455 0005 1828 00               		dc.b 0,	5, $18,	$28, 0
0001345A 01                         byte_12A4E:	dc.b 1
0001345B F406 002C F8               		dc.b $F4, 6, 0,	$2C, $F8
00013460 01                         byte_12A54:	dc.b 1
00013461 F406 0032 F8               		dc.b $F4, 6, 0,	$32, $F8
00013466 01                         byte_12A5A:	dc.b 1
00013467 F406 0038 F8               		dc.b $F4, 6, 0,	$38, $F8
0001346C 01                         byte_12A60:	dc.b 1
0001346D F406 003E F8               		dc.b $F4, 6, 0,	$3E, $F8
00013472 01                         byte_12A66:	dc.b 1
00013473 F406 2044 F8               		dc.b $F4, 6, $20, $44, $F8
00013478 01                         byte_12A6C:	dc.b 1
00013479 F406 204A F8               		dc.b $F4, 6, $20, $4A, $F8
0001347E 01                         byte_12A72:	dc.b 1
0001347F F406 2050 F8               		dc.b $F4, 6, $20, $50, $F8
00013484 01                         byte_12A78:	dc.b 1
00013485 F406 2056 F8               		dc.b $F4, 6, $20, $56, $F8
0001348A 01                         byte_12A7E:	dc.b 1
0001348B F406 205C F8               		dc.b $F4, 6, $20, $5C, $F8
00013490 01                         byte_12A84:	dc.b 1
00013491 F406 2062 F8               		dc.b $F4, 6, $20, $62, $F8
00013496 01                         byte_12A8A:	dc.b 1
00013497 F805 0068 F8               		dc.b $F8, 5, 0,	$68, $F8
0001349C 01                         byte_12A90:	dc.b 1
0001349D F805 006C F8               		dc.b $F8, 5, 0,	$6C, $F8
000134A2 01                         byte_12A96:	dc.b 1
000134A3 F805 0070 F8               		dc.b $F8, 5, 0,	$70, $F8
000134A8 00                         byte_12A9C:	dc.b 0
000134AA 00                         		even
000134AA 00                         		even
000134AA                            
000134AA                            ; ===========================================================================
000134AA                            ; ---------------------------------------------------------------------------
000134AA                            ; Object 65 - waterfalls (LZ)
000134AA                            ; ---------------------------------------------------------------------------
000134AA                            
000134AA                            Obj65:					; XREF: Obj_Index
000134AA 7000                       		moveq	#0,d0
000134AC 1028 0024                  		move.b	$24(a0),d0
000134B0 323B 0000                  		move.w	Obj65_Index(pc,d0.w),d1
000134B4 4EFB 1000                  		jmp	Obj65_Index(pc,d1.w)
000134B8                            ; ===========================================================================
000134B8 0000                       Obj65_Index:	dc.w Obj65_Main-Obj65_Index
000134BA 0000                       		dc.w Obj65_Animate-Obj65_Index
000134BC 0000                       		dc.w Obj65_ChkDel-Obj65_Index
000134BE 0000                       		dc.w Obj65_FixHeight-Obj65_Index
000134C0 0000                       		dc.w loc_12B36-Obj65_Index
000134C2                            ; ===========================================================================
000134C2                            
000134C2                            Obj65_Main:				; XREF: Obj65_Index
000134C2 5828 0024                  		addq.b	#4,$24(a0)
000134C6 217C 0000 0000 0004        		move.l	#Map_obj65,4(a0)
000134CE 317C 4259 0002             		move.w	#$4259,2(a0)
000134D4 0028 0004 0001             		ori.b	#4,1(a0)
000134DA 117C 0018 0019             		move.b	#$18,$19(a0)
000134E0 117C 0001 0018             		move.b	#1,$18(a0)
000134E6 1028 0028                  		move.b	$28(a0),d0	; get object type
000134EA 6A00                       		bpl.s	loc_12AE6
000134EC 08E8 0007 0002             		bset	#7,2(a0)
000134F2                            
000134F2                            loc_12AE6:
000134F2 0200 000F                  		andi.b	#$F,d0		; read only the	2nd byte
000134F6 1140 001A                  		move.b	d0,$1A(a0)	; set frame number
000134FA 0C00 0009                  		cmpi.b	#9,d0		; is object type $x9 ?
000134FE 6600                       		bne.s	Obj65_ChkDel	; if not, branch
00013500 4228 0018                  		clr.b	$18(a0)
00013504 5528 0024                  		subq.b	#2,$24(a0)
00013508 0828 0006 0028             		btst	#6,$28(a0)	; is object type $4x ?
0001350E 6700                       		beq.s	loc_12B0A	; if not, branch
00013510 117C 0006 0024             		move.b	#6,$24(a0)
00013516                            
00013516                            loc_12B0A:
00013516 0828 0005 0028             		btst	#5,$28(a0)	; is object type $Ax ?
0001351C 6700                       		beq.s	Obj65_Animate	; if not, branch
0001351E 117C 0008 0024             		move.b	#8,$24(a0)
00013524                            
00013524                            Obj65_Animate:				; XREF: Obj65_Index
00013524 43F9 0000 0000             		lea	(Ani_obj65).l,a1
0001352A 4EB9 0000 B09A             		jsr	AnimateSprite
00013530                            
00013530                            Obj65_ChkDel:				; XREF: Obj65_Index
00013530 6000 CBBA                  		bra.w	MarkObjGone
00013534                            ; ===========================================================================
00013534                            
00013534                            Obj65_FixHeight:			; XREF: Obj65_Index
00013534 3038 F646                  		move.w	($FFFFF646).w,d0
00013538 0440 0010                  		subi.w	#$10,d0
0001353C 3140 000C                  		move.w	d0,$C(a0)	; match	object position	to water height
00013540 60E2                       		bra.s	Obj65_Animate
00013542                            ; ===========================================================================
00013542                            
00013542                            loc_12B36:				; XREF: Obj65_Index
00013542 08A8 0007 0002             		bclr	#7,2(a0)
00013548 0C38 0007 A506             		cmpi.b	#7,($FFFFA506).w
0001354E 6600                       		bne.s	Obj65_Animate2
00013550 08E8 0007 0002             		bset	#7,2(a0)
00013556                            
00013556                            Obj65_Animate2:
00013556 60CC                       		bra.s	Obj65_Animate
00013558                            ; ===========================================================================
00013558                            Ani_obj65:
00013558                            	include "_anim\obj65.asm"
00013558                            ; ---------------------------------------------------------------------------
00013558                            ; Animation script - waterfall (LZ)
00013558                            ; ---------------------------------------------------------------------------
00013558 0000                       		dc.w byte_12B4E-Ani_obj65
0001355A 0509 0A0B FF               byte_12B4E:	dc.b 5,	9, $A, $B, $FF
00013560 00                         		even
00013560 00                         		even
00013560                            
00013560                            ; ---------------------------------------------------------------------------
00013560                            ; Sprite mappings - waterfalls (LZ)
00013560                            ; ---------------------------------------------------------------------------
00013560                            Map_obj65:
00013560                            	include "_maps\obj65.asm"
00013560                            ; ---------------------------------------------------------------------------
00013560                            ; Sprite mappings - waterfalls (LZ)
00013560                            ; ---------------------------------------------------------------------------
00013560 0000 0000                  		dc.w byte_12B6C-Map_obj65, byte_12B72-Map_obj65
00013564 0000 0000                  		dc.w byte_12B7D-Map_obj65, byte_12B88-Map_obj65
00013568 0000 0000                  		dc.w byte_12B8E-Map_obj65, byte_12B99-Map_obj65
0001356C 0000 0000                  		dc.w byte_12B9F-Map_obj65, byte_12BA5-Map_obj65
00013570 0000 0000                  		dc.w byte_12BAB-Map_obj65, byte_12BB6-Map_obj65
00013574 0000 0000                  		dc.w byte_12BC1-Map_obj65, byte_12BCC-Map_obj65
00013578 01                         byte_12B6C:	dc.b 1
00013579 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
0001357E 02                         byte_12B72:	dc.b 2
0001357F F804 0008 FC               		dc.b $F8, 4, 0,	8, $FC
00013584 0008 000A F4               		dc.b 0,	8, 0, $A, $F4
00013589 02                         byte_12B7D:	dc.b 2
0001358A F800 0008 00               		dc.b $F8, 0, 0,	8, 0
0001358F 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
00013594 01                         byte_12B88:	dc.b 1
00013595 F801 000F 00               		dc.b $F8, 1, 0,	$F, 0
0001359A 02                         byte_12B8E:	dc.b 2
0001359B F800 0008 00               		dc.b $F8, 0, 0,	8, 0
000135A0 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
000135A5 01                         byte_12B99:	dc.b 1
000135A6 F801 0011 00               		dc.b $F8, 1, 0,	$11, 0
000135AB 01                         byte_12B9F:	dc.b 1
000135AC F801 0013 00               		dc.b $F8, 1, 0,	$13, 0
000135B1 01                         byte_12BA5:	dc.b 1
000135B2 F007 0015 F8               		dc.b $F0, 7, 0,	$15, $F8
000135B7 02                         byte_12BAB:	dc.b 2
000135B8 F80C 001D F6               		dc.b $F8, $C, 0, $1D, $F6
000135BD 000C 0021 E8               		dc.b 0,	$C, 0, $21, $E8
000135C2 02                         byte_12BB6:	dc.b 2
000135C3 F00B 0025 E8               		dc.b $F0, $B, 0, $25, $E8
000135C8 F00B 0031 00               		dc.b $F0, $B, 0, $31, 0
000135CD 02                         byte_12BC1:	dc.b 2
000135CE F00B 003D E8               		dc.b $F0, $B, 0, $3D, $E8
000135D3 F00B 0049 00               		dc.b $F0, $B, 0, $49, 0
000135D8 02                         byte_12BCC:	dc.b 2
000135D9 F00B 0055 E8               		dc.b $F0, $B, 0, $55, $E8
000135DE F00B 0061 00               		dc.b $F0, $B, 0, $61, 0
000135E4 00                         		even
000135E4 00                         		even
000135E4                            
000135E4                            ; ===========================================================================
000135E4                            ; ---------------------------------------------------------------------------
000135E4                            ; Object 01 - Sonic
000135E4                            ; ---------------------------------------------------------------------------
000135E4                            
000135E4                            Obj01:					; XREF: Obj_Index
000135E4 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
000135E8 6700                       		beq.s	Obj01_Normal	; if not, branch
000135EA 4EF9 0000 0000             		jmp	DebugMode
000135F0                            ; ===========================================================================
000135F0                            
000135F0                            Obj01_Normal:
000135F0 7000                       		moveq	#0,d0
000135F2 1028 0024                  		move.b	$24(a0),d0
000135F6 323B 0000                  		move.w	Obj01_Index(pc,d0.w),d1
000135FA 4EFB 1000                  		jmp	Obj01_Index(pc,d1.w)
000135FE                            ; ===========================================================================
000135FE 0000                       Obj01_Index:	dc.w Obj01_Main-Obj01_Index
00013600 0000                       		dc.w Obj01_Control-Obj01_Index
00013602 0000                       		dc.w Obj01_Hurt-Obj01_Index
00013604 0000                       		dc.w Obj01_Death-Obj01_Index
00013606 0000                       		dc.w Obj01_ResetLevel-Obj01_Index
00013608                            ; ===========================================================================
00013608                            
00013608                            Player_Maps:
00013608 0000 0000                  	dc.l	Map_Sonic
0001360C 0000 0000                  	dc.l	Map_Sonic ; gronic
00013610 0000 0000                  	dc.l	Map_Sonic ; anakama
00013614 0000 0000                  	dc.l	Map_Sonic ; LimitedSonic
00013618                            	; insert player mapping here
00013618                            	
00013618                            Obj01_Main:				; XREF: Obj01_Index
00013618 5428 0024                  		addq.b	#2,$24(a0)
0001361C 117C 0013 0016             		move.b	#$13,$16(a0)
00013622 117C 0009 0017             		move.b	#9,$17(a0)
00013628                            		
00013628 7000                       		moveq	#0,d0
0001362A 1038 FFE8                  		move.b	(v_character),d0
0001362E E548                       		lsl.w	#2,d0
00013630 43FA FFD6                  		lea 	Player_Maps(pc),a1
00013634 2171 0000 0004             		move.l	(a1,d0.w),4(a0)	; load Map patterns
0001363A                            		
0001363A 317C 0780 0002             		move.w	#$780,2(a0)
00013640 117C 0002 0018             		move.b	#2,$18(a0)
00013646 117C 0018 0019             		move.b	#$18,$19(a0)
0001364C 117C 0004 0001             		move.b	#4,1(a0)
00013652 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; Sonic's top speed
00013658 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; Sonic's acceleration
0001365E 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; Sonic's deceleration
00013664                            
00013664                            Obj01_Control:				; XREF: Obj01_Index
00013664 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug cheat enabled?
00013668 6700                       		beq.s	loc_12C58	; if not, branch
0001366A 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button C pressed?
00013670 6700                       		beq.s	loc_12C58	; if not, branch
00013672 31FC 0001 FE08             		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring/item
00013678 4238 F7CC                  		clr.b	($FFFFF7CC).w
0001367C 4E75                       		rts	
0001367E                            ; ===========================================================================
0001367E                            
0001367E                            loc_12C58:
0001367E 4A38 F7CC                  		tst.b	($FFFFF7CC).w	; are controls locked?
00013682 6600                       		bne.s	loc_12C64	; if yes, branch
00013684 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w ; enable joypad control
0001368A                            
0001368A                            loc_12C64:
0001368A 0838 0000 F7C8             		btst	#0,($FFFFF7C8).w ; are controls	locked?
00013690 6600                       		bne.s	loc_12C7E	; if yes, branch
00013692 7000                       		moveq	#0,d0
00013694 1028 0022                  		move.b	$22(a0),d0
00013698 0240 0006                  		andi.w	#6,d0
0001369C 323B 0000                  		move.w	Obj01_Modes(pc,d0.w),d1
000136A0 4EBB 1000                  		jsr	Obj01_Modes(pc,d1.w)
000136A4                            
000136A4                            loc_12C7E:
000136A4 6100                       		bsr.s	Sonic_Display
000136A6 6100 0000                  		bsr.w	Sonic_RecordPos
000136AA 6100 0000                  		bsr.w	Sonic_Water
000136AE 1178 F768 0036             		move.b	($FFFFF768).w,$36(a0)
000136B4 1178 F76A 0037             		move.b	($FFFFF76A).w,$37(a0)
000136BA 4A38 F7C7                  		tst.b	($FFFFF7C7).w
000136BE 6700                       		beq.s	loc_12CA6
000136C0 4A28 001C                  		tst.b	$1C(a0)
000136C4 6600                       		bne.s	loc_12CA6
000136C6 1168 001D 001C             		move.b	$1D(a0),$1C(a0)
000136CC                            
000136CC                            loc_12CA6:
000136CC 6100 0000                  		bsr.w	Sonic_Animate
000136D0 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000136D4 6B00                       		bmi.s	loc_12CB6
000136D6 4EB9 0000 0000             		jsr	TouchResponse
000136DC                            
000136DC                            loc_12CB6:
000136DC 6100 0000                  		bsr.w	Sonic_Loops
000136E0 6100 0000                  		bsr.w	LoadSonicDynPLC
000136E4 4E75                       		rts	
000136E6                            ; ===========================================================================
000136E6 0000                       Obj01_Modes:	dc.w Obj01_MdNormal-Obj01_Modes
000136E8 0000                       		dc.w Obj01_MdJump-Obj01_Modes
000136EA 0000                       		dc.w Obj01_MdRoll-Obj01_Modes
000136EC 0000                       		dc.w Obj01_MdJump2-Obj01_Modes
000136EE                            ; ---------------------------------------------------------------------------
000136EE                            ; Music	to play	after invincibility wears off
000136EE                            ; ---------------------------------------------------------------------------
000136EE                            ; ===========================================================================
000136EE                            
000136EE                            Sonic_Display:				; XREF: loc_12C7E
000136EE 3028 0030                  		move.w	$30(a0),d0
000136F2 6700                       		beq.s	Obj01_Display
000136F4 5368 0030                  		subq.w	#1,$30(a0)
000136F8 E648                       		lsr.w	#3,d0
000136FA 6400                       		bcc.s	Obj01_ChkInvin
000136FC                            
000136FC                            Obj01_Display:
000136FC 4EBA A946                  		jsr	DisplaySprite
00013700                            
00013700                            ; Second part of the NineKode. Play different music on different acts - after invincibility wears off
00013700                             
00013700                            Obj01_ChkInvin:
00013700 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
00013704 6700 0000                  		beq.w	Obj01_ChkShoes	; if not, branch	; change to beq.w
00013708 4A68 0032                  		tst.w	$32(a0)		; check	time remaining for invinciblity
0001370C 6700 0000                  		beq.w	Obj01_ChkShoes	; if no	time remains, branch	; change to beq.w
00013710 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time
00013714 6600 0000                  		bne.w	Obj01_ChkShoes	; change to bne.w
00013718 4A38 F7AA                  		tst.b	($FFFFF7AA).w
0001371C 6600 0000                  		bne.w	Obj01_RmvInvin	; change to bne.w
00013720 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
00013726 6500 0000                  		bcs.w	Obj01_RmvInvin	; change to bcs.w
0001372A 7000                       		moveq	#0,d0
0001372C 1038 FE10                  		move.b	($FFFFFE10).w,d0
00013730                             
00013730 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
00013736 6600                       		bne.s	Obj01_GetBgm2	; if not, branch
00013738 43F9 0000 3D8E             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
0001373E 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
00013740                             
00013740                            Obj01_GetBgm2:
00013740 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
00013746 6600                       		bne.s	Obj01_GetBgm3	; if not, branch
00013748 43F9 0000 3D96             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
0001374E 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
00013750                             
00013750                            Obj01_GetBgm3:
00013750 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
00013756 6600                       		bne.s	Obj01_GetBgm4	; if not, branch
00013758 43F9 0000 3D9E             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 3
0001375E 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
00013760                             
00013760                            Obj01_GetBgm4:
00013760 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
00013766 6600                       		bne.s	Obj01_PlayMusic	; if not, branch
00013768 43F9 0000 3DA6             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
0001376E                             
0001376E                            Obj01_PlayMusic:
0001376E 1031 0000                  		move.b	(a1,d0.w),d0
00013772 4EB9 0000 1594             		jsr	(PlaySound).l	; play normal music
00013778                             
00013778                            ; NineKode ends here.
00013778                            
00013778                            Obj01_RmvInvin:
00013778 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; cancel invincibility
0001377E                            
0001377E                            Obj01_ChkShoes:
0001377E 4A38 FE2E                  		tst.b	($FFFFFE2E).w	; does Sonic have speed	shoes?
00013782 6700                       		beq.s	Obj01_ExitChk	; if not, branch
00013784 4A68 0034                  		tst.w	$34(a0)		; check	time remaining
00013788 6700                       		beq.s	Obj01_ExitChk
0001378A 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time
0001378E 6600                       		bne.s	Obj01_ExitChk
00013790 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
00013796 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
0001379C 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
000137A2 11FC 0000 FE2E             		move.b	#0,($FFFFFE2E).w ; cancel speed	shoes
000137A8 303C 00E3                  		move.w	#$E3,d0
000137AC 4EF9 0000 1594             		jmp	(PlaySound).l	; run music at normal speed
000137B2                            ; ===========================================================================
000137B2                            
000137B2                            Obj01_ExitChk:
000137B2 4E75                       		rts	
000137B4                            
000137B4                            ; ---------------------------------------------------------------------------
000137B4                            ; Subroutine to	record Sonic's previous positions for invincibility stars
000137B4                            ; ---------------------------------------------------------------------------
000137B4                            
000137B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000137B4                            
000137B4                            
000137B4                            Sonic_RecordPos:			; XREF: loc_12C7E; Obj01_Hurt; Obj01_Death
000137B4 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
000137B8 43F8 CB00                  		lea	($FFFFCB00).w,a1
000137BC 43F1 0000                  		lea	(a1,d0.w),a1
000137C0 32E8 0008                  		move.w	8(a0),(a1)+
000137C4 32E8 000C                  		move.w	$C(a0),(a1)+
000137C8 5838 F7A9                  		addq.b	#4,($FFFFF7A9).w
000137CC 4E75                       		rts	
000137CE                            ; End of function Sonic_RecordPos
000137CE                            
000137CE                            ; ---------------------------------------------------------------------------
000137CE                            ; Subroutine for Sonic when he's underwater
000137CE                            ; ---------------------------------------------------------------------------
000137CE                            
000137CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000137CE                            
000137CE                            
000137CE                            Sonic_Water:				; XREF: loc_12C7E
000137CE 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
000137D4 6700                       		beq.s	Obj01_InWater	; if yes, branch
000137D6                            
000137D6                            locret_12D80:
000137D6 4E75                       		rts	
000137D8                            ; ===========================================================================
000137D8                            
000137D8                            Obj01_InWater:
000137D8 3038 F646                  		move.w	($FFFFF646).w,d0
000137DC B068 000C                  		cmp.w	$C(a0),d0	; is Sonic above the water?
000137E0 6C00                       		bge.s	Obj01_OutWater	; if yes, branch
000137E2 08E8 0006 0022             		bset	#6,$22(a0)
000137E8 66EC                       		bne.s	locret_12D80
000137EA 6100 0000                  		bsr.w	ResumeMusic
000137EE 11FC 000A D340             		move.b	#$A,($FFFFD340).w ; load bubbles object	from Sonic's mouth
000137F4 11FC 0081 D368             		move.b	#$81,($FFFFD368).w
000137FA 31FC 0300 F760             		move.w	#$300,($FFFFF760).w ; change Sonic's top speed
00013800 31FC 0006 F762             		move.w	#6,($FFFFF762).w ; change Sonic's acceleration
00013806 31FC 0040 F764             		move.w	#$40,($FFFFF764).w ; change Sonic's deceleration
0001380C E0E8 0010                  		asr	$10(a0)
00013810 E0E8 0012                  		asr	$12(a0)
00013814 E0E8 0012                  		asr	$12(a0)
00013818 67BC                       		beq.s	locret_12D80
0001381A 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
00013820 303C 00AA                  		move.w	#$AA,d0
00013824 4EF9 0000 159A             		jmp	(PlaySound_Special).l ;	play splash sound
0001382A                            ; ===========================================================================
0001382A                            
0001382A                            Obj01_OutWater:
0001382A 08A8 0006 0022             		bclr	#6,$22(a0)
00013830 67A4                       		beq.s	locret_12D80
00013832 6100 0000                  		bsr.w	ResumeMusic
00013836 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
0001383C 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
00013842 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
00013848 E1E8 0012                  		asl	$12(a0)
0001384C 6700 FF88                  		beq.w	locret_12D80
00013850 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
00013856 0C68 F000 0012             		cmpi.w	#-$1000,$12(a0)
0001385C 6E00                       		bgt.s	loc_12E0E
0001385E 317C F000 0012             		move.w	#-$1000,$12(a0)	; set maximum speed on leaving water
00013864                            
00013864                            loc_12E0E:
00013864 303C 00AA                  		move.w	#$AA,d0
00013868 4EF9 0000 159A             		jmp	(PlaySound_Special).l ;	play splash sound
0001386E                            ; End of function Sonic_Water
0001386E                            
0001386E                            ; ===========================================================================
0001386E                            ; ---------------------------------------------------------------------------
0001386E                            ; Modes	for controlling	Sonic
0001386E                            ; ---------------------------------------------------------------------------
0001386E                            
0001386E                            Obj01_MdNormal:				; XREF: Obj01_Modes
0001386E 6100 0000                  		bsr.w	Sonic_Jump
00013872 6100 0000                  		bsr.w	Sonic_SlopeResist
00013876 6100 0000                  		bsr.w	Sonic_Move
0001387A 6100 0000                  		bsr.w	Sonic_Roll
0001387E 6100 0000                  		bsr.w	Sonic_LevelBound
00013882 4EBA A79A                  		jsr	SpeedToPos
00013886 6100 0000                  		bsr.w	Sonic_AnglePos
0001388A 6100 0000                  		bsr.w	Sonic_SlopeRepel
0001388E 4E75                       		rts	
00013890                            ; ===========================================================================
00013890                            
00013890                            Obj01_MdJump:				; XREF: Obj01_Modes
00013890 6100 0000                  		bsr.w	Sonic_JumpHeight
00013894 6100 0000                  		bsr.w	Sonic_ChgJumpDir
00013898 6100 0000                  		bsr.w	Sonic_LevelBound
0001389C 4EBA A70E                  		jsr	ObjectFall
000138A0 0828 0006 0022             		btst	#6,$22(a0)
000138A6 6700                       		beq.s	loc_12E5C
000138A8 0468 0028 0012             		subi.w	#$28,$12(a0)
000138AE                            
000138AE                            loc_12E5C:
000138AE 6100 0000                  		bsr.w	Sonic_JumpAngle
000138B2 6100 0000                  		bsr.w	Sonic_Floor
000138B6 4E75                       		rts	
000138B8                            ; ===========================================================================
000138B8                            
000138B8                            Obj01_MdRoll:				; XREF: Obj01_Modes
000138B8 6100 0000                  		bsr.w	Sonic_Jump
000138BC 6100 0000                  		bsr.w	Sonic_RollRepel
000138C0 6100 0000                  		bsr.w	Sonic_RollSpeed
000138C4 6100 0000                  		bsr.w	Sonic_LevelBound
000138C8 4EBA A754                  		jsr	SpeedToPos
000138CC 6100 0000                  		bsr.w	Sonic_AnglePos
000138D0 6100 0000                  		bsr.w	Sonic_SlopeRepel
000138D4 4E75                       		rts	
000138D6                            ; ===========================================================================
000138D6                            
000138D6                            Obj01_MdJump2:				; XREF: Obj01_Modes
000138D6 6100 0000                  		bsr.w	Sonic_JumpHeight
000138DA 6100 0000                  		bsr.w	Sonic_ChgJumpDir
000138DE 6100 0000                  		bsr.w	Sonic_LevelBound
000138E2 6100 0000                  		bsr.w	Sonic_AirUnroll
000138E6 4EBA A6C4                  		jsr	ObjectFall
000138EA 0828 0006 0022             		btst	#6,$22(a0)
000138F0 6700                       		beq.s	loc_12EA6
000138F2 0468 0028 0012             		subi.w	#$28,$12(a0)
000138F8                            
000138F8                            loc_12EA6:
000138F8 6100 0000                  		bsr.w	Sonic_JumpAngle
000138FC 6100 0000                  		bsr.w	Sonic_Floor
00013900 4E75                       		rts	
00013902                            ; ---------------------------------------------------------------------------
00013902                            ; Subroutine to	make Sonic walk/run
00013902                            ; ---------------------------------------------------------------------------
00013902                            
00013902                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013902                            
00013902                            
00013902                            Sonic_Move:				; XREF: Obj01_MdNormal
00013902 3C38 F760                  		move.w	($FFFFF760).w,d6
00013906 3A38 F762                  		move.w	($FFFFF762).w,d5
0001390A 3838 F764                  		move.w	($FFFFF764).w,d4
0001390E 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00013912 6600 0000                  		bne.w	loc_12FEE
00013916 4A68 003E                  		tst.w	$3E(a0)
0001391A 6600 0000                  		bne.w	Obj01_ResetScr
0001391E 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
00013924 6700                       		beq.s	Obj01_NotLeft	; if not, branch
00013926 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0001392C 6600                       		bne.s	Obj01_MoveRight	; GMZ: If yes, branch
0001392E 6100 0000                  		bsr.w	Sonic_MoveLeft
00013932                            
00013932                            Obj01_NotLeft:
00013932 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
00013938 6700                       		beq.s	Obj01_NotRight	; if not, branch
0001393A 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013940 6700                       		beq.s	Obj01_MoveRight	; GMZ: If not, branch
00013942 6100 0000                  		bsr.w	Sonic_MoveLeft
00013946 6000                       		bra.s	Obj01_NotRight
00013948                            
00013948                            Obj01_MoveRight:
00013948 6100 0000                  		bsr.w	Sonic_MoveRight
0001394C                            
0001394C                            Obj01_NotRight:
0001394C 1028 0026                  		move.b	$26(a0),d0
00013950 0600 0020                  		addi.b	#$20,d0
00013954 0200 00C0                  		andi.b	#$C0,d0		; is Sonic on a	slope?
00013958 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
0001395C 4A68 0014                  		tst.w	$14(a0)		; is Sonic moving?
00013960 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
00013964 08A8 0005 0022             		bclr	#5,$22(a0)
0001396A 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
00013970 0828 0003 0022             		btst	#3,$22(a0)
00013976 6700                       		beq.s	Sonic_Balance
00013978 7000                       		moveq	#0,d0
0001397A 1028 003D                  		move.b	$3D(a0),d0
0001397E ED48                       		lsl.w	#6,d0
00013980 43F8 D000                  		lea	($FFFFD000).w,a1
00013984 43F1 0000                  		lea	(a1,d0.w),a1
00013988 4A29 0022                  		tst.b	$22(a1)
0001398C 6B00                       		bmi.s	Sonic_LookUp
0001398E 7200                       		moveq	#0,d1
00013990 1229 0019                  		move.b	$19(a1),d1
00013994 3401                       		move.w	d1,d2
00013996 D442                       		add.w	d2,d2
00013998 5942                       		subq.w	#4,d2
0001399A D268 0008                  		add.w	8(a0),d1
0001399E 9269 0008                  		sub.w	8(a1),d1
000139A2 0C41 0004                  		cmpi.w	#4,d1
000139A6 6D00                       		blt.s	loc_12F6A
000139A8 B242                       		cmp.w	d2,d1
000139AA 6C00                       		bge.s	loc_12F5A
000139AC 6000                       		bra.s	Sonic_LookUp
000139AE                            ; ===========================================================================
000139AE                            
000139AE                            Sonic_Balance:
000139AE 4EB9 0000 0000             		jsr	ObjHitFloor
000139B4 0C41 000C                  		cmpi.w	#$C,d1
000139B8 6D00                       		blt.s	Sonic_LookUp
000139BA 0C28 0003 0036             		cmpi.b	#3,$36(a0)
000139C0 6600                       		bne.s	loc_12F62
000139C2                            
000139C2                            loc_12F5A:
000139C2 08A8 0000 0022             		bclr	#0,$22(a0)
000139C8 6000                       		bra.s	loc_12F70
000139CA                            ; ===========================================================================
000139CA                            
000139CA                            loc_12F62:
000139CA 0C28 0003 0037             		cmpi.b	#3,$37(a0)
000139D0 6600                       		bne.s	Sonic_LookUp
000139D2                            
000139D2                            loc_12F6A:
000139D2 08E8 0000 0022             		bset	#0,$22(a0)
000139D8                            
000139D8                            loc_12F70:
000139D8 117C 0006 001C             		move.b	#6,$1C(a0)	; use "balancing" animation
000139DE 6000                       		bra.s	Obj01_ResetScr
000139E0                            ; ===========================================================================
000139E0                            
000139E0                            Sonic_LookUp:
000139E0 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up being pressed?
000139E6 6700                       		beq.s	Sonic_Duck	; if not, branch
000139E8 117C 0007 001C             		move.b	#7,$1C(a0)	; use "looking up" animation
000139EE 0C78 00C8 F73E             		cmpi.w	#$C8,($FFFFF73E).w
000139F4 6700                       		beq.s	loc_12FC2
000139F6 5478 F73E                  		addq.w	#2,($FFFFF73E).w
000139FA 6000                       		bra.s	loc_12FC2
000139FC                            ; ===========================================================================
000139FC                            
000139FC                            Sonic_Duck:
000139FC 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00013A02 6700                       		beq.s	Obj01_ResetScr	; if not, branch
00013A04 117C 0008 001C             		move.b	#8,$1C(a0)	; use "ducking"	animation
00013A0A 0C78 0008 F73E             		cmpi.w	#8,($FFFFF73E).w
00013A10 6700                       		beq.s	loc_12FC2
00013A12 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00013A16 6000                       		bra.s	loc_12FC2
00013A18                            ; ===========================================================================
00013A18                            
00013A18                            Obj01_ResetScr:
00013A18 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	screen in its default position?
00013A1E 6700                       		beq.s	loc_12FC2	; if yes, branch
00013A20 6400                       		bcc.s	loc_12FBE
00013A22 5878 F73E                  		addq.w	#4,($FFFFF73E).w ; move	screen back to default
00013A26                            
00013A26                            loc_12FBE:
00013A26 5578 F73E                  		subq.w	#2,($FFFFF73E).w ; move	screen back to default
00013A2A                            
00013A2A                            loc_12FC2:
00013A2A 1038 F602                  		move.b	($FFFFF602).w,d0
00013A2E 0200 000C                  		andi.b	#$C,d0		; is left/right	pressed?
00013A32 6600                       		bne.s	loc_12FEE	; if yes, branch
00013A34 3028 0014                  		move.w	$14(a0),d0
00013A38 6700                       		beq.s	loc_12FEE
00013A3A 6B00                       		bmi.s	loc_12FE2
00013A3C 9045                       		sub.w	d5,d0
00013A3E 6400                       		bcc.s	loc_12FDC
00013A40 303C 0000                  		move.w	#0,d0
00013A44                            
00013A44                            loc_12FDC:
00013A44 3140 0014                  		move.w	d0,$14(a0)
00013A48 6000                       		bra.s	loc_12FEE
00013A4A                            ; ===========================================================================
00013A4A                            
00013A4A                            loc_12FE2:
00013A4A D045                       		add.w	d5,d0
00013A4C 6400                       		bcc.s	loc_12FEA
00013A4E 303C 0000                  		move.w	#0,d0
00013A52                            
00013A52                            loc_12FEA:
00013A52 3140 0014                  		move.w	d0,$14(a0)
00013A56                            
00013A56                            loc_12FEE:
00013A56 1028 0026                  		move.b	$26(a0),d0
00013A5A 4EB9 0000 2D34             		jsr	(CalcSine).l
00013A60 C3E8 0014                  		muls.w	$14(a0),d1
00013A64 E081                       		asr.l	#8,d1
00013A66 3141 0010                  		move.w	d1,$10(a0)
00013A6A C1E8 0014                  		muls.w	$14(a0),d0
00013A6E E080                       		asr.l	#8,d0
00013A70 3140 0012                  		move.w	d0,$12(a0)
00013A74                            
00013A74                            loc_1300C:
00013A74 1028 0026                  		move.b	$26(a0),d0
00013A78 0600 0040                  		addi.b	#$40,d0
00013A7C 6B00                       		bmi.s	locret_1307C
00013A7E 123C 0040                  		move.b	#$40,d1
00013A82 4A68 0014                  		tst.w	$14(a0)
00013A86 6700                       		beq.s	locret_1307C
00013A88 6B00                       		bmi.s	loc_13024
00013A8A 4441                       		neg.w	d1
00013A8C                            
00013A8C                            loc_13024:
00013A8C 1028 0026                  		move.b	$26(a0),d0
00013A90 D001                       		add.b	d1,d0
00013A92 3F00                       		move.w	d0,-(sp)
00013A94 6100 0000                  		bsr.w	Sonic_WalkSpeed
00013A98 301F                       		move.w	(sp)+,d0
00013A9A 4A41                       		tst.w	d1
00013A9C 6A00                       		bpl.s	locret_1307C
00013A9E E141                       		asl.w	#8,d1
00013AA0 0600 0020                  		addi.b	#$20,d0
00013AA4 0200 00C0                  		andi.b	#$C0,d0
00013AA8 6700                       		beq.s	loc_13078
00013AAA 0C00 0040                  		cmpi.b	#$40,d0
00013AAE 6700                       		beq.s	loc_13066
00013AB0 0C00 0080                  		cmpi.b	#$80,d0
00013AB4 6700                       		beq.s	loc_13060
00013AB6 D368 0010                  		add.w	d1,$10(a0)
00013ABA 08E8 0005 0022             		bset	#5,$22(a0)
00013AC0 317C 0000 0014             		move.w	#0,$14(a0)
00013AC6 4E75                       		rts	
00013AC8                            ; ===========================================================================
00013AC8                            
00013AC8                            loc_13060:
00013AC8 9368 0012                  		sub.w	d1,$12(a0)
00013ACC 4E75                       		rts	
00013ACE                            ; ===========================================================================
00013ACE                            
00013ACE                            loc_13066:
00013ACE 9368 0010                  		sub.w	d1,$10(a0)
00013AD2 08E8 0005 0022             		bset	#5,$22(a0)
00013AD8 317C 0000 0014             		move.w	#0,$14(a0)
00013ADE 4E75                       		rts	
00013AE0                            ; ===========================================================================
00013AE0                            
00013AE0                            loc_13078:
00013AE0 D368 0012                  		add.w	d1,$12(a0)
00013AE4                            
00013AE4                            locret_1307C:
00013AE4 4E75                       		rts	
00013AE6                            ; End of function Sonic_Move
00013AE6                            
00013AE6                            
00013AE6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013AE6                            
00013AE6                            
00013AE6                            Sonic_MoveLeft:				; XREF: Sonic_Move
00013AE6 3028 0014                  		move.w	$14(a0),d0
00013AEA 6700                       		beq.s	loc_13086
00013AEC 6A00                       		bpl.s	loc_130B2
00013AEE                            
00013AEE                            loc_13086:
00013AEE 08E8 0000 0022             		bset	#0,$22(a0)
00013AF4 6600                       		bne.s	loc_1309A
00013AF6 08A8 0005 0022             		bclr	#5,$22(a0)
00013AFC 117C 0001 001D             		move.b	#1,$1D(a0)
00013B02                            
00013B02                            loc_1309A:
00013B02 9045                       		sub.w	d5,d0
00013B04 3206                       		move.w	d6,d1
00013B06 4441                       		neg.w	d1
00013B08 B041                       		cmp.w	d1,d0
00013B0A 6E00                       		bgt.s	loc_130A6
00013B0C 3001                       		move.w	d1,d0
00013B0E                            
00013B0E                            loc_130A6:
00013B0E 3140 0014                  		move.w	d0,$14(a0)
00013B12 117C 0000 001C             		move.b	#0,$1C(a0)	; use walking animation
00013B18 4E75                       		rts	
00013B1A                            ; ===========================================================================
00013B1A                            
00013B1A                            loc_130B2:				; XREF: Sonic_MoveLeft
00013B1A 9044                       		sub.w	d4,d0
00013B1C 6400                       		bcc.s	loc_130BA
00013B1E 303C FF80                  		move.w	#-$80,d0
00013B22                            
00013B22                            loc_130BA:
00013B22 3140 0014                  		move.w	d0,$14(a0)
00013B26 1028 0026                  		move.b	$26(a0),d0
00013B2A 0600 0020                  		addi.b	#$20,d0
00013B2E 0200 00C0                  		andi.b	#$C0,d0
00013B32 6600                       		bne.s	locret_130E8
00013B34 0C40 0400                  		cmpi.w	#$400,d0
00013B38 6D00                       		blt.s	locret_130E8
00013B3A 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
00013B40 08A8 0000 0022             		bclr	#0,$22(a0)
00013B46 303C 00A4                  		move.w	#$A4,d0
00013B4A 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play stopping sound
00013B50                            
00013B50                            locret_130E8:
00013B50 4E75                       		rts	
00013B52                            ; End of function Sonic_MoveLeft
00013B52                            
00013B52                            
00013B52                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013B52                            
00013B52                            
00013B52                            Sonic_MoveRight:			; XREF: Sonic_Move
00013B52 3028 0014                  		move.w	$14(a0),d0
00013B56 6B00                       		bmi.s	loc_13118
00013B58 08A8 0000 0022             		bclr	#0,$22(a0)
00013B5E 6700                       		beq.s	loc_13104
00013B60 08A8 0005 0022             		bclr	#5,$22(a0)
00013B66 117C 0001 001D             		move.b	#1,$1D(a0)
00013B6C                            
00013B6C                            loc_13104:
00013B6C D045                       		add.w	d5,d0
00013B6E B046                       		cmp.w	d6,d0
00013B70 6D00                       		blt.s	loc_1310C
00013B72 3006                       		move.w	d6,d0
00013B74                            
00013B74                            loc_1310C:
00013B74 3140 0014                  		move.w	d0,$14(a0)
00013B78 117C 0000 001C             		move.b	#0,$1C(a0)	; use walking animation
00013B7E 4E75                       		rts	
00013B80                            ; ===========================================================================
00013B80                            
00013B80                            loc_13118:				; XREF: Sonic_MoveRight
00013B80 D044                       		add.w	d4,d0
00013B82 6400                       		bcc.s	loc_13120
00013B84 303C 0080                  		move.w	#$80,d0
00013B88                            
00013B88                            loc_13120:
00013B88 3140 0014                  		move.w	d0,$14(a0)
00013B8C 1028 0026                  		move.b	$26(a0),d0
00013B90 0600 0020                  		addi.b	#$20,d0
00013B94 0200 00C0                  		andi.b	#$C0,d0
00013B98 6600                       		bne.s	locret_1314E
00013B9A 0C40 FC00                  		cmpi.w	#-$400,d0
00013B9E 6E00                       		bgt.s	locret_1314E
00013BA0 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
00013BA6 08E8 0000 0022             		bset	#0,$22(a0)
00013BAC 303C 00A4                  		move.w	#$A4,d0
00013BB0 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play stopping sound
00013BB6                            
00013BB6                            locret_1314E:
00013BB6 4E75                       		rts	
00013BB8                            ; End of function Sonic_MoveRight
00013BB8                            
00013BB8                            ; ---------------------------------------------------------------------------
00013BB8                            ; Subroutine to	change Sonic's speed as he rolls
00013BB8                            ; ---------------------------------------------------------------------------
00013BB8                            
00013BB8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013BB8                            
00013BB8                            
00013BB8                            Sonic_RollSpeed:			; XREF: Obj01_MdRoll
00013BB8 3C38 F760                  		move.w	($FFFFF760).w,d6
00013BBC E346                       		asl.w	#1,d6
00013BBE 3A38 F762                  		move.w	($FFFFF762).w,d5
00013BC2 E245                       		asr.w	#1,d5
00013BC4 3838 F764                  		move.w	($FFFFF764).w,d4
00013BC8 E444                       		asr.w	#2,d4
00013BCA 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00013BCE 6600 0000                  		bne.w	loc_131CC
00013BD2 4A68 003E                  		tst.w	$3E(a0)
00013BD6 6600                       		bne.s	loc_13188
00013BD8 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
00013BDE 6700                       		beq.s	loc_1317C	; if not, branch
00013BE0 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013BE6 6600                       		bne.s	SonicRS_RollRight	; GMZ: If yes, branch
00013BE8 6100 0000                  		bsr.w	Sonic_RollLeft
00013BEC                            
00013BEC                            loc_1317C:
00013BEC 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
00013BF2 6700                       		beq.s	loc_13188	; if not, branch
00013BF4 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013BFA 6700                       		beq.s	SonicRS_RollRight	; GMZ: If not, branch
00013BFC 6100 0000                  		bsr.w	Sonic_RollLeft
00013C00 6000                       		bra.s	loc_13188
00013C02                            
00013C02                            SonicRS_RollRight:
00013C02 6100 0000                  		bsr.w	Sonic_RollRight
00013C06                            
00013C06                            loc_13188:
00013C06 3028 0014                  		move.w	$14(a0),d0
00013C0A 6700                       		beq.s	loc_131AA
00013C0C 6B00                       		bmi.s	loc_1319E
00013C0E 9045                       		sub.w	d5,d0
00013C10 6400                       		bcc.s	loc_13198
00013C12 303C 0000                  		move.w	#0,d0
00013C16                            
00013C16                            loc_13198:
00013C16 3140 0014                  		move.w	d0,$14(a0)
00013C1A 6000                       		bra.s	loc_131AA
00013C1C                            ; ===========================================================================
00013C1C                            
00013C1C                            loc_1319E:				; XREF: Sonic_RollSpeed
00013C1C D045                       		add.w	d5,d0
00013C1E 6400                       		bcc.s	loc_131A6
00013C20 303C 0000                  		move.w	#0,d0
00013C24                            
00013C24                            loc_131A6:
00013C24 3140 0014                  		move.w	d0,$14(a0)
00013C28                            
00013C28                            loc_131AA:
00013C28 4A68 0014                  		tst.w	$14(a0)		; is Sonic moving?
00013C2C 6600                       		bne.s	loc_131CC	; if yes, branch
00013C2E 08A8 0002 0022             		bclr	#2,$22(a0)
00013C34 117C 0013 0016             		move.b	#$13,$16(a0)
00013C3A 117C 0009 0017             		move.b	#9,$17(a0)
00013C40 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
00013C46 5B68 000C                  		subq.w	#5,$C(a0)
00013C4A                            
00013C4A                            loc_131CC:
00013C4A 1028 0026                  		move.b	$26(a0),d0
00013C4E 4EB9 0000 2D34             		jsr	(CalcSine).l
00013C54 C1E8 0014                  		muls.w	$14(a0),d0
00013C58 E080                       		asr.l	#8,d0
00013C5A 3140 0012                  		move.w	d0,$12(a0)
00013C5E C3E8 0014                  		muls.w	$14(a0),d1
00013C62 E081                       		asr.l	#8,d1
00013C64 0C41 1000                  		cmpi.w	#$1000,d1
00013C68 6F00                       		ble.s	loc_131F0
00013C6A 323C 1000                  		move.w	#$1000,d1
00013C6E                            
00013C6E                            loc_131F0:
00013C6E 0C41 F000                  		cmpi.w	#-$1000,d1
00013C72 6C00                       		bge.s	loc_131FA
00013C74 323C F000                  		move.w	#-$1000,d1
00013C78                            
00013C78                            loc_131FA:
00013C78 3141 0010                  		move.w	d1,$10(a0)
00013C7C 6000 FDF6                  		bra.w	loc_1300C
00013C80                            ; End of function Sonic_RollSpeed
00013C80                            
00013C80                            
00013C80                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013C80                            
00013C80                            
00013C80                            Sonic_RollLeft:				; XREF: Sonic_RollSpeed
00013C80 3028 0014                  		move.w	$14(a0),d0
00013C84 6700                       		beq.s	loc_1320A
00013C86 6A00                       		bpl.s	loc_13218
00013C88                            
00013C88                            loc_1320A:
00013C88 08E8 0000 0022             		bset	#0,$22(a0)
00013C8E 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00013C94 4E75                       		rts	
00013C96                            ; ===========================================================================
00013C96                            
00013C96                            loc_13218:
00013C96 9044                       		sub.w	d4,d0
00013C98 6400                       		bcc.s	loc_13220
00013C9A 303C FF80                  		move.w	#-$80,d0
00013C9E                            
00013C9E                            loc_13220:
00013C9E 3140 0014                  		move.w	d0,$14(a0)
00013CA2 4E75                       		rts	
00013CA4                            ; End of function Sonic_RollLeft
00013CA4                            
00013CA4                            
00013CA4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013CA4                            
00013CA4                            
00013CA4                            Sonic_RollRight:			; XREF: Sonic_RollSpeed
00013CA4 3028 0014                  		move.w	$14(a0),d0
00013CA8 6B00                       		bmi.s	loc_1323A
00013CAA 08A8 0000 0022             		bclr	#0,$22(a0)
00013CB0 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00013CB6 4E75                       		rts	
00013CB8                            ; ===========================================================================
00013CB8                            
00013CB8                            loc_1323A:
00013CB8 D044                       		add.w	d4,d0
00013CBA 6400                       		bcc.s	loc_13242
00013CBC 303C 0080                  		move.w	#$80,d0
00013CC0                            
00013CC0                            loc_13242:
00013CC0 3140 0014                  		move.w	d0,$14(a0)
00013CC4 4E75                       		rts	
00013CC6                            ; End of function Sonic_RollRight
00013CC6                            
00013CC6                            Sonic_AirUnroll:
00013CC6                            		
00013CC6 4A28 003A                  		tst.b	$3A(a0) ; check jump height control
00013CCA 6600                       		bne.s	@timer
00013CCC 1038 F605                  		move.b	($FFFFF605).w,d0
00013CD0 0200 0070                  		andi.b	#$70,d0 ; is abc being pressed?
00013CD4 6700                       		beq.s	@end	; if not, branch
00013CD6 08A8 0002 0022             		bclr	#2,$22(a0)
00013CDC 117C 0013 0016             		move.b	#$13,$16(a0)
00013CE2 117C 0009 0017             		move.b	#9,$17(a0)
00013CE8 117C 000E 001C             		move.b	#14,$1C(a0)	; use dunk animation
00013CEE 303C 00A5                  		move.w	#$A5,d0
00013CF2 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play fart sound
00013CF8 2028 0010                  		move.l	$10(a0),d0
00013CFC D080                       		add.l	d0,d0
00013CFE 2140 0010                  		move.l	d0,$10(a0)
00013D02 5B68 000C                  		subq.w	#5,$C(a0)
00013D06                            	@end:
00013D06 4E75                       		rts
00013D08                            	@timer:
00013D08 5328 003A                  		subq.b	#1,$3A(a0)
00013D0C 4E75                       		rts
00013D0E                            
00013D0E                            ; ---------------------------------------------------------------------------
00013D0E                            ; Subroutine to	change Sonic's direction while jumping
00013D0E                            ; ---------------------------------------------------------------------------
00013D0E                            
00013D0E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013D0E                            
00013D0E                            
00013D0E                            Sonic_ChgJumpDir:			; XREF: Obj01_MdJump; Obj01_MdJump2
00013D0E 3C38 F760                  		move.w	($FFFFF760).w,d6
00013D12 3A38 F762                  		move.w	($FFFFF762).w,d5
00013D16 E345                       		asl.w	#1,d5
00013D18 0828 0004 0022             		btst	#4,$22(a0)
00013D1E 6600                       		bne.s	Obj01_ResetScr2
00013D20 3028 0010                  		move.w	$10(a0),d0
00013D24 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
00013D2A 6700                       		beq.s	loc_13278	; if not, branch
00013D2C 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013D32 6600                       		bne.s	SonicCJD_JumpRight	; GMZ: If yes, branch
00013D34 6100 0000                  		bsr.w	SonicCJD_JumpLeft
00013D38 6E00                       		bgt.s	loc_13278
00013D3A 3001                       		move.w	d1,d0
00013D3C                            
00013D3C                            loc_13278:
00013D3C 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
00013D42 6700                       		beq.s	Obj01_JumpMove	; if not, branch
00013D44 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013D4A 6700                       		beq.s	SonicCJD_JumpRight	; GMZ: If not, branch
00013D4C 6100 0000                  		bsr.w	SonicCJD_JumpLeft
00013D50 6E00                       		bgt.s	Obj01_JumpMove
00013D52 3001                       		move.w	d1,d0
00013D54 6000                       		bra.s	Obj01_JumpMove
00013D56                            
00013D56                            SonicCJD_JumpLeft:
00013D56 08E8 0000 0022             		bset	#0,$22(a0)
00013D5C 9045                       		sub.w	d5,d0
00013D5E 3206                       		move.w	d6,d1
00013D60 4441                       		neg.w	d1
00013D62 B041                       		cmp.w	d1,d0
00013D64                            		; bgt.s	loc_13278
00013D64                            		; move.w	d1,d0
00013D64 4E75                       		rts
00013D66                            
00013D66                            SonicCJD_JumpRight:
00013D66 08A8 0000 0022             		bclr	#0,$22(a0)
00013D6C D045                       		add.w	d5,d0
00013D6E B046                       		cmp.w	d6,d0
00013D70 6D00                       		blt.s	Obj01_JumpMove
00013D72 3006                       		move.w	d6,d0
00013D74                            
00013D74                            Obj01_JumpMove:
00013D74 3140 0010                  		move.w	d0,$10(a0)	; change Sonic's horizontal speed
00013D78                            
00013D78                            Obj01_ResetScr2:
00013D78 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	the screen in its default position?
00013D7E 6700                       		beq.s	loc_132A4	; if yes, branch
00013D80 6400                       		bcc.s	loc_132A0
00013D82 5878 F73E                  		addq.w	#4,($FFFFF73E).w
00013D86                            
00013D86                            loc_132A0:
00013D86 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00013D8A                            
00013D8A                            loc_132A4:
00013D8A 0C68 FC00 0012             		cmpi.w	#-$400,$12(a0)	; is Sonic moving faster than -$400 upwards?
00013D90 6500                       		bcs.s	locret_132D2	; if yes, branch
00013D92 3028 0010                  		move.w	$10(a0),d0
00013D96 3200                       		move.w	d0,d1
00013D98 EA41                       		asr.w	#5,d1
00013D9A 6700                       		beq.s	locret_132D2
00013D9C 6B00                       		bmi.s	loc_132C6
00013D9E 9041                       		sub.w	d1,d0
00013DA0 6400                       		bcc.s	loc_132C0
00013DA2 303C 0000                  		move.w	#0,d0
00013DA6                            
00013DA6                            loc_132C0:
00013DA6 3140 0010                  		move.w	d0,$10(a0)
00013DAA 4E75                       		rts	
00013DAC                            ; ===========================================================================
00013DAC                            
00013DAC                            loc_132C6:
00013DAC 9041                       		sub.w	d1,d0
00013DAE 6500                       		bcs.s	loc_132CE
00013DB0 303C 0000                  		move.w	#0,d0
00013DB4                            
00013DB4                            loc_132CE:
00013DB4 3140 0010                  		move.w	d0,$10(a0)
00013DB8                            
00013DB8                            locret_132D2:
00013DB8 4E75                       		rts	
00013DBA                            ; End of function Sonic_ChgJumpDir
00013DBA                            
00013DBA                            ; ===========================================================================
00013DBA                            ; ---------------------------------------------------------------------------
00013DBA                            ; Unused subroutine to squash Sonic
00013DBA                            ; ---------------------------------------------------------------------------
00013DBA 1028 0026                  		move.b	$26(a0),d0
00013DBE 0600 0020                  		addi.b	#$20,d0
00013DC2 0200 00C0                  		andi.b	#$C0,d0
00013DC6 6600                       		bne.s	locret_13302
00013DC8 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00013DCC 4A41                       		tst.w	d1
00013DCE 6A00                       		bpl.s	locret_13302
00013DD0 317C 0000 0014             		move.w	#0,$14(a0)	; stop Sonic moving
00013DD6 317C 0000 0010             		move.w	#0,$10(a0)
00013DDC 317C 0000 0012             		move.w	#0,$12(a0)
00013DE2 117C 000B 001C             		move.b	#$B,$1C(a0)	; use "warping"	animation
00013DE8                            
00013DE8                            locret_13302:
00013DE8 4E75                       		rts	
00013DEA                            ; ---------------------------------------------------------------------------
00013DEA                            ; Subroutine to	prevent	Sonic leaving the boundaries of	a level
00013DEA                            ; ---------------------------------------------------------------------------
00013DEA                            
00013DEA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013DEA                            
00013DEA                            
00013DEA                            Sonic_LevelBound:			; XREF: Obj01_MdNormal; et al
00013DEA 2228 0008                  		move.l	8(a0),d1
00013DEE 3028 0010                  		move.w	$10(a0),d0
00013DF2 48C0                       		ext.l	d0
00013DF4 E180                       		asl.l	#8,d0
00013DF6 D280                       		add.l	d0,d1
00013DF8 4841                       		swap	d1
00013DFA 3038 F728                  		move.w	($FFFFF728).w,d0
00013DFE 0640 0010                  		addi.w	#$10,d0
00013E02 B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00013E04 6200                       		bhi.s	Boundary_Sides	; if yes, branch
00013E06 3038 F72A                  		move.w	($FFFFF72A).w,d0
00013E0A 0640 0128                  		addi.w	#$128,d0
00013E0E 4A38 F7AA                  		tst.b	($FFFFF7AA).w
00013E12 6600                       		bne.s	loc_13332
00013E14 0640 0040                  		addi.w	#$40,d0
00013E18                            
00013E18                            loc_13332:
00013E18 B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00013E1A 6300                       		bls.s	Boundary_Sides	; if yes, branch
00013E1C                            
00013E1C                            loc_13336:
00013E1C 3038 F72E                  		move.w	($FFFFF72E).w,d0
00013E20 0640 00E0                  		addi.w	#$E0,d0
00013E24 B068 000C                  		cmp.w	$C(a0),d0	; has Sonic touched the	bottom boundary?
00013E28 6D00                       		blt.s	Boundary_Bottom	; if yes, branch
00013E2A 4E75                       		rts	
00013E2C                            ; ===========================================================================
00013E2C                            
00013E2C                            Boundary_Bottom:
00013E2C 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2 ?
00013E32 6600 0000                  		bne.w	KillSonic	; if not, kill Sonic
00013E36 0C78 2000 D008             		cmpi.w	#$2000,($FFFFD008).w
00013E3C 6500 0000                  		bcs.w	KillSonic
00013E40 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
00013E44 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
00013E4A 31FC 0103 FE10             		move.w	#$103,($FFFFFE10).w ; set level	to SBZ3	(LZ4)
00013E50 4E75                       		rts	
00013E52                            ; ===========================================================================
00013E52                            
00013E52                            Boundary_Sides:
00013E52 3140 0008                  		move.w	d0,8(a0)
00013E56 317C 0000 000A             		move.w	#0,$A(a0)
00013E5C 317C 0000 0010             		move.w	#0,$10(a0)	; stop Sonic moving
00013E62 317C 0000 0014             		move.w	#0,$14(a0)
00013E68 60B2                       		bra.s	loc_13336
00013E6A                            ; End of function Sonic_LevelBound
00013E6A                            
00013E6A                            ; ---------------------------------------------------------------------------
00013E6A                            ; Subroutine allowing Sonic to roll when he's moving
00013E6A                            ; ---------------------------------------------------------------------------
00013E6A                            
00013E6A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013E6A                            
00013E6A                            
00013E6A                            Sonic_Roll:				; XREF: Obj01_MdNormal
00013E6A 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00013E6E 6600                       		bne.s	Obj01_NoRoll
00013E70 3028 0014                  		move.w	$14(a0),d0
00013E74 6A00                       		bpl.s	loc_13392
00013E76 4440                       		neg.w	d0
00013E78                            
00013E78                            loc_13392:
00013E78 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic moving at $80 speed or faster?
00013E7C 6500                       		bcs.s	Obj01_NoRoll	; if not, branch
00013E7E 1038 F602                  		move.b	($FFFFF602).w,d0
00013E82 0200 000C                  		andi.b	#$C,d0		; is left/right	being pressed?
00013E86 6600                       		bne.s	Obj01_NoRoll	; if yes, branch
00013E88 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00013E8E 6600                       		bne.s	Obj01_ChkRoll	; if yes, branch
00013E90                            
00013E90                            Obj01_NoRoll:
00013E90 4E75                       		rts	
00013E92                            ; ===========================================================================
00013E92                            
00013E92                            Obj01_ChkRoll:
00013E92 0828 0002 0022             		btst	#2,$22(a0)	; is Sonic already rolling?
00013E98 6700                       		beq.s	Obj01_DoRoll	; if not, branch
00013E9A 4E75                       		rts	
00013E9C                            ; ===========================================================================
00013E9C                            
00013E9C                            Obj01_DoRoll:
00013E9C 08E8 0002 0022             		bset	#2,$22(a0)
00013EA2 117C 000E 0016             		move.b	#$E,$16(a0)
00013EA8 117C 0007 0017             		move.b	#7,$17(a0)
00013EAE 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00013EB4 5A68 000C                  		addq.w	#5,$C(a0)
00013EB8 303C 00BE                  		move.w	#$BE,d0
00013EBC 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play rolling sound
00013EC2 4A68 0014                  		tst.w	$14(a0)
00013EC6 6600                       		bne.s	locret_133E8
00013EC8 317C 0200 0014             		move.w	#$200,$14(a0)
00013ECE                            
00013ECE                            locret_133E8:
00013ECE 4E75                       		rts	
00013ED0                            ; End of function Sonic_Roll
00013ED0                            
00013ED0                            ; ---------------------------------------------------------------------------
00013ED0                            ; Subroutine allowing Sonic to jump
00013ED0                            ; ---------------------------------------------------------------------------
00013ED0                            
00013ED0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013ED0                            
00013ED0                            
00013ED0                            Sonic_Jump:				; XREF: Obj01_MdNormal; Obj01_MdRoll
00013ED0 1038 F603                  		move.b	($FFFFF603).w,d0
00013ED4 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
00013ED8 6700 0000                  		beq.w	locret_1348E	; if not, branch
00013EDC 7000                       		moveq	#0,d0
00013EDE 1028 0026                  		move.b	$26(a0),d0
00013EE2 0600 0080                  		addi.b	#$80,d0
00013EE6 6100 0000                  		bsr.w	sub_14D48
00013EEA 0C41 0006                  		cmpi.w	#6,d1
00013EEE 6D00 0000                  		blt.w	locret_1348E
00013EF2 343C 0680                  		move.w	#$680,d2
00013EF6 0828 0006 0022             		btst	#6,$22(a0)
00013EFC 6700                       		beq.s	loc_1341C
00013EFE 343C 0380                  		move.w	#$380,d2
00013F02                            
00013F02                            loc_1341C:
00013F02 7000                       		moveq	#0,d0
00013F04 1028 0026                  		move.b	$26(a0),d0
00013F08 0400 0040                  		subi.b	#$40,d0
00013F0C 4EB9 0000 2D34             		jsr	(CalcSine).l
00013F12 C3C2                       		muls.w	d2,d1
00013F14 E081                       		asr.l	#8,d1
00013F16 D368 0010                  		add.w	d1,$10(a0)	; make Sonic jump
00013F1A C1C2                       		muls.w	d2,d0
00013F1C E080                       		asr.l	#8,d0
00013F1E D168 0012                  		add.w	d0,$12(a0)	; make Sonic jump
00013F22 08E8 0001 0022             		bset	#1,$22(a0)
00013F28 08A8 0005 0022             		bclr	#5,$22(a0)
00013F2E 588F                       		addq.l	#4,sp
00013F30 117C 0001 003C             		move.b	#1,$3C(a0)
00013F36 4228 0038                  		clr.b	$38(a0)
00013F3A 303C 00A0                  		move.w	#$A0,d0
00013F3E 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play jumping sound
00013F44 117C 0013 0016             		move.b	#$13,$16(a0)
00013F4A 117C 0009 0017             		move.b	#9,$17(a0)
00013F50 0828 0002 0022             		btst	#2,$22(a0)
00013F56 6600                       		bne.s	loc_13490
00013F58 117C 000E 0016             		move.b	#$E,$16(a0)
00013F5E 117C 0007 0017             		move.b	#7,$17(a0)
00013F64 117C 0002 001C             		move.b	#2,$1C(a0)	; use "jumping"	animation
00013F6A 08E8 0002 0022             		bset	#2,$22(a0)
00013F70 5A68 000C                  		addq.w	#5,$C(a0)
00013F74 117C 000A 003A             		move.b	#10,$3A(a0) ; timer
00013F7A                            
00013F7A                            locret_1348E:
00013F7A 4E75                       		rts	
00013F7C                            ; ===========================================================================
00013F7C                            
00013F7C                            loc_13490:
00013F7C 08E8 0004 0022             		bset	#4,$22(a0)
00013F82 4E75                       		rts	
00013F84                            ; End of function Sonic_Jump
00013F84                            
00013F84                            
00013F84                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013F84                            
00013F84                            
00013F84                            Sonic_JumpHeight:			; XREF: Obj01_MdJump; Obj01_MdJump2
00013F84 4A28 003C                  		tst.b	$3C(a0)
00013F88 6700                       		beq.s	loc_134C4
00013F8A 323C FC00                  		move.w	#-$400,d1
00013F8E 0828 0006 0022             		btst	#6,$22(a0)
00013F94 6700                       		beq.s	loc_134AE
00013F96 323C FE00                  		move.w	#-$200,d1
00013F9A                            
00013F9A                            loc_134AE:
00013F9A B268 0012                  		cmp.w	$12(a0),d1
00013F9E 6F00                       		ble.s	locret_134C2
00013FA0 1038 F602                  		move.b	($FFFFF602).w,d0
00013FA4 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
00013FA8 6600                       		bne.s	locret_134C2	; if yes, branch
00013FAA 3141 0012                  		move.w	d1,$12(a0)
00013FAE                            
00013FAE                            locret_134C2:
00013FAE 4E75                       		rts	
00013FB0                            ; ===========================================================================
00013FB0                            
00013FB0                            loc_134C4:
00013FB0 0C68 F040 0012             		cmpi.w	#-$FC0,$12(a0)
00013FB6 6C00                       		bge.s	locret_134D2
00013FB8 317C F040 0012             		move.w	#-$FC0,$12(a0)
00013FBE                            
00013FBE                            locret_134D2:
00013FBE 4E75                       		rts	
00013FC0                            ; End of function Sonic_JumpHeight
00013FC0                            
00013FC0                            ; ---------------------------------------------------------------------------
00013FC0                            ; Subroutine to	slow Sonic walking up a	slope
00013FC0                            ; ---------------------------------------------------------------------------
00013FC0                            
00013FC0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013FC0                            
00013FC0                            
00013FC0                            Sonic_SlopeResist:			; XREF: Obj01_MdNormal
00013FC0 1028 0026                  		move.b	$26(a0),d0
00013FC4 0600 0060                  		addi.b	#$60,d0
00013FC8 0C00 00C0                  		cmpi.b	#$C0,d0
00013FCC 6400                       		bcc.s	locret_13508
00013FCE 1028 0026                  		move.b	$26(a0),d0
00013FD2 4EB9 0000 2D34             		jsr	(CalcSine).l
00013FD8 C1FC 0020                  		muls.w	#$20,d0
00013FDC E080                       		asr.l	#8,d0
00013FDE 4A68 0014                  		tst.w	$14(a0)
00013FE2 6700                       		beq.s	locret_13508
00013FE4 6B00                       		bmi.s	loc_13504
00013FE6 4A40                       		tst.w	d0
00013FE8 6700                       		beq.s	locret_13502
00013FEA D168 0014                  		add.w	d0,$14(a0)	; change Sonic's inertia
00013FEE                            
00013FEE                            locret_13502:
00013FEE 4E75                       		rts	
00013FF0                            ; ===========================================================================
00013FF0                            
00013FF0                            loc_13504:
00013FF0 D168 0014                  		add.w	d0,$14(a0)
00013FF4                            
00013FF4                            locret_13508:
00013FF4 4E75                       		rts	
00013FF6                            ; End of function Sonic_SlopeResist
00013FF6                            
00013FF6                            ; ---------------------------------------------------------------------------
00013FF6                            ; Subroutine to	push Sonic down	a slope	while he's rolling
00013FF6                            ; ---------------------------------------------------------------------------
00013FF6                            
00013FF6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013FF6                            
00013FF6                            
00013FF6                            Sonic_RollRepel:			; XREF: Obj01_MdRoll
00013FF6 1028 0026                  		move.b	$26(a0),d0
00013FFA 0600 0060                  		addi.b	#$60,d0
00013FFE 0C00 00C0                  		cmpi.b	#-$40,d0
00014002 6400                       		bcc.s	locret_13544
00014004 1028 0026                  		move.b	$26(a0),d0
00014008 4EB9 0000 2D34             		jsr	(CalcSine).l
0001400E C1FC 0050                  		muls.w	#$50,d0
00014012 E080                       		asr.l	#8,d0
00014014 4A68 0014                  		tst.w	$14(a0)
00014018 6B00                       		bmi.s	loc_1353A
0001401A 4A40                       		tst.w	d0
0001401C 6A00                       		bpl.s	loc_13534
0001401E E480                       		asr.l	#2,d0
00014020                            
00014020                            loc_13534:
00014020 D168 0014                  		add.w	d0,$14(a0)
00014024 4E75                       		rts	
00014026                            ; ===========================================================================
00014026                            
00014026                            loc_1353A:
00014026 4A40                       		tst.w	d0
00014028 6B00                       		bmi.s	loc_13540
0001402A E480                       		asr.l	#2,d0
0001402C                            
0001402C                            loc_13540:
0001402C D168 0014                  		add.w	d0,$14(a0)
00014030                            
00014030                            locret_13544:
00014030 4E75                       		rts	
00014032                            ; End of function Sonic_RollRepel
00014032                            
00014032                            ; ---------------------------------------------------------------------------
00014032                            ; Subroutine to	push Sonic down	a slope
00014032                            ; ---------------------------------------------------------------------------
00014032                            
00014032                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014032                            
00014032                            
00014032                            Sonic_SlopeRepel:			; XREF: Obj01_MdNormal; Obj01_MdRoll
00014032 4E71                       		nop	
00014034 4A28 0038                  		tst.b	$38(a0)
00014038 6600                       		bne.s	locret_13580
0001403A 4A68 003E                  		tst.w	$3E(a0)
0001403E 6600                       		bne.s	loc_13582
00014040 1028 0026                  		move.b	$26(a0),d0
00014044 0600 0020                  		addi.b	#$20,d0
00014048 0200 00C0                  		andi.b	#$C0,d0
0001404C 6700                       		beq.s	locret_13580
0001404E 3028 0014                  		move.w	$14(a0),d0
00014052 6A00                       		bpl.s	loc_1356A
00014054 4440                       		neg.w	d0
00014056                            
00014056                            loc_1356A:
00014056 0C40 0280                  		cmpi.w	#$280,d0
0001405A 6400                       		bcc.s	locret_13580
0001405C 4268 0014                  		clr.w	$14(a0)
00014060 08E8 0001 0022             		bset	#1,$22(a0)
00014066 317C 001E 003E             		move.w	#$1E,$3E(a0)
0001406C                            
0001406C                            locret_13580:
0001406C 4E75                       		rts	
0001406E                            ; ===========================================================================
0001406E                            
0001406E                            loc_13582:
0001406E 5368 003E                  		subq.w	#1,$3E(a0)
00014072 4E75                       		rts	
00014074                            ; End of function Sonic_SlopeRepel
00014074                            
00014074                            ; ---------------------------------------------------------------------------
00014074                            ; Subroutine to	return Sonic's angle to 0 as he jumps
00014074                            ; ---------------------------------------------------------------------------
00014074                            
00014074                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014074                            
00014074                            
00014074                            Sonic_JumpAngle:			; XREF: Obj01_MdJump; Obj01_MdJump2
00014074 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
00014078 6700                       		beq.s	locret_135A2	; if already 0,	branch
0001407A 6A00                       		bpl.s	loc_13598	; if higher than 0, branch
0001407C                            
0001407C 5400                       		addq.b	#2,d0		; increase angle
0001407E 6400                       		bcc.s	loc_13596
00014080 7000                       		moveq	#0,d0
00014082                            
00014082                            loc_13596:
00014082 6000                       		bra.s	loc_1359E
00014084                            ; ===========================================================================
00014084                            
00014084                            loc_13598:
00014084 5500                       		subq.b	#2,d0		; decrease angle
00014086 6400                       		bcc.s	loc_1359E
00014088 7000                       		moveq	#0,d0
0001408A                            
0001408A                            loc_1359E:
0001408A 1140 0026                  		move.b	d0,$26(a0)
0001408E                            
0001408E                            locret_135A2:
0001408E 4E75                       		rts	
00014090                            ; End of function Sonic_JumpAngle
00014090                            
00014090                            ; ---------------------------------------------------------------------------
00014090                            ; Subroutine for Sonic to interact with	the floor after	jumping/falling
00014090                            ; ---------------------------------------------------------------------------
00014090                            
00014090                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014090                            
00014090                            
00014090                            Sonic_Floor:				; XREF: Obj01_MdJump; Obj01_MdJump2
00014090 3228 0010                  		move.w	$10(a0),d1
00014094 3428 0012                  		move.w	$12(a0),d2
00014098 4EB9 0000 3002             		jsr	(CalcAngle).l
0001409E 11C0 FFEC                  		move.b	d0,($FFFFFFEC).w
000140A2 0400 0020                  		subi.b	#$20,d0
000140A6 11C0 FFED                  		move.b	d0,($FFFFFFED).w
000140AA 0200 00C0                  		andi.b	#$C0,d0
000140AE 11C0 FFEE                  		move.b	d0,($FFFFFFEE).w
000140B2 0C00 0040                  		cmpi.b	#$40,d0
000140B6 6700 0000                  		beq.w	loc_13680
000140BA 0C00 0080                  		cmpi.b	#$80,d0
000140BE 6700 0000                  		beq.w	loc_136E2
000140C2 0C00 00C0                  		cmpi.b	#-$40,d0
000140C6 6700 0000                  		beq.w	loc_1373E
000140CA 6100 0000                  		bsr.w	Sonic_HitWall
000140CE 4A41                       		tst.w	d1
000140D0 6A00                       		bpl.s	loc_135F0
000140D2 9368 0008                  		sub.w	d1,8(a0)
000140D6 317C 0000 0010             		move.w	#0,$10(a0)
000140DC                            
000140DC                            loc_135F0:
000140DC 6100 0000                  		bsr.w	sub_14EB4
000140E0 4A41                       		tst.w	d1
000140E2 6A00                       		bpl.s	loc_13602
000140E4 D368 0008                  		add.w	d1,8(a0)
000140E8 317C 0000 0010             		move.w	#0,$10(a0)
000140EE                            
000140EE                            loc_13602:
000140EE 6100 0000                  		bsr.w	Sonic_HitFloor
000140F2 11C1 FFEF                  		move.b	d1,($FFFFFFEF).w
000140F6 4A41                       		tst.w	d1
000140F8 6A00                       		bpl.s	locret_1367E
000140FA 1428 0012                  		move.b	$12(a0),d2
000140FE 5002                       		addq.b	#8,d2
00014100 4402                       		neg.b	d2
00014102 B202                       		cmp.b	d2,d1
00014104 6C00                       		bge.s	loc_1361E
00014106 B002                       		cmp.b	d2,d0
00014108 6D00                       		blt.s	locret_1367E
0001410A                            
0001410A                            loc_1361E:
0001410A D368 000C                  		add.w	d1,$C(a0)
0001410E 1143 0026                  		move.b	d3,$26(a0)
00014112 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00014116 117C 0000 001C             		move.b	#0,$1C(a0)
0001411C 1003                       		move.b	d3,d0
0001411E 0600 0020                  		addi.b	#$20,d0
00014122 0200 0040                  		andi.b	#$40,d0
00014126 6600                       		bne.s	loc_1365C
00014128 1003                       		move.b	d3,d0
0001412A 0600 0010                  		addi.b	#$10,d0
0001412E 0200 0020                  		andi.b	#$20,d0
00014132 6700                       		beq.s	loc_1364E
00014134 E0E8 0012                  		asr	$12(a0)
00014138 6000                       		bra.s	loc_13670
0001413A                            ; ===========================================================================
0001413A                            
0001413A                            loc_1364E:
0001413A 317C 0000 0012             		move.w	#0,$12(a0)
00014140 3168 0010 0014             		move.w	$10(a0),$14(a0)
00014146 4E75                       		rts	
00014148                            ; ===========================================================================
00014148                            
00014148                            loc_1365C:
00014148 317C 0000 0010             		move.w	#0,$10(a0)
0001414E 0C68 0FC0 0012             		cmpi.w	#$FC0,$12(a0)
00014154 6F00                       		ble.s	loc_13670
00014156 317C 0FC0 0012             		move.w	#$FC0,$12(a0)
0001415C                            
0001415C                            loc_13670:
0001415C 3168 0012 0014             		move.w	$12(a0),$14(a0)
00014162 4A03                       		tst.b	d3
00014164 6A00                       		bpl.s	locret_1367E
00014166 4468 0014                  		neg.w	$14(a0)
0001416A                            
0001416A                            locret_1367E:
0001416A 4E75                       		rts	
0001416C                            ; ===========================================================================
0001416C                            
0001416C                            loc_13680:
0001416C 6100 0000                  		bsr.w	Sonic_HitWall
00014170 4A41                       		tst.w	d1
00014172 6A00                       		bpl.s	loc_1369A
00014174 9368 0008                  		sub.w	d1,8(a0)
00014178 317C 0000 0010             		move.w	#0,$10(a0)
0001417E 3168 0012 0014             		move.w	$12(a0),$14(a0)
00014184 4E75                       		rts	
00014186                            ; ===========================================================================
00014186                            
00014186                            loc_1369A:
00014186 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
0001418A 4A41                       		tst.w	d1
0001418C 6A00                       		bpl.s	loc_136B4
0001418E 9368 000C                  		sub.w	d1,$C(a0)
00014192 4A68 0012                  		tst.w	$12(a0)
00014196 6A00                       		bpl.s	locret_136B2
00014198 317C 0000 0012             		move.w	#0,$12(a0)
0001419E                            
0001419E                            locret_136B2:
0001419E 4E75                       		rts	
000141A0                            ; ===========================================================================
000141A0                            
000141A0                            loc_136B4:
000141A0 4A68 0012                  		tst.w	$12(a0)
000141A4 6B00                       		bmi.s	locret_136E0
000141A6 6100 0000                  		bsr.w	Sonic_HitFloor
000141AA 4A41                       		tst.w	d1
000141AC 6A00                       		bpl.s	locret_136E0
000141AE D368 000C                  		add.w	d1,$C(a0)
000141B2 1143 0026                  		move.b	d3,$26(a0)
000141B6 6100 0000                  		bsr.w	Sonic_ResetOnFloor
000141BA 117C 0000 001C             		move.b	#0,$1C(a0)
000141C0 317C 0000 0012             		move.w	#0,$12(a0)
000141C6 3168 0010 0014             		move.w	$10(a0),$14(a0)
000141CC                            
000141CC                            locret_136E0:
000141CC 4E75                       		rts	
000141CE                            ; ===========================================================================
000141CE                            
000141CE                            loc_136E2:
000141CE 6100 0000                  		bsr.w	Sonic_HitWall
000141D2 4A41                       		tst.w	d1
000141D4 6A00                       		bpl.s	loc_136F4
000141D6 9368 0008                  		sub.w	d1,8(a0)
000141DA 317C 0000 0010             		move.w	#0,$10(a0)
000141E0                            
000141E0                            loc_136F4:
000141E0 6100 0000                  		bsr.w	sub_14EB4
000141E4 4A41                       		tst.w	d1
000141E6 6A00                       		bpl.s	loc_13706
000141E8 D368 0008                  		add.w	d1,8(a0)
000141EC 317C 0000 0010             		move.w	#0,$10(a0)
000141F2                            
000141F2                            loc_13706:
000141F2 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
000141F6 4A41                       		tst.w	d1
000141F8 6A00                       		bpl.s	locret_1373C
000141FA 9368 000C                  		sub.w	d1,$C(a0)
000141FE 1003                       		move.b	d3,d0
00014200 0600 0020                  		addi.b	#$20,d0
00014204 0200 0040                  		andi.b	#$40,d0
00014208 6600                       		bne.s	loc_13726
0001420A 317C 0000 0012             		move.w	#0,$12(a0)
00014210 4E75                       		rts	
00014212                            ; ===========================================================================
00014212                            
00014212                            loc_13726:
00014212 1143 0026                  		move.b	d3,$26(a0)
00014216 6100 0000                  		bsr.w	Sonic_ResetOnFloor
0001421A 3168 0012 0014             		move.w	$12(a0),$14(a0)
00014220 4A03                       		tst.b	d3
00014222 6A00                       		bpl.s	locret_1373C
00014224 4468 0014                  		neg.w	$14(a0)
00014228                            
00014228                            locret_1373C:
00014228 4E75                       		rts	
0001422A                            ; ===========================================================================
0001422A                            
0001422A                            loc_1373E:
0001422A 6100 0000                  		bsr.w	sub_14EB4
0001422E 4A41                       		tst.w	d1
00014230 6A00                       		bpl.s	loc_13758
00014232 D368 0008                  		add.w	d1,8(a0)
00014236 317C 0000 0010             		move.w	#0,$10(a0)
0001423C 3168 0012 0014             		move.w	$12(a0),$14(a0)
00014242 4E75                       		rts	
00014244                            ; ===========================================================================
00014244                            
00014244                            loc_13758:
00014244 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00014248 4A41                       		tst.w	d1
0001424A 6A00                       		bpl.s	loc_13772
0001424C 9368 000C                  		sub.w	d1,$C(a0)
00014250 4A68 0012                  		tst.w	$12(a0)
00014254 6A00                       		bpl.s	locret_13770
00014256 317C 0000 0012             		move.w	#0,$12(a0)
0001425C                            
0001425C                            locret_13770:
0001425C 4E75                       		rts	
0001425E                            ; ===========================================================================
0001425E                            
0001425E                            loc_13772:
0001425E 4A68 0012                  		tst.w	$12(a0)
00014262 6B00                       		bmi.s	locret_1379E
00014264 6100 0000                  		bsr.w	Sonic_HitFloor
00014268 4A41                       		tst.w	d1
0001426A 6A00                       		bpl.s	locret_1379E
0001426C D368 000C                  		add.w	d1,$C(a0)
00014270 1143 0026                  		move.b	d3,$26(a0)
00014274 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00014278 117C 0000 001C             		move.b	#0,$1C(a0)
0001427E 317C 0000 0012             		move.w	#0,$12(a0)
00014284 3168 0010 0014             		move.w	$10(a0),$14(a0)
0001428A                            
0001428A                            locret_1379E:
0001428A 4E75                       		rts	
0001428C                            ; End of function Sonic_Floor
0001428C                            
0001428C                            ; ---------------------------------------------------------------------------
0001428C                            ; Subroutine to	reset Sonic's mode when he lands on the floor
0001428C                            ; ---------------------------------------------------------------------------
0001428C                            
0001428C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001428C                            
0001428C                            
0001428C                            Sonic_ResetOnFloor:			; XREF: PlatformObject; et al
0001428C 0828 0004 0022             		btst	#4,$22(a0)
00014292 6700                       		beq.s	loc_137AE
00014294 4E71                       		nop	
00014296 4E71                       		nop	
00014298 4E71                       		nop	
0001429A                            
0001429A                            loc_137AE:
0001429A 08A8 0005 0022             		bclr	#5,$22(a0)
000142A0 08A8 0001 0022             		bclr	#1,$22(a0)
000142A6 08A8 0004 0022             		bclr	#4,$22(a0)
000142AC 0828 0002 0022             		btst	#2,$22(a0)
000142B2 6700                       		beq.s	loc_137E4
000142B4 08A8 0002 0022             		bclr	#2,$22(a0)
000142BA 117C 0013 0016             		move.b	#$13,$16(a0)
000142C0 117C 0009 0017             		move.b	#9,$17(a0)
000142C6 117C 0000 001C             		move.b	#0,$1C(a0)	; use running/walking animation
000142CC 5B68 000C                  		subq.w	#5,$C(a0)
000142D0                            
000142D0                            loc_137E4:
000142D0 117C 0000 003C             		move.b	#0,$3C(a0)
000142D6 31FC 0000 F7D0             		move.w	#0,($FFFFF7D0).w
000142DC 4E75                       		rts	
000142DE                            ; End of function Sonic_ResetOnFloor
000142DE                            
000142DE                            ; ===========================================================================
000142DE                            ; ---------------------------------------------------------------------------
000142DE                            ; Sonic	when he	gets hurt
000142DE                            ; ---------------------------------------------------------------------------
000142DE                            
000142DE                            Obj01_Hurt:				; XREF: Obj01_Index
000142DE 4EBA 9D3E                  		jsr	SpeedToPos
000142E2 0668 0030 0012             		addi.w	#$30,$12(a0)
000142E8 0828 0006 0022             		btst	#6,$22(a0)
000142EE 6700                       		beq.s	loc_1380C
000142F0 0468 0020 0012             		subi.w	#$20,$12(a0)
000142F6                            
000142F6                            loc_1380C:
000142F6 6100 0000                  		bsr.w	Sonic_HurtStop
000142FA 6100 FAEE                  		bsr.w	Sonic_LevelBound
000142FE 6100 F4B4                  		bsr.w	Sonic_RecordPos
00014302 6100 0000                  		bsr.w	Sonic_Animate
00014306 6100 0000                  		bsr.w	LoadSonicDynPLC
0001430A 4EFA 9D38                  		jmp	DisplaySprite
0001430E                            
0001430E                            ; ---------------------------------------------------------------------------
0001430E                            ; Subroutine to	stop Sonic falling after he's been hurt
0001430E                            ; ---------------------------------------------------------------------------
0001430E                            
0001430E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001430E                            
0001430E                            
0001430E                            Sonic_HurtStop:				; XREF: Obj01_Hurt
0001430E 3038 F72E                  		move.w	($FFFFF72E).w,d0
00014312 0640 00E0                  		addi.w	#$E0,d0
00014316 B068 000C                  		cmp.w	$C(a0),d0
0001431A 6500 0000                  		bcs.w	KillSonic
0001431E 6100 FD70                  		bsr.w	Sonic_Floor
00014322 0828 0001 0022             		btst	#1,$22(a0)
00014328 6600                       		bne.s	locret_13860
0001432A 7000                       		moveq	#0,d0
0001432C 3140 0012                  		move.w	d0,$12(a0)
00014330 3140 0010                  		move.w	d0,$10(a0)
00014334 3140 0014                  		move.w	d0,$14(a0)
00014338 117C 0000 001C             		move.b	#0,$1C(a0)
0001433E 5528 0024                  		subq.b	#2,$24(a0)
00014342 317C 0078 0030             		move.w	#$78,$30(a0)
00014348                            
00014348                            locret_13860:
00014348 4E75                       		rts	
0001434A                            ; End of function Sonic_HurtStop
0001434A                            
0001434A                            ; ===========================================================================
0001434A                            ; ---------------------------------------------------------------------------
0001434A                            ; Sonic	when he	dies
0001434A                            ; ---------------------------------------------------------------------------
0001434A                            
0001434A                            Obj01_Death:				; XREF: Obj01_Index
0001434A 6100 0000                  		bsr.w	GameOver
0001434E 4EBA 9C5C                  		jsr	ObjectFall
00014352 6100 F460                  		bsr.w	Sonic_RecordPos
00014356 6100 0000                  		bsr.w	Sonic_Animate
0001435A 6100 0000                  		bsr.w	LoadSonicDynPLC
0001435E 4EFA 9CE4                  		jmp	DisplaySprite
00014362                            
00014362                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014362                            
00014362                            
00014362                            GameOver:				; XREF: Obj01_Death
00014362 3038 F72E                  		move.w	($FFFFF72E).w,d0
00014366 0640 0100                  		addi.w	#$100,d0
0001436A B068 000C                  		cmp.w	$C(a0),d0
0001436E 6400 0000                  		bcc.w	locret_13900
00014372 317C FFC8 0012             		move.w	#-$38,$12(a0)
00014378 5428 0024                  		addq.b	#2,$24(a0)
0001437C 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
00014380 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; update lives	counter
00014384 5338 FE12                  		subq.b	#1,($FFFFFE12).w ; subtract 1 from number of lives
00014388 6600                       		bne.s	loc_138D4
0001438A 317C 0000 003A             		move.w	#0,$3A(a0)
00014390 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load GAME object
00014396 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
0001439C 11FC 0001 D0DA             		move.b	#1,($FFFFD0DA).w ; set OVER object to correct frame
000143A2 4238 FE1A                  		clr.b	($FFFFFE1A).w
000143A6                            
000143A6                            loc_138C2:
000143A6 303C 008F                  		move.w	#$8F,d0
000143AA 4EB9 0000 1594             		jsr	(PlaySound).l	; play game over music
000143B0 7003                       		moveq	#3,d0
000143B2 4EF9 0000 177E             		jmp	(LoadPLC).l	; load game over patterns
000143B8                            ; ===========================================================================
000143B8                            
000143B8                            loc_138D4:
000143B8 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
000143BE 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is TIME OVER tag set?
000143C2 6700                       		beq.s	locret_13900	; if not, branch
000143C4 317C 0000 003A             		move.w	#0,$3A(a0)
000143CA 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load TIME object
000143D0 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
000143D6 11FC 0002 D09A             		move.b	#2,($FFFFD09A).w
000143DC 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
000143E2 60C2                       		bra.s	loc_138C2
000143E4                            ; ===========================================================================
000143E4                            
000143E4                            locret_13900:
000143E4 4E75                       		rts	
000143E6                            ; End of function GameOver
000143E6                            
000143E6                            ; ===========================================================================
000143E6                            ; ---------------------------------------------------------------------------
000143E6                            ; Sonic	when the level is restarted
000143E6                            ; ---------------------------------------------------------------------------
000143E6                            
000143E6                            Obj01_ResetLevel:			; XREF: Obj01_Index
000143E6 4A68 003A                  		tst.w	$3A(a0)
000143EA 6700                       		beq.s	locret_13914
000143EC 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
000143F0 6600                       		bne.s	locret_13914
000143F2 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
000143F8                            
000143F8                            locret_13914:
000143F8 4E75                       		rts	
000143FA                            
000143FA                            ; ---------------------------------------------------------------------------
000143FA                            ; Subroutine to	make Sonic run around loops (GHZ/SLZ)
000143FA                            ; ---------------------------------------------------------------------------
000143FA                            
000143FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000143FA                            
000143FA                            
000143FA                            Sonic_Loops:				; XREF: Obj01_Control
000143FA                            ;		cmpi.b	#3,($FFFFFE10).w ; is level SLZ	?
000143FA                            ;		beq.s	loc_13926	; if yes, branch
000143FA                            ;		tst.b	($FFFFFE10).w	; is level GHZ ?
000143FA                            ;		bne.w	locret_139C2	; if not, branch
000143FA                            ;		this is commented out, please do more plane messups id love that
000143FA                            ;loc_13926:
000143FA 3028 000C                  		move.w	$C(a0),d0
000143FE E248                       		lsr.w	#1,d0
00014400 0240 0380                  		andi.w	#$380,d0
00014404 1228 0008                  		move.b	8(a0),d1
00014408 0241 007F                  		andi.w	#$7F,d1
0001440C D041                       		add.w	d1,d0
0001440E 43F8 A400                  		lea	($FFFFA400).w,a1
00014412 1231 0000                  		move.b	(a1,d0.w),d1	; d1 is	the 256x256 tile Sonic is currently on
00014416 B238 F7AE                  		cmp.b	($FFFFF7AE).w,d1
0001441A 6700 FA76                  		beq.w	Obj01_ChkRoll
0001441E B238 F7AF                  		cmp.b	($FFFFF7AF).w,d1
00014422 6700 FA6E                  		beq.w	Obj01_ChkRoll
00014426 B238 F7AC                  		cmp.b	($FFFFF7AC).w,d1
0001442A 6700                       		beq.s	loc_13976
0001442C B238 F7AD                  		cmp.b	($FFFFF7AD).w,d1
00014430 6700                       		beq.s	loc_13966
00014432 08A8 0006 0001             		bclr	#6,1(a0)
00014438 4E75                       		rts	
0001443A                            ; ===========================================================================
0001443A                            
0001443A                            loc_13966:
0001443A 0828 0001 0022             		btst	#1,$22(a0)
00014440 6700                       		beq.s	loc_13976
00014442 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
00014448 4E75                       		rts	
0001444A                            ; ===========================================================================
0001444A                            
0001444A                            loc_13976:
0001444A 3428 0008                  		move.w	8(a0),d2
0001444E 0C02 002C                  		cmpi.b	#$2C,d2
00014452 6400                       		bcc.s	loc_13988
00014454 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
0001445A 4E75                       		rts	
0001445C                            ; ===========================================================================
0001445C                            
0001445C                            loc_13988:
0001445C 0C02 00E0                  		cmpi.b	#-$20,d2
00014460 6500                       		bcs.s	loc_13996
00014462 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
00014468 4E75                       		rts	
0001446A                            ; ===========================================================================
0001446A                            
0001446A                            loc_13996:
0001446A 0828 0006 0001             		btst	#6,1(a0)
00014470 6600                       		bne.s	loc_139B2
00014472 1228 0026                  		move.b	$26(a0),d1
00014476 6700                       		beq.s	locret_139C2
00014478 0C01 0080                  		cmpi.b	#-$80,d1
0001447C 6200                       		bhi.s	locret_139C2
0001447E 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
00014484 4E75                       		rts	
00014486                            ; ===========================================================================
00014486                            
00014486                            loc_139B2:
00014486 1228 0026                  		move.b	$26(a0),d1
0001448A 0C01 0080                  		cmpi.b	#-$80,d1
0001448E 6300                       		bls.s	locret_139C2
00014490 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
00014496                            
00014496                            locret_139C2:
00014496 4E75                       		rts	
00014498                            ; End of function Sonic_Loops
00014498                            
00014498                            ; ---------------------------------------------------------------------------
00014498                            ; Subroutine to	animate	Sonic's sprites
00014498                            ; ---------------------------------------------------------------------------
00014498                            
00014498                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014498                            
00014498                            Player_Anim:
00014498 0000 0000                  	dc.l	SonicAniData
0001449C 0000 0000                  	dc.l	SonicAniData ; gronic
000144A0 0000 0000                  	dc.l	SonicAniData ; anakama
000144A4 0000 0000                  	dc.l	SonicAniData ; LimitedSonic
000144A8                            
000144A8                            	; Insert more animation data for other characters here
000144A8                            	
000144A8                            Sonic_Animate:				; XREF: Obj01_Control; et al
000144A8 7000                       			moveq	#0,d0
000144AA 1038 FFE8                  		move.b	(v_character),d0
000144AE E548                       		lsl.w	#2,d0
000144B0 43FA FFE6                  		lea 	Player_Anim(pc),a1
000144B4                            		
000144B4 2271 0000                  		movea.l	(a1,d0.w),a1	; load Sonic dplc
000144B8                            	
000144B8 7000                       		moveq	#0,d0
000144BA 1028 001C                  		move.b	$1C(a0),d0
000144BE B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
000144C2 6700                       		beq.s	SAnim_Do	; if not, branch
000144C4 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
000144C8 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
000144CE 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
000144D4                            
000144D4                            SAnim_Do:
000144D4 D040                       		add.w	d0,d0
000144D6 D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
000144DA 1011                       		move.b	(a1),d0
000144DC 6B00                       		bmi.s	SAnim_WalkRun	; if animation is walk/run/roll/jump, branch
000144DE 1228 0022                  		move.b	$22(a0),d1
000144E2 0201 0001                  		andi.b	#1,d1
000144E6 0228 00FC 0001             		andi.b	#$FC,1(a0)
000144EC 8328 0001                  		or.b	d1,1(a0)
000144F0 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
000144F4 6A00                       		bpl.s	SAnim_Delay	; if time remains, branch
000144F6 1140 001E                  		move.b	d0,$1E(a0)	; load frame duration
000144FA                            
000144FA                            SAnim_Do2:
000144FA 7200                       		moveq	#0,d1
000144FC 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
00014500 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
00014504 6B00                       		bmi.s	SAnim_End_FF	; if animation is complete, branch
00014506                            
00014506                            SAnim_Next:
00014506 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
0001450A 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
0001450E                            
0001450E                            SAnim_Delay:
0001450E 4E75                       		rts	
00014510                            ; ===========================================================================
00014510                            
00014510                            SAnim_End_FF:
00014510 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
00014512 6600                       		bne.s	SAnim_End_FE	; if not, branch
00014514 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
0001451A 1029 0001                  		move.b	1(a1),d0	; read sprite number
0001451E 60E6                       		bra.s	SAnim_Next
00014520                            ; ===========================================================================
00014520                            
00014520                            SAnim_End_FE:
00014520 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
00014522 6600                       		bne.s	SAnim_End_FD	; if not, branch
00014524 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
00014528 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
0001452C 9200                       		sub.b	d0,d1
0001452E 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
00014532 60D2                       		bra.s	SAnim_Next
00014534                            ; ===========================================================================
00014534                            
00014534                            SAnim_End_FD:
00014534 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
00014536 6600                       		bne.s	SAnim_End	; if not, branch
00014538 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
0001453E                            
0001453E                            SAnim_End:
0001453E 4E75                       		rts	
00014540                            ; ===========================================================================
00014540                            
00014540                            SAnim_WalkRun:				; XREF: SAnim_Do
00014540 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00014544 6AC8                       		bpl.s	SAnim_Delay	; if time remains, branch
00014546 5200                       		addq.b	#1,d0		; is animation walking/running?
00014548 6600 0000                  		bne.w	SAnim_RollJump	; if not, branch
0001454C 7200                       		moveq	#0,d1
0001454E 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
00014552 1428 0022                  		move.b	$22(a0),d2
00014556 0202 0001                  		andi.b	#1,d2		; is Sonic mirrored horizontally?
0001455A 6600                       		bne.s	loc_13A70	; if yes, branch
0001455C 4600                       		not.b	d0		; reverse angle
0001455E                            
0001455E                            loc_13A70:
0001455E 0600 0010                  		addi.b	#$10,d0		; add $10 to angle
00014562 6A00                       		bpl.s	loc_13A78	; if angle is $0-$7F, branch
00014564 7203                       		moveq	#3,d1
00014566                            
00014566                            loc_13A78:
00014566 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001456C B302                       		eor.b	d1,d2
0001456E 8528 0001                  		or.b	d2,1(a0)
00014572 0828 0005 0022             		btst	#5,$22(a0)
00014578 6600 0000                  		bne.w	SAnim_Push
0001457C E808                       		lsr.b	#4,d0		; divide angle by $10
0001457E 0200 0006                  		andi.b	#6,d0		; angle	must be	0, 2, 4	or 6
00014582 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
00014586 6A00                       		bpl.s	loc_13A9C
00014588 4442                       		neg.w	d2
0001458A                            
0001458A                            loc_13A9C:
0001458A 43F9 0000 0000             		lea	(SonAni_Run).l,a1 ; use	running	animation
00014590 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic at running speed?
00014594 6400                       		bcc.s	loc_13AB4	; if yes, branch
00014596 43F9 0000 0000             		lea	(SonAni_Walk).l,a1 ; use walking animation
0001459C 1200                       		move.b	d0,d1
0001459E E209                       		lsr.b	#1,d1
000145A0 D001                       		add.b	d1,d0
000145A2                            
000145A2                            loc_13AB4:
000145A2 D000                       		add.b	d0,d0
000145A4 1600                       		move.b	d0,d3
000145A6 4442                       		neg.w	d2
000145A8 0642 0800                  		addi.w	#$800,d2
000145AC 6A00                       		bpl.s	loc_13AC2
000145AE 7400                       		moveq	#0,d2
000145B0                            
000145B0                            loc_13AC2:
000145B0 E04A                       		lsr.w	#8,d2
000145B2 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
000145B6 6100 FF42                  		bsr.w	SAnim_Do2
000145BA D728 001A                  		add.b	d3,$1A(a0)	; modify frame number
000145BE 4E75                       		rts	
000145C0                            ; ===========================================================================
000145C0                            
000145C0                            SAnim_RollJump:				; XREF: SAnim_WalkRun
000145C0 5200                       		addq.b	#1,d0		; is animation rolling/jumping?
000145C2 6600                       		bne.s	SAnim_Push	; if not, branch
000145C4 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
000145C8 6A00                       		bpl.s	loc_13ADE
000145CA 4442                       		neg.w	d2
000145CC                            
000145CC                            loc_13ADE:
000145CC 43F9 0000 0000             		lea	(SonAni_Roll2).l,a1 ; use fast animation
000145D2 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic moving fast?
000145D6 6400                       		bcc.s	loc_13AF0	; if yes, branch
000145D8 43F9 0000 0000             		lea	(SonAni_Roll).l,a1 ; use slower	animation
000145DE                            
000145DE                            loc_13AF0:
000145DE 4442                       		neg.w	d2
000145E0 0642 0400                  		addi.w	#$400,d2
000145E4 6A00                       		bpl.s	loc_13AFA
000145E6 7400                       		moveq	#0,d2
000145E8                            
000145E8                            loc_13AFA:
000145E8 E04A                       		lsr.w	#8,d2
000145EA 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
000145EE 1228 0022                  		move.b	$22(a0),d1
000145F2 0201 0001                  		andi.b	#1,d1
000145F6 0228 00FC 0001             		andi.b	#$FC,1(a0)
000145FC 8328 0001                  		or.b	d1,1(a0)
00014600 6000 FEF8                  		bra.w	SAnim_Do2
00014604                            ; ===========================================================================
00014604                            
00014604                            SAnim_Push:				; XREF: SAnim_RollJump
00014604 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
00014608 6B00                       		bmi.s	loc_13B1E
0001460A 4442                       		neg.w	d2
0001460C                            
0001460C                            loc_13B1E:
0001460C 0642 0800                  		addi.w	#$800,d2
00014610 6A00                       		bpl.s	loc_13B26
00014612 7400                       		moveq	#0,d2
00014614                            
00014614                            loc_13B26:
00014614 EC4A                       		lsr.w	#6,d2
00014616 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
0001461A 43F9 0000 0000             		lea	(SonAni_Push).l,a1
00014620 1228 0022                  		move.b	$22(a0),d1
00014624 0201 0001                  		andi.b	#1,d1
00014628 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001462E 8328 0001                  		or.b	d1,1(a0)
00014632 6000 FEC6                  		bra.w	SAnim_Do2
00014636                            ; End of function Sonic_Animate
00014636                            
00014636                            ; ===========================================================================
00014636                            SonicAniData:
00014636                            	include "_anim\Sonic.asm"
00014636                            ; ---------------------------------------------------------------------------
00014636                            ; Animation script - Sonic
00014636                            ; ---------------------------------------------------------------------------
00014636 0000                       		dc.w SonAni_Walk-SonicAniData
00014638 0000                       		dc.w SonAni_Run-SonicAniData
0001463A 0000                       		dc.w SonAni_Roll-SonicAniData
0001463C 0000                       		dc.w SonAni_Roll2-SonicAniData
0001463E 0000                       		dc.w SonAni_Push-SonicAniData
00014640 0000                       		dc.w SonAni_Wait-SonicAniData
00014642 0000                       		dc.w SonAni_Balance-SonicAniData
00014644 0000                       		dc.w SonAni_LookUp-SonicAniData
00014646 0000                       		dc.w SonAni_Duck-SonicAniData
00014648 0000                       		dc.w SonAni_Warp1-SonicAniData
0001464A 0000                       		dc.w SonAni_Warp2-SonicAniData
0001464C 0000                       		dc.w SonAni_Warp3-SonicAniData
0001464E 0000                       		dc.w SonAni_Warp4-SonicAniData
00014650 0000                       		dc.w SonAni_Stop-SonicAniData
00014652 0000                       		dc.w SonAni_Float1-SonicAniData
00014654 0000                       		dc.w SonAni_Float2-SonicAniData
00014656 0000                       		dc.w SonAni_Spring-SonicAniData
00014658 0000                       		dc.w SonAni_LZHang-SonicAniData
0001465A 0000                       		dc.w SonAni_Leap1-SonicAniData
0001465C 0000                       		dc.w SonAni_Leap2-SonicAniData
0001465E 0000                       		dc.w SonAni_Surf-SonicAniData
00014660 0000                       		dc.w SonAni_Bubble-SonicAniData
00014662 0000                       		dc.w SonAni_Death1-SonicAniData
00014664 0000                       		dc.w SonAni_Drown-SonicAniData
00014666 0000                       		dc.w SonAni_Death2-SonicAniData
00014668 0000                       		dc.w SonAni_Shrink-SonicAniData
0001466A 0000                       		dc.w SonAni_Hurt-SonicAniData
0001466C 0000                       		dc.w SonAni_LZSlide-SonicAniData
0001466E 0000                       		dc.w SonAni_Blank-SonicAniData
00014670 0000                       		dc.w SonAni_Float3-SonicAniData
00014672 0000                       		dc.w SonAni_Float4-SonicAniData
00014674 FF08 095A 0A0B 0659 07FF   SonAni_Walk:	dc.b $FF, 8, 9, $5A, $A, $B, 6, $59, 7, $FF
0001467E FF1E 1F20 21FF FFFF        SonAni_Run:	dc.b $FF, $1E, $1F, $20, $21, $FF, $FF,	$FF
00014686 FE2E 2F30 3132 FFFF        SonAni_Roll:	dc.b $FE, $2E, $2F, $30, $31, $32, $FF,	$FF
0001468E FE2E 2F32 3031 32FF        SonAni_Roll2:	dc.b $FE, $2E, $2F, $32, $30, $31, $32,	$FF
00014696 FD45 4647 48FF FFFF        SonAni_Push:	dc.b $FD, $45, $46, $47, $48, $FF, $FF,	$FF
0001469E 1701 0101 0101 0101 0101+  SonAni_Wait:	dc.b $17, 1, 1,	1, 1, 1, 1, 1, 1, 1, 1,	1, 1, 3, 2, 2, 2, 3, 4, $FE, 2, 0
000146B4 1E3A 3BFF                  SonAni_Balance:	dc.b $1E, $3A, $3B, $FF
000146B8 3F05 FF00                  SonAni_LookUp:	dc.b $3F, 5, $FF, 0
000146BC 3F39 FF00                  SonAni_Duck:	dc.b $3F, $39, $FF, 0
000146C0 3F33 FF00                  SonAni_Warp1:	dc.b $3F, $33, $FF, 0
000146C4 3F34 FF00                  SonAni_Warp2:	dc.b $3F, $34, $FF, 0
000146C8 3F35 FF00                  SonAni_Warp3:	dc.b $3F, $35, $FF, 0
000146CC 3F36 FF00                  SonAni_Warp4:	dc.b $3F, $36, $FF, 0
000146D0 0737 38FF                  SonAni_Stop:	dc.b 7,	$37, $38, $FF
000146D4 073C 3FFF                  SonAni_Float1:	dc.b 7,	$3C, $3F, $FF
000146D8 073C 3D53 3E54 FF00        SonAni_Float2:	dc.b 7,	$3C, $3D, $53, $3E, $54, $FF, 0
000146E0 2F40 FD00                  SonAni_Spring:	dc.b $2F, $40, $FD, 0
000146E4 0441 42FF                  SonAni_LZHang:	dc.b 4,	$41, $42, $FF
000146E8 0F43 4343 FE01             SonAni_Leap1:	dc.b $F, $43, $43, $43,	$FE, 1
000146EE 0F43 44FE 0100             SonAni_Leap2:	dc.b $F, $43, $44, $FE,	1, 0
000146F4 3F49 FF00                  SonAni_Surf:	dc.b $3F, $49, $FF, 0
000146F8 0B56 560A 0BFD 0000        SonAni_Bubble:	dc.b $B, $56, $56, $A, $B, $FD,	0, 0
00014700 204B FF00                  SonAni_Death1:	dc.b $20, $4B, $FF, 0
00014704 2F4C FF00                  SonAni_Drown:	dc.b $2F, $4C, $FF, 0
00014708 034D FF00                  SonAni_Death2:	dc.b 3,	$4D, $FF, 0
0001470C 034E 4F50 5152 00FE 0100   SonAni_Shrink:	dc.b 3,	$4E, $4F, $50, $51, $52, 0, $FE, 1, 0
00014716 035B FF00                  SonAni_Hurt:	dc.b 3,	$5B, $FF, 0
0001471A 0755 57FF                  SonAni_LZSlide:	dc.b 7, $55, $57, $FF
0001471E 7700 FD00                  SonAni_Blank:	dc.b $77, 0, $FD, 0
00014722 033C 3D53 3E54 FF00        SonAni_Float3:	dc.b 3,	$3C, $3D, $53, $3E, $54, $FF, 0
0001472A 033C FD00                  SonAni_Float4:	dc.b 3,	$3C, $FD, 0
0001472E                            		even
0001472E                            		even
0001472E                            
0001472E                            ; ---------------------------------------------------------------------------
0001472E                            ; Sonic	pattern	loading	subroutine
0001472E                            ; ---------------------------------------------------------------------------
0001472E                            
0001472E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001472E                            Player_DPLC:
0001472E 0000 0000                  	dc.l	SonicDynPLC
00014732 0000 0000                  	dc.l	SonicDynPLC ; gronic
00014736 0000 0000                  	dc.l	SonicDynPLC ; anakama
0001473A 0000 0000                  	dc.l	SonicDynPLC ; LimitedSonic
0001473E                            	; add pointers for player dplc here
0001473E                            Player_Art:
0001473E 0000 0000                  	dc.l	Art_Sonic
00014742 0000 0000                  	dc.l	Art_Sonic ; gronic
00014746 0000 0000                  	dc.l	Art_Sonic ; anakama
0001474A 0000 0000                  	dc.l	Art_Sonic ; LimitedSonic
0001474E                            	; add pointers for player art here
0001474E                            
0001474E                            LoadSonicDynPLC:			; XREF: Obj01_Control; et al
0001474E 7000                       		moveq	#0,d0
00014750 1028 001A                  		move.b	$1A(a0),d0	; load frame number
00014754 B038 F766                  		cmp.b	($FFFFF766).w,d0
00014758 6700                       		beq.s	locret_13C96
0001475A 11C0 F766                  		move.b	d0,($FFFFF766).w
0001475E                            		
0001475E 323C 0000                  		move.w	#0,d1
00014762 1238 FFE8                  		move.b	(v_character),d1
00014766 E549                       		lsl.w	#2,d1
00014768 45FA FFC4                  		lea 	Player_DPLC(pc),a2
0001476C                            
0001476C 2472 1000                  		movea.l	(a2,d1.w),a2	; load Sonic dplc
00014770                            		
00014770 D040                       		add.w	d0,d0
00014772 D4F2 0000                  		adda.w	(a2,d0.w),a2
00014776 7200                       		moveq	#0,d1
00014778 121A                       		move.b	(a2)+,d1	; read "number of entries" value
0001477A 5301                       		subq.b	#1,d1
0001477C 6B00                       		bmi.s	locret_13C96
0001477E 47F8 C800                  		lea	($FFFFC800).w,a3
00014782 11FC 0001 F767             		move.b	#1,($FFFFF767).w
00014788                            
00014788                            SPLC_ReadEntry:
00014788 303C 0000                  		move.w	#0,d0
0001478C 1038 FFE8                  		move.b	(v_character),d0
00014790 E548                       		lsl.w	#2,d0
00014792 43FA FFAA                  		lea 	Player_Art(pc),a1
00014796                            
00014796 2271 0000                  		movea.l	(a1,d0.w),a1	; load Sonic art
0001479A                            
0001479A 7400                       		moveq	#0,d2
0001479C 141A                       		move.b	(a2)+,d2
0001479E 3002                       		move.w	d2,d0
000147A0 E808                       		lsr.b	#4,d0
000147A2 E14A                       		lsl.w	#8,d2
000147A4 141A                       		move.b	(a2)+,d2
000147A6 EB4A                       		lsl.w	#5,d2
000147A8 D3C2                       		adda.l	d2,a1
000147AA                            
000147AA                            SPLC_LoadTile:
000147AA 4CD9 707C                  		movem.l	(a1)+,d2-d6/a4-a6
000147AE 48D3 707C                  		movem.l	d2-d6/a4-a6,(a3)
000147B2 47EB 0020                  		lea	$20(a3),a3	; next tile
000147B6 51C8 FFF2                  		dbf	d0,SPLC_LoadTile ; repeat for number of	tiles
000147BA                            
000147BA 51C9 FFCC                  		dbf	d1,SPLC_ReadEntry ; repeat for number of entries
000147BE                            
000147BE                            locret_13C96:
000147BE 4E75                       		rts	
000147C0                            ; End of function LoadSonicDynPLC
000147C0                            
000147C0                            ; ===========================================================================
000147C0                            ; ---------------------------------------------------------------------------
000147C0                            ; Object 0A - drowning countdown numbers and small bubbles (LZ)
000147C0                            ; ---------------------------------------------------------------------------
000147C0                            
000147C0                            Obj0A:					; XREF: Obj_Index
000147C0 7000                       		moveq	#0,d0
000147C2 1028 0024                  		move.b	$24(a0),d0
000147C6 323B 0000                  		move.w	Obj0A_Index(pc,d0.w),d1
000147CA 4EFB 1000                  		jmp	Obj0A_Index(pc,d1.w)
000147CE                            ; ===========================================================================
000147CE 0000 0000                  Obj0A_Index:	dc.w Obj0A_Main-Obj0A_Index, Obj0A_Animate-Obj0A_Index
000147D2 0000 0000                  		dc.w Obj0A_ChkWater-Obj0A_Index, Obj0A_Display-Obj0A_Index
000147D6 0000 0000                  		dc.w Obj0A_Delete2-Obj0A_Index,	Obj0A_Countdown-Obj0A_Index
000147DA 0000 0000                  		dc.w Obj0A_AirLeft-Obj0A_Index,	Obj0A_Display-Obj0A_Index
000147DE 0000                       		dc.w Obj0A_Delete2-Obj0A_Index
000147E0                            ; ===========================================================================
000147E0                            
000147E0                            Obj0A_Main:				; XREF: Obj0A_Index
000147E0 5428 0024                  		addq.b	#2,$24(a0)
000147E4 217C 0001 33D8 0004        		move.l	#Map_obj64,4(a0)
000147EC 317C 8348 0002             		move.w	#$8348,2(a0)
000147F2 117C 0084 0001             		move.b	#$84,1(a0)
000147F8 117C 0010 0019             		move.b	#$10,$19(a0)
000147FE 117C 0001 0018             		move.b	#1,$18(a0)
00014804 1028 0028                  		move.b	$28(a0),d0
00014808 6A00                       		bpl.s	loc_13D00
0001480A 5028 0024                  		addq.b	#8,$24(a0)
0001480E 217C 0000 0000 0004        		move.l	#Map_obj0A,4(a0)
00014816 317C 0440 0002             		move.w	#$440,2(a0)
0001481C 0240 007F                  		andi.w	#$7F,d0
00014820 1140 0033                  		move.b	d0,$33(a0)
00014824 6000 0000                  		bra.w	Obj0A_Countdown
00014828                            ; ===========================================================================
00014828                            
00014828                            loc_13D00:
00014828 1140 001C                  		move.b	d0,$1C(a0)
0001482C 3168 0008 0030             		move.w	8(a0),$30(a0)
00014832 317C FF78 0012             		move.w	#-$88,$12(a0)
00014838                            
00014838                            Obj0A_Animate:				; XREF: Obj0A_Index
00014838 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
0001483E 4EB9 0000 B09A             		jsr	AnimateSprite
00014844                            
00014844                            Obj0A_ChkWater:				; XREF: Obj0A_Index
00014844 3038 F646                  		move.w	($FFFFF646).w,d0
00014848 B068 000C                  		cmp.w	$C(a0),d0	; has bubble reached the water surface?
0001484C 6500                       		bcs.s	Obj0A_Wobble	; if not, branch
0001484E 117C 0006 0024             		move.b	#6,$24(a0)
00014854 5E28 001C                  		addq.b	#7,$1C(a0)
00014858 0C28 000D 001C             		cmpi.b	#$D,$1C(a0)
0001485E 6700                       		beq.s	Obj0A_Display
00014860 6000                       		bra.s	Obj0A_Display
00014862                            ; ===========================================================================
00014862                            
00014862                            Obj0A_Wobble:
00014862 4A38 F7C7                  		tst.b	($FFFFF7C7).w
00014866 6700                       		beq.s	loc_13D44
00014868 5868 0030                  		addq.w	#4,$30(a0)
0001486C                            
0001486C                            loc_13D44:
0001486C 1028 0026                  		move.b	$26(a0),d0
00014870 5228 0026                  		addq.b	#1,$26(a0)
00014874 0240 007F                  		andi.w	#$7F,d0
00014878 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
0001487E 1031 0000                  		move.b	(a1,d0.w),d0
00014882 4880                       		ext.w	d0
00014884 D068 0030                  		add.w	$30(a0),d0
00014888 3140 0008                  		move.w	d0,8(a0)
0001488C 6100                       		bsr.s	Obj0A_ShowNumber
0001488E 4EBA 978E                  		jsr	SpeedToPos
00014892 4A28 0001                  		tst.b	1(a0)
00014896 6A00                       		bpl.s	Obj0A_Delete
00014898 4EFA 97AA                  		jmp	DisplaySprite
0001489C                            ; ===========================================================================
0001489C                            
0001489C                            Obj0A_Delete:
0001489C 4EFA 97E2                  		jmp	DeleteObject
000148A0                            ; ===========================================================================
000148A0                            
000148A0                            Obj0A_Display:				; XREF: Obj0A_Index
000148A0 6100                       		bsr.s	Obj0A_ShowNumber
000148A2 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
000148A8 4EB9 0000 B09A             		jsr	AnimateSprite
000148AE 4EFA 9794                  		jmp	DisplaySprite
000148B2                            ; ===========================================================================
000148B2                            
000148B2                            Obj0A_Delete2:				; XREF: Obj0A_Index
000148B2 4EFA 97CC                  		jmp	DeleteObject
000148B6                            ; ===========================================================================
000148B6                            
000148B6                            Obj0A_AirLeft:				; XREF: Obj0A_Index
000148B6 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w ; check air remaining
000148BC 6200                       		bhi.s	Obj0A_Delete3	; if higher than $C, branch
000148BE 5368 0038                  		subq.w	#1,$38(a0)
000148C2 6600                       		bne.s	Obj0A_Display2
000148C4 117C 000E 0024             		move.b	#$E,$24(a0)
000148CA 5E28 001C                  		addq.b	#7,$1C(a0)
000148CE 60D0                       		bra.s	Obj0A_Display
000148D0                            ; ===========================================================================
000148D0                            
000148D0                            Obj0A_Display2:
000148D0 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
000148D6 4EB9 0000 B09A             		jsr	AnimateSprite
000148DC 4A28 0001                  		tst.b	1(a0)
000148E0 6A00                       		bpl.s	Obj0A_Delete3
000148E2 4EFA 9760                  		jmp	DisplaySprite
000148E6                            ; ===========================================================================
000148E6                            
000148E6                            Obj0A_Delete3:
000148E6 4EFA 9798                  		jmp	DeleteObject
000148EA                            ; ===========================================================================
000148EA                            
000148EA                            Obj0A_ShowNumber:			; XREF: Obj0A_Wobble; Obj0A_Display
000148EA 4A68 0038                  		tst.w	$38(a0)
000148EE 6700                       		beq.s	locret_13E1A
000148F0 5368 0038                  		subq.w	#1,$38(a0)
000148F4 6600                       		bne.s	locret_13E1A
000148F6 0C28 0007 001C             		cmpi.b	#7,$1C(a0)
000148FC 6400                       		bcc.s	locret_13E1A
000148FE 317C 000F 0038             		move.w	#$F,$38(a0)
00014904 4268 0012                  		clr.w	$12(a0)
00014908 117C 0080 0001             		move.b	#$80,1(a0)
0001490E 3028 0008                  		move.w	8(a0),d0
00014912 9078 F700                  		sub.w	($FFFFF700).w,d0
00014916 0640 0080                  		addi.w	#$80,d0
0001491A 3140 0008                  		move.w	d0,8(a0)
0001491E 3028 000C                  		move.w	$C(a0),d0
00014922 9078 F704                  		sub.w	($FFFFF704).w,d0
00014926 0640 0080                  		addi.w	#$80,d0
0001492A 3140 000A                  		move.w	d0,$A(a0)
0001492E 117C 000C 0024             		move.b	#$C,$24(a0)
00014934                            
00014934                            locret_13E1A:
00014934 4E75                       		rts	
00014936                            ; ===========================================================================
00014936                            Obj0A_WobbleData:
00014936 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 2
00014947 0203 0303 0303 0303 0303+  		dc.b 2,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 3, 3, 4, 3
00014958 0303 0303 0303 0303 0303+  		dc.b 3,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 2, 2, 2, 2
00014969 0202 0201 0101 0101 0000+  		dc.b 2,	2, 2, 1, 1, 1, 1, 1, 0,	0, 0, 0, 0, 0, -1, -1
00014979 FFFF FFFE FEFE FEFE FDFD+  		dc.b -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
00014986 FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
00014993 FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
000149A0 FCFC FCFC FCFD FDFD FDFD+  		dc.b -4, -4, -4, -4, -4, -3, -3, -3, -3, -3, -3, -3, -2
000149AD FEFE FEFE FFFF FFFF FF     		dc.b -2, -2, -2, -2, -1, -1, -1, -1, -1
000149B6                            ; ===========================================================================
000149B6                            
000149B6                            Obj0A_Countdown:			; XREF: Obj0A_Index
000149B6 4A68 002C                  		tst.w	$2C(a0)
000149BA 6600 0000                  		bne.w	loc_13F86
000149BE 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000149C4 6400 0000                  		bcc.w	locret_1408C
000149C8 0838 0006 D022             		btst	#6,($FFFFD022).w
000149CE 6700 0000                  		beq.w	locret_1408C
000149D2 5368 0038                  		subq.w	#1,$38(a0)
000149D6 6A00 0000                  		bpl.w	loc_13FAC
000149DA 317C 003B 0038             		move.w	#59,$38(a0)
000149E0 317C 0001 0036             		move.w	#1,$36(a0)
000149E6 4EB9 0000 2D0E             		jsr	(RandomNumber).l
000149EC 0240 0001                  		andi.w	#1,d0
000149F0 1140 0034                  		move.b	d0,$34(a0)
000149F4 3038 FE14                  		move.w	($FFFFFE14).w,d0 ; check air remaining
000149F8 0C40 0019                  		cmpi.w	#$19,d0
000149FC 6700                       		beq.s	Obj0A_WarnSound	; play sound if	air is $19
000149FE 0C40 0014                  		cmpi.w	#$14,d0
00014A02 6700                       		beq.s	Obj0A_WarnSound
00014A04 0C40 000F                  		cmpi.w	#$F,d0
00014A08 6700                       		beq.s	Obj0A_WarnSound
00014A0A 0C40 000C                  		cmpi.w	#$C,d0
00014A0E 6200                       		bhi.s	Obj0A_ReduceAir	; if air is above $C, branch
00014A10 6600                       		bne.s	loc_13F02
00014A12 303C 0092                  		move.w	#$92,d0
00014A16 4EB9 0000 1594             		jsr	(PlaySound).l	; play countdown music
00014A1C                            
00014A1C                            loc_13F02:
00014A1C 5328 0032                  		subq.b	#1,$32(a0)
00014A20 6A00                       		bpl.s	Obj0A_ReduceAir
00014A22 1168 0033 0032             		move.b	$33(a0),$32(a0)
00014A28 08E8 0007 0036             		bset	#7,$36(a0)
00014A2E 6000                       		bra.s	Obj0A_ReduceAir
00014A30                            ; ===========================================================================
00014A30                            
00014A30                            Obj0A_WarnSound:			; XREF: Obj0A_Countdown
00014A30 303C 00C2                  		move.w	#$C2,d0
00014A34 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play "ding-ding" warning sound
00014A3A                            
00014A3A                            Obj0A_ReduceAir:
00014A3A 5378 FE14                  		subq.w	#1,($FFFFFE14).w ; subtract 1 from air remaining
00014A3E 6400 0000                  		bcc.w	Obj0A_GoMakeItem ; if air is above 0, branch
00014A42 6100 0000                  		bsr.w	ResumeMusic
00014A46 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
00014A4C 303C 00B2                  		move.w	#$B2,d0
00014A50 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play drowning sound
00014A56 117C 000A 0034             		move.b	#$A,$34(a0)
00014A5C 317C 0001 0036             		move.w	#1,$36(a0)
00014A62 317C 0078 002C             		move.w	#$78,$2C(a0)
00014A68 2F08                       		move.l	a0,-(sp)
00014A6A 41F8 D000                  		lea	($FFFFD000).w,a0
00014A6E 6100 F81C                  		bsr.w	Sonic_ResetOnFloor
00014A72 117C 0017 001C             		move.b	#$17,$1C(a0)	; use Sonic's drowning animation
00014A78 08E8 0001 0022             		bset	#1,$22(a0)
00014A7E 08E8 0007 0002             		bset	#7,2(a0)
00014A84 317C 0000 0012             		move.w	#0,$12(a0)
00014A8A 317C 0000 0010             		move.w	#0,$10(a0)
00014A90 317C 0000 0014             		move.w	#0,$14(a0)
00014A96 11FC 0001 F744             		move.b	#1,($FFFFF744).w
00014A9C 205F                       		movea.l	(sp)+,a0
00014A9E 4E75                       		rts	
00014AA0                            ; ===========================================================================
00014AA0                            
00014AA0                            loc_13F86:
00014AA0 5368 002C                  		subq.w	#1,$2C(a0)
00014AA4 6600                       		bne.s	loc_13F94
00014AA6 11FC 0006 D024             		move.b	#6,($FFFFD024).w
00014AAC 4E75                       		rts	
00014AAE                            ; ===========================================================================
00014AAE                            
00014AAE                            loc_13F94:
00014AAE 2F08                       		move.l	a0,-(sp)
00014AB0 41F8 D000                  		lea	($FFFFD000).w,a0
00014AB4 4EBA 9568                  		jsr	SpeedToPos
00014AB8 0668 0010 0012             		addi.w	#$10,$12(a0)
00014ABE 205F                       		movea.l	(sp)+,a0
00014AC0 6000                       		bra.s	loc_13FAC
00014AC2                            ; ===========================================================================
00014AC2                            
00014AC2                            Obj0A_GoMakeItem:			; XREF: Obj0A_ReduceAir
00014AC2 6000                       		bra.s	Obj0A_MakeItem
00014AC4                            ; ===========================================================================
00014AC4                            
00014AC4                            loc_13FAC:
00014AC4 4A68 0036                  		tst.w	$36(a0)
00014AC8 6700 0000                  		beq.w	locret_1408C
00014ACC 5368 003A                  		subq.w	#1,$3A(a0)
00014AD0 6A00 0000                  		bpl.w	locret_1408C
00014AD4                            
00014AD4                            Obj0A_MakeItem:
00014AD4 4EB9 0000 2D0E             		jsr	(RandomNumber).l
00014ADA 0240 000F                  		andi.w	#$F,d0
00014ADE 3140 003A                  		move.w	d0,$3A(a0)
00014AE2 4EBA 99E6                  		jsr	SingleObjLoad
00014AE6 6600 0000                  		bne.w	locret_1408C
00014AEA 12BC 000A                  		move.b	#$A,0(a1)	; load object
00014AEE 3378 D008 0008             		move.w	($FFFFD008).w,8(a1) ; match X position to Sonic
00014AF4 7006                       		moveq	#6,d0
00014AF6 0838 0000 D022             		btst	#0,($FFFFD022).w
00014AFC 6700                       		beq.s	loc_13FF2
00014AFE 4440                       		neg.w	d0
00014B00 137C 0040 0026             		move.b	#$40,$26(a1)
00014B06                            
00014B06                            loc_13FF2:
00014B06 D169 0008                  		add.w	d0,8(a1)
00014B0A 3378 D00C 000C             		move.w	($FFFFD00C).w,$C(a1)
00014B10 137C 0006 0028             		move.b	#6,$28(a1)
00014B16 4A68 002C                  		tst.w	$2C(a0)
00014B1A 6700 0000                  		beq.w	loc_1403E
00014B1E 0268 0007 003A             		andi.w	#7,$3A(a0)
00014B24 0668 0000 003A             		addi.w	#0,$3A(a0)
00014B2A 3038 D00C                  		move.w	($FFFFD00C).w,d0
00014B2E 0440 000C                  		subi.w	#$C,d0
00014B32 3340 000C                  		move.w	d0,$C(a1)
00014B36 4EB9 0000 2D0E             		jsr	(RandomNumber).l
00014B3C 1340 0026                  		move.b	d0,$26(a1)
00014B40 3038 FE04                  		move.w	($FFFFFE04).w,d0
00014B44 0200 0003                  		andi.b	#3,d0
00014B48 6600                       		bne.s	loc_14082
00014B4A 137C 000E 0028             		move.b	#$E,$28(a1)
00014B50 6000                       		bra.s	loc_14082
00014B52                            ; ===========================================================================
00014B52                            
00014B52                            loc_1403E:
00014B52 0828 0007 0036             		btst	#7,$36(a0)
00014B58 6700                       		beq.s	loc_14082
00014B5A 3438 FE14                  		move.w	($FFFFFE14).w,d2
00014B5E E24A                       		lsr.w	#1,d2
00014B60 4EB9 0000 2D0E             		jsr	(RandomNumber).l
00014B66 0240 0003                  		andi.w	#3,d0
00014B6A 6600                       		bne.s	loc_1406A
00014B6C 08E8 0006 0036             		bset	#6,$36(a0)
00014B72 6600                       		bne.s	loc_14082
00014B74 1342 0028                  		move.b	d2,$28(a1)
00014B78 337C 001C 0038             		move.w	#$1C,$38(a1)
00014B7E                            
00014B7E                            loc_1406A:
00014B7E 4A28 0034                  		tst.b	$34(a0)
00014B82 6600                       		bne.s	loc_14082
00014B84 08E8 0006 0036             		bset	#6,$36(a0)
00014B8A 6600                       		bne.s	loc_14082
00014B8C 1342 0028                  		move.b	d2,$28(a1)
00014B90 337C 001C 0038             		move.w	#$1C,$38(a1)
00014B96                            
00014B96                            loc_14082:
00014B96 5328 0034                  		subq.b	#1,$34(a0)
00014B9A 6A00                       		bpl.s	locret_1408C
00014B9C 4268 0036                  		clr.w	$36(a0)
00014BA0                            
00014BA0                            locret_1408C:
00014BA0 4E75                       		rts	
00014BA2                            
00014BA2                            ; ---------------------------------------------------------------------------
00014BA2                            ; Subroutine to	play music for LZ/SBZ3 after a countdown
00014BA2                            ; ---------------------------------------------------------------------------
00014BA2                            
00014BA2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014BA2                            
00014BA2                            
00014BA2                            ResumeMusic:				; XREF: Obj64_Wobble; Sonic_Water; Obj0A_ReduceAir
00014BA2 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
00014BA8                             
00014BA8                            ; Third section of the NineKode - Play correct music after the countdown (if you breathe)
00014BA8                             
00014BA8 6200 0000                  		bhi.w	loc_140AC	; change to bhi.w!
00014BAC                             
00014BAC 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
00014BB2 6600                       		bne.s	Air_GetBgm2	; if not, branch
00014BB4 43F9 0000 3D8E             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
00014BBA 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
00014BBC                             
00014BBC                            Air_GetBgm2:
00014BBC 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
00014BC2 6600                       		bne.s	Air_GetBgm3	; if not, branch
00014BC4 43F9 0000 3D96             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
00014BCA 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
00014BCC                             
00014BCC                            Air_GetBgm3:
00014BCC 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
00014BD2 6600                       		bne.s	Air_GetBgm4	; if not, branch
00014BD4 43F9 0000 3D9E             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 39
00014BDA 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
00014BDC                             
00014BDC                            Air_GetBgm4:
00014BDC 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
00014BE2 6600                       		bne.s	Air_PlayMusic	; if not, branch
00014BE4 43F9 0000 3DA6             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
00014BEA                             
00014BEA                            Air_PlayMusic:
00014BEA 1029 0001                  		move.b	1(a1),d0	; load entry $1 from the playlist
00014BEE                             
00014BEE                            loc_140A6:
00014BEE 4EB9 0000 1594             		jsr	(PlaySound).l
00014BF4                             
00014BF4                            ; NineKode ends here
00014BF4                            
00014BF4                            loc_140AC:
00014BF4 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00014BFA 4238 D372                  		clr.b	($FFFFD372).w
00014BFE 4E75                       		rts	
00014C00                            ; End of function ResumeMusic
00014C00                            
00014C00                            ; ===========================================================================
00014C00                            Ani_obj0A:
00014C00                            	include "_anim\obj0A.asm"
00014C00                            ; ---------------------------------------------------------------------------
00014C00                            ; Animation script - countdown numbers and bubbles (LZ)
00014C00                            ; ---------------------------------------------------------------------------
00014C00 0000                       		dc.w byte_140D6-Ani_obj0A
00014C02 0000                       		dc.w byte_140E0-Ani_obj0A
00014C04 0000                       		dc.w byte_140EA-Ani_obj0A
00014C06 0000                       		dc.w byte_140F4-Ani_obj0A
00014C08 0000                       		dc.w byte_140FE-Ani_obj0A
00014C0A 0000                       		dc.w byte_14108-Ani_obj0A
00014C0C 0000                       		dc.w byte_14112-Ani_obj0A
00014C0E 0000                       		dc.w byte_14118-Ani_obj0A
00014C10 0000                       		dc.w byte_14120-Ani_obj0A
00014C12 0000                       		dc.w byte_14128-Ani_obj0A
00014C14 0000                       		dc.w byte_14130-Ani_obj0A
00014C16 0000                       		dc.w byte_14138-Ani_obj0A
00014C18 0000                       		dc.w byte_14140-Ani_obj0A
00014C1A 0000                       		dc.w byte_14148-Ani_obj0A
00014C1C 0000                       		dc.w byte_1414A-Ani_obj0A
00014C1E 0500 0102 0304 090D FC00   byte_140D6:	dc.b 5,	0, 1, 2, 3, 4, 9, $D, $FC, 0
00014C28 0500 0102 0304 0C12 FC00   byte_140E0:	dc.b 5,	0, 1, 2, 3, 4, $C, $12,	$FC, 0
00014C32 0500 0102 0304 0C11 FC00   byte_140EA:	dc.b 5,	0, 1, 2, 3, 4, $C, $11,	$FC, 0
00014C3C 0500 0102 0304 0B10 FC00   byte_140F4:	dc.b 5,	0, 1, 2, 3, 4, $B, $10,	$FC, 0
00014C46 0500 0102 0304 090F FC00   byte_140FE:	dc.b 5,	0, 1, 2, 3, 4, 9, $F, $FC, 0
00014C50 0500 0102 0304 0A0E FC00   byte_14108:	dc.b 5,	0, 1, 2, 3, 4, $A, $E, $FC, 0
00014C5A 0E00 0102 FC00             byte_14112:	dc.b $E, 0, 1, 2, $FC, 0
00014C60 0716 0D16 0D16 0DFC        byte_14118:	dc.b 7,	$16, $D, $16, $D, $16, $D, $FC
00014C68 0716 1216 1216 12FC        byte_14120:	dc.b 7,	$16, $12, $16, $12, $16, $12, $FC
00014C70 0716 1116 1116 11FC        byte_14128:	dc.b 7,	$16, $11, $16, $11, $16, $11, $FC
00014C78 0716 1016 1016 10FC        byte_14130:	dc.b 7,	$16, $10, $16, $10, $16, $10, $FC
00014C80 0716 0F16 0F16 0FFC        byte_14138:	dc.b 7,	$16, $F, $16, $F, $16, $F, $FC
00014C88 0716 0E16 0E16 0EFC        byte_14140:	dc.b 7,	$16, $E, $16, $E, $16, $E, $FC
00014C90 0EFC                       byte_14148:	dc.b $E, $FC
00014C92 0E01 0203 04FC             byte_1414A:	dc.b $E, 1, 2, 3, 4, $FC
00014C98                            		even
00014C98                            		even
00014C98                            
00014C98                            ; ---------------------------------------------------------------------------
00014C98                            ; Sprite mappings - drowning countdown numbers (LZ)
00014C98                            ; ---------------------------------------------------------------------------
00014C98                            Map_obj0A:
00014C98                            	include "_maps\obj0A.asm"
00014C98                            ; ---------------------------------------------------------------------------
00014C98                            ; Sprite mappings - drowning countdown numbers (LZ)
00014C98                            ; ---------------------------------------------------------------------------
00014C98 0000                       		dc.w byte_14152-Map_obj0A
00014C9A 01                         byte_14152:	dc.b 1
00014C9B E80E 0000 F2               		dc.b $E8, $E, 0, 0, $F2
00014CA0                            		even
00014CA0                            		even
00014CA0                            
00014CA0                            ; ===========================================================================
00014CA0                            ; ---------------------------------------------------------------------------
00014CA0                            ; Object 38 - shield and invincibility stars
00014CA0                            ; ---------------------------------------------------------------------------
00014CA0                            
00014CA0                            Obj38:					; XREF: Obj_Index
00014CA0 7000                       		moveq	#0,d0
00014CA2 1028 0024                  		move.b	$24(a0),d0
00014CA6 323B 0000                  		move.w	Obj38_Index(pc,d0.w),d1
00014CAA 4EFB 1000                  		jmp	Obj38_Index(pc,d1.w)
00014CAE                            ; ===========================================================================
00014CAE 0000                       Obj38_Index:	dc.w Obj38_Main-Obj38_Index
00014CB0 0000                       		dc.w Obj38_Shield-Obj38_Index
00014CB2 0000                       		dc.w Obj38_Stars-Obj38_Index
00014CB4                            ; ===========================================================================
00014CB4                            
00014CB4                            Obj38_Main:				; XREF: Obj38_Index
00014CB4 5428 0024                  		addq.b	#2,$24(a0)
00014CB8 217C 0000 0000 0004        		move.l	#Map_obj38,4(a0)
00014CC0 117C 0004 0001             		move.b	#4,1(a0)
00014CC6 117C 0001 0018             		move.b	#1,$18(a0)
00014CCC 117C 0010 0019             		move.b	#$10,$19(a0)
00014CD2 4A28 001C                  		tst.b	$1C(a0)		; is object a shield?
00014CD6 6600                       		bne.s	Obj38_DoStars	; if not, branch
00014CD8 317C 0541 0002             		move.w	#$541,2(a0)	; shield specific code
00014CDE 4E75                       		rts	
00014CE0                            ; ===========================================================================
00014CE0                            
00014CE0                            Obj38_DoStars:
00014CE0 5428 0024                  		addq.b	#2,$24(a0)	; stars	specific code
00014CE4 317C 055C 0002             		move.w	#$55C,2(a0)
00014CEA 4E75                       		rts	
00014CEC                            ; ===========================================================================
00014CEC                            
00014CEC                            Obj38_Shield:				; XREF: Obj38_Index
00014CEC 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
00014CF0 6600                       		bne.s	Obj38_RmvShield	; if yes, branch
00014CF2 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have shield?
00014CF6 6700                       		beq.s	Obj38_Delete	; if not, branch
00014CF8 3178 D008 0008             		move.w	($FFFFD008).w,8(a0)
00014CFE 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0)
00014D04 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
00014D0A 43F9 0000 0000             		lea	(Ani_obj38).l,a1
00014D10 4EB9 0000 B09A             		jsr	AnimateSprite
00014D16 4EFA 932C                  		jmp	DisplaySprite
00014D1A                            ; ===========================================================================
00014D1A                            
00014D1A                            Obj38_RmvShield:
00014D1A 4E75                       		rts	
00014D1C                            ; ===========================================================================
00014D1C                            
00014D1C                            Obj38_Delete:
00014D1C 4EFA 9362                  		jmp	DeleteObject
00014D20                            ; ===========================================================================
00014D20                            
00014D20                            Obj38_Stars:				; XREF: Obj38_Index
00014D20 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
00014D24 6700                       		beq.s	Obj38_Delete2	; if not, branch
00014D26 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
00014D2A 1228 001C                  		move.b	$1C(a0),d1
00014D2E 5301                       		subq.b	#1,d1
00014D30 6000                       		bra.s	Obj38_StarTrail
00014D32                            ; ===========================================================================
00014D32 E909                       		lsl.b	#4,d1
00014D34 5801                       		addq.b	#4,d1
00014D36 9001                       		sub.b	d1,d0
00014D38 1228 0030                  		move.b	$30(a0),d1
00014D3C 9001                       		sub.b	d1,d0
00014D3E 5801                       		addq.b	#4,d1
00014D40 0201 000F                  		andi.b	#$F,d1
00014D44 1141 0030                  		move.b	d1,$30(a0)
00014D48 6000                       		bra.s	Obj38_StarTrail2a
00014D4A                            ; ===========================================================================
00014D4A                            
00014D4A                            Obj38_StarTrail:			; XREF: Obj38_Stars
00014D4A E709                       		lsl.b	#3,d1
00014D4C 1401                       		move.b	d1,d2
00014D4E D201                       		add.b	d1,d1
00014D50 D202                       		add.b	d2,d1
00014D52 5801                       		addq.b	#4,d1
00014D54 9001                       		sub.b	d1,d0
00014D56 1228 0030                  		move.b	$30(a0),d1
00014D5A 9001                       		sub.b	d1,d0
00014D5C 5801                       		addq.b	#4,d1
00014D5E 0C01 0018                  		cmpi.b	#$18,d1
00014D62 6500                       		bcs.s	Obj38_StarTrail2
00014D64 7200                       		moveq	#0,d1
00014D66                            
00014D66                            Obj38_StarTrail2:
00014D66 1141 0030                  		move.b	d1,$30(a0)
00014D6A                            
00014D6A                            Obj38_StarTrail2a:
00014D6A 43F8 CB00                  		lea	($FFFFCB00).w,a1
00014D6E 43F1 0000                  		lea	(a1,d0.w),a1
00014D72 3159 0008                  		move.w	(a1)+,8(a0)
00014D76 3159 000C                  		move.w	(a1)+,$C(a0)
00014D7A 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
00014D80 43F9 0000 0000             		lea	(Ani_obj38).l,a1
00014D86 4EB9 0000 B09A             		jsr	AnimateSprite
00014D8C 4EFA 92B6                  		jmp	DisplaySprite
00014D90                            ; ===========================================================================
00014D90                            
00014D90                            Obj38_Delete2:				; XREF: Obj38_Stars
00014D90 4EFA 92EE                  		jmp	DeleteObject
00014D94                            ; ===========================================================================
00014D94                            ; ---------------------------------------------------------------------------
00014D94                            ; Object 4A - special stage entry from beta
00014D94                            ; ---------------------------------------------------------------------------
00014D94                            
00014D94                            Obj4A:					; XREF: Obj_Index
00014D94 7000                       		moveq	#0,d0
00014D96 1028 0024                  		move.b	$24(a0),d0
00014D9A 323B 0000                  		move.w	Obj4A_Index(pc,d0.w),d1
00014D9E 4EFB 1000                  		jmp	Obj4A_Index(pc,d1.w)
00014DA2                            ; ===========================================================================
00014DA2 0000                       Obj4A_Index:	dc.w Obj4A_Main-Obj4A_Index
00014DA4 0000                       		dc.w Obj4A_RmvSonic-Obj4A_Index
00014DA6 0000                       		dc.w Obj4A_LoadSonic-Obj4A_Index
00014DA8                            ; ===========================================================================
00014DA8                            
00014DA8                            Obj4A_Main:				; XREF: Obj4A_Index
00014DA8 4AB8 F680                  		tst.l	($FFFFF680).w	; are pattern load cues	empty?
00014DAC 6700                       		beq.s	Obj4A_Main2	; if yes, branch
00014DAE 4E75                       		rts	
00014DB0                            ; ===========================================================================
00014DB0                            
00014DB0                            Obj4A_Main2:
00014DB0 5428 0024                  		addq.b	#2,$24(a0)
00014DB4 217C 0000 0000 0004        		move.l	#Map_obj4A,4(a0)
00014DBC 117C 0004 0001             		move.b	#4,1(a0)
00014DC2 117C 0001 0018             		move.b	#1,$18(a0)
00014DC8 117C 0038 0019             		move.b	#$38,$19(a0)
00014DCE 317C 0541 0002             		move.w	#$541,2(a0)
00014DD4 317C 0078 0030             		move.w	#120,$30(a0)	; set time for Sonic's disappearance to 2 seconds
00014DDA                            
00014DDA                            Obj4A_RmvSonic:				; XREF: Obj4A_Index
00014DDA 3178 D008 0008             		move.w	($FFFFD008).w,8(a0)
00014DE0 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0)
00014DE6 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
00014DEC 43F9 0000 0000             		lea	(Ani_obj4A).l,a1
00014DF2 4EB9 0000 B09A             		jsr	AnimateSprite
00014DF8 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
00014DFE 6600                       		bne.s	Obj4A_Display
00014E00 4A38 D000                  		tst.b	($FFFFD000).w
00014E04 6700                       		beq.s	Obj4A_Display
00014E06 11FC 0000 D000             		move.b	#0,($FFFFD000).w ; remove Sonic
00014E0C 303C 00A8                  		move.w	#$A8,d0
00014E10 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play Special Stage "GOAL" sound
00014E16                            
00014E16                            Obj4A_Display:
00014E16 4EFA 922C                  		jmp	DisplaySprite
00014E1A                            ; ===========================================================================
00014E1A                            
00014E1A                            Obj4A_LoadSonic:			; XREF: Obj4A_Index
00014E1A 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
00014E1E 6600                       		bne.s	Obj4A_Wait	; if time remains, branch
00014E20 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
00014E26 4EFA 9258                  		jmp	DeleteObject
00014E2A                            ; ===========================================================================
00014E2A                            
00014E2A                            Obj4A_Wait:
00014E2A 4E75                       		rts	
00014E2C                            ; ===========================================================================
00014E2C                            ; ---------------------------------------------------------------------------
00014E2C                            ; Object 08 - water splash (LZ)
00014E2C                            ; ---------------------------------------------------------------------------
00014E2C                            
00014E2C                            Obj08:					; XREF: Obj_Index
00014E2C 7000                       		moveq	#0,d0
00014E2E 1028 0024                  		move.b	$24(a0),d0
00014E32 323B 0000                  		move.w	Obj08_Index(pc,d0.w),d1
00014E36 4EFB 1000                  		jmp	Obj08_Index(pc,d1.w)
00014E3A                            ; ===========================================================================
00014E3A 0000                       Obj08_Index:	dc.w Obj08_Main-Obj08_Index
00014E3C 0000                       		dc.w Obj08_Display-Obj08_Index
00014E3E 0000                       		dc.w Obj08_Delete-Obj08_Index
00014E40                            ; ===========================================================================
00014E40                            
00014E40                            Obj08_Main:				; XREF: Obj08_Index
00014E40 5428 0024                  		addq.b	#2,$24(a0)
00014E44 217C 0000 0000 0004        		move.l	#Map_obj08,4(a0)
00014E4C 0028 0004 0001             		ori.b	#4,1(a0)
00014E52 117C 0001 0018             		move.b	#1,$18(a0)
00014E58 117C 0010 0019             		move.b	#$10,$19(a0)
00014E5E 317C 4259 0002             		move.w	#$4259,2(a0)
00014E64 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; copy x-position from Sonic
00014E6A                            
00014E6A                            Obj08_Display:				; XREF: Obj08_Index
00014E6A 3178 F646 000C             		move.w	($FFFFF646).w,$C(a0) ; copy y-position from water height
00014E70 43F9 0000 0000             		lea	(Ani_obj08).l,a1
00014E76 4EB9 0000 B09A             		jsr	AnimateSprite
00014E7C 4EFA 91C6                  		jmp	DisplaySprite
00014E80                            ; ===========================================================================
00014E80                            
00014E80                            Obj08_Delete:				; XREF: Obj08_Index
00014E80 4EFA 91FE                  		jmp	DeleteObject	; delete when animation	is complete
00014E84                            ; ===========================================================================
00014E84                            Ani_obj38:
00014E84                            	include "_anim\obj38.asm"
00014E84                            ; ---------------------------------------------------------------------------
00014E84                            ; Animation script - shield and invincibility stars
00014E84                            ; ---------------------------------------------------------------------------
00014E84 0000                       		dc.w byte_14356-Ani_obj38
00014E86 0000                       		dc.w byte_1435E-Ani_obj38
00014E88 0000                       		dc.w byte_14364-Ani_obj38
00014E8A 0000                       		dc.w byte_1437E-Ani_obj38
00014E8C 0000                       		dc.w byte_14398-Ani_obj38
00014E8E 0101 0002 0003 00FF        byte_14356:	dc.b 1,	1, 0, 2, 0, 3, 0, $FF
00014E96 0504 0506 07FF             byte_1435E:	dc.b 5,	4, 5, 6, 7, $FF
00014E9C 0004 0400 0404 0005 0500+  byte_14364:	dc.b 0,	4, 4, 0, 4, 4, 0, 5, 5,	0, 5, 5, 0, 6, 6, 0, 6
00014EAD 0600 0707 0007 0700 FF     		dc.b 6,	0, 7, 7, 0, 7, 7, 0, $FF
00014EB6 0004 0400 0400 0005 0500+  byte_1437E:	dc.b 0,	4, 4, 0, 4, 0, 0, 5, 5,	0, 5, 0, 0, 6, 6, 0, 6
00014EC7 0000 0707 0007 0000 FF     		dc.b 0,	0, 7, 7, 0, 7, 0, 0, $FF
00014ED0 0004 0000 0400 0005 0000+  byte_14398:	dc.b 0,	4, 0, 0, 4, 0, 0, 5, 0,	0, 5, 0, 0, 6, 0, 0, 6
00014EE1 0000 0700 0007 0000 FF     		dc.b 0,	0, 7, 0, 0, 7, 0, 0, $FF
00014EEA                            		even
00014EEA                            		even
00014EEA                            
00014EEA                            ; ---------------------------------------------------------------------------
00014EEA                            ; Sprite mappings - shield and invincibility stars
00014EEA                            ; ---------------------------------------------------------------------------
00014EEA                            Map_obj38:
00014EEA                            	include "_maps\obj38.asm"
00014EEA                            ; ---------------------------------------------------------------------------
00014EEA                            ; Sprite mappings - shield and invincibility stars
00014EEA                            ; ---------------------------------------------------------------------------
00014EEA 0000 0000                  		dc.w byte_143CD-Map_obj38, byte_143C2-Map_obj38
00014EEE 0000 0000                  		dc.w byte_143D7-Map_obj38, byte_143EC-Map_obj38
00014EF2 0000 0000                  		dc.w byte_14401-Map_obj38, byte_14416-Map_obj38
00014EF6 0000 0000                  		dc.w byte_1442B-Map_obj38, byte_14440-Map_obj38
00014EFA 04                         byte_143C2:	dc.b 4
00014EFB E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00014F00 E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
00014F05 000A 1000 E8               byte_143CD:	dc.b 0,	$A, $10, 0, $E8
00014F0A 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
00014F0F 04                         byte_143D7:	dc.b 4
00014F10 E80A 0812 E9               		dc.b $E8, $A, 8, $12, $E9
00014F15 E80A 0012 00               		dc.b $E8, $A, 0, $12, 0
00014F1A 000A 1812 E9               		dc.b 0,	$A, $18, $12, $E9
00014F1F 000A 1012 00               		dc.b 0,	$A, $10, $12, 0
00014F24 04                         byte_143EC:	dc.b 4
00014F25 E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
00014F2A E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00014F2F 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
00014F34 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00014F39 04                         byte_14401:	dc.b 4
00014F3A E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00014F3F E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
00014F44 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
00014F49 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00014F4E 04                         byte_14416:	dc.b 4
00014F4F E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
00014F54 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00014F59 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
00014F5E 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
00014F63 04                         byte_1442B:	dc.b 4
00014F64 E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
00014F69 E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
00014F6E 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
00014F73 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
00014F78 04                         byte_14440:	dc.b 4
00014F79 E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
00014F7E E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
00014F83 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
00014F88 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
00014F8E 00                         		even
00014F8E 00                         		even
00014F8E                            
00014F8E                            Ani_obj4A:
00014F8E                            	include "_anim\obj4A.asm"
00014F8E                            ; ---------------------------------------------------------------------------
00014F8E                            ; Animation script - special stage entry effect from beta
00014F8E                            ; ---------------------------------------------------------------------------
00014F8E 0000                       		dc.w byte_14458-Ani_obj4A
00014F90 0500 0100 0100 0701 0702+  byte_14458:	dc.b 5,	0, 1, 0, 1, 0, 7, 1, 7,	2, 7, 3, 7, 4, 7, 5, 7, 6, 7, $FC
00014FA4                            		even
00014FA4                            		even
00014FA4                            
00014FA4                            ; ---------------------------------------------------------------------------
00014FA4                            ; Sprite mappings - special stage entry	from beta
00014FA4                            ; ---------------------------------------------------------------------------
00014FA4                            Map_obj4A:
00014FA4                            	include "_maps\obj4A.asm"
00014FA4                            ; ---------------------------------------------------------------------------
00014FA4                            ; Sprite mappings - special stage entry	from beta
00014FA4                            ; ---------------------------------------------------------------------------
00014FA4 0000 0000                  		dc.w byte_1447C-Map_obj4A, byte_1448C-Map_obj4A
00014FA8 0000 0000                  		dc.w byte_1449C-Map_obj4A, byte_144B6-Map_obj4A
00014FAC 0000 0000                  		dc.w byte_144E4-Map_obj4A, byte_1453F-Map_obj4A
00014FB0 0000 0000                  		dc.w byte_14595-Map_obj4A, byte_145BF-Map_obj4A
00014FB4 03                         byte_1447C:	dc.b 3
00014FB5 F800 0000 08               		dc.b $F8, 0, 0,	0, 8
00014FBA 0004 0001 00               		dc.b 0,	4, 0, 1, 0
00014FBF 0800 1000 08               		dc.b 8,	0, $10,	0, 8
00014FC4 03                         byte_1448C:	dc.b 3
00014FC5 F00D 0003 F0               		dc.b $F0, $D, 0, 3, $F0
00014FCA 000C 000B F0               		dc.b 0,	$C, 0, $B, $F0
00014FCF 080D 1003 F0               		dc.b 8,	$D, $10, 3, $F0
00014FD4 05                         byte_1449C:	dc.b 5
00014FD5 E40E 000F F4               		dc.b $E4, $E, 0, $F, $F4
00014FDA EC02 001B EC               		dc.b $EC, 2, 0,	$1B, $EC
00014FDF FC0C 001E F4               		dc.b $FC, $C, 0, $1E, $F4
00014FE4 040E 100F F4               		dc.b 4,	$E, $10, $F, $F4
00014FE9 0401 101B EC               		dc.b 4,	1, $10,	$1B, $EC
00014FEE 09                         byte_144B6:	dc.b 9
00014FEF F008 0022 F8               		dc.b $F0, 8, 0,	$22, $F8
00014FF4 F80E 0025 F0               		dc.b $F8, $E, 0, $25, $F0
00014FF9 1008 0031 F0               		dc.b $10, 8, 0,	$31, $F0
00014FFE 0005 0034 10               		dc.b 0,	5, 0, $34, $10
00015003 F800 0825 10               		dc.b $F8, 0, 8,	$25, $10
00015008 F000 1836 18               		dc.b $F0, 0, $18, $36, $18
0001500D F800 1825 20               		dc.b $F8, 0, $18, $25, $20
00015012 0000 0825 28               		dc.b 0,	0, 8, $25, $28
00015017 F800 0025 30               		dc.b $F8, 0, 0,	$25, $30
0001501C 12                         byte_144E4:	dc.b $12
0001501D 0000 1825 F0               		dc.b 0,	0, $18,	$25, $F0
00015022 F804 0038 F8               		dc.b $F8, 4, 0,	$38, $F8
00015027 F000 0026 08               		dc.b $F0, 0, 0,	$26, 8
0001502C 0000 0025 00               		dc.b 0,	0, 0, $25, 0
00015031 0800 1825 F8               		dc.b 8,	0, $18,	$25, $F8
00015036 1000 1026 00               		dc.b $10, 0, $10, $26, 0
0001503B 0800 1038 08               		dc.b 8,	0, $10,	$38, 8
00015040 F800 0029 10               		dc.b $F8, 0, 0,	$29, $10
00015045 0000 0026 10               		dc.b 0,	0, 0, $26, $10
0001504A 0000 002D 18               		dc.b 0,	0, 0, $2D, $18
0001504F 0800 0826 18               		dc.b 8,	0, 8, $26, $18
00015054 0800 0029 20               		dc.b 8,	0, 0, $29, $20
00015059 F800 0026 20               		dc.b $F8, 0, 0,	$26, $20
0001505E F800 002D 28               		dc.b $F8, 0, 0,	$2D, $28
00015063 0000 003A 28               		dc.b 0,	0, 0, $3A, $28
00015068 F800 1826 30               		dc.b $F8, 0, $18, $26, $30
0001506D 0000 1025 38               		dc.b 0,	0, $10,	$25, $38
00015072 F800 1025 40               		dc.b $F8, 0, $10, $25, $40
00015077 11                         byte_1453F:	dc.b $11
00015078 F800 0825 00               		dc.b $F8, 0, 8,	$25, 0
0001507D F000 0038 10               		dc.b $F0, 0, 0,	$38, $10
00015082 1000 0825 00               		dc.b $10, 0, 8,	$25, 0
00015087 0000 1825 10               		dc.b 0,	0, $18,	$25, $10
0001508C 0800 1025 18               		dc.b 8,	0, $10,	$25, $18
00015091 F800 1825 20               		dc.b $F8, 0, $18, $25, $20
00015096 0000 1026 28               		dc.b 0,	0, $10,	$26, $28
0001509B F800 1025 30               		dc.b $F8, 0, $10, $25, $30
000150A0 0000 0025 30               		dc.b 0,	0, 0, $25, $30
000150A5 0800 0825 30               		dc.b 8,	0, 8, $25, $30
000150AA 0000 0826 38               		dc.b 0,	0, 8, $26, $38
000150AF 0800 0029 38               		dc.b 8,	0, 0, $29, $38
000150B4 F800 0826 40               		dc.b $F8, 0, 8,	$26, $40
000150B9 0000 002D 40               		dc.b 0,	0, 0, $2D, $40
000150BE F800 0825 48               		dc.b $F8, 0, 8,	$25, $48
000150C3 0000 0025 48               		dc.b 0,	0, 0, $25, $48
000150C8 0000 1025 50               		dc.b 0,	0, $10,	$25, $50
000150CD 09                         byte_14595:	dc.b 9
000150CE FC00 0826 30               		dc.b $FC, 0, 8,	$26, $30
000150D3 0400 0825 28               		dc.b 4,	0, 8, $25, $28
000150D8 0400 1027 38               		dc.b 4,	0, $10,	$27, $38
000150DD 0400 0826 40               		dc.b 4,	0, 8, $26, $40
000150E2 FC00 1025 40               		dc.b $FC, 0, $10, $25, $40
000150E7 FC00 1026 48               		dc.b $FC, 0, $10, $26, $48
000150EC 0C00 0827 48               		dc.b $C, 0, 8, $27, $48
000150F1 0400 1826 50               		dc.b 4,	0, $18,	$26, $50
000150F6 04                         		dc.b 4
000150F7 0008 2758 00               byte_145BF:	dc.b 0,	8, $27,	$58, 0
000150FC                            		even
000150FC                            		even
000150FC                            
000150FC                            Ani_obj08:
000150FC                            	include "_anim\obj08.asm"
000150FC                            ; ---------------------------------------------------------------------------
000150FC                            ; Animation script - water splash (LZ)
000150FC                            ; ---------------------------------------------------------------------------
000150FC 0000                       		dc.w byte_145C6-Ani_obj08
000150FE 0400 0102 FC00             byte_145C6:	dc.b 4,	0, 1, 2, $FC, 0
00015104                            		even
00015104                            		even
00015104                            
00015104                            ; ---------------------------------------------------------------------------
00015104                            ; Sprite mappings - water splash (LZ)
00015104                            ; ---------------------------------------------------------------------------
00015104                            Map_obj08:
00015104                            	include "_maps\obj08.asm"
00015104                            ; ---------------------------------------------------------------------------
00015104                            ; Sprite mappings - water splash (LZ)
00015104                            ; ---------------------------------------------------------------------------
00015104 0000                       		dc.w byte_145D2-Map_obj08
00015106 0000                       		dc.w byte_145DD-Map_obj08
00015108 0000                       		dc.w byte_145E8-Map_obj08
0001510A 02                         byte_145D2:	dc.b 2
0001510B F204 006D F8               		dc.b $F2, 4, 0,	$6D, $F8
00015110 FA0C 006F F0               		dc.b $FA, $C, 0, $6F, $F0
00015115 02                         byte_145DD:	dc.b 2
00015116 E200 0073 F8               		dc.b $E2, 0, 0,	$73, $F8
0001511B EA0E 0074 F0               		dc.b $EA, $E, 0, $74, $F0
00015120 01                         byte_145E8:	dc.b 1
00015121 E20F 0080 F0               		dc.b $E2, $F, 0, $80, $F0
00015126                            		even
00015126                            		even
00015126                            
00015126                            ; ---------------------------------------------------------------------------
00015126                            ; Subroutine to	change Sonic's angle & position as he walks along the floor
00015126                            ; ---------------------------------------------------------------------------
00015126                            
00015126                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015126                            
00015126                            
00015126                            Sonic_AnglePos:				; XREF: Obj01_MdNormal; Obj01_MdRoll
00015126 0828 0003 0022             		btst	#3,$22(a0)
0001512C 6700                       		beq.s	loc_14602
0001512E 7000                       		moveq	#0,d0
00015130 11C0 F768                  		move.b	d0,($FFFFF768).w
00015134 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00015138 4E75                       		rts	
0001513A                            ; ===========================================================================
0001513A                            
0001513A                            loc_14602:
0001513A 7003                       		moveq	#3,d0
0001513C 11C0 F768                  		move.b	d0,($FFFFF768).w
00015140 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00015144 1028 0026                  		move.b	$26(a0),d0
00015148 0600 0020                  		addi.b	#$20,d0
0001514C 6A00                       		bpl.s	loc_14624
0001514E 1028 0026                  		move.b	$26(a0),d0
00015152 6A00                       		bpl.s	loc_1461E
00015154 5300                       		subq.b	#1,d0
00015156                            
00015156                            loc_1461E:
00015156 0600 0020                  		addi.b	#$20,d0
0001515A 6000                       		bra.s	loc_14630
0001515C                            ; ===========================================================================
0001515C                            
0001515C                            loc_14624:
0001515C 1028 0026                  		move.b	$26(a0),d0
00015160 6A00                       		bpl.s	loc_1462C
00015162 5200                       		addq.b	#1,d0
00015164                            
00015164                            loc_1462C:
00015164 0600 001F                  		addi.b	#$1F,d0
00015168                            
00015168                            loc_14630:
00015168 0200 00C0                  		andi.b	#$C0,d0
0001516C 0C00 0040                  		cmpi.b	#$40,d0
00015170 6700 0000                  		beq.w	Sonic_WalkVertL
00015174 0C00 0080                  		cmpi.b	#$80,d0
00015178 6700 0000                  		beq.w	Sonic_WalkCeiling
0001517C 0C00 00C0                  		cmpi.b	#$C0,d0
00015180 6700 0000                  		beq.w	Sonic_WalkVertR
00015184 3428 000C                  		move.w	$C(a0),d2
00015188 3628 0008                  		move.w	8(a0),d3
0001518C 7000                       		moveq	#0,d0
0001518E 1028 0016                  		move.b	$16(a0),d0
00015192 4880                       		ext.w	d0
00015194 D440                       		add.w	d0,d2
00015196 1028 0017                  		move.b	$17(a0),d0
0001519A 4880                       		ext.w	d0
0001519C D640                       		add.w	d0,d3
0001519E 49F8 F768                  		lea	($FFFFF768).w,a4
000151A2 367C 0010                  		movea.w	#$10,a3
000151A6 3C3C 0000                  		move.w	#0,d6
000151AA 7A0D                       		moveq	#$D,d5
000151AC 6100 0000                  		bsr.w	FindFloor
000151B0 3F01                       		move.w	d1,-(sp)
000151B2 3428 000C                  		move.w	$C(a0),d2
000151B6 3628 0008                  		move.w	8(a0),d3
000151BA 7000                       		moveq	#0,d0
000151BC 1028 0016                  		move.b	$16(a0),d0
000151C0 4880                       		ext.w	d0
000151C2 D440                       		add.w	d0,d2
000151C4 1028 0017                  		move.b	$17(a0),d0
000151C8 4880                       		ext.w	d0
000151CA 4440                       		neg.w	d0
000151CC D640                       		add.w	d0,d3
000151CE 49F8 F76A                  		lea	($FFFFF76A).w,a4
000151D2 367C 0010                  		movea.w	#$10,a3
000151D6 3C3C 0000                  		move.w	#0,d6
000151DA 7A0D                       		moveq	#$D,d5
000151DC 6100 0000                  		bsr.w	FindFloor
000151E0 301F                       		move.w	(sp)+,d0
000151E2 6100 0000                  		bsr.w	Sonic_Angle
000151E6 4A41                       		tst.w	d1
000151E8 6700                       		beq.s	locret_146BE
000151EA 6A00                       		bpl.s	loc_146C0
000151EC 0C41 FFF2                  		cmpi.w	#-$E,d1
000151F0 6D00                       		blt.s	locret_146E6
000151F2 D368 000C                  		add.w	d1,$C(a0)
000151F6                            
000151F6                            locret_146BE:
000151F6 4E75                       		rts	
000151F8                            ; ===========================================================================
000151F8                            
000151F8                            loc_146C0:
000151F8 0C41 000E                  		cmpi.w	#$E,d1
000151FC 6E00                       		bgt.s	loc_146CC
000151FE                            
000151FE                            loc_146C6:
000151FE D368 000C                  		add.w	d1,$C(a0)
00015202 4E75                       		rts	
00015204                            ; ===========================================================================
00015204                            
00015204                            loc_146CC:
00015204 4A28 0038                  		tst.b	$38(a0)
00015208 66F4                       		bne.s	loc_146C6
0001520A 08E8 0001 0022             		bset	#1,$22(a0)
00015210 08A8 0005 0022             		bclr	#5,$22(a0)
00015216 117C 0001 001D             		move.b	#1,$1D(a0)
0001521C 4E75                       		rts	
0001521E                            ; ===========================================================================
0001521E                            
0001521E                            locret_146E6:
0001521E 4E75                       		rts	
00015220                            ; End of function Sonic_AnglePos
00015220                            
00015220                            ; ===========================================================================
00015220 2428 0008                  		move.l	8(a0),d2
00015224 3028 0010                  		move.w	$10(a0),d0
00015228 48C0                       		ext.l	d0
0001522A E180                       		asl.l	#8,d0
0001522C 9480                       		sub.l	d0,d2
0001522E 2142 0008                  		move.l	d2,8(a0)
00015232 303C 0038                  		move.w	#$38,d0
00015236 48C0                       		ext.l	d0
00015238 E180                       		asl.l	#8,d0
0001523A 9680                       		sub.l	d0,d3
0001523C 2143 000C                  		move.l	d3,$C(a0)
00015240 4E75                       		rts	
00015242                            ; ===========================================================================
00015242                            
00015242                            locret_1470A:
00015242 4E75                       		rts	
00015244                            ; ===========================================================================
00015244 2628 000C                  		move.l	$C(a0),d3
00015248 3028 0012                  		move.w	$12(a0),d0
0001524C 0440 0038                  		subi.w	#$38,d0
00015250 3140 0012                  		move.w	d0,$12(a0)
00015254 48C0                       		ext.l	d0
00015256 E180                       		asl.l	#8,d0
00015258 9680                       		sub.l	d0,d3
0001525A 2143 000C                  		move.l	d3,$C(a0)
0001525E 4E75                       		rts	
00015260 4E75                       		rts	
00015262                            ; ===========================================================================
00015262 2428 0008                  		move.l	8(a0),d2
00015266 2628 000C                  		move.l	$C(a0),d3
0001526A 3028 0010                  		move.w	$10(a0),d0
0001526E 48C0                       		ext.l	d0
00015270 E180                       		asl.l	#8,d0
00015272 9480                       		sub.l	d0,d2
00015274 3028 0012                  		move.w	$12(a0),d0
00015278 48C0                       		ext.l	d0
0001527A E180                       		asl.l	#8,d0
0001527C 9680                       		sub.l	d0,d3
0001527E 2142 0008                  		move.l	d2,8(a0)
00015282 2143 000C                  		move.l	d3,$C(a0)
00015286 4E75                       		rts	
00015288                            
00015288                            ; ---------------------------------------------------------------------------
00015288                            ; Subroutine to	change Sonic's angle as he walks along the floor
00015288                            ; ---------------------------------------------------------------------------
00015288                            
00015288                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015288                            
00015288                            
00015288                            Sonic_Angle:				; XREF: Sonic_AnglePos; et al
00015288 1438 F76A                  		move.b	($FFFFF76A).w,d2
0001528C B240                       		cmp.w	d0,d1
0001528E 6F00                       		ble.s	loc_1475E
00015290 1438 F768                  		move.b	($FFFFF768).w,d2
00015294 3200                       		move.w	d0,d1
00015296                            
00015296                            loc_1475E:
00015296 0802 0000                  		btst	#0,d2
0001529A 6600                       		bne.s	loc_1476A
0001529C 1142 0026                  		move.b	d2,$26(a0)
000152A0 4E75                       		rts	
000152A2                            ; ===========================================================================
000152A2                            
000152A2                            loc_1476A:
000152A2 1428 0026                  		move.b	$26(a0),d2
000152A6 0602 0020                  		addi.b	#$20,d2
000152AA 0202 00C0                  		andi.b	#$C0,d2
000152AE 1142 0026                  		move.b	d2,$26(a0)
000152B2 4E75                       		rts	
000152B4                            ; End of function Sonic_Angle
000152B4                            
000152B4                            ; ---------------------------------------------------------------------------
000152B4                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his right
000152B4                            ; ---------------------------------------------------------------------------
000152B4                            
000152B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000152B4                            
000152B4                            
000152B4                            Sonic_WalkVertR:			; XREF: Sonic_AnglePos
000152B4 3428 000C                  		move.w	$C(a0),d2
000152B8 3628 0008                  		move.w	8(a0),d3
000152BC 7000                       		moveq	#0,d0
000152BE 1028 0017                  		move.b	$17(a0),d0
000152C2 4880                       		ext.w	d0
000152C4 4440                       		neg.w	d0
000152C6 D440                       		add.w	d0,d2
000152C8 1028 0016                  		move.b	$16(a0),d0
000152CC 4880                       		ext.w	d0
000152CE D640                       		add.w	d0,d3
000152D0 49F8 F768                  		lea	($FFFFF768).w,a4
000152D4 367C 0010                  		movea.w	#$10,a3
000152D8 3C3C 0000                  		move.w	#0,d6
000152DC 7A0D                       		moveq	#$D,d5
000152DE 6100 0000                  		bsr.w	FindWall
000152E2 3F01                       		move.w	d1,-(sp)
000152E4 3428 000C                  		move.w	$C(a0),d2
000152E8 3628 0008                  		move.w	8(a0),d3
000152EC 7000                       		moveq	#0,d0
000152EE 1028 0017                  		move.b	$17(a0),d0
000152F2 4880                       		ext.w	d0
000152F4 D440                       		add.w	d0,d2
000152F6 1028 0016                  		move.b	$16(a0),d0
000152FA 4880                       		ext.w	d0
000152FC D640                       		add.w	d0,d3
000152FE 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015302 367C 0010                  		movea.w	#$10,a3
00015306 3C3C 0000                  		move.w	#0,d6
0001530A 7A0D                       		moveq	#$D,d5
0001530C 6100 0000                  		bsr.w	FindWall
00015310 301F                       		move.w	(sp)+,d0
00015312 6100 FF74                  		bsr.w	Sonic_Angle
00015316 4A41                       		tst.w	d1
00015318 6700                       		beq.s	locret_147F0
0001531A 6A00                       		bpl.s	loc_147F2
0001531C 0C41 FFF2                  		cmpi.w	#-$E,d1
00015320 6D00 FF20                  		blt.w	locret_1470A
00015324 D368 0008                  		add.w	d1,8(a0)
00015328                            
00015328                            locret_147F0:
00015328 4E75                       		rts	
0001532A                            ; ===========================================================================
0001532A                            
0001532A                            loc_147F2:
0001532A 0C41 000E                  		cmpi.w	#$E,d1
0001532E 6E00                       		bgt.s	loc_147FE
00015330                            
00015330                            loc_147F8:
00015330 D368 0008                  		add.w	d1,8(a0)
00015334 4E75                       		rts	
00015336                            ; ===========================================================================
00015336                            
00015336                            loc_147FE:
00015336 4A28 0038                  		tst.b	$38(a0)
0001533A 66F4                       		bne.s	loc_147F8
0001533C 08E8 0001 0022             		bset	#1,$22(a0)
00015342 08A8 0005 0022             		bclr	#5,$22(a0)
00015348 117C 0001 001D             		move.b	#1,$1D(a0)
0001534E 4E75                       		rts	
00015350                            ; End of function Sonic_WalkVertR
00015350                            
00015350                            ; ---------------------------------------------------------------------------
00015350                            ; Subroutine allowing Sonic to walk upside-down
00015350                            ; ---------------------------------------------------------------------------
00015350                            
00015350                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015350                            
00015350                            
00015350                            Sonic_WalkCeiling:			; XREF: Sonic_AnglePos
00015350 3428 000C                  		move.w	$C(a0),d2
00015354 3628 0008                  		move.w	8(a0),d3
00015358 7000                       		moveq	#0,d0
0001535A 1028 0016                  		move.b	$16(a0),d0
0001535E 4880                       		ext.w	d0
00015360 9440                       		sub.w	d0,d2
00015362 0A42 000F                  		eori.w	#$F,d2
00015366 1028 0017                  		move.b	$17(a0),d0
0001536A 4880                       		ext.w	d0
0001536C D640                       		add.w	d0,d3
0001536E 49F8 F768                  		lea	($FFFFF768).w,a4
00015372 367C FFF0                  		movea.w	#-$10,a3
00015376 3C3C 1000                  		move.w	#$1000,d6
0001537A 7A0D                       		moveq	#$D,d5
0001537C 6100 0000                  		bsr.w	FindFloor
00015380 3F01                       		move.w	d1,-(sp)
00015382 3428 000C                  		move.w	$C(a0),d2
00015386 3628 0008                  		move.w	8(a0),d3
0001538A 7000                       		moveq	#0,d0
0001538C 1028 0016                  		move.b	$16(a0),d0
00015390 4880                       		ext.w	d0
00015392 9440                       		sub.w	d0,d2
00015394 0A42 000F                  		eori.w	#$F,d2
00015398 1028 0017                  		move.b	$17(a0),d0
0001539C 4880                       		ext.w	d0
0001539E 9640                       		sub.w	d0,d3
000153A0 49F8 F76A                  		lea	($FFFFF76A).w,a4
000153A4 367C FFF0                  		movea.w	#-$10,a3
000153A8 3C3C 1000                  		move.w	#$1000,d6
000153AC 7A0D                       		moveq	#$D,d5
000153AE 6100 0000                  		bsr.w	FindFloor
000153B2 301F                       		move.w	(sp)+,d0
000153B4 6100 FED2                  		bsr.w	Sonic_Angle
000153B8 4A41                       		tst.w	d1
000153BA 6700                       		beq.s	locret_14892
000153BC 6A00                       		bpl.s	loc_14894
000153BE 0C41 FFF2                  		cmpi.w	#-$E,d1
000153C2 6D00 FE5A                  		blt.w	locret_146E6
000153C6 9368 000C                  		sub.w	d1,$C(a0)
000153CA                            
000153CA                            locret_14892:
000153CA 4E75                       		rts	
000153CC                            ; ===========================================================================
000153CC                            
000153CC                            loc_14894:
000153CC 0C41 000E                  		cmpi.w	#$E,d1
000153D0 6E00                       		bgt.s	loc_148A0
000153D2                            
000153D2                            loc_1489A:
000153D2 9368 000C                  		sub.w	d1,$C(a0)
000153D6 4E75                       		rts	
000153D8                            ; ===========================================================================
000153D8                            
000153D8                            loc_148A0:
000153D8 4A28 0038                  		tst.b	$38(a0)
000153DC 66F4                       		bne.s	loc_1489A
000153DE 08E8 0001 0022             		bset	#1,$22(a0)
000153E4 08A8 0005 0022             		bclr	#5,$22(a0)
000153EA 117C 0001 001D             		move.b	#1,$1D(a0)
000153F0 4E75                       		rts	
000153F2                            ; End of function Sonic_WalkCeiling
000153F2                            
000153F2                            ; ---------------------------------------------------------------------------
000153F2                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his left
000153F2                            ; ---------------------------------------------------------------------------
000153F2                            
000153F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000153F2                            
000153F2                            
000153F2                            Sonic_WalkVertL:			; XREF: Sonic_AnglePos
000153F2 3428 000C                  		move.w	$C(a0),d2
000153F6 3628 0008                  		move.w	8(a0),d3
000153FA 7000                       		moveq	#0,d0
000153FC 1028 0017                  		move.b	$17(a0),d0
00015400 4880                       		ext.w	d0
00015402 9440                       		sub.w	d0,d2
00015404 1028 0016                  		move.b	$16(a0),d0
00015408 4880                       		ext.w	d0
0001540A 9640                       		sub.w	d0,d3
0001540C 0A43 000F                  		eori.w	#$F,d3
00015410 49F8 F768                  		lea	($FFFFF768).w,a4
00015414 367C FFF0                  		movea.w	#-$10,a3
00015418 3C3C 0800                  		move.w	#$800,d6
0001541C 7A0D                       		moveq	#$D,d5
0001541E 6100 0000                  		bsr.w	FindWall
00015422 3F01                       		move.w	d1,-(sp)
00015424 3428 000C                  		move.w	$C(a0),d2
00015428 3628 0008                  		move.w	8(a0),d3
0001542C 7000                       		moveq	#0,d0
0001542E 1028 0017                  		move.b	$17(a0),d0
00015432 4880                       		ext.w	d0
00015434 D440                       		add.w	d0,d2
00015436 1028 0016                  		move.b	$16(a0),d0
0001543A 4880                       		ext.w	d0
0001543C 9640                       		sub.w	d0,d3
0001543E 0A43 000F                  		eori.w	#$F,d3
00015442 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015446 367C FFF0                  		movea.w	#-$10,a3
0001544A 3C3C 0800                  		move.w	#$800,d6
0001544E 7A0D                       		moveq	#$D,d5
00015450 6100 0000                  		bsr.w	FindWall
00015454 301F                       		move.w	(sp)+,d0
00015456 6100 FE30                  		bsr.w	Sonic_Angle
0001545A 4A41                       		tst.w	d1
0001545C 6700                       		beq.s	locret_14934
0001545E 6A00                       		bpl.s	loc_14936
00015460 0C41 FFF2                  		cmpi.w	#-$E,d1
00015464 6D00 FDDC                  		blt.w	locret_1470A
00015468 9368 0008                  		sub.w	d1,8(a0)
0001546C                            
0001546C                            locret_14934:
0001546C 4E75                       		rts	
0001546E                            ; ===========================================================================
0001546E                            
0001546E                            loc_14936:
0001546E 0C41 000E                  		cmpi.w	#$E,d1
00015472 6E00                       		bgt.s	loc_14942
00015474                            
00015474                            loc_1493C:
00015474 9368 0008                  		sub.w	d1,8(a0)
00015478 4E75                       		rts	
0001547A                            ; ===========================================================================
0001547A                            
0001547A                            loc_14942:
0001547A 4A28 0038                  		tst.b	$38(a0)
0001547E 66F4                       		bne.s	loc_1493C
00015480 08E8 0001 0022             		bset	#1,$22(a0)
00015486 08A8 0005 0022             		bclr	#5,$22(a0)
0001548C 117C 0001 001D             		move.b	#1,$1D(a0)
00015492 4E75                       		rts	
00015494                            ; End of function Sonic_WalkVertL
00015494                            
00015494                            ; ---------------------------------------------------------------------------
00015494                            ; Subroutine to	find which tile	the object is standing on
00015494                            ; ---------------------------------------------------------------------------
00015494                            
00015494                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015494                            
00015494                            
00015494                            Floor_ChkTile:				; XREF: FindFloor; et al
00015494 3002                       		move.w	d2,d0
00015496 E248                       		lsr.w	#1,d0
00015498 0240 0380                  		andi.w	#$380,d0
0001549C 3203                       		move.w	d3,d1
0001549E E049                       		lsr.w	#8,d1
000154A0 0241 007F                  		andi.w	#$7F,d1
000154A4 D041                       		add.w	d1,d0
000154A6 72FF                       		moveq	#-1,d1
000154A8 43F8 A400                  		lea	($FFFFA400).w,a1
000154AC 1231 0000                  		move.b	(a1,d0.w),d1
000154B0 6700                       		beq.s	loc_14996
000154B2 6B00                       		bmi.s	loc_1499A
000154B4 5301                       		subq.b	#1,d1
000154B6 4881                       		ext.w	d1
000154B8 EE59                       		ror.w	#7,d1
000154BA 3002                       		move.w	d2,d0
000154BC D040                       		add.w	d0,d0
000154BE 0240 01E0                  		andi.w	#$1E0,d0
000154C2 D240                       		add.w	d0,d1
000154C4 3003                       		move.w	d3,d0
000154C6 E648                       		lsr.w	#3,d0
000154C8 0240 001E                  		andi.w	#$1E,d0
000154CC D240                       		add.w	d0,d1
000154CE                            
000154CE                            loc_14996:
000154CE 2241                       		movea.l	d1,a1
000154D0 4E75                       		rts	
000154D2                            ; ===========================================================================
000154D2                            
000154D2                            loc_1499A:
000154D2 0241 007F                  		andi.w	#$7F,d1
000154D6 0828 0006 0001             		btst	#6,1(a0)
000154DC 6700                       		beq.s	loc_149B2
000154DE 5241                       		addq.w	#1,d1
000154E0 0C41 0029                  		cmpi.w	#$29,d1
000154E4 6600                       		bne.s	loc_149B2
000154E6 323C 0051                  		move.w	#$51,d1
000154EA                            
000154EA                            loc_149B2:
000154EA 5301                       		subq.b	#1,d1
000154EC EE59                       		ror.w	#7,d1
000154EE 3002                       		move.w	d2,d0
000154F0 D040                       		add.w	d0,d0
000154F2 0240 01E0                  		andi.w	#$1E0,d0
000154F6 D240                       		add.w	d0,d1
000154F8 3003                       		move.w	d3,d0
000154FA E648                       		lsr.w	#3,d0
000154FC 0240 001E                  		andi.w	#$1E,d0
00015500 D240                       		add.w	d0,d1
00015502 2241                       		movea.l	d1,a1
00015504 4E75                       		rts	
00015506                            ; End of function Floor_ChkTile
00015506                            
00015506                            
00015506                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015506                            
00015506                            
00015506                            FindFloor:				; XREF: Sonic_AnglePos; et al
00015506 618C                       		bsr.s	Floor_ChkTile
00015508 3011                       		move.w	(a1),d0
0001550A 3800                       		move.w	d0,d4
0001550C 0240 07FF                  		andi.w	#$7FF,d0
00015510 6700                       		beq.s	loc_149DE
00015512 0B04                       		btst	d5,d4
00015514 6600                       		bne.s	loc_149EC
00015516                            
00015516                            loc_149DE:
00015516 D44B                       		add.w	a3,d2
00015518 6100 0000                  		bsr.w	FindFloor2
0001551C 944B                       		sub.w	a3,d2
0001551E 0641 0010                  		addi.w	#$10,d1
00015522 4E75                       		rts	
00015524                            ; ===========================================================================
00015524                            
00015524                            loc_149EC:
00015524 2478 F796                  		movea.l	($FFFFF796).w,a2 ; load	collision index
00015528 1032 0000                  		move.b	(a2,d0.w),d0
0001552C 0240 00FF                  		andi.w	#$FF,d0
00015530 67E4                       		beq.s	loc_149DE
00015532 45F9 0000 0000             		lea	(AngleMap).l,a2
00015538 18B2 0000                  		move.b	(a2,d0.w),(a4)
0001553C E948                       		lsl.w	#4,d0
0001553E 3203                       		move.w	d3,d1
00015540 0804 000B                  		btst	#$B,d4
00015544 6700                       		beq.s	loc_14A12
00015546 4641                       		not.w	d1
00015548 4414                       		neg.b	(a4)
0001554A                            
0001554A                            loc_14A12:
0001554A 0804 000C                  		btst	#$C,d4
0001554E 6700                       		beq.s	loc_14A22
00015550 0614 0040                  		addi.b	#$40,(a4)
00015554 4414                       		neg.b	(a4)
00015556 0414 0040                  		subi.b	#$40,(a4)
0001555A                            
0001555A                            loc_14A22:
0001555A 0241 000F                  		andi.w	#$F,d1
0001555E D240                       		add.w	d0,d1
00015560 45F9 0000 0000             		lea	(CollArray1).l,a2
00015566 1032 1000                  		move.b	(a2,d1.w),d0
0001556A 4880                       		ext.w	d0
0001556C BD44                       		eor.w	d6,d4
0001556E 0804 000C                  		btst	#$C,d4
00015572 6700                       		beq.s	loc_14A3E
00015574 4440                       		neg.w	d0
00015576                            
00015576                            loc_14A3E:
00015576 4A40                       		tst.w	d0
00015578 679C                       		beq.s	loc_149DE
0001557A 6B00                       		bmi.s	loc_14A5A
0001557C 0C00 0010                  		cmpi.b	#$10,d0
00015580 6700                       		beq.s	loc_14A66
00015582 3202                       		move.w	d2,d1
00015584 0241 000F                  		andi.w	#$F,d1
00015588 D041                       		add.w	d1,d0
0001558A 323C 000F                  		move.w	#$F,d1
0001558E 9240                       		sub.w	d0,d1
00015590 4E75                       		rts	
00015592                            ; ===========================================================================
00015592                            
00015592                            loc_14A5A:
00015592 3202                       		move.w	d2,d1
00015594 0241 000F                  		andi.w	#$F,d1
00015598 D041                       		add.w	d1,d0
0001559A 6A00 FF7A                  		bpl.w	loc_149DE
0001559E                            
0001559E                            loc_14A66:
0001559E 944B                       		sub.w	a3,d2
000155A0 6100 0000                  		bsr.w	FindFloor2
000155A4 D44B                       		add.w	a3,d2
000155A6 0441 0010                  		subi.w	#$10,d1
000155AA 4E75                       		rts	
000155AC                            ; End of function FindFloor
000155AC                            
000155AC                            
000155AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000155AC                            
000155AC                            
000155AC                            FindFloor2:				; XREF: FindFloor
000155AC 6100 FEE6                  		bsr.w	Floor_ChkTile
000155B0 3011                       		move.w	(a1),d0
000155B2 3800                       		move.w	d0,d4
000155B4 0240 07FF                  		andi.w	#$7FF,d0
000155B8 6700                       		beq.s	loc_14A86
000155BA 0B04                       		btst	d5,d4
000155BC 6600                       		bne.s	loc_14A94
000155BE                            
000155BE                            loc_14A86:
000155BE 323C 000F                  		move.w	#$F,d1
000155C2 3002                       		move.w	d2,d0
000155C4 0240 000F                  		andi.w	#$F,d0
000155C8 9240                       		sub.w	d0,d1
000155CA 4E75                       		rts	
000155CC                            ; ===========================================================================
000155CC                            
000155CC                            loc_14A94:
000155CC 2478 F796                  		movea.l	($FFFFF796).w,a2
000155D0 1032 0000                  		move.b	(a2,d0.w),d0
000155D4 0240 00FF                  		andi.w	#$FF,d0
000155D8 67E4                       		beq.s	loc_14A86
000155DA 45F9 0000 0000             		lea	(AngleMap).l,a2
000155E0 18B2 0000                  		move.b	(a2,d0.w),(a4)
000155E4 E948                       		lsl.w	#4,d0
000155E6 3203                       		move.w	d3,d1
000155E8 0804 000B                  		btst	#$B,d4
000155EC 6700                       		beq.s	loc_14ABA
000155EE 4641                       		not.w	d1
000155F0 4414                       		neg.b	(a4)
000155F2                            
000155F2                            loc_14ABA:
000155F2 0804 000C                  		btst	#$C,d4
000155F6 6700                       		beq.s	loc_14ACA
000155F8 0614 0040                  		addi.b	#$40,(a4)
000155FC 4414                       		neg.b	(a4)
000155FE 0414 0040                  		subi.b	#$40,(a4)
00015602                            
00015602                            loc_14ACA:
00015602 0241 000F                  		andi.w	#$F,d1
00015606 D240                       		add.w	d0,d1
00015608 45F9 0000 0000             		lea	(CollArray1).l,a2
0001560E 1032 1000                  		move.b	(a2,d1.w),d0
00015612 4880                       		ext.w	d0
00015614 BD44                       		eor.w	d6,d4
00015616 0804 000C                  		btst	#$C,d4
0001561A 6700                       		beq.s	loc_14AE6
0001561C 4440                       		neg.w	d0
0001561E                            
0001561E                            loc_14AE6:
0001561E 4A40                       		tst.w	d0
00015620 679C                       		beq.s	loc_14A86
00015622 6B00                       		bmi.s	loc_14AFC
00015624 3202                       		move.w	d2,d1
00015626 0241 000F                  		andi.w	#$F,d1
0001562A D041                       		add.w	d1,d0
0001562C 323C 000F                  		move.w	#$F,d1
00015630 9240                       		sub.w	d0,d1
00015632 4E75                       		rts	
00015634                            ; ===========================================================================
00015634                            
00015634                            loc_14AFC:
00015634 3202                       		move.w	d2,d1
00015636 0241 000F                  		andi.w	#$F,d1
0001563A D041                       		add.w	d1,d0
0001563C 6A00 FF80                  		bpl.w	loc_14A86
00015640 4641                       		not.w	d1
00015642 4E75                       		rts	
00015644                            ; End of function FindFloor2
00015644                            
00015644                            
00015644                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015644                            
00015644                            
00015644                            FindWall:				; XREF: Sonic_WalkVertR; et al
00015644 6100 FE4E                  		bsr.w	Floor_ChkTile
00015648 3011                       		move.w	(a1),d0
0001564A 3800                       		move.w	d0,d4
0001564C 0240 07FF                  		andi.w	#$7FF,d0
00015650 6700                       		beq.s	loc_14B1E
00015652 0B04                       		btst	d5,d4
00015654 6600                       		bne.s	loc_14B2C
00015656                            
00015656                            loc_14B1E:
00015656 D64B                       		add.w	a3,d3
00015658 6100 0000                  		bsr.w	FindWall2
0001565C 964B                       		sub.w	a3,d3
0001565E 0641 0010                  		addi.w	#$10,d1
00015662 4E75                       		rts	
00015664                            ; ===========================================================================
00015664                            
00015664                            loc_14B2C:
00015664 2478 F796                  		movea.l	($FFFFF796).w,a2
00015668 1032 0000                  		move.b	(a2,d0.w),d0
0001566C 0240 00FF                  		andi.w	#$FF,d0
00015670 67E4                       		beq.s	loc_14B1E
00015672 45F9 0000 0000             		lea	(AngleMap).l,a2
00015678 18B2 0000                  		move.b	(a2,d0.w),(a4)
0001567C E948                       		lsl.w	#4,d0
0001567E 3202                       		move.w	d2,d1
00015680 0804 000C                  		btst	#$C,d4
00015684 6700                       		beq.s	loc_14B5A
00015686 4641                       		not.w	d1
00015688 0614 0040                  		addi.b	#$40,(a4)
0001568C 4414                       		neg.b	(a4)
0001568E 0414 0040                  		subi.b	#$40,(a4)
00015692                            
00015692                            loc_14B5A:
00015692 0804 000B                  		btst	#$B,d4
00015696 6700                       		beq.s	loc_14B62
00015698 4414                       		neg.b	(a4)
0001569A                            
0001569A                            loc_14B62:
0001569A 0241 000F                  		andi.w	#$F,d1
0001569E D240                       		add.w	d0,d1
000156A0 45F9 0000 0000             		lea	(CollArray2).l,a2
000156A6 1032 1000                  		move.b	(a2,d1.w),d0
000156AA 4880                       		ext.w	d0
000156AC BD44                       		eor.w	d6,d4
000156AE 0804 000B                  		btst	#$B,d4
000156B2 6700                       		beq.s	loc_14B7E
000156B4 4440                       		neg.w	d0
000156B6                            
000156B6                            loc_14B7E:
000156B6 4A40                       		tst.w	d0
000156B8 679C                       		beq.s	loc_14B1E
000156BA 6B00                       		bmi.s	loc_14B9A
000156BC 0C00 0010                  		cmpi.b	#$10,d0
000156C0 6700                       		beq.s	loc_14BA6
000156C2 3203                       		move.w	d3,d1
000156C4 0241 000F                  		andi.w	#$F,d1
000156C8 D041                       		add.w	d1,d0
000156CA 323C 000F                  		move.w	#$F,d1
000156CE 9240                       		sub.w	d0,d1
000156D0 4E75                       		rts	
000156D2                            ; ===========================================================================
000156D2                            
000156D2                            loc_14B9A:
000156D2 3203                       		move.w	d3,d1
000156D4 0241 000F                  		andi.w	#$F,d1
000156D8 D041                       		add.w	d1,d0
000156DA 6A00 FF7A                  		bpl.w	loc_14B1E
000156DE                            
000156DE                            loc_14BA6:
000156DE 964B                       		sub.w	a3,d3
000156E0 6100 0000                  		bsr.w	FindWall2
000156E4 D64B                       		add.w	a3,d3
000156E6 0441 0010                  		subi.w	#$10,d1
000156EA 4E75                       		rts	
000156EC                            ; End of function FindWall
000156EC                            
000156EC                            
000156EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000156EC                            
000156EC                            
000156EC                            FindWall2:				; XREF: FindWall
000156EC 6100 FDA6                  		bsr.w	Floor_ChkTile
000156F0 3011                       		move.w	(a1),d0
000156F2 3800                       		move.w	d0,d4
000156F4 0240 07FF                  		andi.w	#$7FF,d0
000156F8 6700                       		beq.s	loc_14BC6
000156FA 0B04                       		btst	d5,d4
000156FC 6600                       		bne.s	loc_14BD4
000156FE                            
000156FE                            loc_14BC6:
000156FE 323C 000F                  		move.w	#$F,d1
00015702 3003                       		move.w	d3,d0
00015704 0240 000F                  		andi.w	#$F,d0
00015708 9240                       		sub.w	d0,d1
0001570A 4E75                       		rts	
0001570C                            ; ===========================================================================
0001570C                            
0001570C                            loc_14BD4:
0001570C 2478 F796                  		movea.l	($FFFFF796).w,a2
00015710 1032 0000                  		move.b	(a2,d0.w),d0
00015714 0240 00FF                  		andi.w	#$FF,d0
00015718 67E4                       		beq.s	loc_14BC6
0001571A 45F9 0000 0000             		lea	(AngleMap).l,a2
00015720 18B2 0000                  		move.b	(a2,d0.w),(a4)
00015724 E948                       		lsl.w	#4,d0
00015726 3202                       		move.w	d2,d1
00015728 0804 000C                  		btst	#$C,d4
0001572C 6700                       		beq.s	loc_14C02
0001572E 4641                       		not.w	d1
00015730 0614 0040                  		addi.b	#$40,(a4)
00015734 4414                       		neg.b	(a4)
00015736 0414 0040                  		subi.b	#$40,(a4)
0001573A                            
0001573A                            loc_14C02:
0001573A 0804 000B                  		btst	#$B,d4
0001573E 6700                       		beq.s	loc_14C0A
00015740 4414                       		neg.b	(a4)
00015742                            
00015742                            loc_14C0A:
00015742 0241 000F                  		andi.w	#$F,d1
00015746 D240                       		add.w	d0,d1
00015748 45F9 0000 0000             		lea	(CollArray2).l,a2
0001574E 1032 1000                  		move.b	(a2,d1.w),d0
00015752 4880                       		ext.w	d0
00015754 BD44                       		eor.w	d6,d4
00015756 0804 000B                  		btst	#$B,d4
0001575A 6700                       		beq.s	loc_14C26
0001575C 4440                       		neg.w	d0
0001575E                            
0001575E                            loc_14C26:
0001575E 4A40                       		tst.w	d0
00015760 679C                       		beq.s	loc_14BC6
00015762 6B00                       		bmi.s	loc_14C3C
00015764 3203                       		move.w	d3,d1
00015766 0241 000F                  		andi.w	#$F,d1
0001576A D041                       		add.w	d1,d0
0001576C 323C 000F                  		move.w	#$F,d1
00015770 9240                       		sub.w	d0,d1
00015772 4E75                       		rts	
00015774                            ; ===========================================================================
00015774                            
00015774                            loc_14C3C:
00015774 3203                       		move.w	d3,d1
00015776 0241 000F                  		andi.w	#$F,d1
0001577A D041                       		add.w	d1,d0
0001577C 6A00 FF80                  		bpl.w	loc_14BC6
00015780 4641                       		not.w	d1
00015782 4E75                       		rts	
00015784                            ; End of function FindWall2
00015784                            
00015784                            ; ---------------------------------------------------------------------------
00015784                            ; Unused floor/wall subroutine - logs something	to do with collision
00015784                            ; ---------------------------------------------------------------------------
00015784                            
00015784                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015784                            
00015784                            
00015784                            FloorLog_Unk:				; XREF: Level
00015784 4E75                       		rts	
00015786                            
00015786 43F9 0000 0000             		lea	(CollArray1).l,a1
0001578C 45F9 0000 0000             		lea	(CollArray1).l,a2
00015792 363C 00FF                  		move.w	#$FF,d3
00015796                            
00015796                            loc_14C5E:
00015796 7A10                       		moveq	#$10,d5
00015798 343C 000F                  		move.w	#$F,d2
0001579C                            
0001579C                            loc_14C64:
0001579C 7800                       		moveq	#0,d4
0001579E 323C 000F                  		move.w	#$F,d1
000157A2                            
000157A2                            loc_14C6A:
000157A2 3019                       		move.w	(a1)+,d0
000157A4 EAA8                       		lsr.l	d5,d0
000157A6 D944                       		addx.w	d4,d4
000157A8 51C9 FFF8                  		dbf	d1,loc_14C6A
000157AC                            
000157AC 34C4                       		move.w	d4,(a2)+
000157AE 92FC 0020                  		suba.w	#$20,a1
000157B2 5345                       		subq.w	#1,d5
000157B4 51CA FFE6                  		dbf	d2,loc_14C64
000157B8                            
000157B8 D2FC 0020                  		adda.w	#$20,a1
000157BC 51CB FFD8                  		dbf	d3,loc_14C5E
000157C0                            
000157C0 43F9 0000 0000             		lea	(CollArray1).l,a1
000157C6 45F9 0000 0000             		lea	(CollArray2).l,a2
000157CC 6100                       		bsr.s	FloorLog_Unk2
000157CE 43F9 0000 0000             		lea	(CollArray1).l,a1
000157D4 45F9 0000 0000             		lea	(CollArray1).l,a2
000157DA                            
000157DA                            ; End of function FloorLog_Unk
000157DA                            
000157DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000157DA                            
000157DA                            
000157DA                            FloorLog_Unk2:				; XREF: FloorLog_Unk
000157DA 363C 0FFF                  		move.w	#$FFF,d3
000157DE                            
000157DE                            loc_14CA6:
000157DE 7400                       		moveq	#0,d2
000157E0 323C 000F                  		move.w	#$F,d1
000157E4 3019                       		move.w	(a1)+,d0
000157E6 6700                       		beq.s	loc_14CD4
000157E8 6B00                       		bmi.s	loc_14CBE
000157EA                            
000157EA                            loc_14CB2:
000157EA E248                       		lsr.w	#1,d0
000157EC 6400                       		bcc.s	loc_14CB8
000157EE 5202                       		addq.b	#1,d2
000157F0                            
000157F0                            loc_14CB8:
000157F0 51C9 FFF8                  		dbf	d1,loc_14CB2
000157F4                            
000157F4 6000                       		bra.s	loc_14CD6
000157F6                            ; ===========================================================================
000157F6                            
000157F6                            loc_14CBE:
000157F6 0C40 FFFF                  		cmpi.w	#-1,d0
000157FA 6700                       		beq.s	loc_14CD0
000157FC                            
000157FC                            loc_14CC4:
000157FC E348                       		lsl.w	#1,d0
000157FE 6400                       		bcc.s	loc_14CCA
00015800 5302                       		subq.b	#1,d2
00015802                            
00015802                            loc_14CCA:
00015802 51C9 FFF8                  		dbf	d1,loc_14CC4
00015806                            
00015806 6000                       		bra.s	loc_14CD6
00015808                            ; ===========================================================================
00015808                            
00015808                            loc_14CD0:
00015808 303C 0010                  		move.w	#$10,d0
0001580C                            
0001580C                            loc_14CD4:
0001580C 3400                       		move.w	d0,d2
0001580E                            
0001580E                            loc_14CD6:
0001580E 14C2                       		move.b	d2,(a2)+
00015810 51CB FFCC                  		dbf	d3,loc_14CA6
00015814                            
00015814 4E75                       		rts	
00015816                            
00015816                            ; End of function FloorLog_Unk2
00015816                            
00015816                            
00015816                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015816                            
00015816                            
00015816                            Sonic_WalkSpeed:			; XREF: Sonic_Move
00015816 2628 0008                  		move.l	8(a0),d3
0001581A 2428 000C                  		move.l	$C(a0),d2
0001581E 3228 0010                  		move.w	$10(a0),d1
00015822 48C1                       		ext.l	d1
00015824 E181                       		asl.l	#8,d1
00015826 D681                       		add.l	d1,d3
00015828 3228 0012                  		move.w	$12(a0),d1
0001582C 48C1                       		ext.l	d1
0001582E E181                       		asl.l	#8,d1
00015830 D481                       		add.l	d1,d2
00015832 4842                       		swap	d2
00015834 4843                       		swap	d3
00015836 11C0 F768                  		move.b	d0,($FFFFF768).w
0001583A 11C0 F76A                  		move.b	d0,($FFFFF76A).w
0001583E 1200                       		move.b	d0,d1
00015840 0600 0020                  		addi.b	#$20,d0
00015844 6A00                       		bpl.s	loc_14D1A
00015846 1001                       		move.b	d1,d0
00015848 6A00                       		bpl.s	loc_14D14
0001584A 5300                       		subq.b	#1,d0
0001584C                            
0001584C                            loc_14D14:
0001584C 0600 0020                  		addi.b	#$20,d0
00015850 6000                       		bra.s	loc_14D24
00015852                            ; ===========================================================================
00015852                            
00015852                            loc_14D1A:
00015852 1001                       		move.b	d1,d0
00015854 6A00                       		bpl.s	loc_14D20
00015856 5200                       		addq.b	#1,d0
00015858                            
00015858                            loc_14D20:
00015858 0600 001F                  		addi.b	#$1F,d0
0001585C                            
0001585C                            loc_14D24:
0001585C 0200 00C0                  		andi.b	#$C0,d0
00015860 6700 0000                  		beq.w	loc_14DF0
00015864 0C00 0080                  		cmpi.b	#$80,d0
00015868 6700 0000                  		beq.w	loc_14F7C
0001586C 0201 0038                  		andi.b	#$38,d1
00015870 6600                       		bne.s	loc_14D3C
00015872 5042                       		addq.w	#8,d2
00015874                            
00015874                            loc_14D3C:
00015874 0C00 0040                  		cmpi.b	#$40,d0
00015878 6700 0000                  		beq.w	loc_1504A
0001587C 6000 0000                  		bra.w	loc_14EBC
00015880                            
00015880                            ; End of function Sonic_WalkSpeed
00015880                            
00015880                            
00015880                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015880                            
00015880                            
00015880                            sub_14D48:				; XREF: Sonic_Jump
00015880 11C0 F768                  		move.b	d0,($FFFFF768).w
00015884 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00015888 0600 0020                  		addi.b	#$20,d0
0001588C 0200 00C0                  		andi.b	#$C0,d0
00015890 0C00 0040                  		cmpi.b	#$40,d0
00015894 6700 0000                  		beq.w	loc_14FD6
00015898 0C00 0080                  		cmpi.b	#$80,d0
0001589C 6700 0000                  		beq.w	Sonic_DontRunOnWalls
000158A0 0C00 00C0                  		cmpi.b	#$C0,d0
000158A4 6700 0000                  		beq.w	sub_14E50
000158A8                            
000158A8                            ; End of function sub_14D48
000158A8                            
000158A8                            ; ---------------------------------------------------------------------------
000158A8                            ; Subroutine to	make Sonic land	on the floor after jumping
000158A8                            ; ---------------------------------------------------------------------------
000158A8                            
000158A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000158A8                            
000158A8                            
000158A8                            Sonic_HitFloor:				; XREF: Sonic_Floor
000158A8 3428 000C                  		move.w	$C(a0),d2
000158AC 3628 0008                  		move.w	8(a0),d3
000158B0 7000                       		moveq	#0,d0
000158B2 1028 0016                  		move.b	$16(a0),d0
000158B6 4880                       		ext.w	d0
000158B8 D440                       		add.w	d0,d2
000158BA 1028 0017                  		move.b	$17(a0),d0
000158BE 4880                       		ext.w	d0
000158C0 D640                       		add.w	d0,d3
000158C2 49F8 F768                  		lea	($FFFFF768).w,a4
000158C6 367C 0010                  		movea.w	#$10,a3
000158CA 3C3C 0000                  		move.w	#0,d6
000158CE 7A0D                       		moveq	#$D,d5
000158D0 6100 FC34                  		bsr.w	FindFloor
000158D4 3F01                       		move.w	d1,-(sp)
000158D6 3428 000C                  		move.w	$C(a0),d2
000158DA 3628 0008                  		move.w	8(a0),d3
000158DE 7000                       		moveq	#0,d0
000158E0 1028 0016                  		move.b	$16(a0),d0
000158E4 4880                       		ext.w	d0
000158E6 D440                       		add.w	d0,d2
000158E8 1028 0017                  		move.b	$17(a0),d0
000158EC 4880                       		ext.w	d0
000158EE 9640                       		sub.w	d0,d3
000158F0 49F8 F76A                  		lea	($FFFFF76A).w,a4
000158F4 367C 0010                  		movea.w	#$10,a3
000158F8 3C3C 0000                  		move.w	#0,d6
000158FC 7A0D                       		moveq	#$D,d5
000158FE 6100 FC06                  		bsr.w	FindFloor
00015902 301F                       		move.w	(sp)+,d0
00015904 143C 0000                  		move.b	#0,d2
00015908                            
00015908                            loc_14DD0:
00015908 1638 F76A                  		move.b	($FFFFF76A).w,d3
0001590C B240                       		cmp.w	d0,d1
0001590E 6F00                       		ble.s	loc_14DDE
00015910 1638 F768                  		move.b	($FFFFF768).w,d3
00015914 C141                       		exg	d0,d1
00015916                            
00015916                            loc_14DDE:
00015916 0803 0000                  		btst	#0,d3
0001591A 6700                       		beq.s	locret_14DE6
0001591C 1602                       		move.b	d2,d3
0001591E                            
0001591E                            locret_14DE6:
0001591E 4E75                       		rts	
00015920                            
00015920                            ; End of function Sonic_HitFloor
00015920                            
00015920                            ; ===========================================================================
00015920 3428 000C                  		move.w	$C(a0),d2
00015924 3628 0008                  		move.w	8(a0),d3
00015928                            
00015928                            loc_14DF0:				; XREF: Sonic_WalkSpeed
00015928 0642 000A                  		addi.w	#$A,d2
0001592C 49F8 F768                  		lea	($FFFFF768).w,a4
00015930 367C 0010                  		movea.w	#$10,a3
00015934 3C3C 0000                  		move.w	#0,d6
00015938 7A0E                       		moveq	#$E,d5
0001593A 6100 FBCA                  		bsr.w	FindFloor
0001593E 143C 0000                  		move.b	#0,d2
00015942                            
00015942                            loc_14E0A:				; XREF: sub_14EB4
00015942 1638 F768                  		move.b	($FFFFF768).w,d3
00015946 0803 0000                  		btst	#0,d3
0001594A 6700                       		beq.s	locret_14E16
0001594C 1602                       		move.b	d2,d3
0001594E                            
0001594E                            locret_14E16:
0001594E 4E75                       		rts	
00015950                            
00015950                            ; ---------------------------------------------------------------------------
00015950                            ; Subroutine allowing objects to interact with the floor
00015950                            ; ---------------------------------------------------------------------------
00015950                            
00015950                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015950                            
00015950                            
00015950                            ObjHitFloor:
00015950 3628 0008                  		move.w	8(a0),d3
00015954                            
00015954                            ; End of function ObjHitFloor
00015954                            
00015954                            
00015954                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015954                            
00015954                            
00015954                            ObjHitFloor2:
00015954 3428 000C                  		move.w	$C(a0),d2
00015958 7000                       		moveq	#0,d0
0001595A 1028 0016                  		move.b	$16(a0),d0
0001595E 4880                       		ext.w	d0
00015960 D440                       		add.w	d0,d2
00015962 49F8 F768                  		lea	($FFFFF768).w,a4
00015966 18BC 0000                  		move.b	#0,(a4)
0001596A 367C 0010                  		movea.w	#$10,a3
0001596E 3C3C 0000                  		move.w	#0,d6
00015972 7A0D                       		moveq	#$D,d5
00015974 6100 FB90                  		bsr.w	FindFloor
00015978 1638 F768                  		move.b	($FFFFF768).w,d3
0001597C 0803 0000                  		btst	#0,d3
00015980 6700                       		beq.s	locret_14E4E
00015982 163C 0000                  		move.b	#0,d3
00015986                            
00015986                            locret_14E4E:
00015986 4E75                       		rts	
00015988                            ; End of function ObjHitFloor2
00015988                            
00015988                            
00015988                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015988                            
00015988                            
00015988                            sub_14E50:				; XREF: sub_14D48
00015988 3428 000C                  		move.w	$C(a0),d2
0001598C 3628 0008                  		move.w	8(a0),d3
00015990 7000                       		moveq	#0,d0
00015992 1028 0017                  		move.b	$17(a0),d0
00015996 4880                       		ext.w	d0
00015998 9440                       		sub.w	d0,d2
0001599A 1028 0016                  		move.b	$16(a0),d0
0001599E 4880                       		ext.w	d0
000159A0 D640                       		add.w	d0,d3
000159A2 49F8 F768                  		lea	($FFFFF768).w,a4
000159A6 367C 0010                  		movea.w	#$10,a3
000159AA 3C3C 0000                  		move.w	#0,d6
000159AE 7A0E                       		moveq	#$E,d5
000159B0 6100 FC92                  		bsr.w	FindWall
000159B4 3F01                       		move.w	d1,-(sp)
000159B6 3428 000C                  		move.w	$C(a0),d2
000159BA 3628 0008                  		move.w	8(a0),d3
000159BE 7000                       		moveq	#0,d0
000159C0 1028 0017                  		move.b	$17(a0),d0
000159C4 4880                       		ext.w	d0
000159C6 D440                       		add.w	d0,d2
000159C8 1028 0016                  		move.b	$16(a0),d0
000159CC 4880                       		ext.w	d0
000159CE D640                       		add.w	d0,d3
000159D0 49F8 F76A                  		lea	($FFFFF76A).w,a4
000159D4 367C 0010                  		movea.w	#$10,a3
000159D8 3C3C 0000                  		move.w	#0,d6
000159DC 7A0E                       		moveq	#$E,d5
000159DE 6100 FC64                  		bsr.w	FindWall
000159E2 301F                       		move.w	(sp)+,d0
000159E4 143C 00C0                  		move.b	#-$40,d2
000159E8 6000 FF1E                  		bra.w	loc_14DD0
000159EC                            
000159EC                            ; End of function sub_14E50
000159EC                            
000159EC                            
000159EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000159EC                            
000159EC                            
000159EC                            sub_14EB4:				; XREF: Sonic_Floor
000159EC 3428 000C                  		move.w	$C(a0),d2
000159F0 3628 0008                  		move.w	8(a0),d3
000159F4                            
000159F4                            loc_14EBC:
000159F4 0643 000A                  		addi.w	#$A,d3
000159F8 49F8 F768                  		lea	($FFFFF768).w,a4
000159FC 367C 0010                  		movea.w	#$10,a3
00015A00 3C3C 0000                  		move.w	#0,d6
00015A04 7A0E                       		moveq	#$E,d5
00015A06 6100 FC3C                  		bsr.w	FindWall
00015A0A 143C 00C0                  		move.b	#-$40,d2
00015A0E 6000 FF32                  		bra.w	loc_14E0A
00015A12                            
00015A12                            ; End of function sub_14EB4
00015A12                            
00015A12                            ; ---------------------------------------------------------------------------
00015A12                            ; Subroutine to	detect when an object hits a wall to its right
00015A12                            ; ---------------------------------------------------------------------------
00015A12                            
00015A12                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015A12                            
00015A12                            
00015A12                            ObjHitWallRight:
00015A12 D668 0008                  		add.w	8(a0),d3
00015A16 3428 000C                  		move.w	$C(a0),d2
00015A1A 49F8 F768                  		lea	($FFFFF768).w,a4
00015A1E 18BC 0000                  		move.b	#0,(a4)
00015A22 367C 0010                  		movea.w	#$10,a3
00015A26 3C3C 0000                  		move.w	#0,d6
00015A2A 7A0E                       		moveq	#$E,d5
00015A2C 6100 FC16                  		bsr.w	FindWall
00015A30 1638 F768                  		move.b	($FFFFF768).w,d3
00015A34 0803 0000                  		btst	#0,d3
00015A38 6700                       		beq.s	locret_14F06
00015A3A 163C 00C0                  		move.b	#-$40,d3
00015A3E                            
00015A3E                            locret_14F06:
00015A3E 4E75                       		rts	
00015A40                            
00015A40                            ; End of function ObjHitWallRight
00015A40                            
00015A40                            ; ---------------------------------------------------------------------------
00015A40                            ; Subroutine preventing	Sonic from running on walls and	ceilings when he
00015A40                            ; touches them
00015A40                            ; ---------------------------------------------------------------------------
00015A40                            
00015A40                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015A40                            
00015A40                            
00015A40                            Sonic_DontRunOnWalls:			; XREF: Sonic_Floor; et al
00015A40 3428 000C                  		move.w	$C(a0),d2
00015A44 3628 0008                  		move.w	8(a0),d3
00015A48 7000                       		moveq	#0,d0
00015A4A 1028 0016                  		move.b	$16(a0),d0
00015A4E 4880                       		ext.w	d0
00015A50 9440                       		sub.w	d0,d2
00015A52 0A42 000F                  		eori.w	#$F,d2
00015A56 1028 0017                  		move.b	$17(a0),d0
00015A5A 4880                       		ext.w	d0
00015A5C D640                       		add.w	d0,d3
00015A5E 49F8 F768                  		lea	($FFFFF768).w,a4
00015A62 367C FFF0                  		movea.w	#-$10,a3
00015A66 3C3C 1000                  		move.w	#$1000,d6
00015A6A 7A0E                       		moveq	#$E,d5
00015A6C 6100 FA98                  		bsr.w	FindFloor
00015A70 3F01                       		move.w	d1,-(sp)
00015A72 3428 000C                  		move.w	$C(a0),d2
00015A76 3628 0008                  		move.w	8(a0),d3
00015A7A 7000                       		moveq	#0,d0
00015A7C 1028 0016                  		move.b	$16(a0),d0
00015A80 4880                       		ext.w	d0
00015A82 9440                       		sub.w	d0,d2
00015A84 0A42 000F                  		eori.w	#$F,d2
00015A88 1028 0017                  		move.b	$17(a0),d0
00015A8C 4880                       		ext.w	d0
00015A8E 9640                       		sub.w	d0,d3
00015A90 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015A94 367C FFF0                  		movea.w	#-$10,a3
00015A98 3C3C 1000                  		move.w	#$1000,d6
00015A9C 7A0E                       		moveq	#$E,d5
00015A9E 6100 FA66                  		bsr.w	FindFloor
00015AA2 301F                       		move.w	(sp)+,d0
00015AA4 143C 0080                  		move.b	#-$80,d2
00015AA8 6000 FE5E                  		bra.w	loc_14DD0
00015AAC                            ; End of function Sonic_DontRunOnWalls
00015AAC                            
00015AAC                            ; ===========================================================================
00015AAC 3428 000C                  		move.w	$C(a0),d2
00015AB0 3628 0008                  		move.w	8(a0),d3
00015AB4                            
00015AB4                            loc_14F7C:
00015AB4 0442 000A                  		subi.w	#$A,d2
00015AB8 0A42 000F                  		eori.w	#$F,d2
00015ABC 49F8 F768                  		lea	($FFFFF768).w,a4
00015AC0 367C FFF0                  		movea.w	#-$10,a3
00015AC4 3C3C 1000                  		move.w	#$1000,d6
00015AC8 7A0E                       		moveq	#$E,d5
00015ACA 6100 FA3A                  		bsr.w	FindFloor
00015ACE 143C 0080                  		move.b	#-$80,d2
00015AD2 6000 FE6E                  		bra.w	loc_14E0A
00015AD6                            
00015AD6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015AD6                            
00015AD6                            
00015AD6                            ObjHitCeiling:
00015AD6 3428 000C                  		move.w	$C(a0),d2
00015ADA 3628 0008                  		move.w	8(a0),d3
00015ADE 7000                       		moveq	#0,d0
00015AE0 1028 0016                  		move.b	$16(a0),d0
00015AE4 4880                       		ext.w	d0
00015AE6 9440                       		sub.w	d0,d2
00015AE8 0A42 000F                  		eori.w	#$F,d2
00015AEC 49F8 F768                  		lea	($FFFFF768).w,a4
00015AF0 367C FFF0                  		movea.w	#-$10,a3
00015AF4 3C3C 1000                  		move.w	#$1000,d6
00015AF8 7A0E                       		moveq	#$E,d5
00015AFA 6100 FA0A                  		bsr.w	FindFloor
00015AFE 1638 F768                  		move.b	($FFFFF768).w,d3
00015B02 0803 0000                  		btst	#0,d3
00015B06 6700                       		beq.s	locret_14FD4
00015B08 163C 0080                  		move.b	#-$80,d3
00015B0C                            
00015B0C                            locret_14FD4:
00015B0C 4E75                       		rts	
00015B0E                            ; End of function ObjHitCeiling
00015B0E                            
00015B0E                            ; ===========================================================================
00015B0E                            
00015B0E                            loc_14FD6:				; XREF: sub_14D48
00015B0E 3428 000C                  		move.w	$C(a0),d2
00015B12 3628 0008                  		move.w	8(a0),d3
00015B16 7000                       		moveq	#0,d0
00015B18 1028 0017                  		move.b	$17(a0),d0
00015B1C 4880                       		ext.w	d0
00015B1E 9440                       		sub.w	d0,d2
00015B20 1028 0016                  		move.b	$16(a0),d0
00015B24 4880                       		ext.w	d0
00015B26 9640                       		sub.w	d0,d3
00015B28 0A43 000F                  		eori.w	#$F,d3
00015B2C 49F8 F768                  		lea	($FFFFF768).w,a4
00015B30 367C FFF0                  		movea.w	#-$10,a3
00015B34 3C3C 0800                  		move.w	#$800,d6
00015B38 7A0E                       		moveq	#$E,d5
00015B3A 6100 FB08                  		bsr.w	FindWall
00015B3E 3F01                       		move.w	d1,-(sp)
00015B40 3428 000C                  		move.w	$C(a0),d2
00015B44 3628 0008                  		move.w	8(a0),d3
00015B48 7000                       		moveq	#0,d0
00015B4A 1028 0017                  		move.b	$17(a0),d0
00015B4E 4880                       		ext.w	d0
00015B50 D440                       		add.w	d0,d2
00015B52 1028 0016                  		move.b	$16(a0),d0
00015B56 4880                       		ext.w	d0
00015B58 9640                       		sub.w	d0,d3
00015B5A 0A43 000F                  		eori.w	#$F,d3
00015B5E 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015B62 367C FFF0                  		movea.w	#-$10,a3
00015B66 3C3C 0800                  		move.w	#$800,d6
00015B6A 7A0E                       		moveq	#$E,d5
00015B6C 6100 FAD6                  		bsr.w	FindWall
00015B70 301F                       		move.w	(sp)+,d0
00015B72 143C 0040                  		move.b	#$40,d2
00015B76 6000 FD90                  		bra.w	loc_14DD0
00015B7A                            
00015B7A                            ; ---------------------------------------------------------------------------
00015B7A                            ; Subroutine to	stop Sonic when	he jumps at a wall
00015B7A                            ; ---------------------------------------------------------------------------
00015B7A                            
00015B7A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015B7A                            
00015B7A                            
00015B7A                            Sonic_HitWall:				; XREF: Sonic_Floor
00015B7A 3428 000C                  		move.w	$C(a0),d2
00015B7E 3628 0008                  		move.w	8(a0),d3
00015B82                            
00015B82                            loc_1504A:
00015B82 0443 000A                  		subi.w	#$A,d3
00015B86 0A43 000F                  		eori.w	#$F,d3
00015B8A 49F8 F768                  		lea	($FFFFF768).w,a4
00015B8E 367C FFF0                  		movea.w	#-$10,a3
00015B92 3C3C 0800                  		move.w	#$800,d6
00015B96 7A0E                       		moveq	#$E,d5
00015B98 6100 FAAA                  		bsr.w	FindWall
00015B9C 143C 0040                  		move.b	#$40,d2
00015BA0 6000 FDA0                  		bra.w	loc_14E0A
00015BA4                            ; End of function Sonic_HitWall
00015BA4                            
00015BA4                            ; ---------------------------------------------------------------------------
00015BA4                            ; Subroutine to	detect when an object hits a wall to its left
00015BA4                            ; ---------------------------------------------------------------------------
00015BA4                            
00015BA4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015BA4                            
00015BA4                            
00015BA4                            ObjHitWallLeft:
00015BA4 D668 0008                  		add.w	8(a0),d3
00015BA8 3428 000C                  		move.w	$C(a0),d2
00015BAC 49F8 F768                  		lea	($FFFFF768).w,a4
00015BB0 18BC 0000                  		move.b	#0,(a4)
00015BB4 367C FFF0                  		movea.w	#-$10,a3
00015BB8 3C3C 0800                  		move.w	#$800,d6
00015BBC 7A0E                       		moveq	#$E,d5
00015BBE 6100 FA84                  		bsr.w	FindWall
00015BC2 1638 F768                  		move.b	($FFFFF768).w,d3
00015BC6 0803 0000                  		btst	#0,d3
00015BCA 6700                       		beq.s	locret_15098
00015BCC 163C 0040                  		move.b	#$40,d3
00015BD0                            
00015BD0                            locret_15098:
00015BD0 4E75                       		rts	
00015BD2                            ; End of function ObjHitWallLeft
00015BD2                            
00015BD2                            ; ===========================================================================
00015BD2                            ; ---------------------------------------------------------------------------
00015BD2                            ; Object 66 - rotating disc that grabs Sonic (SBZ)
00015BD2                            ; ---------------------------------------------------------------------------
00015BD2                            
00015BD2                            Obj66:					; XREF: Obj_Index
00015BD2 7000                       		moveq	#0,d0
00015BD4 1028 0024                  		move.b	$24(a0),d0
00015BD8 323B 0000                  		move.w	Obj66_Index(pc,d0.w),d1
00015BDC 4EFB 1000                  		jmp	Obj66_Index(pc,d1.w)
00015BE0                            ; ===========================================================================
00015BE0 0000                       Obj66_Index:	dc.w Obj66_Main-Obj66_Index
00015BE2 0000                       		dc.w Obj66_Action-Obj66_Index
00015BE4 0000                       		dc.w Obj66_Display-Obj66_Index
00015BE6 0000                       		dc.w Obj66_Release-Obj66_Index
00015BE8                            ; ===========================================================================
00015BE8                            
00015BE8                            Obj66_Main:				; XREF: Obj66_Index
00015BE8 5428 0024                  		addq.b	#2,$24(a0)
00015BEC 323C 0001                  		move.w	#1,d1
00015BF0 2248                       		movea.l	a0,a1
00015BF2 6000                       		bra.s	Obj66_MakeItem
00015BF4                            ; ===========================================================================
00015BF4                            
00015BF4                            Obj66_Loop:
00015BF4 6100 88D4                  		bsr.w	SingleObjLoad
00015BF8 6600                       		bne.s	loc_150FE
00015BFA 12BC 0066                  		move.b	#$66,0(a1)
00015BFE 5829 0024                  		addq.b	#4,$24(a1)
00015C02 3368 0008 0008             		move.w	8(a0),8(a1)
00015C08 3368 000C 000C             		move.w	$C(a0),$C(a1)
00015C0E 137C 0003 0018             		move.b	#3,$18(a1)
00015C14 137C 0010 001A             		move.b	#$10,$1A(a1)
00015C1A                            
00015C1A                            Obj66_MakeItem:				; XREF: Obj66_Main
00015C1A 237C 0000 0000 0004        		move.l	#Map_obj66,4(a1)
00015C22 337C 4348 0002             		move.w	#$4348,2(a1)
00015C28 0029 0004 0001             		ori.b	#4,1(a1)
00015C2E 137C 0038 0019             		move.b	#$38,$19(a1)
00015C34                            
00015C34                            loc_150FE:
00015C34 51C9 FFBE                  		dbf	d1,Obj66_Loop
00015C38                            
00015C38 117C 0030 0019             		move.b	#$30,$19(a0)
00015C3E 117C 0004 0018             		move.b	#4,$18(a0)
00015C44 317C 003C 0030             		move.w	#$3C,$30(a0)
00015C4A 117C 0001 0034             		move.b	#1,$34(a0)
00015C50 1168 0028 0038             		move.b	$28(a0),$38(a0)
00015C56                            
00015C56                            Obj66_Action:				; XREF: Obj66_Index
00015C56 6100 0000                  		bsr.w	Obj66_ChkSwitch
00015C5A 4A28 0001                  		tst.b	1(a0)
00015C5E 6A00 0000                  		bpl.w	Obj66_Display
00015C62 323C 0030                  		move.w	#$30,d1
00015C66 3401                       		move.w	d1,d2
00015C68 3602                       		move.w	d2,d3
00015C6A 5243                       		addq.w	#1,d3
00015C6C 3828 0008                  		move.w	8(a0),d4
00015C70 6100 A7A2                  		bsr.w	SolidObject
00015C74 0828 0005 0022             		btst	#5,$22(a0)
00015C7A 6700 0000                  		beq.w	Obj66_Display
00015C7E 43F8 D000                  		lea	($FFFFD000).w,a1
00015C82 720E                       		moveq	#$E,d1
00015C84 3029 0008                  		move.w	8(a1),d0
00015C88 B068 0008                  		cmp.w	8(a0),d0
00015C8C 6500                       		bcs.s	Obj66_GrabSonic
00015C8E 7207                       		moveq	#7,d1
00015C90                            
00015C90                            Obj66_GrabSonic:
00015C90 B228 001A                  		cmp.b	$1A(a0),d1
00015C94 6600                       		bne.s	Obj66_Display
00015C96 1141 0032                  		move.b	d1,$32(a0)
00015C9A 5828 0024                  		addq.b	#4,$24(a0)
00015C9E 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
00015CA4 137C 0002 001C             		move.b	#2,$1C(a1)	; make Sonic use "rolling" animation
00015CAA 337C 0800 0014             		move.w	#$800,$14(a1)
00015CB0 337C 0000 0010             		move.w	#0,$10(a1)
00015CB6 337C 0000 0012             		move.w	#0,$12(a1)
00015CBC 08A8 0005 0022             		bclr	#5,$22(a0)
00015CC2 08A9 0005 0022             		bclr	#5,$22(a1)
00015CC8 08E9 0001 0022             		bset	#1,$22(a1)
00015CCE 3429 0008                  		move.w	8(a1),d2
00015CD2 3629 000C                  		move.w	$C(a1),d3
00015CD6 6100 0000                  		bsr.w	Obj66_ChgPos
00015CDA D569 0008                  		add.w	d2,8(a1)
00015CDE D769 000C                  		add.w	d3,$C(a1)
00015CE2 E0E9 0008                  		asr	8(a1)
00015CE6 E0E9 000C                  		asr	$C(a1)
00015CEA                            
00015CEA                            Obj66_Display:				; XREF: Obj66_Index
00015CEA 6000 A400                  		bra.w	MarkObjGone
00015CEE                            ; ===========================================================================
00015CEE                            
00015CEE                            Obj66_Release:				; XREF: Obj66_Index
00015CEE 1028 001A                  		move.b	$1A(a0),d0
00015CF2 0C00 0004                  		cmpi.b	#4,d0
00015CF6 6700                       		beq.s	loc_151C8
00015CF8 0C00 0007                  		cmpi.b	#7,d0
00015CFC 6600                       		bne.s	loc_151F8
00015CFE                            
00015CFE                            loc_151C8:
00015CFE B028 0032                  		cmp.b	$32(a0),d0
00015D02 6700                       		beq.s	loc_151F8
00015D04 43F8 D000                  		lea	($FFFFD000).w,a1
00015D08 337C 0000 0010             		move.w	#0,$10(a1)
00015D0E 337C 0800 0012             		move.w	#$800,$12(a1)
00015D14 0C00 0004                  		cmpi.b	#4,d0
00015D18 6700                       		beq.s	loc_151F0
00015D1A 337C 0800 0010             		move.w	#$800,$10(a1)
00015D20 337C 0800 0012             		move.w	#$800,$12(a1)
00015D26                            
00015D26                            loc_151F0:
00015D26 4238 F7C8                  		clr.b	($FFFFF7C8).w	; unlock controls
00015D2A 5928 0024                  		subq.b	#4,$24(a0)
00015D2E                            
00015D2E                            loc_151F8:
00015D2E 6100                       		bsr.s	Obj66_ChkSwitch
00015D30 6100                       		bsr.s	Obj66_ChgPos
00015D32 6000 A3B8                  		bra.w	MarkObjGone
00015D36                            
00015D36                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015D36                            
00015D36                            
00015D36                            Obj66_ChkSwitch:			; XREF: Obj66_Action
00015D36 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00015D3A 7000                       		moveq	#0,d0
00015D3C 1028 0038                  		move.b	$38(a0),d0
00015D40 0832 0000 0000             		btst	#0,(a2,d0.w)	; is switch pressed?
00015D46 6700                       		beq.s	loc_15224	; if not, branch
00015D48 4A28 0036                  		tst.b	$36(a0)		; has switch previously	been pressed?
00015D4C 6600                       		bne.s	Obj66_Animate	; if yes, branch
00015D4E 4428 0034                  		neg.b	$34(a0)
00015D52 117C 0001 0036             		move.b	#1,$36(a0)	; set to "previously pressed"
00015D58 6000                       		bra.s	Obj66_Animate
00015D5A                            ; ===========================================================================
00015D5A                            
00015D5A                            loc_15224:
00015D5A 4228 0036                  		clr.b	$36(a0)		; set to "not yet pressed"
00015D5E                            
00015D5E                            Obj66_Animate:
00015D5E 5328 001E                  		subq.b	#1,$1E(a0)
00015D62 6A00                       		bpl.s	locret_15246
00015D64 117C 0007 001E             		move.b	#7,$1E(a0)
00015D6A 1228 0034                  		move.b	$34(a0),d1
00015D6E 1028 001A                  		move.b	$1A(a0),d0
00015D72 D001                       		add.b	d1,d0
00015D74 0200 000F                  		andi.b	#$F,d0
00015D78 1140 001A                  		move.b	d0,$1A(a0)
00015D7C                            
00015D7C                            locret_15246:
00015D7C 4E75                       		rts	
00015D7E                            ; End of function Obj66_ChkSwitch
00015D7E                            
00015D7E                            
00015D7E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015D7E                            
00015D7E                            
00015D7E                            Obj66_ChgPos:				; XREF: Obj66_GrabSonic
00015D7E 43F8 D000                  		lea	($FFFFD000).w,a1
00015D82 7000                       		moveq	#0,d0
00015D84 1028 001A                  		move.b	$1A(a0),d0
00015D88 D040                       		add.w	d0,d0
00015D8A 45FB 0000                  		lea	Obj66_PosData(pc,d0.w),a2
00015D8E 101A                       		move.b	(a2)+,d0
00015D90 4880                       		ext.w	d0
00015D92 D068 0008                  		add.w	8(a0),d0
00015D96 3340 0008                  		move.w	d0,8(a1)
00015D9A 101A                       		move.b	(a2)+,d0
00015D9C 4880                       		ext.w	d0
00015D9E D068 000C                  		add.w	$C(a0),d0
00015DA2 3340 000C                  		move.w	d0,$C(a1)
00015DA6 4E75                       		rts	
00015DA8                            ; End of function Obj66_ChgPos
00015DA8                            
00015DA8                            ; ===========================================================================
00015DA8 E000 E20E                  Obj66_PosData:	dc.b  $E0,   0,	$E2,  $E ; disc	x-pos, Sonic x-pos, disc y-pos,	Sonic y-pos
00015DAC E818 F21E                  		dc.b  $E8, $18,	$F2, $1E
00015DB0 0020 0E1E                  		dc.b	0, $20,	 $E, $1E
00015DB4 1818 1E0E                  		dc.b  $18, $18,	$1E,  $E
00015DB8 2000 1EF2                  		dc.b  $20,   0,	$1E, $F2
00015DBC 18E8 0EE2                  		dc.b  $18, $E8,	 $E, $E2
00015DC0 00E0 F2E2                  		dc.b	0, $E0,	$F2, $E2
00015DC4 E8E8 E2F2                  		dc.b  $E8, $E8,	$E2, $F2
00015DC8                            ; ---------------------------------------------------------------------------
00015DC8                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
00015DC8                            ; ---------------------------------------------------------------------------
00015DC8                            Map_obj66:
00015DC8                            	include "_maps\obj66.asm"
00015DC8                            ; ---------------------------------------------------------------------------
00015DC8                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
00015DC8                            ; ---------------------------------------------------------------------------
00015DC8 0000 0000                  		dc.w byte_152B4-Map_obj66, byte_152D3-Map_obj66
00015DCC 0000 0000                  		dc.w byte_152F2-Map_obj66, byte_15311-Map_obj66
00015DD0 0000 0000                  		dc.w byte_15330-Map_obj66, byte_1534F-Map_obj66
00015DD4 0000 0000                  		dc.w byte_1536E-Map_obj66, byte_1538D-Map_obj66
00015DD8 0000 0000                  		dc.w byte_153AC-Map_obj66, byte_153CB-Map_obj66
00015DDC 0000 0000                  		dc.w byte_153EA-Map_obj66, byte_15409-Map_obj66
00015DE0 0000 0000                  		dc.w byte_15428-Map_obj66, byte_15447-Map_obj66
00015DE4 0000 0000                  		dc.w byte_15466-Map_obj66, byte_15485-Map_obj66
00015DE8 0000                       		dc.w byte_154A4-Map_obj66
00015DEA 06                         byte_152B4:	dc.b 6
00015DEB E805 0022 D0               		dc.b $E8, 5, 0,	$22, $D0
00015DF0 0805 1022 D0               		dc.b 8,	5, $10,	$22, $D0
00015DF5 E80A 0000 C8               		dc.b $E8, $A, 0, 0, $C8
00015DFA E80A 0800 E0               		dc.b $E8, $A, 8, 0, $E0
00015DFF 000A 1000 C8               		dc.b 0,	$A, $10, 0, $C8
00015E04 000A 1800 E0               		dc.b 0,	$A, $18, 0, $E0
00015E09 06                         byte_152D3:	dc.b 6
00015E0A F803 0026 D0               		dc.b $F8, 3, 0,	$26, $D0
00015E0F 1805 002A D8               		dc.b $18, 5, 0,	$2A, $D8
00015E14 F60A 0000 CA               		dc.b $F6, $A, 0, 0, $CA
00015E19 F60A 0800 E2               		dc.b $F6, $A, 8, 0, $E2
00015E1E 0E0A 1000 CA               		dc.b $E, $A, $10, 0, $CA
00015E23 0E0A 1800 E2               		dc.b $E, $A, $18, 0, $E2
00015E28 06                         byte_152F2:	dc.b 6
00015E29 0006 002E D0               		dc.b 0,	6, 0, $2E, $D0
00015E2E 2009 0034 E8               		dc.b $20, 9, 0,	$34, $E8
00015E33 000A 0000 D0               		dc.b 0,	$A, 0, 0, $D0
00015E38 000A 0800 E8               		dc.b 0,	$A, 8, 0, $E8
00015E3D 180A 1000 D0               		dc.b $18, $A, $10, 0, $D0
00015E42 180A 1800 E8               		dc.b $18, $A, $18, 0, $E8
00015E47 06                         byte_15311:	dc.b 6
00015E48 0807 003A D8               		dc.b 8,	7, 0, $3A, $D8
00015E4D 2808 0042 F0               		dc.b $28, 8, 0,	$42, $F0
00015E52 060A 0000 DA               		dc.b 6,	$A, 0, 0, $DA
00015E57 060A 0800 F2               		dc.b 6,	$A, 8, 0, $F2
00015E5C 1E0A 1000 DA               		dc.b $1E, $A, $10, 0, $DA
00015E61 1E0A 1800 F2               		dc.b $1E, $A, $18, 0, $F2
00015E66 06                         byte_15330:	dc.b 6
00015E67 2005 0045 E8               		dc.b $20, 5, 0,	$45, $E8
00015E6C 2005 0845 08               		dc.b $20, 5, 8,	$45, 8
00015E71 080A 0000 E8               		dc.b 8,	$A, 0, 0, $E8
00015E76 080A 0800 00               		dc.b 8,	$A, 8, 0, 0
00015E7B 200A 1000 E8               		dc.b $20, $A, $10, 0, $E8
00015E80 200A 1800 00               		dc.b $20, $A, $18, 0, 0
00015E85 06                         byte_1534F:	dc.b 6
00015E86 2808 0842 F8               		dc.b $28, 8, 8,	$42, $F8
00015E8B 0807 083A 18               		dc.b 8,	7, 8, $3A, $18
00015E90 060A 0000 F6               		dc.b 6,	$A, 0, 0, $F6
00015E95 060A 0800 0E               		dc.b 6,	$A, 8, 0, $E
00015E9A 1E0A 1000 F6               		dc.b $1E, $A, $10, 0, $F6
00015E9F 1E0A 1800 0E               		dc.b $1E, $A, $18, 0, $E
00015EA4 06                         byte_1536E:	dc.b 6
00015EA5 2009 0834 00               		dc.b $20, 9, 8,	$34, 0
00015EAA 0006 082E 20               		dc.b 0,	6, 8, $2E, $20
00015EAF 000A 0000 00               		dc.b 0,	$A, 0, 0, 0
00015EB4 000A 0800 18               		dc.b 0,	$A, 8, 0, $18
00015EB9 180A 1000 00               		dc.b $18, $A, $10, 0, 0
00015EBE 180A 1800 18               		dc.b $18, $A, $18, 0, $18
00015EC3 06                         byte_1538D:	dc.b 6
00015EC4 1805 082A 18               		dc.b $18, 5, 8,	$2A, $18
00015EC9 F803 0826 28               		dc.b $F8, 3, 8,	$26, $28
00015ECE F60A 0000 06               		dc.b $F6, $A, 0, 0, 6
00015ED3 F60A 0800 1E               		dc.b $F6, $A, 8, 0, $1E
00015ED8 0E0A 1000 06               		dc.b $E, $A, $10, 0, 6
00015EDD 0E0A 1800 1E               		dc.b $E, $A, $18, 0, $1E
00015EE2 06                         byte_153AC:	dc.b 6
00015EE3 E805 0822 20               		dc.b $E8, 5, 8,	$22, $20
00015EE8 0805 1822 20               		dc.b 8,	5, $18,	$22, $20
00015EED E80A 0000 08               		dc.b $E8, $A, 0, 0, 8
00015EF2 E80A 0800 20               		dc.b $E8, $A, 8, 0, $20
00015EF7 000A 1000 08               		dc.b 0,	$A, $10, 0, 8
00015EFC 000A 1800 20               		dc.b 0,	$A, $18, 0, $20
00015F01 06                         byte_153CB:	dc.b 6
00015F02 D805 182A 18               		dc.b $D8, 5, $18, $2A, $18
00015F07 E803 1826 28               		dc.b $E8, 3, $18, $26, $28
00015F0C DA0A 0000 06               		dc.b $DA, $A, 0, 0, 6
00015F11 DA0A 0800 1E               		dc.b $DA, $A, 8, 0, $1E
00015F16 F20A 1000 06               		dc.b $F2, $A, $10, 0, 6
00015F1B F20A 1800 1E               		dc.b $F2, $A, $18, 0, $1E
00015F20 06                         byte_153EA:	dc.b 6
00015F21 D009 1834 00               		dc.b $D0, 9, $18, $34, 0
00015F26 E806 182E 20               		dc.b $E8, 6, $18, $2E, $20
00015F2B D00A 0000 00               		dc.b $D0, $A, 0, 0, 0
00015F30 D00A 0800 18               		dc.b $D0, $A, 8, 0, $18
00015F35 E80A 1000 00               		dc.b $E8, $A, $10, 0, 0
00015F3A E80A 1800 18               		dc.b $E8, $A, $18, 0, $18
00015F3F 06                         byte_15409:	dc.b 6
00015F40 D008 1842 F8               		dc.b $D0, 8, $18, $42, $F8
00015F45 D807 183A 18               		dc.b $D8, 7, $18, $3A, $18
00015F4A CA0A 0000 F6               		dc.b $CA, $A, 0, 0, $F6
00015F4F CA0A 0800 0E               		dc.b $CA, $A, 8, 0, $E
00015F54 E20A 1000 F6               		dc.b $E2, $A, $10, 0, $F6
00015F59 E20A 1800 0E               		dc.b $E2, $A, $18, 0, $E
00015F5E 06                         byte_15428:	dc.b 6
00015F5F D005 1045 E8               		dc.b $D0, 5, $10, $45, $E8
00015F64 D005 1845 08               		dc.b $D0, 5, $18, $45, 8
00015F69 C80A 0000 E8               		dc.b $C8, $A, 0, 0, $E8
00015F6E C80A 0800 00               		dc.b $C8, $A, 8, 0, 0
00015F73 E00A 1000 E8               		dc.b $E0, $A, $10, 0, $E8
00015F78 E00A 1800 00               		dc.b $E0, $A, $18, 0, 0
00015F7D 06                         byte_15447:	dc.b 6
00015F7E D807 103A D8               		dc.b $D8, 7, $10, $3A, $D8
00015F83 D008 1042 F0               		dc.b $D0, 8, $10, $42, $F0
00015F88 CA0A 0000 DA               		dc.b $CA, $A, 0, 0, $DA
00015F8D CA0A 0800 F2               		dc.b $CA, $A, 8, 0, $F2
00015F92 E20A 1000 DA               		dc.b $E2, $A, $10, 0, $DA
00015F97 E20A 1800 F2               		dc.b $E2, $A, $18, 0, $F2
00015F9C 06                         byte_15466:	dc.b 6
00015F9D E806 102E D0               		dc.b $E8, 6, $10, $2E, $D0
00015FA2 D009 1034 E8               		dc.b $D0, 9, $10, $34, $E8
00015FA7 D00A 0000 D0               		dc.b $D0, $A, 0, 0, $D0
00015FAC D00A 0800 E8               		dc.b $D0, $A, 8, 0, $E8
00015FB1 E80A 1000 D0               		dc.b $E8, $A, $10, 0, $D0
00015FB6 E80A 1800 E8               		dc.b $E8, $A, $18, 0, $E8
00015FBB 06                         byte_15485:	dc.b 6
00015FBC E803 1026 D0               		dc.b $E8, 3, $10, $26, $D0
00015FC1 D805 102A D8               		dc.b $D8, 5, $10, $2A, $D8
00015FC6 DA0A 0000 CA               		dc.b $DA, $A, 0, 0, $CA
00015FCB DA0A 0800 E2               		dc.b $DA, $A, 8, 0, $E2
00015FD0 F20A 1000 CA               		dc.b $F2, $A, $10, 0, $CA
00015FD5 F20A 1800 E2               		dc.b $F2, $A, $18, 0, $E2
00015FDA 0C                         byte_154A4:	dc.b $C
00015FDB C80D 0009 E0               		dc.b $C8, $D, 0, 9, $E0
00015FE0 D00A 0011 D0               		dc.b $D0, $A, 0, $11, $D0
00015FE5 E007 001A C8               		dc.b $E0, 7, 0,	$1A, $C8
00015FEA C80D 0809 00               		dc.b $C8, $D, 8, 9, 0
00015FEF D00A 0811 18               		dc.b $D0, $A, 8, $11, $18
00015FF4 E007 081A 28               		dc.b $E0, 7, 8,	$1A, $28
00015FF9 0007 101A C8               		dc.b 0,	7, $10,	$1A, $C8
00015FFE 180A 1011 D0               		dc.b $18, $A, $10, $11,	$D0
00016003 280D 1009 E0               		dc.b $28, $D, $10, 9, $E0
00016008 280D 1809 00               		dc.b $28, $D, $18, 9, 0
0001600D 180A 1811 18               		dc.b $18, $A, $18, $11,	$18
00016012 0007 181A 28               		dc.b 0,	7, $18,	$1A, $28
00016018 00                         		even
00016018 00                         		even
00016018                            
00016018                            ; ===========================================================================
00016018                            ; ---------------------------------------------------------------------------
00016018                            ; Object 67 - disc that	you run	around (SBZ)
00016018                            ; ---------------------------------------------------------------------------
00016018                            
00016018                            Obj67:					; XREF: Obj_Index
00016018 7000                       		moveq	#0,d0
0001601A 1028 0024                  		move.b	$24(a0),d0
0001601E 323B 0000                  		move.w	Obj67_Index(pc,d0.w),d1
00016022 4EFB 1000                  		jmp	Obj67_Index(pc,d1.w)
00016026                            ; ===========================================================================
00016026 0000                       Obj67_Index:	dc.w Obj67_Main-Obj67_Index
00016028 0000                       		dc.w Obj67_Action-Obj67_Index
0001602A                            ; ===========================================================================
0001602A                            
0001602A                            Obj67_Main:				; XREF: Obj67_Index
0001602A 5428 0024                  		addq.b	#2,$24(a0)
0001602E 217C 0000 0000 0004        		move.l	#Map_obj67,4(a0)
00016036 317C C344 0002             		move.w	#$C344,2(a0)
0001603C 117C 0004 0001             		move.b	#4,1(a0)
00016042 117C 0004 0018             		move.b	#4,$18(a0)
00016048 117C 0008 0019             		move.b	#8,$19(a0)
0001604E 3168 0008 0032             		move.w	8(a0),$32(a0)
00016054 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001605A 117C 0018 0034             		move.b	#$18,$34(a0)
00016060 117C 0048 0038             		move.b	#$48,$38(a0)
00016066 1228 0028                  		move.b	$28(a0),d1	; get object type
0001606A 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
0001606E 6700                       		beq.s	loc_15546
00016070 117C 0010 0034             		move.b	#$10,$34(a0)
00016076 117C 0038 0038             		move.b	#$38,$38(a0)
0001607C                            
0001607C                            loc_15546:
0001607C 1228 0028                  		move.b	$28(a0),d1	; get object type
00016080 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00016084 4881                       		ext.w	d1
00016086 E741                       		asl.w	#3,d1
00016088 3141 0036                  		move.w	d1,$36(a0)
0001608C 1028 0022                  		move.b	$22(a0),d0
00016090 E418                       		ror.b	#2,d0
00016092 0200 00C0                  		andi.b	#-$40,d0
00016096 1140 0026                  		move.b	d0,$26(a0)
0001609A                            
0001609A                            Obj67_Action:				; XREF: Obj67_Index
0001609A 6100 0000                  		bsr.w	Obj67_MoveSonic
0001609E 6100 0000                  		bsr.w	Obj67_MoveSpot
000160A2 6000 0000                  		bra.w	Obj67_ChkDel
000160A6                            ; ===========================================================================
000160A6                            
000160A6                            Obj67_MoveSonic:			; XREF: Obj67_Action
000160A6 7400                       		moveq	#0,d2
000160A8 1428 0038                  		move.b	$38(a0),d2
000160AC 3602                       		move.w	d2,d3
000160AE D643                       		add.w	d3,d3
000160B0 43F8 D000                  		lea	($FFFFD000).w,a1
000160B4 3029 0008                  		move.w	8(a1),d0
000160B8 9068 0032                  		sub.w	$32(a0),d0
000160BC D042                       		add.w	d2,d0
000160BE B043                       		cmp.w	d3,d0
000160C0 6400                       		bcc.s	loc_155A8
000160C2 3229 000C                  		move.w	$C(a1),d1
000160C6 9268 0030                  		sub.w	$30(a0),d1
000160CA D242                       		add.w	d2,d1
000160CC B243                       		cmp.w	d3,d1
000160CE 6400                       		bcc.s	loc_155A8
000160D0 0829 0001 0022             		btst	#1,$22(a1)
000160D6 6700                       		beq.s	loc_155B8
000160D8 4228 003A                  		clr.b	$3A(a0)
000160DC 4E75                       		rts	
000160DE                            ; ===========================================================================
000160DE                            
000160DE                            loc_155A8:
000160DE 4A28 003A                  		tst.b	$3A(a0)
000160E2 6700                       		beq.s	locret_155B6
000160E4 4229 0038                  		clr.b	$38(a1)
000160E8 4228 003A                  		clr.b	$3A(a0)
000160EC                            
000160EC                            locret_155B6:
000160EC 4E75                       		rts	
000160EE                            ; ===========================================================================
000160EE                            
000160EE                            loc_155B8:
000160EE 4A28 003A                  		tst.b	$3A(a0)
000160F2 6600                       		bne.s	loc_155E2
000160F4 117C 0001 003A             		move.b	#1,$3A(a0)
000160FA 0829 0002 0022             		btst	#2,$22(a1)
00016100 6600                       		bne.s	loc_155D0
00016102 4229 001C                  		clr.b	$1C(a1)
00016106                            
00016106                            loc_155D0:
00016106 08A9 0005 0022             		bclr	#5,$22(a1)
0001610C 137C 0001 001D             		move.b	#1,$1D(a1)
00016112 137C 0001 0038             		move.b	#1,$38(a1)
00016118                            
00016118                            loc_155E2:
00016118 3029 0014                  		move.w	$14(a1),d0
0001611C 4A68 0036                  		tst.w	$36(a0)
00016120 6A00                       		bpl.s	loc_15608
00016122 0C40 FC00                  		cmpi.w	#-$400,d0
00016126 6F00                       		ble.s	loc_155FA
00016128 337C FC00 0014             		move.w	#-$400,$14(a1)
0001612E 4E75                       		rts	
00016130                            ; ===========================================================================
00016130                            
00016130                            loc_155FA:
00016130 0C40 F100                  		cmpi.w	#-$F00,d0
00016134 6C00                       		bge.s	locret_15606
00016136 337C F100 0014             		move.w	#-$F00,$14(a1)
0001613C                            
0001613C                            locret_15606:
0001613C 4E75                       		rts	
0001613E                            ; ===========================================================================
0001613E                            
0001613E                            loc_15608:
0001613E 0C40 0400                  		cmpi.w	#$400,d0
00016142 6C00                       		bge.s	loc_15616
00016144 337C 0400 0014             		move.w	#$400,$14(a1)
0001614A 4E75                       		rts	
0001614C                            ; ===========================================================================
0001614C                            
0001614C                            loc_15616:
0001614C 0C40 0F00                  		cmpi.w	#$F00,d0
00016150 6F00                       		ble.s	locret_15622
00016152 337C 0F00 0014             		move.w	#$F00,$14(a1)
00016158                            
00016158                            locret_15622:
00016158 4E75                       		rts	
0001615A                            ; ===========================================================================
0001615A                            
0001615A                            Obj67_MoveSpot:				; XREF: Obj67_Action
0001615A 3028 0036                  		move.w	$36(a0),d0
0001615E D168 0026                  		add.w	d0,$26(a0)
00016162 1028 0026                  		move.b	$26(a0),d0
00016166 4EB9 0000 2D34             		jsr	(CalcSine).l
0001616C 3428 0030                  		move.w	$30(a0),d2
00016170 3628 0032                  		move.w	$32(a0),d3
00016174 7800                       		moveq	#0,d4
00016176 1828 0034                  		move.b	$34(a0),d4
0001617A E14C                       		lsl.w	#8,d4
0001617C 2A04                       		move.l	d4,d5
0001617E C9C0                       		muls.w	d0,d4
00016180 4844                       		swap	d4
00016182 CBC1                       		muls.w	d1,d5
00016184 4845                       		swap	d5
00016186 D842                       		add.w	d2,d4
00016188 DA43                       		add.w	d3,d5
0001618A 3144 000C                  		move.w	d4,$C(a0)
0001618E 3145 0008                  		move.w	d5,8(a0)
00016192 4E75                       		rts	
00016194                            ; ===========================================================================
00016194                            
00016194                            Obj67_ChkDel:				; XREF: Obj67_Action
00016194 3028 0032                  		move.w	$32(a0),d0
00016198 0240 FF80                  		andi.w	#-$80,d0
0001619C 3238 F700                  		move.w	($FFFFF700).w,d1
000161A0 0441 0080                  		subi.w	#$80,d1
000161A4 0241 FF80                  		andi.w	#-$80,d1
000161A8 9041                       		sub.w	d1,d0
000161AA 0C40 0280                  		cmpi.w	#$280,d0
000161AE 6200                       		bhi.s	Obj67_Delete
000161B0 4EF9 0000 E044             		jmp	DisplaySprite
000161B6                            ; ===========================================================================
000161B6                            
000161B6                            Obj67_Delete:
000161B6 4EF9 0000 E080             		jmp	DeleteObject
000161BC                            ; ===========================================================================
000161BC                            ; ---------------------------------------------------------------------------
000161BC                            ; Sprite mappings - disc that you run around (SBZ)
000161BC                            ; (It's just a small blob that moves around in a circle. The disc itself is
000161BC                            ; part of the level tiles.)
000161BC                            ; ---------------------------------------------------------------------------
000161BC                            Map_obj67:
000161BC                            	include "_maps\obj67.asm"
000161BC                            ; ---------------------------------------------------------------------------
000161BC                            ; Sprite mappings - disc that you run around (SBZ)
000161BC                            ; (It's just a small blob that moves around in a circle. The disc itself is
000161BC                            ; part of the level tiles.)
000161BC                            ; ---------------------------------------------------------------------------
000161BC 0000                       		dc.w byte_15688-Map_obj67
000161BE 01                         byte_15688:	dc.b 1
000161BF F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000161C4                            		even
000161C4                            		even
000161C4                            
000161C4                            ; ===========================================================================
000161C4                            ; ---------------------------------------------------------------------------
000161C4                            ; Object 68 - conveyor belts (SBZ)
000161C4                            ; ---------------------------------------------------------------------------
000161C4                            
000161C4                            Obj68:					; XREF: Obj_Index
000161C4 7000                       		moveq	#0,d0
000161C6 1028 0024                  		move.b	$24(a0),d0
000161CA 323B 0000                  		move.w	Obj68_Index(pc,d0.w),d1
000161CE 4EFB 1000                  		jmp	Obj68_Index(pc,d1.w)
000161D2                            ; ===========================================================================
000161D2 0000                       Obj68_Index:	dc.w Obj68_Main-Obj68_Index
000161D4 0000                       		dc.w Obj68_Action-Obj68_Index
000161D6                            ; ===========================================================================
000161D6                            
000161D6                            Obj68_Main:				; XREF: Obj68_Index
000161D6 5428 0024                  		addq.b	#2,$24(a0)
000161DA 117C 0080 0038             		move.b	#128,$38(a0)	; set width to 128 pixels
000161E0 1228 0028                  		move.b	$28(a0),d1	; get object type
000161E4 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
000161E8 6700                       		beq.s	loc_156BA	; if zero, branch
000161EA 117C 0038 0038             		move.b	#56,$38(a0)	; set width to 56 pixels
000161F0                            
000161F0                            loc_156BA:
000161F0 1228 0028                  		move.b	$28(a0),d1	; get object type
000161F4 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
000161F8 4881                       		ext.w	d1
000161FA E841                       		asr.w	#4,d1
000161FC 3141 0036                  		move.w	d1,$36(a0)	; set belt speed
00016200                            
00016200                            Obj68_Action:				; XREF: Obj68_Index
00016200 6100                       		bsr.s	Obj68_MoveSonic
00016202 3028 0008                  		move.w	8(a0),d0
00016206 0240 FF80                  		andi.w	#$FF80,d0
0001620A 3238 F700                  		move.w	($FFFFF700).w,d1
0001620E 0441 0080                  		subi.w	#$80,d1
00016212 0241 FF80                  		andi.w	#$FF80,d1
00016216 9041                       		sub.w	d1,d0
00016218 0C40 0280                  		cmpi.w	#$280,d0
0001621C 6200                       		bhi.s	Obj68_Delete
0001621E 4E75                       		rts	
00016220                            ; ===========================================================================
00016220                            
00016220                            Obj68_Delete:
00016220 4EF9 0000 E080             		jmp	DeleteObject
00016226                            ; ===========================================================================
00016226                            
00016226                            Obj68_MoveSonic:			; XREF: Obj68_Action
00016226 7400                       		moveq	#0,d2
00016228 1428 0038                  		move.b	$38(a0),d2
0001622C 3602                       		move.w	d2,d3
0001622E D643                       		add.w	d3,d3
00016230 43F8 D000                  		lea	($FFFFD000).w,a1
00016234 3029 0008                  		move.w	8(a1),d0
00016238 9068 0008                  		sub.w	8(a0),d0
0001623C D042                       		add.w	d2,d0
0001623E B043                       		cmp.w	d3,d0
00016240 6400                       		bcc.s	locret_1572E
00016242 3229 000C                  		move.w	$C(a1),d1
00016246 9268 000C                  		sub.w	$C(a0),d1
0001624A 0641 0030                  		addi.w	#$30,d1
0001624E 0C41 0030                  		cmpi.w	#$30,d1
00016252 6400                       		bcc.s	locret_1572E
00016254 0829 0001 0022             		btst	#1,$22(a1)
0001625A 6600                       		bne.s	locret_1572E
0001625C 3028 0036                  		move.w	$36(a0),d0
00016260 D169 0008                  		add.w	d0,8(a1)
00016264                            
00016264                            locret_1572E:
00016264 4E75                       		rts	
00016266                            
00016266                            ; ===========================================================================
00016266                            ; ---------------------------------------------------------------------------
00016266                            ; Object 69 - spinning platforms and trapdoors (SBZ)
00016266                            ; ---------------------------------------------------------------------------
00016266                            
00016266                            Obj69:					; XREF: Obj_Index
00016266 7000                       		moveq	#0,d0
00016268 1028 0024                  		move.b	$24(a0),d0
0001626C 323B 0000                  		move.w	Obj69_Index(pc,d0.w),d1
00016270 4EFB 1000                  		jmp	Obj69_Index(pc,d1.w)
00016274                            ; ===========================================================================
00016274 0000                       Obj69_Index:	dc.w Obj69_Main-Obj69_Index
00016276 0000                       		dc.w Obj69_Trapdoor-Obj69_Index
00016278 0000                       		dc.w Obj69_Spinner-Obj69_Index
0001627A                            ; ===========================================================================
0001627A                            
0001627A                            Obj69_Main:				; XREF: Obj69_Index
0001627A 5428 0024                  		addq.b	#2,$24(a0)
0001627E 217C 0000 0000 0004        		move.l	#Map_obj69,4(a0)
00016286 317C 4492 0002             		move.w	#$4492,2(a0)
0001628C 0028 0004 0001             		ori.b	#4,1(a0)
00016292 117C 0080 0019             		move.b	#$80,$19(a0)
00016298 7000                       		moveq	#0,d0
0001629A 1028 0028                  		move.b	$28(a0),d0
0001629E 0240 000F                  		andi.w	#$F,d0
000162A2 C0FC 003C                  		mulu.w	#$3C,d0
000162A6 3140 0032                  		move.w	d0,$32(a0)
000162AA 4A28 0028                  		tst.b	$28(a0)
000162AE 6A00                       		bpl.s	Obj69_Trapdoor
000162B0 5428 0024                  		addq.b	#2,$24(a0)
000162B4 217C 0000 0000 0004        		move.l	#Map_obj69a,4(a0)
000162BC 317C 04DF 0002             		move.w	#$4DF,2(a0)
000162C2 117C 0010 0019             		move.b	#$10,$19(a0)
000162C8 117C 0002 001C             		move.b	#2,$1C(a0)
000162CE 7000                       		moveq	#0,d0
000162D0 1028 0028                  		move.b	$28(a0),d0	; get object type
000162D4 3200                       		move.w	d0,d1
000162D6 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
000162DA C0FC 0006                  		mulu.w	#6,d0		; multiply by 6
000162DE 3140 0030                  		move.w	d0,$30(a0)	; set time delay
000162E2 3140 0032                  		move.w	d0,$32(a0)
000162E6 0241 0070                  		andi.w	#$70,d1
000162EA 0641 0010                  		addi.w	#$10,d1
000162EE E549                       		lsl.w	#2,d1
000162F0 5341                       		subq.w	#1,d1
000162F2 3141 0036                  		move.w	d1,$36(a0)
000162F6 6000                       		bra.s	Obj69_Spinner
000162F8                            ; ===========================================================================
000162F8                            
000162F8                            Obj69_Trapdoor:				; XREF: Obj69_Index
000162F8 5368 0030                  		subq.w	#1,$30(a0)
000162FC 6A00                       		bpl.s	Obj69_Animate
000162FE 3168 0032 0030             		move.w	$32(a0),$30(a0)
00016304 0868 0000 001C             		bchg	#0,$1C(a0)
0001630A 4A28 0001                  		tst.b	1(a0)
0001630E 6A00                       		bpl.s	Obj69_Animate
00016310 303C 00BB                  		move.w	#$BB,d0
00016314 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play door sound
0001631A                            
0001631A                            Obj69_Animate:
0001631A 43F9 0000 0000             		lea	(Ani_obj69).l,a1
00016320 4EB9 0000 B09A             		jsr	AnimateSprite
00016326 4A28 001A                  		tst.b	$1A(a0)		; is frame number 0 displayed?
0001632A 6600                       		bne.s	Obj69_NotSolid	; if not, branch
0001632C 323C 004B                  		move.w	#$4B,d1
00016330 343C 000C                  		move.w	#$C,d2
00016334 3602                       		move.w	d2,d3
00016336 5243                       		addq.w	#1,d3
00016338 3828 0008                  		move.w	8(a0),d4
0001633C 6100 A0D6                  		bsr.w	SolidObject
00016340 6000 9DAA                  		bra.w	MarkObjGone
00016344                            ; ===========================================================================
00016344                            
00016344                            Obj69_NotSolid:
00016344 0828 0003 0022             		btst	#3,$22(a0)
0001634A 6700                       		beq.s	Obj69_Display
0001634C 43F8 D000                  		lea	($FFFFD000).w,a1
00016350 08A9 0003 0022             		bclr	#3,$22(a1)
00016356 08A8 0003 0022             		bclr	#3,$22(a0)
0001635C 4228 0025                  		clr.b	$25(a0)
00016360                            
00016360                            Obj69_Display:
00016360 6000 9D8A                  		bra.w	MarkObjGone
00016364                            ; ===========================================================================
00016364                            
00016364                            Obj69_Spinner:				; XREF: Obj69_Index
00016364 3038 FE04                  		move.w	($FFFFFE04).w,d0
00016368 C068 0036                  		and.w	$36(a0),d0
0001636C 6600                       		bne.s	Obj69_Delay
0001636E 117C 0001 0034             		move.b	#1,$34(a0)
00016374                            
00016374                            Obj69_Delay:
00016374 4A28 0034                  		tst.b	$34(a0)
00016378 6700                       		beq.s	Obj69_Animate2
0001637A 5368 0030                  		subq.w	#1,$30(a0)
0001637E 6A00                       		bpl.s	Obj69_Animate2
00016380 3168 0032 0030             		move.w	$32(a0),$30(a0)
00016386 4228 0034                  		clr.b	$34(a0)
0001638A 0868 0000 001C             		bchg	#0,$1C(a0)
00016390                            
00016390                            Obj69_Animate2:
00016390 43F9 0000 0000             		lea	(Ani_obj69).l,a1
00016396 4EB9 0000 B09A             		jsr	AnimateSprite
0001639C 4A28 001A                  		tst.b	$1A(a0)		; check	if frame number	0 is displayed
000163A0 6600                       		bne.s	Obj69_NotSolid2	; if not, branch
000163A2 323C 001B                  		move.w	#$1B,d1
000163A6 343C 0007                  		move.w	#7,d2
000163AA 3602                       		move.w	d2,d3
000163AC 5243                       		addq.w	#1,d3
000163AE 3828 0008                  		move.w	8(a0),d4
000163B2 6100 A060                  		bsr.w	SolidObject
000163B6 6000 9D34                  		bra.w	MarkObjGone
000163BA                            ; ===========================================================================
000163BA                            
000163BA                            Obj69_NotSolid2:
000163BA 0828 0003 0022             		btst	#3,$22(a0)
000163C0 6700                       		beq.s	Obj69_Display2
000163C2 43F8 D000                  		lea	($FFFFD000).w,a1
000163C6 08A9 0003 0022             		bclr	#3,$22(a1)
000163CC 08A8 0003 0022             		bclr	#3,$22(a0)
000163D2 4228 0025                  		clr.b	$25(a0)
000163D6                            
000163D6                            Obj69_Display2:
000163D6 6000 9D14                  		bra.w	MarkObjGone
000163DA                            ; ===========================================================================
000163DA                            Ani_obj69:
000163DA                            	include "_anim\obj69.asm"
000163DA                            ; ---------------------------------------------------------------------------
000163DA                            ; Animation script - trapdoor (SBZ)
000163DA                            ; ---------------------------------------------------------------------------
000163DA 0000                       		dc.w byte_158AC-Ani_obj69
000163DC 0000                       		dc.w byte_158B2-Ani_obj69
000163DE 0000                       		dc.w byte_158B8-Ani_obj69
000163E0 0000                       		dc.w byte_158CC-Ani_obj69
000163E2 0300 0102 FE01             byte_158AC:	dc.b 3,	0, 1, 2, $FE, 1
000163E8 0302 0100 FE01             byte_158B2:	dc.b 3,	2, 1, 0, $FE, 1
000163EE 0100 0102 0304 4342 4140+  byte_158B8:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
000163FB 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
00016402 0100 0102 0304 4342 4140+  byte_158CC:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
0001640F 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
00016416                            		even
00016416                            		even
00016416                            
00016416                            ; ---------------------------------------------------------------------------
00016416                            ; Sprite mappings - trapdoor (SBZ)
00016416                            ; ---------------------------------------------------------------------------
00016416                            Map_obj69:
00016416                            	include "_maps\obj69.asm"
00016416                            ; ---------------------------------------------------------------------------
00016416                            ; Sprite mappings - trapdoor (SBZ)
00016416                            ; ---------------------------------------------------------------------------
00016416 0000                       		dc.w byte_158E6-Map_obj69
00016418 0000                       		dc.w byte_158FB-Map_obj69
0001641A 0000                       		dc.w byte_15924-Map_obj69
0001641C 04                         byte_158E6:	dc.b 4
0001641D F40E 0000 C0               		dc.b $F4, $E, 0, 0, $C0
00016422 F40E 0800 E0               		dc.b $F4, $E, 8, 0, $E0
00016427 F40E 0000 00               		dc.b $F4, $E, 0, 0, 0
0001642C F40E 0800 20               		dc.b $F4, $E, 8, 0, $20
00016431 08                         byte_158FB:	dc.b 8
00016432 F20F 000C B6               		dc.b $F2, $F, 0, $C, $B6
00016437 1A0F 180C D6               		dc.b $1A, $F, $18, $C, $D6
0001643C 020A 001C D6               		dc.b 2,	$A, 0, $1C, $D6
00016441 120A 181C BE               		dc.b $12, $A, $18, $1C,	$BE
00016446 F20F 080C 2A               		dc.b $F2, $F, 8, $C, $2A
0001644B 1A0F 100C 0A               		dc.b $1A, $F, $10, $C, $A
00016450 020A 081C 12               		dc.b 2,	$A, 8, $1C, $12
00016455 120A 101C 2A               		dc.b $12, $A, $10, $1C,	$2A
0001645A 04                         byte_15924:	dc.b 4
0001645B 000B 0025 B4               		dc.b 0,	$B, 0, $25, $B4
00016460 200B 1025 B4               		dc.b $20, $B, $10, $25,	$B4
00016465 000B 0025 34               		dc.b 0,	$B, 0, $25, $34
0001646A 200B 1025 34               		dc.b $20, $B, $10, $25,	$34
00016470 00                         		even
00016470 00                         		even
00016470                            
00016470                            ; ---------------------------------------------------------------------------
00016470                            ; Sprite mappings - spinning platforms (SBZ)
00016470                            ; ---------------------------------------------------------------------------
00016470                            Map_obj69a:
00016470                            	include "_maps\obj69a.asm"
00016470                            ; ---------------------------------------------------------------------------
00016470                            ; Sprite mappings - spinning platforms (SBZ)
00016470                            ; ---------------------------------------------------------------------------
00016470 0000 0000                  		dc.w byte_15944-Map_obj69a, byte_1594F-Map_obj69a
00016474 0000 0000                  		dc.w byte_1595A-Map_obj69a, byte_15965-Map_obj69a
00016478 0000                       		dc.w byte_15970-Map_obj69a
0001647A 02                         byte_15944:	dc.b 2
0001647B F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
00016480 F805 0800 00               		dc.b $F8, 5, 8,	0, 0
00016485 02                         byte_1594F:	dc.b 2
00016486 F00D 0014 F0               		dc.b $F0, $D, 0, $14, $F0
0001648B 000D 001C F0               		dc.b 0,	$D, 0, $1C, $F0
00016490 02                         byte_1595A:	dc.b 2
00016491 F009 0004 F0               		dc.b $F0, 9, 0,	4, $F0
00016496 0009 000A F8               		dc.b 0,	9, 0, $A, $F8
0001649B 02                         byte_15965:	dc.b 2
0001649C F009 0024 F0               		dc.b $F0, 9, 0,	$24, $F0
000164A1 0009 002A F8               		dc.b 0,	9, 0, $2A, $F8
000164A6 02                         byte_15970:	dc.b 2
000164A7 F005 0010 F8               		dc.b $F0, 5, 0,	$10, $F8
000164AC 0005 1010 F8               		dc.b 0,	5, $10,	$10, $F8
000164B2 00                         		even
000164B2 00                         		even
000164B2                            
000164B2                            ; ===========================================================================
000164B2                            ; ---------------------------------------------------------------------------
000164B2                            ; Object 6A - ground saws and pizza cutters (SBZ)
000164B2                            ; ---------------------------------------------------------------------------
000164B2                            
000164B2                            Obj6A:					; XREF: Obj_Index
000164B2 7000                       		moveq	#0,d0
000164B4 1028 0024                  		move.b	$24(a0),d0
000164B8 323B 0000                  		move.w	Obj6A_Index(pc,d0.w),d1
000164BC 4EFB 1000                  		jmp	Obj6A_Index(pc,d1.w)
000164C0                            ; ===========================================================================
000164C0 0000                       Obj6A_Index:	dc.w Obj6A_Main-Obj6A_Index
000164C2 0000                       		dc.w Obj6A_Action-Obj6A_Index
000164C4                            ; ===========================================================================
000164C4                            
000164C4                            Obj6A_Main:				; XREF: Obj6A_Index
000164C4 5428 0024                  		addq.b	#2,$24(a0)
000164C8 217C 0000 0000 0004        		move.l	#Map_obj6A,4(a0)
000164D0 317C 43B5 0002             		move.w	#$43B5,2(a0)
000164D6 117C 0004 0001             		move.b	#4,1(a0)
000164DC 117C 0004 0018             		move.b	#4,$18(a0)
000164E2 117C 0020 0019             		move.b	#$20,$19(a0)
000164E8 3168 0008 003A             		move.w	8(a0),$3A(a0)
000164EE 3168 000C 0038             		move.w	$C(a0),$38(a0)
000164F4 0C28 0003 0028             		cmpi.b	#3,$28(a0)
000164FA 6400                       		bcc.s	Obj6A_Action
000164FC 117C 00A2 0020             		move.b	#$A2,$20(a0)
00016502                            
00016502                            Obj6A_Action:				; XREF: Obj6A_Index
00016502 7000                       		moveq	#0,d0
00016504 1028 0028                  		move.b	$28(a0),d0
00016508 0240 0007                  		andi.w	#7,d0
0001650C D040                       		add.w	d0,d0
0001650E 323B 0000                  		move.w	Obj6A_TypeIndex(pc,d0.w),d1
00016512 4EBB 1000                  		jsr	Obj6A_TypeIndex(pc,d1.w)
00016516 3028 003A                  		move.w	$3A(a0),d0
0001651A 0240 FF80                  		andi.w	#$FF80,d0
0001651E 3238 F700                  		move.w	($FFFFF700).w,d1
00016522 0441 0080                  		subi.w	#$80,d1
00016526 0241 FF80                  		andi.w	#$FF80,d1
0001652A 9041                       		sub.w	d1,d0
0001652C 0C40 0280                  		cmpi.w	#$280,d0
00016530 6200                       		bhi.s	Obj6A_Delete
00016532 4EF9 0000 E044             		jmp	DisplaySprite
00016538                            ; ===========================================================================
00016538                            
00016538                            Obj6A_Delete:
00016538 4EF9 0000 E080             		jmp	DeleteObject
0001653E                            ; ===========================================================================
0001653E 0000 0000                  Obj6A_TypeIndex:dc.w Obj6A_Type00-Obj6A_TypeIndex, Obj6A_Type01-Obj6A_TypeIndex
00016542 0000 0000                  		dc.w Obj6A_Type02-Obj6A_TypeIndex, Obj6A_Type03-Obj6A_TypeIndex
00016546 0000                       		dc.w Obj6A_Type04-Obj6A_TypeIndex
00016548                            ; ===========================================================================
00016548                            
00016548                            Obj6A_Type00:				; XREF: Obj6A_TypeIndex
00016548 4E75                       		rts	
0001654A                            ; ===========================================================================
0001654A                            
0001654A                            Obj6A_Type01:				; XREF: Obj6A_TypeIndex
0001654A 323C 0060                  		move.w	#$60,d1
0001654E 7000                       		moveq	#0,d0
00016550 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00016554 0828 0000 0022             		btst	#0,$22(a0)
0001655A 6700                       		beq.s	Obj6A_Animate01
0001655C 4440                       		neg.w	d0
0001655E D041                       		add.w	d1,d0
00016560                            
00016560                            Obj6A_Animate01:
00016560 3228 003A                  		move.w	$3A(a0),d1
00016564 9240                       		sub.w	d0,d1
00016566 3141 0008                  		move.w	d1,8(a0)	; move saw sideways
0001656A 5328 001E                  		subq.b	#1,$1E(a0)
0001656E 6A00                       		bpl.s	loc_15A46
00016570 117C 0002 001E             		move.b	#2,$1E(a0)	; time between frame changes
00016576 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
0001657C                            
0001657C                            loc_15A46:
0001657C 4A28 0001                  		tst.b	1(a0)
00016580 6A00                       		bpl.s	locret_15A60
00016582 3038 FE04                  		move.w	($FFFFFE04).w,d0
00016586 0240 000F                  		andi.w	#$F,d0
0001658A 6600                       		bne.s	locret_15A60
0001658C 303C 00B0                  		move.w	#$B0,d0
00016590 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play saw sound
00016596                            
00016596                            locret_15A60:
00016596 4E75                       		rts	
00016598                            ; ===========================================================================
00016598                            
00016598                            Obj6A_Type02:				; XREF: Obj6A_TypeIndex
00016598 323C 0030                  		move.w	#$30,d1
0001659C 7000                       		moveq	#0,d0
0001659E 1038 FE64                  		move.b	($FFFFFE64).w,d0
000165A2 0828 0000 0022             		btst	#0,$22(a0)
000165A8 6700                       		beq.s	Obj6A_Animate02
000165AA 4440                       		neg.w	d0
000165AC 0640 0080                  		addi.w	#$80,d0
000165B0                            
000165B0                            Obj6A_Animate02:
000165B0 3228 0038                  		move.w	$38(a0),d1
000165B4 9240                       		sub.w	d0,d1
000165B6 3141 000C                  		move.w	d1,$C(a0)	; move saw vertically
000165BA 5328 001E                  		subq.b	#1,$1E(a0)
000165BE 6A00                       		bpl.s	loc_15A96
000165C0 117C 0002 001E             		move.b	#2,$1E(a0)
000165C6 0868 0000 001A             		bchg	#0,$1A(a0)
000165CC                            
000165CC                            loc_15A96:
000165CC 4A28 0001                  		tst.b	1(a0)
000165D0 6A00                       		bpl.s	locret_15AB0
000165D2 1038 FE64                  		move.b	($FFFFFE64).w,d0
000165D6 0C00 0018                  		cmpi.b	#$18,d0
000165DA 6600                       		bne.s	locret_15AB0
000165DC 303C 00B0                  		move.w	#$B0,d0
000165E0 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play saw sound
000165E6                            
000165E6                            locret_15AB0:
000165E6 4E75                       		rts	
000165E8                            ; ===========================================================================
000165E8                            
000165E8                            Obj6A_Type03:				; XREF: Obj6A_TypeIndex
000165E8 4A28 003D                  		tst.b	$3D(a0)
000165EC 6600                       		bne.s	Obj6A_Animate03
000165EE 3038 D008                  		move.w	($FFFFD008).w,d0
000165F2 0440 00C0                  		subi.w	#$C0,d0
000165F6 6500                       		bcs.s	loc_15B02
000165F8 9068 0008                  		sub.w	8(a0),d0
000165FC 6500                       		bcs.s	loc_15B02
000165FE 3038 D00C                  		move.w	($FFFFD00C).w,d0
00016602 0440 0080                  		subi.w	#$80,d0
00016606 B068 000C                  		cmp.w	$C(a0),d0
0001660A 6400                       		bcc.s	locret_15B04
0001660C 0640 0100                  		addi.w	#$100,d0
00016610 B068 000C                  		cmp.w	$C(a0),d0
00016614 6500                       		bcs.s	locret_15B04
00016616 117C 0001 003D             		move.b	#1,$3D(a0)
0001661C 317C 0600 0010             		move.w	#$600,$10(a0)	; move object to the right
00016622 117C 00A2 0020             		move.b	#$A2,$20(a0)
00016628 117C 0002 001A             		move.b	#2,$1A(a0)
0001662E 303C 00B0                  		move.w	#$B0,d0
00016632 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play saw sound
00016638                            
00016638                            loc_15B02:
00016638 588F                       		addq.l	#4,sp
0001663A                            
0001663A                            locret_15B04:
0001663A 4E75                       		rts	
0001663C                            ; ===========================================================================
0001663C                            
0001663C                            Obj6A_Animate03:			; XREF: ROM:00015AB6j
0001663C 4EB9 0000 E01E             		jsr	SpeedToPos
00016642 3168 0008 003A             		move.w	8(a0),$3A(a0)
00016648 5328 001E                  		subq.b	#1,$1E(a0)
0001664C 6A00                       		bpl.s	locret_15B24
0001664E 117C 0002 001E             		move.b	#2,$1E(a0)
00016654 0868 0000 001A             		bchg	#0,$1A(a0)
0001665A                            
0001665A                            locret_15B24:
0001665A 4E75                       		rts	
0001665C                            ; ===========================================================================
0001665C                            
0001665C                            Obj6A_Type04:				; XREF: Obj6A_TypeIndex
0001665C 4A28 003D                  		tst.b	$3D(a0)
00016660 6600                       		bne.s	Obj6A_Animate04
00016662 3038 D008                  		move.w	($FFFFD008).w,d0
00016666 0640 00E0                  		addi.w	#$E0,d0
0001666A 9068 0008                  		sub.w	8(a0),d0
0001666E 6400                       		bcc.s	loc_15B74
00016670 3038 D00C                  		move.w	($FFFFD00C).w,d0
00016674 0440 0080                  		subi.w	#$80,d0
00016678 B068 000C                  		cmp.w	$C(a0),d0
0001667C 6400                       		bcc.s	locret_15B76
0001667E 0640 0100                  		addi.w	#$100,d0
00016682 B068 000C                  		cmp.w	$C(a0),d0
00016686 6500                       		bcs.s	locret_15B76
00016688 117C 0001 003D             		move.b	#1,$3D(a0)
0001668E 317C FA00 0010             		move.w	#-$600,$10(a0)	; move object to the left
00016694 117C 00A2 0020             		move.b	#$A2,$20(a0)
0001669A 117C 0002 001A             		move.b	#2,$1A(a0)
000166A0 303C 00B0                  		move.w	#$B0,d0
000166A4 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play saw sound
000166AA                            
000166AA                            loc_15B74:
000166AA 588F                       		addq.l	#4,sp
000166AC                            
000166AC                            locret_15B76:
000166AC 4E75                       		rts	
000166AE                            ; ===========================================================================
000166AE                            
000166AE                            Obj6A_Animate04:
000166AE 4EB9 0000 E01E             		jsr	SpeedToPos
000166B4 3168 0008 003A             		move.w	8(a0),$3A(a0)
000166BA 5328 001E                  		subq.b	#1,$1E(a0)
000166BE 6A00                       		bpl.s	locret_15B96
000166C0 117C 0002 001E             		move.b	#2,$1E(a0)
000166C6 0868 0000 001A             		bchg	#0,$1A(a0)
000166CC                            
000166CC                            locret_15B96:
000166CC 4E75                       		rts	
000166CE                            ; ===========================================================================
000166CE                            ; ---------------------------------------------------------------------------
000166CE                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
000166CE                            ; ---------------------------------------------------------------------------
000166CE                            Map_obj6A:
000166CE                            	include "_maps\obj6A.asm"
000166CE                            ; ---------------------------------------------------------------------------
000166CE                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
000166CE                            ; ---------------------------------------------------------------------------
000166CE 0000 0000                  		dc.w byte_15BA0-Map_obj6A, byte_15BC4-Map_obj6A
000166D2 0000 0000                  		dc.w byte_15BE8-Map_obj6A, byte_15BFD-Map_obj6A
000166D6 07                         byte_15BA0:	dc.b 7
000166D7 C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
000166DC D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
000166E1 E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
000166E6 E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
000166EB E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
000166F0 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
000166F5 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
000166FA 07                         byte_15BC4:	dc.b 7
000166FB C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
00016700 D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
00016705 E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
0001670A E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
0001670F E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
00016714 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
00016719 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
0001671E 04                         byte_15BE8:	dc.b 4
0001671F E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
00016724 E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
00016729 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
0001672E 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
00016733 04                         byte_15BFD:	dc.b 4
00016734 E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
00016739 E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
0001673E 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
00016743 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
00016748                            		even
00016748                            		even
00016748                            
00016748                            ; ===========================================================================
00016748                            ; ---------------------------------------------------------------------------
00016748                            ; Object 6B - stomper (SBZ)
00016748                            ; ---------------------------------------------------------------------------
00016748                            
00016748                            Obj6B:					; XREF: Obj_Index
00016748 7000                       		moveq	#0,d0
0001674A 1028 0024                  		move.b	$24(a0),d0
0001674E 323B 0000                  		move.w	Obj6B_Index(pc,d0.w),d1
00016752 4EFB 1000                  		jmp	Obj6B_Index(pc,d1.w)
00016756                            ; ===========================================================================
00016756 0000                       Obj6B_Index:	dc.w Obj6B_Main-Obj6B_Index
00016758 0000                       		dc.w Obj6B_Action-Obj6B_Index
0001675A                            
0001675A 400C 8001                  Obj6B_Var:	dc.b  $40,  $C,	$80,   1 ; width, height, ????,	type number
0001675E 1C20 3803                  		dc.b  $1C, $20,	$38,   3
00016762 1C20 4004                  		dc.b  $1C, $20,	$40,   4
00016766 1C20 6004                  		dc.b  $1C, $20,	$60,   4
0001676A 8040 0005                  		dc.b  $80, $40,	  0,   5
0001676E                            ; ===========================================================================
0001676E                            
0001676E                            Obj6B_Main:				; XREF: Obj6B_Index
0001676E 5428 0024                  		addq.b	#2,$24(a0)
00016772 7000                       		moveq	#0,d0
00016774 1028 0028                  		move.b	$28(a0),d0
00016778 E448                       		lsr.w	#2,d0
0001677A 0240 001C                  		andi.w	#$1C,d0
0001677E 47FB 00DA                  		lea	Obj6B_Var(pc,d0.w),a3
00016782 115B 0019                  		move.b	(a3)+,$19(a0)
00016786 115B 0016                  		move.b	(a3)+,$16(a0)
0001678A E448                       		lsr.w	#2,d0
0001678C 1140 001A                  		move.b	d0,$1A(a0)
00016790 217C 0000 0000 0004        		move.l	#Map_obj6B,4(a0)
00016798 317C 22C0 0002             		move.w	#$22C0,2(a0)
0001679E 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ/SBZ3
000167A4 6600                       		bne.s	Obj6B_SBZ12	; if not, branch
000167A6 08F8 0000 F7CB             		bset	#0,($FFFFF7CB).w
000167AC 6700                       		beq.s	Obj6B_SBZ3
000167AE                            
000167AE                            Obj6B_ChkGone:				; XREF: Obj6B_SBZ3
000167AE 45F8 FC00                  		lea	($FFFFFC00).w,a2
000167B2 7000                       		moveq	#0,d0
000167B4 1028 0023                  		move.b	$23(a0),d0
000167B8 6700                       		beq.s	Obj6B_Delete
000167BA 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000167C0                            
000167C0                            Obj6B_Delete:
000167C0 4EF9 0000 E080             		jmp	DeleteObject
000167C6                            ; ===========================================================================
000167C6                            
000167C6                            Obj6B_SBZ3:				; XREF: Obj6B_Main
000167C6 317C 41F0 0002             		move.w	#$41F0,2(a0)
000167CC 0C68 0A80 0008             		cmpi.w	#$A80,8(a0)
000167D2 6600                       		bne.s	Obj6B_SBZ12
000167D4 45F8 FC00                  		lea	($FFFFFC00).w,a2
000167D8 7000                       		moveq	#0,d0
000167DA 1028 0023                  		move.b	$23(a0),d0
000167DE 6700                       		beq.s	Obj6B_SBZ12
000167E0 0832 0000 0002             		btst	#0,2(a2,d0.w)
000167E6 6700                       		beq.s	Obj6B_SBZ12
000167E8 4238 F7CB                  		clr.b	($FFFFF7CB).w
000167EC 60C0                       		bra.s	Obj6B_ChkGone
000167EE                            ; ===========================================================================
000167EE                            
000167EE                            Obj6B_SBZ12:				; XREF: Obj6B_Main
000167EE 0028 0004 0001             		ori.b	#4,1(a0)
000167F4 117C 0004 0018             		move.b	#4,$18(a0)
000167FA 3168 0008 0034             		move.w	8(a0),$34(a0)
00016800 3168 000C 0030             		move.w	$C(a0),$30(a0)
00016806 7000                       		moveq	#0,d0
00016808 101B                       		move.b	(a3)+,d0
0001680A 3140 003C                  		move.w	d0,$3C(a0)
0001680E 7000                       		moveq	#0,d0
00016810 1028 0028                  		move.b	$28(a0),d0
00016814 6A00                       		bpl.s	Obj6B_Action
00016816 0200 000F                  		andi.b	#$F,d0
0001681A 1140 003E                  		move.b	d0,$3E(a0)
0001681E 1153 0028                  		move.b	(a3),$28(a0)
00016822 0C13 0005                  		cmpi.b	#5,(a3)
00016826 6600                       		bne.s	Obj6B_ChkGone2
00016828 08E8 0004 0001             		bset	#4,1(a0)
0001682E                            
0001682E                            Obj6B_ChkGone2:
0001682E 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016832 7000                       		moveq	#0,d0
00016834 1028 0023                  		move.b	$23(a0),d0
00016838 6700                       		beq.s	Obj6B_Action
0001683A 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00016840                            
00016840                            Obj6B_Action:				; XREF: Obj6B_Index
00016840 3F28 0008                  		move.w	8(a0),-(sp)
00016844 7000                       		moveq	#0,d0
00016846 1028 0028                  		move.b	$28(a0),d0
0001684A 0240 000F                  		andi.w	#$F,d0
0001684E D040                       		add.w	d0,d0
00016850 323B 0000                  		move.w	Obj6B_TypeIndex(pc,d0.w),d1
00016854 4EBB 1000                  		jsr	Obj6B_TypeIndex(pc,d1.w)
00016858 381F                       		move.w	(sp)+,d4
0001685A 4A28 0001                  		tst.b	1(a0)
0001685E 6A00                       		bpl.s	Obj6B_ChkDel
00016860 7200                       		moveq	#0,d1
00016862 1228 0019                  		move.b	$19(a0),d1
00016866 0641 000B                  		addi.w	#$B,d1
0001686A 7400                       		moveq	#0,d2
0001686C 1428 0016                  		move.b	$16(a0),d2
00016870 3602                       		move.w	d2,d3
00016872 5243                       		addq.w	#1,d3
00016874 6100 9B9E                  		bsr.w	SolidObject
00016878                            
00016878                            Obj6B_ChkDel:
00016878 3028 0034                  		move.w	$34(a0),d0
0001687C 0240 FF80                  		andi.w	#$FF80,d0
00016880 3238 F700                  		move.w	($FFFFF700).w,d1
00016884 0441 0080                  		subi.w	#$80,d1
00016888 0241 FF80                  		andi.w	#$FF80,d1
0001688C 9041                       		sub.w	d1,d0
0001688E 0C40 0280                  		cmpi.w	#$280,d0
00016892 6200                       		bhi.s	loc_15D64
00016894 4EF9 0000 E044             		jmp	DisplaySprite
0001689A                            ; ===========================================================================
0001689A                            
0001689A                            loc_15D64:
0001689A 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
000168A0 6600                       		bne.s	Obj6B_Delete2
000168A2 4238 F7CB                  		clr.b	($FFFFF7CB).w
000168A6 45F8 FC00                  		lea	($FFFFFC00).w,a2
000168AA 7000                       		moveq	#0,d0
000168AC 1028 0023                  		move.b	$23(a0),d0
000168B0 6700                       		beq.s	Obj6B_Delete2
000168B2 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000168B8                            
000168B8                            Obj6B_Delete2:
000168B8 4EF9 0000 E080             		jmp	DeleteObject
000168BE                            ; ===========================================================================
000168BE 0000 0000                  Obj6B_TypeIndex:dc.w Obj6B_Type00-Obj6B_TypeIndex, Obj6B_Type01-Obj6B_TypeIndex
000168C2 0000 0000                  		dc.w Obj6B_Type02-Obj6B_TypeIndex, Obj6B_Type03-Obj6B_TypeIndex
000168C6 0000 0000                  		dc.w Obj6B_Type04-Obj6B_TypeIndex, Obj6B_Type05-Obj6B_TypeIndex
000168CA                            ; ===========================================================================
000168CA                            
000168CA                            Obj6B_Type00:				; XREF: Obj6B_TypeIndex
000168CA 4E75                       		rts	
000168CC                            ; ===========================================================================
000168CC                            
000168CC                            Obj6B_Type01:				; XREF: Obj6B_TypeIndex
000168CC 4A28 0038                  		tst.b	$38(a0)
000168D0 6600                       		bne.s	loc_15DB4
000168D2 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
000168D6 7000                       		moveq	#0,d0
000168D8 1028 003E                  		move.b	$3E(a0),d0
000168DC 0832 0000 0000             		btst	#0,(a2,d0.w)
000168E2 6700                       		beq.s	loc_15DC2
000168E4 117C 0001 0038             		move.b	#1,$38(a0)
000168EA                            
000168EA                            loc_15DB4:
000168EA 3028 003C                  		move.w	$3C(a0),d0
000168EE B068 003A                  		cmp.w	$3A(a0),d0
000168F2 6700                       		beq.s	loc_15DE0
000168F4 5468 003A                  		addq.w	#2,$3A(a0)
000168F8                            
000168F8                            loc_15DC2:
000168F8 3028 003A                  		move.w	$3A(a0),d0
000168FC 0828 0000 0022             		btst	#0,$22(a0)
00016902 6700                       		beq.s	loc_15DD4
00016904 4440                       		neg.w	d0
00016906 0640 0080                  		addi.w	#$80,d0
0001690A                            
0001690A                            loc_15DD4:
0001690A 3228 0034                  		move.w	$34(a0),d1
0001690E 9240                       		sub.w	d0,d1
00016910 3141 0008                  		move.w	d1,8(a0)
00016914 4E75                       		rts	
00016916                            ; ===========================================================================
00016916                            
00016916                            loc_15DE0:
00016916 5228 0028                  		addq.b	#1,$28(a0)
0001691A 317C 00B4 0036             		move.w	#$B4,$36(a0)
00016920 4228 0038                  		clr.b	$38(a0)
00016924 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016928 7000                       		moveq	#0,d0
0001692A 1028 0023                  		move.b	$23(a0),d0
0001692E 67C8                       		beq.s	loc_15DC2
00016930 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00016936 60C0                       		bra.s	loc_15DC2
00016938                            ; ===========================================================================
00016938                            
00016938                            Obj6B_Type02:				; XREF: Obj6B_TypeIndex
00016938 4A28 0038                  		tst.b	$38(a0)
0001693C 6600                       		bne.s	loc_15E14
0001693E 5368 0036                  		subq.w	#1,$36(a0)
00016942 6600                       		bne.s	loc_15E1E
00016944 117C 0001 0038             		move.b	#1,$38(a0)
0001694A                            
0001694A                            loc_15E14:
0001694A 4A68 003A                  		tst.w	$3A(a0)
0001694E 6700                       		beq.s	loc_15E3C
00016950 5568 003A                  		subq.w	#2,$3A(a0)
00016954                            
00016954                            loc_15E1E:
00016954 3028 003A                  		move.w	$3A(a0),d0
00016958 0828 0000 0022             		btst	#0,$22(a0)
0001695E 6700                       		beq.s	loc_15E30
00016960 4440                       		neg.w	d0
00016962 0640 0080                  		addi.w	#$80,d0
00016966                            
00016966                            loc_15E30:
00016966 3228 0034                  		move.w	$34(a0),d1
0001696A 9240                       		sub.w	d0,d1
0001696C 3141 0008                  		move.w	d1,8(a0)
00016970 4E75                       		rts	
00016972                            ; ===========================================================================
00016972                            
00016972                            loc_15E3C:
00016972 5328 0028                  		subq.b	#1,$28(a0)
00016976 4228 0038                  		clr.b	$38(a0)
0001697A 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001697E 7000                       		moveq	#0,d0
00016980 1028 0023                  		move.b	$23(a0),d0
00016984 67CE                       		beq.s	loc_15E1E
00016986 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
0001698C 60C6                       		bra.s	loc_15E1E
0001698E                            ; ===========================================================================
0001698E                            
0001698E                            Obj6B_Type03:				; XREF: Obj6B_TypeIndex
0001698E 4A28 0038                  		tst.b	$38(a0)
00016992 6600                       		bne.s	loc_15E7C
00016994 4A68 003A                  		tst.w	$3A(a0)
00016998 6700                       		beq.s	loc_15E6A
0001699A 5368 003A                  		subq.w	#1,$3A(a0)
0001699E 6000                       		bra.s	loc_15E8E
000169A0                            ; ===========================================================================
000169A0                            
000169A0                            loc_15E6A:
000169A0 5368 0036                  		subq.w	#1,$36(a0)
000169A4 6A00                       		bpl.s	loc_15E8E
000169A6 317C 003C 0036             		move.w	#$3C,$36(a0)
000169AC 117C 0001 0038             		move.b	#1,$38(a0)
000169B2                            
000169B2                            loc_15E7C:
000169B2 5068 003A                  		addq.w	#8,$3A(a0)
000169B6 3028 003A                  		move.w	$3A(a0),d0
000169BA B068 003C                  		cmp.w	$3C(a0),d0
000169BE 6600                       		bne.s	loc_15E8E
000169C0 4228 0038                  		clr.b	$38(a0)
000169C4                            
000169C4                            loc_15E8E:
000169C4 3028 003A                  		move.w	$3A(a0),d0
000169C8 0828 0000 0022             		btst	#0,$22(a0)
000169CE 6700                       		beq.s	loc_15EA0
000169D0 4440                       		neg.w	d0
000169D2 0640 0038                  		addi.w	#$38,d0
000169D6                            
000169D6                            loc_15EA0:
000169D6 3228 0030                  		move.w	$30(a0),d1
000169DA D240                       		add.w	d0,d1
000169DC 3141 000C                  		move.w	d1,$C(a0)
000169E0 4E75                       		rts	
000169E2                            ; ===========================================================================
000169E2                            
000169E2                            Obj6B_Type04:				; XREF: Obj6B_TypeIndex
000169E2 4A28 0038                  		tst.b	$38(a0)
000169E6 6600                       		bne.s	loc_15ED0
000169E8 4A68 003A                  		tst.w	$3A(a0)
000169EC 6700                       		beq.s	loc_15EBE
000169EE 5168 003A                  		subq.w	#8,$3A(a0)
000169F2 6000                       		bra.s	loc_15EF0
000169F4                            ; ===========================================================================
000169F4                            
000169F4                            loc_15EBE:
000169F4 5368 0036                  		subq.w	#1,$36(a0)
000169F8 6A00                       		bpl.s	loc_15EF0
000169FA 317C 003C 0036             		move.w	#$3C,$36(a0)
00016A00 117C 0001 0038             		move.b	#1,$38(a0)
00016A06                            
00016A06                            loc_15ED0:
00016A06 3028 003A                  		move.w	$3A(a0),d0
00016A0A B068 003C                  		cmp.w	$3C(a0),d0
00016A0E 6700                       		beq.s	loc_15EE0
00016A10 5068 003A                  		addq.w	#8,$3A(a0)
00016A14 6000                       		bra.s	loc_15EF0
00016A16                            ; ===========================================================================
00016A16                            
00016A16                            loc_15EE0:
00016A16 5368 0036                  		subq.w	#1,$36(a0)
00016A1A 6A00                       		bpl.s	loc_15EF0
00016A1C 317C 003C 0036             		move.w	#$3C,$36(a0)
00016A22 4228 0038                  		clr.b	$38(a0)
00016A26                            
00016A26                            loc_15EF0:
00016A26 3028 003A                  		move.w	$3A(a0),d0
00016A2A 0828 0000 0022             		btst	#0,$22(a0)
00016A30 6700                       		beq.s	loc_15F02
00016A32 4440                       		neg.w	d0
00016A34 0640 0038                  		addi.w	#$38,d0
00016A38                            
00016A38                            loc_15F02:
00016A38 3228 0030                  		move.w	$30(a0),d1
00016A3C D240                       		add.w	d0,d1
00016A3E 3141 000C                  		move.w	d1,$C(a0)
00016A42 4E75                       		rts	
00016A44                            ; ===========================================================================
00016A44                            
00016A44                            Obj6B_Type05:				; XREF: Obj6B_TypeIndex
00016A44 4A28 0038                  		tst.b	$38(a0)
00016A48 6600                       		bne.s	loc_15F3E
00016A4A 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00016A4E 7000                       		moveq	#0,d0
00016A50 1028 003E                  		move.b	$3E(a0),d0
00016A54 0832 0000 0000             		btst	#0,(a2,d0.w)
00016A5A 6700                       		beq.s	locret_15F5C
00016A5C 117C 0001 0038             		move.b	#1,$38(a0)
00016A62 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016A66 7000                       		moveq	#0,d0
00016A68 1028 0023                  		move.b	$23(a0),d0
00016A6C 6700                       		beq.s	loc_15F3E
00016A6E 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00016A74                            
00016A74                            loc_15F3E:
00016A74 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
00016A7C 06A8 0000 8000 000C        		addi.l	#$8000,$C(a0)
00016A84 3168 0008 0034             		move.w	8(a0),$34(a0)
00016A8A 0C68 0980 0008             		cmpi.w	#$980,8(a0)
00016A90 6700                       		beq.s	loc_15F5E
00016A92                            
00016A92                            locret_15F5C:
00016A92 4E75                       		rts	
00016A94                            ; ===========================================================================
00016A94                            
00016A94                            loc_15F5E:
00016A94 4228 0028                  		clr.b	$28(a0)
00016A98 4228 0038                  		clr.b	$38(a0)
00016A9C 4E75                       		rts	
00016A9E                            ; ===========================================================================
00016A9E                            ; ---------------------------------------------------------------------------
00016A9E                            ; Sprite mappings - stomper and	platforms (SBZ)
00016A9E                            ; ---------------------------------------------------------------------------
00016A9E                            Map_obj6B:
00016A9E                            	include "_maps\obj6B.asm"
00016A9E                            ; ---------------------------------------------------------------------------
00016A9E                            ; Sprite mappings - stomper and	platforms (SBZ)
00016A9E                            ; ---------------------------------------------------------------------------
00016A9E 0000 0000                  		dc.w byte_15F72-Map_obj6B, byte_15F87-Map_obj6B
00016AA2 0000 0000                  		dc.w byte_15F87-Map_obj6B, byte_15F87-Map_obj6B
00016AA6 0000                       		dc.w byte_15FB0-Map_obj6B
00016AA8 04                         byte_15F72:	dc.b 4
00016AA9 F40E 21AF C0               		dc.b $F4, $E, $21, $AF,	$C0
00016AAE F40E 21B2 E0               		dc.b $F4, $E, $21, $B2,	$E0
00016AB3 F40E 21B2 00               		dc.b $F4, $E, $21, $B2,	0
00016AB8 F40E 29AF 20               		dc.b $F4, $E, $29, $AF,	$20
00016ABD 08                         byte_15F87:	dc.b 8
00016ABE E00C 000C E4               		dc.b $E0, $C, 0, $C, $E4
00016AC3 E008 0010 04               		dc.b $E0, 8, 0,	$10, 4
00016AC8 E80E 2013 E4               		dc.b $E8, $E, $20, $13,	$E4
00016ACD E80A 201F 04               		dc.b $E8, $A, $20, $1F,	4
00016AD2 000E 2013 E4               		dc.b 0,	$E, $20, $13, $E4
00016AD7 000A 201F 04               		dc.b 0,	$A, $20, $1F, 4
00016ADC 180C 000C E4               		dc.b $18, $C, 0, $C, $E4
00016AE1 1808 0010 04               		dc.b $18, 8, 0,	$10, 4
00016AE6 0E                         byte_15FB0:	dc.b $E
00016AE7 C00F 0000 80               		dc.b $C0, $F, 0, 0, $80
00016AEC C00F 0010 A0               		dc.b $C0, $F, 0, $10, $A0
00016AF1 C00F 0020 C0               		dc.b $C0, $F, 0, $20, $C0
00016AF6 C00F 0010 E0               		dc.b $C0, $F, 0, $10, $E0
00016AFB C00F 0020 00               		dc.b $C0, $F, 0, $20, 0
00016B00 C00F 0010 20               		dc.b $C0, $F, 0, $10, $20
00016B05 C00F 0030 40               		dc.b $C0, $F, 0, $30, $40
00016B0A C00D 0040 60               		dc.b $C0, $D, 0, $40, $60
00016B0F E00F 0048 80               		dc.b $E0, $F, 0, $48, $80
00016B14 E00F 0048 C0               		dc.b $E0, $F, 0, $48, $C0
00016B19 E00F 0058 00               		dc.b $E0, $F, 0, $58, 0
00016B1E 000F 0048 80               		dc.b 0,	$F, 0, $48, $80
00016B23 000F 0058 C0               		dc.b 0,	$F, 0, $58, $C0
00016B28 200F 0058 80               		dc.b $20, $F, 0, $58, $80
00016B2E 00                         		even
00016B2E 00                         		even
00016B2E                            
00016B2E                            ; ===========================================================================
00016B2E                            ; ---------------------------------------------------------------------------
00016B2E                            ; Object 6C - vanishing	platforms (SBZ)
00016B2E                            ; ---------------------------------------------------------------------------
00016B2E                            
00016B2E                            Obj6C:					; XREF: Obj_Index
00016B2E 7000                       		moveq	#0,d0
00016B30 1028 0024                  		move.b	$24(a0),d0
00016B34 323B 0000                  		move.w	Obj6C_Index(pc,d0.w),d1
00016B38 4EFB 1000                  		jmp	Obj6C_Index(pc,d1.w)
00016B3C                            ; ===========================================================================
00016B3C 0000                       Obj6C_Index:	dc.w Obj6C_Main-Obj6C_Index
00016B3E 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
00016B40 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
00016B42 0000                       		dc.w loc_16068-Obj6C_Index
00016B44                            ; ===========================================================================
00016B44                            
00016B44                            Obj6C_Main:				; XREF: Obj6C_Index
00016B44 5C28 0024                  		addq.b	#6,$24(a0)
00016B48 217C 0000 0000 0004        		move.l	#Map_obj6C,4(a0)
00016B50 317C 44C3 0002             		move.w	#$44C3,2(a0)
00016B56 0028 0004 0001             		ori.b	#4,1(a0)
00016B5C 117C 0010 0019             		move.b	#$10,$19(a0)
00016B62 117C 0004 0018             		move.b	#4,$18(a0)
00016B68 7000                       		moveq	#0,d0
00016B6A 1028 0028                  		move.b	$28(a0),d0	; get object type
00016B6E 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00016B72 5240                       		addq.w	#1,d0		; add 1
00016B74 EF48                       		lsl.w	#7,d0		; multiply by $80
00016B76 3200                       		move.w	d0,d1
00016B78 5340                       		subq.w	#1,d0
00016B7A 3140 0030                  		move.w	d0,$30(a0)
00016B7E 3140 0032                  		move.w	d0,$32(a0)
00016B82 7000                       		moveq	#0,d0
00016B84 1028 0028                  		move.b	$28(a0),d0	; get object type
00016B88 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st digit
00016B8C 0641 0080                  		addi.w	#$80,d1
00016B90 C0C1                       		mulu.w	d1,d0
00016B92 E088                       		lsr.l	#8,d0
00016B94 3140 0036                  		move.w	d0,$36(a0)
00016B98 5341                       		subq.w	#1,d1
00016B9A 3141 0038                  		move.w	d1,$38(a0)
00016B9E                            
00016B9E                            loc_16068:				; XREF: Obj6C_Index
00016B9E 3038 FE04                  		move.w	($FFFFFE04).w,d0
00016BA2 9068 0036                  		sub.w	$36(a0),d0
00016BA6 C068 0038                  		and.w	$38(a0),d0
00016BAA 6600                       		bne.s	Obj6C_Animate
00016BAC 5928 0024                  		subq.b	#4,$24(a0)
00016BB0 6000                       		bra.s	Obj6C_Vanish
00016BB2                            ; ===========================================================================
00016BB2                            
00016BB2                            Obj6C_Animate:
00016BB2 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
00016BB8 4EB9 0000 B09A             		jsr	AnimateSprite
00016BBE 6000 952C                  		bra.w	MarkObjGone
00016BC2                            ; ===========================================================================
00016BC2                            
00016BC2                            Obj6C_Vanish:				; XREF: Obj6C_Index
00016BC2 5368 0030                  		subq.w	#1,$30(a0)
00016BC6 6A00                       		bpl.s	loc_160AA
00016BC8 317C 007F 0030             		move.w	#127,$30(a0)
00016BCE 4A28 001C                  		tst.b	$1C(a0)
00016BD2 6700                       		beq.s	loc_160A4
00016BD4 3168 0032 0030             		move.w	$32(a0),$30(a0)
00016BDA                            
00016BDA                            loc_160A4:
00016BDA 0868 0000 001C             		bchg	#0,$1C(a0)
00016BE0                            
00016BE0                            loc_160AA:
00016BE0 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
00016BE6 4EB9 0000 B09A             		jsr	AnimateSprite
00016BEC 0828 0001 001A             		btst	#1,$1A(a0)	; has platform vanished?
00016BF2 6600                       		bne.s	Obj6C_NotSolid	; if yes, branch
00016BF4 0C28 0002 0024             		cmpi.b	#2,$24(a0)
00016BFA 6600                       		bne.s	loc_160D6
00016BFC 7200                       		moveq	#0,d1
00016BFE 1228 0019                  		move.b	$19(a0),d1
00016C02 4EB9 0000 7C56             		jsr	(PlatformObject).l
00016C08 6000 94E2                  		bra.w	MarkObjGone
00016C0C                            ; ===========================================================================
00016C0C                            
00016C0C                            loc_160D6:
00016C0C 7200                       		moveq	#0,d1
00016C0E 1228 0019                  		move.b	$19(a0),d1
00016C12 4EB9 0000 7DCA             		jsr	(ExitPlatform).l
00016C18 3428 0008                  		move.w	8(a0),d2
00016C1C 4EB9 0000 8334             		jsr	(MvSonicOnPtfm2).l
00016C22 6000 94C8                  		bra.w	MarkObjGone
00016C26                            ; ===========================================================================
00016C26                            
00016C26                            Obj6C_NotSolid:				; XREF: Obj6C_Vanish
00016C26 0828 0003 0022             		btst	#3,$22(a0)
00016C2C 6700                       		beq.s	Obj6C_Display
00016C2E 43F8 D000                  		lea	($FFFFD000).w,a1
00016C32 08A9 0003 0022             		bclr	#3,$22(a1)
00016C38 08A8 0003 0022             		bclr	#3,$22(a0)
00016C3E 117C 0002 0024             		move.b	#2,$24(a0)
00016C44 4228 0025                  		clr.b	$25(a0)
00016C48                            
00016C48                            Obj6C_Display:
00016C48 6000 94A2                  		bra.w	MarkObjGone
00016C4C                            ; ===========================================================================
00016C4C                            Ani_obj6C:
00016C4C                            	include "_anim\obj6C.asm"
00016C4C                            ; ---------------------------------------------------------------------------
00016C4C                            ; Animation script - vanishing platforms (SBZ)
00016C4C                            ; ---------------------------------------------------------------------------
00016C4C 0000                       		dc.w byte_1611A-Ani_obj6C
00016C4E 0000                       		dc.w byte_16122-Ani_obj6C
00016C50 0700 0102 03FE 0100        byte_1611A:	dc.b 7,	0, 1, 2, 3, $FE, 1, 0
00016C58 0703 0201 00FE 0100        byte_16122:	dc.b 7,	3, 2, 1, 0, $FE, 1, 0
00016C60                            		even
00016C60                            		even
00016C60                            
00016C60                            ; ---------------------------------------------------------------------------
00016C60                            ; Sprite mappings - vanishing platforms	(SBZ)
00016C60                            ; ---------------------------------------------------------------------------
00016C60                            Map_obj6C:
00016C60                            	include "_maps\obj6C.asm"
00016C60                            ; ---------------------------------------------------------------------------
00016C60                            ; Sprite mappings - vanishing platforms	(SBZ)
00016C60                            ; ---------------------------------------------------------------------------
00016C60 0000 0000                  		dc.w byte_16132-Map_obj6C, byte_16138-Map_obj6C
00016C64 0000 0000                  		dc.w byte_1613E-Map_obj6C, byte_16144-Map_obj6C
00016C68 01                         byte_16132:	dc.b 1
00016C69 F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0
00016C6E 01                         byte_16138:	dc.b 1
00016C6F F807 0010 F8               		dc.b $F8, 7, 0,	$10, $F8
00016C74 01                         byte_1613E:	dc.b 1
00016C75 F803 0018 FC               		dc.b $F8, 3, 0,	$18, $FC
00016C7A 00                         byte_16144:	dc.b 0
00016C7C 00                         		even
00016C7C 00                         		even
00016C7C                            
00016C7C                            ; ===========================================================================
00016C7C                            ; ---------------------------------------------------------------------------
00016C7C                            ; Object 6E - electrocution orbs (SBZ)
00016C7C                            ; ---------------------------------------------------------------------------
00016C7C                            
00016C7C                            Obj6E:					; XREF: Obj_Index
00016C7C 7000                       		moveq	#0,d0
00016C7E 1028 0024                  		move.b	$24(a0),d0
00016C82 323B 0000                  		move.w	Obj6E_Index(pc,d0.w),d1
00016C86 4EFB 1000                  		jmp	Obj6E_Index(pc,d1.w)
00016C8A                            ; ===========================================================================
00016C8A 0000                       Obj6E_Index:	dc.w Obj6E_Main-Obj6E_Index
00016C8C 0000                       		dc.w Obj6E_Shock-Obj6E_Index
00016C8E                            ; ===========================================================================
00016C8E                            
00016C8E                            Obj6E_Main:				; XREF: Obj6E_Index
00016C8E 5428 0024                  		addq.b	#2,$24(a0)
00016C92 217C 0000 0000 0004        		move.l	#Map_obj6E,4(a0)
00016C9A 317C 047E 0002             		move.w	#$47E,2(a0)
00016CA0 0028 0004 0001             		ori.b	#4,1(a0)
00016CA6 117C 0028 0019             		move.b	#$28,$19(a0)
00016CAC 7000                       		moveq	#0,d0
00016CAE 1028 0028                  		move.b	$28(a0),d0	; read object type
00016CB2 E948                       		lsl.w	#4,d0		; multiply by $10
00016CB4 5340                       		subq.w	#1,d0
00016CB6 3140 0034                  		move.w	d0,$34(a0)
00016CBA                            
00016CBA                            Obj6E_Shock:				; XREF: Obj6E_Index
00016CBA 3038 FE04                  		move.w	($FFFFFE04).w,d0
00016CBE C068 0034                  		and.w	$34(a0),d0
00016CC2 6600                       		bne.s	Obj6E_Animate
00016CC4 117C 0001 001C             		move.b	#1,$1C(a0)	; run "shocking" animation
00016CCA 4A28 0001                  		tst.b	1(a0)
00016CCE 6A00                       		bpl.s	Obj6E_Animate
00016CD0 303C 00B1                  		move.w	#$B1,d0
00016CD4 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play electricity sound
00016CDA                            
00016CDA                            Obj6E_Animate:
00016CDA 43F9 0000 0000             		lea	(Ani_obj6E).l,a1
00016CE0 4EB9 0000 B09A             		jsr	AnimateSprite
00016CE6 117C 0000 0020             		move.b	#0,$20(a0)
00016CEC 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is frame number 4 displayed?
00016CF2 6600                       		bne.s	Obj6E_Display	; if not, branch
00016CF4 117C 00A4 0020             		move.b	#$A4,$20(a0)	; if yes, make object hurt Sonic
00016CFA                            
00016CFA                            Obj6E_Display:
00016CFA 6000 93F0                  		bra.w	MarkObjGone
00016CFE                            ; ===========================================================================
00016CFE                            Ani_obj6E:
00016CFE                            	include "_anim\obj6E.asm"
00016CFE                            ; ---------------------------------------------------------------------------
00016CFE                            ; Animation script - electrocution orbs (SBZ)
00016CFE                            ; ---------------------------------------------------------------------------
00016CFE 0000                       		dc.w byte_161CC-Ani_obj6E
00016D00 0000                       		dc.w byte_161D0-Ani_obj6E
00016D02 0700 FF00                  byte_161CC:	dc.b 7,	0, $FF,	0
00016D06 0001 0101 0203 0304 0404+  byte_161D0:	dc.b 0,	1, 1, 1, 2, 3, 3, 4, 4,	4, 5, 5, 5, 0, $FD, 0
00016D16                            		even
00016D16                            		even
00016D16                            
00016D16                            ; ---------------------------------------------------------------------------
00016D16                            ; Sprite mappings - electrocution orbs (SBZ)
00016D16                            ; ---------------------------------------------------------------------------
00016D16                            Map_obj6E:
00016D16                            	include "_maps\obj6E.asm"
00016D16                            Map_26ed:
00016D16 0000                       Map_26ed_0: 	dc.w Map_26ed_C-Map_26ed
00016D18 0000                       Map_26ed_2: 	dc.w Map_26ed_12-Map_26ed
00016D1A 0000                       Map_26ed_4: 	dc.w Map_26ed_1D-Map_26ed
00016D1C 0000                       Map_26ed_6: 	dc.w Map_26ed_3C-Map_26ed
00016D1E 0000                       Map_26ed_8: 	dc.w Map_26ed_65-Map_26ed
00016D20 0000                       Map_26ed_A: 	dc.w Map_26ed_84-Map_26ed
00016D22 01                         Map_26ed_C: 	dc.b $1
00016D23 0805 0000 F8               	dc.b $8, $5, $0, $0, $F8
00016D28 02                         Map_26ed_12: 	dc.b $2
00016D29 F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00016D2E 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00016D33 06                         Map_26ed_1D: 	dc.b $6
00016D34 F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00016D39 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00016D3E F605 0010 0C               	dc.b $F6, $5, $0, $10, $C
00016D43 F605 0010 1C               	dc.b $F6, $5, $0, $10, $1C
00016D48 F605 0810 D4               	dc.b $F6, $5, $8, $10, $D4
00016D4D F605 0810 E4               	dc.b $F6, $5, $8, $10, $E4
00016D52 08                         Map_26ed_3C: 	dc.b $8
00016D53 F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00016D58 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00016D5D F605 0010 0C               	dc.b $F6, $5, $0, $10, $C
00016D62 F605 0010 1C               	dc.b $F6, $5, $0, $10, $1C
00016D67 F605 0810 E4               	dc.b $F6, $5, $8, $10, $E4
00016D6C F605 0010 2C               	dc.b $F6, $5, $0, $10, $2C
00016D71 F605 0810 D4               	dc.b $F6, $5, $8, $10, $D4
00016D76 F605 0810 C4               	dc.b $F6, $5, $8, $10, $C4
00016D7B 06                         Map_26ed_65: 	dc.b $6
00016D7C F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00016D81 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00016D86 F605 0010 1C               	dc.b $F6, $5, $0, $10, $1C
00016D8B F605 0010 2C               	dc.b $F6, $5, $0, $10, $2C
00016D90 F605 0810 D4               	dc.b $F6, $5, $8, $10, $D4
00016D95 F605 0810 C4               	dc.b $F6, $5, $8, $10, $C4
00016D9A 04                         Map_26ed_84: 	dc.b $4
00016D9B F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00016DA0 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00016DA5 F605 0010 2C               	dc.b $F6, $5, $0, $10, $2C
00016DAA F605 0810 C4               	dc.b $F6, $5, $8, $10, $C4
00016DB0 00                         	even
00016DB0 00                         	even
00016DB0                            
00016DB0                            ; ===========================================================================
00016DB0                            ; ---------------------------------------------------------------------------
00016DB0                            ; Object 6F - spinning platforms that move around a conveyor belt (SBZ)
00016DB0                            ; ---------------------------------------------------------------------------
00016DB0                            
00016DB0                            Obj6F:					; XREF: Obj_Index
00016DB0 7000                       		moveq	#0,d0
00016DB2 1028 0024                  		move.b	$24(a0),d0
00016DB6 323B 0000                  		move.w	Obj6F_Index(pc,d0.w),d1
00016DBA 4EBB 1000                  		jsr	Obj6F_Index(pc,d1.w)
00016DBE 3028 0030                  		move.w	$30(a0),d0
00016DC2 0240 FF80                  		andi.w	#$FF80,d0
00016DC6 3238 F700                  		move.w	($FFFFF700).w,d1
00016DCA 0441 0080                  		subi.w	#$80,d1
00016DCE 0241 FF80                  		andi.w	#$FF80,d1
00016DD2 9041                       		sub.w	d1,d0
00016DD4 0C40 0280                  		cmpi.w	#$280,d0
00016DD8 6200                       		bhi.s	loc_1629A
00016DDA                            
00016DDA                            Obj6F_Display:
00016DDA 4EF9 0000 E044             		jmp	DisplaySprite
00016DE0                            ; ===========================================================================
00016DE0                            
00016DE0                            loc_1629A:
00016DE0 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; check if act	is 3
00016DE6 6600                       		bne.s	Obj6F_Act1or2	; if not, branch
00016DE8 0C40 FF80                  		cmpi.w	#-$80,d0
00016DEC 64EC                       		bcc.s	Obj6F_Display
00016DEE                            
00016DEE                            Obj6F_Act1or2:
00016DEE 1028 002F                  		move.b	$2F(a0),d0
00016DF2 6A00                       		bpl.s	Obj6F_Delete
00016DF4 0240 007F                  		andi.w	#$7F,d0
00016DF8 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00016DFC 08B2 0000 0000             		bclr	#0,(a2,d0.w)
00016E02                            
00016E02                            Obj6F_Delete:
00016E02 4EF9 0000 E080             		jmp	DeleteObject
00016E08                            ; ===========================================================================
00016E08 0000                       Obj6F_Index:	dc.w Obj6F_Main-Obj6F_Index
00016E0A 0000                       		dc.w loc_163D8-Obj6F_Index
00016E0C                            ; ===========================================================================
00016E0C                            
00016E0C                            Obj6F_Main:				; XREF: Obj6F_Index
00016E0C 1028 0028                  		move.b	$28(a0),d0
00016E10 6B00 0000                  		bmi.w	loc_16380
00016E14 5428 0024                  		addq.b	#2,$24(a0)
00016E18 217C 0001 6470 0004        		move.l	#Map_obj69a,4(a0)
00016E20 317C 04DF 0002             		move.w	#$4DF,2(a0)
00016E26 117C 0010 0019             		move.b	#$10,$19(a0)
00016E2C 0028 0004 0001             		ori.b	#4,1(a0)
00016E32 117C 0004 0018             		move.b	#4,$18(a0)
00016E38 7000                       		moveq	#0,d0
00016E3A 1028 0028                  		move.b	$28(a0),d0
00016E3E 3200                       		move.w	d0,d1
00016E40 E648                       		lsr.w	#3,d0
00016E42 0240 001E                  		andi.w	#$1E,d0
00016E46 45FA 0000                  		lea	off_164A6(pc),a2
00016E4A D4F2 0000                  		adda.w	(a2,d0.w),a2
00016E4E 315A 0038                  		move.w	(a2)+,$38(a0)
00016E52 315A 0030                  		move.w	(a2)+,$30(a0)
00016E56 214A 003C                  		move.l	a2,$3C(a0)
00016E5A 0241 000F                  		andi.w	#$F,d1
00016E5E E549                       		lsl.w	#2,d1
00016E60 1141 0038                  		move.b	d1,$38(a0)
00016E64 117C 0004 003A             		move.b	#4,$3A(a0)
00016E6A 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00016E6E 6700                       		beq.s	loc_16356
00016E70 117C 0001 003B             		move.b	#1,$3B(a0)
00016E76 4428 003A                  		neg.b	$3A(a0)
00016E7A 7200                       		moveq	#0,d1
00016E7C 1228 0038                  		move.b	$38(a0),d1
00016E80 D228 003A                  		add.b	$3A(a0),d1
00016E84 B228 0039                  		cmp.b	$39(a0),d1
00016E88 6500                       		bcs.s	loc_16352
00016E8A 1001                       		move.b	d1,d0
00016E8C 7200                       		moveq	#0,d1
00016E8E 4A00                       		tst.b	d0
00016E90 6A00                       		bpl.s	loc_16352
00016E92 1228 0039                  		move.b	$39(a0),d1
00016E96 5901                       		subq.b	#4,d1
00016E98                            
00016E98                            loc_16352:
00016E98 1141 0038                  		move.b	d1,$38(a0)
00016E9C                            
00016E9C                            loc_16356:
00016E9C 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
00016EA2 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
00016EA8 4A41                       		tst.w	d1
00016EAA 6600                       		bne.s	loc_1636C
00016EAC 117C 0001 001C             		move.b	#1,$1C(a0)
00016EB2                            
00016EB2                            loc_1636C:
00016EB2 0C41 0008                  		cmpi.w	#8,d1
00016EB6 6600                       		bne.s	loc_16378
00016EB8 117C 0000 001C             		move.b	#0,$1C(a0)
00016EBE                            
00016EBE                            loc_16378:
00016EBE 6100 C0C6                  		bsr.w	Obj63_ChangeDir
00016EC2 6000 0000                  		bra.w	loc_163D8
00016EC6                            ; ===========================================================================
00016EC6                            
00016EC6                            loc_16380:				; XREF: Obj6F_Main
00016EC6 1140 002F                  		move.b	d0,$2F(a0)
00016ECA 0240 007F                  		andi.w	#$7F,d0
00016ECE 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00016ED2 08F2 0000 0000             		bset	#0,(a2,d0.w)
00016ED8 6700                       		beq.s	loc_1639A
00016EDA 4EF9 0000 E080             		jmp	DeleteObject
00016EE0                            ; ===========================================================================
00016EE0                            
00016EE0                            loc_1639A:
00016EE0 D040                       		add.w	d0,d0
00016EE2 0240 001E                  		andi.w	#$1E,d0
00016EE6 45F9 0000 0000             		lea	(ObjPos_SBZ1pf_Index).l,a2
00016EEC D4F2 0000                  		adda.w	(a2,d0.w),a2
00016EF0 321A                       		move.w	(a2)+,d1
00016EF2 2248                       		movea.l	a0,a1
00016EF4 6000                       		bra.s	Obj6F_LoadPform
00016EF6                            ; ===========================================================================
00016EF6                            
00016EF6                            Obj6F_Loop:
00016EF6 4EB9 0000 E4CA             		jsr	SingleObjLoad
00016EFC 6600                       		bne.s	loc_163D0
00016EFE                            
00016EFE                            Obj6F_LoadPform:			; XREF: loc_1639A
00016EFE 12BC 006F                  		move.b	#$6F,0(a1)
00016F02 335A 0008                  		move.w	(a2)+,8(a1)
00016F06 335A 000C                  		move.w	(a2)+,$C(a1)
00016F0A 301A                       		move.w	(a2)+,d0
00016F0C 1340 0028                  		move.b	d0,$28(a1)
00016F10                            
00016F10                            loc_163D0:
00016F10 51C9 FFE4                  		dbf	d1,Obj6F_Loop
00016F14                            
00016F14 588F                       		addq.l	#4,sp
00016F16 4E75                       		rts	
00016F18                            ; ===========================================================================
00016F18                            
00016F18                            loc_163D8:				; XREF: Obj6F_Index
00016F18 43F9 0000 0000             		lea	(Ani_obj6F).l,a1
00016F1E 4EB9 0000 B09A             		jsr	AnimateSprite
00016F24 4A28 001A                  		tst.b	$1A(a0)
00016F28 6600                       		bne.s	loc_16404
00016F2A 3F28 0008                  		move.w	8(a0),-(sp)
00016F2E 6100 0000                  		bsr.w	loc_16424
00016F32 323C 001B                  		move.w	#$1B,d1
00016F36 343C 0007                  		move.w	#7,d2
00016F3A 3602                       		move.w	d2,d3
00016F3C 5243                       		addq.w	#1,d3
00016F3E 381F                       		move.w	(sp)+,d4
00016F40 6000 94D2                  		bra.w	SolidObject
00016F44                            ; ===========================================================================
00016F44                            
00016F44                            loc_16404:
00016F44 0828 0003 0022             		btst	#3,$22(a0)
00016F4A 6700                       		beq.s	loc_16420
00016F4C 43F8 D000                  		lea	($FFFFD000).w,a1
00016F50 08A9 0003 0022             		bclr	#3,$22(a1)
00016F56 08A8 0003 0022             		bclr	#3,$22(a0)
00016F5C 4228 0025                  		clr.b	$25(a0)
00016F60                            
00016F60                            loc_16420:
00016F60 6000 0002                  		bra.w	*+4
00016F64                            
00016F64                            loc_16424:
00016F64 3028 0008                  		move.w	8(a0),d0
00016F68 B068 0034                  		cmp.w	$34(a0),d0
00016F6C 6600                       		bne.s	loc_16484
00016F6E 3028 000C                  		move.w	$C(a0),d0
00016F72 B068 0036                  		cmp.w	$36(a0),d0
00016F76 6600                       		bne.s	loc_16484
00016F78 7200                       		moveq	#0,d1
00016F7A 1228 0038                  		move.b	$38(a0),d1
00016F7E D228 003A                  		add.b	$3A(a0),d1
00016F82 B228 0039                  		cmp.b	$39(a0),d1
00016F86 6500                       		bcs.s	loc_16456
00016F88 1001                       		move.b	d1,d0
00016F8A 7200                       		moveq	#0,d1
00016F8C 4A00                       		tst.b	d0
00016F8E 6A00                       		bpl.s	loc_16456
00016F90 1228 0039                  		move.b	$39(a0),d1
00016F94 5901                       		subq.b	#4,d1
00016F96                            
00016F96                            loc_16456:
00016F96 1141 0038                  		move.b	d1,$38(a0)
00016F9A 2268 003C                  		movea.l	$3C(a0),a1
00016F9E 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
00016FA4 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
00016FAA 4A41                       		tst.w	d1
00016FAC 6600                       		bne.s	loc_16474
00016FAE 117C 0001 001C             		move.b	#1,$1C(a0)
00016FB4                            
00016FB4                            loc_16474:
00016FB4 0C41 0008                  		cmpi.w	#8,d1
00016FB8 6600                       		bne.s	loc_16480
00016FBA 117C 0000 001C             		move.b	#0,$1C(a0)
00016FC0                            
00016FC0                            loc_16480:
00016FC0 6100 BFC4                  		bsr.w	Obj63_ChangeDir
00016FC4                            
00016FC4                            loc_16484:
00016FC4 4EF9 0000 E01E             		jmp	SpeedToPos
00016FCA                            ; ===========================================================================
00016FCA                            Ani_obj6F:
00016FCA                            	include "_anim\obj6F.asm"
00016FCA                            ; ---------------------------------------------------------------------------
00016FCA                            ; Animation script - platform on conveyor belt (SBZ)
00016FCA                            ; ---------------------------------------------------------------------------
00016FCA 0000                       		dc.w byte_1648E-Ani_obj6F
00016FCC 0000                       		dc.w byte_164A2-Ani_obj6F
00016FCE 0000 0102 0304 4342 4140+  byte_1648E:	dc.b 0,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00016FDB 6423 2221 00FF 00          		dc.b $64, $23, $22, $21, 0, $FF, 0
00016FE2 0F00 FF                    byte_164A2:	dc.b $F, 0, $FF
00016FE6 00                         		even
00016FE6 00                         		even
00016FE6                            
00016FE6 0000 0000 0000             off_164A6:	dc.w word_164B2-off_164A6, word_164C6-off_164A6, word_164DA-off_164A6
00016FEC 0000 0000 0000             		dc.w word_164EE-off_164A6, word_16502-off_164A6, word_16516-off_164A6
00016FF2 0010 0E80 0E14 0370 0EEF+  word_164B2:	dc.w $10, $E80,	$E14, $370, $EEF, $302,	$EEF, $340, $E14, $3AE
00017006 0010 0F80 0F14 02E0 0FEF+  word_164C6:	dc.w $10, $F80,	$F14, $2E0, $FEF, $272,	$FEF, $2B0, $F14, $31E
0001701A 0010 1080 1014 0270 10EF+  word_164DA:	dc.w $10, $1080, $1014,	$270, $10EF, $202, $10EF, $240,	$1014, $2AE
0001702E 0010 0F80 0F14 0570 0FEF+  word_164EE:	dc.w $10, $F80,	$F14, $570, $FEF, $502,	$FEF, $540, $F14, $5AE
00017042 0010 1B80 1B14 0670 1BEF+  word_16502:	dc.w $10, $1B80, $1B14,	$670, $1BEF, $602, $1BEF, $640,	$1B14, $6AE
00017056 0010 1C80 1C14 05E0 1CEF+  word_16516:	dc.w $10, $1C80, $1C14,	$5E0, $1CEF, $572, $1CEF, $5B0,	$1C14, $61E
0001706A                            ; ===========================================================================
0001706A                            ; ---------------------------------------------------------------------------
0001706A                            ; Object 70 - large girder block (SBZ)
0001706A                            ; ---------------------------------------------------------------------------
0001706A                            
0001706A                            Obj70:					; XREF: Obj_Index
0001706A 7000                       		moveq	#0,d0
0001706C 1028 0024                  		move.b	$24(a0),d0
00017070 323B 0000                  		move.w	Obj70_Index(pc,d0.w),d1
00017074 4EFB 1000                  		jmp	Obj70_Index(pc,d1.w)
00017078                            ; ===========================================================================
00017078 0000                       Obj70_Index:	dc.w Obj70_Main-Obj70_Index
0001707A 0000                       		dc.w Obj70_Action-Obj70_Index
0001707C                            ; ===========================================================================
0001707C                            
0001707C                            Obj70_Main:				; XREF: Obj70_Index
0001707C 5428 0024                  		addq.b	#2,$24(a0)
00017080 217C 0000 0000 0004        		move.l	#Map_obj70,4(a0)
00017088 317C 42F0 0002             		move.w	#$42F0,2(a0)
0001708E 0028 0004 0001             		ori.b	#4,1(a0)
00017094 117C 0004 0018             		move.b	#4,$18(a0)
0001709A 117C 0060 0019             		move.b	#$60,$19(a0)
000170A0 117C 0018 0016             		move.b	#$18,$16(a0)
000170A6 3168 0008 0032             		move.w	8(a0),$32(a0)
000170AC 3168 000C 0030             		move.w	$C(a0),$30(a0)
000170B2 6100 0000                  		bsr.w	Obj70_Move2
000170B6                            
000170B6                            Obj70_Action:				; XREF: Obj70_Index
000170B6 3F28 0008                  		move.w	8(a0),-(sp)
000170BA 4A68 003A                  		tst.w	$3A(a0)
000170BE 6700                       		beq.s	Obj70_Move
000170C0 5368 003A                  		subq.w	#1,$3A(a0)
000170C4 6600                       		bne.s	Obj70_Solid
000170C6                            
000170C6                            Obj70_Move:
000170C6 4EB9 0000 E01E             		jsr	SpeedToPos
000170CC 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from movement duration
000170D0 6600                       		bne.s	Obj70_Solid	; if time remains, branch
000170D2 6100 0000                  		bsr.w	Obj70_Move2	; if time is zero, branch
000170D6                            
000170D6                            Obj70_Solid:
000170D6 381F                       		move.w	(sp)+,d4
000170D8 4A28 0001                  		tst.b	1(a0)
000170DC 6A00                       		bpl.s	Obj70_ChkDel
000170DE 7200                       		moveq	#0,d1
000170E0 1228 0019                  		move.b	$19(a0),d1
000170E4 0641 000B                  		addi.w	#$B,d1
000170E8 7400                       		moveq	#0,d2
000170EA 1428 0016                  		move.b	$16(a0),d2
000170EE 3602                       		move.w	d2,d3
000170F0 5243                       		addq.w	#1,d3
000170F2 6100 9320                  		bsr.w	SolidObject
000170F6                            
000170F6                            Obj70_ChkDel:
000170F6 3028 0032                  		move.w	$32(a0),d0
000170FA 0240 FF80                  		andi.w	#$FF80,d0
000170FE 3238 F700                  		move.w	($FFFFF700).w,d1
00017102 0441 0080                  		subi.w	#$80,d1
00017106 0241 FF80                  		andi.w	#$FF80,d1
0001710A 9041                       		sub.w	d1,d0
0001710C 0C40 0280                  		cmpi.w	#$280,d0
00017110 6200                       		bhi.s	Obj70_Delete
00017112 4EF9 0000 E044             		jmp	DisplaySprite
00017118                            ; ===========================================================================
00017118                            
00017118                            Obj70_Delete:
00017118 4EF9 0000 E080             		jmp	DeleteObject
0001711E                            ; ===========================================================================
0001711E                            
0001711E                            Obj70_Move2:				; XREF: Obj70_Main
0001711E 1028 0038                  		move.b	$38(a0),d0
00017122 0240 0018                  		andi.w	#$18,d0
00017126 43F9 0000 0000             		lea	(Obj70_MoveData).l,a1
0001712C 43F1 0000                  		lea	(a1,d0.w),a1
00017130 3159 0010                  		move.w	(a1)+,$10(a0)
00017134 3159 0012                  		move.w	(a1)+,$12(a0)
00017138 3159 0034                  		move.w	(a1)+,$34(a0)
0001713C 5028 0038                  		addq.b	#8,$38(a0)	; use next movedata set
00017140 317C 0007 003A             		move.w	#7,$3A(a0)
00017146 4E75                       		rts	
00017148                            ; ===========================================================================
00017148 0100 0000 0060 0000        Obj70_MoveData:	dc.w   $100,	 0,   $60,     0 ; x-speed, y-speed, duration, blank
00017150 0000 0100 0030 0000        		dc.w	  0,  $100,   $30,     0
00017158 FF00 FFC0 0060 0000        		dc.w  $FF00, $FFC0,   $60,     0
00017160 0000 FF00 0018 0000        		dc.w	  0, $FF00,   $18,     0
00017168                            ; ---------------------------------------------------------------------------
00017168                            ; Sprite mappings - large girder block (SBZ)
00017168                            ; ---------------------------------------------------------------------------
00017168                            Map_obj70:
00017168                            	include "_maps\obj70.asm"
00017168                            ; ---------------------------------------------------------------------------
00017168                            ; Sprite mappings - large girder block (SBZ)
00017168                            ; ---------------------------------------------------------------------------
00017168 0000                       		dc.w byte_1662A-Map_obj70
0001716A 0C                         byte_1662A:	dc.b $C
0001716B E80E 0000 A0               		dc.b $E8, $E, 0, 0, $A0
00017170 000E 1000 A0               		dc.b 0,	$E, $10, 0, $A0
00017175 E80E 0006 C0               		dc.b $E8, $E, 0, 6, $C0
0001717A 000E 1006 C0               		dc.b 0,	$E, $10, 6, $C0
0001717F E80E 0006 E0               		dc.b $E8, $E, 0, 6, $E0
00017184 000E 1006 E0               		dc.b 0,	$E, $10, 6, $E0
00017189 E80E 0006 00               		dc.b $E8, $E, 0, 6, 0
0001718E 000E 1006 00               		dc.b 0,	$E, $10, 6, 0
00017193 E80E 0006 20               		dc.b $E8, $E, 0, 6, $20
00017198 000E 1006 20               		dc.b 0,	$E, $10, 6, $20
0001719D E80E 0006 40               		dc.b $E8, $E, 0, 6, $40
000171A2 000E 1006 40               		dc.b 0,	$E, $10, 6, $40
000171A8 00                         		even
000171A8 00                         		even
000171A8                            
000171A8                            ; ===========================================================================
000171A8                            ; ---------------------------------------------------------------------------
000171A8                            ; Object 72 - teleporter (SBZ)
000171A8                            ; ---------------------------------------------------------------------------
000171A8                            
000171A8                            Obj72:					; XREF: Obj_Index
000171A8 7000                       		moveq	#0,d0
000171AA 1028 0024                  		move.b	$24(a0),d0
000171AE 323B 0000                  		move.w	Obj72_Index(pc,d0.w),d1
000171B2 4EBB 1000                  		jsr	Obj72_Index(pc,d1.w)
000171B6 3028 0008                  		move.w	8(a0),d0
000171BA 0240 FF80                  		andi.w	#$FF80,d0
000171BE 3238 F700                  		move.w	($FFFFF700).w,d1
000171C2 0441 0080                  		subi.w	#$80,d1
000171C6 0241 FF80                  		andi.w	#$FF80,d1
000171CA 9041                       		sub.w	d1,d0
000171CC 0C40 0280                  		cmpi.w	#$280,d0
000171D0 6200                       		bhi.s	Obj72_Delete
000171D2 4E75                       		rts	
000171D4                            ; ===========================================================================
000171D4                            
000171D4                            Obj72_Delete:
000171D4 4EF9 0000 E080             		jmp	DeleteObject
000171DA                            ; ===========================================================================
000171DA 0000                       Obj72_Index:	dc.w Obj72_Main-Obj72_Index
000171DC 0000                       		dc.w loc_166C8-Obj72_Index
000171DE 0000                       		dc.w loc_1675E-Obj72_Index
000171E0 0000                       		dc.w loc_16798-Obj72_Index
000171E2                            ; ===========================================================================
000171E2                            
000171E2                            Obj72_Main:				; XREF: Obj72_Index
000171E2 5428 0024                  		addq.b	#2,$24(a0)
000171E6 1028 0028                  		move.b	$28(a0),d0
000171EA D040                       		add.w	d0,d0
000171EC 0240 001E                  		andi.w	#$1E,d0
000171F0 45FA 0000                  		lea	Obj72_Data(pc),a2
000171F4 D4F2 0000                  		adda.w	(a2,d0.w),a2
000171F8 315A 003A                  		move.w	(a2)+,$3A(a0)
000171FC 214A 003C                  		move.l	a2,$3C(a0)
00017200 315A 0036                  		move.w	(a2)+,$36(a0)
00017204 315A 0038                  		move.w	(a2)+,$38(a0)
00017208                            
00017208                            loc_166C8:				; XREF: Obj72_Index
00017208 43F8 D000                  		lea	($FFFFD000).w,a1
0001720C 3029 0008                  		move.w	8(a1),d0
00017210 9068 0008                  		sub.w	8(a0),d0
00017214 0828 0000 0022             		btst	#0,$22(a0)
0001721A 6700                       		beq.s	loc_166E0
0001721C 0640 000F                  		addi.w	#$F,d0
00017220                            
00017220                            loc_166E0:
00017220 0C40 0010                  		cmpi.w	#$10,d0
00017224 6400                       		bcc.s	locret_1675C
00017226 3229 000C                  		move.w	$C(a1),d1
0001722A 9268 000C                  		sub.w	$C(a0),d1
0001722E 0641 0020                  		addi.w	#$20,d1
00017232 0C41 0040                  		cmpi.w	#$40,d1
00017236 6400                       		bcc.s	locret_1675C
00017238 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0001723C 6600                       		bne.s	locret_1675C
0001723E 0C28 0007 0028             		cmpi.b	#7,$28(a0)
00017244 6600                       		bne.s	loc_1670E
00017246 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w
0001724C 6500                       		bcs.s	locret_1675C
0001724E                            
0001724E                            loc_1670E:
0001724E 5428 0024                  		addq.b	#2,$24(a0)
00017252 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
00017258 137C 0002 001C             		move.b	#2,$1C(a1)	; use Sonic's rolling animation
0001725E 337C 0800 0014             		move.w	#$800,$14(a1)
00017264 337C 0000 0010             		move.w	#0,$10(a1)
0001726A 337C 0000 0012             		move.w	#0,$12(a1)
00017270 08A8 0005 0022             		bclr	#5,$22(a0)
00017276 08A9 0005 0022             		bclr	#5,$22(a1)
0001727C 08E9 0001 0022             		bset	#1,$22(a1)
00017282 3368 0008 0008             		move.w	8(a0),8(a1)
00017288 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001728E 4228 0032                  		clr.b	$32(a0)
00017292 303C 00BE                  		move.w	#$BE,d0
00017296 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play Sonic rolling sound
0001729C                            
0001729C                            locret_1675C:
0001729C 4E75                       		rts	
0001729E                            ; ===========================================================================
0001729E                            
0001729E                            loc_1675E:				; XREF: Obj72_Index
0001729E 43F8 D000                  		lea	($FFFFD000).w,a1
000172A2 1028 0032                  		move.b	$32(a0),d0
000172A6 5428 0032                  		addq.b	#2,$32(a0)
000172AA 4EB9 0000 2D34             		jsr	(CalcSine).l
000172B0 EA40                       		asr.w	#5,d0
000172B2 3428 000C                  		move.w	$C(a0),d2
000172B6 9440                       		sub.w	d0,d2
000172B8 3342 000C                  		move.w	d2,$C(a1)
000172BC 0C28 0080 0032             		cmpi.b	#$80,$32(a0)
000172C2 6600                       		bne.s	locret_16796
000172C4 6100 0000                  		bsr.w	sub_1681C
000172C8 5428 0024                  		addq.b	#2,$24(a0)
000172CC 303C 00BC                  		move.w	#$BC,d0
000172D0 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play teleport sound
000172D6                            
000172D6                            locret_16796:
000172D6 4E75                       		rts	
000172D8                            ; ===========================================================================
000172D8                            
000172D8                            loc_16798:				; XREF: Obj72_Index
000172D8 588F                       		addq.l	#4,sp
000172DA 43F8 D000                  		lea	($FFFFD000).w,a1
000172DE 5328 002E                  		subq.b	#1,$2E(a0)
000172E2 6A00                       		bpl.s	loc_167DA
000172E4 3368 0036 0008             		move.w	$36(a0),8(a1)
000172EA 3368 0038 000C             		move.w	$38(a0),$C(a1)
000172F0 7200                       		moveq	#0,d1
000172F2 1228 003A                  		move.b	$3A(a0),d1
000172F6 5801                       		addq.b	#4,d1
000172F8 B228 003B                  		cmp.b	$3B(a0),d1
000172FC 6500                       		bcs.s	loc_167C2
000172FE 7200                       		moveq	#0,d1
00017300 6000                       		bra.s	loc_16800
00017302                            ; ===========================================================================
00017302                            
00017302                            loc_167C2:
00017302 1141 003A                  		move.b	d1,$3A(a0)
00017306 2468 003C                  		movea.l	$3C(a0),a2
0001730A 3172 1000 0036             		move.w	(a2,d1.w),$36(a0)
00017310 3172 1002 0038             		move.w	2(a2,d1.w),$38(a0)
00017316 6000 0000                  		bra.w	sub_1681C
0001731A                            ; ===========================================================================
0001731A                            
0001731A                            loc_167DA:
0001731A 2429 0008                  		move.l	8(a1),d2
0001731E 2629 000C                  		move.l	$C(a1),d3
00017322 3029 0010                  		move.w	$10(a1),d0
00017326 48C0                       		ext.l	d0
00017328 E180                       		asl.l	#8,d0
0001732A D480                       		add.l	d0,d2
0001732C 3029 0012                  		move.w	$12(a1),d0
00017330 48C0                       		ext.l	d0
00017332 E180                       		asl.l	#8,d0
00017334 D680                       		add.l	d0,d3
00017336 2342 0008                  		move.l	d2,8(a1)
0001733A 2343 000C                  		move.l	d3,$C(a1)
0001733E 4E75                       		rts	
00017340                            ; ===========================================================================
00017340                            
00017340                            loc_16800:
00017340 0269 07FF 000C             		andi.w	#$7FF,$C(a1)
00017346 4228 0024                  		clr.b	$24(a0)
0001734A 4238 F7C8                  		clr.b	($FFFFF7C8).w
0001734E 337C 0000 0010             		move.w	#0,$10(a1)
00017354 337C 0200 0012             		move.w	#$200,$12(a1)
0001735A 4E75                       		rts	
0001735C                            
0001735C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001735C                            
0001735C                            
0001735C                            sub_1681C:
0001735C 7000                       		moveq	#0,d0
0001735E 343C 1000                  		move.w	#$1000,d2
00017362 3028 0036                  		move.w	$36(a0),d0
00017366 9069 0008                  		sub.w	8(a1),d0
0001736A 6C00                       		bge.s	loc_16830
0001736C 4440                       		neg.w	d0
0001736E 4442                       		neg.w	d2
00017370                            
00017370                            loc_16830:
00017370 7200                       		moveq	#0,d1
00017372 363C 1000                  		move.w	#$1000,d3
00017376 3228 0038                  		move.w	$38(a0),d1
0001737A 9269 000C                  		sub.w	$C(a1),d1
0001737E 6C00                       		bge.s	loc_16844
00017380 4441                       		neg.w	d1
00017382 4443                       		neg.w	d3
00017384                            
00017384                            loc_16844:
00017384 B240                       		cmp.w	d0,d1
00017386 6500                       		bcs.s	loc_1687A
00017388 7200                       		moveq	#0,d1
0001738A 3228 0038                  		move.w	$38(a0),d1
0001738E 9269 000C                  		sub.w	$C(a1),d1
00017392 4841                       		swap	d1
00017394 83C3                       		divs.w	d3,d1
00017396 7000                       		moveq	#0,d0
00017398 3028 0036                  		move.w	$36(a0),d0
0001739C 9069 0008                  		sub.w	8(a1),d0
000173A0 6700                       		beq.s	loc_16866
000173A2 4840                       		swap	d0
000173A4 81C1                       		divs.w	d1,d0
000173A6                            
000173A6                            loc_16866:
000173A6 3340 0010                  		move.w	d0,$10(a1)
000173AA 3343 0012                  		move.w	d3,$12(a1)
000173AE 4A41                       		tst.w	d1
000173B0 6A00                       		bpl.s	loc_16874
000173B2 4441                       		neg.w	d1
000173B4                            
000173B4                            loc_16874:
000173B4 3141 002E                  		move.w	d1,$2E(a0)
000173B8 4E75                       		rts	
000173BA                            ; ===========================================================================
000173BA                            
000173BA                            loc_1687A:
000173BA 7000                       		moveq	#0,d0
000173BC 3028 0036                  		move.w	$36(a0),d0
000173C0 9069 0008                  		sub.w	8(a1),d0
000173C4 4840                       		swap	d0
000173C6 81C2                       		divs.w	d2,d0
000173C8 7200                       		moveq	#0,d1
000173CA 3228 0038                  		move.w	$38(a0),d1
000173CE 9269 000C                  		sub.w	$C(a1),d1
000173D2 6700                       		beq.s	loc_16898
000173D4 4841                       		swap	d1
000173D6 83C0                       		divs.w	d0,d1
000173D8                            
000173D8                            loc_16898:
000173D8 3341 0012                  		move.w	d1,$12(a1)
000173DC 3342 0010                  		move.w	d2,$10(a1)
000173E0 4A40                       		tst.w	d0
000173E2 6A00                       		bpl.s	loc_168A6
000173E4 4440                       		neg.w	d0
000173E6                            
000173E6                            loc_168A6:
000173E6 3140 002E                  		move.w	d0,$2E(a0)
000173EA 4E75                       		rts	
000173EC                            ; End of function sub_1681C
000173EC                            
000173EC                            ; ===========================================================================
000173EC 0000 0000 0000             Obj72_Data:	dc.w word_168BC-Obj72_Data, word_168C2-Obj72_Data, word_168C8-Obj72_Data
000173F2 0000 0000 0000             		dc.w word_168E6-Obj72_Data, word_168EC-Obj72_Data, word_1690A-Obj72_Data
000173F8 0000 0000                  		dc.w word_16910-Obj72_Data, word_1692E-Obj72_Data
000173FC 0004 0794 098C             word_168BC:	dc.w 4,	$794, $98C
00017402 0004 0094 038C             word_168C2:	dc.w 4,	$94, $38C
00017408 001C 0794 02E8             word_168C8:	dc.w $1C, $794,	$2E8
0001740E 07A4 02C0 07D0             		dc.w $7A4, $2C0, $7D0
00017414 02AC 0858 02AC             		dc.w $2AC, $858, $2AC
0001741A 0884 0298 0894             		dc.w $884, $298, $894
00017420 0270 0894 0190             		dc.w $270, $894, $190
00017426 0004 0894 0690             word_168E6:	dc.w 4,	$894, $690
0001742C 001C 1194 0470             word_168EC:	dc.w $1C, $1194, $470
00017432 1184 0498 1158             		dc.w $1184, $498, $1158
00017438 04AC 0FD0 04AC             		dc.w $4AC, $FD0, $4AC
0001743E 0FA4 04C0 0F94             		dc.w $FA4, $4C0, $F94
00017444 04E8 0F94 0590             		dc.w $4E8, $F94, $590
0001744A 0004 1294 0490             word_1690A:	dc.w 4,	$1294, $490
00017450 001C 1594 FFE8             word_16910:	dc.w $1C, $1594, $FFE8
00017456 1584 FFC0 1560             		dc.w $1584, $FFC0, $1560
0001745C FFAC 14D0 FFAC             		dc.w $FFAC, $14D0, $FFAC
00017462 14A4 FF98 1494             		dc.w $14A4, $FF98, $1494
00017468 FF70 1494 FD90             		dc.w $FF70, $1494, $FD90
0001746E 0004 0894 0090             word_1692E:	dc.w 4,	$894, $90
00017474                            ; ===========================================================================
00017474                            ; ---------------------------------------------------------------------------
00017474                            ; Object 78 - Caterkiller enemy	(MZ, SBZ)
00017474                            ; ---------------------------------------------------------------------------
00017474                            
00017474                            Obj78:					; XREF: Obj_Index
00017474 7000                       		moveq	#0,d0
00017476 1028 0024                  		move.b	$24(a0),d0
0001747A 323B 0000                  		move.w	Obj78_Index(pc,d0.w),d1
0001747E 4EFB 1000                  		jmp	Obj78_Index(pc,d1.w)
00017482                            ; ===========================================================================
00017482 0000                       Obj78_Index:	dc.w Obj78_Main-Obj78_Index
00017484 0000                       		dc.w Obj78_Action-Obj78_Index
00017486 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
00017488 0000                       		dc.w Obj78_BodySeg2-Obj78_Index
0001748A 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
0001748C 0000                       		dc.w Obj78_Delete-Obj78_Index
0001748E 0000                       		dc.w loc_16CC0-Obj78_Index
00017490                            ; ===========================================================================
00017490                            
00017490                            locret_16950:
00017490 4E75                       		rts	
00017492                            ; ===========================================================================
00017492                            
00017492                            Obj78_Main:				; XREF: Obj78_Index
00017492 117C 0007 0016             		move.b	#7,$16(a0)
00017498 117C 0008 0017             		move.b	#8,$17(a0)
0001749E 4EB9 0000 DFAC             		jsr	ObjectFall
000174A4 4EBA E4AA                  		jsr	ObjHitFloor
000174A8 4A41                       		tst.w	d1
000174AA 6AE4                       		bpl.s	locret_16950
000174AC D368 000C                  		add.w	d1,$C(a0)
000174B0 4268 0012                  		clr.w	$12(a0)
000174B4 5428 0024                  		addq.b	#2,$24(a0)
000174B8 217C 0000 0000 0004        		move.l	#Map_obj78,4(a0)
000174C0 317C 22B0 0002             		move.w	#$22B0,2(a0)
000174C6 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; if level is SBZ, branch
000174CC 6700                       		beq.s	loc_16996
000174CE 317C 24FF 0002             		move.w	#$24FF,2(a0)	; MZ specific code
000174D4                            
000174D4                            loc_16996:
000174D4 0228 0003 0001             		andi.b	#3,1(a0)
000174DA 0028 0004 0001             		ori.b	#4,1(a0)
000174E0 1168 0001 0022             		move.b	1(a0),$22(a0)
000174E6 117C 0004 0018             		move.b	#4,$18(a0)
000174EC 117C 0008 0019             		move.b	#8,$19(a0)
000174F2 117C 000B 0020             		move.b	#$B,$20(a0)
000174F8 3428 0008                  		move.w	8(a0),d2
000174FC 7A0C                       		moveq	#$C,d5
000174FE 0828 0000 0022             		btst	#0,$22(a0)
00017504 6700                       		beq.s	loc_169CA
00017506 4445                       		neg.w	d5
00017508                            
00017508                            loc_169CA:
00017508 1C3C 0004                  		move.b	#4,d6
0001750C 7600                       		moveq	#0,d3
0001750E 7804                       		moveq	#4,d4
00017510 2448                       		movea.l	a0,a2
00017512 7202                       		moveq	#2,d1
00017514                            
00017514                            Obj78_LoadBody:
00017514 4EB9 0000 E4E0             		jsr	SingleObjLoad2
0001751A 6600                       		bne.s	Obj78_QuitLoad
0001751C 12BC 0078                  		move.b	#$78,0(a1)	; load body segment object
00017520 1346 0024                  		move.b	d6,$24(a1)
00017524 5406                       		addq.b	#2,d6
00017526 2368 0004 0004             		move.l	4(a0),4(a1)
0001752C 3368 0002 0002             		move.w	2(a0),2(a1)
00017532 137C 0005 0018             		move.b	#5,$18(a1)
00017538 137C 0008 0019             		move.b	#8,$19(a1)
0001753E 137C 00CB 0020             		move.b	#$CB,$20(a1)
00017544 D445                       		add.w	d5,d2
00017546 3342 0008                  		move.w	d2,8(a1)
0001754A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00017550 1368 0022 0022             		move.b	$22(a0),$22(a1)
00017556 1368 0022 0001             		move.b	$22(a0),1(a1)
0001755C 137C 0008 001A             		move.b	#8,$1A(a1)
00017562 234A 003C                  		move.l	a2,$3C(a1)
00017566 1344 003C                  		move.b	d4,$3C(a1)
0001756A 5804                       		addq.b	#4,d4
0001756C 2449                       		movea.l	a1,a2
0001756E                            
0001756E                            Obj78_QuitLoad:
0001756E 51C9 FFA4                  		dbf	d1,Obj78_LoadBody ; repeat sequence 2 more times
00017572                            
00017572 117C 0007 002A             		move.b	#7,$2A(a0)
00017578 4228 003C                  		clr.b	$3C(a0)
0001757C                            
0001757C                            Obj78_Action:				; XREF: Obj78_Index
0001757C 4A28 0022                  		tst.b	$22(a0)
00017580 6B00 0000                  		bmi.w	loc_16C96
00017584 7000                       		moveq	#0,d0
00017586 1028 0025                  		move.b	$25(a0),d0
0001758A 323B 0000                  		move.w	Obj78_Index2(pc,d0.w),d1
0001758E 4EBB 1000                  		jsr	Obj78_Index2(pc,d1.w)
00017592 1228 002B                  		move.b	$2B(a0),d1
00017596 6A00                       		bpl.s	Obj78_Display
00017598 43F9 0000 0000             		lea	(Ani_obj78).l,a1
0001759E 1028 0026                  		move.b	$26(a0),d0
000175A2 0240 007F                  		andi.w	#$7F,d0
000175A6 5828 0026                  		addq.b	#4,$26(a0)
000175AA 1031 0000                  		move.b	(a1,d0.w),d0
000175AE 6A00                       		bpl.s	Obj78_AniHead
000175B0 08A8 0007 002B             		bclr	#7,$2B(a0)
000175B6 6000                       		bra.s	Obj78_Display
000175B8                            ; ===========================================================================
000175B8                            
000175B8                            Obj78_AniHead:
000175B8 0201 0010                  		andi.b	#$10,d1
000175BC D001                       		add.b	d1,d0
000175BE 1140 001A                  		move.b	d0,$1A(a0)
000175C2                            
000175C2                            Obj78_Display:
000175C2 3028 0008                  		move.w	8(a0),d0
000175C6 0240 FF80                  		andi.w	#$FF80,d0
000175CA 3238 F700                  		move.w	($FFFFF700).w,d1
000175CE 0441 0080                  		subi.w	#$80,d1
000175D2 0241 FF80                  		andi.w	#$FF80,d1
000175D6 9041                       		sub.w	d1,d0
000175D8 0C40 0280                  		cmpi.w	#$280,d0
000175DC 6200 0000                  		bhi.w	Obj78_ChkGone
000175E0 4EF9 0000 E044             		jmp	DisplaySprite
000175E6                            ; ===========================================================================
000175E6                            
000175E6                            Obj78_ChkGone:
000175E6 45F8 FC00                  		lea	($FFFFFC00).w,a2
000175EA 7000                       		moveq	#0,d0
000175EC 1028 0023                  		move.b	$23(a0),d0
000175F0 6700                       		beq.s	loc_16ABC
000175F2 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000175F8                            
000175F8                            loc_16ABC:
000175F8 117C 000A 0024             		move.b	#$A,$24(a0)	; run "Obj78_Delete" routine
000175FE 4E75                       		rts	
00017600                            ; ===========================================================================
00017600                            
00017600                            Obj78_Delete:				; XREF: Obj78_Index
00017600 4EF9 0000 E080             		jmp	DeleteObject
00017606                            ; ===========================================================================
00017606 0000                       Obj78_Index2:	dc.w Obj78_Move-Obj78_Index2
00017608 0000                       		dc.w loc_16B02-Obj78_Index2
0001760A                            ; ===========================================================================
0001760A                            
0001760A                            Obj78_Move:				; XREF: Obj78_Index2
0001760A 5328 002A                  		subq.b	#1,$2A(a0)
0001760E 6B00                       		bmi.s	Obj78_Move2
00017610 4E75                       		rts	
00017612                            ; ===========================================================================
00017612                            
00017612                            Obj78_Move2:
00017612 5428 0025                  		addq.b	#2,$25(a0)
00017616 117C 0010 002A             		move.b	#$10,$2A(a0)
0001761C 317C FF40 0010             		move.w	#-$C0,$10(a0)
00017622 317C 0040 0014             		move.w	#$40,$14(a0)
00017628 0868 0004 002B             		bchg	#4,$2B(a0)
0001762E 6600                       		bne.s	loc_16AFC
00017630 4268 0010                  		clr.w	$10(a0)
00017634 4468 0014                  		neg.w	$14(a0)
00017638                            
00017638                            loc_16AFC:
00017638 08E8 0007 002B             		bset	#7,$2B(a0)
0001763E                            
0001763E                            loc_16B02:				; XREF: Obj78_Index2
0001763E 5328 002A                  		subq.b	#1,$2A(a0)
00017642 6B00                       		bmi.s	loc_16B5E
00017644 2F28 0008                  		move.l	8(a0),-(sp)
00017648 2428 0008                  		move.l	8(a0),d2
0001764C 3028 0010                  		move.w	$10(a0),d0
00017650 0828 0000 0022             		btst	#0,$22(a0)
00017656 6700                       		beq.s	loc_16B1E
00017658 4440                       		neg.w	d0
0001765A                            
0001765A                            loc_16B1E:
0001765A 48C0                       		ext.l	d0
0001765C E180                       		asl.l	#8,d0
0001765E D480                       		add.l	d0,d2
00017660 2142 0008                  		move.l	d2,8(a0)
00017664 4EBA E2EA                  		jsr	ObjHitFloor
00017668 241F                       		move.l	(sp)+,d2
0001766A 0C41 FFF8                  		cmpi.w	#-8,d1
0001766E 6D00                       		blt.s	loc_16B70
00017670 0C41 000C                  		cmpi.w	#$C,d1
00017674 6C00                       		bge.s	loc_16B70
00017676 D368 000C                  		add.w	d1,$C(a0)
0001767A 4842                       		swap	d2
0001767C B468 0008                  		cmp.w	8(a0),d2
00017680 6700                       		beq.s	locret_16B5C
00017682 7000                       		moveq	#0,d0
00017684 1028 003C                  		move.b	$3C(a0),d0
00017688 5228 003C                  		addq.b	#1,$3C(a0)
0001768C 0228 000F 003C             		andi.b	#$F,$3C(a0)
00017692 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00017696                            
00017696                            locret_16B5C:
00017696 4E75                       		rts	
00017698                            ; ===========================================================================
00017698                            
00017698                            loc_16B5E:
00017698 5528 0025                  		subq.b	#2,$25(a0)
0001769C 117C 0007 002A             		move.b	#7,$2A(a0)
000176A2 317C 0000 0010             		move.w	#0,$10(a0)
000176A8 4E75                       		rts	
000176AA                            ; ===========================================================================
000176AA                            
000176AA                            loc_16B70:
000176AA 2142 0008                  		move.l	d2,8(a0)
000176AE 0868 0000 0022             		bchg	#0,$22(a0)
000176B4 1168 0022 0001             		move.b	$22(a0),1(a0)
000176BA 7000                       		moveq	#0,d0
000176BC 1028 003C                  		move.b	$3C(a0),d0
000176C0 11BC 0080 002C             		move.b	#$80,$2C(a0,d0.w)
000176C6 5228 003C                  		addq.b	#1,$3C(a0)
000176CA 0228 000F 003C             		andi.b	#$F,$3C(a0)
000176D0 4E75                       		rts	
000176D2                            ; ===========================================================================
000176D2                            
000176D2                            Obj78_BodySeg2:				; XREF: Obj78_Index
000176D2 2268 003C                  		movea.l	$3C(a0),a1
000176D6 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
000176DC 6A00                       		bpl.s	Obj78_BodySeg1
000176DE 43F9 0000 0000             		lea	(Ani_obj78).l,a1
000176E4 1028 0026                  		move.b	$26(a0),d0
000176E8 0240 007F                  		andi.w	#$7F,d0
000176EC 5828 0026                  		addq.b	#4,$26(a0)
000176F0 4A31 0004                  		tst.b	4(a1,d0.w)
000176F4 6A00                       		bpl.s	Obj78_AniBody
000176F6 5828 0026                  		addq.b	#4,$26(a0)
000176FA                            
000176FA                            Obj78_AniBody:
000176FA 1031 0000                  		move.b	(a1,d0.w),d0
000176FE 5000                       		addq.b	#8,d0
00017700 1140 001A                  		move.b	d0,$1A(a0)
00017704                            
00017704                            Obj78_BodySeg1:				; XREF: Obj78_Index
00017704 2268 003C                  		movea.l	$3C(a0),a1
00017708 4A28 0022                  		tst.b	$22(a0)
0001770C 6B00 0000                  		bmi.w	loc_16C90
00017710 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
00017716 1169 0025 0025             		move.b	$25(a1),$25(a0)
0001771C 6700 0000                  		beq.w	loc_16C64
00017720 3169 0014 0014             		move.w	$14(a1),$14(a0)
00017726 3029 0010                  		move.w	$10(a1),d0
0001772A D069 0014                  		add.w	$14(a1),d0
0001772E 3140 0010                  		move.w	d0,$10(a0)
00017732 2428 0008                  		move.l	8(a0),d2
00017736 2602                       		move.l	d2,d3
00017738 3028 0010                  		move.w	$10(a0),d0
0001773C 0828 0000 0022             		btst	#0,$22(a0)
00017742 6700                       		beq.s	loc_16C0C
00017744 4440                       		neg.w	d0
00017746                            
00017746                            loc_16C0C:
00017746 48C0                       		ext.l	d0
00017748 E180                       		asl.l	#8,d0
0001774A D480                       		add.l	d0,d2
0001774C 2142 0008                  		move.l	d2,8(a0)
00017750 4843                       		swap	d3
00017752 B668 0008                  		cmp.w	8(a0),d3
00017756 6700                       		beq.s	loc_16C64
00017758 7000                       		moveq	#0,d0
0001775A 1028 003C                  		move.b	$3C(a0),d0
0001775E 1231 002C                  		move.b	$2C(a1,d0.w),d1
00017762 0C01 0080                  		cmpi.b	#-$80,d1
00017766 6600                       		bne.s	loc_16C50
00017768 4843                       		swap	d3
0001776A 2143 0008                  		move.l	d3,8(a0)
0001776E 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00017772 0868 0000 0022             		bchg	#0,$22(a0)
00017778 1168 0022 0001             		move.b	$22(a0),1(a0)
0001777E 5228 003C                  		addq.b	#1,$3C(a0)
00017782 0228 000F 003C             		andi.b	#$F,$3C(a0)
00017788 6000                       		bra.s	loc_16C64
0001778A                            ; ===========================================================================
0001778A                            
0001778A                            loc_16C50:
0001778A 4881                       		ext.w	d1
0001778C D368 000C                  		add.w	d1,$C(a0)
00017790 5228 003C                  		addq.b	#1,$3C(a0)
00017794 0228 000F 003C             		andi.b	#$F,$3C(a0)
0001779A 1181 002C                  		move.b	d1,$2C(a0,d0.w)
0001779E                            
0001779E                            loc_16C64:
0001779E 0C29 000C 0024             		cmpi.b	#$C,$24(a1)
000177A4 6700                       		beq.s	loc_16C90
000177A6 0C11 0027                  		cmpi.b	#$27,0(a1)
000177AA 6700                       		beq.s	loc_16C7C
000177AC 0C29 000A 0024             		cmpi.b	#$A,$24(a1)
000177B2 6600                       		bne.s	loc_16C82
000177B4                            
000177B4                            loc_16C7C:
000177B4 117C 000A 0024             		move.b	#$A,$24(a0)
000177BA                            
000177BA                            loc_16C82:
000177BA 4EF9 0000 E044             		jmp	DisplaySprite
000177C0                            
000177C0                            ; ===========================================================================
000177C0 FE00 FE80 0180 0200        Obj78_FragSpeed:dc.w $FE00, $FE80, $180, $200
000177C8                            ; ===========================================================================
000177C8                            
000177C8                            loc_16C90:
000177C8 08E9 0007 0022             		bset	#7,$22(a1)
000177CE                            
000177CE                            loc_16C96:
000177CE 7000                       		moveq	#0,d0
000177D0 1028 0024                  		move.b	$24(a0),d0
000177D4 303B 00E8                  		move.w	Obj78_FragSpeed-2(pc,d0.w),d0
000177D8 0828 0000 0022             		btst	#0,$22(a0)
000177DE 6700                       		beq.s	loc_16CAA
000177E0 4440                       		neg.w	d0
000177E2                            
000177E2                            loc_16CAA:
000177E2 3140 0010                  		move.w	d0,$10(a0)
000177E6 317C FC00 0012             		move.w	#-$400,$12(a0)
000177EC 117C 000C 0024             		move.b	#$C,$24(a0)
000177F2 0228 00F8 001A             		andi.b	#-8,$1A(a0)
000177F8                            
000177F8                            loc_16CC0:				; XREF: Obj78_Index
000177F8 4EB9 0000 DFAC             		jsr	ObjectFall
000177FE 4A68 0012                  		tst.w	$12(a0)
00017802 6B00                       		bmi.s	loc_16CE0
00017804 4EBA E14A                  		jsr	ObjHitFloor
00017808 4A41                       		tst.w	d1
0001780A 6A00                       		bpl.s	loc_16CE0
0001780C D368 000C                  		add.w	d1,$C(a0)
00017810 317C FC00 0012             		move.w	#-$400,$12(a0)
00017816                            
00017816                            loc_16CE0:
00017816 4A28 0001                  		tst.b	1(a0)
0001781A 6A00 FDCA                  		bpl.w	Obj78_ChkGone
0001781E 4EF9 0000 E044             		jmp	DisplaySprite
00017824                            ; ===========================================================================
00017824                            Ani_obj78:
00017824                            	include "_anim\obj78.asm"
00017824                            ; ---------------------------------------------------------------------------
00017824                            ; Animation script - Caterkiller enemy (uses non-standard format)
00017824                            ; ---------------------------------------------------------------------------
00017824 0000 0000 0000 0000 0000+  	dc.b 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 1
00017834 0101 0101 0101 0202 0202+  	dc.b 1,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 3, 3, 3, 3, 3
00017844 0404 0404 0404 0505 0505+  	dc.b 4,	4, 4, 4, 4, 4, 5, 5, 5,	5, 5, 6, 6, 6, 6, 6
00017854 0606 0707 0707 0707 0707+  	dc.b 6,	6, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, $FF, 7, 7, $FF
00017864 0707 0707 0707 0707 0707+  	dc.b 7,	7, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, 7, 7, 7, 6
00017874 0606 0606 0606 0505 0505+  	dc.b 6,	6, 6, 6, 6, 6, 5, 5, 5,	5, 5, 4, 4, 4, 4, 4
00017884 0403 0303 0303 0202 0202+  	dc.b 4,	3, 3, 3, 3, 3, 2, 2, 2,	2, 2, 1, 1, 1, 1, 1
00017894 0101 0000 0000 0000 0000+  	dc.b 1,	1, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, $FF, 0, 0, $FF
000178A4                            	even
000178A4                            	even
000178A4                            
000178A4                            ; ---------------------------------------------------------------------------
000178A4                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
000178A4                            ; ---------------------------------------------------------------------------
000178A4                            Map_obj78:
000178A4                            	include "_maps\obj78.asm"
000178A4                            ; ---------------------------------------------------------------------------
000178A4                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
000178A4                            ; ---------------------------------------------------------------------------
000178A4 0000 0000                  		dc.w byte_16D9E-Map_obj78, byte_16DA4-Map_obj78
000178A8 0000 0000                  		dc.w byte_16DAA-Map_obj78, byte_16DB0-Map_obj78
000178AC 0000 0000                  		dc.w byte_16DB6-Map_obj78, byte_16DBC-Map_obj78
000178B0 0000 0000                  		dc.w byte_16DC2-Map_obj78, byte_16DC8-Map_obj78
000178B4 0000 0000                  		dc.w byte_16DCE-Map_obj78, byte_16DD4-Map_obj78
000178B8 0000 0000                  		dc.w byte_16DDA-Map_obj78, byte_16DE0-Map_obj78
000178BC 0000 0000                  		dc.w byte_16DE6-Map_obj78, byte_16DEC-Map_obj78
000178C0 0000 0000                  		dc.w byte_16DF2-Map_obj78, byte_16DF8-Map_obj78
000178C4 0000 0000                  		dc.w byte_16DFE-Map_obj78, byte_16E04-Map_obj78
000178C8 0000 0000                  		dc.w byte_16E0A-Map_obj78, byte_16E10-Map_obj78
000178CC 0000 0000                  		dc.w byte_16E16-Map_obj78, byte_16E1C-Map_obj78
000178D0 0000 0000                  		dc.w byte_16E22-Map_obj78, byte_16E28-Map_obj78
000178D4 01                         byte_16D9E:	dc.b 1
000178D5 F206 0000 F8               		dc.b $F2, 6, 0,	0, $F8
000178DA 01                         byte_16DA4:	dc.b 1
000178DB F106 0000 F8               		dc.b $F1, 6, 0,	0, $F8
000178E0 01                         byte_16DAA:	dc.b 1
000178E1 F006 0000 F8               		dc.b $F0, 6, 0,	0, $F8
000178E6 01                         byte_16DB0:	dc.b 1
000178E7 EF06 0000 F8               		dc.b $EF, 6, 0,	0, $F8
000178EC 01                         byte_16DB6:	dc.b 1
000178ED EE06 0000 F8               		dc.b $EE, 6, 0,	0, $F8
000178F2 01                         byte_16DBC:	dc.b 1
000178F3 ED06 0000 F8               		dc.b $ED, 6, 0,	0, $F8
000178F8 01                         byte_16DC2:	dc.b 1
000178F9 EC06 0000 F8               		dc.b $EC, 6, 0,	0, $F8
000178FE 01                         byte_16DC8:	dc.b 1
000178FF EB06 0000 F8               		dc.b $EB, 6, 0,	0, $F8
00017904 01                         byte_16DCE:	dc.b 1
00017905 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
0001790A 01                         byte_16DD4:	dc.b 1
0001790B F705 000C F8               		dc.b $F7, 5, 0,	$C, $F8
00017910 01                         byte_16DDA:	dc.b 1
00017911 F605 000C F8               		dc.b $F6, 5, 0,	$C, $F8
00017916 01                         byte_16DE0:	dc.b 1
00017917 F505 000C F8               		dc.b $F5, 5, 0,	$C, $F8
0001791C 01                         byte_16DE6:	dc.b 1
0001791D F405 000C F8               		dc.b $F4, 5, 0,	$C, $F8
00017922 01                         byte_16DEC:	dc.b 1
00017923 F305 000C F8               		dc.b $F3, 5, 0,	$C, $F8
00017928 01                         byte_16DF2:	dc.b 1
00017929 F205 000C F8               		dc.b $F2, 5, 0,	$C, $F8
0001792E 01                         byte_16DF8:	dc.b 1
0001792F F105 000C F8               		dc.b $F1, 5, 0,	$C, $F8
00017934 01                         byte_16DFE:	dc.b 1
00017935 F206 0006 F8               		dc.b $F2, 6, 0,	6, $F8
0001793A 01                         byte_16E04:	dc.b 1
0001793B F106 0006 F8               		dc.b $F1, 6, 0,	6, $F8
00017940 01                         byte_16E0A:	dc.b 1
00017941 F006 0006 F8               		dc.b $F0, 6, 0,	6, $F8
00017946 01                         byte_16E10:	dc.b 1
00017947 EF06 0006 F8               		dc.b $EF, 6, 0,	6, $F8
0001794C 01                         byte_16E16:	dc.b 1
0001794D EE06 0006 F8               		dc.b $EE, 6, 0,	6, $F8
00017952 01                         byte_16E1C:	dc.b 1
00017953 ED06 0006 F8               		dc.b $ED, 6, 0,	6, $F8
00017958 01                         byte_16E22:	dc.b 1
00017959 EC06 0006 F8               		dc.b $EC, 6, 0,	6, $F8
0001795E 01                         byte_16E28:	dc.b 1
0001795F EB06 0006 F8               		dc.b $EB, 6, 0,	6, $F8
00017964                            		even
00017964                            		even
00017964                            
00017964                            ; ===========================================================================
00017964                            ; ---------------------------------------------------------------------------
00017964                            ; Object 79 - lamppost
00017964                            ; ---------------------------------------------------------------------------
00017964                            
00017964                            Obj79:					; XREF: Obj_Index
00017964 7000                       		moveq	#0,d0
00017966 1028 0024                  		move.b	$24(a0),d0
0001796A 323B 0000                  		move.w	Obj79_Index(pc,d0.w),d1
0001796E 4EBB 1000                  		jsr	Obj79_Index(pc,d1.w)
00017972 4EFA 8778                  		jmp	MarkObjGone
00017976                            ; ===========================================================================
00017976 0000                       Obj79_Index:	dc.w Obj79_Main-Obj79_Index
00017978 0000                       		dc.w Obj79_BlueLamp-Obj79_Index
0001797A 0000                       		dc.w Obj79_AfterHit-Obj79_Index
0001797C 0000                       		dc.w Obj79_Twirl-Obj79_Index
0001797E                            ; ===========================================================================
0001797E                            
0001797E                            Obj79_Main:				; XREF: Obj79_Index
0001797E 5428 0024                  		addq.b	#2,$24(a0)
00017982 217C 0000 0000 0004        		move.l	#Map_obj79,4(a0)
0001798A 317C 07A0 0002             		move.w	#$7A0,2(a0)
00017990 117C 0004 0001             		move.b	#4,1(a0)
00017996 117C 0008 0019             		move.b	#8,$19(a0)
0001799C 117C 0005 0018             		move.b	#5,$18(a0)
000179A2 45F8 FC00                  		lea	($FFFFFC00).w,a2
000179A6 7000                       		moveq	#0,d0
000179A8 1028 0023                  		move.b	$23(a0),d0
000179AC 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000179B2 0832 0000 0002             		btst	#0,2(a2,d0.w)
000179B8 6600                       		bne.s	Obj79_RedLamp
000179BA 1238 FE30                  		move.b	($FFFFFE30).w,d1
000179BE 0201 007F                  		andi.b	#$7F,d1
000179C2 1428 0028                  		move.b	$28(a0),d2	; get lamppost number
000179C6 0202 007F                  		andi.b	#$7F,d2
000179CA B202                       		cmp.b	d2,d1		; is lamppost number higher than the number hit?
000179CC 6500                       		bcs.s	Obj79_BlueLamp	; if yes, branch
000179CE                            
000179CE                            Obj79_RedLamp:
000179CE 08F2 0000 0002             		bset	#0,2(a2,d0.w)
000179D4 117C 0004 0024             		move.b	#4,$24(a0)	; run "Obj79_AfterHit" routine
000179DA 117C 0003 001A             		move.b	#3,$1A(a0)	; use red lamppost frame
000179E0 4E75                       		rts	
000179E2                            ; ===========================================================================
000179E2                            
000179E2                            Obj79_BlueLamp:				; XREF: Obj79_Index
000179E2 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
000179E6 6600 0000                  		bne.w	locret_16F90	; if yes, branch
000179EA 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000179EE 6B00 0000                  		bmi.w	locret_16F90
000179F2 1238 FE30                  		move.b	($FFFFFE30).w,d1
000179F6 0201 007F                  		andi.b	#$7F,d1
000179FA 1428 0028                  		move.b	$28(a0),d2
000179FE 0202 007F                  		andi.b	#$7F,d2
00017A02 B202                       		cmp.b	d2,d1
00017A04 6500                       		bcs.s	Obj79_HitLamp
00017A06 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017A0A 7000                       		moveq	#0,d0
00017A0C 1028 0023                  		move.b	$23(a0),d0
00017A10 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00017A16 117C 0004 0024             		move.b	#4,$24(a0)
00017A1C 117C 0003 001A             		move.b	#3,$1A(a0)
00017A22 6000 0000                  		bra.w	locret_16F90
00017A26                            ; ===========================================================================
00017A26                            
00017A26                            Obj79_HitLamp:
00017A26 3038 D008                  		move.w	($FFFFD008).w,d0
00017A2A 9068 0008                  		sub.w	8(a0),d0
00017A2E 5040                       		addq.w	#8,d0
00017A30 0C40 0010                  		cmpi.w	#$10,d0
00017A34 6400 0000                  		bcc.w	locret_16F90
00017A38 3038 D00C                  		move.w	($FFFFD00C).w,d0
00017A3C 9068 000C                  		sub.w	$C(a0),d0
00017A40 0640 0040                  		addi.w	#$40,d0
00017A44 0C40 0068                  		cmpi.w	#$68,d0
00017A48 6400                       		bcc.s	locret_16F90
00017A4A 303C 00A1                  		move.w	#$A1,d0
00017A4E 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play lamppost sound
00017A54 5428 0024                  		addq.b	#2,$24(a0)
00017A58 4EB9 0000 E4CA             		jsr	SingleObjLoad
00017A5E 6600                       		bne.s	loc_16F76
00017A60 12BC 0079                  		move.b	#$79,0(a1)	; load twirling	lamp object
00017A64 137C 0006 0024             		move.b	#6,$24(a1)	; use "Obj79_Twirl" routine
00017A6A 3368 0008 0030             		move.w	8(a0),$30(a1)
00017A70 3368 000C 0032             		move.w	$C(a0),$32(a1)
00017A76 0469 0018 0032             		subi.w	#$18,$32(a1)
00017A7C 237C 0000 0000 0004        		move.l	#Map_obj79,4(a1)
00017A84 337C 07A0 0002             		move.w	#$7A0,2(a1)
00017A8A 137C 0004 0001             		move.b	#4,1(a1)
00017A90 137C 0008 0019             		move.b	#8,$19(a1)
00017A96 137C 0004 0018             		move.b	#4,$18(a1)
00017A9C 137C 0002 001A             		move.b	#2,$1A(a1)
00017AA2 337C 0020 0036             		move.w	#$20,$36(a1)
00017AA8                            
00017AA8                            loc_16F76:
00017AA8 117C 0001 001A             		move.b	#1,$1A(a0)	; use "post only" frame, with no lamp
00017AAE 6100 0000                  		bsr.w	Obj79_StoreInfo
00017AB2 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017AB6 7000                       		moveq	#0,d0
00017AB8 1028 0023                  		move.b	$23(a0),d0
00017ABC 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00017AC2                            
00017AC2                            locret_16F90:
00017AC2 4E75                       		rts	
00017AC4                            ; ===========================================================================
00017AC4                            
00017AC4                            Obj79_AfterHit:				; XREF: Obj79_Index
00017AC4 4E75                       		rts	
00017AC6                            ; ===========================================================================
00017AC6                            
00017AC6                            Obj79_Twirl:				; XREF: Obj79_Index
00017AC6 5368 0036                  		subq.w	#1,$36(a0)
00017ACA 6A00                       		bpl.s	loc_16FA0
00017ACC 117C 0004 0024             		move.b	#4,$24(a0)
00017AD2                            
00017AD2                            loc_16FA0:
00017AD2 1028 0026                  		move.b	$26(a0),d0
00017AD6 0428 0010 0026             		subi.b	#$10,$26(a0)
00017ADC 0400 0040                  		subi.b	#$40,d0
00017AE0 4EB9 0000 2D34             		jsr	(CalcSine).l
00017AE6 C3FC 0C00                  		muls.w	#$C00,d1
00017AEA 4841                       		swap	d1
00017AEC D268 0030                  		add.w	$30(a0),d1
00017AF0 3141 0008                  		move.w	d1,8(a0)
00017AF4 C1FC 0C00                  		muls.w	#$C00,d0
00017AF8 4840                       		swap	d0
00017AFA D068 0032                  		add.w	$32(a0),d0
00017AFE 3140 000C                  		move.w	d0,$C(a0)
00017B02 4E75                       		rts	
00017B04                            ; ===========================================================================
00017B04                            ; ---------------------------------------------------------------------------
00017B04                            ; Subroutine to	store information when you hit a lamppost
00017B04                            ; ---------------------------------------------------------------------------
00017B04                            
00017B04                            Obj79_StoreInfo:			; XREF: Obj79_HitLamp
00017B04 11E8 0028 FE30             		move.b	$28(a0),($FFFFFE30).w 		; lamppost number
00017B0A 11F8 FE30 FE31             		move.b	($FFFFFE30).w,($FFFFFE31).w
00017B10 31E8 0008 FE32             		move.w	8(a0),($FFFFFE32).w		; x-position
00017B16 31E8 000C FE34             		move.w	$C(a0),($FFFFFE34).w		; y-position
00017B1C 31F8 FE20 FE36             		move.w	($FFFFFE20).w,($FFFFFE36).w 	; rings
00017B22 11F8 FE1B FE54             		move.b	($FFFFFE1B).w,($FFFFFE54).w 	; lives
00017B28 21F8 FE22 FE38             		move.l	($FFFFFE22).w,($FFFFFE38).w 	; time
00017B2E 11F8 F742 FE3C             		move.b	($FFFFF742).w,($FFFFFE3C).w 	; routine counter for dynamic level mod
00017B34 31F8 F72E FE3E             		move.w	($FFFFF72E).w,($FFFFFE3E).w 	; lower y-boundary of level
00017B3A 31F8 F700 FE40             		move.w	($FFFFF700).w,($FFFFFE40).w 	; screen x-position
00017B40 31F8 F704 FE42             		move.w	($FFFFF704).w,($FFFFFE42).w 	; screen y-position
00017B46 31F8 F708 FE44             		move.w	($FFFFF708).w,($FFFFFE44).w 	; bg position
00017B4C 31F8 F70C FE46             		move.w	($FFFFF70C).w,($FFFFFE46).w 	; bg position
00017B52 31F8 F710 FE48             		move.w	($FFFFF710).w,($FFFFFE48).w 	; bg position
00017B58 31F8 F714 FE4A             		move.w	($FFFFF714).w,($FFFFFE4A).w 	; bg position
00017B5E 31F8 F718 FE4C             		move.w	($FFFFF718).w,($FFFFFE4C).w 	; bg position
00017B64 31F8 F71C FE4E             		move.w	($FFFFF71C).w,($FFFFFE4E).w 	; bg position
00017B6A 31F8 F648 FE50             		move.w	($FFFFF648).w,($FFFFFE50).w 	; water height
00017B70 11F8 F64D FE52             		move.b	($FFFFF64D).w,($FFFFFE52).w 	; rountine counter for water
00017B76 11F8 F64E FE53             		move.b	($FFFFF64E).w,($FFFFFE53).w 	; water direction
00017B7C 4E75                       		rts	
00017B7E                            
00017B7E                            ; ---------------------------------------------------------------------------
00017B7E                            ; Subroutine to	load stored info when you start	a level	from a lamppost
00017B7E                            ; ---------------------------------------------------------------------------
00017B7E                            
00017B7E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017B7E                            
00017B7E                            
00017B7E                            Obj79_LoadInfo:				; XREF: LevelSizeLoad
00017B7E 11F8 FE31 FE30             		move.b	($FFFFFE31).w,($FFFFFE30).w
00017B84 31F8 FE32 D008             		move.w	($FFFFFE32).w,($FFFFD008).w
00017B8A 31F8 FE34 D00C             		move.w	($FFFFFE34).w,($FFFFD00C).w
00017B90 31F8 FE36 FE20             		move.w	($FFFFFE36).w,($FFFFFE20).w
00017B96 11F8 FE54 FE1B             		move.b	($FFFFFE54).w,($FFFFFE1B).w
00017B9C 4278 FE20                  		clr.w	($FFFFFE20).w
00017BA0 4238 FE1B                  		clr.b	($FFFFFE1B).w
00017BA4 21F8 FE38 FE22             		move.l	($FFFFFE38).w,($FFFFFE22).w
00017BAA 11FC 003B FE25             		move.b	#59,($FFFFFE25).w
00017BB0 5338 FE24                  		subq.b	#1,($FFFFFE24).w
00017BB4 11F8 FE3C F742             		move.b	($FFFFFE3C).w,($FFFFF742).w
00017BBA 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
00017BC0 31F8 FE3E F72E             		move.w	($FFFFFE3E).w,($FFFFF72E).w
00017BC6 31F8 FE3E F726             		move.w	($FFFFFE3E).w,($FFFFF726).w
00017BCC 31F8 FE40 F700             		move.w	($FFFFFE40).w,($FFFFF700).w
00017BD2 31F8 FE42 F704             		move.w	($FFFFFE42).w,($FFFFF704).w
00017BD8 31F8 FE44 F708             		move.w	($FFFFFE44).w,($FFFFF708).w
00017BDE 31F8 FE46 F70C             		move.w	($FFFFFE46).w,($FFFFF70C).w
00017BE4 31F8 FE48 F710             		move.w	($FFFFFE48).w,($FFFFF710).w
00017BEA 31F8 FE4A F714             		move.w	($FFFFFE4A).w,($FFFFF714).w
00017BF0 31F8 FE4C F718             		move.w	($FFFFFE4C).w,($FFFFF718).w
00017BF6 31F8 FE4E F71C             		move.w	($FFFFFE4E).w,($FFFFF71C).w
00017BFC 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00017C02 6600                       		bne.s	loc_170E4
00017C04 31F8 FE50 F648             		move.w	($FFFFFE50).w,($FFFFF648).w
00017C0A 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
00017C10 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
00017C16                            
00017C16                            loc_170E4:
00017C16 4A38 FE30                  		tst.b	($FFFFFE30).w
00017C1A 6A00                       		bpl.s	locret_170F6
00017C1C 3038 FE32                  		move.w	($FFFFFE32).w,d0
00017C20 0440 00A0                  		subi.w	#$A0,d0
00017C24 31C0 F728                  		move.w	d0,($FFFFF728).w
00017C28                            
00017C28                            locret_170F6:
00017C28 4E75                       		rts	
00017C2A                            ; End of function Obj79_LoadInfo
00017C2A                            
00017C2A                            ; ===========================================================================
00017C2A                            ; ---------------------------------------------------------------------------
00017C2A                            ; Sprite mappings - lamppost
00017C2A                            ; ---------------------------------------------------------------------------
00017C2A                            Map_obj79:
00017C2A                            	include "_maps\obj79.asm"
00017C2A                            ; ---------------------------------------------------------------------------
00017C2A                            ; Sprite mappings - lamppost
00017C2A                            ; ---------------------------------------------------------------------------
00017C2A 0000 0000                  		dc.w byte_17100-Map_obj79, byte_1711F-Map_obj79
00017C2E 0000 0000                  		dc.w byte_17134-Map_obj79, byte_1713F-Map_obj79
00017C32 06                         byte_17100:	dc.b 6
00017C33 E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00017C38 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00017C3D F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
00017C42 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00017C47 D401 0006 F8               		dc.b $D4, 1, 0,	6, $F8
00017C4C D401 0806 00               		dc.b $D4, 1, 8,	6, 0
00017C51 04                         byte_1711F:	dc.b 4
00017C52 E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00017C57 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00017C5C F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
00017C61 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00017C66 02                         byte_17134:	dc.b 2
00017C67 F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
00017C6C F801 0808 00               		dc.b $F8, 1, 8,	8, 0
00017C71 06                         byte_1713F:	dc.b 6
00017C72 E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00017C77 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00017C7C F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
00017C81 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00017C86 D401 0008 F8               		dc.b $D4, 1, 0,	8, $F8
00017C8B D401 0808 00               		dc.b $D4, 1, 8,	8, 0
00017C90                            		even
00017C90                            		even
00017C90                            
00017C90                            ; ===========================================================================
00017C90                            ; ---------------------------------------------------------------------------
00017C90                            ; Object 7D - hidden points at the end of a level
00017C90                            ; ---------------------------------------------------------------------------
00017C90                            
00017C90                            Obj7D:					; XREF: Obj_Index
00017C90 7000                       		moveq	#0,d0
00017C92 1028 0024                  		move.b	$24(a0),d0
00017C96 323B 0000                  		move.w	Obj7D_Index(pc,d0.w),d1
00017C9A 4EFB 1000                  		jmp	Obj7D_Index(pc,d1.w)
00017C9E                            ; ===========================================================================
00017C9E 0000                       Obj7D_Index:	dc.w Obj7D_Main-Obj7D_Index
00017CA0 0000                       		dc.w Obj7D_DelayDel-Obj7D_Index
00017CA2                            ; ===========================================================================
00017CA2                            
00017CA2                            Obj7D_Main:				; XREF: Obj7D_Index
00017CA2 7410                       		moveq	#$10,d2
00017CA4 3602                       		move.w	d2,d3
00017CA6 D643                       		add.w	d3,d3
00017CA8 43F8 D000                  		lea	($FFFFD000).w,a1
00017CAC 3029 0008                  		move.w	8(a1),d0
00017CB0 9068 0008                  		sub.w	8(a0),d0
00017CB4 D042                       		add.w	d2,d0
00017CB6 B043                       		cmp.w	d3,d0
00017CB8 6400                       		bcc.s	Obj7D_ChkDel
00017CBA 3229 000C                  		move.w	$C(a1),d1
00017CBE 9268 000C                  		sub.w	$C(a0),d1
00017CC2 D242                       		add.w	d2,d1
00017CC4 B243                       		cmp.w	d3,d1
00017CC6 6400                       		bcc.s	Obj7D_ChkDel
00017CC8 4A78 FE08                  		tst.w	($FFFFFE08).w
00017CCC 6600                       		bne.s	Obj7D_ChkDel
00017CCE 4A38 F7CD                  		tst.b	($FFFFF7CD).w
00017CD2 6600                       		bne.s	Obj7D_ChkDel
00017CD4 5428 0024                  		addq.b	#2,$24(a0)
00017CD8 217C 0000 0000 0004        		move.l	#Map_obj7D,4(a0)
00017CE0 317C 84B6 0002             		move.w	#$84B6,2(a0)
00017CE6 0028 0004 0001             		ori.b	#4,1(a0)
00017CEC 117C 0000 0018             		move.b	#0,$18(a0)
00017CF2 117C 0010 0019             		move.b	#$10,$19(a0)
00017CF8 1168 0028 001A             		move.b	$28(a0),$1A(a0)
00017CFE 317C 0077 0030             		move.w	#119,$30(a0)	; set display time to 2	seconds
00017D04 303C 00C9                  		move.w	#$C9,d0
00017D08 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play bonus sound
00017D0E 7000                       		moveq	#0,d0
00017D10 1028 0028                  		move.b	$28(a0),d0
00017D14 D040                       		add.w	d0,d0
00017D16 303B 0000                  		move.w	Obj7D_Points(pc,d0.w),d0 ; load	bonus points array
00017D1A 4EB9 0000 0000             		jsr	AddPoints
00017D20                            
00017D20                            Obj7D_ChkDel:
00017D20 3028 0008                  		move.w	8(a0),d0
00017D24 0240 FF80                  		andi.w	#$FF80,d0
00017D28 3238 F700                  		move.w	($FFFFF700).w,d1
00017D2C 0441 0080                  		subi.w	#$80,d1
00017D30 0241 FF80                  		andi.w	#$FF80,d1
00017D34 9041                       		sub.w	d1,d0
00017D36 0C40 0280                  		cmpi.w	#$280,d0
00017D3A 6200                       		bhi.s	Obj7D_Delete
00017D3C 4E75                       		rts	
00017D3E                            ; ===========================================================================
00017D3E                            
00017D3E                            Obj7D_Delete:
00017D3E 4EF9 0000 E080             		jmp	DeleteObject
00017D44                            ; ===========================================================================
00017D44 0000                       Obj7D_Points:	dc.w 0			; Bonus	points array
00017D46 03E8                       		dc.w 1000
00017D48 0064                       		dc.w 100
00017D4A 0001                       		dc.w 1
00017D4C                            ; ===========================================================================
00017D4C                            
00017D4C                            Obj7D_DelayDel:				; XREF: Obj7D_Index
00017D4C 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from display time
00017D50 6B00                       		bmi.s	Obj7D_Delete2	; if time is zero, branch
00017D52 3028 0008                  		move.w	8(a0),d0
00017D56 0240 FF80                  		andi.w	#-$80,d0
00017D5A 3238 F700                  		move.w	($FFFFF700).w,d1
00017D5E 0441 0080                  		subi.w	#$80,d1
00017D62 0241 FF80                  		andi.w	#-$80,d1
00017D66 9041                       		sub.w	d1,d0
00017D68 0C40 0280                  		cmpi.w	#$280,d0
00017D6C 6200                       		bhi.s	Obj7D_Delete2
00017D6E 4EF9 0000 E044             		jmp	DisplaySprite
00017D74                            ; ===========================================================================
00017D74                            
00017D74                            Obj7D_Delete2:
00017D74 4EF9 0000 E080             		jmp	DeleteObject
00017D7A                            ; ===========================================================================
00017D7A                            ; ---------------------------------------------------------------------------
00017D7A                            ; Sprite mappings - hidden points at the end of	a level
00017D7A                            ; ---------------------------------------------------------------------------
00017D7A                            Map_obj7D:
00017D7A                            	include "_maps\obj7D.asm"
00017D7A                            ; ---------------------------------------------------------------------------
00017D7A                            ; Sprite mappings - hidden points at the end of	a level
00017D7A                            ; ---------------------------------------------------------------------------
00017D7A 0000 0000                  		dc.w byte_17250-Map_obj7D, byte_17251-Map_obj7D
00017D7E 0000 0000                  		dc.w byte_17257-Map_obj7D, byte_1725D-Map_obj7D
00017D82 00                         byte_17250:	dc.b 0
00017D83 01                         byte_17251:	dc.b 1
00017D84 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
00017D89 01                         byte_17257:	dc.b 1
00017D8A F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
00017D8F 01                         byte_1725D:	dc.b 1
00017D90 F40E 0018 F0               		dc.b $F4, $E, 0, $18, $F0
00017D96 00                         		even
00017D96 00                         		even
00017D96                            
00017D96                            ; ===========================================================================
00017D96                            ; ---------------------------------------------------------------------------
00017D96                            ; Object 8A - "SONIC TEAM PRESENTS" and	credits
00017D96                            ; ---------------------------------------------------------------------------
00017D96                            
00017D96                            Obj8A:					; XREF: Obj_Index
00017D96 7000                       		moveq	#0,d0
00017D98 1028 0024                  		move.b	$24(a0),d0
00017D9C 323B 0000                  		move.w	Obj8A_Index(pc,d0.w),d1
00017DA0 4EFB 1000                  		jmp	Obj8A_Index(pc,d1.w)
00017DA4                            ; ===========================================================================
00017DA4 0000                       Obj8A_Index:	dc.w Obj8A_Main-Obj8A_Index
00017DA6 0000                       		dc.w Obj8A_Display-Obj8A_Index
00017DA8                            ; ===========================================================================
00017DA8                            
00017DA8                            Obj8A_Main:				; XREF: Obj8A_Index
00017DA8 5428 0024                  		addq.b	#2,$24(a0)
00017DAC 317C 0120 0008             		move.w	#$120,8(a0)
00017DB2 317C 00F0 000A             		move.w	#$F0,$A(a0)
00017DB8 217C 0000 0000 0004        		move.l	#Map_obj8A,4(a0)
00017DC0 317C 05A0 0002             		move.w	#$5A0,2(a0)
00017DC6 3038 FFF4                  		move.w	($FFFFFFF4).w,d0 ; load	credits	index number
00017DCA 1140 001A                  		move.b	d0,$1A(a0)	; display appropriate sprite
00017DCE 117C 0000 0001             		move.b	#0,1(a0)
00017DD4 117C 0000 0018             		move.b	#0,$18(a0)
00017DDA 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w ; is the scene	number 04 (title screen)?
00017DE0 6600                       		bne.s	Obj8A_Display	; if not, branch
00017DE2 317C 00A6 0002             		move.w	#$A6,2(a0)
00017DE8 117C 000A 001A             		move.b	#$A,$1A(a0)	; display "SONIC TEAM PRESENTS"
00017DEE 4A38 FFE3                  		tst.b	($FFFFFFE3).w	; is hidden credits cheat on?
00017DF2 6700                       		beq.s	Obj8A_Display	; if not, branch
00017DF4 0C38 0072 F604             		cmpi.b	#$72,($FFFFF604).w ; is	Start+A+C+Down being pressed?
00017DFA 6600                       		bne.s	Obj8A_Display	; if not, branch
00017DFC 31FC 0EEE FBC0             		move.w	#$EEE,($FFFFFBC0).w ; 3rd pallet, 1st entry = white
00017E02 31FC 0880 FBC2             		move.w	#$880,($FFFFFBC2).w ; 3rd pallet, 2nd entry = cyan
00017E08 4EF9 0000 E080             		jmp	DeleteObject
00017E0E                            ; ===========================================================================
00017E0E                            
00017E0E                            Obj8A_Display:				; XREF: Obj8A_Index
00017E0E 4EF9 0000 E044             		jmp	DisplaySprite
00017E14                            ; ===========================================================================
00017E14                            ; ---------------------------------------------------------------------------
00017E14                            ; Sprite mappings - "SONIC TEAM	PRESENTS" and credits
00017E14                            ; ---------------------------------------------------------------------------
00017E14                            Map_obj8A:
00017E14                            	include "_maps\obj8A.asm"
00017E14                            Map_ca8f:
00017E14 0000                       Map_ca8f_0: 	dc.w Map_ca8f_16-Map_ca8f
00017E16 0000                       Map_ca8f_2: 	dc.w Map_ca8f_3F-Map_ca8f
00017E18 0000                       Map_ca8f_4: 	dc.w Map_ca8f_90-Map_ca8f
00017E1A 0000                       Map_ca8f_6: 	dc.w Map_ca8f_C3-Map_ca8f
00017E1C 0000                       Map_ca8f_8: 	dc.w Map_ca8f_13C-Map_ca8f
00017E1E 0000                       Map_ca8f_A: 	dc.w Map_ca8f_1A1-Map_ca8f
00017E20 0000                       Map_ca8f_C: 	dc.w Map_ca8f_224-Map_ca8f
00017E22 0000                       Map_ca8f_E: 	dc.w Map_ca8f_298-Map_ca8f
00017E24 0000                       Map_ca8f_10: 	dc.w Map_ca8f_334-Map_ca8f
00017E26 0000                       Map_ca8f_12: 	dc.w Map_ca8f_380-Map_ca8f
00017E28 0000                       Map_ca8f_14: 	dc.w Map_ca8f_3A9-Map_ca8f
00017E2A 08                         Map_ca8f_16: 	dc.b $8
00017E2B CC05 803E BD               	dc.b $CC, $5, $80, $3E, $BD
00017E30 E205 800E CD               	dc.b $E2, $5, $80, $E, $CD
00017E35 F305 8004 DE               	dc.b $F3, $5, $80, $4, $DE
00017E3A 0409 8008 EF               	dc.b $4, $9, $80, $8, $EF
00017E3F B205 000E E5               	dc.b $B2, $5, $0, $E, $E5
00017E44 B205 0012 F5               	dc.b $B2, $5, $0, $12, $F5
00017E49 B301 0016 08               	dc.b $B3, $1, $0, $16, $8
00017E4E B309 001C 0A               	dc.b $B3, $9, $0, $1C, $A
00017E53 10                         Map_ca8f_3F: 	dc.b $10
00017E54 D805 0000 80               	dc.b $D8, $5, $0, $0, $80
00017E59 D805 0004 90               	dc.b $D8, $5, $0, $4, $90
00017E5E D809 0008 A0               	dc.b $D8, $9, $0, $8, $A0
00017E63 D805 000E B4               	dc.b $D8, $5, $0, $E, $B4
00017E68 D805 0012 D0               	dc.b $D8, $5, $0, $12, $D0
00017E6D D805 0016 E0               	dc.b $D8, $5, $0, $16, $E0
00017E72 D805 0004 F0               	dc.b $D8, $5, $0, $4, $F0
00017E77 D805 001A 00               	dc.b $D8, $5, $0, $1A, $0
00017E7C 0805 001E C8               	dc.b $8, $5, $0, $1E, $C8
00017E81 0805 0004 D8               	dc.b $8, $5, $0, $4, $D8
00017E86 0805 0022 E8               	dc.b $8, $5, $0, $22, $E8
00017E8B 0805 0026 F8               	dc.b $8, $5, $0, $26, $F8
00017E90 0805 0016 08               	dc.b $8, $5, $0, $16, $8
00017E95 0805 002A 20               	dc.b $8, $5, $0, $2A, $20
00017E9A 0805 0004 30               	dc.b $8, $5, $0, $4, $30
00017E9F 0805 002E 44               	dc.b $8, $5, $0, $2E, $44
00017EA4 0A                         Map_ca8f_90: 	dc.b $A
00017EA5 D805 0012 80               	dc.b $D8, $5, $0, $12, $80
00017EAA D805 0022 90               	dc.b $D8, $5, $0, $22, $90
00017EAF D805 0026 A0               	dc.b $D8, $5, $0, $26, $A0
00017EB4 D805 0000 B0               	dc.b $D8, $5, $0, $0, $B0
00017EB9 D805 0022 C0               	dc.b $D8, $5, $0, $22, $C0
00017EBE D805 0004 D0               	dc.b $D8, $5, $0, $4, $D0
00017EC3 D809 0008 E0               	dc.b $D8, $9, $0, $8, $E0
00017EC8 0805 002A E8               	dc.b $8, $5, $0, $2A, $E8
00017ECD 0805 0032 F8               	dc.b $8, $5, $0, $32, $F8
00017ED2 0805 0036 08               	dc.b $8, $5, $0, $36, $8
00017ED7 18                         Map_ca8f_C3: 	dc.b $18
00017ED8 D805 001E 88               	dc.b $D8, $5, $0, $1E, $88
00017EDD D805 003A 98               	dc.b $D8, $5, $0, $3A, $98
00017EE2 D805 0004 A8               	dc.b $D8, $5, $0, $4, $A8
00017EE7 D805 0022 B8               	dc.b $D8, $5, $0, $22, $B8
00017EEC D805 0004 C8               	dc.b $D8, $5, $0, $4, $C8
00017EF1 D805 001E D8               	dc.b $D8, $5, $0, $1E, $D8
00017EF6 D805 003E E8               	dc.b $D8, $5, $0, $3E, $E8
00017EFB D805 000E F8               	dc.b $D8, $5, $0, $E, $F8
00017F00 D805 0022 08               	dc.b $D8, $5, $0, $22, $8
00017F05 D805 0042 20               	dc.b $D8, $5, $0, $42, $20
00017F0A D805 000E 30               	dc.b $D8, $5, $0, $E, $30
00017F0F D805 002E 40               	dc.b $D8, $5, $0, $2E, $40
00017F14 D801 0046 50               	dc.b $D8, $1, $0, $46, $50
00017F19 D805 0000 58               	dc.b $D8, $5, $0, $0, $58
00017F1E D805 001A 68               	dc.b $D8, $5, $0, $1A, $68
00017F23 0805 0048 C0               	dc.b $8, $5, $0, $48, $C0
00017F28 0801 0046 D0               	dc.b $8, $1, $0, $46, $D0
00017F2D 0805 0000 D8               	dc.b $8, $5, $0, $0, $D8
00017F32 0801 0046 E8               	dc.b $8, $1, $0, $46, $E8
00017F37 0805 002E F0               	dc.b $8, $5, $0, $2E, $F0
00017F3C 0805 0016 00               	dc.b $8, $5, $0, $16, $0
00017F41 0805 0004 10               	dc.b $8, $5, $0, $4, $10
00017F46 0805 001A 20               	dc.b $8, $5, $0, $1A, $20
00017F4B 0805 0042 30               	dc.b $8, $5, $0, $42, $30
00017F50 14                         Map_ca8f_13C: 	dc.b $14
00017F51 D005 0042 A0               	dc.b $D0, $5, $0, $42, $A0
00017F56 D005 000E B0               	dc.b $D0, $5, $0, $E, $B0
00017F5B D005 002E C0               	dc.b $D0, $5, $0, $2E, $C0
00017F60 D001 0046 D0               	dc.b $D0, $1, $0, $46, $D0
00017F65 D005 0000 D8               	dc.b $D0, $5, $0, $0, $D8
00017F6A D005 001A E8               	dc.b $D0, $5, $0, $1A, $E8
00017F6F 0005 004C E8               	dc.b $0, $5, $0, $4C, $E8
00017F74 0001 0046 F8               	dc.b $0, $1, $0, $46, $F8
00017F79 0005 001A 04               	dc.b $0, $5, $0, $1A, $4
00017F7E 0005 002A 14               	dc.b $0, $5, $0, $2A, $14
00017F83 0005 0004 24               	dc.b $0, $5, $0, $4, $24
00017F88 2005 0012 D0               	dc.b $20, $5, $0, $12, $D0
00017F8D 2005 003A E0               	dc.b $20, $5, $0, $3A, $E0
00017F92 2005 000E F0               	dc.b $20, $5, $0, $E, $F0
00017F97 2005 001A 00               	dc.b $20, $5, $0, $1A, $0
00017F9C 2001 0046 10               	dc.b $20, $1, $0, $46, $10
00017FA1 2005 0050 18               	dc.b $20, $5, $0, $50, $18
00017FA6 2005 0022 30               	dc.b $20, $5, $0, $22, $30
00017FAB 2001 0046 40               	dc.b $20, $1, $0, $46, $40
00017FB0 2005 000E 48               	dc.b $20, $5, $0, $E, $48
00017FB5 1A                         Map_ca8f_1A1: 	dc.b $1A
00017FB6 D805 002E 98               	dc.b $D8, $5, $0, $2E, $98
00017FBB D805 0026 A8               	dc.b $D8, $5, $0, $26, $A8
00017FC0 D805 0032 B8               	dc.b $D8, $5, $0, $32, $B8
00017FC5 D805 001A C8               	dc.b $D8, $5, $0, $1A, $C8
00017FCA D805 0054 D8               	dc.b $D8, $5, $0, $54, $D8
00017FCF D805 0012 F8               	dc.b $D8, $5, $0, $12, $F8
00017FD4 D805 0022 08               	dc.b $D8, $5, $0, $22, $8
00017FD9 D805 0026 18               	dc.b $D8, $5, $0, $26, $18
00017FDE D805 0042 28               	dc.b $D8, $5, $0, $42, $28
00017FE3 D805 0032 38               	dc.b $D8, $5, $0, $32, $38
00017FE8 D805 001E 48               	dc.b $D8, $5, $0, $1E, $48
00017FED D805 000E 58               	dc.b $D8, $5, $0, $E, $58
00017FF2 0809 0008 88               	dc.b $8, $9, $0, $8, $88
00017FF7 0805 0004 9C               	dc.b $8, $5, $0, $4, $9C
00017FFC 0805 002E AC               	dc.b $8, $5, $0, $2E, $AC
00018001 0805 0004 BC               	dc.b $8, $5, $0, $4, $BC
00018006 0805 003E CC               	dc.b $8, $5, $0, $3E, $CC
0001800B 0805 0026 DC               	dc.b $8, $5, $0, $26, $DC
00018010 0805 001A F8               	dc.b $8, $5, $0, $1A, $F8
00018015 0805 0004 08               	dc.b $8, $5, $0, $4, $8
0001801A 0805 0058 18               	dc.b $8, $5, $0, $58, $18
0001801F 0805 0004 28               	dc.b $8, $5, $0, $4, $28
00018024 0809 0008 38               	dc.b $8, $9, $0, $8, $38
00018029 0805 0032 4C               	dc.b $8, $5, $0, $32, $4C
0001802E 0805 0022 5C               	dc.b $8, $5, $0, $22, $5C
00018033 0805 0004 6C               	dc.b $8, $5, $0, $4, $6C
00018038 17                         Map_ca8f_224: 	dc.b $17
00018039 D005 002E 98               	dc.b $D0, $5, $0, $2E, $98
0001803E D005 0026 A8               	dc.b $D0, $5, $0, $26, $A8
00018043 D005 0032 B8               	dc.b $D0, $5, $0, $32, $B8
00018048 D005 001A C8               	dc.b $D0, $5, $0, $1A, $C8
0001804D D005 0054 D8               	dc.b $D0, $5, $0, $54, $D8
00018052 D005 0012 F8               	dc.b $D0, $5, $0, $12, $F8
00018057 D005 0022 08               	dc.b $D0, $5, $0, $22, $8
0001805C D005 0026 18               	dc.b $D0, $5, $0, $26, $18
00018061 D005 0000 28               	dc.b $D0, $5, $0, $0, $28
00018066 D005 0022 38               	dc.b $D0, $5, $0, $22, $38
0001806B D005 0004 48               	dc.b $D0, $5, $0, $4, $48
00018070 D009 0008 58               	dc.b $D0, $9, $0, $8, $58
00018075 0005 004C D0               	dc.b $0, $5, $0, $4C, $D0
0001807A 0001 0046 E0               	dc.b $0, $1, $0, $46, $E0
0001807F 0009 0008 E8               	dc.b $0, $9, $0, $8, $E8
00018084 0001 0046 FC               	dc.b $0, $1, $0, $46, $FC
00018089 0005 003E 04               	dc.b $0, $5, $0, $3E, $4
0001808E 0005 0004 14               	dc.b $0, $5, $0, $4, $14
00018093 2009 0008 D0               	dc.b $20, $9, $0, $8, $D0
00018098 2005 0004 E4               	dc.b $20, $5, $0, $4, $E4
0001809D 2005 001E F4               	dc.b $20, $5, $0, $1E, $F4
000180A2 2005 0058 04               	dc.b $20, $5, $0, $58, $4
000180A7 2005 002A 14               	dc.b $20, $5, $0, $2A, $14
000180AC 1F                         Map_ca8f_298: 	dc.b $1F
000180AD D805 002E 80               	dc.b $D8, $5, $0, $2E, $80
000180B2 D805 0012 90               	dc.b $D8, $5, $0, $12, $90
000180B7 D805 000E A0               	dc.b $D8, $5, $0, $E, $A0
000180BC D805 001E B0               	dc.b $D8, $5, $0, $1E, $B0
000180C1 D801 0046 C0               	dc.b $D8, $1, $0, $46, $C0
000180C6 D805 0004 C8               	dc.b $D8, $5, $0, $4, $C8
000180CB D805 0016 D8               	dc.b $D8, $5, $0, $16, $D8
000180D0 D805 003E F8               	dc.b $D8, $5, $0, $3E, $F8
000180D5 D805 003A 08               	dc.b $D8, $5, $0, $3A, $8
000180DA D805 0004 18               	dc.b $D8, $5, $0, $4, $18
000180DF D805 001A 28               	dc.b $D8, $5, $0, $1A, $28
000180E4 D805 0058 38               	dc.b $D8, $5, $0, $58, $38
000180E9 D805 002E 48               	dc.b $D8, $5, $0, $2E, $48
000180EE 0005 005C B0               	dc.b $0, $5, $0, $5C, $B0
000180F3 0005 0032 C0               	dc.b $0, $5, $0, $32, $C0
000180F8 0005 004C D0               	dc.b $0, $5, $0, $4C, $D0
000180FD 0001 0046 E0               	dc.b $0, $1, $0, $46, $E0
00018102 0005 0026 E8               	dc.b $0, $5, $0, $26, $E8
00018107 0009 0008 00               	dc.b $0, $9, $0, $8, $0
0001810C 0001 0046 14               	dc.b $0, $1, $0, $46, $14
00018111 0005 001A 1C               	dc.b $0, $5, $0, $1A, $1C
00018116 0005 000E 2C               	dc.b $0, $5, $0, $E, $2C
0001811B 0005 0000 3C               	dc.b $0, $5, $0, $0, $3C
00018120 0001 0046 4C               	dc.b $0, $1, $0, $46, $4C
00018125 0005 002E 54               	dc.b $0, $5, $0, $2E, $54
0001812A 0005 003A 64               	dc.b $0, $5, $0, $3A, $64
0001812F 0001 0046 74               	dc.b $0, $1, $0, $46, $74
00018134 2005 0012 F8               	dc.b $20, $5, $0, $12, $F8
00018139 2005 0004 08               	dc.b $20, $5, $0, $4, $8
0001813E 2005 0012 18               	dc.b $20, $5, $0, $12, $18
00018143 2005 0004 28               	dc.b $20, $5, $0, $4, $28
00018148 0F                         Map_ca8f_334: 	dc.b $F
00018149 F805 0012 80               	dc.b $F8, $5, $0, $12, $80
0001814E F805 0022 90               	dc.b $F8, $5, $0, $22, $90
00018153 F805 000E A0               	dc.b $F8, $5, $0, $E, $A0
00018158 F805 002E B0               	dc.b $F8, $5, $0, $2E, $B0
0001815D F805 000E C0               	dc.b $F8, $5, $0, $E, $C0
00018162 F805 001A D0               	dc.b $F8, $5, $0, $1A, $D0
00018167 F805 003E E0               	dc.b $F8, $5, $0, $3E, $E0
0001816C F805 000E F0               	dc.b $F8, $5, $0, $E, $F0
00018171 F805 0042 00               	dc.b $F8, $5, $0, $42, $0
00018176 F805 0048 18               	dc.b $F8, $5, $0, $48, $18
0001817B F805 002A 28               	dc.b $F8, $5, $0, $2A, $28
00018180 F805 002E 40               	dc.b $F8, $5, $0, $2E, $40
00018185 F805 000E 50               	dc.b $F8, $5, $0, $E, $50
0001818A F805 0000 60               	dc.b $F8, $5, $0, $0, $60
0001818F F805 0004 70               	dc.b $F8, $5, $0, $4, $70
00018194 08                         Map_ca8f_380: 	dc.b $8
00018195 3005 003E C0               	dc.b $30, $5, $0, $3E, $C0
0001819A 3005 0022 D0               	dc.b $30, $5, $0, $22, $D0
0001819F 3005 002A E0               	dc.b $30, $5, $0, $2A, $E0
000181A4 3005 0004 F8               	dc.b $30, $5, $0, $4, $F8
000181A9 3005 0000 08               	dc.b $30, $5, $0, $0, $8
000181AE 3005 0004 18               	dc.b $30, $5, $0, $4, $18
000181B3 3001 0046 28               	dc.b $30, $1, $0, $46, $28
000181B8 3005 001A 30               	dc.b $30, $5, $0, $1A, $30
000181BD 20                         Map_ca8f_3A9: 	dc.b $20
000181BE ED05 002E BF               	dc.b $ED, $5, $0, $2E, $BF
000181C3 ED05 0026 CD               	dc.b $ED, $5, $0, $26, $CD
000181C8 ED09 0008 DD               	dc.b $ED, $9, $0, $8, $DD
000181CD ED05 000E F1               	dc.b $ED, $5, $0, $E, $F1
000181D2 ED05 0026 00               	dc.b $ED, $5, $0, $26, $0
000181D7 ED05 001A 10               	dc.b $ED, $5, $0, $1A, $10
000181DC ED05 000E 1F               	dc.b $ED, $5, $0, $E, $1F
000181E1 FD05 0012 BF               	dc.b $FD, $5, $0, $12, $BF
000181E6 FD05 0016 CE               	dc.b $FD, $5, $0, $16, $CE
000181EB FD05 000E DD               	dc.b $FD, $5, $0, $E, $DD
000181F0 FD05 0004 EC               	dc.b $FD, $5, $0, $4, $EC
000181F5 FD05 002E FC               	dc.b $FD, $5, $0, $2E, $FC
000181FA FD05 000E 0A               	dc.b $FD, $5, $0, $E, $A
000181FF 0D05 0004 BE               	dc.b $D, $5, $0, $4, $BE
00018204 0D05 0054 CE               	dc.b $D, $5, $0, $54, $CE
00018209 0D05 0054 DD               	dc.b $D, $5, $0, $54, $DD
0001820E 0D05 0032 F2               	dc.b $D, $5, $0, $32, $F2
00018213 0D05 001A 02               	dc.b $D, $5, $0, $1A, $2
00018218 0D05 0054 11               	dc.b $D, $5, $0, $54, $11
0001821D 0D05 002A 20               	dc.b $D, $5, $0, $2A, $20
00018222 0D01 0046 30               	dc.b $D, $1, $0, $46, $30
00018227 0D05 001A 38               	dc.b $D, $5, $0, $1A, $38
0001822C 0D05 0000 47               	dc.b $D, $5, $0, $0, $47
00018231 1D05 003E BE               	dc.b $1D, $5, $0, $3E, $BE
00018236 1D05 0026 CE               	dc.b $1D, $5, $0, $26, $CE
0001823B 1D05 003E E4               	dc.b $1D, $5, $0, $3E, $E4
00018240 1D05 003A F4               	dc.b $1D, $5, $0, $3A, $F4
00018245 1D05 000E 04               	dc.b $1D, $5, $0, $E, $4
0001824A 1D05 000E 2A               	dc.b $1D, $5, $0, $E, $2A
0001824F 1D05 0022 1A               	dc.b $1D, $5, $0, $22, $1A
00018254 1D05 0012 39               	dc.b $1D, $5, $0, $12, $39
00018259 1D05 0026 48               	dc.b $1D, $5, $0, $26, $48
0001825E                            	even
0001825E                            	even
0001825E                            
0001825E                            ; ===========================================================================
0001825E                            ; ---------------------------------------------------------------------------
0001825E                            ; Object 3D - matthew boss - modified by GK89
0001825E                            ; ---------------------------------------------------------------------------
0001825E                            
0001825E                            Obj3D:					; XREF: Obj_Index
0001825E 7000                       		moveq	#0,d0
00018260 1028 0024                  		move.b	$24(a0),d0
00018264 323B 0000                  		move.w	Obj3D_Index(pc,d0.w),d1
00018268 4EFB 1000                  		jmp	Obj3D_Index(pc,d1.w)
0001826C                            ; ===========================================================================
0001826C 0000                       Obj3D_Index:	dc.w Obj3D_Main-Obj3D_Index
0001826E 0000                       		dc.w Obj3D_ShipMain-Obj3D_Index
00018270 0000                       		dc.w Obj3D_FaceMain-Obj3D_Index
00018272 0000                       		dc.w Obj3D_FlameMain-Obj3D_Index
00018274                            
00018274 0200                       Obj3D_ObjData:	dc.b 2,	0		; routine counter, animation
00018276 0401                       		dc.b 4,	1
00018278 0607                       		dc.b 6,	7
0001827A                            ; ===========================================================================
0001827A                            
0001827A                            Obj3D_Main:				; XREF: Obj3D_Index
0001827A 45F9 0001 8274             		lea	(Obj3D_ObjData).l,a2
00018280 2248                       		movea.l	a0,a1
00018282 7202                       		moveq	#2,d1
00018284 6000                       		bra.s	Obj3D_LoadBoss
00018286                            ; ===========================================================================
00018286                            
00018286                            Obj3D_Loop:
00018286 4EB9 0000 E4E0             		jsr	SingleObjLoad2
0001828C 6600                       		bne.s	loc_17772
0001828E                            
0001828E                            Obj3D_LoadBoss:				; XREF: Obj3D_Main
0001828E 135A 0024                  		move.b	(a2)+,$24(a1)
00018292 12BC 003D                  		move.b	#$3D,0(a1)
00018296 3368 0008 0008             		move.w	8(a0),8(a1)
0001829C 3368 000C 000C             		move.w	$C(a0),$C(a1)
000182A2 237C 0000 0000 0004        		move.l	#Map_Eggman,4(a1)
000182AA 337C 0400 0002             		move.w	#$400,2(a1)
000182B0 137C 0004 0001             		move.b	#4,1(a1)
000182B6 137C 0020 0019             		move.b	#$20,$19(a1)
000182BC 137C 0003 0018             		move.b	#3,$18(a1)
000182C2 135A 001C                  		move.b	(a2)+,$1C(a1)
000182C6 2348 0034                  		move.l	a0,$34(a1)
000182CA 51C9 FFBA                  		dbf	d1,Obj3D_Loop	; repeat sequence 2 more times
000182CE                            
000182CE                            loc_17772:
000182CE 3168 0008 0030             		move.w	8(a0),$30(a0)
000182D4 3168 000C 0038             		move.w	$C(a0),$38(a0)
000182DA 117C 000F 0020             		move.b	#$F,$20(a0)
000182E0 117C 0028 0021             		move.b	#$28,$21(a0)	; set number of	hits to	8
000182E6                            
000182E6                            Obj3D_ShipMain:				; XREF: Obj3D_Index
000182E6 7000                       		moveq	#0,d0
000182E8 1028 0025                  		move.b	$25(a0),d0
000182EC 323B 0000                  		move.w	Obj3D_ShipIndex(pc,d0.w),d1
000182F0 4EBB 1000                  		jsr	Obj3D_ShipIndex(pc,d1.w)
000182F4 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
000182FA 4EB9 0000 B09A             		jsr	AnimateSprite
00018300 1028 0022                  		move.b	$22(a0),d0
00018304 0200 0003                  		andi.b	#3,d0
00018308 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001830E 8128 0001                  		or.b	d0,1(a0)
00018312 4EF9 0000 E044             		jmp	DisplaySprite
00018318                            ; ===========================================================================
00018318 0000                       Obj3D_ShipIndex:dc.w Obj3D_ShipStart-Obj3D_ShipIndex
0001831A 0000                       		dc.w Obj3D_MakeBall-Obj3D_ShipIndex
0001831C 0000                       		dc.w Obj3D_ShipMove-Obj3D_ShipIndex
0001831E 0000                       		dc.w loc_17954-Obj3D_ShipIndex
00018320 0000                       		dc.w loc_1797A-Obj3D_ShipIndex
00018322 0000                       		dc.w loc_179AC-Obj3D_ShipIndex
00018324 0000                       		dc.w loc_179F6-Obj3D_ShipIndex
00018326                            ; ===========================================================================
00018326                            
00018326                            Obj3D_ShipStart:			; XREF: Obj3D_ShipIndex
00018326 4EB9 0000 0000             		jsr    Obj3D_ShipMove
0001832C 6100 0000                  		bsr.w	BossMove
00018330 0C68 0338 0038             		cmpi.w	#$338,$38(a0)
00018336 6600                       		bne.s	loc_177E6
00018338 317C 0000 0012             		move.w	#0,$12(a0)	; stop ship
0001833E 5428 0025                  		addq.b	#2,$25(a0)	; goto next routine
00018342                            
00018342                            loc_177E6:
00018342 1028 003F                  		move.b	$3F(a0),d0
00018346 4EB9 0000 2D34             		jsr	(CalcSine).l
0001834C EC40                       		asr.w	#6,d0
0001834E D068 0038                  		add.w	$38(a0),d0
00018352 3140 000C                  		move.w	d0,$C(a0)
00018356 3168 0030 0008             		move.w	$30(a0),8(a0)
0001835C 5428 003F                  		addq.b	#2,$3F(a0)
00018360 0C28 0008 0025             		cmpi.b	#8,$25(a0)
00018366 6400                       		bcc.s	locret_1784A
00018368 4A28 0022                  		tst.b	$22(a0)
0001836C 6B00                       		bmi.s	loc_1784C
0001836E 4A28 0020                  		tst.b	$20(a0)
00018372 6600                       		bne.s	locret_1784A
00018374 4A28 003E                  		tst.b	$3E(a0)
00018378 6600                       		bne.s	Obj3D_ShipFlash
0001837A 117C 0020 003E             		move.b	#$20,$3E(a0)	; set number of	times for ship to flash
00018380 303C 00AC                  		move.w	#$AC,d0
00018384 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001838A                            
0001838A                            Obj3D_ShipFlash:
0001838A 43F8 FB22                  		lea	($FFFFFB22).w,a1 ; load	2nd pallet, 2nd	entry
0001838E 7000                       		moveq	#0,d0		; move 0 (black) to d0
00018390 4A51                       		tst.w	(a1)
00018392 6600                       		bne.s	loc_1783C
00018394 303C 0EEE                  		move.w	#$EEE,d0	; move 0EEE (white) to d0
00018398                            
00018398                            loc_1783C:
00018398 3280                       		move.w	d0,(a1)		; load colour stored in	d0
0001839A 5328 003E                  		subq.b	#1,$3E(a0)
0001839E 6600                       		bne.s	locret_1784A
000183A0 117C 000F 0020             		move.b	#$F,$20(a0)
000183A6                            
000183A6                            locret_1784A:
000183A6 4E75                       		rts	
000183A8                            ; ===========================================================================
000183A8                            
000183A8                            loc_1784C:				; XREF: loc_177E6
000183A8 7064                       		moveq	#100,d0
000183AA 6100 0000                  		bsr.w	AddPoints
000183AE 117C 0008 0025             		move.b	#8,$25(a0)
000183B4 317C 00B3 003C             		move.w	#$B3,$3C(a0)
000183BA 4E75                       		rts	
000183BC                            
000183BC                            ; ---------------------------------------------------------------------------
000183BC                            ; Defeated boss	subroutine
000183BC                            ; ---------------------------------------------------------------------------
000183BC                            
000183BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000183BC                            
000183BC                            
000183BC                            BossDefeated:
000183BC 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000183C0 0200 0007                  		andi.b	#7,d0
000183C4 6600                       		bne.s	locret_178A2
000183C6 4EB9 0000 E4CA             		jsr	SingleObjLoad
000183CC 6600                       		bne.s	locret_178A2
000183CE 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
000183D2 3368 0008 0008             		move.w	8(a0),8(a1)
000183D8 3368 000C 000C             		move.w	$C(a0),$C(a1)
000183DE 4EB9 0000 2D0E             		jsr	(RandomNumber).l
000183E4 3200                       		move.w	d0,d1
000183E6 7200                       		moveq	#0,d1
000183E8 1200                       		move.b	d0,d1
000183EA E409                       		lsr.b	#2,d1
000183EC 0441 0020                  		subi.w	#$20,d1
000183F0 D369 0008                  		add.w	d1,8(a1)
000183F4 E048                       		lsr.w	#8,d0
000183F6 E608                       		lsr.b	#3,d0
000183F8 D169 000C                  		add.w	d0,$C(a1)
000183FC                            
000183FC                            locret_178A2:
000183FC 4E75                       		rts	
000183FE                            ; End of function BossDefeated
000183FE                            
000183FE                            ; ---------------------------------------------------------------------------
000183FE                            ; Subroutine to	move a boss
000183FE                            ; ---------------------------------------------------------------------------
000183FE                            
000183FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000183FE                            
000183FE                            
000183FE                            BossMove:
000183FE 2428 0030                  		move.l	$30(a0),d2
00018402 2628 0038                  		move.l	$38(a0),d3
00018406 3028 0010                  		move.w	$10(a0),d0
0001840A 48C0                       		ext.l	d0
0001840C E180                       		asl.l	#8,d0
0001840E D480                       		add.l	d0,d2
00018410 3028 0012                  		move.w	$12(a0),d0
00018414 48C0                       		ext.l	d0
00018416 E180                       		asl.l	#8,d0
00018418 D680                       		add.l	d0,d3
0001841A 2142 0030                  		move.l	d2,$30(a0)
0001841E 2143 0038                  		move.l	d3,$38(a0)
00018422 4E75                       		rts	
00018424                            ; End of function BossMove
00018424                            
00018424                            ; ===========================================================================
00018424                            
00018424                            Obj3D_MakeBall:				; XREF: Obj3D_ShipIndex		
00018424 6100 FFD8                  		bsr.w	BossMove
00018428 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
0001842E 6600                       		bne.s	loc_17916
00018430 317C 0000 0010             		move.w	#0,$10(a0)
00018436 317C 0000 0012             		move.w	#0,$12(a0)
0001843C 5428 0025                  		addq.b	#2,$25(a0)
00018440 4EB9 0000 E4E0             		jsr	SingleObjLoad2
00018446 6600                       		bne.s	loc_17910
00018448 12BC 0048                  		move.b	#$48,0(a1)	; load swinging	ball object
0001844C 3368 0030 0008             		move.w	$30(a0),8(a1)
00018452 3368 0038 000C             		move.w	$38(a0),$C(a1)
00018458 2348 0034                  		move.l	a0,$34(a1)
0001845C                            
0001845C                            loc_17910:
0001845C 317C 0077 003C             		move.w	#$77,$3C(a0)
00018462                            
00018462                            loc_17916:
00018462 6000 FEDE                  		bra.w	loc_177E6
00018466                            ; ===========================================================================
00018466                            
00018466                            Obj3D_ShipMove:				; XREF:  sonic follow move
00018466 5368 003C                  		subq.w	#1,$3C(a0)
0001846A 4EB9 0000 0000             		jsr 	Obj3D_UpStuff
00018470 5428 0025                  		addq.b	#2,$25(a0)
00018474 317C 003F 003C             		move.w	#$3F,$3C(a0)
0001847A 3038 D008                  		move.w	($FFFFD008).w,d0	 
0001847E 9068 0008                  		sub.w	8(a0),d0		 
00018482 6A00                       		bpl.s	Obj3D_left			 
00018484 08A8 0000 0022             		bclr	#0,$22(a0)		 
0001848A 6000                       		bra.s	Obj3D_right		 
0001848C 08A8 0005 0022             		bclr	#5,$22(a0)
00018492 4EB9 0000 0000              		jsr     loc_17950
00018498 4E75                       		rts
0001849A                            ; ===========================================================================
0001849A                            
0001849A                            Obj3D_right:
0001849A 317C FF00 0010             		move.w	#-$100,$10(a0)	
000184A0 4E75                       		Rts
000184A2                            
000184A2                            Obj3D_left:
000184A2 317C 0100 0010             		move.w	#$100,$10(a0)	 
000184A8 0828 0000 0022             		btst	#0,$22(a0)	; is matt facing	left?
000184AE 6600                       		bne.s	RTSboss  	; if not, branch
000184B0 0868 0000 0022              		bchg	#0,$22(a0)
000184B6                            
000184B6                            RTSboss:	    
000184B6 4E75                       		rts
000184B8                             ; ===========================================================================
000184B8                            
000184B8                            Obj3D_UpStuff:
000184B8 3038 D00C                  		move.w	($FFFFD00C).w,d0	 
000184BC 9068 000C                  		sub.w	$C(a0),d0		 
000184C0 6A00                       		bpl.s	Obj3D_down			 
000184C2 6000                        		bra.s	Obj3D_up		 
000184C4 08A8 0005 0022             		bclr	#5,$22(a0)
000184CA                             
000184CA                            Obj3D_up:		
000184CA 317C FEE0 0012             		move.w	#-$120,$12(a0)           ; Up	 
000184D0 4E75                        	    rts
000184D2                            
000184D2                            Obj3D_down:
000184D2 317C 0120 0012              		move.w	#$120, $12(a0)           ; Down
000184D8                            
000184D8                            loc_17950:
000184D8 6000 FE68                  		bra.w	loc_177E6
000184DC                            ; ===========================================================================
000184DC                            
000184DC                            loc_17954:				; XREF: Obj3D_ShipIndex
000184DC 5368 003C                  		subq.w	#1,$3C(a0)
000184E0 6B00                       		bmi.s	loc_17960
000184E2 6100 FF1A                  		bsr.w	BossMove
000184E6 6000                       		bra.s	loc_17976
000184E8                            ; ===========================================================================
000184E8                            
000184E8                            loc_17960:
000184E8 0868 0000 0022             		bchg	#0,$22(a0)
000184EE 317C 003F 003C             		move.w	#$3F,$3C(a0)
000184F4 5528 0025                  		subq.b	#2,$25(a0)
000184F8 317C 0000 0010             		move.w	#0,$10(a0)
000184FE                            
000184FE                            loc_17976:
000184FE 6000 FE42                  		bra.w	loc_177E6
00018502                            ; ===========================================================================
00018502                            
00018502                            loc_1797A:				; XREF: Obj3D_ShipIndex
00018502 5368 003C                  		subq.w	#1,$3C(a0)
00018506 6B00                       		bmi.s	loc_17984
00018508 6000 FEB2                  		bra.w	BossDefeated
0001850C                            ; ===========================================================================
0001850C                            
0001850C                            loc_17984:
0001850C 08E8 0000 0022             		bset	#0,$22(a0)
00018512 08A8 0007 0022             		bclr	#7,$22(a0)
00018518 4268 0010                  		clr.w	$10(a0)
0001851C 5428 0025                  		addq.b	#2,$25(a0)
00018520 317C FFDA 003C             		move.w	#-$26,$3C(a0)
00018526 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0001852A 6600                       		bne.s	locret_179AA
0001852C 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00018532 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00018538 6000 FE82                  		bra.w	BossDefeated
0001853C                            
0001853C                            locret_179AA:
0001853C 4E75                       		rts	
0001853E                            ; ===========================================================================
0001853E                            
0001853E                            loc_179AC:				; XREF: Obj3D_ShipIndex
0001853E 4EB9 0000 DFAC             		jsr ObjectFall		
00018544 5268 003C                  		addq.w	#1,$3C(a0)
00018548 6700                       		beq.s	loc_179BC
0001854A 6A00                       		bpl.s	loc_179C2
0001854C 6000                       		bra.s	loc_179EE
0001854E                            ; ===========================================================================
0001854E                            
0001854E                            loc_179BC:
0001854E 4268 0012                  		clr.w	$12(a0)
00018552 6000                       		bra.s	loc_179EE
00018554                            ; ===========================================================================
00018554                            
00018554                            loc_179C2:
00018554 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
0001855A 6500                       		bcs.s	loc_179DA
0001855C 6700                       		beq.s	loc_179E0
0001855E 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
00018564 6500                       		bcs.s	loc_179EE
00018566 5428 0025                  		addq.b	#2,$25(a0)
0001856A 6000                       		bra.s	loc_179EE
0001856C                            ; ===========================================================================
0001856C                            
0001856C                            loc_179DA:
0001856C 5168 0012                  		subq.w	#8,$12(a0)
00018570 6000                       		bra.s	loc_179EE
00018572 6000 FE48                  		bra.w	BossDefeated
00018576                            ; ===========================================================================
00018576                            
00018576                            loc_179E0:
00018576 4268 0012                  		clr.w	$12(a0)
0001857A 303C 0081                  		move.w	#$81,d0
0001857E 4EB9 0000 1594             		jsr	(PlaySound).l	; play GHZ music
00018584                            
00018584                            loc_179EE:
00018584 6100 FE78                  		bsr.w	BossMove
00018588 6000 FDB8                  		bra.w	loc_177E6
0001858C                            ; ===========================================================================
0001858C                            
0001858C                            loc_179F6:				; XREF: Obj3D_ShipIndex
0001858C 0C78 2AC0 F72A             		cmpi.w	#$2AC0,($FFFFF72A).w
00018592 6700                       		beq.s	loc_17A10
00018594 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00018598 6000                       		bra.s	loc_17A16
0001859A                            ; ===========================================================================
0001859A                            
0001859A                            loc_17A10:
0001859A 4A28 0001                  		tst.b	1(a0)
0001859E 6A00                       		bpl.s	Obj3D_ShipDel
000185A0                            
000185A0                            loc_17A16:
000185A0 6100 FE5C                  		bsr.w	BossMove
000185A4 6000 FD9C                  		bra.w	loc_177E6
000185A8                            ; ===========================================================================
000185A8                            
000185A8                            Obj3D_ShipDel:
000185A8 4EF9 0000 E080             		jmp	DeleteObject
000185AE                            ; ===========================================================================
000185AE                            
000185AE                            Obj3D_FaceMain:				; XREF: Obj3D_Index
000185AE 7000                       		moveq	#0,d0
000185B0 7201                       		moveq	#1,d1
000185B2 2268 0034                  		movea.l	$34(a0),a1
000185B6 1029 0025                  		move.b	$25(a1),d0
000185BA 5900                       		subq.b	#4,d0
000185BC 6600                       		bne.s	loc_17A3E
000185BE 0C69 2A00 0030             		cmpi.w	#$2A00,$30(a1)
000185C4 6600                       		bne.s	loc_17A46
000185C6 7204                       		moveq	#4,d1
000185C8                            
000185C8                            loc_17A3E:
000185C8 5D00                       		subq.b	#6,d0
000185CA 6B00                       		bmi.s	loc_17A46
000185CC 720A                       		moveq	#$A,d1
000185CE 6000                       		bra.s	loc_17A5A
000185D0                            ; ===========================================================================
000185D0                            
000185D0                            loc_17A46:
000185D0 4A29 0020                  		tst.b	$20(a1)
000185D4 6600                       		bne.s	loc_17A50
000185D6 7205                       		moveq	#5,d1
000185D8 6000                       		bra.s	loc_17A5A
000185DA                            ; ===========================================================================
000185DA                            
000185DA                            loc_17A50:
000185DA 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
000185E0 6500                       		bcs.s	loc_17A5A
000185E2 7204                       		moveq	#4,d1
000185E4                            
000185E4                            loc_17A5A:
000185E4 1141 001C                  		move.b	d1,$1C(a0)
000185E8 5500                       		subq.b	#2,d0
000185EA 6600                       		bne.s	Obj3D_FaceDisp
000185EC 117C 0006 001C             		move.b	#6,$1C(a0)
000185F2 4A28 0001                  		tst.b	1(a0)
000185F6 6A00                       		bpl.s	Obj3D_FaceDel
000185F8                            
000185F8                            Obj3D_FaceDisp:
000185F8 6000                       		bra.s	Obj3D_Display
000185FA                            ; ===========================================================================
000185FA                            
000185FA                            Obj3D_FaceDel:
000185FA 4EF9 0000 E080             		jmp	DeleteObject
00018600                            ; ===========================================================================
00018600                            
00018600                            Obj3D_FlameMain:			; XREF: Obj3D_Index
00018600 117C 0007 001C             		move.b	#7,$1C(a0)
00018606 2268 0034                  		movea.l	$34(a0),a1
0001860A 0C29 000C 0025             		cmpi.b	#$C,$25(a1)
00018610 6600                       		bne.s	loc_17A96
00018612 117C 000B 001C             		move.b	#$B,$1C(a0)
00018618 4A28 0001                  		tst.b	1(a0)
0001861C 6A00                       		bpl.s	Obj3D_FlameDel
0001861E 6000                       		bra.s	Obj3D_FlameDisp
00018620                            ; ===========================================================================
00018620                            
00018620                            loc_17A96:
00018620 3029 0010                  		move.w	$10(a1),d0
00018624 6700                       		beq.s	Obj3D_FlameDisp
00018626 117C 0008 001C             		move.b	#8,$1C(a0)
0001862C                            
0001862C                            Obj3D_FlameDisp:
0001862C 6000                       		bra.s	Obj3D_Display
0001862E                            ; ===========================================================================
0001862E                            
0001862E                            Obj3D_FlameDel:
0001862E 4EF9 0000 E080             		jmp	DeleteObject
00018634                            ; ===========================================================================
00018634                            
00018634                            Obj3D_Display:				; XREF: Obj3D_FaceDisp; Obj3D_FlameDisp
00018634 2268 0034                  		movea.l	$34(a0),a1
00018638 3169 0008 0008             		move.w	8(a1),8(a0)
0001863E 3169 000C 000C             		move.w	$C(a1),$C(a0)
00018644 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001864A 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
00018650 4EB9 0000 B09A             		jsr	AnimateSprite
00018656 1028 0022                  		move.b	$22(a0),d0
0001865A 0200 0003                  		andi.b	#3,d0
0001865E 0228 00FC 0001             		andi.b	#$FC,1(a0)
00018664 8128 0001                  		or.b	d0,1(a0)
00018668 4EF9 0000 E044             		jmp	DisplaySprite
0001866E                            ; ===========================================================================
0001866E                            ; ---------------------------------------------------------------------------
0001866E                            ; Object 48 - ball on a	chain that Eggman swings (GHZ)
0001866E                            ; ---------------------------------------------------------------------------
0001866E                            
0001866E                            Obj48:					; XREF: Obj_Index
0001866E 7000                       		moveq	#0,d0
00018670 1028 0024                  		move.b	$24(a0),d0
00018674 323B 0000                  		move.w	Obj48_Index(pc,d0.w),d1
00018678 4EFB 1000                  		jmp	Obj48_Index(pc,d1.w)
0001867C                            ; ===========================================================================
0001867C 0000                       Obj48_Index:	dc.w Obj48_Main-Obj48_Index
0001867E 0000                       		dc.w Obj48_Base-Obj48_Index
00018680 0000                       		dc.w Obj48_Display2-Obj48_Index
00018682 0000                       		dc.w loc_17C68-Obj48_Index
00018684 0000                       		dc.w Obj48_ChkVanish-Obj48_Index
00018686                            ; ===========================================================================
00018686                            
00018686                            Obj48_Main:				; XREF: Obj48_Index
00018686 5428 0024                  		addq.b	#2,$24(a0)
0001868A 317C 4080 0026             		move.w	#$4080,$26(a0)
00018690 317C FE00 003E             		move.w	#-$200,$3E(a0)
00018696 217C 0000 0000 0004        		move.l	#Map_BossItems,4(a0)
0001869E 317C 046C 0002             		move.w	#$46C,2(a0)
000186A4 45E8 0028                  		lea	$28(a0),a2
000186A8 14FC 0000                  		move.b	#0,(a2)+
000186AC 7205                       		moveq	#5,d1
000186AE 2248                       		movea.l	a0,a1
000186B0 6000                       		bra.s	loc_17B60
000186B2                            ; ===========================================================================
000186B2                            
000186B2                            Obj48_MakeLinks:
000186B2 4EB9 0000 E4E0             		jsr	SingleObjLoad2
000186B8 6600                       		bne.s	Obj48_MakeBall
000186BA 3368 0008 0008             		move.w	8(a0),8(a1)
000186C0 3368 000C 000C             		move.w	$C(a0),$C(a1)
000186C6 12BC 0048                  		move.b	#$48,0(a1)	; load chain link object
000186CA 137C 0006 0024             		move.b	#6,$24(a1)
000186D0 237C 0000 844E 0004        		move.l	#Map_obj15,4(a1)
000186D8 337C 0380 0002             		move.w	#$380,2(a1)
000186DE 137C 0001 001A             		move.b	#1,$1A(a1)
000186E4 5228 0028                  		addq.b	#1,$28(a0)
000186E8                            
000186E8                            loc_17B60:				; XREF: Obj48_Main
000186E8 3A09                       		move.w	a1,d5
000186EA 0445 D000                  		subi.w	#$D000,d5
000186EE EC4D                       		lsr.w	#6,d5
000186F0 0245 007F                  		andi.w	#$7F,d5
000186F4 14C5                       		move.b	d5,(a2)+
000186F6 137C 0004 0001             		move.b	#4,1(a1)
000186FC 137C 0008 0019             		move.b	#8,$19(a1)
00018702 137C 0006 0018             		move.b	#6,$18(a1)
00018708 2368 0034 0034             		move.l	$34(a0),$34(a1)
0001870E 51C9 FFA2                  		dbf	d1,Obj48_MakeLinks ; repeat sequence 5 more times
00018712                            
00018712                            Obj48_MakeBall:
00018712 137C 0008 0024             		move.b	#8,$24(a1)
00018718 237C 0000 8A3E 0004        		move.l	#Map_obj48,4(a1) ; load	different mappings for final link
00018720 337C 43AA 0002             		move.w	#$43AA,2(a1)	; use different	graphics
00018726 137C 0001 001A             		move.b	#1,$1A(a1)
0001872C 137C 0005 0018             		move.b	#5,$18(a1)
00018732 137C 0081 0020             		move.b	#$81,$20(a1)	; make object hurt Sonic
00018738 4E75                       		rts	
0001873A                            ; ===========================================================================
0001873A                            
0001873A 0010 2030 4060             Obj48_PosData:	dc.b 0,	$10, $20, $30, $40, $60	; y-position data for links and	giant ball
00018740                            
00018740                            ; ===========================================================================
00018740                            
00018740                            Obj48_Base:				; XREF: Obj48_Index
00018740 47F9 0001 873A             		lea	(Obj48_PosData).l,a3
00018746 45E8 0028                  		lea	$28(a0),a2
0001874A 7C00                       		moveq	#0,d6
0001874C 1C1A                       		move.b	(a2)+,d6
0001874E                            
0001874E                            loc_17BC6:
0001874E 7800                       		moveq	#0,d4
00018750 181A                       		move.b	(a2)+,d4
00018752 ED4C                       		lsl.w	#6,d4
00018754 0684 00FF D000             		addi.l	#$FFD000,d4
0001875A 2244                       		movea.l	d4,a1
0001875C 101B                       		move.b	(a3)+,d0
0001875E B029 003C                  		cmp.b	$3C(a1),d0
00018762 6700                       		beq.s	loc_17BE0
00018764 5229 003C                  		addq.b	#1,$3C(a1)
00018768                            
00018768                            loc_17BE0:
00018768 51CE FFE4                  		dbf	d6,loc_17BC6
0001876C                            
0001876C B029 003C                  		cmp.b	$3C(a1),d0
00018770 6600                       		bne.s	loc_17BFA
00018772 2268 0034                  		movea.l	$34(a0),a1
00018776 0C29 0006 0025             		cmpi.b	#6,$25(a1)
0001877C 6600                       		bne.s	loc_17BFA
0001877E 5428 0024                  		addq.b	#2,$24(a0)
00018782                            
00018782                            loc_17BFA:
00018782 0C68 0020 0032             		cmpi.w	#$20,$32(a0)
00018788 6700                       		beq.s	Obj48_Display
0001878A 5268 0032                  		addq.w	#1,$32(a0)
0001878E                            
0001878E                            Obj48_Display:
0001878E 6100 0000                  		bsr.w	sub_17C2A
00018792 1028 0026                  		move.b	$26(a0),d0
00018796 4EB9 0000 83C0             		jsr	(Obj15_Move2).l
0001879C 4EF9 0000 E044             		jmp	DisplaySprite
000187A2                            ; ===========================================================================
000187A2                            
000187A2                            Obj48_Display2:				; XREF: Obj48_Index
000187A2 6100 0000                  		bsr.w	sub_17C2A
000187A6 4EB9 0000 8380             		jsr	(Obj48_Move).l
000187AC 4EF9 0000 E044             		jmp	DisplaySprite
000187B2                            
000187B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000187B2                            
000187B2                            
000187B2                            sub_17C2A:				; XREF: Obj48_Display; Obj48_Display2
000187B2 2268 0034                  		movea.l	$34(a0),a1
000187B6 0628 0020 001B             		addi.b	#$20,$1B(a0)
000187BC 6400                       		bcc.s	loc_17C3C
000187BE 0868 0000 001A             		bchg	#0,$1A(a0)
000187C4                            
000187C4                            loc_17C3C:
000187C4 3169 0008 003A             		move.w	8(a1),$3A(a0)
000187CA 3029 000C                  		move.w	$C(a1),d0
000187CE D068 0032                  		add.w	$32(a0),d0
000187D2 3140 0038                  		move.w	d0,$38(a0)
000187D6 1169 0022 0022             		move.b	$22(a1),$22(a0)
000187DC 4A29 0022                  		tst.b	$22(a1)
000187E0 6A00                       		bpl.s	locret_17C66
000187E2 10BC 003F                  		move.b	#$3F,0(a0)
000187E6 117C 0000 0024             		move.b	#0,$24(a0)
000187EC                            
000187EC                            locret_17C66:
000187EC 4E75                       		rts	
000187EE                            ; End of function sub_17C2A
000187EE                            
000187EE                            ; ===========================================================================
000187EE                            
000187EE                            loc_17C68:				; XREF: Obj48_Index
000187EE 2268 0034                  		movea.l	$34(a0),a1
000187F2 4A29 0022                  		tst.b	$22(a1)
000187F6 6A00                       		bpl.s	Obj48_Display3
000187F8 10BC 003F                  		move.b	#$3F,0(a0)
000187FC 117C 0000 0024             		move.b	#0,$24(a0)
00018802                            
00018802                            Obj48_Display3:
00018802 4EF9 0000 E044             		jmp	DisplaySprite
00018808                            ; ===========================================================================
00018808                            
00018808                            Obj48_ChkVanish:			; XREF: Obj48_Index
00018808 7000                       		moveq	#0,d0
0001880A 4A28 001A                  		tst.b	$1A(a0)
0001880E 6600                       		bne.s	Obj48_Vanish
00018810 5200                       		addq.b	#1,d0
00018812                            
00018812                            Obj48_Vanish:
00018812 1140 001A                  		move.b	d0,$1A(a0)
00018816 2268 0034                  		movea.l	$34(a0),a1
0001881A 4A29 0022                  		tst.b	$22(a1)
0001881E 6A00                       		bpl.s	Obj48_Display4
00018820 117C 0000 0020             		move.b	#0,$20(a0)
00018826 6100 FB94                  		bsr.w	BossDefeated
0001882A 5328 003C                  		subq.b	#1,$3C(a0)
0001882E 6A00                       		bpl.s	Obj48_Display4
00018830 10BC 003F                  		move.b	#$3F,(a0)
00018834 117C 0000 0024             		move.b	#0,$24(a0)
0001883A                            
0001883A                            Obj48_Display4:
0001883A 4EF9 0000 E044             		jmp	DisplaySprite
00018840                            ; ===========================================================================
00018840                            Ani_Eggman:
00018840                            	include "_anim\Eggman.asm"
00018840                            ; ---------------------------------------------------------------------------
00018840                            ; Animation script - Eggman (bosses)
00018840                            ; ---------------------------------------------------------------------------
00018840 0000                       		dc.w byte_17CD4-Ani_Eggman
00018842 0000                       		dc.w byte_17CD8-Ani_Eggman
00018844 0000                       		dc.w byte_17CDC-Ani_Eggman
00018846 0000                       		dc.w byte_17CE0-Ani_Eggman
00018848 0000                       		dc.w byte_17CE4-Ani_Eggman
0001884A 0000                       		dc.w byte_17CE8-Ani_Eggman
0001884C 0000                       		dc.w byte_17CEC-Ani_Eggman
0001884E 0000                       		dc.w byte_17CF0-Ani_Eggman
00018850 0000                       		dc.w byte_17CF4-Ani_Eggman
00018852 0000                       		dc.w byte_17CF8-Ani_Eggman
00018854 0000                       		dc.w byte_17CFC-Ani_Eggman
00018856 0000                       		dc.w byte_17D00-Ani_Eggman
00018858 0F00 FF00                  byte_17CD4:	dc.b $F, 0, $FF, 0
0001885C 0501 02FF                  byte_17CD8:	dc.b 5,	1, 2, $FF
00018860 0301 02FF                  byte_17CDC:	dc.b 3,	1, 2, $FF
00018864 0101 02FF                  byte_17CE0:	dc.b 1,	1, 2, $FF
00018868 0403 04FF                  byte_17CE4:	dc.b 4,	3, 4, $FF
0001886C 1F05 01FF                  byte_17CE8:	dc.b $1F, 5, 1,	$FF
00018870 0306 01FF                  byte_17CEC:	dc.b 3,	6, 1, $FF
00018874 0F0A FF00                  byte_17CF0:	dc.b $F, $A, $FF, 0
00018878 0308 09FF                  byte_17CF4:	dc.b 3,	8, 9, $FF
0001887C 0108 09FF                  byte_17CF8:	dc.b 1,	8, 9, $FF
00018880 0F07 FF00                  byte_17CFC:	dc.b $F, 7, $FF, 0
00018884 0209 080B 0C0B 0C09 08FE+  byte_17D00:	dc.b 2,	9, 8, $B, $C, $B, $C, 9, 8, $FE, 2, 0
00018890                            		even
00018890                            		even
00018890                            Ani_TetoB:
00018890                            	include "_anim\TetoB.asm"
00018890                            ; ---------------------------------------------------------------------------
00018890                            ; Animation script - Eggman (bosses)
00018890                            ; ---------------------------------------------------------------------------
00018890 0000                       		dc.w spin-Ani_TetoB
00018892 0000                       		dc.w static-Ani_TetoB
00018894 0000                       		dc.w static2-Ani_TetoB
00018896 0400 0102 03FF 00          spin:	dc.b 4, 0, 1, 2, 3, $FF, 0
0001889D 0500 FF                    static:	dc.b 5,	0, $FF
000188A0 0501 FF                    static2:	dc.b 5,	1, $FF
000188A4 00                         		even
000188A4 00                         		even
000188A4                            ; ---------------------------------------------------------------------------
000188A4                            ; Sprite mappings - Eggman (boss levels)
000188A4                            ; ---------------------------------------------------------------------------
000188A4                            Map_Eggman:
000188A4                            	include "_maps\Eggman.asm"
000188A4                            Map_dc7e:
000188A4 0000                       Map_dc7e_0: 	dc.w Map_dc7e_1A-Map_dc7e
000188A6 0000                       Map_dc7e_2: 	dc.w Map_dc7e_39-Map_dc7e
000188A8 0000                       Map_dc7e_4: 	dc.w Map_dc7e_44-Map_dc7e
000188AA 0000                       Map_dc7e_6: 	dc.w Map_dc7e_4F-Map_dc7e
000188AC 0000                       Map_dc7e_8: 	dc.w Map_dc7e_5F-Map_dc7e
000188AE 0000                       Map_dc7e_A: 	dc.w Map_dc7e_6F-Map_dc7e
000188B0 0000                       Map_dc7e_C: 	dc.w Map_dc7e_7F-Map_dc7e
000188B2 0000                       Map_dc7e_E: 	dc.w Map_dc7e_8F-Map_dc7e
000188B4 0000                       Map_dc7e_10: 	dc.w Map_dc7e_A4-Map_dc7e
000188B6 0000                       Map_dc7e_12: 	dc.w Map_dc7e_AA-Map_dc7e
000188B8 0000                       Map_dc7e_14: 	dc.w Map_dc7e_B0-Map_dc7e
000188BA 0000                       Map_dc7e_16: 	dc.w Map_dc7e_B1-Map_dc7e
000188BC 0000                       Map_dc7e_18: 	dc.w Map_dc7e_BC-Map_dc7e
000188BE 06                         Map_dc7e_1A: 	dc.b $6
000188BF EC01 000A E4               	dc.b $EC, $1, $0, $A, $E4
000188C4 EC05 000C 0C               	dc.b $EC, $5, $0, $C, $C
000188C9 FC0E 2010 E4               	dc.b $FC, $E, $20, $10, $E4
000188CE FC0E 201C 04               	dc.b $FC, $E, $20, $1C, $4
000188D3 140C 2028 EC               	dc.b $14, $C, $20, $28, $EC
000188D8 1400 202C 0C               	dc.b $14, $0, $20, $2C, $C
000188DD 02                         Map_dc7e_39: 	dc.b $2
000188DE E404 0000 F4               	dc.b $E4, $4, $0, $0, $F4
000188E3 EC0D 0002 EC               	dc.b $EC, $D, $0, $2, $EC
000188E8 02                         Map_dc7e_44: 	dc.b $2
000188E9 E404 0000 F4               	dc.b $E4, $4, $0, $0, $F4
000188EE EC0D 0035 EC               	dc.b $EC, $D, $0, $35, $EC
000188F3 03                         Map_dc7e_4F: 	dc.b $3
000188F4 E408 003D F4               	dc.b $E4, $8, $0, $3D, $F4
000188F9 EC09 0040 EC               	dc.b $EC, $9, $0, $40, $EC
000188FE EC05 0046 04               	dc.b $EC, $5, $0, $46, $4
00018903 03                         Map_dc7e_5F: 	dc.b $3
00018904 E408 004A F4               	dc.b $E4, $8, $0, $4A, $F4
00018909 EC09 004D EC               	dc.b $EC, $9, $0, $4D, $EC
0001890E EC05 0053 04               	dc.b $EC, $5, $0, $53, $4
00018913 03                         Map_dc7e_6F: 	dc.b $3
00018914 E408 0057 F4               	dc.b $E4, $8, $0, $57, $F4
00018919 EC09 005A EC               	dc.b $EC, $9, $0, $5A, $EC
0001891E EC05 0060 04               	dc.b $EC, $5, $0, $60, $4
00018923 03                         Map_dc7e_7F: 	dc.b $3
00018924 E404 0064 04               	dc.b $E4, $4, $0, $64, $4
00018929 E404 0000 F4               	dc.b $E4, $4, $0, $0, $F4
0001892E EC0D 0035 EC               	dc.b $EC, $D, $0, $35, $EC
00018933 04                         Map_dc7e_8F: 	dc.b $4
00018934 E409 0066 F4               	dc.b $E4, $9, $0, $66, $F4
00018939 E408 0057 F4               	dc.b $E4, $8, $0, $57, $F4
0001893E EC09 005A EC               	dc.b $EC, $9, $0, $5A, $EC
00018943 EC05 0060 04               	dc.b $EC, $5, $0, $60, $4
00018948 01                         Map_dc7e_A4: 	dc.b $1
00018949 0405 002D 22               	dc.b $4, $5, $0, $2D, $22
0001894E 01                         Map_dc7e_AA: 	dc.b $1
0001894F 0405 0031 22               	dc.b $4, $5, $0, $31, $22
00018954 00                         Map_dc7e_B0: 	dc.b $0
00018955 02                         Map_dc7e_B1: 	dc.b $2
00018956 0008 012A 22               	dc.b $0, $8, $1, $2A, $22
0001895B 0808 112A 22               	dc.b $8, $8, $11, $2A, $22
00018960 02                         Map_dc7e_BC: 	dc.b $2
00018961 F80B 012D 22               	dc.b $F8, $B, $1, $2D, $22
00018966 0001 0139 3A               	dc.b $0, $1, $1, $39, $3A
0001896C 00                         	even
0001896C 00                         	even
0001896C                            
0001896C                            ; ---------------------------------------------------------------------------
0001896C                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
0001896C                            ; ---------------------------------------------------------------------------
0001896C                            Map_BossItems:
0001896C                            	include "_maps\Boss items.asm"
0001896C                            ; ---------------------------------------------------------------------------
0001896C                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
0001896C                            ; ---------------------------------------------------------------------------
0001896C 0000 0000                  		dc.w byte_17DE4-Map_BossItems, byte_17DEA-Map_BossItems
00018970 0000 0000                  		dc.w byte_17DF6-Map_BossItems, byte_17DFC-Map_BossItems
00018974 0000 0000                  		dc.w byte_17E02-Map_BossItems, byte_17E08-Map_BossItems
00018978 0000 0000                  		dc.w byte_17E1E-Map_BossItems, byte_17E2A-Map_BossItems
0001897C 01                         byte_17DE4:	dc.b 1
0001897D F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00018982 02                         byte_17DEA:	dc.b 2
00018983 FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8
00018988 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001898D 00                         		dc.b 0
0001898E 01                         byte_17DF6:	dc.b 1
0001898F FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC
00018994 01                         byte_17DFC:	dc.b 1
00018995 1409 0007 F4               		dc.b $14, 9, 0,	7, $F4
0001899A 01                         byte_17E02:	dc.b 1
0001899B 1405 000D F8               		dc.b $14, 5, 0,	$D, $F8
000189A0 04                         byte_17E08:	dc.b 4
000189A1 F004 0011 F8               		dc.b $F0, 4, 0,	$11, $F8
000189A6 F801 0013 F8               		dc.b $F8, 1, 0,	$13, $F8
000189AB F801 0813 00               		dc.b $F8, 1, 8,	$13, 0
000189B0 0804 0015 F8               		dc.b 8,	4, 0, $15, $F8
000189B5 00                         		dc.b 0
000189B6 02                         byte_17E1E:	dc.b 2
000189B7 0005 0017 00               		dc.b 0,	5, 0, $17, 0
000189BC 0000 001B 10               		dc.b 0,	0, 0, $1B, $10
000189C1 00                         		dc.b 0
000189C2 02                         byte_17E2A:	dc.b 2
000189C3 1804 001C 00               		dc.b $18, 4, 0,	$1C, 0
000189C8 000B 001E 10               		dc.b 0,	$B, 0, $1E, $10
000189CE 00                         		even
000189CE 00                         		even
000189CE                            
000189CE                            ; ===========================================================================
000189CE                            ; ---------------------------------------------------------------------------
000189CE                            ; Object 77 - Fatass teto boss fight in LZ -STDH
000189CE                            ; ---------------------------------------------------------------------------
000189CE                            
000189CE                            
000189CE                            obj77:					; XREF: Obj_Index
000189CE 7000                       		moveq	#0,d0
000189D0 1028 0024                  		move.b	$24(a0),d0
000189D4 323B 0000                  		move.w	obj77_Index(pc,d0.w),d1
000189D8 4EFB 1000                  		jmp	obj77_Index(pc,d1.w)
000189DC                            ; ===========================================================================
000189DC 0000                       obj77_Index:	dc.w obj77_Main-obj77_Index
000189DE 0000                       		dc.w obj77_ShipMain-obj77_Index
000189E0 0000                       		dc.w obj77_FaceMain-obj77_Index
000189E2 0000                       		dc.w obj77_FlameMain-obj77_Index
000189E4                            
000189E4 0200                       obj77_ObjData:	dc.b 2,	0		; routine counter, animation
000189E6 0401                       		dc.b 4,	1
000189E8 0607                       		dc.b 6,	7
000189EA                            ; ===========================================================================
000189EA                            
000189EA                            obj77_Main:				; XREF: obj77_Index
000189EA 45F9 0001 89E4             		lea	(obj77_ObjData).l,a2
000189F0 2248                       		movea.l	a0,a1
000189F2 7202                       		moveq	#2,d1
000189F4 6000                       		bra.s	obj77_LoadBoss
000189F6                            ; ===========================================================================
000189F6                            
000189F6                            obj77_Loop:
000189F6 4EB9 0000 E4E0             		jsr	SingleObjLoad2
000189FC 6600                       		bne.s	loc2_17772
000189FE                            
000189FE                            obj77_LoadBoss:				; XREF: obj77_Main
000189FE 135A 0024                  		move.b	(a2)+,$24(a1)
00018A02 12BC 0077                  		move.b	#$77,0(a1)
00018A06 3368 0008 0008             		move.w	8(a0),8(a1)
00018A0C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018A12 237C 0000 0000 0004        		move.l	#Map_TetoBoss,4(a1)
00018A1A 337C 0400 0002             		move.w	#$400,2(a1)
00018A20 137C 0004 0001             		move.b	#4,1(a1)
00018A26 137C 0020 0019             		move.b	#$20,$19(a1)
00018A2C 137C 0003 0018             		move.b	#3,$18(a1)
00018A32 135A 001C                  		move.b	(a2)+,$1C(a1)
00018A36 2348 0034                  		move.l	a0,$34(a1)
00018A3A 51C9 FFBA                  		dbf	d1,obj77_Loop	; repeat sequence 2 more times
00018A3E                            
00018A3E                            loc2_17772:
00018A3E 3168 0008 0030             		move.w	8(a0),$30(a0)
00018A44 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018A4A 117C 000F 0020             		move.b	#$F,$20(a0)
00018A50 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00018A56                            
00018A56                            obj77_ShipMain:				; XREF: obj77_Index
00018A56 7000                       		moveq	#0,d0
00018A58 1028 0025                  		move.b	$25(a0),d0
00018A5C 323B 0000                  		move.w	obj77_ShipIndex(pc,d0.w),d1
00018A60 4EBB 1000                  		jsr	obj77_ShipIndex(pc,d1.w)
00018A64 43F9 0001 8890             		lea	(Ani_TetoB).l,a1
00018A6A 4EB9 0000 B09A             		jsr	AnimateSprite
00018A70 1028 0022                  		move.b	$22(a0),d0
00018A74 0200 0003                  		andi.b	#3,d0
00018A78 0228 00FC 0001             		andi.b	#$FC,1(a0)
00018A7E 8128 0001                  		or.b	d0,1(a0)
00018A82 4EF9 0000 E044             		jmp	DisplaySprite
00018A88                            ; ===========================================================================
00018A88 0000                       obj77_ShipIndex:dc.w obj77_ShipStart-obj77_ShipIndex
00018A8A 0000                       		dc.w obj77_MakeBall-obj77_ShipIndex
00018A8C 0000                       		dc.w obj77_ShipMove-obj77_ShipIndex
00018A8E 0000                       		dc.w loc2_17954-obj77_ShipIndex
00018A90 0000                       		dc.w fatassruns-obj77_ShipIndex		
00018A92 0000                       		dc.w loc2_1797A-obj77_ShipIndex
00018A94 0000                       		dc.w loc2_179AC-obj77_ShipIndex
00018A96 0000                       		dc.w loc2_179F6-obj77_ShipIndex
00018A98                            ; ===========================================================================
00018A98                            
00018A98                            obj77_ShipStart:			; XREF: obj77_ShipIndex
00018A98                            	;	move.w	#$100,$12(a0)	; move ship down
00018A98 6100 F964                  		bsr.w	BossMove
00018A9C 0C68 06E0 0038             		cmpi.w	#$6E0,$38(a0)
00018AA2 6600                       		bne.s	loc2_177E6
00018AA4 317C 0000 0012             		move.w	#0,$12(a0)	; stop ship
00018AAA 5428 0025                  		addq.b	#2,$25(a0)	; goto next routine
00018AAE                            
00018AAE                            loc2_177E6:
00018AAE                            ;		move.b	$3F(a0),d0
00018AAE                            ;		jsr	(CalcSine).l
00018AAE EC40                       		asr.w	#6,d0
00018AB0 D068 0038                  		add.w	$38(a0),d0
00018AB4 3140 000C                  		move.w	d0,$C(a0)
00018AB8 3168 0030 0008             		move.w	$30(a0),8(a0)
00018ABE 5428 003F                  		addq.b	#2,$3F(a0)
00018AC2 0C28 000A 0025             		cmpi.b	#$A,$25(a0)
00018AC8 6400                       		bcc.s	locret_1784A2
00018ACA 4A28 0022                  		tst.b	$22(a0)
00018ACE 6B00                       		bmi.s	loc2_1784C
00018AD0 4A28 0020                  		tst.b	$20(a0)
00018AD4 6600                       		bne.s	locret_1784A2
00018AD6 4A28 003E                  		tst.b	$3E(a0)
00018ADA 6600                       		bne.s	obj77_ShipFlash
00018ADC 117C 0060 003E             		move.b	#$60,$3E(a0)	; set number of	times for ship to flash
00018AE2 303C 00AC                  		move.w	#$AC,d0
00018AE6 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play boss damage sound
00018AEC                            
00018AEC                            obj77_ShipFlash:
00018AEC 43F8 FB22                  		lea	($FFFFFB22).w,a1 ; load	2nd pallet, 2nd	entry
00018AF0 7000                       		moveq	#0,d0		; move 0 (black) to d0
00018AF2 4A51                       		tst.w	(a1)
00018AF4 6600                       		bne.s	loc2_1783C
00018AF6 303C 0EEE                  		move.w	#$EEE,d0	; move 0EEE (white) to d0
00018AFA                            
00018AFA                            loc2_1783C:
00018AFA 3280                       		move.w	d0,(a1)		; load colour stored in	d0
00018AFC 5328 003E                  		subq.b	#1,$3E(a0)
00018B00 6600                       		bne.s	locret_1784A2
00018B02 117C 000F 0020             		move.b	#$F,$20(a0)
00018B08                            
00018B08                            locret_1784A2:
00018B08 4E75                       		rts	
00018B0A                            ; ===========================================================================
00018B0A                            
00018B0A                            loc2_1784C:				; XREF: loc2_177E6
00018B0A 7064                       		moveq	#100,d0
00018B0C 6100 0000                  		bsr.w	AddPoints
00018B10 117C 000A 0025             		move.b	#$A,$25(a0)
00018B16 317C 00B3 003C             		move.w	#$B3,$3C(a0)
00018B1C 4E75                       		rts	
00018B1E                            ; ===========================================================================
00018B1E                            
00018B1E                            obj77_MakeBall:				; XREF: obj77_ShipIndex
00018B1E 317C FF00 0010             		move.w	#-$100,$10(a0)
00018B24 117C 0001 001C             		move.b	#1,$1C(a0)	; it runs
00018B2A 6100 F8D2                  		bsr.w	BossMove
00018B2E 0C68 1E00 0030             		cmpi.w	#$1E00,$30(a0)
00018B34 6600                       		bne.s	loc2_17916
00018B36 317C 0000 0010             		move.w	#0,$10(a0)
00018B3C 117C 0002 001C             		move.b	#2,$1C(a0)	; stare
00018B42 317C 0000 0012             		move.w	#0,$12(a0)
00018B48 5428 0025                  		addq.b	#2,$25(a0)
00018B4C                            
00018B4C                            loc2_17910:
00018B4C 317C 0077 003C             		move.w	#$77,$3C(a0)
00018B52                            
00018B52                            loc2_17916:
00018B52 6000 FF5A                  		bra.w	loc2_177E6
00018B56                            ; ===========================================================================
00018B56                            
00018B56                            obj77_ShipMove:				; XREF: obj77_ShipIndex
00018B56 6100 F8A6                  		bsr.w	BossMove
00018B5A 5368 003C                  		subq.w	#1,$3C(a0)
00018B5E 6A00                       		bpl.s	loc2_17950 ; if time remains go here
00018B60 117C 0000 001C             		move.b	#0,$1C(a0)	; make it spin
00018B66 117C 0087 0020             		move.b	#$87,$20(a0) ; the spinning hurts you
00018B6C 317C FE00 0010             		move.w	#-$200,$10(a0)	; move the ship	sideways
00018B72 0C68 1D10 0030             		cmpi.w	#$1D10,$30(a0) ; is teto here
00018B78 6600                       		bne.s	loc2_17950 ; if not branch
00018B7A                            
00018B7A                            fatass_attack:
00018B7A 317C 0000 0010             		move.w	#0,$10(a0) ; stop her
00018B80 317C FE00 0012             		move.w	#-$200,$12(a0) ; OH SHIT SHES GOING UP
00018B86 0C68 0680 0038              		cmpi.w	#$680,$38(a0) ; is she here
00018B8C 6600                       		bne.s	loc2_17950    ; if not you know the drill
00018B8E 5428 0025                  		addq.b	#2,$25(a0)	; next routine!
00018B92 317C 0000 0012             		move.w	#0,$12(a0) ; stop her		
00018B98                            
00018B98                            loc2_17950:
00018B98 6000 FF14                  		bra.w	loc2_177E6
00018B9C                            ; ===========================================================================
00018B9C                            
00018B9C                            loc2_17954:				; XREF: obj77_ShipIndex
00018B9C 6100 F860                  		bsr.w	BossMove
00018BA0 317C 0400 0012             		move.w	#$400,$12(a0) ; RUN A EARTHQUAKE!!
00018BA6                            		; i suck at programming
00018BA6 0C68 06E0 0038              		cmpi.w	#$6E0,$38(a0) ; is she back to the ground
00018BAC 6600                       		bne.s	loc2_17976    ; if not blah blah
00018BAE 317C 0000 0012             		move.w	#0,$12(a0) ; stop her		
00018BB4 5428 0025                  		addq.b	#2,$25(a0)	; next routine!
00018BB8 303C 00B9                  		move.w	#$B9,d0
00018BBC 4EB9 0000 1594             		jsr	(PlaySound).l	; play the earthquake sound
00018BC2                            
00018BC2                            Peartobombs:	
00018BC2 4EB9 0000 E4E0                		jsr	SingleObjLoad2
00018BC8 6600                       		bne.s	secondone
00018BCA 12BC 0019                  		move.b	#$19,0(a1)	; load pearto bomb
00018BCE 337C 1D70 0008             		move.w	#$1D70,8(a1)
00018BD4 337C 0670 000C             		move.w	#$670,$C(a1)
00018BDA                            secondone:		
00018BDA 4EB9 0000 E4E0                		jsr	SingleObjLoad2
00018BE0 6600                       		bne.s	loc2_17976		
00018BE2 12BC 0019                  		move.b	#$19,0(a1)	; load pearto bomb 2
00018BE6 337C 1D20 0008             		move.w	#$1D20,8(a1)
00018BEC 337C 0670 000C             		move.w	#$670,$C(a1)
00018BF2                            lastone:
00018BF2 4EB9 0000 E4E0                		jsr	SingleObjLoad2
00018BF8 6600                       		bne.s	loc2_17976		
00018BFA 12BC 0019                  		move.b	#$19,0(a1)	; load pearto bomb 3
00018BFE 337C 1E00 0008             		move.w	#$1E00,8(a1)
00018C04 337C 0670 000C             		move.w	#$670,$C(a1)
00018C0A                            		
00018C0A                            loc2_17976:
00018C0A 6000 FEA2                  		bra.w	loc2_177E6
00018C0E                            		
00018C0E                            ; ===========================================================================
00018C0E                            Fatassruns:
00018C0E 6100 F7EE                   		bsr.w	BossMove
00018C12 317C 0200 0010             		move.w	#$200,$10(a0)	; IT RUNS!!
00018C18 0C68 1E00 0030             		cmpi.w	#$1E00,$30(a0) ; is she back here
00018C1E 6600                       		bne.s	processstuff ; is not go here
00018C20 317C 0000 0010             		move.w	#0,$10(a0)	; stop'
00018C26 117C 0002 001C             		move.b	#2,$1C(a0)	; stareeeee
00018C2C 5928 0025                  		subq.b	#4,$25(a0) ; make the boss loop
00018C30 317C 0077 003C             		move.w	#$77,$3C(a0) ; timeerr
00018C36 117C 000F 0020             		move.b	#$F,$20(a0) ; now you can hit her
00018C3C                            		
00018C3C                            		
00018C3C                            processstuff:
00018C3C 6000 FE70                  		bra.w	loc2_177E6
00018C40                            ; ===========================================================================
00018C40                            
00018C40                            loc2_1797A:				; XREF: obj77_ShipIndex
00018C40 5368 003C                  		subq.w	#1,$3C(a0)
00018C44 6B00                       		bmi.s	loc2_17984
00018C46 6000 F774                  		bra.w	BossDefeated
00018C4A                            ; ===========================================================================
00018C4A                            
00018C4A                            loc2_17984:
00018C4A 08E8 0000 0022             		bset	#0,$22(a0)
00018C50 08A8 0007 0022             		bclr	#7,$22(a0)
00018C56 4268 0010                  		clr.w	$10(a0)
00018C5A 5428 0025                  		addq.b	#2,$25(a0)
00018C5E 317C FFDA 003C             		move.w	#-$26,$3C(a0)
00018C64 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00018C68 6600                       		bne.s	locret_179AA2
00018C6A 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00018C70                            
00018C70                            locret_179AA2:
00018C70 4E75                       		rts	
00018C72                            ; ===========================================================================
00018C72                            
00018C72                            loc2_179AC:				; XREF: obj77_ShipIndex
00018C72 5268 003C                  		addq.w	#1,$3C(a0)
00018C76 6700                       		beq.s	loc2_179BC
00018C78 6A00                       		bpl.s	loc2_179C2
00018C7A 0668 0018 0012             		addi.w	#$18,$12(a0)
00018C80 6000                       		bra.s	loc2_179EE
00018C82                            ; ===========================================================================
00018C82                            
00018C82                            loc2_179BC:
00018C82 4268 0012                  		clr.w	$12(a0)
00018C86 6000                       		bra.s	loc2_179EE
00018C88                            ; ===========================================================================
00018C88                            
00018C88                            loc2_179C2:
00018C88 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
00018C8E 6500                       		bcs.s	loc2_179DA
00018C90 6700                       		beq.s	loc2_179E0
00018C92 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
00018C98 6500                       		bcs.s	loc2_179EE
00018C9A 5428 0025                  		addq.b	#2,$25(a0)
00018C9E 6000                       		bra.s	loc2_179EE
00018CA0                            ; ===========================================================================
00018CA0                            
00018CA0                            loc2_179DA:
00018CA0 5168 0012                  		subq.w	#8,$12(a0)
00018CA4 6000                       		bra.s	loc2_179EE
00018CA6                            ; ===========================================================================
00018CA6                            
00018CA6                            loc2_179E0:
00018CA6 4268 0012                  		clr.w	$12(a0)
00018CAA 303C 0097                  		move.w	#$97,d0
00018CAE 4EB9 0000 1594             		jsr	(PlaySound).l	; play lz3 music
00018CB4                            
00018CB4                            loc2_179EE:
00018CB4 6100 F748                  		bsr.w	BossMove
00018CB8 6000 FDF4                  		bra.w	loc2_177E6
00018CBC                            ; ===========================================================================
00018CBC                            
00018CBC                            loc2_179F6:				; XREF: obj77_ShipIndex
00018CBC 317C 0400 0010             		move.w	#$400,$10(a0)
00018CC2 317C FFC0 0012             		move.w	#-$40,$12(a0)
00018CC8 0C78 1F00 F72A             		cmpi.w	#$1F00,($FFFFF72A).w
00018CCE 6700                       		beq.s	loc2_17A10
00018CD0 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00018CD4 6000                       		bra.s	loc2_17A16
00018CD6                            ; ===========================================================================
00018CD6                            
00018CD6                            loc2_17A10:
00018CD6 4A28 0001                  		tst.b	1(a0)
00018CDA 6A00                       		bpl.s	obj77_ShipDel
00018CDC                            
00018CDC                            loc2_17A16:
00018CDC 6100 F720                  		bsr.w	BossMove
00018CE0 6000 FDCC                  		bra.w	loc2_177E6
00018CE4                            ; ===========================================================================
00018CE4                            
00018CE4                            obj77_ShipDel:
00018CE4 4EF9 0000 E080             		jmp	DeleteObject
00018CEA                            ; ===========================================================================
00018CEA                            
00018CEA                            obj77_FaceMain:				; XREF: obj77_Index
00018CEA 4E75                       		rts
00018CEC                            ; ===========================================================================
00018CEC                            
00018CEC                            obj77_FlameMain:			; XREF: obj77_Index
00018CEC 4E75                       		rts
00018CEE                            ; ===========================================================================
00018CEE                            
00018CEE                            obj77_Display:				; XREF: obj77_FaceDisp; obj77_FlameDisp
00018CEE 43F9 0001 8890             		lea	(Ani_TetoB).l,a1
00018CF4 4EB9 0000 B09A             		jsr	AnimateSprite
00018CFA 4EF9 0000 E044             		jmp	DisplaySprite
00018D00                            ; ---------------------------------------------------------------------------
00018D00                            ; Sprite mappings - Fatass teto boss
00018D00                            ; ---------------------------------------------------------------------------
00018D00                            Map_TetoBoss:
00018D00                            	include "_maps\tetoboss.asm"
00018D00                            Map_f09a:
00018D00 0000                       Map_f09a_0: 	dc.w Map_f09a_8-Map_f09a
00018D02 0000                       Map_f09a_2: 	dc.w Map_f09a_18-Map_f09a
00018D04 0000                       Map_f09a_4: 	dc.w Map_f09a_37-Map_f09a
00018D06 0000                       Map_f09a_6: 	dc.w Map_f09a_47-Map_f09a
00018D08 03                         Map_f09a_8: 	dc.b $3
00018D09 E50F 602B F0               	dc.b $E5, $F, $60, $2B, $F0
00018D0E 050E 603B F0               	dc.b $5, $E, $60, $3B, $F0
00018D13 DD00 6047 F8               	dc.b $DD, $0, $60, $47, $F8
00018D18 06                         Map_f09a_18: 	dc.b $6
00018D19 EC0E 6000 E4               	dc.b $EC, $E, $60, $0, $E4
00018D1E 040E 600C EC               	dc.b $4, $E, $60, $C, $EC
00018D23 E408 6018 F4               	dc.b $E4, $8, $60, $18, $F4
00018D28 1C00 601B F4               	dc.b $1C, $0, $60, $1B, $F4
00018D2D EC0A 601C 04               	dc.b $EC, $A, $60, $1C, $4
00018D32 0406 6025 0C               	dc.b $4, $6, $60, $25, $C
00018D37 03                         Map_f09a_37: 	dc.b $3
00018D38 E50F 682B F0               	dc.b $E5, $F, $68, $2B, $F0
00018D3D 050E 683B F0               	dc.b $5, $E, $68, $3B, $F0
00018D42 DD00 6847 00               	dc.b $DD, $0, $68, $47, $0
00018D47 06                         Map_f09a_47: 	dc.b $6
00018D48 ED0E 6048 E4               	dc.b $ED, $E, $60, $48, $E4
00018D4D 050E 6054 EC               	dc.b $5, $E, $60, $54, $EC
00018D52 E508 6060 F4               	dc.b $E5, $8, $60, $60, $F4
00018D57 DD00 6063 FC               	dc.b $DD, $0, $60, $63, $FC
00018D5C ED0A 6064 04               	dc.b $ED, $A, $60, $64, $4
00018D61 0502 606D 0C               	dc.b $5, $2, $60, $6D, $C
00018D66                            	even
00018D66                            	even
00018D66                            ; ===========================================================================
00018D66                            ; ---------------------------------------------------------------------------
00018D66                            ; Object 73 - Eggman (MZ)
00018D66                            ; ---------------------------------------------------------------------------
00018D66                            
00018D66                            Obj73:					; XREF: Obj_Index
00018D66 7000                       		moveq	#0,d0
00018D68 1028 0024                  		move.b	$24(a0),d0
00018D6C 323B 0000                  		move.w	Obj73_Index(pc,d0.w),d1
00018D70 4EFB 1000                  		jmp	Obj73_Index(pc,d1.w)
00018D74                            ; ===========================================================================
00018D74 0000                       Obj73_Index:	dc.w Obj73_Main-Obj73_Index
00018D76 0000                       		dc.w Obj73_ShipMain-Obj73_Index
00018D78 0000                       		dc.w Obj73_FaceMain-Obj73_Index
00018D7A 0000                       		dc.w Obj73_FlameMain-Obj73_Index
00018D7C 0000                       		dc.w Obj73_TubeMain-Obj73_Index
00018D7E                            
00018D7E 0200 04                    Obj73_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
00018D81 0401 04                    		dc.b 4,	1, 4
00018D84 0607 04                    		dc.b 6,	7, 4
00018D87 0800 03                    		dc.b 8,	0, 3
00018D8A                            ; ===========================================================================
00018D8A                            
00018D8A                            Obj73_Main:				; XREF: Obj73_Index
00018D8A 3168 0008 0030             		move.w	8(a0),$30(a0)
00018D90 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018D96 117C 000F 0020             		move.b	#$F,$20(a0)
00018D9C 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00018DA2 45FA FFDA                  		lea	Obj73_ObjData(pc),a2
00018DA6 2248                       		movea.l	a0,a1
00018DA8 7203                       		moveq	#3,d1
00018DAA 6000                       		bra.s	Obj73_LoadBoss
00018DAC                            ; ===========================================================================
00018DAC                            
00018DAC                            Obj73_Loop:
00018DAC 4EB9 0000 E4E0             		jsr	SingleObjLoad2
00018DB2 6600                       		bne.s	Obj73_ShipMain
00018DB4 12BC 0073                  		move.b	#$73,0(a1)
00018DB8 3368 0008 0008             		move.w	8(a0),8(a1)
00018DBE 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018DC4                            
00018DC4                            Obj73_LoadBoss:				; XREF: Obj73_Main
00018DC4 08A8 0000 0022             		bclr	#0,$22(a0)
00018DCA 4229 0025                  		clr.b	$25(a1)
00018DCE 135A 0024                  		move.b	(a2)+,$24(a1)
00018DD2 135A 001C                  		move.b	(a2)+,$1C(a1)
00018DD6 135A 0018                  		move.b	(a2)+,$18(a1)
00018DDA 237C 0001 88A4 0004        		move.l	#Map_Eggman,4(a1)
00018DE2 337C 0400 0002             		move.w	#$400,2(a1)
00018DE8 137C 0004 0001             		move.b	#4,1(a1)
00018DEE 137C 0020 0019             		move.b	#$20,$19(a1)
00018DF4 2348 0034                  		move.l	a0,$34(a1)
00018DF8 51C9 FFB2                  		dbf	d1,Obj73_Loop	; repeat sequence 3 more times
00018DFC                            
00018DFC                            Obj73_ShipMain:
00018DFC 7000                       		moveq	#0,d0
00018DFE 1028 0025                  		move.b	$25(a0),d0
00018E02 323B 0000                  		move.w	Obj73_ShipIndex(pc,d0.w),d1
00018E06 4EBB 1000                  		jsr	Obj73_ShipIndex(pc,d1.w)
00018E0A 43F9 0001 8840             		lea	(Ani_Eggman).l,a1
00018E10 4EB9 0000 B09A             		jsr	AnimateSprite
00018E16 7003                       		moveq	#3,d0
00018E18 C028 0022                  		and.b	$22(a0),d0
00018E1C 0228 00FC 0001             		andi.b	#$FC,1(a0)
00018E22 8128 0001                  		or.b	d0,1(a0)
00018E26 4EF9 0000 E044             		jmp	DisplaySprite
00018E2C                            ; ===========================================================================
00018E2C 0000                       Obj73_ShipIndex:dc.w loc_18302-Obj73_ShipIndex
00018E2E 0000                       		dc.w loc_183AA-Obj73_ShipIndex
00018E30 0000                       		dc.w loc_184F6-Obj73_ShipIndex
00018E32 0000                       		dc.w loc_1852C-Obj73_ShipIndex
00018E34 0000                       		dc.w loc_18582-Obj73_ShipIndex
00018E36                            ; ===========================================================================
00018E36                            
00018E36                            loc_18302:				; XREF: Obj73_ShipIndex
00018E36 1028 003F                  		move.b	$3F(a0),d0
00018E3A 5428 003F                  		addq.b	#2,$3F(a0)
00018E3E 4EB9 0000 2D34             		jsr	(CalcSine).l
00018E44 E440                       		asr.w	#2,d0
00018E46 3140 0012                  		move.w	d0,$12(a0)
00018E4A 317C FF00 0010             		move.w	#-$100,$10(a0)
00018E50 6100 F5AC                  		bsr.w	BossMove
00018E54 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
00018E5A 6600                       		bne.s	loc_18334
00018E5C 5428 0025                  		addq.b	#2,$25(a0)
00018E60 4228 0028                  		clr.b	$28(a0)
00018E64 42A8 0010                  		clr.l	$10(a0)
00018E68                            
00018E68                            loc_18334:
00018E68 4EB9 0000 2D0E             		jsr	(RandomNumber).l
00018E6E 1140 0034                  		move.b	d0,$34(a0)
00018E72                            
00018E72                            loc_1833E:
00018E72 3168 0038 000C             		move.w	$38(a0),$C(a0)
00018E78 3168 0030 0008             		move.w	$30(a0),8(a0)
00018E7E 0C28 0004 0025             		cmpi.b	#4,$25(a0)
00018E84 6400                       		bcc.s	locret_18390
00018E86 4A28 0022                  		tst.b	$22(a0)
00018E8A 6B00                       		bmi.s	loc_18392
00018E8C 4A28 0020                  		tst.b	$20(a0)
00018E90 6600                       		bne.s	locret_18390
00018E92 4A28 003E                  		tst.b	$3E(a0)
00018E96 6600                       		bne.s	loc_18374
00018E98 117C 0028 003E             		move.b	#$28,$3E(a0)
00018E9E 303C 00AC                  		move.w	#$AC,d0
00018EA2 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play boss damage sound
00018EA8                            
00018EA8                            loc_18374:
00018EA8 43F8 FB22                  		lea	($FFFFFB22).w,a1
00018EAC 7000                       		moveq	#0,d0
00018EAE 4A51                       		tst.w	(a1)
00018EB0 6600                       		bne.s	loc_18382
00018EB2 303C 0EEE                  		move.w	#$EEE,d0
00018EB6                            
00018EB6                            loc_18382:
00018EB6 3280                       		move.w	d0,(a1)
00018EB8 5328 003E                  		subq.b	#1,$3E(a0)
00018EBC 6600                       		bne.s	locret_18390
00018EBE 117C 000F 0020             		move.b	#$F,$20(a0)
00018EC4                            
00018EC4                            locret_18390:
00018EC4 4E75                       		rts	
00018EC6                            ; ===========================================================================
00018EC6                            
00018EC6                            loc_18392:				; XREF: loc_1833E
00018EC6 7064                       		moveq	#100,d0
00018EC8 6100 0000                  		bsr.w	AddPoints
00018ECC 117C 0004 0025             		move.b	#4,$25(a0)
00018ED2 317C 00B4 003C             		move.w	#$B4,$3C(a0)
00018ED8 4268 0010                  		clr.w	$10(a0)
00018EDC 4E75                       		rts	
00018EDE                            ; ===========================================================================
00018EDE                            
00018EDE                            loc_183AA:				; XREF: Obj73_ShipIndex
00018EDE 7000                       		moveq	#0,d0
00018EE0 1028 0028                  		move.b	$28(a0),d0
00018EE4 303B 0000                  		move.w	off_183C2(pc,d0.w),d0
00018EE8 4EBB 0000                  		jsr	off_183C2(pc,d0.w)
00018EEC 0228 0006 0028             		andi.b	#6,$28(a0)
00018EF2 6000 FF7E                  		bra.w	loc_1833E
00018EF6                            ; ===========================================================================
00018EF6 0000                       off_183C2:	dc.w loc_183CA-off_183C2
00018EF8 0000                       		dc.w Obj73_MakeLava2-off_183C2
00018EFA 0000                       		dc.w loc_183CA-off_183C2
00018EFC 0000                       		dc.w Obj73_MakeLava2-off_183C2
00018EFE                            ; ===========================================================================
00018EFE                            
00018EFE                            loc_183CA:				; XREF: off_183C2
00018EFE 4A68 0010                  		tst.w	$10(a0)
00018F02 6600                       		bne.s	loc_183FE
00018F04 7040                       		moveq	#$40,d0
00018F06 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
00018F0C 6700                       		beq.s	loc_183E6
00018F0E 6500                       		bcs.s	loc_183DE
00018F10 4440                       		neg.w	d0
00018F12                            
00018F12                            loc_183DE:
00018F12 3140 0012                  		move.w	d0,$12(a0)
00018F16 6000 F4E6                  		bra.w	BossMove
00018F1A                            ; ===========================================================================
00018F1A                            
00018F1A                            loc_183E6:
00018F1A 317C 0200 0010             		move.w	#$200,$10(a0)
00018F20 317C 0100 0012             		move.w	#$100,$12(a0)
00018F26 0828 0000 0022             		btst	#0,$22(a0)
00018F2C 6600                       		bne.s	loc_183FE
00018F2E 4468 0010                  		neg.w	$10(a0)
00018F32                            
00018F32                            loc_183FE:
00018F32 0C28 0018 003E             		cmpi.b	#$18,$3E(a0)
00018F38 6400                       		bcc.s	Obj73_MakeLava
00018F3A 6100 F4C2                  		bsr.w	BossMove
00018F3E 5968 0012                  		subq.w	#4,$12(a0)
00018F42                            
00018F42                            Obj73_MakeLava:
00018F42 5328 0034                  		subq.b	#1,$34(a0)
00018F46 6400                       		bcc.s	loc_1845C
00018F48 4EB9 0000 E4CA             		jsr	SingleObjLoad
00018F4E 6600                       		bne.s	loc_1844A
00018F50 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
00018F54 337C 02E8 000C             		move.w	#$2E8,$C(a1)	; set Y	position
00018F5A 4EB9 0000 2D0E             		jsr	(RandomNumber).l
00018F60 0280 0000 FFFF             		andi.l	#$FFFF,d0
00018F66 80FC 0050                  		divu.w	#$50,d0
00018F6A 4840                       		swap	d0
00018F6C 0640 1878                  		addi.w	#$1878,d0
00018F70 3340 0008                  		move.w	d0,8(a1)
00018F74 EE09                       		lsr.b	#7,d1
00018F76 337C 00FF 0028             		move.w	#$FF,$28(a1)
00018F7C                            
00018F7C                            loc_1844A:
00018F7C 4EB9 0000 2D0E             		jsr	(RandomNumber).l
00018F82 0200 001F                  		andi.b	#$1F,d0
00018F86 0600 0040                  		addi.b	#$40,d0
00018F8A 1140 0034                  		move.b	d0,$34(a0)
00018F8E                            
00018F8E                            loc_1845C:
00018F8E 0828 0000 0022             		btst	#0,$22(a0)
00018F94 6700                       		beq.s	loc_18474
00018F96 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
00018F9C 6D00                       		blt.s	locret_1849C
00018F9E 317C 1910 0030             		move.w	#$1910,$30(a0)
00018FA4 6000                       		bra.s	loc_18482
00018FA6                            ; ===========================================================================
00018FA6                            
00018FA6                            loc_18474:
00018FA6 0C68 1830 0030             		cmpi.w	#$1830,$30(a0)
00018FAC 6E00                       		bgt.s	locret_1849C
00018FAE 317C 1830 0030             		move.w	#$1830,$30(a0)
00018FB4                            
00018FB4                            loc_18482:
00018FB4 4268 0010                  		clr.w	$10(a0)
00018FB8 317C FE80 0012             		move.w	#-$180,$12(a0)
00018FBE 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
00018FC4 6400                       		bcc.s	loc_18498
00018FC6 4468 0012                  		neg.w	$12(a0)
00018FCA                            
00018FCA                            loc_18498:
00018FCA 5428 0028                  		addq.b	#2,$28(a0)
00018FCE                            
00018FCE                            locret_1849C:
00018FCE 4E75                       		rts	
00018FD0                            ; ===========================================================================
00018FD0                            
00018FD0                            Obj73_MakeLava2:			; XREF: off_183C2
00018FD0 6100 F42C                  		bsr.w	BossMove
00018FD4 3028 0038                  		move.w	$38(a0),d0
00018FD8 0440 022C                  		subi.w	#$22C,d0
00018FDC 6E00                       		bgt.s	locret_184F4
00018FDE 303C 022C                  		move.w	#$22C,d0
00018FE2 4A68 0012                  		tst.w	$12(a0)
00018FE6 6700                       		beq.s	loc_184EA
00018FE8 4268 0012                  		clr.w	$12(a0)
00018FEC 317C 0050 003C             		move.w	#$50,$3C(a0)
00018FF2 0868 0000 0022             		bchg	#0,$22(a0)
00018FF8 4EB9 0000 E4CA             		jsr	SingleObjLoad
00018FFE 6600                       		bne.s	loc_184EA
00019000 3368 0030 0008             		move.w	$30(a0),8(a1)
00019006 3368 0038 000C             		move.w	$38(a0),$C(a1)
0001900C 0669 0018 000C             		addi.w	#$18,$C(a1)
00019012 12BC 0074                  		move.b	#$74,(a1)	; load lava ball object
00019016 137C 0001 0028             		move.b	#1,$28(a1)
0001901C                            
0001901C                            loc_184EA:
0001901C 5368 003C                  		subq.w	#1,$3C(a0)
00019020 6600                       		bne.s	locret_184F4
00019022 5428 0028                  		addq.b	#2,$28(a0)
00019026                            
00019026                            locret_184F4:
00019026 4E75                       		rts	
00019028                            ; ===========================================================================
00019028                            
00019028                            loc_184F6:				; XREF: Obj73_ShipIndex
00019028 5368 003C                  		subq.w	#1,$3C(a0)
0001902C 6B00                       		bmi.s	loc_18500
0001902E 6000 F38C                  		bra.w	BossDefeated
00019032                            ; ===========================================================================
00019032                            
00019032                            loc_18500:
00019032 08E8 0000 0022             		bset	#0,$22(a0)
00019038 08A8 0007 0022             		bclr	#7,$22(a0)
0001903E 4268 0010                  		clr.w	$10(a0)
00019042 5428 0025                  		addq.b	#2,$25(a0)
00019046 317C FFDA 003C             		move.w	#-$26,$3C(a0)
0001904C 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00019050 6600                       		bne.s	locret_1852A
00019052 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00019058 4268 0012                  		clr.w	$12(a0)
0001905C                            
0001905C                            locret_1852A:
0001905C 4E75                       		rts	
0001905E                            ; ===========================================================================
0001905E                            
0001905E                            loc_1852C:				; XREF: Obj73_ShipIndex
0001905E 5268 003C                  		addq.w	#1,$3C(a0)
00019062 6700                       		beq.s	loc_18544
00019064 6A00                       		bpl.s	loc_1854E
00019066 0C68 0270 0038             		cmpi.w	#$270,$38(a0)
0001906C 6400                       		bcc.s	loc_18544
0001906E 0668 0018 0012             		addi.w	#$18,$12(a0)
00019074 6000                       		bra.s	loc_1857A
00019076                            ; ===========================================================================
00019076                            
00019076                            loc_18544:
00019076 4268 0012                  		clr.w	$12(a0)
0001907A 4268 003C                  		clr.w	$3C(a0)
0001907E 6000                       		bra.s	loc_1857A
00019080                            ; ===========================================================================
00019080                            
00019080                            loc_1854E:
00019080 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
00019086 6500                       		bcs.s	loc_18566
00019088 6700                       		beq.s	loc_1856C
0001908A 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
00019090 6500                       		bcs.s	loc_1857A
00019092 5428 0025                  		addq.b	#2,$25(a0)
00019096 6000                       		bra.s	loc_1857A
00019098                            ; ===========================================================================
00019098                            
00019098                            loc_18566:
00019098 5168 0012                  		subq.w	#8,$12(a0)
0001909C 6000                       		bra.s	loc_1857A
0001909E                            ; ===========================================================================
0001909E                            
0001909E                            loc_1856C:
0001909E 4268 0012                  		clr.w	$12(a0)
000190A2 303C 0083                  		move.w	#$83,d0
000190A6 4EB9 0000 1594             		jsr	(PlaySound).l	; play MZ music
000190AC                            
000190AC                            loc_1857A:
000190AC 6100 F350                  		bsr.w	BossMove
000190B0 6000 FDC0                  		bra.w	loc_1833E
000190B4                            ; ===========================================================================
000190B4                            
000190B4                            loc_18582:				; XREF: Obj73_ShipIndex
000190B4 317C 0500 0010             		move.w	#$500,$10(a0)
000190BA 317C FFC0 0012             		move.w	#-$40,$12(a0)
000190C0 0C78 1960 F72A             		cmpi.w	#$1960,($FFFFF72A).w
000190C6 6400                       		bcc.s	loc_1859C
000190C8 5478 F72A                  		addq.w	#2,($FFFFF72A).w
000190CC 6000                       		bra.s	loc_185A2
000190CE                            ; ===========================================================================
000190CE                            
000190CE                            loc_1859C:
000190CE 4A28 0001                  		tst.b	1(a0)
000190D2 6A00                       		bpl.s	Obj73_ShipDel
000190D4                            
000190D4                            loc_185A2:
000190D4 6100 F328                  		bsr.w	BossMove
000190D8 6000 FD98                  		bra.w	loc_1833E
000190DC                            ; ===========================================================================
000190DC                            
000190DC                            Obj73_ShipDel:
000190DC 4EF9 0000 E080             		jmp	DeleteObject
000190E2                            ; ===========================================================================
000190E2                            
000190E2                            Obj73_FaceMain:				; XREF: Obj73_Index
000190E2 7000                       		moveq	#0,d0
000190E4 7201                       		moveq	#1,d1
000190E6 2268 0034                  		movea.l	$34(a0),a1
000190EA 1029 0025                  		move.b	$25(a1),d0
000190EE 5540                       		subq.w	#2,d0
000190F0 6600                       		bne.s	loc_185D2
000190F2 0829 0001 0028             		btst	#1,$28(a1)
000190F8 6700                       		beq.s	loc_185DA
000190FA 4A69 0012                  		tst.w	$12(a1)
000190FE 6600                       		bne.s	loc_185DA
00019100 7204                       		moveq	#4,d1
00019102 6000                       		bra.s	loc_185EE
00019104                            ; ===========================================================================
00019104                            
00019104                            loc_185D2:
00019104 5500                       		subq.b	#2,d0
00019106 6B00                       		bmi.s	loc_185DA
00019108 720A                       		moveq	#$A,d1
0001910A 6000                       		bra.s	loc_185EE
0001910C                            ; ===========================================================================
0001910C                            
0001910C                            loc_185DA:
0001910C 4A29 0020                  		tst.b	$20(a1)
00019110 6600                       		bne.s	loc_185E4
00019112 7205                       		moveq	#5,d1
00019114 6000                       		bra.s	loc_185EE
00019116                            ; ===========================================================================
00019116                            
00019116                            loc_185E4:
00019116 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0001911C 6500                       		bcs.s	loc_185EE
0001911E 7204                       		moveq	#4,d1
00019120                            
00019120                            loc_185EE:
00019120 1141 001C                  		move.b	d1,$1C(a0)
00019124 5900                       		subq.b	#4,d0
00019126 6600                       		bne.s	loc_18602
00019128 117C 0006 001C             		move.b	#6,$1C(a0)
0001912E 4A28 0001                  		tst.b	1(a0)
00019132 6A00                       		bpl.s	Obj73_FaceDel
00019134                            
00019134                            loc_18602:
00019134 6000                       		bra.s	Obj73_Display
00019136                            ; ===========================================================================
00019136                            
00019136                            Obj73_FaceDel:
00019136 4EF9 0000 E080             		jmp	DeleteObject
0001913C                            ; ===========================================================================
0001913C                            
0001913C                            Obj73_FlameMain:			; XREF: Obj73_Index
0001913C 117C 0007 001C             		move.b	#7,$1C(a0)
00019142 2268 0034                  		movea.l	$34(a0),a1
00019146 0C29 0008 0025             		cmpi.b	#8,$25(a1)
0001914C 6D00                       		blt.s	loc_1862A
0001914E 117C 000B 001C             		move.b	#$B,$1C(a0)
00019154 4A28 0001                  		tst.b	1(a0)
00019158 6A00                       		bpl.s	Obj73_FlameDel
0001915A 6000                       		bra.s	loc_18636
0001915C                            ; ===========================================================================
0001915C                            
0001915C                            loc_1862A:
0001915C 4A69 0010                  		tst.w	$10(a1)
00019160 6700                       		beq.s	loc_18636
00019162 117C 0008 001C             		move.b	#8,$1C(a0)
00019168                            
00019168                            loc_18636:
00019168 6000                       		bra.s	Obj73_Display
0001916A                            ; ===========================================================================
0001916A                            
0001916A                            Obj73_FlameDel:				; XREF: Obj73_FlameMain
0001916A 4EF9 0000 E080             		jmp	DeleteObject
00019170                            ; ===========================================================================
00019170                            
00019170                            Obj73_Display:
00019170 43F9 0001 8840             		lea	(Ani_Eggman).l,a1
00019176 4EB9 0000 B09A             		jsr	AnimateSprite
0001917C                            
0001917C                            loc_1864A:
0001917C 2268 0034                  		movea.l	$34(a0),a1
00019180 3169 0008 0008             		move.w	8(a1),8(a0)
00019186 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001918C 1169 0022 0022             		move.b	$22(a1),$22(a0)
00019192 7003                       		moveq	#3,d0
00019194 C028 0022                  		and.b	$22(a0),d0
00019198 0228 00FC 0001             		andi.b	#-4,1(a0)
0001919E 8128 0001                  		or.b	d0,1(a0)
000191A2 4EF9 0000 E044             		jmp	DisplaySprite
000191A8                            ; ===========================================================================
000191A8                            
000191A8                            Obj73_TubeMain:				; XREF: Obj73_Index
000191A8 2268 0034                  		movea.l	$34(a0),a1
000191AC 0C29 0008 0025             		cmpi.b	#8,$25(a1)
000191B2 6600                       		bne.s	loc_18688
000191B4 4A28 0001                  		tst.b	1(a0)
000191B8 6A00                       		bpl.s	Obj73_TubeDel
000191BA                            
000191BA                            loc_18688:
000191BA 217C 0001 896C 0004        		move.l	#Map_BossItems,4(a0)
000191C2 317C 246C 0002             		move.w	#$246C,2(a0)
000191C8 117C 0004 001A             		move.b	#4,$1A(a0)
000191CE 60AC                       		bra.s	loc_1864A
000191D0                            ; ===========================================================================
000191D0                            
000191D0                            Obj73_TubeDel:
000191D0 4EF9 0000 E080             		jmp	DeleteObject
000191D6                            ; ===========================================================================
000191D6                            ; ---------------------------------------------------------------------------
000191D6                            ; Object 74 - lava that	Eggman drops (MZ)
000191D6                            ; ---------------------------------------------------------------------------
000191D6                            
000191D6                            Obj74:					; XREF: Obj_Index
000191D6 7000                       		moveq	#0,d0
000191D8 1028 0024                  		move.b	$24(a0),d0
000191DC 303B 0000                  		move.w	Obj74_Index(pc,d0.w),d0
000191E0 4EBB 0000                  		jsr	Obj74_Index(pc,d0.w)
000191E4 4EF9 0000 E044             		jmp	DisplaySprite
000191EA                            ; ===========================================================================
000191EA 0000                       Obj74_Index:	dc.w Obj74_Main-Obj74_Index
000191EC 0000                       		dc.w Obj74_Action-Obj74_Index
000191EE 0000                       		dc.w loc_18886-Obj74_Index
000191F0 0000                       		dc.w Obj74_Delete3-Obj74_Index
000191F2                            ; ===========================================================================
000191F2                            
000191F2                            Obj74_Main:				; XREF: Obj74_Index
000191F2 117C 0008 0016             		move.b	#8,$16(a0)
000191F8 117C 0008 0017             		move.b	#8,$17(a0)
000191FE 217C 0000 BC98 0004        		move.l	#Map_obj14,4(a0)
00019206 317C 0345 0002             		move.w	#$345,2(a0)
0001920C 117C 0004 0001             		move.b	#4,1(a0)
00019212 117C 0005 0018             		move.b	#5,$18(a0)
00019218 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001921E 117C 0008 0019             		move.b	#8,$19(a0)
00019224 5428 0024                  		addq.b	#2,$24(a0)
00019228 4A28 0028                  		tst.b	$28(a0)
0001922C 6600                       		bne.s	loc_1870A
0001922E 117C 008B 0020             		move.b	#$8B,$20(a0)
00019234 5428 0024                  		addq.b	#2,$24(a0)
00019238 6000 0000                  		bra.w	loc_18886
0001923C                            ; ===========================================================================
0001923C                            
0001923C                            loc_1870A:
0001923C 117C 001E 0029             		move.b	#$1E,$29(a0)
00019242 303C 00AE                  		move.w	#$AE,d0
00019246 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play lava sound
0001924C                            
0001924C                            Obj74_Action:				; XREF: Obj74_Index
0001924C 7000                       		moveq	#0,d0
0001924E 1028 0025                  		move.b	$25(a0),d0
00019252 303B 0000                  		move.w	Obj74_Index2(pc,d0.w),d0
00019256 4EBB 0000                  		jsr	Obj74_Index2(pc,d0.w)
0001925A 4EB9 0000 E01E             		jsr	SpeedToPos
00019260 43F9 0000 EEFE             		lea	(Ani_obj14).l,a1
00019266 4EB9 0000 B09A             		jsr	AnimateSprite
0001926C 0C68 02E8 000C             		cmpi.w	#$2E8,$C(a0)
00019272 6200                       		bhi.s	Obj74_Delete
00019274 4E75                       		rts	
00019276                            ; ===========================================================================
00019276                            
00019276                            Obj74_Delete:
00019276 4EF9 0000 E080             		jmp	DeleteObject
0001927C                            ; ===========================================================================
0001927C 0000                       Obj74_Index2:	dc.w Obj74_Drop-Obj74_Index2
0001927E 0000                       		dc.w Obj74_MakeFlame-Obj74_Index2
00019280 0000                       		dc.w Obj74_Duplicate-Obj74_Index2
00019282 0000                       		dc.w Obj74_FallEdge-Obj74_Index2
00019284                            ; ===========================================================================
00019284                            
00019284                            Obj74_Drop:				; XREF: Obj74_Index2
00019284 08E8 0001 0022             		bset	#1,$22(a0)
0001928A 5328 0029                  		subq.b	#1,$29(a0)
0001928E 6A00                       		bpl.s	locret_18780
00019290 117C 008B 0020             		move.b	#$8B,$20(a0)
00019296 4228 0028                  		clr.b	$28(a0)
0001929A 0668 0018 0012             		addi.w	#$18,$12(a0)
000192A0 08A8 0001 0022             		bclr	#1,$22(a0)
000192A6 6100 C6A8                  		bsr.w	ObjHitFloor
000192AA 4A41                       		tst.w	d1
000192AC 6A00                       		bpl.s	locret_18780
000192AE 5428 0025                  		addq.b	#2,$25(a0)
000192B2                            
000192B2                            locret_18780:
000192B2 4E75                       		rts	
000192B4                            ; ===========================================================================
000192B4                            
000192B4                            Obj74_MakeFlame:			; XREF: Obj74_Index2
000192B4 5568 000C                  		subq.w	#2,$C(a0)
000192B8 08E8 0007 0002             		bset	#7,2(a0)
000192BE 317C 00A0 0010             		move.w	#$A0,$10(a0)
000192C4 4268 0012                  		clr.w	$12(a0)
000192C8 3168 0008 0030             		move.w	8(a0),$30(a0)
000192CE 3168 000C 0038             		move.w	$C(a0),$38(a0)
000192D4 117C 0003 0029             		move.b	#3,$29(a0)
000192DA 4EB9 0000 E4E0             		jsr	SingleObjLoad2
000192E0 6600                       		bne.s	loc_187CA
000192E2 47D1                       		lea	(a1),a3
000192E4 45D0                       		lea	(a0),a2
000192E6 7003                       		moveq	#3,d0
000192E8                            
000192E8                            Obj74_Loop:
000192E8 26DA                       		move.l	(a2)+,(a3)+
000192EA 26DA                       		move.l	(a2)+,(a3)+
000192EC 26DA                       		move.l	(a2)+,(a3)+
000192EE 26DA                       		move.l	(a2)+,(a3)+
000192F0 51C8 FFF6                  		dbf	d0,Obj74_Loop
000192F4                            
000192F4 4469 0010                  		neg.w	$10(a1)
000192F8 5429 0025                  		addq.b	#2,$25(a1)
000192FC                            
000192FC                            loc_187CA:
000192FC 5428 0025                  		addq.b	#2,$25(a0)
00019300 4E75                       		rts	
00019302                            
00019302                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019302                            
00019302                            
00019302                            Obj74_Duplicate2:			; XREF: Obj74_Duplicate
00019302 4EB9 0000 E4E0             		jsr	SingleObjLoad2
00019308 6600                       		bne.s	locret_187EE
0001930A 3368 0008 0008             		move.w	8(a0),8(a1)
00019310 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019316 12BC 0074                  		move.b	#$74,(a1)
0001931A 337C 0067 0028             		move.w	#$67,$28(a1)
00019320                            
00019320                            locret_187EE:
00019320 4E75                       		rts	
00019322                            ; End of function Obj74_Duplicate2
00019322                            
00019322                            ; ===========================================================================
00019322                            
00019322                            Obj74_Duplicate:			; XREF: Obj74_Index2
00019322 6100 C62C                  		bsr.w	ObjHitFloor
00019326 4A41                       		tst.w	d1
00019328 6A00                       		bpl.s	loc_18826
0001932A 3028 0008                  		move.w	8(a0),d0
0001932E 0C40 1940                  		cmpi.w	#$1940,d0
00019332 6E00                       		bgt.s	loc_1882C
00019334 3228 0030                  		move.w	$30(a0),d1
00019338 B240                       		cmp.w	d0,d1
0001933A 6700                       		beq.s	loc_1881E
0001933C 0240 0010                  		andi.w	#$10,d0
00019340 0241 0010                  		andi.w	#$10,d1
00019344 B240                       		cmp.w	d0,d1
00019346 6700                       		beq.s	loc_1881E
00019348 61B8                       		bsr.s	Obj74_Duplicate2
0001934A 3168 0008 0032             		move.w	8(a0),$32(a0)
00019350                            
00019350                            loc_1881E:
00019350 3168 0008 0030             		move.w	8(a0),$30(a0)
00019356 4E75                       		rts	
00019358                            ; ===========================================================================
00019358                            
00019358                            loc_18826:
00019358 5428 0025                  		addq.b	#2,$25(a0)
0001935C 4E75                       		rts	
0001935E                            ; ===========================================================================
0001935E                            
0001935E                            loc_1882C:
0001935E 5428 0024                  		addq.b	#2,$24(a0)
00019362 4E75                       		rts	
00019364                            ; ===========================================================================
00019364                            
00019364                            Obj74_FallEdge:				; XREF: Obj74_Index2
00019364 08A8 0001 0022             		bclr	#1,$22(a0)
0001936A 0668 0024 0012             		addi.w	#$24,$12(a0)	; make flame fall
00019370 3028 0008                  		move.w	8(a0),d0
00019374 9068 0032                  		sub.w	$32(a0),d0
00019378 6A00                       		bpl.s	loc_1884A
0001937A 4440                       		neg.w	d0
0001937C                            
0001937C                            loc_1884A:
0001937C 0C40 0012                  		cmpi.w	#$12,d0
00019380 6600                       		bne.s	loc_18856
00019382 08A8 0007 0002             		bclr	#7,2(a0)
00019388                            
00019388                            loc_18856:
00019388 6100 C5C6                  		bsr.w	ObjHitFloor
0001938C 4A41                       		tst.w	d1
0001938E 6A00                       		bpl.s	locret_1887E
00019390 5328 0029                  		subq.b	#1,$29(a0)
00019394 6700                       		beq.s	Obj74_Delete2
00019396 4268 0012                  		clr.w	$12(a0)
0001939A 3168 0032 0008             		move.w	$32(a0),8(a0)
000193A0 3168 0038 000C             		move.w	$38(a0),$C(a0)
000193A6 08E8 0007 0002             		bset	#7,2(a0)
000193AC 5528 0025                  		subq.b	#2,$25(a0)
000193B0                            
000193B0                            locret_1887E:
000193B0 4E75                       		rts	
000193B2                            ; ===========================================================================
000193B2                            
000193B2                            Obj74_Delete2:
000193B2 4EF9 0000 E080             		jmp	DeleteObject
000193B8                            ; ===========================================================================
000193B8                            
000193B8                            loc_18886:				; XREF: Obj74_Index
000193B8 08E8 0007 0002             		bset	#7,2(a0)
000193BE 5328 0029                  		subq.b	#1,$29(a0)
000193C2 6600                       		bne.s	Obj74_Animate
000193C4 117C 0001 001C             		move.b	#1,$1C(a0)
000193CA 5968 000C                  		subq.w	#4,$C(a0)
000193CE 4228 0020                  		clr.b	$20(a0)
000193D2                            
000193D2                            Obj74_Animate:
000193D2 43F9 0000 EEFE             		lea	(Ani_obj14).l,a1
000193D8 4EF9 0000 B09A             		jmp	AnimateSprite
000193DE                            ; ===========================================================================
000193DE                            
000193DE                            Obj74_Delete3:				; XREF: Obj74_Index
000193DE 4EF9 0000 E080             		jmp	DeleteObject
000193E4                            ; ===========================================================================
000193E4                            
000193E4                            Obj7A_Delete:
000193E4 4EF9 0000 E080             		jmp	DeleteObject
000193EA                            ; ===========================================================================
000193EA                            ; ---------------------------------------------------------------------------
000193EA                            ; Object 7A - Eggman (SLZ)
000193EA                            ; ---------------------------------------------------------------------------
000193EA                            
000193EA                            Obj7A:					; XREF: Obj_Index
000193EA 7000                       		moveq	#0,d0
000193EC 1028 0024                  		move.b	$24(a0),d0
000193F0 323B 0000                  		move.w	Obj7A_Index(pc,d0.w),d1
000193F4 4EFB 1000                  		jmp	Obj7A_Index(pc,d1.w)
000193F8                            ; ===========================================================================
000193F8 0000                       Obj7A_Index:	dc.w Obj7A_Main-Obj7A_Index
000193FA 0000                       		dc.w Obj7A_ShipMain-Obj7A_Index
000193FC 0000                       		dc.w Obj7A_FaceMain-Obj7A_Index
000193FE 0000                       		dc.w Obj7A_FlameMain-Obj7A_Index
00019400 0000                       		dc.w Obj7A_TubeMain-Obj7A_Index
00019402                            
00019402 0200 04                    Obj7A_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
00019405 0401 04                    		dc.b 4,	1, 4
00019408 0607 04                    		dc.b 6,	7, 4
0001940B 0800 03                    		dc.b 8,	0, 3
0001940E                            ; ===========================================================================
0001940E                            
0001940E                            Obj7A_Main:				; XREF: Obj7A_Index
0001940E 317C 2188 0008             		move.w	#$2188,8(a0)
00019414 317C 0228 000C             		move.w	#$228,$C(a0)
0001941A 3168 0008 0030             		move.w	8(a0),$30(a0)
00019420 3168 000C 0038             		move.w	$C(a0),$38(a0)
00019426 117C 000F 0020             		move.b	#$F,$20(a0)
0001942C 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00019432 45FA FFCE                  		lea	Obj7A_ObjData(pc),a2
00019436 2248                       		movea.l	a0,a1
00019438 7203                       		moveq	#3,d1
0001943A 6000                       		bra.s	Obj7A_LoadBoss
0001943C                            ; ===========================================================================
0001943C                            
0001943C                            Obj7A_Loop:
0001943C 4EB9 0000 E4E0             		jsr	SingleObjLoad2
00019442 6600                       		bne.s	loc_1895C
00019444 12BC 007A                  		move.b	#$7A,0(a1)
00019448 3368 0008 0008             		move.w	8(a0),8(a1)
0001944E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019454                            
00019454                            Obj7A_LoadBoss:				; XREF: Obj7A_Main
00019454 08A8 0000 0022             		bclr	#0,$22(a0)
0001945A 4229 0025                  		clr.b	$25(a1)
0001945E 135A 0024                  		move.b	(a2)+,$24(a1)
00019462 135A 001C                  		move.b	(a2)+,$1C(a1)
00019466 135A 0018                  		move.b	(a2)+,$18(a1)
0001946A 237C 0001 88A4 0004        		move.l	#Map_Eggman,4(a1)
00019472 337C 0400 0002             		move.w	#$400,2(a1)
00019478 137C 0004 0001             		move.b	#4,1(a1)
0001947E 137C 0020 0019             		move.b	#$20,$19(a1)
00019484 2348 0034                  		move.l	a0,$34(a1)
00019488 51C9 FFB2                  		dbf	d1,Obj7A_Loop	; repeat sequence 3 more times
0001948C                            
0001948C                            loc_1895C:
0001948C 43F8 D040                  		lea	($FFFFD040).w,a1
00019490 45E8 002A                  		lea	$2A(a0),a2
00019494 705E                       		moveq	#$5E,d0
00019496 723E                       		moveq	#$3E,d1
00019498                            
00019498                            loc_18968:
00019498 B011                       		cmp.b	(a1),d0
0001949A 6600                       		bne.s	loc_18974
0001949C 4A29 0028                  		tst.b	$28(a1)
000194A0 6700                       		beq.s	loc_18974
000194A2 34C9                       		move.w	a1,(a2)+
000194A4                            
000194A4                            loc_18974:
000194A4 D2FC 0040                  		adda.w	#$40,a1
000194A8 51C9 FFEE                  		dbf	d1,loc_18968
000194AC                            
000194AC                            Obj7A_ShipMain:				; XREF: Obj7A_Index
000194AC 7000                       		moveq	#0,d0
000194AE 1028 0025                  		move.b	$25(a0),d0
000194B2 303B 0000                  		move.w	Obj7A_ShipIndex(pc,d0.w),d0
000194B6 4EBB 0000                  		jsr	Obj7A_ShipIndex(pc,d0.w)
000194BA 43F9 0001 8840             		lea	(Ani_Eggman).l,a1
000194C0 4EB9 0000 B09A             		jsr	AnimateSprite
000194C6 7003                       		moveq	#3,d0
000194C8 C028 0022                  		and.b	$22(a0),d0
000194CC 0228 00FC 0001             		andi.b	#$FC,1(a0)
000194D2 8128 0001                  		or.b	d0,1(a0)
000194D6 4EF9 0000 E044             		jmp	DisplaySprite
000194DC                            ; ===========================================================================
000194DC 0000                       Obj7A_ShipIndex:dc.w loc_189B8-Obj7A_ShipIndex
000194DE 0000                       		dc.w loc_18A5E-Obj7A_ShipIndex
000194E0 0000                       		dc.w Obj7A_MakeBall-Obj7A_ShipIndex
000194E2 0000                       		dc.w loc_18B48-Obj7A_ShipIndex
000194E4 0000                       		dc.w loc_18B80-Obj7A_ShipIndex
000194E6 0000                       		dc.w loc_18BC6-Obj7A_ShipIndex
000194E8                            ; ===========================================================================
000194E8                            
000194E8                            loc_189B8:				; XREF: Obj7A_ShipIndex
000194E8 317C FF00 0010             		move.w	#-$100,$10(a0)
000194EE 0C68 2120 0030             		cmpi.w	#$2120,$30(a0)
000194F4 6400                       		bcc.s	loc_189CA
000194F6 5428 0025                  		addq.b	#2,$25(a0)
000194FA                            
000194FA                            loc_189CA:
000194FA 6100 EF02                  		bsr.w	BossMove
000194FE 1028 003F                  		move.b	$3F(a0),d0
00019502 5428 003F                  		addq.b	#2,$3F(a0)
00019506 4EB9 0000 2D34             		jsr	(CalcSine).l
0001950C EC40                       		asr.w	#6,d0
0001950E D068 0038                  		add.w	$38(a0),d0
00019512 3140 000C                  		move.w	d0,$C(a0)
00019516 3168 0030 0008             		move.w	$30(a0),8(a0)
0001951C 6000                       		bra.s	loc_189FE
0001951E                            ; ===========================================================================
0001951E                            
0001951E                            loc_189EE:
0001951E 6100 EEDE                  		bsr.w	BossMove
00019522 3168 0038 000C             		move.w	$38(a0),$C(a0)
00019528 3168 0030 0008             		move.w	$30(a0),8(a0)
0001952E                            
0001952E                            loc_189FE:
0001952E 0C28 0006 0025             		cmpi.b	#6,$25(a0)
00019534 6400                       		bcc.s	locret_18A44
00019536 4A28 0022                  		tst.b	$22(a0)
0001953A 6B00                       		bmi.s	loc_18A46
0001953C 4A28 0020                  		tst.b	$20(a0)
00019540 6600                       		bne.s	locret_18A44
00019542 4A28 003E                  		tst.b	$3E(a0)
00019546 6600                       		bne.s	loc_18A28
00019548 117C 0020 003E             		move.b	#$20,$3E(a0)
0001954E 303C 00AC                  		move.w	#$AC,d0
00019552 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play boss damage sound
00019558                            
00019558                            loc_18A28:
00019558 43F8 FB22                  		lea	($FFFFFB22).w,a1
0001955C 7000                       		moveq	#0,d0
0001955E 4A51                       		tst.w	(a1)
00019560 6600                       		bne.s	loc_18A36
00019562 303C 0EEE                  		move.w	#$EEE,d0
00019566                            
00019566                            loc_18A36:
00019566 3280                       		move.w	d0,(a1)
00019568 5328 003E                  		subq.b	#1,$3E(a0)
0001956C 6600                       		bne.s	locret_18A44
0001956E 117C 000F 0020             		move.b	#$F,$20(a0)
00019574                            
00019574                            locret_18A44:
00019574 4E75                       		rts	
00019576                            ; ===========================================================================
00019576                            
00019576                            loc_18A46:
00019576 7064                       		moveq	#100,d0
00019578 6100 0000                  		bsr.w	AddPoints
0001957C 117C 0006 0025             		move.b	#6,$25(a0)
00019582 117C 0078 003C             		move.b	#$78,$3C(a0)
00019588 4268 0010                  		clr.w	$10(a0)
0001958C 4E75                       		rts	
0001958E                            ; ===========================================================================
0001958E                            
0001958E                            loc_18A5E:				; XREF: Obj7A_ShipIndex
0001958E 3028 0030                  		move.w	$30(a0),d0
00019592 317C 0200 0010             		move.w	#$200,$10(a0)
00019598 0828 0000 0022             		btst	#0,$22(a0)
0001959E 6600                       		bne.s	loc_18A7C
000195A0 4468 0010                  		neg.w	$10(a0)
000195A4 0C40 2008                  		cmpi.w	#$2008,d0
000195A8 6E00                       		bgt.s	loc_18A88
000195AA 6000                       		bra.s	loc_18A82
000195AC                            ; ===========================================================================
000195AC                            
000195AC                            loc_18A7C:
000195AC 0C40 2138                  		cmpi.w	#$2138,d0
000195B0 6D00                       		blt.s	loc_18A88
000195B2                            
000195B2                            loc_18A82:
000195B2 0868 0000 0022             		bchg	#0,$22(a0)
000195B8                            
000195B8                            loc_18A88:
000195B8 3028 0008                  		move.w	8(a0),d0
000195BC 72FF                       		moveq	#-1,d1
000195BE 7402                       		moveq	#2,d2
000195C0 45E8 002A                  		lea	$2A(a0),a2
000195C4 7828                       		moveq	#$28,d4
000195C6 4A68 0010                  		tst.w	$10(a0)
000195CA 6A00                       		bpl.s	loc_18A9E
000195CC 4444                       		neg.w	d4
000195CE                            
000195CE                            loc_18A9E:
000195CE 321A                       		move.w	(a2)+,d1
000195D0 2641                       		movea.l	d1,a3
000195D2 082B 0003 0022             		btst	#3,$22(a3)
000195D8 6600                       		bne.s	loc_18AB4
000195DA 362B 0008                  		move.w	8(a3),d3
000195DE D644                       		add.w	d4,d3
000195E0 9640                       		sub.w	d0,d3
000195E2 6700                       		beq.s	loc_18AC0
000195E4                            
000195E4                            loc_18AB4:
000195E4 51CA FFE8                  		dbf	d2,loc_18A9E
000195E8                            
000195E8 1142 0028                  		move.b	d2,$28(a0)
000195EC 6000 FF0C                  		bra.w	loc_189CA
000195F0                            ; ===========================================================================
000195F0                            
000195F0                            loc_18AC0:
000195F0 1142 0028                  		move.b	d2,$28(a0)
000195F4 5428 0025                  		addq.b	#2,$25(a0)
000195F8 117C 0028 003C             		move.b	#$28,$3C(a0)
000195FE 6000 FEFA                  		bra.w	loc_189CA
00019602                            ; ===========================================================================
00019602                            
00019602                            Obj7A_MakeBall:				; XREF: Obj7A_ShipIndex
00019602 0C28 0028 003C             		cmpi.b	#$28,$3C(a0)
00019608 6600                       		bne.s	loc_18B36
0001960A 70FF                       		moveq	#-1,d0
0001960C 1028 0028                  		move.b	$28(a0),d0
00019610 4880                       		ext.w	d0
00019612 6B00                       		bmi.s	loc_18B40
00019614 5540                       		subq.w	#2,d0
00019616 4440                       		neg.w	d0
00019618 D040                       		add.w	d0,d0
0001961A 43E8 002A                  		lea	$2A(a0),a1
0001961E 3031 0000                  		move.w	(a1,d0.w),d0
00019622 2440                       		movea.l	d0,a2
00019624 43F8 D040                  		lea	($FFFFD040).w,a1
00019628 723E                       		moveq	#$3E,d1
0001962A                            
0001962A                            loc_18AFA:
0001962A B0A9 003C                  		cmp.l	$3C(a1),d0
0001962E 6700                       		beq.s	loc_18B40
00019630 D2FC 0040                  		adda.w	#$40,a1
00019634 51C9 FFF4                  		dbf	d1,loc_18AFA
00019638                            
00019638 2F08                       		move.l	a0,-(sp)
0001963A 41D2                       		lea	(a2),a0
0001963C 4EB9 0000 E4E0             		jsr	SingleObjLoad2
00019642 205F                       		movea.l	(sp)+,a0
00019644 6600                       		bne.s	loc_18B40
00019646 12BC 007B                  		move.b	#$7B,(a1)	; load spiked ball object
0001964A 3368 0008 0008             		move.w	8(a0),8(a1)
00019650 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019656 0669 0020 000C             		addi.w	#$20,$C(a1)
0001965C 136A 0022 0022             		move.b	$22(a2),$22(a1)
00019662 234A 003C                  		move.l	a2,$3C(a1)
00019666                            
00019666                            loc_18B36:
00019666 5328 003C                  		subq.b	#1,$3C(a0)
0001966A 6700                       		beq.s	loc_18B40
0001966C 6000 FEC0                  		bra.w	loc_189FE
00019670                            ; ===========================================================================
00019670                            
00019670                            loc_18B40:
00019670 5528 0025                  		subq.b	#2,$25(a0)
00019674 6000 FE84                  		bra.w	loc_189CA
00019678                            ; ===========================================================================
00019678                            
00019678                            loc_18B48:				; XREF: Obj7A_ShipIndex
00019678 5328 003C                  		subq.b	#1,$3C(a0)
0001967C 6B00                       		bmi.s	loc_18B52
0001967E 6000 ED3C                  		bra.w	BossDefeated
00019682                            ; ===========================================================================
00019682                            
00019682                            loc_18B52:
00019682 5428 0025                  		addq.b	#2,$25(a0)
00019686 4268 0012                  		clr.w	$12(a0)
0001968A 08E8 0000 0022             		bset	#0,$22(a0)
00019690 08A8 0007 0022             		bclr	#7,$22(a0)
00019696 4268 0010                  		clr.w	$10(a0)
0001969A 117C 00E8 003C             		move.b	#-$18,$3C(a0)
000196A0 4A38 F7A7                  		tst.b	($FFFFF7A7).w
000196A4 6600                       		bne.s	loc_18B7C
000196A6 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
000196AC                            
000196AC                            loc_18B7C:
000196AC 6000 FE80                  		bra.w	loc_189FE
000196B0                            ; ===========================================================================
000196B0                            
000196B0                            loc_18B80:				; XREF: Obj7A_ShipIndex
000196B0 5228 003C                  		addq.b	#1,$3C(a0)
000196B4 6700                       		beq.s	loc_18B90
000196B6 6A00                       		bpl.s	loc_18B96
000196B8 0668 0018 0012             		addi.w	#$18,$12(a0)
000196BE 6000                       		bra.s	loc_18BC2
000196C0                            ; ===========================================================================
000196C0                            
000196C0                            loc_18B90:
000196C0 4268 0012                  		clr.w	$12(a0)
000196C4 6000                       		bra.s	loc_18BC2
000196C6                            ; ===========================================================================
000196C6                            
000196C6                            loc_18B96:
000196C6 0C28 0020 003C             		cmpi.b	#$20,$3C(a0)
000196CC 6500                       		bcs.s	loc_18BAE
000196CE 6700                       		beq.s	loc_18BB4
000196D0 0C28 002A 003C             		cmpi.b	#$2A,$3C(a0)
000196D6 6500                       		bcs.s	loc_18BC2
000196D8 5428 0025                  		addq.b	#2,$25(a0)
000196DC 6000                       		bra.s	loc_18BC2
000196DE                            ; ===========================================================================
000196DE                            
000196DE                            loc_18BAE:
000196DE 5168 0012                  		subq.w	#8,$12(a0)
000196E2 6000                       		bra.s	loc_18BC2
000196E4                            ; ===========================================================================
000196E4                            
000196E4                            loc_18BB4:
000196E4 4268 0012                  		clr.w	$12(a0)
000196E8 303C 0084                  		move.w	#$84,d0
000196EC 4EB9 0000 1594             		jsr	(PlaySound).l	; play SLZ music
000196F2                            
000196F2                            loc_18BC2:
000196F2 6000 FE2A                  		bra.w	loc_189EE
000196F6                            ; ===========================================================================
000196F6                            
000196F6                            loc_18BC6:				; XREF: Obj7A_ShipIndex
000196F6 317C 0400 0010             		move.w	#$400,$10(a0)
000196FC 317C FFC0 0012             		move.w	#-$40,$12(a0)
00019702 0C78 2160 F72A             		cmpi.w	#$2160,($FFFFF72A).w
00019708 6400                       		bcc.s	loc_18BE0
0001970A 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001970E 6000                       		bra.s	loc_18BE8
00019710                            ; ===========================================================================
00019710                            
00019710                            loc_18BE0:
00019710 4A28 0001                  		tst.b	1(a0)
00019714 6A00 FCCE                  		bpl.w	Obj7A_Delete
00019718                            
00019718                            loc_18BE8:
00019718 6100 ECE4                  		bsr.w	BossMove
0001971C 6000 FDDC                  		bra.w	loc_189CA
00019720                            ; ===========================================================================
00019720                            
00019720                            Obj7A_FaceMain:				; XREF: Obj7A_Index
00019720 7000                       		moveq	#0,d0
00019722 7201                       		moveq	#1,d1
00019724 2268 0034                  		movea.l	$34(a0),a1
00019728 1029 0025                  		move.b	$25(a1),d0
0001972C 0C00 0006                  		cmpi.b	#6,d0
00019730 6B00                       		bmi.s	loc_18C06
00019732 720A                       		moveq	#$A,d1
00019734 6000                       		bra.s	loc_18C1A
00019736                            ; ===========================================================================
00019736                            
00019736                            loc_18C06:
00019736 4A29 0020                  		tst.b	$20(a1)
0001973A 6600                       		bne.s	loc_18C10
0001973C 7205                       		moveq	#5,d1
0001973E 6000                       		bra.s	loc_18C1A
00019740                            ; ===========================================================================
00019740                            
00019740                            loc_18C10:
00019740 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00019746 6500                       		bcs.s	loc_18C1A
00019748 7204                       		moveq	#4,d1
0001974A                            
0001974A                            loc_18C1A:
0001974A 1141 001C                  		move.b	d1,$1C(a0)
0001974E 0C00 000A                  		cmpi.b	#$A,d0
00019752 6600                       		bne.s	loc_18C32
00019754 117C 0006 001C             		move.b	#6,$1C(a0)
0001975A 4A28 0001                  		tst.b	1(a0)
0001975E 6A00 FC84                  		bpl.w	Obj7A_Delete
00019762                            
00019762                            loc_18C32:
00019762 6000                       		bra.s	loc_18C6C
00019764                            ; ===========================================================================
00019764                            
00019764                            Obj7A_FlameMain:			; XREF: Obj7A_Index
00019764 117C 0008 001C             		move.b	#8,$1C(a0)
0001976A 2268 0034                  		movea.l	$34(a0),a1
0001976E 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
00019774 6600                       		bne.s	loc_18C56
00019776 4A28 0001                  		tst.b	1(a0)
0001977A 6A00 FC68                  		bpl.w	Obj7A_Delete
0001977E 117C 000B 001C             		move.b	#$B,$1C(a0)
00019784 6000                       		bra.s	loc_18C6C
00019786                            ; ===========================================================================
00019786                            
00019786                            loc_18C56:
00019786 0C29 0008 0025             		cmpi.b	#8,$25(a1)
0001978C 6E00                       		bgt.s	loc_18C6C
0001978E 0C29 0004 0025             		cmpi.b	#4,$25(a1)
00019794 6D00                       		blt.s	loc_18C6C
00019796 117C 0007 001C             		move.b	#7,$1C(a0)
0001979C                            
0001979C                            loc_18C6C:
0001979C 43F9 0001 8840             		lea	(Ani_Eggman).l,a1
000197A2 4EB9 0000 B09A             		jsr	AnimateSprite
000197A8                            
000197A8                            loc_18C78:
000197A8 2268 0034                  		movea.l	$34(a0),a1
000197AC 3169 0008 0008             		move.w	8(a1),8(a0)
000197B2 3169 000C 000C             		move.w	$C(a1),$C(a0)
000197B8 1169 0022 0022             		move.b	$22(a1),$22(a0)
000197BE 7003                       		moveq	#3,d0
000197C0 C028 0022                  		and.b	$22(a0),d0
000197C4 0228 00FC 0001             		andi.b	#-4,1(a0)
000197CA 8128 0001                  		or.b	d0,1(a0)
000197CE 4EF9 0000 E044             		jmp	DisplaySprite
000197D4                            ; ===========================================================================
000197D4                            
000197D4                            Obj7A_TubeMain:				; XREF: Obj7A_Index
000197D4 2268 0034                  		movea.l	$34(a0),a1
000197D8 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
000197DE 6600                       		bne.s	loc_18CB8
000197E0 4A28 0001                  		tst.b	1(a0)
000197E4 6A00 FBFE                  		bpl.w	Obj7A_Delete
000197E8                            
000197E8                            loc_18CB8:
000197E8 217C 0001 896C 0004        		move.l	#Map_BossItems,4(a0)
000197F0 317C 246C 0002             		move.w	#$246C,2(a0)
000197F6 117C 0003 001A             		move.b	#3,$1A(a0)
000197FC 60AA                       		bra.s	loc_18C78
000197FE                            ; ===========================================================================
000197FE                            ; ---------------------------------------------------------------------------
000197FE                            ; Object 7B - exploding	spikeys	that Eggman drops (SLZ)
000197FE                            ; ---------------------------------------------------------------------------
000197FE                            
000197FE                            Obj7B:					; XREF: Obj_Index
000197FE 7000                       		moveq	#0,d0
00019800 1028 0024                  		move.b	$24(a0),d0
00019804 303B 0000                  		move.w	Obj7B_Index(pc,d0.w),d0
00019808 4EBB 0000                  		jsr	Obj7B_Index(pc,d0.w)
0001980C 3028 0030                  		move.w	$30(a0),d0
00019810 0240 FF80                  		andi.w	#$FF80,d0
00019814 3238 F700                  		move.w	($FFFFF700).w,d1
00019818 0441 0080                  		subi.w	#$80,d1
0001981C 0241 FF80                  		andi.w	#$FF80,d1
00019820 9041                       		sub.w	d1,d0
00019822 6B00 FBC0                  		bmi.w	Obj7A_Delete
00019826 0C40 0280                  		cmpi.w	#$280,d0
0001982A 6200 FBB8                  		bhi.w	Obj7A_Delete
0001982E 4EF9 0000 E044             		jmp	DisplaySprite
00019834                            ; ===========================================================================
00019834 0000                       Obj7B_Index:	dc.w Obj7B_Main-Obj7B_Index
00019836 0000                       		dc.w Obj7B_Fall-Obj7B_Index
00019838 0000                       		dc.w loc_18DC6-Obj7B_Index
0001983A 0000                       		dc.w loc_18EAA-Obj7B_Index
0001983C 0000                       		dc.w Obj7B_Explode-Obj7B_Index
0001983E 0000                       		dc.w Obj7B_MoveFrag-Obj7B_Index
00019840                            ; ===========================================================================
00019840                            
00019840                            Obj7B_Main:				; XREF: Obj7B_Index
00019840 217C 0001 2410 0004        		move.l	#Map_obj5Ea,4(a0)
00019848 317C 0518 0002             		move.w	#$518,2(a0)
0001984E 117C 0001 001A             		move.b	#1,$1A(a0)
00019854 0028 0004 0001             		ori.b	#4,1(a0)
0001985A 117C 0004 0018             		move.b	#4,$18(a0)
00019860 117C 008B 0020             		move.b	#$8B,$20(a0)
00019866 117C 000C 0019             		move.b	#$C,$19(a0)
0001986C 2268 003C                  		movea.l	$3C(a0),a1
00019870 3169 0008 0030             		move.w	8(a1),$30(a0)
00019876 3169 000C 0034             		move.w	$C(a1),$34(a0)
0001987C 08E8 0000 0022             		bset	#0,$22(a0)
00019882 3028 0008                  		move.w	8(a0),d0
00019886 B069 0008                  		cmp.w	8(a1),d0
0001988A 6E00                       		bgt.s	loc_18D68
0001988C 08A8 0000 0022             		bclr	#0,$22(a0)
00019892 117C 0002 003A             		move.b	#2,$3A(a0)
00019898                            
00019898                            loc_18D68:
00019898 5428 0024                  		addq.b	#2,$24(a0)
0001989C                            
0001989C                            Obj7B_Fall:				; XREF: Obj7B_Index
0001989C 4EB9 0000 DFAC             		jsr	ObjectFall
000198A2 2268 003C                  		movea.l	$3C(a0),a1
000198A6 45F9 0000 0000             		lea	(word_19018).l,a2
000198AC 7000                       		moveq	#0,d0
000198AE 1029 001A                  		move.b	$1A(a1),d0
000198B2 3228 0008                  		move.w	8(a0),d1
000198B6 9268 0030                  		sub.w	$30(a0),d1
000198BA 6400                       		bcc.s	loc_18D8E
000198BC 5440                       		addq.w	#2,d0
000198BE                            
000198BE                            loc_18D8E:
000198BE D040                       		add.w	d0,d0
000198C0 3228 0034                  		move.w	$34(a0),d1
000198C4 D272 0000                  		add.w	(a2,d0.w),d1
000198C8 B268 000C                  		cmp.w	$C(a0),d1
000198CC 6E00                       		bgt.s	locret_18DC4
000198CE 2268 003C                  		movea.l	$3C(a0),a1
000198D2 7202                       		moveq	#2,d1
000198D4 0828 0000 0022             		btst	#0,$22(a0)
000198DA 6700                       		beq.s	loc_18DAE
000198DC 7200                       		moveq	#0,d1
000198DE                            
000198DE                            loc_18DAE:
000198DE 317C 00F0 0028             		move.w	#$F0,$28(a0)
000198E4 117C 000A 001F             		move.b	#10,$1F(a0)	; set frame duration to	10 frames
000198EA 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
000198F0 6000 0000                  		bra.w	loc_18FA2
000198F4                            ; ===========================================================================
000198F4                            
000198F4                            locret_18DC4:
000198F4 4E75                       		rts	
000198F6                            ; ===========================================================================
000198F6                            
000198F6                            loc_18DC6:				; XREF: Obj7B_Index
000198F6 2268 003C                  		movea.l	$3C(a0),a1
000198FA 7000                       		moveq	#0,d0
000198FC 1028 003A                  		move.b	$3A(a0),d0
00019900 9029 003A                  		sub.b	$3A(a1),d0
00019904 6700                       		beq.s	loc_18E2A
00019906 6400                       		bcc.s	loc_18DDA
00019908 4400                       		neg.b	d0
0001990A                            
0001990A                            loc_18DDA:
0001990A 323C F7E8                  		move.w	#-$818,d1
0001990E 343C FEEC                  		move.w	#-$114,d2
00019912 0C00 0001                  		cmpi.b	#1,d0
00019916 6700                       		beq.s	loc_18E00
00019918 323C F6A0                  		move.w	#-$960,d1
0001991C 343C FF0C                  		move.w	#-$F4,d2
00019920 0C69 09C0 0038             		cmpi.w	#$9C0,$38(a1)
00019926 6D00                       		blt.s	loc_18E00
00019928 323C F5E0                  		move.w	#-$A20,d1
0001992C 343C FF80                  		move.w	#-$80,d2
00019930                            
00019930                            loc_18E00:
00019930 3141 0012                  		move.w	d1,$12(a0)
00019934 3142 0010                  		move.w	d2,$10(a0)
00019938 3028 0008                  		move.w	8(a0),d0
0001993C 9068 0030                  		sub.w	$30(a0),d0
00019940 6400                       		bcc.s	loc_18E16
00019942 4468 0010                  		neg.w	$10(a0)
00019946                            
00019946                            loc_18E16:
00019946 117C 0001 001A             		move.b	#1,$1A(a0)
0001994C 317C 0020 0028             		move.w	#$20,$28(a0)
00019952 5428 0024                  		addq.b	#2,$24(a0)
00019956 6000 0000                  		bra.w	loc_18EAA
0001995A                            ; ===========================================================================
0001995A                            
0001995A                            loc_18E2A:				; XREF: loc_18DC6
0001995A 45F9 0000 0000             		lea	(word_19018).l,a2
00019960 7000                       		moveq	#0,d0
00019962 1029 001A                  		move.b	$1A(a1),d0
00019966 343C 0028                  		move.w	#$28,d2
0001996A 3228 0008                  		move.w	8(a0),d1
0001996E 9268 0030                  		sub.w	$30(a0),d1
00019972 6400                       		bcc.s	loc_18E48
00019974 4442                       		neg.w	d2
00019976 5440                       		addq.w	#2,d0
00019978                            
00019978                            loc_18E48:
00019978 D040                       		add.w	d0,d0
0001997A 3228 0034                  		move.w	$34(a0),d1
0001997E D272 0000                  		add.w	(a2,d0.w),d1
00019982 3141 000C                  		move.w	d1,$C(a0)
00019986 D468 0030                  		add.w	$30(a0),d2
0001998A 3142 0008                  		move.w	d2,8(a0)
0001998E 4268 000E                  		clr.w	$E(a0)
00019992 4268 000A                  		clr.w	$A(a0)
00019996 5368 0028                  		subq.w	#1,$28(a0)
0001999A 6600                       		bne.s	loc_18E7A
0001999C 317C 0020 0028             		move.w	#$20,$28(a0)
000199A2 117C 0008 0024             		move.b	#8,$24(a0)
000199A8 4E75                       		rts	
000199AA                            ; ===========================================================================
000199AA                            
000199AA                            loc_18E7A:
000199AA 0C68 0078 0028             		cmpi.w	#$78,$28(a0)
000199B0 6600                       		bne.s	loc_18E88
000199B2 117C 0005 001F             		move.b	#5,$1F(a0)
000199B8                            
000199B8                            loc_18E88:
000199B8 0C68 003C 0028             		cmpi.w	#$3C,$28(a0)
000199BE 6600                       		bne.s	loc_18E96
000199C0 117C 0002 001F             		move.b	#2,$1F(a0)
000199C6                            
000199C6                            loc_18E96:
000199C6 5328 001E                  		subq.b	#1,$1E(a0)
000199CA 6E00                       		bgt.s	locret_18EA8
000199CC 0868 0000 001A             		bchg	#0,$1A(a0)
000199D2 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
000199D8                            
000199D8                            locret_18EA8:
000199D8 4E75                       		rts	
000199DA                            ; ===========================================================================
000199DA                            
000199DA                            loc_18EAA:				; XREF: Obj7B_Index
000199DA 43F8 D040                  		lea	($FFFFD040).w,a1
000199DE 707A                       		moveq	#$7A,d0
000199E0 7240                       		moveq	#$40,d1
000199E2 743E                       		moveq	#$3E,d2
000199E4                            
000199E4                            loc_18EB4:
000199E4 B011                       		cmp.b	(a1),d0
000199E6 6700                       		beq.s	loc_18EC0
000199E8 D2C1                       		adda.w	d1,a1
000199EA 51CA FFF8                  		dbf	d2,loc_18EB4
000199EE                            
000199EE 6000                       		bra.s	loc_18F38
000199F0                            ; ===========================================================================
000199F0                            
000199F0                            loc_18EC0:
000199F0 3029 0008                  		move.w	8(a1),d0
000199F4 3229 000C                  		move.w	$C(a1),d1
000199F8 3428 0008                  		move.w	8(a0),d2
000199FC 3628 000C                  		move.w	$C(a0),d3
00019A00 45FA 0000                  		lea	byte_19022(pc),a2
00019A04 47FA 0000                  		lea	byte_19026(pc),a3
00019A08 181A                       		move.b	(a2)+,d4
00019A0A 4884                       		ext.w	d4
00019A0C D044                       		add.w	d4,d0
00019A0E 181B                       		move.b	(a3)+,d4
00019A10 4884                       		ext.w	d4
00019A12 D444                       		add.w	d4,d2
00019A14 B440                       		cmp.w	d0,d2
00019A16 6500                       		bcs.s	loc_18F38
00019A18 181A                       		move.b	(a2)+,d4
00019A1A 4884                       		ext.w	d4
00019A1C D044                       		add.w	d4,d0
00019A1E 181B                       		move.b	(a3)+,d4
00019A20 4884                       		ext.w	d4
00019A22 D444                       		add.w	d4,d2
00019A24 B042                       		cmp.w	d2,d0
00019A26 6500                       		bcs.s	loc_18F38
00019A28 181A                       		move.b	(a2)+,d4
00019A2A 4884                       		ext.w	d4
00019A2C D244                       		add.w	d4,d1
00019A2E 181B                       		move.b	(a3)+,d4
00019A30 4884                       		ext.w	d4
00019A32 D644                       		add.w	d4,d3
00019A34 B641                       		cmp.w	d1,d3
00019A36 6500                       		bcs.s	loc_18F38
00019A38 181A                       		move.b	(a2)+,d4
00019A3A 4884                       		ext.w	d4
00019A3C D244                       		add.w	d4,d1
00019A3E 181B                       		move.b	(a3)+,d4
00019A40 4884                       		ext.w	d4
00019A42 D644                       		add.w	d4,d3
00019A44 B243                       		cmp.w	d3,d1
00019A46 6500                       		bcs.s	loc_18F38
00019A48 5428 0024                  		addq.b	#2,$24(a0)
00019A4C 4268 0028                  		clr.w	$28(a0)
00019A50 4229 0020                  		clr.b	$20(a1)
00019A54 5329 0021                  		subq.b	#1,$21(a1)
00019A58 6600                       		bne.s	loc_18F38
00019A5A 08E9 0007 0022             		bset	#7,$22(a1)
00019A60 4268 0010                  		clr.w	$10(a0)
00019A64 4268 0012                  		clr.w	$12(a0)
00019A68                            
00019A68                            loc_18F38:
00019A68 4A68 0012                  		tst.w	$12(a0)
00019A6C 6A00                       		bpl.s	loc_18F5C
00019A6E 4EB9 0000 DFAC             		jsr	ObjectFall
00019A74 3028 0034                  		move.w	$34(a0),d0
00019A78 0440 002F                  		subi.w	#$2F,d0
00019A7C B068 000C                  		cmp.w	$C(a0),d0
00019A80 6E00                       		bgt.s	loc_18F58
00019A82 4EB9 0000 DFAC             		jsr	ObjectFall
00019A88                            
00019A88                            loc_18F58:
00019A88 6000 FF20                  		bra.w	loc_18E7A
00019A8C                            ; ===========================================================================
00019A8C                            
00019A8C                            loc_18F5C:
00019A8C 4EB9 0000 DFAC             		jsr	ObjectFall
00019A92 2268 003C                  		movea.l	$3C(a0),a1
00019A96 45F9 0000 0000             		lea	(word_19018).l,a2
00019A9C 7000                       		moveq	#0,d0
00019A9E 1029 001A                  		move.b	$1A(a1),d0
00019AA2 3228 0008                  		move.w	8(a0),d1
00019AA6 9268 0030                  		sub.w	$30(a0),d1
00019AAA 6400                       		bcc.s	loc_18F7E
00019AAC 5440                       		addq.w	#2,d0
00019AAE                            
00019AAE                            loc_18F7E:
00019AAE D040                       		add.w	d0,d0
00019AB0 3228 0034                  		move.w	$34(a0),d1
00019AB4 D272 0000                  		add.w	(a2,d0.w),d1
00019AB8 B268 000C                  		cmp.w	$C(a0),d1
00019ABC 6ECA                       		bgt.s	loc_18F58
00019ABE 2268 003C                  		movea.l	$3C(a0),a1
00019AC2 7202                       		moveq	#2,d1
00019AC4 4A68 0010                  		tst.w	$10(a0)
00019AC8 6B00                       		bmi.s	loc_18F9C
00019ACA 7200                       		moveq	#0,d1
00019ACC                            
00019ACC                            loc_18F9C:
00019ACC 317C 0000 0028             		move.w	#0,$28(a0)
00019AD2                            
00019AD2                            loc_18FA2:
00019AD2 1341 003A                  		move.b	d1,$3A(a1)
00019AD6 1141 003A                  		move.b	d1,$3A(a0)
00019ADA B229 001A                  		cmp.b	$1A(a1),d1
00019ADE 6700                       		beq.s	loc_19008
00019AE0 08A9 0003 0022             		bclr	#3,$22(a1)
00019AE6 6700                       		beq.s	loc_19008
00019AE8 4229 0025                  		clr.b	$25(a1)
00019AEC 137C 0002 0024             		move.b	#2,$24(a1)
00019AF2 45F8 D000                  		lea	($FFFFD000).w,a2
00019AF6 3568 0012 0012             		move.w	$12(a0),$12(a2)
00019AFC 446A 0012                  		neg.w	$12(a2)
00019B00 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
00019B06 6600                       		bne.s	loc_18FDC
00019B08 E0EA 0012                  		asr	$12(a2)
00019B0C                            
00019B0C                            loc_18FDC:
00019B0C 08EA 0001 0022             		bset	#1,$22(a2)
00019B12 08AA 0003 0022             		bclr	#3,$22(a2)
00019B18 422A 003C                  		clr.b	$3C(a2)
00019B1C 2F08                       		move.l	a0,-(sp)
00019B1E 41D2                       		lea	(a2),a0
00019B20 4EBA A370                  		jsr	Obj01_ChkRoll
00019B24 205F                       		movea.l	(sp)+,a0
00019B26 157C 0002 0024             		move.b	#2,$24(a2)
00019B2C 303C 00CC                  		move.w	#$CC,d0
00019B30 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play "spring" sound
00019B36                            
00019B36                            loc_19008:
00019B36 4268 0010                  		clr.w	$10(a0)
00019B3A 4268 0012                  		clr.w	$12(a0)
00019B3E 5428 0024                  		addq.b	#2,$24(a0)
00019B42 6000 FE66                  		bra.w	loc_18E7A
00019B46                            ; ===========================================================================
00019B46 FFF8 FFE4 FFD1 FFE4 FFF8   word_19018:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
00019B50                            		even
00019B50 E830 E830                  byte_19022:	dc.b $E8, $30, $E8, $30
00019B54                            		even
00019B54 08F0 08F0                  byte_19026:	dc.b 8,	$F0, 8,	$F0
00019B58                            		even
00019B58                            ; ===========================================================================
00019B58                            
00019B58                            Obj7B_Explode:				; XREF: Obj7B_Index
00019B58 10BC 003F                  		move.b	#$3F,(a0)
00019B5C 4228 0024                  		clr.b	$24(a0)
00019B60 0C68 0020 0028             		cmpi.w	#$20,$28(a0)
00019B66 6700                       		beq.s	Obj7B_MakeFrag
00019B68 4E75                       		rts	
00019B6A                            ; ===========================================================================
00019B6A                            
00019B6A                            Obj7B_MakeFrag:
00019B6A 3168 0034 000C             		move.w	$34(a0),$C(a0)
00019B70 7203                       		moveq	#3,d1
00019B72 45FA 0000                  		lea	Obj7B_FragSpeed(pc),a2
00019B76                            
00019B76                            Obj7B_Loop:
00019B76 4EB9 0000 E4CA             		jsr	SingleObjLoad
00019B7C 6600                       		bne.s	loc_1909A
00019B7E 12BC 007B                  		move.b	#$7B,(a1)	; load shrapnel	object
00019B82 137C 000A 0024             		move.b	#$A,$24(a1)
00019B88 237C 0000 0000 0004        		move.l	#Map_obj7B,4(a1)
00019B90 137C 0003 0018             		move.b	#3,$18(a1)
00019B96 337C 0518 0002             		move.w	#$518,2(a1)
00019B9C 3368 0008 0008             		move.w	8(a0),8(a1)
00019BA2 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019BA8 335A 0010                  		move.w	(a2)+,$10(a1)
00019BAC 335A 0012                  		move.w	(a2)+,$12(a1)
00019BB0 137C 0098 0020             		move.b	#$98,$20(a1)
00019BB6 0029 0004 0001             		ori.b	#4,1(a1)
00019BBC 08E9 0007 0001             		bset	#7,1(a1)
00019BC2 137C 000C 0019             		move.b	#$C,$19(a1)
00019BC8                            
00019BC8                            loc_1909A:
00019BC8 51C9 FFAC                  		dbf	d1,Obj7B_Loop	; repeat sequence 3 more times
00019BCC                            
00019BCC 4E75                       		rts	
00019BCE                            ; ===========================================================================
00019BCE FF00 FCC0                  Obj7B_FragSpeed:dc.w $FF00, $FCC0	; horizontal, vertical
00019BD2 FF60 FDC0                  		dc.w $FF60, $FDC0
00019BD6 0100 FCC0                  		dc.w $100, $FCC0
00019BDA 00A0 FDC0                  		dc.w $A0, $FDC0
00019BDE                            ; ===========================================================================
00019BDE                            
00019BDE                            Obj7B_MoveFrag:				; XREF: Obj7B_Index
00019BDE 4EB9 0000 E01E             		jsr	SpeedToPos
00019BE4 3168 0008 0030             		move.w	8(a0),$30(a0)
00019BEA 3168 000C 0034             		move.w	$C(a0),$34(a0)
00019BF0 0668 0018 0012             		addi.w	#$18,$12(a0)
00019BF6 7004                       		moveq	#4,d0
00019BF8 C078 FE0E                  		and.w	($FFFFFE0E).w,d0
00019BFC E448                       		lsr.w	#2,d0
00019BFE 1140 001A                  		move.b	d0,$1A(a0)
00019C02 4A28 0001                  		tst.b	1(a0)
00019C06 6A00 F7DC                  		bpl.w	Obj7A_Delete
00019C0A 4E75                       		rts	
00019C0C                            ; ===========================================================================
00019C0C                            ; ---------------------------------------------------------------------------
00019C0C                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
00019C0C                            ; ---------------------------------------------------------------------------
00019C0C                            Map_obj7B:
00019C0C                            	include "_maps\obj7B.asm"
00019C0C                            ; ---------------------------------------------------------------------------
00019C0C                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
00019C0C                            ; ---------------------------------------------------------------------------
00019C0C 0000                       		dc.w byte_190E2-Map_obj7B
00019C0E 0000                       		dc.w byte_190E8-Map_obj7B
00019C10 01                         byte_190E2:	dc.b 1
00019C11 FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
00019C16 01                         byte_190E8:	dc.b 1
00019C17 FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
00019C1C                            		even
00019C1C                            		even
00019C1C                            
00019C1C                            ; ===========================================================================
00019C1C                            ; ---------------------------------------------------------------------------
00019C1C                            ; Object 75 - Eggman (SYZ)
00019C1C                            ; ---------------------------------------------------------------------------
00019C1C                            
00019C1C                            Obj75:					; XREF: Obj_Index
00019C1C 7000                       		moveq	#0,d0
00019C1E 1028 0024                  		move.b	$24(a0),d0
00019C22 323B 0000                  		move.w	Obj75_Index(pc,d0.w),d1
00019C26 4EFB 1000                  		jmp	Obj75_Index(pc,d1.w)
00019C2A                            ; ===========================================================================
00019C2A 0000                       Obj75_Index:	dc.w Obj75_Main-Obj75_Index
00019C2C 0000                       		dc.w Obj75_ShipMain-Obj75_Index
00019C2E 0000                       		dc.w Obj75_FaceMain-Obj75_Index
00019C30 0000                       		dc.w Obj75_FlameMain-Obj75_Index
00019C32 0000                       		dc.w Obj75_SpikeMain-Obj75_Index
00019C34                            
00019C34 0200 05                    Obj75_ObjData:	dc.b 2,	0, 5		; routine number, animation, priority
00019C37 0401 05                    		dc.b 4,	1, 5
00019C3A 0607 05                    		dc.b 6,	7, 5
00019C3D 0800 05                    		dc.b 8,	0, 5
00019C40                            ; ===========================================================================
00019C40                            
00019C40                            Obj75_Main:				; XREF: Obj75_Index
00019C40 317C 2DB0 0008             		move.w	#$2DB0,8(a0)
00019C46 317C 04DA 000C             		move.w	#$4DA,$C(a0)
00019C4C 3168 0008 0030             		move.w	8(a0),$30(a0)
00019C52 3168 000C 0038             		move.w	$C(a0),$38(a0)
00019C58 117C 000F 0020             		move.b	#$F,$20(a0)
00019C5E 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00019C64 45FA FFCE                  		lea	Obj75_ObjData(pc),a2
00019C68 2248                       		movea.l	a0,a1
00019C6A 7203                       		moveq	#3,d1
00019C6C 6000                       		bra.s	Obj75_LoadBoss
00019C6E                            ; ===========================================================================
00019C6E                            
00019C6E                            Obj75_Loop:
00019C6E 4EB9 0000 E4E0             		jsr	SingleObjLoad2
00019C74 6600                       		bne.s	Obj75_ShipMain
00019C76 12BC 0075                  		move.b	#$75,(a1)
00019C7A 3368 0008 0008             		move.w	8(a0),8(a1)
00019C80 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019C86                            
00019C86                            Obj75_LoadBoss:				; XREF: Obj75_Main
00019C86 08A8 0000 0022             		bclr	#0,$22(a0)
00019C8C 4229 0025                  		clr.b	$25(a1)
00019C90 135A 0024                  		move.b	(a2)+,$24(a1)
00019C94 135A 001C                  		move.b	(a2)+,$1C(a1)
00019C98 135A 0018                  		move.b	(a2)+,$18(a1)
00019C9C 237C 0001 88A4 0004        		move.l	#Map_Eggman,4(a1)
00019CA4 337C 0400 0002             		move.w	#$400,2(a1)
00019CAA 137C 0004 0001             		move.b	#4,1(a1)
00019CB0 137C 0020 0019             		move.b	#$20,$19(a1)
00019CB6 2348 0034                  		move.l	a0,$34(a1)
00019CBA 51C9 FFB2                  		dbf	d1,Obj75_Loop	; repeat sequence 3 more times
00019CBE                            
00019CBE                            Obj75_ShipMain:				; XREF: Obj75_Index
00019CBE 7000                       		moveq	#0,d0
00019CC0 1028 0025                  		move.b	$25(a0),d0
00019CC4 323B 0000                  		move.w	Obj75_ShipIndex(pc,d0.w),d1
00019CC8 4EBB 1000                  		jsr	Obj75_ShipIndex(pc,d1.w)
00019CCC 43F9 0001 8840             		lea	(Ani_Eggman).l,a1
00019CD2 4EB9 0000 B09A             		jsr	AnimateSprite
00019CD8 7003                       		moveq	#3,d0
00019CDA C028 0022                  		and.b	$22(a0),d0
00019CDE 0228 00FC 0001             		andi.b	#$FC,1(a0)
00019CE4 8128 0001                  		or.b	d0,1(a0)
00019CE8 4EF9 0000 E044             		jmp	DisplaySprite
00019CEE                            ; ===========================================================================
00019CEE 0000 0000                  Obj75_ShipIndex:dc.w loc_191CC-Obj75_ShipIndex,	loc_19270-Obj75_ShipIndex
00019CF2 0000 0000                  		dc.w loc_192EC-Obj75_ShipIndex,	loc_19474-Obj75_ShipIndex
00019CF6 0000 0000                  		dc.w loc_194AC-Obj75_ShipIndex,	loc_194F2-Obj75_ShipIndex
00019CFA                            ; ===========================================================================
00019CFA                            
00019CFA                            loc_191CC:				; XREF: Obj75_ShipIndex
00019CFA 317C FF00 0010             		move.w	#-$100,$10(a0)
00019D00 0C68 2D38 0030             		cmpi.w	#$2D38,$30(a0)
00019D06 6400                       		bcc.s	loc_191DE
00019D08 5428 0025                  		addq.b	#2,$25(a0)
00019D0C                            
00019D0C                            loc_191DE:
00019D0C 1028 003F                  		move.b	$3F(a0),d0
00019D10 5428 003F                  		addq.b	#2,$3F(a0)
00019D14 4EB9 0000 2D34             		jsr	(CalcSine).l
00019D1A E440                       		asr.w	#2,d0
00019D1C 3140 0012                  		move.w	d0,$12(a0)
00019D20                            
00019D20                            loc_191F2:
00019D20 6100 E6DC                  		bsr.w	BossMove
00019D24 3168 0038 000C             		move.w	$38(a0),$C(a0)
00019D2A 3168 0030 0008             		move.w	$30(a0),8(a0)
00019D30                            
00019D30                            loc_19202:
00019D30 3028 0008                  		move.w	8(a0),d0
00019D34 0440 2C00                  		subi.w	#$2C00,d0
00019D38 EA48                       		lsr.w	#5,d0
00019D3A 1140 0034                  		move.b	d0,$34(a0)
00019D3E 0C28 0006 0025             		cmpi.b	#6,$25(a0)
00019D44 6400                       		bcc.s	locret_19256
00019D46 4A28 0022                  		tst.b	$22(a0)
00019D4A 6B00                       		bmi.s	loc_19258
00019D4C 4A28 0020                  		tst.b	$20(a0)
00019D50 6600                       		bne.s	locret_19256
00019D52 4A28 003E                  		tst.b	$3E(a0)
00019D56 6600                       		bne.s	loc_1923A
00019D58 117C 0020 003E             		move.b	#$20,$3E(a0)
00019D5E 303C 00AC                  		move.w	#$AC,d0
00019D62 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play boss damage sound
00019D68                            
00019D68                            loc_1923A:
00019D68 43F8 FB22                  		lea	($FFFFFB22).w,a1
00019D6C 7000                       		moveq	#0,d0
00019D6E 4A51                       		tst.w	(a1)
00019D70 6600                       		bne.s	loc_19248
00019D72 303C 0EEE                  		move.w	#$EEE,d0
00019D76                            
00019D76                            loc_19248:
00019D76 3280                       		move.w	d0,(a1)
00019D78 5328 003E                  		subq.b	#1,$3E(a0)
00019D7C 6600                       		bne.s	locret_19256
00019D7E 117C 000F 0020             		move.b	#$F,$20(a0)
00019D84                            
00019D84                            locret_19256:
00019D84 4E75                       		rts	
00019D86                            ; ===========================================================================
00019D86                            
00019D86                            loc_19258:				; XREF: loc_19202
00019D86 7064                       		moveq	#100,d0
00019D88 6100 0000                  		bsr.w	AddPoints
00019D8C 117C 0006 0025             		move.b	#6,$25(a0)
00019D92 317C 00B4 003C             		move.w	#$B4,$3C(a0)
00019D98 4268 0010                  		clr.w	$10(a0)
00019D9C 4E75                       		rts	
00019D9E                            ; ===========================================================================
00019D9E                            
00019D9E                            loc_19270:				; XREF: Obj75_ShipIndex
00019D9E 3028 0030                  		move.w	$30(a0),d0
00019DA2 317C 0140 0010             		move.w	#$140,$10(a0)
00019DA8 0828 0000 0022             		btst	#0,$22(a0)
00019DAE 6600                       		bne.s	loc_1928E
00019DB0 4468 0010                  		neg.w	$10(a0)
00019DB4 0C40 2C08                  		cmpi.w	#$2C08,d0
00019DB8 6E00                       		bgt.s	loc_1929E
00019DBA 6000                       		bra.s	loc_19294
00019DBC                            ; ===========================================================================
00019DBC                            
00019DBC                            loc_1928E:
00019DBC 0C40 2D38                  		cmpi.w	#$2D38,d0
00019DC0 6D00                       		blt.s	loc_1929E
00019DC2                            
00019DC2                            loc_19294:
00019DC2 0868 0000 0022             		bchg	#0,$22(a0)
00019DC8 4228 003D                  		clr.b	$3D(a0)
00019DCC                            
00019DCC                            loc_1929E:
00019DCC 0440 2C10                  		subi.w	#$2C10,d0
00019DD0 0240 001F                  		andi.w	#$1F,d0
00019DD4 0440 001F                  		subi.w	#$1F,d0
00019DD8 6A00                       		bpl.s	loc_192AE
00019DDA 4440                       		neg.w	d0
00019DDC                            
00019DDC                            loc_192AE:
00019DDC 5340                       		subq.w	#1,d0
00019DDE 6E00                       		bgt.s	loc_192E8
00019DE0 4A28 003D                  		tst.b	$3D(a0)
00019DE4 6600                       		bne.s	loc_192E8
00019DE6 3238 D008                  		move.w	($FFFFD008).w,d1
00019DEA 0441 2C00                  		subi.w	#$2C00,d1
00019DEE EA41                       		asr.w	#5,d1
00019DF0 B228 0034                  		cmp.b	$34(a0),d1
00019DF4 6600                       		bne.s	loc_192E8
00019DF6 7000                       		moveq	#0,d0
00019DF8 1028 0034                  		move.b	$34(a0),d0
00019DFC EB40                       		asl.w	#5,d0
00019DFE 0640 2C10                  		addi.w	#$2C10,d0
00019E02 3140 0030                  		move.w	d0,$30(a0)
00019E06 6100 0000                  		bsr.w	Obj75_FindBlocks
00019E0A 5428 0025                  		addq.b	#2,$25(a0)
00019E0E 4268 0028                  		clr.w	$28(a0)
00019E12 4268 0010                  		clr.w	$10(a0)
00019E16                            
00019E16                            loc_192E8:
00019E16 6000 FEF4                  		bra.w	loc_191DE
00019E1A                            ; ===========================================================================
00019E1A                            
00019E1A                            loc_192EC:				; XREF: Obj75_ShipIndex
00019E1A 7000                       		moveq	#0,d0
00019E1C 1028 0028                  		move.b	$28(a0),d0
00019E20 303B 0000                  		move.w	off_192FA(pc,d0.w),d0
00019E24 4EFB 0000                  		jmp	off_192FA(pc,d0.w)
00019E28                            ; ===========================================================================
00019E28 0000                       off_192FA:	dc.w loc_19302-off_192FA
00019E2A 0000                       		dc.w loc_19348-off_192FA
00019E2C 0000                       		dc.w loc_1938E-off_192FA
00019E2E 0000                       		dc.w loc_193D0-off_192FA
00019E30                            ; ===========================================================================
00019E30                            
00019E30                            loc_19302:				; XREF: off_192FA
00019E30 317C 0180 0012             		move.w	#$180,$12(a0)
00019E36 3028 0038                  		move.w	$38(a0),d0
00019E3A 0C40 0556                  		cmpi.w	#$556,d0
00019E3E 6500                       		bcs.s	loc_19344
00019E40 317C 0556 0038             		move.w	#$556,$38(a0)
00019E46 4268 003C                  		clr.w	$3C(a0)
00019E4A 70FF                       		moveq	#-1,d0
00019E4C 3028 0036                  		move.w	$36(a0),d0
00019E50 6700                       		beq.s	loc_1933C
00019E52 2240                       		movea.l	d0,a1
00019E54 137C 00FF 0029             		move.b	#-1,$29(a1)
00019E5A 117C 00FF 0029             		move.b	#-1,$29(a0)
00019E60 2348 0034                  		move.l	a0,$34(a1)
00019E64 317C 0032 003C             		move.w	#$32,$3C(a0)
00019E6A                            
00019E6A                            loc_1933C:
00019E6A 4268 0012                  		clr.w	$12(a0)
00019E6E 5428 0028                  		addq.b	#2,$28(a0)
00019E72                            
00019E72                            loc_19344:
00019E72 6000 FEAC                  		bra.w	loc_191F2
00019E76                            ; ===========================================================================
00019E76                            
00019E76                            loc_19348:				; XREF: off_192FA
00019E76 5368 003C                  		subq.w	#1,$3C(a0)
00019E7A 6A00                       		bpl.s	loc_19366
00019E7C 5428 0028                  		addq.b	#2,$28(a0)
00019E80 317C F800 0012             		move.w	#-$800,$12(a0)
00019E86 4A68 0036                  		tst.w	$36(a0)
00019E8A 6600                       		bne.s	loc_19362
00019E8C E0E8 0012                  		asr	$12(a0)
00019E90                            
00019E90                            loc_19362:
00019E90 7000                       		moveq	#0,d0
00019E92 6000                       		bra.s	loc_1937C
00019E94                            ; ===========================================================================
00019E94                            
00019E94                            loc_19366:
00019E94 7000                       		moveq	#0,d0
00019E96 0C68 001E 003C             		cmpi.w	#$1E,$3C(a0)
00019E9C 6E00                       		bgt.s	loc_1937C
00019E9E 7002                       		moveq	#2,d0
00019EA0 0828 0001 003D             		btst	#1,$3D(a0)
00019EA6 6700                       		beq.s	loc_1937C
00019EA8 4440                       		neg.w	d0
00019EAA                            
00019EAA                            loc_1937C:
00019EAA D068 0038                  		add.w	$38(a0),d0
00019EAE 3140 000C                  		move.w	d0,$C(a0)
00019EB2 3168 0030 0008             		move.w	$30(a0),8(a0)
00019EB8 6000 FE76                  		bra.w	loc_19202
00019EBC                            ; ===========================================================================
00019EBC                            
00019EBC                            loc_1938E:				; XREF: off_192FA
00019EBC 303C 04DA                  		move.w	#$4DA,d0
00019EC0 4A68 0036                  		tst.w	$36(a0)
00019EC4 6700                       		beq.s	loc_1939C
00019EC6 0440 0018                  		subi.w	#$18,d0
00019ECA                            
00019ECA                            loc_1939C:
00019ECA B068 0038                  		cmp.w	$38(a0),d0
00019ECE 6D00                       		blt.s	loc_193BE
00019ED0 317C 0008 003C             		move.w	#8,$3C(a0)
00019ED6 4A68 0036                  		tst.w	$36(a0)
00019EDA 6700                       		beq.s	loc_193B4
00019EDC 317C 002D 003C             		move.w	#$2D,$3C(a0)
00019EE2                            
00019EE2                            loc_193B4:
00019EE2 5428 0028                  		addq.b	#2,$28(a0)
00019EE6 4268 0012                  		clr.w	$12(a0)
00019EEA 6000                       		bra.s	loc_193CC
00019EEC                            ; ===========================================================================
00019EEC                            
00019EEC                            loc_193BE:
00019EEC 0C68 FFC0 0012             		cmpi.w	#-$40,$12(a0)
00019EF2 6C00                       		bge.s	loc_193CC
00019EF4 0668 000C 0012             		addi.w	#$C,$12(a0)
00019EFA                            
00019EFA                            loc_193CC:
00019EFA 6000 FE24                  		bra.w	loc_191F2
00019EFE                            ; ===========================================================================
00019EFE                            
00019EFE                            loc_193D0:				; XREF: off_192FA
00019EFE 5368 003C                  		subq.w	#1,$3C(a0)
00019F02 6E00                       		bgt.s	loc_19406
00019F04 6B00                       		bmi.s	loc_193EE
00019F06 70FF                       		moveq	#-1,d0
00019F08 3028 0036                  		move.w	$36(a0),d0
00019F0C 6700                       		beq.s	loc_193E8
00019F0E 2240                       		movea.l	d0,a1
00019F10 137C 000A 0029             		move.b	#$A,$29(a1)
00019F16                            
00019F16                            loc_193E8:
00019F16 4268 0036                  		clr.w	$36(a0)
00019F1A 6000                       		bra.s	loc_19406
00019F1C                            ; ===========================================================================
00019F1C                            
00019F1C                            loc_193EE:
00019F1C 0C68 FFE2 003C             		cmpi.w	#-$1E,$3C(a0)
00019F22 6600                       		bne.s	loc_19406
00019F24 4228 0029                  		clr.b	$29(a0)
00019F28 5528 0025                  		subq.b	#2,$25(a0)
00019F2C 117C 00FF 003D             		move.b	#-1,$3D(a0)
00019F32 6000                       		bra.s	loc_19446
00019F34                            ; ===========================================================================
00019F34                            
00019F34                            loc_19406:
00019F34 7001                       		moveq	#1,d0
00019F36 4A68 0036                  		tst.w	$36(a0)
00019F3A 6700                       		beq.s	loc_19410
00019F3C 7002                       		moveq	#2,d0
00019F3E                            
00019F3E                            loc_19410:
00019F3E 0C68 04DA 0038             		cmpi.w	#$4DA,$38(a0)
00019F44 6700                       		beq.s	loc_19424
00019F46 6D00                       		blt.s	loc_1941C
00019F48 4440                       		neg.w	d0
00019F4A                            
00019F4A                            loc_1941C:
00019F4A 4A68 0036                  		tst.w	$36(a0)
00019F4E D168 0038                  		add.w	d0,$38(a0)
00019F52                            
00019F52                            loc_19424:
00019F52 7000                       		moveq	#0,d0
00019F54 4A68 0036                  		tst.w	$36(a0)
00019F58 6700                       		beq.s	loc_19438
00019F5A 7002                       		moveq	#2,d0
00019F5C 0828 0000 003D             		btst	#0,$3D(a0)
00019F62 6700                       		beq.s	loc_19438
00019F64 4440                       		neg.w	d0
00019F66                            
00019F66                            loc_19438:
00019F66 D068 0038                  		add.w	$38(a0),d0
00019F6A 3140 000C                  		move.w	d0,$C(a0)
00019F6E 3168 0030 0008             		move.w	$30(a0),8(a0)
00019F74                            
00019F74                            loc_19446:
00019F74 6000 FDBA                  		bra.w	loc_19202
00019F78                            
00019F78                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019F78                            
00019F78                            
00019F78                            Obj75_FindBlocks:			; XREF: loc_192AE
00019F78 4268 0036                  		clr.w	$36(a0)
00019F7C 43F8 D040                  		lea	($FFFFD040).w,a1
00019F80 703E                       		moveq	#$3E,d0
00019F82 7276                       		moveq	#$76,d1
00019F84 1428 0034                  		move.b	$34(a0),d2
00019F88                            
00019F88                            Obj75_FindLoop:
00019F88 B211                       		cmp.b	(a1),d1		; is object a SYZ boss block?
00019F8A 6600                       		bne.s	loc_1946A	; if not, branch
00019F8C B429 0028                  		cmp.b	$28(a1),d2
00019F90 6600                       		bne.s	loc_1946A
00019F92 3149 0036                  		move.w	a1,$36(a0)
00019F96 6000                       		bra.s	locret_19472
00019F98                            ; ===========================================================================
00019F98                            
00019F98                            loc_1946A:
00019F98 43E9 0040                  		lea	$40(a1),a1	; next object RAM entry
00019F9C 51C8 FFEA                  		dbf	d0,Obj75_FindLoop
00019FA0                            
00019FA0                            locret_19472:
00019FA0 4E75                       		rts	
00019FA2                            ; End of function Obj75_FindBlocks
00019FA2                            
00019FA2                            ; ===========================================================================
00019FA2                            
00019FA2                            loc_19474:				; XREF: Obj75_ShipIndex
00019FA2 5368 003C                  		subq.w	#1,$3C(a0)
00019FA6 6B00                       		bmi.s	loc_1947E
00019FA8 6000 E412                  		bra.w	BossDefeated
00019FAC                            ; ===========================================================================
00019FAC                            
00019FAC                            loc_1947E:
00019FAC 5428 0025                  		addq.b	#2,$25(a0)
00019FB0 4268 0012                  		clr.w	$12(a0)
00019FB4 08E8 0000 0022             		bset	#0,$22(a0)
00019FBA 08A8 0007 0022             		bclr	#7,$22(a0)
00019FC0 4268 0010                  		clr.w	$10(a0)
00019FC4 317C FFFF 003C             		move.w	#-1,$3C(a0)
00019FCA 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00019FCE 6600                       		bne.s	loc_194A8
00019FD0 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00019FD6                            
00019FD6                            loc_194A8:
00019FD6 6000 FD58                  		bra.w	loc_19202
00019FDA                            ; ===========================================================================
00019FDA                            
00019FDA                            loc_194AC:				; XREF: Obj75_ShipIndex
00019FDA 5268 003C                  		addq.w	#1,$3C(a0)
00019FDE 6700                       		beq.s	loc_194BC
00019FE0 6A00                       		bpl.s	loc_194C2
00019FE2 0668 0018 0012             		addi.w	#$18,$12(a0)
00019FE8 6000                       		bra.s	loc_194EE
00019FEA                            ; ===========================================================================
00019FEA                            
00019FEA                            loc_194BC:
00019FEA 4268 0012                  		clr.w	$12(a0)
00019FEE 6000                       		bra.s	loc_194EE
00019FF0                            ; ===========================================================================
00019FF0                            
00019FF0                            loc_194C2:
00019FF0 0C68 0020 003C             		cmpi.w	#$20,$3C(a0)
00019FF6 6500                       		bcs.s	loc_194DA
00019FF8 6700                       		beq.s	loc_194E0
00019FFA 0C68 002A 003C             		cmpi.w	#$2A,$3C(a0)
0001A000 6500                       		bcs.s	loc_194EE
0001A002 5428 0025                  		addq.b	#2,$25(a0)
0001A006 6000                       		bra.s	loc_194EE
0001A008                            ; ===========================================================================
0001A008                            
0001A008                            loc_194DA:
0001A008 5168 0012                  		subq.w	#8,$12(a0)
0001A00C 6000                       		bra.s	loc_194EE
0001A00E                            ; ===========================================================================
0001A00E                            
0001A00E                            loc_194E0:
0001A00E 4268 0012                  		clr.w	$12(a0)
0001A012 303C 0085                  		move.w	#$85,d0
0001A016 4EB9 0000 1594             		jsr	(PlaySound).l	; play SYZ music
0001A01C                            
0001A01C                            loc_194EE:
0001A01C 6000 FD02                  		bra.w	loc_191F2
0001A020                            ; ===========================================================================
0001A020                            
0001A020                            loc_194F2:				; XREF: Obj75_ShipIndex
0001A020 317C 0400 0010             		move.w	#$400,$10(a0)
0001A026 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001A02C 0C78 2D40 F72A             		cmpi.w	#$2D40,($FFFFF72A).w
0001A032 6400                       		bcc.s	loc_1950C
0001A034 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001A038 6000                       		bra.s	loc_19512
0001A03A                            ; ===========================================================================
0001A03A                            
0001A03A                            loc_1950C:
0001A03A 4A28 0001                  		tst.b	1(a0)
0001A03E 6A00                       		bpl.s	Obj75_ShipDelete
0001A040                            
0001A040                            loc_19512:
0001A040 6100 E3BC                  		bsr.w	BossMove
0001A044 6000 FCC6                  		bra.w	loc_191DE
0001A048                            ; ===========================================================================
0001A048                            
0001A048                            Obj75_ShipDelete:
0001A048 4EF9 0000 E080             		jmp	DeleteObject
0001A04E                            ; ===========================================================================
0001A04E                            
0001A04E                            Obj75_FaceMain:				; XREF: Obj75_Index
0001A04E 7201                       		moveq	#1,d1
0001A050 2268 0034                  		movea.l	$34(a0),a1
0001A054 7000                       		moveq	#0,d0
0001A056 1029 0025                  		move.b	$25(a1),d0
0001A05A 303B 0000                  		move.w	off_19546(pc,d0.w),d0
0001A05E 4EBB 0000                  		jsr	off_19546(pc,d0.w)
0001A062 1141 001C                  		move.b	d1,$1C(a0)
0001A066 1010                       		move.b	(a0),d0
0001A068 B011                       		cmp.b	(a1),d0
0001A06A 6600                       		bne.s	Obj75_FaceDelete
0001A06C 6000                       		bra.s	loc_195BE
0001A06E                            ; ===========================================================================
0001A06E                            
0001A06E                            Obj75_FaceDelete:
0001A06E 4EF9 0000 E080             		jmp	DeleteObject
0001A074                            ; ===========================================================================
0001A074 0000 0000                  off_19546:	dc.w loc_19574-off_19546, loc_19574-off_19546
0001A078 0000 0000                  		dc.w loc_1955A-off_19546, loc_19552-off_19546
0001A07C 0000 0000                  		dc.w loc_19552-off_19546, loc_19556-off_19546
0001A080                            ; ===========================================================================
0001A080                            
0001A080                            loc_19552:				; XREF: off_19546
0001A080 720A                       		moveq	#$A,d1
0001A082 4E75                       		rts	
0001A084                            ; ===========================================================================
0001A084                            
0001A084                            loc_19556:				; XREF: off_19546
0001A084 7206                       		moveq	#6,d1
0001A086 4E75                       		rts	
0001A088                            ; ===========================================================================
0001A088                            
0001A088                            loc_1955A:				; XREF: off_19546
0001A088 7000                       		moveq	#0,d0
0001A08A 1029 0028                  		move.b	$28(a1),d0
0001A08E 303B 0000                  		move.w	off_19568(pc,d0.w),d0
0001A092 4EFB 0000                  		jmp	off_19568(pc,d0.w)
0001A096                            ; ===========================================================================
0001A096 0000 0000                  off_19568:	dc.w loc_19570-off_19568, loc_19572-off_19568
0001A09A 0000 0000                  		dc.w loc_19570-off_19568, loc_19570-off_19568
0001A09E                            ; ===========================================================================
0001A09E                            
0001A09E                            loc_19570:				; XREF: off_19568
0001A09E 6000                       		bra.s	loc_19574
0001A0A0                            ; ===========================================================================
0001A0A0                            
0001A0A0                            loc_19572:				; XREF: off_19568
0001A0A0 7206                       		moveq	#6,d1
0001A0A2                            
0001A0A2                            loc_19574:				; XREF: off_19546
0001A0A2 4A29 0020                  		tst.b	$20(a1)
0001A0A6 6600                       		bne.s	loc_1957E
0001A0A8 7205                       		moveq	#5,d1
0001A0AA 4E75                       		rts	
0001A0AC                            ; ===========================================================================
0001A0AC                            
0001A0AC                            loc_1957E:
0001A0AC 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0001A0B2 6500                       		bcs.s	locret_19588
0001A0B4 7204                       		moveq	#4,d1
0001A0B6                            
0001A0B6                            locret_19588:
0001A0B6 4E75                       		rts	
0001A0B8                            ; ===========================================================================
0001A0B8                            
0001A0B8                            Obj75_FlameMain:			; XREF: Obj75_Index
0001A0B8 117C 0007 001C             		move.b	#7,$1C(a0)
0001A0BE 2268 0034                  		movea.l	$34(a0),a1
0001A0C2 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001A0C8 6600                       		bne.s	loc_195AA
0001A0CA 117C 000B 001C             		move.b	#$B,$1C(a0)
0001A0D0 4A28 0001                  		tst.b	1(a0)
0001A0D4 6A00                       		bpl.s	Obj75_FlameDelete
0001A0D6 6000                       		bra.s	loc_195B6
0001A0D8                            ; ===========================================================================
0001A0D8                            
0001A0D8                            loc_195AA:
0001A0D8 4A69 0010                  		tst.w	$10(a1)
0001A0DC 6700                       		beq.s	loc_195B6
0001A0DE 117C 0008 001C             		move.b	#8,$1C(a0)
0001A0E4                            
0001A0E4                            loc_195B6:
0001A0E4 6000                       		bra.s	loc_195BE
0001A0E6                            ; ===========================================================================
0001A0E6                            
0001A0E6                            Obj75_FlameDelete:
0001A0E6 4EF9 0000 E080             		jmp	DeleteObject
0001A0EC                            ; ===========================================================================
0001A0EC                            
0001A0EC                            loc_195BE:
0001A0EC 43F9 0001 8840             		lea	(Ani_Eggman).l,a1
0001A0F2 4EB9 0000 B09A             		jsr	AnimateSprite
0001A0F8 2268 0034                  		movea.l	$34(a0),a1
0001A0FC 3169 0008 0008             		move.w	8(a1),8(a0)
0001A102 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001A108                            
0001A108                            loc_195DA:
0001A108 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001A10E 7003                       		moveq	#3,d0
0001A110 C028 0022                  		and.b	$22(a0),d0
0001A114 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001A11A 8128 0001                  		or.b	d0,1(a0)
0001A11E 4EF9 0000 E044             		jmp	DisplaySprite
0001A124                            ; ===========================================================================
0001A124                            
0001A124                            Obj75_SpikeMain:			; XREF: Obj75_Index
0001A124 217C 0001 896C 0004        		move.l	#Map_BossItems,4(a0)
0001A12C 317C 246C 0002             		move.w	#$246C,2(a0)
0001A132 117C 0005 001A             		move.b	#5,$1A(a0)
0001A138 2268 0034                  		movea.l	$34(a0),a1
0001A13C 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001A142 6600                       		bne.s	loc_1961C
0001A144 4A28 0001                  		tst.b	1(a0)
0001A148 6A00                       		bpl.s	Obj75_SpikeDelete
0001A14A                            
0001A14A                            loc_1961C:
0001A14A 3169 0008 0008             		move.w	8(a1),8(a0)
0001A150 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001A156 3028 003C                  		move.w	$3C(a0),d0
0001A15A 0C29 0004 0025             		cmpi.b	#4,$25(a1)
0001A160 6600                       		bne.s	loc_19652
0001A162 0C29 0006 0028             		cmpi.b	#6,$28(a1)
0001A168 6700                       		beq.s	loc_1964C
0001A16A 4A29 0028                  		tst.b	$28(a1)
0001A16E 6600                       		bne.s	loc_19658
0001A170 0C40 0094                  		cmpi.w	#$94,d0
0001A174 6C00                       		bge.s	loc_19658
0001A176 5E40                       		addq.w	#7,d0
0001A178 6000                       		bra.s	loc_19658
0001A17A                            ; ===========================================================================
0001A17A                            
0001A17A                            loc_1964C:
0001A17A 4A69 003C                  		tst.w	$3C(a1)
0001A17E 6A00                       		bpl.s	loc_19658
0001A180                            
0001A180                            loc_19652:
0001A180 4A40                       		tst.w	d0
0001A182 6F00                       		ble.s	loc_19658
0001A184 5B40                       		subq.w	#5,d0
0001A186                            
0001A186                            loc_19658:
0001A186 3140 003C                  		move.w	d0,$3C(a0)
0001A18A E440                       		asr.w	#2,d0
0001A18C D168 000C                  		add.w	d0,$C(a0)
0001A190 117C 0008 0019             		move.b	#8,$19(a0)
0001A196 117C 000C 0016             		move.b	#$C,$16(a0)
0001A19C 4228 0020                  		clr.b	$20(a0)
0001A1A0 2268 0034                  		movea.l	$34(a0),a1
0001A1A4 4A29 0020                  		tst.b	$20(a1)
0001A1A8 6700                       		beq.s	loc_19688
0001A1AA 4A29 0029                  		tst.b	$29(a1)
0001A1AE 6600                       		bne.s	loc_19688
0001A1B0 117C 0084 0020             		move.b	#$84,$20(a0)
0001A1B6                            
0001A1B6                            loc_19688:
0001A1B6 6000 FF50                  		bra.w	loc_195DA
0001A1BA                            ; ===========================================================================
0001A1BA                            
0001A1BA                            Obj75_SpikeDelete:
0001A1BA 4EF9 0000 E080             		jmp	DeleteObject
0001A1C0                            ; ===========================================================================
0001A1C0                            ; ---------------------------------------------------------------------------
0001A1C0                            ; Object 76 - blocks that Eggman picks up (SYZ)
0001A1C0                            ; ---------------------------------------------------------------------------
0001A1C0                            
0001A1C0                            Obj76:					; XREF: Obj_Index
0001A1C0 7000                       		moveq	#0,d0
0001A1C2 1028 0024                  		move.b	$24(a0),d0
0001A1C6 323B 0000                  		move.w	Obj76_Index(pc,d0.w),d1
0001A1CA 4EFB 1000                  		jmp	Obj76_Index(pc,d1.w)
0001A1CE                            ; ===========================================================================
0001A1CE 0000                       Obj76_Index:	dc.w Obj76_Main-Obj76_Index
0001A1D0 0000                       		dc.w Obj76_Action-Obj76_Index
0001A1D2 0000                       		dc.w loc_19762-Obj76_Index
0001A1D4                            ; ===========================================================================
0001A1D4                            
0001A1D4                            Obj76_Main:				; XREF: Obj76_Index
0001A1D4 7800                       		moveq	#0,d4
0001A1D6 3A3C 2C10                  		move.w	#$2C10,d5
0001A1DA 7C09                       		moveq	#9,d6
0001A1DC 43D0                       		lea	(a0),a1
0001A1DE 6000                       		bra.s	Obj76_MakeBlock
0001A1E0                            ; ===========================================================================
0001A1E0                            
0001A1E0                            Obj76_Loop:
0001A1E0 4EB9 0000 E4CA             		jsr	SingleObjLoad
0001A1E6 6600                       		bne.s	Obj76_ExitLoop
0001A1E8                            
0001A1E8                            Obj76_MakeBlock:			; XREF: Obj76_Main
0001A1E8 12BC 0076                  		move.b	#$76,(a1)
0001A1EC 237C 0000 0000 0004        		move.l	#Map_obj76,4(a1)
0001A1F4 337C 4000 0002             		move.w	#$4000,2(a1)
0001A1FA 137C 0004 0001             		move.b	#4,1(a1)
0001A200 137C 0010 0019             		move.b	#$10,$19(a1)
0001A206 137C 0010 0016             		move.b	#$10,$16(a1)
0001A20C 137C 0003 0018             		move.b	#3,$18(a1)
0001A212 3345 0008                  		move.w	d5,8(a1)	; set x-position
0001A216 337C 0582 000C             		move.w	#$582,$C(a1)
0001A21C 3344 0028                  		move.w	d4,$28(a1)
0001A220 0644 0101                  		addi.w	#$101,d4
0001A224 0645 0020                  		addi.w	#$20,d5		; add $20 to next x-position
0001A228 5429 0024                  		addq.b	#2,$24(a1)
0001A22C 51CE FFB2                  		dbf	d6,Obj76_Loop	; repeat sequence 9 more times
0001A230                            
0001A230                            Obj76_ExitLoop:
0001A230 4E75                       		rts	
0001A232                            ; ===========================================================================
0001A232                            
0001A232                            Obj76_Action:				; XREF: Obj76_Index
0001A232 1028 0029                  		move.b	$29(a0),d0
0001A236 B028 0028                  		cmp.b	$28(a0),d0
0001A23A 6700                       		beq.s	Obj76_Solid
0001A23C 4A00                       		tst.b	d0
0001A23E 6B00                       		bmi.s	loc_19718
0001A240                            
0001A240                            loc_19712:
0001A240 6100 0000                  		bsr.w	Obj76_Break
0001A244 6000                       		bra.s	Obj76_Display
0001A246                            ; ===========================================================================
0001A246                            
0001A246                            loc_19718:
0001A246 2268 0034                  		movea.l	$34(a0),a1
0001A24A 4A29 0021                  		tst.b	$21(a1)
0001A24E 67F0                       		beq.s	loc_19712
0001A250 3169 0008 0008             		move.w	8(a1),8(a0)
0001A256 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001A25C 0668 002C 000C             		addi.w	#$2C,$C(a0)
0001A262 B2C8                       		cmpa.w	a0,a1
0001A264 6500                       		bcs.s	Obj76_Display
0001A266 3029 0012                  		move.w	$12(a1),d0
0001A26A 48C0                       		ext.l	d0
0001A26C E080                       		asr.l	#8,d0
0001A26E D168 000C                  		add.w	d0,$C(a0)
0001A272 6000                       		bra.s	Obj76_Display
0001A274                            ; ===========================================================================
0001A274                            
0001A274                            Obj76_Solid:				; XREF: Obj76_Action
0001A274 323C 001B                  		move.w	#$1B,d1
0001A278 343C 0010                  		move.w	#$10,d2
0001A27C 363C 0011                  		move.w	#$11,d3
0001A280 3828 0008                  		move.w	8(a0),d4
0001A284 4EB9 0001 0414             		jsr	SolidObject
0001A28A                            
0001A28A                            Obj76_Display:				; XREF: Obj76_Action
0001A28A 4EF9 0000 E044             		jmp	DisplaySprite
0001A290                            ; ===========================================================================
0001A290                            
0001A290                            loc_19762:				; XREF: Obj76_Index
0001A290 4A28 0001                  		tst.b	1(a0)
0001A294 6A00                       		bpl.s	Obj76_Delete
0001A296 4EB9 0000 DFAC             		jsr	ObjectFall
0001A29C 4EF9 0000 E044             		jmp	DisplaySprite
0001A2A2                            ; ===========================================================================
0001A2A2                            
0001A2A2                            Obj76_Delete:
0001A2A2 4EF9 0000 E080             		jmp	DeleteObject
0001A2A8                            
0001A2A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001A2A8                            
0001A2A8                            
0001A2A8                            Obj76_Break:				; XREF: Obj76_Action
0001A2A8 49FA 0000                  		lea	Obj76_FragSpeed(pc),a4
0001A2AC 4BFA 0000                  		lea	Obj76_FragPos(pc),a5
0001A2B0 7801                       		moveq	#1,d4
0001A2B2 7203                       		moveq	#3,d1
0001A2B4 7438                       		moveq	#$38,d2
0001A2B6 5428 0024                  		addq.b	#2,$24(a0)
0001A2BA 117C 0008 0019             		move.b	#8,$19(a0)
0001A2C0 117C 0008 0016             		move.b	#8,$16(a0)
0001A2C6 43D0                       		lea	(a0),a1
0001A2C8 6000                       		bra.s	Obj76_MakeFrag
0001A2CA                            ; ===========================================================================
0001A2CA                            
0001A2CA                            Obj76_LoopFrag:
0001A2CA 4EB9 0000 E4E0             		jsr	SingleObjLoad2
0001A2D0 6600                       		bne.s	loc_197D4
0001A2D2                            
0001A2D2                            Obj76_MakeFrag:
0001A2D2 45D0                       		lea	(a0),a2
0001A2D4 47D1                       		lea	(a1),a3
0001A2D6 7603                       		moveq	#3,d3
0001A2D8                            
0001A2D8                            loc_197AA:
0001A2D8 26DA                       		move.l	(a2)+,(a3)+
0001A2DA 26DA                       		move.l	(a2)+,(a3)+
0001A2DC 26DA                       		move.l	(a2)+,(a3)+
0001A2DE 26DA                       		move.l	(a2)+,(a3)+
0001A2E0 51CB FFF6                  		dbf	d3,loc_197AA
0001A2E4                            
0001A2E4 335C 0010                  		move.w	(a4)+,$10(a1)
0001A2E8 335C 0012                  		move.w	(a4)+,$12(a1)
0001A2EC 361D                       		move.w	(a5)+,d3
0001A2EE D769 0008                  		add.w	d3,8(a1)
0001A2F2 361D                       		move.w	(a5)+,d3
0001A2F4 D769 000C                  		add.w	d3,$C(a1)
0001A2F8 1344 001A                  		move.b	d4,$1A(a1)
0001A2FC 5244                       		addq.w	#1,d4
0001A2FE 51C9 FFCA                  		dbf	d1,Obj76_LoopFrag ; repeat sequence 3 more times
0001A302                            
0001A302                            loc_197D4:
0001A302 303C 00CB                  		move.w	#$CB,d0
0001A306 4EF9 0000 159A             		jmp	(PlaySound_Special).l ;	play smashing sound
0001A30C                            ; End of function Obj76_Break
0001A30C                            
0001A30C                            ; ===========================================================================
0001A30C FE80 FE00                  Obj76_FragSpeed:dc.w $FE80, $FE00
0001A310 0180 FE00                  		dc.w $180, $FE00
0001A314 FF00 FF00                  		dc.w $FF00, $FF00
0001A318 0100 FF00                  		dc.w $100, $FF00
0001A31C FFF8 FFF8                  Obj76_FragPos:	dc.w $FFF8, $FFF8
0001A320 0010 0000                  		dc.w $10, 0
0001A324 0000 0010                  		dc.w 0,	$10
0001A328 0010 0010                  		dc.w $10, $10
0001A32C                            ; ---------------------------------------------------------------------------
0001A32C                            ; Sprite mappings - blocks that	Eggman picks up (SYZ)
0001A32C                            ; ---------------------------------------------------------------------------
0001A32C                            Map_obj76:
0001A32C                            	include "_maps\obj76.asm"
0001A32C                            ; ---------------------------------------------------------------------------
0001A32C                            ; Sprite mappings - blocks that	Robotnik picks up (SYZ)
0001A32C                            ; ---------------------------------------------------------------------------
0001A32C 0000 0000                  		dc.w byte_19808-Map_obj76, byte_19814-Map_obj76
0001A330 0000 0000                  		dc.w byte_1981A-Map_obj76, byte_19820-Map_obj76
0001A334 0000                       		dc.w byte_19826-Map_obj76
0001A336 02                         byte_19808:	dc.b 2
0001A337 F00D 0071 F0               		dc.b $F0, $D, 0, $71, $F0
0001A33C 000D 0079 F0               		dc.b 0,	$D, 0, $79, $F0
0001A341 00                         		dc.b 0
0001A342 01                         byte_19814:	dc.b 1
0001A343 F805 0071 F8               		dc.b $F8, 5, 0,	$71, $F8
0001A348 01                         byte_1981A:	dc.b 1
0001A349 F805 0075 F8               		dc.b $F8, 5, 0,	$75, $F8
0001A34E 01                         byte_19820:	dc.b 1
0001A34F F805 0079 F8               		dc.b $F8, 5, 0,	$79, $F8
0001A354 01                         byte_19826:	dc.b 1
0001A355 F805 007D F8               		dc.b $F8, 5, 0,	$7D, $F8
0001A35A                            		even
0001A35A                            		even
0001A35A                            
0001A35A                            ; ===========================================================================
0001A35A                            
0001A35A                            loc_1982C:				; XREF: loc_19C62; loc_19C80
0001A35A 4EF9 0000 E080             		jmp	DeleteObject
0001A360                            ; ===========================================================================
0001A360                            ; ---------------------------------------------------------------------------
0001A360                            ; Object 82 - Eggman (SBZ2)
0001A360                            ; ---------------------------------------------------------------------------
0001A360                            
0001A360                            Obj82:					; XREF: Obj_Index
0001A360 7000                       		moveq	#0,d0
0001A362 1028 0024                  		move.b	$24(a0),d0
0001A366 323B 0000                  		move.w	Obj82_Index(pc,d0.w),d1
0001A36A 4EFB 1000                  		jmp	Obj82_Index(pc,d1.w)
0001A36E                            ; ===========================================================================
0001A36E 0000                       Obj82_Index:	dc.w Obj82_Main-Obj82_Index
0001A370 0000                       		dc.w Obj82_Eggman-Obj82_Index
0001A372 0000                       		dc.w Obj82_Switch-Obj82_Index
0001A374                            
0001A374 0200 03                    Obj82_ObjData:	dc.b 2,	0, 3		; routine number, animation, priority
0001A377 0400 03                    		dc.b 4,	0, 3
0001A37A                            ; ===========================================================================
0001A37A                            
0001A37A                            Obj82_Main:				; XREF: Obj82_Index
0001A37A 45FA FFF8                  		lea	Obj82_ObjData(pc),a2
0001A37E 317C 2160 0008             		move.w	#$2160,8(a0)
0001A384 317C 05A4 000C             		move.w	#$5A4,$C(a0)
0001A38A 117C 000F 0020             		move.b	#$F,$20(a0)
0001A390 117C 0010 0021             		move.b	#$10,$21(a0)
0001A396 08A8 0000 0022             		bclr	#0,$22(a0)
0001A39C 4228 0025                  		clr.b	$25(a0)
0001A3A0 115A 0024                  		move.b	(a2)+,$24(a0)
0001A3A4 115A 001C                  		move.b	(a2)+,$1C(a0)
0001A3A8 115A 0018                  		move.b	(a2)+,$18(a0)
0001A3AC 217C 0000 0000 0004        		move.l	#Map_obj82,4(a0)
0001A3B4 317C 0400 0002             		move.w	#$400,2(a0)
0001A3BA 117C 0004 0001             		move.b	#4,1(a0)
0001A3C0 08E8 0007 0001             		bset	#7,1(a0)
0001A3C6 117C 0020 0019             		move.b	#$20,$19(a0)
0001A3CC 4EB9 0000 E4E0             		jsr	SingleObjLoad2
0001A3D2 6600                       		bne.s	Obj82_Eggman
0001A3D4 2348 0034                  		move.l	a0,$34(a1)
0001A3D8 12BC 0082                  		move.b	#$82,(a1)	; load switch object
0001A3DC 337C 2130 0008             		move.w	#$2130,8(a1)
0001A3E2 337C 05BC 000C             		move.w	#$5BC,$C(a1)
0001A3E8 4228 0025                  		clr.b	$25(a0)
0001A3EC 135A 0024                  		move.b	(a2)+,$24(a1)
0001A3F0 135A 001C                  		move.b	(a2)+,$1C(a1)
0001A3F4 135A 0018                  		move.b	(a2)+,$18(a1)
0001A3F8 237C 0000 C7CE 0004        		move.l	#Map_obj32,4(a1)
0001A400 337C 04A4 0002             		move.w	#$4A4,2(a1)
0001A406 137C 0004 0001             		move.b	#4,1(a1)
0001A40C 08E9 0007 0001             		bset	#7,1(a1)
0001A412 137C 0010 0019             		move.b	#$10,$19(a1)
0001A418 137C 0000 001A             		move.b	#0,$1A(a1)
0001A41E                            
0001A41E                            Obj82_Eggman:				; XREF: Obj82_Index
0001A41E 7000                       		moveq	#0,d0
0001A420 1028 0025                  		move.b	$25(a0),d0
0001A424 323B 0000                  		move.w	Obj82_EggIndex(pc,d0.w),d1
0001A428 4EBB 1000                  		jsr	Obj82_EggIndex(pc,d1.w)
0001A42C 43FA 0000                  		lea	Ani_obj82(pc),a1
0001A430 4EB9 0000 B09A             		jsr	AnimateSprite
0001A436 4EF9 0000 E044             		jmp	DisplaySprite
0001A43C                            ; ===========================================================================
0001A43C 0000                       Obj82_EggIndex:	dc.w Obj82_ChkSonic-Obj82_EggIndex
0001A43E 0000                       		dc.w Obj82_PreLeap-Obj82_EggIndex
0001A440 0000                       		dc.w Obj82_Leap-Obj82_EggIndex
0001A442 0000                       		dc.w loc_19934-Obj82_EggIndex
0001A444                            ; ===========================================================================
0001A444                            
0001A444                            Obj82_ChkSonic:				; XREF: Obj82_EggIndex
0001A444 3028 0008                  		move.w	8(a0),d0
0001A448 9078 D008                  		sub.w	($FFFFD008).w,d0
0001A44C 0C40 0080                  		cmpi.w	#128,d0		; is Sonic within 128 pixels of	Eggman?
0001A450 6400                       		bcc.s	loc_19934	; if not, branch
0001A452 5428 0025                  		addq.b	#2,$25(a0)
0001A456 317C 00B4 003C             		move.w	#180,$3C(a0)	; set delay to 3 seconds
0001A45C 117C 0001 001C             		move.b	#1,$1C(a0)
0001A462                            
0001A462                            loc_19934:				; XREF: Obj82_EggIndex
0001A462 4EF9 0000 E01E             		jmp	SpeedToPos
0001A468                            ; ===========================================================================
0001A468                            
0001A468                            Obj82_PreLeap:				; XREF: Obj82_EggIndex
0001A468 5368 003C                  		subq.w	#1,$3C(a0)	; subtract 1 from time delay
0001A46C 6600                       		bne.s	loc_19954	; if time remains, branch
0001A46E 5428 0025                  		addq.b	#2,$25(a0)
0001A472 117C 0002 001C             		move.b	#2,$1C(a0)
0001A478 5868 000C                  		addq.w	#4,$C(a0)
0001A47C 317C 000F 003C             		move.w	#15,$3C(a0)
0001A482                            
0001A482                            loc_19954:
0001A482 60DE                       		bra.s	loc_19934
0001A484                            ; ===========================================================================
0001A484                            
0001A484                            Obj82_Leap:				; XREF: Obj82_EggIndex
0001A484 5368 003C                  		subq.w	#1,$3C(a0)
0001A488 6E00                       		bgt.s	loc_199D0
0001A48A 6600                       		bne.s	loc_1996A
0001A48C 317C FF04 0010             		move.w	#-$FC,$10(a0)	; make Eggman leap
0001A492 317C FC40 0012             		move.w	#-$3C0,$12(a0)
0001A498                            
0001A498                            loc_1996A:
0001A498 0C68 2132 0008             		cmpi.w	#$2132,8(a0)
0001A49E 6E00                       		bgt.s	loc_19976
0001A4A0 4268 0010                  		clr.w	$10(a0)
0001A4A4                            
0001A4A4                            loc_19976:
0001A4A4 0668 0024 0012             		addi.w	#$24,$12(a0)
0001A4AA 4A68 0012                  		tst.w	$12(a0)
0001A4AE 6B00                       		bmi.s	Obj82_FindBlocks
0001A4B0 0C68 0595 000C             		cmpi.w	#$595,$C(a0)
0001A4B6 6500                       		bcs.s	Obj82_FindBlocks
0001A4B8 317C 5357 0028             		move.w	#$5357,$28(a0)
0001A4BE 0C68 059B 000C             		cmpi.w	#$59B,$C(a0)
0001A4C4 6500                       		bcs.s	Obj82_FindBlocks
0001A4C6 317C 059B 000C             		move.w	#$59B,$C(a0)
0001A4CC 4268 0012                  		clr.w	$12(a0)
0001A4D0                            
0001A4D0                            Obj82_FindBlocks:
0001A4D0 3028 0010                  		move.w	$10(a0),d0
0001A4D4 8068 0012                  		or.w	$12(a0),d0
0001A4D8 6600                       		bne.s	loc_199D0
0001A4DA 43F8 D000                  		lea	($FFFFD000).w,a1 ; start at the	first object RAM
0001A4DE 703E                       		moveq	#$3E,d0
0001A4E0 7240                       		moveq	#$40,d1
0001A4E2                            
0001A4E2                            Obj82_FindLoop:	
0001A4E2 D2C1                       		adda.w	d1,a1		; jump to next object RAM
0001A4E4 0C11 0083                  		cmpi.b	#$83,(a1)	; is object a block? (object $83)
0001A4E8 57C8 FFF8                  		dbeq	d0,Obj82_FindLoop ; if not, repeat (max	$3E times)
0001A4EC                            
0001A4EC 6600                       		bne.s	loc_199D0
0001A4EE 337C 474F 0028             		move.w	#$474F,$28(a1)	; set block to disintegrate
0001A4F4 5428 0025                  		addq.b	#2,$25(a0)
0001A4F8 117C 0001 001C             		move.b	#1,$1C(a0)
0001A4FE                            
0001A4FE                            loc_199D0:
0001A4FE 6000 FF62                  		bra.w	loc_19934
0001A502                            ; ===========================================================================
0001A502                            
0001A502                            Obj82_Switch:				; XREF: Obj82_Index
0001A502 7000                       		moveq	#0,d0
0001A504 1028 0025                  		move.b	$25(a0),d0
0001A508 303B 0000                  		move.w	Obj82_SwIndex(pc,d0.w),d0
0001A50C 4EFB 0000                  		jmp	Obj82_SwIndex(pc,d0.w)
0001A510                            ; ===========================================================================
0001A510 0000                       Obj82_SwIndex:	dc.w loc_199E6-Obj82_SwIndex
0001A512 0000                       		dc.w Obj82_SwDisplay-Obj82_SwIndex
0001A514                            ; ===========================================================================
0001A514                            
0001A514                            loc_199E6:				; XREF: Obj82_SwIndex
0001A514 2268 0034                  		movea.l	$34(a0),a1
0001A518 0C69 5357 0028             		cmpi.w	#$5357,$28(a1)
0001A51E 6600                       		bne.s	Obj82_SwDisplay
0001A520 117C 0001 001A             		move.b	#1,$1A(a0)
0001A526 5428 0025                  		addq.b	#2,$25(a0)
0001A52A                            
0001A52A                            Obj82_SwDisplay:			; XREF: Obj82_SwIndex
0001A52A 4EF9 0000 E044             		jmp	DisplaySprite
0001A530                            ; ===========================================================================
0001A530                            Ani_obj82:
0001A530                            	include "_anim\obj82.asm"
0001A530                            ; ---------------------------------------------------------------------------
0001A530                            ; Animation script - Eggman (SBZ2)
0001A530                            ; ---------------------------------------------------------------------------
0001A530 0000                       		dc.w byte_19A10-Ani_obj82
0001A532 0000                       		dc.w byte_19A14-Ani_obj82
0001A534 0000                       		dc.w byte_19A18-Ani_obj82
0001A536 0000                       		dc.w byte_19A20-Ani_obj82
0001A538 0000                       		dc.w byte_19A24-Ani_obj82
0001A53A 0000                       		dc.w byte_19A2A-Ani_obj82
0001A53C 0000                       		dc.w byte_19A30-Ani_obj82
0001A53E 7E00 FF00                  byte_19A10:	dc.b $7E, 0, $FF, 0
0001A542 0601 02FF                  byte_19A14:	dc.b 6,	1, 2, $FF
0001A546 0E03 0404 0000 00FF        byte_19A18:	dc.b $E, 3, 4, 4, 0, 0,	0, $FF
0001A54E 0005 09FF                  byte_19A20:	dc.b 0,	5, 9, $FF
0001A552 0607 0408 04FF             byte_19A24:	dc.b 6,	7, 4, 8, 4, $FF
0001A558 0F04 0303 FF00             byte_19A2A:	dc.b $F, 4, 3, 3, $FF, 0
0001A55E 7E06 FF00                  byte_19A30:	dc.b $7E, 6, $FF, 0
0001A562                            		even
0001A562                            		even
0001A562                            
0001A562                            ; ---------------------------------------------------------------------------
0001A562                            ; Sprite mappings - Eggman (SBZ2)
0001A562                            ; ---------------------------------------------------------------------------
0001A562                            Map_obj82:
0001A562                            	include "_maps\obj82.asm"
0001A562                            ; ================================================================================
0001A562                            ; Sprite Mappings - generated by Flex 2 Fri Mar 21 2025 21:13:29 GMT-0500 (Central Daylight Time)
0001A562                            ; ================================================================================
0001A562                            
0001A562                            DATAA16Z12RYSAF:
0001A562 0000 0000                  	dc.w DATAA16Z12RYSAF_0-DATAA16Z12RYSAF, DATAA16Z12RYSAF_1-DATAA16Z12RYSAF
0001A566 0000 0000                  	dc.w DATAA16Z12RYSAF_2-DATAA16Z12RYSAF, DATAA16Z12RYSAF_3-DATAA16Z12RYSAF
0001A56A 0000 0000                  	dc.w DATAA16Z12RYSAF_4-DATAA16Z12RYSAF, DATAA16Z12RYSAF_5-DATAA16Z12RYSAF
0001A56E 0000 0000                  	dc.w DATAA16Z12RYSAF_6-DATAA16Z12RYSAF, DATAA16Z12RYSAF_7-DATAA16Z12RYSAF
0001A572 0000 0000                  	dc.w DATAA16Z12RYSAF_8-DATAA16Z12RYSAF, DATAA16Z12RYSAF_9-DATAA16Z12RYSAF
0001A576 0000                       	dc.w DATAA16Z12RYSAF_A-DATAA16Z12RYSAF
0001A578 03                         DATAA16Z12RYSAF_0: dc.b $3
0001A579 FC00 006D E8               	dc.b $FC, $0, $0, $6D, $E8
0001A57E E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A583 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A588 04                         DATAA16Z12RYSAF_1: dc.b $4
0001A589 E80D 000C F0               	dc.b $E8, $D, $0, $C, $F0
0001A58E E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A593 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A598 FC00 006D E8               	dc.b $FC, $0, $0, $6D, $E8
0001A59D 04                         DATAA16Z12RYSAF_2: dc.b $4
0001A59E E90D 000C F0               	dc.b $E9, $D, $0, $C, $F0
0001A5A3 E90E 0000 F0               	dc.b $E9, $E, $0, $0, $F0
0001A5A8 010F 005D F0               	dc.b $1, $F, $0, $5D, $F0
0001A5AD FD00 006D E8               	dc.b $FD, $0, $0, $6D, $E8
0001A5B2 03                         DATAA16Z12RYSAF_3: dc.b $3
0001A5B3 E80F 006E E8               	dc.b $E8, $F, $0, $6E, $E8
0001A5B8 080D 007E E8               	dc.b $8, $D, $0, $7E, $E8
0001A5BD F005 0086 08               	dc.b $F0, $5, $0, $86, $8
0001A5C2 04                         DATAA16Z12RYSAF_4: dc.b $4
0001A5C3 E00F 008A E8               	dc.b $E0, $F, $0, $8A, $E8
0001A5C8 000C 009A E8               	dc.b $0, $C, $0, $9A, $E8
0001A5CD 0806 009E F0               	dc.b $8, $6, $0, $9E, $F0
0001A5D2 E805 00A4 08               	dc.b $E8, $5, $0, $A4, $8
0001A5D7 04                         DATAA16Z12RYSAF_5: dc.b $4
0001A5D8 E80D 0014 EC               	dc.b $E8, $D, $0, $14, $EC
0001A5DD E801 001C 0C               	dc.b $E8, $1, $0, $1C, $C
0001A5E2 E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A5E7 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A5EC 07                         DATAA16Z12RYSAF_6: dc.b $7
0001A5ED E80D 0014 EC               	dc.b $E8, $D, $0, $14, $EC
0001A5F2 E801 001C 0C               	dc.b $E8, $1, $0, $1C, $C
0001A5F7 0409 082E 00               	dc.b $4, $9, $8, $2E, $0
0001A5FC 0405 0834 E8               	dc.b $4, $5, $8, $34, $E8
0001A601 F00F 081E F0               	dc.b $F0, $F, $8, $1E, $F0
0001A606 F104 0838 10               	dc.b $F1, $4, $8, $38, $10
0001A60B F104 0038 E0               	dc.b $F1, $4, $0, $38, $E0
0001A610 04                         DATAA16Z12RYSAF_7: dc.b $4
0001A611 080D 00A8 E4               	dc.b $8, $D, $0, $A8, $E4
0001A616 E80F 00B0 EC               	dc.b $E8, $F, $0, $B0, $EC
0001A61B 0805 00C0 04               	dc.b $8, $5, $0, $C0, $4
0001A620 F005 00C4 0C               	dc.b $F0, $5, $0, $C4, $C
0001A625 05                         DATAA16Z12RYSAF_8: dc.b $5
0001A626 0C05 00C8 E4               	dc.b $C, $5, $0, $C8, $E4
0001A62B E40F 00CC EC               	dc.b $E4, $F, $0, $CC, $EC
0001A630 040C 00DC EC               	dc.b $4, $C, $0, $DC, $EC
0001A635 0C05 00E0 FC               	dc.b $C, $5, $0, $E0, $FC
0001A63A EC04 00E4 0C               	dc.b $EC, $4, $0, $E4, $C
0001A63F 08                         DATAA16Z12RYSAF_9: dc.b $8
0001A640 E80D 0014 EC               	dc.b $E8, $D, $0, $14, $EC
0001A645 E801 001C 0C               	dc.b $E8, $1, $0, $1C, $C
0001A64A E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A64F 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A654 E00D 3ECE F0               	dc.b $E0, $D, $3E, $CE, $F0
0001A659 F00D 3ECE F0               	dc.b $F0, $D, $3E, $CE, $F0
0001A65E 000D 3ECE F0               	dc.b $0, $D, $3E, $CE, $F0
0001A663 100D 3ECE F0               	dc.b $10, $D, $3E, $CE, $F0
0001A668 03                         DATAA16Z12RYSAF_A: dc.b $3
0001A669 EC0D 003A E4               	dc.b $EC, $D, $0, $3A, $E4
0001A66E F408 0042 04               	dc.b $F4, $8, $0, $42, $4
0001A673 EC0D 0045 FC               	dc.b $EC, $D, $0, $45, $FC
0001A678                            	even
0001A678                            	even
0001A678                            
0001A678                            ; ===========================================================================
0001A678                            ; ---------------------------------------------------------------------------
0001A678                            ; Object 83 - blocks that disintegrate Eggman	presses	a switch (SBZ2)
0001A678                            ; ---------------------------------------------------------------------------
0001A678                            
0001A678                            Obj83:					; XREF: Obj_Index
0001A678 7000                       		moveq	#0,d0
0001A67A 1028 0024                  		move.b	$24(a0),d0
0001A67E 323B 0000                  		move.w	Obj83_Index(pc,d0.w),d1
0001A682 4EFB 1000                  		jmp	Obj83_Index(pc,d1.w)
0001A686                            ; ===========================================================================
0001A686 0000                       Obj83_Index:	dc.w Obj83_Main-Obj83_Index
0001A688 0000                       		dc.w Obj83_ChkBreak-Obj83_Index
0001A68A 0000                       		dc.w loc_19C36-Obj83_Index
0001A68C 0000                       		dc.w loc_19C62-Obj83_Index
0001A68E 0000                       		dc.w loc_19C72-Obj83_Index
0001A690 0000                       		dc.w loc_19C80-Obj83_Index
0001A692                            ; ===========================================================================
0001A692                            
0001A692                            Obj83_Main:				; XREF: Obj83_Index
0001A692 317C 2080 0008             		move.w	#$2080,8(a0)
0001A698 317C 05D0 000C             		move.w	#$5D0,$C(a0)
0001A69E 117C 0080 0019             		move.b	#$80,$19(a0)
0001A6A4 117C 0010 0016             		move.b	#$10,$16(a0)
0001A6AA 117C 0004 0001             		move.b	#4,1(a0)
0001A6B0 08E8 0007 0001             		bset	#7,1(a0)
0001A6B6 7800                       		moveq	#0,d4
0001A6B8 3A3C 2010                  		move.w	#$2010,d5
0001A6BC 7C07                       		moveq	#7,d6
0001A6BE 45E8 0030                  		lea	$30(a0),a2
0001A6C2                            
0001A6C2                            Obj83_MakeBlock:
0001A6C2 4EB9 0000 E4CA             		jsr	SingleObjLoad
0001A6C8 6600                       		bne.s	Obj83_ExitMake
0001A6CA 34C9                       		move.w	a1,(a2)+
0001A6CC 12BC 0083                  		move.b	#$83,(a1)	; load block object
0001A6D0 237C 0000 0000 0004        		move.l	#Map_obj83,4(a1)
0001A6D8 337C 4518 0002             		move.w	#$4518,2(a1)
0001A6DE 137C 0004 0001             		move.b	#4,1(a1)
0001A6E4 137C 0010 0019             		move.b	#$10,$19(a1)
0001A6EA 137C 0010 0016             		move.b	#$10,$16(a1)
0001A6F0 137C 0003 0018             		move.b	#3,$18(a1)
0001A6F6 3345 0008                  		move.w	d5,8(a1)	; set X	position
0001A6FA 337C 05D0 000C             		move.w	#$5D0,$C(a1)
0001A700 0645 0020                  		addi.w	#$20,d5		; add $20 for next X position
0001A704 137C 0008 0024             		move.b	#8,$24(a1)
0001A70A 51CE FFB6                  		dbf	d6,Obj83_MakeBlock ; repeat sequence 7 more times
0001A70E                            
0001A70E                            Obj83_ExitMake:
0001A70E 5428 0024                  		addq.b	#2,$24(a0)
0001A712 4E75                       		rts	
0001A714                            ; ===========================================================================
0001A714                            
0001A714                            Obj83_ChkBreak:				; XREF: Obj83_Index
0001A714 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
0001A71A 6600                       		bne.s	Obj83_Solid	; if not, branch
0001A71C 4228 001A                  		clr.b	$1A(a0)
0001A720 5428 0024                  		addq.b	#2,$24(a0)	; next subroutine
0001A724                            
0001A724                            Obj83_Solid:
0001A724 7000                       		moveq	#0,d0
0001A726 1028 001A                  		move.b	$1A(a0),d0
0001A72A 4400                       		neg.b	d0
0001A72C 4880                       		ext.w	d0
0001A72E 5040                       		addq.w	#8,d0
0001A730 E940                       		asl.w	#4,d0
0001A732 383C 2100                  		move.w	#$2100,d4
0001A736 9840                       		sub.w	d0,d4
0001A738 1140 0019                  		move.b	d0,$19(a0)
0001A73C 3144 0008                  		move.w	d4,8(a0)
0001A740 720B                       		moveq	#$B,d1
0001A742 D240                       		add.w	d0,d1
0001A744 7410                       		moveq	#$10,d2
0001A746 7611                       		moveq	#$11,d3
0001A748 4EF9 0001 0414             		jmp	SolidObject
0001A74E                            ; ===========================================================================
0001A74E                            
0001A74E                            loc_19C36:				; XREF: Obj83_Index
0001A74E 0428 000E 001E             		subi.b	#$E,$1E(a0)
0001A754 6400                       		bcc.s	Obj83_Solid2
0001A756 70FF                       		moveq	#-1,d0
0001A758 1028 001A                  		move.b	$1A(a0),d0
0001A75C 4880                       		ext.w	d0
0001A75E D040                       		add.w	d0,d0
0001A760 3030 0030                  		move.w	$30(a0,d0.w),d0
0001A764 2240                       		movea.l	d0,a1
0001A766 337C 474F 0028             		move.w	#$474F,$28(a1)
0001A76C 5228 001A                  		addq.b	#1,$1A(a0)
0001A770 0C28 0008 001A             		cmpi.b	#8,$1A(a0)
0001A776 6700                       		beq.s	loc_19C62
0001A778                            
0001A778                            Obj83_Solid2:
0001A778 60AA                       		bra.s	Obj83_Solid
0001A77A                            ; ===========================================================================
0001A77A                            
0001A77A                            loc_19C62:				; XREF: Obj83_Index
0001A77A 08A8 0003 0022             		bclr	#3,$22(a0)
0001A780 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001A786 6000 FBD2                  		bra.w	loc_1982C
0001A78A                            ; ===========================================================================
0001A78A                            
0001A78A                            loc_19C72:				; XREF: Obj83_Index
0001A78A 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
0001A790 6700                       		beq.s	Obj83_Break	; if yes, branch
0001A792 4EF9 0000 E044             		jmp	DisplaySprite
0001A798                            ; ===========================================================================
0001A798                            
0001A798                            loc_19C80:				; XREF: Obj83_Index
0001A798 4A28 0001                  		tst.b	1(a0)
0001A79C 6A00 FBBC                  		bpl.w	loc_1982C
0001A7A0 4EB9 0000 DFAC             		jsr	ObjectFall
0001A7A6 4EF9 0000 E044             		jmp	DisplaySprite
0001A7AC                            ; ===========================================================================
0001A7AC                            
0001A7AC                            Obj83_Break:				; XREF: loc_19C72
0001A7AC 49FA 0000                  		lea	Obj83_FragSpeed(pc),a4
0001A7B0 4BFA 0000                  		lea	Obj83_FragPos(pc),a5
0001A7B4 7801                       		moveq	#1,d4
0001A7B6 7203                       		moveq	#3,d1
0001A7B8 7438                       		moveq	#$38,d2
0001A7BA 5428 0024                  		addq.b	#2,$24(a0)
0001A7BE 117C 0008 0019             		move.b	#8,$19(a0)
0001A7C4 117C 0008 0016             		move.b	#8,$16(a0)
0001A7CA 43D0                       		lea	(a0),a1
0001A7CC 6000                       		bra.s	Obj83_MakeFrag
0001A7CE                            ; ===========================================================================
0001A7CE                            
0001A7CE                            Obj83_LoopFrag:
0001A7CE 4EB9 0000 E4E0             		jsr	SingleObjLoad2
0001A7D4 6600                       		bne.s	Obj83_BreakSnd
0001A7D6                            
0001A7D6                            Obj83_MakeFrag:				; XREF: Obj83_Break
0001A7D6 45D0                       		lea	(a0),a2
0001A7D8 47D1                       		lea	(a1),a3
0001A7DA 7603                       		moveq	#3,d3
0001A7DC                            
0001A7DC                            loc_19CC4:
0001A7DC 26DA                       		move.l	(a2)+,(a3)+
0001A7DE 26DA                       		move.l	(a2)+,(a3)+
0001A7E0 26DA                       		move.l	(a2)+,(a3)+
0001A7E2 26DA                       		move.l	(a2)+,(a3)+
0001A7E4 51CB FFF6                  		dbf	d3,loc_19CC4
0001A7E8                            
0001A7E8 335C 0012                  		move.w	(a4)+,$12(a1)
0001A7EC 361D                       		move.w	(a5)+,d3
0001A7EE D769 0008                  		add.w	d3,8(a1)
0001A7F2 361D                       		move.w	(a5)+,d3
0001A7F4 D769 000C                  		add.w	d3,$C(a1)
0001A7F8 1344 001A                  		move.b	d4,$1A(a1)
0001A7FC 5244                       		addq.w	#1,d4
0001A7FE 51C9 FFCE                  		dbf	d1,Obj83_LoopFrag ; repeat sequence 3 more times
0001A802                            
0001A802                            Obj83_BreakSnd:
0001A802 303C 00CB                  		move.w	#$CB,d0
0001A806 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play smashing sound
0001A80C 4EF9 0000 E044             		jmp	DisplaySprite
0001A812                            ; ===========================================================================
0001A812 0080 0000                  Obj83_FragSpeed:dc.w $80, 0
0001A816 0120 00C0                  		dc.w $120, $C0
0001A81A FFF8 FFF8                  Obj83_FragPos:	dc.w $FFF8, $FFF8
0001A81E 0010 0000                  		dc.w $10, 0
0001A822 0000 0010                  		dc.w 0,	$10
0001A826 0010 0010                  		dc.w $10, $10
0001A82A                            ; ---------------------------------------------------------------------------
0001A82A                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001A82A                            ; ---------------------------------------------------------------------------
0001A82A                            Map_obj83:
0001A82A                            	include "_maps\obj83.asm"
0001A82A                            ; ---------------------------------------------------------------------------
0001A82A                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001A82A                            ; ---------------------------------------------------------------------------
0001A82A 0000 0000                  		dc.w byte_19D1C-Map_obj83, byte_19D22-Map_obj83
0001A82E 0000 0000                  		dc.w byte_19D2E-Map_obj83, byte_19D3A-Map_obj83
0001A832 0000                       		dc.w byte_19D46-Map_obj83
0001A834 01                         byte_19D1C:	dc.b 1
0001A835 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0001A83A 02                         byte_19D22:	dc.b 2
0001A83B F801 0000 F8               		dc.b $F8, 1, 0,	0, $F8
0001A840 F801 0004 00               		dc.b $F8, 1, 0,	4, 0
0001A845 00                         		dc.b 0
0001A846 02                         byte_19D2E:	dc.b 2
0001A847 F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
0001A84C F801 000C 00               		dc.b $F8, 1, 0,	$C, 0
0001A851 00                         		dc.b 0
0001A852 02                         byte_19D3A:	dc.b 2
0001A853 F801 0002 F8               		dc.b $F8, 1, 0,	2, $F8
0001A858 F801 0006 00               		dc.b $F8, 1, 0,	6, 0
0001A85D 00                         		dc.b 0
0001A85E 02                         byte_19D46:	dc.b 2
0001A85F F801 000A F8               		dc.b $F8, 1, 0,	$A, $F8
0001A864 F801 000E 00               		dc.b $F8, 1, 0,	$E, 0
0001A86A 00                         		even
0001A86A 00                         		even
0001A86A                            
0001A86A                            ; ===========================================================================
0001A86A                            ; ---------------------------------------------------------------------------
0001A86A                            ; Object 85 - Eggman (FZ)
0001A86A                            ; ---------------------------------------------------------------------------
0001A86A                            
0001A86A                            Obj85_Delete:
0001A86A 4EF9 0000 E080             		jmp	DeleteObject
0001A870                            ; ===========================================================================
0001A870                            
0001A870                            Obj85:					; XREF: Obj_Index
0001A870 7000                       		moveq	#0,d0
0001A872 1028 0024                  		move.b	$24(a0),d0
0001A876 303B 0000                  		move.w	Obj85_Index(pc,d0.w),d0
0001A87A 4EFB 0000                  		jmp	Obj85_Index(pc,d0.w)
0001A87E                            ; ===========================================================================
0001A87E 0000                       Obj85_Index:	dc.w Obj85_Main-Obj85_Index
0001A880 0000                       		dc.w Obj85_Eggman-Obj85_Index
0001A882 0000                       		dc.w loc_1A38E-Obj85_Index
0001A884 0000                       		dc.w loc_1A346-Obj85_Index
0001A886 0000                       		dc.w loc_1A2C6-Obj85_Index
0001A888 0000                       		dc.w loc_1A3AC-Obj85_Index
0001A88A 0000                       		dc.w loc_1A264-Obj85_Index
0001A88C                            
0001A88C 0100 0100 0470             Obj85_ObjData:	dc.w $100, $100, $470	; X pos, Y pos,	VRAM setting
0001A892 0001 A562                  		dc.l Map_obj82		; mappings pointer
0001A896 25B0 0590 0300             		dc.w $25B0, $590, $300
0001A89C 0000 0000                  		dc.l Map_obj84
0001A8A0 26E0 0596 03A0             		dc.w $26E0, $596, $3A0
0001A8A6 0000 0000                  		dc.l Map_FZBoss
0001A8AA 26E0 0596 0470             		dc.w $26E0, $596, $470
0001A8B0 0001 A562                  		dc.l Map_obj82
0001A8B4 26E0 0596 0400             		dc.w $26E0, $596, $400
0001A8BA 0001 88A4                  		dc.l Map_Eggman
0001A8BE 26E0 0596 0400             		dc.w $26E0, $596, $400
0001A8C4 0001 88A4                  		dc.l Map_Eggman
0001A8C8                            
0001A8C8 0200 0420 19               Obj85_ObjData2:	dc.b 2,	0, 4, $20, $19	; routine num, animation, sprite priority, width, height
0001A8CD 0400 0112 08               		dc.b 4,	0, 1, $12, 8
0001A8D2 0600 0300 00               		dc.b 6,	0, 3, 0, 0
0001A8D7 0800 0300 00               		dc.b 8,	0, 3, 0, 0
0001A8DC 0A00 0320 20               		dc.b $A, 0, 3, $20, $20
0001A8E1 0C00 0300 00               		dc.b $C, 0, 3, 0, 0
0001A8E6                            ; ===========================================================================
0001A8E6                            
0001A8E6                            Obj85_Main:				; XREF: Obj85_Index
0001A8E6 45FA FFA4                  		lea	Obj85_ObjData(pc),a2
0001A8EA 47FA FFDC                  		lea	Obj85_ObjData2(pc),a3
0001A8EE 2248                       		movea.l	a0,a1
0001A8F0 7205                       		moveq	#5,d1
0001A8F2 6000                       		bra.s	Obj85_LoadBoss
0001A8F4                            ; ===========================================================================
0001A8F4                            
0001A8F4                            Obj85_Loop:
0001A8F4 4EB9 0000 E4E0             		jsr	SingleObjLoad2
0001A8FA 6600                       		bne.s	loc_19E20
0001A8FC                            
0001A8FC                            Obj85_LoadBoss:				; XREF: Obj85_Main
0001A8FC 12BC 0085                  		move.b	#$85,(a1)
0001A900 335A 0008                  		move.w	(a2)+,8(a1)
0001A904 335A 000C                  		move.w	(a2)+,$C(a1)
0001A908 335A 0002                  		move.w	(a2)+,2(a1)
0001A90C 235A 0004                  		move.l	(a2)+,4(a1)
0001A910 135B 0024                  		move.b	(a3)+,$24(a1)
0001A914 135B 001C                  		move.b	(a3)+,$1C(a1)
0001A918 135B 0018                  		move.b	(a3)+,$18(a1)
0001A91C 135B 0017                  		move.b	(a3)+,$17(a1)
0001A920 135B 0016                  		move.b	(a3)+,$16(a1)
0001A924 137C 0004 0001             		move.b	#4,1(a1)
0001A92A 08E8 0007 0001             		bset	#7,1(a0)
0001A930 2348 0034                  		move.l	a0,$34(a1)
0001A934 51C9 FFBE                  		dbf	d1,Obj85_Loop
0001A938                            
0001A938                            loc_19E20:
0001A938 45E8 0036                  		lea	$36(a0),a2
0001A93C 4EB9 0000 E4CA             		jsr	SingleObjLoad
0001A942 6600                       		bne.s	loc_19E5A
0001A944 12BC 0086                  		move.b	#$86,(a1)	; load energy ball object
0001A948 3489                       		move.w	a1,(a2)
0001A94A 2348 0034                  		move.l	a0,$34(a1)
0001A94E 45E8 0038                  		lea	$38(a0),a2
0001A952 7400                       		moveq	#0,d2
0001A954 7203                       		moveq	#3,d1
0001A956                            
0001A956                            loc_19E3E:
0001A956 4EB9 0000 E4E0             		jsr	SingleObjLoad2
0001A95C 6600                       		bne.s	loc_19E5A
0001A95E 34C9                       		move.w	a1,(a2)+
0001A960 12BC 0084                  		move.b	#$84,(a1)	; load crushing	cylinder object
0001A964 2348 0034                  		move.l	a0,$34(a1)
0001A968 1342 0028                  		move.b	d2,$28(a1)
0001A96C 5442                       		addq.w	#2,d2
0001A96E 51C9 FFE6                  		dbf	d1,loc_19E3E
0001A972                            
0001A972                            loc_19E5A:
0001A972 317C 0000 0034             		move.w	#0,$34(a0)
0001A978 4EB8 2D0E                  		jsr	RandomNumber	; get a number between 0 and 250
0001A97C 4240                       		clr.w	d0
0001A97E 4840                       		swap	d0
0001A980 80FC 00FB                  		divu.w	#251,d0
0001A984 4840                       		swap	d0
0001A986 0640 0118                  		add.w	#280,d0		; add 280
0001A98A 33C0 00FF 7FFE             		move.w	d0,($FF7FFE).l	; that's the number of hits
0001A990 317C FFFF 0030             		move.w	#-1,$30(a0)
0001A996                            
0001A996                            Obj85_Eggman:				; XREF: Obj85_Index
0001A996 7000                       		moveq	#0,d0
0001A998 1028 0034                  		move.b	$34(a0),d0
0001A99C 303B 0000                  		move.w	off_19E80(pc,d0.w),d0
0001A9A0 4EBB 0000                  		jsr	off_19E80(pc,d0.w)
0001A9A4 4EF9 0000 E044             		jmp	DisplaySprite
0001A9AA                            ; ===========================================================================
0001A9AA 0000 0000                  off_19E80:	dc.w loc_19E90-off_19E80, loc_19EA8-off_19E80
0001A9AE 0000 0000                  		dc.w loc_19FE6-off_19E80, loc_1A02A-off_19E80
0001A9B2 0000 0000                  		dc.w loc_1A074-off_19E80, loc_1A112-off_19E80
0001A9B6 0000 0000                  		dc.w loc_1A192-off_19E80, loc_1A1D4-off_19E80
0001A9BA                            ; ===========================================================================
0001A9BA                            
0001A9BA                            loc_19E90:				; XREF: off_19E80
0001A9BA 4AB8 F680                  		tst.l	($FFFFF680).w
0001A9BE 6600                       		bne.s	loc_19EA2
0001A9C0 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
0001A9C6 6500                       		bcs.s	loc_19EA2
0001A9C8 5428 0034                  		addq.b	#2,$34(a0)
0001A9CC                            
0001A9CC                            loc_19EA2:
0001A9CC 52B8 F636                  		addq.l	#1,($FFFFF636).w
0001A9D0 4E75                       		rts	
0001A9D2                            ; ===========================================================================
0001A9D2                            
0001A9D2                            loc_19EA8:				; XREF: off_19E80
0001A9D2 4A68 0030                  		tst.w	$30(a0)
0001A9D6 6A00                       		bpl.s	loc_19F10
0001A9D8 4268 0030                  		clr.w	$30(a0)
0001A9DC 4EB9 0000 2D0E             		jsr	(RandomNumber).l
0001A9E2 0240 000C                  		andi.w	#$C,d0
0001A9E6 3200                       		move.w	d0,d1
0001A9E8 5441                       		addq.w	#2,d1
0001A9EA 4A80                       		tst.l	d0
0001A9EC 6A00                       		bpl.s	loc_19EC6
0001A9EE C141                       		exg	d1,d0
0001A9F0                            
0001A9F0                            loc_19EC6:
0001A9F0 43FA 0000                  		lea	word_19FD6(pc),a1
0001A9F4 3031 0000                  		move.w	(a1,d0.w),d0
0001A9F8 3231 1000                  		move.w	(a1,d1.w),d1
0001A9FC 3140 0030                  		move.w	d0,$30(a0)
0001AA00 74FF                       		moveq	#-1,d2
0001AA02 3430 0038                  		move.w	$38(a0,d0.w),d2
0001AA06 2242                       		movea.l	d2,a1
0001AA08 137C 00FF 0029             		move.b	#-1,$29(a1)
0001AA0E 337C FFFF 0030             		move.w	#-1,$30(a1)
0001AA14 3430 1038                  		move.w	$38(a0,d1.w),d2
0001AA18 2242                       		movea.l	d2,a1
0001AA1A 137C 0001 0029             		move.b	#1,$29(a1)
0001AA20 337C 0000 0030             		move.w	#0,$30(a1)
0001AA26 317C 0001 0032             		move.w	#1,$32(a0)
0001AA2C 4228 0035                  		clr.b	$35(a0)
0001AA30 303C 00B7                  		move.w	#$B7,d0
0001AA34 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play rumbling sound
0001AA3A                            
0001AA3A                            loc_19F10:
0001AA3A 4A68 0032                  		tst.w	$32(a0)
0001AA3E 6B00 0000                  		bmi.w	loc_19FA6
0001AA42 08A8 0000 0022             		bclr	#0,$22(a0)
0001AA48 3038 D008                  		move.w	($FFFFD008).w,d0
0001AA4C 9068 0008                  		sub.w	8(a0),d0
0001AA50 6500                       		bcs.s	loc_19F2E
0001AA52 08E8 0000 0022             		bset	#0,$22(a0)
0001AA58                            
0001AA58                            loc_19F2E:
0001AA58 323C 002B                  		move.w	#$2B,d1
0001AA5C 343C 0014                  		move.w	#$14,d2
0001AA60 363C 0014                  		move.w	#$14,d3
0001AA64 3828 0008                  		move.w	8(a0),d4
0001AA68 4EB9 0001 0414             		jsr	SolidObject
0001AA6E 4A44                       		tst.w	d4
0001AA70 6E00                       		bgt.s	loc_19F50
0001AA72                            
0001AA72                            loc_19F48:
0001AA72 4A28 0035                  		tst.b	$35(a0)
0001AA76 6600                       		bne.s	loc_19F88
0001AA78 6000                       		bra.s	loc_19F96
0001AA7A                            ; ===========================================================================
0001AA7A                            
0001AA7A                            loc_19F50:
0001AA7A 5E78 F636                  		addq.w	#7,($FFFFF636).w	; add 7 to... the rng seed?
0001AA7E                            ;		cmpi.b	#2,($FFFFD01C).w	; check if player is in ball form (nah)
0001AA7E                            ;		bne.s	loc_19F48
0001AA7E                            ;		move.w	#$300,d0		; knock player back (nah)
0001AA7E                            ;		btst	#0,$22(a0)
0001AA7E                            ;		bne.s	loc_19F6A
0001AA7E                            ;		neg.w	d0
0001AA7E                            ;
0001AA7E                            ;loc_19F6A:
0001AA7E                            ;		move.w	d0,($FFFFD010).w
0001AA7E 4A28 0035                  		tst.b	$35(a0)
0001AA82 6600                       		bne.s	loc_19F88
0001AA84 5379 00FF 7FFE             		subq.w	#1,($FF7FFE).l		; no overflowing! dumbass glitch finish the boss again looking ass
0001AA8A 6400                       		bcc.s	@notoverflown
0001AA8C 4279 00FF 7FFE             		clr.w	($FF7FFE).l
0001AA92                            @notoverflown:
0001AA92 117C 0001 0035             		move.b	#1,$35(a0)		; eye-frame timer
0001AA98 303C 00AC                  		move.w	#$AC,d0
0001AA9C 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001AAA2                            
0001AAA2                            loc_19F88:
0001AAA2 5328 0035                  		subq.b	#1,$35(a0)
0001AAA6 6700                       		beq.s	loc_19F96
0001AAA8 117C 0003 001C             		move.b	#3,$1C(a0)
0001AAAE 6000                       		bra.s	loc_19F9C
0001AAB0                            ; ===========================================================================
0001AAB0                            
0001AAB0                            loc_19F96:
0001AAB0 117C 0001 001C             		move.b	#1,$1C(a0)
0001AAB6                            
0001AAB6                            loc_19F9C:
0001AAB6 43FA FA78                  		lea	Ani_obj82(pc),a1
0001AABA 4EF9 0000 B09A             		jmp	AnimateSprite
0001AAC0                            ; ===========================================================================
0001AAC0                            
0001AAC0                            loc_19FA6:
0001AAC0 4A79 00FF 7FFE             		tst.w	($FF7FFE).l
0001AAC6 6700                       		beq.s	loc_19FBC
0001AAC8 5428 0034                  		addq.b	#2,$34(a0)
0001AACC 317C FFFF 0030             		move.w	#-1,$30(a0)
0001AAD2 4268 0032                  		clr.w	$32(a0)
0001AAD6 4E75                       		rts	
0001AAD8                            ; ===========================================================================
0001AAD8                            
0001AAD8                            loc_19FBC:
0001AAD8 117C 0006 0034             		move.b	#6,$34(a0)
0001AADE 317C 25C0 0008             		move.w	#$25C0,8(a0)
0001AAE4 317C 053C 000C             		move.w	#$53C,$C(a0)
0001AAEA 117C 0014 0016             		move.b	#$14,$16(a0)
0001AAF0 4E75                       		rts	
0001AAF2                            ; ===========================================================================
0001AAF2 0000 0002 0002 0004 0004+  word_19FD6:	dc.w 0,	2, 2, 4, 4, 6, 6, 0
0001AB02                            ; ===========================================================================
0001AB02                            
0001AB02                            loc_19FE6:				; XREF: off_19E80
0001AB02 70FF                       		moveq	#-1,d0
0001AB04 3028 0036                  		move.w	$36(a0),d0
0001AB08 2240                       		movea.l	d0,a1
0001AB0A 4A68 0030                  		tst.w	$30(a0)
0001AB0E 6A00                       		bpl.s	loc_1A000
0001AB10 4268 0030                  		clr.w	$30(a0)
0001AB14 137C 00FF 0029             		move.b	#-1,$29(a1)
0001AB1A 6100                       		bsr.s	loc_1A020
0001AB1C                            
0001AB1C                            loc_1A000:
0001AB1C 700F                       		moveq	#$F,d0
0001AB1E C078 FE0E                  		and.w	($FFFFFE0E).w,d0
0001AB22 6600                       		bne.s	loc_1A00A
0001AB24 6100                       		bsr.s	loc_1A020
0001AB26                            
0001AB26                            loc_1A00A:
0001AB26 4A68 0032                  		tst.w	$32(a0)
0001AB2A 6700                       		beq.s	locret_1A01E
0001AB2C 5528 0034                  		subq.b	#2,$34(a0)
0001AB30 317C FFFF 0030             		move.w	#-1,$30(a0)
0001AB36 4268 0032                  		clr.w	$32(a0)
0001AB3A                            
0001AB3A                            locret_1A01E:
0001AB3A 4E75                       		rts	
0001AB3C                            ; ===========================================================================
0001AB3C                            
0001AB3C                            loc_1A020:
0001AB3C 303C 00B1                  		move.w	#$B1,d0
0001AB40 4EF9 0000 159A             		jmp	(PlaySound_Special).l ;	play electricity sound
0001AB46                            ; ===========================================================================
0001AB46                            
0001AB46                            loc_1A02A:				; XREF: off_19E80
0001AB46 117C 0030 0017             		move.b	#$30,$17(a0)
0001AB4C 08E8 0000 0022             		bset	#0,$22(a0)
0001AB52 4EB9 0000 E01E             		jsr	SpeedToPos
0001AB58 117C 0006 001A             		move.b	#6,$1A(a0)
0001AB5E 0668 0010 0012             		addi.w	#$10,$12(a0)
0001AB64 0C68 059C 000C             		cmpi.w	#$59C,$C(a0)
0001AB6A 6500                       		bcs.s	loc_1A070
0001AB6C 317C 059C 000C             		move.w	#$59C,$C(a0)
0001AB72 5428 0034                  		addq.b	#2,$34(a0)
0001AB76 117C 0020 0017             		move.b	#$20,$17(a0)
0001AB7C 317C 0100 0010             		move.w	#$100,$10(a0)
0001AB82 317C FF00 0012             		move.w	#-$100,$12(a0)
0001AB88 5438 F742                  		addq.b	#2,($FFFFF742).w
0001AB8C                            
0001AB8C                            loc_1A070:
0001AB8C 6000 0000                  		bra.w	loc_1A166
0001AB90                            ; ===========================================================================
0001AB90                            
0001AB90                            loc_1A074:				; XREF: off_19E80
0001AB90 08E8 0000 0022             		bset	#0,$22(a0)
0001AB96 117C 0004 001C             		move.b	#4,$1C(a0)
0001AB9C 4EB9 0000 E01E             		jsr	SpeedToPos
0001ABA2 0668 0010 0012             		addi.w	#$10,$12(a0)
0001ABA8 0C68 05A3 000C             		cmpi.w	#$5A3,$C(a0)
0001ABAE 6500                       		bcs.s	loc_1A09A
0001ABB0 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001ABB6                            
0001ABB6                            loc_1A09A:
0001ABB6 317C 0400 0010             		move.w	#$400,$10(a0)
0001ABBC 3028 0008                  		move.w	8(a0),d0
0001ABC0 9078 D008                  		sub.w	($FFFFD008).w,d0
0001ABC4 6A00                       		bpl.s	loc_1A0B4
0001ABC6 317C 0500 0010             		move.w	#$500,$10(a0)
0001ABCC 6000 0000                  		bra.w	loc_1A0F2
0001ABD0                            ; ===========================================================================
0001ABD0                            
0001ABD0                            loc_1A0B4:
0001ABD0 0440 0070                  		subi.w	#$70,d0
0001ABD4 6500                       		bcs.s	loc_1A0F2
0001ABD6 0468 0100 0010             		subi.w	#$100,$10(a0)
0001ABDC 5140                       		subq.w	#8,d0
0001ABDE 6500                       		bcs.s	loc_1A0F2
0001ABE0 0468 0100 0010             		subi.w	#$100,$10(a0)
0001ABE6 5140                       		subq.w	#8,d0
0001ABE8 6500                       		bcs.s	loc_1A0F2
0001ABEA 0468 0080 0010             		subi.w	#$80,$10(a0)
0001ABF0 5140                       		subq.w	#8,d0
0001ABF2 6500                       		bcs.s	loc_1A0F2
0001ABF4 0468 0080 0010             		subi.w	#$80,$10(a0)
0001ABFA 5140                       		subq.w	#8,d0
0001ABFC 6500                       		bcs.s	loc_1A0F2
0001ABFE 0468 0080 0010             		subi.w	#$80,$10(a0)
0001AC04 0440 0038                  		subi.w	#$38,d0
0001AC08 6500                       		bcs.s	loc_1A0F2
0001AC0A 4268 0010                  		clr.w	$10(a0)
0001AC0E                            
0001AC0E                            loc_1A0F2:
0001AC0E 0C68 26A0 0008             		cmpi.w	#$26A0,8(a0)
0001AC14 6500                       		bcs.s	loc_1A110
0001AC16 317C 26A0 0008             		move.w	#$26A0,8(a0)
0001AC1C 317C 0240 0010             		move.w	#$240,$10(a0)
0001AC22 317C FB40 0012             		move.w	#-$4C0,$12(a0)
0001AC28 5428 0034                  		addq.b	#2,$34(a0)
0001AC2C                            
0001AC2C                            loc_1A110:
0001AC2C 6000                       		bra.s	loc_1A15C
0001AC2E                            ; ===========================================================================
0001AC2E                            
0001AC2E                            loc_1A112:				; XREF: off_19E80
0001AC2E 4EB9 0000 E01E             		jsr	SpeedToPos
0001AC34 0C68 26E0 0008             		cmpi.w	#$26E0,8(a0)
0001AC3A 6500                       		bcs.s	loc_1A124
0001AC3C 4268 0010                  		clr.w	$10(a0)
0001AC40                            
0001AC40                            loc_1A124:
0001AC40 0668 0034 0012             		addi.w	#$34,$12(a0)
0001AC46 4A68 0012                  		tst.w	$12(a0)
0001AC4A 6B00                       		bmi.s	loc_1A142
0001AC4C 0C68 0592 000C             		cmpi.w	#$592,$C(a0)
0001AC52 6500                       		bcs.s	loc_1A142
0001AC54 317C 0592 000C             		move.w	#$592,$C(a0)
0001AC5A 4268 0012                  		clr.w	$12(a0)
0001AC5E                            
0001AC5E                            loc_1A142:
0001AC5E 3028 0010                  		move.w	$10(a0),d0
0001AC62 8068 0012                  		or.w	$12(a0),d0
0001AC66 6600                       		bne.s	loc_1A15C
0001AC68 5428 0034                  		addq.b	#2,$34(a0)
0001AC6C 317C FE80 0012             		move.w	#-$180,$12(a0)
0001AC72 117C 0001 0021             		move.b	#1,$21(a0)
0001AC78                            
0001AC78                            loc_1A15C:
0001AC78 43FA F8B6                  		lea	Ani_obj82(pc),a1
0001AC7C 4EB9 0000 B09A             		jsr	AnimateSprite
0001AC82                            
0001AC82                            loc_1A166:
0001AC82 0C78 2700 F72A             		cmpi.w	#$2700,($FFFFF72A).w
0001AC88 6C00                       		bge.s	loc_1A172
0001AC8A 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001AC8E                            
0001AC8E                            loc_1A172:
0001AC8E 0C28 000C 0034             		cmpi.b	#$C,$34(a0)
0001AC94 6C00                       		bge.s	locret_1A190
0001AC96 323C 001B                  		move.w	#$1B,d1
0001AC9A 343C 0070                  		move.w	#$70,d2
0001AC9E 363C 0071                  		move.w	#$71,d3
0001ACA2 3828 0008                  		move.w	8(a0),d4
0001ACA6 4EF9 0001 0414             		jmp	SolidObject
0001ACAC                            ; ===========================================================================
0001ACAC                            
0001ACAC                            locret_1A190:
0001ACAC 4E75                       		rts	
0001ACAE                            ; ===========================================================================
0001ACAE                            
0001ACAE                            loc_1A192:				; XREF: off_19E80
0001ACAE 217C 0001 88A4 0004        		move.l	#Map_Eggman,4(a0)
0001ACB6 317C 0400 0002             		move.w	#$400,2(a0)
0001ACBC 117C 0000 001C             		move.b	#0,$1C(a0)
0001ACC2 08E8 0000 0022             		bset	#0,$22(a0)
0001ACC8 4EB9 0000 E01E             		jsr	SpeedToPos
0001ACCE 0C68 0544 000C             		cmpi.w	#$544,$C(a0)
0001ACD4 6400                       		bcc.s	loc_1A1D0
0001ACD6 317C 0180 0010             		move.w	#$180,$10(a0)
0001ACDC 317C FFE8 0012             		move.w	#-$18,$12(a0)
0001ACE2 117C 000F 0020             		move.b	#$F,$20(a0)
0001ACE8 5428 0034                  		addq.b	#2,$34(a0)
0001ACEC                            
0001ACEC                            loc_1A1D0:
0001ACEC 6000 FF8A                  		bra.w	loc_1A15C
0001ACF0                            ; ===========================================================================
0001ACF0                            
0001ACF0                            loc_1A1D4:				; XREF: off_19E80
0001ACF0 08E8 0000 0022             		bset	#0,$22(a0)
0001ACF6 4EB9 0000 E01E             		jsr	SpeedToPos
0001ACFC 4A68 0030                  		tst.w	$30(a0)
0001AD00 6600                       		bne.s	loc_1A1FC
0001AD02 4A28 0020                  		tst.b	$20(a0)
0001AD06 6600                       		bne.s	loc_1A216
0001AD08 317C 001E 0030             		move.w	#$1E,$30(a0)
0001AD0E 303C 00AC                  		move.w	#$AC,d0
0001AD12 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001AD18                            
0001AD18                            loc_1A1FC:
0001AD18 5368 0030                  		subq.w	#1,$30(a0)
0001AD1C 6600                       		bne.s	loc_1A216
0001AD1E 4A28 0022                  		tst.b	$22(a0)
0001AD22 6A00                       		bpl.s	loc_1A210
0001AD24 317C 0060 0012             		move.w	#$60,$12(a0)
0001AD2A 6000                       		bra.s	loc_1A216
0001AD2C                            ; ===========================================================================
0001AD2C                            
0001AD2C                            loc_1A210:
0001AD2C 117C 000F 0020             		move.b	#$F,$20(a0)
0001AD32                            
0001AD32                            loc_1A216:
0001AD32 0C78 2790 D008             		cmpi.w	#$2790,($FFFFD008).w
0001AD38 6D00                       		blt.s	loc_1A23A
0001AD3A 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w
0001AD40 31FC 0000 F602             		move.w	#0,($FFFFF602).w
0001AD46 4278 D014                  		clr.w	($FFFFD014).w
0001AD4A 4A68 0012                  		tst.w	$12(a0)
0001AD4E 6A00                       		bpl.s	loc_1A248
0001AD50 31FC 0100 F602             		move.w	#$100,($FFFFF602).w
0001AD56                            
0001AD56                            loc_1A23A:
0001AD56 0C78 27E0 D008             		cmpi.w	#$27E0,($FFFFD008).w
0001AD5C 6D00                       		blt.s	loc_1A248
0001AD5E 31FC 27E0 D008             		move.w	#$27E0,($FFFFD008).w
0001AD64                            
0001AD64                            loc_1A248:
0001AD64 0C68 2900 0008             		cmpi.w	#$2900,8(a0)
0001AD6A 6500                       		bcs.s	loc_1A260
0001AD6C 4A28 0001                  		tst.b	1(a0)
0001AD70 6B00                       		bmi.s	loc_1A260
0001AD72 11FC 0018 F600             		move.b	#$18,($FFFFF600).w
0001AD78 6000 FAF0                  		bra.w	Obj85_Delete
0001AD7C                            ; ===========================================================================
0001AD7C                            
0001AD7C                            loc_1A260:
0001AD7C 6000 FEFA                  		bra.w	loc_1A15C
0001AD80                            ; ===========================================================================
0001AD80                            
0001AD80                            loc_1A264:				; XREF: Obj85_Index
0001AD80 2268 0034                  		movea.l	$34(a0),a1
0001AD84 1011                       		move.b	(a1),d0
0001AD86 B010                       		cmp.b	(a0),d0
0001AD88 6600 FAE0                  		bne.w	Obj85_Delete
0001AD8C 117C 0007 001C             		move.b	#7,$1C(a0)
0001AD92 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001AD98 6C00                       		bge.s	loc_1A280
0001AD9A 6000                       		bra.s	loc_1A2A6
0001AD9C                            ; ===========================================================================
0001AD9C                            
0001AD9C                            loc_1A280:
0001AD9C 4A69 0010                  		tst.w	$10(a1)
0001ADA0 6700                       		beq.s	loc_1A28C
0001ADA2 117C 000B 001C             		move.b	#$B,$1C(a0)
0001ADA8                            
0001ADA8                            loc_1A28C:
0001ADA8 43FA DA96                  		lea	Ani_Eggman(pc),a1
0001ADAC 4EB9 0000 B09A             		jsr	AnimateSprite
0001ADB2                            
0001ADB2                            loc_1A296:
0001ADB2 2268 0034                  		movea.l	$34(a0),a1
0001ADB6 3169 0008 0008             		move.w	8(a1),8(a0)
0001ADBC 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001ADC2                            
0001ADC2                            loc_1A2A6:
0001ADC2 2268 0034                  		movea.l	$34(a0),a1
0001ADC6 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001ADCC 7003                       		moveq	#3,d0
0001ADCE C028 0022                  		and.b	$22(a0),d0
0001ADD2 0228 00FC 0001             		andi.b	#-4,1(a0)
0001ADD8 8128 0001                  		or.b	d0,1(a0)
0001ADDC 4EF9 0000 E044             		jmp	DisplaySprite
0001ADE2                            ; ===========================================================================
0001ADE2                            
0001ADE2                            loc_1A2C6:				; XREF: Obj85_Index
0001ADE2 2268 0034                  		movea.l	$34(a0),a1
0001ADE6 1011                       		move.b	(a1),d0
0001ADE8 B010                       		cmp.b	(a0),d0
0001ADEA 6600 FA7E                  		bne.w	Obj85_Delete
0001ADEE 0CA9 0001 88A4 0004        		cmpi.l	#Map_Eggman,4(a1)
0001ADF6 6700                       		beq.s	loc_1A2E4
0001ADF8 117C 000A 001A             		move.b	#$A,$1A(a0)
0001ADFE 60C2                       		bra.s	loc_1A2A6
0001AE00                            ; ===========================================================================
0001AE00                            
0001AE00                            loc_1A2E4:
0001AE00 117C 0001 001C             		move.b	#1,$1C(a0)
0001AE06 4A29 0021                  		tst.b	$21(a1)
0001AE0A 6F00                       		ble.s	loc_1A312
0001AE0C 117C 0006 001C             		move.b	#6,$1C(a0)
0001AE12 217C 0001 88A4 0004        		move.l	#Map_Eggman,4(a0)
0001AE1A 317C 0400 0002             		move.w	#$400,2(a0)
0001AE20 43FA DA1E                  		lea	Ani_Eggman(pc),a1
0001AE24 4EB9 0000 B09A             		jsr	AnimateSprite
0001AE2A 6000 FF86                  		bra.w	loc_1A296
0001AE2E                            ; ===========================================================================
0001AE2E                            
0001AE2E                            loc_1A312:
0001AE2E 4A28 0001                  		tst.b	1(a0)
0001AE32 6A00 FA36                  		bpl.w	Obj85_Delete
0001AE36 6100 D584                  		bsr.w	BossDefeated
0001AE3A 117C 0002 0018             		move.b	#2,$18(a0)
0001AE40 117C 0000 001C             		move.b	#0,$1C(a0)
0001AE46 217C 0000 0000 0004        		move.l	#Map_Eggman2,4(a0)
0001AE4E 317C 03A0 0002             		move.w	#$3A0,2(a0)
0001AE54 43FA 0000                  		lea	Ani_obj85(pc),a1
0001AE58 4EB9 0000 B09A             		jsr	AnimateSprite
0001AE5E 6000 FF52                  		bra.w	loc_1A296
0001AE62                            ; ===========================================================================
0001AE62                            
0001AE62                            loc_1A346:				; XREF: Obj85_Index
0001AE62 08E8 0000 0022             		bset	#0,$22(a0)
0001AE68 2268 0034                  		movea.l	$34(a0),a1
0001AE6C 0CA9 0001 88A4 0004        		cmpi.l	#Map_Eggman,4(a1)
0001AE74 6700                       		beq.s	loc_1A35E
0001AE76 6000 FF4A                  		bra.w	loc_1A2A6
0001AE7A                            ; ===========================================================================
0001AE7A                            
0001AE7A                            loc_1A35E:
0001AE7A 3169 0008 0008             		move.w	8(a1),8(a0)
0001AE80 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001AE86 4A28 001E                  		tst.b	$1E(a0)
0001AE8A 6600                       		bne.s	loc_1A376
0001AE8C 117C 0014 001E             		move.b	#$14,$1E(a0)
0001AE92                            
0001AE92                            loc_1A376:
0001AE92 5328 001E                  		subq.b	#1,$1E(a0)
0001AE96 6E00                       		bgt.s	loc_1A38A
0001AE98 5228 001A                  		addq.b	#1,$1A(a0)
0001AE9C 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0001AEA2 6E00 F9C6                  		bgt.w	Obj85_Delete
0001AEA6                            
0001AEA6                            loc_1A38A:
0001AEA6 6000 FF0A                  		bra.w	loc_1A296
0001AEAA                            ; ===========================================================================
0001AEAA                            
0001AEAA                            loc_1A38E:				; XREF: Obj85_Index
0001AEAA 117C 000B 001A             		move.b	#$B,$1A(a0)
0001AEB0 3038 D008                  		move.w	($FFFFD008).w,d0
0001AEB4 9068 0008                  		sub.w	8(a0),d0
0001AEB8 6500                       		bcs.s	loc_1A3A6
0001AEBA 4A28 0001                  		tst.b	1(a0)
0001AEBE 6A00 F9AA                  		bpl.w	Obj85_Delete
0001AEC2                            
0001AEC2                            loc_1A3A6:
0001AEC2 4EF9 0000 E044             		jmp	DisplaySprite
0001AEC8                            ; ===========================================================================
0001AEC8                            
0001AEC8                            loc_1A3AC:				; XREF: Obj85_Index
0001AEC8 117C 0000 001A             		move.b	#0,$1A(a0)
0001AECE 08E8 0000 0022             		bset	#0,$22(a0)
0001AED4 2268 0034                  		movea.l	$34(a0),a1
0001AED8 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001AEDE 6600                       		bne.s	loc_1A3D0
0001AEE0 0CA9 0001 88A4 0004        		cmpi.l	#Map_Eggman,4(a1)
0001AEE8 6700 F980                  		beq.w	Obj85_Delete
0001AEEC                            
0001AEEC                            loc_1A3D0:
0001AEEC 6000 FED4                  		bra.w	loc_1A2A6
0001AEF0                            ; ===========================================================================
0001AEF0                            Ani_obj85:
0001AEF0                            	include "_anim\obj85.asm"
0001AEF0                            ; ---------------------------------------------------------------------------
0001AEF0                            ; Animation script - Eggman (FZ)
0001AEF0                            ; ---------------------------------------------------------------------------
0001AEF0 0000                       		dc.w byte_1A3D6-Ani_obj85
0001AEF2 0300 01FF                  byte_1A3D6:	dc.b 3,	0, 1, $FF
0001AEF6                            		even
0001AEF6                            		even
0001AEF6                            
0001AEF6                            Map_Eggman2:
0001AEF6                            	include "_maps\Eggman2.asm"
0001AEF6                            ; ---------------------------------------------------------------------------
0001AEF6                            ; Sprite mappings - Eggman (FZ)
0001AEF6                            ; ---------------------------------------------------------------------------
0001AEF6 0000                       		dc.w byte_1A3DE-Map_Eggman2
0001AEF8 0000                       		dc.w byte_1A3FD-Map_Eggman2
0001AEFA 06                         byte_1A3DE:	dc.b 6
0001AEFB E408 0020 F4               		dc.b $E4, 8, 0,	$20, $F4
0001AF00 EC0D 0023 E4               		dc.b $EC, $D, 0, $23, $E4
0001AF05 EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001AF0A FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001AF0F FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001AF14 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001AF19 06                         byte_1A3FD:	dc.b 6
0001AF1A E40A 0031 F4               		dc.b $E4, $A, 0, $31, $F4
0001AF1F EC05 0023 E4               		dc.b $EC, 5, 0,	$23, $E4
0001AF24 EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001AF29 FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001AF2E FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001AF33 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001AF38                            		even
0001AF38                            		even
0001AF38                            
0001AF38                            Map_FZBoss:
0001AF38                            	include "_maps\FZ boss.asm"
0001AF38                            ; ---------------------------------------------------------------------------
0001AF38                            ; Sprite mappings - boss (FZ)
0001AF38                            ; ---------------------------------------------------------------------------
0001AF38 0000                       		dc.w byte_1A422-Map_FZBoss
0001AF3A 0000                       		dc.w byte_1A42D-Map_FZBoss
0001AF3C 0000                       		dc.w byte_1A43D-Map_FZBoss
0001AF3E 02                         byte_1A422:	dc.b 2
0001AF3F 140E 2800 F4               		dc.b $14, $E, $28, 0, $F4
0001AF44 2400 280C EC               		dc.b $24, 0, $28, $C, $EC
0001AF49 03                         byte_1A42D:	dc.b 3
0001AF4A 0C05 280D 0C               		dc.b $C, 5, $28, $D, $C
0001AF4F 1C00 2811 0C               		dc.b $1C, 0, $28, $11, $C
0001AF54 140D 2812 EC               		dc.b $14, $D, $28, $12,	$EC
0001AF59 02                         byte_1A43D:	dc.b 2
0001AF5A 0C01 281A 0C               		dc.b $C, 1, $28, $1A, $C
0001AF5F 140C 281C EC               		dc.b $14, $C, $28, $1C,	$EC
0001AF64                            		even
0001AF64                            		even
0001AF64                            
0001AF64                            ; ===========================================================================
0001AF64                            
0001AF64                            Obj84_Delete:
0001AF64 4EF9 0000 E080             		jmp	DeleteObject
0001AF6A                            ; ===========================================================================
0001AF6A                            ; ---------------------------------------------------------------------------
0001AF6A                            ; Object 84 - cylinder Eggman	hides in (FZ)
0001AF6A                            ; ---------------------------------------------------------------------------
0001AF6A                            
0001AF6A                            Obj84:					; XREF: Obj_Index
0001AF6A 7000                       		moveq	#0,d0
0001AF6C 1028 0024                  		move.b	$24(a0),d0
0001AF70 303B 0000                  		move.w	Obj84_Index(pc,d0.w),d0
0001AF74 4EFB 0000                  		jmp	Obj84_Index(pc,d0.w)
0001AF78                            ; ===========================================================================
0001AF78 0000                       Obj84_Index:	dc.w Obj84_Main-Obj84_Index
0001AF7A 0000                       		dc.w loc_1A4CE-Obj84_Index
0001AF7C 0000                       		dc.w loc_1A57E-Obj84_Index
0001AF7E                            
0001AF7E 24D0 0620                  Obj84_PosData:	dc.w $24D0, $620
0001AF82 2550 0620                  		dc.w $2550, $620
0001AF86 2490 04C0                  		dc.w $2490, $4C0
0001AF8A 2510 04C0                  		dc.w $2510, $4C0
0001AF8E                            ; ===========================================================================
0001AF8E                            
0001AF8E                            Obj84_Main:				; XREF: Obj84_Index
0001AF8E 43FA FFEE                  		lea	Obj84_PosData(pc),a1
0001AF92 7000                       		moveq	#0,d0
0001AF94 1028 0028                  		move.b	$28(a0),d0
0001AF98 D040                       		add.w	d0,d0
0001AF9A D2C0                       		adda.w	d0,a1
0001AF9C 117C 0004 0001             		move.b	#4,1(a0)
0001AFA2 08E8 0007 0001             		bset	#7,1(a0)
0001AFA8 08E8 0004 0001             		bset	#4,1(a0)
0001AFAE 317C 0300 0002             		move.w	#$300,2(a0)
0001AFB4 217C 0000 0000 0004        		move.l	#Map_obj84,4(a0)
0001AFBC 3159 0008                  		move.w	(a1)+,8(a0)
0001AFC0 3151 000C                  		move.w	(a1),$C(a0)
0001AFC4 3159 0038                  		move.w	(a1)+,$38(a0)
0001AFC8 117C 0020 0016             		move.b	#$20,$16(a0)
0001AFCE 117C 0060 0017             		move.b	#$60,$17(a0)
0001AFD4 117C 0020 0019             		move.b	#$20,$19(a0)
0001AFDA 117C 0060 0016             		move.b	#$60,$16(a0)
0001AFE0 117C 0003 0018             		move.b	#3,$18(a0)
0001AFE6 5428 0024                  		addq.b	#2,$24(a0)
0001AFEA                            
0001AFEA                            loc_1A4CE:				; XREF: Obj84_Index
0001AFEA 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001AFF0 6F00                       		ble.s	loc_1A4DC
0001AFF2 08E8 0001 0001             		bset	#1,1(a0)
0001AFF8                            
0001AFF8                            loc_1A4DC:
0001AFF8 42A8 003C                  		clr.l	$3C(a0)
0001AFFC 4A28 0029                  		tst.b	$29(a0)
0001B000 6700                       		beq.s	loc_1A4EA
0001B002 5428 0024                  		addq.b	#2,$24(a0)
0001B006                            
0001B006                            loc_1A4EA:
0001B006 2028 003C                  		move.l	$3C(a0),d0
0001B00A 2228 0038                  		move.l	$38(a0),d1
0001B00E D280                       		add.l	d0,d1
0001B010 4841                       		swap	d1
0001B012 3141 000C                  		move.w	d1,$C(a0)
0001B016 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0001B01C 6600                       		bne.s	loc_1A524
0001B01E 4A68 0030                  		tst.w	$30(a0)
0001B022 6A00                       		bpl.s	loc_1A524
0001B024 70F6                       		moveq	#-$A,d0
0001B026 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001B02C 6F00                       		ble.s	loc_1A514
0001B02E 700E                       		moveq	#$E,d0
0001B030                            
0001B030                            loc_1A514:
0001B030 D240                       		add.w	d0,d1
0001B032 2268 0034                  		movea.l	$34(a0),a1
0001B036 3341 000C                  		move.w	d1,$C(a1)
0001B03A 3368 0008 0008             		move.w	8(a0),8(a1)
0001B040                            
0001B040                            loc_1A524:
0001B040 323C 002B                  		move.w	#$2B,d1
0001B044 343C 0060                  		move.w	#$60,d2
0001B048 363C 0061                  		move.w	#$61,d3
0001B04C 3828 0008                  		move.w	8(a0),d4
0001B050 4EB9 0001 0414             		jsr	SolidObject
0001B056 7000                       		moveq	#0,d0
0001B058 3228 003C                  		move.w	$3C(a0),d1
0001B05C 6A00                       		bpl.s	loc_1A550
0001B05E 4441                       		neg.w	d1
0001B060 5141                       		subq.w	#8,d1
0001B062 6500                       		bcs.s	loc_1A55C
0001B064 5200                       		addq.b	#1,d0
0001B066 E841                       		asr.w	#4,d1
0001B068 D041                       		add.w	d1,d0
0001B06A 6000                       		bra.s	loc_1A55C
0001B06C                            ; ===========================================================================
0001B06C                            
0001B06C                            loc_1A550:
0001B06C 0441 0027                  		subi.w	#$27,d1
0001B070 6500                       		bcs.s	loc_1A55C
0001B072 5200                       		addq.b	#1,d0
0001B074 E841                       		asr.w	#4,d1
0001B076 D041                       		add.w	d1,d0
0001B078                            
0001B078                            loc_1A55C:
0001B078 1140 001A                  		move.b	d0,$1A(a0)
0001B07C 3038 D008                  		move.w	($FFFFD008).w,d0
0001B080 9068 0008                  		sub.w	8(a0),d0
0001B084 6B00                       		bmi.s	loc_1A578
0001B086 0440 0140                  		subi.w	#$140,d0
0001B08A 6B00                       		bmi.s	loc_1A578
0001B08C 4A28 0001                  		tst.b	1(a0)
0001B090 6A00 FED2                  		bpl.w	Obj84_Delete
0001B094                            
0001B094                            loc_1A578:
0001B094 4EF9 0000 E044             		jmp	DisplaySprite
0001B09A                            ; ===========================================================================
0001B09A                            
0001B09A                            loc_1A57E:				; XREF: Obj84_Index
0001B09A 7000                       		moveq	#0,d0
0001B09C 1028 0028                  		move.b	$28(a0),d0
0001B0A0 303B 0000                  		move.w	off_1A590(pc,d0.w),d0
0001B0A4 4EBB 0000                  		jsr	off_1A590(pc,d0.w)
0001B0A8 6000 FF5C                  		bra.w	loc_1A4EA
0001B0AC                            ; ===========================================================================
0001B0AC 0000                       off_1A590:	dc.w loc_1A598-off_1A590
0001B0AE 0000                       		dc.w loc_1A598-off_1A590
0001B0B0 0000                       		dc.w loc_1A604-off_1A590
0001B0B2 0000                       		dc.w loc_1A604-off_1A590
0001B0B4                            ; ===========================================================================
0001B0B4                            
0001B0B4                            loc_1A598:				; XREF: off_1A590
0001B0B4 4A28 0029                  		tst.b	$29(a0)
0001B0B8 6600                       		bne.s	loc_1A5D4
0001B0BA 2268 0034                  		movea.l	$34(a0),a1
0001B0BE 4A79 00FF 7FFE             		tst.w	($FF7FFE).l
0001B0C4 6600                       		bne.s	loc_1A5B4
0001B0C6 6100 D2F4                  		bsr.w	BossDefeated
0001B0CA 04A8 0001 0000 003C        		subi.l	#$10000,$3C(a0)
0001B0D2                            
0001B0D2                            loc_1A5B4:
0001B0D2 06A8 0002 0000 003C        		addi.l	#$20000,$3C(a0)
0001B0DA 6400                       		bcc.s	locret_1A602
0001B0DC 42A8 003C                  		clr.l	$3C(a0)
0001B0E0 2268 0034                  		movea.l	$34(a0),a1
0001B0E4 5369 0032                  		subq.w	#1,$32(a1)
0001B0E8 4269 0030                  		clr.w	$30(a1)
0001B0EC 5528 0024                  		subq.b	#2,$24(a0)
0001B0F0 4E75                       		rts	
0001B0F2                            ; ===========================================================================
0001B0F2                            
0001B0F2                            loc_1A5D4:
0001B0F2 0C68 FFF0 003C             		cmpi.w	#-$10,$3C(a0)
0001B0F8 6C00                       		bge.s	loc_1A5E4
0001B0FA 04A8 0002 8000 003C        		subi.l	#$28000,$3C(a0)
0001B102                            
0001B102                            loc_1A5E4:
0001B102 04A8 0000 8000 003C        		subi.l	#$8000,$3C(a0)
0001B10A 0C68 FF60 003C             		cmpi.w	#-$A0,$3C(a0)
0001B110 6E00                       		bgt.s	locret_1A602
0001B112 4268 003E                  		clr.w	$3E(a0)
0001B116 317C FF60 003C             		move.w	#-$A0,$3C(a0)
0001B11C 4228 0029                  		clr.b	$29(a0)
0001B120                            
0001B120                            locret_1A602:
0001B120 4E75                       		rts	
0001B122                            ; ===========================================================================
0001B122                            
0001B122                            loc_1A604:				; XREF: off_1A590
0001B122 08E8 0001 0001             		bset	#1,1(a0)
0001B128 4A28 0029                  		tst.b	$29(a0)
0001B12C 6600                       		bne.s	loc_1A646
0001B12E 2268 0034                  		movea.l	$34(a0),a1
0001B132 4A79 00FF 7FFE             		tst.w	($FF7FFE).l
0001B138 6600                       		bne.s	loc_1A626
0001B13A 6100 D280                  		bsr.w	BossDefeated
0001B13E 06A8 0001 0000 003C        		addi.l	#$10000,$3C(a0)
0001B146                            
0001B146                            loc_1A626:
0001B146 04A8 0002 0000 003C        		subi.l	#$20000,$3C(a0)
0001B14E 6400                       		bcc.s	locret_1A674
0001B150 42A8 003C                  		clr.l	$3C(a0)
0001B154 2268 0034                  		movea.l	$34(a0),a1
0001B158 5369 0032                  		subq.w	#1,$32(a1)
0001B15C 4269 0030                  		clr.w	$30(a1)
0001B160 5528 0024                  		subq.b	#2,$24(a0)
0001B164 4E75                       		rts	
0001B166                            ; ===========================================================================
0001B166                            
0001B166                            loc_1A646:
0001B166 0C68 0010 003C             		cmpi.w	#$10,$3C(a0)
0001B16C 6D00                       		blt.s	loc_1A656
0001B16E 06A8 0002 8000 003C        		addi.l	#$28000,$3C(a0)
0001B176                            
0001B176                            loc_1A656:
0001B176 06A8 0000 8000 003C        		addi.l	#$8000,$3C(a0)
0001B17E 0C68 00A0 003C             		cmpi.w	#$A0,$3C(a0)
0001B184 6D00                       		blt.s	locret_1A674
0001B186 4268 003E                  		clr.w	$3E(a0)
0001B18A 317C 00A0 003C             		move.w	#$A0,$3C(a0)
0001B190 4228 0029                  		clr.b	$29(a0)
0001B194                            
0001B194                            locret_1A674:
0001B194 4E75                       		rts	
0001B196                            ; ===========================================================================
0001B196                            ; ---------------------------------------------------------------------------
0001B196                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001B196                            ; ---------------------------------------------------------------------------
0001B196                            Map_obj84:
0001B196                            	include "_maps\obj84.asm"
0001B196                            ; ---------------------------------------------------------------------------
0001B196                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001B196                            ; ---------------------------------------------------------------------------
0001B196 0000 0000                  		dc.w byte_1A68E-Map_obj84, byte_1A6AD-Map_obj84
0001B19A 0000 0000                  		dc.w byte_1A6D6-Map_obj84, byte_1A709-Map_obj84
0001B19E 0000 0000                  		dc.w byte_1A746-Map_obj84, byte_1A788-Map_obj84
0001B1A2 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001B1A6 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001B1AA 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A7CF-Map_obj84
0001B1AE 06                         byte_1A68E:	dc.b 6
0001B1AF A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001B1B4 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001B1B9 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001B1BE B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001B1C3 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001B1C8 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001B1CD 08                         byte_1A6AD:	dc.b 8
0001B1CE A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001B1D3 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001B1D8 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001B1DD B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001B1E2 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001B1E7 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001B1EC D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001B1F1 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001B1F6 0A                         byte_1A6D6:	dc.b $A
0001B1F7 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001B1FC A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001B201 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001B206 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001B20B B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001B210 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001B215 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001B21A D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001B21F F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001B224 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001B229 0C                         byte_1A709:	dc.b $C
0001B22A A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001B22F A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001B234 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001B239 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001B23E B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001B243 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001B248 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001B24D D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001B252 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001B257 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001B25C 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001B261 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001B266 0D                         byte_1A746:	dc.b $D
0001B267 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001B26C A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001B271 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001B276 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001B27B B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001B280 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001B285 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001B28A D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001B28F F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001B294 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001B299 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001B29E 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001B2A3 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001B2A8 0E                         byte_1A788:	dc.b $E
0001B2A9 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001B2AE A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001B2B3 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001B2B8 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001B2BD B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001B2C2 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001B2C7 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001B2CC D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001B2D1 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001B2D6 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001B2DB 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001B2E0 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001B2E5 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001B2EA 580F 4050 F0               		dc.b $58, $F, $40, $50,	$F0
0001B2EF 02                         byte_1A7CF:	dc.b 2
0001B2F0 F804 0068 F0               		dc.b $F8, 4, 0,	$68, $F0
0001B2F5 000C 006A F0               		dc.b 0,	$C, 0, $6A, $F0
0001B2FA                            		even
0001B2FA                            		even
0001B2FA                            
0001B2FA                            ; ===========================================================================
0001B2FA                            ; ---------------------------------------------------------------------------
0001B2FA                            ; Object 86 - energy balls (FZ)
0001B2FA                            ; ---------------------------------------------------------------------------
0001B2FA                            
0001B2FA                            Obj86:					; XREF: Obj_Index
0001B2FA 7000                       		moveq	#0,d0
0001B2FC 1028 0024                  		move.b	$24(a0),d0
0001B300 303B 0000                  		move.w	Obj86_Index(pc,d0.w),d0
0001B304 4EFB 0000                  		jmp	Obj86_Index(pc,d0.w)
0001B308                            ; ===========================================================================
0001B308 0000                       Obj86_Index:	dc.w Obj86_Main-Obj86_Index
0001B30A 0000                       		dc.w Obj86_Generator-Obj86_Index
0001B30C 0000                       		dc.w Obj86_MakeBalls-Obj86_Index
0001B30E 0000                       		dc.w loc_1A962-Obj86_Index
0001B310 0000                       		dc.w loc_1A982-Obj86_Index
0001B312                            ; ===========================================================================
0001B312                            
0001B312                            Obj86_Main:				; XREF: Obj86_Index
0001B312 317C 2588 0008             		move.w	#$2588,8(a0)
0001B318 317C 053C 000C             		move.w	#$53C,$C(a0)
0001B31E 317C 0300 0002             		move.w	#$300,2(a0)
0001B324 217C 0000 0000 0004        		move.l	#Map_obj86,4(a0)
0001B32C 117C 0000 001C             		move.b	#0,$1C(a0)
0001B332 117C 0003 0018             		move.b	#3,$18(a0)
0001B338 117C 0008 0017             		move.b	#8,$17(a0)
0001B33E 117C 0008 0016             		move.b	#8,$16(a0)
0001B344 117C 0004 0001             		move.b	#4,1(a0)
0001B34A 08E8 0007 0001             		bset	#7,1(a0)
0001B350 5428 0024                  		addq.b	#2,$24(a0)
0001B354                            
0001B354                            Obj86_Generator:			; XREF: Obj86_Index
0001B354 2268 0034                  		movea.l	$34(a0),a1
0001B358 0C29 0006 0034             		cmpi.b	#6,$34(a1)
0001B35E 6600                       		bne.s	loc_1A850
0001B360 10BC 003F                  		move.b	#$3F,(a0)
0001B364 117C 0000 0024             		move.b	#0,$24(a0)
0001B36A 4EF9 0000 E044             		jmp	DisplaySprite
0001B370                            ; ===========================================================================
0001B370                            
0001B370                            loc_1A850:
0001B370 117C 0000 001C             		move.b	#0,$1C(a0)
0001B376 4A28 0029                  		tst.b	$29(a0)
0001B37A 6700                       		beq.s	loc_1A86C
0001B37C 5428 0024                  		addq.b	#2,$24(a0)
0001B380 117C 0001 001C             		move.b	#1,$1C(a0)
0001B386 117C 003E 0028             		move.b	#$3E,$28(a0)
0001B38C                            
0001B38C                            loc_1A86C:
0001B38C 323C 0013                  		move.w	#$13,d1
0001B390 343C 0008                  		move.w	#8,d2
0001B394 363C 0011                  		move.w	#$11,d3
0001B398 3828 0008                  		move.w	8(a0),d4
0001B39C 4EB9 0001 0414             		jsr	SolidObject
0001B3A2 3038 D008                  		move.w	($FFFFD008).w,d0
0001B3A6 9068 0008                  		sub.w	8(a0),d0
0001B3AA 6B00                       		bmi.s	loc_1A89A
0001B3AC 0440 0140                  		subi.w	#$140,d0
0001B3B0 6B00                       		bmi.s	loc_1A89A
0001B3B2 4A28 0001                  		tst.b	1(a0)
0001B3B6 6A00 FBAC                  		bpl.w	Obj84_Delete
0001B3BA                            
0001B3BA                            loc_1A89A:
0001B3BA 43FA 0000                  		lea	Ani_obj86(pc),a1
0001B3BE 4EB9 0000 B09A             		jsr	AnimateSprite
0001B3C4 4EF9 0000 E044             		jmp	DisplaySprite
0001B3CA                            ; ===========================================================================
0001B3CA                            
0001B3CA                            Obj86_MakeBalls:			; XREF: Obj86_Index
0001B3CA 4A28 0029                  		tst.b	$29(a0)
0001B3CE 6700 0000                  		beq.w	loc_1A954
0001B3D2 4228 0029                  		clr.b	$29(a0)
0001B3D6 D068 0030                  		add.w	$30(a0),d0
0001B3DA 0240 001E                  		andi.w	#$1E,d0
0001B3DE D4C0                       		adda.w	d0,a2
0001B3E0 5868 0030                  		addq.w	#4,$30(a0)
0001B3E4 4268 0032                  		clr.w	$32(a0)
0001B3E8 7403                       		moveq	#3,d2
0001B3EA                            
0001B3EA                            Obj86_Loop:
0001B3EA 4EB9 0000 E4E0             		jsr	SingleObjLoad2
0001B3F0 6600 0000                  		bne.w	loc_1A954
0001B3F4 12BC 0086                  		move.b	#$86,(a1)
0001B3F8 3368 0008 0008             		move.w	8(a0),8(a1)
0001B3FE 337C 053C 000C             		move.w	#$53C,$C(a1)
0001B404 137C 0008 0024             		move.b	#8,$24(a1)
0001B40A 337C 2300 0002             		move.w	#$2300,2(a1)
0001B410 237C 0000 0000 0004        		move.l	#Map_obj86a,4(a1)
0001B418 137C 000C 0016             		move.b	#$C,$16(a1)
0001B41E 137C 000C 0017             		move.b	#$C,$17(a1)
0001B424 137C 0000 0020             		move.b	#0,$20(a1)
0001B42A 137C 0003 0018             		move.b	#3,$18(a1)
0001B430 337C 003E 0028             		move.w	#$3E,$28(a1)
0001B436 137C 0004 0001             		move.b	#4,1(a1)
0001B43C 08E9 0007 0001             		bset	#7,1(a1)
0001B442 2348 0034                  		move.l	a0,$34(a1)
0001B446 4EB9 0000 2D0E             		jsr	(RandomNumber).l
0001B44C 3228 0032                  		move.w	$32(a0),d1
0001B450 C3FC FFB1                  		muls.w	#-$4F,d1
0001B454 0641 2578                  		addi.w	#$2578,d1
0001B458 0240 001F                  		andi.w	#$1F,d0
0001B45C 0440 0010                  		subi.w	#$10,d0
0001B460 D041                       		add.w	d1,d0
0001B462 3340 0030                  		move.w	d0,$30(a1)
0001B466 5268 0032                  		addq.w	#1,$32(a0)
0001B46A 3168 0032 0038             		move.w	$32(a0),$38(a0)
0001B470 51CA FF78                  		dbf	d2,Obj86_Loop	; repeat sequence 3 more times
0001B474                            
0001B474                            loc_1A954:
0001B474 4A68 0032                  		tst.w	$32(a0)
0001B478 6600                       		bne.s	loc_1A95E
0001B47A 5428 0024                  		addq.b	#2,$24(a0)
0001B47E                            
0001B47E                            loc_1A95E:
0001B47E 6000 FF0C                  		bra.w	loc_1A86C
0001B482                            ; ===========================================================================
0001B482                            
0001B482                            loc_1A962:				; XREF: Obj86_Index
0001B482 117C 0002 001C             		move.b	#2,$1C(a0)
0001B488 4A68 0038                  		tst.w	$38(a0)
0001B48C 6600                       		bne.s	loc_1A97E
0001B48E 117C 0002 0024             		move.b	#2,$24(a0)
0001B494 2268 0034                  		movea.l	$34(a0),a1
0001B498 337C FFFF 0032             		move.w	#-1,$32(a1)
0001B49E                            
0001B49E                            loc_1A97E:
0001B49E 6000 FEEC                  		bra.w	loc_1A86C
0001B4A2                            ; ===========================================================================
0001B4A2                            
0001B4A2                            loc_1A982:				; XREF: Obj86_Index
0001B4A2 7000                       		moveq	#0,d0
0001B4A4 1028 0025                  		move.b	$25(a0),d0
0001B4A8 303B 0000                  		move.w	Obj86_Index2(pc,d0.w),d0
0001B4AC 4EFB 0000                  		jmp	Obj86_Index2(pc,d0.w)
0001B4B0                            ; ===========================================================================
0001B4B0 0000                       Obj86_Index2:	dc.w loc_1A9A6-Obj86_Index2
0001B4B2 0000                       		dc.w loc_1A9C0-Obj86_Index2
0001B4B4 0000                       		dc.w Obj86_Ball_Standard-Obj86_Index2	; orb random 1
0001B4B6 0000                       		dc.w Obj86_Ball_Sine-Obj86_Index2	; rob random 2
0001B4B8 0000                       		dc.w Obj86_Ball_Explode-Obj86_Index2	; orb random 3
0001B4BA 0000                       		dc.w Obj86_Ball_Speed-Obj86_Index2	; yeah you get it
0001B4BC 0000                       		dc.w Obj86_Ball_Standard-Obj86_Index2
0001B4BE 0000                       		dc.w Obj86_Ball_Homing-Obj86_Index2
0001B4C0 0000                       		dc.w Obj86_Ball_Standard-Obj86_Index2
0001B4C2 0000                       		dc.w Obj86_Ball_Static-Obj86_Index2
0001B4C4                            ; ===========================================================================
0001B4C4                            
0001B4C4                            loc_1A9A6:				; XREF: Obj86_Index2
0001B4C4 3028 0030                  		move.w	$30(a0),d0
0001B4C8 9068 0008                  		sub.w	8(a0),d0
0001B4CC E940                       		asl.w	#4,d0
0001B4CE 3140 0010                  		move.w	d0,$10(a0)
0001B4D2 317C 00B4 0028             		move.w	#$B4,$28(a0)
0001B4D8 5428 0025                  		addq.b	#2,$25(a0)
0001B4DC                            
0001B4DC                            Obj86_Ball_Animate:
0001B4DC 43FA 0000                  		lea	Ani_obj86a(pc),a1
0001B4E0 4EB9 0000 B09A             		jsr	AnimateSprite
0001B4E6 4EF9 0000 E044             		jmp	DisplaySprite
0001B4EC                            ; ===========================================================================
0001B4EC                            
0001B4EC                            loc_1A9C0:				; XREF: Obj86_Index2
0001B4EC 4A68 0010                  		tst.w	$10(a0)
0001B4F0 6700                       		beq.s	loc_1A9E6
0001B4F2 4EB9 0000 E01E             		jsr	SpeedToPos
0001B4F8 3028 0008                  		move.w	8(a0),d0
0001B4FC 9068 0030                  		sub.w	$30(a0),d0
0001B500 6400                       		bcc.s	loc_1A9E6
0001B502 4268 0010                  		clr.w	$10(a0)
0001B506 D168 0008                  		add.w	d0,8(a0)
0001B50A 2268 0034                  		movea.l	$34(a0),a1
0001B50E 5369 0032                  		subq.w	#1,$32(a1)
0001B512                            
0001B512                            loc_1A9E6:
0001B512 117C 0000 001C             		move.b	#0,$1C(a0)
0001B518 5368 0028                  		subq.w	#1,$28(a0)
0001B51C 6600                       		bne.s	locret_1AA1C
0001B51E 4EB8 2D0E                  		jsr	RandomNumber
0001B522 0240 000E                  		and.w	#7*2,d0
0001B526 5840                       		addq.w	#2*2,d0
0001B528 1140 0025                  		move.b	d0,$25(a0)	; set routine
0001B52C 4840                       		swap	d0
0001B52E 3140 0028                  		move.w	d0,$28(a0)	; set other number
0001B532 117C 0001 001C             		move.b	#1,$1C(a0)
0001B538 117C 009A 0020             		move.b	#$9A,$20(a0)
0001B53E 3038 D008                  		move.w	($FFFFD008).w,d0
0001B542 9068 0008                  		sub.w	8(a0),d0
0001B546 3140 0010                  		move.w	d0,$10(a0)
0001B54A 317C 0140 0012             		move.w	#$140,$12(a0)
0001B550                            
0001B550                            locret_1AA1C:
0001B550 6000 FF8A                  		bra.w	Obj86_Ball_Animate
0001B554                            ; ===========================================================================
0001B554                            
0001B554                            Obj86_Ball_Explode:
0001B554 5328 0028                  		subq.b	#1,$28(a0)
0001B558 6A00 FF82                  		bpl.w	Obj86_Ball_Animate
0001B55C 2268 0034                  		movea.l	$34(a0),a1
0001B560 5369 0038                  		subq.w	#1,$38(a1)
0001B564 2248                       		move.l	a0,a1
0001B566 7400                       		moveq	#0,d2	; GMZ
0001B568 720F                       		moveq	#16-1,d1	; GMZ: Amount of explosion objects
0001B56A 6000                       		bra.s	@start
0001B56C                            @loop:
0001B56C 4EB9 0000 E4CA             		jsr	SingleObjLoad
0001B572 6600                       		bne.s	@exit
0001B574 3368 0008 0008             		move.w	8(a0),8(a1)
0001B57A 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B580                            @start:
0001B580 12BC 0027                  		move.b	#$27,0(a1)	; change object	to points
0001B584 137C 0002 0024             		move.b	#2,$24(a1)	; ML: no animal
0001B58A 1342 0028                  		move.b	d2,$28(a1)	; GMZ: Set subtype:
0001B58E 5802                       		addq.b	#4,d2
0001B590 51C9 FFDA                  		dbf	d1,@loop
0001B594                            @exit:
0001B594 6000 FF46                  		bra.w	Obj86_Ball_Animate
0001B598                            ; ===========================================================================
0001B598                            
0001B598                            Obj86_Ball_Sine:
0001B598 1028 0028                  		move.b	$28(a0),d0
0001B59C 5828 0028                  		addq.b	#4,$28(a0)
0001B5A0 4EB8 2D34                  		jsr	CalcSine
0001B5A4 C1FC 0002                  		muls.w	#2,d0
0001B5A8 3140 0010                  		move.w	d0,$10(a0)
0001B5AC                            
0001B5AC 1028 0029                  		move.b	$29(a0),d0
0001B5B0 5828 0029                  		addq.b	#4,$29(a0)
0001B5B4 4EB8 2D34                  		jsr	CalcSine
0001B5B8 4A40                       		tst.w	d0
0001B5BA 6B00                       		bmi.s	@upwards
0001B5BC E548                       		lsl.w	#2,d0		; x4 go down faster
0001B5BE                            @upwards:
0001B5BE 3140 0012                  		move.w	d0,$12(a0)
0001B5C2 6000 0000                  		bra.w	loc_1AA1E
0001B5C6                            ; ===========================================================================
0001B5C6                            
0001B5C6                            Obj86_Ball_Homing:
0001B5C6 0C28 00F0 0028             		cmp.b	#$F0,$28(a0)
0001B5CC 6400                       		bhs.s	@homer
0001B5CE 0C28 00E0 0028             		cmp.b	#$E0,$28(a0)
0001B5D4 6400                       		bhs.s	Obj86_Ball_Vanish
0001B5D6 5328 0028                  		subq.b	#1,$28(a0)
0001B5DA 6400                       		bcc.s	@nomorehoming
0001B5DC 3038 D008                  		move.w	($FFFFD008).w,d0
0001B5E0 9068 0008                  		sub.w	8(a0),d0
0001B5E4 D168 0010                  		add.w	d0,$10(a0)
0001B5E8 D168 0010                  		add.w	d0,$10(a0)
0001B5EC                            @nomorehoming:
0001B5EC 6000 0000                  		bra.w	loc_1AA1E
0001B5F0                            @homer:
0001B5F0 0C28 00DF 0028             		cmp.b	#$DF,$28(a0)
0001B5F6 60F4                       		bra.s	@nomorehoming	; next frame ig
0001B5F8                            ; ===========================================================================
0001B5F8                            
0001B5F8                            Obj86_Ball_Speed:
0001B5F8 4268 0010                  		clr.w	$10(a0)
0001B5FC 7000                       		moveq	#0,d0
0001B5FE 1028 0028                  		move.b	$28(a0),d0
0001B602 E448                       		lsr.w	#2,d0
0001B604 D168 0012                  		add.w	d0,$12(a0)
0001B608 1028 0029                  		move.b	$29(a0),d0
0001B60C D128 0028                  		add.b	d0,$28(a0)
0001B610 6000 0000                  		bra.w	loc_1AA1E
0001B614                            ; ===========================================================================
0001B614                            
0001B614                            Obj86_Ball_Vanish:
0001B614 303C 00E1                  		move.w	#$E1,d0
0001B618 4EB9 0000 159A             		jsr	(PlaySound_Special).l
0001B61E 6000 0000                  		bra.w	loc_1AA34
0001B622                            ; ===========================================================================
0001B622                            
0001B622                            Obj86_Ball_Static:
0001B622 4268 0010                  		clr.w	$10(a0)
0001B626 7000                       		moveq	#0,d0
0001B628 7200                       		moveq	#0,d1
0001B62A 1028 0028                  		move.b	$28(a0),d0
0001B62E 1228 0029                  		move.b	$29(a0),d1
0001B632 D041                       		add.w	d1,d0
0001B634 3140 0012                  		move.w	d0,$12(a0)
0001B638 6000 0000                  		bra.w	loc_1AA1E
0001B63C                            ; ===========================================================================
0001B63C                            
0001B63C                            Obj86_Ball_Standard:
0001B63C                            loc_1AA1E:
0001B63C 4EB9 0000 E01E             		jsr	SpeedToPos
0001B642 0C68 05E0 000C             		cmpi.w	#$5E0,$C(a0)
0001B648 6500 FE92                  		blo.w	Obj86_Ball_Animate
0001B64C                            loc_1AA34:
0001B64C 2268 0034                  		movea.l	$34(a0),a1
0001B650 5369 0038                  		subq.w	#1,$38(a1)
0001B654 6000 F90E                  		bra.w	Obj84_Delete
0001B658                            ; ===========================================================================
0001B658                            Ani_obj86:
0001B658                            	include "_anim\obj86.asm"
0001B658                            ; ---------------------------------------------------------------------------
0001B658                            ; Animation script - energy ball launcher (FZ)
0001B658                            ; ---------------------------------------------------------------------------
0001B658 0000                       		dc.w byte_1AA46-Ani_obj86
0001B65A 0000                       		dc.w byte_1AA4A-Ani_obj86
0001B65C 0000                       		dc.w byte_1AA50-Ani_obj86
0001B65E 7E00 FF00                  byte_1AA46:	dc.b $7E, 0, $FF, 0
0001B662 0100 0200 03FF             byte_1AA4A:	dc.b 1,	0, 2, 0, 3, $FF
0001B668 0101 0201 03FF             byte_1AA50:	dc.b 1,	1, 2, 1, 3, $FF
0001B66E                            		even
0001B66E                            		even
0001B66E                            
0001B66E                            ; ---------------------------------------------------------------------------
0001B66E                            ; Sprite mappings - energy ball	launcher (FZ)
0001B66E                            ; ---------------------------------------------------------------------------
0001B66E                            Map_obj86:
0001B66E                            	include "_maps\obj86.asm"
0001B66E                            ; ---------------------------------------------------------------------------
0001B66E                            ; Sprite mappings - energy ball	launcher (FZ)
0001B66E                            ; ---------------------------------------------------------------------------
0001B66E 0000 0000                  		dc.w byte_1AA5E-Map_obj86, byte_1AA64-Map_obj86
0001B672 0000 0000                  		dc.w byte_1AA6A-Map_obj86, byte_1AA70-Map_obj86
0001B676 01                         byte_1AA5E:	dc.b 1
0001B677 F805 006E F8               		dc.b $F8, 5, 0,	$6E, $F8
0001B67C 01                         byte_1AA64:	dc.b 1
0001B67D F805 0076 F8               		dc.b $F8, 5, 0,	$76, $F8
0001B682 01                         byte_1AA6A:	dc.b 1
0001B683 F805 0072 F8               		dc.b $F8, 5, 0,	$72, $F8
0001B688 01                         byte_1AA70:	dc.b 1
0001B689 F805 1072 F8               		dc.b $F8, 5, $10, $72, $F8
0001B68E                            		even
0001B68E                            		even
0001B68E                            
0001B68E                            Ani_obj86a:
0001B68E                            	include "_anim\obj86a.asm"
0001B68E                            ; ---------------------------------------------------------------------------
0001B68E                            ; Animation script - energy balls (FZ)
0001B68E                            ; ---------------------------------------------------------------------------
0001B68E 0000                       		dc.w byte_1AA7A-Ani_obj86a
0001B690 0000                       		dc.w byte_1AA9C-Ani_obj86a
0001B692 0100 0A08 0A01 0A09 0A06+  byte_1AA7A:	dc.b 1,	0, $A, 8, $A, 1, $A, 9,	$A, 6, $A, 7, $A, 0, $A
0001B6A1 080A 010A 090A 060A 070A+  		dc.b 8,	$A, 1, $A, 9, $A, 6, $A, 7, $A,	2, $A, 3, $A, 4
0001B6B0 0A05 FF00                  		dc.b $A, 5, $FF, 0
0001B6B4 0006 0501 0507 0501 05FF   byte_1AA9C:	dc.b 0,	6, 5, 1, 5, 7, 5, 1, 5,	$FF
0001B6BE                            		even
0001B6BE                            		even
0001B6BE                            
0001B6BE                            ; ---------------------------------------------------------------------------
0001B6BE                            ; Sprite mappings - energy balls (FZ)
0001B6BE                            ; ---------------------------------------------------------------------------
0001B6BE                            Map_obj86a:
0001B6BE                            	include "_maps\obj86a.asm"
0001B6BE                            ; ---------------------------------------------------------------------------
0001B6BE                            ; Sprite mappings - energy balls (FZ)
0001B6BE                            ; ---------------------------------------------------------------------------
0001B6BE 0000 0000                  		dc.w byte_1AABC-Map_obj86a, byte_1AAC7-Map_obj86a
0001B6C2 0000 0000                  		dc.w byte_1AAD2-Map_obj86a, byte_1AADD-Map_obj86a
0001B6C6 0000 0000                  		dc.w byte_1AAE8-Map_obj86a, byte_1AAF3-Map_obj86a
0001B6CA 0000 0000                  		dc.w byte_1AAFE-Map_obj86a, byte_1AB04-Map_obj86a
0001B6CE 0000 0000                  		dc.w byte_1AB0A-Map_obj86a, byte_1AB15-Map_obj86a
0001B6D2 0000                       		dc.w byte_1AB20-Map_obj86a
0001B6D4 02                         byte_1AABC:	dc.b 2
0001B6D5 F00D 007A F0               		dc.b $F0, $D, 0, $7A, $F0
0001B6DA 000D 187A F0               		dc.b 0,	$D, $18, $7A, $F0
0001B6DF 02                         byte_1AAC7:	dc.b 2
0001B6E0 F406 0082 F4               		dc.b $F4, 6, 0,	$82, $F4
0001B6E5 F402 1882 04               		dc.b $F4, 2, $18, $82, 4
0001B6EA 02                         byte_1AAD2:	dc.b 2
0001B6EB F804 0088 F8               		dc.b $F8, 4, 0,	$88, $F8
0001B6F0 0004 1088 F8               		dc.b 0,	4, $10,	$88, $F8
0001B6F5 02                         byte_1AADD:	dc.b 2
0001B6F6 F804 008A F8               		dc.b $F8, 4, 0,	$8A, $F8
0001B6FB 0004 108A F8               		dc.b 0,	4, $10,	$8A, $F8
0001B700 02                         byte_1AAE8:	dc.b 2
0001B701 F804 008C F8               		dc.b $F8, 4, 0,	$8C, $F8
0001B706 0004 108C F8               		dc.b 0,	4, $10,	$8C, $F8
0001B70B 02                         byte_1AAF3:	dc.b 2
0001B70C F406 008E F4               		dc.b $F4, 6, 0,	$8E, $F4
0001B711 F402 188E 04               		dc.b $F4, 2, $18, $8E, 4
0001B716 01                         byte_1AAFE:	dc.b 1
0001B717 F805 0094 F8               		dc.b $F8, 5, 0,	$94, $F8
0001B71C 01                         byte_1AB04:	dc.b 1
0001B71D F805 0098 F8               		dc.b $F8, 5, 0,	$98, $F8
0001B722 02                         byte_1AB0A:	dc.b 2
0001B723 F00D 087A F0               		dc.b $F0, $D, 8, $7A, $F0
0001B728 000D 107A F0               		dc.b 0,	$D, $10, $7A, $F0
0001B72D 02                         byte_1AB15:	dc.b 2
0001B72E F406 1082 F4               		dc.b $F4, 6, $10, $82, $F4
0001B733 F402 0882 04               		dc.b $F4, 2, 8,	$82, 4
0001B738 00                         byte_1AB20:	dc.b 0
0001B73A 00                         		even
0001B73A 00                         		even
0001B73A                            
0001B73A                            ; ===========================================================================
0001B73A                            ; ---------------------------------------------------------------------------
0001B73A                            ; Object 3E - prison capsule
0001B73A                            ; ---------------------------------------------------------------------------
0001B73A                            
0001B73A                            Obj3E:					; XREF: Obj_Index
0001B73A 7000                       		moveq	#0,d0
0001B73C 1028 0024                  		move.b	$24(a0),d0
0001B740 323B 0000                  		move.w	Obj3E_Index(pc,d0.w),d1
0001B744 4EBB 1000                  		jsr	Obj3E_Index(pc,d1.w)
0001B748 3028 0008                  		move.w	8(a0),d0
0001B74C 0240 FF80                  		andi.w	#$FF80,d0
0001B750 3238 F700                  		move.w	($FFFFF700).w,d1
0001B754 0441 0080                  		subi.w	#$80,d1
0001B758 0241 FF80                  		andi.w	#$FF80,d1
0001B75C 9041                       		sub.w	d1,d0
0001B75E 0C40 0280                  		cmpi.w	#$280,d0
0001B762 6200                       		bhi.s	Obj3E_Delete
0001B764 4EF9 0000 E044             		jmp	DisplaySprite
0001B76A                            ; ===========================================================================
0001B76A                            
0001B76A                            Obj3E_Delete:
0001B76A 4EF9 0000 E080             		jmp	DeleteObject
0001B770                            ; ===========================================================================
0001B770 0000                       Obj3E_Index:	dc.w Obj3E_Main-Obj3E_Index
0001B772 0000                       		dc.w Obj3E_BodyMain-Obj3E_Index
0001B774 0000                       		dc.w Obj3E_Switched-Obj3E_Index
0001B776 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001B778 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001B77A 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001B77C 0000                       		dc.w Obj3E_Animals-Obj3E_Index
0001B77E 0000                       		dc.w Obj3E_EndAct-Obj3E_Index
0001B780                            
0001B780 0220 0400                  Obj3E_Var:	dc.b 2,	$20, 4,	0	; routine, width, priority, frame
0001B784 040C 0501                  		dc.b 4,	$C, 5, 1
0001B788 0610 0403                  		dc.b 6,	$10, 4,	3
0001B78C 0810 0305                  		dc.b 8,	$10, 3,	5
0001B790                            ; ===========================================================================
0001B790                            
0001B790                            Obj3E_Main:				; XREF: Obj3E_Index
0001B790 217C 0000 0000 0004        		move.l	#Map_obj3E,4(a0)
0001B798 317C 049D 0002             		move.w	#$49D,2(a0)
0001B79E 117C 0004 0001             		move.b	#4,1(a0)
0001B7A4 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001B7AA 7000                       		moveq	#0,d0
0001B7AC 1028 0028                  		move.b	$28(a0),d0
0001B7B0 E548                       		lsl.w	#2,d0
0001B7B2 43FB 00CC                  		lea	Obj3E_Var(pc,d0.w),a1
0001B7B6 1159 0024                  		move.b	(a1)+,$24(a0)
0001B7BA 1159 0019                  		move.b	(a1)+,$19(a0)
0001B7BE 1159 0018                  		move.b	(a1)+,$18(a0)
0001B7C2 1159 001A                  		move.b	(a1)+,$1A(a0)
0001B7C6 0C40 0008                  		cmpi.w	#8,d0		; is object type number	02?
0001B7CA 6600                       		bne.s	Obj3E_Not02	; if not, branch
0001B7CC 117C 0006 0020             		move.b	#6,$20(a0)
0001B7D2 117C 0008 0021             		move.b	#8,$21(a0)
0001B7D8                            
0001B7D8                            Obj3E_Not02:
0001B7D8 4E75                       		rts	
0001B7DA                            ; ===========================================================================
0001B7DA                            
0001B7DA                            Obj3E_BodyMain:				; XREF: Obj3E_Index
0001B7DA 0C38 0002 F7A7             		cmpi.b	#2,($FFFFF7A7).w
0001B7E0 6700                       		beq.s	Obj3E_ChkOpened
0001B7E2 323C 002B                  		move.w	#$2B,d1
0001B7E6 343C 0018                  		move.w	#$18,d2
0001B7EA 363C 0018                  		move.w	#$18,d3
0001B7EE 3828 0008                  		move.w	8(a0),d4
0001B7F2 4EF9 0001 0414             		jmp	SolidObject
0001B7F8                            ; ===========================================================================
0001B7F8                            
0001B7F8                            Obj3E_ChkOpened:
0001B7F8 4A28 0025                  		tst.b	$25(a0)		; has the prison been opened?
0001B7FC 6700                       		beq.s	Obj3E_DoOpen	; if yes, branch
0001B7FE 4228 0025                  		clr.b	$25(a0)
0001B802 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001B808 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001B80E                            
0001B80E                            Obj3E_DoOpen:
0001B80E 117C 0002 001A             		move.b	#2,$1A(a0)	; use frame number 2 (destroyed	prison)
0001B814 4E75                       		rts	
0001B816                            ; ===========================================================================
0001B816                            
0001B816                            Obj3E_Switched:				; XREF: Obj3E_Index
0001B816 323C 0017                  		move.w	#$17,d1
0001B81A 343C 0008                  		move.w	#8,d2
0001B81E 363C 0008                  		move.w	#8,d3
0001B822 3828 0008                  		move.w	8(a0),d4
0001B826 4EB9 0001 0414             		jsr	SolidObject
0001B82C 43F9 0000 0000             		lea	(Ani_obj3E).l,a1
0001B832 4EB9 0000 B09A             		jsr	AnimateSprite
0001B838 3168 0030 000C             		move.w	$30(a0),$C(a0)
0001B83E 4A28 0025                  		tst.b	$25(a0)
0001B842 6700                       		beq.s	locret_1AC60
0001B844 5068 000C                  		addq.w	#8,$C(a0)
0001B848 117C 000A 0024             		move.b	#$A,$24(a0)
0001B84E 317C 003C 001E             		move.w	#$3C,$1E(a0)
0001B854 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0001B858 4238 F7AA                  		clr.b	($FFFFF7AA).w	; lock screen position
0001B85C 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0001B862 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0001B868 6700                       		beq.s	Obj3E_MoveLeft	; GMZ: If not, branch
0001B86A 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; make Sonic run to	the right
0001B870 6000                       		bra.s	Obj3E_ContinueCode
0001B872                            
0001B872                            Obj3E_MoveLeft:
0001B872 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0001B878                            
0001B878                            Obj3E_ContinueCode:
0001B878 4228 0025                  		clr.b	$25(a0)
0001B87C 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001B882 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001B888                            
0001B888                            locret_1AC60:
0001B888 4E75                       		rts	
0001B88A                            ; ===========================================================================
0001B88A                            
0001B88A                            Obj3E_Explosion:			; XREF: Obj3E_Index
0001B88A 7007                       		moveq	#7,d0
0001B88C C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001B890 6600                       		bne.s	loc_1ACA0
0001B892 4EB9 0000 E4CA             		jsr	SingleObjLoad
0001B898 6600                       		bne.s	loc_1ACA0
0001B89A 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
0001B89E 3368 0008 0008             		move.w	8(a0),8(a1)
0001B8A4 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B8AA 4EB9 0000 2D0E             		jsr	(RandomNumber).l
0001B8B0 7200                       		moveq	#0,d1
0001B8B2 1200                       		move.b	d0,d1
0001B8B4 E409                       		lsr.b	#2,d1
0001B8B6 0441 0020                  		subi.w	#$20,d1
0001B8BA D369 0008                  		add.w	d1,8(a1)
0001B8BE E048                       		lsr.w	#8,d0
0001B8C0 E608                       		lsr.b	#3,d0
0001B8C2 D169 000C                  		add.w	d0,$C(a1)
0001B8C6                            
0001B8C6                            loc_1ACA0:
0001B8C6 5368 001E                  		subq.w	#1,$1E(a0)
0001B8CA 6700                       		beq.s	Obj3E_MakeAnimal
0001B8CC 4E75                       		rts	
0001B8CE                            ; ===========================================================================
0001B8CE                            
0001B8CE                            Obj3E_MakeAnimal:
0001B8CE 11FC 0002 F7A7             		move.b	#2,($FFFFF7A7).w
0001B8D4 117C 000C 0024             		move.b	#$C,$24(a0)	; replace explosions with animals
0001B8DA 117C 0006 001A             		move.b	#6,$1A(a0)
0001B8E0 317C 0096 001E             		move.w	#$96,$1E(a0)
0001B8E6 0668 0020 000C             		addi.w	#$20,$C(a0)
0001B8EC 7C07                       		moveq	#7,d6
0001B8EE 3A3C 009A                  		move.w	#$9A,d5
0001B8F2 78E4                       		moveq	#-$1C,d4
0001B8F4                            
0001B8F4                            Obj3E_Loop:
0001B8F4 4EB9 0000 E4CA             		jsr	SingleObjLoad
0001B8FA 6600                       		bne.s	locret_1ACF8
0001B8FC 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001B900 3368 0008 0008             		move.w	8(a0),8(a1)
0001B906 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B90C D969 0008                  		add.w	d4,8(a1)
0001B910 5E44                       		addq.w	#7,d4
0001B912 3345 0036                  		move.w	d5,$36(a1)
0001B916 5145                       		subq.w	#8,d5
0001B918 51CE FFDA                  		dbf	d6,Obj3E_Loop	; repeat 7 more	times
0001B91C                            
0001B91C                            locret_1ACF8:
0001B91C 4E75                       		rts	
0001B91E                            ; ===========================================================================
0001B91E                            
0001B91E                            Obj3E_Animals:				; XREF: Obj3E_Index
0001B91E 7007                       		moveq	#7,d0
0001B920 C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001B924 6600                       		bne.s	loc_1AD38
0001B926 4EB9 0000 E4CA             		jsr	SingleObjLoad
0001B92C 6600                       		bne.s	loc_1AD38
0001B92E 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001B932 3368 0008 0008             		move.w	8(a0),8(a1)
0001B938 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B93E 4EB9 0000 2D0E             		jsr	(RandomNumber).l
0001B944 0240 001F                  		andi.w	#$1F,d0
0001B948 5D40                       		subq.w	#6,d0
0001B94A 4A41                       		tst.w	d1
0001B94C 6A00                       		bpl.s	loc_1AD2E
0001B94E 4440                       		neg.w	d0
0001B950                            
0001B950                            loc_1AD2E:
0001B950 D169 0008                  		add.w	d0,8(a1)
0001B954 337C 000C 0036             		move.w	#$C,$36(a1)
0001B95A                            
0001B95A                            loc_1AD38:
0001B95A 5368 001E                  		subq.w	#1,$1E(a0)
0001B95E 6600                       		bne.s	locret_1AD48
0001B960 5428 0024                  		addq.b	#2,$24(a0)
0001B964 317C 00B4 001E             		move.w	#180,$1E(a0)
0001B96A                            
0001B96A                            locret_1AD48:
0001B96A 4E75                       		rts	
0001B96C                            ; ===========================================================================
0001B96C                            
0001B96C                            Obj3E_EndAct:				; XREF: Obj3E_Index
0001B96C 703E                       		moveq	#$3E,d0
0001B96E 7228                       		moveq	#$28,d1
0001B970 7440                       		moveq	#$40,d2
0001B972 43F8 D040                  		lea	($FFFFD040).w,a1 ; load	object RAM
0001B976                            
0001B976                            Obj3E_FindObj28:
0001B976 B211                       		cmp.b	(a1),d1		; is object $28	(animal) loaded?
0001B978 6700                       		beq.s	Obj3E_Obj28Found ; if yes, branch
0001B97A D2C2                       		adda.w	d2,a1		; next object RAM
0001B97C 51C8 FFF8                  		dbf	d0,Obj3E_FindObj28 ; repeat $3E	times
0001B980                            
0001B980 4EB9 0000 F6D0             		jsr	GotThroughAct
0001B986 4EF9 0000 E080             		jmp	DeleteObject
0001B98C                            ; ===========================================================================
0001B98C                            
0001B98C                            Obj3E_Obj28Found:
0001B98C 4E75                       		rts	
0001B98E                            ; ===========================================================================
0001B98E                            Ani_obj3E:
0001B98E                            	include "_anim\obj3E.asm"
0001B98E                            ; ---------------------------------------------------------------------------
0001B98E                            ; Animation script - prison capsule
0001B98E                            ; ---------------------------------------------------------------------------
0001B98E 0000                       		dc.w byte_1AD70-Ani_obj3E
0001B990 0000                       		dc.w byte_1AD70-Ani_obj3E
0001B992 0201 03FF                  byte_1AD70:	dc.b 2,	1, 3, $FF
0001B996                            		even
0001B996                            		even
0001B996                            
0001B996                            ; ---------------------------------------------------------------------------
0001B996                            ; Sprite mappings - prison capsule
0001B996                            ; ---------------------------------------------------------------------------
0001B996                            Map_obj3E:
0001B996                            	include "_maps\obj3E.asm"
0001B996                            ; ---------------------------------------------------------------------------
0001B996                            ; Sprite mappings - prison capsule
0001B996                            ; ---------------------------------------------------------------------------
0001B996 0000 0000                  		dc.w byte_1AD82-Map_obj3E, byte_1ADA6-Map_obj3E
0001B99A 0000 0000                  		dc.w byte_1ADAC-Map_obj3E, byte_1ADCB-Map_obj3E
0001B99E 0000 0000                  		dc.w byte_1ADD1-Map_obj3E, byte_1ADDC-Map_obj3E
0001B9A2 0000                       		dc.w byte_1ADE2-Map_obj3E
0001B9A4 07                         byte_1AD82:	dc.b 7
0001B9A5 E00C 2000 F0               		dc.b $E0, $C, $20, 0, $F0
0001B9AA E80D 2004 E0               		dc.b $E8, $D, $20, 4, $E0
0001B9AF E80D 200C 00               		dc.b $E8, $D, $20, $C, 0
0001B9B4 F80E 2014 E0               		dc.b $F8, $E, $20, $14,	$E0
0001B9B9 F80E 2020 00               		dc.b $F8, $E, $20, $20,	0
0001B9BE 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001B9C3 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001B9C8 01                         byte_1ADA6:	dc.b 1
0001B9C9 F809 003C F4               		dc.b $F8, 9, 0,	$3C, $F4
0001B9CE 06                         byte_1ADAC:	dc.b 6
0001B9CF 0008 2042 E0               		dc.b 0,	8, $20,	$42, $E0
0001B9D4 080C 2045 E0               		dc.b 8,	$C, $20, $45, $E0
0001B9D9 0004 2049 10               		dc.b 0,	4, $20,	$49, $10
0001B9DE 080C 204B 00               		dc.b 8,	$C, $20, $4B, 0
0001B9E3 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001B9E8 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001B9ED 01                         byte_1ADCB:	dc.b 1
0001B9EE F809 004F F4               		dc.b $F8, 9, 0,	$4F, $F4
0001B9F3 02                         byte_1ADD1:	dc.b 2
0001B9F4 E80E 2055 F0               		dc.b $E8, $E, $20, $55,	$F0
0001B9F9 000E 2061 F0               		dc.b 0,	$E, $20, $61, $F0
0001B9FE 01                         byte_1ADDC:	dc.b 1
0001B9FF F007 206D F8               		dc.b $F0, 7, $20, $6D, $F8
0001BA04 00                         byte_1ADE2:	dc.b 0
0001BA06 00                         		even
0001BA06 00                         		even
0001BA06                            
0001BA06                            ; ---------------------------------------------------------------------------
0001BA06                            ; Object touch response	subroutine - $20(a0) in	the object RAM
0001BA06                            ; ---------------------------------------------------------------------------
0001BA06                            
0001BA06                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BA06                            
0001BA06                            
0001BA06                            TouchResponse:				; XREF: Obj01
0001BA06 4E71                       		nop	
0001BA08 3428 0008                  		move.w	8(a0),d2	; load Sonic's x-axis value
0001BA0C 3628 000C                  		move.w	$C(a0),d3	; load Sonic's y-axis value
0001BA10 5142                       		subq.w	#8,d2
0001BA12 7A00                       		moveq	#0,d5
0001BA14 1A28 0016                  		move.b	$16(a0),d5	; load Sonic's height
0001BA18 5705                       		subq.b	#3,d5
0001BA1A 9645                       		sub.w	d5,d3
0001BA1C 0C28 0039 001A             		cmpi.b	#$39,$1A(a0)	; is Sonic ducking?
0001BA22 6600                       		bne.s	Touch_NoDuck	; if not, branch
0001BA24 0643 000C                  		addi.w	#$C,d3
0001BA28 7A0A                       		moveq	#$A,d5
0001BA2A                            
0001BA2A                            Touch_NoDuck:
0001BA2A 383C 0010                  		move.w	#$10,d4
0001BA2E DA45                       		add.w	d5,d5
0001BA30 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking the object RAM
0001BA34 3C3C 005F                  		move.w	#$5F,d6
0001BA38                            
0001BA38                            Touch_Loop:
0001BA38 4A29 0001                  		tst.b	1(a1)
0001BA3C 6A00                       		bpl.s	Touch_NextObj
0001BA3E 1029 0020                  		move.b	$20(a1),d0	; load touch response number
0001BA42 6600                       		bne.s	Touch_Height	; if touch response is not 0, branch
0001BA44                            
0001BA44                            Touch_NextObj:
0001BA44 43E9 0040                  		lea	$40(a1),a1	; next object RAM
0001BA48 51CE FFEE                  		dbf	d6,Touch_Loop	; repeat $5F more times
0001BA4C                            
0001BA4C 7000                       		moveq	#0,d0
0001BA4E 4E75                       		rts	
0001BA50                            ; ===========================================================================
0001BA50 1414                       Touch_Sizes:	dc.b  $14, $14		; width, height
0001BA52 0C14                       		dc.b   $C, $14
0001BA54 140C                       		dc.b  $14,  $C
0001BA56 0410                       		dc.b	4, $10
0001BA58 0C12                       		dc.b   $C, $12
0001BA5A 1010                       		dc.b  $10, $10
0001BA5C 0606                       		dc.b	6,   6
0001BA5E 180C                       		dc.b  $18,  $C
0001BA60 0C10                       		dc.b   $C, $10
0001BA62 100C                       		dc.b  $10,  $C
0001BA64 0808                       		dc.b	8,   8
0001BA66 1410                       		dc.b  $14, $10
0001BA68 1408                       		dc.b  $14,   8
0001BA6A 0E0E                       		dc.b   $E,  $E
0001BA6C 1818                       		dc.b  $18, $18
0001BA6E 2810                       		dc.b  $28, $10
0001BA70 1018                       		dc.b  $10, $18
0001BA72 0810                       		dc.b	8, $10
0001BA74 2070                       		dc.b  $20, $70
0001BA76 4020                       		dc.b  $40, $20
0001BA78 8020                       		dc.b  $80, $20
0001BA7A 2020                       		dc.b  $20, $20
0001BA7C 0808                       		dc.b	8,   8
0001BA7E 0404                       		dc.b	4,   4
0001BA80 2008                       		dc.b  $20,   8
0001BA82 0C0C                       		dc.b   $C,  $C
0001BA84 0804                       		dc.b	8,   4
0001BA86 1804                       		dc.b  $18,   4
0001BA88 2804                       		dc.b  $28,   4
0001BA8A 0408                       		dc.b	4,   8
0001BA8C 0418                       		dc.b	4, $18
0001BA8E 0428                       		dc.b	4, $28
0001BA90 0420                       		dc.b	4, $20
0001BA92 1818                       		dc.b  $18, $18
0001BA94 0C18                       		dc.b   $C, $18
0001BA96 4808                       		dc.b  $48,   8
0001BA98                            ; ===========================================================================
0001BA98                            
0001BA98                            Touch_Height:				; XREF: TouchResponse
0001BA98 0240 003F                  		andi.w	#$3F,d0
0001BA9C D040                       		add.w	d0,d0
0001BA9E 45FB 00AE                  		lea	Touch_Sizes-2(pc,d0.w),a2
0001BAA2 7200                       		moveq	#0,d1
0001BAA4 121A                       		move.b	(a2)+,d1
0001BAA6 3029 0008                  		move.w	8(a1),d0
0001BAAA 9041                       		sub.w	d1,d0
0001BAAC 9042                       		sub.w	d2,d0
0001BAAE 6400                       		bcc.s	loc_1AE98
0001BAB0 D241                       		add.w	d1,d1
0001BAB2 D041                       		add.w	d1,d0
0001BAB4 6500                       		bcs.s	Touch_Width
0001BAB6 6000 FF8C                  		bra.w	Touch_NextObj
0001BABA                            ; ===========================================================================
0001BABA                            
0001BABA                            loc_1AE98:
0001BABA B044                       		cmp.w	d4,d0
0001BABC 6200 FF86                  		bhi.w	Touch_NextObj
0001BAC0                            
0001BAC0                            Touch_Width:
0001BAC0 7200                       		moveq	#0,d1
0001BAC2 121A                       		move.b	(a2)+,d1
0001BAC4 3029 000C                  		move.w	$C(a1),d0
0001BAC8 9041                       		sub.w	d1,d0
0001BACA 9043                       		sub.w	d3,d0
0001BACC 6400                       		bcc.s	loc_1AEB6
0001BACE D241                       		add.w	d1,d1
0001BAD0 D240                       		add.w	d0,d1
0001BAD2 6500                       		bcs.s	Touch_ChkValue
0001BAD4 6000 FF6E                  		bra.w	Touch_NextObj
0001BAD8                            ; ===========================================================================
0001BAD8                            
0001BAD8                            loc_1AEB6:
0001BAD8 B045                       		cmp.w	d5,d0
0001BADA 6200 FF68                  		bhi.w	Touch_NextObj
0001BADE                            
0001BADE                            Touch_ChkValue:
0001BADE 1229 0020                  		move.b	$20(a1),d1	; load touch response number
0001BAE2 0201 00C0                  		andi.b	#$C0,d1		; is touch response $40	or higher?
0001BAE6 6700 0000                  		beq.w	Touch_Enemy	; if not, branch
0001BAEA 0C01 00C0                  		cmpi.b	#$C0,d1		; is touch response $C0	or higher?
0001BAEE 6700 0000                  		beq.w	Touch_Special	; if yes, branch
0001BAF2 4A01                       		tst.b	d1		; is touch response $80-$BF ?
0001BAF4 6B00 0000                  		bmi.w	Touch_ChkHurt	; if yes, branch
0001BAF8                            
0001BAF8                            ; touch	response is $40-$7F
0001BAF8                            
0001BAF8 1029 0020                  		move.b	$20(a1),d0
0001BAFC 0200 003F                  		andi.b	#$3F,d0
0001BB00 0C00 0006                  		cmpi.b	#6,d0		; is touch response $46	?
0001BB04 6700                       		beq.s	Touch_Monitor	; if yes, branch
0001BB06 0C68 005A 0030             		cmpi.w	#$5A,$30(a0)
0001BB0C 6400 0000                  		bcc.w	locret_1AEF2
0001BB10 5429 0024                  		addq.b	#2,$24(a1)	; advance the object's routine counter
0001BB14                            
0001BB14                            locret_1AEF2:
0001BB14 4E75                       		rts	
0001BB16                            ; ===========================================================================
0001BB16                            
0001BB16                            Touch_Monitor:
0001BB16 4A68 0012                  		tst.w	$12(a0)		; is Sonic moving upwards?
0001BB1A 6A00                       		bpl.s	loc_1AF1E	; if not, branch
0001BB1C 3028 000C                  		move.w	$C(a0),d0
0001BB20 0440 0010                  		subi.w	#$10,d0
0001BB24 B069 000C                  		cmp.w	$C(a1),d0
0001BB28 6500                       		bcs.s	locret_1AF2E
0001BB2A 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001BB2E 337C FE80 0012             		move.w	#-$180,$12(a1)
0001BB34 4A29 0025                  		tst.b	$25(a1)
0001BB38 6600                       		bne.s	locret_1AF2E
0001BB3A 5829 0025                  		addq.b	#4,$25(a1)	; advance the monitor's routine counter
0001BB3E 4E75                       		rts	
0001BB40                            ; ===========================================================================
0001BB40                            
0001BB40                            loc_1AF1E:
0001BB40 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling/jumping?
0001BB46 6600                       		bne.s	locret_1AF2E
0001BB48 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001BB4C 5429 0024                  		addq.b	#2,$24(a1)	; advance the monitor's routine counter
0001BB50                            
0001BB50                            locret_1AF2E:
0001BB50 4E75                       		rts	
0001BB52                            ; ===========================================================================
0001BB52                            
0001BB52                            Touch_Enemy:				; XREF: Touch_ChkValue
0001BB52 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001BB56 6600                       		bne.s	loc_1AF40	; if yes, branch
0001BB58 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling?
0001BB5E 6600 0000                  		bne.w	Touch_ChkHurt	; if not, branch
0001BB62                            
0001BB62                            loc_1AF40:
0001BB62 4A29 0021                  		tst.b	$21(a1)
0001BB66 6700                       		beq.s	Touch_KillEnemy
0001BB68 4468 0010                  		neg.w	$10(a0)
0001BB6C 4468 0012                  		neg.w	$12(a0)
0001BB70 E0E8 0010                  		asr	$10(a0)
0001BB74 E0E8 0012                  		asr	$12(a0)
0001BB78 137C 0000 0020             		move.b	#0,$20(a1)
0001BB7E 5329 0021                  		subq.b	#1,$21(a1)
0001BB82 6600                       		bne.s	locret_1AF68
0001BB84 08E9 0007 0022             		bset	#7,$22(a1)
0001BB8A                            
0001BB8A                            locret_1AF68:
0001BB8A 4E75                       		rts	
0001BB8C                            ; ===========================================================================
0001BB8C                            
0001BB8C                            Touch_KillEnemy:
0001BB8C 08E9 0007 0022             		bset	#7,$22(a1)
0001BB92 7000                       		moveq	#0,d0
0001BB94 3038 F7D0                  		move.w	($FFFFF7D0).w,d0
0001BB98 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w ; add 2 to item bonus counter
0001BB9C 0C40 0006                  		cmpi.w	#6,d0
0001BBA0 6500                       		bcs.s	loc_1AF82
0001BBA2 7006                       		moveq	#6,d0
0001BBA4                            
0001BBA4                            loc_1AF82:
0001BBA4 3340 003E                  		move.w	d0,$3E(a1)
0001BBA8 303B 0000                  		move.w	Enemy_Points(pc,d0.w),d0
0001BBAC 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 enemies been destroyed?
0001BBB2 6500                       		bcs.s	loc_1AF9C	; if not, branch
0001BBB4 303C 03E8                  		move.w	#1000,d0	; fix bonus to 10000
0001BBB8 337C 000A 003E             		move.w	#$A,$3E(a1)
0001BBBE                            
0001BBBE                            loc_1AF9C:
0001BBBE 6100 0000                  		bsr.w	AddPoints
0001BBC2 7400                       		moveq	#0,d2	; GMZ
0001BBC4 7205                       		moveq	#5,d1	; GMZ: Amount of explosion objects
0001BBC6 2449                       		move.l	a1,a2	; GMZ: Save a1 address on a2
0001BBC8                            
0001BBC8                            TouchKE_Explode:
0001BBC8 12BC 0027                  		move.b	#$27,0(a1)	; change object	to points
0001BBCC 137C 0000 0024             		move.b	#0,$24(a1)
0001BBD2 1342 0028                  		move.b	d2,$28(a1)	; GMZ: Set subtype
0001BBD6                            
0001BBD6                            TouchKE_NextExplosion:
0001BBD6 5802                       		addq.b	#4,d2
0001BBD8 4EB9 0000 E4CA             		jsr	SingleObjLoad
0001BBDE 6600                       		bne.s	TouchKE_NoExplosion
0001BBE0 336A 0008 0008             		move.w	8(a2),8(a1)
0001BBE6 336A 000C 000C             		move.w	$C(a2),$C(a1)
0001BBEC 51C9 FFDA                  		dbf	d1,TouchKE_Explode
0001BBF0                            
0001BBF0                            TouchKE_NoExplosion:
0001BBF0 224A                       		move.l	a2,a1	; GMZ: Restore original a1 address
0001BBF2 4A68 0012                  		tst.w	$12(a0)
0001BBF6 6B00                       		bmi.s	loc_1AFC2
0001BBF8 3028 000C                  		move.w	$C(a0),d0
0001BBFC B069 000C                  		cmp.w	$C(a1),d0
0001BC00 6400                       		bcc.s	loc_1AFCA
0001BC02 4468 0012                  		neg.w	$12(a0)
0001BC06 4E75                       		rts	
0001BC08                            ; ===========================================================================
0001BC08                            
0001BC08                            loc_1AFC2:
0001BC08 0668 0100 0012             		addi.w	#$100,$12(a0)
0001BC0E 4E75                       		rts	
0001BC10                            ; ===========================================================================
0001BC10                            
0001BC10                            loc_1AFCA:
0001BC10 0468 0100 0012             		subi.w	#$100,$12(a0)
0001BC16 4E75                       		rts	
0001BC18                            ; ===========================================================================
0001BC18 000A 0014 0032 0064        Enemy_Points:	dc.w 10, 20, 50, 100
0001BC20                            ; ===========================================================================
0001BC20                            
0001BC20                            loc_1AFDA:				; XREF: Touch_CatKiller
0001BC20 08E9 0007 0022             		bset	#7,$22(a1)
0001BC26                            
0001BC26                            Touch_ChkHurt:				; XREF: Touch_ChkValue
0001BC26 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001BC2A 6700                       		beq.s	Touch_Hurt	; if not, branch
0001BC2C                            
0001BC2C                            loc_1AFE6:				; XREF: Touch_Hurt
0001BC2C 70FF                       		moveq	#-1,d0
0001BC2E 4E75                       		rts	
0001BC30                            ; ===========================================================================
0001BC30                            
0001BC30                            Touch_Hurt:				; XREF: Touch_ChkHurt
0001BC30 4E71                       		nop	
0001BC32 4A68 0030                  		tst.w	$30(a0)
0001BC36 66F4                       		bne.s	loc_1AFE6
0001BC38 2449                       		movea.l	a1,a2
0001BC3A                            
0001BC3A                            ; End of function TouchResponse
0001BC3A                            ; continue straight to HurtSonic
0001BC3A                            
0001BC3A                            ; ---------------------------------------------------------------------------
0001BC3A                            ; Hurting Sonic	subroutine
0001BC3A                            ; ---------------------------------------------------------------------------
0001BC3A                            
0001BC3A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BC3A                            
0001BC3A                            
0001BC3A                            HurtSonic:
0001BC3A 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have a shield?
0001BC3E 6600                       		bne.s	Hurt_Shield	; if yes, branch
0001BC40 4A78 FE20                  		tst.w	($FFFFFE20).w	; does Sonic have any rings?
0001BC44 6700 0000                  		beq.w	Hurt_NoRings	; if not, branch
0001BC48 4EB9 0000 E4CA             		jsr	SingleObjLoad
0001BC4E 6600                       		bne.s	Hurt_Shield
0001BC50 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	multi rings object
0001BC54 3368 0008 0008             		move.w	8(a0),8(a1)
0001BC5A 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001BC60                            
0001BC60                            Hurt_Shield:
0001BC60 11FC 0000 FE2C             		move.b	#0,($FFFFFE2C).w ; remove shield
0001BC66 117C 0004 0024             		move.b	#4,$24(a0)
0001BC6C 6100 861E                  		bsr.w	Sonic_ResetOnFloor
0001BC70 08E8 0001 0022             		bset	#1,$22(a0)
0001BC76 317C FC00 0012             		move.w	#-$400,$12(a0)	; make Sonic bounce away from the object
0001BC7C 317C FE00 0010             		move.w	#-$200,$10(a0)
0001BC82 0828 0006 0022             		btst	#6,$22(a0)
0001BC88 6700                       		beq.s	Hurt_Reverse
0001BC8A 317C FE00 0012             		move.w	#-$200,$12(a0)
0001BC90 317C FF00 0010             		move.w	#-$100,$10(a0)
0001BC96                            
0001BC96                            Hurt_Reverse:
0001BC96 3028 0008                  		move.w	8(a0),d0
0001BC9A B06A 0008                  		cmp.w	8(a2),d0
0001BC9E 6500                       		bcs.s	Hurt_ChkSpikes	; if Sonic is left of the object, branch
0001BCA0 4468 0010                  		neg.w	$10(a0)		; if Sonic is right of the object, reverse
0001BCA4                            
0001BCA4                            Hurt_ChkSpikes:
0001BCA4 317C 0000 0014             		move.w	#0,$14(a0)
0001BCAA 117C 001A 001C             		move.b	#$1A,$1C(a0)
0001BCB0 317C 0078 0030             		move.w	#$78,$30(a0)
0001BCB6 303C 00A3                  		move.w	#$A3,d0		; load normal damage sound
0001BCBA 0C12 0036                  		cmpi.b	#$36,(a2)	; was damage caused by spikes?
0001BCBE 6600                       		bne.s	Hurt_Sound	; if not, branch
0001BCC0 0C12 0016                  		cmpi.b	#$16,(a2)	; was damage caused by LZ harpoon?
0001BCC4 6600                       		bne.s	Hurt_Sound	; if not, branch
0001BCC6 303C 00A6                  		move.w	#$A6,d0		; load spikes damage sound
0001BCCA                            
0001BCCA                            Hurt_Sound:
0001BCCA 4EB9 0000 159A             		jsr	(PlaySound_Special).l
0001BCD0 70FF                       		moveq	#-1,d0
0001BCD2 4E75                       		rts	
0001BCD4                            ; ===========================================================================
0001BCD4                            
0001BCD4                            Hurt_NoRings:
0001BCD4 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	cheat on?
0001BCD8 6600 FF86                  		bne.w	Hurt_Shield	; if yes, branch
0001BCDC                            ; End of function HurtSonic
0001BCDC                            
0001BCDC                            ; ---------------------------------------------------------------------------
0001BCDC                            ; Subroutine to	kill Sonic
0001BCDC                            ; ---------------------------------------------------------------------------
0001BCDC                            
0001BCDC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BCDC                            
0001BCDC                            
0001BCDC                            KillSonic:
0001BCDC 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	active?
0001BCE0 6600                       		bne.s	Kill_NoDeath	; if yes, branch
0001BCE2 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; remove invincibility
0001BCE8 117C 0006 0024             		move.b	#6,$24(a0)
0001BCEE 6100 859C                  		bsr.w	Sonic_ResetOnFloor
0001BCF2 08E8 0001 0022             		bset	#1,$22(a0)
0001BCF8 317C F900 0012             		move.w	#-$700,$12(a0)
0001BCFE 317C 0000 0010             		move.w	#0,$10(a0)
0001BD04 317C 0000 0014             		move.w	#0,$14(a0)
0001BD0A 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001BD10 117C 0018 001C             		move.b	#$18,$1C(a0)
0001BD16 08E8 0007 0002             		bset	#7,2(a0)
0001BD1C 303C 00A3                  		move.w	#$A3,d0		; play normal death sound
0001BD20 0C12 0036                  		cmpi.b	#$36,(a2)	; check	if you were killed by spikes
0001BD24 6600                       		bne.s	Kill_Sound
0001BD26 303C 00A6                  		move.w	#$A6,d0		; play spikes death sound
0001BD2A                            
0001BD2A                            Kill_Sound:
0001BD2A 4EB9 0000 159A             		jsr	(PlaySound_Special).l
0001BD30                            
0001BD30                            Kill_NoDeath:
0001BD30 70FF                       		moveq	#-1,d0
0001BD32 4E75                       		rts	
0001BD34                            ; End of function KillSonic
0001BD34                            
0001BD34                            
0001BD34                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BD34                            
0001BD34                            
0001BD34                            Touch_Special:				; XREF: Touch_ChkValue
0001BD34 1229 0020                  		move.b	$20(a1),d1
0001BD38 0201 003F                  		andi.b	#$3F,d1
0001BD3C 0C01 000B                  		cmpi.b	#$B,d1		; is touch response $CB	?
0001BD40 6700                       		beq.s	Touch_CatKiller	; if yes, branch
0001BD42 0C01 000C                  		cmpi.b	#$C,d1		; is touch response $CC	?
0001BD46 6700                       		beq.s	Touch_Yadrin	; if yes, branch
0001BD48 0C01 0017                  		cmpi.b	#$17,d1		; is touch response $D7	?
0001BD4C 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001BD4E 0C01 0021                  		cmpi.b	#$21,d1		; is touch response $E1	?
0001BD52 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001BD54 4E75                       		rts	
0001BD56                            ; ===========================================================================
0001BD56                            
0001BD56                            Touch_CatKiller:			; XREF: Touch_Special
0001BD56 6000 FEC8                  		bra.w	loc_1AFDA
0001BD5A                            ; ===========================================================================
0001BD5A                            
0001BD5A                            Touch_Yadrin:				; XREF: Touch_Special
0001BD5A 9A40                       		sub.w	d0,d5
0001BD5C 0C45 0008                  		cmpi.w	#8,d5
0001BD60 6400                       		bcc.s	loc_1B144
0001BD62 3029 0008                  		move.w	8(a1),d0
0001BD66 5940                       		subq.w	#4,d0
0001BD68 0829 0000 0022             		btst	#0,$22(a1)
0001BD6E 6700                       		beq.s	loc_1B130
0001BD70 0440 0010                  		subi.w	#$10,d0
0001BD74                            
0001BD74                            loc_1B130:
0001BD74 9042                       		sub.w	d2,d0
0001BD76 6400                       		bcc.s	loc_1B13C
0001BD78 0640 0018                  		addi.w	#$18,d0
0001BD7C 6500                       		bcs.s	loc_1B140
0001BD7E 6000                       		bra.s	loc_1B144
0001BD80                            ; ===========================================================================
0001BD80                            
0001BD80                            loc_1B13C:
0001BD80 B044                       		cmp.w	d4,d0
0001BD82 6200                       		bhi.s	loc_1B144
0001BD84                            
0001BD84                            loc_1B140:
0001BD84 6000 FEA0                  		bra.w	Touch_ChkHurt
0001BD88                            ; ===========================================================================
0001BD88                            
0001BD88                            loc_1B144:
0001BD88 6000 FDC8                  		bra.w	Touch_Enemy
0001BD8C                            ; ===========================================================================
0001BD8C                            
0001BD8C                            Touch_D7orE1:				; XREF: Touch_Special
0001BD8C 5229 0021                  		addq.b	#1,$21(a1)
0001BD90 4E75                       		rts	
0001BD92                            ; End of function Touch_Special
0001BD92                            
0001BD92                            ; ---------------------------------------------------------------------------
0001BD92                            ; Subroutine to	show the special stage layout
0001BD92                            ; ---------------------------------------------------------------------------
0001BD92                            
0001BD92                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BD92                            
0001BD92                            
0001BD92                            SS_ShowLayout:				; XREF: SpecialStage
0001BD92 6100 0000                  		bsr.w	SS_AniWallsRings
0001BD96 6100 0000                  		bsr.w	SS_AniItems
0001BD9A 3F05                       		move.w	d5,-(sp)
0001BD9C 43F8 8000                  		lea	($FFFF8000).w,a1
0001BDA0 1038 F780                  		move.b	($FFFFF780).w,d0
0001BDA4 0200 00FC                  		andi.b	#$FC,d0
0001BDA8 4EB9 0000 2D34             		jsr	(CalcSine).l
0001BDAE 3800                       		move.w	d0,d4
0001BDB0 3A01                       		move.w	d1,d5
0001BDB2 C9FC 0018                  		muls.w	#$18,d4
0001BDB6 CBFC 0018                  		muls.w	#$18,d5
0001BDBA 7400                       		moveq	#0,d2
0001BDBC 3438 F700                  		move.w	($FFFFF700).w,d2
0001BDC0 84FC 0018                  		divu.w	#$18,d2
0001BDC4 4842                       		swap	d2
0001BDC6 4442                       		neg.w	d2
0001BDC8 0642 FF4C                  		addi.w	#-$B4,d2
0001BDCC 7600                       		moveq	#0,d3
0001BDCE 3638 F704                  		move.w	($FFFFF704).w,d3
0001BDD2 86FC 0018                  		divu.w	#$18,d3
0001BDD6 4843                       		swap	d3
0001BDD8 4443                       		neg.w	d3
0001BDDA 0643 FF4C                  		addi.w	#-$B4,d3
0001BDDE 3E3C 000F                  		move.w	#$F,d7
0001BDE2                            
0001BDE2                            loc_1B19E:
0001BDE2 48A7 E000                  		movem.w	d0-d2,-(sp)
0001BDE6 48A7 C000                  		movem.w	d0-d1,-(sp)
0001BDEA 4440                       		neg.w	d0
0001BDEC C3C2                       		muls.w	d2,d1
0001BDEE C1C3                       		muls.w	d3,d0
0001BDF0 2C00                       		move.l	d0,d6
0001BDF2 DC81                       		add.l	d1,d6
0001BDF4 4C9F 0003                  		movem.w	(sp)+,d0-d1
0001BDF8 C1C2                       		muls.w	d2,d0
0001BDFA C3C3                       		muls.w	d3,d1
0001BDFC D280                       		add.l	d0,d1
0001BDFE 2406                       		move.l	d6,d2
0001BE00 3C3C 000F                  		move.w	#$F,d6
0001BE04                            
0001BE04                            loc_1B1C0:
0001BE04 2002                       		move.l	d2,d0
0001BE06 E080                       		asr.l	#8,d0
0001BE08 32C0                       		move.w	d0,(a1)+
0001BE0A 2001                       		move.l	d1,d0
0001BE0C E080                       		asr.l	#8,d0
0001BE0E 32C0                       		move.w	d0,(a1)+
0001BE10 D485                       		add.l	d5,d2
0001BE12 D284                       		add.l	d4,d1
0001BE14 51CE FFEE                  		dbf	d6,loc_1B1C0
0001BE18                            
0001BE18 4C9F 0007                  		movem.w	(sp)+,d0-d2
0001BE1C 0643 0018                  		addi.w	#$18,d3
0001BE20 51CF FFC0                  		dbf	d7,loc_1B19E
0001BE24                            
0001BE24 3A1F                       		move.w	(sp)+,d5
0001BE26 41F9 00FF 0000             		lea	($FF0000).l,a0
0001BE2C 7000                       		moveq	#0,d0
0001BE2E 3038 F704                  		move.w	($FFFFF704).w,d0
0001BE32 80FC 0018                  		divu.w	#$18,d0
0001BE36 C0FC 0080                  		mulu.w	#$80,d0
0001BE3A D1C0                       		adda.l	d0,a0
0001BE3C 7000                       		moveq	#0,d0
0001BE3E 3038 F700                  		move.w	($FFFFF700).w,d0
0001BE42 80FC 0018                  		divu.w	#$18,d0
0001BE46 D0C0                       		adda.w	d0,a0
0001BE48 49F8 8000                  		lea	($FFFF8000).w,a4
0001BE4C 3E3C 000F                  		move.w	#$F,d7
0001BE50                            
0001BE50                            loc_1B20C:
0001BE50 3C3C 000F                  		move.w	#$F,d6
0001BE54                            
0001BE54                            loc_1B210:
0001BE54 7000                       		moveq	#0,d0
0001BE56 1018                       		move.b	(a0)+,d0
0001BE58 6700                       		beq.s	loc_1B268
0001BE5A 0C00 004E                  		cmpi.b	#$4E,d0
0001BE5E 6200                       		bhi.s	loc_1B268
0001BE60 3614                       		move.w	(a4),d3
0001BE62 0643 0120                  		addi.w	#$120,d3
0001BE66 0C43 0070                  		cmpi.w	#$70,d3
0001BE6A 6500                       		bcs.s	loc_1B268
0001BE6C 0C43 01D0                  		cmpi.w	#$1D0,d3
0001BE70 6400                       		bcc.s	loc_1B268
0001BE72 342C 0002                  		move.w	2(a4),d2
0001BE76 0642 00F0                  		addi.w	#$F0,d2
0001BE7A 0C42 0070                  		cmpi.w	#$70,d2
0001BE7E 6500                       		bcs.s	loc_1B268
0001BE80 0C42 0170                  		cmpi.w	#$170,d2
0001BE84 6400                       		bcc.s	loc_1B268
0001BE86 4BF9 00FF 4000             		lea	($FF4000).l,a5
0001BE8C E748                       		lsl.w	#3,d0
0001BE8E 4BF5 0000                  		lea	(a5,d0.w),a5
0001BE92 225D                       		movea.l	(a5)+,a1
0001BE94 321D                       		move.w	(a5)+,d1
0001BE96 D241                       		add.w	d1,d1
0001BE98 D2F1 1000                  		adda.w	(a1,d1.w),a1
0001BE9C 365D                       		movea.w	(a5)+,a3
0001BE9E 7200                       		moveq	#0,d1
0001BEA0 1219                       		move.b	(a1)+,d1
0001BEA2 5301                       		subq.b	#1,d1
0001BEA4 6B00                       		bmi.s	loc_1B268
0001BEA6 4EB9 0000 E1A2             		jsr	sub_D762
0001BEAC                            
0001BEAC                            loc_1B268:
0001BEAC 584C                       		addq.w	#4,a4
0001BEAE 51CE FFA4                  		dbf	d6,loc_1B210
0001BEB2                            
0001BEB2 41E8 0070                  		lea	$70(a0),a0
0001BEB6 51CF FF98                  		dbf	d7,loc_1B20C
0001BEBA                            
0001BEBA 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0001BEBE 0C05 0050                  		cmpi.b	#$50,d5
0001BEC2 6700                       		beq.s	loc_1B288
0001BEC4 24BC 0000 0000             		move.l	#0,(a2)
0001BECA 4E75                       		rts	
0001BECC                            ; ===========================================================================
0001BECC                            
0001BECC                            loc_1B288:
0001BECC 157C 0000 FFFB             		move.b	#0,-5(a2)
0001BED2 4E75                       		rts	
0001BED4                            ; End of function SS_ShowLayout
0001BED4                            
0001BED4                            ; ---------------------------------------------------------------------------
0001BED4                            ; Subroutine to	animate	walls and rings	in the special stage
0001BED4                            ; ---------------------------------------------------------------------------
0001BED4                            
0001BED4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BED4                            
0001BED4                            
0001BED4                            SS_AniWallsRings:			; XREF: SS_ShowLayout
0001BED4 43F9 00FF 400C             		lea	($FF400C).l,a1
0001BEDA 7000                       		moveq	#0,d0
0001BEDC 1038 F780                  		move.b	($FFFFF780).w,d0
0001BEE0 E408                       		lsr.b	#2,d0
0001BEE2 0240 000F                  		andi.w	#$F,d0
0001BEE6 7223                       		moveq	#$23,d1
0001BEE8                            
0001BEE8                            loc_1B2A4:
0001BEE8 3280                       		move.w	d0,(a1)
0001BEEA 5049                       		addq.w	#8,a1
0001BEEC 51C9 FFFA                  		dbf	d1,loc_1B2A4
0001BEF0                            
0001BEF0 43F9 00FF 4005             		lea	($FF4005).l,a1
0001BEF6 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
0001BEFA 6A00                       		bpl.s	loc_1B2C8
0001BEFC 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
0001BF02 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
0001BF06 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
0001BF0C                            
0001BF0C                            loc_1B2C8:
0001BF0C 1378 FEC3 01D0             		move.b	($FFFFFEC3).w,$1D0(a1)
0001BF12 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
0001BF16 6A00                       		bpl.s	loc_1B2E4
0001BF18 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
0001BF1E 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
0001BF22 0238 0001 FEC5             		andi.b	#1,($FFFFFEC5).w
0001BF28                            
0001BF28                            loc_1B2E4:
0001BF28 1038 FEC5                  		move.b	($FFFFFEC5).w,d0
0001BF2C 1340 0138                  		move.b	d0,$138(a1)
0001BF30 1340 0160                  		move.b	d0,$160(a1)
0001BF34 1340 0148                  		move.b	d0,$148(a1)
0001BF38 1340 0150                  		move.b	d0,$150(a1)
0001BF3C 1340 01D8                  		move.b	d0,$1D8(a1)
0001BF40 1340 01E0                  		move.b	d0,$1E0(a1)
0001BF44 1340 01E8                  		move.b	d0,$1E8(a1)
0001BF48 1340 01F0                  		move.b	d0,$1F0(a1)
0001BF4C 1340 01F8                  		move.b	d0,$1F8(a1)
0001BF50 1340 0200                  		move.b	d0,$200(a1)
0001BF54 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
0001BF58 6A00                       		bpl.s	loc_1B326
0001BF5A 11FC 0004 FEC6             		move.b	#4,($FFFFFEC6).w
0001BF60 5238 FEC7                  		addq.b	#1,($FFFFFEC7).w
0001BF64 0238 0003 FEC7             		andi.b	#3,($FFFFFEC7).w
0001BF6A                            
0001BF6A                            loc_1B326:
0001BF6A 1038 FEC7                  		move.b	($FFFFFEC7).w,d0
0001BF6E 1340 0168                  		move.b	d0,$168(a1)
0001BF72 1340 0170                  		move.b	d0,$170(a1)
0001BF76 1340 0178                  		move.b	d0,$178(a1)
0001BF7A 1340 0180                  		move.b	d0,$180(a1)
0001BF7E 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
0001BF82 6A00                       		bpl.s	loc_1B350
0001BF84 11FC 0007 FEC0             		move.b	#7,($FFFFFEC0).w
0001BF8A 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
0001BF8E 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
0001BF94                            
0001BF94                            loc_1B350:
0001BF94 43F9 00FF 4016             		lea	($FF4016).l,a1
0001BF9A 41F9 0000 0000             		lea	(SS_WaRiVramSet).l,a0
0001BFA0 7000                       		moveq	#0,d0
0001BFA2 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
0001BFA6 D040                       		add.w	d0,d0
0001BFA8 41F0 0000                  		lea	(a0,d0.w),a0
0001BFAC 3290                       		move.w	(a0),(a1)
0001BFAE 3368 0002 0008             		move.w	2(a0),8(a1)
0001BFB4 3368 0004 0010             		move.w	4(a0),$10(a1)
0001BFBA 3368 0006 0018             		move.w	6(a0),$18(a1)
0001BFC0 3368 0008 0020             		move.w	8(a0),$20(a1)
0001BFC6 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001BFCC 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001BFD2 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001BFD8 D0FC 0020                  		adda.w	#$20,a0
0001BFDC D2FC 0048                  		adda.w	#$48,a1
0001BFE0 3290                       		move.w	(a0),(a1)
0001BFE2 3368 0002 0008             		move.w	2(a0),8(a1)
0001BFE8 3368 0004 0010             		move.w	4(a0),$10(a1)
0001BFEE 3368 0006 0018             		move.w	6(a0),$18(a1)
0001BFF4 3368 0008 0020             		move.w	8(a0),$20(a1)
0001BFFA 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001C000 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001C006 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001C00C D0FC 0020                  		adda.w	#$20,a0
0001C010 D2FC 0048                  		adda.w	#$48,a1
0001C014 3290                       		move.w	(a0),(a1)
0001C016 3368 0002 0008             		move.w	2(a0),8(a1)
0001C01C 3368 0004 0010             		move.w	4(a0),$10(a1)
0001C022 3368 0006 0018             		move.w	6(a0),$18(a1)
0001C028 3368 0008 0020             		move.w	8(a0),$20(a1)
0001C02E 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001C034 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001C03A 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001C040 D0FC 0020                  		adda.w	#$20,a0
0001C044 D2FC 0048                  		adda.w	#$48,a1
0001C048 3290                       		move.w	(a0),(a1)
0001C04A 3368 0002 0008             		move.w	2(a0),8(a1)
0001C050 3368 0004 0010             		move.w	4(a0),$10(a1)
0001C056 3368 0006 0018             		move.w	6(a0),$18(a1)
0001C05C 3368 0008 0020             		move.w	8(a0),$20(a1)
0001C062 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001C068 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001C06E 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001C074 D0FC 0020                  		adda.w	#$20,a0
0001C078 D2FC 0048                  		adda.w	#$48,a1
0001C07C 4E75                       		rts	
0001C07E                            ; End of function SS_AniWallsRings
0001C07E                            
0001C07E                            ; ===========================================================================
0001C07E 0142 6142 0142 0142 0142+  SS_WaRiVramSet:	dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001C08E 0142 6142 0142 0142 0142+  		dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001C09E 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001C0AE 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001C0BE 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001C0CE 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001C0DE 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001C0EE 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001C0FE                            ; ---------------------------------------------------------------------------
0001C0FE                            ; Subroutine to	remove items when you collect them in the special stage
0001C0FE                            ; ---------------------------------------------------------------------------
0001C0FE                            
0001C0FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C0FE                            
0001C0FE                            
0001C0FE                            SS_RemoveCollectedItem:			; XREF: Obj09_ChkItems
0001C0FE 45F9 00FF 4400             		lea	($FF4400).l,a2
0001C104 303C 001F                  		move.w	#$1F,d0
0001C108                            
0001C108                            loc_1B4C4:
0001C108 4A12                       		tst.b	(a2)
0001C10A 6700                       		beq.s	locret_1B4CE
0001C10C 504A                       		addq.w	#8,a2
0001C10E 51C8 FFF8                  		dbf	d0,loc_1B4C4
0001C112                            
0001C112                            locret_1B4CE:
0001C112 4E75                       		rts	
0001C114                            ; End of function SS_RemoveCollectedItem
0001C114                            
0001C114                            ; ---------------------------------------------------------------------------
0001C114                            ; Subroutine to	animate	special	stage items when you touch them
0001C114                            ; ---------------------------------------------------------------------------
0001C114                            
0001C114                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C114                            
0001C114                            
0001C114                            SS_AniItems:				; XREF: SS_ShowLayout
0001C114 41F9 00FF 4400             		lea	($FF4400).l,a0
0001C11A 3E3C 001F                  		move.w	#$1F,d7
0001C11E                            
0001C11E                            loc_1B4DA:
0001C11E 7000                       		moveq	#0,d0
0001C120 1010                       		move.b	(a0),d0
0001C122 6700                       		beq.s	loc_1B4E8
0001C124 E548                       		lsl.w	#2,d0
0001C126 227B 0000                  		movea.l	SS_AniIndex-4(pc,d0.w),a1
0001C12A 4E91                       		jsr	(a1)
0001C12C                            
0001C12C                            loc_1B4E8:
0001C12C 5048                       		addq.w	#8,a0
0001C12E                            
0001C12E                            loc_1B4EA:
0001C12E 51CF FFEE                  		dbf	d7,loc_1B4DA
0001C132                            
0001C132 4E75                       		rts	
0001C134                            ; End of function SS_AniItems
0001C134                            
0001C134                            ; ===========================================================================
0001C134 0000 0000                  SS_AniIndex:	dc.l SS_AniRingSparks
0001C138 0000 0000                  		dc.l SS_AniBumper
0001C13C 0000 0000                  		dc.l SS_Ani1Up
0001C140 0000 0000                  		dc.l SS_AniReverse
0001C144 0000 0000                  		dc.l SS_AniEmeraldSparks
0001C148 0000 0000                  		dc.l SS_AniGlassBlock
0001C14C                            ; ===========================================================================
0001C14C                            
0001C14C                            SS_AniRingSparks:			; XREF: SS_AniIndex
0001C14C 5328 0002                  		subq.b	#1,2(a0)
0001C150 6A00                       		bpl.s	locret_1B530
0001C152 117C 0005 0002             		move.b	#5,2(a0)
0001C158 7000                       		moveq	#0,d0
0001C15A 1028 0003                  		move.b	3(a0),d0
0001C15E 5228 0003                  		addq.b	#1,3(a0)
0001C162 2268 0004                  		movea.l	4(a0),a1
0001C166 103B 0000                  		move.b	SS_AniRingData(pc,d0.w),d0
0001C16A 1280                       		move.b	d0,(a1)
0001C16C 6600                       		bne.s	locret_1B530
0001C16E 4290                       		clr.l	(a0)
0001C170 42A8 0004                  		clr.l	4(a0)
0001C174                            
0001C174                            locret_1B530:
0001C174 4E75                       		rts	
0001C176                            ; ===========================================================================
0001C176 4243 4445 0000             SS_AniRingData:	dc.b $42, $43, $44, $45, 0, 0
0001C17C                            ; ===========================================================================
0001C17C                            
0001C17C                            SS_AniBumper:				; XREF: SS_AniIndex
0001C17C 5328 0002                  		subq.b	#1,2(a0)
0001C180 6A00                       		bpl.s	locret_1B566
0001C182 117C 0007 0002             		move.b	#7,2(a0)
0001C188 7000                       		moveq	#0,d0
0001C18A 1028 0003                  		move.b	3(a0),d0
0001C18E 5228 0003                  		addq.b	#1,3(a0)
0001C192 2268 0004                  		movea.l	4(a0),a1
0001C196 103B 0000                  		move.b	SS_AniBumpData(pc,d0.w),d0
0001C19A 6600                       		bne.s	loc_1B564
0001C19C 4290                       		clr.l	(a0)
0001C19E 42A8 0004                  		clr.l	4(a0)
0001C1A2 12BC 0025                  		move.b	#$25,(a1)
0001C1A6 4E75                       		rts	
0001C1A8                            ; ===========================================================================
0001C1A8                            
0001C1A8                            loc_1B564:
0001C1A8 1280                       		move.b	d0,(a1)
0001C1AA                            
0001C1AA                            locret_1B566:
0001C1AA 4E75                       		rts	
0001C1AC                            ; ===========================================================================
0001C1AC 3233 3233 0000             SS_AniBumpData:	dc.b $32, $33, $32, $33, 0, 0
0001C1B2                            ; ===========================================================================
0001C1B2                            
0001C1B2                            SS_Ani1Up:				; XREF: SS_AniIndex
0001C1B2 5328 0002                  		subq.b	#1,2(a0)
0001C1B6 6A00                       		bpl.s	locret_1B596
0001C1B8 117C 0005 0002             		move.b	#5,2(a0)
0001C1BE 7000                       		moveq	#0,d0
0001C1C0 1028 0003                  		move.b	3(a0),d0
0001C1C4 5228 0003                  		addq.b	#1,3(a0)
0001C1C8 2268 0004                  		movea.l	4(a0),a1
0001C1CC 103B 0000                  		move.b	SS_Ani1UpData(pc,d0.w),d0
0001C1D0 1280                       		move.b	d0,(a1)
0001C1D2 6600                       		bne.s	locret_1B596
0001C1D4 4290                       		clr.l	(a0)
0001C1D6 42A8 0004                  		clr.l	4(a0)
0001C1DA                            
0001C1DA                            locret_1B596:
0001C1DA 4E75                       		rts	
0001C1DC                            ; ===========================================================================
0001C1DC 4647 4849 0000             SS_Ani1UpData:	dc.b $46, $47, $48, $49, 0, 0
0001C1E2                            ; ===========================================================================
0001C1E2                            
0001C1E2                            SS_AniReverse:				; XREF: SS_AniIndex
0001C1E2 5328 0002                  		subq.b	#1,2(a0)
0001C1E6 6A00                       		bpl.s	locret_1B5CC
0001C1E8 117C 0007 0002             		move.b	#7,2(a0)
0001C1EE 7000                       		moveq	#0,d0
0001C1F0 1028 0003                  		move.b	3(a0),d0
0001C1F4 5228 0003                  		addq.b	#1,3(a0)
0001C1F8 2268 0004                  		movea.l	4(a0),a1
0001C1FC 103B 0000                  		move.b	SS_AniRevData(pc,d0.w),d0
0001C200 6600                       		bne.s	loc_1B5CA
0001C202 4290                       		clr.l	(a0)
0001C204 42A8 0004                  		clr.l	4(a0)
0001C208 12BC 002B                  		move.b	#$2B,(a1)
0001C20C 4E75                       		rts	
0001C20E                            ; ===========================================================================
0001C20E                            
0001C20E                            loc_1B5CA:
0001C20E 1280                       		move.b	d0,(a1)
0001C210                            
0001C210                            locret_1B5CC:
0001C210 4E75                       		rts	
0001C212                            ; ===========================================================================
0001C212 2B31 2B31 0000             SS_AniRevData:	dc.b $2B, $31, $2B, $31, 0, 0
0001C218                            ; ===========================================================================
0001C218                            
0001C218                            SS_AniEmeraldSparks:			; XREF: SS_AniIndex
0001C218 5328 0002                  		subq.b	#1,2(a0)
0001C21C 6A00                       		bpl.s	locret_1B60C
0001C21E 117C 0005 0002             		move.b	#5,2(a0)
0001C224 7000                       		moveq	#0,d0
0001C226 1028 0003                  		move.b	3(a0),d0
0001C22A 5228 0003                  		addq.b	#1,3(a0)
0001C22E 2268 0004                  		movea.l	4(a0),a1
0001C232 103B 0000                  		move.b	SS_AniEmerData(pc,d0.w),d0
0001C236 1280                       		move.b	d0,(a1)
0001C238 6600                       		bne.s	locret_1B60C
0001C23A 4290                       		clr.l	(a0)
0001C23C 42A8 0004                  		clr.l	4(a0)
0001C240 11FC 0004 D024             		move.b	#4,($FFFFD024).w
0001C246 303C 00A8                  		move.w	#$A8,d0
0001C24A 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play special stage GOAL	sound
0001C250                            
0001C250                            locret_1B60C:
0001C250 4E75                       		rts	
0001C252                            ; ===========================================================================
0001C252 4647 4849 0000             SS_AniEmerData:	dc.b $46, $47, $48, $49, 0, 0
0001C258                            ; ===========================================================================
0001C258                            
0001C258                            SS_AniGlassBlock:			; XREF: SS_AniIndex
0001C258 5328 0002                  		subq.b	#1,2(a0)
0001C25C 6A00                       		bpl.s	locret_1B640
0001C25E 117C 0001 0002             		move.b	#1,2(a0)
0001C264 7000                       		moveq	#0,d0
0001C266 1028 0003                  		move.b	3(a0),d0
0001C26A 5228 0003                  		addq.b	#1,3(a0)
0001C26E 2268 0004                  		movea.l	4(a0),a1
0001C272 103B 0000                  		move.b	SS_AniGlassData(pc,d0.w),d0
0001C276 1280                       		move.b	d0,(a1)
0001C278 6600                       		bne.s	locret_1B640
0001C27A 12A8 0004                  		move.b	4(a0),(a1)
0001C27E 4290                       		clr.l	(a0)
0001C280 42A8 0004                  		clr.l	4(a0)
0001C284                            
0001C284                            locret_1B640:
0001C284 4E75                       		rts	
0001C286                            ; ===========================================================================
0001C286 4B4C 4D4E 4B4C 4D4E 0000   SS_AniGlassData:dc.b $4B, $4C, $4D, $4E, $4B, $4C, $4D,	$4E, 0,	0
0001C290                            ; ---------------------------------------------------------------------------
0001C290                            ; Special stage	layout pointers
0001C290                            ; ---------------------------------------------------------------------------
0001C290                            SS_LayoutIndex:
0001C290                            	include "_inc\Special stage layout pointers.asm"
0001C290                            ; ---------------------------------------------------------------------------
0001C290                            ; Special stage	layout pointers
0001C290                            ; ---------------------------------------------------------------------------
0001C290 0000 0000                  	dc.l SS_1
0001C294 0000 0000                  	dc.l SS_2
0001C298 0000 0000                  	dc.l SS_3
0001C29C 0000 0000                  	dc.l SS_4
0001C2A0 0000 0000                  	dc.l SS_5
0001C2A4 0000 0000                  	dc.l SS_6
0001C2A8                            	even
0001C2A8                            	even
0001C2A8                            
0001C2A8                            ; ---------------------------------------------------------------------------
0001C2A8                            ; Special stage	start locations
0001C2A8                            ; ---------------------------------------------------------------------------
0001C2A8                            SS_StartLoc:	incbin	misc\sloc_ss.bin
0001C2C0                            		even
0001C2C0                            
0001C2C0                            ; ---------------------------------------------------------------------------
0001C2C0                            ; Subroutine to	load special stage layout
0001C2C0                            ; ---------------------------------------------------------------------------
0001C2C0                            
0001C2C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C2C0                            
0001C2C0                            
0001C2C0                            SS_Load:				; XREF: SpecialStage
0001C2C0 7000                       		moveq	#0,d0
0001C2C2 1038 FE16                  		move.b	($FFFFFE16).w,d0 ; load	number of last special stage entered
0001C2C6 5238 FE16                  		addq.b	#1,($FFFFFE16).w
0001C2CA 0C38 0006 FE16             		cmpi.b	#6,($FFFFFE16).w
0001C2D0 6500                       		bcs.s	SS_ChkEmldNum
0001C2D2 11FC 0000 FE16             		move.b	#0,($FFFFFE16).w ; reset if higher than	6
0001C2D8                            
0001C2D8                            SS_ChkEmldNum:
0001C2D8 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all emeralds?
0001C2DE 6700                       		beq.s	SS_LoadData	; if yes, branch
0001C2E0 7200                       		moveq	#0,d1
0001C2E2 1238 FE57                  		move.b	($FFFFFE57).w,d1
0001C2E6 5301                       		subq.b	#1,d1
0001C2E8 6500                       		bcs.s	SS_LoadData
0001C2EA 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0001C2EE                            
0001C2EE                            SS_ChkEmldLoop:	
0001C2EE B033 1000                  		cmp.b	(a3,d1.w),d0
0001C2F2 6600                       		bne.s	SS_ChkEmldRepeat
0001C2F4 60CA                       		bra.s	SS_Load
0001C2F6                            ; ===========================================================================
0001C2F6                            
0001C2F6                            SS_ChkEmldRepeat:
0001C2F6 51C9 FFF6                  		dbf	d1,SS_ChkEmldLoop
0001C2FA                            
0001C2FA                            SS_LoadData:
0001C2FA E548                       		lsl.w	#2,d0
0001C2FC 43FB 00AA                  		lea	SS_StartLoc(pc,d0.w),a1
0001C300 31D9 D008                  		move.w	(a1)+,($FFFFD008).w
0001C304 31D9 D00C                  		move.w	(a1)+,($FFFFD00C).w
0001C308 207B 0086                  		movea.l	SS_LayoutIndex(pc,d0.w),a0
0001C30C 43F9 00FF 4000             		lea	($FF4000).l,a1
0001C312 303C 0000                  		move.w	#0,d0
0001C316 4EB9 0000 191C             		jsr	(EniDec).l
0001C31C 43F9 00FF 0000             		lea	($FF0000).l,a1
0001C322 303C 0FFF                  		move.w	#$FFF,d0
0001C326                            
0001C326                            SS_ClrRAM3:
0001C326 4299                       		clr.l	(a1)+
0001C328 51C8 FFFC                  		dbf	d0,SS_ClrRAM3
0001C32C                            
0001C32C 43F9 00FF 1020             		lea	($FF1020).l,a1
0001C332 41F9 00FF 4000             		lea	($FF4000).l,a0
0001C338 723F                       		moveq	#$3F,d1
0001C33A                            
0001C33A                            loc_1B6F6:
0001C33A 743F                       		moveq	#$3F,d2
0001C33C                            
0001C33C                            loc_1B6F8:
0001C33C 12D8                       		move.b	(a0)+,(a1)+
0001C33E 51CA FFFC                  		dbf	d2,loc_1B6F8
0001C342                            
0001C342 43E9 0040                  		lea	$40(a1),a1
0001C346 51C9 FFF2                  		dbf	d1,loc_1B6F6
0001C34A                            
0001C34A 43F9 00FF 4008             		lea	($FF4008).l,a1
0001C350 41F9 0000 0000             		lea	(SS_MapIndex).l,a0
0001C356 724D                       		moveq	#$4D,d1
0001C358                            
0001C358                            loc_1B714:
0001C358 22D8                       		move.l	(a0)+,(a1)+
0001C35A 32FC 0000                  		move.w	#0,(a1)+
0001C35E 1368 FFFC FFFF             		move.b	-4(a0),-1(a1)
0001C364 32D8                       		move.w	(a0)+,(a1)+
0001C366 51C9 FFF0                  		dbf	d1,loc_1B714
0001C36A                            
0001C36A 43F9 00FF 4400             		lea	($FF4400).l,a1
0001C370 323C 003F                  		move.w	#$3F,d1
0001C374                            
0001C374                            loc_1B730:
0001C374                            
0001C374 4299                       		clr.l	(a1)+
0001C376 51C9 FFFC                  		dbf	d1,loc_1B730
0001C37A                            
0001C37A 4E75                       		rts	
0001C37C                            ; End of function SS_Load
0001C37C                            
0001C37C                            ; ===========================================================================
0001C37C                            ; ---------------------------------------------------------------------------
0001C37C                            ; Special stage	mappings and VRAM pointers
0001C37C                            ; ---------------------------------------------------------------------------
0001C37C                            SS_MapIndex:
0001C37C                            	include "_inc\Special stage mappings and VRAM pointers.asm"
0001C37C                            ; ---------------------------------------------------------------------------
0001C37C                            ; Special stage	mappings and VRAM pointers
0001C37C                            ; ---------------------------------------------------------------------------
0001C37C 0000 0000                  	dc.l Map_SSWalls	; address of mappings
0001C380 0142                       	dc.w $142		; VRAM setting
0001C382 0000 0000                  	dc.l Map_SSWalls
0001C386 0142                       	dc.w $142
0001C388 0000 0000                  	dc.l Map_SSWalls
0001C38C 0142                       	dc.w $142
0001C38E 0000 0000                  	dc.l Map_SSWalls
0001C392 0142                       	dc.w $142
0001C394 0000 0000                  	dc.l Map_SSWalls
0001C398 0142                       	dc.w $142
0001C39A 0000 0000                  	dc.l Map_SSWalls
0001C39E 0142                       	dc.w $142
0001C3A0 0000 0000                  	dc.l Map_SSWalls
0001C3A4 0142                       	dc.w $142
0001C3A6 0000 0000                  	dc.l Map_SSWalls
0001C3AA 0142                       	dc.w $142
0001C3AC 0000 0000                  	dc.l Map_SSWalls
0001C3B0 0142                       	dc.w $142
0001C3B2 0000 0000                  	dc.l Map_SSWalls
0001C3B6 2142                       	dc.w $2142
0001C3B8 0000 0000                  	dc.l Map_SSWalls
0001C3BC 2142                       	dc.w $2142
0001C3BE 0000 0000                  	dc.l Map_SSWalls
0001C3C2 2142                       	dc.w $2142
0001C3C4 0000 0000                  	dc.l Map_SSWalls
0001C3C8 2142                       	dc.w $2142
0001C3CA 0000 0000                  	dc.l Map_SSWalls
0001C3CE 2142                       	dc.w $2142
0001C3D0 0000 0000                  	dc.l Map_SSWalls
0001C3D4 2142                       	dc.w $2142
0001C3D6 0000 0000                  	dc.l Map_SSWalls
0001C3DA 2142                       	dc.w $2142
0001C3DC 0000 0000                  	dc.l Map_SSWalls
0001C3E0 2142                       	dc.w $2142
0001C3E2 0000 0000                  	dc.l Map_SSWalls
0001C3E6 2142                       	dc.w $2142
0001C3E8 0000 0000                  	dc.l Map_SSWalls
0001C3EC 4142                       	dc.w $4142
0001C3EE 0000 0000                  	dc.l Map_SSWalls
0001C3F2 4142                       	dc.w $4142
0001C3F4 0000 0000                  	dc.l Map_SSWalls
0001C3F8 4142                       	dc.w $4142
0001C3FA 0000 0000                  	dc.l Map_SSWalls
0001C3FE 4142                       	dc.w $4142
0001C400 0000 0000                  	dc.l Map_SSWalls
0001C404 4142                       	dc.w $4142
0001C406 0000 0000                  	dc.l Map_SSWalls
0001C40A 4142                       	dc.w $4142
0001C40C 0000 0000                  	dc.l Map_SSWalls
0001C410 4142                       	dc.w $4142
0001C412 0000 0000                  	dc.l Map_SSWalls
0001C416 4142                       	dc.w $4142
0001C418 0000 0000                  	dc.l Map_SSWalls
0001C41C 4142                       	dc.w $4142
0001C41E 0000 0000                  	dc.l Map_SSWalls
0001C422 6142                       	dc.w $6142
0001C424 0000 0000                  	dc.l Map_SSWalls
0001C428 6142                       	dc.w $6142
0001C42A 0000 0000                  	dc.l Map_SSWalls
0001C42E 6142                       	dc.w $6142
0001C430 0000 0000                  	dc.l Map_SSWalls
0001C434 6142                       	dc.w $6142
0001C436 0000 0000                  	dc.l Map_SSWalls
0001C43A 6142                       	dc.w $6142
0001C43C 0000 0000                  	dc.l Map_SSWalls
0001C440 6142                       	dc.w $6142
0001C442 0000 0000                  	dc.l Map_SSWalls
0001C446 6142                       	dc.w $6142
0001C448 0000 0000                  	dc.l Map_SSWalls
0001C44C 6142                       	dc.w $6142
0001C44E 0000 0000                  	dc.l Map_SSWalls
0001C452 6142                       	dc.w $6142
0001C454 0000 F538                  	dc.l Map_obj47
0001C458 023B                       	dc.w $23B
0001C45A 0000 0000                  	dc.l Map_SS_R
0001C45E 0570                       	dc.w $570
0001C460 0000 0000                  	dc.l Map_SS_R
0001C464 0251                       	dc.w $251
0001C466 0000 0000                  	dc.l Map_SS_R
0001C46A 0370                       	dc.w $370
0001C46C 0000 0000                  	dc.l Map_SS_Up
0001C470 0263                       	dc.w $263
0001C472 0000 0000                  	dc.l Map_SS_Down
0001C476 0263                       	dc.w $263
0001C478 0000 0000                  	dc.l Map_SS_R
0001C47C 22F0                       	dc.w $22F0
0001C47E 0000 0000                  	dc.l Map_SS_Glass
0001C482 0470                       	dc.w $470
0001C484 0000 0000                  	dc.l Map_SS_Glass
0001C488 05F0                       	dc.w $5F0
0001C48A 0000 0000                  	dc.l Map_SS_Glass
0001C48E 65F0                       	dc.w $65F0
0001C490 0000 0000                  	dc.l Map_SS_Glass
0001C494 25F0                       	dc.w $25F0
0001C496 0000 0000                  	dc.l Map_SS_Glass
0001C49A 45F0                       	dc.w $45F0
0001C49C 0000 0000                  	dc.l Map_SS_R
0001C4A0 02F0                       	dc.w $2F0
0001C4A2 0100 F538                  	dc.l Map_obj47+$1000000	; add frame no.	* $1000000
0001C4A6 023B                       	dc.w $23B
0001C4A8 0200 F538                  	dc.l Map_obj47+$2000000
0001C4AC 023B                       	dc.w $23B
0001C4AE 0000 0000                  	dc.l Map_SS_R
0001C4B2 0797                       	dc.w $797
0001C4B4 0000 0000                  	dc.l Map_SS_R
0001C4B8 07A0                       	dc.w $7A0
0001C4BA 0000 0000                  	dc.l Map_SS_R
0001C4BE 07A9                       	dc.w $7A9
0001C4C0 0000 0000                  	dc.l Map_SS_R
0001C4C4 0797                       	dc.w $797
0001C4C6 0000 0000                  	dc.l Map_SS_R
0001C4CA 07A0                       	dc.w $7A0
0001C4CC 0000 0000                  	dc.l Map_SS_R
0001C4D0 07A9                       	dc.w $7A9
0001C4D2 0000 A838                  	dc.l Map_obj25
0001C4D6 27B2                       	dc.w $27B2
0001C4D8 0000 0000                  	dc.l Map_SS_Chaos3
0001C4DC 0770                       	dc.w $770
0001C4DE 0000 0000                  	dc.l Map_SS_Chaos3
0001C4E2 2770                       	dc.w $2770
0001C4E4 0000 0000                  	dc.l Map_SS_Chaos3
0001C4E8 4770                       	dc.w $4770
0001C4EA 0000 0000                  	dc.l Map_SS_Chaos3
0001C4EE 6770                       	dc.w $6770
0001C4F0 0000 0000                  	dc.l Map_SS_Chaos1
0001C4F4 0770                       	dc.w $770
0001C4F6 0000 0000                  	dc.l Map_SS_Chaos2
0001C4FA 0770                       	dc.w $770
0001C4FC 0000 0000                  	dc.l Map_SS_R
0001C500 04F0                       	dc.w $4F0
0001C502 0400 A838                  	dc.l Map_obj25+$4000000
0001C506 27B2                       	dc.w $27B2
0001C508 0500 A838                  	dc.l Map_obj25+$5000000
0001C50C 27B2                       	dc.w $27B2
0001C50E 0600 A838                  	dc.l Map_obj25+$6000000
0001C512 27B2                       	dc.w $27B2
0001C514 0700 A838                  	dc.l Map_obj25+$7000000
0001C518 27B2                       	dc.w $27B2
0001C51A 0000 0000                  	dc.l Map_SS_Glass
0001C51E 23F0                       	dc.w $23F0
0001C520 0000 0000                  	dc.l Map_SS_Glass+$1000000
0001C524 23F0                       	dc.w $23F0
0001C526 0000 0000                  	dc.l Map_SS_Glass+$2000000
0001C52A 23F0                       	dc.w $23F0
0001C52C 0000 0000                  	dc.l Map_SS_Glass+$3000000
0001C530 23F0                       	dc.w $23F0
0001C532 0000 0000                  	dc.l Map_SS_R+$2000000
0001C536 04F0                       	dc.w $4F0
0001C538 0000 0000                  	dc.l Map_SS_Glass
0001C53C 05F0                       	dc.w $5F0
0001C53E 0000 0000                  	dc.l Map_SS_Glass
0001C542 65F0                       	dc.w $65F0
0001C544 0000 0000                  	dc.l Map_SS_Glass
0001C548 25F0                       	dc.w $25F0
0001C54A 0000 0000                  	dc.l Map_SS_Glass
0001C54E 45F0                       	dc.w $45F0
0001C54E 45F0                       	dc.w $45F0
0001C550                            
0001C550                            ; ---------------------------------------------------------------------------
0001C550                            ; Sprite mappings - special stage "R" block
0001C550                            ; ---------------------------------------------------------------------------
0001C550                            Map_SS_R:
0001C550                            	include "_maps\SSRblock.asm"
0001C550                            ; ---------------------------------------------------------------------------
0001C550                            ; Sprite mappings - special stage "R" block
0001C550                            ; ---------------------------------------------------------------------------
0001C550 0000 0000                  		dc.w byte_1B912-Map_SS_R, byte_1B918-Map_SS_R
0001C554 0000                       		dc.w byte_1B91E-Map_SS_R
0001C556 01                         byte_1B912:	dc.b 1
0001C557 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001C55C 01                         byte_1B918:	dc.b 1
0001C55D F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001C562 00                         byte_1B91E:	dc.b 0
0001C564 00                         		even
0001C564 00                         		even
0001C564                            
0001C564                            ; ---------------------------------------------------------------------------
0001C564                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001C564                            ; ---------------------------------------------------------------------------
0001C564                            Map_SS_Glass:
0001C564                            	include "_maps\SSglassblock.asm"
0001C564                            ; ---------------------------------------------------------------------------
0001C564                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001C564                            ; ---------------------------------------------------------------------------
0001C564 0000 0000                  		dc.w byte_1B928-Map_SS_Glass, byte_1B92E-Map_SS_Glass
0001C568 0000 0000                  		dc.w byte_1B934-Map_SS_Glass, byte_1B93A-Map_SS_Glass
0001C56C 01                         byte_1B928:	dc.b 1
0001C56D F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001C572 01                         byte_1B92E:	dc.b 1
0001C573 F40A 0800 F4               		dc.b $F4, $A, 8, 0, $F4
0001C578 01                         byte_1B934:	dc.b 1
0001C579 F40A 1800 F4               		dc.b $F4, $A, $18, 0, $F4
0001C57E 01                         byte_1B93A:	dc.b 1
0001C57F F40A 1000 F4               		dc.b $F4, $A, $10, 0, $F4
0001C584                            		even
0001C584                            		even
0001C584                            
0001C584                            ; ---------------------------------------------------------------------------
0001C584                            ; Sprite mappings - special stage "UP" block
0001C584                            ; ---------------------------------------------------------------------------
0001C584                            Map_SS_Up:
0001C584                            	include "_maps\SSUPblock.asm"
0001C584                            ; ---------------------------------------------------------------------------
0001C584                            ; Sprite mappings - special stage "UP" block
0001C584                            ; ---------------------------------------------------------------------------
0001C584 0000                       		dc.w byte_1B944-Map_SS_Up
0001C586 0000                       		dc.w byte_1B94A-Map_SS_Up
0001C588 01                         byte_1B944:	dc.b 1
0001C589 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001C58E 01                         byte_1B94A:	dc.b 1
0001C58F F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001C594                            		even
0001C594                            		even
0001C594                            
0001C594                            ; ---------------------------------------------------------------------------
0001C594                            ; Sprite mappings - special stage "DOWN" block
0001C594                            ; ---------------------------------------------------------------------------
0001C594                            Map_SS_Down:
0001C594                            	include "_maps\SSDOWNblock.asm"
0001C594                            ; ---------------------------------------------------------------------------
0001C594                            ; Sprite mappings - special stage "DOWN" block
0001C594                            ; ---------------------------------------------------------------------------
0001C594 0000                       		dc.w byte_1B954-Map_SS_Down
0001C596 0000                       		dc.w byte_1B95A-Map_SS_Down
0001C598 01                         byte_1B954:	dc.b 1
0001C599 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001C59E 01                         byte_1B95A:	dc.b 1
0001C59F F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001C5A4                            		even
0001C5A4                            		even
0001C5A4                            
0001C5A4                            ; ---------------------------------------------------------------------------
0001C5A4                            ; Sprite mappings - special stage chaos	emeralds
0001C5A4                            ; ---------------------------------------------------------------------------
0001C5A4 0000                       Map_SS_Chaos1:	dc.w byte_1B96C-Map_SS_Chaos1
0001C5A6 0000                       		dc.w byte_1B97E-Map_SS_Chaos1
0001C5A8 0000                       Map_SS_Chaos2:	dc.w byte_1B972-Map_SS_Chaos2
0001C5AA 0000                       		dc.w byte_1B97E-Map_SS_Chaos2
0001C5AC 0000                       Map_SS_Chaos3:	dc.w byte_1B978-Map_SS_Chaos3
0001C5AE 0000                       		dc.w byte_1B97E-Map_SS_Chaos3
0001C5B0 01                         byte_1B96C:	dc.b 1
0001C5B1 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001C5B6 01                         byte_1B972:	dc.b 1
0001C5B7 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0001C5BC 01                         byte_1B978:	dc.b 1
0001C5BD F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
0001C5C2 01                         byte_1B97E:	dc.b 1
0001C5C3 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
0001C5C8                            		even
0001C5C8                            ; ===========================================================================
0001C5C8                            ; ---------------------------------------------------------------------------
0001C5C8                            ; Object 09 - Sonic (special stage)
0001C5C8                            ; ---------------------------------------------------------------------------
0001C5C8                            
0001C5C8                            Obj09:					; XREF: Obj_Index
0001C5C8                            ;		tst.w	($FFFFFE08).w	; is debug mode	being used?
0001C5C8                            ;		beq.s	Obj09_Normal	; if not, branch
0001C5C8 6100 0000                  		bsr.w	SS_FixCamera
0001C5CC                            ;		bra.w	DebugMode
0001C5CC                            ; ===========================================================================
0001C5CC                            
0001C5CC                            Obj09_Normal:
0001C5CC 7000                       		moveq	#0,d0
0001C5CE 1028 0024                  		move.b	$24(a0),d0
0001C5D2 323B 0000                  		move.w	Obj09_Index(pc,d0.w),d1
0001C5D6 4EFB 1000                  		jmp	Obj09_Index(pc,d1.w)
0001C5DA                            ; ===========================================================================
0001C5DA 0000                       Obj09_Index:	dc.w Obj09_Main-Obj09_Index
0001C5DC 0000                       		dc.w Obj09_ChkDebug-Obj09_Index
0001C5DE 0000                       		dc.w Obj09_ExitStage-Obj09_Index
0001C5E0 0000                       		dc.w Obj09_Exit2-Obj09_Index
0001C5E2                            ; ===========================================================================
0001C5E2                            
0001C5E2                            Obj09_Main:				; XREF: Obj09_Index
0001C5E2 5428 0024                  		addq.b	#2,$24(a0)
0001C5E6 117C 000E 0016             		move.b	#$E,$16(a0)
0001C5EC 117C 0007 0017             		move.b	#7,$17(a0)
0001C5F2 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
0001C5FA 317C 0780 0002             		move.w	#$780,2(a0)
0001C600 117C 0004 0001             		move.b	#4,1(a0)
0001C606 117C 0000 0018             		move.b	#0,$18(a0)
0001C60C 117C 0002 001C             		move.b	#2,$1C(a0)
0001C612 08E8 0002 0022             		bset	#2,$22(a0)
0001C618 08E8 0001 0022             		bset	#1,$22(a0)
0001C61E                            
0001C61E                            Obj09_ChkDebug:				; XREF: Obj09_Index
0001C61E                            ;		tst.w	($FFFFFFFA).w	; is debug mode	cheat enabled?
0001C61E                            ;		beq.s	Obj09_NoDebug	; if not, branch
0001C61E                            ;		btst	#4,($FFFFF605).w ; is button B pressed?
0001C61E                            ;		beq.s	Obj09_NoDebug	; if not, branch
0001C61E                            ;		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring
0001C61E                            
0001C61E                            Obj09_NoDebug:
0001C61E 117C 0000 0030             		move.b	#0,$30(a0)
0001C624 7000                       		moveq	#0,d0
0001C626 1028 0022                  		move.b	$22(a0),d0
0001C62A 0240 0002                  		andi.w	#2,d0
0001C62E 323B 0000                  		move.w	Obj09_Modes(pc,d0.w),d1
0001C632 4EBB 1000                  		jsr	Obj09_Modes(pc,d1.w)
0001C636 4EBA 8116                  		jsr	LoadSonicDynPLC
0001C63A 4EF9 0000 E044             		jmp	DisplaySprite
0001C640                            ; ===========================================================================
0001C640 0000                       Obj09_Modes:	dc.w Obj09_OnWall-Obj09_Modes
0001C642 0000                       		dc.w Obj09_InAir-Obj09_Modes
0001C644                            ; ===========================================================================
0001C644                            
0001C644                            Obj09_OnWall:				; XREF: Obj09_Modes
0001C644 6100 0000                  		bsr.w	Obj09_Rise
0001C648 6100 0000                  		bsr.w	Obj09_Move
0001C64C 6100 0000                  		bsr.w	Obj09_Fall
0001C650 6000                       		bra.s	Obj09_Display
0001C652                            ; ===========================================================================
0001C652                            
0001C652                            Obj09_InAir:				; XREF: Obj09_Modes
0001C652 6100 0000                  		bsr.w	Obj09_Rise
0001C656 6100 0000                  		bsr.w	Obj09_Move
0001C65A 6100 0000                  		bsr.w	Obj09_Fall
0001C65E                            
0001C65E                            Obj09_Display:				; XREF: Obj09_OnWall
0001C65E 6100 0000                  		bsr.w	Obj09_ChkItems
0001C662 6100 0000                  		bsr.w	Obj09_ChkItems2
0001C666 4EB9 0000 E01E             		jsr	SpeedToPos
0001C66C 6100 0000                  		bsr.w	SS_FixCamera
0001C670 3038 F780                  		move.w	($FFFFF780).w,d0
0001C674 D078 F782                  		add.w	($FFFFF782).w,d0
0001C678 31C0 F780                  		move.w	d0,($FFFFF780).w
0001C67C 4EB9 0001 44A8             		jsr	Sonic_Animate
0001C682 4E75                       		rts	
0001C684                            
0001C684                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C684                            
0001C684                            
0001C684                            Obj09_Move:				; XREF: Obj09_OnWall; Obj09_InAir
0001C684 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
0001C68A 6700                       		beq.s	Obj09_ChkRight	; if not, branch
0001C68C 4A78 F784                          tst.w   ($FFFFF784).w
0001C690 6600                               bne.s   @corereverse1
0001C692 6100 0000                  		bsr.w	Obj09_MoveLeft
0001C696 6000                               bra.s   Obj09_ChkRight          
0001C698                            
0001C698                            @corereverse1:
0001C698 6100 0000                          bsr.w	Obj09_MoveRight
0001C69C                            
0001C69C                            Obj09_ChkRight:
0001C69C 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
0001C6A2 6700                       		beq.s	Obj09_MoveSpeed	; if not, branch
0001C6A4 4A78 F784                          tst.w   ($FFFFF784).w
0001C6A8 6600                               bne.s   @corereverse2
0001C6AA 6100 0000                  		bsr.w	Obj09_MoveRight
0001C6AE 6000                               bra.s   Obj09_MoveSpeed 
0001C6B0                            
0001C6B0                            @corereverse2:
0001C6B0 6100 0000                  		bsr.w	Obj09_MoveLeft			;	branch to right movement subroutine
0001C6B4                            
0001C6B4                            Obj09_MoveSpeed:
0001C6B4 1038 F602                  		move.b	($FFFFF602).w,d0
0001C6B8 0200 000C                  		andi.b	#$C,d0
0001C6BC 6600                       		bne.s	Obj09_MoveCollision
0001C6BE 3028 0010                  		move.w	$10(a0),d0
0001C6C2 6700                       		beq.s	Obj09_MoveCollision
0001C6C4 317C 0000 0010             		move.w	#0,$10(a0)
0001C6CA                            
0001C6CA                            Obj09_MoveCollision:
0001C6CA 1038 F780                  		move.b	($FFFFF780).w,d0
0001C6CE 0600 0020                  		addi.b	#$20,d0
0001C6D2 0200 00C0                  		andi.b	#$C0,d0
0001C6D6 4400                       		neg.b	d0
0001C6D8 4EB9 0000 2D34             		jsr	(CalcSine).l
0001C6DE C3E8 0010                  		muls.w	$10(a0),d1
0001C6E2 D3A8 0008                  		add.l	d1,8(a0)
0001C6E6 C1E8 0012                  		muls.w	$12(a0),d0
0001C6EA D1A8 000C                  		add.l	d0,$C(a0)
0001C6EE 48E7 C000                  		movem.l	d0-d1,-(sp)
0001C6F2 2428 000C                  		move.l	$C(a0),d2
0001C6F6 2628 0008                  		move.l	8(a0),d3
0001C6FA 6100 0000                  		bsr.w	sub_1BCE8
0001C6FE 6700                       		beq.s	loc_1BAF2
0001C700 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001C704 93A8 0008                  		sub.l	d1,8(a0)
0001C708 91A8 000C                  		sub.l	d0,$C(a0)
0001C70C 317C 0000 0010             		move.w	#0,$10(a0)
0001C712 4E75                       		rts	
0001C714                            ; ===========================================================================
0001C714                            
0001C714                            loc_1BAF2:
0001C714 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001C718 4E75                       		rts	
0001C71A                            ; End of function Obj09_Move
0001C71A                            
0001C71A                            
0001C71A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C71A                            
0001C71A                            
0001C71A                            Obj09_MoveLeft:				; XREF: Obj09_Move
0001C71A 08E8 0000 0022             		bset	#0,$22(a0)
0001C720 4240                               clr.w   d0
0001C722 3038 F786                          move.w  ($FFFFF786).w,d0
0001C726 D040                               add.w   d0,d0
0001C728 317B 0000 0010                     move.w	SS_XSpdIndex(pc,d0.w),$10(a0)
0001C72E 4468 0010                          neg.w   $10(a0)
0001C732 4E75                               rts
0001C734                            
0001C734                            ; End of function Obj09_MoveLeft
0001C734                            
0001C734                            
0001C734                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C734                            
0001C734                            
0001C734                            Obj09_MoveRight:
0001C734 08A8 0000 0022             		bclr	#0,$22(a0)
0001C73A 4240                               clr.w   d0
0001C73C 3038 F786                          move.w  ($FFFFF786).w,d0
0001C740 D040                               add.w   d0,d0
0001C742 317B 0000 0010                     move.w	SS_XSpdIndex(pc,d0.w),$10(a0)
0001C748 4E75                       		rts
0001C74A                            
0001C74A                            ; End of function Obj09_MoveRight
0001C74A                            
0001C74A                            ; ---------------------------------------------------------------------------
0001C74A                            
0001C74A                            SS_XSpdIndex:
0001C74A 0032                       		dc.w 50
0001C74C 0064                       		dc.w 100
0001C74E 0096                       		dc.w 150
0001C750 00C8                       		dc.w 200
0001C752 00FA                       		dc.w 250
0001C754                            
0001C754                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C754                            
0001C754                            
0001C754                            Obj09_Rise:				; XREF: Obj09_OnWall
0001C754 0838 0000 F602             		btst	#0,($FFFFF602).w
0001C75A 6700                       		beq.s	Obj09_NoRise	; if not, branch
0001C75C 4A78 F784                          tst.w   ($FFFFF784).w
0001C760 6600 0000                          bne.w   @corereverse1
0001C764 6100 0000                  		bsr.w	Obj09_MoveUp
0001C768 6000                               bra.s   Obj09_NoRise
0001C76A                            
0001C76A                            @corereverse1:
0001C76A 6100 0000                  		bsr.w	Obj09_Falling 
0001C76E                                    
0001C76E                            Obj09_NoRise:
0001C76E 0838 0001 F602             		btst	#1,($FFFFF602).w	;	is Dn Pressed?
0001C774 6700                       		beq.s	Obj09_MoveYSpeed		;	
0001C776 4A78 F784                          tst.w   ($FFFFF784).w
0001C77A 6600 0000                          bne.w   @corereverse2
0001C77E 6100 0000                  		bsr.w	Obj09_Falling			;	
0001C782 6000                               bra.s   Obj09_MoveYSpeed
0001C784                            
0001C784                            @corereverse2:
0001C784 6100 0000                  		bsr.w	Obj09_MoveUp
0001C788                            		
0001C788                            Obj09_MoveYSpeed:
0001C788 1038 F602                  		move.b	($FFFFF602).w,d0
0001C78C 0200 0003                  		andi.b	#3,d0
0001C790 6600                       		bne.s	Obj09_MoveYCollision
0001C792 3028 0012                  		move.w	$12(a0),d0
0001C796 6700                       		beq.s	Obj09_MoveYCollision
0001C798 317C 0000 0012             		move.w	#0,$12(a0)
0001C79E                            
0001C79E                            Obj09_MoveYCollision:		;	CODE TO CHECK STAGE COLLISION ON X-AXIS
0001C79E 1038 F780                  		move.b	($FFFFF780).w,d0		;	check the Special Stage Angle
0001C7A2 0600 0020                  		addi.b	#$20,d0					;	?
0001C7A6 0200 00C0                  		andi.b	#$C0,d0					;	
0001C7AA 4400                       		neg.b	d0						;	?
0001C7AC 4EB9 0000 2D34             		jsr	(CalcSine).l				;	load speed trajectory algorithms
0001C7B2 C3E8 0010                  		muls.w	$10(a0),d1			;	calculate x-speed trajectory
0001C7B6 D3A8 0008                  		add.l	d1,8(a0)				;	calculate Sonic's next x position
0001C7BA C1E8 0012                  		muls.w	$12(a0),d0			;	calculate y-speed trajectory
0001C7BE D1A8 000C                  		add.l	d0,$C(a0)				;	calculate Sonic's next y position
0001C7C2 48E7 C000                  		movem.l	d0-d1,-(sp)				;	save trajectory values
0001C7C6 2428 000C                  		move.l	$C(a0),d2				;	move sonic's next y-position into d2
0001C7CA 2628 0008                  		move.l	8(a0),d3				;	move sonic's next x-position into d3
0001C7CE 6100 0000                  		bsr.w	sub_1BCE8				;	branch to the collision detection routine
0001C7D2 6700 FF40                  		beq.w	loc_1BAF2				;	if Sonic's not colliding with anything branch
0001C7D6 4CDF 0003                  		movem.l	(sp)+,d0-d1				;	remove x and y speed trajectory from the stack
0001C7DA 93A8 0008                  		sub.l	d1,8(a0)				;	cancel out Sonic's next x-position
0001C7DE 91A8 000C                  		sub.l	d0,$C(a0)				;	cancel out Sonic's next y-position
0001C7E2 317C 0000 0012             		move.w	#0,$12(a0)           ;	Make Sonic Stop
0001C7E8 4E75                       		rts								;	end routine
0001C7EA                            
0001C7EA                            Obj09_MoveUp:
0001C7EA 4240                               clr.w   d0
0001C7EC 3038 F786                          move.w  ($FFFFF786).w,d0
0001C7F0 D040                               add.w   d0,d0
0001C7F2 317B 0000 0012                     move.w	SS_YSpdIndex(pc,d0.w),$12(a0)
0001C7F8 4468 0012                          neg.w   $12(a0)
0001C7FC 4E75                               rts
0001C7FE                            
0001C7FE                            Obj09_Falling:
0001C7FE 4240                               clr.w   d0
0001C800 3038 F786                          move.w  ($FFFFF786).w,d0
0001C804 D040                               add.w   d0,d0
0001C806 317B 0000 0012                     move.w	SS_YSpdIndex(pc,d0.w),$12(a0)
0001C80C 4E75                       		rts
0001C80E                            ; End of function Obj09_Jump
0001C80E                            
0001C80E                            ; ---------------------------------------------------------------------------
0001C80E                            SS_YSpdIndex:
0001C80E 0080                       		dc.w $80
0001C810 0100                       		dc.w $100
0001C812 0180                       		dc.w $180
0001C814 0200                       		dc.w $200
0001C816 0280                       		dc.w $280
0001C818                            
0001C818                            
0001C818                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C818                            
0001C818                            
0001C818                            nullsub_2:				; XREF: Obj09_InAir
0001C818 4E75                       		rts	
0001C81A                            ; End of function nullsub_2
0001C81A                            
0001C81A                            ; ===========================================================================
0001C81A                            ; ---------------------------------------------------------------------------
0001C81A                            ; unused subroutine to limit Sonic's upward vertical speed
0001C81A                            ; ---------------------------------------------------------------------------
0001C81A 323C FC00                  		move.w	#-$400,d1
0001C81E B268 0012                  		cmp.w	$12(a0),d1
0001C822 6F00                       		ble.s	locret_1BBB4
0001C824 1038 F602                  		move.b	($FFFFF602).w,d0
0001C828 0200 0070                  		andi.b	#$70,d0
0001C82C 6600                       		bne.s	locret_1BBB4
0001C82E 3141 0012                  		move.w	d1,$12(a0)
0001C832                            
0001C832                            locret_1BBB4:
0001C832 4E75                       		rts	
0001C834                            ; ---------------------------------------------------------------------------
0001C834                            ; Subroutine to	fix the	camera on Sonic's position (special stage)
0001C834                            ; ---------------------------------------------------------------------------
0001C834                            
0001C834                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C834                            
0001C834                            
0001C834                            SS_FixCamera:				; XREF: Obj09
0001C834 3428 000C                  		move.w	$C(a0),d2
0001C838 3628 0008                  		move.w	8(a0),d3
0001C83C 3038 F700                  		move.w	($FFFFF700).w,d0
0001C840 0443 00A0                  		subi.w	#$A0,d3
0001C844 6500                       		bcs.s	loc_1BBCE
0001C846 9043                       		sub.w	d3,d0
0001C848 9178 F700                  		sub.w	d0,($FFFFF700).w
0001C84C                            
0001C84C                            loc_1BBCE:
0001C84C 3038 F704                  		move.w	($FFFFF704).w,d0
0001C850 0442 0070                  		subi.w	#$70,d2
0001C854 6500                       		bcs.s	locret_1BBDE
0001C856 9042                       		sub.w	d2,d0
0001C858 9178 F704                  		sub.w	d0,($FFFFF704).w
0001C85C                            
0001C85C                            locret_1BBDE:
0001C85C 4E75                       		rts	
0001C85E                            ; End of function SS_FixCamera
0001C85E                            
0001C85E                            ; ===========================================================================
0001C85E                            
0001C85E                            Obj09_ExitStage:			; XREF: Obj09_Index
0001C85E 0678 0040 F782             		addi.w	#$40,($FFFFF782).w
0001C864 0C78 1800 F782             		cmpi.w	#$1800,($FFFFF782).w
0001C86A 6600                       		bne.s	loc_1BBF4
0001C86C 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001C872                            
0001C872                            loc_1BBF4:
0001C872 0C78 3000 F782             		cmpi.w	#$3000,($FFFFF782).w
0001C878 6D00                       		blt.s	loc_1BC12
0001C87A 31FC 0000 F782             		move.w	#0,($FFFFF782).w
0001C880                            ;		move.w	#$4000,($FFFFF780).w
0001C880 5428 0024                  		addq.b	#2,$24(a0)
0001C884 317C 003C 0038             		move.w	#$3C,$38(a0)
0001C88A                            
0001C88A                            loc_1BC12:
0001C88A                            ;		move.w	($FFFFF780).w,d0
0001C88A                            ;		add.w	($FFFFF782).w,d0
0001C88A                            ;		move.w	d0,($FFFFF780).w
0001C88A 4EB9 0001 44A8             		jsr	Sonic_Animate
0001C890 4EB9 0001 474E             		jsr	LoadSonicDynPLC
0001C896 6100 FF9C                  		bsr.w	SS_FixCamera
0001C89A 4EF9 0000 E044             		jmp	DisplaySprite
0001C8A0                            ; ===========================================================================
0001C8A0                            
0001C8A0                            Obj09_Exit2:				; XREF: Obj09_Index
0001C8A0 5368 0038                  		subq.w	#1,$38(a0)
0001C8A4 6600                       		bne.s	loc_1BC40
0001C8A6 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001C8AC                            
0001C8AC                            loc_1BC40:
0001C8AC 4EB9 0001 44A8             		jsr	Sonic_Animate
0001C8B2 4EB9 0001 474E             		jsr	LoadSonicDynPLC
0001C8B8 6100 FF7A                  		bsr.w	SS_FixCamera
0001C8BC 4EF9 0000 E044             		jmp	DisplaySprite
0001C8C2                            
0001C8C2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C8C2                            
0001C8C2                            
0001C8C2                            Obj09_Fall:				; XREF: Obj09_OnWall; Obj09_InAir
0001C8C2 2428 000C                  		move.l	$C(a0),d2
0001C8C6 2628 0008                  		move.l	8(a0),d3
0001C8CA 1038 F780                  		move.b	($FFFFF780).w,d0
0001C8CE 0200 00FC                  		andi.b	#$FC,d0
0001C8D2 4EB9 0000 2D34             		jsr	(CalcSine).l
0001C8D8 3828 0010                  		move.w	$10(a0),d4
0001C8DC 48C4                       		ext.l	d4
0001C8DE E184                       		asl.l	#8,d4
0001C8E0 C1FC 002A                  		muls.w	#$2A,d0
0001C8E4 D084                       		add.l	d4,d0
0001C8E6 3828 0012                  		move.w	$12(a0),d4
0001C8EA 48C4                       		ext.l	d4
0001C8EC E184                       		asl.l	#8,d4
0001C8EE C3FC 002A                  		muls.w	#$2A,d1
0001C8F2 D284                       		add.l	d4,d1
0001C8F4 7A00                       		moveq	#0,d5
0001C8F6 3A28 0010                  		move.w	$10(a0),d5
0001C8FA 6700                       		beq.s	Obj09_NoXFall
0001C8FC D680                       		add.l	d0,d3
0001C8FE 6100 0000                  		bsr.w	sub_1BCE8
0001C902 6700                       		beq.s	loc_1BCB0
0001C904 9680                       		sub.l	d0,d3
0001C906 7000                       		moveq	#0,d0
0001C908 3140 0010                  		move.w	d0,$10(a0)
0001C90C 08A8 0001 0022             		bclr	#1,$22(a0)
0001C912                            
0001C912                            Obj09_NoXFall
0001C912 7C00                       		moveq	#0,d6
0001C914 3C28 0012                  		move.w	$12(a0),d6
0001C918 6700                       		beq.s	Obj09_NoYFall
0001C91A D481                       		add.l	d1,d2
0001C91C 6100 0000                  		bsr.w	sub_1BCE8
0001C920 6700                       		beq.s	loc_1BCC6
0001C922 9481                       		sub.l	d1,d2
0001C924 7200                       		moveq	#0,d1
0001C926 3141 0012                  		move.w	d1,$12(a0)
0001C92A 4E75                       		rts	
0001C92C                            ; ===========================================================================
0001C92C                            
0001C92C                            loc_1BCB0:
0001C92C 7C00                       		moveq	#0,d6
0001C92E 3C28 0012                  		move.w	$12(a0),d6
0001C932 6700                       		beq.s	Obj09_NoYFall
0001C934 D481                       		add.l	d1,d2
0001C936 6100 0000                  		bsr.w	sub_1BCE8
0001C93A 6700                       		beq.s	loc_1BCD4
0001C93C 9481                       		sub.l	d1,d2
0001C93E 7200                       		moveq	#0,d1
0001C940 3141 0012                  		move.w	d1,$12(a0)
0001C944 08A8 0001 0022             		bclr	#1,$22(a0)
0001C94A                            
0001C94A                            loc_1BCC6:
0001C94A E080                       		asr.l	#8,d0
0001C94C E081                       		asr.l	#8,d1
0001C94E 3140 0010                  		move.w	d0,$10(a0)
0001C952 3141 0012                  		move.w	d1,$12(a0)
0001C956 4E75                       		rts	
0001C958                            ; ===========================================================================
0001C958                            
0001C958                            loc_1BCD4:
0001C958 E080                       		asr.l	#8,d0
0001C95A E081                       		asr.l	#8,d1
0001C95C 3140 0010                  		move.w	d0,$10(a0)
0001C960 3141 0012                  		move.w	d1,$12(a0)
0001C964 08E8 0001 0022             		bset	#1,$22(a0)
0001C96A 4E75                       		rts	
0001C96C                            
0001C96C                            Obj09_NoYFall:
0001C96C 4E75                       		rts
0001C96E                            ; End of function Obj09_Fall
0001C96E                            
0001C96E                            
0001C96E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C96E                            
0001C96E                            
0001C96E                            sub_1BCE8:				; XREF: Obj09_Move; Obj09_Fall
0001C96E 43F9 00FF 0000             		lea	($FF0000).l,a1
0001C974 7800                       		moveq	#0,d4
0001C976 4842                       		swap	d2
0001C978 3802                       		move.w	d2,d4
0001C97A 4842                       		swap	d2
0001C97C 0644 0044                  		addi.w	#$44,d4
0001C980 88FC 0018                  		divu.w	#$18,d4
0001C984 C8FC 0080                  		mulu.w	#$80,d4
0001C988 D3C4                       		adda.l	d4,a1
0001C98A 7800                       		moveq	#0,d4
0001C98C 4843                       		swap	d3
0001C98E 3803                       		move.w	d3,d4
0001C990 4843                       		swap	d3
0001C992 0644 0014                  		addi.w	#$14,d4
0001C996 88FC 0018                  		divu.w	#$18,d4
0001C99A D2C4                       		adda.w	d4,a1
0001C99C 7A00                       		moveq	#0,d5
0001C99E 1819                       		move.b	(a1)+,d4
0001C9A0 6100                       		bsr.s	sub_1BD30
0001C9A2 1819                       		move.b	(a1)+,d4
0001C9A4 6100                       		bsr.s	sub_1BD30
0001C9A6 D2FC 007E                  		adda.w	#$7E,a1
0001C9AA 1819                       		move.b	(a1)+,d4
0001C9AC 6100                       		bsr.s	sub_1BD30
0001C9AE 1819                       		move.b	(a1)+,d4
0001C9B0 6100                       		bsr.s	sub_1BD30
0001C9B2 4A05                       		tst.b	d5
0001C9B4 4E75                       		rts	
0001C9B6                            ; End of function sub_1BCE8
0001C9B6                            
0001C9B6                            
0001C9B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C9B6                            
0001C9B6                            
0001C9B6                            sub_1BD30:				; XREF: sub_1BCE8
0001C9B6 6700                       		beq.s	locret_1BD44
0001C9B8 0C04 0028                  		cmpi.b	#$28,d4
0001C9BC 6500                       		blo.s	loc_1BD46
0001C9BE 0C04 004B                  		cmpi.b	#$4B,d4
0001C9C2 6400                       		bhs.s	loc_1BD46
0001C9C4 0C04 003A                  		cmpi.b	#$3A,d4
0001C9C8 6400                       		bhs.s	locret_1BD44
0001C9CA 0C04 002C                  		cmpi.b	#$2C,d4
0001C9CE 6400                       		bhs.s	loc_1BD46
0001C9D0                            
0001C9D0                            locret_1BD44:
0001C9D0 4E75                       		rts	
0001C9D2                            ; ===========================================================================
0001C9D2                            
0001C9D2                            loc_1BD46:
0001C9D2 1144 0030                  		move.b	d4,$30(a0)
0001C9D6 2149 0032                  		move.l	a1,$32(a0)
0001C9DA 7AFF                       		moveq	#-1,d5
0001C9DC 4E75                       		rts	
0001C9DE                            ; End of function sub_1BD30
0001C9DE                            
0001C9DE                            
0001C9DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C9DE                            
0001C9DE                            
0001C9DE                            Obj09_ChkItems:				; XREF: Obj09_Display
0001C9DE 43F9 00FF 0000             		lea	($FF0000).l,a1
0001C9E4 7800                       		moveq	#0,d4
0001C9E6 3828 000C                  		move.w	$C(a0),d4
0001C9EA 0644 0050                  		addi.w	#$50,d4
0001C9EE 88FC 0018                  		divu.w	#$18,d4
0001C9F2 C8FC 0080                  		mulu.w	#$80,d4
0001C9F6 D3C4                       		adda.l	d4,a1
0001C9F8 7800                       		moveq	#0,d4
0001C9FA 3828 0008                  		move.w	8(a0),d4
0001C9FE 0644 0020                  		addi.w	#$20,d4
0001CA02 88FC 0018                  		divu.w	#$18,d4
0001CA06 D2C4                       		adda.w	d4,a1
0001CA08 1811                       		move.b	(a1),d4
0001CA0A 6600                       		bne.s	Obj09_ChkCont
0001CA0C 4A28 003A                  		tst.b	$3A(a0)
0001CA10 6600 0000                  		bne.w	Obj09_MakeGhostSolid
0001CA14 7800                       		moveq	#0,d4
0001CA16 4E75                       		rts	
0001CA18                            ; ===========================================================================
0001CA18                            
0001CA18                            Obj09_ChkCont:
0001CA18 0C04 003A                  		cmpi.b	#$3A,d4		; is the item a	ring?
0001CA1C 6600                       		bne.s	Obj09_Chk1Up
0001CA1E 6100 F6DE                  		bsr.w	SS_RemoveCollectedItem
0001CA22 6600                       		bne.s	Obj09_GetCont
0001CA24 14BC 0001                  		move.b	#1,(a2)
0001CA28 2549 0004                  		move.l	a1,4(a2)
0001CA2C                            
0001CA2C                            Obj09_GetCont:
0001CA2C 4EB9 0000 A520             		jsr	CollectRing
0001CA32 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; check if you have 50 rings
0001CA38 6500                       		bcs.s	Obj09_NoCont
0001CA3A 08F8 0000 FE1B             		bset	#0,($FFFFFE1B).w
0001CA40 6600                       		bne.s	Obj09_NoCont
0001CA42 5238 FE18                  		addq.b	#1,($FFFFFE18).w ; add 1 to number of continues
0001CA46 303C 00BF                  		move.w	#$BF,d0
0001CA4A 4EB9 0000 1594             		jsr	(PlaySound).l	; play extra continue sound
0001CA50                            
0001CA50                            Obj09_NoCont:
0001CA50 7800                       		moveq	#0,d4
0001CA52 4E75                       		rts	
0001CA54                            ; ===========================================================================
0001CA54                            
0001CA54                            Obj09_Chk1Up:
0001CA54 0C04 0028                  		cmpi.b	#$28,d4		; is the item an extra life?
0001CA58 6600                       		bne.s	Obj09_ChkEmer
0001CA5A 6100 F6A2                  		bsr.w	SS_RemoveCollectedItem
0001CA5E 6600                       		bne.s	Obj09_Get1Up
0001CA60 14BC 0003                  		move.b	#3,(a2)
0001CA64 2549 0004                  		move.l	a1,4(a2)
0001CA68                            
0001CA68                            Obj09_Get1Up:
0001CA68 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to number of lives
0001CA6C 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to lives counter
0001CA70 303C 0088                  		move.w	#$88,d0
0001CA74 4EB9 0000 1594             		jsr	(PlaySound).l	; play extra life music
0001CA7A 7800                       		moveq	#0,d4
0001CA7C 4E75                       		rts	
0001CA7E                            ; ===========================================================================
0001CA7E                            
0001CA7E                            Obj09_ChkEmer:
0001CA7E 0C04 003B                  		cmpi.b	#$3B,d4		; is the item an emerald?
0001CA82 6500                       		bcs.s	Obj09_UPblock
0001CA84 0C04 0040                  		cmpi.b	#$40,d4
0001CA88 6200                       		bhi.s	Obj09_UPblock
0001CA8A 6100 F672                  		bsr.w	SS_RemoveCollectedItem
0001CA8E 6600                       		bne.s	Obj09_GetEmer
0001CA90 14BC 0005                  		move.b	#5,(a2)
0001CA94 2549 0004                  		move.l	a1,4(a2)
0001CA98                            
0001CA98                            Obj09_GetEmer:
0001CA98 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all the emeralds?
0001CA9E 6700                       		beq.s	Obj09_NoEmer	; if yes, branch
0001CAA0 0404 003B                  		subi.b	#$3B,d4
0001CAA4 7000                       		moveq	#0,d0
0001CAA6 1038 FE57                  		move.b	($FFFFFE57).w,d0
0001CAAA 45F8 FE58                  		lea	($FFFFFE58).w,a2
0001CAAE 1584 0000                  		move.b	d4,(a2,d0.w)
0001CAB2 5238 FE57                  		addq.b	#1,($FFFFFE57).w ; add 1 to number of emeralds
0001CAB6                            
0001CAB6                            Obj09_NoEmer:
0001CAB6 303C 0093                  		move.w	#$93,d0
0001CABA 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play emerald music
0001CAC0 7800                       		moveq	#0,d4
0001CAC2 4E75                       		rts	
0001CAC4                            
0001CAC4                            ; ===========================================================================
0001CAC4                            
0001CAC4                            Obj09_UPblock:
0001CAC4 0C04 0029                  		cmpi.b	#$29,d4		; is the item an "UP" block?
0001CAC8 6600                       		bne.s	Obj09_DOWNblock
0001CACA 6100 F632                  		bsr.w	SS_RemoveCollectedItem
0001CACE 6600                       		bne.s	Obj09_SpeedUp
0001CAD0 14BC 0001                  		move.b	#1,(a2)
0001CAD4 2549 0004                  		move.l	a1,4(a2)
0001CAD8                            
0001CAD8                            Obj09_SpeedUp:
0001CAD8 0C78 0004 F786             		cmpi.w	#4,($FFFFF786).w
0001CADE 6400                       		bhs.s	Obj09_UPsnd
0001CAE0 5278 F786                  		addi.w	#1,($FFFFF786).w	; increase stage rotation speed
0001CAE4                            
0001CAE4                            Obj09_UPsnd:
0001CAE4 303C 00A9                  		move.w	#$A9,d0
0001CAE8 4EB9 0000 159A             		jsr	(PlaySound_Special).l	; play up/down sound
0001CAEE 7800                       		moveq	#0,d4
0001CAF0 4E75                       		rts	
0001CAF2                            ; ===========================================================================
0001CAF2                            
0001CAF2                            Obj09_DOWNblock:
0001CAF2 0C04 002A                  		cmpi.b	#$2A,d4		; is the item a	"DOWN" block?
0001CAF6 6600                       		bne.s	Obj09_Rblock
0001CAF8 6100 F604                  		bsr.w	SS_RemoveCollectedItem
0001CAFC 6600                       		bne.s	Obj09_SpeedDown
0001CAFE 14BC 0001                  		move.b	#1,(a2)
0001CB02 2549 0004                  		move.l	a1,4(a2)
0001CB06                            
0001CB06                            Obj09_SpeedDown:
0001CB06 4A78 F786                  		tst.w 	($FFFFF786).w
0001CB0A 6700                       		beq.s	Obj09_DOWNsnd
0001CB0C 5378 F786                  		subi.w	#1,($FFFFF786).w	; reduce stage rotation speed
0001CB10                            
0001CB10                            Obj09_DOWNsnd:
0001CB10 303C 00A9                  		move.w	#$A9,d0
0001CB14 4EB9 0000 159A             		jsr	(PlaySound_Special).l	; play up/down sound
0001CB1A 7800                       		moveq	#0,d4
0001CB1C 4E75                       		rts	
0001CB1E                            ; ===========================================================================
0001CB1E                            
0001CB1E                            Obj09_Rblock:
0001CB1E 0C04 002B                  		cmpi.b	#$2B,d4		; is the item an "R" block?
0001CB22 6600                       		bne.s	Obj09_ChkGhost
0001CB24 6100 F5D8                  		bsr.w	SS_RemoveCollectedItem
0001CB28 6600                       		bne.s	Obj09_RevStage
0001CB2A 14BC 0001                  		move.b	#1,(a2)
0001CB2E 2549 0004                  		move.l	a1,4(a2)
0001CB32                            
0001CB32                            Obj09_RevStage:
0001CB32 31FC 012C F784                     move.w  #300,($FFFFF784).w
0001CB38 103C 00A9                  		move.b	#$A9,d0
0001CB3C 4EB9 0000 159A             		jsr	(PlaySound_Special).l	; play sound
0001CB42 7800                       		moveq	#0,d4
0001CB44 4E75                       		rts	
0001CB46                            
0001CB46                            ; ===========================================================================
0001CB46                            
0001CB46                            Obj09_ChkGhost:
0001CB46 0C04 0041                  		cmpi.b	#$41,d4		; is the item a	ghost block?
0001CB4A 6600                       		bne.s	Obj09_ChkGhostTag
0001CB4C 117C 0001 003A             		move.b	#1,$3A(a0)	; mark the ghost block as "passed"
0001CB52                            
0001CB52                            Obj09_ChkGhostTag:
0001CB52 0C04 004A                  		cmpi.b	#$4A,d4		; is the item a	switch for ghost blocks?
0001CB56 6600                       		bne.s	Obj09_NoGhost
0001CB58 0C28 0001 003A             		cmpi.b	#1,$3A(a0)	; have the ghost blocks	been passed?
0001CB5E 6600                       		bne.s	Obj09_NoGhost	; if not, branch
0001CB60 117C 0002 003A             		move.b	#2,$3A(a0)	; mark the ghost blocks	as "solid"
0001CB66                            
0001CB66                            Obj09_NoGhost:
0001CB66 78FF                       		moveq	#-1,d4
0001CB68 4E75                       		rts	
0001CB6A                            ; ===========================================================================
0001CB6A                            
0001CB6A                            Obj09_MakeGhostSolid:
0001CB6A 0C28 0002 003A             		cmpi.b	#2,$3A(a0)	; is the ghost marked as "solid"?
0001CB70 6600                       		bne.s	Obj09_GhostNotSolid ; if not, branch
0001CB72 43F9 00FF 1020             		lea	($FF1020).l,a1
0001CB78 723F                       		moveq	#$3F,d1
0001CB7A                            
0001CB7A                            Obj09_GhostLoop2:
0001CB7A 743F                       		moveq	#$3F,d2
0001CB7C                            
0001CB7C                            Obj09_GhostLoop:
0001CB7C 0C11 0041                  		cmpi.b	#$41,(a1)	; is the item a	ghost block?
0001CB80 6600                       		bne.s	Obj09_NoReplace	; if not, branch
0001CB82 12BC 002C                  		move.b	#$2C,(a1)	; replace ghost	block with a solid block
0001CB86                            
0001CB86                            Obj09_NoReplace:
0001CB86 5249                       		addq.w	#1,a1
0001CB88 51CA FFF2                  		dbf	d2,Obj09_GhostLoop
0001CB8C 43E9 0040                  		lea	$40(a1),a1
0001CB90 51C9 FFE8                  		dbf	d1,Obj09_GhostLoop2
0001CB94                            
0001CB94                            Obj09_GhostNotSolid:
0001CB94 4228 003A                  		clr.b	$3A(a0)
0001CB98 7800                       		moveq	#0,d4
0001CB9A 4E75                       		rts	
0001CB9C                            ; End of function Obj09_ChkItems
0001CB9C                            
0001CB9C                            
0001CB9C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CB9C                            
0001CB9C                            
0001CB9C                            Obj09_ChkItems2:			; XREF: Obj09_Display
0001CB9C 1028 0030                  		move.b	$30(a0),d0
0001CBA0 6600                       		bne.s	Obj09_GOAL
0001CBA2 5328 0036                  		subq.b	#1,$36(a0)
0001CBA6 6A00                       		bpl.s	loc_1BEA0
0001CBA8 117C 0000 0036             		move.b	#0,$36(a0)
0001CBAE                            
0001CBAE                            loc_1BEA0:
0001CBAE 5328 0037                  		subq.b	#1,$37(a0)
0001CBB2 6A00                       		bpl.s	locret_1BEAC
0001CBB4 117C 0000 0037             		move.b	#0,$37(a0)
0001CBBA                            
0001CBBA                            locret_1BEAC:
0001CBBA 4E75                       		rts	
0001CBBC                            ; ===========================================================================
0001CBBC                            
0001CBBC                            ; ===========================================================================
0001CBBC                            
0001CBBC                            Obj09_GOAL:
0001CBBC 0C00 0027                  		cmpi.b	#$27,d0		; is the item a	"GOAL"?
0001CBC0 6600                       		bne.s	Obj09_ChkGlass
0001CBC2 5428 0024                  		addq.b	#2,$24(a0)	; run routine "Obj09_ExitStage"
0001CBC6 303C 00A8                  		move.w	#$A8,d0		; change item
0001CBCA 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play "GOAL" sound
0001CBD0 4E75                       		rts	
0001CBD2                            ; ===========================================================================
0001CBD2                            
0001CBD2                            ; ===========================================================================
0001CBD2                            
0001CBD2                            Obj09_ChkGlass:
0001CBD2 0C00 002D                  		cmpi.b	#$2D,d0		; is the item a	glass block?
0001CBD6 6700                       		beq.s	Obj09_Glass	; if yes, branch
0001CBD8 0C00 002E                  		cmpi.b	#$2E,d0
0001CBDC 6700                       		beq.s	Obj09_Glass
0001CBDE 0C00 002F                  		cmpi.b	#$2F,d0
0001CBE2 6700                       		beq.s	Obj09_Glass
0001CBE4 0C00 0030                  		cmpi.b	#$30,d0
0001CBE8 6600                       		bne.s	Obj09_NoGlass	; if not, branch
0001CBEA                            
0001CBEA                            Obj09_Glass:
0001CBEA 6100 F512                  		bsr.w	SS_RemoveCollectedItem
0001CBEE 6600                       		bne.s	Obj09_GlassSnd
0001CBF0 14BC 0006                  		move.b	#6,(a2)
0001CBF4 2268 0032                  		movea.l	$32(a0),a1
0001CBF8 5389                       		subq.l	#1,a1
0001CBFA 2549 0004                  		move.l	a1,4(a2)
0001CBFE 1011                       		move.b	(a1),d0
0001CC00 5200                       		addq.b	#1,d0		; change glass type when touched
0001CC02 0C00 0030                  		cmpi.b	#$30,d0
0001CC06 6300                       		bls.s	Obj09_GlassUpdate ; if glass is	still there, branch
0001CC08 4200                       		clr.b	d0		; remove the glass block when it's destroyed
0001CC0A                            
0001CC0A                            Obj09_GlassUpdate:
0001CC0A 1540 0004                  		move.b	d0,4(a2)	; update the stage layout
0001CC0E                            
0001CC0E                            Obj09_GlassSnd:
0001CC0E 303C 00BA                  		move.w	#$BA,d0
0001CC12 4EF9 0000 159A             		jmp	(PlaySound_Special).l ;	play glass block sound
0001CC18                            ; ===========================================================================
0001CC18                            
0001CC18                            Obj09_NoGlass:
0001CC18 4E75                       		rts	
0001CC1A                            ; End of function Obj09_ChkItems2
0001CC1A                            
0001CC1A                            ; ===========================================================================
0001CC1A                            ; ---------------------------------------------------------------------------
0001CC1A                            ; Object 10 - blank
0001CC1A                            ; ---------------------------------------------------------------------------
0001CC1A                            
0001CC1A                            Obj10:					; XREF: Obj_Index
0001CC1A 4E75                       		rts	
0001CC1C                            ; ---------------------------------------------------------------------------
0001CC1C                            ; Subroutine to	animate	level graphics
0001CC1C                            ; ---------------------------------------------------------------------------
0001CC1C                            
0001CC1C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CC1C                            
0001CC1C                            
0001CC1C                            AniArt_Load:				; XREF: Demo_Time; loc_F54
0001CC1C 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001CC20 6600                       		bne.s	AniArt_Pause	; if yes, branch
0001CC22 4DF9 00C0 0000             		lea	($C00000).l,a6
0001CC28 6100 0000                  		bsr.w	AniArt_GiantRing
0001CC2C 7000                       		moveq	#0,d0
0001CC2E 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001CC32 D040                       		add.w	d0,d0
0001CC34 303B 0000                  		move.w	AniArt_Index(pc,d0.w),d0
0001CC38 4EFB 0000                  		jmp	AniArt_Index(pc,d0.w)
0001CC3C                            ; ===========================================================================
0001CC3C                            
0001CC3C                            AniArt_Pause:
0001CC3C 4E75                       		rts	
0001CC3E                            ; End of function AniArt_Load
0001CC3E                            
0001CC3E                            ; ===========================================================================
0001CC3E 0000 0000                  AniArt_Index:	dc.w AniArt_GHZ-AniArt_Index, AniArt_none-AniArt_Index
0001CC42 0000 0000                  		dc.w AniArt_MZ-AniArt_Index, AniArt_none-AniArt_Index
0001CC46 0000 0000                  		dc.w AniArt_none-AniArt_Index, AniArt_SBZ-AniArt_Index
0001CC4A 0000 0000                  		dc.w AniArt_Ending-AniArt_Index, AniArt_GHZ-AniArt_Index
0001CC4E                            ; ===========================================================================
0001CC4E                            ; ---------------------------------------------------------------------------
0001CC4E                            ; Animated pattern routine - Green Hill
0001CC4E                            ; ---------------------------------------------------------------------------
0001CC4E                            
0001CC4E                            AniArt_GHZ:				; XREF: AniArt_Index
0001CC4E 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001CC52 6A00                       		bpl.s	loc_1C08A
0001CC54 11FC 0005 F7B1             		move.b	#5,($FFFFF7B1).w ; time	to display each	frame for
0001CC5A 43F9 0000 0000             		lea	(Art_GhzWater).l,a1 ; load waterfall patterns
0001CC60 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001CC64 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001CC68 0240 0001                  		andi.w	#1,d0
0001CC6C 6700                       		beq.s	loc_1C078
0001CC6E 43E9 0100                  		lea	$100(a1),a1	; load next frame
0001CC72                            
0001CC72                            loc_1C078:
0001CC72 23FC 6F00 0001 00C0 0004   		move.l	#$6F000001,($C00004).l ; VRAM address
0001CC7C 323C 0007                  		move.w	#7,d1		; number of 8x8	tiles
0001CC80 6000 0000                  		bra.w	LoadTiles
0001CC84                            ; ===========================================================================
0001CC84                            
0001CC84                            loc_1C08A:
0001CC84 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001CC88 6A00                       		bpl.s	loc_1C0C0
0001CC8A 11FC 000F F7B3             		move.b	#$F,($FFFFF7B3).w
0001CC90 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001CC96 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001CC9A 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001CC9E 0240 0001                  		andi.w	#1,d0
0001CCA2 6700                       		beq.s	loc_1C0AE
0001CCA4 43E9 0200                  		lea	$200(a1),a1
0001CCA8                            
0001CCA8                            loc_1C0AE:
0001CCA8 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001CCB2 323C 000F                  		move.w	#$F,d1
0001CCB6 6000 0000                  		bra.w	LoadTiles
0001CCBA                            ; ===========================================================================
0001CCBA                            
0001CCBA                            loc_1C0C0:
0001CCBA 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001CCBE 6A00                       		bpl.s	locret_1C10C
0001CCC0 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001CCC6 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001CCCA 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001CCCE 0240 0003                  		andi.w	#3,d0
0001CCD2 103B 0000                  		move.b	byte_1C10E(pc,d0.w),d0
0001CCD6 0800 0000                  		btst	#0,d0
0001CCDA 6600                       		bne.s	loc_1C0E8
0001CCDC 11FC 007F F7B5             		move.b	#$7F,($FFFFF7B5).w
0001CCE2                            
0001CCE2                            loc_1C0E8:
0001CCE2 EF48                       		lsl.w	#7,d0
0001CCE4 3200                       		move.w	d0,d1
0001CCE6 D040                       		add.w	d0,d0
0001CCE8 D041                       		add.w	d1,d0
0001CCEA 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001CCF4 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001CCFA 43F1 0000                  		lea	(a1,d0.w),a1
0001CCFE 323C 000B                  		move.w	#$B,d1
0001CD02 6100 0000                  		bsr.w	LoadTiles
0001CD06                            
0001CD06                            locret_1C10C:
0001CD06 4E75                       		rts	
0001CD08                            ; ===========================================================================
0001CD08 0001 0201                  byte_1C10E:	dc.b 0,	1, 2, 1
0001CD0C                            ; ===========================================================================
0001CD0C                            ; ---------------------------------------------------------------------------
0001CD0C                            ; Animated pattern routine - Marble
0001CD0C                            ; ---------------------------------------------------------------------------
0001CD0C                            
0001CD0C                            AniArt_MZ:				; XREF: AniArt_Index
0001CD0C 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001CD10 6A00                       		bpl.s	loc_1C150
0001CD12 11FC 0013 F7B1             		move.b	#$13,($FFFFF7B1).w
0001CD18 43F9 0000 0000             		lea	(Art_MzLava1).l,a1 ; load lava surface patterns
0001CD1E 7000                       		moveq	#0,d0
0001CD20 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001CD24 5200                       		addq.b	#1,d0
0001CD26 0C00 0003                  		cmpi.b	#3,d0
0001CD2A 6600                       		bne.s	loc_1C134
0001CD2C 7000                       		moveq	#0,d0
0001CD2E                            
0001CD2E                            loc_1C134:
0001CD2E 11C0 F7B0                  		move.b	d0,($FFFFF7B0).w
0001CD32 C0FC 0100                  		mulu.w	#$100,d0
0001CD36 D2C0                       		adda.w	d0,a1
0001CD38 23FC 5C40 0001 00C0 0004   		move.l	#$5C400001,($C00004).l
0001CD42 323C 0007                  		move.w	#7,d1
0001CD46 6100 0000                  		bsr.w	LoadTiles
0001CD4A                            
0001CD4A                            loc_1C150:
0001CD4A 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001CD4E 6A00                       		bpl.s	loc_1C1AE
0001CD50 11FC 0001 F7B3             		move.b	#1,($FFFFF7B3).w
0001CD56 7000                       		moveq	#0,d0
0001CD58 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001CD5C 49F9 0000 0000             		lea	(Art_MzLava2).l,a4 ; load lava patterns
0001CD62 EE58                       		ror.w	#7,d0
0001CD64 D8C0                       		adda.w	d0,a4
0001CD66 23FC 5A40 0001 00C0 0004   		move.l	#$5A400001,($C00004).l
0001CD70 7600                       		moveq	#0,d3
0001CD72 1638 F7B2                  		move.b	($FFFFF7B2).w,d3
0001CD76 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001CD7A 1638 FE68                  		move.b	($FFFFFE68).w,d3
0001CD7E 343C 0003                  		move.w	#3,d2
0001CD82                            
0001CD82                            loc_1C188:
0001CD82 3003                       		move.w	d3,d0
0001CD84 D040                       		add.w	d0,d0
0001CD86 0240 001E                  		andi.w	#$1E,d0
0001CD8A 47F9 0000 0000             		lea	(AniArt_MZextra).l,a3
0001CD90 3033 0000                  		move.w	(a3,d0.w),d0
0001CD94 47F3 0000                  		lea	(a3,d0.w),a3
0001CD98 224C                       		movea.l	a4,a1
0001CD9A 323C 001F                  		move.w	#$1F,d1
0001CD9E 4E93                       		jsr	(a3)
0001CDA0 5843                       		addq.w	#4,d3
0001CDA2 51CA FFDE                  		dbf	d2,loc_1C188
0001CDA6 4E75                       		rts	
0001CDA8                            ; ===========================================================================
0001CDA8                            
0001CDA8                            loc_1C1AE:
0001CDA8 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001CDAC 6A00 0000                  		bpl.w	locret_1C1EA
0001CDB0 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001CDB6 43F9 0000 0000             		lea	(Art_MzTorch).l,a1 ; load torch	patterns
0001CDBC 7000                       		moveq	#0,d0
0001CDBE 1038 F7B6                  		move.b	($FFFFF7B6).w,d0
0001CDC2 5238 F7B6                  		addq.b	#1,($FFFFF7B6).w
0001CDC6 0238 0003 F7B6             		andi.b	#3,($FFFFF7B6).w
0001CDCC C0FC 00C0                  		mulu.w	#$C0,d0
0001CDD0 D2C0                       		adda.w	d0,a1
0001CDD2 23FC 5E40 0001 00C0 0004   		move.l	#$5E400001,($C00004).l
0001CDDC 323C 0005                  		move.w	#5,d1
0001CDE0 6000 0000                  		bra.w	LoadTiles
0001CDE4                            ; ===========================================================================
0001CDE4                            
0001CDE4                            locret_1C1EA:
0001CDE4 4E75                       		rts	
0001CDE6                            ; ===========================================================================
0001CDE6                            ; ---------------------------------------------------------------------------
0001CDE6                            ; Animated pattern routine - Scrap Brain
0001CDE6                            ; ---------------------------------------------------------------------------
0001CDE6                            
0001CDE6                            AniArt_SBZ:				; XREF: AniArt_Index
0001CDE6 4A38 F7B4                  		tst.b	($FFFFF7B4).w
0001CDEA 6700                       		beq.s	loc_1C1F8
0001CDEC 5338 F7B4                  		subq.b	#1,($FFFFF7B4).w
0001CDF0 6000                       		bra.s	loc_1C250
0001CDF2                            ; ===========================================================================
0001CDF2                            
0001CDF2                            loc_1C1F8:
0001CDF2 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001CDF6 6A00                       		bpl.s	loc_1C250
0001CDF8 11FC 0007 F7B1             		move.b	#7,($FFFFF7B1).w
0001CDFE 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1 ; load smoke patterns
0001CE04 23FC 4900 0002 00C0 0004   		move.l	#$49000002,($C00004).l
0001CE0E 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001CE12 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001CE16 0240 0007                  		andi.w	#7,d0
0001CE1A 6700                       		beq.s	loc_1C234
0001CE1C 5340                       		subq.w	#1,d0
0001CE1E C0FC 0180                  		mulu.w	#$180,d0
0001CE22 43F1 0000                  		lea	(a1,d0.w),a1
0001CE26 323C 000B                  		move.w	#$B,d1
0001CE2A 6000 0000                  		bra.w	LoadTiles
0001CE2E                            ; ===========================================================================
0001CE2E                            
0001CE2E                            loc_1C234:
0001CE2E 11FC 00B4 F7B4             		move.b	#$B4,($FFFFF7B4).w
0001CE34                            
0001CE34                            loc_1C23A:
0001CE34 323C 0005                  		move.w	#5,d1
0001CE38 6100 0000                  		bsr.w	LoadTiles
0001CE3C 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001CE42 323C 0005                  		move.w	#5,d1
0001CE46 6000 0000                  		bra.w	LoadTiles
0001CE4A                            ; ===========================================================================
0001CE4A                            
0001CE4A                            loc_1C250:
0001CE4A 4A38 F7B5                  		tst.b	($FFFFF7B5).w
0001CE4E 6700                       		beq.s	loc_1C25C
0001CE50 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001CE54 6000                       		bra.s	locret_1C2A0
0001CE56                            ; ===========================================================================
0001CE56                            
0001CE56                            loc_1C25C:
0001CE56 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001CE5A 6A00                       		bpl.s	locret_1C2A0
0001CE5C 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001CE62 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001CE68 23FC 4A80 0002 00C0 0004   		move.l	#$4A800002,($C00004).l
0001CE72 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001CE76 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001CE7A 0240 0007                  		andi.w	#7,d0
0001CE7E 6700                       		beq.s	loc_1C298
0001CE80 5340                       		subq.w	#1,d0
0001CE82 C0FC 0180                  		mulu.w	#$180,d0
0001CE86 43F1 0000                  		lea	(a1,d0.w),a1
0001CE8A 323C 000B                  		move.w	#$B,d1
0001CE8E 6000 0000                  		bra.w	LoadTiles
0001CE92                            ; ===========================================================================
0001CE92                            
0001CE92                            loc_1C298:
0001CE92 11FC 0078 F7B5             		move.b	#$78,($FFFFF7B5).w
0001CE98 609A                       		bra.s	loc_1C23A
0001CE9A                            ; ===========================================================================
0001CE9A                            
0001CE9A                            locret_1C2A0:
0001CE9A 4E75                       		rts	
0001CE9C                            ; ===========================================================================
0001CE9C                            ; ---------------------------------------------------------------------------
0001CE9C                            ; Animated pattern routine - ending sequence
0001CE9C                            ; ---------------------------------------------------------------------------
0001CE9C                            
0001CE9C                            AniArt_Ending:				; XREF: AniArt_Index
0001CE9C 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001CEA0 6A00                       		bpl.s	loc_1C2F4
0001CEA2 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001CEA8 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001CEAE 45F8 9400                  		lea	($FFFF9400).w,a2
0001CEB2 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001CEB6 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001CEBA 0240 0001                  		andi.w	#1,d0
0001CEBE 6700                       		beq.s	loc_1C2CE
0001CEC0 43E9 0200                  		lea	$200(a1),a1
0001CEC4 45EA 0200                  		lea	$200(a2),a2
0001CEC8                            
0001CEC8                            loc_1C2CE:
0001CEC8 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001CED2 323C 000F                  		move.w	#$F,d1
0001CED6 6100 0000                  		bsr.w	LoadTiles
0001CEDA 224A                       		movea.l	a2,a1
0001CEDC 23FC 7200 0001 00C0 0004   		move.l	#$72000001,($C00004).l
0001CEE6 323C 000F                  		move.w	#$F,d1
0001CEEA 6000 0000                  		bra.w	LoadTiles
0001CEEE                            ; ===========================================================================
0001CEEE                            
0001CEEE                            loc_1C2F4:
0001CEEE 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001CEF2 6A00                       		bpl.s	loc_1C33C
0001CEF4 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001CEFA 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001CEFE 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001CF02 0240 0007                  		andi.w	#7,d0
0001CF06 103B 0000                  		move.b	byte_1C334(pc,d0.w),d0
0001CF0A EF48                       		lsl.w	#7,d0
0001CF0C 3200                       		move.w	d0,d1
0001CF0E D040                       		add.w	d0,d0
0001CF10 D041                       		add.w	d1,d0
0001CF12 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001CF1C 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001CF22 43F1 0000                  		lea	(a1,d0.w),a1
0001CF26 323C 000B                  		move.w	#$B,d1
0001CF2A 6000 0000                  		bra.w	LoadTiles
0001CF2E                            ; ===========================================================================
0001CF2E 0000 0001 0202 0201        byte_1C334:	dc.b 0,	0, 0, 1, 2, 2, 2, 1
0001CF36                            ; ===========================================================================
0001CF36                            
0001CF36                            loc_1C33C:
0001CF36 5338 F7B9                  		subq.b	#1,($FFFFF7B9).w
0001CF3A 6A00                       		bpl.s	loc_1C37A
0001CF3C 11FC 000E F7B9             		move.b	#$E,($FFFFF7B9).w
0001CF42 1038 F7B8                  		move.b	($FFFFF7B8).w,d0
0001CF46 5238 F7B8                  		addq.b	#1,($FFFFF7B8).w
0001CF4A 0240 0003                  		andi.w	#3,d0
0001CF4E 103B 0000                  		move.b	byte_1C376(pc,d0.w),d0
0001CF52 E148                       		lsl.w	#8,d0
0001CF54 D040                       		add.w	d0,d0
0001CF56 23FC 7000 0001 00C0 0004   		move.l	#$70000001,($C00004).l
0001CF60 43F8 9800                  		lea	($FFFF9800).w,a1 ; load	special	flower patterns	(from RAM)
0001CF64 43F1 0000                  		lea	(a1,d0.w),a1
0001CF68 323C 000F                  		move.w	#$F,d1
0001CF6C 6000 0000                  		bra.w	LoadTiles
0001CF70                            ; ===========================================================================
0001CF70 0001 0201                  byte_1C376:	dc.b 0,	1, 2, 1
0001CF74                            ; ===========================================================================
0001CF74                            
0001CF74                            loc_1C37A:
0001CF74 5338 F7BB                  		subq.b	#1,($FFFFF7BB).w
0001CF78 6A00                       		bpl.s	locret_1C3B4
0001CF7A 11FC 000B F7BB             		move.b	#$B,($FFFFF7BB).w
0001CF80 1038 F7BA                  		move.b	($FFFFF7BA).w,d0
0001CF84 5238 F7BA                  		addq.b	#1,($FFFFF7BA).w
0001CF88 0240 0003                  		andi.w	#3,d0
0001CF8C 103B 00E2                  		move.b	byte_1C376(pc,d0.w),d0
0001CF90 E148                       		lsl.w	#8,d0
0001CF92 D040                       		add.w	d0,d0
0001CF94 23FC 6800 0001 00C0 0004   		move.l	#$68000001,($C00004).l
0001CF9E 43F8 9E00                  		lea	($FFFF9E00).w,a1 ; load	special	flower patterns	(from RAM)
0001CFA2 43F1 0000                  		lea	(a1,d0.w),a1
0001CFA6 323C 000F                  		move.w	#$F,d1
0001CFAA 6000 0000                  		bra.w	LoadTiles
0001CFAE                            ; ===========================================================================
0001CFAE                            
0001CFAE                            locret_1C3B4:
0001CFAE 4E75                       		rts	
0001CFB0                            ; ===========================================================================
0001CFB0                            
0001CFB0                            AniArt_none:				; XREF: AniArt_Index
0001CFB0 4E75                       		rts	
0001CFB2                            
0001CFB2                            ; ---------------------------------------------------------------------------
0001CFB2                            ; Subroutine to	load (d1 - 1) 8x8 tiles
0001CFB2                            ; ---------------------------------------------------------------------------
0001CFB2                            
0001CFB2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CFB2                            
0001CFB2                            
0001CFB2                            LoadTiles:
0001CFB2 2C99                       		move.l	(a1)+,(a6)
0001CFB4 2C99                       		move.l	(a1)+,(a6)
0001CFB6 2C99                       		move.l	(a1)+,(a6)
0001CFB8 2C99                       		move.l	(a1)+,(a6)
0001CFBA 2C99                       		move.l	(a1)+,(a6)
0001CFBC 2C99                       		move.l	(a1)+,(a6)
0001CFBE 2C99                       		move.l	(a1)+,(a6)
0001CFC0 2C99                       		move.l	(a1)+,(a6)
0001CFC2 51C9 FFEE                  		dbf	d1,LoadTiles
0001CFC6 4E75                       		rts	
0001CFC8                            ; End of function LoadTiles
0001CFC8                            
0001CFC8                            ; ===========================================================================
0001CFC8                            ; ---------------------------------------------------------------------------
0001CFC8                            ; Animated pattern routine - more Marble Zone
0001CFC8                            ; ---------------------------------------------------------------------------
0001CFC8 0000 0000                  AniArt_MZextra:	dc.w loc_1C3EE-AniArt_MZextra, loc_1C3FA-AniArt_MZextra
0001CFCC 0000 0000                  		dc.w loc_1C410-AniArt_MZextra, loc_1C41E-AniArt_MZextra
0001CFD0 0000 0000                  		dc.w loc_1C434-AniArt_MZextra, loc_1C442-AniArt_MZextra
0001CFD4 0000 0000                  		dc.w loc_1C458-AniArt_MZextra, loc_1C466-AniArt_MZextra
0001CFD8 0000 0000                  		dc.w loc_1C47C-AniArt_MZextra, loc_1C48A-AniArt_MZextra
0001CFDC 0000 0000                  		dc.w loc_1C4A0-AniArt_MZextra, loc_1C4AE-AniArt_MZextra
0001CFE0 0000 0000                  		dc.w loc_1C4C4-AniArt_MZextra, loc_1C4D2-AniArt_MZextra
0001CFE4 0000 0000                  		dc.w loc_1C4E8-AniArt_MZextra, loc_1C4FA-AniArt_MZextra
0001CFE8                            ; ===========================================================================
0001CFE8                            
0001CFE8                            loc_1C3EE:				; XREF: AniArt_MZextra
0001CFE8 2C91                       		move.l	(a1),(a6)
0001CFEA 43E9 0010                  		lea	$10(a1),a1
0001CFEE 51C9 FFF8                  		dbf	d1,loc_1C3EE
0001CFF2 4E75                       		rts	
0001CFF4                            ; ===========================================================================
0001CFF4                            
0001CFF4                            loc_1C3FA:				; XREF: AniArt_MZextra
0001CFF4 2029 0002                  		move.l	2(a1),d0
0001CFF8 1029 0001                  		move.b	1(a1),d0
0001CFFC E098                       		ror.l	#8,d0
0001CFFE 2C80                       		move.l	d0,(a6)
0001D000 43E9 0010                  		lea	$10(a1),a1
0001D004 51C9 FFEE                  		dbf	d1,loc_1C3FA
0001D008 4E75                       		rts	
0001D00A                            ; ===========================================================================
0001D00A                            
0001D00A                            loc_1C410:				; XREF: AniArt_MZextra
0001D00A 2CA9 0002                  		move.l	2(a1),(a6)
0001D00E 43E9 0010                  		lea	$10(a1),a1
0001D012 51C9 FFF6                  		dbf	d1,loc_1C410
0001D016 4E75                       		rts	
0001D018                            ; ===========================================================================
0001D018                            
0001D018                            loc_1C41E:				; XREF: AniArt_MZextra
0001D018 2029 0004                  		move.l	4(a1),d0
0001D01C 1029 0003                  		move.b	3(a1),d0
0001D020 E098                       		ror.l	#8,d0
0001D022 2C80                       		move.l	d0,(a6)
0001D024 43E9 0010                  		lea	$10(a1),a1
0001D028 51C9 FFEE                  		dbf	d1,loc_1C41E
0001D02C 4E75                       		rts	
0001D02E                            ; ===========================================================================
0001D02E                            
0001D02E                            loc_1C434:				; XREF: AniArt_MZextra
0001D02E 2CA9 0004                  		move.l	4(a1),(a6)
0001D032 43E9 0010                  		lea	$10(a1),a1
0001D036 51C9 FFF6                  		dbf	d1,loc_1C434
0001D03A 4E75                       		rts	
0001D03C                            ; ===========================================================================
0001D03C                            
0001D03C                            loc_1C442:				; XREF: AniArt_MZextra
0001D03C 2029 0006                  		move.l	6(a1),d0
0001D040 1029 0005                  		move.b	5(a1),d0
0001D044 E098                       		ror.l	#8,d0
0001D046 2C80                       		move.l	d0,(a6)
0001D048 43E9 0010                  		lea	$10(a1),a1
0001D04C 51C9 FFEE                  		dbf	d1,loc_1C442
0001D050 4E75                       		rts	
0001D052                            ; ===========================================================================
0001D052                            
0001D052                            loc_1C458:				; XREF: AniArt_MZextra
0001D052 2CA9 0006                  		move.l	6(a1),(a6)
0001D056 43E9 0010                  		lea	$10(a1),a1
0001D05A 51C9 FFF6                  		dbf	d1,loc_1C458
0001D05E 4E75                       		rts	
0001D060                            ; ===========================================================================
0001D060                            
0001D060                            loc_1C466:				; XREF: AniArt_MZextra
0001D060 2029 0008                  		move.l	8(a1),d0
0001D064 1029 0007                  		move.b	7(a1),d0
0001D068 E098                       		ror.l	#8,d0
0001D06A 2C80                       		move.l	d0,(a6)
0001D06C 43E9 0010                  		lea	$10(a1),a1
0001D070 51C9 FFEE                  		dbf	d1,loc_1C466
0001D074 4E75                       		rts	
0001D076                            ; ===========================================================================
0001D076                            
0001D076                            loc_1C47C:				; XREF: AniArt_MZextra
0001D076 2CA9 0008                  		move.l	8(a1),(a6)
0001D07A 43E9 0010                  		lea	$10(a1),a1
0001D07E 51C9 FFF6                  		dbf	d1,loc_1C47C
0001D082 4E75                       		rts	
0001D084                            ; ===========================================================================
0001D084                            
0001D084                            loc_1C48A:				; XREF: AniArt_MZextra
0001D084 2029 000A                  		move.l	$A(a1),d0
0001D088 1029 0009                  		move.b	9(a1),d0
0001D08C E098                       		ror.l	#8,d0
0001D08E 2C80                       		move.l	d0,(a6)
0001D090 43E9 0010                  		lea	$10(a1),a1
0001D094 51C9 FFEE                  		dbf	d1,loc_1C48A
0001D098 4E75                       		rts	
0001D09A                            ; ===========================================================================
0001D09A                            
0001D09A                            loc_1C4A0:				; XREF: AniArt_MZextra
0001D09A 2CA9 000A                  		move.l	$A(a1),(a6)
0001D09E 43E9 0010                  		lea	$10(a1),a1
0001D0A2 51C9 FFF6                  		dbf	d1,loc_1C4A0
0001D0A6 4E75                       		rts	
0001D0A8                            ; ===========================================================================
0001D0A8                            
0001D0A8                            loc_1C4AE:				; XREF: AniArt_MZextra
0001D0A8 2029 000C                  		move.l	$C(a1),d0
0001D0AC 1029 000B                  		move.b	$B(a1),d0
0001D0B0 E098                       		ror.l	#8,d0
0001D0B2 2C80                       		move.l	d0,(a6)
0001D0B4 43E9 0010                  		lea	$10(a1),a1
0001D0B8 51C9 FFEE                  		dbf	d1,loc_1C4AE
0001D0BC 4E75                       		rts	
0001D0BE                            ; ===========================================================================
0001D0BE                            
0001D0BE                            loc_1C4C4:				; XREF: AniArt_MZextra
0001D0BE 2CA9 000C                  		move.l	$C(a1),(a6)
0001D0C2 43E9 0010                  		lea	$10(a1),a1
0001D0C6 51C9 FFF6                  		dbf	d1,loc_1C4C4
0001D0CA 4E75                       		rts	
0001D0CC                            ; ===========================================================================
0001D0CC                            
0001D0CC                            loc_1C4D2:				; XREF: AniArt_MZextra
0001D0CC 2029 000C                  		move.l	$C(a1),d0
0001D0D0 E198                       		rol.l	#8,d0
0001D0D2 1011                       		move.b	0(a1),d0
0001D0D4 2C80                       		move.l	d0,(a6)
0001D0D6 43E9 0010                  		lea	$10(a1),a1
0001D0DA 51C9 FFF0                  		dbf	d1,loc_1C4D2
0001D0DE 4E75                       		rts	
0001D0E0                            ; ===========================================================================
0001D0E0                            
0001D0E0                            loc_1C4E8:				; XREF: AniArt_MZextra
0001D0E0 3CA9 000E                  		move.w	$E(a1),(a6)
0001D0E4 3C91                       		move.w	0(a1),(a6)
0001D0E6 43E9 0010                  		lea	$10(a1),a1
0001D0EA 51C9 FFF4                  		dbf	d1,loc_1C4E8
0001D0EE 4E75                       		rts	
0001D0F0                            ; ===========================================================================
0001D0F0                            
0001D0F0                            loc_1C4FA:				; XREF: AniArt_MZextra
0001D0F0 2011                       		move.l	0(a1),d0
0001D0F2 1029 000F                  		move.b	$F(a1),d0
0001D0F6 E098                       		ror.l	#8,d0
0001D0F8 2C80                       		move.l	d0,(a6)
0001D0FA 43E9 0010                  		lea	$10(a1),a1
0001D0FE 51C9 FFF0                  		dbf	d1,loc_1C4FA
0001D102 4E75                       		rts	
0001D104                            
0001D104                            ; ---------------------------------------------------------------------------
0001D104                            ; Animated pattern routine - giant ring
0001D104                            ; ---------------------------------------------------------------------------
0001D104                            
0001D104                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D104                            
0001D104                            
0001D104                            AniArt_GiantRing:			; XREF: AniArt_Load
0001D104 4A78 F7BE                  		tst.w	($FFFFF7BE).w
0001D108 6600                       		bne.s	loc_1C518
0001D10A 4E75                       		rts	
0001D10C                            ; ===========================================================================
0001D10C                            
0001D10C                            loc_1C518:
0001D10C 0478 01C0 F7BE             		subi.w	#$1C0,($FFFFF7BE).w
0001D112 43F9 0000 0000             		lea	(Art_BigRing).l,a1 ; load giant	ring patterns
0001D118 7000                       		moveq	#0,d0
0001D11A 3038 F7BE                  		move.w	($FFFFF7BE).w,d0
0001D11E 43F1 0000                  		lea	(a1,d0.w),a1
0001D122 0640 8000                  		addi.w	#$8000,d0
0001D126 E588                       		lsl.l	#2,d0
0001D128 E448                       		lsr.w	#2,d0
0001D12A 0040 4000                  		ori.w	#$4000,d0
0001D12E 4840                       		swap	d0
0001D130 2D40 0004                  		move.l	d0,4(a6)
0001D134 323C 000D                  		move.w	#$D,d1
0001D138 6000 FE78                  		bra.w	LoadTiles
0001D13C                            ; End of function AniArt_GiantRing
0001D13C                            
0001D13C                            ; ===========================================================================
0001D13C                            ; ---------------------------------------------------------------------------
0001D13C                            ; Object 21 - SCORE, TIME, RINGS
0001D13C                            ; ---------------------------------------------------------------------------
0001D13C                            
0001D13C                            Obj21:					; XREF: Obj_Index
0001D13C 7000                       		moveq	#0,d0
0001D13E 1028 0024                  		move.b	$24(a0),d0
0001D142 323B 0000                  		move.w	Obj21_Index(pc,d0.w),d1
0001D146 4EFB 1000                  		jmp	Obj21_Index(pc,d1.w)
0001D14A                            ; ===========================================================================
0001D14A 0000                       Obj21_Index:	dc.w Obj21_Main-Obj21_Index
0001D14C 0000                       		dc.w Obj21_Flash-Obj21_Index
0001D14E                            ; ===========================================================================
0001D14E                            
0001D14E                            Obj21_Main:				; XREF: Obj21_Main
0001D14E 5428 0024                  		addq.b	#2,$24(a0)
0001D152 317C 0090 0008             		move.w	#$90,8(a0)
0001D158 317C 0108 000A             		move.w	#$108,$A(a0)
0001D15E 217C 0000 0000 0004        		move.l	#Map_obj21,4(a0)
0001D166 317C 06CA 0002             		move.w	#$6CA,2(a0)
0001D16C 117C 0000 0001             		move.b	#0,1(a0)
0001D172 117C 0000 0018             		move.b	#0,$18(a0)
0001D178                            
0001D178                            Obj21_Flash:				; XREF: Obj21_Main
0001D178 4A78 FE20                  		tst.w	($FFFFFE20).w	; do you have any rings?
0001D17C 6700                       		beq.s	Obj21_Flash2	; if not, branch
0001D17E 4228 001A                  		clr.b	$1A(a0)		; make all counters yellow
0001D182 4EF9 0000 E044             		jmp	DisplaySprite
0001D188                            ; ===========================================================================
0001D188                            
0001D188                            Obj21_Flash2:
0001D188 7000                       		moveq	#0,d0
0001D18A 0838 0003 FE05             		btst	#3,($FFFFFE05).w
0001D190 6600                       		bne.s	Obj21_Display
0001D192 5240                       		addq.w	#1,d0		; make ring counter flash red
0001D194 0C38 0009 FE23             		cmpi.b	#9,($FFFFFE23).w ; have	9 minutes elapsed?
0001D19A 6600                       		bne.s	Obj21_Display	; if not, branch
0001D19C 5440                       		addq.w	#2,d0		; make time counter flash red
0001D19E                            
0001D19E                            Obj21_Display:
0001D19E 1140 001A                  		move.b	d0,$1A(a0)
0001D1A2 4EF9 0000 E044             		jmp	DisplaySprite
0001D1A8                            ; ===========================================================================
0001D1A8                            ; ---------------------------------------------------------------------------
0001D1A8                            ; Sprite mappings - SCORE, TIME, RINGS
0001D1A8                            ; ---------------------------------------------------------------------------
0001D1A8                            Map_obj21:
0001D1A8                            	include "_maps\obj21.asm"
0001D1A8                            ; ---------------------------------------------------------------------------
0001D1A8                            ; Sprite mappings - SCORE, TIME, RINGS
0001D1A8                            ; ---------------------------------------------------------------------------
0001D1A8 0000 0000                  		dc.w byte_1C5BC-Map_obj21, byte_1C5F0-Map_obj21
0001D1AC 0000 0000                  		dc.w byte_1C624-Map_obj21, byte_1C658-Map_obj21
0001D1B0 0A                         byte_1C5BC:	dc.b $A
0001D1B1 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001D1B6 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001D1BB 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001D1C0 900D 8010 00               		dc.b $90, $D, $80, $10,	0
0001D1C5 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001D1CA A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
0001D1CF A001 8000 20               		dc.b $A0, 1, $80, 0, $20
0001D1D4 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001D1D9 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001D1DE 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001D1E3 00                         		dc.b 0
0001D1E4 0A                         byte_1C5F0:	dc.b $A
0001D1E5 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001D1EA 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001D1EF 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001D1F4 900D 8010 00               		dc.b $90, $D, $80, $10,	0
0001D1F9 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001D1FE A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
0001D203 A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
0001D208 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001D20D 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001D212 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001D217 00                         		dc.b 0
0001D218 0A                         byte_1C624:	dc.b $A
0001D219 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001D21E 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001D223 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001D228 900D A010 00               		dc.b $90, $D, $A0, $10,	0
0001D22D 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001D232 A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
0001D237 A001 8000 20               		dc.b $A0, 1, $80, 0, $20
0001D23C A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001D241 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001D246 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001D24B 00                         		dc.b 0
0001D24C 0A                         byte_1C658:	dc.b $A
0001D24D 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001D252 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001D257 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001D25C 900D A010 00               		dc.b $90, $D, $A0, $10,	0
0001D261 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001D266 A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
0001D26B A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
0001D270 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001D275 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001D27A 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001D280 00                         		even
0001D280 00                         		even
0001D280                            
0001D280                            ; ---------------------------------------------------------------------------
0001D280                            ; Add points subroutine
0001D280                            ; ---------------------------------------------------------------------------
0001D280                            
0001D280                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D280                            
0001D280                            
0001D280                            AddPoints:
0001D280 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; set score counter to	update
0001D286 45F8 FFC0                  		lea	($FFFFFFC0).w,a2
0001D28A 47F8 FE26                  		lea	($FFFFFE26).w,a3
0001D28E D193                       		add.l	d0,(a3)		; add d0*10 to the score
0001D290 223C 000F 423F             		move.l	#999999,d1
0001D296 B293                       		cmp.l	(a3),d1		; is #999999 higher than the score?
0001D298 6200 0000                  		bhi.w	loc_1C6AC	; if yes, branch
0001D29C 2681                       		move.l	d1,(a3)		; reset	score to #999999
0001D29E 2481                       		move.l	d1,(a2)
0001D2A0                            
0001D2A0                            loc_1C6AC:
0001D2A0 2013                       		move.l	(a3),d0
0001D2A2 B092                       		cmp.l	(a2),d0
0001D2A4 6500 0000                  		bcs.w	locret_1C6B6
0001D2A8 2480                       		move.l	d0,(a2)
0001D2AA                            
0001D2AA                            locret_1C6B6:
0001D2AA 4E75                       		rts	
0001D2AC                            ; End of function AddPoints
0001D2AC                            
0001D2AC                            ; ---------------------------------------------------------------------------
0001D2AC                            ; Subroutine to	update the HUD
0001D2AC                            ; ---------------------------------------------------------------------------
0001D2AC                            
0001D2AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D2AC                            
0001D2AC                            
0001D2AC                            HudUpdate:
0001D2AC 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	on?
0001D2B0 6600 0000                  		bne.w	HudDebug	; if yes, branch
0001D2B4 4A38 FE1F                  		tst.b	($FFFFFE1F).w	; does the score need updating?
0001D2B8 6700                       		beq.s	Hud_ChkRings	; if not, branch
0001D2BA 4238 FE1F                  		clr.b	($FFFFFE1F).w
0001D2BE 203C 5C80 0003             		move.l	#$5C800003,d0	; set VRAM address
0001D2C4 2238 FE26                  		move.l	($FFFFFE26).w,d1 ; load	score
0001D2C8 6100 0000                  		bsr.w	Hud_Score
0001D2CC                            
0001D2CC                            Hud_ChkRings:
0001D2CC 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001D2D0 6700                       		beq.s	Hud_ChkTime	; if not, branch
0001D2D2 6A00                       		bpl.s	loc_1C6E4
0001D2D4 6100 0000                  		bsr.w	Hud_LoadZero
0001D2D8                            
0001D2D8                            loc_1C6E4:
0001D2D8 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001D2DC 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001D2E2 7200                       		moveq	#0,d1
0001D2E4 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001D2E8 6100 0000                  		bsr.w	Hud_Rings
0001D2EC                            
0001D2EC                            Hud_ChkTime:
0001D2EC 4A38 FE1E                  		tst.b	($FFFFFE1E).w	; does the time	need updating?
0001D2F0 6700                       		beq.s	Hud_ChkLives	; if not, branch
0001D2F2 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001D2F6 6600                       		bne.s	Hud_ChkLives	; if yes, branch
0001D2F8 43F8 FE22                  		lea	($FFFFFE22).w,a1
0001D2FC 0C99 0009 3B3B             		cmpi.l	#$93B3B,(a1)+	; is the time 9.59?
0001D302 6700                       		beq.s	TimeOver	; if yes, branch
0001D304 5221                       		addq.b	#1,-(a1)
0001D306 0C11 003C                  		cmpi.b	#60,(a1)
0001D30A 6500                       		bcs.s	Hud_ChkLives
0001D30C 12BC 0000                  		move.b	#0,(a1)
0001D310 5221                       		addq.b	#1,-(a1)
0001D312 0C11 003C                  		cmpi.b	#60,(a1)
0001D316 6500                       		bcs.s	loc_1C734
0001D318 12BC 0000                  		move.b	#0,(a1)
0001D31C 5221                       		addq.b	#1,-(a1)
0001D31E 0C11 0009                  		cmpi.b	#9,(a1)
0001D322 6500                       		bcs.s	loc_1C734
0001D324 12BC 0009                  		move.b	#9,(a1)
0001D328                            
0001D328                            loc_1C734:
0001D328 203C 5E40 0003             		move.l	#$5E400003,d0
0001D32E 7200                       		moveq	#0,d1
0001D330 1238 FE23                  		move.b	($FFFFFE23).w,d1 ; load	minutes
0001D334 6100 0000                  		bsr.w	Hud_Mins
0001D338 203C 5EC0 0003             		move.l	#$5EC00003,d0
0001D33E 7200                       		moveq	#0,d1
0001D340 1238 FE24                  		move.b	($FFFFFE24).w,d1 ; load	seconds
0001D344 6100 0000                  		bsr.w	Hud_Secs
0001D348                            
0001D348                            Hud_ChkLives:
0001D348 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001D34C 6700                       		beq.s	Hud_ChkBonus	; if not, branch
0001D34E 4238 FE1C                  		clr.b	($FFFFFE1C).w
0001D352 6100 0000                  		bsr.w	Hud_Lives
0001D356                            
0001D356                            Hud_ChkBonus:
0001D356 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; do time/ring bonus counters need updating?
0001D35A 6700                       		beq.s	Hud_End		; if not, branch
0001D35C 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001D360 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l
0001D36A 7200                       		moveq	#0,d1
0001D36C 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001D370 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001D374 7200                       		moveq	#0,d1
0001D376 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001D37A 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001D37E                            
0001D37E                            Hud_End:
0001D37E 4E75                       		rts	
0001D380                            ; ===========================================================================
0001D380                            
0001D380                            TimeOver:				; XREF: Hud_ChkTime
0001D380 4238 FE1E                  		clr.b	($FFFFFE1E).w
0001D384 41F8 D000                  		lea	($FFFFD000).w,a0
0001D388 2448                       		movea.l	a0,a2
0001D38A 6100 E950                  		bsr.w	KillSonic
0001D38E 11FC 0001 FE1A             		move.b	#1,($FFFFFE1A).w
0001D394 4E75                       		rts	
0001D396                            ; ===========================================================================
0001D396                            
0001D396                            HudDebug:				; XREF: HudUpdate
0001D396 6100 0000                  		bsr.w	HudDb_XY
0001D39A 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001D39E 6700                       		beq.s	HudDb_ObjCount	; if not, branch
0001D3A0 6A00                       		bpl.s	HudDb_Rings
0001D3A2 6100 0000                  		bsr.w	Hud_LoadZero
0001D3A6                            
0001D3A6                            HudDb_Rings:
0001D3A6 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001D3AA 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001D3B0 7200                       		moveq	#0,d1
0001D3B2 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001D3B6 6100 0000                  		bsr.w	Hud_Rings
0001D3BA                            
0001D3BA                            HudDb_ObjCount:
0001D3BA 203C 5EC0 0003             		move.l	#$5EC00003,d0	; set VRAM address
0001D3C0 7200                       		moveq	#0,d1
0001D3C2 1238 F62C                  		move.b	($FFFFF62C).w,d1 ; load	"number	of objects" counter
0001D3C6 6100 0000                  		bsr.w	Hud_Secs
0001D3CA 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001D3CE 6700                       		beq.s	HudDb_ChkBonus	; if not, branch
0001D3D0 4238 FE1C                  		clr.b	($FFFFFE1C).w
0001D3D4 6100 0000                  		bsr.w	Hud_Lives
0001D3D8                            
0001D3D8                            HudDb_ChkBonus:
0001D3D8 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; does the ring/time bonus counter need	updating?
0001D3DC 6700                       		beq.s	HudDb_End	; if not, branch
0001D3DE 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001D3E2 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l ; set VRAM address
0001D3EC 7200                       		moveq	#0,d1
0001D3EE 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001D3F2 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001D3F6 7200                       		moveq	#0,d1
0001D3F8 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001D3FC 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001D400                            
0001D400                            HudDb_End:
0001D400 4E75                       		rts	
0001D402                            ; End of function HudUpdate
0001D402                            
0001D402                            ; ---------------------------------------------------------------------------
0001D402                            ; Subroutine to	load "0" on the	HUD
0001D402                            ; ---------------------------------------------------------------------------
0001D402                            
0001D402                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D402                            
0001D402                            
0001D402                            Hud_LoadZero:				; XREF: HudUpdate
0001D402 23FC 5F40 0003 00C0 0004   		move.l	#$5F400003,($C00004).l
0001D40C 45FA 0000                  		lea	Hud_TilesZero(pc),a2
0001D410 343C 0002                  		move.w	#2,d2
0001D414 6000                       		bra.s	loc_1C83E
0001D416                            ; End of function Hud_LoadZero
0001D416                            
0001D416                            ; ---------------------------------------------------------------------------
0001D416                            ; Subroutine to	load uncompressed HUD patterns ("E", "0", colon)
0001D416                            ; ---------------------------------------------------------------------------
0001D416                            
0001D416                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D416                            
0001D416                            
0001D416                            Hud_Base:				; XREF: Level; SS_EndLoop; EndingSequence
0001D416 4DF9 00C0 0000             		lea	($C00000).l,a6
0001D41C 6100 0000                  		bsr.w	Hud_Lives
0001D420 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l
0001D42A 45FA 0000                  		lea	Hud_TilesBase(pc),a2
0001D42E 343C 000E                  		move.w	#$E,d2
0001D432                            
0001D432                            loc_1C83E:				; XREF: Hud_LoadZero
0001D432 43FA 0000                  		lea	Art_Hud(pc),a1
0001D436                            
0001D436                            loc_1C842:
0001D436 323C 000F                  		move.w	#$F,d1
0001D43A 101A                       		move.b	(a2)+,d0
0001D43C 6B00                       		bmi.s	loc_1C85E
0001D43E 4880                       		ext.w	d0
0001D440 EB48                       		lsl.w	#5,d0
0001D442 47F1 0000                  		lea	(a1,d0.w),a3
0001D446                            
0001D446                            loc_1C852:
0001D446 2C9B                       		move.l	(a3)+,(a6)
0001D448 51C9 FFFC                  		dbf	d1,loc_1C852
0001D44C                            
0001D44C                            loc_1C858:
0001D44C 51CA FFE8                  		dbf	d2,loc_1C842
0001D450                            
0001D450 4E75                       		rts	
0001D452                            ; ===========================================================================
0001D452                            
0001D452                            loc_1C85E:
0001D452 2CBC 0000 0000             		move.l	#0,(a6)
0001D458 51C9 FFF8                  		dbf	d1,loc_1C85E
0001D45C                            
0001D45C 60EE                       		bra.s	loc_1C858
0001D45E                            ; End of function Hud_Base
0001D45E                            
0001D45E                            ; ===========================================================================
0001D45E 16FF FFFF FFFF FF00 0014+  Hud_TilesBase:	dc.b $16, $FF, $FF, $FF, $FF, $FF, $FF,	0, 0, $14, 0, 0
0001D46A FFFF 0000                  Hud_TilesZero:	dc.b $FF, $FF, 0, 0
0001D46E                            ; ---------------------------------------------------------------------------
0001D46E                            ; Subroutine to	load debug mode	numbers	patterns
0001D46E                            ; ---------------------------------------------------------------------------
0001D46E                            
0001D46E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D46E                            
0001D46E                            
0001D46E                            HudDb_XY:				; XREF: HudDebug
0001D46E 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l ; set VRAM address
0001D478 3238 F700                  		move.w	($FFFFF700).w,d1 ; load	camera x-position
0001D47C 4841                       		swap	d1
0001D47E 3238 D008                  		move.w	($FFFFD008).w,d1 ; load	Sonic's x-position
0001D482 6100                       		bsr.s	HudDb_XY2
0001D484 3238 F704                  		move.w	($FFFFF704).w,d1 ; load	camera y-position
0001D488 4841                       		swap	d1
0001D48A 3238 D00C                  		move.w	($FFFFD00C).w,d1 ; load	Sonic's y-position
0001D48E                            ; End of function HudDb_XY
0001D48E                            
0001D48E                            
0001D48E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D48E                            
0001D48E                            
0001D48E                            HudDb_XY2:
0001D48E 7C07                       		moveq	#7,d6
0001D490 43F9 0000 05E2             		lea	(Art_Text).l,a1
0001D496                            
0001D496                            HudDb_XYLoop:
0001D496 E959                       		rol.w	#4,d1
0001D498 3401                       		move.w	d1,d2
0001D49A 0242 000F                  		andi.w	#$F,d2
0001D49E 0C42 000A                  		cmpi.w	#$A,d2
0001D4A2 6500                       		bcs.s	loc_1C8B2
0001D4A4 5E42                       		addq.w	#7,d2
0001D4A6                            
0001D4A6                            loc_1C8B2:
0001D4A6 EB4A                       		lsl.w	#5,d2
0001D4A8 47F1 2000                  		lea	(a1,d2.w),a3
0001D4AC 2C9B                       		move.l	(a3)+,(a6)
0001D4AE 2C9B                       		move.l	(a3)+,(a6)
0001D4B0 2C9B                       		move.l	(a3)+,(a6)
0001D4B2 2C9B                       		move.l	(a3)+,(a6)
0001D4B4 2C9B                       		move.l	(a3)+,(a6)
0001D4B6 2C9B                       		move.l	(a3)+,(a6)
0001D4B8 2C9B                       		move.l	(a3)+,(a6)
0001D4BA 2C9B                       		move.l	(a3)+,(a6)
0001D4BC 4841                       		swap	d1
0001D4BE 51CE FFD6                  		dbf	d6,HudDb_XYLoop	; repeat 7 more	times
0001D4C2                            
0001D4C2 4E75                       		rts	
0001D4C4                            ; End of function HudDb_XY2
0001D4C4                            
0001D4C4                            ; ---------------------------------------------------------------------------
0001D4C4                            ; Subroutine to	load rings numbers patterns
0001D4C4                            ; ---------------------------------------------------------------------------
0001D4C4                            
0001D4C4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D4C4                            
0001D4C4                            
0001D4C4                            Hud_Rings:				; XREF: HudUpdate
0001D4C4 45F9 0000 0000             		lea	(Hud_100).l,a2
0001D4CA 7C02                       		moveq	#2,d6
0001D4CC 6000                       		bra.s	Hud_LoadArt
0001D4CE                            ; End of function Hud_Rings
0001D4CE                            
0001D4CE                            ; ---------------------------------------------------------------------------
0001D4CE                            ; Subroutine to	load score numbers patterns
0001D4CE                            ; ---------------------------------------------------------------------------
0001D4CE                            
0001D4CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D4CE                            
0001D4CE                            
0001D4CE                            Hud_Score:				; XREF: HudUpdate
0001D4CE 45F9 0000 0000             		lea	(Hud_100000).l,a2
0001D4D4 7C05                       		moveq	#5,d6
0001D4D6                            
0001D4D6                            Hud_LoadArt:
0001D4D6 7800                       		moveq	#0,d4
0001D4D8 43FA 0000                  		lea	Art_Hud(pc),a1
0001D4DC                            
0001D4DC                            Hud_ScoreLoop:
0001D4DC 7400                       		moveq	#0,d2
0001D4DE 261A                       		move.l	(a2)+,d3
0001D4E0                            
0001D4E0                            loc_1C8EC:
0001D4E0 9283                       		sub.l	d3,d1
0001D4E2 6500                       		bcs.s	loc_1C8F4
0001D4E4 5242                       		addq.w	#1,d2
0001D4E6 60F8                       		bra.s	loc_1C8EC
0001D4E8                            ; ===========================================================================
0001D4E8                            
0001D4E8                            loc_1C8F4:
0001D4E8 D283                       		add.l	d3,d1
0001D4EA 4A42                       		tst.w	d2
0001D4EC 6700                       		beq.s	loc_1C8FE
0001D4EE 383C 0001                  		move.w	#1,d4
0001D4F2                            
0001D4F2                            loc_1C8FE:
0001D4F2 4A44                       		tst.w	d4
0001D4F4 6700                       		beq.s	loc_1C92C
0001D4F6 ED4A                       		lsl.w	#6,d2
0001D4F8 2D40 0004                  		move.l	d0,4(a6)
0001D4FC 47F1 2000                  		lea	(a1,d2.w),a3
0001D500 2C9B                       		move.l	(a3)+,(a6)
0001D502 2C9B                       		move.l	(a3)+,(a6)
0001D504 2C9B                       		move.l	(a3)+,(a6)
0001D506 2C9B                       		move.l	(a3)+,(a6)
0001D508 2C9B                       		move.l	(a3)+,(a6)
0001D50A 2C9B                       		move.l	(a3)+,(a6)
0001D50C 2C9B                       		move.l	(a3)+,(a6)
0001D50E 2C9B                       		move.l	(a3)+,(a6)
0001D510 2C9B                       		move.l	(a3)+,(a6)
0001D512 2C9B                       		move.l	(a3)+,(a6)
0001D514 2C9B                       		move.l	(a3)+,(a6)
0001D516 2C9B                       		move.l	(a3)+,(a6)
0001D518 2C9B                       		move.l	(a3)+,(a6)
0001D51A 2C9B                       		move.l	(a3)+,(a6)
0001D51C 2C9B                       		move.l	(a3)+,(a6)
0001D51E 2C9B                       		move.l	(a3)+,(a6)
0001D520                            
0001D520                            loc_1C92C:
0001D520 0680 0040 0000             		addi.l	#$400000,d0
0001D526 51CE FFB4                  		dbf	d6,Hud_ScoreLoop
0001D52A                            
0001D52A 4E75                       		rts	
0001D52C                            ; End of function Hud_Score
0001D52C                            
0001D52C                            ; ---------------------------------------------------------------------------
0001D52C                            ; Subroutine to	load countdown numbers on the continue screen
0001D52C                            ; ---------------------------------------------------------------------------
0001D52C                            
0001D52C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D52C                            
0001D52C                            
0001D52C                            ContScrCounter:				; XREF: ContinueScreen
0001D52C 23FC 5F80 0003 00C0 0004   		move.l	#$5F800003,($C00004).l ; set VRAM address
0001D536 4DF9 00C0 0000             		lea	($C00000).l,a6
0001D53C 45F9 0000 0000             		lea	(Hud_10).l,a2
0001D542 7C01                       		moveq	#1,d6
0001D544 7800                       		moveq	#0,d4
0001D546 43FA 0000                  		lea	Art_Hud(pc),a1 ; load numbers patterns
0001D54A                            
0001D54A                            ContScr_Loop:
0001D54A 7400                       		moveq	#0,d2
0001D54C 261A                       		move.l	(a2)+,d3
0001D54E                            
0001D54E                            loc_1C95A:
0001D54E 9283                       		sub.l	d3,d1
0001D550 6500                       		bcs.s	loc_1C962
0001D552 5242                       		addq.w	#1,d2
0001D554 60F8                       		bra.s	loc_1C95A
0001D556                            ; ===========================================================================
0001D556                            
0001D556                            loc_1C962:
0001D556 D283                       		add.l	d3,d1
0001D558 ED4A                       		lsl.w	#6,d2
0001D55A 47F1 2000                  		lea	(a1,d2.w),a3
0001D55E 2C9B                       		move.l	(a3)+,(a6)
0001D560 2C9B                       		move.l	(a3)+,(a6)
0001D562 2C9B                       		move.l	(a3)+,(a6)
0001D564 2C9B                       		move.l	(a3)+,(a6)
0001D566 2C9B                       		move.l	(a3)+,(a6)
0001D568 2C9B                       		move.l	(a3)+,(a6)
0001D56A 2C9B                       		move.l	(a3)+,(a6)
0001D56C 2C9B                       		move.l	(a3)+,(a6)
0001D56E 2C9B                       		move.l	(a3)+,(a6)
0001D570 2C9B                       		move.l	(a3)+,(a6)
0001D572 2C9B                       		move.l	(a3)+,(a6)
0001D574 2C9B                       		move.l	(a3)+,(a6)
0001D576 2C9B                       		move.l	(a3)+,(a6)
0001D578 2C9B                       		move.l	(a3)+,(a6)
0001D57A 2C9B                       		move.l	(a3)+,(a6)
0001D57C 2C9B                       		move.l	(a3)+,(a6)
0001D57E 51CE FFCA                  		dbf	d6,ContScr_Loop	; repeat 1 more	time
0001D582                            
0001D582 4E75                       		rts	
0001D584                            ; End of function ContScrCounter
0001D584                            
0001D584                            ; ===========================================================================
0001D584                            ; ---------------------------------------------------------------------------
0001D584                            ; HUD counter sizes
0001D584                            ; ---------------------------------------------------------------------------
0001D584 0001 86A0                  Hud_100000:	dc.l 100000		; XREF: Hud_Score
0001D588 0000 2710                  Hud_10000:	dc.l 10000
0001D58C 0000 03E8                  Hud_1000:	dc.l 1000		; XREF: Hud_TimeRingBonus
0001D590 0000 0064                  Hud_100:	dc.l 100		; XREF: Hud_Rings
0001D594 0000 000A                  Hud_10:		dc.l 10			; XREF: ContScrCounter; Hud_Secs; Hud_Lives
0001D598 0000 0001                  Hud_1:		dc.l 1			; XREF: Hud_Mins
0001D59C                            
0001D59C                            ; ---------------------------------------------------------------------------
0001D59C                            ; Subroutine to	load time numbers patterns
0001D59C                            ; ---------------------------------------------------------------------------
0001D59C                            
0001D59C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D59C                            
0001D59C                            
0001D59C                            Hud_Mins:				; XREF: Hud_ChkTime
0001D59C 45F9 0001 D598             		lea	(Hud_1).l,a2
0001D5A2 7C00                       		moveq	#0,d6
0001D5A4 6000                       		bra.s	loc_1C9BA
0001D5A6                            ; End of function Hud_Mins
0001D5A6                            
0001D5A6                            
0001D5A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D5A6                            
0001D5A6                            
0001D5A6                            Hud_Secs:				; XREF: Hud_ChkTime
0001D5A6 45F9 0001 D594             		lea	(Hud_10).l,a2
0001D5AC 7C01                       		moveq	#1,d6
0001D5AE                            
0001D5AE                            loc_1C9BA:
0001D5AE 7800                       		moveq	#0,d4
0001D5B0 43FA 0000                  		lea	Art_Hud(pc),a1
0001D5B4                            
0001D5B4                            Hud_TimeLoop:
0001D5B4 7400                       		moveq	#0,d2
0001D5B6 261A                       		move.l	(a2)+,d3
0001D5B8                            
0001D5B8                            loc_1C9C4:
0001D5B8 9283                       		sub.l	d3,d1
0001D5BA 6500                       		bcs.s	loc_1C9CC
0001D5BC 5242                       		addq.w	#1,d2
0001D5BE 60F8                       		bra.s	loc_1C9C4
0001D5C0                            ; ===========================================================================
0001D5C0                            
0001D5C0                            loc_1C9CC:
0001D5C0 D283                       		add.l	d3,d1
0001D5C2 4A42                       		tst.w	d2
0001D5C4 6700                       		beq.s	loc_1C9D6
0001D5C6 383C 0001                  		move.w	#1,d4
0001D5CA                            
0001D5CA                            loc_1C9D6:
0001D5CA ED4A                       		lsl.w	#6,d2
0001D5CC 2D40 0004                  		move.l	d0,4(a6)
0001D5D0 47F1 2000                  		lea	(a1,d2.w),a3
0001D5D4 2C9B                       		move.l	(a3)+,(a6)
0001D5D6 2C9B                       		move.l	(a3)+,(a6)
0001D5D8 2C9B                       		move.l	(a3)+,(a6)
0001D5DA 2C9B                       		move.l	(a3)+,(a6)
0001D5DC 2C9B                       		move.l	(a3)+,(a6)
0001D5DE 2C9B                       		move.l	(a3)+,(a6)
0001D5E0 2C9B                       		move.l	(a3)+,(a6)
0001D5E2 2C9B                       		move.l	(a3)+,(a6)
0001D5E4 2C9B                       		move.l	(a3)+,(a6)
0001D5E6 2C9B                       		move.l	(a3)+,(a6)
0001D5E8 2C9B                       		move.l	(a3)+,(a6)
0001D5EA 2C9B                       		move.l	(a3)+,(a6)
0001D5EC 2C9B                       		move.l	(a3)+,(a6)
0001D5EE 2C9B                       		move.l	(a3)+,(a6)
0001D5F0 2C9B                       		move.l	(a3)+,(a6)
0001D5F2 2C9B                       		move.l	(a3)+,(a6)
0001D5F4 0680 0040 0000             		addi.l	#$400000,d0
0001D5FA 51CE FFB8                  		dbf	d6,Hud_TimeLoop
0001D5FE                            
0001D5FE 4E75                       		rts	
0001D600                            ; End of function Hud_Secs
0001D600                            
0001D600                            ; ---------------------------------------------------------------------------
0001D600                            ; Subroutine to	load time/ring bonus numbers patterns
0001D600                            ; ---------------------------------------------------------------------------
0001D600                            
0001D600                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D600                            
0001D600                            
0001D600                            Hud_TimeRingBonus:			; XREF: Hud_ChkBonus
0001D600 45F9 0001 D58C             		lea	(Hud_1000).l,a2
0001D606 7C03                       		moveq	#3,d6
0001D608 7800                       		moveq	#0,d4
0001D60A 43FA 0000                  		lea	Art_Hud(pc),a1
0001D60E                            
0001D60E                            Hud_BonusLoop:
0001D60E 7400                       		moveq	#0,d2
0001D610 261A                       		move.l	(a2)+,d3
0001D612                            
0001D612                            loc_1CA1E:
0001D612 9283                       		sub.l	d3,d1
0001D614 6500                       		bcs.s	loc_1CA26
0001D616 5242                       		addq.w	#1,d2
0001D618 60F8                       		bra.s	loc_1CA1E
0001D61A                            ; ===========================================================================
0001D61A                            
0001D61A                            loc_1CA26:
0001D61A D283                       		add.l	d3,d1
0001D61C 4A42                       		tst.w	d2
0001D61E 6700                       		beq.s	loc_1CA30
0001D620 383C 0001                  		move.w	#1,d4
0001D624                            
0001D624                            loc_1CA30:
0001D624 4A44                       		tst.w	d4
0001D626 6700                       		beq.s	Hud_ClrBonus
0001D628 ED4A                       		lsl.w	#6,d2
0001D62A 47F1 2000                  		lea	(a1,d2.w),a3
0001D62E 2C9B                       		move.l	(a3)+,(a6)
0001D630 2C9B                       		move.l	(a3)+,(a6)
0001D632 2C9B                       		move.l	(a3)+,(a6)
0001D634 2C9B                       		move.l	(a3)+,(a6)
0001D636 2C9B                       		move.l	(a3)+,(a6)
0001D638 2C9B                       		move.l	(a3)+,(a6)
0001D63A 2C9B                       		move.l	(a3)+,(a6)
0001D63C 2C9B                       		move.l	(a3)+,(a6)
0001D63E 2C9B                       		move.l	(a3)+,(a6)
0001D640 2C9B                       		move.l	(a3)+,(a6)
0001D642 2C9B                       		move.l	(a3)+,(a6)
0001D644 2C9B                       		move.l	(a3)+,(a6)
0001D646 2C9B                       		move.l	(a3)+,(a6)
0001D648 2C9B                       		move.l	(a3)+,(a6)
0001D64A 2C9B                       		move.l	(a3)+,(a6)
0001D64C 2C9B                       		move.l	(a3)+,(a6)
0001D64E                            
0001D64E                            loc_1CA5A:
0001D64E 51CE FFBE                  		dbf	d6,Hud_BonusLoop ; repeat 3 more times
0001D652                            
0001D652 4E75                       		rts	
0001D654                            ; ===========================================================================
0001D654                            
0001D654                            Hud_ClrBonus:
0001D654 7A0F                       		moveq	#$F,d5
0001D656                            
0001D656                            Hud_ClrBonusLoop:
0001D656 2CBC 0000 0000             		move.l	#0,(a6)
0001D65C 51CD FFF8                  		dbf	d5,Hud_ClrBonusLoop
0001D660                            
0001D660 60EC                       		bra.s	loc_1CA5A
0001D662                            ; End of function Hud_TimeRingBonus
0001D662                            
0001D662                            ; ---------------------------------------------------------------------------
0001D662                            ; Subroutine to	load uncompressed lives	counter	patterns
0001D662                            ; ---------------------------------------------------------------------------
0001D662                            
0001D662                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D662                            
0001D662                            
0001D662                            Hud_Lives:				; XREF: Hud_ChkLives
0001D662 203C 7BA0 0003             		move.l	#$7BA00003,d0	; set VRAM address
0001D668 7200                       		moveq	#0,d1
0001D66A 1238 FE12                  		move.b	($FFFFFE12).w,d1 ; load	number of lives
0001D66E 45F9 0001 D594             		lea	(Hud_10).l,a2
0001D674 7C01                       		moveq	#1,d6
0001D676 7800                       		moveq	#0,d4
0001D678 43FA 0000                  		lea	Art_LivesNums(pc),a1
0001D67C                            
0001D67C                            Hud_LivesLoop:
0001D67C 2D40 0004                  		move.l	d0,4(a6)
0001D680 7400                       		moveq	#0,d2
0001D682 261A                       		move.l	(a2)+,d3
0001D684                            
0001D684                            loc_1CA90:
0001D684 9283                       		sub.l	d3,d1
0001D686 6500                       		bcs.s	loc_1CA98
0001D688 5242                       		addq.w	#1,d2
0001D68A 60F8                       		bra.s	loc_1CA90
0001D68C                            ; ===========================================================================
0001D68C                            
0001D68C                            loc_1CA98:
0001D68C D283                       		add.l	d3,d1
0001D68E 4A42                       		tst.w	d2
0001D690 6700                       		beq.s	loc_1CAA2
0001D692 383C 0001                  		move.w	#1,d4
0001D696                            
0001D696                            loc_1CAA2:
0001D696 4A44                       		tst.w	d4
0001D698 6700                       		beq.s	Hud_ClrLives
0001D69A                            
0001D69A                            loc_1CAA6:
0001D69A EB4A                       		lsl.w	#5,d2
0001D69C 47F1 2000                  		lea	(a1,d2.w),a3
0001D6A0 2C9B                       		move.l	(a3)+,(a6)
0001D6A2 2C9B                       		move.l	(a3)+,(a6)
0001D6A4 2C9B                       		move.l	(a3)+,(a6)
0001D6A6 2C9B                       		move.l	(a3)+,(a6)
0001D6A8 2C9B                       		move.l	(a3)+,(a6)
0001D6AA 2C9B                       		move.l	(a3)+,(a6)
0001D6AC 2C9B                       		move.l	(a3)+,(a6)
0001D6AE 2C9B                       		move.l	(a3)+,(a6)
0001D6B0                            
0001D6B0                            loc_1CABC:
0001D6B0 0680 0040 0000             		addi.l	#$400000,d0
0001D6B6 51CE FFC4                  		dbf	d6,Hud_LivesLoop ; repeat 1 more time
0001D6BA                            
0001D6BA 4E75                       		rts	
0001D6BC                            ; ===========================================================================
0001D6BC                            
0001D6BC                            Hud_ClrLives:
0001D6BC 4A46                       		tst.w	d6
0001D6BE 67DA                       		beq.s	loc_1CAA6
0001D6C0 7A07                       		moveq	#7,d5
0001D6C2                            
0001D6C2                            Hud_ClrLivesLoop:
0001D6C2 2CBC 0000 0000             		move.l	#0,(a6)
0001D6C8 51CD FFF8                  		dbf	d5,Hud_ClrLivesLoop
0001D6CC 60E2                       		bra.s	loc_1CABC
0001D6CE                            ; End of function Hud_Lives
0001D6CE                            
0001D6CE                            ; ===========================================================================
0001D6CE                            Art_Hud:	incbin	artunc\HUD.bin		; 8x16 pixel numbers on HUD
0001D9CE                            		even
0001D9CE                            Art_LivesNums:	incbin	artunc\livescnt.bin	; 8x8 pixel numbers on lives counter
0001DB0E                            		even
0001DB0E                            ; ===========================================================================
0001DB0E                            ; ---------------------------------------------------------------------------
0001DB0E                            ; When debug mode is currently in use
0001DB0E                            ; ---------------------------------------------------------------------------
0001DB0E                            
0001DB0E                            DebugMode:				; XREF: Obj01; Obj09
0001DB0E 7000                       		moveq	#0,d0
0001DB10 1038 FE08                  		move.b	($FFFFFE08).w,d0
0001DB14 323B 0000                  		move.w	Debug_Index(pc,d0.w),d1
0001DB18 4EFB 1000                  		jmp	Debug_Index(pc,d1.w)
0001DB1C                            ; ===========================================================================
0001DB1C 0000                       Debug_Index:	dc.w Debug_Main-Debug_Index
0001DB1E 0000                       		dc.w Debug_Skip-Debug_Index
0001DB20                            ; ===========================================================================
0001DB20                            
0001DB20                            Debug_Main:				; XREF: Debug_Index
0001DB20 5438 FE08                  		addq.b	#2,($FFFFFE08).w
0001DB24 31F8 F72C FEF0             		move.w	($FFFFF72C).w,($FFFFFEF0).w ; buffer level x-boundary
0001DB2A 31F8 F726 FEF2             		move.w	($FFFFF726).w,($FFFFFEF2).w ; buffer level y-boundary
0001DB30 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
0001DB36 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
0001DB3C 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
0001DB42 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
0001DB48 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
0001DB4E 117C 0000 001A             		move.b	#0,$1A(a0)
0001DB54 117C 0000 001C             		move.b	#0,$1C(a0)
0001DB5A 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)?
0001DB60 6600                       		bne.s	Debug_Zone	; if not, branch
0001DB62 31FC 0000 F782             		move.w	#0,($FFFFF782).w ; stop	special	stage rotating
0001DB68 31FC 0000 F780             		move.w	#0,($FFFFF780).w ; make	special	stage "upright"
0001DB6E 7006                       		moveq	#6,d0		; use 6th debug	item list
0001DB70 6000                       		bra.s	Debug_UseList
0001DB72                            ; ===========================================================================
0001DB72                            
0001DB72                            Debug_Zone:
0001DB72 7000                       		moveq	#0,d0
0001DB74 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001DB78                            
0001DB78                            Debug_UseList:
0001DB78 45F9 0000 0000             		lea	(DebugList).l,a2
0001DB7E D040                       		add.w	d0,d0
0001DB80 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001DB84 3C1A                       		move.w	(a2)+,d6
0001DB86 BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001DB8A 6200                       		bhi.s	loc_1CF9E
0001DB8C 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w
0001DB92                            
0001DB92                            loc_1CF9E:
0001DB92 6100 0000                  		bsr.w	Debug_ShowItem
0001DB96 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001DB9C 11FC 0001 FE0B             		move.b	#1,($FFFFFE0B).w
0001DBA2                            
0001DBA2                            Debug_Skip:				; XREF: Debug_Index
0001DBA2 7006                       		moveq	#6,d0
0001DBA4 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
0001DBAA 6700                       		beq.s	loc_1CFBE
0001DBAC 7000                       		moveq	#0,d0
0001DBAE 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001DBB2                            
0001DBB2                            loc_1CFBE:
0001DBB2 45F9 0000 0000             		lea	(DebugList).l,a2
0001DBB8 D040                       		add.w	d0,d0
0001DBBA D4F2 0000                  		adda.w	(a2,d0.w),a2
0001DBBE 3C1A                       		move.w	(a2)+,d6
0001DBC0 6100 0000                  		bsr.w	Debug_Control
0001DBC4 4EF9 0000 E044             		jmp	DisplaySprite
0001DBCA                            
0001DBCA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DBCA                            
0001DBCA                            
0001DBCA                            Debug_Control:
0001DBCA 7800                       		moveq	#0,d4
0001DBCC 323C 0001                  		move.w	#1,d1
0001DBD0 1838 F605                  		move.b	($FFFFF605).w,d4
0001DBD4 0244 000F                  		andi.w	#$F,d4		; is up/down/left/right	pressed?
0001DBD8 6600                       		bne.s	loc_1D018	; if yes, branch
0001DBDA 1038 F604                  		move.b	($FFFFF604).w,d0
0001DBDE 0240 000F                  		andi.w	#$F,d0
0001DBE2 6600                       		bne.s	loc_1D000
0001DBE4 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001DBEA 11FC 000F FE0B             		move.b	#$F,($FFFFFE0B).w
0001DBF0 6000 0000                  		bra.w	Debug_BackItem
0001DBF4                            ; ===========================================================================
0001DBF4                            
0001DBF4                            loc_1D000:
0001DBF4 5338 FE0A                  		subq.b	#1,($FFFFFE0A).w
0001DBF8 6600                       		bne.s	loc_1D01C
0001DBFA 11FC 0001 FE0A             		move.b	#1,($FFFFFE0A).w
0001DC00 5238 FE0B                  		addq.b	#1,($FFFFFE0B).w
0001DC04 6600                       		bne.s	loc_1D018
0001DC06 11FC 00FF FE0B             		move.b	#-1,($FFFFFE0B).w
0001DC0C                            
0001DC0C                            loc_1D018:
0001DC0C 1838 F604                  		move.b	($FFFFF604).w,d4
0001DC10                            
0001DC10                            loc_1D01C:
0001DC10 7200                       		moveq	#0,d1
0001DC12 1238 FE0B                  		move.b	($FFFFFE0B).w,d1
0001DC16 5241                       		addq.w	#1,d1
0001DC18 4841                       		swap	d1
0001DC1A E881                       		asr.l	#4,d1
0001DC1C 2428 000C                  		move.l	$C(a0),d2
0001DC20 2628 0008                  		move.l	8(a0),d3
0001DC24 0804 0000                  		btst	#0,d4		; is up	being pressed?
0001DC28 6700                       		beq.s	loc_1D03C	; if not, branch
0001DC2A 9481                       		sub.l	d1,d2
0001DC2C 6400                       		bcc.s	loc_1D03C
0001DC2E 7400                       		moveq	#0,d2
0001DC30                            
0001DC30                            loc_1D03C:
0001DC30 0804 0001                  		btst	#1,d4		; is down being	pressed?
0001DC34 6700                       		beq.s	loc_1D052	; if not, branch
0001DC36 D481                       		add.l	d1,d2
0001DC38 0C82 07FF 0000             		cmpi.l	#$7FF0000,d2
0001DC3E 6500                       		bcs.s	loc_1D052
0001DC40 243C 07FF 0000             		move.l	#$7FF0000,d2
0001DC46                            
0001DC46                            loc_1D052:
0001DC46 0804 0002                  		btst	#2,d4
0001DC4A 6700                       		beq.s	loc_1D05E
0001DC4C 9681                       		sub.l	d1,d3
0001DC4E 6400                       		bcc.s	loc_1D05E
0001DC50 7600                       		moveq	#0,d3
0001DC52                            
0001DC52                            loc_1D05E:
0001DC52 0804 0003                  		btst	#3,d4
0001DC56 6700                       		beq.s	loc_1D066
0001DC58 D681                       		add.l	d1,d3
0001DC5A                            
0001DC5A                            loc_1D066:
0001DC5A 2142 000C                  		move.l	d2,$C(a0)
0001DC5E 2143 0008                  		move.l	d3,8(a0)
0001DC62                            
0001DC62                            Debug_BackItem:
0001DC62 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
0001DC68 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001DC6A 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001DC70 6700                       		beq.s	Debug_NextItem	; if not, branch
0001DC72 5338 FE06                  		subq.b	#1,($FFFFFE06).w ; go back 1 item
0001DC76 6400                       		bcc.s	Debug_NoLoop
0001DC78 DD38 FE06                  		add.b	d6,($FFFFFE06).w
0001DC7C 6000                       		bra.s	Debug_NoLoop
0001DC7E                            ; ===========================================================================
0001DC7E                            
0001DC7E                            Debug_NextItem:
0001DC7E 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
0001DC84 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001DC86 5238 FE06                  		addq.b	#1,($FFFFFE06).w ; go forwards 1 item
0001DC8A BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001DC8E 6200                       		bhi.s	Debug_NoLoop
0001DC90 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w ; loop	back to	first item
0001DC96                            
0001DC96                            Debug_NoLoop:
0001DC96 6000 0000                  		bra.w	Debug_ShowItem
0001DC9A                            ; ===========================================================================
0001DC9A                            
0001DC9A                            Debug_MakeItem:
0001DC9A 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001DCA0 6700                       		beq.s	Debug_Exit	; if not, branch
0001DCA2 4EB9 0000 E4CA             		jsr	SingleObjLoad
0001DCA8 6600                       		bne.s	Debug_Exit
0001DCAA 3368 0008 0008             		move.w	8(a0),8(a1)
0001DCB0 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001DCB6 12A8 0004                  		move.b	4(a0),0(a1)	; create object
0001DCBA 1368 0001 0001             		move.b	1(a0),1(a1)
0001DCC0 1368 0001 0022             		move.b	1(a0),$22(a1)
0001DCC6 0229 007F 0022             		andi.b	#$7F,$22(a1)
0001DCCC 7000                       		moveq	#0,d0
0001DCCE 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001DCD2 E748                       		lsl.w	#3,d0
0001DCD4 1372 0004 0028             		move.b	4(a2,d0.w),$28(a1)
0001DCDA 4E75                       		rts	
0001DCDC                            ; ===========================================================================
0001DCDC                            
0001DCDC                            Debug_Exit:
0001DCDC 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button B pressed?
0001DCE2 6700                       		beq.s	Debug_DoNothing	; if not, branch
0001DCE4 7000                       		moveq	#0,d0
0001DCE6 31C0 FE08                  		move.w	d0,($FFFFFE08).w ; deactivate debug mode
0001DCEA 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001DCF2 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001DCF8 11C0 D01C                  		move.b	d0,($FFFFD01C).w
0001DCFC 3140 000A                  		move.w	d0,$A(a0)
0001DD00 3140 000E                  		move.w	d0,$E(a0)
0001DD04 31F8 FEF0 F72C             		move.w	($FFFFFEF0).w,($FFFFF72C).w ; restore level boundaries
0001DD0A 31F8 FEF2 F726             		move.w	($FFFFFEF2).w,($FFFFF726).w
0001DD10 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; are you in	the special stage?
0001DD16 6600                       		bne.s	Debug_DoNothing	; if not, branch
0001DD18 4278 F780                  		clr.w	($FFFFF780).w
0001DD1C 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set new level rotation speed
0001DD22 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001DD2A 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001DD30 11FC 0002 D01C             		move.b	#2,($FFFFD01C).w
0001DD36 08F8 0002 D022             		bset	#2,($FFFFD022).w
0001DD3C 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001DD42                            
0001DD42                            Debug_DoNothing:
0001DD42 4E75                       		rts	
0001DD44                            ; End of function Debug_Control
0001DD44                            
0001DD44                            
0001DD44                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DD44                            
0001DD44                            
0001DD44                            Debug_ShowItem:				; XREF: Debug_Main
0001DD44 7000                       		moveq	#0,d0
0001DD46 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001DD4A E748                       		lsl.w	#3,d0
0001DD4C 2172 0000 0004             		move.l	(a2,d0.w),4(a0)	; load mappings	for item
0001DD52 3172 0006 0002             		move.w	6(a2,d0.w),2(a0) ; load	VRAM setting for item
0001DD58 1172 0005 001A             		move.b	5(a2,d0.w),$1A(a0) ; load frame	number for item
0001DD5E 4E75                       		rts	
0001DD60                            ; End of function Debug_ShowItem
0001DD60                            
0001DD60                            ; ===========================================================================
0001DD60                            ; ---------------------------------------------------------------------------
0001DD60                            ; Debug	list pointers
0001DD60                            ; ---------------------------------------------------------------------------
0001DD60                            DebugList:
0001DD60                            	include "_inc\Debug list pointers.asm"
0001DD60                            ; ---------------------------------------------------------------------------
0001DD60                            ; Debug	list pointers
0001DD60                            ; ---------------------------------------------------------------------------
0001DD60 0000                       	dc.w Debug_GHZ-DebugList
0001DD62 0000                       	dc.w Debug_LZ-DebugList
0001DD64 0000                       	dc.w Debug_MZ-DebugList
0001DD66 0000                       	dc.w Debug_SLZ-DebugList
0001DD68 0000                       	dc.w Debug_SYZ-DebugList
0001DD6A 0000                       	dc.w Debug_SBZ-DebugList
0001DD6C 0000                       	dc.w Debug_Ending-DebugList
0001DD6E 0000                       	dc.w Debug_GHZ-DebugList
0001DD6E 0000                       	dc.w Debug_GHZ-DebugList
0001DD70                            
0001DD70                            ; ---------------------------------------------------------------------------
0001DD70                            ; Debug	list - Green Hill
0001DD70                            ; ---------------------------------------------------------------------------
0001DD70                            Debug_GHZ:
0001DD70                            	include "_inc\Debug list - GHZ.asm"
0001DD70                            ; ---------------------------------------------------------------------------
0001DD70                            ; Debug	list - Green Hill
0001DD70                            ; ---------------------------------------------------------------------------
0001DD70 0010                       	dc.w $10			; number of items in list
0001DD72 2500 A838                  	dc.l Map_obj25+$25000000	; mappings pointer, object type * 10^6
0001DD76 0000 27B2                  	dc.b 0,	0, $27,	$B2		; subtype, frame, VRAM setting (2 bytes)
0001DD7A 2600 AE3E                  	dc.l Map_obj26+$26000000
0001DD7E 0000 0680                  	dc.b 0,	0, 6, $80
0001DD82 1F00 A030                  	dc.l Map_obj1F+$1F000000
0001DD86 0000 0400                  	dc.b 0,	0, 4, 0
0001DD8A 2200 A2EC                  	dc.l Map_obj22+$22000000
0001DD8E 0000 0444                  	dc.b 0,	0, 4, $44
0001DD92 2B00 B4B2                  	dc.l Map_obj2B+$2B000000
0001DD96 0000 047B                  	dc.b 0,	0, 4, $7B
0001DD9A 3600 D9E6                  	dc.l Map_obj36+$36000000
0001DD9E 0000 051B                  	dc.b 0,	0, 5, $1B
0001DDA2 1800 893E                  	dc.l Map_obj18+$18000000
0001DDA6 0000 4000                  	dc.b 0,	0, $40,	0
0001DDAA 3B00 DB0C                  	dc.l Map_obj3B+$3B000000
0001DDAE 0000 63D0                  	dc.b 0,	0, $63,	$D0
0001DDB2 4001 01DE                  	dc.l Map_obj40+$40000000
0001DDB6 0000 04F0                  	dc.b 0,	0, 4, $F0
0001DDBA 4100 E758                  	dc.l Map_obj41+$41000000
0001DDBE 0000 0523                  	dc.b 0,	0, 5, $23
0001DDC2 4200 E97E                  	dc.l Map_obj42+$42000000
0001DDC6 0000 249B                  	dc.b 0,	0, $24,	$9B
0001DDCA 4400 EC8C                  	dc.l Map_obj44+$44000000
0001DDCE 0000 434C                  	dc.b 0,	0, $43,	$4C
0001DDD2 1900 8A3E                  	dc.l Map_obj48+$19000000
0001DDD6 0000 43AA                  	dc.b 0,	0, $43,	$AA
0001DDDA 7901 7C2A                  	dc.l Map_obj79+$79000000
0001DDDE 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DDE2 4B00 A878                  	dc.l Map_obj4B+$4B000000
0001DDE6 0000 2400                  	dc.b 0,	0, $24,	0
0001DDEA 7D01 7D7A                  	dc.l Map_obj7D+$7D000000
0001DDEE 0101 84B6                  	dc.b 1,	1, $84,	$B6
0001DDF2                            	even
0001DDF2                            	even
0001DDF2                            
0001DDF2                            ; ---------------------------------------------------------------------------
0001DDF2                            ; Debug	list - Labyrinth
0001DDF2                            ; ---------------------------------------------------------------------------
0001DDF2                            Debug_LZ:
0001DDF2                            	include "_inc\Debug list - LZ.asm"
0001DDF2                            ; ---------------------------------------------------------------------------
0001DDF2                            ; Debug	list - Labyrinth
0001DDF2                            ; ---------------------------------------------------------------------------
0001DDF2 0019                       	dc.w $19
0001DDF4 2500 A838                  	dc.l Map_obj25+$25000000
0001DDF8 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DDFC 2600 AE3E                  	dc.l Map_obj26+$26000000
0001DE00 0000 0680                  	dc.b 0,	0, 6, $80
0001DE04 4100 E758                  	dc.l Map_obj41+$41000000
0001DE08 0000 0523                  	dc.b 0,	0, 5, $23
0001DE0C 2C00 B562                  	dc.l Map_obj2C+$2C000000
0001DE10 0800 2486                  	dc.b 8,	0, $24,	$86
0001DE14 2D00 B756                  	dc.l Map_obj2D+$2D000000
0001DE18 0002 84A6                  	dc.b 0,	2, $84,	$A6
0001DE1C 1601 29B8                  	dc.l Map_obj16+$16000000
0001DE20 0000 03CC                  	dc.b 0,	0, 3, $CC
0001DE24 1601 29B8                  	dc.l Map_obj16+$16000000
0001DE28 0203 03CC                  	dc.b 2,	3, 3, $CC
0001DE2C 3300 CC0E                  	dc.l Map_obj33+$33000000
0001DE30 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001DE34 3200 C7CE                  	dc.l Map_obj32+$32000000
0001DE38 0000 0513                  	dc.b 0,	0, 5, $13
0001DE3C 3600 D9E6                  	dc.l Map_obj36+$36000000
0001DE40 0000 051B                  	dc.b 0,	0, 5, $1B
0001DE44 5201 0ADA                  	dc.l Map_obj52a+$52000000
0001DE48 0400 43BC                  	dc.b 4,	0, $43,	$BC
0001DE4C 6101 2BE0                  	dc.l Map_obj61+$61000000
0001DE50 0100 43E6                  	dc.b 1,	0, $43,	$E6
0001DE54 6101 2BE0                  	dc.l Map_obj61+$61000000
0001DE58 1301 43E6                  	dc.b $13, 1, $43, $E6
0001DE5C 6101 2BE0                  	dc.l Map_obj61+$61000000
0001DE60 0500 43E6                  	dc.b 5,	0, $43,	$E6
0001DE64 6201 2D34                  	dc.l Map_obj62+$62000000
0001DE68 0000 443E                  	dc.b 0,	0, $44,	$3E
0001DE6C 6101 2BE0                  	dc.l Map_obj61+$61000000
0001DE70 2702 43E6                  	dc.b $27, 2, $43, $E6
0001DE74 6101 2BE0                  	dc.l Map_obj61+$61000000
0001DE78 3003 43E6                  	dc.b $30, 3, $43, $E6
0001DE7C 6301 3092                  	dc.l Map_obj63+$63000000
0001DE80 7F00 03F6                  	dc.b $7F, 0, 3,	$F6
0001DE84 6001 2902                  	dc.l Map_obj60+$60000000
0001DE88 0000 0467                  	dc.b 0,	0, 4, $67
0001DE8C 6401 33D8                  	dc.l Map_obj64+$64000000
0001DE90 8413 8348                  	dc.b $84, $13, $83, $48
0001DE94 6501 3560                  	dc.l Map_obj65+$65000000
0001DE98 0202 C259                  	dc.b 2,	2, $C2,	$59
0001DE9C 6501 3560                  	dc.l Map_obj65+$65000000
0001DEA0 0909 C259                  	dc.b 9,	9, $C2,	$59
0001DEA4 0B01 1D52                  	dc.l Map_obj0B+$B000000
0001DEA8 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001DEAC 0C01 1E22                  	dc.l Map_obj0C+$C000000
0001DEB0 0200 4328                  	dc.b 2,	0, $43,	$28
0001DEB4 7901 7C2A                  	dc.l Map_obj79+$79000000
0001DEB8 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DEBC                            	even
0001DEBC                            	even
0001DEBC                            
0001DEBC                            ; ---------------------------------------------------------------------------
0001DEBC                            ; Debug	list - Marble
0001DEBC                            ; ---------------------------------------------------------------------------
0001DEBC                            Debug_MZ:
0001DEBC                            	include "_inc\Debug list - MZ.asm"
0001DEBC                            ; ---------------------------------------------------------------------------
0001DEBC                            ; Debug	list - Marble
0001DEBC                            ; ---------------------------------------------------------------------------
0001DEBC 0012                       	dc.w $12
0001DEBE 2500 A838                  	dc.l Map_obj25+$25000000
0001DEC2 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DEC6 2600 AE3E                  	dc.l Map_obj26+$26000000
0001DECA 0000 0680                  	dc.b 0,	0, 6, $80
0001DECE 2200 A2EC                  	dc.l Map_obj22+$22000000
0001DED2 0000 0444                  	dc.b 0,	0, 4, $44
0001DED6 3600 D9E6                  	dc.l Map_obj36+$36000000
0001DEDA 0000 051B                  	dc.b 0,	0, 5, $1B
0001DEDE 4100 E758                  	dc.l Map_obj41+$41000000
0001DEE2 0000 0523                  	dc.b 0,	0, 5, $23
0001DEE6 1300 BC98                  	dc.l Map_obj14+$13000000
0001DEEA 0000 0345                  	dc.b 0,	0, 3, $45
0001DEEE 4600 F33E                  	dc.l Map_obj46+$46000000
0001DEF2 0000 4000                  	dc.b 0,	0, $40,	0
0001DEF6 4C00 FC8A                  	dc.l Map_obj4C+$4C000000
0001DEFA 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001DEFE 4E00 FF6E                  	dc.l Map_obj4E+$4E000000
0001DF02 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001DF06 3300 CC0E                  	dc.l Map_obj33+$33000000
0001DF0A 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001DF0E 5001 036C                  	dc.l Map_obj50+$50000000
0001DF12 0000 247B                  	dc.b 0,	0, $24,	$7B
0001DF16 5101 080E                  	dc.l Map_obj51+$51000000
0001DF1A 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001DF1E 5201 0A84                  	dc.l Map_obj52+$52000000
0001DF22 0000 02B8                  	dc.b 0,	0, 2, $B8
0001DF26 5300 8FD6                  	dc.l Map_obj53+$53000000
0001DF2A 0000 62B8                  	dc.b 0,	0, $62,	$B8
0001DF2E 5400 FC50                  	dc.l Map_obj54+$54000000
0001DF32 0000 8680                  	dc.b 0,	0, $86,	$80
0001DF36 5501 0C78                  	dc.l Map_obj55+$55000000
0001DF3A 0000 04B8                  	dc.b 0,	0, 4, $B8
0001DF3E 7801 78A4                  	dc.l Map_obj78+$78000000
0001DF42 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001DF46 7901 7C2A                  	dc.l Map_obj79+$79000000
0001DF4A 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DF4E                            	even
0001DF4E                            	even
0001DF4E                            
0001DF4E                            ; ---------------------------------------------------------------------------
0001DF4E                            ; Debug	list - Star Light
0001DF4E                            ; ---------------------------------------------------------------------------
0001DF4E                            Debug_SLZ:
0001DF4E                            	include "_inc\Debug list - SLZ.asm"
0001DF4E                            ; ---------------------------------------------------------------------------
0001DF4E                            ; Debug	list - Star Light
0001DF4E                            ; ---------------------------------------------------------------------------
0001DF4E 000F                       	dc.w $F
0001DF50 2500 A838                  	dc.l Map_obj25+$25000000
0001DF54 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DF58 2600 AE3E                  	dc.l Map_obj26+$26000000
0001DF5C 0000 0680                  	dc.b 0,	0, 6, $80
0001DF60 5901 177A                  	dc.l Map_obj59+$59000000
0001DF64 0000 4000                  	dc.b 0,	0, $40,	0
0001DF68 5300 8FD6                  	dc.l Map_obj53+$53000000
0001DF6C 0002 44E0                  	dc.b 0,	2, $44,	$E0
0001DF70 1800 899C                  	dc.l Map_obj18b+$18000000
0001DF74 0000 4000                  	dc.b 0,	0, $40,	0
0001DF78 5A01 18B4                  	dc.l Map_obj5A+$5A000000
0001DF7C 0000 4000                  	dc.b 0,	0, $40,	0
0001DF80 5B01 1A6C                  	dc.l Map_obj5B+$5B000000
0001DF84 0000 4000                  	dc.b 0,	0, $40,	0
0001DF88 5D01 203C                  	dc.l Map_obj5D+$5D000000
0001DF8C 0000 43A0                  	dc.b 0,	0, $43,	$A0
0001DF90 5E01 23CE                  	dc.l Map_obj5E+$5E000000
0001DF94 0000 0374                  	dc.b 0,	0, 3, $74
0001DF98 4100 E758                  	dc.l Map_obj41+$41000000
0001DF9C 0000 0523                  	dc.b 0,	0, 5, $23
0001DFA0 1300 BC98                  	dc.l Map_obj14+$13000000
0001DFA4 0000 0480                  	dc.b 0,	0, 4, $80
0001DFA8 1C00 90E6                  	dc.l Map_obj1C+$1C000000
0001DFAC 0000 44D8                  	dc.b 0,	0, $44,	$D8
0001DFB0 5F01 264C                  	dc.l Map_obj5F+$5F000000
0001DFB4 0000 0400                  	dc.b 0,	0, 4, 0
0001DFB8 6001 2902                  	dc.l Map_obj60+$60000000
0001DFBC 0000 2429                  	dc.b 0,	0, $24,	$29
0001DFC0 7901 7C2A                  	dc.l Map_obj79+$79000000
0001DFC4 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DFC8                            	even
0001DFC8                            	even
0001DFC8                            
0001DFC8                            ; ---------------------------------------------------------------------------
0001DFC8                            ; Debug	list - Spring Yard
0001DFC8                            ; ---------------------------------------------------------------------------
0001DFC8                            Debug_SYZ:
0001DFC8                            	include "_inc\Debug list - SYZ.asm"
0001DFC8                            ; ---------------------------------------------------------------------------
0001DFC8                            ; Debug	list - Spring Yard
0001DFC8                            ; ---------------------------------------------------------------------------
0001DFC8 000F                       	dc.w $F
0001DFCA 2500 A838                  	dc.l Map_obj25+$25000000
0001DFCE 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DFD2 2600 AE3E                  	dc.l Map_obj26+$26000000
0001DFD6 0000 0680                  	dc.b 0,	0, 6, $80
0001DFDA 3600 D9E6                  	dc.l Map_obj36+$36000000
0001DFDE 0000 051B                  	dc.b 0,	0, 5, $1B
0001DFE2 4100 E758                  	dc.l Map_obj41+$41000000
0001DFE6 0000 0523                  	dc.b 0,	0, 5, $23
0001DFEA 4300 EBDE                  	dc.l Map_obj43+$43000000
0001DFEE 0000 04B8                  	dc.b 0,	0, 4, $B8
0001DFF2 1200 F3BC                  	dc.l Map_obj12+$12000000
0001DFF6 0000 0000                  	dc.b 0,	0, 0, 0
0001DFFA 4700 F538                  	dc.l Map_obj47+$47000000
0001DFFE 0000 0380                  	dc.b 0,	0, 3, $80
0001E002 1F00 A030                  	dc.l Map_obj1F+$1F000000
0001E006 0000 0400                  	dc.b 0,	0, 4, 0
0001E00A 2200 A2EC                  	dc.l Map_obj22+$22000000
0001E00E 0000 0444                  	dc.b 0,	0, 4, $44
0001E012 5001 036C                  	dc.l Map_obj50+$50000000
0001E016 0000 247B                  	dc.b 0,	0, $24,	$7B
0001E01A 1800 898A                  	dc.l Map_obj18a+$18000000
0001E01E 0000 4000                  	dc.b 0,	0, $40,	0
0001E022 5601 113A                  	dc.l Map_obj56+$56000000
0001E026 0000 4000                  	dc.b 0,	0, $40,	0
0001E02A 3200 C7CE                  	dc.l Map_obj32+$32000000
0001E02E 0000 0513                  	dc.b 0,	0, 5, $13
0001E032 7801 78A4                  	dc.l Map_obj78+$78000000
0001E036 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001E03A 7901 7C2A                  	dc.l Map_obj79+$79000000
0001E03E 0100 07A0                  	dc.b 1,	0, 7, $A0
0001E042                            	even
0001E042                            	even
0001E042                            
0001E042                            ; ---------------------------------------------------------------------------
0001E042                            ; Debug	list - Scrap Brain
0001E042                            ; ---------------------------------------------------------------------------
0001E042                            Debug_SBZ:
0001E042                            	include "_inc\Debug list - SBZ.asm"
0001E042                            ; ---------------------------------------------------------------------------
0001E042                            ; Debug	list - Scrap Brain
0001E042                            ; ---------------------------------------------------------------------------
0001E042 001D                       	dc.w $1D
0001E044 2500 A838                  	dc.l Map_obj25+$25000000
0001E048 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001E04C 2600 AE3E                  	dc.l Map_obj26+$26000000
0001E050 0000 0680                  	dc.b 0,	0, 6, $80
0001E054 5F01 264C                  	dc.l Map_obj5F+$5F000000
0001E058 0000 0400                  	dc.b 0,	0, 4, 0
0001E05C 6001 2902                  	dc.l Map_obj60+$60000000
0001E060 0000 0429                  	dc.b 0,	0, 4, $29
0001E064 7801 78A4                  	dc.l Map_obj78+$78000000
0001E068 0000 22B0                  	dc.b 0,	0, $22,	$B0
0001E06C 1501 14D6                  	dc.l Map_obj15b+$15000000
0001E070 0702 4391                  	dc.b 7,	2, $43,	$91
0001E074 6701 61BC                  	dc.l Map_obj67+$67000000
0001E078 E000 C344                  	dc.b $E0, 0, $C3, $44
0001E07C 5201 0A84                  	dc.l Map_obj52+$52000000
0001E080 2802 22C0                  	dc.b $28, 2, $22, $C0
0001E084 3200 C7CE                  	dc.l Map_obj32+$32000000
0001E088 0000 0513                  	dc.b 0,	0, 5, $13
0001E08C 6901 6416                  	dc.l Map_obj69+$69000000
0001E090 0300 4492                  	dc.b 3,	0, $44,	$92
0001E094 6901 6470                  	dc.l Map_obj69a+$69000000
0001E098 8300 04DF                  	dc.b $83, 0, 4,	$DF
0001E09C 6A01 66CE                  	dc.l Map_obj6A+$6A000000
0001E0A0 0200 43B5                  	dc.b 2,	0, $43,	$B5
0001E0A4 5300 8FD6                  	dc.l Map_obj53+$53000000
0001E0A8 0000 43F5                  	dc.b 0,	0, $43,	$F5
0001E0AC 5201 0A84                  	dc.l Map_obj52+$52000000
0001E0B0 3903 4460                  	dc.b $39, 3, $44, $60
0001E0B4 6B01 6A9E                  	dc.l Map_obj6B+$6B000000
0001E0B8 0000 22C0                  	dc.b 0,	0, $22,	$C0
0001E0BC 2A00 927C                  	dc.l Map_obj2A+$2A000000
0001E0C0 0000 42E8                  	dc.b 0,	0, $42,	$E8
0001E0C4 6B01 6A9E                  	dc.l Map_obj6B+$6B000000
0001E0C8 1301 22C0                  	dc.b $13, 1, $22, $C0
0001E0CC 6A01 66CE                  	dc.l Map_obj6A+$6A000000
0001E0D0 0100 43B5                  	dc.b 1,	0, $43,	$B5
0001E0D4 6B01 6A9E                  	dc.l Map_obj6B+$6B000000
0001E0D8 2401 22C0                  	dc.b $24, 1, $22, $C0
0001E0DC 6A01 66CE                  	dc.l Map_obj6A+$6A000000
0001E0E0 0402 43B5                  	dc.b 4,	2, $43,	$B5
0001E0E4 6B01 6A9E                  	dc.l Map_obj6B+$6B000000
0001E0E8 3401 22C0                  	dc.b $34, 1, $22, $C0
0001E0EC 6C01 6C60                  	dc.l Map_obj6C+$6C000000
0001E0F0 0000 44C3                  	dc.b 0,	0, $44,	$C3
0001E0F4 6D00 F02E                  	dc.l Map_obj6D+$6D000000
0001E0F8 6400 83D9                  	dc.b $64, 0, $83, $D9
0001E0FC 6D00 F02E                  	dc.l Map_obj6D+$6D000000
0001E100 640B 83D9                  	dc.b $64, $B, $83, $D9
0001E104 6E01 6D16                  	dc.l Map_obj6E+$6E000000
0001E108 0400 047E                  	dc.b 4,	0, 4, $7E
0001E10C 7001 7168                  	dc.l Map_obj70+$70000000
0001E110 0000 42F0                  	dc.b 0,	0, $42,	$F0
0001E114 7101 1EE2                  	dc.l Map_obj71+$71000000
0001E118 1100 8680                  	dc.b $11, 0, $86, $80
0001E11C 1E00 973A                  	dc.l Map_obj1E+$1E000000
0001E120 0400 2302                  	dc.b 4,	0, $23,	2
0001E124 7901 7C2A                  	dc.l Map_obj79+$79000000
0001E128 0100 07A0                  	dc.b 1,	0, 7, $A0
0001E12C                            	even
0001E12C                            	even
0001E12C                            
0001E12C                            ; ---------------------------------------------------------------------------
0001E12C                            ; Debug	list - ending sequence / special stage
0001E12C                            ; ---------------------------------------------------------------------------
0001E12C                            Debug_Ending:
0001E12C                            	include "_inc\Debug list - Ending and SS.asm"
0001E12C                            ; ---------------------------------------------------------------------------
0001E12C                            ; Debug	list - ending sequence / special stage
0001E12C                            ; ---------------------------------------------------------------------------
0001E12C 000D                       	dc.w $D
0001E12E 2500 A838                  	dc.l Map_obj25+$25000000
0001E132 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001E136 4700 F538                  	dc.l Map_obj47+$47000000
0001E13A 0000 0380                  	dc.b 0,	0, 3, $80
0001E13E 2800 9D62                  	dc.l Map_obj28a+$28000000
0001E142 0A00 05A0                  	dc.b $A, 0, 5, $A0
0001E146 2800 9D62                  	dc.l Map_obj28a+$28000000
0001E14A 0B00 05A0                  	dc.b $B, 0, 5, $A0
0001E14E 2800 9D62                  	dc.l Map_obj28a+$28000000
0001E152 0C00 05A0                  	dc.b $C, 0, 5, $A0
0001E156 2800 9D4A                  	dc.l Map_obj28+$28000000
0001E15A 0D00 0553                  	dc.b $D, 0, 5, $53
0001E15E 2800 9D4A                  	dc.l Map_obj28+$28000000
0001E162 0E00 0553                  	dc.b $E, 0, 5, $53
0001E166 2800 9D4A                  	dc.l Map_obj28+$28000000
0001E16A 0F00 0573                  	dc.b $F, 0, 5, $73
0001E16E 2800 9D4A                  	dc.l Map_obj28+$28000000
0001E172 1000 0573                  	dc.b $10, 0, 5,	$73
0001E176 2800 9D62                  	dc.l Map_obj28a+$28000000
0001E17A 1100 0585                  	dc.b $11, 0, 5,	$85
0001E17E 2800 9D7A                  	dc.l Map_obj28b+$28000000
0001E182 1200 0593                  	dc.b $12, 0, 5,	$93
0001E186 2800 9D62                  	dc.l Map_obj28a+$28000000
0001E18A 1300 0565                  	dc.b $13, 0, 5,	$65
0001E18E 2800 9D7A                  	dc.l Map_obj28b+$28000000
0001E192 1400 05B3                  	dc.b $14, 0, 5,	$B3
0001E196                            	even
0001E196                            	even
0001E196                            
0001E196                            ; ---------------------------------------------------------------------------
0001E196                            ; Main level load blocks
0001E196                            ; ---------------------------------------------------------------------------
0001E196                            MainLoadBlocks:
0001E196                            	include "_inc\Main level load blocks.asm"
0001E196                            ; ---------------------------------------------------------------------------
0001E196                            ; Main level load blocks
0001E196                            ;
0001E196                            ; ===FORMAT===
0001E196                            ; level	patterns + (1st	PLC num	* 10^6)
0001E196                            ; 16x16	mappings + (2nd	PLC num	* 10^6)
0001E196                            ; 256x256 mappings
0001E196                            ; blank, music (unused), pal index (unused), pal index
0001E196                            ; ---------------------------------------------------------------------------
0001E196 0000 0000                  	dc.l Nem_GHZ_2nd|4<<24
0001E19A 0000 0000                  	dc.l Blk16_GHZ|5<<24
0001E19E 0000 0000                  	dc.l Blk256_GHZ
0001E1A2 0081 0404                  	dc.b 0,	$81, 4,	4
0001E1A6 0000 0000                  	dc.l Nem_LZ|6<<24
0001E1AA 0000 0000                  	dc.l Blk16_LZ|7<<24
0001E1AE 0000 0000                  	dc.l Blk256_LZ
0001E1B2 0082 0505                  	dc.b 0,	$82, 5,	5
0001E1B6 0000 0000                  	dc.l Nem_MZ|8<<24
0001E1BA 0000 0000                  	dc.l Blk16_MZ|9<<24
0001E1BE 0000 0000                  	dc.l Blk256_MZ
0001E1C2 0083 0606                  	dc.b 0,	$83, 6,	6
0001E1C6 0000 0000                  	dc.l Nem_SLZ|$A<<24
0001E1CA 0000 0000                  	dc.l Blk16_SLZ|$B<<24
0001E1CE 0000 0000                  	dc.l Blk256_SLZ
0001E1D2 0084 0707                  	dc.b 0,	$84, 7,	7
0001E1D6 0000 0000                  	dc.l Nem_SYZ|$C<<24
0001E1DA 0000 0000                  	dc.l Blk16_SYZ|$D<<24
0001E1DE 0000 0000                  	dc.l Blk256_SYZ
0001E1E2 0085 0808                  	dc.b 0,	$85, 8,	8
0001E1E6 0000 0000                  	dc.l Nem_SBZ|$E<<24
0001E1EA 0000 0000                  	dc.l Blk16_SBZ|$F<<24
0001E1EE 0000 0000                  	dc.l Blk256_SBZ
0001E1F2 0086 0909                  	dc.b 0,	$86, 9,	9
0001E1F6 0000 0000                  	dc.l Nem_GHZ_2nd	; main load block for ending
0001E1FA 0000 0000                  	dc.l Blk16_GHZ
0001E1FE 0000 0000                  	dc.l Blk256_GHZ
0001E202 0086 1313                  	dc.b 0,	$86, $13, $13
0001E206                            ; there you go lol
0001E206 0000 0000                  	dc.l Nem_BHZ|$20<<24 ; MAKOTO ZONE
0001E20A 0000 0000                  	dc.l Blk16_BHZ|$21<<24
0001E20E 0000 0000                  	dc.l Blk256_BHZ
0001E212 009E 1515                  	dc.b 0,	$9E, $15, $15
0001E216                            	even
0001E216                            	even
0001E216                            
0001E216                            ; ---------------------------------------------------------------------------
0001E216                            ; Pattern load cues
0001E216                            ; ---------------------------------------------------------------------------
0001E216                            ArtLoadCues:
0001E216                            	include "_inc\Pattern load cues.asm"
0001E216                            ; ---------------------------------------------------------------------------
0001E216                            ; Pattern load cues - index
0001E216                            ; ---------------------------------------------------------------------------
0001E216 0000 0000                  	dc.w PLC_Main-ArtLoadCues, PLC_Main2-ArtLoadCues	; 0
0001E21A 0000 0000                  	dc.w PLC_Explode-ArtLoadCues, PLC_GameOver-ArtLoadCues	; 2
0001E21E 0000 0000                  	dc.w PLC_GHZ-ArtLoadCues, PLC_GHZ2-ArtLoadCues		; 4
0001E222 0000 0000                  	dc.w PLC_LZ-ArtLoadCues, PLC_LZ2-ArtLoadCues
0001E226 0000 0000                  	dc.w PLC_MZ-ArtLoadCues, PLC_MZ2-ArtLoadCues
0001E22A 0000 0000                  	dc.w PLC_SLZ-ArtLoadCues, PLC_SLZ2-ArtLoadCues
0001E22E 0000 0000                  	dc.w PLC_SYZ-ArtLoadCues, PLC_SYZ2-ArtLoadCues
0001E232 0000 0000                  	dc.w PLC_SBZ-ArtLoadCues, PLC_SBZ2-ArtLoadCues
0001E236 0000 0000                  	dc.w PLC_TitleCard-ArtLoadCues,	PLC_Boss-ArtLoadCues	; $10
0001E23A 0000 0000                  	dc.w PLC_Signpost-ArtLoadCues, PLC_Warp-ArtLoadCues
0001E23E 0000 0000                  	dc.w PLC_SpeStage-ArtLoadCues, PLC_GHZAnimals-ArtLoadCues
0001E242 0000 0000                  	dc.w PLC_LZAnimals-ArtLoadCues,	PLC_MZAnimals-ArtLoadCues
0001E246 0000 0000                  	dc.w PLC_SLZAnimals-ArtLoadCues, PLC_SYZAnimals-ArtLoadCues
0001E24A 0000 0000                  	dc.w PLC_SBZAnimals-ArtLoadCues, PLC_SpeStResult-ArtLoadCues
0001E24E 0000 0000                  	dc.w PLC_Ending-ArtLoadCues, PLC_TryAgain-ArtLoadCues
0001E252 0000 0000                  	dc.w PLC_EggmanSBZ2-ArtLoadCues, PLC_FZBoss-ArtLoadCues
0001E256                            
0001E256 0000 0000                  	dc.w PLC_BHZ-ArtLoadCues, PLC_BHZ2-ArtLoadCues		; $20
0001E25A 0000                       	dc.w Plc_TetoBoss-ArtLoadCues
0001E25C                            ; ---------------------------------------------------------------------------
0001E25C                            ; Pattern load cues - standard block 1
0001E25C                            ; ---------------------------------------------------------------------------
0001E25C 0004                       PLC_Main:	dc.w 4
0001E25E 0000 0000                  		dc.l Nem_Lamp		; lamppost
0001E262 F400                       		dc.w $F400
0001E264 0000 0000                  		dc.l Nem_Hud		; HUD
0001E268 D940                       		dc.w $D940
0001E26A 0000 0000                  		dc.l Nem_Lives		; lives	counter
0001E26E FA80                       		dc.w $FA80
0001E270 0000 0000                  		dc.l Nem_Ring		; rings
0001E274 F640                       		dc.w $F640
0001E276 0000 0000                  		dc.l Nem_Points		; points from enemy
0001E27A F2E0                       		dc.w $F2E0
0001E27C                            ; ---------------------------------------------------------------------------
0001E27C                            ; Pattern load cues - standard block 2
0001E27C                            ; ---------------------------------------------------------------------------
0001E27C 0002                       PLC_Main2:	dc.w 2
0001E27E 0000 0000                  		dc.l Nem_Monitors	; monitors
0001E282 D000                       		dc.w $D000
0001E284 0000 0000                  		dc.l Nem_Shield		; shield
0001E288 A820                       		dc.w $A820
0001E28A 0000 0000                  		dc.l Nem_Stars		; invincibility	stars
0001E28E AB80                       		dc.w $AB80
0001E290                            ; ---------------------------------------------------------------------------
0001E290                            ; Pattern load cues - explosion
0001E290                            ; ---------------------------------------------------------------------------
0001E290 0000                       PLC_Explode:	dc.w 0
0001E292 0000 0000                  		dc.l Nem_Explode	; explosion
0001E296 B400                       		dc.w $B400
0001E298                            ; ---------------------------------------------------------------------------
0001E298                            ; Pattern load cues - game/time	over
0001E298                            ; ---------------------------------------------------------------------------
0001E298 0000                       PLC_GameOver:	dc.w 0
0001E29A 0000 0000                  		dc.l Nem_GameOver	; game/time over
0001E29E ABC0                       		dc.w $ABC0
0001E2A0                            ; ---------------------------------------------------------------------------
0001E2A0                            ; Pattern load cues - Green Hill
0001E2A0                            ; ---------------------------------------------------------------------------
0001E2A0 000B                       PLC_GHZ:	dc.w $B
0001E2A2 0000 0000                  		dc.l Nem_GHZ_1st	; GHZ main patterns
0001E2A6 0000                       		dc.w 0
0001E2A8 0000 0000                  		dc.l Nem_GHZ_2nd	; GHZ secondary	patterns
0001E2AC 39A0                       		dc.w $39A0
0001E2AE 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001E2B2 6B00                       		dc.w $6B00
0001E2B4 0000 0000                  		dc.l Nem_PplRock	; purple rock
0001E2B8 7A00                       		dc.w $7A00
0001E2BA 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001E2BE 8000                       		dc.w $8000
0001E2C0 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001E2C4 8880                       		dc.w $8880
0001E2C6 0000 0000                  		dc.l Nem_Chopper	; chopper enemy
0001E2CA 8F60                       		dc.w $8F60
0001E2CC 0000 0000                  		dc.l Nem_Newtron	; newtron enemy
0001E2D0 9360                       		dc.w $9360
0001E2D2 0000 0000                  		dc.l Nem_Motobug	; motobug enemy
0001E2D6 9E00                       		dc.w $9E00
0001E2D8 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E2DC A360                       		dc.w $A360
0001E2DE 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E2E2 A460                       		dc.w $A460
0001E2E4 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E2E8 A660                       		dc.w $A660
0001E2EA 0005                       PLC_GHZ2:	dc.w 5
0001E2EC 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001E2F0 7000                       		dc.w $7000
0001E2F2 0000 0000                  		dc.l Nem_Bridge		; bridge
0001E2F6 71C0                       		dc.w $71C0
0001E2F8 0000 0000                  		dc.l Nem_SpikePole	; spiked pole
0001E2FC 7300                       		dc.w $7300
0001E2FE 0000 0000                  		dc.l Nem_Ball		; giant	ball
0001E302 7540                       		dc.w $7540
0001E304 0000 0000                  		dc.l Nem_GhzWall1	; breakable wall
0001E308 A1E0                       		dc.w $A1E0
0001E30A 0000 0000                  		dc.l Nem_GhzWall2	; normal wall
0001E30E 6980                       		dc.w $6980
0001E310                            ; ---------------------------------------------------------------------------
0001E310                            ; Pattern load cues - Labyrinth
0001E310                            ; ---------------------------------------------------------------------------
0001E310 000B                       PLC_LZ:		dc.w $B
0001E312 0000 0000                  		dc.l Nem_LZ		; LZ main patterns
0001E316 0000                       		dc.w 0
0001E318 0000 0000                  		dc.l Nem_LzBlock1	; block
0001E31C 3C00                       		dc.w $3C00
0001E31E 0000 0000                  		dc.l Nem_LzBlock2	; blocks
0001E322 3E00                       		dc.w $3E00
0001E324 0000 0000                  		dc.l Nem_Splash		; waterfalls and splash
0001E328 4B20                       		dc.w $4B20
0001E32A 0000 0000                  		dc.l Nem_Water		; water	surface
0001E32E 6000                       		dc.w $6000
0001E330 0000 0000                  		dc.l Nem_LzSpikeBall	; spiked ball
0001E334 6200                       		dc.w $6200
0001E336 0000 0000                  		dc.l Nem_FlapDoor	; flapping door
0001E33A 6500                       		dc.w $6500
0001E33C 0000 0000                  		dc.l Nem_Bubbles	; bubbles and numbers
0001E340 6900                       		dc.w $6900
0001E342 0000 0000                  		dc.l Nem_LzBlock3	; block
0001E346 7780                       		dc.w $7780
0001E348 0000 0000                  		dc.l Nem_LzDoor1	; vertical door
0001E34C 7880                       		dc.w $7880
0001E34E 0000 0000                  		dc.l Nem_Harpoon	; harpoon
0001E352 7980                       		dc.w $7980
0001E354 0000 0000                  		dc.l Nem_Burrobot	; burrobot enemy
0001E358 94C0                       		dc.w $94C0
0001E35A 000C                       PLC_LZ2:	dc.w $C
0001E35C 0000 0000                  		dc.l Nem_LzPole		; pole that breaks
0001E360 7BC0                       		dc.w $7BC0
0001E362 0000 0000                  		dc.l Nem_LzDoor2	; large	horizontal door
0001E366 7CC0                       		dc.w $7CC0
0001E368 0000 0000                  		dc.l Nem_LzWheel	; wheel
0001E36C 7EC0                       		dc.w $7EC0
0001E36E 0000 0000                  		dc.l Nem_Gargoyle	; gargoyle head
0001E372 5D20                       		dc.w $5D20
0001E374 0000 0000                  		dc.l Nem_LzSonic	; Sonic	holding	his breath
0001E378 8800                       		dc.w $8800
0001E37A 0000 0000                  		dc.l Nem_LzPlatfm	; rising platform
0001E37E 89E0                       		dc.w $89E0
0001E380 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001E384 8CE0                       		dc.w $8CE0
0001E386 0000 0000                  		dc.l Nem_Jaws		; jaws enemy
0001E38A 90C0                       		dc.w $90C0
0001E38C 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001E390 A1E0                       		dc.w $A1E0
0001E392 0000 0000                  		dc.l Nem_Cork		; cork block
0001E396 A000                       		dc.w $A000
0001E398 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E39C A360                       		dc.w $A360
0001E39E 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E3A2 A460                       		dc.w $A460
0001E3A4 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E3A8 A660                       		dc.w $A660
0001E3AA                            ; ---------------------------------------------------------------------------
0001E3AA                            ; Pattern load cues - Marble
0001E3AA                            ; ---------------------------------------------------------------------------
0001E3AA 0009                       PLC_MZ:		dc.w 9
0001E3AC 0000 0000                  		dc.l Nem_MZ		; MZ main patterns
0001E3B0 0000                       		dc.w 0
0001E3B2 0000 0000                  		dc.l Nem_MzMetal	; metal	blocks
0001E3B6 6000                       		dc.w $6000
0001E3B8 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001E3BC 68A0                       		dc.w $68A0
0001E3BE 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001E3C2 7000                       		dc.w $7000
0001E3C4 0000 0000                  		dc.l Nem_MzGlass	; green	glassy block
0001E3C8 71C0                       		dc.w $71C0
0001E3CA 0000 0000                  		dc.l Nem_Lava		; lava
0001E3CE 7500                       		dc.w $7500
0001E3D0 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001E3D4 8880                       		dc.w $8880
0001E3D6 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001E3DA 8F60                       		dc.w $8F60
0001E3DC 0000 0000                  		dc.l Nem_Basaran	; basaran enemy
0001E3E0 9700                       		dc.w $9700
0001E3E2 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001E3E6 9FE0                       		dc.w $9FE0
0001E3E8 0004                       PLC_MZ2:	dc.w 4
0001E3EA 0000 0000                  		dc.l Nem_MzSwitch	; switch
0001E3EE A260                       		dc.w $A260
0001E3F0 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E3F4 A360                       		dc.w $A360
0001E3F6 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E3FA A460                       		dc.w $A460
0001E3FC 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E400 A660                       		dc.w $A660
0001E402 0000 0000                  		dc.l Nem_MzBlock	; green	stone block
0001E406 5700                       		dc.w $5700
0001E408                            ; ---------------------------------------------------------------------------
0001E408                            ; Pattern load cues - Star Light
0001E408                            ; ---------------------------------------------------------------------------
0001E408 0008                       PLC_SLZ:	dc.w 8
0001E40A 0000 0000                  		dc.l Nem_SLZ		; SLZ main patterns
0001E40E 0000                       		dc.w 0
0001E410 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001E414 8000                       		dc.w $8000
0001E416 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001E41A 8520                       		dc.w $8520
0001E41C 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001E420 9000                       		dc.w $9000
0001E422 0000 0000                  		dc.l Nem_SlzBlock	; block
0001E426 9C00                       		dc.w $9C00
0001E428 0000 0000                  		dc.l Nem_SlzWall	; breakable wall
0001E42C A260                       		dc.w $A260
0001E42E 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E432 A360                       		dc.w $A360
0001E434 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E438 A460                       		dc.w $A460
0001E43A 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E43E A660                       		dc.w $A660
0001E440 0005                       PLC_SLZ2:	dc.w 5
0001E442 0000 0000                  		dc.l Nem_Seesaw		; seesaw
0001E446 6E80                       		dc.w $6E80
0001E448 0000 0000                  		dc.l Nem_Fan		; fan
0001E44C 7400                       		dc.w $7400
0001E44E 0000 0000                  		dc.l Nem_Pylon		; foreground pylon
0001E452 7980                       		dc.w $7980
0001E454 0000 0000                  		dc.l Nem_SlzSwing	; swinging platform
0001E458 7B80                       		dc.w $7B80
0001E45A 0000 0000                  		dc.l Nem_SlzCannon	; fireball launcher
0001E45E 9B00                       		dc.w $9B00
0001E460 0000 0000                  		dc.l Nem_SlzSpike	; spikeball
0001E464 9E00                       		dc.w $9E00
0001E466                            ; ---------------------------------------------------------------------------
0001E466                            ; Pattern load cues - Spring Yard
0001E466                            ; ---------------------------------------------------------------------------
0001E466 0004                       PLC_SYZ:	dc.w 4
0001E468 0000 0000                  		dc.l Nem_SYZ		; SYZ main patterns
0001E46C 0000                       		dc.w 0
0001E46E 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001E472 8000                       		dc.w $8000
0001E474 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001E478 8880                       		dc.w $8880
0001E47A 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001E47E 8F60                       		dc.w $8F60
0001E480 0000 0000                  		dc.l Nem_Roller		; roller enemy
0001E484 9700                       		dc.w $9700
0001E486 0007                       PLC_SYZ2:	dc.w 7
0001E488 0000 0000                  		dc.l Nem_Bumper		; bumper
0001E48C 7000                       		dc.w $7000
0001E48E 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001E492 72C0                       		dc.w $72C0
0001E494 0000 0000                  		dc.l Nem_SyzSpike2	; small	spikeball
0001E498 7740                       		dc.w $7740
0001E49A 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001E49E 9FE0                       		dc.w $9FE0
0001E4A0 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001E4A4 A1E0                       		dc.w $A1E0
0001E4A6 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E4AA A360                       		dc.w $A360
0001E4AC 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E4B0 A460                       		dc.w $A460
0001E4B2 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E4B6 A660                       		dc.w $A660
0001E4B8                            ; ---------------------------------------------------------------------------
0001E4B8                            ; Pattern load cues - Scrap Brain
0001E4B8                            ; ---------------------------------------------------------------------------
0001E4B8 000B                       PLC_SBZ:	dc.w $B
0001E4BA 0000 0000                  		dc.l Nem_SBZ		; SBZ main patterns
0001E4BE 0000                       		dc.w 0
0001E4C0 0000 0000                  		dc.l Nem_Stomper	; moving platform and stomper
0001E4C4 5800                       		dc.w $5800
0001E4C6 0000 0000                  		dc.l Nem_SbzDoor1	; door
0001E4CA 5D00                       		dc.w $5D00
0001E4CC 0000 0000                  		dc.l Nem_Girder		; girder
0001E4D0 5E00                       		dc.w $5E00
0001E4D2 0000 0000                  		dc.l Nem_BallHog	; ball hog enemy
0001E4D6 6040                       		dc.w $6040
0001E4D8 0000 0000                  		dc.l Nem_SbzWheel1	; spot on large	wheel
0001E4DC 6880                       		dc.w $6880
0001E4DE 0000 0000                  		dc.l Nem_SbzWheel2	; wheel	that grabs Sonic
0001E4E2 6900                       		dc.w $6900
0001E4E4 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001E4E8 7220                       		dc.w $7220
0001E4EA 0000 0000                  		dc.l Nem_Cutter		; pizza	cutter
0001E4EE 76A0                       		dc.w $76A0
0001E4F0 0000 0000                  		dc.l Nem_FlamePipe	; flaming pipe
0001E4F4 7B20                       		dc.w $7B20
0001E4F6 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001E4FA 7EA0                       		dc.w $7EA0
0001E4FC 0000 0000                  		dc.l Nem_SbzBlock	; vanishing block
0001E500 9860                       		dc.w $9860
0001E502 000C                       PLC_SBZ2:	dc.w $C
0001E504 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001E508 5600                       		dc.w $5600
0001E50A 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001E50E 8000                       		dc.w $8000
0001E510 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001E514 8520                       		dc.w $8520
0001E516 0000 0000                  		dc.l Nem_SlideFloor	; floor	that slides away
0001E51A 8C00                       		dc.w $8C00
0001E51C 0000 0000                  		dc.l Nem_SbzDoor2	; horizontal door
0001E520 8DE0                       		dc.w $8DE0
0001E522 0000 0000                  		dc.l Nem_Electric	; electric orb
0001E526 8FC0                       		dc.w $8FC0
0001E528 0000 0000                  		dc.l Nem_TrapDoor	; trapdoor
0001E52C 9240                       		dc.w $9240
0001E52E 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001E532 7F20                       		dc.w $7F20
0001E534 0000 0000                  		dc.l Nem_SpinPform	; small	spinning platform
0001E538 9BE0                       		dc.w $9BE0
0001E53A 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001E53E A1E0                       		dc.w $A1E0
0001E540 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E544 A360                       		dc.w $A360
0001E546 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E54A A460                       		dc.w $A460
0001E54C 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E550 A660                       		dc.w $A660
0001E552                            ; ---------------------------------------------------------------------------
0001E552                            ; Pattern load cues - DR. Breen Hill
0001E552                            ; ---------------------------------------------------------------------------
0001E552 000A                       PLC_BHZ:	dc.w $A
0001E554 0000 0000                  		dc.l Nem_BHZ	; GHZ main patterns
0001E558 0000                       		dc.w 0
0001E55A 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001E55E 6B00                       		dc.w $6B00
0001E560 0000 0000                  		dc.l Nem_PplRock	; purple rock
0001E564 7A00                       		dc.w $7A00
0001E566 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001E56A 8000                       		dc.w $8000
0001E56C 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001E570 8880                       		dc.w $8880
0001E572 0000 0000                  		dc.l Nem_Chopper	; chopper enemy
0001E576 8F60                       		dc.w $8F60
0001E578 0000 0000                  		dc.l Nem_Newtron	; newtron enemy
0001E57C 9360                       		dc.w $9360
0001E57E 0000 0000                  		dc.l Nem_Motobug	; motobug enemy
0001E582 9E00                       		dc.w $9E00
0001E584 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E588 A360                       		dc.w $A360
0001E58A 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E58E A460                       		dc.w $A460
0001E590 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E594 A660                       		dc.w $A660
0001E596 0005                       PLC_BHZ2:	dc.w 5
0001E598 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001E59C 7000                       		dc.w $7000
0001E59E 0000 0000                  		dc.l Nem_Bridge		; bridge
0001E5A2 71C0                       		dc.w $71C0
0001E5A4 0000 0000                  		dc.l Nem_SpikePole	; spiked pole
0001E5A8 7300                       		dc.w $7300
0001E5AA 0000 0000                  		dc.l Nem_Ball		; giant	ball
0001E5AE 7540                       		dc.w $7540
0001E5B0 0000 0000                  		dc.l Nem_GhzWall1	; breakable wall
0001E5B4 A1E0                       		dc.w $A1E0
0001E5B6 0000 0000                  		dc.l Nem_GhzWall2	; normal wall
0001E5BA 6980                       		dc.w $6980
0001E5BC                            ; ---------------------------------------------------------------------------
0001E5BC                            ; Pattern load cues - title card
0001E5BC                            ; ---------------------------------------------------------------------------
0001E5BC 0000                       PLC_TitleCard:	dc.w 0
0001E5BE 0000 0000                  		dc.l Nem_TitleCard
0001E5C2 B000                       		dc.w $B000
0001E5C4                            ; ---------------------------------------------------------------------------
0001E5C4                            ; Pattern load cues - act 3 boss
0001E5C4                            ; ---------------------------------------------------------------------------
0001E5C4 0005                       PLC_Boss:	dc.w 5
0001E5C6 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001E5CA 8000                       		dc.w $8000
0001E5CC 0000 0000                  		dc.l Nem_Weapons	; Eggman's weapons
0001E5D0 8D80                       		dc.w $8D80
0001E5D2 0000 0000                  		dc.l Nem_Prison		; prison capsule
0001E5D6 93A0                       		dc.w $93A0
0001E5D8 0000 0000                  		dc.l Nem_Bomb		; bomb enemy (gets overwritten)
0001E5DC A300                       		dc.w $A300
0001E5DE 0000 0000                  		dc.l Nem_SlzSpike	; spikeball (SLZ boss)
0001E5E2 A300                       		dc.w $A300
0001E5E4 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001E5E8 A540                       		dc.w $A540
0001E5EA                            ; ---------------------------------------------------------------------------
0001E5EA                            ; Pattern load cues - act 1/2 signpost
0001E5EA                            ; ---------------------------------------------------------------------------
0001E5EA 0002                       PLC_Signpost:	dc.w 2
0001E5EC 0000 0000                  		dc.l Nem_SignPost	; signpost
0001E5F0 D000                       		dc.w $D000
0001E5F2 0000 0000                  		dc.l Nem_Bonus		; hidden bonus points
0001E5F6 96C0                       		dc.w $96C0
0001E5F8 0000 0000                  		dc.l Nem_BigFlash	; giant	ring flash effect
0001E5FC 8C40                       		dc.w $8C40
0001E5FE                            ; ---------------------------------------------------------------------------
0001E5FE                            ; Pattern load cues - beta special stage warp effect
0001E5FE                            ; ---------------------------------------------------------------------------
0001E5FE 0000                       PLC_Warp:	dc.w 0
0001E600 0000 0000                  		dc.l Nem_Warp
0001E604 A820                       		dc.w $A820
0001E606                            ; ---------------------------------------------------------------------------
0001E606                            ; Pattern load cues - special stage
0001E606                            ; ---------------------------------------------------------------------------
0001E606 0010                       PLC_SpeStage:	dc.w $10
0001E608 0000 0000                  		dc.l Nem_SSBgCloud	; bubble and cloud background
0001E60C 0000                       		dc.w 0
0001E60E 0000 0000                  		dc.l Nem_SSBgFish	; bird and fish	background
0001E612 0A20                       		dc.w $A20
0001E614 0000 0000                  		dc.l Nem_SSWalls	; walls
0001E618 2840                       		dc.w $2840
0001E61A 0000 0000                  		dc.l Nem_Bumper		; bumper
0001E61E 4760                       		dc.w $4760
0001E620 0000 0000                  		dc.l Nem_SSGOAL		; GOAL block
0001E624 4A20                       		dc.w $4A20
0001E626 0000 0000                  		dc.l Nem_SSUpDown	; UP and DOWN blocks
0001E62A 4C60                       		dc.w $4C60
0001E62C 0000 0000                  		dc.l Nem_SSRBlock	; R block
0001E630 5E00                       		dc.w $5E00
0001E632 0000 0000                  		dc.l Nem_SS1UpBlock	; 1UP block
0001E636 6E00                       		dc.w $6E00
0001E638 0000 0000                  		dc.l Nem_SSEmStars	; emerald collection stars
0001E63C 7E00                       		dc.w $7E00
0001E63E 0000 0000                  		dc.l Nem_SSRedWhite	; red and white	block
0001E642 8E00                       		dc.w $8E00
0001E644 0000 0000                  		dc.l Nem_SSGhost	; ghost	block
0001E648 9E00                       		dc.w $9E00
0001E64A 0000 0000                  		dc.l Nem_SSWBlock	; W block
0001E64E AE00                       		dc.w $AE00
0001E650 0000 0000                  		dc.l Nem_SSGlass	; glass	block
0001E654 BE00                       		dc.w $BE00
0001E656 0000 0000                  		dc.l Nem_SSEmerald	; emeralds
0001E65A EE00                       		dc.w $EE00
0001E65C 0000 0000                  		dc.l Nem_SSZone1	; ZONE 1 block
0001E660 F2E0                       		dc.w $F2E0
0001E662 0000 0000                  		dc.l Nem_SSZone2	; ZONE 2 block
0001E666 F400                       		dc.w $F400
0001E668 0000 0000                  		dc.l Nem_SSZone3	; ZONE 3 block
0001E66C F520                       		dc.w $F520
0001E66E 0000 0000                  		dc.l Nem_SSZone4	; ZONE 4 block
0001E672 F2E0                       		dc.w $F2E0
0001E674 0000 0000                  		dc.l Nem_SSZone5	; ZONE 5 block
0001E678 F400                       		dc.w $F400
0001E67A 0000 0000                  		dc.l Nem_SSZone6	; ZONE 6 block
0001E67E F520                       		dc.w $F520
0001E680                            ; ---------------------------------------------------------------------------
0001E680                            ; Pattern load cues - GHZ animals
0001E680                            ; ---------------------------------------------------------------------------
0001E680 0001                       PLC_GHZAnimals:	dc.w 1
0001E682 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001E686 B000                       		dc.w $B000
0001E688 0000 0000                  		dc.l Nem_Flicky		; flicky
0001E68C B240                       		dc.w $B240
0001E68E                            ; ---------------------------------------------------------------------------
0001E68E                            ; Pattern load cues - LZ animals
0001E68E                            ; ---------------------------------------------------------------------------
0001E68E 0001                       PLC_LZAnimals:	dc.w 1
0001E690 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001E694 B000                       		dc.w $B000
0001E696 0000 0000                  		dc.l Nem_Seal		; seal
0001E69A B240                       		dc.w $B240
0001E69C                            ; ---------------------------------------------------------------------------
0001E69C                            ; Pattern load cues - MZ animals
0001E69C                            ; ---------------------------------------------------------------------------
0001E69C 0001                       PLC_MZAnimals:	dc.w 1
0001E69E 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001E6A2 B000                       		dc.w $B000
0001E6A4 0000 0000                  		dc.l Nem_Seal		; seal
0001E6A8 B240                       		dc.w $B240
0001E6AA                            ; ---------------------------------------------------------------------------
0001E6AA                            ; Pattern load cues - SLZ animals
0001E6AA                            ; ---------------------------------------------------------------------------
0001E6AA 0001                       PLC_SLZAnimals:	dc.w 1
0001E6AC 0000 0000                  		dc.l Nem_Pig		; pig
0001E6B0 B000                       		dc.w $B000
0001E6B2 0000 0000                  		dc.l Nem_Flicky		; flicky
0001E6B6 B240                       		dc.w $B240
0001E6B8                            ; ---------------------------------------------------------------------------
0001E6B8                            ; Pattern load cues - SYZ animals
0001E6B8                            ; ---------------------------------------------------------------------------
0001E6B8 0001                       PLC_SYZAnimals:	dc.w 1
0001E6BA 0000 0000                  		dc.l Nem_Pig		; pig
0001E6BE B000                       		dc.w $B000
0001E6C0 0000 0000                  		dc.l Nem_Chicken	; chicken
0001E6C4 B240                       		dc.w $B240
0001E6C6                            ; ---------------------------------------------------------------------------
0001E6C6                            ; Pattern load cues - SBZ animals
0001E6C6                            ; ---------------------------------------------------------------------------
0001E6C6 0001                       PLC_SBZAnimals:	dc.w 1
0001E6C8 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001E6CC B000                       		dc.w $B000
0001E6CE 0000 0000                  		dc.l Nem_Chicken	; chicken
0001E6D2 B240                       		dc.w $B240
0001E6D4                            ; ---------------------------------------------------------------------------
0001E6D4                            ; Pattern load cues - special stage results screen
0001E6D4                            ; ---------------------------------------------------------------------------
0001E6D4 0001                       PLC_SpeStResult:dc.w 1
0001E6D6 0000 0000                  		dc.l Nem_ResultEm	; emeralds
0001E6DA A820                       		dc.w $A820
0001E6DC 0000 0000                  		dc.l Nem_MiniSonic	; mini Sonic
0001E6E0 AA20                       		dc.w $AA20
0001E6E2                            ; ---------------------------------------------------------------------------
0001E6E2                            ; Pattern load cues - ending sequence
0001E6E2                            ; ---------------------------------------------------------------------------
0001E6E2 000E                       PLC_Ending:	dc.w $E
0001E6E4 0000 0000                  		dc.l Nem_GHZ_1st	; GHZ main patterns
0001E6E8 0000                       		dc.w 0
0001E6EA 0000 0000                  		dc.l Nem_GHZ_2nd	; GHZ secondary	patterns
0001E6EE 39A0                       		dc.w $39A0
0001E6F0 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001E6F4 6B00                       		dc.w $6B00
0001E6F6 0000 0000                  		dc.l Nem_EndFlower	; flowers
0001E6FA 7400                       		dc.w $7400
0001E6FC 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001E700 78A0                       		dc.w $78A0
0001E702 0000 0000                  		dc.l Nem_EndSonic	; Sonic
0001E706 7C20                       		dc.w $7C20
0001E708 0000 0000                  		dc.l Nem_EndEggman	; Eggman's death (unused)
0001E70C A480                       		dc.w $A480
0001E70E 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001E712 AA60                       		dc.w $AA60
0001E714 0000 0000                  		dc.l Nem_Chicken	; chicken
0001E718 ACA0                       		dc.w $ACA0
0001E71A 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001E71E AE60                       		dc.w $AE60
0001E720 0000 0000                  		dc.l Nem_Seal		; seal
0001E724 B0A0                       		dc.w $B0A0
0001E726 0000 0000                  		dc.l Nem_Pig		; pig
0001E72A B260                       		dc.w $B260
0001E72C 0000 0000                  		dc.l Nem_Flicky		; flicky
0001E730 B4A0                       		dc.w $B4A0
0001E732 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001E736 B660                       		dc.w $B660
0001E738 0000 0000                  		dc.l Nem_EndStH		; "SONIC THE HEDGEHOG"
0001E73C B8A0                       		dc.w $B8A0
0001E73E                            ; ---------------------------------------------------------------------------
0001E73E                            ; Pattern load cues - "TRY AGAIN" and "END" screens
0001E73E                            ; ---------------------------------------------------------------------------
0001E73E 0002                       PLC_TryAgain:	dc.w 2
0001E740 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001E744 78A0                       		dc.w $78A0
0001E746 0000 0000                  		dc.l Nem_TryAgain	; Eggman
0001E74A 7C20                       		dc.w $7C20
0001E74C 0000 0000                  		dc.l Nem_CreditText	; credits alphabet
0001E750 B400                       		dc.w $B400
0001E752                            ; ---------------------------------------------------------------------------
0001E752                            ; Pattern load cues - Eggman on SBZ 2
0001E752                            ; ---------------------------------------------------------------------------
0001E752 0002                       PLC_EggmanSBZ2:	dc.w 2
0001E754 0000 0000                  		dc.l Nem_SbzBlock	; block
0001E758 A300                       		dc.w $A300
0001E75A 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman
0001E75E 8000                       		dc.w $8000
0001E760 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001E764 9400                       		dc.w $9400
0001E766                            ; ---------------------------------------------------------------------------
0001E766                            ; Pattern load cues - final boss
0001E766                            ; ---------------------------------------------------------------------------
0001E766 0004                       PLC_FZBoss:	dc.w 4
0001E768 0000 0000                  		dc.l Nem_FzEggman	; Eggman after boss
0001E76C 7400                       		dc.w $7400
0001E76E 0000 0000                  		dc.l Nem_FzBoss		; FZ boss
0001E772 6000                       		dc.w $6000
0001E774 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001E778 8000                       		dc.w $8000
0001E77A 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman without ship
0001E77E 8E00                       		dc.w $8E00
0001E780 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001E784 A540                       		dc.w $A540
0001E786                            ; ---------------------------------------------------------------------------
0001E786                            ; Pattern load cues - Teto boss
0001E786                            ; ---------------------------------------------------------------------------
0001E786 0002                       PLC_TetoBoss:	dc.w 2
0001E788 0000 0000                  		dc.l Nem_Tetoboss		; Eggman main patterns
0001E78C 8000                       		dc.w $8000
0001E78E 0000 0000                  		dc.l Nem_Prison		; prison capsule
0001E792 93A0                       		dc.w $93A0
0001E794 0000 0000                  		dc.l Nem_Peartobomb		; bomb enemy (gets overwritten)
0001E798 9000                       		dc.w $9000
0001E79A                            		even
0001E79A                            		even
0001E79A                            
0001E79A                            		incbin	misc\padding.bin
0001E888                            		even
0001E888                            Nem_SegaLogo:	incbin	artnem\segalogo.bin	; large Sega logo
0001ECDE                            		even
0001ECDE                            Eni_SegaLogo:	incbin	mapeni\segalogo.bin	; large Sega logo (mappings)
0001ED76                            		even
0001ED76                            Nem_Gomer:	incbin	artnem\gomer.bin
0001EEB8                            		even
0001EEB8                            Eni_Gomer:	incbin	mapeni\gomer.bin
0001EF06                            		even
0001EF06                            Eni_Title:	incbin	mapeni\titlescr.bin	; title screen foreground (mappings)
0001F01A                            		even
0001F01A                            Nem_TitleFg:	incbin	artnem\titlefor.bin	; title screen foreground
0001FEE4                            		even
0001FEE4                            Nem_TitleSonic:	incbin	artnem\titleson.bin	; Sonic on title screen
00023FEA                            		even
00023FEA                            Nem_TitleTM:	incbin	artnem\titletm.bin	; TM on title screen
0002401E                            		even
0002401E                            Eni_JapNames:	incbin	mapeni\japcreds.bin	; Japanese credits (mappings)
000240DC                            		even
000240DC                            Nem_JapNames:	incbin	artnem\japcreds.bin	; Japanese credits
00024584                            		even
00024584                            Eni_Idiot:	incbin	mapeni\idiot.bin	; Idiot (mappings)
000245E2                            		even
000245E2                            Nem_Idiot:	incbin	artnem\idiot.bin	; Idiot
000251E8                            		even
000251E8                            ; ---------------------------------------------------------------------------
000251E8                            ; Sprite mappings - Sonic
000251E8                            ; ---------------------------------------------------------------------------
000251E8                            Map_Sonic:
000251E8                            	include "_maps\Sonic.asm"
000251E8                            Map_a933:
000251E8 0000                       Map_a933_0: 	dc.w Map_a933_E0-Map_a933
000251EA 0000                       Map_a933_2: 	dc.w Map_a933_E1-Map_a933
000251EC 0000                       Map_a933_4: 	dc.w Map_a933_EC-Map_a933
000251EE 0000                       Map_a933_6: 	dc.w Map_a933_FC-Map_a933
000251F0 0000                       Map_a933_8: 	dc.w Map_a933_10C-Map_a933
000251F2 0000                       Map_a933_A: 	dc.w Map_a933_11C-Map_a933
000251F4 0000                       Map_a933_C: 	dc.w Map_a933_12C-Map_a933
000251F6 0000                       Map_a933_E: 	dc.w Map_a933_141-Map_a933
000251F8 0000                       Map_a933_10: 	dc.w Map_a933_14C-Map_a933
000251FA 0000                       Map_a933_12: 	dc.w Map_a933_157-Map_a933
000251FC 0000                       Map_a933_14: 	dc.w Map_a933_16C-Map_a933
000251FE 0000                       Map_a933_16: 	dc.w Map_a933_177-Map_a933
00025200 0000                       Map_a933_18: 	dc.w Map_a933_187-Map_a933
00025202 0000                       Map_a933_1A: 	dc.w Map_a933_1A1-Map_a933
00025204 0000                       Map_a933_1C: 	dc.w Map_a933_1C0-Map_a933
00025206 0000                       Map_a933_1E: 	dc.w Map_a933_1D5-Map_a933
00025208 0000                       Map_a933_20: 	dc.w Map_a933_1EF-Map_a933
0002520A 0000                       Map_a933_22: 	dc.w Map_a933_204-Map_a933
0002520C 0000                       Map_a933_24: 	dc.w Map_a933_21E-Map_a933
0002520E 0000                       Map_a933_26: 	dc.w Map_a933_233-Map_a933
00025210 0000                       Map_a933_28: 	dc.w Map_a933_23E-Map_a933
00025212 0000                       Map_a933_2A: 	dc.w Map_a933_249-Map_a933
00025214 0000                       Map_a933_2C: 	dc.w Map_a933_25E-Map_a933
00025216 0000                       Map_a933_2E: 	dc.w Map_a933_269-Map_a933
00025218 0000                       Map_a933_30: 	dc.w Map_a933_279-Map_a933
0002521A 0000                       Map_a933_32: 	dc.w Map_a933_298-Map_a933
0002521C 0000                       Map_a933_34: 	dc.w Map_a933_2B7-Map_a933
0002521E 0000                       Map_a933_36: 	dc.w Map_a933_2CC-Map_a933
00025220 0000                       Map_a933_38: 	dc.w Map_a933_2E6-Map_a933
00025222 0000                       Map_a933_3A: 	dc.w Map_a933_2FB-Map_a933
00025224 0000                       Map_a933_3C: 	dc.w Map_a933_315-Map_a933
00025226 0000                       Map_a933_3E: 	dc.w Map_a933_320-Map_a933
00025228 0000                       Map_a933_40: 	dc.w Map_a933_32B-Map_a933
0002522A 0000                       Map_a933_42: 	dc.w Map_a933_336-Map_a933
0002522C 0000                       Map_a933_44: 	dc.w Map_a933_341-Map_a933
0002522E 0000                       Map_a933_46: 	dc.w Map_a933_356-Map_a933
00025230 0000                       Map_a933_48: 	dc.w Map_a933_366-Map_a933
00025232 0000                       Map_a933_4A: 	dc.w Map_a933_37B-Map_a933
00025234 0000                       Map_a933_4C: 	dc.w Map_a933_38B-Map_a933
00025236 0000                       Map_a933_4E: 	dc.w Map_a933_396-Map_a933
00025238 0000                       Map_a933_50: 	dc.w Map_a933_3A1-Map_a933
0002523A 0000                       Map_a933_52: 	dc.w Map_a933_3AC-Map_a933
0002523C 0000                       Map_a933_54: 	dc.w Map_a933_3B7-Map_a933
0002523E 0000                       Map_a933_56: 	dc.w Map_a933_3CC-Map_a933
00025240 0000                       Map_a933_58: 	dc.w Map_a933_3D7-Map_a933
00025242 0000                       Map_a933_5A: 	dc.w Map_a933_3EC-Map_a933
00025244 0000                       Map_a933_5C: 	dc.w Map_a933_3F7-Map_a933
00025246 0000                       Map_a933_5E: 	dc.w Map_a933_3FD-Map_a933
00025248 0000                       Map_a933_60: 	dc.w Map_a933_403-Map_a933
0002524A 0000                       Map_a933_62: 	dc.w Map_a933_409-Map_a933
0002524C 0000                       Map_a933_64: 	dc.w Map_a933_40F-Map_a933
0002524E 0000                       Map_a933_66: 	dc.w Map_a933_415-Map_a933
00025250 0000                       Map_a933_68: 	dc.w Map_a933_420-Map_a933
00025252 0000                       Map_a933_6A: 	dc.w Map_a933_426-Map_a933
00025254 0000                       Map_a933_6C: 	dc.w Map_a933_431-Map_a933
00025256 0000                       Map_a933_6E: 	dc.w Map_a933_437-Map_a933
00025258 0000                       Map_a933_70: 	dc.w Map_a933_442-Map_a933
0002525A 0000                       Map_a933_72: 	dc.w Map_a933_457-Map_a933
0002525C 0000                       Map_a933_74: 	dc.w Map_a933_476-Map_a933
0002525E 0000                       Map_a933_76: 	dc.w Map_a933_481-Map_a933
00025260 0000                       Map_a933_78: 	dc.w Map_a933_48C-Map_a933
00025262 0000                       Map_a933_7A: 	dc.w Map_a933_4A1-Map_a933
00025264 0000                       Map_a933_7C: 	dc.w Map_a933_4AC-Map_a933
00025266 0000                       Map_a933_7E: 	dc.w Map_a933_4BC-Map_a933
00025268 0000                       Map_a933_80: 	dc.w Map_a933_4D1-Map_a933
0002526A 0000                       Map_a933_82: 	dc.w Map_a933_4DC-Map_a933
0002526C 0000                       Map_a933_84: 	dc.w Map_a933_4F1-Map_a933
0002526E 0000                       Map_a933_86: 	dc.w Map_a933_506-Map_a933
00025270 0000                       Map_a933_88: 	dc.w Map_a933_520-Map_a933
00025272 0000                       Map_a933_8A: 	dc.w Map_a933_53A-Map_a933
00025274 0000                       Map_a933_8C: 	dc.w Map_a933_545-Map_a933
00025276 0000                       Map_a933_8E: 	dc.w Map_a933_555-Map_a933
00025278 0000                       Map_a933_90: 	dc.w Map_a933_560-Map_a933
0002527A 0000                       Map_a933_92: 	dc.w Map_a933_570-Map_a933
0002527C 0000                       Map_a933_94: 	dc.w Map_a933_57B-Map_a933
0002527E 0000                       Map_a933_96: 	dc.w Map_a933_58B-Map_a933
00025280 0000                       Map_a933_98: 	dc.w Map_a933_59B-Map_a933
00025282 0000                       Map_a933_9A: 	dc.w Map_a933_5B5-Map_a933
00025284 0000                       Map_a933_9C: 	dc.w Map_a933_5CF-Map_a933
00025286 0000                       Map_a933_9E: 	dc.w Map_a933_5DA-Map_a933
00025288 0000                       Map_a933_A0: 	dc.w Map_a933_5EA-Map_a933
0002528A 0000                       Map_a933_A2: 	dc.w Map_a933_5F0-Map_a933
0002528C 0000                       Map_a933_A4: 	dc.w Map_a933_5F6-Map_a933
0002528E 0000                       Map_a933_A6: 	dc.w Map_a933_5FC-Map_a933
00025290 0000                       Map_a933_A8: 	dc.w Map_a933_611-Map_a933
00025292 0000                       Map_a933_AA: 	dc.w Map_a933_621-Map_a933
00025294 0000                       Map_a933_AC: 	dc.w Map_a933_631-Map_a933
00025296 0000                       Map_a933_AE: 	dc.w Map_a933_641-Map_a933
00025298 0000                       Map_a933_B0: 	dc.w Map_a933_64C-Map_a933
0002529A 0000                       Map_a933_B2: 	dc.w Map_a933_657-Map_a933
0002529C 0000                       Map_a933_B4: 	dc.w Map_a933_667-Map_a933
0002529E 0000                       Map_a933_B6: 	dc.w Map_a933_672-Map_a933
000252A0 0000                       Map_a933_B8: 	dc.w Map_a933_687-Map_a933
000252A2 0000                       Map_a933_BA: 	dc.w Map_a933_688-Map_a933
000252A4 0000                       Map_a933_BC: 	dc.w Map_a933_689-Map_a933
000252A6 0000                       Map_a933_BE: 	dc.w Map_a933_68A-Map_a933
000252A8 0000                       Map_a933_C0: 	dc.w Map_a933_68B-Map_a933
000252AA 0000                       Map_a933_C2: 	dc.w Map_a933_696-Map_a933
000252AC 0000                       Map_a933_C4: 	dc.w Map_a933_697-Map_a933
000252AE 0000                       Map_a933_C6: 	dc.w Map_a933_6A2-Map_a933
000252B0 0000                       Map_a933_C8: 	dc.w Map_a933_6A3-Map_a933
000252B2 0000                       Map_a933_CA: 	dc.w Map_a933_6A4-Map_a933
000252B4 0000                       Map_a933_CC: 	dc.w Map_a933_6A5-Map_a933
000252B6 0000                       Map_a933_CE: 	dc.w Map_a933_6B0-Map_a933
000252B8 0000                       Map_a933_D0: 	dc.w Map_a933_6B1-Map_a933
000252BA 0000                       Map_a933_D2: 	dc.w Map_a933_6BC-Map_a933
000252BC 0000                       Map_a933_D4: 	dc.w Map_a933_6BD-Map_a933
000252BE 0000                       Map_a933_D6: 	dc.w Map_a933_6BE-Map_a933
000252C0 0000                       Map_a933_D8: 	dc.w Map_a933_6BF-Map_a933
000252C2 0000                       Map_a933_DA: 	dc.w Map_a933_6CA-Map_a933
000252C4 0000                       Map_a933_DC: 	dc.w Map_a933_6CB-Map_a933
000252C6 0000                       Map_a933_DE: 	dc.w Map_a933_6D6-Map_a933
000252C8 00                         Map_a933_E0: 	dc.b $0
000252C9 02                         Map_a933_E1: 	dc.b $2
000252CA ED0E 0000 ED               	dc.b $ED, $E, $0, $0, $ED
000252CF 0509 000C F5               	dc.b $5, $9, $0, $C, $F5
000252D4 03                         Map_a933_EC: 	dc.b $3
000252D5 EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
000252DA FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
000252DF 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
000252E4 03                         Map_a933_FC: 	dc.b $3
000252E5 EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
000252EA FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
000252EF 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
000252F4 03                         Map_a933_10C: 	dc.b $3
000252F5 EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
000252FA FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
000252FF 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00025304 03                         Map_a933_11C: 	dc.b $3
00025305 EC0A 0000 F0               	dc.b $EC, $A, $0, $0, $F0
0002530A 0408 0009 F0               	dc.b $4, $8, $0, $9, $F0
0002530F 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00025314 04                         Map_a933_12C: 	dc.b $4
00025315 EB0D 0000 EC               	dc.b $EB, $D, $0, $0, $EC
0002531A FB09 0008 EC               	dc.b $FB, $9, $0, $8, $EC
0002531F FB06 000E 04               	dc.b $FB, $6, $0, $E, $4
00025324 0B04 0014 EC               	dc.b $B, $4, $0, $14, $EC
00025329 02                         Map_a933_141: 	dc.b $2
0002532A EC0D 0000 ED               	dc.b $EC, $D, $0, $0, $ED
0002532F FC0E 0008 F5               	dc.b $FC, $E, $0, $8, $F5
00025334 02                         Map_a933_14C: 	dc.b $2
00025335 ED09 0000 F3               	dc.b $ED, $9, $0, $0, $F3
0002533A FD0A 0006 F3               	dc.b $FD, $A, $0, $6, $F3
0002533F 04                         Map_a933_157: 	dc.b $4
00025340 EB09 0000 F4               	dc.b $EB, $9, $0, $0, $F4
00025345 FB09 0006 EC               	dc.b $FB, $9, $0, $6, $EC
0002534A FB06 000C 04               	dc.b $FB, $6, $0, $C, $4
0002534F 0B04 0012 EC               	dc.b $B, $4, $0, $12, $EC
00025354 02                         Map_a933_16C: 	dc.b $2
00025355 FC0E 0000 EB               	dc.b $FC, $E, $0, $0, $EB
0002535A EC09 000C F3               	dc.b $EC, $9, $0, $C, $F3
0002535F 03                         Map_a933_177: 	dc.b $3
00025360 ED0D 0000 EC               	dc.b $ED, $D, $0, $0, $EC
00025365 FD0C 0008 F4               	dc.b $FD, $C, $0, $8, $F4
0002536A 0509 000C F4               	dc.b $5, $9, $0, $C, $F4
0002536F 05                         Map_a933_187: 	dc.b $5
00025370 EB09 0000 EB               	dc.b $EB, $9, $0, $0, $EB
00025375 EB06 0006 03               	dc.b $EB, $6, $0, $6, $3
0002537A FB08 000C EB               	dc.b $FB, $8, $0, $C, $EB
0002537F 0309 000F F3               	dc.b $3, $9, $0, $F, $F3
00025384 1300 0015 FB               	dc.b $13, $0, $0, $15, $FB
00025389 06                         Map_a933_1A1: 	dc.b $6
0002538A EC09 0000 EC               	dc.b $EC, $9, $0, $0, $EC
0002538F EC01 0006 04               	dc.b $EC, $1, $0, $6, $4
00025394 FC0C 0008 EC               	dc.b $FC, $C, $0, $8, $EC
00025399 0409 000C F4               	dc.b $4, $9, $0, $C, $F4
0002539E FC05 0012 0C               	dc.b $FC, $5, $0, $12, $C
000253A3 F400 0016 14               	dc.b $F4, $0, $0, $16, $14
000253A8 04                         Map_a933_1C0: 	dc.b $4
000253A9 ED09 0000 ED               	dc.b $ED, $9, $0, $0, $ED
000253AE ED01 0006 05               	dc.b $ED, $1, $0, $6, $5
000253B3 FD0D 0008 F5               	dc.b $FD, $D, $0, $8, $F5
000253B8 0D08 0010 FD               	dc.b $D, $8, $0, $10, $FD
000253BD 05                         Map_a933_1D5: 	dc.b $5
000253BE EB09 0000 EB               	dc.b $EB, $9, $0, $0, $EB
000253C3 EB05 0006 03               	dc.b $EB, $5, $0, $6, $3
000253C8 FB0D 000A F3               	dc.b $FB, $D, $0, $A, $F3
000253CD 0B08 0012 F3               	dc.b $B, $8, $0, $12, $F3
000253D2 1304 0015 FB               	dc.b $13, $4, $0, $15, $FB
000253D7 04                         Map_a933_1EF: 	dc.b $4
000253D8 EC09 0000 EC               	dc.b $EC, $9, $0, $0, $EC
000253DD EC01 0006 04               	dc.b $EC, $1, $0, $6, $4
000253E2 FC0D 0008 F4               	dc.b $FC, $D, $0, $8, $F4
000253E7 0C08 0010 FC               	dc.b $C, $8, $0, $10, $FC
000253EC 05                         Map_a933_204: 	dc.b $5
000253ED ED09 0000 ED               	dc.b $ED, $9, $0, $0, $ED
000253F2 ED01 0006 05               	dc.b $ED, $1, $0, $6, $5
000253F7 FD00 0008 ED               	dc.b $FD, $0, $0, $8, $ED
000253FC FD0D 0009 F5               	dc.b $FD, $D, $0, $9, $F5
00025401 0D08 0011 FD               	dc.b $D, $8, $0, $11, $FD
00025406 04                         Map_a933_21E: 	dc.b $4
00025407 F407 0000 EB               	dc.b $F4, $7, $0, $0, $EB
0002540C EC09 0008 FB               	dc.b $EC, $9, $0, $8, $FB
00025411 FC04 000E FB               	dc.b $FC, $4, $0, $E, $FB
00025416 0409 0010 FB               	dc.b $4, $9, $0, $10, $FB
0002541B 02                         Map_a933_233: 	dc.b $2
0002541C F407 0000 EC               	dc.b $F4, $7, $0, $0, $EC
00025421 EC0B 0008 FC               	dc.b $EC, $B, $0, $8, $FC
00025426 02                         Map_a933_23E: 	dc.b $2
00025427 F406 0000 ED               	dc.b $F4, $6, $0, $0, $ED
0002542C F40A 0006 FD               	dc.b $F4, $A, $0, $6, $FD
00025431 04                         Map_a933_249: 	dc.b $4
00025432 F406 0000 EB               	dc.b $F4, $6, $0, $0, $EB
00025437 EC09 0006 FB               	dc.b $EC, $9, $0, $6, $FB
0002543C FC04 000C FB               	dc.b $FC, $4, $0, $C, $FB
00025441 0409 000E FB               	dc.b $4, $9, $0, $E, $FB
00025446 02                         Map_a933_25E: 	dc.b $2
00025447 F406 0000 EC               	dc.b $F4, $6, $0, $0, $EC
0002544C F40B 0006 FC               	dc.b $F4, $B, $0, $6, $FC
00025451 03                         Map_a933_269: 	dc.b $3
00025452 F407 0000 ED               	dc.b $F4, $7, $0, $0, $ED
00025457 EC00 0008 FD               	dc.b $EC, $0, $0, $8, $FD
0002545C F40A 0009 FD               	dc.b $F4, $A, $0, $9, $FD
00025461 06                         Map_a933_279: 	dc.b $6
00025462 FD06 0000 EB               	dc.b $FD, $6, $0, $0, $EB
00025467 ED04 0006 F3               	dc.b $ED, $4, $0, $6, $F3
0002546C F504 0008 EB               	dc.b $F5, $4, $0, $8, $EB
00025471 F50A 000A FB               	dc.b $F5, $A, $0, $A, $FB
00025476 0D00 0013 FB               	dc.b $D, $0, $0, $13, $FB
0002547B FD00 0014 13               	dc.b $FD, $0, $0, $14, $13
00025480 06                         Map_a933_298: 	dc.b $6
00025481 FC06 0000 EC               	dc.b $FC, $6, $0, $0, $EC
00025486 E408 0006 F4               	dc.b $E4, $8, $0, $6, $F4
0002548B EC04 0009 FC               	dc.b $EC, $4, $0, $9, $FC
00025490 F404 000B EC               	dc.b $F4, $4, $0, $B, $EC
00025495 F40A 000D FC               	dc.b $F4, $A, $0, $D, $FC
0002549A 0C00 0016 FC               	dc.b $C, $0, $0, $16, $FC
0002549F 04                         Map_a933_2B7: 	dc.b $4
000254A0 FB06 0000 ED               	dc.b $FB, $6, $0, $0, $ED
000254A5 F304 0006 ED               	dc.b $F3, $4, $0, $6, $ED
000254AA EB0A 0008 FD               	dc.b $EB, $A, $0, $8, $FD
000254AF 0304 0011 FD               	dc.b $3, $4, $0, $11, $FD
000254B4 05                         Map_a933_2CC: 	dc.b $5
000254B5 FD06 0000 EB               	dc.b $FD, $6, $0, $0, $EB
000254BA ED08 0006 F3               	dc.b $ED, $8, $0, $6, $F3
000254BF F504 0009 EB               	dc.b $F5, $4, $0, $9, $EB
000254C4 F50D 000B FB               	dc.b $F5, $D, $0, $B, $FB
000254C9 0508 0013 FB               	dc.b $5, $8, $0, $13, $FB
000254CE 04                         Map_a933_2E6: 	dc.b $4
000254CF FC06 0000 EC               	dc.b $FC, $6, $0, $0, $EC
000254D4 F404 0006 EC               	dc.b $F4, $4, $0, $6, $EC
000254D9 EC0A 0008 FC               	dc.b $EC, $A, $0, $8, $FC
000254DE 0404 0011 FC               	dc.b $4, $4, $0, $11, $FC
000254E3 05                         Map_a933_2FB: 	dc.b $5
000254E4 FB06 0000 ED               	dc.b $FB, $6, $0, $0, $ED
000254E9 EB0A 0006 FD               	dc.b $EB, $A, $0, $6, $FD
000254EE F304 000F ED               	dc.b $F3, $4, $0, $F, $ED
000254F3 0304 0011 FD               	dc.b $3, $4, $0, $11, $FD
000254F8 0B00 0013 FD               	dc.b $B, $0, $0, $13, $FD
000254FD 02                         Map_a933_315: 	dc.b $2
000254FE EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
00025503 FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
00025508 02                         Map_a933_320: 	dc.b $2
00025509 EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
0002550E FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
00025513 02                         Map_a933_32B: 	dc.b $2
00025514 EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
00025519 FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
0002551E 02                         Map_a933_336: 	dc.b $2
0002551F EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
00025524 FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
00025529 04                         Map_a933_341: 	dc.b $4
0002552A EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
0002552F EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
00025534 FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
00025539 FE00 0014 EE               	dc.b $FE, $0, $0, $14, $EE
0002553E 03                         Map_a933_356: 	dc.b $3
0002553F EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
00025544 EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
00025549 FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
0002554E 04                         Map_a933_366: 	dc.b $4
0002554F EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
00025554 EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
00025559 FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
0002555E FE00 0014 EE               	dc.b $FE, $0, $0, $14, $EE
00025563 03                         Map_a933_37B: 	dc.b $3
00025564 EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
00025569 EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
0002556E FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
00025573 02                         Map_a933_38B: 	dc.b $2
00025574 F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
00025579 F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
0002557E 02                         Map_a933_396: 	dc.b $2
0002557F F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
00025584 F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
00025589 02                         Map_a933_3A1: 	dc.b $2
0002558A F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
0002558F F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
00025594 02                         Map_a933_3AC: 	dc.b $2
00025595 F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
0002559A F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
0002559F 04                         Map_a933_3B7: 	dc.b $4
000255A0 FA06 0000 EE               	dc.b $FA, $6, $0, $0, $EE
000255A5 F204 0006 EE               	dc.b $F2, $4, $0, $6, $EE
000255AA EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
000255AF 0A00 0014 FE               	dc.b $A, $0, $0, $14, $FE
000255B4 02                         Map_a933_3CC: 	dc.b $2
000255B5 F207 0000 EE               	dc.b $F2, $7, $0, $0, $EE
000255BA EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
000255BF 04                         Map_a933_3D7: 	dc.b $4
000255C0 FA06 0000 EE               	dc.b $FA, $6, $0, $0, $EE
000255C5 F204 0006 EE               	dc.b $F2, $4, $0, $6, $EE
000255CA EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
000255CF 0A00 0014 FE               	dc.b $A, $0, $0, $14, $FE
000255D4 02                         Map_a933_3EC: 	dc.b $2
000255D5 F207 0000 EE               	dc.b $F2, $7, $0, $0, $EE
000255DA EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
000255DF 01                         Map_a933_3F7: 	dc.b $1
000255E0 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000255E5 01                         Map_a933_3FD: 	dc.b $1
000255E6 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000255EB 01                         Map_a933_403: 	dc.b $1
000255EC F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000255F1 01                         Map_a933_409: 	dc.b $1
000255F2 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000255F7 01                         Map_a933_40F: 	dc.b $1
000255F8 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000255FD 02                         Map_a933_415: 	dc.b $2
000255FE F40E 0000 EC               	dc.b $F4, $E, $0, $0, $EC
00025603 F402 000C 0C               	dc.b $F4, $2, $0, $C, $C
00025608 01                         Map_a933_420: 	dc.b $1
00025609 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
0002560E 02                         Map_a933_426: 	dc.b $2
0002560F EC0B 0000 F4               	dc.b $EC, $B, $0, $0, $F4
00025614 0C08 000C F4               	dc.b $C, $8, $0, $C, $F4
00025619 01                         Map_a933_431: 	dc.b $1
0002561A F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
0002561F 02                         Map_a933_437: 	dc.b $2
00025620 ED09 0000 F0               	dc.b $ED, $9, $0, $0, $F0
00025625 FD0E 0006 F0               	dc.b $FD, $E, $0, $6, $F0
0002562A 04                         Map_a933_442: 	dc.b $4
0002562B ED09 0000 F0               	dc.b $ED, $9, $0, $0, $F0
00025630 FD0D 0006 F0               	dc.b $FD, $D, $0, $6, $F0
00025635 0D04 000E 00               	dc.b $D, $4, $0, $E, $0
0002563A 0500 0010 E8               	dc.b $5, $0, $0, $10, $E8
0002563F 06                         Map_a933_457: 	dc.b $6
00025640 F404 0000 F4               	dc.b $F4, $4, $0, $0, $F4
00025645 FC0D 0002 EC               	dc.b $FC, $D, $0, $2, $EC
0002564A 0C08 000A F4               	dc.b $C, $8, $0, $A, $F4
0002564F 0C00 000D EC               	dc.b $C, $0, $0, $D, $EC
00025654 FC02 000E 0C               	dc.b $FC, $2, $0, $E, $C
00025659 F400 0011 04               	dc.b $F4, $0, $0, $11, $4
0002565E 02                         Map_a933_476: 	dc.b $2
0002565F 040D 0000 E4               	dc.b $4, $D, $0, $0, $E4
00025664 EC0A 0008 EC               	dc.b $EC, $A, $0, $8, $EC
00025669 02                         Map_a933_481: 	dc.b $2
0002566A 040D 0000 E3               	dc.b $4, $D, $0, $0, $E3
0002566F EC0A 0008 EB               	dc.b $EC, $A, $0, $8, $EB
00025674 04                         Map_a933_48C: 	dc.b $4
00025675 F40D 0000 FC               	dc.b $F4, $D, $0, $0, $FC
0002567A F705 0008 EC               	dc.b $F7, $5, $0, $8, $EC
0002567F 0408 000C 03               	dc.b $4, $8, $0, $C, $3
00025684 0700 000F EC               	dc.b $7, $0, $0, $F, $EC
00025689 02                         Map_a933_4A1: 	dc.b $2
0002568A F40A 0000 E8               	dc.b $F4, $A, $0, $0, $E8
0002568F F40A 0800 00               	dc.b $F4, $A, $8, $0, $0
00025694 03                         Map_a933_4AC: 	dc.b $3
00025695 F40D 0000 EB               	dc.b $F4, $D, $0, $0, $EB
0002569A FC00 0008 0B               	dc.b $FC, $0, $0, $8, $B
0002569F 040C 0009 EC               	dc.b $4, $C, $0, $9, $EC
000256A4 04                         Map_a933_4BC: 	dc.b $4
000256A5 F40D 0000 FC               	dc.b $F4, $D, $0, $0, $FC
000256AA F705 0008 EC               	dc.b $F7, $5, $0, $8, $EC
000256AF 0408 000C 02               	dc.b $4, $8, $0, $C, $2
000256B4 0700 000F EC               	dc.b $7, $0, $0, $F, $EC
000256B9 02                         Map_a933_4D1: 	dc.b $2
000256BA EC0B 0000 F4               	dc.b $EC, $B, $0, $0, $F4
000256BF 0C04 000C F4               	dc.b $C, $4, $0, $C, $F4
000256C4 04                         Map_a933_4DC: 	dc.b $4
000256C5 F80E 0000 E8               	dc.b $F8, $E, $0, $0, $E8
000256CA 0005 000C 08               	dc.b $0, $5, $0, $C, $8
000256CF F800 0010 08               	dc.b $F8, $0, $0, $10, $8
000256D4 F000 0011 F8               	dc.b $F0, $0, $0, $11, $F8
000256D9 04                         Map_a933_4F1: 	dc.b $4
000256DA F80E 0000 E8               	dc.b $F8, $E, $0, $0, $E8
000256DF 0005 000C 08               	dc.b $0, $5, $0, $C, $8
000256E4 F800 0010 08               	dc.b $F8, $0, $0, $10, $8
000256E9 F000 0011 F8               	dc.b $F0, $0, $0, $11, $F8
000256EE 05                         Map_a933_506: 	dc.b $5
000256EF E80A 0000 F4               	dc.b $E8, $A, $0, $0, $F4
000256F4 F001 0009 0C               	dc.b $F0, $1, $0, $9, $C
000256F9 0009 000B F4               	dc.b $0, $9, $0, $B, $F4
000256FE 1004 0011 F4               	dc.b $10, $4, $0, $11, $F4
00025703 0000 0013 EC               	dc.b $0, $0, $0, $13, $EC
00025708 05                         Map_a933_520: 	dc.b $5
00025709 E80A 0000 F4               	dc.b $E8, $A, $0, $0, $F4
0002570E E801 0009 0C               	dc.b $E8, $1, $0, $9, $C
00025713 0009 000B F4               	dc.b $0, $9, $0, $B, $F4
00025718 1004 0011 F4               	dc.b $10, $4, $0, $11, $F4
0002571D 0000 0013 EC               	dc.b $0, $0, $0, $13, $EC
00025722 02                         Map_a933_53A: 	dc.b $2
00025723 ED0A 0000 F3               	dc.b $ED, $A, $0, $0, $F3
00025728 050D 0009 EB               	dc.b $5, $D, $0, $9, $EB
0002572D 03                         Map_a933_545: 	dc.b $3
0002572E EC0A 0000 F3               	dc.b $EC, $A, $0, $0, $F3
00025733 0408 0009 F3               	dc.b $4, $8, $0, $9, $F3
00025738 0C04 000C F3               	dc.b $C, $4, $0, $C, $F3
0002573D 02                         Map_a933_555: 	dc.b $2
0002573E ED0A 0000 F3               	dc.b $ED, $A, $0, $0, $F3
00025743 050D 0009 EB               	dc.b $5, $D, $0, $9, $EB
00025748 03                         Map_a933_560: 	dc.b $3
00025749 EC0A 0000 F3               	dc.b $EC, $A, $0, $0, $F3
0002574E 0408 0009 F3               	dc.b $4, $8, $0, $9, $F3
00025753 0C04 000C F3               	dc.b $C, $4, $0, $C, $F3
00025758 02                         Map_a933_570: 	dc.b $2
00025759 EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
0002575E FC0E 0006 F0               	dc.b $FC, $E, $0, $6, $F0
00025763 03                         Map_a933_57B: 	dc.b $3
00025764 EC0A 0000 F0               	dc.b $EC, $A, $0, $0, $F0
00025769 0405 0009 F8               	dc.b $4, $5, $0, $9, $F8
0002576E E400 000D F8               	dc.b $E4, $0, $0, $D, $F8
00025773 03                         Map_a933_58B: 	dc.b $3
00025774 E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
00025779 E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
0002577E F80B 000A F4               	dc.b $F8, $B, $0, $A, $F4
00025783 05                         Map_a933_59B: 	dc.b $5
00025784 E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
00025789 E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
0002578E F809 000A F4               	dc.b $F8, $9, $0, $A, $F4
00025793 080C 0010 F4               	dc.b $8, $C, $0, $10, $F4
00025798 1000 0014 F4               	dc.b $10, $0, $0, $14, $F4
0002579D 05                         Map_a933_5B5: 	dc.b $5
0002579E E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
000257A3 E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
000257A8 F809 000A F4               	dc.b $F8, $9, $0, $A, $F4
000257AD 080C 0010 F4               	dc.b $8, $C, $0, $10, $F4
000257B2 1000 0014 F4               	dc.b $10, $0, $0, $14, $F4
000257B7 02                         Map_a933_5CF: 	dc.b $2
000257B8 EC08 0000 F0               	dc.b $EC, $8, $0, $0, $F0
000257BD F40F 0003 F0               	dc.b $F4, $F, $0, $3, $F0
000257C2 03                         Map_a933_5DA: 	dc.b $3
000257C3 EC08 0000 F0               	dc.b $EC, $8, $0, $0, $F0
000257C8 F40E 0003 F0               	dc.b $F4, $E, $0, $3, $F0
000257CD 0C08 000F F8               	dc.b $C, $8, $0, $F, $F8
000257D2 01                         Map_a933_5EA: 	dc.b $1
000257D3 F00B 0000 F4               	dc.b $F0, $B, $0, $0, $F4
000257D8 01                         Map_a933_5F0: 	dc.b $1
000257D9 F406 0000 F8               	dc.b $F4, $6, $0, $0, $F8
000257DE 01                         Map_a933_5F6: 	dc.b $1
000257DF F801 0000 FC               	dc.b $F8, $1, $0, $0, $FC
000257E4 04                         Map_a933_5FC: 	dc.b $4
000257E5 F40D 0800 E4               	dc.b $F4, $D, $8, $0, $E4
000257EA F705 0808 04               	dc.b $F7, $5, $8, $8, $4
000257EF 0408 080C E5               	dc.b $4, $8, $8, $C, $E5
000257F4 0700 080F 0C               	dc.b $7, $0, $8, $F, $C
000257F9 03                         Map_a933_611: 	dc.b $3
000257FA F40D 0800 F5               	dc.b $F4, $D, $8, $0, $F5
000257FF FC00 0808 ED               	dc.b $FC, $0, $8, $8, $ED
00025804 040C 0809 F4               	dc.b $4, $C, $8, $9, $F4
00025809 03                         Map_a933_621: 	dc.b $3
0002580A F00E 0000 EC               	dc.b $F0, $E, $0, $0, $EC
0002580F F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
00025814 080C 000E F4               	dc.b $8, $C, $0, $E, $F4
00025819 03                         Map_a933_631: 	dc.b $3
0002581A EB09 0000 F4               	dc.b $EB, $9, $0, $0, $F4
0002581F FB0E 0006 EC               	dc.b $FB, $E, $0, $6, $EC
00025824 0301 0012 0C               	dc.b $3, $1, $0, $12, $C
00025829 02                         Map_a933_641: 	dc.b $2
0002582A F00F 0000 EC               	dc.b $F0, $F, $0, $0, $EC
0002582F F802 0010 0C               	dc.b $F8, $2, $0, $10, $C
00025834 02                         Map_a933_64C: 	dc.b $2
00025835 F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
0002583A EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
0002583F 03                         Map_a933_657: 	dc.b $3
00025840 ED0F 0000 F3               	dc.b $ED, $F, $0, $0, $F3
00025845 0D00 0010 F3               	dc.b $D, $0, $0, $10, $F3
0002584A 0D04 0011 03               	dc.b $D, $4, $0, $11, $3
0002584F 02                         Map_a933_667: 	dc.b $2
00025850 F60F 0000 EE               	dc.b $F6, $F, $0, $0, $EE
00025855 EE08 0010 F6               	dc.b $EE, $8, $0, $10, $F6
0002585A 04                         Map_a933_672: 	dc.b $4
0002585B ED08 0000 F3               	dc.b $ED, $8, $0, $0, $F3
00025860 F50E 0003 EB               	dc.b $F5, $E, $0, $3, $EB
00025865 F503 000F 0B               	dc.b $F5, $3, $0, $F, $B
0002586A 0D08 0013 F3               	dc.b $D, $8, $0, $13, $F3
0002586F 00                         Map_a933_687: 	dc.b $0
00025870 00                         Map_a933_688: 	dc.b $0
00025871 00                         Map_a933_689: 	dc.b $0
00025872 00                         Map_a933_68A: 	dc.b $0
00025873 02                         Map_a933_68B: 	dc.b $2
00025874 F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
00025879 EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
0002587E 00                         Map_a933_696: 	dc.b $0
0002587F 02                         Map_a933_697: 	dc.b $2
00025880 F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
00025885 EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
0002588A 00                         Map_a933_6A2: 	dc.b $0
0002588B 00                         Map_a933_6A3: 	dc.b $0
0002588C 00                         Map_a933_6A4: 	dc.b $0
0002588D 02                         Map_a933_6A5: 	dc.b $2
0002588E F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
00025893 EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
00025898 00                         Map_a933_6B0: 	dc.b $0
00025899 02                         Map_a933_6B1: 	dc.b $2
0002589A F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
0002589F EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
000258A4 00                         Map_a933_6BC: 	dc.b $0
000258A5 00                         Map_a933_6BD: 	dc.b $0
000258A6 00                         Map_a933_6BE: 	dc.b $0
000258A7 02                         Map_a933_6BF: 	dc.b $2
000258A8 F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
000258AD EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
000258B2 00                         Map_a933_6CA: 	dc.b $0
000258B3 02                         Map_a933_6CB: 	dc.b $2
000258B4 F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
000258B9 EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
000258BE 00                         Map_a933_6D6: 	dc.b $0
000258C0 00                         	even
000258C0 00                         	even
000258C0                            
000258C0                            ; ---------------------------------------------------------------------------
000258C0                            ; Uncompressed graphics	loading	array for Sonic
000258C0                            ; ---------------------------------------------------------------------------
000258C0                            SonicDynPLC:
000258C0                            	include "_inc\Sonic dynamic pattern load cues.asm"
000258C0                            DPLC_33c5:
000258C0 0000                       DPLC_33c5_0: 	dc.w DPLC_33c5_E0-DPLC_33c5
000258C2 0000                       DPLC_33c5_2: 	dc.w DPLC_33c5_E1-DPLC_33c5
000258C4 0000                       DPLC_33c5_4: 	dc.w DPLC_33c5_E6-DPLC_33c5
000258C6 0000                       DPLC_33c5_6: 	dc.w DPLC_33c5_ED-DPLC_33c5
000258C8 0000                       DPLC_33c5_8: 	dc.w DPLC_33c5_F4-DPLC_33c5
000258CA 0000                       DPLC_33c5_A: 	dc.w DPLC_33c5_FB-DPLC_33c5
000258CC 0000                       DPLC_33c5_C: 	dc.w DPLC_33c5_102-DPLC_33c5
000258CE 0000                       DPLC_33c5_E: 	dc.w DPLC_33c5_10B-DPLC_33c5
000258D0 0000                       DPLC_33c5_10: 	dc.w DPLC_33c5_110-DPLC_33c5
000258D2 0000                       DPLC_33c5_12: 	dc.w DPLC_33c5_115-DPLC_33c5
000258D4 0000                       DPLC_33c5_14: 	dc.w DPLC_33c5_11E-DPLC_33c5
000258D6 0000                       DPLC_33c5_16: 	dc.w DPLC_33c5_123-DPLC_33c5
000258D8 0000                       DPLC_33c5_18: 	dc.w DPLC_33c5_12A-DPLC_33c5
000258DA 0000                       DPLC_33c5_1A: 	dc.w DPLC_33c5_135-DPLC_33c5
000258DC 0000                       DPLC_33c5_1C: 	dc.w DPLC_33c5_142-DPLC_33c5
000258DE 0000                       DPLC_33c5_1E: 	dc.w DPLC_33c5_14B-DPLC_33c5
000258E0 0000                       DPLC_33c5_20: 	dc.w DPLC_33c5_156-DPLC_33c5
000258E2 0000                       DPLC_33c5_22: 	dc.w DPLC_33c5_15F-DPLC_33c5
000258E4 0000                       DPLC_33c5_24: 	dc.w DPLC_33c5_16A-DPLC_33c5
000258E6 0000                       DPLC_33c5_26: 	dc.w DPLC_33c5_173-DPLC_33c5
000258E8 0000                       DPLC_33c5_28: 	dc.w DPLC_33c5_178-DPLC_33c5
000258EA 0000                       DPLC_33c5_2A: 	dc.w DPLC_33c5_17D-DPLC_33c5
000258EC 0000                       DPLC_33c5_2C: 	dc.w DPLC_33c5_186-DPLC_33c5
000258EE 0000                       DPLC_33c5_2E: 	dc.w DPLC_33c5_18B-DPLC_33c5
000258F0 0000                       DPLC_33c5_30: 	dc.w DPLC_33c5_192-DPLC_33c5
000258F2 0000                       DPLC_33c5_32: 	dc.w DPLC_33c5_19F-DPLC_33c5
000258F4 0000                       DPLC_33c5_34: 	dc.w DPLC_33c5_1AC-DPLC_33c5
000258F6 0000                       DPLC_33c5_36: 	dc.w DPLC_33c5_1B5-DPLC_33c5
000258F8 0000                       DPLC_33c5_38: 	dc.w DPLC_33c5_1C0-DPLC_33c5
000258FA 0000                       DPLC_33c5_3A: 	dc.w DPLC_33c5_1C9-DPLC_33c5
000258FC 0000                       DPLC_33c5_3C: 	dc.w DPLC_33c5_1D4-DPLC_33c5
000258FE 0000                       DPLC_33c5_3E: 	dc.w DPLC_33c5_1D9-DPLC_33c5
00025900 0000                       DPLC_33c5_40: 	dc.w DPLC_33c5_1DE-DPLC_33c5
00025902 0000                       DPLC_33c5_42: 	dc.w DPLC_33c5_1E3-DPLC_33c5
00025904 0000                       DPLC_33c5_44: 	dc.w DPLC_33c5_1E8-DPLC_33c5
00025906 0000                       DPLC_33c5_46: 	dc.w DPLC_33c5_1F1-DPLC_33c5
00025908 0000                       DPLC_33c5_48: 	dc.w DPLC_33c5_1F8-DPLC_33c5
0002590A 0000                       DPLC_33c5_4A: 	dc.w DPLC_33c5_201-DPLC_33c5
0002590C 0000                       DPLC_33c5_4C: 	dc.w DPLC_33c5_208-DPLC_33c5
0002590E 0000                       DPLC_33c5_4E: 	dc.w DPLC_33c5_20D-DPLC_33c5
00025910 0000                       DPLC_33c5_50: 	dc.w DPLC_33c5_212-DPLC_33c5
00025912 0000                       DPLC_33c5_52: 	dc.w DPLC_33c5_217-DPLC_33c5
00025914 0000                       DPLC_33c5_54: 	dc.w DPLC_33c5_21C-DPLC_33c5
00025916 0000                       DPLC_33c5_56: 	dc.w DPLC_33c5_225-DPLC_33c5
00025918 0000                       DPLC_33c5_58: 	dc.w DPLC_33c5_22A-DPLC_33c5
0002591A 0000                       DPLC_33c5_5A: 	dc.w DPLC_33c5_233-DPLC_33c5
0002591C 0000                       DPLC_33c5_5C: 	dc.w DPLC_33c5_238-DPLC_33c5
0002591E 0000                       DPLC_33c5_5E: 	dc.w DPLC_33c5_23B-DPLC_33c5
00025920 0000                       DPLC_33c5_60: 	dc.w DPLC_33c5_23E-DPLC_33c5
00025922 0000                       DPLC_33c5_62: 	dc.w DPLC_33c5_241-DPLC_33c5
00025924 0000                       DPLC_33c5_64: 	dc.w DPLC_33c5_244-DPLC_33c5
00025926 0000                       DPLC_33c5_66: 	dc.w DPLC_33c5_247-DPLC_33c5
00025928 0000                       DPLC_33c5_68: 	dc.w DPLC_33c5_24C-DPLC_33c5
0002592A 0000                       DPLC_33c5_6A: 	dc.w DPLC_33c5_24F-DPLC_33c5
0002592C 0000                       DPLC_33c5_6C: 	dc.w DPLC_33c5_254-DPLC_33c5
0002592E 0000                       DPLC_33c5_6E: 	dc.w DPLC_33c5_257-DPLC_33c5
00025930 0000                       DPLC_33c5_70: 	dc.w DPLC_33c5_25C-DPLC_33c5
00025932 0000                       DPLC_33c5_72: 	dc.w DPLC_33c5_265-DPLC_33c5
00025934 0000                       DPLC_33c5_74: 	dc.w DPLC_33c5_26A-DPLC_33c5
00025936 0000                       DPLC_33c5_76: 	dc.w DPLC_33c5_26F-DPLC_33c5
00025938 0000                       DPLC_33c5_78: 	dc.w DPLC_33c5_274-DPLC_33c5
0002593A 0000                       DPLC_33c5_7A: 	dc.w DPLC_33c5_279-DPLC_33c5
0002593C 0000                       DPLC_33c5_7C: 	dc.w DPLC_33c5_27C-DPLC_33c5
0002593E 0000                       DPLC_33c5_7E: 	dc.w DPLC_33c5_283-DPLC_33c5
00025940 0000                       DPLC_33c5_80: 	dc.w DPLC_33c5_288-DPLC_33c5
00025942 0000                       DPLC_33c5_82: 	dc.w DPLC_33c5_28B-DPLC_33c5
00025944 0000                       DPLC_33c5_84: 	dc.w DPLC_33c5_294-DPLC_33c5
00025946 0000                       DPLC_33c5_86: 	dc.w DPLC_33c5_29D-DPLC_33c5
00025948 0000                       DPLC_33c5_88: 	dc.w DPLC_33c5_2A8-DPLC_33c5
0002594A 0000                       DPLC_33c5_8A: 	dc.w DPLC_33c5_2B3-DPLC_33c5
0002594C 0000                       DPLC_33c5_8C: 	dc.w DPLC_33c5_2B8-DPLC_33c5
0002594E 0000                       DPLC_33c5_8E: 	dc.w DPLC_33c5_2BF-DPLC_33c5
00025950 0000                       DPLC_33c5_90: 	dc.w DPLC_33c5_2C4-DPLC_33c5
00025952 0000                       DPLC_33c5_92: 	dc.w DPLC_33c5_2CB-DPLC_33c5
00025954 0000                       DPLC_33c5_94: 	dc.w DPLC_33c5_2D0-DPLC_33c5
00025956 0000                       DPLC_33c5_96: 	dc.w DPLC_33c5_2D7-DPLC_33c5
00025958 0000                       DPLC_33c5_98: 	dc.w DPLC_33c5_2DE-DPLC_33c5
0002595A 0000                       DPLC_33c5_9A: 	dc.w DPLC_33c5_2E9-DPLC_33c5
0002595C 0000                       DPLC_33c5_9C: 	dc.w DPLC_33c5_2F4-DPLC_33c5
0002595E 0000                       DPLC_33c5_9E: 	dc.w DPLC_33c5_2F9-DPLC_33c5
00025960 0000                       DPLC_33c5_A0: 	dc.w DPLC_33c5_300-DPLC_33c5
00025962 0000                       DPLC_33c5_A2: 	dc.w DPLC_33c5_303-DPLC_33c5
00025964 0000                       DPLC_33c5_A4: 	dc.w DPLC_33c5_306-DPLC_33c5
00025966 0000                       DPLC_33c5_A6: 	dc.w DPLC_33c5_309-DPLC_33c5
00025968 0000                       DPLC_33c5_A8: 	dc.w DPLC_33c5_30E-DPLC_33c5
0002596A 0000                       DPLC_33c5_AA: 	dc.w DPLC_33c5_315-DPLC_33c5
0002596C 0000                       DPLC_33c5_AC: 	dc.w DPLC_33c5_31C-DPLC_33c5
0002596E 0000                       DPLC_33c5_AE: 	dc.w DPLC_33c5_323-DPLC_33c5
00025970 0000                       DPLC_33c5_B0: 	dc.w DPLC_33c5_328-DPLC_33c5
00025972 0000                       DPLC_33c5_B2: 	dc.w DPLC_33c5_32D-DPLC_33c5
00025974 0000                       DPLC_33c5_B4: 	dc.w DPLC_33c5_332-DPLC_33c5
00025976 0000                       DPLC_33c5_B6: 	dc.w DPLC_33c5_337-DPLC_33c5
00025978 0000                       DPLC_33c5_B8: 	dc.w DPLC_33c5_33C-DPLC_33c5
0002597A 0000                       DPLC_33c5_BA: 	dc.w DPLC_33c5_33D-DPLC_33c5
0002597C 0000                       DPLC_33c5_BC: 	dc.w DPLC_33c5_33E-DPLC_33c5
0002597E 0000                       DPLC_33c5_BE: 	dc.w DPLC_33c5_33F-DPLC_33c5
00025980 0000                       DPLC_33c5_C0: 	dc.w DPLC_33c5_340-DPLC_33c5
00025982 0000                       DPLC_33c5_C2: 	dc.w DPLC_33c5_345-DPLC_33c5
00025984 0000                       DPLC_33c5_C4: 	dc.w DPLC_33c5_346-DPLC_33c5
00025986 0000                       DPLC_33c5_C6: 	dc.w DPLC_33c5_34B-DPLC_33c5
00025988 0000                       DPLC_33c5_C8: 	dc.w DPLC_33c5_34C-DPLC_33c5
0002598A 0000                       DPLC_33c5_CA: 	dc.w DPLC_33c5_34D-DPLC_33c5
0002598C 0000                       DPLC_33c5_CC: 	dc.w DPLC_33c5_34E-DPLC_33c5
0002598E 0000                       DPLC_33c5_CE: 	dc.w DPLC_33c5_353-DPLC_33c5
00025990 0000                       DPLC_33c5_D0: 	dc.w DPLC_33c5_354-DPLC_33c5
00025992 0000                       DPLC_33c5_D2: 	dc.w DPLC_33c5_359-DPLC_33c5
00025994 0000                       DPLC_33c5_D4: 	dc.w DPLC_33c5_35A-DPLC_33c5
00025996 0000                       DPLC_33c5_D6: 	dc.w DPLC_33c5_35B-DPLC_33c5
00025998 0000                       DPLC_33c5_D8: 	dc.w DPLC_33c5_35C-DPLC_33c5
0002599A 0000                       DPLC_33c5_DA: 	dc.w DPLC_33c5_361-DPLC_33c5
0002599C 0000                       DPLC_33c5_DC: 	dc.w DPLC_33c5_362-DPLC_33c5
0002599E 0000                       DPLC_33c5_DE: 	dc.w DPLC_33c5_367-DPLC_33c5
000259A0 00                         DPLC_33c5_E0: 	dc.b $0
000259A1 02                         DPLC_33c5_E1: 	dc.b $2
000259A2 F000                       	dc.b $F0, $0
000259A4 1010                       	dc.b $10, $10
000259A6 03                         DPLC_33c5_E6: 	dc.b $3
000259A7 5012                       	dc.b $50, $12
000259A9 5018                       	dc.b $50, $18
000259AB 201E                       	dc.b $20, $1E
000259AD 03                         DPLC_33c5_ED: 	dc.b $3
000259AE 5021                       	dc.b $50, $21
000259B0 5018                       	dc.b $50, $18
000259B2 201E                       	dc.b $20, $1E
000259B4 03                         DPLC_33c5_F4: 	dc.b $3
000259B5 5021                       	dc.b $50, $21
000259B7 5018                       	dc.b $50, $18
000259B9 2027                       	dc.b $20, $27
000259BB 03                         DPLC_33c5_FB: 	dc.b $3
000259BC 802A                       	dc.b $80, $2A
000259BE 2033                       	dc.b $20, $33
000259C0 2036                       	dc.b $20, $36
000259C2 04                         DPLC_33c5_102: 	dc.b $4
000259C3 7039                       	dc.b $70, $39
000259C5 5041                       	dc.b $50, $41
000259C7 5047                       	dc.b $50, $47
000259C9 104D                       	dc.b $10, $4D
000259CB 02                         DPLC_33c5_10B: 	dc.b $2
000259CC 7039                       	dc.b $70, $39
000259CE B04F                       	dc.b $B0, $4F
000259D0 02                         DPLC_33c5_110: 	dc.b $2
000259D1 505B                       	dc.b $50, $5B
000259D3 8061                       	dc.b $80, $61
000259D5 04                         DPLC_33c5_115: 	dc.b $4
000259D6 505B                       	dc.b $50, $5B
000259D8 506A                       	dc.b $50, $6A
000259DA 5070                       	dc.b $50, $70
000259DC 1076                       	dc.b $10, $76
000259DE 02                         DPLC_33c5_11E: 	dc.b $2
000259DF F4F0                       	dc.b $F4, $F0
000259E1 1500                       	dc.b $15, $0
000259E3 03                         DPLC_33c5_123: 	dc.b $3
000259E4 7039                       	dc.b $70, $39
000259E6 3078                       	dc.b $30, $78
000259E8 507C                       	dc.b $50, $7C
000259EA 05                         DPLC_33c5_12A: 	dc.b $5
000259EB 5082                       	dc.b $50, $82
000259ED 5088                       	dc.b $50, $88
000259EF 208E                       	dc.b $20, $8E
000259F1 5091                       	dc.b $50, $91
000259F3 0097                       	dc.b $0, $97
000259F5 06                         DPLC_33c5_135: 	dc.b $6
000259F6 5082                       	dc.b $50, $82
000259F8 1098                       	dc.b $10, $98
000259FA 309A                       	dc.b $30, $9A
000259FC 509E                       	dc.b $50, $9E
000259FE 30A4                       	dc.b $30, $A4
00025A00 00A8                       	dc.b $0, $A8
00025A02 04                         DPLC_33c5_142: 	dc.b $4
00025A03 50A9                       	dc.b $50, $A9
00025A05 10AF                       	dc.b $10, $AF
00025A07 70B1                       	dc.b $70, $B1
00025A09 20B9                       	dc.b $20, $B9
00025A0B 05                         DPLC_33c5_14B: 	dc.b $5
00025A0C 50BC                       	dc.b $50, $BC
00025A0E 30C2                       	dc.b $30, $C2
00025A10 70C6                       	dc.b $70, $C6
00025A12 20CE                       	dc.b $20, $CE
00025A14 10D1                       	dc.b $10, $D1
00025A16 04                         DPLC_33c5_156: 	dc.b $4
00025A17 50BC                       	dc.b $50, $BC
00025A19 10D3                       	dc.b $10, $D3
00025A1B 70D5                       	dc.b $70, $D5
00025A1D 20DD                       	dc.b $20, $DD
00025A1F 05                         DPLC_33c5_15F: 	dc.b $5
00025A20 5082                       	dc.b $50, $82
00025A22 1098                       	dc.b $10, $98
00025A24 008E                       	dc.b $0, $8E
00025A26 70E0                       	dc.b $70, $E0
00025A28 20E8                       	dc.b $20, $E8
00025A2A 04                         DPLC_33c5_16A: 	dc.b $4
00025A2B 70EB                       	dc.b $70, $EB
00025A2D 50F3                       	dc.b $50, $F3
00025A2F 10F9                       	dc.b $10, $F9
00025A31 50FB                       	dc.b $50, $FB
00025A33 02                         DPLC_33c5_173: 	dc.b $2
00025A34 70EB                       	dc.b $70, $EB
00025A36 B101                       	dc.b $B1, $1
00025A38 02                         DPLC_33c5_178: 	dc.b $2
00025A39 510D                       	dc.b $51, $D
00025A3B 8113                       	dc.b $81, $13
00025A3D 04                         DPLC_33c5_17D: 	dc.b $4
00025A3E 510D                       	dc.b $51, $D
00025A40 511C                       	dc.b $51, $1C
00025A42 1122                       	dc.b $11, $22
00025A44 5124                       	dc.b $51, $24
00025A46 02                         DPLC_33c5_186: 	dc.b $2
00025A47 510D                       	dc.b $51, $D
00025A49 B12A                       	dc.b $B1, $2A
00025A4B 03                         DPLC_33c5_18B: 	dc.b $3
00025A4C 70EB                       	dc.b $70, $EB
00025A4E 0101                       	dc.b $1, $1
00025A50 8136                       	dc.b $81, $36
00025A52 06                         DPLC_33c5_192: 	dc.b $6
00025A53 513F                       	dc.b $51, $3F
00025A55 1145                       	dc.b $11, $45
00025A57 1147                       	dc.b $11, $47
00025A59 8149                       	dc.b $81, $49
00025A5B 0152                       	dc.b $1, $52
00025A5D 0153                       	dc.b $1, $53
00025A5F 06                         DPLC_33c5_19F: 	dc.b $6
00025A60 513F                       	dc.b $51, $3F
00025A62 2154                       	dc.b $21, $54
00025A64 1157                       	dc.b $11, $57
00025A66 1159                       	dc.b $11, $59
00025A68 815B                       	dc.b $81, $5B
00025A6A 0152                       	dc.b $1, $52
00025A6C 04                         DPLC_33c5_1AC: 	dc.b $4
00025A6D 5164                       	dc.b $51, $64
00025A6F 116A                       	dc.b $11, $6A
00025A71 816C                       	dc.b $81, $6C
00025A73 1175                       	dc.b $11, $75
00025A75 05                         DPLC_33c5_1B5: 	dc.b $5
00025A76 5177                       	dc.b $51, $77
00025A78 217D                       	dc.b $21, $7D
00025A7A 1180                       	dc.b $11, $80
00025A7C 7182                       	dc.b $71, $82
00025A7E 218A                       	dc.b $21, $8A
00025A80 04                         DPLC_33c5_1C0: 	dc.b $4
00025A81 5177                       	dc.b $51, $77
00025A83 118D                       	dc.b $11, $8D
00025A85 818F                       	dc.b $81, $8F
00025A87 1198                       	dc.b $11, $98
00025A89 05                         DPLC_33c5_1C9: 	dc.b $5
00025A8A 513F                       	dc.b $51, $3F
00025A8C 819A                       	dc.b $81, $9A
00025A8E 1159                       	dc.b $11, $59
00025A90 11A3                       	dc.b $11, $A3
00025A92 0152                       	dc.b $1, $52
00025A94 02                         DPLC_33c5_1D4: 	dc.b $2
00025A95 51A5                       	dc.b $51, $A5
00025A97 B1AB                       	dc.b $B1, $AB
00025A99 02                         DPLC_33c5_1D9: 	dc.b $2
00025A9A 505B                       	dc.b $50, $5B
00025A9C B1B7                       	dc.b $B1, $B7
00025A9E 02                         DPLC_33c5_1DE: 	dc.b $2
00025A9F 51A5                       	dc.b $51, $A5
00025AA1 B1C3                       	dc.b $B1, $C3
00025AA3 02                         DPLC_33c5_1E3: 	dc.b $2
00025AA4 505B                       	dc.b $50, $5B
00025AA6 B1CF                       	dc.b $B1, $CF
00025AA8 04                         DPLC_33c5_1E8: 	dc.b $4
00025AA9 51DB                       	dc.b $51, $DB
00025AAB 11E1                       	dc.b $11, $E1
00025AAD B1E3                       	dc.b $B1, $E3
00025AAF 01EF                       	dc.b $1, $EF
00025AB1 03                         DPLC_33c5_1F1: 	dc.b $3
00025AB2 51F0                       	dc.b $51, $F0
00025AB4 11F6                       	dc.b $11, $F6
00025AB6 B1F8                       	dc.b $B1, $F8
00025AB8 04                         DPLC_33c5_1F8: 	dc.b $4
00025AB9 51DB                       	dc.b $51, $DB
00025ABB 1204                       	dc.b $12, $4
00025ABD B206                       	dc.b $B2, $6
00025ABF 01EF                       	dc.b $1, $EF
00025AC1 03                         DPLC_33c5_201: 	dc.b $3
00025AC2 51F0                       	dc.b $51, $F0
00025AC4 11F6                       	dc.b $11, $F6
00025AC6 B212                       	dc.b $B2, $12
00025AC8 02                         DPLC_33c5_208: 	dc.b $2
00025AC9 521E                       	dc.b $52, $1E
00025ACB B224                       	dc.b $B2, $24
00025ACD 02                         DPLC_33c5_20D: 	dc.b $2
00025ACE 510D                       	dc.b $51, $D
00025AD0 B230                       	dc.b $B2, $30
00025AD2 02                         DPLC_33c5_212: 	dc.b $2
00025AD3 521E                       	dc.b $52, $1E
00025AD5 B23C                       	dc.b $B2, $3C
00025AD7 02                         DPLC_33c5_217: 	dc.b $2
00025AD8 510D                       	dc.b $51, $D
00025ADA B248                       	dc.b $B2, $48
00025ADC 04                         DPLC_33c5_21C: 	dc.b $4
00025ADD 5254                       	dc.b $52, $54
00025ADF 125A                       	dc.b $12, $5A
00025AE1 B25C                       	dc.b $B2, $5C
00025AE3 0268                       	dc.b $2, $68
00025AE5 02                         DPLC_33c5_225: 	dc.b $2
00025AE6 7269                       	dc.b $72, $69
00025AE8 B271                       	dc.b $B2, $71
00025AEA 04                         DPLC_33c5_22A: 	dc.b $4
00025AEB 5254                       	dc.b $52, $54
00025AED 127D                       	dc.b $12, $7D
00025AEF B27F                       	dc.b $B2, $7F
00025AF1 0268                       	dc.b $2, $68
00025AF3 02                         DPLC_33c5_233: 	dc.b $2
00025AF4 7269                       	dc.b $72, $69
00025AF6 B28B                       	dc.b $B2, $8B
00025AF8 01                         DPLC_33c5_238: 	dc.b $1
00025AF9 F297                       	dc.b $F2, $97
00025AFB 01                         DPLC_33c5_23B: 	dc.b $1
00025AFC F2A7                       	dc.b $F2, $A7
00025AFE 01                         DPLC_33c5_23E: 	dc.b $1
00025AFF F2B7                       	dc.b $F2, $B7
00025B01 01                         DPLC_33c5_241: 	dc.b $1
00025B02 F2C7                       	dc.b $F2, $C7
00025B04 01                         DPLC_33c5_244: 	dc.b $1
00025B05 F2D7                       	dc.b $F2, $D7
00025B07 02                         DPLC_33c5_247: 	dc.b $2
00025B08 B2E7                       	dc.b $B2, $E7
00025B0A 22F3                       	dc.b $22, $F3
00025B0C 01                         DPLC_33c5_24C: 	dc.b $1
00025B0D F2F6                       	dc.b $F2, $F6
00025B0F 02                         DPLC_33c5_24F: 	dc.b $2
00025B10 B306                       	dc.b $B3, $6
00025B12 2312                       	dc.b $23, $12
00025B14 01                         DPLC_33c5_254: 	dc.b $1
00025B15 F315                       	dc.b $F3, $15
00025B17 02                         DPLC_33c5_257: 	dc.b $2
00025B18 5325                       	dc.b $53, $25
00025B1A B32B                       	dc.b $B3, $2B
00025B1C 04                         DPLC_33c5_25C: 	dc.b $4
00025B1D 5337                       	dc.b $53, $37
00025B1F 733D                       	dc.b $73, $3D
00025B21 1345                       	dc.b $13, $45
00025B23 0347                       	dc.b $3, $47
00025B25 02                         DPLC_33c5_265: 	dc.b $2
00025B26 D348                       	dc.b $D3, $48
00025B28 34EC                       	dc.b $34, $EC
00025B2A 02                         DPLC_33c5_26A: 	dc.b $2
00025B2B F528                       	dc.b $F5, $28
00025B2D 0538                       	dc.b $5, $38
00025B2F 02                         DPLC_33c5_26F: 	dc.b $2
00025B30 F539                       	dc.b $F5, $39
00025B32 0549                       	dc.b $5, $49
00025B34 02                         DPLC_33c5_274: 	dc.b $2
00025B35 E356                       	dc.b $E3, $56
00025B37 054A                       	dc.b $5, $4A
00025B39 01                         DPLC_33c5_279: 	dc.b $1
00025B3A 8365                       	dc.b $83, $65
00025B3C 03                         DPLC_33c5_27C: 	dc.b $3
00025B3D 736E                       	dc.b $73, $6E
00025B3F 0376                       	dc.b $3, $76
00025B41 3377                       	dc.b $33, $77
00025B43 02                         DPLC_33c5_283: 	dc.b $2
00025B44 E37B                       	dc.b $E3, $7B
00025B46 054A                       	dc.b $5, $4A
00025B48 01                         DPLC_33c5_288: 	dc.b $1
00025B49 D561                       	dc.b $D5, $61
00025B4B 04                         DPLC_33c5_28B: 	dc.b $4
00025B4C B399                       	dc.b $B3, $99
00025B4E 33A5                       	dc.b $33, $A5
00025B50 03A9                       	dc.b $3, $A9
00025B52 03AA                       	dc.b $3, $AA
00025B54 04                         DPLC_33c5_294: 	dc.b $4
00025B55 B3AB                       	dc.b $B3, $AB
00025B57 33B7                       	dc.b $33, $B7
00025B59 03BB                       	dc.b $3, $BB
00025B5B 03BC                       	dc.b $3, $BC
00025B5D 05                         DPLC_33c5_29D: 	dc.b $5
00025B5E 83BD                       	dc.b $83, $BD
00025B60 13C6                       	dc.b $13, $C6
00025B62 53C8                       	dc.b $53, $C8
00025B64 13CE                       	dc.b $13, $CE
00025B66 03D0                       	dc.b $3, $D0
00025B68 05                         DPLC_33c5_2A8: 	dc.b $5
00025B69 83D1                       	dc.b $83, $D1
00025B6B 13DA                       	dc.b $13, $DA
00025B6D 53C8                       	dc.b $53, $C8
00025B6F 13CE                       	dc.b $13, $CE
00025B71 03D0                       	dc.b $3, $D0
00025B73 02                         DPLC_33c5_2B3: 	dc.b $2
00025B74 83DC                       	dc.b $83, $DC
00025B76 73E5                       	dc.b $73, $E5
00025B78 03                         DPLC_33c5_2B8: 	dc.b $3
00025B79 83ED                       	dc.b $83, $ED
00025B7B 23F6                       	dc.b $23, $F6
00025B7D 13F9                       	dc.b $13, $F9
00025B7F 02                         DPLC_33c5_2BF: 	dc.b $2
00025B80 83FB                       	dc.b $83, $FB
00025B82 7404                       	dc.b $74, $4
00025B84 03                         DPLC_33c5_2C4: 	dc.b $3
00025B85 83ED                       	dc.b $83, $ED
00025B87 240C                       	dc.b $24, $C
00025B89 140F                       	dc.b $14, $F
00025B8B 02                         DPLC_33c5_2CB: 	dc.b $2
00025B8C 5411                       	dc.b $54, $11
00025B8E B417                       	dc.b $B4, $17
00025B90 03                         DPLC_33c5_2D0: 	dc.b $3
00025B91 8423                       	dc.b $84, $23
00025B93 342C                       	dc.b $34, $2C
00025B95 0430                       	dc.b $4, $30
00025B97 03                         DPLC_33c5_2D7: 	dc.b $3
00025B98 7431                       	dc.b $74, $31
00025B9A 1439                       	dc.b $14, $39
00025B9C B43B                       	dc.b $B4, $3B
00025B9E 05                         DPLC_33c5_2DE: 	dc.b $5
00025B9F 7447                       	dc.b $74, $47
00025BA1 144F                       	dc.b $14, $4F
00025BA3 5451                       	dc.b $54, $51
00025BA5 3457                       	dc.b $34, $57
00025BA7 045B                       	dc.b $4, $5B
00025BA9 05                         DPLC_33c5_2E9: 	dc.b $5
00025BAA 745C                       	dc.b $74, $5C
00025BAC 144F                       	dc.b $14, $4F
00025BAE 5464                       	dc.b $54, $64
00025BB0 3457                       	dc.b $34, $57
00025BB2 045B                       	dc.b $4, $5B
00025BB4 02                         DPLC_33c5_2F4: 	dc.b $2
00025BB5 246A                       	dc.b $24, $6A
00025BB7 F46D                       	dc.b $F4, $6D
00025BB9 03                         DPLC_33c5_2F9: 	dc.b $3
00025BBA 247D                       	dc.b $24, $7D
00025BBC B480                       	dc.b $B4, $80
00025BBE 248C                       	dc.b $24, $8C
00025BC0 01                         DPLC_33c5_300: 	dc.b $1
00025BC1 B48F                       	dc.b $B4, $8F
00025BC3 01                         DPLC_33c5_303: 	dc.b $1
00025BC4 549B                       	dc.b $54, $9B
00025BC6 01                         DPLC_33c5_306: 	dc.b $1
00025BC7 14A1                       	dc.b $14, $A1
00025BC9 02                         DPLC_33c5_309: 	dc.b $2
00025BCA E356                       	dc.b $E3, $56
00025BCC 054A                       	dc.b $5, $4A
00025BCE 03                         DPLC_33c5_30E: 	dc.b $3
00025BCF 736E                       	dc.b $73, $6E
00025BD1 0376                       	dc.b $3, $76
00025BD3 3377                       	dc.b $33, $77
00025BD5 03                         DPLC_33c5_315: 	dc.b $3
00025BD6 B4A3                       	dc.b $B4, $A3
00025BD8 14AF                       	dc.b $14, $AF
00025BDA 34B1                       	dc.b $34, $B1
00025BDC 03                         DPLC_33c5_31C: 	dc.b $3
00025BDD 54B5                       	dc.b $54, $B5
00025BDF B4BB                       	dc.b $B4, $BB
00025BE1 1074                       	dc.b $10, $74
00025BE3 02                         DPLC_33c5_323: 	dc.b $2
00025BE4 F4C7                       	dc.b $F4, $C7
00025BE6 24D7                       	dc.b $24, $D7
00025BE8 02                         DPLC_33c5_328: 	dc.b $2
00025BE9 F4DA                       	dc.b $F4, $DA
00025BEB 14EA                       	dc.b $14, $EA
00025BED 02                         DPLC_33c5_32D: 	dc.b $2
00025BEE F502                       	dc.b $F5, $2
00025BF0 2512                       	dc.b $25, $12
00025BF2 02                         DPLC_33c5_332: 	dc.b $2
00025BF3 F515                       	dc.b $F5, $15
00025BF5 2525                       	dc.b $25, $25
00025BF7 02                         DPLC_33c5_337: 	dc.b $2
00025BF8 F54B                       	dc.b $F5, $4B
00025BFA 755B                       	dc.b $75, $5B
00025BFC 00                         DPLC_33c5_33C: 	dc.b $0
00025BFD 00                         DPLC_33c5_33D: 	dc.b $0
00025BFE 00                         DPLC_33c5_33E: 	dc.b $0
00025BFF 00                         DPLC_33c5_33F: 	dc.b $0
00025C00 02                         DPLC_33c5_340: 	dc.b $2
00025C01 F4DA                       	dc.b $F4, $DA
00025C03 14EA                       	dc.b $14, $EA
00025C05 00                         DPLC_33c5_345: 	dc.b $0
00025C06 02                         DPLC_33c5_346: 	dc.b $2
00025C07 F4DA                       	dc.b $F4, $DA
00025C09 14EA                       	dc.b $14, $EA
00025C0B 00                         DPLC_33c5_34B: 	dc.b $0
00025C0C 00                         DPLC_33c5_34C: 	dc.b $0
00025C0D 00                         DPLC_33c5_34D: 	dc.b $0
00025C0E 02                         DPLC_33c5_34E: 	dc.b $2
00025C0F F4DA                       	dc.b $F4, $DA
00025C11 14EA                       	dc.b $14, $EA
00025C13 00                         DPLC_33c5_353: 	dc.b $0
00025C14 02                         DPLC_33c5_354: 	dc.b $2
00025C15 F4DA                       	dc.b $F4, $DA
00025C17 14EA                       	dc.b $14, $EA
00025C19 00                         DPLC_33c5_359: 	dc.b $0
00025C1A 00                         DPLC_33c5_35A: 	dc.b $0
00025C1B 00                         DPLC_33c5_35B: 	dc.b $0
00025C1C 02                         DPLC_33c5_35C: 	dc.b $2
00025C1D F4DA                       	dc.b $F4, $DA
00025C1F 14EA                       	dc.b $14, $EA
00025C21 00                         DPLC_33c5_361: 	dc.b $0
00025C22 02                         DPLC_33c5_362: 	dc.b $2
00025C23 F4DA                       	dc.b $F4, $DA
00025C25 14EA                       	dc.b $14, $EA
00025C27 00                         DPLC_33c5_367: 	dc.b $0
00025C28                            	even
00025C28                            	even
00025C28                            
00025C28                            ; ---------------------------------------------------------------------------
00025C28                            ; Uncompressed graphics	- Sonic
00025C28                            ; ---------------------------------------------------------------------------
00025C28                            Art_Sonic:	incbin	artunc\sonic.bin	; Sonic
00030A08                            		even
00030A08                            ; ---------------------------------------------------------------------------
00030A08                            ; Compressed graphics - various
00030A08                            ; ---------------------------------------------------------------------------
00030A08                            Nem_Smoke:	incbin	artnem\xxxsmoke.bin	; unused smoke
00030B0C                            		even
00030B0C                            Nem_SyzSparkle:	incbin	artnem\xxxstars.bin	; unused stars
00030B46                            		even
00030B46                            Nem_Shield:	incbin	artnem\shield.bin	; shield
00030CDC                            		even
00030CDC                            Nem_Stars:	incbin	artnem\invstars.bin	; invincibility stars
00030E24                            		even
00030E24                            Nem_LzSonic:	incbin	artnem\xxxlzson.bin	; unused LZ Sonic holding his breath
00030F2E                            		even
00030F2E                            Nem_UnkFire:	incbin	artnem\xxxfire.bin	; unused fireball
00030F80                            		even
00030F80                            Nem_Warp:	incbin	artnem\xxxflash.bin	; unused entry to special stage flash
000311C8                            		even
000311C8                            Nem_Goggle:	incbin	artnem\xxxgoggl.bin	; unused goggles
0003134E                            		even
0003134E                            ; ---------------------------------------------------------------------------
0003134E                            ; Sprite mappings - walls of the special stage
0003134E                            ; ---------------------------------------------------------------------------
0003134E                            Map_SSWalls:
0003134E                            	include "_maps\SSwalls.asm"
0003134E                            ; ---------------------------------------------------------------------------
0003134E                            ; Sprite mappings - walls of the special stage
0003134E                            ; ---------------------------------------------------------------------------
0003134E 0000 0000                  		dc.w byte_2C584-Map_SSWalls, byte_2C58A-Map_SSWalls
00031352 0000 0000                  		dc.w byte_2C590-Map_SSWalls, byte_2C596-Map_SSWalls
00031356 0000 0000                  		dc.w byte_2C59C-Map_SSWalls, byte_2C5A2-Map_SSWalls
0003135A 0000 0000                  		dc.w byte_2C5A8-Map_SSWalls, byte_2C5AE-Map_SSWalls
0003135E 0000 0000                  		dc.w byte_2C5B4-Map_SSWalls, byte_2C5BA-Map_SSWalls
00031362 0000 0000                  		dc.w byte_2C5C0-Map_SSWalls, byte_2C5C6-Map_SSWalls
00031366 0000 0000                  		dc.w byte_2C5CC-Map_SSWalls, byte_2C5D2-Map_SSWalls
0003136A 0000 0000                  		dc.w byte_2C5D8-Map_SSWalls, byte_2C5DE-Map_SSWalls
0003136E 01                         byte_2C584:	dc.b 1
0003136F F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00031374 01                         byte_2C58A:	dc.b 1
00031375 F00F 0009 F0               		dc.b $F0, $F, 0, 9, $F0
0003137A 01                         byte_2C590:	dc.b 1
0003137B F00F 0019 F0               		dc.b $F0, $F, 0, $19, $F0
00031380 01                         byte_2C596:	dc.b 1
00031381 F00F 0029 F0               		dc.b $F0, $F, 0, $29, $F0
00031386 01                         byte_2C59C:	dc.b 1
00031387 F00F 0039 F0               		dc.b $F0, $F, 0, $39, $F0
0003138C 01                         byte_2C5A2:	dc.b 1
0003138D F00F 0049 F0               		dc.b $F0, $F, 0, $49, $F0
00031392 01                         byte_2C5A8:	dc.b 1
00031393 F00F 0059 F0               		dc.b $F0, $F, 0, $59, $F0
00031398 01                         byte_2C5AE:	dc.b 1
00031399 F00F 0069 F0               		dc.b $F0, $F, 0, $69, $F0
0003139E 01                         byte_2C5B4:	dc.b 1
0003139F F00F 0079 F0               		dc.b $F0, $F, 0, $79, $F0
000313A4 01                         byte_2C5BA:	dc.b 1
000313A5 F00F 0089 F0               		dc.b $F0, $F, 0, $89, $F0
000313AA 01                         byte_2C5C0:	dc.b 1
000313AB F00F 0099 F0               		dc.b $F0, $F, 0, $99, $F0
000313B0 01                         byte_2C5C6:	dc.b 1
000313B1 F00F 00A9 F0               		dc.b $F0, $F, 0, $A9, $F0
000313B6 01                         byte_2C5CC:	dc.b 1
000313B7 F00F 00B9 F0               		dc.b $F0, $F, 0, $B9, $F0
000313BC 01                         byte_2C5D2:	dc.b 1
000313BD F00F 00C9 F0               		dc.b $F0, $F, 0, $C9, $F0
000313C2 01                         byte_2C5D8:	dc.b 1
000313C3 F00F 00D9 F0               		dc.b $F0, $F, 0, $D9, $F0
000313C8 01                         byte_2C5DE:	dc.b 1
000313C9 F00F 00E9 F0               		dc.b $F0, $F, 0, $E9, $F0
000313CE                            		even
000313CE                            		even
000313CE                            ; ---------------------------------------------------------------------------
000313CE                            ; Compressed graphics - special stage
000313CE                            ; ---------------------------------------------------------------------------
000313CE                            Nem_SSWalls:	incbin	artnem\sswalls.bin	; special stage walls
00031D06                            		even
00031D06                            Eni_SSBg1:	incbin	mapeni\ssbg1.bin	; special stage background (mappings)
00031E54                            		even
00031E54                            Nem_SSBgFish:	incbin	artnem\ssbg1.bin	; special stage birds and fish background
000332E6                            		even
000332E6                            Eni_SSBg2:	incbin	mapeni\ssbg2.bin	; special stage background (mappings)
000335E6                            		even
000335E6                            Nem_SSBgCloud:	incbin	artnem\ssbg2.bin	; special stage clouds background
00033ADA                            		even
00033ADA                            Nem_SSGOAL:	incbin	artnem\ssgoal.bin	; special stage GOAL block
00033BC8                            		even
00033BC8                            Nem_SSRBlock:	incbin	artnem\ssr.bin		; special stage R block
00033C98                            		even
00033C98                            Nem_SS1UpBlock:	incbin	artnem\ss1up.bin	; special stage 1UP block
00033D8E                            		even
00033D8E                            Nem_SSEmStars:	incbin	artnem\ssemstar.bin	; special stage stars from a collected emerald
00033DEC                            		even
00033DEC                            Nem_SSRedWhite:	incbin	artnem\ssredwhi.bin	; special stage red/white block
00033E7E                            		even
00033E7E                            Nem_SSZone1:	incbin	artnem\sszone1.bin	; special stage ZONE1 block
00033F40                            		even
00033F40                            Nem_SSZone2:	incbin	artnem\sszone2.bin	; ZONE2 block
0003400E                            		even
0003400E                            Nem_SSZone3:	incbin	artnem\sszone3.bin	; ZONE3 block
000340DA                            		even
000340DA                            Nem_SSZone4:	incbin	artnem\sszone4.bin	; ZONE4 block
000341A2                            		even
000341A2                            Nem_SSZone5:	incbin	artnem\sszone5.bin	; ZONE5 block
0003426C                            		even
0003426C                            Nem_SSZone6:	incbin	artnem\sszone6.bin	; ZONE6 block
0003433C                            		even
0003433C                            Nem_SSUpDown:	incbin	artnem\ssupdown.bin	; special stage UP/DOWN block
00034530                            		even
00034530                            Nem_SSEmerald:	incbin	artnem\ssemeral.bin	; special stage chaos emeralds
00034698                            		even
00034698                            Nem_SSGhost:	incbin	artnem\ssghost.bin	; special stage ghost block
00034748                            		even
00034748                            Nem_SSWBlock:	incbin	artnem\ssw.bin		; special stage W block
00034822                            		even
00034822                            Nem_SSGlass:	incbin	artnem\ssglass.bin	; special stage destroyable glass block
000348A6                            		even
000348A6                            Nem_ResultEm:	incbin	artnem\ssresems.bin	; chaos emeralds on special stage results screen
00034A24                            		even
00034A24                            ; ---------------------------------------------------------------------------
00034A24                            ; Compressed graphics - GHZ stuff
00034A24                            ; ---------------------------------------------------------------------------
00034A24                            Nem_Stalk:	incbin	artnem\ghzstalk.bin	; GHZ flower stalk
00034A6E                            		even
00034A6E                            Nem_Swing:	incbin	artnem\ghzswing.bin	; GHZ swinging platform
00034B88                            		even
00034B88                            Nem_Bridge:	incbin	artnem\ghzbridg.bin	; GHZ bridge
00034C74                            		even
00034C74                            Nem_GhzUnkBlock:incbin	artnem\xxxghzbl.bin	; unused GHZ block
00034CBC                            		even
00034CBC                            Nem_Ball:	incbin	artnem\ghzball.bin	; GHZ giant ball
00034E5A                            		even
00034E5A                            Nem_Spikes:	incbin	artnem\spikes.bin	; spikes
00034F16                            		even
00034F16                            Nem_GhzLog:	incbin	artnem\xxxghzlo.bin	; unused GHZ log
0003512A                            		even
0003512A                            Nem_SpikePole:	incbin	artnem\ghzlog.bin	; GHZ spiked log
00035256                            		even
00035256                            Nem_PplRock:	incbin	artnem\ghzrock.bin	; GHZ purple rock
00035384                            		even
00035384                            Nem_GhzWall1:	incbin	artnem\ghzwall1.bin	; GHZ destroyable wall
00035422                            		even
00035422                            Nem_GhzWall2:	incbin	artnem\ghzwall2.bin	; GHZ normal wall
00035482                            		even
00035482                            ; ---------------------------------------------------------------------------
00035482                            ; Compressed graphics - LZ stuff
00035482                            ; ---------------------------------------------------------------------------
00035482                            Nem_Water:	incbin	artnem\lzwater.bin	; LZ water surface
000355A6                            		even
000355A6                            Nem_Splash:	incbin	artnem\lzsplash.bin	; LZ waterfalls and splashes
00035D9A                            		even
00035D9A                            Nem_LzSpikeBall:incbin	artnem\lzspball.bin	; LZ spiked ball on chain
00035F1A                            		even
00035F1A                            Nem_FlapDoor:	incbin	artnem\lzflapdo.bin	; LZ flapping door
00036084                            		even
00036084                            Nem_Bubbles:	incbin	artnem\lzbubble.bin	; LZ bubbles and countdown numbers
000366DA                            		even
000366DA                            Nem_LzBlock3:	incbin	artnem\lzblock3.bin	; LZ 32x16 block
00036790                            		even
00036790                            Nem_LzDoor1:	incbin	artnem\lzvdoor.bin	; LZ vertical door
00036832                            		even
00036832                            Nem_Harpoon:	incbin	artnem\lzharpoo.bin	; LZ harpoon
0003698E                            		even
0003698E                            Nem_LzPole:	incbin	artnem\lzpole.bin	; LZ pole that breaks
000369F2                            		even
000369F2                            Nem_LzDoor2:	incbin	artnem\lzhdoor.bin	; LZ large horizontal door
00036B44                            		even
00036B44                            Nem_LzWheel:	incbin	artnem\lzwheel.bin	; LZ wheel from corner of conveyor belt
00037026                            		even
00037026                            Nem_Gargoyle:	incbin	artnem\lzgargoy.bin	; LZ gargoyle head and spitting fire
00037196                            		even
00037196                            Nem_LzBlock2:	incbin	artnem\lzblock2.bin	; LZ blocks
0003744E                            		even
0003744E                            Nem_LzPlatfm:	incbin	artnem\lzptform.bin	; LZ rising platforms
00037586                            		even
00037586                            Nem_Cork:	incbin	artnem\lzcork.bin	; LZ cork block
000376B0                            		even
000376B0                            Nem_LzBlock1:	incbin	artnem\lzblock1.bin	; LZ 32x32 block
000377C0                            		even
000377C0                            ; ---------------------------------------------------------------------------
000377C0                            ; Compressed graphics - MZ stuff
000377C0                            ; ---------------------------------------------------------------------------
000377C0                            Nem_MzMetal:	incbin	artnem\mzmetal.bin	; MZ metal blocks
00037A4E                            		even
00037A4E                            Nem_MzSwitch:	incbin	artnem\mzswitch.bin	; MZ switch
00037B0C                            		even
00037B0C                            Nem_MzGlass:	incbin	artnem\mzglassy.bin	; MZ green glassy block
00037BC4                            		even
00037BC4                            Nem_GhzGrass:	incbin	artnem\xxxgrass.bin	; unused grass (GHZ or MZ?)
00037C18                            		even
00037C18                            Nem_MzFire:	incbin	artnem\mzfire.bin	; MZ fireballs
00037EEA 00                         		even
00037EEA                            Nem_Lava:	incbin	artnem\mzlava.bin	; MZ lava
00038800                            		even
00038800                            Nem_MzBlock:	incbin	artnem\mzblock.bin	; MZ green pushable block
00038964                            		even
00038964                            Nem_MzUnkBlock:	incbin	artnem\xxxmzblo.bin	; MZ unused background block
000389EC                            		even
000389EC                            ; ---------------------------------------------------------------------------
000389EC                            ; Compressed graphics - SLZ stuff
000389EC                            ; ---------------------------------------------------------------------------
000389EC                            Nem_Seesaw:	incbin	artnem\slzseesa.bin	; SLZ seesaw
00038C28                            		even
00038C28                            Nem_SlzSpike:	incbin	artnem\slzspike.bin	; SLZ spikeball that sits on a seesaw
00038D6E                            		even
00038D6E                            Nem_Fan:	incbin	artnem\slzfan.bin	; SLZ fan
00038FB2                            		even
00038FB2                            Nem_SlzWall:	incbin	artnem\slzwall.bin	; SLZ smashable wall
00039014                            		even
00039014                            Nem_Pylon:	incbin	artnem\slzpylon.bin	; SLZ foreground pylon
000390F6                            		even
000390F6                            Nem_SlzSwing:	incbin	artnem\slzswing.bin	; SLZ swinging platform
000392D8                            		even
000392D8                            Nem_SlzBlock:	incbin	artnem\slzblock.bin	; SLZ 32x32 block
000393E4                            		even
000393E4                            Nem_SlzCannon:	incbin	artnem\slzcanno.bin	; SLZ fireball launcher cannon
00039488                            		even
00039488                            ; ---------------------------------------------------------------------------
00039488                            ; Compressed graphics - SYZ stuff
00039488                            ; ---------------------------------------------------------------------------
00039488                            Nem_Bumper:	incbin	artnem\syzbumpe.bin	; SYZ bumper
000395F2                            		even
000395F2                            Nem_SyzSpike2:	incbin	artnem\syzsspik.bin	; SYZ small spikeball
00039654                            		even
00039654                            Nem_LzSwitch:	incbin	artnem\switch.bin	; LZ/SYZ/SBZ switch
00039736                            		even
00039736                            Nem_SyzSpike1:	incbin	artnem\syzlspik.bin	; SYZ/SBZ large spikeball
000399C4                            		even
000399C4                            ; ---------------------------------------------------------------------------
000399C4                            ; Compressed graphics - SBZ stuff
000399C4                            ; ---------------------------------------------------------------------------
000399C4                            Nem_SbzWheel1:	incbin	artnem\sbzwhee1.bin	; SBZ spot on rotating wheel that Sonic runs around
00039A18                            		even
00039A18                            Nem_SbzWheel2:	incbin	artnem\sbzwhee2.bin	; SBZ wheel that grabs Sonic
00039CB4                            		even
00039CB4                            Nem_Cutter:	incbin	artnem\sbzcutte.bin	; SBZ pizza cutter
00039EB8                            		even
00039EB8                            Nem_Stomper:	incbin	artnem\sbzstomp.bin	; SBZ stomper
0003A056                            		even
0003A056                            Nem_SpinPform:	incbin	artnem\sbzpform.bin	; SBZ spinning platform
0003A386                            		even
0003A386                            Nem_TrapDoor:	incbin	artnem\sbztrapd.bin	; SBZ trapdoor
0003A564                            		even
0003A564                            Nem_SbzFloor:	incbin	artnem\sbzfloor.bin	; SBZ collapsing floor
0003A5BC                            		even
0003A5BC                            Nem_Electric:	incbin	artnem\sbzshock.bin	; SBZ electric shock orb
0003A786 00                         		even
0003A786                            Nem_SbzBlock:	incbin	artnem\sbzvanis.bin	; SBZ vanishing block
0003A884                            		even
0003A884                            Nem_FlamePipe:	incbin	artnem\sbzflame.bin	; SBZ flaming pipe
0003AA10                            		even
0003AA10                            Nem_SbzDoor1:	incbin	artnem\sbzvdoor.bin	; SBZ small vertical door
0003AA60                            		even
0003AA60                            Nem_SlideFloor:	incbin	artnem\sbzslide.bin	; SBZ floor that slides away
0003AAB8                            		even
0003AAB8                            Nem_SbzDoor2:	incbin	artnem\sbzhdoor.bin	; SBZ large horizontal door
0003ABB4                            		even
0003ABB4                            Nem_Girder:	incbin	artnem\sbzgirde.bin	; SBZ crushing girder
0003ACCA                            		even
0003ACCA                            ; ---------------------------------------------------------------------------
0003ACCA                            ; Compressed graphics - enemies
0003ACCA                            ; ---------------------------------------------------------------------------
0003ACCA                            Nem_BallHog:	incbin	artnem\ballhog.bin	; ball hog
0003B138 00                         		even
0003B138                            Nem_Crabmeat:	incbin	artnem\crabmeat.bin	; crabmeat
0003B2E2 00                         		even
0003B2E2                            Nem_Buzz:	incbin	artnem\buzzbomb.bin	; buzz bomber
0003B6A4 00                         		even
0003B6A4                            Nem_UnkExplode:	incbin	artnem\xxxexplo.bin	; unused explosion
0003B88C                            		even
0003B88C                            Nem_Burrobot:	incbin	artnem\burrobot.bin	; burrobot
0003BA44 00                         		even
0003BA44                            Nem_Chopper:	incbin	artnem\chopper.bin	; chopper
0003BB8E                            		even
0003BB8E                            Nem_Jaws:	incbin	artnem\jaws.bin		; jaws
0003BE18                            		even
0003BE18                            Nem_Roller:	incbin	artnem\roller.bin	; roller
0003C43C                            		even
0003C43C                            Nem_Motobug:	incbin	artnem\motobug.bin	; moto bug
0003C632                            		even
0003C632                            Nem_Newtron:	incbin	artnem\newtron.bin	; newtron
0003CC50                            		even
0003CC50                            Nem_Yadrin:	incbin	artnem\yadrin.bin	; yadrin
0003D050 00                         		even
0003D050                            Nem_Basaran:	incbin	artnem\basaran.bin	; basaran
0003D34C                            		even
0003D34C                            Nem_Splats:	incbin	artnem\splats.bin	; splats
0003D594                            		even
0003D594                            Nem_Bomb:	incbin	artnem\bomb.bin		; bomb
0003D82C                            		even
0003D82C                            Nem_Orbinaut:	incbin	artnem\orbinaut.bin	; orbinaut
0003DA0A                            		even
0003DA0A                            Nem_Cater:	incbin	artnem\caterkil.bin	; caterkiller
0003DB98                            		even
0003DB98                            ; ---------------------------------------------------------------------------
0003DB98                            ; Compressed graphics - various
0003DB98                            ; ---------------------------------------------------------------------------
0003DB98                            Nem_TitleCard:	incbin	artnem\ttlcards.bin	; title cards
0003E0C8                            		even
0003E0C8                            Nem_Hud:	incbin	artnem\hud.bin		; HUD (rings, time, score)
0003E1BE                            		even
0003E1BE                            Nem_Lives:	incbin	artnem\lifeicon.bin	; life counter icon
0003E2C4                            		even
0003E2C4                            Nem_Ring:	incbin	artnem\rings.bin	; rings
0003E3B8                            		even
0003E3B8                            Nem_Monitors:	incbin	artnem\monitors.bin	; monitors
0003E8FC                            		even
0003E8FC                            Nem_Explode:	incbin	artnem\explosio.bin	; explosion
0003EF62                            		even
0003EF62                            Nem_Points:	incbin	artnem\points.bin	; points from destroyed enemy or object
0003F012                            		even
0003F012                            Nem_GameOver:	incbin	artnem\gameover.bin	; game over / time over
0003F1A4                            		even
0003F1A4                            Nem_HSpring:	incbin	artnem\springh.bin	; horizontal spring
0003F2B8                            		even
0003F2B8                            Nem_VSpring:	incbin	artnem\springv.bin	; vertical spring
0003F38A                            		even
0003F38A                            Nem_SignPost:	incbin	artnem\signpost.bin	; end of level signpost
0003F806                            		even
0003F806                            Nem_Lamp:	incbin	artnem\lamppost.bin	; lamppost
0003F8C6                            		even
0003F8C6                            Nem_BigFlash:	incbin	artnem\rngflash.bin	; flash from giant ring
0003FA3A                            		even
0003FA3A                            Nem_Bonus:	incbin	artnem\bonus.bin	; hidden bonuses at end of a level
0003FD3C                            		even
0003FD3C                            ; ---------------------------------------------------------------------------
0003FD3C                            ; Compressed graphics - continue screen
0003FD3C                            ; ---------------------------------------------------------------------------
0003FD3C                            Nem_ContSonic:	incbin	artnem\cntsonic.bin	; Sonic on continue screen
0003FFEC                            		even
0003FFEC                            Nem_MiniSonic:	incbin	artnem\cntother.bin	; mini Sonic and text on continue screen
00040226                            		even
00040226                            ; ---------------------------------------------------------------------------
00040226                            ; Compressed graphics - animals
00040226                            ; ---------------------------------------------------------------------------
00040226                            Nem_Rabbit:	incbin	artnem\rabbit.bin	; rabbit
0004037E                            		even
0004037E                            Nem_Chicken:	incbin	artnem\chicken.bin	; chicken
000404DA                            		even
000404DA                            Nem_BlackBird:	incbin	artnem\blackbrd.bin	; blackbird
00040656                            		even
00040656                            Nem_Seal:	incbin	artnem\seal.bin		; seal
00040772                            		even
00040772                            Nem_Pig:	incbin	artnem\pig.bin		; pig
000408A8                            		even
000408A8                            Nem_Flicky:	incbin	artnem\flicky.bin	; flicky
000409E2                            		even
000409E2                            Nem_Squirrel:	incbin	artnem\squirrel.bin	; squirrel
00040B3E                            		even
00040B3E                            ; ---------------------------------------------------------------------------
00040B3E                            ; Compressed graphics - primary patterns and block mappings
00040B3E                            ; ---------------------------------------------------------------------------
00040B3E                            Blk16_GHZ:	incbin	map16\ghz.bin
00041452                            		even
00041452                            Nem_GHZ_1st:	incbin	artnem\8x8ghz1.bin	; GHZ primary patterns
00042D60                            		even
00042D60                            Nem_GHZ_2nd:	incbin	artnem\8x8ghz2.bin	; GHZ secondary patterns
000440E0                            		even
000440E0                            Blk256_GHZ:	incbin	map256\ghz.bin
0004651A                            		even
0004651A                            Blk16_LZ:	incbin	map16\lz.bin
00046C54                            		even
00046C54                            Nem_LZ:		incbin	artnem\8x8lz.bin	; LZ primary patterns
000490A8                            		even
000490A8                            Blk256_LZ:	incbin	map256\lz.bin
0004BA28                            		even
0004BA28                            Blk16_MZ:	incbin	map16\mz.bin
0004C190                            		even
0004C190                            Nem_MZ:		incbin	artnem\8x8mz.bin	; MZ primary patterns
0004EACC                            		even
0004EACC                            Blk256_MZ:	incbin	map256\mz.bin
00050270                            		even
00050270                            Blk16_SLZ:	incbin	map16\slz.bin
0005093A                            		even
0005093A                            Nem_SLZ:	incbin	artnem\8x8slz.bin	; SLZ primary patterns
0005288E                            		even
0005288E                            Blk256_SLZ:	incbin	map256\slz.bin
00052F08                            		even
00052F08                            Blk16_SYZ:	incbin	map16\syz.bin
00053B2E                            		even
00053B2E                            Nem_SYZ:	incbin	artnem\8x8syz.bin	; SYZ primary patterns
000580C0                            		even
000580C0                            Blk256_SYZ:	incbin	map256\syz.bin
0005A11C                            		even
0005A11C                            Blk16_SBZ:	incbin	map16\sbz.bin
0005B064                            		even
0005B064                            Nem_SBZ:	incbin	artnem\8x8sbz.bin	; SBZ primary patterns
0005DA28                            		even
0005DA28                            Blk256_SBZ:	incbin	map256\sbz.bin
0006051E                            		even
0006051E                            Blk16_BHZ:	incbin	map16\bhz.bin
00060CD0                            		even
00060CD0                            Nem_BHZ:	incbin	artnem\8x8bhz.bin	; GHZ primary patterns
0006297C                            		even
0006297C                            Blk256_BHZ:	incbin	map256\bhz.bin
0006481A                            		even
0006481A                            ; ---------------------------------------------------------------------------
0006481A                            ; Compressed graphics - bosses and ending sequence
0006481A                            ; ---------------------------------------------------------------------------
0006481A                            Nem_Eggman:	incbin	artnem\bossmain.bin	; boss main patterns
00065034 00                         		even
00065034                            Nem_Tetoboss:	incbin	artnem\TetoBoss.bin	; boss main patterns
00065682                            		even
00065682                            Nem_Peartobomb:	incbin	artnem\peartobomb.bin	; boss main patterns
000656FC                            		even
000656FC                            Nem_Weapons:	incbin	artnem\bossxtra.bin	; boss add-ons and weapons
000659E6                            		even
000659E6                            Nem_Prison:	incbin	artnem\prison.bin	; prison capsule
0006626A                            		even
0006626A                            Nem_Sbz2Eggman:	incbin	artnem\sbz2boss.bin	; Eggman in SBZ2 and FZ
00066FC0 00                         		even
00066FC0                            Nem_FzBoss:	incbin	artnem\fzboss.bin	; FZ boss
00067728                            		even
00067728                            Nem_FzEggman:	incbin	artnem\fzboss2.bin	; Eggman after the FZ boss
00067CA8                            		even
00067CA8                            Nem_Exhaust:	incbin	artnem\bossflam.bin	; boss exhaust flame
00067DC8                            		even
00067DC8                            Nem_EndEm:	incbin	artnem\endemera.bin	; ending sequence chaos emeralds
00067FC6                            		even
00067FC6                            Nem_EndSonic:	incbin	artnem\endsonic.bin	; ending sequence Sonic
000691A4                            		even
000691A4                            Nem_TryAgain:	incbin	artnem\tryagain.bin	; ending "try again" screen
00069AE8                            		even
00069AE8                            Nem_EndEggman:	incbin	artnem\xxxend.bin	; unused boss sequence on ending
00069EBE                            		even
00069EBE                            Kos_EndFlowers:	incbin	artkos\flowers.bin	; ending sequence animated flowers
0006A44E                            		even
0006A44E                            Nem_EndFlower:	incbin	artnem\endflowe.bin	; ending sequence flowers
0006A6D6                            		even
0006A6D6                            Nem_CreditText:	incbin	artnem\credits.bin	; credits alphabet
0006ACC4 00                         		even
0006ACC4                            Nem_EndStH:	incbin	artnem\endtext.bin	; ending sequence "Sonic the Hedgehog" text
0006AF4C                            		even
0006AF4C                            		incbin	misc\padding2.bin
0006B050                            		even
0006B050                            ; ---------------------------------------------------------------------------
0006B050                            ; Collision data
0006B050                            ; ---------------------------------------------------------------------------
0006B050                            AngleMap:	incbin	collide\anglemap.bin	; floor angle map
0006B150                            		even
0006B150                            CollArray1:	incbin	collide\carray_n.bin	; normal collision array
0006C150                            		even
0006C150                            CollArray2:	incbin	collide\carray_r.bin	; rotated collision array
0006D150                            		even
0006D150                            Col_GHZ:	incbin	collide\ghz.bin		; GHZ index
0006D308 00                         		even
0006D308                            Col_LZ:		incbin	collide\lz.bin		; LZ index
0006D470                            		even
0006D470                            Col_MZ:		incbin	collide\mz.bin		; MZ index
0006D600 00                         		even
0006D600                            Col_SLZ:	incbin	collide\slz.bin		; SLZ index
0006D7F4                            		even
0006D7F4                            Col_SYZ:	incbin	collide\syz.bin		; SYZ index
0006D9FA                            		even
0006D9FA                            Col_SBZ:	incbin	collide\sbz.bin		; SBZ index
0006DC98                            		even
0006DC98                            Col_BHZ:	incbin	collide\bhz.bin		; GHZ index
0006DDF8                            		even
0006DDF8                            ; ---------------------------------------------------------------------------
0006DDF8                            ; Special layouts
0006DDF8                            ; ---------------------------------------------------------------------------
0006DDF8                            SS_1:		incbin	sslayout\1.bin
0006E040                            		even
0006E040                            SS_2:		incbin	sslayout\2.bin
0006E3F8                            		even
0006E3F8                            SS_3:		incbin	sslayout\3.bin
0006E754                            		even
0006E754                            SS_4:		incbin	sslayout\4.bin
0006EC2E                            		even
0006EC2E                            SS_5:		incbin	sslayout\5.bin
0006F0DE                            		even
0006F0DE                            SS_6:		incbin	sslayout\6.bin
0006F3D0                            		even
0006F3D0                            ; ---------------------------------------------------------------------------
0006F3D0                            ; Animated uncompressed graphics
0006F3D0                            ; ---------------------------------------------------------------------------
0006F3D0                            Art_GhzWater:	incbin	artunc\ghzwater.bin	; GHZ waterfall
0006F5D0                            		even
0006F5D0                            Art_GhzFlower1:	incbin	artunc\ghzflowl.bin	; GHZ large flower
0006F9D0                            		even
0006F9D0                            Art_GhzFlower2:	incbin	artunc\ghzflows.bin	; GHZ small flower
0006FE50                            		even
0006FE50                            Art_MzLava1:	incbin	artunc\mzlava1.bin	; MZ lava surface
00070150                            		even
00070150                            Art_MzLava2:	incbin	artunc\mzlava2.bin	; MZ lava
00070750                            		even
00070750                            Art_MzTorch:	incbin	artunc\mztorch.bin	; MZ torch in background
00070A50                            		even
00070A50                            Art_SbzSmoke:	incbin	artunc\sbzsmoke.bin	; SBZ smoke in background
000714D0                            		even
000714D0                            
000714D0                            ; ---------------------------------------------------------------------------
000714D0                            ; Level	layout index
000714D0                            ; ---------------------------------------------------------------------------
000714D0 0000 0000 0000             Level_Index:	dc.w Level_GHZ1-Level_Index, Level_GHZbg-Level_Index, byte_68D70-Level_Index
000714D6 0000 0000 0000             		dc.w Level_GHZ2-Level_Index, Level_GHZbg-Level_Index, byte_68E3C-Level_Index
000714DC 0000 0000 0000             		dc.w Level_GHZ3-Level_Index, Level_GHZbg-Level_Index, byte_68F84-Level_Index
000714E2 0000 0000 0000             		dc.w byte_68F88-Level_Index, byte_68F88-Level_Index, byte_68F88-Level_Index
000714E8 0000 0000 0000             		dc.w Level_LZ1-Level_Index, Level_LZbg-Level_Index, byte_69190-Level_Index
000714EE 0000 0000 0000             		dc.w Level_LZ2-Level_Index, Level_LZbg-Level_Index, byte_6922E-Level_Index
000714F4 0000 0000 0000             		dc.w Level_LZ3-Level_Index, Level_LZbg-Level_Index, byte_6934C-Level_Index
000714FA 0000 0000 0000             		dc.w Level_SBZ3-Level_Index, Level_LZbg-Level_Index, byte_6940A-Level_Index
00071500 0000 0000 0000             		dc.w Level_MZ1-Level_Index, Level_MZ1bg-Level_Index, Level_MZ1-Level_Index
00071506 0000 0000 0000             		dc.w Level_MZ2-Level_Index, Level_MZ2bg-Level_Index, byte_6965C-Level_Index
0007150C 0000 0000 0000             		dc.w Level_MZ3-Level_Index, Level_MZ3bg-Level_Index, byte_697E6-Level_Index
00071512 0000 0000 0000             		dc.w byte_697EA-Level_Index, byte_697EA-Level_Index, byte_697EA-Level_Index
00071518 0000 0000 0000             		dc.w Level_SLZ1-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0007151E 0000 0000 0000             		dc.w Level_SLZ2-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
00071524 0000 0000 0000             		dc.w Level_SLZ3-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0007152A 0000 0000 0000             		dc.w byte_69B84-Level_Index, byte_69B84-Level_Index, byte_69B84-Level_Index
00071530 0000 0000 0000             		dc.w Level_SYZ1-Level_Index, Level_SYZbg-Level_Index, byte_69C7E-Level_Index
00071536 0000 0000 0000             		dc.w Level_SYZ2-Level_Index, Level_SYZbg-Level_Index, byte_69D86-Level_Index
0007153C 0000 0000 0000             		dc.w Level_SYZ3-Level_Index, Level_SYZbg-Level_Index, byte_69EE4-Level_Index
00071542 0000 0000 0000             		dc.w byte_69EE8-Level_Index, byte_69EE8-Level_Index, byte_69EE8-Level_Index
00071548 0000 0000 0000             		dc.w Level_SBZ1-Level_Index, Level_SBZ1bg-Level_Index, Level_SBZ1bg-Level_Index
0007154E 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, Level_SBZ2bg-Level_Index
00071554 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, byte_6A2F8-Level_Index
0007155A 0000 0000 0000             		dc.w byte_6A2FC-Level_Index, byte_6A2FC-Level_Index, byte_6A2FC-Level_Index
00071560 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
00071566 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
0007156C 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
00071572 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
00071578 0000 0000 0000             		dc.w Level_BHZ1-Level_Index, Level_BHZbg-Level_Index, byte_68D70-Level_Index
0007157E 0000 0000 0000             		dc.w Level_BHZ2-Level_Index, Level_BHZbg-Level_Index, byte_68E3C-Level_Index
00071584 0000 0000 0000             		dc.w Level_BHZ3-Level_Index, Level_BHZbg-Level_Index, byte_68F84-Level_Index
0007158A 0000 0000 0000             		dc.w byte_68F88-Level_Index, byte_68F88-Level_Index, byte_68F88-Level_Index
00071590                            
00071590                            Level_GHZ1:	incbin	levels\ghz1.bin
00071682                            		even
00071682 0000 0000                  byte_68D70:	dc.b 0,	0, 0, 0
00071686                            Level_GHZ2:	incbin	levels\ghz2.bin
0007174E                            		even
0007174E 0000 0000                  byte_68E3C:	dc.b 0,	0, 0, 0
00071752                            Level_GHZ3:	incbin	levels\ghz3.bin
00071874                            		even
00071874                            Level_GHZbg:	incbin	levels\ghzbg.bin
00071896                            		even
00071896 0000 0000                  byte_68F84:	dc.b 0,	0, 0, 0
0007189A 0000 0000                  byte_68F88:	dc.b 0,	0, 0, 0
0007189E                            
0007189E                            Level_LZ1:	incbin	levels\lz1.bin
000719A0                            		even
000719A0                            Level_LZbg:	incbin	levels\lzbg.bin
00071AA2                            		even
00071AA2 0000 0000                  byte_69190:	dc.b 0,	0, 0, 0
00071AA6                            Level_LZ2:	incbin	levels\lz2.bin
00071B40                            		even
00071B40 0000 0000                  byte_6922E:	dc.b 0,	0, 0, 0
00071B44                            Level_LZ3:	incbin	levels\lz3.bin
00071C5E                            		even
00071C5E 0000 0000                  byte_6934C:	dc.b 0,	0, 0, 0
00071C62                            Level_SBZ3:	incbin	levels\sbz3.bin
00071D1C                            		even
00071D1C 0000 0000                  byte_6940A:	dc.b 0,	0, 0, 0
00071D20                            
00071D20                            Level_MZ1:	incbin	levels\mz1.bin
00071DBE                            		even
00071DBE                            Level_MZ1bg:	incbin	levels\mz1bg.bin
00071E38                            		even
00071E38                            Level_MZ2:	incbin	levels\mz2.bin
00071EDC                            		even
00071EDC                            Level_MZ2bg:	incbin	levels\mz2bg.bin
00071F6E                            		even
00071F6E 0000 0000                  byte_6965C:	dc.b 0,	0, 0, 0
00071F72                            Level_MZ3:	incbin	levels\mz3.bin
00072054                            		even
00072054                            Level_MZ3bg:	incbin	levels\mz3bg.bin
000720F8 00                         		even
000720F8 0000 0000                  byte_697E6:	dc.b 0,	0, 0, 0
000720FC 0000 0000                  byte_697EA:	dc.b 0,	0, 0, 0
00072100                            
00072100                            Level_SLZ1:	incbin	levels\slz1.bin
00072212                            		even
00072212                            Level_SLZbg:	incbin	levels\slzbg.bin
0007222C                            		even
0007222C                            Level_SLZ2:	incbin	levels\slz2.bin
0007231C                            		even
0007231C                            Level_SLZ3:	incbin	levels\slz3.bin
00072436                            		even
00072436 0000 0000                  byte_69B84:	dc.b 0,	0, 0, 0
0007243A                            
0007243A                            Level_SYZ1:	incbin	levels\syz1.bin
000724F6 00                         		even
000724F6                            Level_SYZbg:	incbin	levels\syzbg.bin
00072530                            		even
00072530 0000 0000                  byte_69C7E:	dc.b 0,	0, 0, 0
00072534                            Level_SYZ2:	incbin	levels\syz2.bin
00072638                            		even
00072638 0000 0000                  byte_69D86:	dc.b 0,	0, 0, 0
0007263C                            Level_SYZ3:	incbin	levels\syz3.bin
00072796 00                         		even
00072796 0000 0000                  byte_69EE4:	dc.b 0,	0, 0, 0
0007279A 0000 0000                  byte_69EE8:	dc.b 0,	0, 0, 0
0007279E                            
0007279E                            Level_SBZ1:	incbin	levels\sbz1.bin
000728C0                            		even
000728C0                            Level_SBZ1bg:	incbin	levels\sbz1bg.bin
000728FE                            		even
000728FE                            Level_SBZ2:	incbin	levels\sbz2.bin
00072A40                            		even
00072A40                            Level_SBZ2bg:	incbin	levels\sbz2bg.bin
00072BAA                            		even
00072BAA 0000 0000                  byte_6A2F8:	dc.b 0,	0, 0, 0
00072BAE 0000 0000                  byte_6A2FC:	dc.b 0,	0, 0, 0
00072BB2                            Level_End:	incbin	levels\ending.bin
00072BE2 00                         		even
00072BE2 0000 0000                  byte_6A320:	dc.b 0,	0, 0, 0
00072BE6                            Level_BHZ1:	incbin	levels\bhz1.bin
00072CD8                            		even
00072CD8                            
00072CD8                            Level_BHZ2:	incbin	levels\bhz2.bin
00072DA0                            		even
00072DA0                            
00072DA0                            Level_BHZ3:	incbin	levels\bhz3.bin
00072EC2                            		even
00072EC2                            Level_BHZbg:	incbin	levels\bhzbg.bin
00072FC4                            		even
00072FC4                            ; ---------------------------------------------------------------------------
00072FC4                            ; Animated uncompressed giant ring graphics
00072FC4                            ; ---------------------------------------------------------------------------
00072FC4                            Art_BigRing:	incbin	artunc\bigring.bin
00073C04                            		even
00073C04                            
00073C04                            		incbin	misc\padding3.bin
00073CA0                            		even
00073CA0                            
00073CA0                            ; ---------------------------------------------------------------------------
00073CA0                            ; Sprite locations index
00073CA0                            ; ---------------------------------------------------------------------------
00073CA0 0000 0000                  ObjPos_Index:	dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00073CA4 0000 0000                  		dc.w ObjPos_GHZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00073CA8 0000 0000                  		dc.w ObjPos_GHZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00073CAC 0000 0000                  		dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00073CB0 0000 0000                  		dc.w ObjPos_LZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00073CB4 0000 0000                  		dc.w ObjPos_LZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00073CB8 0000 0000                  		dc.w ObjPos_LZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00073CBC 0000 0000                  		dc.w ObjPos_SBZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00073CC0 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00073CC4 0000 0000                  		dc.w ObjPos_MZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00073CC8 0000 0000                  		dc.w ObjPos_MZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00073CCC 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00073CD0 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00073CD4 0000 0000                  		dc.w ObjPos_SLZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00073CD8 0000 0000                  		dc.w ObjPos_SLZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00073CDC 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00073CE0 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00073CE4 0000 0000                  		dc.w ObjPos_SYZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00073CE8 0000 0000                  		dc.w ObjPos_SYZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00073CEC 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00073CF0 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00073CF4 0000 0000                  		dc.w ObjPos_SBZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00073CF8 0000 0000                  		dc.w ObjPos_FZ-ObjPos_Index, ObjPos_Null-ObjPos_Index
00073CFC 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00073D00 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00073D04 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00073D08 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00073D0C 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00073D10 0000 0000                  		dc.w ObjPos_BHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00073D14 0000 0000                  		dc.w ObjPos_BHZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00073D18 0000 0000                  		dc.w ObjPos_BHZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00073D1C 0000 0000                  		dc.w ObjPos_BHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00073D20                            ObjPos_LZxpf_Index:
00073D20 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_LZxpf_Index, ObjPos_LZ1pf2-ObjPos_LZxpf_Index
00073D24 0000 0000                  		dc.w ObjPos_LZ2pf1-ObjPos_LZxpf_Index, ObjPos_LZ2pf2-ObjPos_LZxpf_Index
00073D28 0000 0000                  		dc.w ObjPos_LZ3pf1-ObjPos_LZxpf_Index, ObjPos_LZ3pf2-ObjPos_LZxpf_Index
00073D2C 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_LZxpf_Index, ObjPos_LZ1pf2-ObjPos_LZxpf_Index
00073D30                            
00073D30                            ObjPos_SBZ1pf_Index:
00073D30 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_SBZ1pf_Index, ObjPos_SBZ1pf2-ObjPos_SBZ1pf_Index
00073D34 0000 0000                  		dc.w ObjPos_SBZ1pf3-ObjPos_SBZ1pf_Index, ObjPos_SBZ1pf4-ObjPos_SBZ1pf_Index
00073D38 0000 0000                  		dc.w ObjPos_SBZ1pf5-ObjPos_SBZ1pf_Index, ObjPos_SBZ1pf6-ObjPos_SBZ1pf_Index
00073D3C 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_SBZ1pf_Index, ObjPos_SBZ1pf2-ObjPos_SBZ1pf_Index
00073D40 FFFF 0000 0000             		dc.b $FF, $FF, 0, 0, 0,	0
00073D46                            ObjPos_GHZ1:	incbin	objpos\ghz1.bin
00074592                            		even
00074592                            ObjPos_GHZ2:	incbin	objpos\ghz2.bin
0007485C                            		even
0007485C                            ObjPos_GHZ3:	incbin	objpos\ghz3.bin
00075228                            		even
00075228                            ObjPos_LZ1:	incbin	objpos\lz1.bin
000755D0                            		even
000755D0                            ObjPos_LZ2:	incbin	objpos\lz2.bin
00075906                            		even
00075906                            ObjPos_LZ3:	incbin	objpos\lz3.bin
00075E1C                            		even
00075E1C                            ObjPos_SBZ3:	incbin	objpos\sbz3.bin
000762B4                            		even
000762B4                            ObjPos_LZ1pf1:	incbin	objpos\lz1pf1.bin
000762E6                            		even
000762E6                            ObjPos_LZ1pf2:	incbin	objpos\lz1pf2.bin
00076318                            		even
00076318                            ObjPos_LZ2pf1:	incbin	objpos\lz2pf1.bin
0007634A                            		even
0007634A                            ObjPos_LZ2pf2:	incbin	objpos\lz2pf2.bin
0007637C                            		even
0007637C                            ObjPos_LZ3pf1:	incbin	objpos\lz3pf1.bin
000763C6                            		even
000763C6                            ObjPos_LZ3pf2:	incbin	objpos\lz3pf2.bin
00076404                            		even
00076404                            ObjPos_MZ1:	incbin	objpos\mz1.bin
00076770                            		even
00076770                            ObjPos_MZ2:	incbin	objpos\mz2.bin
00076C1A                            		even
00076C1A                            ObjPos_MZ3:	incbin	objpos\mz3.bin
00077190                            		even
00077190                            ObjPos_SLZ1:	incbin	objpos\slz1.bin
000771BA                            		even
000771BA                            ObjPos_SLZ2:	incbin	objpos\slz2.bin
00077622                            		even
00077622                            ObjPos_SLZ3:	incbin	objpos\slz3.bin
00077C04                            		even
00077C04                            ObjPos_SYZ1:	incbin	objpos\syz1.bin
00078276                            		even
00078276                            ObjPos_SYZ2:	incbin	objpos\syz2.bin
000787E0                            		even
000787E0                            ObjPos_SYZ3:	incbin	objpos\syz3.bin
00078DE6                            		even
00078DE6                            ObjPos_SBZ1:	incbin	objpos\sbz1.bin
00079524                            		even
00079524                            ObjPos_SBZ2:	incbin	objpos\sbz2.bin
00079C02                            		even
00079C02                            ObjPos_FZ:	incbin	objpos\fz.bin
00079C14                            		even
00079C14                            ObjPos_SBZ1pf1:	incbin	objpos\sbz1pf1.bin
00079C46                            		even
00079C46                            ObjPos_SBZ1pf2:	incbin	objpos\sbz1pf2.bin
00079C78                            		even
00079C78                            ObjPos_SBZ1pf3:	incbin	objpos\sbz1pf3.bin
00079CAA                            		even
00079CAA                            ObjPos_SBZ1pf4:	incbin	objpos\sbz1pf4.bin
00079CDC                            		even
00079CDC                            ObjPos_SBZ1pf5:	incbin	objpos\sbz1pf5.bin
00079D0E                            		even
00079D0E                            ObjPos_SBZ1pf6:	incbin	objpos\sbz1pf6.bin
00079D46                            		even
00079D46                            ObjPos_End:	incbin	objpos\ending.bin
00079EA2                            		even
00079EA2                            ObjPos_BHZ1:	incbin	objpos\bhz1.bin
0007A4A8                            		even
0007A4A8                            ObjPos_BHZ2:	incbin	objpos\bhz2.bin
0007AA6C                            		even
0007AA6C                            ObjPos_BHZ3:	incbin	objpos\bhz3.bin
0007B126                            		even
0007B126 FFFF 0000 0000             ObjPos_Null:	dc.b $FF, $FF, 0, 0, 0,	0
0007B12C                            ; ---------------------------------------------------------------------------
0007B12C                            		incbin	misc\padding4.bin
0007B756                            		even
0007B756                            
0007B756 0000 0000                  Go_SoundTypes:	dc.l SoundTypes		; XREF: Sound_Play
0007B75A 0000 0000                  Go_SoundD0:	dc.l SoundD0Index	; XREF: Sound_D0toDF
0007B75E 0000 0000                  Go_MusicIndex:	dc.l MusicIndex		; XREF: Sound_81to9F
0007B762 0000 0000                  Go_SoundIndex:	dc.l SoundIndex		; XREF: Sound_A0toCF
0007B766 0000 0000                  off_719A0:	dc.l byte_71A94		; XREF: Sound_81to9F
0007B76A 0000 0000                  Go_PSGIndex:	dc.l PSG_Index		; XREF: sub_72926
0007B76E                            ; ---------------------------------------------------------------------------
0007B76E                            ; PSG instruments used in music
0007B76E                            ; ---------------------------------------------------------------------------
0007B76E 0000 0000 0000 0000 0000+  PSG_Index:	dc.l PSG1, PSG2, PSG3
0007B77A 0000 0000 0000 0000 0000+  		dc.l PSG4, PSG5, PSG6
0007B786 0000 0000 0000 0000 0000+  		dc.l PSG7, PSG8, PSG9
0007B792                            
0007B792 0000 0001 0101 0202 0203+  PSG1:		dc.b    0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5
0007B7A2 0505 0606 0607 80                      dc.b    5, 5, 6, 6, 6, 7, $80
0007B7A9                            
0007B7A9 0002 0406 0810 80          PSG2:		dc.b    0, 2, 4, 6, 8, $10, $80
0007B7B0                            
0007B7B0 0000 0101 0202 0303 0404+  PSG3:		dc.b    0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7
0007B7C0 80                                     dc.b    $80
0007B7C1                            
0007B7C1 0000 0203 0404 0505 0506+  PSG4:		dc.b    0, 0, 2, 3, 4, 4, 5, 5, 5, 6, $80
0007B7CC                            
0007B7CC 0000 0000 0000 0000 0000+  PSG5:		dc.b    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1
0007B7DC 0101 0101 0101 0101 0202+              dc.b    1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2
0007B7EC 0303 0303 0303 0303 0480               dc.b    3, 3, 3, 3, 3, 3, 3, 3, 4, $80
0007B7F6                            
0007B7F6 0303 0302 0202 0201 0101+  PSG6:		dc.b    3, 3, 3, 2, 2, 2, 2, 1, 1, 1, 0, 0, 0, 0, $80
0007B805                            
0007B805 0000 0000 0000 0101 0101+  PSG7:		dc.b    0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2
0007B815 0303 0304 0404 0505 0506+              dc.b    3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 7, $80
0007B821                            
0007B821 0000 0000 0001 0101 0101+  PSG8:		dc.b    0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2
0007B831 0303 0303 0304 0404 0404+              dc.b    3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6
0007B841 0606 0606 0707 0780                    dc.b    6, 6, 6, 6, 7, 7, 7, $80
0007B849                            
0007B849 0001 0203 0405 0607 0809+  PSG9:		dc.b    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, $A, $B, $C, $D, $E, $F
0007B859 80                                     dc.b    $80
0007B85A                            
0007B85A 0772 7326 1508 FF05        byte_71A94:	dc.b 7,	$72, $73, $26, $15, 8, $FF, 5
0007B862                            ; ---------------------------------------------------------------------------
0007B862                            ; Music	Pointers
0007B862                            ; ---------------------------------------------------------------------------
0007B862 0000 0000 0000 0000        MusicIndex:	dc.l Music81, Music82
0007B86A 0000 0000 0000 0000        		dc.l Music83, Music84
0007B872 0000 0000 0000 0000        		dc.l Music85, Music86
0007B87A 0000 0000 0000 0000        		dc.l Music87, Music88
0007B882 0000 0000 0000 0000        		dc.l Music89, Music8A
0007B88A 0000 0000 0000 0000        		dc.l Music8B, Music8C
0007B892 0000 0000 0000 0000        		dc.l Music8D, Music8E
0007B89A 0000 0000 0000 0000        		dc.l Music8F, Music90
0007B8A2 0000 0000 0000 0000        		dc.l Music91, Music92
0007B8AA 0000 0000 0000 0000        		dc.l Music93, Music94
0007B8B2 0000 0000 0000 0000        		dc.l Music95, Music96
0007B8BA 0000 0000 0000 0000        		dc.l Music97, Music98
0007B8C2 0000 0000 0000 0000        		dc.l Music99, Music9A
0007B8CA 0000 0000 0000 0000        		dc.l Music9B, Music9C
0007B8D2 0000 0000 0000 0000        		dc.l Music9D, Music9E
0007B8DA 0000 0000                  		dc.l Music9F
0007B8DE                            ; ---------------------------------------------------------------------------
0007B8DE                            ; Type of sound	being played ($90 = music; $70 = normal	sound effect)
0007B8DE                            ; ---------------------------------------------------------------------------
0007B8DE 9090 9090 9090 9090 9090+  SoundTypes:	dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$90
0007B8EE 9090 9090 9090 9090 9090+  		dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$80
0007B8FE 7070 7070 7070 7070 7068+  		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $68, $70, $70, $70, $60, $70,	$70
0007B90E 6070 6070 7070 7070 7070+  		dc.b $60, $70, $60, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $7F,	$60
0007B91E 7070 7070 7070 7070 7070+  		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $70,	$80
0007B92E 8080 8080 8080 8080 8080+  		dc.b $80, $80, $80, $80, $80, $80, $80,	$80, $80, $80, $80, $80, $80, $80, $80,	$90
0007B93E 9090 9090                  		dc.b $90, $90, $90, $90
0007B942                            
0007B942                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007B942                            
0007B942                            
0007B942                            sub_71B4C:				; XREF: loc_B10; PalToCRAM
0007B942                            ; every 5th frame, update a second time (same technique as most SMPS versions, but more scuffed)
0007B942 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w	; if in an NTSC region(!), branch ; TODO: use the VDP pal value instead
0007B948 6700                       		beq.s	@main
0007B94A 7000                       		moveq	#0,d0			; PAL song timer "optimization"
0007B94C 3038 FE0E                  		move.w	($FFFFFE0E).w,d0	; TODO: proper timer, this is prone to overflow and cause slight variations
0007B950 80FC 0005                  		divu.w	#5,d0			;       also divisions are generally slow
0007B954 4840                       		swap	d0
0007B956 4A40                       		tst.w	d0
0007B958 6600                       		bne.s	@main
0007B95A 6100 0000                  		bsr.w	@main
0007B95E                            @main:
0007B95E 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
0007B966 4E71                       		nop
0007B968 4E71                       		nop
0007B96A 4E71                       		nop
0007B96C                            ; loc_71B5A:
0007B96C                            @wait:
0007B96C 0839 0000 00A1 1100        		btst	#0,($A11100).l
0007B974 66F6                       		bne.s	@wait
0007B976                            
0007B976 0839 0007 00A0 1FFD        		btst	#7,($A01FFD).l
0007B97E 6700                       		beq.s	loc_71B82
0007B980 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
0007B988 4E71                       		nop
0007B98A 4E71                       		nop
0007B98C 4E71                       		nop
0007B98E 4E71                       		nop
0007B990 4E71                       		nop
0007B992 60CA                       		bra.s	@main		; if you want really funky sound, use sub_71B4C instead ;)
0007B994                            ; ===========================================================================
0007B994                            
0007B994                            loc_71B82:
0007B994 4DF9 00FF F000             		lea	($FFF000).l,a6
0007B99A 422E 000E                  		clr.b	$E(a6)
0007B99E 4A2E 0003                  		tst.b	3(a6)		; is music paused?
0007B9A2 6600 0000                  		bne.w	loc_71E50	; if yes, branch
0007B9A6 532E 0001                  		subq.b	#1,1(a6)
0007B9AA 6600                       		bne.s	loc_71B9E
0007B9AC 4EBA 0000                  		jsr	sub_7260C(pc)
0007B9B0                            
0007B9B0                            loc_71B9E:
0007B9B0 102E 0004                  		move.b	4(a6),d0
0007B9B4 6700                       		beq.s	loc_71BA8
0007B9B6 4EBA 0000                  		jsr	sub_72504(pc)
0007B9BA                            
0007B9BA                            loc_71BA8:
0007B9BA 4A2E 0024                  		tst.b	$24(a6)
0007B9BE 6700                       		beq.s	loc_71BB2
0007B9C0 4EBA 0000                  		jsr	sub_7267C(pc)
0007B9C4                            
0007B9C4                            loc_71BB2:
0007B9C4 4A6E 000A                  		tst.w	$A(a6)		; is music or sound being played?
0007B9C8 6700                       		beq.s	loc_71BBC	; if not, branch
0007B9CA 4EBA 0000                  		jsr	Sound_Play(pc)
0007B9CE                            
0007B9CE                            loc_71BBC:
0007B9CE 0C2E 0080 0009             		cmpi.b	#$80,9(a6)
0007B9D4 6700                       		beq.s	loc_71BC8
0007B9D6 4EBA 0000                  		jsr	Sound_ChkValue(pc)
0007B9DA                            
0007B9DA                            loc_71BC8:
0007B9DA 4BEE 0040                  		lea	$40(a6),a5
0007B9DE 4A15                       		tst.b	(a5)
0007B9E0 6A00                       		bpl.s	loc_71BD4
0007B9E2 4EBA 0000                  		jsr	sub_71C4E(pc)
0007B9E6                            
0007B9E6                            loc_71BD4:
0007B9E6 422E 0008                  		clr.b	8(a6)
0007B9EA 7E05                       		moveq	#5,d7
0007B9EC                            
0007B9EC                            loc_71BDA:
0007B9EC DAFC 0030                  		adda.w	#$30,a5
0007B9F0 4A15                       		tst.b	(a5)
0007B9F2 6A00                       		bpl.s	loc_71BE6
0007B9F4 4EBA 0000                  		jsr	sub_71CCA(pc)
0007B9F8                            
0007B9F8                            loc_71BE6:
0007B9F8 51CF FFF2                  		dbf	d7,loc_71BDA
0007B9FC                            
0007B9FC 7E02                       		moveq	#2,d7
0007B9FE                            
0007B9FE                            loc_71BEC:
0007B9FE DAFC 0030                  		adda.w	#$30,a5
0007BA02 4A15                       		tst.b	(a5)
0007BA04 6A00                       		bpl.s	loc_71BF8
0007BA06 4EBA 0000                  		jsr	sub_72850(pc)
0007BA0A                            
0007BA0A                            loc_71BF8:
0007BA0A 51CF FFF2                  		dbf	d7,loc_71BEC
0007BA0E                            
0007BA0E 1D7C 0080 000E             		move.b	#$80,$E(a6)
0007BA14 7E02                       		moveq	#2,d7
0007BA16                            
0007BA16                            loc_71C04:
0007BA16 DAFC 0030                  		adda.w	#$30,a5
0007BA1A 4A15                       		tst.b	(a5)
0007BA1C 6A00                       		bpl.s	loc_71C10
0007BA1E 4EBA 0000                  		jsr	sub_71CCA(pc)
0007BA22                            
0007BA22                            loc_71C10:
0007BA22 51CF FFF2                  		dbf	d7,loc_71C04
0007BA26                            
0007BA26 7E02                       		moveq	#2,d7
0007BA28                            
0007BA28                            loc_71C16:
0007BA28 DAFC 0030                  		adda.w	#$30,a5
0007BA2C 4A15                       		tst.b	(a5)
0007BA2E 6A00                       		bpl.s	loc_71C22
0007BA30 4EBA 0000                  		jsr	sub_72850(pc)
0007BA34                            
0007BA34                            loc_71C22:
0007BA34 51CF FFF2                  		dbf	d7,loc_71C16
0007BA38 1D7C 0040 000E             		move.b	#$40,$E(a6)
0007BA3E DAFC 0030                  		adda.w	#$30,a5
0007BA42 4A15                       		tst.b	(a5)
0007BA44 6A00                       		bpl.s	loc_71C38
0007BA46 4EBA 0000                  		jsr	sub_71CCA(pc)
0007BA4A                            
0007BA4A                            loc_71C38:
0007BA4A DAFC 0030                  		adda.w	#$30,a5
0007BA4E 4A15                       		tst.b	(a5)
0007BA50 6A00                       		bpl.s	loc_71C44
0007BA52 4EBA 0000                  		jsr	sub_72850(pc)
0007BA56                            
0007BA56                            loc_71C44:
0007BA56 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
0007BA5E 4E75                       		rts	
0007BA60                            ; End of function sub_71B4C
0007BA60                            
0007BA60                            
0007BA60                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007BA60                            
0007BA60                            
0007BA60                            sub_71C4E:				; XREF: sub_71B4C
0007BA60 532D 000E                  		subq.b	#1,$E(a5)
0007BA64 6600                       		bne.s	locret_71CAA
0007BA66 1D7C 0080 0008             		move.b	#$80,8(a6)
0007BA6C 286D 0004                  		movea.l	4(a5),a4
0007BA70                            
0007BA70                            loc_71C5E:
0007BA70 7A00                       		moveq	#0,d5
0007BA72 1A1C                       		move.b	(a4)+,d5
0007BA74 0C05 00E0                  		cmpi.b	#-$20,d5
0007BA78 6500                       		bcs.s	loc_71C6E
0007BA7A 4EBA 0000                  		jsr	sub_72A5A(pc)
0007BA7E 60F0                       		bra.s	loc_71C5E
0007BA80                            ; ===========================================================================
0007BA80                            
0007BA80                            loc_71C6E:
0007BA80 4A05                       		tst.b	d5
0007BA82 6A00                       		bpl.s	loc_71C84
0007BA84 1B45 0010                  		move.b	d5,$10(a5)
0007BA88 1A1C                       		move.b	(a4)+,d5
0007BA8A 6A00                       		bpl.s	loc_71C84
0007BA8C 534C                       		subq.w	#1,a4
0007BA8E 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
0007BA94 6000                       		bra.s	loc_71C88
0007BA96                            ; ===========================================================================
0007BA96                            
0007BA96                            loc_71C84:
0007BA96 4EBA 0000                  		jsr	sub_71D40(pc)
0007BA9A                            
0007BA9A                            loc_71C88:
0007BA9A 2B4C 0004                  		move.l	a4,4(a5)
0007BA9E 0815 0002                  		btst	#2,(a5)
0007BAA2 6600                       		bne.s	locret_71CAA
0007BAA4 7000                       		moveq	#0,d0
0007BAA6 102D 0010                  		move.b	$10(a5),d0
0007BAAA 0C00 0080                  		cmpi.b	#$80,d0
0007BAAE 6700                       		beq.s	locret_71CAA
0007BAB0 0800 0003                  		btst	#3,d0
0007BAB4 6600                       		bne.s	loc_71CAC
0007BAB6 13C0 00A0 1FFF             		move.b	d0,($A01FFF).l
0007BABC                            
0007BABC                            locret_71CAA:
0007BABC 4E75                       		rts	
0007BABE                            ; ===========================================================================
0007BABE                            
0007BABE                            loc_71CAC:
0007BABE 0400 0088                  		subi.b	#$88,d0
0007BAC2 103B 0000                  		move.b	byte_71CC4(pc,d0.w),d0
0007BAC6 13C0 00A0 00EA             		move.b	d0,($A000EA).l
0007BACC 13FC 0083 00A0 1FFF        		move.b	#$83,($A01FFF).l
0007BAD4 4E75                       		rts	
0007BAD6                            ; End of function sub_71C4E
0007BAD6                            
0007BAD6                            ; ===========================================================================
0007BAD6 1215 1C1D FFFF             byte_71CC4:	dc.b $12, $15, $1C, $1D, $FF, $FF
0007BADC                            
0007BADC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007BADC                            
0007BADC                            
0007BADC                            sub_71CCA:				; XREF: sub_71B4C
0007BADC 532D 000E                  		subq.b	#1,$E(a5)
0007BAE0 6600                       		bne.s	loc_71CE0
0007BAE2 0895 0004                  		bclr	#4,(a5)
0007BAE6 4EBA 0000                  		jsr	sub_71CEC(pc)
0007BAEA 4EBA 0000                  		jsr	sub_71E18(pc)
0007BAEE 6000 0000                  		bra.w	loc_726E2
0007BAF2                            ; ===========================================================================
0007BAF2                            
0007BAF2                            loc_71CE0:
0007BAF2 4EBA 0000                  		jsr	sub_71D9E(pc)
0007BAF6 4EBA 0000                  		jsr	sub_71DC6(pc)
0007BAFA 6000 0000                  		bra.w	loc_71E24
0007BAFE                            ; End of function sub_71CCA
0007BAFE                            
0007BAFE                            
0007BAFE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007BAFE                            
0007BAFE                            
0007BAFE                            sub_71CEC:				; XREF: sub_71CCA
0007BAFE 286D 0004                  		movea.l	4(a5),a4
0007BB02 0895 0001                  		bclr	#1,(a5)
0007BB06                            
0007BB06                            loc_71CF4:
0007BB06 7A00                       		moveq	#0,d5
0007BB08 1A1C                       		move.b	(a4)+,d5
0007BB0A 0C05 00E0                  		cmpi.b	#-$20,d5
0007BB0E 6500                       		bcs.s	loc_71D04
0007BB10 4EBA 0000                  		jsr	sub_72A5A(pc)
0007BB14 60F0                       		bra.s	loc_71CF4
0007BB16                            ; ===========================================================================
0007BB16                            
0007BB16                            loc_71D04:
0007BB16 4EBA 0000                  		jsr	sub_726FE(pc)
0007BB1A 4A05                       		tst.b	d5
0007BB1C 6A00                       		bpl.s	loc_71D1A
0007BB1E 4EBA 0000                  		jsr	sub_71D22(pc)
0007BB22 1A1C                       		move.b	(a4)+,d5
0007BB24 6A00                       		bpl.s	loc_71D1A
0007BB26 534C                       		subq.w	#1,a4
0007BB28 6000 0000                  		bra.w	sub_71D60
0007BB2C                            ; ===========================================================================
0007BB2C                            
0007BB2C                            loc_71D1A:
0007BB2C 4EBA 0000                  		jsr	sub_71D40(pc)
0007BB30 6000 0000                  		bra.w	sub_71D60
0007BB34                            ; End of function sub_71CEC
0007BB34                            
0007BB34                            
0007BB34                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007BB34                            
0007BB34                            
0007BB34                            sub_71D22:				; XREF: sub_71CEC
0007BB34 0405 0080                  		subi.b	#$80,d5
0007BB38 6700                       		beq.s	loc_71D58
0007BB3A DA2D 0008                  		add.b	8(a5),d5
0007BB3E 0245 007F                  		andi.w	#$7F,d5
0007BB42 E34D                       		lsl.w	#1,d5
0007BB44 41FA 0000                  		lea	word_72790(pc),a0
0007BB48 3C30 5000                  		move.w	(a0,d5.w),d6
0007BB4C 3B46 0010                  		move.w	d6,$10(a5)
0007BB50 4E75                       		rts	
0007BB52                            ; End of function sub_71D22
0007BB52                            
0007BB52                            
0007BB52                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007BB52                            
0007BB52                            
0007BB52                            sub_71D40:				; XREF: sub_71C4E; sub_71CEC; sub_72878
0007BB52 1005                       		move.b	d5,d0
0007BB54 122D 0002                  		move.b	2(a5),d1
0007BB58                            
0007BB58                            loc_71D46:
0007BB58 5301                       		subq.b	#1,d1
0007BB5A 6700                       		beq.s	loc_71D4E
0007BB5C D005                       		add.b	d5,d0
0007BB5E 60F8                       		bra.s	loc_71D46
0007BB60                            ; ===========================================================================
0007BB60                            
0007BB60                            loc_71D4E:
0007BB60 1B40 000F                  		move.b	d0,$F(a5)
0007BB64 1B40 000E                  		move.b	d0,$E(a5)
0007BB68 4E75                       		rts	
0007BB6A                            ; End of function sub_71D40
0007BB6A                            
0007BB6A                            ; ===========================================================================
0007BB6A                            
0007BB6A                            loc_71D58:				; XREF: sub_71D22
0007BB6A 08D5 0001                  		bset	#1,(a5)
0007BB6E 426D 0010                  		clr.w	$10(a5)
0007BB72                            
0007BB72                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007BB72                            
0007BB72                            
0007BB72                            sub_71D60:				; XREF: sub_71CEC; sub_72878; sub_728AC
0007BB72 2B4C 0004                  		move.l	a4,4(a5)
0007BB76 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
0007BB7C 0815 0004                  		btst	#4,(a5)
0007BB80 6600                       		bne.s	locret_71D9C
0007BB82 1B6D 0013 0012             		move.b	$13(a5),$12(a5)
0007BB88 422D 000C                  		clr.b	$C(a5)
0007BB8C 0815 0003                  		btst	#3,(a5)
0007BB90 6700                       		beq.s	locret_71D9C
0007BB92 206D 0014                  		movea.l	$14(a5),a0
0007BB96 1B58 0018                  		move.b	(a0)+,$18(a5)
0007BB9A 1B58 0019                  		move.b	(a0)+,$19(a5)
0007BB9E 1B58 001A                  		move.b	(a0)+,$1A(a5)
0007BBA2 1018                       		move.b	(a0)+,d0
0007BBA4 E208                       		lsr.b	#1,d0
0007BBA6 1B40 001B                  		move.b	d0,$1B(a5)
0007BBAA 426D 001C                  		clr.w	$1C(a5)
0007BBAE                            
0007BBAE                            locret_71D9C:
0007BBAE 4E75                       		rts	
0007BBB0                            ; End of function sub_71D60
0007BBB0                            
0007BBB0                            
0007BBB0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007BBB0                            
0007BBB0                            
0007BBB0                            sub_71D9E:				; XREF: sub_71CCA; sub_72850
0007BBB0 4A2D 0012                  		tst.b	$12(a5)
0007BBB4 6700                       		beq.s	locret_71DC4
0007BBB6 532D 0012                  		subq.b	#1,$12(a5)
0007BBBA 6600                       		bne.s	locret_71DC4
0007BBBC 08D5 0001                  		bset	#1,(a5)
0007BBC0 4A2D 0001                  		tst.b	1(a5)
0007BBC4 6B00 0000                  		bmi.w	loc_71DBE
0007BBC8 4EBA 0000                  		jsr	sub_726FE(pc)
0007BBCC 584F                       		addq.w	#4,sp
0007BBCE 4E75                       		rts	
0007BBD0                            ; ===========================================================================
0007BBD0                            
0007BBD0                            loc_71DBE:
0007BBD0 4EBA 0000                  		jsr	sub_729A0(pc)
0007BBD4 584F                       		addq.w	#4,sp
0007BBD6                            
0007BBD6                            locret_71DC4:
0007BBD6 4E75                       		rts	
0007BBD8                            ; End of function sub_71D9E
0007BBD8                            
0007BBD8                            
0007BBD8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007BBD8                            
0007BBD8                            
0007BBD8                            sub_71DC6:				; XREF: sub_71CCA; sub_72850
0007BBD8 584F                       		addq.w	#4,sp
0007BBDA 0815 0003                  		btst	#3,(a5)
0007BBDE 6700                       		beq.s	locret_71E16
0007BBE0 4A2D 0018                  		tst.b	$18(a5)
0007BBE4 6700                       		beq.s	loc_71DDA
0007BBE6 532D 0018                  		subq.b	#1,$18(a5)
0007BBEA 4E75                       		rts	
0007BBEC                            ; ===========================================================================
0007BBEC                            
0007BBEC                            loc_71DDA:
0007BBEC 532D 0019                  		subq.b	#1,$19(a5)
0007BBF0 6700                       		beq.s	loc_71DE2
0007BBF2 4E75                       		rts	
0007BBF4                            ; ===========================================================================
0007BBF4                            
0007BBF4                            loc_71DE2:
0007BBF4 206D 0014                  		movea.l	$14(a5),a0
0007BBF8 1B68 0001 0019             		move.b	1(a0),$19(a5)
0007BBFE 4A2D 001B                  		tst.b	$1B(a5)
0007BC02 6600                       		bne.s	loc_71DFE
0007BC04 1B68 0003 001B             		move.b	3(a0),$1B(a5)
0007BC0A 442D 001A                  		neg.b	$1A(a5)
0007BC0E 4E75                       		rts	
0007BC10                            ; ===========================================================================
0007BC10                            
0007BC10                            loc_71DFE:
0007BC10 532D 001B                  		subq.b	#1,$1B(a5)
0007BC14 1C2D 001A                  		move.b	$1A(a5),d6
0007BC18 4886                       		ext.w	d6
0007BC1A DC6D 001C                  		add.w	$1C(a5),d6
0007BC1E 3B46 001C                  		move.w	d6,$1C(a5)
0007BC22 DC6D 0010                  		add.w	$10(a5),d6
0007BC26 594F                       		subq.w	#4,sp
0007BC28                            
0007BC28                            locret_71E16:
0007BC28 4E75                       		rts	
0007BC2A                            ; End of function sub_71DC6
0007BC2A                            
0007BC2A                            
0007BC2A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007BC2A                            
0007BC2A                            
0007BC2A                            sub_71E18:				; XREF: sub_71CCA
0007BC2A 0815 0001                  		btst	#1,(a5)
0007BC2E 6600                       		bne.s	locret_71E48
0007BC30 3C2D 0010                  		move.w	$10(a5),d6
0007BC34 6700                       		beq.s	loc_71E4A
0007BC36                            
0007BC36                            loc_71E24:				; XREF: sub_71CCA
0007BC36 102D 001E                  		move.b	$1E(a5),d0
0007BC3A 4880                       		ext.w	d0
0007BC3C DC40                       		add.w	d0,d6
0007BC3E 0815 0002                  		btst	#2,(a5)
0007BC42 6600                       		bne.s	locret_71E48
0007BC44 3206                       		move.w	d6,d1
0007BC46 E049                       		lsr.w	#8,d1
0007BC48 103C 00A4                  		move.b	#-$5C,d0
0007BC4C 4EBA 0000                  		jsr	sub_72722(pc)
0007BC50 1206                       		move.b	d6,d1
0007BC52 103C 00A0                  		move.b	#-$60,d0
0007BC56 4EBA 0000                  		jsr	sub_72722(pc)
0007BC5A                            
0007BC5A                            locret_71E48:
0007BC5A 4E75                       		rts	
0007BC5C                            ; ===========================================================================
0007BC5C                            
0007BC5C                            loc_71E4A:
0007BC5C 08D5 0001                  		bset	#1,(a5)
0007BC60 4E75                       		rts	
0007BC62                            ; End of function sub_71E18
0007BC62                            
0007BC62                            ; ===========================================================================
0007BC62                            
0007BC62                            loc_71E50:				; XREF: sub_71B4C
0007BC62 6B00                       		bmi.s	loc_71E94
0007BC64 0C2E 0002 0003             		cmpi.b	#2,3(a6)
0007BC6A 6700 0000                  		beq.w	loc_71EFE
0007BC6E 1D7C 0002 0003             		move.b	#2,3(a6)
0007BC74 7602                       		moveq	#2,d3
0007BC76 103C 00B4                  		move.b	#-$4C,d0
0007BC7A 7200                       		moveq	#0,d1
0007BC7C                            
0007BC7C                            loc_71E6A:
0007BC7C 4EBA 0000                  		jsr	sub_7272E(pc)
0007BC80 4EBA 0000                  		jsr	sub_72764(pc)
0007BC84 5200                       		addq.b	#1,d0
0007BC86 51CB FFF4                  		dbf	d3,loc_71E6A
0007BC8A                            
0007BC8A 7602                       		moveq	#2,d3
0007BC8C 7028                       		moveq	#$28,d0
0007BC8E                            
0007BC8E                            loc_71E7C:
0007BC8E 1203                       		move.b	d3,d1
0007BC90 4EBA 0000                  		jsr	sub_7272E(pc)
0007BC94 5801                       		addq.b	#4,d1
0007BC96 4EBA 0000                  		jsr	sub_7272E(pc)
0007BC9A 51CB FFF2                  		dbf	d3,loc_71E7C
0007BC9E                            
0007BC9E 4EBA 0000                  		jsr	sub_729B6(pc)
0007BCA2 6000 FDB2                  		bra.w	loc_71C44
0007BCA6                            ; ===========================================================================
0007BCA6                            
0007BCA6                            loc_71E94:				; XREF: loc_71E50
0007BCA6 422E 0003                  		clr.b	3(a6)
0007BCAA 7630                       		moveq	#$30,d3
0007BCAC 4BEE 0040                  		lea	$40(a6),a5
0007BCB0 7806                       		moveq	#6,d4
0007BCB2                            
0007BCB2                            loc_71EA0:
0007BCB2 0815 0007                  		btst	#7,(a5)
0007BCB6 6700                       		beq.s	loc_71EB8
0007BCB8 0815 0002                  		btst	#2,(a5)
0007BCBC 6600                       		bne.s	loc_71EB8
0007BCBE 103C 00B4                  		move.b	#-$4C,d0
0007BCC2 122D 000A                  		move.b	$A(a5),d1
0007BCC6 4EBA 0000                  		jsr	sub_72722(pc)
0007BCCA                            
0007BCCA                            loc_71EB8:
0007BCCA DAC3                       		adda.w	d3,a5
0007BCCC 51CC FFE4                  		dbf	d4,loc_71EA0
0007BCD0                            
0007BCD0 4BEE 0220                  		lea	$220(a6),a5
0007BCD4 7802                       		moveq	#2,d4
0007BCD6                            
0007BCD6                            loc_71EC4:
0007BCD6 0815 0007                  		btst	#7,(a5)
0007BCDA 6700                       		beq.s	loc_71EDC
0007BCDC 0815 0002                  		btst	#2,(a5)
0007BCE0 6600                       		bne.s	loc_71EDC
0007BCE2 103C 00B4                  		move.b	#-$4C,d0
0007BCE6 122D 000A                  		move.b	$A(a5),d1
0007BCEA 4EBA 0000                  		jsr	sub_72722(pc)
0007BCEE                            
0007BCEE                            loc_71EDC:
0007BCEE DAC3                       		adda.w	d3,a5
0007BCF0 51CC FFE4                  		dbf	d4,loc_71EC4
0007BCF4                            
0007BCF4 4BEE 0340                  		lea	$340(a6),a5
0007BCF8 0815 0007                  		btst	#7,(a5)
0007BCFC 6700                       		beq.s	loc_71EFE
0007BCFE 0815 0002                  		btst	#2,(a5)
0007BD02 6600                       		bne.s	loc_71EFE
0007BD04 103C 00B4                  		move.b	#-$4C,d0
0007BD08 122D 000A                  		move.b	$A(a5),d1
0007BD0C 4EBA 0000                  		jsr	sub_72722(pc)
0007BD10                            
0007BD10                            loc_71EFE:
0007BD10 6000 FD44                  		bra.w	loc_71C44
0007BD14                            
0007BD14                            ; ---------------------------------------------------------------------------
0007BD14                            ; Subroutine to	play a sound or	music track
0007BD14                            ; ---------------------------------------------------------------------------
0007BD14                            
0007BD14                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007BD14                            
0007BD14                            
0007BD14                            Sound_Play:				; XREF: sub_71B4C
0007BD14 2079 0007 B756             		movea.l	(Go_SoundTypes).l,a0
0007BD1A 43EE 000A                  		lea	$A(a6),a1	; load music track number
0007BD1E 1616                       		move.b	0(a6),d3
0007BD20 7802                       		moveq	#2,d4
0007BD22                            
0007BD22                            loc_71F12:
0007BD22 1011                       		move.b	(a1),d0		; move track number to d0
0007BD24 1200                       		move.b	d0,d1
0007BD26 4219                       		clr.b	(a1)+
0007BD28 0400 0081                  		subi.b	#$81,d0
0007BD2C 6500                       		bcs.s	loc_71F3E
0007BD2E 0C2E 0080 0009             		cmpi.b	#$80,9(a6)
0007BD34 6700                       		beq.s	loc_71F2C
0007BD36 1D41 000A                  		move.b	d1,$A(a6)
0007BD3A 6000                       		bra.s	loc_71F3E
0007BD3C                            ; ===========================================================================
0007BD3C                            
0007BD3C                            loc_71F2C:
0007BD3C 0240 007F                  		andi.w	#$7F,d0
0007BD40 1430 0000                  		move.b	(a0,d0.w),d2
0007BD44 B403                       		cmp.b	d3,d2
0007BD46 6500                       		bcs.s	loc_71F3E
0007BD48 1602                       		move.b	d2,d3
0007BD4A 1D41 0009                  		move.b	d1,9(a6)	; set music flag
0007BD4E                            
0007BD4E                            loc_71F3E:
0007BD4E 51CC FFD2                  		dbf	d4,loc_71F12
0007BD52                            
0007BD52 4A03                       		tst.b	d3
0007BD54 6B00                       		bmi.s	locret_71F4A
0007BD56 1C83                       		move.b	d3,0(a6)
0007BD58                            
0007BD58                            locret_71F4A:
0007BD58 4E75                       		rts	
0007BD5A                            ; End of function Sound_Play
0007BD5A                            
0007BD5A                            
0007BD5A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007BD5A                            
0007BD5A                            
0007BD5A                            Sound_ChkValue:				; XREF: sub_71B4C
0007BD5A 7E00                       		moveq	#0,d7
0007BD5C 1E2E 0009                  		move.b	9(a6),d7
0007BD60 6700 0000                  		beq.w	Sound_E4
0007BD64 6A00                       		bpl.s	locret_71F8C
0007BD66 1D7C 0080 0009             		move.b	#$80,9(a6)	; reset	music flag
0007BD6C 0C07 009F                  		cmpi.b	#$9F,d7
0007BD70 6300 0000                  		bls.w	Sound_81to9F	; music	$81-$9F
0007BD74 0C07 00A0                  		cmpi.b	#$A0,d7
0007BD78 6500 0000                  		bcs.w	locret_71F8C
0007BD7C 0C07 00CF                  		cmpi.b	#$CF,d7
0007BD80 6300 0000                  		bls.w	Sound_A0toCF	; sound	$A0-$CF
0007BD84 0C07 00D0                  		cmpi.b	#$D0,d7
0007BD88 6500 0000                  		bcs.w	locret_71F8C
0007BD8C 0C07 00E0                  		cmpi.b	#$E0,d7
0007BD90 6500 0000                  		bcs.w	Sound_D0toDF	; sound	$D0-$DF
0007BD94 0C07 00E5                  		cmpi.b	#$E5,d7
0007BD98 6300                       		bls.s	Sound_E0toE5	; sound	$E0-$E5
0007BD9A                            
0007BD9A                            locret_71F8C:
0007BD9A 4E75                       		rts	
0007BD9C                            ; ===========================================================================
0007BD9C                            
0007BD9C                            Sound_E0toE5				; XREF: Sound_ChkValue
0007BD9C 0407 00E0                  		subi.b	#$E0,d7
0007BDA0 E54F                       		lsl.w	#2,d7
0007BDA2 4EFB 7000                  		jmp	Sound_ExIndex(pc,d7.w)
0007BDA6                            ; ===========================================================================
0007BDA6                            
0007BDA6                            Sound_ExIndex:
0007BDA6 6000 0000                  		bra.w	Sound_E0
0007BDAA                            ; ===========================================================================
0007BDAA 6000 0000                  		bra.w	Sound_E1
0007BDAE                            ; ===========================================================================
0007BDAE 6000 0000                  		bra.w	Sound_E2
0007BDB2                            ; ===========================================================================
0007BDB2 6000 0000                  		bra.w	Sound_E3
0007BDB6                            ; ===========================================================================
0007BDB6 6000 0000                  		bra.w	Sound_E4
0007BDBA                            ; ===========================================================================
0007BDBA 6000 0000                  		bra.w	Sound_E5
0007BDBE                            ; ===========================================================================
0007BDBE                            ; ---------------------------------------------------------------------------
0007BDBE                            ; Play "Say-gaa" PCM sound
0007BDBE                            ; ---------------------------------------------------------------------------
0007BDBE                            
0007BDBE                            Sound_E1:				  
0007BDBE 13FC 002B 00A0 4000        		move.b	#$2B,($A04000).l		; $A04000 = $2B -> Write to DAC enable
0007BDC6 13FC 0080 00A0 4001        		move.b	#$80,($A04001).l		; enable DAC
0007BDCE 303C 007F                  		move.w	#127,d0				; delay so the YM doesn't crap itself
0007BDD2 51C8 FFFE                  		dbf	d0,*
0007BDD6 45F9 0000 0000             		lea	(SegaPCM).l,a2			; Load the SEGA PCM sample into a2. It's important that we use a2 since a0 and a1 are going to be used up ahead when reading the joypad ports 
0007BDDC 263C 0000 0000             		move.l	#(SegaPCM_End-SegaPCM),d3			; Load the size of the SEGA PCM sample into d3 
0007BDE2 13FC 002A 00A0 4000        		move.b	#$2A,($A04000).l		; $A04000 = $2A -> Write to DAC channel	  
0007BDEA                            PlayPCM_Loop:	  
0007BDEA 13DA 00A0 4001             		move.b	(a2)+,($A04001).l		; Write the PCM data (contained in a2) to $A04001 (YM2612 register D0) 
0007BDF0 303C 0014                  		move.w	#$14,d0				; Write the pitch ($14 in this case) to d0 
0007BDF4 51C8 FFFE                  		dbf	d0,*				; Decrement d0; jump to itself if not 0. (for pitch control, avoids playing the sample too fast)  
0007BDF8 5383                       		sub.l	#1,d3				; Subtract 1 from the PCM sample size 
0007BDFA 6700                       		beq.s	return_PlayPCM			; If d3 = 0, we finished playing the PCM sample, so stop playing, leave this loop, and unfreeze the 68K 
0007BDFC 41F8 F604                  		lea	($FFFFF604).w,a0		; address where JoyPad states are written 
0007BE00 43F9 00A1 0003             		lea	($A10003).l,a1			; address where JoyPad states are read from 
0007BE06 4EB8 13E6                  		jsr	(Joypad_Read).w			; Read only the first joypad port. It's important that we do NOT do the two ports, we don't have the cycles for that 
0007BE0A 0838 0007 F604             		btst	#7,($FFFFF604).w		; Check for Start button 
0007BE10 6600                       		bne.s	return_PlayPCM			; If start is pressed, stop playing, leave this loop, and unfreeze the 68K 
0007BE12 60D6                       		bra.s	PlayPCM_Loop			; Otherwise, continue playing PCM sample 
0007BE14                            return_PlayPCM: 
0007BE14 13FC 0080 00A0 4001        		move.b	#$80,($A04001).l		; silence PCM to avoid an awful sounding click
0007BE1C 584F                       		addq.w	#4,sp 
0007BE1E 4E75                       		rts
0007BE20                            		
0007BE20                            ; ---------------------------------------------------------------------------
0007BE20                            ; Play you are an idiot pcm sound
0007BE20                            ; since the sfx already crashes the game forever load it here :V
0007BE20                            ; ---------------------------------------------------------------------------
0007BE20                            
0007BE20                            Sound_E5: 
0007BE20 4EB8 14C2                  		jsr	ClearScreen
0007BE24 13FC 002B 00A0 4000        		move.b	#$2B,($A04000).l		; $A04000 = $2B -> Write to DAC enable
0007BE2C 13FC 0080 00A0 4001        		move.b	#$80,($A04001).l		; enable DAC
0007BE34                            
0007BE34                            		;control port on a5
0007BE34 2ABC 9401 9340             		move.l	#$94000000+((($280>>1)&$FF00)<<8)+$9300+(($280>>1)&$FF),(a5)
0007BE3A 2ABC 96FC 9500             		move.l	#$96000000+((($FFFFF800>>1)&$FF00)<<8)+$9500+(($FFFFF800>>1)&$FF),(a5)
0007BE40 3ABC 977F                  		move.w	#$9700+(((($FFFFF800>>1)&$FF0000)>>16)&$7F),(a5)
0007BE44 3ABC 7800                  		move.w	#$4000+($F800&$3FFF),(a5)
0007BE48 3ABC 0083                  		move.w	#$80+(($F800&$C000)>>14),(a5) ; clear sprites
0007BE4C                            		
0007BE4C 3ABC 8700                  		move.w	#$8700,(a5) ; first colour is bg now
0007BE50                            		
0007BE50 2ABC 4000 0000             		move.l	#$40000000,(a5)
0007BE56 41F9 0002 45E2             		lea	(Nem_Idiot).l,a0 ;	load idiot sprites
0007BE5C 4EB8 163E                  		jsr	NemDec
0007BE60 43F9 00FF 0000             		lea	($FF0000).l,a1
0007BE66 41F9 0002 4584             		lea	(Eni_Idiot).l,a0 ; load mappings for IDIOT
0007BE6C 303C 0000                  		move.w	#0,d0
0007BE70 4EB8 191C                  		jsr	EniDec
0007BE74 43F9 00FF 0000             		lea	($FF0000).l,a1
0007BE7A 203C 4304 0003             		move.l	#$43040003,d0
0007BE80 7223                       		moveq	#35,d1
0007BE82 740D                       		moveq	#13,d2
0007BE84 4EB8 161E                  		jsr	ShowVDPGraphics
0007BE88 7014                       		moveq	#20,d0
0007BE8A 4EB8 22E2                  		jsr	PalLoad2	; load pallet
0007BE8E                            
0007BE8E                            
0007BE8E 4BF9 00C0 0004             		lea	($C00004).l,a5
0007BE94 50F8 FE25                  		st.b	($FFFFFE25).w			; start with -1, so the NOT makes it 0
0007BE98 7600                       		moveq	#0,d3				; make @palett jump to @start when done
0007BE9A 6000                       		bra.s	@palett
0007BE9C                            @start:
0007BE9C 45F9 0000 0000             		lea	(IdiotPCM).l,a2			; Load the idiot PCM sample into a2. It's important that we use a2 since a0 and a1 are going to be used up ahead when reading the joypad ports 
0007BEA2 263C 0000 0000             		move.l	#IdiotPCM_End-IdiotPCM,d3	; Load the size of the idiot PCM sample into d3 
0007BEA8 13FC 002A 00A0 4000        		move.b	#$2A,($A04000).l		; $A04000 = $2A -> Write to DAC channel
0007BEB0                            @loop:
0007BEB0 44D5                       		move.w	(a5),ccr
0007BEB2 6B00                       		bmi.s	@vblank
0007BEB4                            
0007BEB4 13DA 00A0 4001             		move.b	(a2)+,($A04001).l		; Write the PCM data (contained in a2) to $A04001 (YM2612 register D0) 
0007BEBA 303C 0056                  		move.w	#$58-2,d0			; Write the pitch ($58 in this case) to d0  (-28 from the check before)
0007BEBE 51C8 FFFE                  		dbf	d0,*				; Decrement d0; jump to itself if not 0. (for pitch control, avoids playing the sample too fast)   (14 cycles)
0007BEC2 5383                       		subq.l	#1,d3				; Subtract 1 from the PCM sample size 
0007BEC4 66EA                       		bne.s	@loop				; if not zero, loop
0007BEC6 60D4                       		bra.s	@start
0007BEC8                            @vblank:
0007BEC8 0C38 000F FE24             		cmp.b	#15,($FFFFFE24).w
0007BECE 6700                       		beq.s	@palett
0007BED0 5238 FE24                  		addq.b	#1,($FFFFFE24).w
0007BED4                            @loop_vblank:
0007BED4 44D5                       		move.w	(a5),ccr
0007BED6 6AD8                       		bpl.s	@loop
0007BED8                            
0007BED8 13DA 00A0 4001             		move.b	(a2)+,($A04001).l		; Write the PCM data (contained in a2) to $A04001 (YM2612 register D0) 
0007BEDE 303C 0056                  		move.w	#$58-2,d0			; Write the pitch ($58 in this case) to d0  (-28 from the check before)
0007BEE2 51C8 FFFE                  		dbf	d0,*				; Decrement d0; jump to itself if not 0. (for pitch control, avoids playing the sample too fast)   (14 cycles)
0007BEE6 5383                       		subq.l	#1,d3				; Subtract 1 from the PCM sample size 
0007BEE8 66EA                       		bne.s	@loop_vblank			; if not zero, loop
0007BEEA 60B0                       		bra.s	@start
0007BEEC                            @palett:
0007BEEC 2ABC 9400 9308             		move.l	#$94000000+((($10>>1)&$FF00)<<8)+$9300+(($10>>1)&$FF),(a5) ; len
0007BEF2                            
0007BEF2 4238 FE24                  		clr.b	($FFFFFE24).w
0007BEF6 4638 FE25                  		not.b	($FFFFFE25).w
0007BEFA 6700                       		beq.s	@not_black
0007BEFC 2ABC 96FD 9598             		move.l	#$96000000+((($FFFFFB30>>1)&$FF00)<<8)+$9500+(($FFFFFB30>>1)&$FF),(a5)	; source	
0007BF02 6000                       		bra.s	@merge
0007BF04                            	@not_black:
0007BF04 2ABC 96FD 9590             		move.l	#$96000000+((($FFFFFB20>>1)&$FF00)<<8)+$9500+(($FFFFFB20>>1)&$FF),(a5)	; source
0007BF0A                            	@merge:
0007BF0A 3ABC 977F                  		move.w	#$9700+(((($FFFFFB20>>1)&$FF0000)>>16)&$7F),(a5) ; source
0007BF0E 3ABC C000                  		move.w	#$C000+(0&$3FFF),(a5) ; dest
0007BF12 3F3C 0080                  		move.w	#$80+((0&$C000)>>14),-(sp) ;dest
0007BF16 3A9F                       		move.w	(sp)+,(a5)
0007BF18                            		
0007BF18 303C 004D                  		move.w	#$58-11,d0				; attempt at removing the little jumps
0007BF1C 51C8 FFFE                  		dbf	d0,*				; (14 cycles)
0007BF20 4A83                       		tst.l	d3
0007BF22 66B0                       		bne.s	@loop_vblank
0007BF24 6000 FF76                  		bra.w	@start
0007BF28                            ; ===========================================================================
0007BF28                            ; ---------------------------------------------------------------------------
0007BF28                            ; Play music track $81-$9F
0007BF28                            ; ---------------------------------------------------------------------------
0007BF28                            
0007BF28                            Sound_81to9F:				; XREF: Sound_ChkValue
0007BF28 0C07 0088                  		cmpi.b	#$88,d7		; is "extra life" music	played?
0007BF2C 6600                       		bne.s	loc_72024	; if not, branch
0007BF2E 4A2E 0027                  		tst.b	$27(a6)
0007BF32 6600 0000                  		bne.w	loc_721B6
0007BF36 4BEE 0040                  		lea	$40(a6),a5
0007BF3A 7009                       		moveq	#9,d0
0007BF3C                            
0007BF3C                            loc_71FE6:
0007BF3C 0895 0002                  		bclr	#2,(a5)
0007BF40 DAFC 0030                  		adda.w	#$30,a5
0007BF44 51C8 FFF6                  		dbf	d0,loc_71FE6
0007BF48                            
0007BF48 4BEE 0220                  		lea	$220(a6),a5
0007BF4C 7005                       		moveq	#5,d0
0007BF4E                            
0007BF4E                            loc_71FF8:
0007BF4E 0895 0007                  		bclr	#7,(a5)
0007BF52 DAFC 0030                  		adda.w	#$30,a5
0007BF56 51C8 FFF6                  		dbf	d0,loc_71FF8
0007BF5A 4216                       		clr.b	0(a6)
0007BF5C 204E                       		movea.l	a6,a0
0007BF5E 43EE 03A0                  		lea	$3A0(a6),a1
0007BF62 303C 0087                  		move.w	#$87,d0
0007BF66                            
0007BF66                            loc_72012:
0007BF66 22D8                       		move.l	(a0)+,(a1)+
0007BF68 51C8 FFFC                  		dbf	d0,loc_72012
0007BF6C                            
0007BF6C 1D7C 0080 0027             		move.b	#$80,$27(a6)
0007BF72 4216                       		clr.b	0(a6)
0007BF74 6000                       		bra.s	loc_7202C
0007BF76                            ; ===========================================================================
0007BF76                            
0007BF76                            loc_72024:
0007BF76 422E 0027                  		clr.b	$27(a6)
0007BF7A 422E 0026                  		clr.b	$26(a6)
0007BF7E                            
0007BF7E                            loc_7202C:
0007BF7E 4EBA 0000                  		jsr	sub_725CA(pc)
0007BF82 2879 0007 B766             		movea.l	(off_719A0).l,a4
0007BF88 0407 0081                  		subi.b	#$81,d7
0007BF8C 1D74 7000 0029             		move.b	(a4,d7.w),$29(a6)
0007BF92 2879 0007 B75E             		movea.l	(Go_MusicIndex).l,a4
0007BF98 E54F                       		lsl.w	#2,d7
0007BF9A 2874 7000                  		movea.l	(a4,d7.w),a4
0007BF9E 7000                       		moveq	#0,d0
0007BFA0 3014                       		move.w	(a4),d0
0007BFA2 D08C                       		add.l	a4,d0
0007BFA4 2D40 0018                  		move.l	d0,$18(a6)
0007BFA8 102C 0005                  		move.b	5(a4),d0
0007BFAC 1D40 0028                  		move.b	d0,$28(a6)
0007BFB0 4A2E 002A                  		tst.b	$2A(a6)
0007BFB4 6700                       		beq.s	loc_72068
0007BFB6 102E 0029                  		move.b	$29(a6),d0
0007BFBA                            
0007BFBA                            loc_72068:
0007BFBA 1D40 0002                  		move.b	d0,2(a6)
0007BFBE 1D40 0001                  		move.b	d0,1(a6)
0007BFC2 7200                       		moveq	#0,d1
0007BFC4 264C                       		movea.l	a4,a3
0007BFC6 5C4C                       		addq.w	#6,a4
0007BFC8 7E00                       		moveq	#0,d7
0007BFCA 1E2B 0002                  		move.b	2(a3),d7
0007BFCE 6700 0000                  		beq.w	loc_72114
0007BFD2 5307                       		subq.b	#1,d7
0007BFD4 123C 00C0                  		move.b	#-$40,d1
0007BFD8 182B 0004                  		move.b	4(a3),d4
0007BFDC 7C30                       		moveq	#$30,d6
0007BFDE 1A3C 0001                  		move.b	#1,d5
0007BFE2 43EE 0040                  		lea	$40(a6),a1
0007BFE6 45FA 0000                  		lea	byte_721BA(pc),a2
0007BFEA                            
0007BFEA                            loc_72098:
0007BFEA 08D1 0007                  		bset	#7,(a1)
0007BFEE 135A 0001                  		move.b	(a2)+,1(a1)
0007BFF2 1344 0002                  		move.b	d4,2(a1)
0007BFF6 1346 000D                  		move.b	d6,$D(a1)
0007BFFA 1341 000A                  		move.b	d1,$A(a1)
0007BFFE 1345 000E                  		move.b	d5,$E(a1)
0007C002 7000                       		moveq	#0,d0
0007C004 301C                       		move.w	(a4)+,d0
0007C006 D08B                       		add.l	a3,d0
0007C008 2340 0004                  		move.l	d0,4(a1)
0007C00C 335C 0008                  		move.w	(a4)+,8(a1)
0007C010 D2C6                       		adda.w	d6,a1
0007C012 51CF FFD6                  		dbf	d7,loc_72098
0007C016 0C2B 0007 0002             		cmpi.b	#7,2(a3)
0007C01C 6600                       		bne.s	loc_720D8
0007C01E 702B                       		moveq	#$2B,d0
0007C020 7200                       		moveq	#0,d1
0007C022 4EBA 0000                  		jsr	sub_7272E(pc)
0007C026 6000 0000                  		bra.w	loc_72114
0007C02A                            ; ===========================================================================
0007C02A                            
0007C02A                            loc_720D8:
0007C02A 7028                       		moveq	#$28,d0
0007C02C 7206                       		moveq	#6,d1
0007C02E 4EBA 0000                  		jsr	sub_7272E(pc)
0007C032 103C 0042                  		move.b	#$42,d0
0007C036 727F                       		moveq	#$7F,d1
0007C038 4EBA 0000                  		jsr	sub_72764(pc)
0007C03C 103C 004A                  		move.b	#$4A,d0
0007C040 727F                       		moveq	#$7F,d1
0007C042 4EBA 0000                  		jsr	sub_72764(pc)
0007C046 103C 0046                  		move.b	#$46,d0
0007C04A 727F                       		moveq	#$7F,d1
0007C04C 4EBA 0000                  		jsr	sub_72764(pc)
0007C050 103C 004E                  		move.b	#$4E,d0
0007C054 727F                       		moveq	#$7F,d1
0007C056 4EBA 0000                  		jsr	sub_72764(pc)
0007C05A 103C 00B6                  		move.b	#-$4A,d0
0007C05E 123C 00C0                  		move.b	#-$40,d1
0007C062 4EBA 0000                  		jsr	sub_72764(pc)
0007C066                            
0007C066                            loc_72114:
0007C066 7E00                       		moveq	#0,d7
0007C068 1E2B 0003                  		move.b	3(a3),d7
0007C06C 6700                       		beq.s	loc_72154
0007C06E 5307                       		subq.b	#1,d7
0007C070 43EE 0190                  		lea	$190(a6),a1
0007C074 45FA 0000                  		lea	byte_721C2(pc),a2
0007C078                            
0007C078                            loc_72126:
0007C078 08D1 0007                  		bset	#7,(a1)
0007C07C 135A 0001                  		move.b	(a2)+,1(a1)
0007C080 1344 0002                  		move.b	d4,2(a1)
0007C084 1346 000D                  		move.b	d6,$D(a1)
0007C088 1345 000E                  		move.b	d5,$E(a1)
0007C08C 7000                       		moveq	#0,d0
0007C08E 301C                       		move.w	(a4)+,d0
0007C090 D08B                       		add.l	a3,d0
0007C092 2340 0004                  		move.l	d0,4(a1)
0007C096 335C 0008                  		move.w	(a4)+,8(a1)
0007C09A 101C                       		move.b	(a4)+,d0
0007C09C 135C 000B                  		move.b	(a4)+,$B(a1)
0007C0A0 D2C6                       		adda.w	d6,a1
0007C0A2 51CF FFD4                  		dbf	d7,loc_72126
0007C0A6                            
0007C0A6                            loc_72154:
0007C0A6 43EE 0220                  		lea	$220(a6),a1
0007C0AA 7E05                       		moveq	#5,d7
0007C0AC                            
0007C0AC                            loc_7215A:
0007C0AC 4A11                       		tst.b	(a1)
0007C0AE 6A00 0000                  		bpl.w	loc_7217C
0007C0B2 7000                       		moveq	#0,d0
0007C0B4 1029 0001                  		move.b	1(a1),d0
0007C0B8 6B00                       		bmi.s	loc_7216E
0007C0BA 5500                       		subq.b	#2,d0
0007C0BC E508                       		lsl.b	#2,d0
0007C0BE 6000                       		bra.s	loc_72170
0007C0C0                            ; ===========================================================================
0007C0C0                            
0007C0C0                            loc_7216E:
0007C0C0 E608                       		lsr.b	#3,d0
0007C0C2                            
0007C0C2                            loc_72170:
0007C0C2 41FA 0000                  		lea	dword_722CC(pc),a0
0007C0C6 2070 0000                  		movea.l	(a0,d0.w),a0
0007C0CA 08D0 0002                  		bset	#2,(a0)
0007C0CE                            
0007C0CE                            loc_7217C:
0007C0CE D2C6                       		adda.w	d6,a1
0007C0D0 51CF FFDA                  		dbf	d7,loc_7215A
0007C0D4                            
0007C0D4 4A6E 0340                  		tst.w	$340(a6)
0007C0D8 6A00                       		bpl.s	loc_7218E
0007C0DA 08EE 0002 0100             		bset	#2,$100(a6)
0007C0E0                            
0007C0E0                            loc_7218E:
0007C0E0 4A6E 0370                  		tst.w	$370(a6)
0007C0E4 6A00                       		bpl.s	loc_7219A
0007C0E6 08EE 0002 01F0             		bset	#2,$1F0(a6)
0007C0EC                            
0007C0EC                            loc_7219A:
0007C0EC 4BEE 0070                  		lea	$70(a6),a5
0007C0F0 7805                       		moveq	#5,d4
0007C0F2                            
0007C0F2                            loc_721A0:
0007C0F2 4EBA 0000                  		jsr	sub_726FE(pc)
0007C0F6 DAC6                       		adda.w	d6,a5
0007C0F8 51CC FFF8                  		dbf	d4,loc_721A0
0007C0FC 7802                       		moveq	#2,d4
0007C0FE                            
0007C0FE                            loc_721AC:
0007C0FE 4EBA 0000                  		jsr	sub_729A0(pc)
0007C102 DAC6                       		adda.w	d6,a5
0007C104 51CC FFF8                  		dbf	d4,loc_721AC
0007C108                            
0007C108                            loc_721B6:
0007C108 584F                       		addq.w	#4,sp
0007C10A 4E75                       		rts	
0007C10C                            ; ===========================================================================
0007C10C 0600 0102 0405 0600        byte_721BA:	dc.b 6,	0, 1, 2, 4, 5, 6, 0
0007C114                            		even
0007C114 80A0 C000                  byte_721C2:	dc.b $80, $A0, $C0, 0
0007C118                            		even
0007C118                            ; ===========================================================================
0007C118                            ; ---------------------------------------------------------------------------
0007C118                            ; Play normal sound effect
0007C118                            ; ---------------------------------------------------------------------------
0007C118                            
0007C118                            Sound_A0toCF:				; XREF: Sound_ChkValue
0007C118 4A2E 0027                  		tst.b	$27(a6)
0007C11C 6600 0000                  		bne.w	loc_722C6
0007C120 4A2E 0004                  		tst.b	4(a6)
0007C124 6600 0000                  		bne.w	loc_722C6
0007C128 4A2E 0024                  		tst.b	$24(a6)
0007C12C 6600 0000                  		bne.w	loc_722C6
0007C130 0C07 00B5                  		cmpi.b	#$B5,d7		; is ring sound	effect played?
0007C134 6600                       		bne.s	Sound_notB5	; if not, branch
0007C136 4A2E 002B                  		tst.b	$2B(a6)
0007C13A 6600                       		bne.s	loc_721EE
0007C13C 1E3C 00CE                  		move.b	#$CE,d7		; play ring sound in left speaker
0007C140                            
0007C140                            loc_721EE:
0007C140 086E 0000 002B             		bchg	#0,$2B(a6)	; change speaker
0007C146                            
0007C146                            Sound_notB5:
0007C146 0C07 00A7                  		cmpi.b	#$A7,d7		; is "pushing" sound played?
0007C14A 6600                       		bne.s	Sound_notA7	; if not, branch
0007C14C 4A2E 002C                  		tst.b	$2C(a6)
0007C150 6600 0000                  		bne.w	locret_722C4
0007C154 1D7C 0080 002C             		move.b	#$80,$2C(a6)
0007C15A                            
0007C15A                            Sound_notA7:
0007C15A 2079 0007 B762             		movea.l	(Go_SoundIndex).l,a0
0007C160 0407 00A0                  		subi.b	#$A0,d7
0007C164 E54F                       		lsl.w	#2,d7
0007C166 2670 7000                  		movea.l	(a0,d7.w),a3
0007C16A 224B                       		movea.l	a3,a1
0007C16C 7200                       		moveq	#0,d1
0007C16E 3219                       		move.w	(a1)+,d1
0007C170 D28B                       		add.l	a3,d1
0007C172 1A19                       		move.b	(a1)+,d5
0007C174 1E19                       		move.b	(a1)+,d7
0007C176 5307                       		subq.b	#1,d7
0007C178 7C30                       		moveq	#$30,d6
0007C17A                            
0007C17A                            loc_72228:
0007C17A 7600                       		moveq	#0,d3
0007C17C 1629 0001                  		move.b	1(a1),d3
0007C180 1803                       		move.b	d3,d4
0007C182 6B00                       		bmi.s	loc_72244
0007C184 5543                       		subq.w	#2,d3
0007C186 E54B                       		lsl.w	#2,d3
0007C188 4BFA 0000                  		lea	dword_722CC(pc),a5
0007C18C 2A75 3000                  		movea.l	(a5,d3.w),a5
0007C190 08D5 0002                  		bset	#2,(a5)
0007C194 6000                       		bra.s	loc_7226E
0007C196                            ; ===========================================================================
0007C196                            
0007C196                            loc_72244:
0007C196 E64B                       		lsr.w	#3,d3
0007C198 4BFA 0000                  		lea	dword_722CC(pc),a5
0007C19C 2A75 3000                  		movea.l	(a5,d3.w),a5
0007C1A0 08D5 0002                  		bset	#2,(a5)
0007C1A4 0C04 00C0                  		cmpi.b	#$C0,d4
0007C1A8 6600                       		bne.s	loc_7226E
0007C1AA 1004                       		move.b	d4,d0
0007C1AC 0000 001F                  		ori.b	#$1F,d0
0007C1B0 13C0 00C0 0011             		move.b	d0,($C00011).l
0007C1B6 0840 0005                  		bchg	#5,d0
0007C1BA 13C0 00C0 0011             		move.b	d0,($C00011).l
0007C1C0                            
0007C1C0                            loc_7226E:
0007C1C0 2A7B 3000                  		movea.l	dword_722EC(pc,d3.w),a5
0007C1C4 244D                       		movea.l	a5,a2
0007C1C6 700B                       		moveq	#$B,d0
0007C1C8                            
0007C1C8                            loc_72276:
0007C1C8 429A                       		clr.l	(a2)+
0007C1CA 51C8 FFFC                  		dbf	d0,loc_72276
0007C1CE                            
0007C1CE 3A99                       		move.w	(a1)+,(a5)
0007C1D0 1B45 0002                  		move.b	d5,2(a5)
0007C1D4 7000                       		moveq	#0,d0
0007C1D6 3019                       		move.w	(a1)+,d0
0007C1D8 D08B                       		add.l	a3,d0
0007C1DA 2B40 0004                  		move.l	d0,4(a5)
0007C1DE 3B59 0008                  		move.w	(a1)+,8(a5)
0007C1E2 1B7C 0001 000E             		move.b	#1,$E(a5)
0007C1E8 1B46 000D                  		move.b	d6,$D(a5)
0007C1EC 4A04                       		tst.b	d4
0007C1EE 6B00                       		bmi.s	loc_722A8
0007C1F0 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
0007C1F6 2B41 0020                  		move.l	d1,$20(a5)
0007C1FA                            
0007C1FA                            loc_722A8:
0007C1FA 51CF FF7E                  		dbf	d7,loc_72228
0007C1FE                            
0007C1FE 4A2E 0250                  		tst.b	$250(a6)
0007C202 6A00                       		bpl.s	loc_722B8
0007C204 08EE 0002 0340             		bset	#2,$340(a6)
0007C20A                            
0007C20A                            loc_722B8:
0007C20A 4A2E 0310                  		tst.b	$310(a6)
0007C20E 6A00                       		bpl.s	locret_722C4
0007C210 08EE 0002 0370             		bset	#2,$370(a6)
0007C216                            
0007C216                            locret_722C4:
0007C216 4E75                       		rts	
0007C218                            ; ===========================================================================
0007C218                            
0007C218                            loc_722C6:
0007C218 4216                       		clr.b	0(a6)
0007C21A 4E75                       		rts	
0007C21C                            ; ===========================================================================
0007C21C 00FF F0D0                  dword_722CC:	dc.l $FFF0D0
0007C220 0000 0000                  		dc.l 0
0007C224 00FF F100                  		dc.l $FFF100
0007C228 00FF F130                  		dc.l $FFF130
0007C22C 00FF F190                  		dc.l $FFF190
0007C230 00FF F1C0                  		dc.l $FFF1C0
0007C234 00FF F1F0                  		dc.l $FFF1F0
0007C238 00FF F1F0                  		dc.l $FFF1F0
0007C23C 00FF F220                  dword_722EC:	dc.l $FFF220
0007C240 0000 0000                  		dc.l 0
0007C244 00FF F250                  		dc.l $FFF250
0007C248 00FF F280                  		dc.l $FFF280
0007C24C 00FF F2B0                  		dc.l $FFF2B0
0007C250 00FF F2E0                  		dc.l $FFF2E0
0007C254 00FF F310                  		dc.l $FFF310
0007C258 00FF F310                  		dc.l $FFF310
0007C25C                            ; ===========================================================================
0007C25C                            ; ---------------------------------------------------------------------------
0007C25C                            ; Play GHZ waterfall sound
0007C25C                            ; ---------------------------------------------------------------------------
0007C25C                            
0007C25C                            Sound_D0toDF:				; XREF: Sound_ChkValue
0007C25C 4A2E 0027                  		tst.b	$27(a6)
0007C260 6600 0000                  		bne.w	locret_723C6
0007C264 4A2E 0004                  		tst.b	4(a6)
0007C268 6600 0000                  		bne.w	locret_723C6
0007C26C 4A2E 0024                  		tst.b	$24(a6)
0007C270 6600 0000                  		bne.w	locret_723C6
0007C274 2079 0007 B75A             		movea.l	(Go_SoundD0).l,a0
0007C27A 0407 00D0                  		subi.b	#$D0,d7
0007C27E E54F                       		lsl.w	#2,d7
0007C280 2670 7000                  		movea.l	(a0,d7.w),a3
0007C284 224B                       		movea.l	a3,a1
0007C286 7000                       		moveq	#0,d0
0007C288 3019                       		move.w	(a1)+,d0
0007C28A D08B                       		add.l	a3,d0
0007C28C 2D40 0020                  		move.l	d0,$20(a6)
0007C290 1A19                       		move.b	(a1)+,d5
0007C292 1E19                       		move.b	(a1)+,d7
0007C294 5307                       		subq.b	#1,d7
0007C296 7C30                       		moveq	#$30,d6
0007C298                            
0007C298                            loc_72348:
0007C298 1829 0001                  		move.b	1(a1),d4
0007C29C 6B00                       		bmi.s	loc_7235A
0007C29E 08EE 0002 0100             		bset	#2,$100(a6)
0007C2A4 4BEE 0340                  		lea	$340(a6),a5
0007C2A8 6000                       		bra.s	loc_72364
0007C2AA                            ; ===========================================================================
0007C2AA                            
0007C2AA                            loc_7235A:
0007C2AA 08EE 0002 01F0             		bset	#2,$1F0(a6)
0007C2B0 4BEE 0370                  		lea	$370(a6),a5
0007C2B4                            
0007C2B4                            loc_72364:
0007C2B4 244D                       		movea.l	a5,a2
0007C2B6 700B                       		moveq	#$B,d0
0007C2B8                            
0007C2B8                            loc_72368:
0007C2B8 429A                       		clr.l	(a2)+
0007C2BA 51C8 FFFC                  		dbf	d0,loc_72368
0007C2BE                            
0007C2BE 3A99                       		move.w	(a1)+,(a5)
0007C2C0 1B45 0002                  		move.b	d5,2(a5)
0007C2C4 7000                       		moveq	#0,d0
0007C2C6 3019                       		move.w	(a1)+,d0
0007C2C8 D08B                       		add.l	a3,d0
0007C2CA 2B40 0004                  		move.l	d0,4(a5)
0007C2CE 3B59 0008                  		move.w	(a1)+,8(a5)
0007C2D2 1B7C 0001 000E             		move.b	#1,$E(a5)
0007C2D8 1B46 000D                  		move.b	d6,$D(a5)
0007C2DC 4A04                       		tst.b	d4
0007C2DE 6B00                       		bmi.s	loc_72396
0007C2E0 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
0007C2E6                            
0007C2E6                            loc_72396:
0007C2E6 51CF FFB0                  		dbf	d7,loc_72348
0007C2EA                            
0007C2EA 4A2E 0250                  		tst.b	$250(a6)
0007C2EE 6A00                       		bpl.s	loc_723A6
0007C2F0 08EE 0002 0340             		bset	#2,$340(a6)
0007C2F6                            
0007C2F6                            loc_723A6:
0007C2F6 4A2E 0310                  		tst.b	$310(a6)
0007C2FA 6A00                       		bpl.s	locret_723C6
0007C2FC 08EE 0002 0370             		bset	#2,$370(a6)
0007C302 0004 001F                  		ori.b	#$1F,d4
0007C306 13C4 00C0 0011             		move.b	d4,($C00011).l
0007C30C 0844 0005                  		bchg	#5,d4
0007C310 13C4 00C0 0011             		move.b	d4,($C00011).l
0007C316                            
0007C316                            locret_723C6:
0007C316 4E75                       		rts	
0007C318                            ; End of function Sound_ChkValue
0007C318                            
0007C318                            ; ===========================================================================
0007C318 00FF F100                  		dc.l $FFF100
0007C31C 00FF F1F0                  		dc.l $FFF1F0
0007C320 00FF F250                  		dc.l $FFF250
0007C324 00FF F310                  		dc.l $FFF310
0007C328 00FF F340                  		dc.l $FFF340
0007C32C 00FF F370                  		dc.l $FFF370
0007C330                            
0007C330                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007C330                            
0007C330                            
0007C330                            Snd_FadeOut1:				; XREF: Sound_E0
0007C330 4216                       		clr.b	0(a6)
0007C332 4BEE 0220                  		lea	$220(a6),a5
0007C336 7E05                       		moveq	#5,d7
0007C338                            
0007C338                            loc_723EA:
0007C338 4A15                       		tst.b	(a5)
0007C33A 6A00 0000                  		bpl.w	loc_72472
0007C33E 0895 0007                  		bclr	#7,(a5)
0007C342 7600                       		moveq	#0,d3
0007C344 162D 0001                  		move.b	1(a5),d3
0007C348 6B00                       		bmi.s	loc_7243C
0007C34A 4EBA 0000                  		jsr	sub_726FE(pc)
0007C34E 0C03 0004                  		cmpi.b	#4,d3
0007C352 6600                       		bne.s	loc_72416
0007C354 4A2E 0340                  		tst.b	$340(a6)
0007C358 6A00                       		bpl.s	loc_72416
0007C35A 4BEE 0340                  		lea	$340(a6),a5
0007C35E 226E 0020                  		movea.l	$20(a6),a1
0007C362 6000                       		bra.s	loc_72428
0007C364                            ; ===========================================================================
0007C364                            
0007C364                            loc_72416:
0007C364 5503                       		subq.b	#2,d3
0007C366 E50B                       		lsl.b	#2,d3
0007C368 41FA FEB2                  		lea	dword_722CC(pc),a0
0007C36C 264D                       		movea.l	a5,a3
0007C36E 2A70 3000                  		movea.l	(a0,d3.w),a5
0007C372 226E 0018                  		movea.l	$18(a6),a1
0007C376                            
0007C376                            loc_72428:
0007C376 0895 0002                  		bclr	#2,(a5)
0007C37A 08D5 0001                  		bset	#1,(a5)
0007C37E 102D 000B                  		move.b	$B(a5),d0
0007C382 4EBA 0000                  		jsr	sub_72C4E(pc)
0007C386 2A4B                       		movea.l	a3,a5
0007C388 6000                       		bra.s	loc_72472
0007C38A                            ; ===========================================================================
0007C38A                            
0007C38A                            loc_7243C:
0007C38A 4EBA 0000                  		jsr	sub_729A0(pc)
0007C38E 41EE 0370                  		lea	$370(a6),a0
0007C392 0C03 00E0                  		cmpi.b	#$E0,d3
0007C396 6700                       		beq.s	loc_7245A
0007C398 0C03 00C0                  		cmpi.b	#$C0,d3
0007C39C 6700                       		beq.s	loc_7245A
0007C39E E60B                       		lsr.b	#3,d3
0007C3A0 41FA FE7A                  		lea	dword_722CC(pc),a0
0007C3A4 2070 3000                  		movea.l	(a0,d3.w),a0
0007C3A8                            
0007C3A8                            loc_7245A:
0007C3A8 0890 0002                  		bclr	#2,(a0)
0007C3AC 08D0 0001                  		bset	#1,(a0)
0007C3B0 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
0007C3B6 6600                       		bne.s	loc_72472
0007C3B8 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
0007C3C0                            
0007C3C0                            loc_72472:
0007C3C0 DAFC 0030                  		adda.w	#$30,a5
0007C3C4 51CF FF72                  		dbf	d7,loc_723EA
0007C3C8                            
0007C3C8 4E75                       		rts	
0007C3CA                            ; End of function Snd_FadeOut1
0007C3CA                            
0007C3CA                            
0007C3CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007C3CA                            
0007C3CA                            
0007C3CA                            Snd_FadeOut2:				; XREF: Sound_E0
0007C3CA 4BEE 0340                  		lea	$340(a6),a5
0007C3CE 4A15                       		tst.b	(a5)
0007C3D0 6A00                       		bpl.s	loc_724AE
0007C3D2 0895 0007                  		bclr	#7,(a5)
0007C3D6 0815 0002                  		btst	#2,(a5)
0007C3DA 6600                       		bne.s	loc_724AE
0007C3DC 4EBA 0000                  		jsr	loc_7270A(pc)
0007C3E0 4BEE 0100                  		lea	$100(a6),a5
0007C3E4 0895 0002                  		bclr	#2,(a5)
0007C3E8 08D5 0001                  		bset	#1,(a5)
0007C3EC 4A15                       		tst.b	(a5)
0007C3EE 6A00                       		bpl.s	loc_724AE
0007C3F0 226E 0018                  		movea.l	$18(a6),a1
0007C3F4 102D 000B                  		move.b	$B(a5),d0
0007C3F8 4EBA 0000                  		jsr	sub_72C4E(pc)
0007C3FC                            
0007C3FC                            loc_724AE:
0007C3FC 4BEE 0370                  		lea	$370(a6),a5
0007C400 4A15                       		tst.b	(a5)
0007C402 6A00                       		bpl.s	locret_724E4
0007C404 0895 0007                  		bclr	#7,(a5)
0007C408 0815 0002                  		btst	#2,(a5)
0007C40C 6600                       		bne.s	locret_724E4
0007C40E 4EBA 0000                  		jsr	loc_729A6(pc)
0007C412 4BEE 01F0                  		lea	$1F0(a6),a5
0007C416 0895 0002                  		bclr	#2,(a5)
0007C41A 08D5 0001                  		bset	#1,(a5)
0007C41E 4A15                       		tst.b	(a5)
0007C420 6A00                       		bpl.s	locret_724E4
0007C422 0C2D 00E0 0001             		cmpi.b	#-$20,1(a5)
0007C428 6600                       		bne.s	locret_724E4
0007C42A 13ED 001F 00C0 0011        		move.b	$1F(a5),($C00011).l
0007C432                            
0007C432                            locret_724E4:
0007C432 4E75                       		rts	
0007C434                            ; End of function Snd_FadeOut2
0007C434                            
0007C434                            ; ===========================================================================
0007C434                            ; ---------------------------------------------------------------------------
0007C434                            ; Fade out music
0007C434                            ; ---------------------------------------------------------------------------
0007C434                            
0007C434                            Sound_E0:				; XREF: Sound_ExIndex
0007C434 4EBA FEFA                  		jsr	Snd_FadeOut1(pc)
0007C438 4EBA FF90                  		jsr	Snd_FadeOut2(pc)
0007C43C 1D7C 0003 0006             		move.b	#3,6(a6)
0007C442 1D7C 0028 0004             		move.b	#$28,4(a6)
0007C448 422E 0040                  		clr.b	$40(a6)
0007C44C 422E 002A                  		clr.b	$2A(a6)
0007C450 4E75                       		rts	
0007C452                            
0007C452                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007C452                            
0007C452                            
0007C452                            sub_72504:				; XREF: sub_71B4C
0007C452 102E 0006                  		move.b	6(a6),d0
0007C456 6700                       		beq.s	loc_72510
0007C458 532E 0006                  		subq.b	#1,6(a6)
0007C45C 4E75                       		rts	
0007C45E                            ; ===========================================================================
0007C45E                            
0007C45E                            loc_72510:
0007C45E 532E 0004                  		subq.b	#1,4(a6)
0007C462 6700 0000                  		beq.w	Sound_E4
0007C466 1D7C 0003 0006             		move.b	#3,6(a6)
0007C46C 4BEE 0070                  		lea	$70(a6),a5
0007C470 7E05                       		moveq	#5,d7
0007C472                            
0007C472                            loc_72524:
0007C472 4A15                       		tst.b	(a5)
0007C474 6A00                       		bpl.s	loc_72538
0007C476 522D 0009                  		addq.b	#1,9(a5)
0007C47A 6A00                       		bpl.s	loc_72534
0007C47C 0895 0007                  		bclr	#7,(a5)
0007C480 6000                       		bra.s	loc_72538
0007C482                            ; ===========================================================================
0007C482                            
0007C482                            loc_72534:
0007C482 4EBA 0000                  		jsr	sub_72CB4(pc)
0007C486                            
0007C486                            loc_72538:
0007C486 DAFC 0030                  		adda.w	#$30,a5
0007C48A 51CF FFE6                  		dbf	d7,loc_72524
0007C48E                            
0007C48E 7E02                       		moveq	#2,d7
0007C490                            
0007C490                            loc_72542:
0007C490 4A15                       		tst.b	(a5)
0007C492 6A00                       		bpl.s	loc_72560
0007C494 522D 0009                  		addq.b	#1,9(a5)
0007C498 0C2D 0010 0009             		cmpi.b	#$10,9(a5)
0007C49E 6500                       		bcs.s	loc_72558
0007C4A0 0895 0007                  		bclr	#7,(a5)
0007C4A4 6000                       		bra.s	loc_72560
0007C4A6                            ; ===========================================================================
0007C4A6                            
0007C4A6                            loc_72558:
0007C4A6 1C2D 0009                  		move.b	9(a5),d6
0007C4AA 4EBA 0000                  		jsr	sub_7296A(pc)
0007C4AE                            
0007C4AE                            loc_72560:
0007C4AE DAFC 0030                  		adda.w	#$30,a5
0007C4B2 51CF FFDC                  		dbf	d7,loc_72542
0007C4B6                            
0007C4B6 4E75                       		rts	
0007C4B8                            ; End of function sub_72504
0007C4B8                            
0007C4B8                            
0007C4B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007C4B8                            
0007C4B8                            
0007C4B8                            sub_7256A:				; XREF: Sound_E4; sub_725CA
0007C4B8 7602                       		moveq	#2,d3
0007C4BA 7028                       		moveq	#$28,d0
0007C4BC                            
0007C4BC                            loc_7256E:
0007C4BC 1203                       		move.b	d3,d1
0007C4BE 4EBA 0000                  		jsr	sub_7272E(pc)
0007C4C2 5801                       		addq.b	#4,d1
0007C4C4 4EBA 0000                  		jsr	sub_7272E(pc)
0007C4C8 51CB FFF2                  		dbf	d3,loc_7256E
0007C4CC                            
0007C4CC 7040                       		moveq	#$40,d0
0007C4CE 727F                       		moveq	#$7F,d1
0007C4D0 7802                       		moveq	#2,d4
0007C4D2                            
0007C4D2                            loc_72584:
0007C4D2 7603                       		moveq	#3,d3
0007C4D4                            
0007C4D4                            loc_72586:
0007C4D4 4EBA 0000                  		jsr	sub_7272E(pc)
0007C4D8 4EBA 0000                  		jsr	sub_72764(pc)
0007C4DC 5840                       		addq.w	#4,d0
0007C4DE 51CB FFF4                  		dbf	d3,loc_72586
0007C4E2                            
0007C4E2 0400 000F                  		subi.b	#$F,d0
0007C4E6 51CC FFEA                  		dbf	d4,loc_72584
0007C4EA                            
0007C4EA 4E75                       		rts	
0007C4EC                            ; End of function sub_7256A
0007C4EC                            
0007C4EC                            ; ===========================================================================
0007C4EC                            ; ---------------------------------------------------------------------------
0007C4EC                            ; Stop music
0007C4EC                            ; ---------------------------------------------------------------------------
0007C4EC                            
0007C4EC                            Sound_E4:				; XREF: Sound_ChkValue; Sound_ExIndex; sub_72504
0007C4EC 702B                       		moveq	#$2B,d0
0007C4EE 123C 0080                  		move.b	#$80,d1
0007C4F2 4EBA 0000                  		jsr	sub_7272E(pc)
0007C4F6 7027                       		moveq	#$27,d0
0007C4F8 7200                       		moveq	#0,d1
0007C4FA 4EBA 0000                  		jsr	sub_7272E(pc)
0007C4FE 204E                       		movea.l	a6,a0
0007C500 303C 00E3                  		move.w	#$E3,d0
0007C504                            
0007C504                            loc_725B6:
0007C504 4298                       		clr.l	(a0)+
0007C506 51C8 FFFC                  		dbf	d0,loc_725B6
0007C50A                            
0007C50A 1D7C 0080 0009             		move.b	#$80,9(a6)	; set music to $80 (silence)
0007C510 4EBA FFA6                  		jsr	sub_7256A(pc)
0007C514 6000 0000                  		bra.w	sub_729B6
0007C518                            
0007C518                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007C518                            
0007C518                            
0007C518                            sub_725CA:				; XREF: Sound_ChkValue
0007C518 204E                       		movea.l	a6,a0
0007C51A 1216                       		move.b	0(a6),d1
0007C51C 142E 0027                  		move.b	$27(a6),d2
0007C520 162E 002A                  		move.b	$2A(a6),d3
0007C524 182E 0026                  		move.b	$26(a6),d4
0007C528 3A2E 000A                  		move.w	$A(a6),d5
0007C52C 303C 0087                  		move.w	#$87,d0
0007C530                            
0007C530                            loc_725E4:
0007C530 4298                       		clr.l	(a0)+
0007C532 51C8 FFFC                  		dbf	d0,loc_725E4
0007C536                            
0007C536 1C81                       		move.b	d1,0(a6)
0007C538 1D42 0027                  		move.b	d2,$27(a6)
0007C53C 1D43 002A                  		move.b	d3,$2A(a6)
0007C540 1D44 0026                  		move.b	d4,$26(a6)
0007C544 3D45 000A                  		move.w	d5,$A(a6)
0007C548 1D7C 0080 0009             		move.b	#$80,9(a6)
0007C54E 4EBA FF68                  		jsr	sub_7256A(pc)
0007C552 6000 0000                  		bra.w	sub_729B6
0007C556                            ; End of function sub_725CA
0007C556                            
0007C556                            
0007C556                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007C556                            
0007C556                            
0007C556                            sub_7260C:				; XREF: sub_71B4C
0007C556 1D6E 0002 0001             		move.b	2(a6),1(a6)
0007C55C 41EE 004E                  		lea	$4E(a6),a0
0007C560 7030                       		moveq	#$30,d0
0007C562 7209                       		moveq	#9,d1
0007C564                            
0007C564                            loc_7261A:
0007C564 5210                       		addq.b	#1,(a0)
0007C566 D0C0                       		adda.w	d0,a0
0007C568 51C9 FFFA                  		dbf	d1,loc_7261A
0007C56C                            
0007C56C 4E75                       		rts	
0007C56E                            ; End of function sub_7260C
0007C56E                            
0007C56E                            ; ===========================================================================
0007C56E                            ; ---------------------------------------------------------------------------
0007C56E                            ; Speed	up music
0007C56E                            ; ---------------------------------------------------------------------------
0007C56E                            
0007C56E                            Sound_E2:				; XREF: Sound_ExIndex
0007C56E 4A2E 0027                  		tst.b	$27(a6)
0007C572 6600                       		bne.s	loc_7263E
0007C574 1D6E 0029 0002             		move.b	$29(a6),2(a6)
0007C57A 1D6E 0029 0001             		move.b	$29(a6),1(a6)
0007C580 1D7C 0080 002A             		move.b	#$80,$2A(a6)
0007C586 4E75                       		rts	
0007C588                            ; ===========================================================================
0007C588                            
0007C588                            loc_7263E:
0007C588 1D6E 03C9 03A2             		move.b	$3C9(a6),$3A2(a6)
0007C58E 1D6E 03C9 03A1             		move.b	$3C9(a6),$3A1(a6)
0007C594 1D7C 0080 03CA             		move.b	#$80,$3CA(a6)
0007C59A 4E75                       		rts	
0007C59C                            ; ===========================================================================
0007C59C                            ; ---------------------------------------------------------------------------
0007C59C                            ; Change music back to normal speed
0007C59C                            ; ---------------------------------------------------------------------------
0007C59C                            
0007C59C                            Sound_E3:				; XREF: Sound_ExIndex
0007C59C 4A2E 0027                  		tst.b	$27(a6)
0007C5A0 6600                       		bne.s	loc_7266A
0007C5A2 1D6E 0028 0002             		move.b	$28(a6),2(a6)
0007C5A8 1D6E 0028 0001             		move.b	$28(a6),1(a6)
0007C5AE 422E 002A                  		clr.b	$2A(a6)
0007C5B2 4E75                       		rts	
0007C5B4                            ; ===========================================================================
0007C5B4                            
0007C5B4                            loc_7266A:
0007C5B4 1D6E 03C8 03A2             		move.b	$3C8(a6),$3A2(a6)
0007C5BA 1D6E 03C8 03A1             		move.b	$3C8(a6),$3A1(a6)
0007C5C0 422E 03CA                  		clr.b	$3CA(a6)
0007C5C4 4E75                       		rts	
0007C5C6                            
0007C5C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007C5C6                            
0007C5C6                            
0007C5C6                            sub_7267C:				; XREF: sub_71B4C
0007C5C6 4A2E 0025                  		tst.b	$25(a6)
0007C5CA 6700                       		beq.s	loc_72688
0007C5CC 532E 0025                  		subq.b	#1,$25(a6)
0007C5D0 4E75                       		rts	
0007C5D2                            ; ===========================================================================
0007C5D2                            
0007C5D2                            loc_72688:
0007C5D2 4A2E 0026                  		tst.b	$26(a6)
0007C5D6 6700                       		beq.s	loc_726D6
0007C5D8 532E 0026                  		subq.b	#1,$26(a6)
0007C5DC 1D7C 0002 0025             		move.b	#2,$25(a6)
0007C5E2 4BEE 0070                  		lea	$70(a6),a5
0007C5E6 7E05                       		moveq	#5,d7
0007C5E8                            
0007C5E8                            loc_7269E:
0007C5E8 4A15                       		tst.b	(a5)
0007C5EA 6A00                       		bpl.s	loc_726AA
0007C5EC 532D 0009                  		subq.b	#1,9(a5)
0007C5F0 4EBA 0000                  		jsr	sub_72CB4(pc)
0007C5F4                            
0007C5F4                            loc_726AA:
0007C5F4 DAFC 0030                  		adda.w	#$30,a5
0007C5F8 51CF FFEE                  		dbf	d7,loc_7269E
0007C5FC 7E02                       		moveq	#2,d7
0007C5FE                            
0007C5FE                            loc_726B4:
0007C5FE 4A15                       		tst.b	(a5)
0007C600 6A00                       		bpl.s	loc_726CC
0007C602 532D 0009                  		subq.b	#1,9(a5)
0007C606 1C2D 0009                  		move.b	9(a5),d6
0007C60A 0C06 0010                  		cmpi.b	#$10,d6
0007C60E 6500                       		bcs.s	loc_726C8
0007C610 7C0F                       		moveq	#$F,d6
0007C612                            
0007C612                            loc_726C8:
0007C612 4EBA 0000                  		jsr	sub_7296A(pc)
0007C616                            
0007C616                            loc_726CC:
0007C616 DAFC 0030                  		adda.w	#$30,a5
0007C61A 51CF FFE2                  		dbf	d7,loc_726B4
0007C61E 4E75                       		rts	
0007C620                            ; ===========================================================================
0007C620                            
0007C620                            loc_726D6:
0007C620 08AE 0002 0040             		bclr	#2,$40(a6)
0007C626 422E 0024                  		clr.b	$24(a6)
0007C62A 4E75                       		rts	
0007C62C                            ; End of function sub_7267C
0007C62C                            
0007C62C                            ; ===========================================================================
0007C62C                            
0007C62C                            loc_726E2:				; XREF: sub_71CCA
0007C62C 0815 0001                  		btst	#1,(a5)
0007C630 6600                       		bne.s	locret_726FC
0007C632 0815 0002                  		btst	#2,(a5)
0007C636 6600                       		bne.s	locret_726FC
0007C638 7028                       		moveq	#$28,d0
0007C63A 122D 0001                  		move.b	1(a5),d1
0007C63E 0001 00F0                  		ori.b	#-$10,d1
0007C642 6000 0000                  		bra.w	sub_7272E
0007C646                            ; ===========================================================================
0007C646                            
0007C646                            locret_726FC:
0007C646 4E75                       		rts	
0007C648                            
0007C648                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007C648                            
0007C648                            
0007C648                            sub_726FE:				; XREF: sub_71CEC; sub_71D9E; Sound_ChkValue; Snd_FadeOut1
0007C648 0815 0004                  		btst	#4,(a5)
0007C64C 6600                       		bne.s	locret_72714
0007C64E 0815 0002                  		btst	#2,(a5)
0007C652 6600                       		bne.s	locret_72714
0007C654                            
0007C654                            loc_7270A:				; XREF: Snd_FadeOut2
0007C654 7028                       		moveq	#$28,d0
0007C656 122D 0001                  		move.b	1(a5),d1
0007C65A 6000 0000                  		bra.w	sub_7272E
0007C65E                            ; ===========================================================================
0007C65E                            
0007C65E                            locret_72714:
0007C65E 4E75                       		rts	
0007C660                            ; End of function sub_726FE
0007C660                            
0007C660                            ; ===========================================================================
0007C660                            
0007C660                            loc_72716:				; XREF: sub_72A5A
0007C660 0815 0002                  		btst	#2,(a5)
0007C664 6600                       		bne.s	locret_72720
0007C666 6000 0000                  		bra.w	sub_72722
0007C66A                            ; ===========================================================================
0007C66A                            
0007C66A                            locret_72720:
0007C66A 4E75                       		rts	
0007C66C                            
0007C66C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007C66C                            
0007C66C                            
0007C66C                            sub_72722:				; XREF: sub_71E18; sub_72C4E; sub_72CB4
0007C66C 082D 0002 0001             		btst	#2,1(a5)
0007C672 6600                       		bne.s	loc_7275A
0007C674 D02D 0001                  		add.b	1(a5),d0
0007C678                            ; End of function sub_72722
0007C678                            
0007C678                            
0007C678                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007C678                            
0007C678                            
0007C678                            sub_7272E:				; XREF: loc_71E6A
0007C678 1439 00A0 4000             		move.b	($A04000).l,d2
0007C67E 0802 0007                  		btst	#7,d2
0007C682 66F4                       		bne.s	sub_7272E
0007C684 13C0 00A0 4000             		move.b	d0,($A04000).l
0007C68A 4E71                       		nop	
0007C68C 4E71                       		nop	
0007C68E 4E71                       		nop	
0007C690                            
0007C690                            loc_72746:
0007C690 1439 00A0 4000             		move.b	($A04000).l,d2
0007C696 0802 0007                  		btst	#7,d2
0007C69A 66F4                       		bne.s	loc_72746
0007C69C                            
0007C69C 13C1 00A0 4001             		move.b	d1,($A04001).l
0007C6A2 4E75                       		rts	
0007C6A4                            ; End of function sub_7272E
0007C6A4                            
0007C6A4                            ; ===========================================================================
0007C6A4                            
0007C6A4                            loc_7275A:				; XREF: sub_72722
0007C6A4 142D 0001                  		move.b	1(a5),d2
0007C6A8 0882 0002                  		bclr	#2,d2
0007C6AC D002                       		add.b	d2,d0
0007C6AE                            
0007C6AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007C6AE                            
0007C6AE                            
0007C6AE                            sub_72764:				; XREF: loc_71E6A; Sound_ChkValue; sub_7256A; sub_72764
0007C6AE 1439 00A0 4000             		move.b	($A04000).l,d2
0007C6B4 0802 0007                  		btst	#7,d2
0007C6B8 66F4                       		bne.s	sub_72764
0007C6BA 13C0 00A0 4002             		move.b	d0,($A04002).l
0007C6C0 4E71                       		nop	
0007C6C2 4E71                       		nop	
0007C6C4 4E71                       		nop	
0007C6C6                            
0007C6C6                            loc_7277C:
0007C6C6 1439 00A0 4000             		move.b	($A04000).l,d2
0007C6CC 0802 0007                  		btst	#7,d2
0007C6D0 66F4                       		bne.s	loc_7277C
0007C6D2                            
0007C6D2 13C1 00A0 4003             		move.b	d1,($A04003).l
0007C6D8 4E75                       		rts	
0007C6DA                            ; End of function sub_72764
0007C6DA                            
0007C6DA                            ; ===========================================================================
0007C6DA 025E 0284 02AB 02D3 02FE+  word_72790:	dc.w $25E, $284, $2AB, $2D3, $2FE, $32D, $35C, $38F, $3C5
0007C6EC 03FF 043C 047C 0A5E 0A84+  		dc.w $3FF, $43C, $47C, $A5E, $A84, $AAB, $AD3, $AFE, $B2D
0007C6FE 0B5C 0B8F 0BC5 0BFF 0C3C+  		dc.w $B5C, $B8F, $BC5, $BFF, $C3C, $C7C, $125E,	$1284
0007C70E 12AB 12D3 12FE 132D 135C+  		dc.w $12AB, $12D3, $12FE, $132D, $135C,	$138F, $13C5, $13FF
0007C71E 143C 147C 1A5E 1A84 1AAB+  		dc.w $143C, $147C, $1A5E, $1A84, $1AAB,	$1AD3, $1AFE, $1B2D
0007C72E 1B5C 1B8F 1BC5 1BFF 1C3C+  		dc.w $1B5C, $1B8F, $1BC5, $1BFF, $1C3C,	$1C7C, $225E, $2284
0007C73E 22AB 22D3 22FE 232D 235C+  		dc.w $22AB, $22D3, $22FE, $232D, $235C,	$238F, $23C5, $23FF
0007C74E 243C 247C 2A5E 2A84 2AAB+  		dc.w $243C, $247C, $2A5E, $2A84, $2AAB,	$2AD3, $2AFE, $2B2D
0007C75E 2B5C 2B8F 2BC5 2BFF 2C3C+  		dc.w $2B5C, $2B8F, $2BC5, $2BFF, $2C3C,	$2C7C, $325E, $3284
0007C76E 32AB 32D3 32FE 332D 335C+  		dc.w $32AB, $32D3, $32FE, $332D, $335C,	$338F, $33C5, $33FF
0007C77E 343C 347C 3A5E 3A84 3AAB+  		dc.w $343C, $347C, $3A5E, $3A84, $3AAB,	$3AD3, $3AFE, $3B2D
0007C78E 3B5C 3B8F 3BC5 3BFF 3C3C+  		dc.w $3B5C, $3B8F, $3BC5, $3BFF, $3C3C,	$3C7C
0007C79A                            
0007C79A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007C79A                            
0007C79A                            
0007C79A                            sub_72850:				; XREF: sub_71B4C
0007C79A 532D 000E                  		subq.b	#1,$E(a5)
0007C79E 6600                       		bne.s	loc_72866
0007C7A0 0895 0004                  		bclr	#4,(a5)
0007C7A4 4EBA 0000                  		jsr	sub_72878(pc)
0007C7A8 4EBA 0000                  		jsr	sub_728DC(pc)
0007C7AC 6000 0000                  		bra.w	loc_7292E
0007C7B0                            ; ===========================================================================
0007C7B0                            
0007C7B0                            loc_72866:
0007C7B0 4EBA F3FE                  		jsr	sub_71D9E(pc)
0007C7B4 4EBA 0000                  		jsr	sub_72926(pc)
0007C7B8 4EBA F41E                  		jsr	sub_71DC6(pc)
0007C7BC 4EBA 0000                  		jsr	sub_728E2(pc)
0007C7C0 4E75                       		rts	
0007C7C2                            ; End of function sub_72850
0007C7C2                            
0007C7C2                            
0007C7C2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007C7C2                            
0007C7C2                            
0007C7C2                            sub_72878:				; XREF: sub_72850
0007C7C2 0895 0001                  		bclr	#1,(a5)
0007C7C6 286D 0004                  		movea.l	4(a5),a4
0007C7CA                            
0007C7CA                            loc_72880:
0007C7CA 7A00                       		moveq	#0,d5
0007C7CC 1A1C                       		move.b	(a4)+,d5
0007C7CE 0C05 00E0                  		cmpi.b	#$E0,d5
0007C7D2 6500                       		bcs.s	loc_72890
0007C7D4 4EBA 0000                  		jsr	sub_72A5A(pc)
0007C7D8 60F0                       		bra.s	loc_72880
0007C7DA                            ; ===========================================================================
0007C7DA                            
0007C7DA                            loc_72890:
0007C7DA 4A05                       		tst.b	d5
0007C7DC 6A00                       		bpl.s	loc_728A4
0007C7DE 4EBA 0000                  		jsr	sub_728AC(pc)
0007C7E2 1A1C                       		move.b	(a4)+,d5
0007C7E4 4A05                       		tst.b	d5
0007C7E6 6A00                       		bpl.s	loc_728A4
0007C7E8 534C                       		subq.w	#1,a4
0007C7EA 6000 F386                  		bra.w	sub_71D60
0007C7EE                            ; ===========================================================================
0007C7EE                            
0007C7EE                            loc_728A4:
0007C7EE 4EBA F362                  		jsr	sub_71D40(pc)
0007C7F2 6000 F37E                  		bra.w	sub_71D60
0007C7F6                            ; End of function sub_72878
0007C7F6                            
0007C7F6                            
0007C7F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007C7F6                            
0007C7F6                            
0007C7F6                            sub_728AC:				; XREF: sub_72878
0007C7F6 0405 0081                  		subi.b	#$81,d5
0007C7FA 6500                       		bcs.s	loc_728CA
0007C7FC DA2D 0008                  		add.b	8(a5),d5
0007C800 0245 007F                  		andi.w	#$7F,d5
0007C804 E34D                       		lsl.w	#1,d5
0007C806 41FA 0000                  		lea	word_729CE(pc),a0
0007C80A 3B70 5000 0010             		move.w	(a0,d5.w),$10(a5)
0007C810 6000 F360                  		bra.w	sub_71D60
0007C814                            ; ===========================================================================
0007C814                            
0007C814                            loc_728CA:
0007C814 08D5 0001                  		bset	#1,(a5)
0007C818 3B7C FFFF 0010             		move.w	#-1,$10(a5)
0007C81E 4EBA F352                  		jsr	sub_71D60(pc)
0007C822 6000 0000                  		bra.w	sub_729A0
0007C826                            ; End of function sub_728AC
0007C826                            
0007C826                            
0007C826                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007C826                            
0007C826                            
0007C826                            sub_728DC:				; XREF: sub_72850
0007C826 3C2D 0010                  		move.w	$10(a5),d6
0007C82A 6B00                       		bmi.s	loc_72920
0007C82C                            ; End of function sub_728DC
0007C82C                            
0007C82C                            
0007C82C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007C82C                            
0007C82C                            
0007C82C                            sub_728E2:				; XREF: sub_72850
0007C82C 102D 001E                  		move.b	$1E(a5),d0
0007C830 4880                       		ext.w	d0
0007C832 DC40                       		add.w	d0,d6
0007C834 0815 0002                  		btst	#2,(a5)
0007C838 6600                       		bne.s	locret_7291E
0007C83A 0815 0001                  		btst	#1,(a5)
0007C83E 6600                       		bne.s	locret_7291E
0007C840 102D 0001                  		move.b	1(a5),d0
0007C844 0C00 00E0                  		cmpi.b	#$E0,d0
0007C848 6600                       		bne.s	loc_72904
0007C84A 103C 00C0                  		move.b	#$C0,d0
0007C84E                            
0007C84E                            loc_72904:
0007C84E 3206                       		move.w	d6,d1
0007C850 0201 000F                  		andi.b	#$F,d1
0007C854 8001                       		or.b	d1,d0
0007C856 E84E                       		lsr.w	#4,d6
0007C858 0206 003F                  		andi.b	#$3F,d6
0007C85C 13C0 00C0 0011             		move.b	d0,($C00011).l
0007C862 13C6 00C0 0011             		move.b	d6,($C00011).l
0007C868                            
0007C868                            locret_7291E:
0007C868 4E75                       		rts	
0007C86A                            ; End of function sub_728E2
0007C86A                            
0007C86A                            ; ===========================================================================
0007C86A                            
0007C86A                            loc_72920:				; XREF: sub_728DC
0007C86A 08D5 0001                  		bset	#1,(a5)
0007C86E 4E75                       		rts	
0007C870                            
0007C870                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007C870                            
0007C870                            
0007C870                            sub_72926:				; XREF: sub_72850
0007C870 4A2D 000B                  		tst.b	$B(a5)
0007C874 6700 0000                  		beq.w	locret_7298A
0007C878                            
0007C878                            loc_7292E:				; XREF: sub_72850
0007C878 1C2D 0009                  		move.b	9(a5),d6
0007C87C 7000                       		moveq	#0,d0
0007C87E 102D 000B                  		move.b	$B(a5),d0
0007C882 6700                       		beq.s	sub_7296A
0007C884 2079 0007 B76A             		movea.l	(Go_PSGIndex).l,a0
0007C88A 5340                       		subq.w	#1,d0
0007C88C E548                       		lsl.w	#2,d0
0007C88E 2070 0000                  		movea.l	(a0,d0.w),a0
0007C892 102D 000C                  		move.b	$C(a5),d0
0007C896 1030 0000                  		move.b	(a0,d0.w),d0
0007C89A 522D 000C                  		addq.b	#1,$C(a5)
0007C89E 0800 0007                  		btst	#7,d0
0007C8A2 6700                       		beq.s	loc_72960
0007C8A4 0C00 0080                  		cmpi.b	#$80,d0
0007C8A8 6700                       		beq.s	loc_7299A
0007C8AA                            
0007C8AA                            loc_72960:
0007C8AA DC40                       		add.w	d0,d6
0007C8AC 0C06 0010                  		cmpi.b	#$10,d6
0007C8B0 6500                       		bcs.s	sub_7296A
0007C8B2 7C0F                       		moveq	#$F,d6
0007C8B4                            ; End of function sub_72926
0007C8B4                            
0007C8B4                            
0007C8B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007C8B4                            
0007C8B4                            
0007C8B4                            sub_7296A:				; XREF: sub_72504; sub_7267C; sub_72926
0007C8B4 0815 0001                  		btst	#1,(a5)
0007C8B8 6600                       		bne.s	locret_7298A
0007C8BA 0815 0002                  		btst	#2,(a5)
0007C8BE 6600                       		bne.s	locret_7298A
0007C8C0 0815 0004                  		btst	#4,(a5)
0007C8C4 6600                       		bne.s	loc_7298C
0007C8C6                            
0007C8C6                            loc_7297C:
0007C8C6 8C2D 0001                  		or.b	1(a5),d6
0007C8CA 0606 0010                  		addi.b	#$10,d6
0007C8CE 13C6 00C0 0011             		move.b	d6,($C00011).l
0007C8D4                            
0007C8D4                            locret_7298A:
0007C8D4 4E75                       		rts	
0007C8D6                            ; ===========================================================================
0007C8D6                            
0007C8D6                            loc_7298C:
0007C8D6 4A2D 0013                  		tst.b	$13(a5)
0007C8DA 67EA                       		beq.s	loc_7297C
0007C8DC 4A2D 0012                  		tst.b	$12(a5)
0007C8E0 66E4                       		bne.s	loc_7297C
0007C8E2 4E75                       		rts	
0007C8E4                            ; End of function sub_7296A
0007C8E4                            
0007C8E4                            ; ===========================================================================
0007C8E4                            
0007C8E4                            loc_7299A:				; XREF: sub_72926
0007C8E4 532D 000C                  		subq.b	#1,$C(a5)
0007C8E8 4E75                       		rts	
0007C8EA                            
0007C8EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007C8EA                            
0007C8EA                            
0007C8EA                            sub_729A0:				; XREF: sub_71D9E; Sound_ChkValue; Snd_FadeOut1; sub_728AC
0007C8EA 0815 0002                  		btst	#2,(a5)
0007C8EE 6600                       		bne.s	locret_729B4
0007C8F0                            
0007C8F0                            loc_729A6:				; XREF: Snd_FadeOut2
0007C8F0 102D 0001                  		move.b	1(a5),d0
0007C8F4 0000 001F                  		ori.b	#$1F,d0
0007C8F8 13C0 00C0 0011             		move.b	d0,($C00011).l
0007C8FE                            
0007C8FE                            locret_729B4:
0007C8FE 4E75                       		rts	
0007C900                            ; End of function sub_729A0
0007C900                            
0007C900                            
0007C900                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007C900                            
0007C900                            
0007C900                            sub_729B6:				; XREF: loc_71E7C
0007C900 41F9 00C0 0011             		lea	($C00011).l,a0
0007C906 10BC 009F                  		move.b	#$9F,(a0)
0007C90A 10BC 00BF                  		move.b	#$BF,(a0)
0007C90E 10BC 00DF                  		move.b	#$DF,(a0)
0007C912 10BC 00FF                  		move.b	#$FF,(a0)
0007C916 4E75                       		rts	
0007C918                            ; End of function sub_729B6
0007C918                            
0007C918                            ; ===========================================================================
0007C918 0356 0326 02F9 02CE 02A5+  word_729CE:	dc.w $356, $326, $2F9, $2CE, $2A5, $280, $25C, $23A, $21A
0007C92A 01FB 01DF 01C4 01AB 0193+  		dc.w $1FB, $1DF, $1C4, $1AB, $193, $17D, $167, $153, $140
0007C93C 012E 011D 010D 00FE 00EF+  		dc.w $12E, $11D, $10D, $FE, $EF, $E2, $D6, $C9,	$BE, $B4
0007C950 00A9 00A0 0097 008F 0087+  		dc.w $A9, $A0, $97, $8F, $87, $7F, $78,	$71, $6B, $65
0007C964 005F 005A 0055 0050 004B+  		dc.w $5F, $5A, $55, $50, $4B, $47, $43,	$40, $3C, $39
0007C978 0036 0033 0030 002D 002B+  		dc.w $36, $33, $30, $2D, $2B, $28, $26,	$24, $22, $20
0007C98C 001F 001D 001B 001A 0018+  		dc.w $1F, $1D, $1B, $1A, $18, $17, $16,	$15, $13, $12
0007C9A0 0011 0000                  		dc.w $11, 0
0007C9A4                            
0007C9A4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007C9A4                            
0007C9A4                            
0007C9A4                            sub_72A5A:				; XREF: sub_71C4E; sub_71CEC; sub_72878
0007C9A4 0445 00E0                  		subi.w	#$E0,d5
0007C9A8 E54D                       		lsl.w	#2,d5
0007C9AA 4EFB 5000                  		jmp	loc_72A64(pc,d5.w)
0007C9AE                            ; End of function sub_72A5A
0007C9AE                            
0007C9AE                            ; ===========================================================================
0007C9AE                            
0007C9AE                            loc_72A64:
0007C9AE 6000 0000                  		bra.w	loc_72ACC
0007C9B2                            ; ===========================================================================
0007C9B2 6000 0000                  		bra.w	loc_72AEC
0007C9B6                            ; ===========================================================================
0007C9B6 6000 0000                  		bra.w	loc_72AF2
0007C9BA                            ; ===========================================================================
0007C9BA 6000 0000                  		bra.w	loc_72AF8
0007C9BE                            ; ===========================================================================
0007C9BE 6000 0000                  		bra.w	loc_72B14
0007C9C2                            ; ===========================================================================
0007C9C2 6000 0000                  		bra.w	loc_72B9E
0007C9C6                            ; ===========================================================================
0007C9C6 6000 0000                  		bra.w	loc_72BA4
0007C9CA                            ; ===========================================================================
0007C9CA 6000 0000                  		bra.w	loc_72BAE
0007C9CE                            ; ===========================================================================
0007C9CE 6000 0000                  		bra.w	loc_72BB4
0007C9D2                            ; ===========================================================================
0007C9D2 6000 0000                  		bra.w	loc_72BBE
0007C9D6                            ; ===========================================================================
0007C9D6 6000 0000                  		bra.w	loc_72BC6
0007C9DA                            ; ===========================================================================
0007C9DA 6000 0000                  		bra.w	loc_72BD0
0007C9DE                            ; ===========================================================================
0007C9DE 6000 0000                  		bra.w	loc_72BE6
0007C9E2                            ; ===========================================================================
0007C9E2 6000 0000                  		bra.w	loc_72BEE
0007C9E6                            ; ===========================================================================
0007C9E6 6000 0000                  		bra.w	loc_72BF4
0007C9EA                            ; ===========================================================================
0007C9EA 6000 0000                  		bra.w	loc_72C26
0007C9EE                            ; ===========================================================================
0007C9EE 6000 0000                  		bra.w	loc_72D30
0007C9F2                            ; ===========================================================================
0007C9F2 6000 0000                  		bra.w	loc_72D52
0007C9F6                            ; ===========================================================================
0007C9F6 6000 0000                  		bra.w	loc_72D58
0007C9FA                            ; ===========================================================================
0007C9FA 6000 0000                  		bra.w	loc_72E06
0007C9FE                            ; ===========================================================================
0007C9FE 6000 0000                  		bra.w	loc_72E20
0007CA02                            ; ===========================================================================
0007CA02 6000 0000                  		bra.w	loc_72E26
0007CA06                            ; ===========================================================================
0007CA06 6000 0000                  		bra.w	loc_72E2C
0007CA0A                            ; ===========================================================================
0007CA0A 6000 0000                  		bra.w	loc_72E38
0007CA0E                            ; ===========================================================================
0007CA0E 6000 0000                  		bra.w	loc_72E52
0007CA12                            ; ===========================================================================
0007CA12 6000 0000                  		bra.w	loc_72E64
0007CA16                            ; ===========================================================================
0007CA16                            
0007CA16                            loc_72ACC:				; XREF: loc_72A64
0007CA16 121C                       		move.b	(a4)+,d1
0007CA18 4A2D 0001                  		tst.b	1(a5)
0007CA1C 6B00                       		bmi.s	locret_72AEA
0007CA1E 102D 000A                  		move.b	$A(a5),d0
0007CA22 0200 0037                  		andi.b	#$37,d0
0007CA26 8200                       		or.b	d0,d1
0007CA28 1B41 000A                  		move.b	d1,$A(a5)
0007CA2C 103C 00B4                  		move.b	#$B4,d0
0007CA30 6000 FC2E                  		bra.w	loc_72716
0007CA34                            ; ===========================================================================
0007CA34                            
0007CA34                            locret_72AEA:
0007CA34 4E75                       		rts	
0007CA36                            ; ===========================================================================
0007CA36                            
0007CA36                            loc_72AEC:				; XREF: loc_72A64
0007CA36 1B5C 001E                  		move.b	(a4)+,$1E(a5)
0007CA3A 4E75                       		rts	
0007CA3C                            ; ===========================================================================
0007CA3C                            
0007CA3C                            loc_72AF2:				; XREF: loc_72A64
0007CA3C 1D5C 0007                  		move.b	(a4)+,7(a6)
0007CA40 4E75                       		rts	
0007CA42                            ; ===========================================================================
0007CA42                            
0007CA42                            loc_72AF8:				; XREF: loc_72A64
0007CA42 7000                       		moveq	#0,d0
0007CA44 102D 000D                  		move.b	$D(a5),d0
0007CA48 2875 0000                  		movea.l	(a5,d0.w),a4
0007CA4C 2BBC 0000 0000 0000        		move.l	#0,(a5,d0.w)
0007CA54 544C                       		addq.w	#2,a4
0007CA56 5800                       		addq.b	#4,d0
0007CA58 1B40 000D                  		move.b	d0,$D(a5)
0007CA5C 4E75                       		rts	
0007CA5E                            ; ===========================================================================
0007CA5E                            
0007CA5E                            loc_72B14:				; XREF: loc_72A64
0007CA5E 204E                       		movea.l	a6,a0
0007CA60 43EE 03A0                  		lea	$3A0(a6),a1
0007CA64 303C 0087                  		move.w	#$87,d0
0007CA68                            
0007CA68                            loc_72B1E:
0007CA68 20D9                       		move.l	(a1)+,(a0)+
0007CA6A 51C8 FFFC                  		dbf	d0,loc_72B1E
0007CA6E                            
0007CA6E 08EE 0002 0040             		bset	#2,$40(a6)
0007CA74 264D                       		movea.l	a5,a3
0007CA76 1C3C 0028                  		move.b	#$28,d6
0007CA7A 9C2E 0026                  		sub.b	$26(a6),d6
0007CA7E 7E05                       		moveq	#5,d7
0007CA80 4BEE 0070                  		lea	$70(a6),a5
0007CA84                            
0007CA84                            loc_72B3A:
0007CA84 0815 0007                  		btst	#7,(a5)
0007CA88 6700                       		beq.s	loc_72B5C
0007CA8A 08D5 0001                  		bset	#1,(a5)
0007CA8E DD2D 0009                  		add.b	d6,9(a5)
0007CA92 0815 0002                  		btst	#2,(a5)
0007CA96 6600                       		bne.s	loc_72B5C
0007CA98 7000                       		moveq	#0,d0
0007CA9A 102D 000B                  		move.b	$B(a5),d0
0007CA9E 226E 0018                  		movea.l	$18(a6),a1
0007CAA2 4EBA 0000                  		jsr	sub_72C4E(pc)
0007CAA6                            
0007CAA6                            loc_72B5C:
0007CAA6 DAFC 0030                  		adda.w	#$30,a5
0007CAAA 51CF FFD8                  		dbf	d7,loc_72B3A
0007CAAE                            
0007CAAE 7E02                       		moveq	#2,d7
0007CAB0                            
0007CAB0                            loc_72B66:
0007CAB0 0815 0007                  		btst	#7,(a5)
0007CAB4 6700                       		beq.s	loc_72B78
0007CAB6 08D5 0001                  		bset	#1,(a5)
0007CABA 4EBA FE2E                  		jsr	sub_729A0(pc)
0007CABE DD2D 0009                  		add.b	d6,9(a5)
0007CAC2                            
0007CAC2                            loc_72B78:
0007CAC2 DAFC 0030                  		adda.w	#$30,a5
0007CAC6 51CF FFE8                  		dbf	d7,loc_72B66
0007CACA 2A4B                       		movea.l	a3,a5
0007CACC 1D7C 0080 0024             		move.b	#$80,$24(a6)
0007CAD2 1D7C 0028 0026             		move.b	#$28,$26(a6)
0007CAD8 422E 0027                  		clr.b	$27(a6)
0007CADC 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
0007CAE4 504F                       		addq.w	#8,sp
0007CAE6 4E75                       		rts	
0007CAE8                            ; ===========================================================================
0007CAE8                            
0007CAE8                            loc_72B9E:				; XREF: loc_72A64
0007CAE8 1B5C 0002                  		move.b	(a4)+,2(a5)
0007CAEC 4E75                       		rts	
0007CAEE                            ; ===========================================================================
0007CAEE                            
0007CAEE                            loc_72BA4:				; XREF: loc_72A64
0007CAEE 101C                       		move.b	(a4)+,d0
0007CAF0 D12D 0009                  		add.b	d0,9(a5)
0007CAF4 6000 0000                  		bra.w	sub_72CB4
0007CAF8                            ; ===========================================================================
0007CAF8                            
0007CAF8                            loc_72BAE:				; XREF: loc_72A64
0007CAF8 08D5 0004                  		bset	#4,(a5)
0007CAFC 4E75                       		rts	
0007CAFE                            ; ===========================================================================
0007CAFE                            
0007CAFE                            loc_72BB4:				; XREF: loc_72A64
0007CAFE 1B54 0012                  		move.b	(a4),$12(a5)
0007CB02 1B5C 0013                  		move.b	(a4)+,$13(a5)
0007CB06 4E75                       		rts	
0007CB08                            ; ===========================================================================
0007CB08                            
0007CB08                            loc_72BBE:				; XREF: loc_72A64
0007CB08 101C                       		move.b	(a4)+,d0
0007CB0A D12D 0008                  		add.b	d0,8(a5)
0007CB0E 4E75                       		rts	
0007CB10                            ; ===========================================================================
0007CB10                            
0007CB10                            loc_72BC6:				; XREF: loc_72A64
0007CB10 1D54 0002                  		move.b	(a4),2(a6)
0007CB14 1D5C 0001                  		move.b	(a4)+,1(a6)
0007CB18 4E75                       		rts	
0007CB1A                            ; ===========================================================================
0007CB1A                            
0007CB1A                            loc_72BD0:				; XREF: loc_72A64
0007CB1A 41EE 0040                  		lea	$40(a6),a0
0007CB1E 101C                       		move.b	(a4)+,d0
0007CB20 7230                       		moveq	#$30,d1
0007CB22 7409                       		moveq	#9,d2
0007CB24                            
0007CB24                            loc_72BDA:
0007CB24 1140 0002                  		move.b	d0,2(a0)
0007CB28 D0C1                       		adda.w	d1,a0
0007CB2A 51CA FFF8                  		dbf	d2,loc_72BDA
0007CB2E                            
0007CB2E 4E75                       		rts	
0007CB30                            ; ===========================================================================
0007CB30                            
0007CB30                            loc_72BE6:				; XREF: loc_72A64
0007CB30 101C                       		move.b	(a4)+,d0
0007CB32 D12D 0009                  		add.b	d0,9(a5)
0007CB36 4E75                       		rts	
0007CB38                            ; ===========================================================================
0007CB38                            
0007CB38                            loc_72BEE:				; XREF: loc_72A64
0007CB38 422E 002C                  		clr.b	$2C(a6)
0007CB3C 4E75                       		rts	
0007CB3E                            ; ===========================================================================
0007CB3E                            
0007CB3E                            loc_72BF4:				; XREF: loc_72A64
0007CB3E 0895 0007                  		bclr	#7,(a5)
0007CB42 0895 0004                  		bclr	#4,(a5)
0007CB46 4EBA FB00                  		jsr	sub_726FE(pc)
0007CB4A 4A2E 0250                  		tst.b	$250(a6)
0007CB4E 6B00                       		bmi.s	loc_72C22
0007CB50 264D                       		movea.l	a5,a3
0007CB52 4BEE 0100                  		lea	$100(a6),a5
0007CB56 226E 0018                  		movea.l	$18(a6),a1
0007CB5A 0895 0002                  		bclr	#2,(a5)
0007CB5E 08D5 0001                  		bset	#1,(a5)
0007CB62 102D 000B                  		move.b	$B(a5),d0
0007CB66 4EBA 0000                  		jsr	sub_72C4E(pc)
0007CB6A 2A4B                       		movea.l	a3,a5
0007CB6C                            
0007CB6C                            loc_72C22:
0007CB6C 504F                       		addq.w	#8,sp
0007CB6E 4E75                       		rts	
0007CB70                            ; ===========================================================================
0007CB70                            
0007CB70                            loc_72C26:				; XREF: loc_72A64
0007CB70 7000                       		moveq	#0,d0
0007CB72 101C                       		move.b	(a4)+,d0
0007CB74 1B40 000B                  		move.b	d0,$B(a5)
0007CB78 0815 0002                  		btst	#2,(a5)
0007CB7C 6600 0000                  		bne.w	locret_72CAA
0007CB80 226E 0018                  		movea.l	$18(a6),a1
0007CB84 4A2E 000E                  		tst.b	$E(a6)
0007CB88 6700                       		beq.s	sub_72C4E
0007CB8A 226D 0020                  		movea.l	$20(a5),a1
0007CB8E 4A2E 000E                  		tst.b	$E(a6)
0007CB92 6B00                       		bmi.s	sub_72C4E
0007CB94 226E 0020                  		movea.l	$20(a6),a1
0007CB98                            
0007CB98                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007CB98                            
0007CB98                            
0007CB98                            sub_72C4E:				; XREF: Snd_FadeOut1; et al
0007CB98 5340                       		subq.w	#1,d0
0007CB9A 6B00                       		bmi.s	loc_72C5C
0007CB9C 323C 0019                  		move.w	#$19,d1
0007CBA0                            
0007CBA0                            loc_72C56:
0007CBA0 D2C1                       		adda.w	d1,a1
0007CBA2 51C8 FFFC                  		dbf	d0,loc_72C56
0007CBA6                            
0007CBA6                            loc_72C5C:
0007CBA6 1219                       		move.b	(a1)+,d1
0007CBA8 1B41 001F                  		move.b	d1,$1F(a5)
0007CBAC 1801                       		move.b	d1,d4
0007CBAE 103C 00B0                  		move.b	#$B0,d0
0007CBB2 4EBA FAB8                  		jsr	sub_72722(pc)
0007CBB6 45FA 0000                  		lea	byte_72D18(pc),a2
0007CBBA 7613                       		moveq	#$13,d3
0007CBBC                            
0007CBBC                            loc_72C72:
0007CBBC 101A                       		move.b	(a2)+,d0
0007CBBE 1219                       		move.b	(a1)+,d1
0007CBC0 4EBA FAAA                  		jsr	sub_72722(pc)
0007CBC4 51CB FFF6                  		dbf	d3,loc_72C72
0007CBC8 7A03                       		moveq	#3,d5
0007CBCA 0244 0007                  		andi.w	#7,d4
0007CBCE 183B 4000                  		move.b	byte_72CAC(pc,d4.w),d4
0007CBD2 162D 0009                  		move.b	9(a5),d3
0007CBD6                            
0007CBD6                            loc_72C8C:
0007CBD6 101A                       		move.b	(a2)+,d0
0007CBD8 1219                       		move.b	(a1)+,d1
0007CBDA E20C                       		lsr.b	#1,d4
0007CBDC 6400                       		bcc.s	loc_72C96
0007CBDE D203                       		add.b	d3,d1
0007CBE0                            
0007CBE0                            loc_72C96:
0007CBE0 4EBA FA8A                  		jsr	sub_72722(pc)
0007CBE4 51CD FFF0                  		dbf	d5,loc_72C8C
0007CBE8 103C 00B4                  		move.b	#$B4,d0
0007CBEC 122D 000A                  		move.b	$A(a5),d1
0007CBF0 4EBA FA7A                  		jsr	sub_72722(pc)
0007CBF4                            
0007CBF4                            locret_72CAA:
0007CBF4 4E75                       		rts	
0007CBF6                            ; End of function sub_72C4E
0007CBF6                            
0007CBF6                            ; ===========================================================================
0007CBF6 0808 0808 0A0E 0E0F        byte_72CAC:	dc.b 8,	8, 8, 8, $A, $E, $E, $F
0007CBFE                            
0007CBFE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007CBFE                            
0007CBFE                            
0007CBFE                            sub_72CB4:				; XREF: sub_72504; sub_7267C; loc_72BA4
0007CBFE 0815 0002                  		btst	#2,(a5)
0007CC02 6600                       		bne.s	locret_72D16
0007CC04 7000                       		moveq	#0,d0
0007CC06 102D 000B                  		move.b	$B(a5),d0
0007CC0A 226E 0018                  		movea.l	$18(a6),a1
0007CC0E 4A2E 000E                  		tst.b	$E(a6)
0007CC12 6700                       		beq.s	loc_72CD8
0007CC14 226E 0020                  		movea.l	$20(a6),a1
0007CC18 4A2E 000E                  		tst.b	$E(a6)
0007CC1C 6B00                       		bmi.s	loc_72CD8
0007CC1E 226E 0020                  		movea.l	$20(a6),a1
0007CC22                            
0007CC22                            loc_72CD8:
0007CC22 5340                       		subq.w	#1,d0
0007CC24 6B00                       		bmi.s	loc_72CE6
0007CC26 323C 0019                  		move.w	#$19,d1
0007CC2A                            
0007CC2A                            loc_72CE0:
0007CC2A D2C1                       		adda.w	d1,a1
0007CC2C 51C8 FFFC                  		dbf	d0,loc_72CE0
0007CC30                            
0007CC30                            loc_72CE6:
0007CC30 D2FC 0015                  		adda.w	#$15,a1
0007CC34 45FA 0000                  		lea	byte_72D2C(pc),a2
0007CC38 102D 001F                  		move.b	$1F(a5),d0
0007CC3C 0240 0007                  		andi.w	#7,d0
0007CC40 183B 00B4                  		move.b	byte_72CAC(pc,d0.w),d4
0007CC44 162D 0009                  		move.b	9(a5),d3
0007CC48 6B00                       		bmi.s	locret_72D16
0007CC4A 7A03                       		moveq	#3,d5
0007CC4C                            
0007CC4C                            loc_72D02:
0007CC4C 101A                       		move.b	(a2)+,d0
0007CC4E 1219                       		move.b	(a1)+,d1
0007CC50 E20C                       		lsr.b	#1,d4
0007CC52 6400                       		bcc.s	loc_72D12
0007CC54 D203                       		add.b	d3,d1
0007CC56 6500                       		bcs.s	loc_72D12
0007CC58 4EBA FA12                  		jsr	sub_72722(pc)
0007CC5C                            
0007CC5C                            loc_72D12:
0007CC5C 51CD FFEE                  		dbf	d5,loc_72D02
0007CC60                            
0007CC60                            locret_72D16:
0007CC60 4E75                       		rts	
0007CC62                            ; End of function sub_72CB4
0007CC62                            
0007CC62                            ; ===========================================================================
0007CC62 3038 343C 5058 545C 6068   byte_72D18:	dc.b $30, $38, $34, $3C, $50, $58, $54,	$5C, $60, $68
0007CC6C 646C 7078 747C 8088 848C   		dc.b $64, $6C, $70, $78, $74, $7C, $80,	$88, $84, $8C
0007CC76 4048 444C                  byte_72D2C:	dc.b $40, $48, $44, $4C
0007CC7A                            ; ===========================================================================
0007CC7A                            
0007CC7A                            loc_72D30:				; XREF: loc_72A64
0007CC7A 08D5 0003                  		bset	#3,(a5)
0007CC7E 2B4C 0014                  		move.l	a4,$14(a5)
0007CC82 1B5C 0018                  		move.b	(a4)+,$18(a5)
0007CC86 1B5C 0019                  		move.b	(a4)+,$19(a5)
0007CC8A 1B5C 001A                  		move.b	(a4)+,$1A(a5)
0007CC8E 101C                       		move.b	(a4)+,d0
0007CC90 E208                       		lsr.b	#1,d0
0007CC92 1B40 001B                  		move.b	d0,$1B(a5)
0007CC96 426D 001C                  		clr.w	$1C(a5)
0007CC9A 4E75                       		rts	
0007CC9C                            ; ===========================================================================
0007CC9C                            
0007CC9C                            loc_72D52:				; XREF: loc_72A64
0007CC9C 08D5 0003                  		bset	#3,(a5)
0007CCA0 4E75                       		rts	
0007CCA2                            ; ===========================================================================
0007CCA2                            
0007CCA2                            loc_72D58:				; XREF: loc_72A64
0007CCA2 0895 0007                  		bclr	#7,(a5)
0007CCA6 0895 0004                  		bclr	#4,(a5)
0007CCAA 4A2D 0001                  		tst.b	1(a5)
0007CCAE 6B00                       		bmi.s	loc_72D74
0007CCB0 4A2E 0008                  		tst.b	8(a6)
0007CCB4 6B00 0000                  		bmi.w	loc_72E02
0007CCB8 4EBA F98E                  		jsr	sub_726FE(pc)
0007CCBC 6000                       		bra.s	loc_72D78
0007CCBE                            ; ===========================================================================
0007CCBE                            
0007CCBE                            loc_72D74:
0007CCBE 4EBA FC2A                  		jsr	sub_729A0(pc)
0007CCC2                            
0007CCC2                            loc_72D78:
0007CCC2 4A2E 000E                  		tst.b	$E(a6)
0007CCC6 6A00 0000                  		bpl.w	loc_72E02
0007CCCA 4216                       		clr.b	0(a6)
0007CCCC 7000                       		moveq	#0,d0
0007CCCE 102D 0001                  		move.b	1(a5),d0
0007CCD2 6B00                       		bmi.s	loc_72DCC
0007CCD4 41FA F546                  		lea	dword_722CC(pc),a0
0007CCD8 264D                       		movea.l	a5,a3
0007CCDA 0C00 0004                  		cmpi.b	#4,d0
0007CCDE 6600                       		bne.s	loc_72DA8
0007CCE0 4A2E 0340                  		tst.b	$340(a6)
0007CCE4 6A00                       		bpl.s	loc_72DA8
0007CCE6 4BEE 0340                  		lea	$340(a6),a5
0007CCEA 226E 0020                  		movea.l	$20(a6),a1
0007CCEE 6000                       		bra.s	loc_72DB8
0007CCF0                            ; ===========================================================================
0007CCF0                            
0007CCF0                            loc_72DA8:
0007CCF0 5500                       		subq.b	#2,d0
0007CCF2 E508                       		lsl.b	#2,d0
0007CCF4 2A70 0000                  		movea.l	(a0,d0.w),a5
0007CCF8 4A15                       		tst.b	(a5)
0007CCFA 6A00                       		bpl.s	loc_72DC8
0007CCFC 226E 0018                  		movea.l	$18(a6),a1
0007CD00                            
0007CD00                            loc_72DB8:
0007CD00 0895 0002                  		bclr	#2,(a5)
0007CD04 08D5 0001                  		bset	#1,(a5)
0007CD08 102D 000B                  		move.b	$B(a5),d0
0007CD0C 4EBA FE8A                  		jsr	sub_72C4E(pc)
0007CD10                            
0007CD10                            loc_72DC8:
0007CD10 2A4B                       		movea.l	a3,a5
0007CD12 6000                       		bra.s	loc_72E02
0007CD14                            ; ===========================================================================
0007CD14                            
0007CD14                            loc_72DCC:
0007CD14 41EE 0370                  		lea	$370(a6),a0
0007CD18 4A10                       		tst.b	(a0)
0007CD1A 6A00                       		bpl.s	loc_72DE0
0007CD1C 0C00 00E0                  		cmpi.b	#$E0,d0
0007CD20 6700                       		beq.s	loc_72DEA
0007CD22 0C00 00C0                  		cmpi.b	#$C0,d0
0007CD26 6700                       		beq.s	loc_72DEA
0007CD28                            
0007CD28                            loc_72DE0:
0007CD28 41FA F4F2                  		lea	dword_722CC(pc),a0
0007CD2C E608                       		lsr.b	#3,d0
0007CD2E 2070 0000                  		movea.l	(a0,d0.w),a0
0007CD32                            
0007CD32                            loc_72DEA:
0007CD32 0890 0002                  		bclr	#2,(a0)
0007CD36 08D0 0001                  		bset	#1,(a0)
0007CD3A 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
0007CD40 6600                       		bne.s	loc_72E02
0007CD42 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
0007CD4A                            
0007CD4A                            loc_72E02:
0007CD4A 504F                       		addq.w	#8,sp
0007CD4C 4E75                       		rts	
0007CD4E                            ; ===========================================================================
0007CD4E                            
0007CD4E                            loc_72E06:				; XREF: loc_72A64
0007CD4E 1B7C 00E0 0001             		move.b	#$E0,1(a5)
0007CD54 1B5C 001F                  		move.b	(a4)+,$1F(a5)
0007CD58 0815 0002                  		btst	#2,(a5)
0007CD5C 6600                       		bne.s	locret_72E1E
0007CD5E 13EC FFFF 00C0 0011        		move.b	-1(a4),($C00011).l
0007CD66                            
0007CD66                            locret_72E1E:
0007CD66 4E75                       		rts	
0007CD68                            ; ===========================================================================
0007CD68                            
0007CD68                            loc_72E20:				; XREF: loc_72A64
0007CD68 0895 0003                  		bclr	#3,(a5)
0007CD6C 4E75                       		rts	
0007CD6E                            ; ===========================================================================
0007CD6E                            
0007CD6E                            loc_72E26:				; XREF: loc_72A64
0007CD6E 1B5C 000B                  		move.b	(a4)+,$B(a5)
0007CD72 4E75                       		rts	
0007CD74                            ; ===========================================================================
0007CD74                            
0007CD74                            loc_72E2C:				; XREF: loc_72A64
0007CD74 101C                       		move.b	(a4)+,d0
0007CD76 E148                       		lsl.w	#8,d0
0007CD78 101C                       		move.b	(a4)+,d0
0007CD7A D8C0                       		adda.w	d0,a4
0007CD7C 534C                       		subq.w	#1,a4
0007CD7E 4E75                       		rts	
0007CD80                            ; ===========================================================================
0007CD80                            
0007CD80                            loc_72E38:				; XREF: loc_72A64
0007CD80 7000                       		moveq	#0,d0
0007CD82 101C                       		move.b	(a4)+,d0
0007CD84 121C                       		move.b	(a4)+,d1
0007CD86 4A35 0024                  		tst.b	$24(a5,d0.w)
0007CD8A 6600                       		bne.s	loc_72E48
0007CD8C 1B81 0024                  		move.b	d1,$24(a5,d0.w)
0007CD90                            
0007CD90                            loc_72E48:
0007CD90 5335 0024                  		subq.b	#1,$24(a5,d0.w)
0007CD94 66DE                       		bne.s	loc_72E2C
0007CD96 544C                       		addq.w	#2,a4
0007CD98 4E75                       		rts	
0007CD9A                            ; ===========================================================================
0007CD9A                            
0007CD9A                            loc_72E52:				; XREF: loc_72A64
0007CD9A 7000                       		moveq	#0,d0
0007CD9C 102D 000D                  		move.b	$D(a5),d0
0007CDA0 5900                       		subq.b	#4,d0
0007CDA2 2B8C 0000                  		move.l	a4,(a5,d0.w)
0007CDA6 1B40 000D                  		move.b	d0,$D(a5)
0007CDAA 60C8                       		bra.s	loc_72E2C
0007CDAC                            ; ===========================================================================
0007CDAC                            
0007CDAC                            loc_72E64:				; XREF: loc_72A64
0007CDAC 103C 0088                  		move.b	#$88,d0
0007CDB0 123C 000F                  		move.b	#$F,d1
0007CDB4 4EBA F8C2                  		jsr	sub_7272E(pc)
0007CDB8 103C 008C                  		move.b	#$8C,d0
0007CDBC 123C 000F                  		move.b	#$F,d1
0007CDC0 6000 F8B6                  		bra.w	sub_7272E
0007CDC4                            ; ===========================================================================
0007CDC4                            Kos_Z80:	incbin	sound\z80_1.bin
0007CE74 0000                       		dc.w ((SegaPCM&$FF)<<8)+((SegaPCM&$FF00)>>8)
0007CE76 21                         		dc.b $21
0007CE77 0000                       		dc.w (((EndOfRom-SegaPCM)&$FF)<<8)+(((EndOfRom-SegaPCM)&$FF00)>>8)
0007CE79                            		incbin	sound\z80_2.bin
0007E524                            		even
0007E524                            Music81:	incbin	sound\jahl.bin ; 	Green Hill Act 1
00084D24                            		even
00084D24                            Music82:	incbin	sound\music82.bin ; Labyrinth Act 1
0008E5C2                            		even
0008E5C2                            Music83:	incbin	sound\music83.bin ; Marble Act 1
000921E2 00                         		even
000921E2                            Music84:	include	sound\music84.asm ; Star Light Act 1
000921E2                            music84_Header:
000921E2 =00000001                  smpsHeaderStartSong = 1
000921E2 0000                       	smpsHeaderVoice     music84_Voices
000921E4 0603                       	smpsHeaderChan      $06, $03
000921E6 0205                       	smpsHeaderTempo     $02, $05
000921E8                            
000921EC 0000 0000                  	smpsHeaderFM        music84_FM1,	$00, $00
000921F0 0000 0000                  	smpsHeaderFM        music84_FM2,	$00, $00
000921F4 0000 0000                  	smpsHeaderFM        music84_FM3,	$00, $00
000921F8 0000 0000                  	smpsHeaderFM        music84_FM4,	$00, $00
000921FC 0000 0000                  	smpsHeaderFM        music84_FM5,	$00, $00
00092200 0000 0000 0000             	smpsHeaderPSG       music84_PSG1,	$00, $00, $00, $00
00092206 0000 0000 0000             	smpsHeaderPSG       music84_PSG2,	$00, $00, $00, $00
0009220C 0000 0000 0000             	smpsHeaderPSG       music84_PSG3,	$00, $00, $00, $00
00092212                            
00092212                            ; FM1 Data
00092212                            music84_FM1:
00092212 E0C0                       	smpsPan             panCenter, $00
00092216 E107                       	smpsAlterNote       $07
00092218 9B03 8007                  	dc.b	nD2, $03, nRst, $07
0009221C E106                       	smpsAlterNote       $06
0009221E 9903 800B                  	dc.b	nC2, $03, nRst, $0B
00092222 E10B                       	smpsAlterNote       $0B
00092224 9606 800B A201             	dc.b	nA1, $06, nRst, $0B, nA2, $01
0009222A E10C                       	smpsAlterNote       $0C
0009222C E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
0009222F E10B                       	smpsAlterNote       $0B
00092231 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00092234 E109                       	smpsAlterNote       $09
00092236 E7A0 029E 01               	dc.b	smpsNoAttack, nG2, $02, nF2, $01
0009223B E108                       	smpsAlterNote       $08
0009223D 8001                       	dc.b	nRst, $01
0009223F E10B                       	smpsAlterNote       $0B
00092241 9603 A203 8001             	dc.b	nA1, $03, nA2, $03, nRst, $01
00092247 E107                       	smpsAlterNote       $07
00092249 9B03                       	dc.b	nD2, $03
0009224B                            
0009224B                            music84_Jump04:
0009224B E107                       	smpsAlterNote       $07
0009224D 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00092251 E10B                       	smpsAlterNote       $0B
00092253 A202 8001                  	dc.b	nA2, $02, nRst, $01
00092257 E107                       	smpsAlterNote       $07
00092259 9B03                       	dc.b	nD2, $03
0009225B E11A                       	smpsAlterNote       $1A
0009225D A301                       	dc.b	nBb2, $01
0009225F E1F2                       	smpsAlterNote       $F2
00092261 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00092264 E1FF                       	smpsAlterNote       $FF
00092266 E701                       	dc.b	smpsNoAttack, $01
00092268 E111                       	smpsAlterNote       $11
0009226A E701                       	dc.b	smpsNoAttack, $01
0009226C E106                       	smpsAlterNote       $06
0009226E E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00092271 E107                       	smpsAlterNote       $07
00092273 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00092277 E108                       	smpsAlterNote       $08
00092279 9C06 8001 9C02 8001        	dc.b	nEb2, $06, nRst, $01, nEb2, $02, nRst, $01
00092281 E109                       	smpsAlterNote       $09
00092283 A003                       	dc.b	nG2, $03
00092285 E10C                       	smpsAlterNote       $0C
00092287 A303 8001                  	dc.b	nBb2, $03, nRst, $01
0009228B E1FD                       	smpsAlterNote       $FD
0009228D A401                       	dc.b	nB2, $01
0009228F E109                       	smpsAlterNote       $09
00092291 E701                       	dc.b	smpsNoAttack, $01
00092293 E106                       	smpsAlterNote       $06
00092295 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00092298 E109                       	smpsAlterNote       $09
0009229A A007                       	dc.b	nG2, $07
0009229C E108                       	smpsAlterNote       $08
0009229E 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
000922A2 E107                       	smpsAlterNote       $07
000922A4 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
000922AA E10B                       	smpsAlterNote       $0B
000922AC A203 8001                  	dc.b	nA2, $03, nRst, $01
000922B0 E107                       	smpsAlterNote       $07
000922B2 9B03                       	dc.b	nD2, $03
000922B4 E11A                       	smpsAlterNote       $1A
000922B6 A301                       	dc.b	nBb2, $01
000922B8 E1F9                       	smpsAlterNote       $F9
000922BA E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000922BD E107                       	smpsAlterNote       $07
000922BF E701                       	dc.b	smpsNoAttack, $01
000922C1 E111                       	smpsAlterNote       $11
000922C3 E701                       	dc.b	smpsNoAttack, $01
000922C5 E106                       	smpsAlterNote       $06
000922C7 E7A5 0280 01               	dc.b	smpsNoAttack, nC3, $02, nRst, $01
000922CC E107                       	smpsAlterNote       $07
000922CE 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
000922D6 E1EC                       	smpsAlterNote       $EC
000922D8 A101                       	dc.b	nAb2, $01
000922DA E108                       	smpsAlterNote       $08
000922DC E701                       	dc.b	smpsNoAttack, $01
000922DE E116                       	smpsAlterNote       $16
000922E0 E701                       	dc.b	smpsNoAttack, $01
000922E2 E1F5                       	smpsAlterNote       $F5
000922E4 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
000922E7 E10B                       	smpsAlterNote       $0B
000922E9 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000922ED E107                       	smpsAlterNote       $07
000922EF 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
000922F5 E109                       	smpsAlterNote       $09
000922F7 9E03 8001                  	dc.b	nF2, $03, nRst, $01
000922FB E10B                       	smpsAlterNote       $0B
000922FD 9603                       	dc.b	nA1, $03
000922FF E107                       	smpsAlterNote       $07
00092301 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
00092307 E10B                       	smpsAlterNote       $0B
00092309 A203 8001                  	dc.b	nA2, $03, nRst, $01
0009230D E107                       	smpsAlterNote       $07
0009230F 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00092313 E11A                       	smpsAlterNote       $1A
00092315 A301                       	dc.b	nBb2, $01
00092317 E1F9                       	smpsAlterNote       $F9
00092319 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0009231C E107                       	smpsAlterNote       $07
0009231E E701                       	dc.b	smpsNoAttack, $01
00092320 E1FB                       	smpsAlterNote       $FB
00092322 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00092325 E106                       	smpsAlterNote       $06
00092327 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0009232B E107                       	smpsAlterNote       $07
0009232D 9B03                       	dc.b	nD2, $03
0009232F E108                       	smpsAlterNote       $08
00092331 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
00092337 E109                       	smpsAlterNote       $09
00092339 A002 8001                  	dc.b	nG2, $02, nRst, $01
0009233D E10C                       	smpsAlterNote       $0C
0009233F A303                       	dc.b	nBb2, $03
00092341 E1F0                       	smpsAlterNote       $F0
00092343 A401                       	dc.b	nB2, $01
00092345 E1FD                       	smpsAlterNote       $FD
00092347 E701 E7A5 01               	dc.b	smpsNoAttack, $01, smpsNoAttack, nC3, $01
0009234C E106                       	smpsAlterNote       $06
0009234E 8001                       	dc.b	nRst, $01
00092350 E109                       	smpsAlterNote       $09
00092352 A006 8001                  	dc.b	nG2, $06, nRst, $01
00092356 E108                       	smpsAlterNote       $08
00092358 9C02 8001                  	dc.b	nEb2, $02, nRst, $01
0009235C E107                       	smpsAlterNote       $07
0009235E 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00092364 E10B                       	smpsAlterNote       $0B
00092366 A203                       	dc.b	nA2, $03
00092368 E107                       	smpsAlterNote       $07
0009236A 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0009236E E1F2                       	smpsAlterNote       $F2
00092370 A401                       	dc.b	nB2, $01
00092372 E1FF                       	smpsAlterNote       $FF
00092374 E701                       	dc.b	smpsNoAttack, $01
00092376 E107                       	smpsAlterNote       $07
00092378 E701                       	dc.b	smpsNoAttack, $01
0009237A E1FB                       	smpsAlterNote       $FB
0009237C E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0009237F E106                       	smpsAlterNote       $06
00092381 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00092385 E107                       	smpsAlterNote       $07
00092387 9B02 8001 A706 8001 9B03   	dc.b	nD2, $02, nRst, $01, nD3, $06, nRst, $01, nD2, $03
00092391 E117                       	smpsAlterNote       $17
00092393 A001                       	dc.b	nG2, $01
00092395 E1FA                       	smpsAlterNote       $FA
00092397 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
0009239A E108                       	smpsAlterNote       $08
0009239C E701                       	dc.b	smpsNoAttack, $01
0009239E E1E7                       	smpsAlterNote       $E7
000923A0 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
000923A3 E103                       	smpsAlterNote       $03
000923A5 E701                       	dc.b	smpsNoAttack, $01
000923A7 E10B                       	smpsAlterNote       $0B
000923A9 E702                       	dc.b	smpsNoAttack, $02
000923AB E107                       	smpsAlterNote       $07
000923AD 9B03 8001 A702 8001        	dc.b	nD2, $03, nRst, $01, nD3, $02, nRst, $01
000923B5 E106                       	smpsAlterNote       $06
000923B7 9903 A503 8001             	dc.b	nC2, $03, nC3, $03, nRst, $01
000923BD E10C                       	smpsAlterNote       $0C
000923BF 9703 9703 8001             	dc.b	nBb1, $03, nBb1, $03, nRst, $01
000923C5 E109                       	smpsAlterNote       $09
000923C7 9E03                       	dc.b	nF2, $03
000923C9 E10C                       	smpsAlterNote       $0C
000923CB 9703 8001                  	dc.b	nBb1, $03, nRst, $01
000923CF E1EA                       	smpsAlterNote       $EA
000923D1 A201                       	dc.b	nA2, $01
000923D3 E106                       	smpsAlterNote       $06
000923D5 E701                       	dc.b	smpsNoAttack, $01
000923D7 E1E2                       	smpsAlterNote       $E2
000923D9 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
000923DC E1F0                       	smpsAlterNote       $F0
000923DE E701                       	dc.b	smpsNoAttack, $01
000923E0 E10C                       	smpsAlterNote       $0C
000923E2 E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
000923EE E116                       	smpsAlterNote       $16
000923F0 9C01                       	dc.b	nEb2, $01
000923F2 E105                       	smpsAlterNote       $05
000923F4 E79D 01                    	dc.b	smpsNoAttack, nE2, $01
000923F7 E1F1                       	smpsAlterNote       $F1
000923F9 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
000923FC E1FF                       	smpsAlterNote       $FF
000923FE E701                       	dc.b	smpsNoAttack, $01
00092400 E109                       	smpsAlterNote       $09
00092402 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00092406 E10C                       	smpsAlterNote       $0C
00092408 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $01
00092414 9702 8001 9703             	dc.b	nBb1, $02, nRst, $01, nBb1, $03
0009241A E109                       	smpsAlterNote       $09
0009241C 9E03 8001                  	dc.b	nF2, $03, nRst, $01
00092420 E10C                       	smpsAlterNote       $0C
00092422 9703                       	dc.b	nBb1, $03
00092424 E11A                       	smpsAlterNote       $1A
00092426 A101                       	dc.b	nAb2, $01
00092428 E1FB                       	smpsAlterNote       $FB
0009242A E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
0009242D E10A                       	smpsAlterNote       $0A
0009242F E701                       	dc.b	smpsNoAttack, $01
00092431 E1E8                       	smpsAlterNote       $E8
00092433 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00092436 E106                       	smpsAlterNote       $06
00092438 E701                       	dc.b	smpsNoAttack, $01
0009243A E10C                       	smpsAlterNote       $0C
0009243C E702 9703 8001 A306 9703+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nBb1, $03, nRst, $01
00092448 E1F9                       	smpsAlterNote       $F9
0009244A 9D01                       	dc.b	nE2, $01
0009244C E108                       	smpsAlterNote       $08
0009244E E701                       	dc.b	smpsNoAttack, $01
00092450 E1F6                       	smpsAlterNote       $F6
00092452 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00092455 E109                       	smpsAlterNote       $09
00092457 E703 8001                  	dc.b	smpsNoAttack, $03, nRst, $01
0009245B E10C                       	smpsAlterNote       $0C
0009245D 9703 9703 8001 A302 8001+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $02, nRst, $01, nBb1, $03
00092469 E108                       	smpsAlterNote       $08
0009246B 9D03 8001 9D03             	dc.b	nE2, $03, nRst, $01, nE2, $03
00092471 E106                       	smpsAlterNote       $06
00092473 A403 8001                  	dc.b	nB2, $03, nRst, $01
00092477 E108                       	smpsAlterNote       $08
00092479 9D03                       	dc.b	nE2, $03
0009247B E1EB                       	smpsAlterNote       $EB
0009247D A801                       	dc.b	nEb3, $01
0009247F E109                       	smpsAlterNote       $09
00092481 E701                       	dc.b	smpsNoAttack, $01
00092483 E1FA                       	smpsAlterNote       $FA
00092485 E7A9 01                    	dc.b	smpsNoAttack, nE3, $01
00092488 E108                       	smpsAlterNote       $08
0009248A E703 8001 9D03 A907 9D03+  	dc.b	smpsNoAttack, $03, nRst, $01, nE2, $03, nE3, $07, nE2, $03, nRst, $01
00092496 E1E9                       	smpsAlterNote       $E9
00092498 A301                       	dc.b	nBb2, $01
0009249A E107                       	smpsAlterNote       $07
0009249C E701                       	dc.b	smpsNoAttack, $01
0009249E E1F0                       	smpsAlterNote       $F0
000924A0 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000924A3 E1F7                       	smpsAlterNote       $F7
000924A5 E701                       	dc.b	smpsNoAttack, $01
000924A7 E107                       	smpsAlterNote       $07
000924A9 E701                       	dc.b	smpsNoAttack, $01
000924AB E106                       	smpsAlterNote       $06
000924AD E701                       	dc.b	smpsNoAttack, $01
000924AF E108                       	smpsAlterNote       $08
000924B1 9D03 8001 9D03             	dc.b	nE2, $03, nRst, $01, nE2, $03
000924B7 E106                       	smpsAlterNote       $06
000924B9 A403 8001                  	dc.b	nB2, $03, nRst, $01
000924BD E108                       	smpsAlterNote       $08
000924BF 9D03                       	dc.b	nE2, $03
000924C1 E10B                       	smpsAlterNote       $0B
000924C3 9603 8001 9602 8001        	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01
000924CB E108                       	smpsAlterNote       $08
000924CD 9D03                       	dc.b	nE2, $03
000924CF E10B                       	smpsAlterNote       $0B
000924D1 9603 8001                  	dc.b	nA1, $03, nRst, $01
000924D5 E113                       	smpsAlterNote       $13
000924D7 A001                       	dc.b	nG2, $01
000924D9 E118                       	smpsAlterNote       $18
000924DB E701                       	dc.b	smpsNoAttack, $01
000924DD E1E9                       	smpsAlterNote       $E9
000924DF E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
000924E2 E1F3                       	smpsAlterNote       $F3
000924E4 E701                       	dc.b	smpsNoAttack, $01
000924E6 E1FD                       	smpsAlterNote       $FD
000924E8 E701                       	dc.b	smpsNoAttack, $01
000924EA E102                       	smpsAlterNote       $02
000924EC E701                       	dc.b	smpsNoAttack, $01
000924EE E107                       	smpsAlterNote       $07
000924F0 8001                       	dc.b	nRst, $01
000924F2 E10B                       	smpsAlterNote       $0B
000924F4 9603                       	dc.b	nA1, $03
000924F6 E10C                       	smpsAlterNote       $0C
000924F8 9706 8001 9703             	dc.b	nBb1, $06, nRst, $01, nBb1, $03
000924FE E10B                       	smpsAlterNote       $0B
00092500 9603 8001 A206 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA2, $06, nRst, $01, nA1, $03, nA2, $03
0009250C 8001 9602 8001             	dc.b	nRst, $01, nA1, $02, nRst, $01
00092512 E107                       	smpsAlterNote       $07
00092514 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
0009251A E10B                       	smpsAlterNote       $0B
0009251C A203                       	dc.b	nA2, $03
0009251E E107                       	smpsAlterNote       $07
00092520 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00092524 E1F2                       	smpsAlterNote       $F2
00092526 A401                       	dc.b	nB2, $01
00092528 E1FF                       	smpsAlterNote       $FF
0009252A E701                       	dc.b	smpsNoAttack, $01
0009252C E107                       	smpsAlterNote       $07
0009252E E701                       	dc.b	smpsNoAttack, $01
00092530 E1FB                       	smpsAlterNote       $FB
00092532 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00092535 E106                       	smpsAlterNote       $06
00092537 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0009253B E107                       	smpsAlterNote       $07
0009253D 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00092541 E108                       	smpsAlterNote       $08
00092543 9C06 8001 9C03             	dc.b	nEb2, $06, nRst, $01, nEb2, $03
00092549 E109                       	smpsAlterNote       $09
0009254B A003 8001                  	dc.b	nG2, $03, nRst, $01
0009254F E10C                       	smpsAlterNote       $0C
00092551 A302 8001                  	dc.b	nBb2, $02, nRst, $01
00092555 E1F0                       	smpsAlterNote       $F0
00092557 A401                       	dc.b	nB2, $01
00092559 E109                       	smpsAlterNote       $09
0009255B E701                       	dc.b	smpsNoAttack, $01
0009255D E106                       	smpsAlterNote       $06
0009255F E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00092562 E109                       	smpsAlterNote       $09
00092564 A007                       	dc.b	nG2, $07
00092566 E108                       	smpsAlterNote       $08
00092568 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
0009256C E107                       	smpsAlterNote       $07
0009256E 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00092574 E10B                       	smpsAlterNote       $0B
00092576 A202 8001                  	dc.b	nA2, $02, nRst, $01
0009257A E107                       	smpsAlterNote       $07
0009257C 9B03                       	dc.b	nD2, $03
0009257E E11A                       	smpsAlterNote       $1A
00092580 A301                       	dc.b	nBb2, $01
00092582 E1F2                       	smpsAlterNote       $F2
00092584 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00092587 E1FF                       	smpsAlterNote       $FF
00092589 E701                       	dc.b	smpsNoAttack, $01
0009258B E111                       	smpsAlterNote       $11
0009258D E701                       	dc.b	smpsNoAttack, $01
0009258F E106                       	smpsAlterNote       $06
00092591 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00092594 E107                       	smpsAlterNote       $07
00092596 9B03 8001 A706 8001 9B02+  	dc.b	nD2, $03, nRst, $01, nD3, $06, nRst, $01, nD2, $02, nRst, $01
000925A2 E117                       	smpsAlterNote       $17
000925A4 A001                       	dc.b	nG2, $01
000925A6 E1FA                       	smpsAlterNote       $FA
000925A8 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
000925AB E116                       	smpsAlterNote       $16
000925AD E701                       	dc.b	smpsNoAttack, $01
000925AF E1F5                       	smpsAlterNote       $F5
000925B1 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
000925B4 E103                       	smpsAlterNote       $03
000925B6 E701                       	dc.b	smpsNoAttack, $01
000925B8 E10B                       	smpsAlterNote       $0B
000925BA E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000925BE E107                       	smpsAlterNote       $07
000925C0 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
000925C6 E109                       	smpsAlterNote       $09
000925C8 9E03                       	dc.b	nF2, $03
000925CA E10B                       	smpsAlterNote       $0B
000925CC 9603 8001                  	dc.b	nA1, $03, nRst, $01
000925D0 E107                       	smpsAlterNote       $07
000925D2 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
000925D8 E10B                       	smpsAlterNote       $0B
000925DA A203 8001                  	dc.b	nA2, $03, nRst, $01
000925DE E107                       	smpsAlterNote       $07
000925E0 9B03                       	dc.b	nD2, $03
000925E2 E11A                       	smpsAlterNote       $1A
000925E4 A301                       	dc.b	nBb2, $01
000925E6 E1F9                       	smpsAlterNote       $F9
000925E8 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000925EB E107                       	smpsAlterNote       $07
000925ED E701                       	dc.b	smpsNoAttack, $01
000925EF E111                       	smpsAlterNote       $11
000925F1 E701                       	dc.b	smpsNoAttack, $01
000925F3 E106                       	smpsAlterNote       $06
000925F5 E7A5 0280 01               	dc.b	smpsNoAttack, nC3, $02, nRst, $01
000925FA E107                       	smpsAlterNote       $07
000925FC 9B03                       	dc.b	nD2, $03
000925FE E108                       	smpsAlterNote       $08
00092600 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
00092606 E109                       	smpsAlterNote       $09
00092608 A003                       	dc.b	nG2, $03
0009260A E10C                       	smpsAlterNote       $0C
0009260C A303 8001                  	dc.b	nBb2, $03, nRst, $01
00092610 E1FD                       	smpsAlterNote       $FD
00092612 A401 E7A5 01               	dc.b	nB2, $01, smpsNoAttack, nC3, $01
00092617 E106                       	smpsAlterNote       $06
00092619 8001                       	dc.b	nRst, $01
0009261B E109                       	smpsAlterNote       $09
0009261D A006 8001                  	dc.b	nG2, $06, nRst, $01
00092621 E108                       	smpsAlterNote       $08
00092623 9C03                       	dc.b	nEb2, $03
00092625 E107                       	smpsAlterNote       $07
00092627 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
0009262D E10B                       	smpsAlterNote       $0B
0009262F A203 8001                  	dc.b	nA2, $03, nRst, $01
00092633 E107                       	smpsAlterNote       $07
00092635 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00092639 E11A                       	smpsAlterNote       $1A
0009263B A301                       	dc.b	nBb2, $01
0009263D E1F9                       	smpsAlterNote       $F9
0009263F E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00092642 E107                       	smpsAlterNote       $07
00092644 E701                       	dc.b	smpsNoAttack, $01
00092646 E1FB                       	smpsAlterNote       $FB
00092648 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0009264B E106                       	smpsAlterNote       $06
0009264D E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00092651 E107                       	smpsAlterNote       $07
00092653 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
0009265B E1EC                       	smpsAlterNote       $EC
0009265D A101                       	dc.b	nAb2, $01
0009265F E108                       	smpsAlterNote       $08
00092661 E701                       	dc.b	smpsNoAttack, $01
00092663 E1E7                       	smpsAlterNote       $E7
00092665 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00092668 E1F5                       	smpsAlterNote       $F5
0009266A E701                       	dc.b	smpsNoAttack, $01
0009266C E10B                       	smpsAlterNote       $0B
0009266E E702                       	dc.b	smpsNoAttack, $02
00092670 E107                       	smpsAlterNote       $07
00092672 9B03 8001 A703             	dc.b	nD2, $03, nRst, $01, nD3, $03
00092678 E106                       	smpsAlterNote       $06
0009267A 9903 8001 A503             	dc.b	nC2, $03, nRst, $01, nC3, $03
00092680 E10C                       	smpsAlterNote       $0C
00092682 9703 8001 9702 8001        	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01
0009268A E109                       	smpsAlterNote       $09
0009268C 9E03                       	dc.b	nF2, $03
0009268E E10C                       	smpsAlterNote       $0C
00092690 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00092694 E1EA                       	smpsAlterNote       $EA
00092696 A201                       	dc.b	nA2, $01
00092698 E106                       	smpsAlterNote       $06
0009269A E701                       	dc.b	smpsNoAttack, $01
0009269C E114                       	smpsAlterNote       $14
0009269E E701                       	dc.b	smpsNoAttack, $01
000926A0 E1F0                       	smpsAlterNote       $F0
000926A2 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
000926A5 E10C                       	smpsAlterNote       $0C
000926A7 E702 8001 9702 8001 A306+  	dc.b	smpsNoAttack, $02, nRst, $01, nBb1, $02, nRst, $01, nBb2, $06, nRst, $01
000926B3 9703                       	dc.b	nBb1, $03
000926B5 E116                       	smpsAlterNote       $16
000926B7 9C01                       	dc.b	nEb2, $01
000926B9 E105                       	smpsAlterNote       $05
000926BB E79D 01                    	dc.b	smpsNoAttack, nE2, $01
000926BE E113                       	smpsAlterNote       $13
000926C0 E701                       	dc.b	smpsNoAttack, $01
000926C2 E1FF                       	smpsAlterNote       $FF
000926C4 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
000926C7 E109                       	smpsAlterNote       $09
000926C9 E703                       	dc.b	smpsNoAttack, $03
000926CB E10C                       	smpsAlterNote       $0C
000926CD 9703 8001 9702 8001 A303+  	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb2, $03, nBb1, $03
000926D9 8001 9703 9703 8001        	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
000926E1 E109                       	smpsAlterNote       $09
000926E3 9E03                       	dc.b	nF2, $03
000926E5 E10C                       	smpsAlterNote       $0C
000926E7 9703 8001                  	dc.b	nBb1, $03, nRst, $01
000926EB E1EC                       	smpsAlterNote       $EC
000926ED A201                       	dc.b	nA2, $01
000926EF E10A                       	smpsAlterNote       $0A
000926F1 E701                       	dc.b	smpsNoAttack, $01
000926F3 E1E8                       	smpsAlterNote       $E8
000926F5 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
000926F8 E1F7                       	smpsAlterNote       $F7
000926FA E701                       	dc.b	smpsNoAttack, $01
000926FC E10C                       	smpsAlterNote       $0C
000926FE E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
0009270A E1EA                       	smpsAlterNote       $EA
0009270C 9D01                       	dc.b	nE2, $01
0009270E E108                       	smpsAlterNote       $08
00092710 E701                       	dc.b	smpsNoAttack, $01
00092712 E1F6                       	smpsAlterNote       $F6
00092714 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00092717 E105                       	smpsAlterNote       $05
00092719 E701                       	dc.b	smpsNoAttack, $01
0009271B E109                       	smpsAlterNote       $09
0009271D E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00092721 E10C                       	smpsAlterNote       $0C
00092723 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $01
0009272F E108                       	smpsAlterNote       $08
00092731 9D02 8001 9D03             	dc.b	nE2, $02, nRst, $01, nE2, $03
00092737 E106                       	smpsAlterNote       $06
00092739 A403 8001                  	dc.b	nB2, $03, nRst, $01
0009273D E108                       	smpsAlterNote       $08
0009273F 9D03                       	dc.b	nE2, $03
00092741 E1EB                       	smpsAlterNote       $EB
00092743 A801                       	dc.b	nEb3, $01
00092745 E109                       	smpsAlterNote       $09
00092747 E701                       	dc.b	smpsNoAttack, $01
00092749 E1EB                       	smpsAlterNote       $EB
0009274B E7A9 01                    	dc.b	smpsNoAttack, nE3, $01
0009274E E108                       	smpsAlterNote       $08
00092750 E704 9D03 8001 A906 9D03+  	dc.b	smpsNoAttack, $04, nE2, $03, nRst, $01, nE3, $06, nE2, $03, nRst, $01
0009275C E1E9                       	smpsAlterNote       $E9
0009275E A301                       	dc.b	nBb2, $01
00092760 E1F8                       	smpsAlterNote       $F8
00092762 E701                       	dc.b	smpsNoAttack, $01
00092764 E116                       	smpsAlterNote       $16
00092766 E701                       	dc.b	smpsNoAttack, $01
00092768 E1F7                       	smpsAlterNote       $F7
0009276A E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0009276D E107                       	smpsAlterNote       $07
0009276F E701                       	dc.b	smpsNoAttack, $01
00092771 E1EE                       	smpsAlterNote       $EE
00092773 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00092776 E106                       	smpsAlterNote       $06
00092778 8001                       	dc.b	nRst, $01
0009277A E108                       	smpsAlterNote       $08
0009277C 9D03 9D03 8001             	dc.b	nE2, $03, nE2, $03, nRst, $01
00092782 E106                       	smpsAlterNote       $06
00092784 A402 8001                  	dc.b	nB2, $02, nRst, $01
00092788 E108                       	smpsAlterNote       $08
0009278A 9D03                       	dc.b	nE2, $03
0009278C E10B                       	smpsAlterNote       $0B
0009278E 9603 8001 9603             	dc.b	nA1, $03, nRst, $01, nA1, $03
00092794 E108                       	smpsAlterNote       $08
00092796 9D03 8001                  	dc.b	nE2, $03, nRst, $01
0009279A E10B                       	smpsAlterNote       $0B
0009279C 9603                       	dc.b	nA1, $03
0009279E E10E                       	smpsAlterNote       $0E
000927A0 A001                       	dc.b	nG2, $01
000927A2 E118                       	smpsAlterNote       $18
000927A4 E701                       	dc.b	smpsNoAttack, $01
000927A6 E1E9                       	smpsAlterNote       $E9
000927A8 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
000927AB E1EE                       	smpsAlterNote       $EE
000927AD E701                       	dc.b	smpsNoAttack, $01
000927AF E1F8                       	smpsAlterNote       $F8
000927B1 E701                       	dc.b	smpsNoAttack, $01
000927B3 E102                       	smpsAlterNote       $02
000927B5 E701                       	dc.b	smpsNoAttack, $01
000927B7 E107                       	smpsAlterNote       $07
000927B9 8001                       	dc.b	nRst, $01
000927BB E10B                       	smpsAlterNote       $0B
000927BD 9603                       	dc.b	nA1, $03
000927BF E10C                       	smpsAlterNote       $0C
000927C1 9707 9703 8001             	dc.b	nBb1, $07, nBb1, $03, nRst, $01
000927C7 E10B                       	smpsAlterNote       $0B
000927C9 9602 8001 A206 8001 9603+  	dc.b	nA1, $02, nRst, $01, nA2, $06, nRst, $01, nA1, $03, nA2, $03
000927D5 8001 9603                  	dc.b	nRst, $01, nA1, $03
000927D9 E10C                       	smpsAlterNote       $0C
000927DB 9706 800F 9703 9703 8019+  	dc.b	nBb1, $06, nRst, $0F, nBb1, $03, nBb1, $03, nRst, $19, nBb1, $02
000927E7 8001                       	dc.b	nRst, $01
000927E9 E10B                       	smpsAlterNote       $0B
000927EB 9606 800F 9602 8001        	dc.b	nA1, $06, nRst, $0F, nA1, $02, nRst, $01
000927F3 E107                       	smpsAlterNote       $07
000927F5 9B06 8001                  	dc.b	nD2, $06, nRst, $01
000927F9 E10B                       	smpsAlterNote       $0B
000927FB 9603                       	dc.b	nA1, $03
000927FD E109                       	smpsAlterNote       $09
000927FF 9E03 8001                  	dc.b	nF2, $03, nRst, $01
00092803 E108                       	smpsAlterNote       $08
00092805 9D06                       	dc.b	nE2, $06
00092807 E107                       	smpsAlterNote       $07
00092809 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0009280D E106                       	smpsAlterNote       $06
0009280F 9903                       	dc.b	nC2, $03
00092811 E10C                       	smpsAlterNote       $0C
00092813 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00092817 E10B                       	smpsAlterNote       $0B
00092819 9603 9603 8001 9602 8001+  	dc.b	nA1, $03, nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03
00092825 9603 8001 9603 9603 8001   	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
0009282F E10C                       	smpsAlterNote       $0C
00092831 9706 8001 9702 8001 9703+  	dc.b	nBb1, $06, nRst, $01, nBb1, $02, nRst, $01, nBb1, $03, nBb1, $03
0009283D 8001 9703 9703 8001 9703+  	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03
00092849 8001                       	dc.b	nRst, $01
0009284B E10B                       	smpsAlterNote       $0B
0009284D 9602 8001 9603 9603 8001+  	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
00092859 9603 8001 9602 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03, nA1, $07
00092865 9603 8001 9603 9603 8001+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $02
00092871 8001 9603 9603 8001 9603   	dc.b	nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
0009287B E10C                       	smpsAlterNote       $0C
0009287D 9707 800E 9703 9703 8019+  	dc.b	nBb1, $07, nRst, $0E, nBb1, $03, nBb1, $03, nRst, $19, nBb1, $03
00092889 E10B                       	smpsAlterNote       $0B
0009288B 9606 800F 9602 8001        	dc.b	nA1, $06, nRst, $0F, nA1, $02, nRst, $01
00092893 E107                       	smpsAlterNote       $07
00092895 9B06 8001                  	dc.b	nD2, $06, nRst, $01
00092899 E10B                       	smpsAlterNote       $0B
0009289B 9603                       	dc.b	nA1, $03
0009289D E109                       	smpsAlterNote       $09
0009289F 9E03 8001                  	dc.b	nF2, $03, nRst, $01
000928A3 E108                       	smpsAlterNote       $08
000928A5 9D06 8001                  	dc.b	nE2, $06, nRst, $01
000928A9 E107                       	smpsAlterNote       $07
000928AB 9B02 8001                  	dc.b	nD2, $02, nRst, $01
000928AF E106                       	smpsAlterNote       $06
000928B1 9903                       	dc.b	nC2, $03
000928B3 E10C                       	smpsAlterNote       $0C
000928B5 9703 8001                  	dc.b	nBb1, $03, nRst, $01
000928B9 E10B                       	smpsAlterNote       $0B
000928BB 9603 9603 8001 9603 9603+  	dc.b	nA1, $03, nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
000928C7 9602 8001 9603 9603 8001   	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01
000928D1 E10C                       	smpsAlterNote       $0C
000928D3 9706 8001 9703 9703 8001+  	dc.b	nBb1, $06, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $02
000928DF 8001 9703 9703 8001 9703+  	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03
000928EB 8001                       	dc.b	nRst, $01
000928ED E10B                       	smpsAlterNote       $0B
000928EF 9602 8001 9603 9603 8001+  	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
000928FB 9603 8001 9603 9603 8001   	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
00092905 E10C                       	smpsAlterNote       $0C
00092907 9706 9703 8001 9703 9703+  	dc.b	nBb1, $06, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
00092913 9703 9703 8001 9702 8001+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb1, $03
0009291F E10B                       	smpsAlterNote       $0B
00092921 9603 8001 9603 9603 8001+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
0009292D 9603 8001 9602 8001 9603   	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03
00092937 E10C                       	smpsAlterNote       $0C
00092939 9707 9703 8001 9703 9703+  	dc.b	nBb1, $07, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
00092945 9702 8001 9703 9703 8001+  	dc.b	nBb1, $02, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03
00092951 E10B                       	smpsAlterNote       $0B
00092953 9603 8001 9602 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03, nA1, $03
0009295F 8001                       	dc.b	nRst, $01
00092961 E1EC                       	smpsAlterNote       $EC
00092963 A101                       	dc.b	nAb2, $01
00092965 E1FA                       	smpsAlterNote       $FA
00092967 E701                       	dc.b	smpsNoAttack, $01
00092969 E116                       	smpsAlterNote       $16
0009296B E701                       	dc.b	smpsNoAttack, $01
0009296D E1F5                       	smpsAlterNote       $F5
0009296F E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00092972 E10B                       	smpsAlterNote       $0B
00092974 E702 8001 9603 9606 8001+  	dc.b	smpsNoAttack, $02, nRst, $01, nA1, $03, nA1, $06, nRst, $01, nA1, $03
00092980 9603 8001 9603 800B 9602+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nRst, $0B, nA1, $02, nRst, $01
0009298C E107                       	smpsAlterNote       $07
0009298E 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00092994 E10B                       	smpsAlterNote       $0B
00092996 A203                       	dc.b	nA2, $03
00092998 E107                       	smpsAlterNote       $07
0009299A 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0009299E E1F3                       	smpsAlterNote       $F3
000929A0 A401                       	dc.b	nB2, $01
000929A2 E102                       	smpsAlterNote       $02
000929A4 E701                       	dc.b	smpsNoAttack, $01
000929A6 E109                       	smpsAlterNote       $09
000929A8 E701                       	dc.b	smpsNoAttack, $01
000929AA E102                       	smpsAlterNote       $02
000929AC E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000929AF E106                       	smpsAlterNote       $06
000929B1 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000929B5 E107                       	smpsAlterNote       $07
000929B7 9B02 8001                  	dc.b	nD2, $02, nRst, $01
000929BB E108                       	smpsAlterNote       $08
000929BD 9C06 8001 9C03             	dc.b	nEb2, $06, nRst, $01, nEb2, $03
000929C3 E109                       	smpsAlterNote       $09
000929C5 A003 8001                  	dc.b	nG2, $03, nRst, $01
000929C9 E1F2                       	smpsAlterNote       $F2
000929CB A401                       	dc.b	nB2, $01
000929CD E1FF                       	smpsAlterNote       $FF
000929CF E701                       	dc.b	smpsNoAttack, $01
000929D1 E111                       	smpsAlterNote       $11
000929D3 E701                       	dc.b	smpsNoAttack, $01
000929D5 E1FB                       	smpsAlterNote       $FB
000929D7 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000929DA E106                       	smpsAlterNote       $06
000929DC E702                       	dc.b	smpsNoAttack, $02
000929DE E109                       	smpsAlterNote       $09
000929E0 A007                       	dc.b	nG2, $07
000929E2 E108                       	smpsAlterNote       $08
000929E4 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
000929E8 E107                       	smpsAlterNote       $07
000929EA 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
000929F0 E10B                       	smpsAlterNote       $0B
000929F2 A202 8001                  	dc.b	nA2, $02, nRst, $01
000929F6 E107                       	smpsAlterNote       $07
000929F8 9B03                       	dc.b	nD2, $03
000929FA E11A                       	smpsAlterNote       $1A
000929FC A301                       	dc.b	nBb2, $01
000929FE E1F2                       	smpsAlterNote       $F2
00092A00 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00092A03 E1FF                       	smpsAlterNote       $FF
00092A05 E701                       	dc.b	smpsNoAttack, $01
00092A07 E111                       	smpsAlterNote       $11
00092A09 E701                       	dc.b	smpsNoAttack, $01
00092A0B E106                       	smpsAlterNote       $06
00092A0D E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00092A10 E107                       	smpsAlterNote       $07
00092A12 9B03 8001 A706 8001 9B02+  	dc.b	nD2, $03, nRst, $01, nD3, $06, nRst, $01, nD2, $02, nRst, $01
00092A1E E117                       	smpsAlterNote       $17
00092A20 A001                       	dc.b	nG2, $01
00092A22 E1FA                       	smpsAlterNote       $FA
00092A24 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
00092A27 E116                       	smpsAlterNote       $16
00092A29 E701                       	dc.b	smpsNoAttack, $01
00092A2B E1F5                       	smpsAlterNote       $F5
00092A2D E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00092A30 E103                       	smpsAlterNote       $03
00092A32 E701                       	dc.b	smpsNoAttack, $01
00092A34 E10B                       	smpsAlterNote       $0B
00092A36 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00092A3A E107                       	smpsAlterNote       $07
00092A3C 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00092A42 E109                       	smpsAlterNote       $09
00092A44 9E03                       	dc.b	nF2, $03
00092A46 E10B                       	smpsAlterNote       $0B
00092A48 9603 8001                  	dc.b	nA1, $03, nRst, $01
00092A4C E107                       	smpsAlterNote       $07
00092A4E 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
00092A54 E10B                       	smpsAlterNote       $0B
00092A56 A203 8001                  	dc.b	nA2, $03, nRst, $01
00092A5A E107                       	smpsAlterNote       $07
00092A5C 9B03                       	dc.b	nD2, $03
00092A5E E11A                       	smpsAlterNote       $1A
00092A60 A301                       	dc.b	nBb2, $01
00092A62 E1F9                       	smpsAlterNote       $F9
00092A64 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00092A67 E1FF                       	smpsAlterNote       $FF
00092A69 E701                       	dc.b	smpsNoAttack, $01
00092A6B E111                       	smpsAlterNote       $11
00092A6D E701                       	dc.b	smpsNoAttack, $01
00092A6F E106                       	smpsAlterNote       $06
00092A71 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00092A74 E107                       	smpsAlterNote       $07
00092A76 9B03                       	dc.b	nD2, $03
00092A78 E108                       	smpsAlterNote       $08
00092A7A 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
00092A80 E109                       	smpsAlterNote       $09
00092A82 A003                       	dc.b	nG2, $03
00092A84 E1F0                       	smpsAlterNote       $F0
00092A86 A501                       	dc.b	nC3, $01
00092A88 E106                       	smpsAlterNote       $06
00092A8A E705 8001                  	dc.b	smpsNoAttack, $05, nRst, $01
00092A8E E109                       	smpsAlterNote       $09
00092A90 A006 8001                  	dc.b	nG2, $06, nRst, $01
00092A94 E108                       	smpsAlterNote       $08
00092A96 9C03                       	dc.b	nEb2, $03
00092A98 E107                       	smpsAlterNote       $07
00092A9A 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
00092AA0 E10B                       	smpsAlterNote       $0B
00092AA2 A203 8001                  	dc.b	nA2, $03, nRst, $01
00092AA6 E107                       	smpsAlterNote       $07
00092AA8 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00092AAC E11A                       	smpsAlterNote       $1A
00092AAE A301                       	dc.b	nBb2, $01
00092AB0 E1F9                       	smpsAlterNote       $F9
00092AB2 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00092AB5 E107                       	smpsAlterNote       $07
00092AB7 E701                       	dc.b	smpsNoAttack, $01
00092AB9 E1FB                       	smpsAlterNote       $FB
00092ABB E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00092ABE E106                       	smpsAlterNote       $06
00092AC0 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00092AC4 E107                       	smpsAlterNote       $07
00092AC6 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
00092ACE E1EC                       	smpsAlterNote       $EC
00092AD0 A101                       	dc.b	nAb2, $01
00092AD2 E108                       	smpsAlterNote       $08
00092AD4 E701                       	dc.b	smpsNoAttack, $01
00092AD6 E1E7                       	smpsAlterNote       $E7
00092AD8 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00092ADB E1F5                       	smpsAlterNote       $F5
00092ADD E701                       	dc.b	smpsNoAttack, $01
00092ADF E10B                       	smpsAlterNote       $0B
00092AE1 E702                       	dc.b	smpsNoAttack, $02
00092AE3 E107                       	smpsAlterNote       $07
00092AE5 9B03 8001 A703             	dc.b	nD2, $03, nRst, $01, nD3, $03
00092AEB E106                       	smpsAlterNote       $06
00092AED 9903 8001 A503             	dc.b	nC2, $03, nRst, $01, nC3, $03
00092AF3 E10C                       	smpsAlterNote       $0C
00092AF5 9703 8001 9702 8001        	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01
00092AFD E109                       	smpsAlterNote       $09
00092AFF 9E03                       	dc.b	nF2, $03
00092B01 E10C                       	smpsAlterNote       $0C
00092B03 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00092B07 E1EA                       	smpsAlterNote       $EA
00092B09 A201                       	dc.b	nA2, $01
00092B0B E106                       	smpsAlterNote       $06
00092B0D E701                       	dc.b	smpsNoAttack, $01
00092B0F E114                       	smpsAlterNote       $14
00092B11 E701                       	dc.b	smpsNoAttack, $01
00092B13 E1F0                       	smpsAlterNote       $F0
00092B15 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00092B18 E10C                       	smpsAlterNote       $0C
00092B1A E702 8001 9702 8001 A306+  	dc.b	smpsNoAttack, $02, nRst, $01, nBb1, $02, nRst, $01, nBb2, $06, nRst, $01
00092B26 9703                       	dc.b	nBb1, $03
00092B28 E116                       	smpsAlterNote       $16
00092B2A 9C01                       	dc.b	nEb2, $01
00092B2C E105                       	smpsAlterNote       $05
00092B2E E79D 01                    	dc.b	smpsNoAttack, nE2, $01
00092B31 E113                       	smpsAlterNote       $13
00092B33 E701                       	dc.b	smpsNoAttack, $01
00092B35 E1FF                       	smpsAlterNote       $FF
00092B37 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00092B3A E109                       	smpsAlterNote       $09
00092B3C E703                       	dc.b	smpsNoAttack, $03
00092B3E E10C                       	smpsAlterNote       $0C
00092B40 9703 8001 9702 8001 A303+  	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb2, $03, nBb1, $03
00092B4C 8001 9703 9703 8001        	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
00092B54 E109                       	smpsAlterNote       $09
00092B56 9E03                       	dc.b	nF2, $03
00092B58 E10C                       	smpsAlterNote       $0C
00092B5A 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00092B5E E1EA                       	smpsAlterNote       $EA
00092B60 A201                       	dc.b	nA2, $01
00092B62 E106                       	smpsAlterNote       $06
00092B64 E701                       	dc.b	smpsNoAttack, $01
00092B66 E1E2                       	smpsAlterNote       $E2
00092B68 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00092B6B E1F0                       	smpsAlterNote       $F0
00092B6D E701                       	dc.b	smpsNoAttack, $01
00092B6F E10C                       	smpsAlterNote       $0C
00092B71 E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
00092B7D E116                       	smpsAlterNote       $16
00092B7F 9C01                       	dc.b	nEb2, $01
00092B81 E105                       	smpsAlterNote       $05
00092B83 E79D 01                    	dc.b	smpsNoAttack, nE2, $01
00092B86 E1F1                       	smpsAlterNote       $F1
00092B88 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00092B8B E1FF                       	smpsAlterNote       $FF
00092B8D E701                       	dc.b	smpsNoAttack, $01
00092B8F E109                       	smpsAlterNote       $09
00092B91 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00092B95 E10C                       	smpsAlterNote       $0C
00092B97 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $04
00092BA3 E106                       	smpsAlterNote       $06
00092BA5 9903                       	dc.b	nC2, $03
00092BA7 E107                       	smpsAlterNote       $07
00092BA9 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00092BAD E109                       	smpsAlterNote       $09
00092BAF 8003 940D 8004             	dc.b	nRst, $03, nG1, $0D, nRst, $04
00092BB5 E107                       	smpsAlterNote       $07
00092BB7 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00092BBB E108                       	smpsAlterNote       $08
00092BBD 9D03                       	dc.b	nE2, $03
00092BBF E10B                       	smpsAlterNote       $0B
00092BC1 8004 960D 8004             	dc.b	nRst, $04, nA1, $0D, nRst, $04
00092BC7 E109                       	smpsAlterNote       $09
00092BC9 9E03 A003 8001             	dc.b	nF2, $03, nG2, $03, nRst, $01
00092BCF E10C                       	smpsAlterNote       $0C
00092BD1 8003 970D 8001             	dc.b	nRst, $03, nBb1, $0D, nRst, $01
00092BD7 E106                       	smpsAlterNote       $06
00092BD9 9903                       	dc.b	nC2, $03
00092BDB E11A                       	smpsAlterNote       $1A
00092BDD A301                       	dc.b	nBb2, $01
00092BDF E1F9                       	smpsAlterNote       $F9
00092BE1 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00092BE4 E1FF                       	smpsAlterNote       $FF
00092BE6 E701                       	dc.b	smpsNoAttack, $01
00092BE8 E111                       	smpsAlterNote       $11
00092BEA E701                       	dc.b	smpsNoAttack, $01
00092BEC E106                       	smpsAlterNote       $06
00092BEE E7A5 0399 0380 04          	dc.b	smpsNoAttack, nC3, $03, nC2, $03, nRst, $04
00092BF5 E109                       	smpsAlterNote       $09
00092BF7 A003                       	dc.b	nG2, $03
00092BF9 E106                       	smpsAlterNote       $06
00092BFB 9907                       	dc.b	nC2, $07
00092BFD E107                       	smpsAlterNote       $07
00092BFF 9B03 8001 9B02 8001        	dc.b	nD2, $03, nRst, $01, nD2, $02, nRst, $01
00092C07 E10B                       	smpsAlterNote       $0B
00092C09 A203                       	dc.b	nA2, $03
00092C0B E107                       	smpsAlterNote       $07
00092C0D 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00092C11 E1F2                       	smpsAlterNote       $F2
00092C13 A401                       	dc.b	nB2, $01
00092C15 E1F9                       	smpsAlterNote       $F9
00092C17 E701                       	dc.b	smpsNoAttack, $01
00092C19 E107                       	smpsAlterNote       $07
00092C1B E701                       	dc.b	smpsNoAttack, $01
00092C1D E1FB                       	smpsAlterNote       $FB
00092C1F E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00092C22 E106                       	smpsAlterNote       $06
00092C24 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00092C28 E107                       	smpsAlterNote       $07
00092C2A 9B03                       	dc.b	nD2, $03
00092C2C E108                       	smpsAlterNote       $08
00092C2E 9C06 8001 A803             	dc.b	nEb2, $06, nRst, $01, nEb3, $03
00092C34 E109                       	smpsAlterNote       $09
00092C36 A003 8001                  	dc.b	nG2, $03, nRst, $01
00092C3A E1F2                       	smpsAlterNote       $F2
00092C3C A401                       	dc.b	nB2, $01
00092C3E E1F9                       	smpsAlterNote       $F9
00092C40 E701                       	dc.b	smpsNoAttack, $01
00092C42 E107                       	smpsAlterNote       $07
00092C44 E701                       	dc.b	smpsNoAttack, $01
00092C46 E1FB                       	smpsAlterNote       $FB
00092C48 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00092C4B E106                       	smpsAlterNote       $06
00092C4D E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00092C51 E108                       	smpsAlterNote       $08
00092C53 9C06 8001                  	dc.b	nEb2, $06, nRst, $01
00092C57 E10C                       	smpsAlterNote       $0C
00092C59 A302 8001                  	dc.b	nBb2, $02, nRst, $01
00092C5D E107                       	smpsAlterNote       $07
00092C5F 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00092C65 E10B                       	smpsAlterNote       $0B
00092C67 A203                       	dc.b	nA2, $03
00092C69 E107                       	smpsAlterNote       $07
00092C6B 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00092C6F E1F2                       	smpsAlterNote       $F2
00092C71 A401                       	dc.b	nB2, $01
00092C73 E1FF                       	smpsAlterNote       $FF
00092C75 E701                       	dc.b	smpsNoAttack, $01
00092C77 E107                       	smpsAlterNote       $07
00092C79 E701                       	dc.b	smpsNoAttack, $01
00092C7B E1FB                       	smpsAlterNote       $FB
00092C7D E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00092C80 E106                       	smpsAlterNote       $06
00092C82 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00092C86 E107                       	smpsAlterNote       $07
00092C88 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00092C8C E108                       	smpsAlterNote       $08
00092C8E 9C06 8001 A803             	dc.b	nEb2, $06, nRst, $01, nEb3, $03
00092C94 E109                       	smpsAlterNote       $09
00092C96 A003 8001                  	dc.b	nG2, $03, nRst, $01
00092C9A E1F2                       	smpsAlterNote       $F2
00092C9C A401                       	dc.b	nB2, $01
00092C9E E1FF                       	smpsAlterNote       $FF
00092CA0 E701                       	dc.b	smpsNoAttack, $01
00092CA2 E111                       	smpsAlterNote       $11
00092CA4 E701                       	dc.b	smpsNoAttack, $01
00092CA6 E1FB                       	smpsAlterNote       $FB
00092CA8 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00092CAB E106                       	smpsAlterNote       $06
00092CAD E702                       	dc.b	smpsNoAttack, $02
00092CAF E108                       	smpsAlterNote       $08
00092CB1 9C07                       	dc.b	nEb2, $07
00092CB3 E10C                       	smpsAlterNote       $0C
00092CB5 A303 8001                  	dc.b	nBb2, $03, nRst, $01
00092CB9 E107                       	smpsAlterNote       $07
00092CBB 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00092CC1 E10B                       	smpsAlterNote       $0B
00092CC3 A202 8001                  	dc.b	nA2, $02, nRst, $01
00092CC7 E107                       	smpsAlterNote       $07
00092CC9 9B03                       	dc.b	nD2, $03
00092CCB E11A                       	smpsAlterNote       $1A
00092CCD A301                       	dc.b	nBb2, $01
00092CCF E1F2                       	smpsAlterNote       $F2
00092CD1 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00092CD4 E1FF                       	smpsAlterNote       $FF
00092CD6 E701                       	dc.b	smpsNoAttack, $01
00092CD8 E111                       	smpsAlterNote       $11
00092CDA E701                       	dc.b	smpsNoAttack, $01
00092CDC E106                       	smpsAlterNote       $06
00092CDE E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00092CE1 E107                       	smpsAlterNote       $07
00092CE3 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00092CE7 E108                       	smpsAlterNote       $08
00092CE9 9C06 8001 A802 8001        	dc.b	nEb2, $06, nRst, $01, nEb3, $02, nRst, $01
00092CF1 E109                       	smpsAlterNote       $09
00092CF3 A003                       	dc.b	nG2, $03
00092CF5 E11A                       	smpsAlterNote       $1A
00092CF7 A301                       	dc.b	nBb2, $01
00092CF9 E1F2                       	smpsAlterNote       $F2
00092CFB E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00092CFE E1FF                       	smpsAlterNote       $FF
00092D00 E701                       	dc.b	smpsNoAttack, $01
00092D02 E111                       	smpsAlterNote       $11
00092D04 E701                       	dc.b	smpsNoAttack, $01
00092D06 E106                       	smpsAlterNote       $06
00092D08 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00092D0B E108                       	smpsAlterNote       $08
00092D0D 9C07                       	dc.b	nEb2, $07
00092D0F E10C                       	smpsAlterNote       $0C
00092D11 A303 8001                  	dc.b	nBb2, $03, nRst, $01
00092D15 E107                       	smpsAlterNote       $07
00092D17 9B02 8001 9B03 9B03 8001+  	dc.b	nD2, $02, nRst, $01, nD2, $03, nD2, $03, nRst, $01, nD2, $03
00092D23 9B03 8001 9B03 9B03 8001   	dc.b	nD2, $03, nRst, $01, nD2, $03, nD2, $03, nRst, $01
00092D2D E108                       	smpsAlterNote       $08
00092D2F 9C06                       	dc.b	nEb2, $06
00092D31 E10C                       	smpsAlterNote       $0C
00092D33 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00092D37 E108                       	smpsAlterNote       $08
00092D39 9C03                       	dc.b	nEb2, $03
00092D3B E109                       	smpsAlterNote       $09
00092D3D A003 8001                  	dc.b	nG2, $03, nRst, $01
00092D41 E10C                       	smpsAlterNote       $0C
00092D43 A302 8001 A303 8007        	dc.b	nBb2, $02, nRst, $01, nBb2, $03, nRst, $07
00092D4B E107                       	smpsAlterNote       $07
00092D4D 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00092D51 F6F4 F8                    	smpsJump            music84_Jump04
00092D54                            
00092D54                            ; FM2 Data
00092D54                            music84_FM2:
00092D54 E0C0                       	smpsPan             panCenter, $00
00092D58 E10B                       	smpsAlterNote       $0B
00092D5A C603 8007                  	dc.b	nA5, $03, nRst, $07
00092D5E E109                       	smpsAlterNote       $09
00092D60 C403 800B                  	dc.b	nG5, $03, nRst, $0B
00092D64 E108                       	smpsAlterNote       $08
00092D66 C103 8004                  	dc.b	nE5, $03, nRst, $04
00092D6C E080                       	smpsPan             panLeft, $00
00092D6E E10C                       	smpsAlterNote       $0C
00092D70 E6F9                       	smpsAlterVol        $F9
00092D72 C703                       	dc.b	nBb5, $03
00092D74 E10B                       	smpsAlterNote       $0B
00092D76 C603 8001                  	dc.b	nA5, $03, nRst, $01
00092D7A E109                       	smpsAlterNote       $09
00092D7C C402 8001 C203             	dc.b	nG5, $02, nRst, $01, nF5, $03
00092D82 E108                       	smpsAlterNote       $08
00092D84 C103 8001                  	dc.b	nE5, $03, nRst, $01
00092D88 E106                       	smpsAlterNote       $06
00092D8A BD03                       	dc.b	nC5, $03
00092D8C E10B                       	smpsAlterNote       $0B
00092D8E BA03 8001                  	dc.b	nA4, $03, nRst, $01
00092D94 E0C0                       	smpsPan             panCenter, $00
00092D96 E107                       	smpsAlterNote       $07
00092D98 E606                       	smpsAlterVol        $06
00092D9A BF03                       	dc.b	nD5, $03
00092D9C                            
00092D9C                            music84_Jump03:
00092D9C E108                       	smpsAlterNote       $08
00092D9E C103 8001                  	dc.b	nE5, $03, nRst, $01
00092DA2 E109                       	smpsAlterNote       $09
00092DA4 C202 8001 C403             	dc.b	nF5, $02, nRst, $01, nG5, $03
00092DAA E10B                       	smpsAlterNote       $0B
00092DAC C607                       	dc.b	nA5, $07
00092DAE E107                       	smpsAlterNote       $07
00092DB0 BF03 8001                  	dc.b	nD5, $03, nRst, $01
00092DB4 E106                       	smpsAlterNote       $06
00092DB6 C90D                       	dc.b	nC6, $0D
00092DB8 E100                       	smpsAlterNote       $00
00092DBA E701                       	dc.b	smpsNoAttack, $01
00092DBC E1FF                       	smpsAlterNote       $FF
00092DBE E701                       	dc.b	smpsNoAttack, $01
00092DC0 E103                       	smpsAlterNote       $03
00092DC2 E701                       	dc.b	smpsNoAttack, $01
00092DC4 E109                       	smpsAlterNote       $09
00092DC6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00092DCA E106                       	smpsAlterNote       $06
00092DCC E701                       	dc.b	smpsNoAttack, $01
00092DCE E100                       	smpsAlterNote       $00
00092DD0 E701                       	dc.b	smpsNoAttack, $01
00092DD2 E10C                       	smpsAlterNote       $0C
00092DD4 C703 8001                  	dc.b	nBb5, $03, nRst, $01
00092DD8 E10B                       	smpsAlterNote       $0B
00092DDA C603                       	dc.b	nA5, $03
00092DDC E109                       	smpsAlterNote       $09
00092DDE C403 8001                  	dc.b	nG5, $03, nRst, $01
00092DE2 E10B                       	smpsAlterNote       $0B
00092DE4 C60D                       	dc.b	nA5, $0D
00092DE6 E105                       	smpsAlterNote       $05
00092DE8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00092DEC E10B                       	smpsAlterNote       $0B
00092DEE E701                       	dc.b	smpsNoAttack, $01
00092DF0 E10E                       	smpsAlterNote       $0E
00092DF2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00092DF6 E108                       	smpsAlterNote       $08
00092DF8 E701                       	dc.b	smpsNoAttack, $01
00092DFA E104                       	smpsAlterNote       $04
00092DFC E701                       	dc.b	smpsNoAttack, $01
00092DFE E105                       	smpsAlterNote       $05
00092E00 E701                       	dc.b	smpsNoAttack, $01
00092E02 E10B                       	smpsAlterNote       $0B
00092E04 E701                       	dc.b	smpsNoAttack, $01
00092E06 E10F                       	smpsAlterNote       $0F
00092E08 E701                       	dc.b	smpsNoAttack, $01
00092E0A E10B                       	smpsAlterNote       $0B
00092E0C E701                       	dc.b	smpsNoAttack, $01
00092E0E E108                       	smpsAlterNote       $08
00092E10 E701                       	dc.b	smpsNoAttack, $01
00092E12 E104                       	smpsAlterNote       $04
00092E14 E701                       	dc.b	smpsNoAttack, $01
00092E16 E108                       	smpsAlterNote       $08
00092E18 E701                       	dc.b	smpsNoAttack, $01
00092E1A E10E                       	smpsAlterNote       $0E
00092E1C E701                       	dc.b	smpsNoAttack, $01
00092E1E E10F                       	smpsAlterNote       $0F
00092E20 E701                       	dc.b	smpsNoAttack, $01
00092E22 E10B                       	smpsAlterNote       $0B
00092E24 E701                       	dc.b	smpsNoAttack, $01
00092E26 E105                       	smpsAlterNote       $05
00092E28 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00092E2C E108                       	smpsAlterNote       $08
00092E2E E701                       	dc.b	smpsNoAttack, $01
00092E30 E10E                       	smpsAlterNote       $0E
00092E32 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00092E36 E108                       	smpsAlterNote       $08
00092E38 E701                       	dc.b	smpsNoAttack, $01
00092E3A E105                       	smpsAlterNote       $05
00092E3C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00092E40 E10B                       	smpsAlterNote       $0B
00092E42 E701                       	dc.b	smpsNoAttack, $01
00092E44 E10F                       	smpsAlterNote       $0F
00092E46 E701 800E                  	dc.b	smpsNoAttack, $01, nRst, $0E
00092E4A E107                       	smpsAlterNote       $07
00092E4C BF03 8001                  	dc.b	nD5, $03, nRst, $01
00092E50 E108                       	smpsAlterNote       $08
00092E52 C103                       	dc.b	nE5, $03
00092E54 E109                       	smpsAlterNote       $09
00092E56 C203 8001 C402 8001        	dc.b	nF5, $03, nRst, $01, nG5, $02, nRst, $01
00092E5E E10B                       	smpsAlterNote       $0B
00092E60 C606 8001                  	dc.b	nA5, $06, nRst, $01
00092E64 E107                       	smpsAlterNote       $07
00092E66 BF03                       	dc.b	nD5, $03
00092E68 E106                       	smpsAlterNote       $06
00092E6A C90D 8001                  	dc.b	nC6, $0D, nRst, $01
00092E6E E107                       	smpsAlterNote       $07
00092E70 CB03                       	dc.b	nD6, $03
00092E72 E10C                       	smpsAlterNote       $0C
00092E74 C704 8001                  	dc.b	nBb5, $04, nRst, $01
00092E78 E10B                       	smpsAlterNote       $0B
00092E7A C604 8001                  	dc.b	nA5, $04, nRst, $01
00092E7E E109                       	smpsAlterNote       $09
00092E80 C404                       	dc.b	nG5, $04
00092E82 E10B                       	smpsAlterNote       $0B
00092E84 C60D                       	dc.b	nA5, $0D
00092E86 E108                       	smpsAlterNote       $08
00092E88 E701                       	dc.b	smpsNoAttack, $01
00092E8A E104                       	smpsAlterNote       $04
00092E8C E701                       	dc.b	smpsNoAttack, $01
00092E8E E108                       	smpsAlterNote       $08
00092E90 E701                       	dc.b	smpsNoAttack, $01
00092E92 E10B                       	smpsAlterNote       $0B
00092E94 E701                       	dc.b	smpsNoAttack, $01
00092E96 E10F                       	smpsAlterNote       $0F
00092E98 E701                       	dc.b	smpsNoAttack, $01
00092E9A E10B                       	smpsAlterNote       $0B
00092E9C E701                       	dc.b	smpsNoAttack, $01
00092E9E E105                       	smpsAlterNote       $05
00092EA0 E701                       	dc.b	smpsNoAttack, $01
00092EA2 E104                       	smpsAlterNote       $04
00092EA4 E701                       	dc.b	smpsNoAttack, $01
00092EA6 E108                       	smpsAlterNote       $08
00092EA8 E701                       	dc.b	smpsNoAttack, $01
00092EAA E10E                       	smpsAlterNote       $0E
00092EAC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00092EB0 E10B                       	smpsAlterNote       $0B
00092EB2 E701                       	dc.b	smpsNoAttack, $01
00092EB4 E105                       	smpsAlterNote       $05
00092EB6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00092EBA E10B                       	smpsAlterNote       $0B
00092EBC E701                       	dc.b	smpsNoAttack, $01
00092EBE E10E                       	smpsAlterNote       $0E
00092EC0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00092EC4 E108                       	smpsAlterNote       $08
00092EC6 E701                       	dc.b	smpsNoAttack, $01
00092EC8 E104                       	smpsAlterNote       $04
00092ECA E701                       	dc.b	smpsNoAttack, $01
00092ECC E105                       	smpsAlterNote       $05
00092ECE E701                       	dc.b	smpsNoAttack, $01
00092ED0 E10B                       	smpsAlterNote       $0B
00092ED2 E701                       	dc.b	smpsNoAttack, $01
00092ED4 E10F                       	smpsAlterNote       $0F
00092ED6 E701                       	dc.b	smpsNoAttack, $01
00092ED8 E10B                       	smpsAlterNote       $0B
00092EDA E701                       	dc.b	smpsNoAttack, $01
00092EDC E108                       	smpsAlterNote       $08
00092EDE E701                       	dc.b	smpsNoAttack, $01
00092EE0 E105                       	smpsAlterNote       $05
00092EE2 8001                       	dc.b	nRst, $01
00092EE4 E109                       	smpsAlterNote       $09
00092EE6 C401                       	dc.b	nG5, $01
00092EE8 E10B                       	smpsAlterNote       $0B
00092EEA E7C5 02C6 0D80 01C6 04     	dc.b	smpsNoAttack, nAb5, $02, nA5, $0D, nRst, $01, nA5, $04
00092EF3 E109                       	smpsAlterNote       $09
00092EF5 C404 8001                  	dc.b	nG5, $04, nRst, $01
00092EF9 E10B                       	smpsAlterNote       $0B
00092EFB C604 8001                  	dc.b	nA5, $04, nRst, $01
00092EFF E107                       	smpsAlterNote       $07
00092F01 BF0D                       	dc.b	nD5, $0D
00092F03 E101                       	smpsAlterNote       $01
00092F05 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00092F09 E104                       	smpsAlterNote       $04
00092F0B E701                       	dc.b	smpsNoAttack, $01
00092F0D E10A                       	smpsAlterNote       $0A
00092F0F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00092F13 E104                       	smpsAlterNote       $04
00092F15 E701                       	dc.b	smpsNoAttack, $01
00092F17 E101                       	smpsAlterNote       $01
00092F19 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00092F1D E107                       	smpsAlterNote       $07
00092F1F E701                       	dc.b	smpsNoAttack, $01
00092F21 E10B                       	smpsAlterNote       $0B
00092F23 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00092F27 E108                       	smpsAlterNote       $08
00092F29 C101                       	dc.b	nE5, $01
00092F2B E109                       	smpsAlterNote       $09
00092F2D E7C2 01C4 01               	dc.b	smpsNoAttack, nF5, $01, nG5, $01
00092F32 E10B                       	smpsAlterNote       $0B
00092F34 C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
00092F3C E108                       	smpsAlterNote       $08
00092F3E CD06                       	dc.b	nE6, $06
00092F40 E109                       	smpsAlterNote       $09
00092F42 CE07                       	dc.b	nF6, $07
00092F44 E108                       	smpsAlterNote       $08
00092F46 CD03 8001                  	dc.b	nE6, $03, nRst, $01
00092F4A E106                       	smpsAlterNote       $06
00092F4C C903                       	dc.b	nC6, $03
00092F4E E109                       	smpsAlterNote       $09
00092F50 C403 8001                  	dc.b	nG5, $03, nRst, $01
00092F54 E10C                       	smpsAlterNote       $0C
00092F56 C70D                       	dc.b	nBb5, $0D
00092F58 E106                       	smpsAlterNote       $06
00092F5A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00092F5E E109                       	smpsAlterNote       $09
00092F60 E701                       	dc.b	smpsNoAttack, $01
00092F62 E10F                       	smpsAlterNote       $0F
00092F64 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00092F68 E109                       	smpsAlterNote       $09
00092F6A E701                       	dc.b	smpsNoAttack, $01
00092F6C E106                       	smpsAlterNote       $06
00092F6E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00092F72 E10C                       	smpsAlterNote       $0C
00092F74 E701                       	dc.b	smpsNoAttack, $01
00092F76 E110                       	smpsAlterNote       $10
00092F78 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00092F7C E10B                       	smpsAlterNote       $0B
00092F7E C606 C50E                  	dc.b	nA5, $06, nAb5, $0E
00092F82 E105                       	smpsAlterNote       $05
00092F84 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00092F88 E10B                       	smpsAlterNote       $0B
00092F8A E701                       	dc.b	smpsNoAttack, $01
00092F8C E10E                       	smpsAlterNote       $0E
00092F8E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00092F92 E108                       	smpsAlterNote       $08
00092F94 E701                       	dc.b	smpsNoAttack, $01
00092F96 E104                       	smpsAlterNote       $04
00092F98 E701                       	dc.b	smpsNoAttack, $01
00092F9A E105                       	smpsAlterNote       $05
00092F9C E701                       	dc.b	smpsNoAttack, $01
00092F9E E10B                       	smpsAlterNote       $0B
00092FA0 E701                       	dc.b	smpsNoAttack, $01
00092FA2 E10F                       	smpsAlterNote       $0F
00092FA4 E701                       	dc.b	smpsNoAttack, $01
00092FA6 E10B                       	smpsAlterNote       $0B
00092FA8 E701                       	dc.b	smpsNoAttack, $01
00092FAA E108                       	smpsAlterNote       $08
00092FAC E701                       	dc.b	smpsNoAttack, $01
00092FAE E104                       	smpsAlterNote       $04
00092FB0 E701                       	dc.b	smpsNoAttack, $01
00092FB2 E108                       	smpsAlterNote       $08
00092FB4 E701                       	dc.b	smpsNoAttack, $01
00092FB6 E10E                       	smpsAlterNote       $0E
00092FB8 E701                       	dc.b	smpsNoAttack, $01
00092FBA E10F                       	smpsAlterNote       $0F
00092FBC E701                       	dc.b	smpsNoAttack, $01
00092FBE E10B                       	smpsAlterNote       $0B
00092FC0 E701                       	dc.b	smpsNoAttack, $01
00092FC2 E105                       	smpsAlterNote       $05
00092FC4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00092FC8 E108                       	smpsAlterNote       $08
00092FCA E701                       	dc.b	smpsNoAttack, $01
00092FCC E10E                       	smpsAlterNote       $0E
00092FCE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00092FD2 E108                       	smpsAlterNote       $08
00092FD4 E701                       	dc.b	smpsNoAttack, $01
00092FD6 E105                       	smpsAlterNote       $05
00092FD8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00092FDC E10B                       	smpsAlterNote       $0B
00092FDE E701                       	dc.b	smpsNoAttack, $01
00092FE0 E10F                       	smpsAlterNote       $0F
00092FE2 E701                       	dc.b	smpsNoAttack, $01
00092FE4 E10E                       	smpsAlterNote       $0E
00092FE6 E701                       	dc.b	smpsNoAttack, $01
00092FE8 E108                       	smpsAlterNote       $08
00092FEA E701                       	dc.b	smpsNoAttack, $01
00092FEC E104                       	smpsAlterNote       $04
00092FEE E701                       	dc.b	smpsNoAttack, $01
00092FF0 E108                       	smpsAlterNote       $08
00092FF2 E701                       	dc.b	smpsNoAttack, $01
00092FF4 E10E                       	smpsAlterNote       $0E
00092FF6 E701                       	dc.b	smpsNoAttack, $01
00092FF8 E10F                       	smpsAlterNote       $0F
00092FFA E701                       	dc.b	smpsNoAttack, $01
00092FFC E10B                       	smpsAlterNote       $0B
00092FFE E701                       	dc.b	smpsNoAttack, $01
00093000 E105                       	smpsAlterNote       $05
00093002 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093006 E108                       	smpsAlterNote       $08
00093008 E701                       	dc.b	smpsNoAttack, $01
0009300A E10E                       	smpsAlterNote       $0E
0009300C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093010 E108                       	smpsAlterNote       $08
00093012 E701                       	dc.b	smpsNoAttack, $01
00093014 E105                       	smpsAlterNote       $05
00093016 E701                       	dc.b	smpsNoAttack, $01
00093018 E10B                       	smpsAlterNote       $0B
0009301A C60D                       	dc.b	nA5, $0D
0009301C E108                       	smpsAlterNote       $08
0009301E E701                       	dc.b	smpsNoAttack, $01
00093020 E104                       	smpsAlterNote       $04
00093022 E701                       	dc.b	smpsNoAttack, $01
00093024 E105                       	smpsAlterNote       $05
00093026 E701                       	dc.b	smpsNoAttack, $01
00093028 E10B                       	smpsAlterNote       $0B
0009302A E701                       	dc.b	smpsNoAttack, $01
0009302C E10F                       	smpsAlterNote       $0F
0009302E E701                       	dc.b	smpsNoAttack, $01
00093030 E10B                       	smpsAlterNote       $0B
00093032 E701                       	dc.b	smpsNoAttack, $01
00093034 E108                       	smpsAlterNote       $08
00093036 E701                       	dc.b	smpsNoAttack, $01
00093038 E104                       	smpsAlterNote       $04
0009303A E701                       	dc.b	smpsNoAttack, $01
0009303C E108                       	smpsAlterNote       $08
0009303E E701                       	dc.b	smpsNoAttack, $01
00093040 E10E                       	smpsAlterNote       $0E
00093042 E701                       	dc.b	smpsNoAttack, $01
00093044 E10F                       	smpsAlterNote       $0F
00093046 E701                       	dc.b	smpsNoAttack, $01
0009304A E109                       	smpsAlterNote       $09
0009304C E6FF                       	smpsAlterVol        $FF
0009304E C206 8001 C203 C203 8001   	dc.b	nF5, $06, nRst, $01, nF5, $03, nF5, $03, nRst, $01
00093058 E108                       	smpsAlterNote       $08
0009305A C103 800E                  	dc.b	nE5, $03, nRst, $0E
00093060 E107                       	smpsAlterNote       $07
00093062 E601                       	smpsAlterVol        $01
00093064 BF03                       	dc.b	nD5, $03
00093066 E108                       	smpsAlterNote       $08
00093068 C103 8001                  	dc.b	nE5, $03, nRst, $01
0009306C E109                       	smpsAlterNote       $09
0009306E C203 C403 8001             	dc.b	nF5, $03, nG5, $03, nRst, $01
00093074 E10B                       	smpsAlterNote       $0B
00093076 C606 8001                  	dc.b	nA5, $06, nRst, $01
0009307A E107                       	smpsAlterNote       $07
0009307C BF02 8001                  	dc.b	nD5, $02, nRst, $01
00093080 E106                       	smpsAlterNote       $06
00093082 C90D                       	dc.b	nC6, $0D
00093084 E103                       	smpsAlterNote       $03
00093086 E701                       	dc.b	smpsNoAttack, $01
00093088 E1FF                       	smpsAlterNote       $FF
0009308A E701                       	dc.b	smpsNoAttack, $01
0009308C E103                       	smpsAlterNote       $03
0009308E E701                       	dc.b	smpsNoAttack, $01
00093090 E109                       	smpsAlterNote       $09
00093092 E701                       	dc.b	smpsNoAttack, $01
00093094 E10A                       	smpsAlterNote       $0A
00093096 E701                       	dc.b	smpsNoAttack, $01
00093098 E106                       	smpsAlterNote       $06
0009309A E701                       	dc.b	smpsNoAttack, $01
0009309C E100                       	smpsAlterNote       $00
0009309E E701                       	dc.b	smpsNoAttack, $01
000930A0 E10C                       	smpsAlterNote       $0C
000930A2 C703 8001                  	dc.b	nBb5, $03, nRst, $01
000930A6 E10B                       	smpsAlterNote       $0B
000930A8 C603                       	dc.b	nA5, $03
000930AA E109                       	smpsAlterNote       $09
000930AC C403 8001                  	dc.b	nG5, $03, nRst, $01
000930B0 E10B                       	smpsAlterNote       $0B
000930B2 C60D                       	dc.b	nA5, $0D
000930B4 E105                       	smpsAlterNote       $05
000930B6 E701                       	dc.b	smpsNoAttack, $01
000930B8 E104                       	smpsAlterNote       $04
000930BA E701                       	dc.b	smpsNoAttack, $01
000930BC E108                       	smpsAlterNote       $08
000930BE E701                       	dc.b	smpsNoAttack, $01
000930C0 E10E                       	smpsAlterNote       $0E
000930C2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000930C6 E10B                       	smpsAlterNote       $0B
000930C8 E701                       	dc.b	smpsNoAttack, $01
000930CA E105                       	smpsAlterNote       $05
000930CC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000930D0 E10B                       	smpsAlterNote       $0B
000930D2 E701                       	dc.b	smpsNoAttack, $01
000930D4 E10E                       	smpsAlterNote       $0E
000930D6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000930DA E108                       	smpsAlterNote       $08
000930DC E701                       	dc.b	smpsNoAttack, $01
000930DE E104                       	smpsAlterNote       $04
000930E0 E701                       	dc.b	smpsNoAttack, $01
000930E2 E105                       	smpsAlterNote       $05
000930E4 E701                       	dc.b	smpsNoAttack, $01
000930E6 E10B                       	smpsAlterNote       $0B
000930E8 E701                       	dc.b	smpsNoAttack, $01
000930EA E10F                       	smpsAlterNote       $0F
000930EC E701                       	dc.b	smpsNoAttack, $01
000930EE E10B                       	smpsAlterNote       $0B
000930F0 E701                       	dc.b	smpsNoAttack, $01
000930F2 E108                       	smpsAlterNote       $08
000930F4 E701                       	dc.b	smpsNoAttack, $01
000930F6 E104                       	smpsAlterNote       $04
000930F8 E701                       	dc.b	smpsNoAttack, $01
000930FA E108                       	smpsAlterNote       $08
000930FC E701                       	dc.b	smpsNoAttack, $01
000930FE E10E                       	smpsAlterNote       $0E
00093100 E701                       	dc.b	smpsNoAttack, $01
00093102 E10F                       	smpsAlterNote       $0F
00093104 E701                       	dc.b	smpsNoAttack, $01
00093106 E10B                       	smpsAlterNote       $0B
00093108 E701                       	dc.b	smpsNoAttack, $01
0009310A E105                       	smpsAlterNote       $05
0009310C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093110 E108                       	smpsAlterNote       $08
00093112 E701                       	dc.b	smpsNoAttack, $01
00093114 E10E                       	smpsAlterNote       $0E
00093116 E701                       	dc.b	smpsNoAttack, $01
00093118 E10F                       	smpsAlterNote       $0F
0009311A 800F                       	dc.b	nRst, $0F
0009311C E107                       	smpsAlterNote       $07
0009311E BF02 8001                  	dc.b	nD5, $02, nRst, $01
00093122 E108                       	smpsAlterNote       $08
00093124 C103                       	dc.b	nE5, $03
00093126 E109                       	smpsAlterNote       $09
00093128 C203 8001 C403             	dc.b	nF5, $03, nRst, $01, nG5, $03
0009312E E10B                       	smpsAlterNote       $0B
00093130 C606 8001                  	dc.b	nA5, $06, nRst, $01
00093134 E107                       	smpsAlterNote       $07
00093136 BF03                       	dc.b	nD5, $03
00093138 E106                       	smpsAlterNote       $06
0009313A C90E                       	dc.b	nC6, $0E
0009313C E107                       	smpsAlterNote       $07
0009313E CB03 8001                  	dc.b	nD6, $03, nRst, $01
00093142 E10C                       	smpsAlterNote       $0C
00093144 C704                       	dc.b	nBb5, $04
00093146 E10B                       	smpsAlterNote       $0B
00093148 C604 8001                  	dc.b	nA5, $04, nRst, $01
0009314C E109                       	smpsAlterNote       $09
0009314E C404                       	dc.b	nG5, $04
00093150 E10B                       	smpsAlterNote       $0B
00093152 C60D                       	dc.b	nA5, $0D
00093154 E108                       	smpsAlterNote       $08
00093156 E701                       	dc.b	smpsNoAttack, $01
00093158 E105                       	smpsAlterNote       $05
0009315A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009315E E10B                       	smpsAlterNote       $0B
00093160 E701                       	dc.b	smpsNoAttack, $01
00093162 E10F                       	smpsAlterNote       $0F
00093164 E701                       	dc.b	smpsNoAttack, $01
00093166 E10E                       	smpsAlterNote       $0E
00093168 E701                       	dc.b	smpsNoAttack, $01
0009316A E108                       	smpsAlterNote       $08
0009316C E701                       	dc.b	smpsNoAttack, $01
0009316E E104                       	smpsAlterNote       $04
00093170 E701                       	dc.b	smpsNoAttack, $01
00093172 E108                       	smpsAlterNote       $08
00093174 E701                       	dc.b	smpsNoAttack, $01
00093176 E10B                       	smpsAlterNote       $0B
00093178 E701                       	dc.b	smpsNoAttack, $01
0009317A E10F                       	smpsAlterNote       $0F
0009317C E701                       	dc.b	smpsNoAttack, $01
0009317E E10B                       	smpsAlterNote       $0B
00093180 E701                       	dc.b	smpsNoAttack, $01
00093182 E105                       	smpsAlterNote       $05
00093184 E701                       	dc.b	smpsNoAttack, $01
00093186 E104                       	smpsAlterNote       $04
00093188 E701                       	dc.b	smpsNoAttack, $01
0009318A E108                       	smpsAlterNote       $08
0009318C E701                       	dc.b	smpsNoAttack, $01
0009318E E10E                       	smpsAlterNote       $0E
00093190 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093194 E10B                       	smpsAlterNote       $0B
00093196 E701                       	dc.b	smpsNoAttack, $01
00093198 E105                       	smpsAlterNote       $05
0009319A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009319E E10B                       	smpsAlterNote       $0B
000931A0 E701                       	dc.b	smpsNoAttack, $01
000931A2 E10E                       	smpsAlterNote       $0E
000931A4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000931A8 E108                       	smpsAlterNote       $08
000931AA E701                       	dc.b	smpsNoAttack, $01
000931AC E105                       	smpsAlterNote       $05
000931AE 8001                       	dc.b	nRst, $01
000931B0 E109                       	smpsAlterNote       $09
000931B2 C402                       	dc.b	nG5, $02
000931B4 E10B                       	smpsAlterNote       $0B
000931B6 E7C5 01C6 0EC6 0480 01     	dc.b	smpsNoAttack, nAb5, $01, nA5, $0E, nA5, $04, nRst, $01
000931BF E109                       	smpsAlterNote       $09
000931C1 C404                       	dc.b	nG5, $04
000931C3 E10B                       	smpsAlterNote       $0B
000931C5 C604 8001                  	dc.b	nA5, $04, nRst, $01
000931C9 E107                       	smpsAlterNote       $07
000931CB BF0D                       	dc.b	nD5, $0D
000931CD E101                       	smpsAlterNote       $01
000931CF E701                       	dc.b	smpsNoAttack, $01
000931D1 E100                       	smpsAlterNote       $00
000931D3 E701                       	dc.b	smpsNoAttack, $01
000931D5 E104                       	smpsAlterNote       $04
000931D7 E701                       	dc.b	smpsNoAttack, $01
000931D9 E10A                       	smpsAlterNote       $0A
000931DB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000931DF E107                       	smpsAlterNote       $07
000931E1 E701                       	dc.b	smpsNoAttack, $01
000931E3 E101                       	smpsAlterNote       $01
000931E5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000931E9 E107                       	smpsAlterNote       $07
000931EB E701                       	dc.b	smpsNoAttack, $01
000931ED E10A                       	smpsAlterNote       $0A
000931EF E701                       	dc.b	smpsNoAttack, $01
000931F1 E10B                       	smpsAlterNote       $0B
000931F3 8001                       	dc.b	nRst, $01
000931F5 E108                       	smpsAlterNote       $08
000931F7 C101                       	dc.b	nE5, $01
000931F9 E109                       	smpsAlterNote       $09
000931FB E7C2 01C4 01               	dc.b	smpsNoAttack, nF5, $01, nG5, $01
00093200 E10B                       	smpsAlterNote       $0B
00093202 C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
0009320A E108                       	smpsAlterNote       $08
0009320C CD06 8001                  	dc.b	nE6, $06, nRst, $01
00093210 E109                       	smpsAlterNote       $09
00093212 CE06 8001                  	dc.b	nF6, $06, nRst, $01
00093216 E108                       	smpsAlterNote       $08
00093218 CD02 8001                  	dc.b	nE6, $02, nRst, $01
0009321C E106                       	smpsAlterNote       $06
0009321E C903                       	dc.b	nC6, $03
00093220 E109                       	smpsAlterNote       $09
00093222 C403 8001                  	dc.b	nG5, $03, nRst, $01
00093226 E10C                       	smpsAlterNote       $0C
00093228 C70D                       	dc.b	nBb5, $0D
0009322A E109                       	smpsAlterNote       $09
0009322C E701                       	dc.b	smpsNoAttack, $01
0009322E E105                       	smpsAlterNote       $05
00093230 E701                       	dc.b	smpsNoAttack, $01
00093232 E109                       	smpsAlterNote       $09
00093234 E701                       	dc.b	smpsNoAttack, $01
00093236 E10F                       	smpsAlterNote       $0F
00093238 E701                       	dc.b	smpsNoAttack, $01
0009323A E110                       	smpsAlterNote       $10
0009323C E701                       	dc.b	smpsNoAttack, $01
0009323E E10C                       	smpsAlterNote       $0C
00093240 E701                       	dc.b	smpsNoAttack, $01
00093242 E106                       	smpsAlterNote       $06
00093244 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093248 E109                       	smpsAlterNote       $09
0009324A E701                       	dc.b	smpsNoAttack, $01
0009324C E10F                       	smpsAlterNote       $0F
0009324E E701                       	dc.b	smpsNoAttack, $01
00093250 E110                       	smpsAlterNote       $10
00093252 8001                       	dc.b	nRst, $01
00093254 E10B                       	smpsAlterNote       $0B
00093256 C606 8001 C50D             	dc.b	nA5, $06, nRst, $01, nAb5, $0D
0009325C E105                       	smpsAlterNote       $05
0009325E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093262 E108                       	smpsAlterNote       $08
00093264 E701                       	dc.b	smpsNoAttack, $01
00093266 E10E                       	smpsAlterNote       $0E
00093268 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009326C E108                       	smpsAlterNote       $08
0009326E E701                       	dc.b	smpsNoAttack, $01
00093270 E105                       	smpsAlterNote       $05
00093272 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093276 E10B                       	smpsAlterNote       $0B
00093278 E701                       	dc.b	smpsNoAttack, $01
0009327A E10F                       	smpsAlterNote       $0F
0009327C E701                       	dc.b	smpsNoAttack, $01
0009327E E10E                       	smpsAlterNote       $0E
00093280 E701                       	dc.b	smpsNoAttack, $01
00093282 E108                       	smpsAlterNote       $08
00093284 E701                       	dc.b	smpsNoAttack, $01
00093286 E104                       	smpsAlterNote       $04
00093288 E701                       	dc.b	smpsNoAttack, $01
0009328A E108                       	smpsAlterNote       $08
0009328C E701                       	dc.b	smpsNoAttack, $01
0009328E E10B                       	smpsAlterNote       $0B
00093290 E701                       	dc.b	smpsNoAttack, $01
00093292 E10F                       	smpsAlterNote       $0F
00093294 E701                       	dc.b	smpsNoAttack, $01
00093296 E10B                       	smpsAlterNote       $0B
00093298 E701                       	dc.b	smpsNoAttack, $01
0009329A E105                       	smpsAlterNote       $05
0009329C E701                       	dc.b	smpsNoAttack, $01
0009329E E104                       	smpsAlterNote       $04
000932A0 E701                       	dc.b	smpsNoAttack, $01
000932A2 E108                       	smpsAlterNote       $08
000932A4 E701                       	dc.b	smpsNoAttack, $01
000932A6 E10E                       	smpsAlterNote       $0E
000932A8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000932AC E10B                       	smpsAlterNote       $0B
000932AE E701                       	dc.b	smpsNoAttack, $01
000932B0 E105                       	smpsAlterNote       $05
000932B2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000932B6 E10B                       	smpsAlterNote       $0B
000932B8 E701                       	dc.b	smpsNoAttack, $01
000932BA E10E                       	smpsAlterNote       $0E
000932BC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000932C0 E108                       	smpsAlterNote       $08
000932C2 E701                       	dc.b	smpsNoAttack, $01
000932C4 E104                       	smpsAlterNote       $04
000932C6 E701                       	dc.b	smpsNoAttack, $01
000932C8 E105                       	smpsAlterNote       $05
000932CA E701                       	dc.b	smpsNoAttack, $01
000932CC E10B                       	smpsAlterNote       $0B
000932CE E701                       	dc.b	smpsNoAttack, $01
000932D0 E10F                       	smpsAlterNote       $0F
000932D2 E701                       	dc.b	smpsNoAttack, $01
000932D4 E10B                       	smpsAlterNote       $0B
000932D6 E701                       	dc.b	smpsNoAttack, $01
000932D8 E108                       	smpsAlterNote       $08
000932DA E701                       	dc.b	smpsNoAttack, $01
000932DC E104                       	smpsAlterNote       $04
000932DE E701                       	dc.b	smpsNoAttack, $01
000932E0 E108                       	smpsAlterNote       $08
000932E2 E701                       	dc.b	smpsNoAttack, $01
000932E4 E10E                       	smpsAlterNote       $0E
000932E6 E701                       	dc.b	smpsNoAttack, $01
000932E8 E10F                       	smpsAlterNote       $0F
000932EA E701                       	dc.b	smpsNoAttack, $01
000932EC E10B                       	smpsAlterNote       $0B
000932EE E701                       	dc.b	smpsNoAttack, $01
000932F0 E105                       	smpsAlterNote       $05
000932F2 E701                       	dc.b	smpsNoAttack, $01
000932F4 E10B                       	smpsAlterNote       $0B
000932F6 C60E                       	dc.b	nA5, $0E
000932F8 E105                       	smpsAlterNote       $05
000932FA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000932FE E10B                       	smpsAlterNote       $0B
00093300 E701                       	dc.b	smpsNoAttack, $01
00093302 E10E                       	smpsAlterNote       $0E
00093304 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093308 E108                       	smpsAlterNote       $08
0009330A E701                       	dc.b	smpsNoAttack, $01
0009330C E104                       	smpsAlterNote       $04
0009330E E701                       	dc.b	smpsNoAttack, $01
00093310 E105                       	smpsAlterNote       $05
00093312 E701                       	dc.b	smpsNoAttack, $01
00093314 E10B                       	smpsAlterNote       $0B
00093316 E701                       	dc.b	smpsNoAttack, $01
00093318 E10F                       	smpsAlterNote       $0F
0009331A E701                       	dc.b	smpsNoAttack, $01
0009331C E10B                       	smpsAlterNote       $0B
0009331E E701                       	dc.b	smpsNoAttack, $01
00093320 E108                       	smpsAlterNote       $08
00093322 E701                       	dc.b	smpsNoAttack, $01
00093324 E104                       	smpsAlterNote       $04
00093326 E701                       	dc.b	smpsNoAttack, $01
00093328 E108                       	smpsAlterNote       $08
0009332A E701                       	dc.b	smpsNoAttack, $01
0009332C E10E                       	smpsAlterNote       $0E
0009332E E701                       	dc.b	smpsNoAttack, $01
00093330 E10F                       	smpsAlterNote       $0F
00093332 E701                       	dc.b	smpsNoAttack, $01
00093334 E10B                       	smpsAlterNote       $0B
00093336 E701                       	dc.b	smpsNoAttack, $01
00093338 E105                       	smpsAlterNote       $05
0009333A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009333E E108                       	smpsAlterNote       $08
00093340 E701                       	dc.b	smpsNoAttack, $01
00093342 E10E                       	smpsAlterNote       $0E
00093344 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093348 E108                       	smpsAlterNote       $08
0009334A E701                       	dc.b	smpsNoAttack, $01
0009334C E105                       	smpsAlterNote       $05
0009334E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093352 E10B                       	smpsAlterNote       $0B
00093354 E701                       	dc.b	smpsNoAttack, $01
00093356 E10F                       	smpsAlterNote       $0F
00093358 E701                       	dc.b	smpsNoAttack, $01
0009335A E10E                       	smpsAlterNote       $0E
0009335C E701                       	dc.b	smpsNoAttack, $01
0009335E E108                       	smpsAlterNote       $08
00093360 E701                       	dc.b	smpsNoAttack, $01
00093362 E104                       	smpsAlterNote       $04
00093364 E701                       	dc.b	smpsNoAttack, $01
00093366 E108                       	smpsAlterNote       $08
00093368 E701                       	dc.b	smpsNoAttack, $01
0009336A E10E                       	smpsAlterNote       $0E
0009336C E701                       	dc.b	smpsNoAttack, $01
0009336E E10F                       	smpsAlterNote       $0F
00093370 E701                       	dc.b	smpsNoAttack, $01
00093372 E10B                       	smpsAlterNote       $0B
00093374 E701                       	dc.b	smpsNoAttack, $01
00093376 E105                       	smpsAlterNote       $05
00093378 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009337C E108                       	smpsAlterNote       $08
0009337E E701                       	dc.b	smpsNoAttack, $01
00093380 E10E                       	smpsAlterNote       $0E
00093382 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093386 E108                       	smpsAlterNote       $08
00093388 E701                       	dc.b	smpsNoAttack, $01
0009338A E105                       	smpsAlterNote       $05
0009338C E701                       	dc.b	smpsNoAttack, $01
00093390 E10B                       	smpsAlterNote       $0B
00093392 E6FD                       	smpsAlterVol        $FD
00093394 C604 8001                  	dc.b	nA5, $04, nRst, $01
00093398 E109                       	smpsAlterNote       $09
0009339A C404                       	dc.b	nG5, $04
0009339C E10B                       	smpsAlterNote       $0B
0009339E C604 8001                  	dc.b	nA5, $04, nRst, $01
000933A2 E107                       	smpsAlterNote       $07
000933A4 BF0A BF03 8001             	dc.b	nD5, $0A, nD5, $03, nRst, $01
000933AA E10B                       	smpsAlterNote       $0B
000933AC C604                       	dc.b	nA5, $04
000933AE E109                       	smpsAlterNote       $09
000933B0 C404 8001                  	dc.b	nG5, $04, nRst, $01
000933B4 E10B                       	smpsAlterNote       $0B
000933B6 C604                       	dc.b	nA5, $04
000933B8 E108                       	smpsAlterNote       $08
000933BA C10A 8001 C102 8001        	dc.b	nE5, $0A, nRst, $01, nE5, $02, nRst, $01
000933C2 E106                       	smpsAlterNote       $06
000933C4 C904 8001                  	dc.b	nC6, $04, nRst, $01
000933C8 E10C                       	smpsAlterNote       $0C
000933CA C704                       	dc.b	nBb5, $04
000933CC E10B                       	smpsAlterNote       $0B
000933CE C604 8001                  	dc.b	nA5, $04, nRst, $01
000933D2 E109                       	smpsAlterNote       $09
000933D4 C403 C203 8001 C402 8001   	dc.b	nG5, $03, nF5, $03, nRst, $01, nG5, $02, nRst, $01
000933DE E10B                       	smpsAlterNote       $0B
000933E0 C60D                       	dc.b	nA5, $0D
000933E2 E108                       	smpsAlterNote       $08
000933E4 E701                       	dc.b	smpsNoAttack, $01
000933E6 E104                       	smpsAlterNote       $04
000933E8 E701                       	dc.b	smpsNoAttack, $01
000933EA E108                       	smpsAlterNote       $08
000933EC E701                       	dc.b	smpsNoAttack, $01
000933EE E10E                       	smpsAlterNote       $0E
000933F0 E701                       	dc.b	smpsNoAttack, $01
000933F2 E10F                       	smpsAlterNote       $0F
000933F4 E701                       	dc.b	smpsNoAttack, $01
000933F6 E10B                       	smpsAlterNote       $0B
000933F8 E701                       	dc.b	smpsNoAttack, $01
000933FA E105                       	smpsAlterNote       $05
000933FC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093400 E108                       	smpsAlterNote       $08
00093402 E701                       	dc.b	smpsNoAttack, $01
00093404 E10E                       	smpsAlterNote       $0E
00093406 E701                       	dc.b	smpsNoAttack, $01
00093408 E10F                       	smpsAlterNote       $0F
0009340A 8001                       	dc.b	nRst, $01
0009340C E109                       	smpsAlterNote       $09
0009340E C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
00093414 E108                       	smpsAlterNote       $08
00093416 C10D                       	dc.b	nE5, $0D
00093418 E102                       	smpsAlterNote       $02
0009341A E701                       	dc.b	smpsNoAttack, $01
0009341C E101                       	smpsAlterNote       $01
0009341E E701                       	dc.b	smpsNoAttack, $01
00093420 E105                       	smpsAlterNote       $05
00093422 E701                       	dc.b	smpsNoAttack, $01
00093424 E10B                       	smpsAlterNote       $0B
00093426 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009342A E108                       	smpsAlterNote       $08
0009342C E701                       	dc.b	smpsNoAttack, $01
0009342E E102                       	smpsAlterNote       $02
00093430 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093434 E108                       	smpsAlterNote       $08
00093436 E701                       	dc.b	smpsNoAttack, $01
00093438 E10B                       	smpsAlterNote       $0B
0009343A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009343E E105                       	smpsAlterNote       $05
00093440 E701                       	dc.b	smpsNoAttack, $01
00093442 E101                       	smpsAlterNote       $01
00093444 E701                       	dc.b	smpsNoAttack, $01
00093446 E102                       	smpsAlterNote       $02
00093448 E701                       	dc.b	smpsNoAttack, $01
0009344A E108                       	smpsAlterNote       $08
0009344C E701                       	dc.b	smpsNoAttack, $01
0009344E E10C                       	smpsAlterNote       $0C
00093450 E701                       	dc.b	smpsNoAttack, $01
00093452 E108                       	smpsAlterNote       $08
00093454 E701                       	dc.b	smpsNoAttack, $01
00093456 E105                       	smpsAlterNote       $05
00093458 E701                       	dc.b	smpsNoAttack, $01
0009345A E101                       	smpsAlterNote       $01
0009345C E701                       	dc.b	smpsNoAttack, $01
0009345E E105                       	smpsAlterNote       $05
00093460 E701                       	dc.b	smpsNoAttack, $01
00093462 E10B                       	smpsAlterNote       $0B
00093464 E701                       	dc.b	smpsNoAttack, $01
00093466 E10C                       	smpsAlterNote       $0C
00093468 E701                       	dc.b	smpsNoAttack, $01
0009346A E108                       	smpsAlterNote       $08
0009346C E701                       	dc.b	smpsNoAttack, $01
0009346E E102                       	smpsAlterNote       $02
00093470 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093474 E105                       	smpsAlterNote       $05
00093476 E701                       	dc.b	smpsNoAttack, $01
00093478 E10B                       	smpsAlterNote       $0B
0009347A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009347E E105                       	smpsAlterNote       $05
00093480 E701                       	dc.b	smpsNoAttack, $01
00093482 E102                       	smpsAlterNote       $02
00093484 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093488 E108                       	smpsAlterNote       $08
0009348A E701                       	dc.b	smpsNoAttack, $01
0009348C E10C                       	smpsAlterNote       $0C
0009348E E701                       	dc.b	smpsNoAttack, $01
00093490 E10B                       	smpsAlterNote       $0B
00093492 E701                       	dc.b	smpsNoAttack, $01
00093494 E105                       	smpsAlterNote       $05
00093496 E701                       	dc.b	smpsNoAttack, $01
00093498 E101                       	smpsAlterNote       $01
0009349A E701                       	dc.b	smpsNoAttack, $01
0009349C E105                       	smpsAlterNote       $05
0009349E E701                       	dc.b	smpsNoAttack, $01
000934A0 E108                       	smpsAlterNote       $08
000934A2 E701                       	dc.b	smpsNoAttack, $01
000934A4 E10C                       	smpsAlterNote       $0C
000934A6 E701                       	dc.b	smpsNoAttack, $01
000934A8 E108                       	smpsAlterNote       $08
000934AA E701                       	dc.b	smpsNoAttack, $01
000934AC E102                       	smpsAlterNote       $02
000934AE E701                       	dc.b	smpsNoAttack, $01
000934B0 E101                       	smpsAlterNote       $01
000934B2 E701                       	dc.b	smpsNoAttack, $01
000934B4 E105                       	smpsAlterNote       $05
000934B6 E701                       	dc.b	smpsNoAttack, $01
000934B8 E10B                       	smpsAlterNote       $0B
000934BA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000934BE E108                       	smpsAlterNote       $08
000934C0 E701                       	dc.b	smpsNoAttack, $01
000934C2 E102                       	smpsAlterNote       $02
000934C4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000934C8 E108                       	smpsAlterNote       $08
000934CA E701                       	dc.b	smpsNoAttack, $01
000934CC E10B                       	smpsAlterNote       $0B
000934CE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000934D2 E105                       	smpsAlterNote       $05
000934D4 E701                       	dc.b	smpsNoAttack, $01
000934D6 E101                       	smpsAlterNote       $01
000934D8 E701                       	dc.b	smpsNoAttack, $01
000934DA E102                       	smpsAlterNote       $02
000934DC E701                       	dc.b	smpsNoAttack, $01
000934DE E108                       	smpsAlterNote       $08
000934E0 E701                       	dc.b	smpsNoAttack, $01
000934E2 E10C                       	smpsAlterNote       $0C
000934E4 E701                       	dc.b	smpsNoAttack, $01
000934E6 E108                       	smpsAlterNote       $08
000934E8 E701                       	dc.b	smpsNoAttack, $01
000934EA E105                       	smpsAlterNote       $05
000934EC E701                       	dc.b	smpsNoAttack, $01
000934EE E101                       	smpsAlterNote       $01
000934F0 E701                       	dc.b	smpsNoAttack, $01
000934F2 E105                       	smpsAlterNote       $05
000934F4 E701                       	dc.b	smpsNoAttack, $01
000934F6 E10B                       	smpsAlterNote       $0B
000934F8 E701                       	dc.b	smpsNoAttack, $01
000934FA E10C                       	smpsAlterNote       $0C
000934FC E701                       	dc.b	smpsNoAttack, $01
000934FE E108                       	smpsAlterNote       $08
00093500 E701                       	dc.b	smpsNoAttack, $01
00093502 E102                       	smpsAlterNote       $02
00093504 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093508 E105                       	smpsAlterNote       $05
0009350A E701                       	dc.b	smpsNoAttack, $01
0009350C E10B                       	smpsAlterNote       $0B
0009350E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093512 E105                       	smpsAlterNote       $05
00093514 E701                       	dc.b	smpsNoAttack, $01
00093516 E101                       	smpsAlterNote       $01
00093518 E701                       	dc.b	smpsNoAttack, $01
0009351A E102                       	smpsAlterNote       $02
0009351C E701                       	dc.b	smpsNoAttack, $01
0009351E E108                       	smpsAlterNote       $08
00093520 E701                       	dc.b	smpsNoAttack, $01
00093522 E10C                       	smpsAlterNote       $0C
00093524 E701                       	dc.b	smpsNoAttack, $01
00093526 E108                       	smpsAlterNote       $08
00093528 E701                       	dc.b	smpsNoAttack, $01
0009352A E105                       	smpsAlterNote       $05
0009352C E701                       	dc.b	smpsNoAttack, $01
0009352E E101                       	smpsAlterNote       $01
00093530 E701                       	dc.b	smpsNoAttack, $01
00093532 E105                       	smpsAlterNote       $05
00093534 E701                       	dc.b	smpsNoAttack, $01
00093536 E10B                       	smpsAlterNote       $0B
00093538 E701                       	dc.b	smpsNoAttack, $01
0009353A E10C                       	smpsAlterNote       $0C
0009353C E701                       	dc.b	smpsNoAttack, $01
0009353E E108                       	smpsAlterNote       $08
00093540 E701                       	dc.b	smpsNoAttack, $01
00093542 E102                       	smpsAlterNote       $02
00093544 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093548 E105                       	smpsAlterNote       $05
0009354A E701                       	dc.b	smpsNoAttack, $01
0009354C E10B                       	smpsAlterNote       $0B
0009354E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093552 E105                       	smpsAlterNote       $05
00093554 E701                       	dc.b	smpsNoAttack, $01
00093556 E102                       	smpsAlterNote       $02
00093558 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009355C E108                       	smpsAlterNote       $08
0009355E E701                       	dc.b	smpsNoAttack, $01
00093560 E10C                       	smpsAlterNote       $0C
00093562 E701                       	dc.b	smpsNoAttack, $01
00093564 E10B                       	smpsAlterNote       $0B
00093566 E701                       	dc.b	smpsNoAttack, $01
00093568 E105                       	smpsAlterNote       $05
0009356A E701                       	dc.b	smpsNoAttack, $01
0009356C E101                       	smpsAlterNote       $01
0009356E E701                       	dc.b	smpsNoAttack, $01
00093570 E105                       	smpsAlterNote       $05
00093572 E701                       	dc.b	smpsNoAttack, $01
00093574 E108                       	smpsAlterNote       $08
00093576 E701                       	dc.b	smpsNoAttack, $01
00093578 E10C                       	smpsAlterNote       $0C
0009357A E701                       	dc.b	smpsNoAttack, $01
0009357E E10B                       	smpsAlterNote       $0B
00093580 C604 8001                  	dc.b	nA5, $04, nRst, $01
00093584 E109                       	smpsAlterNote       $09
00093586 C404                       	dc.b	nG5, $04
00093588 E10B                       	smpsAlterNote       $0B
0009358A C604 8001                  	dc.b	nA5, $04, nRst, $01
0009358E E107                       	smpsAlterNote       $07
00093590 BF0A BF03 8001             	dc.b	nD5, $0A, nD5, $03, nRst, $01
00093596 E10B                       	smpsAlterNote       $0B
00093598 C604                       	dc.b	nA5, $04
0009359A E109                       	smpsAlterNote       $09
0009359C C404 8001                  	dc.b	nG5, $04, nRst, $01
000935A0 E10B                       	smpsAlterNote       $0B
000935A2 C604                       	dc.b	nA5, $04
000935A4 E108                       	smpsAlterNote       $08
000935A6 C10A 8001 C103             	dc.b	nE5, $0A, nRst, $01, nE5, $03
000935AC E106                       	smpsAlterNote       $06
000935AE C904 8001                  	dc.b	nC6, $04, nRst, $01
000935B2 E10C                       	smpsAlterNote       $0C
000935B4 C704                       	dc.b	nBb5, $04
000935B6 E10B                       	smpsAlterNote       $0B
000935B8 C604 8001                  	dc.b	nA5, $04, nRst, $01
000935BC E109                       	smpsAlterNote       $09
000935BE C403 C203 8001 C402 8001   	dc.b	nG5, $03, nF5, $03, nRst, $01, nG5, $02, nRst, $01
000935C8 E10B                       	smpsAlterNote       $0B
000935CA C60D                       	dc.b	nA5, $0D
000935CC E108                       	smpsAlterNote       $08
000935CE E701                       	dc.b	smpsNoAttack, $01
000935D0 E104                       	smpsAlterNote       $04
000935D2 E701                       	dc.b	smpsNoAttack, $01
000935D4 E108                       	smpsAlterNote       $08
000935D6 E701                       	dc.b	smpsNoAttack, $01
000935D8 E10B                       	smpsAlterNote       $0B
000935DA E701                       	dc.b	smpsNoAttack, $01
000935DC E10F                       	smpsAlterNote       $0F
000935DE E701                       	dc.b	smpsNoAttack, $01
000935E0 E10B                       	smpsAlterNote       $0B
000935E2 E701                       	dc.b	smpsNoAttack, $01
000935E4 E105                       	smpsAlterNote       $05
000935E6 E701                       	dc.b	smpsNoAttack, $01
000935E8 E104                       	smpsAlterNote       $04
000935EA E701                       	dc.b	smpsNoAttack, $01
000935EC E108                       	smpsAlterNote       $08
000935EE E701                       	dc.b	smpsNoAttack, $01
000935F0 E10E                       	smpsAlterNote       $0E
000935F2 E701                       	dc.b	smpsNoAttack, $01
000935F4 E10F                       	smpsAlterNote       $0F
000935F6 8001                       	dc.b	nRst, $01
000935F8 E109                       	smpsAlterNote       $09
000935FA C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
00093600 E108                       	smpsAlterNote       $08
00093602 C10D                       	dc.b	nE5, $0D
00093604 E105                       	smpsAlterNote       $05
00093606 E701                       	dc.b	smpsNoAttack, $01
00093608 E101                       	smpsAlterNote       $01
0009360A E701                       	dc.b	smpsNoAttack, $01
0009360C E105                       	smpsAlterNote       $05
0009360E E701                       	dc.b	smpsNoAttack, $01
00093610 E10B                       	smpsAlterNote       $0B
00093612 E701                       	dc.b	smpsNoAttack, $01
00093614 E10C                       	smpsAlterNote       $0C
00093616 E701                       	dc.b	smpsNoAttack, $01
00093618 E108                       	smpsAlterNote       $08
0009361A E701                       	dc.b	smpsNoAttack, $01
0009361C E102                       	smpsAlterNote       $02
0009361E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093622 E105                       	smpsAlterNote       $05
00093624 E701                       	dc.b	smpsNoAttack, $01
00093626 E10B                       	smpsAlterNote       $0B
00093628 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009362C E105                       	smpsAlterNote       $05
0009362E E701                       	dc.b	smpsNoAttack, $01
00093630 E102                       	smpsAlterNote       $02
00093632 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093636 E108                       	smpsAlterNote       $08
00093638 E701                       	dc.b	smpsNoAttack, $01
0009363A E10C                       	smpsAlterNote       $0C
0009363C E701                       	dc.b	smpsNoAttack, $01
0009363E E10B                       	smpsAlterNote       $0B
00093640 E701                       	dc.b	smpsNoAttack, $01
00093642 E105                       	smpsAlterNote       $05
00093644 E701                       	dc.b	smpsNoAttack, $01
00093646 E101                       	smpsAlterNote       $01
00093648 E701                       	dc.b	smpsNoAttack, $01
0009364A E105                       	smpsAlterNote       $05
0009364C E701                       	dc.b	smpsNoAttack, $01
0009364E E108                       	smpsAlterNote       $08
00093650 E701                       	dc.b	smpsNoAttack, $01
00093652 E10C                       	smpsAlterNote       $0C
00093654 E701                       	dc.b	smpsNoAttack, $01
00093656 E108                       	smpsAlterNote       $08
00093658 E701                       	dc.b	smpsNoAttack, $01
0009365A E102                       	smpsAlterNote       $02
0009365C E701                       	dc.b	smpsNoAttack, $01
0009365E E101                       	smpsAlterNote       $01
00093660 E701                       	dc.b	smpsNoAttack, $01
00093662 E105                       	smpsAlterNote       $05
00093664 E701                       	dc.b	smpsNoAttack, $01
00093666 E10B                       	smpsAlterNote       $0B
00093668 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009366C E108                       	smpsAlterNote       $08
0009366E E701                       	dc.b	smpsNoAttack, $01
00093670 E102                       	smpsAlterNote       $02
00093672 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093676 E108                       	smpsAlterNote       $08
00093678 E701                       	dc.b	smpsNoAttack, $01
0009367A E10B                       	smpsAlterNote       $0B
0009367C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093680 E105                       	smpsAlterNote       $05
00093682 E701                       	dc.b	smpsNoAttack, $01
00093684 E101                       	smpsAlterNote       $01
00093686 E701                       	dc.b	smpsNoAttack, $01
00093688 E102                       	smpsAlterNote       $02
0009368A E701                       	dc.b	smpsNoAttack, $01
0009368C E108                       	smpsAlterNote       $08
0009368E E701                       	dc.b	smpsNoAttack, $01
00093690 E10C                       	smpsAlterNote       $0C
00093692 E701                       	dc.b	smpsNoAttack, $01
00093694 E108                       	smpsAlterNote       $08
00093696 E701                       	dc.b	smpsNoAttack, $01
00093698 E105                       	smpsAlterNote       $05
0009369A E701                       	dc.b	smpsNoAttack, $01
0009369C E101                       	smpsAlterNote       $01
0009369E E701                       	dc.b	smpsNoAttack, $01
000936A0 E105                       	smpsAlterNote       $05
000936A2 E701                       	dc.b	smpsNoAttack, $01
000936A4 E10B                       	smpsAlterNote       $0B
000936A6 E701                       	dc.b	smpsNoAttack, $01
000936A8 E10C                       	smpsAlterNote       $0C
000936AA E701                       	dc.b	smpsNoAttack, $01
000936AC E108                       	smpsAlterNote       $08
000936AE E701                       	dc.b	smpsNoAttack, $01
000936B0 E102                       	smpsAlterNote       $02
000936B2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000936B6 E108                       	smpsAlterNote       $08
000936B8 E701                       	dc.b	smpsNoAttack, $01
000936BA E10B                       	smpsAlterNote       $0B
000936BC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000936C0 E105                       	smpsAlterNote       $05
000936C2 E701                       	dc.b	smpsNoAttack, $01
000936C4 E101                       	smpsAlterNote       $01
000936C6 E701                       	dc.b	smpsNoAttack, $01
000936C8 E102                       	smpsAlterNote       $02
000936CA E701                       	dc.b	smpsNoAttack, $01
000936CC E108                       	smpsAlterNote       $08
000936CE E701                       	dc.b	smpsNoAttack, $01
000936D0 E10C                       	smpsAlterNote       $0C
000936D2 E701                       	dc.b	smpsNoAttack, $01
000936D4 E108                       	smpsAlterNote       $08
000936D6 E701                       	dc.b	smpsNoAttack, $01
000936D8 E105                       	smpsAlterNote       $05
000936DA E701                       	dc.b	smpsNoAttack, $01
000936DC E101                       	smpsAlterNote       $01
000936DE E701                       	dc.b	smpsNoAttack, $01
000936E0 E105                       	smpsAlterNote       $05
000936E2 E701                       	dc.b	smpsNoAttack, $01
000936E4 E10B                       	smpsAlterNote       $0B
000936E6 E701                       	dc.b	smpsNoAttack, $01
000936E8 E10C                       	smpsAlterNote       $0C
000936EA E701                       	dc.b	smpsNoAttack, $01
000936EC E108                       	smpsAlterNote       $08
000936EE E701                       	dc.b	smpsNoAttack, $01
000936F0 E102                       	smpsAlterNote       $02
000936F2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000936F6 E105                       	smpsAlterNote       $05
000936F8 E701                       	dc.b	smpsNoAttack, $01
000936FA E10B                       	smpsAlterNote       $0B
000936FC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093700 E105                       	smpsAlterNote       $05
00093702 E701                       	dc.b	smpsNoAttack, $01
00093704 E102                       	smpsAlterNote       $02
00093706 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009370A E108                       	smpsAlterNote       $08
0009370C E701                       	dc.b	smpsNoAttack, $01
0009370E E10C                       	smpsAlterNote       $0C
00093710 E701                       	dc.b	smpsNoAttack, $01
00093712 E10B                       	smpsAlterNote       $0B
00093714 E701                       	dc.b	smpsNoAttack, $01
00093716 E105                       	smpsAlterNote       $05
00093718 E701                       	dc.b	smpsNoAttack, $01
0009371A E101                       	smpsAlterNote       $01
0009371C E701                       	dc.b	smpsNoAttack, $01
0009371E E105                       	smpsAlterNote       $05
00093720 E701                       	dc.b	smpsNoAttack, $01
00093722 E108                       	smpsAlterNote       $08
00093724 E701                       	dc.b	smpsNoAttack, $01
00093726 E10C                       	smpsAlterNote       $0C
00093728 E701                       	dc.b	smpsNoAttack, $01
0009372A E108                       	smpsAlterNote       $08
0009372C E701                       	dc.b	smpsNoAttack, $01
0009372E E102                       	smpsAlterNote       $02
00093730 E701                       	dc.b	smpsNoAttack, $01
00093732 E101                       	smpsAlterNote       $01
00093734 E701                       	dc.b	smpsNoAttack, $01
00093736 E105                       	smpsAlterNote       $05
00093738 E701                       	dc.b	smpsNoAttack, $01
0009373A E10B                       	smpsAlterNote       $0B
0009373C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093740 E108                       	smpsAlterNote       $08
00093742 E701                       	dc.b	smpsNoAttack, $01
00093744 E102                       	smpsAlterNote       $02
00093746 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009374A E108                       	smpsAlterNote       $08
0009374C E701                       	dc.b	smpsNoAttack, $01
0009374E E10B                       	smpsAlterNote       $0B
00093750 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093754 E105                       	smpsAlterNote       $05
00093756 E701                       	dc.b	smpsNoAttack, $01
00093758 E102                       	smpsAlterNote       $02
0009375A 8001                       	dc.b	nRst, $01
0009375C E107                       	smpsAlterNote       $07
0009375E BF01 8001                  	dc.b	nD5, $01, nRst, $01
00093762 E108                       	smpsAlterNote       $08
00093764 C001 C10E                  	dc.b	nEb5, $01, nE5, $0E
00093768 E102                       	smpsAlterNote       $02
0009376A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009376E E108                       	smpsAlterNote       $08
00093770 E701                       	dc.b	smpsNoAttack, $01
00093772 E10B                       	smpsAlterNote       $0B
00093774 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093778 E105                       	smpsAlterNote       $05
0009377A E701                       	dc.b	smpsNoAttack, $01
0009377C E101                       	smpsAlterNote       $01
0009377E E701                       	dc.b	smpsNoAttack, $01
00093780 E102                       	smpsAlterNote       $02
00093782 E701                       	dc.b	smpsNoAttack, $01
00093784 E108                       	smpsAlterNote       $08
00093786 E701                       	dc.b	smpsNoAttack, $01
00093788 E10C                       	smpsAlterNote       $0C
0009378A E701                       	dc.b	smpsNoAttack, $01
0009378C E108                       	smpsAlterNote       $08
0009378E E701                       	dc.b	smpsNoAttack, $01
00093790 E105                       	smpsAlterNote       $05
00093792 E701                       	dc.b	smpsNoAttack, $01
00093794 E101                       	smpsAlterNote       $01
00093796 E701                       	dc.b	smpsNoAttack, $01
00093798 E105                       	smpsAlterNote       $05
0009379A E701                       	dc.b	smpsNoAttack, $01
0009379C E10B                       	smpsAlterNote       $0B
0009379E E701                       	dc.b	smpsNoAttack, $01
000937A0 E10C                       	smpsAlterNote       $0C
000937A2 E701                       	dc.b	smpsNoAttack, $01
000937A4 E108                       	smpsAlterNote       $08
000937A6 E701                       	dc.b	smpsNoAttack, $01
000937A8 E102                       	smpsAlterNote       $02
000937AA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000937AE E105                       	smpsAlterNote       $05
000937B0 E701                       	dc.b	smpsNoAttack, $01
000937B2 E10B                       	smpsAlterNote       $0B
000937B4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000937B8 E105                       	smpsAlterNote       $05
000937BA E701                       	dc.b	smpsNoAttack, $01
000937BC E102                       	smpsAlterNote       $02
000937BE E701                       	dc.b	smpsNoAttack, $01
000937C0 E109                       	smpsAlterNote       $09
000937C2 C40A C207                  	dc.b	nG5, $0A, nF5, $07
000937C6 E108                       	smpsAlterNote       $08
000937C8 C10D                       	dc.b	nE5, $0D
000937CA E105                       	smpsAlterNote       $05
000937CC E701                       	dc.b	smpsNoAttack, $01
000937CE E101                       	smpsAlterNote       $01
000937D0 E701                       	dc.b	smpsNoAttack, $01
000937D2 E102                       	smpsAlterNote       $02
000937D4 E701                       	dc.b	smpsNoAttack, $01
000937D6 E108                       	smpsAlterNote       $08
000937D8 E701                       	dc.b	smpsNoAttack, $01
000937DA E10C                       	smpsAlterNote       $0C
000937DC E701                       	dc.b	smpsNoAttack, $01
000937DE E108                       	smpsAlterNote       $08
000937E0 E701                       	dc.b	smpsNoAttack, $01
000937E2 E105                       	smpsAlterNote       $05
000937E4 E701                       	dc.b	smpsNoAttack, $01
000937E6 E101                       	smpsAlterNote       $01
000937E8 E701                       	dc.b	smpsNoAttack, $01
000937EA E105                       	smpsAlterNote       $05
000937EC E701                       	dc.b	smpsNoAttack, $01
000937EE E10B                       	smpsAlterNote       $0B
000937F0 E701                       	dc.b	smpsNoAttack, $01
000937F2 E10C                       	smpsAlterNote       $0C
000937F4 E701                       	dc.b	smpsNoAttack, $01
000937F6 E108                       	smpsAlterNote       $08
000937F8 E701                       	dc.b	smpsNoAttack, $01
000937FA E102                       	smpsAlterNote       $02
000937FC E701 E701 800E             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $0E
00093804 E10B                       	smpsAlterNote       $0B
00093806 BA01 8001                  	dc.b	nA4, $01, nRst, $01
0009380A E10C                       	smpsAlterNote       $0C
0009380C BB01 8001                  	dc.b	nBb4, $01, nRst, $01
00093810 E10B                       	smpsAlterNote       $0B
00093812 BA03 BA06 8001             	dc.b	nA4, $03, nA4, $06, nRst, $01
00093818 E107                       	smpsAlterNote       $07
0009381A BF03                       	dc.b	nD5, $03
0009381C E108                       	smpsAlterNote       $08
0009381E C103 8001                  	dc.b	nE5, $03, nRst, $01
00093822 E109                       	smpsAlterNote       $09
00093824 C203 C403 8001             	dc.b	nF5, $03, nG5, $03, nRst, $01
0009382A E10B                       	smpsAlterNote       $0B
0009382C C606 8001                  	dc.b	nA5, $06, nRst, $01
00093830 E107                       	smpsAlterNote       $07
00093832 BF02 8001                  	dc.b	nD5, $02, nRst, $01
00093836 E106                       	smpsAlterNote       $06
00093838 C90D                       	dc.b	nC6, $0D
0009383A E103                       	smpsAlterNote       $03
0009383C E701                       	dc.b	smpsNoAttack, $01
0009383E E1FF                       	smpsAlterNote       $FF
00093840 E701                       	dc.b	smpsNoAttack, $01
00093842 E103                       	smpsAlterNote       $03
00093844 E701                       	dc.b	smpsNoAttack, $01
00093846 E109                       	smpsAlterNote       $09
00093848 E701                       	dc.b	smpsNoAttack, $01
0009384A E10A                       	smpsAlterNote       $0A
0009384C E701                       	dc.b	smpsNoAttack, $01
0009384E E106                       	smpsAlterNote       $06
00093850 E701                       	dc.b	smpsNoAttack, $01
00093852 E100                       	smpsAlterNote       $00
00093854 E701                       	dc.b	smpsNoAttack, $01
00093856 E10C                       	smpsAlterNote       $0C
00093858 C703 8001                  	dc.b	nBb5, $03, nRst, $01
0009385C E10B                       	smpsAlterNote       $0B
0009385E C603                       	dc.b	nA5, $03
00093860 E109                       	smpsAlterNote       $09
00093862 C403 8001                  	dc.b	nG5, $03, nRst, $01
00093866 E10B                       	smpsAlterNote       $0B
00093868 C60D                       	dc.b	nA5, $0D
0009386A E105                       	smpsAlterNote       $05
0009386C E701                       	dc.b	smpsNoAttack, $01
0009386E E104                       	smpsAlterNote       $04
00093870 E701                       	dc.b	smpsNoAttack, $01
00093872 E108                       	smpsAlterNote       $08
00093874 E701                       	dc.b	smpsNoAttack, $01
00093876 E10E                       	smpsAlterNote       $0E
00093878 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009387C E10B                       	smpsAlterNote       $0B
0009387E E701                       	dc.b	smpsNoAttack, $01
00093880 E105                       	smpsAlterNote       $05
00093882 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093886 E10B                       	smpsAlterNote       $0B
00093888 E701                       	dc.b	smpsNoAttack, $01
0009388A E10E                       	smpsAlterNote       $0E
0009388C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093890 E108                       	smpsAlterNote       $08
00093892 E701                       	dc.b	smpsNoAttack, $01
00093894 E104                       	smpsAlterNote       $04
00093896 E701                       	dc.b	smpsNoAttack, $01
00093898 E105                       	smpsAlterNote       $05
0009389A E701                       	dc.b	smpsNoAttack, $01
0009389C E10B                       	smpsAlterNote       $0B
0009389E E701                       	dc.b	smpsNoAttack, $01
000938A0 E10F                       	smpsAlterNote       $0F
000938A2 E701                       	dc.b	smpsNoAttack, $01
000938A4 E10B                       	smpsAlterNote       $0B
000938A6 E701                       	dc.b	smpsNoAttack, $01
000938A8 E108                       	smpsAlterNote       $08
000938AA E701                       	dc.b	smpsNoAttack, $01
000938AC E104                       	smpsAlterNote       $04
000938AE E701                       	dc.b	smpsNoAttack, $01
000938B0 E108                       	smpsAlterNote       $08
000938B2 E701                       	dc.b	smpsNoAttack, $01
000938B4 E10E                       	smpsAlterNote       $0E
000938B6 E701                       	dc.b	smpsNoAttack, $01
000938B8 E10F                       	smpsAlterNote       $0F
000938BA E701                       	dc.b	smpsNoAttack, $01
000938BC E10B                       	smpsAlterNote       $0B
000938BE E701                       	dc.b	smpsNoAttack, $01
000938C0 E105                       	smpsAlterNote       $05
000938C2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000938C6 E108                       	smpsAlterNote       $08
000938C8 E701                       	dc.b	smpsNoAttack, $01
000938CA E10E                       	smpsAlterNote       $0E
000938CC E701                       	dc.b	smpsNoAttack, $01
000938CE E10F                       	smpsAlterNote       $0F
000938D0 800F                       	dc.b	nRst, $0F
000938D2 E107                       	smpsAlterNote       $07
000938D4 BF02 8001                  	dc.b	nD5, $02, nRst, $01
000938D8 E108                       	smpsAlterNote       $08
000938DA C103                       	dc.b	nE5, $03
000938DC E109                       	smpsAlterNote       $09
000938DE C203 8001 C403             	dc.b	nF5, $03, nRst, $01, nG5, $03
000938E4 E10B                       	smpsAlterNote       $0B
000938E6 C607                       	dc.b	nA5, $07
000938E8 E107                       	smpsAlterNote       $07
000938EA BF03 8001                  	dc.b	nD5, $03, nRst, $01
000938EE E106                       	smpsAlterNote       $06
000938F0 C90D                       	dc.b	nC6, $0D
000938F2 E107                       	smpsAlterNote       $07
000938F4 CB03 8001                  	dc.b	nD6, $03, nRst, $01
000938F8 E10C                       	smpsAlterNote       $0C
000938FA C704                       	dc.b	nBb5, $04
000938FC E10B                       	smpsAlterNote       $0B
000938FE C604 8001                  	dc.b	nA5, $04, nRst, $01
00093902 E109                       	smpsAlterNote       $09
00093904 C404                       	dc.b	nG5, $04
00093906 E10B                       	smpsAlterNote       $0B
00093908 C60D                       	dc.b	nA5, $0D
0009390A E108                       	smpsAlterNote       $08
0009390C E701                       	dc.b	smpsNoAttack, $01
0009390E E105                       	smpsAlterNote       $05
00093910 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093914 E10B                       	smpsAlterNote       $0B
00093916 E701                       	dc.b	smpsNoAttack, $01
00093918 E10F                       	smpsAlterNote       $0F
0009391A E701                       	dc.b	smpsNoAttack, $01
0009391C E10E                       	smpsAlterNote       $0E
0009391E E701                       	dc.b	smpsNoAttack, $01
00093920 E108                       	smpsAlterNote       $08
00093922 E701                       	dc.b	smpsNoAttack, $01
00093924 E104                       	smpsAlterNote       $04
00093926 E701                       	dc.b	smpsNoAttack, $01
00093928 E108                       	smpsAlterNote       $08
0009392A E701                       	dc.b	smpsNoAttack, $01
0009392C E10B                       	smpsAlterNote       $0B
0009392E E701                       	dc.b	smpsNoAttack, $01
00093930 E10F                       	smpsAlterNote       $0F
00093932 E701                       	dc.b	smpsNoAttack, $01
00093934 E10B                       	smpsAlterNote       $0B
00093936 E701                       	dc.b	smpsNoAttack, $01
00093938 E105                       	smpsAlterNote       $05
0009393A E701                       	dc.b	smpsNoAttack, $01
0009393C E104                       	smpsAlterNote       $04
0009393E E701                       	dc.b	smpsNoAttack, $01
00093940 E108                       	smpsAlterNote       $08
00093942 E701                       	dc.b	smpsNoAttack, $01
00093944 E10E                       	smpsAlterNote       $0E
00093946 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009394A E10B                       	smpsAlterNote       $0B
0009394C E701                       	dc.b	smpsNoAttack, $01
0009394E E105                       	smpsAlterNote       $05
00093950 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093954 E10B                       	smpsAlterNote       $0B
00093956 E701                       	dc.b	smpsNoAttack, $01
00093958 E10E                       	smpsAlterNote       $0E
0009395A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009395E E108                       	smpsAlterNote       $08
00093960 E701                       	dc.b	smpsNoAttack, $01
00093962 E105                       	smpsAlterNote       $05
00093964 8001                       	dc.b	nRst, $01
00093966 E109                       	smpsAlterNote       $09
00093968 C401 8001                  	dc.b	nG5, $01, nRst, $01
0009396C E10B                       	smpsAlterNote       $0B
0009396E C501 C60E C604 8001        	dc.b	nAb5, $01, nA5, $0E, nA5, $04, nRst, $01
00093976 E109                       	smpsAlterNote       $09
00093978 C404                       	dc.b	nG5, $04
0009397A E10B                       	smpsAlterNote       $0B
0009397C C604 8001                  	dc.b	nA5, $04, nRst, $01
00093980 E107                       	smpsAlterNote       $07
00093982 BF0D                       	dc.b	nD5, $0D
00093984 E101                       	smpsAlterNote       $01
00093986 E701                       	dc.b	smpsNoAttack, $01
00093988 E100                       	smpsAlterNote       $00
0009398A E701                       	dc.b	smpsNoAttack, $01
0009398C E104                       	smpsAlterNote       $04
0009398E E701                       	dc.b	smpsNoAttack, $01
00093990 E10A                       	smpsAlterNote       $0A
00093992 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093996 E107                       	smpsAlterNote       $07
00093998 E701                       	dc.b	smpsNoAttack, $01
0009399A E101                       	smpsAlterNote       $01
0009399C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000939A0 E107                       	smpsAlterNote       $07
000939A2 E701                       	dc.b	smpsNoAttack, $01
000939A4 E10A                       	smpsAlterNote       $0A
000939A6 E701                       	dc.b	smpsNoAttack, $01
000939A8 E10B                       	smpsAlterNote       $0B
000939AA 8001                       	dc.b	nRst, $01
000939AC E108                       	smpsAlterNote       $08
000939AE 8001                       	dc.b	nRst, $01
000939B0 E109                       	smpsAlterNote       $09
000939B2 8001 C401                  	dc.b	nRst, $01, nG5, $01
000939B6 E10B                       	smpsAlterNote       $0B
000939B8 C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
000939C0 E108                       	smpsAlterNote       $08
000939C2 CD06 8001                  	dc.b	nE6, $06, nRst, $01
000939C6 E109                       	smpsAlterNote       $09
000939C8 CE06 8001                  	dc.b	nF6, $06, nRst, $01
000939CC E108                       	smpsAlterNote       $08
000939CE CD02 8001                  	dc.b	nE6, $02, nRst, $01
000939D2 E106                       	smpsAlterNote       $06
000939D4 C903                       	dc.b	nC6, $03
000939D6 E109                       	smpsAlterNote       $09
000939D8 C403 8001                  	dc.b	nG5, $03, nRst, $01
000939DC E10C                       	smpsAlterNote       $0C
000939DE C70D                       	dc.b	nBb5, $0D
000939E0 E109                       	smpsAlterNote       $09
000939E2 E701                       	dc.b	smpsNoAttack, $01
000939E4 E105                       	smpsAlterNote       $05
000939E6 E701                       	dc.b	smpsNoAttack, $01
000939E8 E109                       	smpsAlterNote       $09
000939EA E701                       	dc.b	smpsNoAttack, $01
000939EC E10F                       	smpsAlterNote       $0F
000939EE E701                       	dc.b	smpsNoAttack, $01
000939F0 E110                       	smpsAlterNote       $10
000939F2 E701                       	dc.b	smpsNoAttack, $01
000939F4 E10C                       	smpsAlterNote       $0C
000939F6 E701                       	dc.b	smpsNoAttack, $01
000939F8 E106                       	smpsAlterNote       $06
000939FA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000939FE E109                       	smpsAlterNote       $09
00093A00 E701                       	dc.b	smpsNoAttack, $01
00093A02 E10F                       	smpsAlterNote       $0F
00093A04 E701                       	dc.b	smpsNoAttack, $01
00093A06 E110                       	smpsAlterNote       $10
00093A08 8001                       	dc.b	nRst, $01
00093A0A E10B                       	smpsAlterNote       $0B
00093A0C C606 8001                  	dc.b	nA5, $06, nRst, $01
00093A10 E109                       	smpsAlterNote       $09
00093A12 C40D                       	dc.b	nG5, $0D
00093A14 E103                       	smpsAlterNote       $03
00093A16 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093A1A E106                       	smpsAlterNote       $06
00093A1C E701                       	dc.b	smpsNoAttack, $01
00093A1E E10C                       	smpsAlterNote       $0C
00093A20 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093A24 E106                       	smpsAlterNote       $06
00093A26 E701                       	dc.b	smpsNoAttack, $01
00093A28 E103                       	smpsAlterNote       $03
00093A2A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093A2E E109                       	smpsAlterNote       $09
00093A30 E701                       	dc.b	smpsNoAttack, $01
00093A32 E10D                       	smpsAlterNote       $0D
00093A34 E701                       	dc.b	smpsNoAttack, $01
00093A36 E10C                       	smpsAlterNote       $0C
00093A38 E701                       	dc.b	smpsNoAttack, $01
00093A3A E106                       	smpsAlterNote       $06
00093A3C E701                       	dc.b	smpsNoAttack, $01
00093A3E E102                       	smpsAlterNote       $02
00093A40 E701                       	dc.b	smpsNoAttack, $01
00093A42 E103                       	smpsAlterNote       $03
00093A44 8001                       	dc.b	nRst, $01
00093A46 E10B                       	smpsAlterNote       $0B
00093A48 C60D                       	dc.b	nA5, $0D
00093A4A E108                       	smpsAlterNote       $08
00093A4C E701                       	dc.b	smpsNoAttack, $01
00093A4E E104                       	smpsAlterNote       $04
00093A50 E701                       	dc.b	smpsNoAttack, $01
00093A52 E108                       	smpsAlterNote       $08
00093A54 E701                       	dc.b	smpsNoAttack, $01
00093A56 E10B                       	smpsAlterNote       $0B
00093A58 E701                       	dc.b	smpsNoAttack, $01
00093A5A E10F                       	smpsAlterNote       $0F
00093A5C E701                       	dc.b	smpsNoAttack, $01
00093A5E E10B                       	smpsAlterNote       $0B
00093A60 E701                       	dc.b	smpsNoAttack, $01
00093A62 E105                       	smpsAlterNote       $05
00093A64 E701                       	dc.b	smpsNoAttack, $01
00093A66 E104                       	smpsAlterNote       $04
00093A68 E701                       	dc.b	smpsNoAttack, $01
00093A6A E108                       	smpsAlterNote       $08
00093A6C E701                       	dc.b	smpsNoAttack, $01
00093A6E E10E                       	smpsAlterNote       $0E
00093A70 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093A74 E10B                       	smpsAlterNote       $0B
00093A76 E701                       	dc.b	smpsNoAttack, $01
00093A78 E105                       	smpsAlterNote       $05
00093A7A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093A7E E10C                       	smpsAlterNote       $0C
00093A80 C70E                       	dc.b	nBb5, $0E
00093A82 E106                       	smpsAlterNote       $06
00093A84 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093A88 E10C                       	smpsAlterNote       $0C
00093A8A E701                       	dc.b	smpsNoAttack, $01
00093A8C E10F                       	smpsAlterNote       $0F
00093A8E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093A92 E109                       	smpsAlterNote       $09
00093A94 E701                       	dc.b	smpsNoAttack, $01
00093A96 E105                       	smpsAlterNote       $05
00093A98 E701                       	dc.b	smpsNoAttack, $01
00093A9A E106                       	smpsAlterNote       $06
00093A9C E701                       	dc.b	smpsNoAttack, $01
00093A9E E10C                       	smpsAlterNote       $0C
00093AA0 E701                       	dc.b	smpsNoAttack, $01
00093AA2 E110                       	smpsAlterNote       $10
00093AA4 E701                       	dc.b	smpsNoAttack, $01
00093AA6 E10C                       	smpsAlterNote       $0C
00093AA8 E701                       	dc.b	smpsNoAttack, $01
00093AAA E109                       	smpsAlterNote       $09
00093AAC E701                       	dc.b	smpsNoAttack, $01
00093AAE E105                       	smpsAlterNote       $05
00093AB0 E701                       	dc.b	smpsNoAttack, $01
00093AB2 E106                       	smpsAlterNote       $06
00093AB4 8001 C90C                  	dc.b	nRst, $01, nC6, $0C
00093AB8 E107                       	smpsAlterNote       $07
00093ABA CA01 E7CB 01               	dc.b	nCs6, $01, smpsNoAttack, nD6, $01
00093ABF E108                       	smpsAlterNote       $08
00093AC1 CD0D                       	dc.b	nE6, $0D
00093AC3 E107                       	smpsAlterNote       $07
00093AC5 CB0D                       	dc.b	nD6, $0D
00093AC7 E104                       	smpsAlterNote       $04
00093AC9 E701                       	dc.b	smpsNoAttack, $01
00093ACB E100                       	smpsAlterNote       $00
00093ACD E701                       	dc.b	smpsNoAttack, $01
00093ACF E101                       	smpsAlterNote       $01
00093AD1 E701                       	dc.b	smpsNoAttack, $01
00093AD3 E107                       	smpsAlterNote       $07
00093AD5 E701                       	dc.b	smpsNoAttack, $01
00093AD7 E10B                       	smpsAlterNote       $0B
00093AD9 E701                       	dc.b	smpsNoAttack, $01
00093ADB E107                       	smpsAlterNote       $07
00093ADD E701                       	dc.b	smpsNoAttack, $01
00093ADF E104                       	smpsAlterNote       $04
00093AE1 E701                       	dc.b	smpsNoAttack, $01
00093AE3 E100                       	smpsAlterNote       $00
00093AE5 E701                       	dc.b	smpsNoAttack, $01
00093AE7 E104                       	smpsAlterNote       $04
00093AE9 E701                       	dc.b	smpsNoAttack, $01
00093AEB E10A                       	smpsAlterNote       $0A
00093AED E701                       	dc.b	smpsNoAttack, $01
00093AEF E10B                       	smpsAlterNote       $0B
00093AF1 E701                       	dc.b	smpsNoAttack, $01
00093AF3 E108                       	smpsAlterNote       $08
00093AF5 CC0D                       	dc.b	nEb6, $0D
00093AF7 E105                       	smpsAlterNote       $05
00093AF9 E701                       	dc.b	smpsNoAttack, $01
00093AFB E101                       	smpsAlterNote       $01
00093AFD E701                       	dc.b	smpsNoAttack, $01
00093AFF E102                       	smpsAlterNote       $02
00093B01 E701                       	dc.b	smpsNoAttack, $01
00093B03 E108                       	smpsAlterNote       $08
00093B05 E701                       	dc.b	smpsNoAttack, $01
00093B07 E106                       	smpsAlterNote       $06
00093B09 C903 8004 C902 C902 8001+  	dc.b	nC6, $03, nRst, $04, nC6, $02, nC6, $02, nRst, $01, nC6, $01
00093B15 8001                       	dc.b	nRst, $01
00093B17 E107                       	smpsAlterNote       $07
00093B19 CB0D                       	dc.b	nD6, $0D
00093B1B E104                       	smpsAlterNote       $04
00093B1D E701                       	dc.b	smpsNoAttack, $01
00093B1F E100                       	smpsAlterNote       $00
00093B21 E701                       	dc.b	smpsNoAttack, $01
00093B23 E104                       	smpsAlterNote       $04
00093B25 E701                       	dc.b	smpsNoAttack, $01
00093B27 E107                       	smpsAlterNote       $07
00093B29 E701                       	dc.b	smpsNoAttack, $01
00093B2B E10B                       	smpsAlterNote       $0B
00093B2D E701                       	dc.b	smpsNoAttack, $01
00093B2F E107                       	smpsAlterNote       $07
00093B31 E701                       	dc.b	smpsNoAttack, $01
00093B33 E101                       	smpsAlterNote       $01
00093B35 E701                       	dc.b	smpsNoAttack, $01
00093B37 E100                       	smpsAlterNote       $00
00093B39 E701                       	dc.b	smpsNoAttack, $01
00093B3B E104                       	smpsAlterNote       $04
00093B3D E701                       	dc.b	smpsNoAttack, $01
00093B3F E10A                       	smpsAlterNote       $0A
00093B41 E701                       	dc.b	smpsNoAttack, $01
00093B43 E10B                       	smpsAlterNote       $0B
00093B45 8001                       	dc.b	nRst, $01
00093B47 E109                       	smpsAlterNote       $09
00093B49 CE0A                       	dc.b	nF6, $0A
00093B4B E108                       	smpsAlterNote       $08
00093B4D CC07                       	dc.b	nEb6, $07
00093B4F E106                       	smpsAlterNote       $06
00093B51 C903 8004 C902 C902 C902+  	dc.b	nC6, $03, nRst, $04, nC6, $02, nC6, $02, nC6, $02, nRst, $01
00093B5D E107                       	smpsAlterNote       $07
00093B5F CB0D                       	dc.b	nD6, $0D
00093B61 E101                       	smpsAlterNote       $01
00093B63 E701                       	dc.b	smpsNoAttack, $01
00093B65 E100                       	smpsAlterNote       $00
00093B67 E701                       	dc.b	smpsNoAttack, $01
00093B69 E104                       	smpsAlterNote       $04
00093B6B E701                       	dc.b	smpsNoAttack, $01
00093B6D E10A                       	smpsAlterNote       $0A
00093B6F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093B73 E107                       	smpsAlterNote       $07
00093B75 E701                       	dc.b	smpsNoAttack, $01
00093B77 E101                       	smpsAlterNote       $01
00093B79 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093B7D E107                       	smpsAlterNote       $07
00093B7F E701                       	dc.b	smpsNoAttack, $01
00093B81 E10A                       	smpsAlterNote       $0A
00093B83 E701                       	dc.b	smpsNoAttack, $01
00093B85 E10B                       	smpsAlterNote       $0B
00093B87 8001                       	dc.b	nRst, $01
00093B89 E108                       	smpsAlterNote       $08
00093B8B CC0D                       	dc.b	nEb6, $0D
00093B8D E102                       	smpsAlterNote       $02
00093B8F E701                       	dc.b	smpsNoAttack, $01
00093B91 E101                       	smpsAlterNote       $01
00093B93 E701                       	dc.b	smpsNoAttack, $01
00093B95 E105                       	smpsAlterNote       $05
00093B97 E701                       	dc.b	smpsNoAttack, $01
00093B99 E108                       	smpsAlterNote       $08
00093B9B 8001                       	dc.b	nRst, $01
00093B9D E106                       	smpsAlterNote       $06
00093B9F C903 8004 C901 8001 C902+  	dc.b	nC6, $03, nRst, $04, nC6, $01, nRst, $01, nC6, $02, nC6, $02
00093BAB 8001                       	dc.b	nRst, $01
00093BAD E107                       	smpsAlterNote       $07
00093BAF CB0D                       	dc.b	nD6, $0D
00093BB1 E101                       	smpsAlterNote       $01
00093BB3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093BB7 E104                       	smpsAlterNote       $04
00093BB9 E701                       	dc.b	smpsNoAttack, $01
00093BBB E10A                       	smpsAlterNote       $0A
00093BBD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093BC1 E104                       	smpsAlterNote       $04
00093BC3 E701                       	dc.b	smpsNoAttack, $01
00093BC5 E101                       	smpsAlterNote       $01
00093BC7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093BCB E107                       	smpsAlterNote       $07
00093BCD E701                       	dc.b	smpsNoAttack, $01
00093BCF E10B                       	smpsAlterNote       $0B
00093BD1 E701                       	dc.b	smpsNoAttack, $01
00093BD3 E10A                       	smpsAlterNote       $0A
00093BD5 E701                       	dc.b	smpsNoAttack, $01
00093BD7 E104                       	smpsAlterNote       $04
00093BD9 E701                       	dc.b	smpsNoAttack, $01
00093BDB E100                       	smpsAlterNote       $00
00093BDD E701                       	dc.b	smpsNoAttack, $01
00093BDF E101                       	smpsAlterNote       $01
00093BE1 801C                       	dc.b	nRst, $1C
00093BE5 E107                       	smpsAlterNote       $07
00093BE7 BF03 8001                  	dc.b	nD5, $03, nRst, $01
00093BEB E603                       	smpsAlterVol        $03
00093BED F6F1 AD                    	smpsJump            music84_Jump03
00093BF0                            
00093BF0                            ; FM3 Data
00093BF0                            music84_FM3:
00093BF0 E0C0                       	smpsPan             panCenter, $00
00093BF4 E109                       	smpsAlterNote       $09
00093BF6 C203 8007                  	dc.b	nF5, $03, nRst, $07
00093BFA E108                       	smpsAlterNote       $08
00093BFC C103 800B                  	dc.b	nE5, $03, nRst, $0B
00093C00 E10B                       	smpsAlterNote       $0B
00093C02 BA03 8006                  	dc.b	nA4, $03, nRst, $06
00093C08 E040                       	smpsPan             panRight, $00
00093C0A E110                       	smpsAlterNote       $10
00093C0C E6F9                       	smpsAlterVol        $F9
00093C0E C702 8001                  	dc.b	nBb5, $02, nRst, $01
00093C12 E10F                       	smpsAlterNote       $0F
00093C14 C603                       	dc.b	nA5, $03
00093C16 E10D                       	smpsAlterNote       $0D
00093C18 C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
00093C1E E10C                       	smpsAlterNote       $0C
00093C20 C103 8001                  	dc.b	nE5, $03, nRst, $01
00093C24 E10A                       	smpsAlterNote       $0A
00093C26 BD02 8001                  	dc.b	nC5, $02, nRst, $01
00093C2A E10F                       	smpsAlterNote       $0F
00093C2C BA01 8001                  	dc.b	nA4, $01, nRst, $01
00093C30 E0C0                       	smpsPan             panCenter, $00
00093C34 E109                       	smpsAlterNote       $09
00093C36 E609                       	smpsAlterVol        $09
00093C38 B603                       	dc.b	nF4, $03
00093C3A                            
00093C3A                            music84_Jump02:
00093C3A E70A                       	dc.b	smpsNoAttack, $0A
00093C3C E103                       	smpsAlterNote       $03
00093C3E E701                       	dc.b	smpsNoAttack, $01
00093C40 E102                       	smpsAlterNote       $02
00093C42 E701                       	dc.b	smpsNoAttack, $01
00093C44 E106                       	smpsAlterNote       $06
00093C46 E701                       	dc.b	smpsNoAttack, $01
00093C48 E10C                       	smpsAlterNote       $0C
00093C4A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093C4E E109                       	smpsAlterNote       $09
00093C50 E701                       	dc.b	smpsNoAttack, $01
00093C52 E103                       	smpsAlterNote       $03
00093C54 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093C58 E109                       	smpsAlterNote       $09
00093C5A E701                       	dc.b	smpsNoAttack, $01
00093C5C E10C                       	smpsAlterNote       $0C
00093C5E E701                       	dc.b	smpsNoAttack, $01
00093C60 E10D                       	smpsAlterNote       $0D
00093C62 8001                       	dc.b	nRst, $01
00093C64 E109                       	smpsAlterNote       $09
00093C66 B80D                       	dc.b	nG4, $0D
00093C68 E103                       	smpsAlterNote       $03
00093C6A E701                       	dc.b	smpsNoAttack, $01
00093C6C E102                       	smpsAlterNote       $02
00093C6E E701                       	dc.b	smpsNoAttack, $01
00093C70 E106                       	smpsAlterNote       $06
00093C72 E701                       	dc.b	smpsNoAttack, $01
00093C74 E10C                       	smpsAlterNote       $0C
00093C76 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093C7A E109                       	smpsAlterNote       $09
00093C7C E701                       	dc.b	smpsNoAttack, $01
00093C7E E103                       	smpsAlterNote       $03
00093C80 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093C84 E109                       	smpsAlterNote       $09
00093C86 E701                       	dc.b	smpsNoAttack, $01
00093C88 E10C                       	smpsAlterNote       $0C
00093C8A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093C8E E106                       	smpsAlterNote       $06
00093C90 E701                       	dc.b	smpsNoAttack, $01
00093C92 E102                       	smpsAlterNote       $02
00093C94 E701                       	dc.b	smpsNoAttack, $01
00093C96 E103                       	smpsAlterNote       $03
00093C98 E701                       	dc.b	smpsNoAttack, $01
00093C9A E109                       	smpsAlterNote       $09
00093C9C E701                       	dc.b	smpsNoAttack, $01
00093C9E E10D                       	smpsAlterNote       $0D
00093CA0 E701                       	dc.b	smpsNoAttack, $01
00093CA2 E109                       	smpsAlterNote       $09
00093CA4 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00093CA8 E10B                       	smpsAlterNote       $0B
00093CAA BA0D                       	dc.b	nA4, $0D
00093CAC E105                       	smpsAlterNote       $05
00093CAE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093CB2 E108                       	smpsAlterNote       $08
00093CB4 E701                       	dc.b	smpsNoAttack, $01
00093CB6 E10E                       	smpsAlterNote       $0E
00093CB8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093CBC E108                       	smpsAlterNote       $08
00093CBE E701                       	dc.b	smpsNoAttack, $01
00093CC0 E104                       	smpsAlterNote       $04
00093CC2 E701                       	dc.b	smpsNoAttack, $01
00093CC4 E105                       	smpsAlterNote       $05
00093CC6 E701                       	dc.b	smpsNoAttack, $01
00093CC8 E10B                       	smpsAlterNote       $0B
00093CCA E701                       	dc.b	smpsNoAttack, $01
00093CCC E10F                       	smpsAlterNote       $0F
00093CCE E701                       	dc.b	smpsNoAttack, $01
00093CD0 E10B                       	smpsAlterNote       $0B
00093CD2 E701                       	dc.b	smpsNoAttack, $01
00093CD4 E108                       	smpsAlterNote       $08
00093CD6 E701                       	dc.b	smpsNoAttack, $01
00093CD8 E104                       	smpsAlterNote       $04
00093CDA E701                       	dc.b	smpsNoAttack, $01
00093CDC E108                       	smpsAlterNote       $08
00093CDE E701                       	dc.b	smpsNoAttack, $01
00093CE0 E10E                       	smpsAlterNote       $0E
00093CE2 E701                       	dc.b	smpsNoAttack, $01
00093CE4 E10F                       	smpsAlterNote       $0F
00093CE6 E701                       	dc.b	smpsNoAttack, $01
00093CE8 E10B                       	smpsAlterNote       $0B
00093CEA E701                       	dc.b	smpsNoAttack, $01
00093CEC E105                       	smpsAlterNote       $05
00093CEE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093CF2 E108                       	smpsAlterNote       $08
00093CF4 E701                       	dc.b	smpsNoAttack, $01
00093CF6 E10E                       	smpsAlterNote       $0E
00093CF8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093CFC E108                       	smpsAlterNote       $08
00093CFE E701                       	dc.b	smpsNoAttack, $01
00093D00 E105                       	smpsAlterNote       $05
00093D02 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093D06 E10B                       	smpsAlterNote       $0B
00093D08 E701                       	dc.b	smpsNoAttack, $01
00093D0A E10F                       	smpsAlterNote       $0F
00093D0C E701                       	dc.b	smpsNoAttack, $01
00093D0E E10E                       	smpsAlterNote       $0E
00093D10 E701                       	dc.b	smpsNoAttack, $01
00093D12 E108                       	smpsAlterNote       $08
00093D14 E701                       	dc.b	smpsNoAttack, $01
00093D16 E104                       	smpsAlterNote       $04
00093D18 E701                       	dc.b	smpsNoAttack, $01
00093D1A E105                       	smpsAlterNote       $05
00093D1C 8001                       	dc.b	nRst, $01
00093D1E E108                       	smpsAlterNote       $08
00093D20 B50A                       	dc.b	nE4, $0A
00093D22 E109                       	smpsAlterNote       $09
00093D24 B60D                       	dc.b	nF4, $0D
00093D26 E106                       	smpsAlterNote       $06
00093D28 E701                       	dc.b	smpsNoAttack, $01
00093D2A E103                       	smpsAlterNote       $03
00093D2C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093D30 E109                       	smpsAlterNote       $09
00093D32 E701                       	dc.b	smpsNoAttack, $01
00093D34 E10D                       	smpsAlterNote       $0D
00093D36 E701                       	dc.b	smpsNoAttack, $01
00093D38 E10C                       	smpsAlterNote       $0C
00093D3A E701                       	dc.b	smpsNoAttack, $01
00093D3C E106                       	smpsAlterNote       $06
00093D3E E701                       	dc.b	smpsNoAttack, $01
00093D40 E102                       	smpsAlterNote       $02
00093D42 E701                       	dc.b	smpsNoAttack, $01
00093D44 E106                       	smpsAlterNote       $06
00093D46 E701                       	dc.b	smpsNoAttack, $01
00093D48 E109                       	smpsAlterNote       $09
00093D4A E701                       	dc.b	smpsNoAttack, $01
00093D4C E10D                       	smpsAlterNote       $0D
00093D4E E701                       	dc.b	smpsNoAttack, $01
00093D50 E109                       	smpsAlterNote       $09
00093D52 B80D                       	dc.b	nG4, $0D
00093D54 E106                       	smpsAlterNote       $06
00093D56 E701                       	dc.b	smpsNoAttack, $01
00093D58 E103                       	smpsAlterNote       $03
00093D5A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093D5E E109                       	smpsAlterNote       $09
00093D60 E701                       	dc.b	smpsNoAttack, $01
00093D62 E10D                       	smpsAlterNote       $0D
00093D64 E701                       	dc.b	smpsNoAttack, $01
00093D66 E10C                       	smpsAlterNote       $0C
00093D68 E701                       	dc.b	smpsNoAttack, $01
00093D6A E106                       	smpsAlterNote       $06
00093D6C E701                       	dc.b	smpsNoAttack, $01
00093D6E E102                       	smpsAlterNote       $02
00093D70 E701                       	dc.b	smpsNoAttack, $01
00093D72 E106                       	smpsAlterNote       $06
00093D74 E701                       	dc.b	smpsNoAttack, $01
00093D76 E109                       	smpsAlterNote       $09
00093D78 E701                       	dc.b	smpsNoAttack, $01
00093D7A E10D                       	smpsAlterNote       $0D
00093D7C E701                       	dc.b	smpsNoAttack, $01
00093D7E E109                       	smpsAlterNote       $09
00093D80 E701                       	dc.b	smpsNoAttack, $01
00093D82 E103                       	smpsAlterNote       $03
00093D84 E701                       	dc.b	smpsNoAttack, $01
00093D86 E102                       	smpsAlterNote       $02
00093D88 E701                       	dc.b	smpsNoAttack, $01
00093D8A E106                       	smpsAlterNote       $06
00093D8C E701                       	dc.b	smpsNoAttack, $01
00093D8E E10C                       	smpsAlterNote       $0C
00093D90 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093D94 E109                       	smpsAlterNote       $09
00093D96 E701                       	dc.b	smpsNoAttack, $01
00093D98 E10B                       	smpsAlterNote       $0B
00093D9A BA0D                       	dc.b	nA4, $0D
00093D9C E108                       	smpsAlterNote       $08
00093D9E E701                       	dc.b	smpsNoAttack, $01
00093DA0 E104                       	smpsAlterNote       $04
00093DA2 E701                       	dc.b	smpsNoAttack, $01
00093DA4 E108                       	smpsAlterNote       $08
00093DA6 E701                       	dc.b	smpsNoAttack, $01
00093DA8 E10B                       	smpsAlterNote       $0B
00093DAA E701                       	dc.b	smpsNoAttack, $01
00093DAC E10F                       	smpsAlterNote       $0F
00093DAE E701                       	dc.b	smpsNoAttack, $01
00093DB0 E10B                       	smpsAlterNote       $0B
00093DB2 E701                       	dc.b	smpsNoAttack, $01
00093DB4 E105                       	smpsAlterNote       $05
00093DB6 E701                       	dc.b	smpsNoAttack, $01
00093DB8 E104                       	smpsAlterNote       $04
00093DBA E701                       	dc.b	smpsNoAttack, $01
00093DBC E108                       	smpsAlterNote       $08
00093DBE E701                       	dc.b	smpsNoAttack, $01
00093DC0 E10E                       	smpsAlterNote       $0E
00093DC2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093DC6 E10B                       	smpsAlterNote       $0B
00093DC8 E701                       	dc.b	smpsNoAttack, $01
00093DCA E105                       	smpsAlterNote       $05
00093DCC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093DD0 E10B                       	smpsAlterNote       $0B
00093DD2 E701                       	dc.b	smpsNoAttack, $01
00093DD4 E10E                       	smpsAlterNote       $0E
00093DD6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093DDA E108                       	smpsAlterNote       $08
00093DDC E701                       	dc.b	smpsNoAttack, $01
00093DDE E104                       	smpsAlterNote       $04
00093DE0 E701                       	dc.b	smpsNoAttack, $01
00093DE2 E105                       	smpsAlterNote       $05
00093DE4 E701                       	dc.b	smpsNoAttack, $01
00093DE6 E10B                       	smpsAlterNote       $0B
00093DE8 E701                       	dc.b	smpsNoAttack, $01
00093DEA E10F                       	smpsAlterNote       $0F
00093DEC E701                       	dc.b	smpsNoAttack, $01
00093DEE E10B                       	smpsAlterNote       $0B
00093DF0 E701                       	dc.b	smpsNoAttack, $01
00093DF2 E108                       	smpsAlterNote       $08
00093DF4 E701                       	dc.b	smpsNoAttack, $01
00093DF6 E105                       	smpsAlterNote       $05
00093DF8 8001                       	dc.b	nRst, $01
00093DFA E109                       	smpsAlterNote       $09
00093DFC B609 8001                  	dc.b	nF4, $09, nRst, $01
00093E00 E108                       	smpsAlterNote       $08
00093E02 B506 8001                  	dc.b	nE4, $06, nRst, $01
00093E06 E107                       	smpsAlterNote       $07
00093E08 B30D 8001                  	dc.b	nD4, $0D, nRst, $01
00093E0C E108                       	smpsAlterNote       $08
00093E0E B502 8001                  	dc.b	nE4, $02, nRst, $01
00093E12 E109                       	smpsAlterNote       $09
00093E14 B603 B803 8001             	dc.b	nF4, $03, nG4, $03, nRst, $01
00093E1A E10B                       	smpsAlterNote       $0B
00093E1C BA0D                       	dc.b	nA4, $0D
00093E1E E108                       	smpsAlterNote       $08
00093E20 E701                       	dc.b	smpsNoAttack, $01
00093E22 E104                       	smpsAlterNote       $04
00093E24 E701                       	dc.b	smpsNoAttack, $01
00093E26 E108                       	smpsAlterNote       $08
00093E28 E701                       	dc.b	smpsNoAttack, $01
00093E2A E10E                       	smpsAlterNote       $0E
00093E2C E701                       	dc.b	smpsNoAttack, $01
00093E2E E10F                       	smpsAlterNote       $0F
00093E30 E701                       	dc.b	smpsNoAttack, $01
00093E32 E10B                       	smpsAlterNote       $0B
00093E34 E701                       	dc.b	smpsNoAttack, $01
00093E36 E105                       	smpsAlterNote       $05
00093E38 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093E3C E108                       	smpsAlterNote       $08
00093E3E E701                       	dc.b	smpsNoAttack, $01
00093E40 E10E                       	smpsAlterNote       $0E
00093E42 E701                       	dc.b	smpsNoAttack, $01
00093E44 E10F                       	smpsAlterNote       $0F
00093E46 8001                       	dc.b	nRst, $01
00093E48 E109                       	smpsAlterNote       $09
00093E4A C20D                       	dc.b	nF5, $0D
00093E4C E103                       	smpsAlterNote       $03
00093E4E E701                       	dc.b	smpsNoAttack, $01
00093E50 E102                       	smpsAlterNote       $02
00093E52 E701                       	dc.b	smpsNoAttack, $01
00093E54 E106                       	smpsAlterNote       $06
00093E56 E701                       	dc.b	smpsNoAttack, $01
00093E58 E10C                       	smpsAlterNote       $0C
00093E5A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093E5E E109                       	smpsAlterNote       $09
00093E60 E701                       	dc.b	smpsNoAttack, $01
00093E62 E103                       	smpsAlterNote       $03
00093E64 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093E68 E109                       	smpsAlterNote       $09
00093E6A E701                       	dc.b	smpsNoAttack, $01
00093E6C E10C                       	smpsAlterNote       $0C
00093E6E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093E72 E106                       	smpsAlterNote       $06
00093E74 E701                       	dc.b	smpsNoAttack, $01
00093E76 E102                       	smpsAlterNote       $02
00093E78 E701                       	dc.b	smpsNoAttack, $01
00093E7A E103                       	smpsAlterNote       $03
00093E7C E701                       	dc.b	smpsNoAttack, $01
00093E7E E109                       	smpsAlterNote       $09
00093E80 E701                       	dc.b	smpsNoAttack, $01
00093E82 E10D                       	smpsAlterNote       $0D
00093E84 E701                       	dc.b	smpsNoAttack, $01
00093E86 E109                       	smpsAlterNote       $09
00093E88 E701                       	dc.b	smpsNoAttack, $01
00093E8A E106                       	smpsAlterNote       $06
00093E8C E701                       	dc.b	smpsNoAttack, $01
00093E8E E102                       	smpsAlterNote       $02
00093E90 E701                       	dc.b	smpsNoAttack, $01
00093E92 E106                       	smpsAlterNote       $06
00093E94 E701                       	dc.b	smpsNoAttack, $01
00093E96 E10C                       	smpsAlterNote       $0C
00093E98 E701                       	dc.b	smpsNoAttack, $01
00093E9A E10D                       	smpsAlterNote       $0D
00093E9C E701                       	dc.b	smpsNoAttack, $01
00093E9E E109                       	smpsAlterNote       $09
00093EA0 E701                       	dc.b	smpsNoAttack, $01
00093EA2 E103                       	smpsAlterNote       $03
00093EA4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093EA8 E106                       	smpsAlterNote       $06
00093EAA E701                       	dc.b	smpsNoAttack, $01
00093EAC E10C                       	smpsAlterNote       $0C
00093EAE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093EB2 E106                       	smpsAlterNote       $06
00093EB4 E701                       	dc.b	smpsNoAttack, $01
00093EB6 E103                       	smpsAlterNote       $03
00093EB8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093EBC E109                       	smpsAlterNote       $09
00093EBE E701                       	dc.b	smpsNoAttack, $01
00093EC0 E10D                       	smpsAlterNote       $0D
00093EC2 E701                       	dc.b	smpsNoAttack, $01
00093EC4 E10C                       	smpsAlterNote       $0C
00093EC6 E701                       	dc.b	smpsNoAttack, $01
00093EC8 E106                       	smpsAlterNote       $06
00093ECA E701                       	dc.b	smpsNoAttack, $01
00093ECC E102                       	smpsAlterNote       $02
00093ECE E701                       	dc.b	smpsNoAttack, $01
00093ED0 E106                       	smpsAlterNote       $06
00093ED2 E701                       	dc.b	smpsNoAttack, $01
00093ED4 E109                       	smpsAlterNote       $09
00093ED6 E701                       	dc.b	smpsNoAttack, $01
00093ED8 E10D                       	smpsAlterNote       $0D
00093EDA E701                       	dc.b	smpsNoAttack, $01
00093EDC E109                       	smpsAlterNote       $09
00093EDE E701                       	dc.b	smpsNoAttack, $01
00093EE0 E103                       	smpsAlterNote       $03
00093EE2 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00093EE6 E109                       	smpsAlterNote       $09
00093EE8 C206                       	dc.b	nF5, $06
00093EEA E108                       	smpsAlterNote       $08
00093EEC C10E                       	dc.b	nE5, $0E
00093EEE E102                       	smpsAlterNote       $02
00093EF0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093EF4 E108                       	smpsAlterNote       $08
00093EF6 E701                       	dc.b	smpsNoAttack, $01
00093EF8 E10B                       	smpsAlterNote       $0B
00093EFA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093EFE E105                       	smpsAlterNote       $05
00093F00 E701                       	dc.b	smpsNoAttack, $01
00093F02 E101                       	smpsAlterNote       $01
00093F04 E701                       	dc.b	smpsNoAttack, $01
00093F06 E102                       	smpsAlterNote       $02
00093F08 E701                       	dc.b	smpsNoAttack, $01
00093F0A E108                       	smpsAlterNote       $08
00093F0C E701                       	dc.b	smpsNoAttack, $01
00093F0E E10C                       	smpsAlterNote       $0C
00093F10 E701                       	dc.b	smpsNoAttack, $01
00093F12 E107                       	smpsAlterNote       $07
00093F14 BF0E                       	dc.b	nD5, $0E
00093F16 E101                       	smpsAlterNote       $01
00093F18 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093F1C E107                       	smpsAlterNote       $07
00093F1E E701                       	dc.b	smpsNoAttack, $01
00093F20 E10A                       	smpsAlterNote       $0A
00093F22 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093F26 E104                       	smpsAlterNote       $04
00093F28 E701                       	dc.b	smpsNoAttack, $01
00093F2A E100                       	smpsAlterNote       $00
00093F2C E701                       	dc.b	smpsNoAttack, $01
00093F2E E104                       	smpsAlterNote       $04
00093F30 E701                       	dc.b	smpsNoAttack, $01
00093F32 E107                       	smpsAlterNote       $07
00093F34 E701                       	dc.b	smpsNoAttack, $01
00093F36 E10B                       	smpsAlterNote       $0B
00093F38 E701                       	dc.b	smpsNoAttack, $01
00093F3A E107                       	smpsAlterNote       $07
00093F3C E701                       	dc.b	smpsNoAttack, $01
00093F3E E101                       	smpsAlterNote       $01
00093F40 E701                       	dc.b	smpsNoAttack, $01
00093F42 E100                       	smpsAlterNote       $00
00093F44 E701                       	dc.b	smpsNoAttack, $01
00093F46 E104                       	smpsAlterNote       $04
00093F48 E701                       	dc.b	smpsNoAttack, $01
00093F4A E10A                       	smpsAlterNote       $0A
00093F4C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093F50 E107                       	smpsAlterNote       $07
00093F52 E701                       	dc.b	smpsNoAttack, $01
00093F54 E101                       	smpsAlterNote       $01
00093F56 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093F5A E107                       	smpsAlterNote       $07
00093F5C E701                       	dc.b	smpsNoAttack, $01
00093F5E E10A                       	smpsAlterNote       $0A
00093F60 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093F64 E104                       	smpsAlterNote       $04
00093F66 E701                       	dc.b	smpsNoAttack, $01
00093F68 E100                       	smpsAlterNote       $00
00093F6A E701                       	dc.b	smpsNoAttack, $01
00093F6C E101                       	smpsAlterNote       $01
00093F6E E701                       	dc.b	smpsNoAttack, $01
00093F70 E107                       	smpsAlterNote       $07
00093F72 E701                       	dc.b	smpsNoAttack, $01
00093F74 E10B                       	smpsAlterNote       $0B
00093F76 E701                       	dc.b	smpsNoAttack, $01
00093F78 E107                       	smpsAlterNote       $07
00093F7A E701                       	dc.b	smpsNoAttack, $01
00093F7C E104                       	smpsAlterNote       $04
00093F7E E701                       	dc.b	smpsNoAttack, $01
00093F80 E100                       	smpsAlterNote       $00
00093F82 E701                       	dc.b	smpsNoAttack, $01
00093F84 E104                       	smpsAlterNote       $04
00093F86 E701                       	dc.b	smpsNoAttack, $01
00093F88 E10A                       	smpsAlterNote       $0A
00093F8A E701                       	dc.b	smpsNoAttack, $01
00093F8C E10B                       	smpsAlterNote       $0B
00093F8E E701                       	dc.b	smpsNoAttack, $01
00093F90 E107                       	smpsAlterNote       $07
00093F92 E701                       	dc.b	smpsNoAttack, $01
00093F94 E101                       	smpsAlterNote       $01
00093F96 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093F9A E104                       	smpsAlterNote       $04
00093F9C E701                       	dc.b	smpsNoAttack, $01
00093F9E E10A                       	smpsAlterNote       $0A
00093FA0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093FA4 E104                       	smpsAlterNote       $04
00093FA6 E701                       	dc.b	smpsNoAttack, $01
00093FA8 E101                       	smpsAlterNote       $01
00093FAA E701                       	dc.b	smpsNoAttack, $01
00093FAE E107                       	smpsAlterNote       $07
00093FB0 E6FF                       	smpsAlterVol        $FF
00093FB2 BF06 8001 BF03 BF03 8001+  	dc.b	nD5, $06, nRst, $01, nD5, $03, nD5, $03, nRst, $01, nCs5, $03
00093FBE 8004                       	dc.b	nRst, $04
00093FC2 E109                       	smpsAlterNote       $09
00093FC4 E602                       	smpsAlterVol        $02
00093FC6 B803 B603 8001             	dc.b	nG4, $03, nF4, $03, nRst, $01
00093FCC E108                       	smpsAlterNote       $08
00093FCE B502 8001                  	dc.b	nE4, $02, nRst, $01
00093FD2 E109                       	smpsAlterNote       $09
00093FD4 B60D                       	dc.b	nF4, $0D
00093FD6 E106                       	smpsAlterNote       $06
00093FD8 E701                       	dc.b	smpsNoAttack, $01
00093FDA E102                       	smpsAlterNote       $02
00093FDC E701                       	dc.b	smpsNoAttack, $01
00093FDE E106                       	smpsAlterNote       $06
00093FE0 E701                       	dc.b	smpsNoAttack, $01
00093FE2 E109                       	smpsAlterNote       $09
00093FE4 E701                       	dc.b	smpsNoAttack, $01
00093FE6 E10D                       	smpsAlterNote       $0D
00093FE8 E701                       	dc.b	smpsNoAttack, $01
00093FEA E109                       	smpsAlterNote       $09
00093FEC E701                       	dc.b	smpsNoAttack, $01
00093FEE E103                       	smpsAlterNote       $03
00093FF0 E701                       	dc.b	smpsNoAttack, $01
00093FF2 E102                       	smpsAlterNote       $02
00093FF4 E701                       	dc.b	smpsNoAttack, $01
00093FF6 E106                       	smpsAlterNote       $06
00093FF8 E701                       	dc.b	smpsNoAttack, $01
00093FFA E10C                       	smpsAlterNote       $0C
00093FFC E701                       	dc.b	smpsNoAttack, $01
00093FFE E10D                       	smpsAlterNote       $0D
00094000 8001                       	dc.b	nRst, $01
00094002 E109                       	smpsAlterNote       $09
00094004 B80D                       	dc.b	nG4, $0D
00094006 E106                       	smpsAlterNote       $06
00094008 E701                       	dc.b	smpsNoAttack, $01
0009400A E102                       	smpsAlterNote       $02
0009400C E701                       	dc.b	smpsNoAttack, $01
0009400E E106                       	smpsAlterNote       $06
00094010 E701                       	dc.b	smpsNoAttack, $01
00094012 E10C                       	smpsAlterNote       $0C
00094014 E701                       	dc.b	smpsNoAttack, $01
00094016 E10D                       	smpsAlterNote       $0D
00094018 E701                       	dc.b	smpsNoAttack, $01
0009401A E109                       	smpsAlterNote       $09
0009401C E701                       	dc.b	smpsNoAttack, $01
0009401E E103                       	smpsAlterNote       $03
00094020 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094024 E106                       	smpsAlterNote       $06
00094026 E701                       	dc.b	smpsNoAttack, $01
00094028 E10C                       	smpsAlterNote       $0C
0009402A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009402E E106                       	smpsAlterNote       $06
00094030 E701                       	dc.b	smpsNoAttack, $01
00094032 E103                       	smpsAlterNote       $03
00094034 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094038 E109                       	smpsAlterNote       $09
0009403A E701                       	dc.b	smpsNoAttack, $01
0009403C E10D                       	smpsAlterNote       $0D
0009403E E701                       	dc.b	smpsNoAttack, $01
00094040 E10C                       	smpsAlterNote       $0C
00094042 E701                       	dc.b	smpsNoAttack, $01
00094044 E109                       	smpsAlterNote       $09
00094046 8001                       	dc.b	nRst, $01
00094048 E10B                       	smpsAlterNote       $0B
0009404A BA03                       	dc.b	nA4, $03
0009404C E10C                       	smpsAlterNote       $0C
0009404E BB03 8001                  	dc.b	nBb4, $03, nRst, $01
00094052 E10B                       	smpsAlterNote       $0B
00094054 BA02 8001 C603             	dc.b	nA4, $02, nRst, $01, nA5, $03
0009405A E10C                       	smpsAlterNote       $0C
0009405C C703 8001                  	dc.b	nBb5, $03, nRst, $01
00094060 E10B                       	smpsAlterNote       $0B
00094062 C603 D203 8001             	dc.b	nA5, $03, nA6, $03, nRst, $01
00094068 E10C                       	smpsAlterNote       $0C
0009406A D303                       	dc.b	nBb6, $03
0009406C E10B                       	smpsAlterNote       $0B
0009406E D20D                       	dc.b	nA6, $0D
00094070 E108                       	smpsAlterNote       $08
00094072 E701                       	dc.b	smpsNoAttack, $01
00094074 E104                       	smpsAlterNote       $04
00094076 E701                       	dc.b	smpsNoAttack, $01
00094078 E105                       	smpsAlterNote       $05
0009407A E701                       	dc.b	smpsNoAttack, $01
0009407C E10B                       	smpsAlterNote       $0B
0009407E E701                       	dc.b	smpsNoAttack, $01
00094080 E10F                       	smpsAlterNote       $0F
00094082 E701                       	dc.b	smpsNoAttack, $01
00094084 E10B                       	smpsAlterNote       $0B
00094086 E701                       	dc.b	smpsNoAttack, $01
00094088 E108                       	smpsAlterNote       $08
0009408A E701                       	dc.b	smpsNoAttack, $01
0009408C E104                       	smpsAlterNote       $04
0009408E E701                       	dc.b	smpsNoAttack, $01
00094090 E108                       	smpsAlterNote       $08
00094092 E701                       	dc.b	smpsNoAttack, $01
00094094 E10E                       	smpsAlterNote       $0E
00094096 E701                       	dc.b	smpsNoAttack, $01
00094098 E10F                       	smpsAlterNote       $0F
0009409A E701                       	dc.b	smpsNoAttack, $01
0009409C E10B                       	smpsAlterNote       $0B
0009409E E701                       	dc.b	smpsNoAttack, $01
000940A0 E105                       	smpsAlterNote       $05
000940A2 E701 E701 8007             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $07
000940A8 E109                       	smpsAlterNote       $09
000940AA CE07                       	dc.b	nF6, $07
000940AC E108                       	smpsAlterNote       $08
000940AE CD06 8001                  	dc.b	nE6, $06, nRst, $01
000940B2 E109                       	smpsAlterNote       $09
000940B4 CE03 8001                  	dc.b	nF6, $03, nRst, $01
000940B8 E108                       	smpsAlterNote       $08
000940BA CC0D                       	dc.b	nEb6, $0D
000940BC E102                       	smpsAlterNote       $02
000940BE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000940C2 E108                       	smpsAlterNote       $08
000940C4 E701                       	dc.b	smpsNoAttack, $01
000940C6 E10B                       	smpsAlterNote       $0B
000940C8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000940CC E105                       	smpsAlterNote       $05
000940CE E701                       	dc.b	smpsNoAttack, $01
000940D0 E101                       	smpsAlterNote       $01
000940D2 E701                       	dc.b	smpsNoAttack, $01
000940D4 E102                       	smpsAlterNote       $02
000940D6 E701                       	dc.b	smpsNoAttack, $01
000940D8 E108                       	smpsAlterNote       $08
000940DA E701                       	dc.b	smpsNoAttack, $01
000940DC E10C                       	smpsAlterNote       $0C
000940DE E701                       	dc.b	smpsNoAttack, $01
000940E0 E108                       	smpsAlterNote       $08
000940E2 E701                       	dc.b	smpsNoAttack, $01
000940E4 E105                       	smpsAlterNote       $05
000940E6 E701                       	dc.b	smpsNoAttack, $01
000940E8 E101                       	smpsAlterNote       $01
000940EA E701                       	dc.b	smpsNoAttack, $01
000940EC E105                       	smpsAlterNote       $05
000940EE E701                       	dc.b	smpsNoAttack, $01
000940F0 E10B                       	smpsAlterNote       $0B
000940F2 E701                       	dc.b	smpsNoAttack, $01
000940F4 E10C                       	smpsAlterNote       $0C
000940F6 E701                       	dc.b	smpsNoAttack, $01
000940F8 E108                       	smpsAlterNote       $08
000940FA E701                       	dc.b	smpsNoAttack, $01
000940FC E107                       	smpsAlterNote       $07
000940FE CB03 8001 CA03 CB03 8001   	dc.b	nD6, $03, nRst, $01, nCs6, $03, nD6, $03, nRst, $01
00094108 E10B                       	smpsAlterNote       $0B
0009410A C602 8001 C503 C603 8001   	dc.b	nA5, $02, nRst, $01, nAb5, $03, nA5, $03, nRst, $01
00094114 E109                       	smpsAlterNote       $09
00094116 C203                       	dc.b	nF5, $03
00094118 E108                       	smpsAlterNote       $08
0009411A C103 8001                  	dc.b	nE5, $03, nRst, $01
0009411E E109                       	smpsAlterNote       $09
00094120 C20D                       	dc.b	nF5, $0D
00094122 E108                       	smpsAlterNote       $08
00094124 C10E                       	dc.b	nE5, $0E
00094126 E107                       	smpsAlterNote       $07
00094128 BF0D                       	dc.b	nD5, $0D
0009412A E104                       	smpsAlterNote       $04
0009412C E701                       	dc.b	smpsNoAttack, $01
0009412E E100                       	smpsAlterNote       $00
00094130 E701                       	dc.b	smpsNoAttack, $01
00094132 E104                       	smpsAlterNote       $04
00094134 E701                       	dc.b	smpsNoAttack, $01
00094136 E107                       	smpsAlterNote       $07
00094138 E701                       	dc.b	smpsNoAttack, $01
0009413A E10B                       	smpsAlterNote       $0B
0009413C E701                       	dc.b	smpsNoAttack, $01
0009413E E107                       	smpsAlterNote       $07
00094140 E701                       	dc.b	smpsNoAttack, $01
00094142 E101                       	smpsAlterNote       $01
00094144 E701                       	dc.b	smpsNoAttack, $01
00094146 E100                       	smpsAlterNote       $00
00094148 E701                       	dc.b	smpsNoAttack, $01
0009414A E104                       	smpsAlterNote       $04
0009414C E701                       	dc.b	smpsNoAttack, $01
0009414E E10A                       	smpsAlterNote       $0A
00094150 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094154 E107                       	smpsAlterNote       $07
00094156 E701                       	dc.b	smpsNoAttack, $01
00094158 E101                       	smpsAlterNote       $01
0009415A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009415E E107                       	smpsAlterNote       $07
00094160 E701                       	dc.b	smpsNoAttack, $01
00094162 E10A                       	smpsAlterNote       $0A
00094164 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094168 E104                       	smpsAlterNote       $04
0009416A E701                       	dc.b	smpsNoAttack, $01
0009416C E100                       	smpsAlterNote       $00
0009416E E701                       	dc.b	smpsNoAttack, $01
00094170 E101                       	smpsAlterNote       $01
00094172 E701                       	dc.b	smpsNoAttack, $01
00094174 E107                       	smpsAlterNote       $07
00094176 E701                       	dc.b	smpsNoAttack, $01
00094178 E10B                       	smpsAlterNote       $0B
0009417A E701                       	dc.b	smpsNoAttack, $01
0009417C E107                       	smpsAlterNote       $07
0009417E E701                       	dc.b	smpsNoAttack, $01
00094180 E104                       	smpsAlterNote       $04
00094182 E701                       	dc.b	smpsNoAttack, $01
00094184 E100                       	smpsAlterNote       $00
00094186 E701                       	dc.b	smpsNoAttack, $01
00094188 E104                       	smpsAlterNote       $04
0009418A E701                       	dc.b	smpsNoAttack, $01
0009418C E10A                       	smpsAlterNote       $0A
0009418E E701                       	dc.b	smpsNoAttack, $01
00094190 E10B                       	smpsAlterNote       $0B
00094192 E701                       	dc.b	smpsNoAttack, $01
00094194 E107                       	smpsAlterNote       $07
00094196 E701                       	dc.b	smpsNoAttack, $01
00094198 E101                       	smpsAlterNote       $01
0009419A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009419E E104                       	smpsAlterNote       $04
000941A0 E701                       	dc.b	smpsNoAttack, $01
000941A2 E10A                       	smpsAlterNote       $0A
000941A4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000941A8 E104                       	smpsAlterNote       $04
000941AA E701                       	dc.b	smpsNoAttack, $01
000941AC E101                       	smpsAlterNote       $01
000941AE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000941B2 E107                       	smpsAlterNote       $07
000941B4 E701                       	dc.b	smpsNoAttack, $01
000941B6 E10B                       	smpsAlterNote       $0B
000941B8 E701                       	dc.b	smpsNoAttack, $01
000941BA E10A                       	smpsAlterNote       $0A
000941BC E701                       	dc.b	smpsNoAttack, $01
000941BE E104                       	smpsAlterNote       $04
000941C0 E701                       	dc.b	smpsNoAttack, $01
000941C2 E100                       	smpsAlterNote       $00
000941C4 E701                       	dc.b	smpsNoAttack, $01
000941C6 E104                       	smpsAlterNote       $04
000941C8 E701                       	dc.b	smpsNoAttack, $01
000941CA E107                       	smpsAlterNote       $07
000941CC E701                       	dc.b	smpsNoAttack, $01
000941CE E10B                       	smpsAlterNote       $0B
000941D0 E701                       	dc.b	smpsNoAttack, $01
000941D2 E107                       	smpsAlterNote       $07
000941D4 E701                       	dc.b	smpsNoAttack, $01
000941D6 E101                       	smpsAlterNote       $01
000941D8 E701                       	dc.b	smpsNoAttack, $01
000941DA E100                       	smpsAlterNote       $00
000941DC E701                       	dc.b	smpsNoAttack, $01
000941DE E104                       	smpsAlterNote       $04
000941E0 E701                       	dc.b	smpsNoAttack, $01
000941E2 E10A                       	smpsAlterNote       $0A
000941E4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000941E8 E107                       	smpsAlterNote       $07
000941EA E701                       	dc.b	smpsNoAttack, $01
000941EC E101                       	smpsAlterNote       $01
000941EE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000941F2 E107                       	smpsAlterNote       $07
000941F4 E701                       	dc.b	smpsNoAttack, $01
000941F6 E10A                       	smpsAlterNote       $0A
000941F8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000941FC E104                       	smpsAlterNote       $04
000941FE E701                       	dc.b	smpsNoAttack, $01
00094200 E100                       	smpsAlterNote       $00
00094202 E701                       	dc.b	smpsNoAttack, $01
00094204 E101                       	smpsAlterNote       $01
00094206 E701                       	dc.b	smpsNoAttack, $01
00094208 E107                       	smpsAlterNote       $07
0009420A E701                       	dc.b	smpsNoAttack, $01
0009420C E10B                       	smpsAlterNote       $0B
0009420E E701                       	dc.b	smpsNoAttack, $01
00094210 E107                       	smpsAlterNote       $07
00094212 E701                       	dc.b	smpsNoAttack, $01
00094214 E104                       	smpsAlterNote       $04
00094216 E701                       	dc.b	smpsNoAttack, $01
00094218 E100                       	smpsAlterNote       $00
0009421A E701                       	dc.b	smpsNoAttack, $01
0009421C E101                       	smpsAlterNote       $01
0009421E 8001                       	dc.b	nRst, $01
00094220 E109                       	smpsAlterNote       $09
00094222 C20D                       	dc.b	nF5, $0D
00094224 E106                       	smpsAlterNote       $06
00094226 E701                       	dc.b	smpsNoAttack, $01
00094228 E102                       	smpsAlterNote       $02
0009422A E701                       	dc.b	smpsNoAttack, $01
0009422C E106                       	smpsAlterNote       $06
0009422E E701                       	dc.b	smpsNoAttack, $01
00094230 E10C                       	smpsAlterNote       $0C
00094232 E701                       	dc.b	smpsNoAttack, $01
00094234 E10D                       	smpsAlterNote       $0D
00094236 E701                       	dc.b	smpsNoAttack, $01
00094238 E109                       	smpsAlterNote       $09
0009423A E701                       	dc.b	smpsNoAttack, $01
0009423C E103                       	smpsAlterNote       $03
0009423E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094242 E106                       	smpsAlterNote       $06
00094244 E701                       	dc.b	smpsNoAttack, $01
00094246 E10C                       	smpsAlterNote       $0C
00094248 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009424C E106                       	smpsAlterNote       $06
0009424E E701                       	dc.b	smpsNoAttack, $01
00094250 E103                       	smpsAlterNote       $03
00094252 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094256 E109                       	smpsAlterNote       $09
00094258 E701                       	dc.b	smpsNoAttack, $01
0009425A E10D                       	smpsAlterNote       $0D
0009425C E701                       	dc.b	smpsNoAttack, $01
0009425E E10C                       	smpsAlterNote       $0C
00094260 E701                       	dc.b	smpsNoAttack, $01
00094262 E109                       	smpsAlterNote       $09
00094264 8001                       	dc.b	nRst, $01
00094266 E108                       	smpsAlterNote       $08
00094268 C10D                       	dc.b	nE5, $0D
0009426A E109                       	smpsAlterNote       $09
0009426C C20A 8001                  	dc.b	nF5, $0A, nRst, $01
00094270 E108                       	smpsAlterNote       $08
00094272 C10D                       	dc.b	nE5, $0D
00094274 E102                       	smpsAlterNote       $02
00094276 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009427A E105                       	smpsAlterNote       $05
0009427C E701                       	dc.b	smpsNoAttack, $01
0009427E E108                       	smpsAlterNote       $08
00094280 8001                       	dc.b	nRst, $01
00094282 E107                       	smpsAlterNote       $07
00094284 BF0D                       	dc.b	nD5, $0D
00094286 E108                       	smpsAlterNote       $08
00094288 C107                       	dc.b	nE5, $07
0009428A E109                       	smpsAlterNote       $09
0009428C C207 C406 8001             	dc.b	nF5, $07, nG5, $06, nRst, $01
00094292 E10B                       	smpsAlterNote       $0B
00094294 C603                       	dc.b	nA5, $03
00094296 E10C                       	smpsAlterNote       $0C
00094298 C707 C703 8001             	dc.b	nBb5, $07, nBb5, $03, nRst, $01
0009429E E10B                       	smpsAlterNote       $0B
000942A0 C603 D206 8001             	dc.b	nA5, $03, nA6, $06, nRst, $01
000942A6 E109                       	smpsAlterNote       $09
000942A8 D003                       	dc.b	nG6, $03
000942AA E108                       	smpsAlterNote       $08
000942AC CD02 8001                  	dc.b	nE6, $02, nRst, $01
000942B0 E10B                       	smpsAlterNote       $0B
000942B2 C601 8001                  	dc.b	nA5, $01, nRst, $01
000942B6 E108                       	smpsAlterNote       $08
000942B8 C102                       	dc.b	nE5, $02
000942BC E10C                       	smpsAlterNote       $0C
000942BE E6FB                       	smpsAlterVol        $FB
000942C0 A306 800F A303 A303 8019+  	dc.b	nBb2, $06, nRst, $0F, nBb2, $03, nBb2, $03, nRst, $19, nBb2, $02
000942CC 8001                       	dc.b	nRst, $01
000942CE E10B                       	smpsAlterNote       $0B
000942D0 A206 800F A202 8001        	dc.b	nA2, $06, nRst, $0F, nA2, $02, nRst, $01
000942D8 E107                       	smpsAlterNote       $07
000942DA A706 8001                  	dc.b	nD3, $06, nRst, $01
000942DE E10B                       	smpsAlterNote       $0B
000942E0 A203                       	dc.b	nA2, $03
000942E2 E109                       	smpsAlterNote       $09
000942E4 AA03 8001                  	dc.b	nF3, $03, nRst, $01
000942E8 E108                       	smpsAlterNote       $08
000942EA A906                       	dc.b	nE3, $06
000942EC E107                       	smpsAlterNote       $07
000942EE A703 8001                  	dc.b	nD3, $03, nRst, $01
000942F2 E106                       	smpsAlterNote       $06
000942F4 A503                       	dc.b	nC3, $03
000942F6 E10C                       	smpsAlterNote       $0C
000942F8 A303 8001                  	dc.b	nBb2, $03, nRst, $01
000942FC E10B                       	smpsAlterNote       $0B
000942FE A203 8004                  	dc.b	nA2, $03, nRst, $04
00094302 E11B                       	smpsAlterNote       $1B
00094304 C401                       	dc.b	nG5, $01
00094306 E1F4                       	smpsAlterNote       $F4
00094308 E7C5 01                    	dc.b	smpsNoAttack, nAb5, $01
0009430B E106                       	smpsAlterNote       $06
0009430D E701                       	dc.b	smpsNoAttack, $01
0009430F E10F                       	smpsAlterNote       $0F
00094311 E701                       	dc.b	smpsNoAttack, $01
00094313 E1E4                       	smpsAlterNote       $E4
00094315 E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
00094318 E1F6                       	smpsAlterNote       $F6
0009431A E701                       	dc.b	smpsNoAttack, $01
0009431C E108                       	smpsAlterNote       $08
0009431E E701                       	dc.b	smpsNoAttack, $01
00094320 E10B                       	smpsAlterNote       $0B
00094322 E706                       	dc.b	smpsNoAttack, $06
00094324 E105                       	smpsAlterNote       $05
00094326 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009432A E108                       	smpsAlterNote       $08
0009432C E701                       	dc.b	smpsNoAttack, $01
0009432E E10E                       	smpsAlterNote       $0E
00094330 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094334 E108                       	smpsAlterNote       $08
00094336 E701                       	dc.b	smpsNoAttack, $01
00094338 E105                       	smpsAlterNote       $05
0009433A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009433E E10B                       	smpsAlterNote       $0B
00094340 E701                       	dc.b	smpsNoAttack, $01
00094342 E10F                       	smpsAlterNote       $0F
00094344 E701                       	dc.b	smpsNoAttack, $01
00094346 E10E                       	smpsAlterNote       $0E
00094348 E701                       	dc.b	smpsNoAttack, $01
0009434A E108                       	smpsAlterNote       $08
0009434C E701                       	dc.b	smpsNoAttack, $01
0009434E E104                       	smpsAlterNote       $04
00094350 E701                       	dc.b	smpsNoAttack, $01
00094352 E108                       	smpsAlterNote       $08
00094354 E701                       	dc.b	smpsNoAttack, $01
00094356 E10B                       	smpsAlterNote       $0B
00094358 E701                       	dc.b	smpsNoAttack, $01
0009435A E10F                       	smpsAlterNote       $0F
0009435C E701                       	dc.b	smpsNoAttack, $01
0009435E E10B                       	smpsAlterNote       $0B
00094360 E701                       	dc.b	smpsNoAttack, $01
00094362 E105                       	smpsAlterNote       $05
00094364 E701                       	dc.b	smpsNoAttack, $01
00094366 E104                       	smpsAlterNote       $04
00094368 E701                       	dc.b	smpsNoAttack, $01
0009436A E108                       	smpsAlterNote       $08
0009436C E701                       	dc.b	smpsNoAttack, $01
0009436E E10E                       	smpsAlterNote       $0E
00094370 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094374 E10B                       	smpsAlterNote       $0B
00094376 E701                       	dc.b	smpsNoAttack, $01
00094378 E105                       	smpsAlterNote       $05
0009437A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009437E E10B                       	smpsAlterNote       $0B
00094380 E701                       	dc.b	smpsNoAttack, $01
00094382 E10E                       	smpsAlterNote       $0E
00094384 E701                       	dc.b	smpsNoAttack, $01
00094386 E10F                       	smpsAlterNote       $0F
00094388 8001                       	dc.b	nRst, $01
0009438A E109                       	smpsAlterNote       $09
0009438C C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
00094392 E108                       	smpsAlterNote       $08
00094394 C101 8001                  	dc.b	nE5, $01, nRst, $01
00094398 E109                       	smpsAlterNote       $09
0009439A C202                       	dc.b	nF5, $02
0009439C E108                       	smpsAlterNote       $08
0009439E C102                       	dc.b	nE5, $02
000943A0 E107                       	smpsAlterNote       $07
000943A2 BF02 8001                  	dc.b	nD5, $02, nRst, $01
000943A6 E108                       	smpsAlterNote       $08
000943A8 C101 8001                  	dc.b	nE5, $01, nRst, $01
000943AC E107                       	smpsAlterNote       $07
000943AE BF02                       	dc.b	nD5, $02
000943B0 E106                       	smpsAlterNote       $06
000943B2 BD02 8001                  	dc.b	nC5, $02, nRst, $01
000943B6 E107                       	smpsAlterNote       $07
000943B8 BF01 8001                  	dc.b	nD5, $01, nRst, $01
000943BC E106                       	smpsAlterNote       $06
000943BE BD02                       	dc.b	nC5, $02
000943C0 E10C                       	smpsAlterNote       $0C
000943C2 BB02                       	dc.b	nBb4, $02
000943C4 E106                       	smpsAlterNote       $06
000943C6 BD02 8001                  	dc.b	nC5, $02, nRst, $01
000943CA E10C                       	smpsAlterNote       $0C
000943CC BB01 8001                  	dc.b	nBb4, $01, nRst, $01
000943D0 E10B                       	smpsAlterNote       $0B
000943D2 BA02                       	dc.b	nA4, $02
000943D4 E10C                       	smpsAlterNote       $0C
000943D6 BB02                       	dc.b	nBb4, $02
000943D8 E10B                       	smpsAlterNote       $0B
000943DA BA02 8001 B901 8001 BA02   	dc.b	nA4, $02, nRst, $01, nAb4, $01, nRst, $01, nA4, $02
000943E4 E108                       	smpsAlterNote       $08
000943E6 B502 8001 C101 8001        	dc.b	nE4, $02, nRst, $01, nE5, $01, nRst, $01
000943EE E107                       	smpsAlterNote       $07
000943F0 BE02                       	dc.b	nCs5, $02
000943F2 E10B                       	smpsAlterNote       $0B
000943F4 BA02                       	dc.b	nA4, $02
000943F6 E109                       	smpsAlterNote       $09
000943F8 B802 8001                  	dc.b	nG4, $02, nRst, $01
000943FC E108                       	smpsAlterNote       $08
000943FE B501 8001                  	dc.b	nE4, $01, nRst, $01
00094402 E10B                       	smpsAlterNote       $0B
00094404 AE02                       	dc.b	nA3, $02
00094406 E10C                       	smpsAlterNote       $0C
00094408 A307 800E A303 A303 8019+  	dc.b	nBb2, $07, nRst, $0E, nBb2, $03, nBb2, $03, nRst, $19, nBb2, $03
00094414 E10B                       	smpsAlterNote       $0B
00094416 A206 800F A202 8001        	dc.b	nA2, $06, nRst, $0F, nA2, $02, nRst, $01
0009441E E107                       	smpsAlterNote       $07
00094420 A706 8001                  	dc.b	nD3, $06, nRst, $01
00094424 E10B                       	smpsAlterNote       $0B
00094426 A203                       	dc.b	nA2, $03
00094428 E109                       	smpsAlterNote       $09
0009442A AA03 8001                  	dc.b	nF3, $03, nRst, $01
0009442E E108                       	smpsAlterNote       $08
00094430 A906 8001                  	dc.b	nE3, $06, nRst, $01
00094434 E107                       	smpsAlterNote       $07
00094436 A702 8001                  	dc.b	nD3, $02, nRst, $01
0009443A E106                       	smpsAlterNote       $06
0009443C A503                       	dc.b	nC3, $03
0009443E E10C                       	smpsAlterNote       $0C
00094440 A303 8001                  	dc.b	nBb2, $03, nRst, $01
00094446 E107                       	smpsAlterNote       $07
00094448 B20D                       	dc.b	nCs4, $0D
0009444A E104                       	smpsAlterNote       $04
0009444C E701                       	dc.b	smpsNoAttack, $01
0009444E E100                       	smpsAlterNote       $00
00094450 E701                       	dc.b	smpsNoAttack, $01
00094452 E104                       	smpsAlterNote       $04
00094454 E701                       	dc.b	smpsNoAttack, $01
00094456 E10A                       	smpsAlterNote       $0A
00094458 E701                       	dc.b	smpsNoAttack, $01
0009445A E10B                       	smpsAlterNote       $0B
0009445C E701                       	dc.b	smpsNoAttack, $01
0009445E E107                       	smpsAlterNote       $07
00094460 E701                       	dc.b	smpsNoAttack, $01
00094462 E101                       	smpsAlterNote       $01
00094464 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094468 E104                       	smpsAlterNote       $04
0009446A E701                       	dc.b	smpsNoAttack, $01
0009446C E10A                       	smpsAlterNote       $0A
0009446E E701                       	dc.b	smpsNoAttack, $01
00094470 E10B                       	smpsAlterNote       $0B
00094472 8001                       	dc.b	nRst, $01
00094474 E107                       	smpsAlterNote       $07
00094476 B30D                       	dc.b	nD4, $0D
00094478 E104                       	smpsAlterNote       $04
0009447A E701                       	dc.b	smpsNoAttack, $01
0009447C E100                       	smpsAlterNote       $00
0009447E E701                       	dc.b	smpsNoAttack, $01
00094480 E104                       	smpsAlterNote       $04
00094482 E701                       	dc.b	smpsNoAttack, $01
00094484 E10A                       	smpsAlterNote       $0A
00094486 E701                       	dc.b	smpsNoAttack, $01
00094488 E10B                       	smpsAlterNote       $0B
0009448A E701                       	dc.b	smpsNoAttack, $01
0009448C E107                       	smpsAlterNote       $07
0009448E E701                       	dc.b	smpsNoAttack, $01
00094490 E101                       	smpsAlterNote       $01
00094492 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094496 E104                       	smpsAlterNote       $04
00094498 E701                       	dc.b	smpsNoAttack, $01
0009449A E10A                       	smpsAlterNote       $0A
0009449C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000944A0 E104                       	smpsAlterNote       $04
000944A2 E701                       	dc.b	smpsNoAttack, $01
000944A4 E101                       	smpsAlterNote       $01
000944A6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000944AA E107                       	smpsAlterNote       $07
000944AC E701                       	dc.b	smpsNoAttack, $01
000944AE E10B                       	smpsAlterNote       $0B
000944B0 E701                       	dc.b	smpsNoAttack, $01
000944B2 E10A                       	smpsAlterNote       $0A
000944B4 E701                       	dc.b	smpsNoAttack, $01
000944B6 E107                       	smpsAlterNote       $07
000944B8 8001                       	dc.b	nRst, $01
000944BA E108                       	smpsAlterNote       $08
000944BC B50D                       	dc.b	nE4, $0D
000944BE E102                       	smpsAlterNote       $02
000944C0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000944C4 E105                       	smpsAlterNote       $05
000944C6 E701                       	dc.b	smpsNoAttack, $01
000944C8 E10B                       	smpsAlterNote       $0B
000944CA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000944CE E105                       	smpsAlterNote       $05
000944D0 E701                       	dc.b	smpsNoAttack, $01
000944D2 E102                       	smpsAlterNote       $02
000944D4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000944D8 E108                       	smpsAlterNote       $08
000944DA E701                       	dc.b	smpsNoAttack, $01
000944DC E10C                       	smpsAlterNote       $0C
000944DE E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000944E2 E107                       	smpsAlterNote       $07
000944E4 B30D                       	dc.b	nD4, $0D
000944E6 E101                       	smpsAlterNote       $01
000944E8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000944EC E104                       	smpsAlterNote       $04
000944EE E701                       	dc.b	smpsNoAttack, $01
000944F0 E10A                       	smpsAlterNote       $0A
000944F2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000944F6 E104                       	smpsAlterNote       $04
000944F8 E701                       	dc.b	smpsNoAttack, $01
000944FA E101                       	smpsAlterNote       $01
000944FC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094500 E107                       	smpsAlterNote       $07
00094502 E701                       	dc.b	smpsNoAttack, $01
00094504 E10B                       	smpsAlterNote       $0B
00094506 E701                       	dc.b	smpsNoAttack, $01
00094508 E10A                       	smpsAlterNote       $0A
0009450A E701                       	dc.b	smpsNoAttack, $01
0009450C E104                       	smpsAlterNote       $04
0009450E E701                       	dc.b	smpsNoAttack, $01
00094510 E100                       	smpsAlterNote       $00
00094512 E701                       	dc.b	smpsNoAttack, $01
00094514 E104                       	smpsAlterNote       $04
00094516 E701                       	dc.b	smpsNoAttack, $01
00094518 E107                       	smpsAlterNote       $07
0009451A E701                       	dc.b	smpsNoAttack, $01
0009451C E10B                       	smpsAlterNote       $0B
0009451E E701                       	dc.b	smpsNoAttack, $01
00094520 E107                       	smpsAlterNote       $07
00094522 E701 B20E                  	dc.b	smpsNoAttack, $01, nCs4, $0E
00094526 E101                       	smpsAlterNote       $01
00094528 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009452C E107                       	smpsAlterNote       $07
0009452E E701                       	dc.b	smpsNoAttack, $01
00094530 E10A                       	smpsAlterNote       $0A
00094532 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094536 E104                       	smpsAlterNote       $04
00094538 E701                       	dc.b	smpsNoAttack, $01
0009453A E100                       	smpsAlterNote       $00
0009453C E701                       	dc.b	smpsNoAttack, $01
0009453E E101                       	smpsAlterNote       $01
00094540 E701                       	dc.b	smpsNoAttack, $01
00094542 E107                       	smpsAlterNote       $07
00094544 E701                       	dc.b	smpsNoAttack, $01
00094546 E10B                       	smpsAlterNote       $0B
00094548 E701                       	dc.b	smpsNoAttack, $01
0009454A E107                       	smpsAlterNote       $07
0009454C B30E                       	dc.b	nD4, $0E
0009454E E101                       	smpsAlterNote       $01
00094550 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094554 E107                       	smpsAlterNote       $07
00094556 E701                       	dc.b	smpsNoAttack, $01
00094558 E10A                       	smpsAlterNote       $0A
0009455A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009455E E104                       	smpsAlterNote       $04
00094560 E701                       	dc.b	smpsNoAttack, $01
00094562 E100                       	smpsAlterNote       $00
00094564 E701                       	dc.b	smpsNoAttack, $01
00094566 E101                       	smpsAlterNote       $01
00094568 E701                       	dc.b	smpsNoAttack, $01
0009456A E107                       	smpsAlterNote       $07
0009456C E701                       	dc.b	smpsNoAttack, $01
0009456E E10B                       	smpsAlterNote       $0B
00094570 E701                       	dc.b	smpsNoAttack, $01
00094572 E107                       	smpsAlterNote       $07
00094574 E701                       	dc.b	smpsNoAttack, $01
00094576 E104                       	smpsAlterNote       $04
00094578 E701                       	dc.b	smpsNoAttack, $01
0009457A E100                       	smpsAlterNote       $00
0009457C E701                       	dc.b	smpsNoAttack, $01
0009457E E104                       	smpsAlterNote       $04
00094580 E701                       	dc.b	smpsNoAttack, $01
00094582 E10A                       	smpsAlterNote       $0A
00094584 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094588 E107                       	smpsAlterNote       $07
0009458A E701 B20D                  	dc.b	smpsNoAttack, $01, nCs4, $0D
0009458E E104                       	smpsAlterNote       $04
00094590 E701                       	dc.b	smpsNoAttack, $01
00094592 E100                       	smpsAlterNote       $00
00094594 E701                       	dc.b	smpsNoAttack, $01
00094596 E101                       	smpsAlterNote       $01
00094598 E701                       	dc.b	smpsNoAttack, $01
0009459A E107                       	smpsAlterNote       $07
0009459C E701                       	dc.b	smpsNoAttack, $01
0009459E E10B                       	smpsAlterNote       $0B
000945A0 E701                       	dc.b	smpsNoAttack, $01
000945A2 E107                       	smpsAlterNote       $07
000945A4 E701                       	dc.b	smpsNoAttack, $01
000945A6 E104                       	smpsAlterNote       $04
000945A8 E701                       	dc.b	smpsNoAttack, $01
000945AA E100                       	smpsAlterNote       $00
000945AC E701                       	dc.b	smpsNoAttack, $01
000945AE E104                       	smpsAlterNote       $04
000945B0 E701                       	dc.b	smpsNoAttack, $01
000945B2 E10A                       	smpsAlterNote       $0A
000945B4 E701                       	dc.b	smpsNoAttack, $01
000945B6 E10B                       	smpsAlterNote       $0B
000945B8 E701                       	dc.b	smpsNoAttack, $01
000945BC E6FF                       	smpsAlterVol        $FF
000945BE A206 8001 A203 A203 8001+  	dc.b	nA2, $06, nRst, $01, nA2, $03, nA2, $03, nRst, $01, nA2, $03
000945CA 800B A202 8001             	dc.b	nRst, $0B, nA2, $02, nRst, $01
000945D2 E109                       	smpsAlterNote       $09
000945D4 E601                       	smpsAlterVol        $01
000945D6 B60D                       	dc.b	nF4, $0D
000945D8 E106                       	smpsAlterNote       $06
000945DA E701                       	dc.b	smpsNoAttack, $01
000945DC E102                       	smpsAlterNote       $02
000945DE E701                       	dc.b	smpsNoAttack, $01
000945E0 E106                       	smpsAlterNote       $06
000945E2 E701                       	dc.b	smpsNoAttack, $01
000945E4 E109                       	smpsAlterNote       $09
000945E6 E701                       	dc.b	smpsNoAttack, $01
000945E8 E10D                       	smpsAlterNote       $0D
000945EA E701                       	dc.b	smpsNoAttack, $01
000945EC E109                       	smpsAlterNote       $09
000945EE E701                       	dc.b	smpsNoAttack, $01
000945F0 E103                       	smpsAlterNote       $03
000945F2 E701                       	dc.b	smpsNoAttack, $01
000945F4 E102                       	smpsAlterNote       $02
000945F6 E701                       	dc.b	smpsNoAttack, $01
000945F8 E106                       	smpsAlterNote       $06
000945FA E701                       	dc.b	smpsNoAttack, $01
000945FC E10C                       	smpsAlterNote       $0C
000945FE E701                       	dc.b	smpsNoAttack, $01
00094600 E10D                       	smpsAlterNote       $0D
00094602 8001                       	dc.b	nRst, $01
00094604 E109                       	smpsAlterNote       $09
00094606 B80D                       	dc.b	nG4, $0D
00094608 E106                       	smpsAlterNote       $06
0009460A E701                       	dc.b	smpsNoAttack, $01
0009460C E102                       	smpsAlterNote       $02
0009460E E701                       	dc.b	smpsNoAttack, $01
00094610 E106                       	smpsAlterNote       $06
00094612 E701                       	dc.b	smpsNoAttack, $01
00094614 E109                       	smpsAlterNote       $09
00094616 E701                       	dc.b	smpsNoAttack, $01
00094618 E10D                       	smpsAlterNote       $0D
0009461A E701                       	dc.b	smpsNoAttack, $01
0009461C E109                       	smpsAlterNote       $09
0009461E E701                       	dc.b	smpsNoAttack, $01
00094620 E103                       	smpsAlterNote       $03
00094622 E701                       	dc.b	smpsNoAttack, $01
00094624 E102                       	smpsAlterNote       $02
00094626 E701                       	dc.b	smpsNoAttack, $01
00094628 E106                       	smpsAlterNote       $06
0009462A E701                       	dc.b	smpsNoAttack, $01
0009462C E10C                       	smpsAlterNote       $0C
0009462E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094632 E106                       	smpsAlterNote       $06
00094634 E701                       	dc.b	smpsNoAttack, $01
00094636 E103                       	smpsAlterNote       $03
00094638 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009463C E109                       	smpsAlterNote       $09
0009463E E701                       	dc.b	smpsNoAttack, $01
00094640 E10D                       	smpsAlterNote       $0D
00094642 E701                       	dc.b	smpsNoAttack, $01
00094644 E10C                       	smpsAlterNote       $0C
00094646 E701                       	dc.b	smpsNoAttack, $01
00094648 E109                       	smpsAlterNote       $09
0009464A 8001                       	dc.b	nRst, $01
0009464C E10B                       	smpsAlterNote       $0B
0009464E BA0D                       	dc.b	nA4, $0D
00094650 E105                       	smpsAlterNote       $05
00094652 E701                       	dc.b	smpsNoAttack, $01
00094654 E104                       	smpsAlterNote       $04
00094656 E701                       	dc.b	smpsNoAttack, $01
00094658 E108                       	smpsAlterNote       $08
0009465A E701                       	dc.b	smpsNoAttack, $01
0009465C E10E                       	smpsAlterNote       $0E
0009465E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094662 E10B                       	smpsAlterNote       $0B
00094664 E701                       	dc.b	smpsNoAttack, $01
00094666 E105                       	smpsAlterNote       $05
00094668 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009466C E10B                       	smpsAlterNote       $0B
0009466E E701                       	dc.b	smpsNoAttack, $01
00094670 E10E                       	smpsAlterNote       $0E
00094672 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094676 E108                       	smpsAlterNote       $08
00094678 E701                       	dc.b	smpsNoAttack, $01
0009467A E104                       	smpsAlterNote       $04
0009467C E701                       	dc.b	smpsNoAttack, $01
0009467E E105                       	smpsAlterNote       $05
00094680 E701                       	dc.b	smpsNoAttack, $01
00094682 E10B                       	smpsAlterNote       $0B
00094684 E701                       	dc.b	smpsNoAttack, $01
00094686 E10F                       	smpsAlterNote       $0F
00094688 E701                       	dc.b	smpsNoAttack, $01
0009468A E10B                       	smpsAlterNote       $0B
0009468C E701                       	dc.b	smpsNoAttack, $01
0009468E E108                       	smpsAlterNote       $08
00094690 E701                       	dc.b	smpsNoAttack, $01
00094692 E104                       	smpsAlterNote       $04
00094694 E701                       	dc.b	smpsNoAttack, $01
00094696 E108                       	smpsAlterNote       $08
00094698 E701                       	dc.b	smpsNoAttack, $01
0009469A E10E                       	smpsAlterNote       $0E
0009469C E701                       	dc.b	smpsNoAttack, $01
0009469E E10F                       	smpsAlterNote       $0F
000946A0 E701                       	dc.b	smpsNoAttack, $01
000946A2 E10B                       	smpsAlterNote       $0B
000946A4 E701                       	dc.b	smpsNoAttack, $01
000946A6 E105                       	smpsAlterNote       $05
000946A8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000946AC E108                       	smpsAlterNote       $08
000946AE E701                       	dc.b	smpsNoAttack, $01
000946B0 E10E                       	smpsAlterNote       $0E
000946B2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000946B6 E108                       	smpsAlterNote       $08
000946B8 E701                       	dc.b	smpsNoAttack, $01
000946BA E105                       	smpsAlterNote       $05
000946BC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000946C0 E108                       	smpsAlterNote       $08
000946C2 B50A 8001                  	dc.b	nE4, $0A, nRst, $01
000946C6 E109                       	smpsAlterNote       $09
000946C8 B60D                       	dc.b	nF4, $0D
000946CA E103                       	smpsAlterNote       $03
000946CC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000946D0 E106                       	smpsAlterNote       $06
000946D2 E701                       	dc.b	smpsNoAttack, $01
000946D4 E10C                       	smpsAlterNote       $0C
000946D6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000946DA E106                       	smpsAlterNote       $06
000946DC E701                       	dc.b	smpsNoAttack, $01
000946DE E103                       	smpsAlterNote       $03
000946E0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000946E4 E109                       	smpsAlterNote       $09
000946E6 E701                       	dc.b	smpsNoAttack, $01
000946E8 E10D                       	smpsAlterNote       $0D
000946EA E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000946EE E109                       	smpsAlterNote       $09
000946F0 B80D                       	dc.b	nG4, $0D
000946F2 E103                       	smpsAlterNote       $03
000946F4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000946F8 E109                       	smpsAlterNote       $09
000946FA E701                       	dc.b	smpsNoAttack, $01
000946FC E10C                       	smpsAlterNote       $0C
000946FE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094702 E106                       	smpsAlterNote       $06
00094704 E701                       	dc.b	smpsNoAttack, $01
00094706 E102                       	smpsAlterNote       $02
00094708 E701                       	dc.b	smpsNoAttack, $01
0009470A E103                       	smpsAlterNote       $03
0009470C E701                       	dc.b	smpsNoAttack, $01
0009470E E109                       	smpsAlterNote       $09
00094710 E701                       	dc.b	smpsNoAttack, $01
00094712 E10D                       	smpsAlterNote       $0D
00094714 E701                       	dc.b	smpsNoAttack, $01
00094716 E109                       	smpsAlterNote       $09
00094718 E701                       	dc.b	smpsNoAttack, $01
0009471A E106                       	smpsAlterNote       $06
0009471C E701                       	dc.b	smpsNoAttack, $01
0009471E E102                       	smpsAlterNote       $02
00094720 E701                       	dc.b	smpsNoAttack, $01
00094722 E106                       	smpsAlterNote       $06
00094724 E701                       	dc.b	smpsNoAttack, $01
00094726 E10C                       	smpsAlterNote       $0C
00094728 E701                       	dc.b	smpsNoAttack, $01
0009472A E10D                       	smpsAlterNote       $0D
0009472C E701                       	dc.b	smpsNoAttack, $01
0009472E E109                       	smpsAlterNote       $09
00094730 E701                       	dc.b	smpsNoAttack, $01
00094732 E10B                       	smpsAlterNote       $0B
00094734 BA0D                       	dc.b	nA4, $0D
00094736 E108                       	smpsAlterNote       $08
00094738 E701                       	dc.b	smpsNoAttack, $01
0009473A E105                       	smpsAlterNote       $05
0009473C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094740 E10B                       	smpsAlterNote       $0B
00094742 E701                       	dc.b	smpsNoAttack, $01
00094744 E10F                       	smpsAlterNote       $0F
00094746 E701                       	dc.b	smpsNoAttack, $01
00094748 E10E                       	smpsAlterNote       $0E
0009474A E701                       	dc.b	smpsNoAttack, $01
0009474C E108                       	smpsAlterNote       $08
0009474E E701                       	dc.b	smpsNoAttack, $01
00094750 E104                       	smpsAlterNote       $04
00094752 E701                       	dc.b	smpsNoAttack, $01
00094754 E108                       	smpsAlterNote       $08
00094756 E701                       	dc.b	smpsNoAttack, $01
00094758 E10B                       	smpsAlterNote       $0B
0009475A E701                       	dc.b	smpsNoAttack, $01
0009475C E10F                       	smpsAlterNote       $0F
0009475E E701                       	dc.b	smpsNoAttack, $01
00094760 E10B                       	smpsAlterNote       $0B
00094762 E701                       	dc.b	smpsNoAttack, $01
00094764 E105                       	smpsAlterNote       $05
00094766 E701                       	dc.b	smpsNoAttack, $01
00094768 E104                       	smpsAlterNote       $04
0009476A E701                       	dc.b	smpsNoAttack, $01
0009476C E108                       	smpsAlterNote       $08
0009476E E701                       	dc.b	smpsNoAttack, $01
00094770 E10E                       	smpsAlterNote       $0E
00094772 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094776 E10B                       	smpsAlterNote       $0B
00094778 E701                       	dc.b	smpsNoAttack, $01
0009477A E105                       	smpsAlterNote       $05
0009477C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094780 E10B                       	smpsAlterNote       $0B
00094782 E701                       	dc.b	smpsNoAttack, $01
00094784 E10E                       	smpsAlterNote       $0E
00094786 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009478A E108                       	smpsAlterNote       $08
0009478C E701                       	dc.b	smpsNoAttack, $01
0009478E E105                       	smpsAlterNote       $05
00094790 8001                       	dc.b	nRst, $01
00094792 E109                       	smpsAlterNote       $09
00094794 B60A                       	dc.b	nF4, $0A
00094796 E108                       	smpsAlterNote       $08
00094798 B507                       	dc.b	nE4, $07
0009479A E107                       	smpsAlterNote       $07
0009479C B30D 8001                  	dc.b	nD4, $0D, nRst, $01
000947A0 E108                       	smpsAlterNote       $08
000947A2 B503                       	dc.b	nE4, $03
000947A4 E109                       	smpsAlterNote       $09
000947A6 B603 8001 B802 8001        	dc.b	nF4, $03, nRst, $01, nG4, $02, nRst, $01
000947AE E10B                       	smpsAlterNote       $0B
000947B0 BA0D                       	dc.b	nA4, $0D
000947B2 E108                       	smpsAlterNote       $08
000947B4 E701                       	dc.b	smpsNoAttack, $01
000947B6 E104                       	smpsAlterNote       $04
000947B8 E701                       	dc.b	smpsNoAttack, $01
000947BA E108                       	smpsAlterNote       $08
000947BC E701                       	dc.b	smpsNoAttack, $01
000947BE E10B                       	smpsAlterNote       $0B
000947C0 E701                       	dc.b	smpsNoAttack, $01
000947C2 E10F                       	smpsAlterNote       $0F
000947C4 E701                       	dc.b	smpsNoAttack, $01
000947C6 E10B                       	smpsAlterNote       $0B
000947C8 E701                       	dc.b	smpsNoAttack, $01
000947CA E105                       	smpsAlterNote       $05
000947CC E701                       	dc.b	smpsNoAttack, $01
000947CE E104                       	smpsAlterNote       $04
000947D0 E701                       	dc.b	smpsNoAttack, $01
000947D2 E108                       	smpsAlterNote       $08
000947D4 E701                       	dc.b	smpsNoAttack, $01
000947D6 E10E                       	smpsAlterNote       $0E
000947D8 E701                       	dc.b	smpsNoAttack, $01
000947DA E10F                       	smpsAlterNote       $0F
000947DC 8001                       	dc.b	nRst, $01
000947DE E109                       	smpsAlterNote       $09
000947E0 C20D                       	dc.b	nF5, $0D
000947E2 E106                       	smpsAlterNote       $06
000947E4 E701                       	dc.b	smpsNoAttack, $01
000947E6 E102                       	smpsAlterNote       $02
000947E8 E701                       	dc.b	smpsNoAttack, $01
000947EA E106                       	smpsAlterNote       $06
000947EC E701                       	dc.b	smpsNoAttack, $01
000947EE E109                       	smpsAlterNote       $09
000947F0 E701                       	dc.b	smpsNoAttack, $01
000947F2 E10D                       	smpsAlterNote       $0D
000947F4 E701                       	dc.b	smpsNoAttack, $01
000947F6 E109                       	smpsAlterNote       $09
000947F8 E701                       	dc.b	smpsNoAttack, $01
000947FA E103                       	smpsAlterNote       $03
000947FC E701                       	dc.b	smpsNoAttack, $01
000947FE E102                       	smpsAlterNote       $02
00094800 E701                       	dc.b	smpsNoAttack, $01
00094802 E106                       	smpsAlterNote       $06
00094804 E701                       	dc.b	smpsNoAttack, $01
00094806 E10C                       	smpsAlterNote       $0C
00094808 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009480C E109                       	smpsAlterNote       $09
0009480E E701                       	dc.b	smpsNoAttack, $01
00094810 E103                       	smpsAlterNote       $03
00094812 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094816 E109                       	smpsAlterNote       $09
00094818 E701                       	dc.b	smpsNoAttack, $01
0009481A E10C                       	smpsAlterNote       $0C
0009481C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094820 E106                       	smpsAlterNote       $06
00094822 E701                       	dc.b	smpsNoAttack, $01
00094824 E102                       	smpsAlterNote       $02
00094826 E701                       	dc.b	smpsNoAttack, $01
00094828 E103                       	smpsAlterNote       $03
0009482A E701                       	dc.b	smpsNoAttack, $01
0009482C E109                       	smpsAlterNote       $09
0009482E E701                       	dc.b	smpsNoAttack, $01
00094830 E10D                       	smpsAlterNote       $0D
00094832 E701                       	dc.b	smpsNoAttack, $01
00094834 E109                       	smpsAlterNote       $09
00094836 E701                       	dc.b	smpsNoAttack, $01
00094838 E106                       	smpsAlterNote       $06
0009483A E701                       	dc.b	smpsNoAttack, $01
0009483C E102                       	smpsAlterNote       $02
0009483E E701                       	dc.b	smpsNoAttack, $01
00094840 E106                       	smpsAlterNote       $06
00094842 E701                       	dc.b	smpsNoAttack, $01
00094844 E10C                       	smpsAlterNote       $0C
00094846 E701                       	dc.b	smpsNoAttack, $01
00094848 E10D                       	smpsAlterNote       $0D
0009484A E701                       	dc.b	smpsNoAttack, $01
0009484C E109                       	smpsAlterNote       $09
0009484E E701                       	dc.b	smpsNoAttack, $01
00094850 E103                       	smpsAlterNote       $03
00094852 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094856 E106                       	smpsAlterNote       $06
00094858 E701                       	dc.b	smpsNoAttack, $01
0009485A E10C                       	smpsAlterNote       $0C
0009485C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094860 E106                       	smpsAlterNote       $06
00094862 E701                       	dc.b	smpsNoAttack, $01
00094864 E103                       	smpsAlterNote       $03
00094866 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009486A E109                       	smpsAlterNote       $09
0009486C E701                       	dc.b	smpsNoAttack, $01
0009486E E10D                       	smpsAlterNote       $0D
00094870 E701                       	dc.b	smpsNoAttack, $01
00094872 E10C                       	smpsAlterNote       $0C
00094874 E701                       	dc.b	smpsNoAttack, $01
00094876 E106                       	smpsAlterNote       $06
00094878 E701                       	dc.b	smpsNoAttack, $01
0009487A E103                       	smpsAlterNote       $03
0009487C 8001                       	dc.b	nRst, $01
0009487E E109                       	smpsAlterNote       $09
00094880 C206 8001                  	dc.b	nF5, $06, nRst, $01
00094886 E10C                       	smpsAlterNote       $0C
00094888 E601                       	smpsAlterVol        $01
0009488A BB0D                       	dc.b	nBb4, $0D
0009488C E106                       	smpsAlterNote       $06
0009488E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094892 E109                       	smpsAlterNote       $09
00094894 E701                       	dc.b	smpsNoAttack, $01
00094896 E10F                       	smpsAlterNote       $0F
00094898 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009489C E109                       	smpsAlterNote       $09
0009489E E701                       	dc.b	smpsNoAttack, $01
000948A0 E106                       	smpsAlterNote       $06
000948A2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000948A6 E10C                       	smpsAlterNote       $0C
000948A8 E701                       	dc.b	smpsNoAttack, $01
000948AA E110                       	smpsAlterNote       $10
000948AC E701                       	dc.b	smpsNoAttack, $01
000948AE E10F                       	smpsAlterNote       $0F
000948B0 E701                       	dc.b	smpsNoAttack, $01
000948B2 E109                       	smpsAlterNote       $09
000948B4 E701                       	dc.b	smpsNoAttack, $01
000948B6 E105                       	smpsAlterNote       $05
000948B8 E701                       	dc.b	smpsNoAttack, $01
000948BA E106                       	smpsAlterNote       $06
000948BC 8001 BD0D                  	dc.b	nRst, $01, nC5, $0D
000948C0 E103                       	smpsAlterNote       $03
000948C2 E701                       	dc.b	smpsNoAttack, $01
000948C4 E1FF                       	smpsAlterNote       $FF
000948C6 E701                       	dc.b	smpsNoAttack, $01
000948C8 E103                       	smpsAlterNote       $03
000948CA E701                       	dc.b	smpsNoAttack, $01
000948CC E106                       	smpsAlterNote       $06
000948CE E701                       	dc.b	smpsNoAttack, $01
000948D0 E10A                       	smpsAlterNote       $0A
000948D2 E701                       	dc.b	smpsNoAttack, $01
000948D4 E106                       	smpsAlterNote       $06
000948D6 E701                       	dc.b	smpsNoAttack, $01
000948D8 E100                       	smpsAlterNote       $00
000948DA E701                       	dc.b	smpsNoAttack, $01
000948DC E1FF                       	smpsAlterNote       $FF
000948DE E701                       	dc.b	smpsNoAttack, $01
000948E0 E103                       	smpsAlterNote       $03
000948E2 E701                       	dc.b	smpsNoAttack, $01
000948E4 E109                       	smpsAlterNote       $09
000948E6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000948EA E106                       	smpsAlterNote       $06
000948EC E701                       	dc.b	smpsNoAttack, $01
000948EE E100                       	smpsAlterNote       $00
000948F0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000948F4 E107                       	smpsAlterNote       $07
000948F6 BF0E                       	dc.b	nD5, $0E
000948F8 E101                       	smpsAlterNote       $01
000948FA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000948FE E107                       	smpsAlterNote       $07
00094900 E701                       	dc.b	smpsNoAttack, $01
00094902 E10A                       	smpsAlterNote       $0A
00094904 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094908 E104                       	smpsAlterNote       $04
0009490A E701                       	dc.b	smpsNoAttack, $01
0009490C E100                       	smpsAlterNote       $00
0009490E E701                       	dc.b	smpsNoAttack, $01
00094910 E101                       	smpsAlterNote       $01
00094912 E701                       	dc.b	smpsNoAttack, $01
00094914 E107                       	smpsAlterNote       $07
00094916 E701                       	dc.b	smpsNoAttack, $01
00094918 E10B                       	smpsAlterNote       $0B
0009491A E701                       	dc.b	smpsNoAttack, $01
0009491C E107                       	smpsAlterNote       $07
0009491E E701                       	dc.b	smpsNoAttack, $01
00094920 E104                       	smpsAlterNote       $04
00094922 E701                       	dc.b	smpsNoAttack, $01
00094924 E100                       	smpsAlterNote       $00
00094926 E701                       	dc.b	smpsNoAttack, $01
00094928 E101                       	smpsAlterNote       $01
0009492A 8001                       	dc.b	nRst, $01
0009492C E108                       	smpsAlterNote       $08
0009492E C10C                       	dc.b	nE5, $0C
00094930 E109                       	smpsAlterNote       $09
00094932 C201 8001                  	dc.b	nF5, $01, nRst, $01
00094936 E10A                       	smpsAlterNote       $0A
00094938 8001                       	dc.b	nRst, $01
0009493A E109                       	smpsAlterNote       $09
0009493C C40C C20D                  	dc.b	nG5, $0C, nF5, $0D
00094940 E106                       	smpsAlterNote       $06
00094942 E701                       	dc.b	smpsNoAttack, $01
00094944 E102                       	smpsAlterNote       $02
00094946 E701                       	dc.b	smpsNoAttack, $01
00094948 E103                       	smpsAlterNote       $03
0009494A E701                       	dc.b	smpsNoAttack, $01
0009494C E109                       	smpsAlterNote       $09
0009494E E701                       	dc.b	smpsNoAttack, $01
00094950 E10D                       	smpsAlterNote       $0D
00094952 E701                       	dc.b	smpsNoAttack, $01
00094954 E109                       	smpsAlterNote       $09
00094956 E701                       	dc.b	smpsNoAttack, $01
00094958 E106                       	smpsAlterNote       $06
0009495A E701                       	dc.b	smpsNoAttack, $01
0009495C E102                       	smpsAlterNote       $02
0009495E E701                       	dc.b	smpsNoAttack, $01
00094960 E106                       	smpsAlterNote       $06
00094962 E701                       	dc.b	smpsNoAttack, $01
00094964 E10C                       	smpsAlterNote       $0C
00094966 E701                       	dc.b	smpsNoAttack, $01
00094968 E10D                       	smpsAlterNote       $0D
0009496A E701                       	dc.b	smpsNoAttack, $01
0009496C E109                       	smpsAlterNote       $09
0009496E C40D                       	dc.b	nG5, $0D
00094970 E106                       	smpsAlterNote       $06
00094972 E701                       	dc.b	smpsNoAttack, $01
00094974 E102                       	smpsAlterNote       $02
00094976 E701                       	dc.b	smpsNoAttack, $01
00094978 E103                       	smpsAlterNote       $03
0009497A E701                       	dc.b	smpsNoAttack, $01
0009497C E109                       	smpsAlterNote       $09
0009497E E701                       	dc.b	smpsNoAttack, $01
00094980 E108                       	smpsAlterNote       $08
00094982 C007 C002 C002 8001 C001+  	dc.b	nEb5, $07, nEb5, $02, nEb5, $02, nRst, $01, nEb5, $01, nRst, $01
0009498E E109                       	smpsAlterNote       $09
00094990 C20D                       	dc.b	nF5, $0D
00094992 E106                       	smpsAlterNote       $06
00094994 E701                       	dc.b	smpsNoAttack, $01
00094996 E102                       	smpsAlterNote       $02
00094998 E701                       	dc.b	smpsNoAttack, $01
0009499A E106                       	smpsAlterNote       $06
0009499C E701                       	dc.b	smpsNoAttack, $01
0009499E E109                       	smpsAlterNote       $09
000949A0 E701                       	dc.b	smpsNoAttack, $01
000949A2 E10D                       	smpsAlterNote       $0D
000949A4 E701                       	dc.b	smpsNoAttack, $01
000949A6 E109                       	smpsAlterNote       $09
000949A8 E701                       	dc.b	smpsNoAttack, $01
000949AA E103                       	smpsAlterNote       $03
000949AC E701                       	dc.b	smpsNoAttack, $01
000949AE E102                       	smpsAlterNote       $02
000949B0 E701                       	dc.b	smpsNoAttack, $01
000949B2 E106                       	smpsAlterNote       $06
000949B4 E701                       	dc.b	smpsNoAttack, $01
000949B6 E10C                       	smpsAlterNote       $0C
000949B8 E701                       	dc.b	smpsNoAttack, $01
000949BA E10D                       	smpsAlterNote       $0D
000949BC 8001                       	dc.b	nRst, $01
000949BE E112                       	smpsAlterNote       $12
000949C0 C401                       	dc.b	nG5, $01
000949C2 E1EB                       	smpsAlterNote       $EB
000949C4 E7C5 01                    	dc.b	smpsNoAttack, nAb5, $01
000949C7 E1FD                       	smpsAlterNote       $FD
000949C9 E701                       	dc.b	smpsNoAttack, $01
000949CB E10F                       	smpsAlterNote       $0F
000949CD E701                       	dc.b	smpsNoAttack, $01
000949CF E118                       	smpsAlterNote       $18
000949D1 E701                       	dc.b	smpsNoAttack, $01
000949D3 E1ED                       	smpsAlterNote       $ED
000949D5 E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
000949D8 E1FF                       	smpsAlterNote       $FF
000949DA E701                       	dc.b	smpsNoAttack, $01
000949DC E10B                       	smpsAlterNote       $0B
000949DE E703                       	dc.b	smpsNoAttack, $03
000949E0 E109                       	smpsAlterNote       $09
000949E2 C407                       	dc.b	nG5, $07
000949E4 E108                       	smpsAlterNote       $08
000949E6 C006 8001 C002 C002 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $02, nEb5, $02, nEb5, $02, nRst, $01
000949F2 E109                       	smpsAlterNote       $09
000949F4 C20D                       	dc.b	nF5, $0D
000949F6 E103                       	smpsAlterNote       $03
000949F8 E701                       	dc.b	smpsNoAttack, $01
000949FA E102                       	smpsAlterNote       $02
000949FC E701                       	dc.b	smpsNoAttack, $01
000949FE E106                       	smpsAlterNote       $06
00094A00 E701                       	dc.b	smpsNoAttack, $01
00094A02 E10C                       	smpsAlterNote       $0C
00094A04 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094A08 E109                       	smpsAlterNote       $09
00094A0A E701                       	dc.b	smpsNoAttack, $01
00094A0C E103                       	smpsAlterNote       $03
00094A0E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094A12 E109                       	smpsAlterNote       $09
00094A14 E701                       	dc.b	smpsNoAttack, $01
00094A16 E10C                       	smpsAlterNote       $0C
00094A18 E701                       	dc.b	smpsNoAttack, $01
00094A1A E10D                       	smpsAlterNote       $0D
00094A1C 8001                       	dc.b	nRst, $01
00094A1E E10B                       	smpsAlterNote       $0B
00094A20 C609 8001                  	dc.b	nA5, $09, nRst, $01
00094A24 E109                       	smpsAlterNote       $09
00094A26 B806 8001                  	dc.b	nG4, $06, nRst, $01
00094A2A E108                       	smpsAlterNote       $08
00094A2C C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
00094A38 8001                       	dc.b	nRst, $01
00094A3A E109                       	smpsAlterNote       $09
00094A3C C20D                       	dc.b	nF5, $0D
00094A3E E103                       	smpsAlterNote       $03
00094A40 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094A44 E106                       	smpsAlterNote       $06
00094A46 E701                       	dc.b	smpsNoAttack, $01
00094A48 E10C                       	smpsAlterNote       $0C
00094A4A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094A4E E106                       	smpsAlterNote       $06
00094A50 E701                       	dc.b	smpsNoAttack, $01
00094A52 E103                       	smpsAlterNote       $03
00094A54 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094A58 E109                       	smpsAlterNote       $09
00094A5A E701                       	dc.b	smpsNoAttack, $01
00094A5C E10D                       	smpsAlterNote       $0D
00094A5E E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00094A64 E108                       	smpsAlterNote       $08
00094A66 E6FF                       	smpsAlterVol        $FF
00094A68 A806                       	dc.b	nEb3, $06
00094A6A E10C                       	smpsAlterNote       $0C
00094A6C A303 8001                  	dc.b	nBb2, $03, nRst, $01
00094A70 E108                       	smpsAlterNote       $08
00094A72 A803                       	dc.b	nEb3, $03
00094A74 E109                       	smpsAlterNote       $09
00094A76 AC03 8001                  	dc.b	nG3, $03, nRst, $01
00094A7A E10C                       	smpsAlterNote       $0C
00094A7C AF02 8001 AF03 8007        	dc.b	nBb3, $02, nRst, $01, nBb3, $03, nRst, $07
00094A86 E109                       	smpsAlterNote       $09
00094A88 E602                       	smpsAlterVol        $02
00094A8A B604                       	dc.b	nF4, $04
00094A8C E602                       	smpsAlterVol        $02
00094A8E F6F1 AA                    	smpsJump            music84_Jump02
00094A91                            
00094A91                            ; FM4 Data
00094A91                            music84_FM4:
00094A93 E040                       	smpsPan             panRight, $00
00094A95 8003                       	dc.b	nRst, $03
00094A97 E10F                       	smpsAlterNote       $0F
00094A99 C603 8008                  	dc.b	nA5, $03, nRst, $08
00094A9D E10D                       	smpsAlterNote       $0D
00094A9F C403 800A                  	dc.b	nG5, $03, nRst, $0A
00094AA3 E10C                       	smpsAlterNote       $0C
00094AA5 C103 8004                  	dc.b	nE5, $03, nRst, $04
00094AAB E6FE                       	smpsAlterVol        $FE
00094AAD E110                       	smpsAlterNote       $10
00094AAF C703 8001                  	dc.b	nBb5, $03, nRst, $01
00094AB3 E10F                       	smpsAlterNote       $0F
00094AB5 C602 8001                  	dc.b	nA5, $02, nRst, $01
00094AB9 E10D                       	smpsAlterNote       $0D
00094ABB C403 C401 E7C2 0280 01     	dc.b	nG5, $03, nG5, $01, smpsNoAttack, nF5, $02, nRst, $01
00094AC4 E10C                       	smpsAlterNote       $0C
00094AC6 C103                       	dc.b	nE5, $03
00094AC8 E10A                       	smpsAlterNote       $0A
00094ACA BD03 8001                  	dc.b	nC5, $03, nRst, $01
00094AD0 03                         	dc.b	$03
00094AD1                            
00094AD1                            music84_Jump01:
00094AD1 E10B                       	smpsAlterNote       $0B
00094AD3 BF03 8001                  	dc.b	nD5, $03, nRst, $01
00094AD7 E10C                       	smpsAlterNote       $0C
00094AD9 C102 8001                  	dc.b	nE5, $02, nRst, $01
00094ADD E10D                       	smpsAlterNote       $0D
00094ADF C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
00094AE9 E10B                       	smpsAlterNote       $0B
00094AEB BF03 C90D                  	dc.b	nD5, $03, nC6, $0D
00094AEF E107                       	smpsAlterNote       $07
00094AF1 E701                       	dc.b	smpsNoAttack, $01
00094AF3 E103                       	smpsAlterNote       $03
00094AF5 E701                       	dc.b	smpsNoAttack, $01
00094AF7 E104                       	smpsAlterNote       $04
00094AF9 E701                       	dc.b	smpsNoAttack, $01
00094AFB E10A                       	smpsAlterNote       $0A
00094AFD E701                       	dc.b	smpsNoAttack, $01
00094AFF E10E                       	smpsAlterNote       $0E
00094B01 E701                       	dc.b	smpsNoAttack, $01
00094B03 E10A                       	smpsAlterNote       $0A
00094B05 E701                       	dc.b	smpsNoAttack, $01
00094B07 E107                       	smpsAlterNote       $07
00094B09 E701                       	dc.b	smpsNoAttack, $01
00094B0B E104                       	smpsAlterNote       $04
00094B0D 8001                       	dc.b	nRst, $01
00094B0F E110                       	smpsAlterNote       $10
00094B11 C703                       	dc.b	nBb5, $03
00094B13 E10F                       	smpsAlterNote       $0F
00094B15 C603 8001                  	dc.b	nA5, $03, nRst, $01
00094B19 E10D                       	smpsAlterNote       $0D
00094B1B C402 8001 C60D             	dc.b	nG5, $02, nRst, $01, nA5, $0D
00094B21 E10C                       	smpsAlterNote       $0C
00094B23 E701                       	dc.b	smpsNoAttack, $01
00094B25 E108                       	smpsAlterNote       $08
00094B27 E701                       	dc.b	smpsNoAttack, $01
00094B29 E10C                       	smpsAlterNote       $0C
00094B2B E701                       	dc.b	smpsNoAttack, $01
00094B2D E10F                       	smpsAlterNote       $0F
00094B2F E701                       	dc.b	smpsNoAttack, $01
00094B31 E113                       	smpsAlterNote       $13
00094B33 E701                       	dc.b	smpsNoAttack, $01
00094B35 E10F                       	smpsAlterNote       $0F
00094B37 E701                       	dc.b	smpsNoAttack, $01
00094B39 E109                       	smpsAlterNote       $09
00094B3B E701                       	dc.b	smpsNoAttack, $01
00094B3D E108                       	smpsAlterNote       $08
00094B3F E701                       	dc.b	smpsNoAttack, $01
00094B41 E10C                       	smpsAlterNote       $0C
00094B43 E701                       	dc.b	smpsNoAttack, $01
00094B45 E112                       	smpsAlterNote       $12
00094B47 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094B4B E10C                       	smpsAlterNote       $0C
00094B4D E701                       	dc.b	smpsNoAttack, $01
00094B4F E109                       	smpsAlterNote       $09
00094B51 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094B55 E10F                       	smpsAlterNote       $0F
00094B57 E701                       	dc.b	smpsNoAttack, $01
00094B59 E113                       	smpsAlterNote       $13
00094B5B E701                       	dc.b	smpsNoAttack, $01
00094B5D E112                       	smpsAlterNote       $12
00094B5F E701                       	dc.b	smpsNoAttack, $01
00094B61 E10C                       	smpsAlterNote       $0C
00094B63 E701                       	dc.b	smpsNoAttack, $01
00094B65 E108                       	smpsAlterNote       $08
00094B67 E701                       	dc.b	smpsNoAttack, $01
00094B69 E10C                       	smpsAlterNote       $0C
00094B6B E701                       	dc.b	smpsNoAttack, $01
00094B6D E10F                       	smpsAlterNote       $0F
00094B6F E701                       	dc.b	smpsNoAttack, $01
00094B71 E113                       	smpsAlterNote       $13
00094B73 E701                       	dc.b	smpsNoAttack, $01
00094B75 E10F                       	smpsAlterNote       $0F
00094B77 E701                       	dc.b	smpsNoAttack, $01
00094B79 E109                       	smpsAlterNote       $09
00094B7B E701                       	dc.b	smpsNoAttack, $01
00094B7D E108                       	smpsAlterNote       $08
00094B7F E701                       	dc.b	smpsNoAttack, $01
00094B81 E10C                       	smpsAlterNote       $0C
00094B83 E701                       	dc.b	smpsNoAttack, $01
00094B85 E112                       	smpsAlterNote       $12
00094B87 E701                       	dc.b	smpsNoAttack, $01
00094B89 E113                       	smpsAlterNote       $13
00094B8B 800F                       	dc.b	nRst, $0F
00094B8D E10B                       	smpsAlterNote       $0B
00094B8F BF03                       	dc.b	nD5, $03
00094B91 E10C                       	smpsAlterNote       $0C
00094B93 C103 8001                  	dc.b	nE5, $03, nRst, $01
00094B97 E10D                       	smpsAlterNote       $0D
00094B99 C202 8001 C403 C607        	dc.b	nF5, $02, nRst, $01, nG5, $03, nA5, $07
00094BA1 E10B                       	smpsAlterNote       $0B
00094BA3 BF03 8001 C90D CB03 8001   	dc.b	nD5, $03, nRst, $01, nC6, $0D, nD6, $03, nRst, $01
00094BAD E110                       	smpsAlterNote       $10
00094BAF C704                       	dc.b	nBb5, $04
00094BB1 E10F                       	smpsAlterNote       $0F
00094BB3 C604 8001                  	dc.b	nA5, $04, nRst, $01
00094BB7 E10D                       	smpsAlterNote       $0D
00094BB9 C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
00094BBF E109                       	smpsAlterNote       $09
00094BC1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094BC5 E10F                       	smpsAlterNote       $0F
00094BC7 E701                       	dc.b	smpsNoAttack, $01
00094BC9 E112                       	smpsAlterNote       $12
00094BCB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094BCF E10C                       	smpsAlterNote       $0C
00094BD1 E701                       	dc.b	smpsNoAttack, $01
00094BD3 E108                       	smpsAlterNote       $08
00094BD5 E701                       	dc.b	smpsNoAttack, $01
00094BD7 E109                       	smpsAlterNote       $09
00094BD9 E701                       	dc.b	smpsNoAttack, $01
00094BDB E10F                       	smpsAlterNote       $0F
00094BDD E701                       	dc.b	smpsNoAttack, $01
00094BDF E113                       	smpsAlterNote       $13
00094BE1 E701                       	dc.b	smpsNoAttack, $01
00094BE3 E10F                       	smpsAlterNote       $0F
00094BE5 E701                       	dc.b	smpsNoAttack, $01
00094BE7 E10C                       	smpsAlterNote       $0C
00094BE9 E701                       	dc.b	smpsNoAttack, $01
00094BEB E108                       	smpsAlterNote       $08
00094BED E701                       	dc.b	smpsNoAttack, $01
00094BEF E10C                       	smpsAlterNote       $0C
00094BF1 E701                       	dc.b	smpsNoAttack, $01
00094BF3 E112                       	smpsAlterNote       $12
00094BF5 E701                       	dc.b	smpsNoAttack, $01
00094BF7 E113                       	smpsAlterNote       $13
00094BF9 E701                       	dc.b	smpsNoAttack, $01
00094BFB E10F                       	smpsAlterNote       $0F
00094BFD E701                       	dc.b	smpsNoAttack, $01
00094BFF E109                       	smpsAlterNote       $09
00094C01 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094C05 E10C                       	smpsAlterNote       $0C
00094C07 E701                       	dc.b	smpsNoAttack, $01
00094C09 E112                       	smpsAlterNote       $12
00094C0B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094C0F E10C                       	smpsAlterNote       $0C
00094C11 E701                       	dc.b	smpsNoAttack, $01
00094C13 E109                       	smpsAlterNote       $09
00094C15 E701                       	dc.b	smpsNoAttack, $01
00094C17 E10D                       	smpsAlterNote       $0D
00094C19 C401 8001                  	dc.b	nG5, $01, nRst, $01
00094C1D E10F                       	smpsAlterNote       $0F
00094C1F C501 8001 C60D C604 8001   	dc.b	nAb5, $01, nRst, $01, nA5, $0D, nA5, $04, nRst, $01
00094C29 E10D                       	smpsAlterNote       $0D
00094C2B C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
00094C31 E10B                       	smpsAlterNote       $0B
00094C33 BF0D                       	dc.b	nD5, $0D
00094C35 E108                       	smpsAlterNote       $08
00094C37 E701                       	dc.b	smpsNoAttack, $01
00094C39 E104                       	smpsAlterNote       $04
00094C3B E701                       	dc.b	smpsNoAttack, $01
00094C3D E108                       	smpsAlterNote       $08
00094C3F E701                       	dc.b	smpsNoAttack, $01
00094C41 E10B                       	smpsAlterNote       $0B
00094C43 E701                       	dc.b	smpsNoAttack, $01
00094C45 E10F                       	smpsAlterNote       $0F
00094C47 E701                       	dc.b	smpsNoAttack, $01
00094C49 E10B                       	smpsAlterNote       $0B
00094C4B E701                       	dc.b	smpsNoAttack, $01
00094C4D E105                       	smpsAlterNote       $05
00094C4F E701                       	dc.b	smpsNoAttack, $01
00094C51 E104                       	smpsAlterNote       $04
00094C53 E701                       	dc.b	smpsNoAttack, $01
00094C55 E108                       	smpsAlterNote       $08
00094C57 E701                       	dc.b	smpsNoAttack, $01
00094C59 E10E                       	smpsAlterNote       $0E
00094C5B E701                       	dc.b	smpsNoAttack, $01
00094C5D E10F                       	smpsAlterNote       $0F
00094C5F 8001                       	dc.b	nRst, $01
00094C61 E10C                       	smpsAlterNote       $0C
00094C63 C101                       	dc.b	nE5, $01
00094C65 E10D                       	smpsAlterNote       $0D
00094C67 C201 C401 C607             	dc.b	nF5, $01, nG5, $01, nA5, $07
00094C6D E10F                       	smpsAlterNote       $0F
00094C6F C606 8001                  	dc.b	nA5, $06, nRst, $01
00094C73 E10C                       	smpsAlterNote       $0C
00094C75 CD06 8001                  	dc.b	nE6, $06, nRst, $01
00094C79 E10D                       	smpsAlterNote       $0D
00094C7B CE06 8001                  	dc.b	nF6, $06, nRst, $01
00094C7F E10C                       	smpsAlterNote       $0C
00094C81 CD03                       	dc.b	nE6, $03
00094C83 E10A                       	smpsAlterNote       $0A
00094C85 C903 8001                  	dc.b	nC6, $03, nRst, $01
00094C89 E10D                       	smpsAlterNote       $0D
00094C8B C402 8001 C70D E701        	dc.b	nG5, $02, nRst, $01, nBb5, $0D, smpsNoAttack, $01
00094C93 E109                       	smpsAlterNote       $09
00094C95 E701                       	dc.b	smpsNoAttack, $01
00094C97 E10D                       	smpsAlterNote       $0D
00094C99 E701                       	dc.b	smpsNoAttack, $01
00094C9B E110                       	smpsAlterNote       $10
00094C9D E701                       	dc.b	smpsNoAttack, $01
00094C9F E114                       	smpsAlterNote       $14
00094CA1 E701                       	dc.b	smpsNoAttack, $01
00094CA3 E110                       	smpsAlterNote       $10
00094CA5 E701                       	dc.b	smpsNoAttack, $01
00094CA7 E10A                       	smpsAlterNote       $0A
00094CA9 E701                       	dc.b	smpsNoAttack, $01
00094CAB E109                       	smpsAlterNote       $09
00094CAD E701                       	dc.b	smpsNoAttack, $01
00094CAF E10D                       	smpsAlterNote       $0D
00094CB1 E701                       	dc.b	smpsNoAttack, $01
00094CB3 E113                       	smpsAlterNote       $13
00094CB5 E701                       	dc.b	smpsNoAttack, $01
00094CB7 E114                       	smpsAlterNote       $14
00094CB9 8001                       	dc.b	nRst, $01
00094CBB E10F                       	smpsAlterNote       $0F
00094CBD C606 8001 C50D             	dc.b	nA5, $06, nRst, $01, nAb5, $0D
00094CC3 E10C                       	smpsAlterNote       $0C
00094CC5 E701                       	dc.b	smpsNoAttack, $01
00094CC7 E108                       	smpsAlterNote       $08
00094CC9 E701                       	dc.b	smpsNoAttack, $01
00094CCB E10C                       	smpsAlterNote       $0C
00094CCD E701                       	dc.b	smpsNoAttack, $01
00094CCF E112                       	smpsAlterNote       $12
00094CD1 E701                       	dc.b	smpsNoAttack, $01
00094CD3 E113                       	smpsAlterNote       $13
00094CD5 E701                       	dc.b	smpsNoAttack, $01
00094CD7 E10F                       	smpsAlterNote       $0F
00094CD9 E701                       	dc.b	smpsNoAttack, $01
00094CDB E109                       	smpsAlterNote       $09
00094CDD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094CE1 E10C                       	smpsAlterNote       $0C
00094CE3 E701                       	dc.b	smpsNoAttack, $01
00094CE5 E112                       	smpsAlterNote       $12
00094CE7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094CEB E10C                       	smpsAlterNote       $0C
00094CED E701                       	dc.b	smpsNoAttack, $01
00094CEF E109                       	smpsAlterNote       $09
00094CF1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094CF5 E10F                       	smpsAlterNote       $0F
00094CF7 E701                       	dc.b	smpsNoAttack, $01
00094CF9 E113                       	smpsAlterNote       $13
00094CFB E701                       	dc.b	smpsNoAttack, $01
00094CFD E112                       	smpsAlterNote       $12
00094CFF E701                       	dc.b	smpsNoAttack, $01
00094D01 E10C                       	smpsAlterNote       $0C
00094D03 E701                       	dc.b	smpsNoAttack, $01
00094D05 E108                       	smpsAlterNote       $08
00094D07 E701                       	dc.b	smpsNoAttack, $01
00094D09 E10C                       	smpsAlterNote       $0C
00094D0B E701                       	dc.b	smpsNoAttack, $01
00094D0D E10F                       	smpsAlterNote       $0F
00094D0F E701                       	dc.b	smpsNoAttack, $01
00094D11 E113                       	smpsAlterNote       $13
00094D13 E701                       	dc.b	smpsNoAttack, $01
00094D15 E10F                       	smpsAlterNote       $0F
00094D17 E701                       	dc.b	smpsNoAttack, $01
00094D19 E109                       	smpsAlterNote       $09
00094D1B E701                       	dc.b	smpsNoAttack, $01
00094D1D E108                       	smpsAlterNote       $08
00094D1F E701                       	dc.b	smpsNoAttack, $01
00094D21 E10C                       	smpsAlterNote       $0C
00094D23 E701                       	dc.b	smpsNoAttack, $01
00094D25 E112                       	smpsAlterNote       $12
00094D27 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094D2B E10F                       	smpsAlterNote       $0F
00094D2D E701                       	dc.b	smpsNoAttack, $01
00094D2F E109                       	smpsAlterNote       $09
00094D31 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094D35 E10F                       	smpsAlterNote       $0F
00094D37 E701                       	dc.b	smpsNoAttack, $01
00094D39 E113                       	smpsAlterNote       $13
00094D3B E701                       	dc.b	smpsNoAttack, $01
00094D3D E112                       	smpsAlterNote       $12
00094D3F E701                       	dc.b	smpsNoAttack, $01
00094D41 E10C                       	smpsAlterNote       $0C
00094D43 E701                       	dc.b	smpsNoAttack, $01
00094D45 E108                       	smpsAlterNote       $08
00094D47 E701                       	dc.b	smpsNoAttack, $01
00094D49 E10C                       	smpsAlterNote       $0C
00094D4B E701                       	dc.b	smpsNoAttack, $01
00094D4D E10F                       	smpsAlterNote       $0F
00094D4F E701                       	dc.b	smpsNoAttack, $01
00094D51 E113                       	smpsAlterNote       $13
00094D53 E701                       	dc.b	smpsNoAttack, $01
00094D55 E10F                       	smpsAlterNote       $0F
00094D57 E701                       	dc.b	smpsNoAttack, $01
00094D59 E109                       	smpsAlterNote       $09
00094D5B E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00094D5F E10F                       	smpsAlterNote       $0F
00094D61 C60D                       	dc.b	nA5, $0D
00094D63 E109                       	smpsAlterNote       $09
00094D65 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094D69 E10C                       	smpsAlterNote       $0C
00094D6B E701                       	dc.b	smpsNoAttack, $01
00094D6D E112                       	smpsAlterNote       $12
00094D6F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094D73 E10C                       	smpsAlterNote       $0C
00094D75 E701                       	dc.b	smpsNoAttack, $01
00094D77 E109                       	smpsAlterNote       $09
00094D79 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094D7D E10F                       	smpsAlterNote       $0F
00094D7F E701                       	dc.b	smpsNoAttack, $01
00094D81 E113                       	smpsAlterNote       $13
00094D83 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00094D89 E10D                       	smpsAlterNote       $0D
00094D8B C206 C203 8001 C203        	dc.b	nF5, $06, nF5, $03, nRst, $01, nF5, $03
00094D93 E10C                       	smpsAlterNote       $0C
00094D95 C103 800E                  	dc.b	nE5, $03, nRst, $0E
00094D9B E6FF                       	smpsAlterVol        $FF
00094D9D E10B                       	smpsAlterNote       $0B
00094D9F BF03 8001                  	dc.b	nD5, $03, nRst, $01
00094DA3 E10C                       	smpsAlterNote       $0C
00094DA5 C103                       	dc.b	nE5, $03
00094DA7 E10D                       	smpsAlterNote       $0D
00094DA9 C203 8001 C403 C606 8001   	dc.b	nF5, $03, nRst, $01, nG5, $03, nA5, $06, nRst, $01
00094DB3 E10B                       	smpsAlterNote       $0B
00094DB5 BF03 C90D                  	dc.b	nD5, $03, nC6, $0D
00094DB9 E107                       	smpsAlterNote       $07
00094DBB E701                       	dc.b	smpsNoAttack, $01
00094DBD E104                       	smpsAlterNote       $04
00094DBF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094DC3 E10A                       	smpsAlterNote       $0A
00094DC5 E701                       	dc.b	smpsNoAttack, $01
00094DC7 E10D                       	smpsAlterNote       $0D
00094DC9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094DCD E107                       	smpsAlterNote       $07
00094DCF E701                       	dc.b	smpsNoAttack, $01
00094DD1 E104                       	smpsAlterNote       $04
00094DD3 8001                       	dc.b	nRst, $01
00094DD5 E110                       	smpsAlterNote       $10
00094DD7 C703                       	dc.b	nBb5, $03
00094DD9 E10F                       	smpsAlterNote       $0F
00094DDB C603 8001                  	dc.b	nA5, $03, nRst, $01
00094DDF E10D                       	smpsAlterNote       $0D
00094DE1 C403 C60D                  	dc.b	nG5, $03, nA5, $0D
00094DE5 E10C                       	smpsAlterNote       $0C
00094DE7 E701                       	dc.b	smpsNoAttack, $01
00094DE9 E108                       	smpsAlterNote       $08
00094DEB E701                       	dc.b	smpsNoAttack, $01
00094DED E109                       	smpsAlterNote       $09
00094DEF E701                       	dc.b	smpsNoAttack, $01
00094DF1 E10F                       	smpsAlterNote       $0F
00094DF3 E701                       	dc.b	smpsNoAttack, $01
00094DF5 E113                       	smpsAlterNote       $13
00094DF7 E701                       	dc.b	smpsNoAttack, $01
00094DF9 E10F                       	smpsAlterNote       $0F
00094DFB E701                       	dc.b	smpsNoAttack, $01
00094DFD E10C                       	smpsAlterNote       $0C
00094DFF E701                       	dc.b	smpsNoAttack, $01
00094E01 E108                       	smpsAlterNote       $08
00094E03 E701                       	dc.b	smpsNoAttack, $01
00094E05 E10C                       	smpsAlterNote       $0C
00094E07 E701                       	dc.b	smpsNoAttack, $01
00094E09 E112                       	smpsAlterNote       $12
00094E0B E701                       	dc.b	smpsNoAttack, $01
00094E0D E113                       	smpsAlterNote       $13
00094E0F E701                       	dc.b	smpsNoAttack, $01
00094E11 E10F                       	smpsAlterNote       $0F
00094E13 E701                       	dc.b	smpsNoAttack, $01
00094E15 E109                       	smpsAlterNote       $09
00094E17 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094E1B E10C                       	smpsAlterNote       $0C
00094E1D E701                       	dc.b	smpsNoAttack, $01
00094E1F E112                       	smpsAlterNote       $12
00094E21 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094E25 E10C                       	smpsAlterNote       $0C
00094E27 E701                       	dc.b	smpsNoAttack, $01
00094E29 E109                       	smpsAlterNote       $09
00094E2B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094E2F E10F                       	smpsAlterNote       $0F
00094E31 E701                       	dc.b	smpsNoAttack, $01
00094E33 E113                       	smpsAlterNote       $13
00094E35 E701                       	dc.b	smpsNoAttack, $01
00094E37 E112                       	smpsAlterNote       $12
00094E39 E701                       	dc.b	smpsNoAttack, $01
00094E3B E10C                       	smpsAlterNote       $0C
00094E3D E701                       	dc.b	smpsNoAttack, $01
00094E3F E108                       	smpsAlterNote       $08
00094E41 E701                       	dc.b	smpsNoAttack, $01
00094E43 E10C                       	smpsAlterNote       $0C
00094E45 E701                       	dc.b	smpsNoAttack, $01
00094E47 E10F                       	smpsAlterNote       $0F
00094E49 E701                       	dc.b	smpsNoAttack, $01
00094E4B E113                       	smpsAlterNote       $13
00094E4D E701                       	dc.b	smpsNoAttack, $01
00094E4F E10F                       	smpsAlterNote       $0F
00094E51 BA03 8001                  	dc.b	nA4, $03, nRst, $01
00094E55 E110                       	smpsAlterNote       $10
00094E57 BB03                       	dc.b	nBb4, $03
00094E59 E10F                       	smpsAlterNote       $0F
00094E5B BA06 8001                  	dc.b	nA4, $06, nRst, $01
00094E5F E10B                       	smpsAlterNote       $0B
00094E61 BF03                       	dc.b	nD5, $03
00094E63 E10C                       	smpsAlterNote       $0C
00094E65 C103 8001                  	dc.b	nE5, $03, nRst, $01
00094E69 E10D                       	smpsAlterNote       $0D
00094E6B C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
00094E75 E10B                       	smpsAlterNote       $0B
00094E77 BF02 8001 C90D 8001 CB02+  	dc.b	nD5, $02, nRst, $01, nC6, $0D, nRst, $01, nD6, $02, nRst, $01
00094E83 E110                       	smpsAlterNote       $10
00094E85 C704 8001                  	dc.b	nBb5, $04, nRst, $01
00094E89 E10F                       	smpsAlterNote       $0F
00094E8B C604                       	dc.b	nA5, $04
00094E8D E10D                       	smpsAlterNote       $0D
00094E8F C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
00094E95 E109                       	smpsAlterNote       $09
00094E97 E701                       	dc.b	smpsNoAttack, $01
00094E99 E108                       	smpsAlterNote       $08
00094E9B E701                       	dc.b	smpsNoAttack, $01
00094E9D E10C                       	smpsAlterNote       $0C
00094E9F E701                       	dc.b	smpsNoAttack, $01
00094EA1 E112                       	smpsAlterNote       $12
00094EA3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094EA7 E10F                       	smpsAlterNote       $0F
00094EA9 E701                       	dc.b	smpsNoAttack, $01
00094EAB E109                       	smpsAlterNote       $09
00094EAD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094EB1 E10F                       	smpsAlterNote       $0F
00094EB3 E701                       	dc.b	smpsNoAttack, $01
00094EB5 E112                       	smpsAlterNote       $12
00094EB7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094EBB E10C                       	smpsAlterNote       $0C
00094EBD E701                       	dc.b	smpsNoAttack, $01
00094EBF E108                       	smpsAlterNote       $08
00094EC1 E701                       	dc.b	smpsNoAttack, $01
00094EC3 E109                       	smpsAlterNote       $09
00094EC5 E701                       	dc.b	smpsNoAttack, $01
00094EC7 E10F                       	smpsAlterNote       $0F
00094EC9 E701                       	dc.b	smpsNoAttack, $01
00094ECB E113                       	smpsAlterNote       $13
00094ECD E701                       	dc.b	smpsNoAttack, $01
00094ECF E10F                       	smpsAlterNote       $0F
00094ED1 E701                       	dc.b	smpsNoAttack, $01
00094ED3 E10C                       	smpsAlterNote       $0C
00094ED5 E701                       	dc.b	smpsNoAttack, $01
00094ED7 E108                       	smpsAlterNote       $08
00094ED9 E701                       	dc.b	smpsNoAttack, $01
00094EDB E10C                       	smpsAlterNote       $0C
00094EDD E701                       	dc.b	smpsNoAttack, $01
00094EDF E112                       	smpsAlterNote       $12
00094EE1 E701                       	dc.b	smpsNoAttack, $01
00094EE3 E113                       	smpsAlterNote       $13
00094EE5 E701                       	dc.b	smpsNoAttack, $01
00094EE7 E10F                       	smpsAlterNote       $0F
00094EE9 E701                       	dc.b	smpsNoAttack, $01
00094EEB E109                       	smpsAlterNote       $09
00094EED E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094EF1 E10C                       	smpsAlterNote       $0C
00094EF3 E701                       	dc.b	smpsNoAttack, $01
00094EF5 E112                       	smpsAlterNote       $12
00094EF7 E701                       	dc.b	smpsNoAttack, $01
00094EF9 E113                       	smpsAlterNote       $13
00094EFB 8001                       	dc.b	nRst, $01
00094EFD E10F                       	smpsAlterNote       $0F
00094EFF C602 C602 C602 8001 C601+  	dc.b	nA5, $02, nA5, $02, nA5, $02, nRst, $01, nA5, $01, nRst, $01
00094F0B C602 C602 8001 C604        	dc.b	nA5, $02, nA5, $02, nRst, $01, nA5, $04
00094F13 E10D                       	smpsAlterNote       $0D
00094F15 C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
00094F1B E10B                       	smpsAlterNote       $0B
00094F1D BF0D                       	dc.b	nD5, $0D
00094F1F E108                       	smpsAlterNote       $08
00094F21 E701                       	dc.b	smpsNoAttack, $01
00094F23 E104                       	smpsAlterNote       $04
00094F25 E701                       	dc.b	smpsNoAttack, $01
00094F27 E105                       	smpsAlterNote       $05
00094F29 E701                       	dc.b	smpsNoAttack, $01
00094F2B E10B                       	smpsAlterNote       $0B
00094F2D E701                       	dc.b	smpsNoAttack, $01
00094F2F E10F                       	smpsAlterNote       $0F
00094F31 E701                       	dc.b	smpsNoAttack, $01
00094F33 E10B                       	smpsAlterNote       $0B
00094F35 E701                       	dc.b	smpsNoAttack, $01
00094F37 E108                       	smpsAlterNote       $08
00094F39 E701                       	dc.b	smpsNoAttack, $01
00094F3B E104                       	smpsAlterNote       $04
00094F3D E701                       	dc.b	smpsNoAttack, $01
00094F3F E108                       	smpsAlterNote       $08
00094F41 E701                       	dc.b	smpsNoAttack, $01
00094F43 E10E                       	smpsAlterNote       $0E
00094F45 E701                       	dc.b	smpsNoAttack, $01
00094F47 E10F                       	smpsAlterNote       $0F
00094F49 E701                       	dc.b	smpsNoAttack, $01
00094F4B E10C                       	smpsAlterNote       $0C
00094F4D C101                       	dc.b	nE5, $01
00094F4F E10D                       	smpsAlterNote       $0D
00094F51 C201 C401 8001 C606        	dc.b	nF5, $01, nG5, $01, nRst, $01, nA5, $06
00094F59 E10F                       	smpsAlterNote       $0F
00094F5B C607                       	dc.b	nA5, $07
00094F5D E10C                       	smpsAlterNote       $0C
00094F5F CD07                       	dc.b	nE6, $07
00094F61 E10D                       	smpsAlterNote       $0D
00094F63 CE06 8001                  	dc.b	nF6, $06, nRst, $01
00094F67 E10C                       	smpsAlterNote       $0C
00094F69 CD03                       	dc.b	nE6, $03
00094F6B E10A                       	smpsAlterNote       $0A
00094F6D C903 8001                  	dc.b	nC6, $03, nRst, $01
00094F71 E10D                       	smpsAlterNote       $0D
00094F73 C403 C70D E701             	dc.b	nG5, $03, nBb5, $0D, smpsNoAttack, $01
00094F79 E10A                       	smpsAlterNote       $0A
00094F7B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094F7F E110                       	smpsAlterNote       $10
00094F81 E701                       	dc.b	smpsNoAttack, $01
00094F83 E114                       	smpsAlterNote       $14
00094F85 E701                       	dc.b	smpsNoAttack, $01
00094F87 E113                       	smpsAlterNote       $13
00094F89 E701                       	dc.b	smpsNoAttack, $01
00094F8B E10D                       	smpsAlterNote       $0D
00094F8D E701                       	dc.b	smpsNoAttack, $01
00094F8F E109                       	smpsAlterNote       $09
00094F91 E701                       	dc.b	smpsNoAttack, $01
00094F93 E10D                       	smpsAlterNote       $0D
00094F95 E701                       	dc.b	smpsNoAttack, $01
00094F97 E110                       	smpsAlterNote       $10
00094F99 E701                       	dc.b	smpsNoAttack, $01
00094F9B E114                       	smpsAlterNote       $14
00094F9D E701                       	dc.b	smpsNoAttack, $01
00094F9F E10F                       	smpsAlterNote       $0F
00094FA1 C607 C50D                  	dc.b	nA5, $07, nAb5, $0D
00094FA5 E10C                       	smpsAlterNote       $0C
00094FA7 E701                       	dc.b	smpsNoAttack, $01
00094FA9 E108                       	smpsAlterNote       $08
00094FAB E701                       	dc.b	smpsNoAttack, $01
00094FAD E10C                       	smpsAlterNote       $0C
00094FAF E701                       	dc.b	smpsNoAttack, $01
00094FB1 E10F                       	smpsAlterNote       $0F
00094FB3 E701                       	dc.b	smpsNoAttack, $01
00094FB5 E113                       	smpsAlterNote       $13
00094FB7 E701                       	dc.b	smpsNoAttack, $01
00094FB9 E10F                       	smpsAlterNote       $0F
00094FBB E701                       	dc.b	smpsNoAttack, $01
00094FBD E109                       	smpsAlterNote       $09
00094FBF E701                       	dc.b	smpsNoAttack, $01
00094FC1 E108                       	smpsAlterNote       $08
00094FC3 E701                       	dc.b	smpsNoAttack, $01
00094FC5 E10C                       	smpsAlterNote       $0C
00094FC7 E701                       	dc.b	smpsNoAttack, $01
00094FC9 E112                       	smpsAlterNote       $12
00094FCB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094FCF E10F                       	smpsAlterNote       $0F
00094FD1 E701                       	dc.b	smpsNoAttack, $01
00094FD3 E109                       	smpsAlterNote       $09
00094FD5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094FD9 E10F                       	smpsAlterNote       $0F
00094FDB E701                       	dc.b	smpsNoAttack, $01
00094FDD E112                       	smpsAlterNote       $12
00094FDF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094FE3 E10C                       	smpsAlterNote       $0C
00094FE5 E701                       	dc.b	smpsNoAttack, $01
00094FE7 E108                       	smpsAlterNote       $08
00094FE9 E701                       	dc.b	smpsNoAttack, $01
00094FEB E109                       	smpsAlterNote       $09
00094FED E701                       	dc.b	smpsNoAttack, $01
00094FEF E10F                       	smpsAlterNote       $0F
00094FF1 E701                       	dc.b	smpsNoAttack, $01
00094FF3 E113                       	smpsAlterNote       $13
00094FF5 E701                       	dc.b	smpsNoAttack, $01
00094FF7 E10F                       	smpsAlterNote       $0F
00094FF9 E701                       	dc.b	smpsNoAttack, $01
00094FFB E10C                       	smpsAlterNote       $0C
00094FFD E701                       	dc.b	smpsNoAttack, $01
00094FFF E108                       	smpsAlterNote       $08
00095001 E701                       	dc.b	smpsNoAttack, $01
00095003 E10C                       	smpsAlterNote       $0C
00095005 E701                       	dc.b	smpsNoAttack, $01
00095007 E112                       	smpsAlterNote       $12
00095009 E701                       	dc.b	smpsNoAttack, $01
0009500B E113                       	smpsAlterNote       $13
0009500D E701                       	dc.b	smpsNoAttack, $01
0009500F E10F                       	smpsAlterNote       $0F
00095011 E701                       	dc.b	smpsNoAttack, $01
00095013 E109                       	smpsAlterNote       $09
00095015 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095019 E10C                       	smpsAlterNote       $0C
0009501B E701                       	dc.b	smpsNoAttack, $01
0009501D E112                       	smpsAlterNote       $12
0009501F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095023 E10C                       	smpsAlterNote       $0C
00095025 E701                       	dc.b	smpsNoAttack, $01
00095027 E109                       	smpsAlterNote       $09
00095029 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009502D E10F                       	smpsAlterNote       $0F
0009502F E701                       	dc.b	smpsNoAttack, $01
00095031 E113                       	smpsAlterNote       $13
00095033 E701                       	dc.b	smpsNoAttack, $01
00095035 E112                       	smpsAlterNote       $12
00095037 E701                       	dc.b	smpsNoAttack, $01
00095039 E10C                       	smpsAlterNote       $0C
0009503B E701                       	dc.b	smpsNoAttack, $01
0009503D E109                       	smpsAlterNote       $09
0009503F 8001                       	dc.b	nRst, $01
00095041 E10F                       	smpsAlterNote       $0F
00095043 C60D                       	dc.b	nA5, $0D
00095045 E10C                       	smpsAlterNote       $0C
00095047 E701                       	dc.b	smpsNoAttack, $01
00095049 E108                       	smpsAlterNote       $08
0009504B E701                       	dc.b	smpsNoAttack, $01
0009504D E10C                       	smpsAlterNote       $0C
0009504F E701                       	dc.b	smpsNoAttack, $01
00095051 E112                       	smpsAlterNote       $12
00095053 E701                       	dc.b	smpsNoAttack, $01
00095055 E113                       	smpsAlterNote       $13
00095057 E701                       	dc.b	smpsNoAttack, $01
00095059 E10F                       	smpsAlterNote       $0F
0009505B E701                       	dc.b	smpsNoAttack, $01
0009505D E109                       	smpsAlterNote       $09
0009505F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095063 E10C                       	smpsAlterNote       $0C
00095065 E701                       	dc.b	smpsNoAttack, $01
00095067 E112                       	smpsAlterNote       $12
00095069 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009506D E10C                       	smpsAlterNote       $0C
0009506F E701                       	dc.b	smpsNoAttack, $01
00095071 E109                       	smpsAlterNote       $09
00095073 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095077 E10F                       	smpsAlterNote       $0F
00095079 E701                       	dc.b	smpsNoAttack, $01
0009507B E113                       	smpsAlterNote       $13
0009507D E701                       	dc.b	smpsNoAttack, $01
0009507F E112                       	smpsAlterNote       $12
00095081 E701                       	dc.b	smpsNoAttack, $01
00095083 E10C                       	smpsAlterNote       $0C
00095085 E701                       	dc.b	smpsNoAttack, $01
00095087 E108                       	smpsAlterNote       $08
00095089 E701                       	dc.b	smpsNoAttack, $01
0009508B E10C                       	smpsAlterNote       $0C
0009508D E701                       	dc.b	smpsNoAttack, $01
0009508F E10F                       	smpsAlterNote       $0F
00095091 E701                       	dc.b	smpsNoAttack, $01
00095093 E113                       	smpsAlterNote       $13
00095095 E701                       	dc.b	smpsNoAttack, $01
00095097 E10F                       	smpsAlterNote       $0F
00095099 E701                       	dc.b	smpsNoAttack, $01
0009509B E109                       	smpsAlterNote       $09
0009509D E701                       	dc.b	smpsNoAttack, $01
0009509F E108                       	smpsAlterNote       $08
000950A1 E701                       	dc.b	smpsNoAttack, $01
000950A3 E10C                       	smpsAlterNote       $0C
000950A5 E701                       	dc.b	smpsNoAttack, $01
000950A7 E112                       	smpsAlterNote       $12
000950A9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000950AD E10F                       	smpsAlterNote       $0F
000950AF E701                       	dc.b	smpsNoAttack, $01
000950B1 E109                       	smpsAlterNote       $09
000950B3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000950B7 E10F                       	smpsAlterNote       $0F
000950B9 E701                       	dc.b	smpsNoAttack, $01
000950BB E112                       	smpsAlterNote       $12
000950BD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000950C1 E10C                       	smpsAlterNote       $0C
000950C3 E701                       	dc.b	smpsNoAttack, $01
000950C5 E108                       	smpsAlterNote       $08
000950C7 E701                       	dc.b	smpsNoAttack, $01
000950C9 E10C                       	smpsAlterNote       $0C
000950CB E701                       	dc.b	smpsNoAttack, $01
000950CD E10F                       	smpsAlterNote       $0F
000950CF E701                       	dc.b	smpsNoAttack, $01
000950D1 E113                       	smpsAlterNote       $13
000950D3 E701                       	dc.b	smpsNoAttack, $01
000950D5 E10F                       	smpsAlterNote       $0F
000950D7 E701                       	dc.b	smpsNoAttack, $01
000950D9 E109                       	smpsAlterNote       $09
000950DB E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000950E1 E601                       	smpsAlterVol        $01
000950E3 E10F                       	smpsAlterNote       $0F
000950E5 C604                       	dc.b	nA5, $04
000950E7 E10D                       	smpsAlterNote       $0D
000950E9 C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
000950EF E10B                       	smpsAlterNote       $0B
000950F1 BF0A 8001 BF02 8001        	dc.b	nD5, $0A, nRst, $01, nD5, $02, nRst, $01
000950F9 E10F                       	smpsAlterNote       $0F
000950FB C604 8001                  	dc.b	nA5, $04, nRst, $01
000950FF E10D                       	smpsAlterNote       $0D
00095101 C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
00095107 E10C                       	smpsAlterNote       $0C
00095109 C109 8001 C103             	dc.b	nE5, $09, nRst, $01, nE5, $03
0009510F E10A                       	smpsAlterNote       $0A
00095111 C904 8001                  	dc.b	nC6, $04, nRst, $01
00095115 E110                       	smpsAlterNote       $10
00095117 C704 8001                  	dc.b	nBb5, $04, nRst, $01
0009511B E10F                       	smpsAlterNote       $0F
0009511D C604                       	dc.b	nA5, $04
0009511F E10D                       	smpsAlterNote       $0D
00095121 C403 8001 C202 8001 C403+  	dc.b	nG5, $03, nRst, $01, nF5, $02, nRst, $01, nG5, $03, nA5, $0E
0009512D E109                       	smpsAlterNote       $09
0009512F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095133 E10F                       	smpsAlterNote       $0F
00095135 E701                       	dc.b	smpsNoAttack, $01
00095137 E112                       	smpsAlterNote       $12
00095139 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009513D E10C                       	smpsAlterNote       $0C
0009513F E701                       	dc.b	smpsNoAttack, $01
00095141 E108                       	smpsAlterNote       $08
00095143 E701                       	dc.b	smpsNoAttack, $01
00095145 E10C                       	smpsAlterNote       $0C
00095147 E701                       	dc.b	smpsNoAttack, $01
00095149 E10F                       	smpsAlterNote       $0F
0009514B E701                       	dc.b	smpsNoAttack, $01
0009514D E113                       	smpsAlterNote       $13
0009514F E701                       	dc.b	smpsNoAttack, $01
00095151 E10D                       	smpsAlterNote       $0D
00095153 C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
00095159 E10C                       	smpsAlterNote       $0C
0009515B C10D                       	dc.b	nE5, $0D
0009515D E109                       	smpsAlterNote       $09
0009515F E701                       	dc.b	smpsNoAttack, $01
00095161 E105                       	smpsAlterNote       $05
00095163 E701                       	dc.b	smpsNoAttack, $01
00095165 E106                       	smpsAlterNote       $06
00095167 E701                       	dc.b	smpsNoAttack, $01
00095169 E10C                       	smpsAlterNote       $0C
0009516B E701                       	dc.b	smpsNoAttack, $01
0009516D E110                       	smpsAlterNote       $10
0009516F E701                       	dc.b	smpsNoAttack, $01
00095171 E10C                       	smpsAlterNote       $0C
00095173 E701                       	dc.b	smpsNoAttack, $01
00095175 E109                       	smpsAlterNote       $09
00095177 E701                       	dc.b	smpsNoAttack, $01
00095179 E105                       	smpsAlterNote       $05
0009517B E701                       	dc.b	smpsNoAttack, $01
0009517D E109                       	smpsAlterNote       $09
0009517F E701                       	dc.b	smpsNoAttack, $01
00095181 E10F                       	smpsAlterNote       $0F
00095183 E701                       	dc.b	smpsNoAttack, $01
00095185 E110                       	smpsAlterNote       $10
00095187 E701                       	dc.b	smpsNoAttack, $01
00095189 E10C                       	smpsAlterNote       $0C
0009518B E701                       	dc.b	smpsNoAttack, $01
0009518D E106                       	smpsAlterNote       $06
0009518F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095193 E109                       	smpsAlterNote       $09
00095195 E701                       	dc.b	smpsNoAttack, $01
00095197 E10F                       	smpsAlterNote       $0F
00095199 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009519D E109                       	smpsAlterNote       $09
0009519F E701                       	dc.b	smpsNoAttack, $01
000951A1 E106                       	smpsAlterNote       $06
000951A3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000951A7 E10C                       	smpsAlterNote       $0C
000951A9 E701                       	dc.b	smpsNoAttack, $01
000951AB E110                       	smpsAlterNote       $10
000951AD E701                       	dc.b	smpsNoAttack, $01
000951AF E10F                       	smpsAlterNote       $0F
000951B1 E701                       	dc.b	smpsNoAttack, $01
000951B3 E109                       	smpsAlterNote       $09
000951B5 E701                       	dc.b	smpsNoAttack, $01
000951B7 E105                       	smpsAlterNote       $05
000951B9 E701                       	dc.b	smpsNoAttack, $01
000951BB E109                       	smpsAlterNote       $09
000951BD E701                       	dc.b	smpsNoAttack, $01
000951BF E10C                       	smpsAlterNote       $0C
000951C1 E701                       	dc.b	smpsNoAttack, $01
000951C3 E110                       	smpsAlterNote       $10
000951C5 E701                       	dc.b	smpsNoAttack, $01
000951C7 E10C                       	smpsAlterNote       $0C
000951C9 E701                       	dc.b	smpsNoAttack, $01
000951CB E106                       	smpsAlterNote       $06
000951CD E701                       	dc.b	smpsNoAttack, $01
000951CF E105                       	smpsAlterNote       $05
000951D1 E701                       	dc.b	smpsNoAttack, $01
000951D3 E109                       	smpsAlterNote       $09
000951D5 E701                       	dc.b	smpsNoAttack, $01
000951D7 E10F                       	smpsAlterNote       $0F
000951D9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000951DD E10C                       	smpsAlterNote       $0C
000951DF E701                       	dc.b	smpsNoAttack, $01
000951E1 E106                       	smpsAlterNote       $06
000951E3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000951E7 E10C                       	smpsAlterNote       $0C
000951E9 E701                       	dc.b	smpsNoAttack, $01
000951EB E10F                       	smpsAlterNote       $0F
000951ED E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000951F1 E109                       	smpsAlterNote       $09
000951F3 E701                       	dc.b	smpsNoAttack, $01
000951F5 E105                       	smpsAlterNote       $05
000951F7 E701                       	dc.b	smpsNoAttack, $01
000951F9 E106                       	smpsAlterNote       $06
000951FB E701                       	dc.b	smpsNoAttack, $01
000951FD E10C                       	smpsAlterNote       $0C
000951FF E701                       	dc.b	smpsNoAttack, $01
00095201 E110                       	smpsAlterNote       $10
00095203 E701                       	dc.b	smpsNoAttack, $01
00095205 E10C                       	smpsAlterNote       $0C
00095207 E701                       	dc.b	smpsNoAttack, $01
00095209 E109                       	smpsAlterNote       $09
0009520B E701                       	dc.b	smpsNoAttack, $01
0009520D E105                       	smpsAlterNote       $05
0009520F E701                       	dc.b	smpsNoAttack, $01
00095211 E109                       	smpsAlterNote       $09
00095213 E701                       	dc.b	smpsNoAttack, $01
00095215 E10F                       	smpsAlterNote       $0F
00095217 E701                       	dc.b	smpsNoAttack, $01
00095219 E110                       	smpsAlterNote       $10
0009521B E701                       	dc.b	smpsNoAttack, $01
0009521D E10C                       	smpsAlterNote       $0C
0009521F E701                       	dc.b	smpsNoAttack, $01
00095221 E106                       	smpsAlterNote       $06
00095223 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095227 E109                       	smpsAlterNote       $09
00095229 E701                       	dc.b	smpsNoAttack, $01
0009522B E10F                       	smpsAlterNote       $0F
0009522D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095231 E109                       	smpsAlterNote       $09
00095233 E701                       	dc.b	smpsNoAttack, $01
00095235 E106                       	smpsAlterNote       $06
00095237 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009523B E10C                       	smpsAlterNote       $0C
0009523D E701                       	dc.b	smpsNoAttack, $01
0009523F E110                       	smpsAlterNote       $10
00095241 E701                       	dc.b	smpsNoAttack, $01
00095243 E10F                       	smpsAlterNote       $0F
00095245 E701                       	dc.b	smpsNoAttack, $01
00095247 E109                       	smpsAlterNote       $09
00095249 E701                       	dc.b	smpsNoAttack, $01
0009524B E105                       	smpsAlterNote       $05
0009524D E701                       	dc.b	smpsNoAttack, $01
0009524F E109                       	smpsAlterNote       $09
00095251 E701                       	dc.b	smpsNoAttack, $01
00095253 E10C                       	smpsAlterNote       $0C
00095255 E701                       	dc.b	smpsNoAttack, $01
00095257 E110                       	smpsAlterNote       $10
00095259 E701                       	dc.b	smpsNoAttack, $01
0009525B E10C                       	smpsAlterNote       $0C
0009525D E701                       	dc.b	smpsNoAttack, $01
0009525F E106                       	smpsAlterNote       $06
00095261 E701                       	dc.b	smpsNoAttack, $01
00095263 E105                       	smpsAlterNote       $05
00095265 E701                       	dc.b	smpsNoAttack, $01
00095267 E109                       	smpsAlterNote       $09
00095269 E701                       	dc.b	smpsNoAttack, $01
0009526B E10F                       	smpsAlterNote       $0F
0009526D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095271 E109                       	smpsAlterNote       $09
00095273 E701                       	dc.b	smpsNoAttack, $01
00095275 E106                       	smpsAlterNote       $06
00095277 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009527B E10C                       	smpsAlterNote       $0C
0009527D E701                       	dc.b	smpsNoAttack, $01
0009527F E110                       	smpsAlterNote       $10
00095281 E701                       	dc.b	smpsNoAttack, $01
00095283 E10F                       	smpsAlterNote       $0F
00095285 E701                       	dc.b	smpsNoAttack, $01
00095287 E109                       	smpsAlterNote       $09
00095289 E701                       	dc.b	smpsNoAttack, $01
0009528B E105                       	smpsAlterNote       $05
0009528D E701                       	dc.b	smpsNoAttack, $01
0009528F E109                       	smpsAlterNote       $09
00095291 E701                       	dc.b	smpsNoAttack, $01
00095293 E10C                       	smpsAlterNote       $0C
00095295 E701                       	dc.b	smpsNoAttack, $01
00095297 E110                       	smpsAlterNote       $10
00095299 E701                       	dc.b	smpsNoAttack, $01
0009529B E10C                       	smpsAlterNote       $0C
0009529D E701                       	dc.b	smpsNoAttack, $01
0009529F E106                       	smpsAlterNote       $06
000952A1 E701                       	dc.b	smpsNoAttack, $01
000952A3 E105                       	smpsAlterNote       $05
000952A5 E701                       	dc.b	smpsNoAttack, $01
000952A7 E109                       	smpsAlterNote       $09
000952A9 E701                       	dc.b	smpsNoAttack, $01
000952AB E10F                       	smpsAlterNote       $0F
000952AD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000952B1 E10C                       	smpsAlterNote       $0C
000952B3 E701                       	dc.b	smpsNoAttack, $01
000952B5 E106                       	smpsAlterNote       $06
000952B7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000952BB E10C                       	smpsAlterNote       $0C
000952BD E701                       	dc.b	smpsNoAttack, $01
000952BF E10F                       	smpsAlterNote       $0F
000952C1 E701                       	dc.b	smpsNoAttack, $01
000952C3 E110                       	smpsAlterNote       $10
000952C5 8001                       	dc.b	nRst, $01
000952C7 E10F                       	smpsAlterNote       $0F
000952C9 C604                       	dc.b	nA5, $04
000952CB E10D                       	smpsAlterNote       $0D
000952CD C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
000952D3 E10B                       	smpsAlterNote       $0B
000952D5 BF0A 8001 BF03             	dc.b	nD5, $0A, nRst, $01, nD5, $03
000952DB E10F                       	smpsAlterNote       $0F
000952DD C604 8001                  	dc.b	nA5, $04, nRst, $01
000952E1 E10D                       	smpsAlterNote       $0D
000952E3 C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
000952E9 E10C                       	smpsAlterNote       $0C
000952EB C10A C103 8001             	dc.b	nE5, $0A, nE5, $03, nRst, $01
000952F1 E10A                       	smpsAlterNote       $0A
000952F3 C904                       	dc.b	nC6, $04
000952F5 E110                       	smpsAlterNote       $10
000952F7 C704 8001                  	dc.b	nBb5, $04, nRst, $01
000952FB E10F                       	smpsAlterNote       $0F
000952FD C604                       	dc.b	nA5, $04
000952FF E10D                       	smpsAlterNote       $0D
00095301 C403 8001 C202 8001 C403+  	dc.b	nG5, $03, nRst, $01, nF5, $02, nRst, $01, nG5, $03, nA5, $0E
0009530D E109                       	smpsAlterNote       $09
0009530F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095313 E10F                       	smpsAlterNote       $0F
00095315 E701                       	dc.b	smpsNoAttack, $01
00095317 E112                       	smpsAlterNote       $12
00095319 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009531D E10C                       	smpsAlterNote       $0C
0009531F E701                       	dc.b	smpsNoAttack, $01
00095321 E108                       	smpsAlterNote       $08
00095323 E701                       	dc.b	smpsNoAttack, $01
00095325 E109                       	smpsAlterNote       $09
00095327 E701                       	dc.b	smpsNoAttack, $01
00095329 E10F                       	smpsAlterNote       $0F
0009532B E701                       	dc.b	smpsNoAttack, $01
0009532D E113                       	smpsAlterNote       $13
0009532F E701                       	dc.b	smpsNoAttack, $01
00095331 E10D                       	smpsAlterNote       $0D
00095333 C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
00095339 E10C                       	smpsAlterNote       $0C
0009533B C10D                       	dc.b	nE5, $0D
0009533D E109                       	smpsAlterNote       $09
0009533F E701                       	dc.b	smpsNoAttack, $01
00095341 E106                       	smpsAlterNote       $06
00095343 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095347 E10C                       	smpsAlterNote       $0C
00095349 E701                       	dc.b	smpsNoAttack, $01
0009534B E110                       	smpsAlterNote       $10
0009534D E701                       	dc.b	smpsNoAttack, $01
0009534F E10F                       	smpsAlterNote       $0F
00095351 E701                       	dc.b	smpsNoAttack, $01
00095353 E109                       	smpsAlterNote       $09
00095355 E701                       	dc.b	smpsNoAttack, $01
00095357 E105                       	smpsAlterNote       $05
00095359 E701                       	dc.b	smpsNoAttack, $01
0009535B E109                       	smpsAlterNote       $09
0009535D E701                       	dc.b	smpsNoAttack, $01
0009535F E10C                       	smpsAlterNote       $0C
00095361 E701                       	dc.b	smpsNoAttack, $01
00095363 E110                       	smpsAlterNote       $10
00095365 E701                       	dc.b	smpsNoAttack, $01
00095367 E10C                       	smpsAlterNote       $0C
00095369 E701                       	dc.b	smpsNoAttack, $01
0009536B E106                       	smpsAlterNote       $06
0009536D E701                       	dc.b	smpsNoAttack, $01
0009536F E105                       	smpsAlterNote       $05
00095371 E701                       	dc.b	smpsNoAttack, $01
00095373 E109                       	smpsAlterNote       $09
00095375 E701                       	dc.b	smpsNoAttack, $01
00095377 E10F                       	smpsAlterNote       $0F
00095379 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009537D E10C                       	smpsAlterNote       $0C
0009537F E701                       	dc.b	smpsNoAttack, $01
00095381 E106                       	smpsAlterNote       $06
00095383 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095387 E10C                       	smpsAlterNote       $0C
00095389 E701                       	dc.b	smpsNoAttack, $01
0009538B E10F                       	smpsAlterNote       $0F
0009538D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095391 E109                       	smpsAlterNote       $09
00095393 E701                       	dc.b	smpsNoAttack, $01
00095395 E105                       	smpsAlterNote       $05
00095397 E701                       	dc.b	smpsNoAttack, $01
00095399 E106                       	smpsAlterNote       $06
0009539B E701                       	dc.b	smpsNoAttack, $01
0009539D E10C                       	smpsAlterNote       $0C
0009539F E701                       	dc.b	smpsNoAttack, $01
000953A1 E110                       	smpsAlterNote       $10
000953A3 E701                       	dc.b	smpsNoAttack, $01
000953A5 E10C                       	smpsAlterNote       $0C
000953A7 E701                       	dc.b	smpsNoAttack, $01
000953A9 E109                       	smpsAlterNote       $09
000953AB E701                       	dc.b	smpsNoAttack, $01
000953AD E105                       	smpsAlterNote       $05
000953AF E701                       	dc.b	smpsNoAttack, $01
000953B1 E109                       	smpsAlterNote       $09
000953B3 E701                       	dc.b	smpsNoAttack, $01
000953B5 E10F                       	smpsAlterNote       $0F
000953B7 E701                       	dc.b	smpsNoAttack, $01
000953B9 E110                       	smpsAlterNote       $10
000953BB E701                       	dc.b	smpsNoAttack, $01
000953BD E10C                       	smpsAlterNote       $0C
000953BF E701                       	dc.b	smpsNoAttack, $01
000953C1 E106                       	smpsAlterNote       $06
000953C3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000953C7 E109                       	smpsAlterNote       $09
000953C9 E701                       	dc.b	smpsNoAttack, $01
000953CB E10F                       	smpsAlterNote       $0F
000953CD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000953D1 E109                       	smpsAlterNote       $09
000953D3 E701                       	dc.b	smpsNoAttack, $01
000953D5 E106                       	smpsAlterNote       $06
000953D7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000953DB E10C                       	smpsAlterNote       $0C
000953DD E701                       	dc.b	smpsNoAttack, $01
000953DF E110                       	smpsAlterNote       $10
000953E1 E701                       	dc.b	smpsNoAttack, $01
000953E3 E10F                       	smpsAlterNote       $0F
000953E5 E701                       	dc.b	smpsNoAttack, $01
000953E7 E109                       	smpsAlterNote       $09
000953E9 E701                       	dc.b	smpsNoAttack, $01
000953EB E105                       	smpsAlterNote       $05
000953ED E701                       	dc.b	smpsNoAttack, $01
000953EF E109                       	smpsAlterNote       $09
000953F1 E701                       	dc.b	smpsNoAttack, $01
000953F3 E10F                       	smpsAlterNote       $0F
000953F5 E701                       	dc.b	smpsNoAttack, $01
000953F7 E110                       	smpsAlterNote       $10
000953F9 E701                       	dc.b	smpsNoAttack, $01
000953FB E10C                       	smpsAlterNote       $0C
000953FD E701                       	dc.b	smpsNoAttack, $01
000953FF E106                       	smpsAlterNote       $06
00095401 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095405 E109                       	smpsAlterNote       $09
00095407 E701                       	dc.b	smpsNoAttack, $01
00095409 E10F                       	smpsAlterNote       $0F
0009540B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009540F E109                       	smpsAlterNote       $09
00095411 E701                       	dc.b	smpsNoAttack, $01
00095413 E106                       	smpsAlterNote       $06
00095415 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095419 E10C                       	smpsAlterNote       $0C
0009541B E701                       	dc.b	smpsNoAttack, $01
0009541D E110                       	smpsAlterNote       $10
0009541F E701                       	dc.b	smpsNoAttack, $01
00095421 E10F                       	smpsAlterNote       $0F
00095423 E701                       	dc.b	smpsNoAttack, $01
00095425 E109                       	smpsAlterNote       $09
00095427 E701                       	dc.b	smpsNoAttack, $01
00095429 E105                       	smpsAlterNote       $05
0009542B E701                       	dc.b	smpsNoAttack, $01
0009542D E109                       	smpsAlterNote       $09
0009542F E701                       	dc.b	smpsNoAttack, $01
00095431 E10C                       	smpsAlterNote       $0C
00095433 E701                       	dc.b	smpsNoAttack, $01
00095435 E110                       	smpsAlterNote       $10
00095437 E701                       	dc.b	smpsNoAttack, $01
00095439 E10C                       	smpsAlterNote       $0C
0009543B E701                       	dc.b	smpsNoAttack, $01
0009543D E106                       	smpsAlterNote       $06
0009543F E701                       	dc.b	smpsNoAttack, $01
00095441 E105                       	smpsAlterNote       $05
00095443 E701                       	dc.b	smpsNoAttack, $01
00095445 E109                       	smpsAlterNote       $09
00095447 E701                       	dc.b	smpsNoAttack, $01
00095449 E10F                       	smpsAlterNote       $0F
0009544B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009544F E10C                       	smpsAlterNote       $0C
00095451 E701                       	dc.b	smpsNoAttack, $01
00095453 E106                       	smpsAlterNote       $06
00095455 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095459 E10C                       	smpsAlterNote       $0C
0009545B E701                       	dc.b	smpsNoAttack, $01
0009545D E10F                       	smpsAlterNote       $0F
0009545F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095463 E109                       	smpsAlterNote       $09
00095465 E701                       	dc.b	smpsNoAttack, $01
00095467 E105                       	smpsAlterNote       $05
00095469 E701                       	dc.b	smpsNoAttack, $01
0009546B E106                       	smpsAlterNote       $06
0009546D E701                       	dc.b	smpsNoAttack, $01
0009546F E10C                       	smpsAlterNote       $0C
00095471 E701                       	dc.b	smpsNoAttack, $01
00095473 E110                       	smpsAlterNote       $10
00095475 E701                       	dc.b	smpsNoAttack, $01
00095477 E10C                       	smpsAlterNote       $0C
00095479 E701                       	dc.b	smpsNoAttack, $01
0009547B E109                       	smpsAlterNote       $09
0009547D E701                       	dc.b	smpsNoAttack, $01
0009547F E105                       	smpsAlterNote       $05
00095481 E701                       	dc.b	smpsNoAttack, $01
00095483 E109                       	smpsAlterNote       $09
00095485 E701                       	dc.b	smpsNoAttack, $01
00095487 E10F                       	smpsAlterNote       $0F
00095489 E701                       	dc.b	smpsNoAttack, $01
0009548B E110                       	smpsAlterNote       $10
0009548D E701                       	dc.b	smpsNoAttack, $01
0009548F E10C                       	smpsAlterNote       $0C
00095491 E701                       	dc.b	smpsNoAttack, $01
00095493 E106                       	smpsAlterNote       $06
00095495 E701                       	dc.b	smpsNoAttack, $01
00095497 E10B                       	smpsAlterNote       $0B
00095499 BF02                       	dc.b	nD5, $02
0009549B E10C                       	smpsAlterNote       $0C
0009549D C001 8001 C10D             	dc.b	nEb5, $01, nRst, $01, nE5, $0D
000954A3 E109                       	smpsAlterNote       $09
000954A5 E701                       	dc.b	smpsNoAttack, $01
000954A7 E105                       	smpsAlterNote       $05
000954A9 E701                       	dc.b	smpsNoAttack, $01
000954AB E109                       	smpsAlterNote       $09
000954AD E701                       	dc.b	smpsNoAttack, $01
000954AF E10F                       	smpsAlterNote       $0F
000954B1 E701                       	dc.b	smpsNoAttack, $01
000954B3 E110                       	smpsAlterNote       $10
000954B5 E701                       	dc.b	smpsNoAttack, $01
000954B7 E10C                       	smpsAlterNote       $0C
000954B9 E701                       	dc.b	smpsNoAttack, $01
000954BB E106                       	smpsAlterNote       $06
000954BD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000954C1 E109                       	smpsAlterNote       $09
000954C3 E701                       	dc.b	smpsNoAttack, $01
000954C5 E10F                       	smpsAlterNote       $0F
000954C7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000954CB E109                       	smpsAlterNote       $09
000954CD E701                       	dc.b	smpsNoAttack, $01
000954CF E106                       	smpsAlterNote       $06
000954D1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000954D5 E10C                       	smpsAlterNote       $0C
000954D7 E701                       	dc.b	smpsNoAttack, $01
000954D9 E110                       	smpsAlterNote       $10
000954DB E701                       	dc.b	smpsNoAttack, $01
000954DD E10F                       	smpsAlterNote       $0F
000954DF E701                       	dc.b	smpsNoAttack, $01
000954E1 E109                       	smpsAlterNote       $09
000954E3 E701                       	dc.b	smpsNoAttack, $01
000954E5 E105                       	smpsAlterNote       $05
000954E7 E701                       	dc.b	smpsNoAttack, $01
000954E9 E109                       	smpsAlterNote       $09
000954EB E701                       	dc.b	smpsNoAttack, $01
000954ED E10C                       	smpsAlterNote       $0C
000954EF E701                       	dc.b	smpsNoAttack, $01
000954F1 E110                       	smpsAlterNote       $10
000954F3 E701                       	dc.b	smpsNoAttack, $01
000954F5 E10C                       	smpsAlterNote       $0C
000954F7 E701                       	dc.b	smpsNoAttack, $01
000954F9 E106                       	smpsAlterNote       $06
000954FB E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000954FF E10D                       	smpsAlterNote       $0D
00095501 C409 8001 C206 8001        	dc.b	nG5, $09, nRst, $01, nF5, $06, nRst, $01
00095509 E10C                       	smpsAlterNote       $0C
0009550B C10D                       	dc.b	nE5, $0D
0009550D E106                       	smpsAlterNote       $06
0009550F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095513 E109                       	smpsAlterNote       $09
00095515 E701                       	dc.b	smpsNoAttack, $01
00095517 E10F                       	smpsAlterNote       $0F
00095519 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009551D E109                       	smpsAlterNote       $09
0009551F E701                       	dc.b	smpsNoAttack, $01
00095521 E106                       	smpsAlterNote       $06
00095523 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095527 E10C                       	smpsAlterNote       $0C
00095529 E701                       	dc.b	smpsNoAttack, $01
0009552B E110                       	smpsAlterNote       $10
0009552D E701                       	dc.b	smpsNoAttack, $01
0009552F E10F                       	smpsAlterNote       $0F
00095531 E701                       	dc.b	smpsNoAttack, $01
00095533 E109                       	smpsAlterNote       $09
00095535 E701                       	dc.b	smpsNoAttack, $01
00095537 E105                       	smpsAlterNote       $05
00095539 E701                       	dc.b	smpsNoAttack, $01
0009553B E106                       	smpsAlterNote       $06
0009553D 800F                       	dc.b	nRst, $0F
00095541 E6FF                       	smpsAlterVol        $FF
00095543 E10F                       	smpsAlterNote       $0F
00095545 BA01                       	dc.b	nA4, $01
00095547 E110                       	smpsAlterNote       $10
00095549 BB02                       	dc.b	nBb4, $02
0009554B E10F                       	smpsAlterNote       $0F
0009554D BA03 8001 BA06             	dc.b	nA4, $03, nRst, $01, nA4, $06
00095553 E10B                       	smpsAlterNote       $0B
00095555 BF03 8001                  	dc.b	nD5, $03, nRst, $01
00095559 E10C                       	smpsAlterNote       $0C
0009555B C103                       	dc.b	nE5, $03
0009555D E10D                       	smpsAlterNote       $0D
0009555F C203 8001 C403 C606 8001   	dc.b	nF5, $03, nRst, $01, nG5, $03, nA5, $06, nRst, $01
00095569 E10B                       	smpsAlterNote       $0B
0009556B BF03 C90E                  	dc.b	nD5, $03, nC6, $0E
0009556F E104                       	smpsAlterNote       $04
00095571 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095575 E10A                       	smpsAlterNote       $0A
00095577 E701                       	dc.b	smpsNoAttack, $01
00095579 E10D                       	smpsAlterNote       $0D
0009557B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009557F E107                       	smpsAlterNote       $07
00095581 E701                       	dc.b	smpsNoAttack, $01
00095583 E104                       	smpsAlterNote       $04
00095585 8001                       	dc.b	nRst, $01
00095587 E110                       	smpsAlterNote       $10
00095589 C703                       	dc.b	nBb5, $03
0009558B E10F                       	smpsAlterNote       $0F
0009558D C603 8001                  	dc.b	nA5, $03, nRst, $01
00095591 E10D                       	smpsAlterNote       $0D
00095593 C403 C60D                  	dc.b	nG5, $03, nA5, $0D
00095597 E10C                       	smpsAlterNote       $0C
00095599 E701                       	dc.b	smpsNoAttack, $01
0009559B E108                       	smpsAlterNote       $08
0009559D E701                       	dc.b	smpsNoAttack, $01
0009559F E109                       	smpsAlterNote       $09
000955A1 E701                       	dc.b	smpsNoAttack, $01
000955A3 E10F                       	smpsAlterNote       $0F
000955A5 E701                       	dc.b	smpsNoAttack, $01
000955A7 E113                       	smpsAlterNote       $13
000955A9 E701                       	dc.b	smpsNoAttack, $01
000955AB E10F                       	smpsAlterNote       $0F
000955AD E701                       	dc.b	smpsNoAttack, $01
000955AF E10C                       	smpsAlterNote       $0C
000955B1 E701                       	dc.b	smpsNoAttack, $01
000955B3 E108                       	smpsAlterNote       $08
000955B5 E701                       	dc.b	smpsNoAttack, $01
000955B7 E10C                       	smpsAlterNote       $0C
000955B9 E701                       	dc.b	smpsNoAttack, $01
000955BB E112                       	smpsAlterNote       $12
000955BD E701                       	dc.b	smpsNoAttack, $01
000955BF E113                       	smpsAlterNote       $13
000955C1 E701                       	dc.b	smpsNoAttack, $01
000955C3 E10F                       	smpsAlterNote       $0F
000955C5 E701                       	dc.b	smpsNoAttack, $01
000955C7 E109                       	smpsAlterNote       $09
000955C9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000955CD E10C                       	smpsAlterNote       $0C
000955CF E701                       	dc.b	smpsNoAttack, $01
000955D1 E112                       	smpsAlterNote       $12
000955D3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000955D7 E10C                       	smpsAlterNote       $0C
000955D9 E701                       	dc.b	smpsNoAttack, $01
000955DB E109                       	smpsAlterNote       $09
000955DD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000955E1 E10F                       	smpsAlterNote       $0F
000955E3 E701                       	dc.b	smpsNoAttack, $01
000955E5 E113                       	smpsAlterNote       $13
000955E7 E701                       	dc.b	smpsNoAttack, $01
000955E9 E112                       	smpsAlterNote       $12
000955EB E701                       	dc.b	smpsNoAttack, $01
000955ED E10C                       	smpsAlterNote       $0C
000955EF E701                       	dc.b	smpsNoAttack, $01
000955F1 E108                       	smpsAlterNote       $08
000955F3 E701                       	dc.b	smpsNoAttack, $01
000955F5 E10C                       	smpsAlterNote       $0C
000955F7 E701                       	dc.b	smpsNoAttack, $01
000955F9 E10F                       	smpsAlterNote       $0F
000955FB E701                       	dc.b	smpsNoAttack, $01
000955FD E113                       	smpsAlterNote       $13
000955FF E701 800E                  	dc.b	smpsNoAttack, $01, nRst, $0E
00095603 E10B                       	smpsAlterNote       $0B
00095605 BF03                       	dc.b	nD5, $03
00095607 E10C                       	smpsAlterNote       $0C
00095609 C103 8001                  	dc.b	nE5, $03, nRst, $01
0009560D E10D                       	smpsAlterNote       $0D
0009560F C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
00095619 E10B                       	smpsAlterNote       $0B
0009561B BF02 8001 C90D 8001 CB02+  	dc.b	nD5, $02, nRst, $01, nC6, $0D, nRst, $01, nD6, $02, nRst, $01
00095627 E110                       	smpsAlterNote       $10
00095629 C704 8001                  	dc.b	nBb5, $04, nRst, $01
0009562D E10F                       	smpsAlterNote       $0F
0009562F C604                       	dc.b	nA5, $04
00095631 E10D                       	smpsAlterNote       $0D
00095633 C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
00095639 E109                       	smpsAlterNote       $09
0009563B E701                       	dc.b	smpsNoAttack, $01
0009563D E108                       	smpsAlterNote       $08
0009563F E701                       	dc.b	smpsNoAttack, $01
00095641 E10C                       	smpsAlterNote       $0C
00095643 E701                       	dc.b	smpsNoAttack, $01
00095645 E112                       	smpsAlterNote       $12
00095647 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009564B E10F                       	smpsAlterNote       $0F
0009564D E701                       	dc.b	smpsNoAttack, $01
0009564F E109                       	smpsAlterNote       $09
00095651 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095655 E10F                       	smpsAlterNote       $0F
00095657 E701                       	dc.b	smpsNoAttack, $01
00095659 E112                       	smpsAlterNote       $12
0009565B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009565F E10C                       	smpsAlterNote       $0C
00095661 E701                       	dc.b	smpsNoAttack, $01
00095663 E108                       	smpsAlterNote       $08
00095665 E701                       	dc.b	smpsNoAttack, $01
00095667 E109                       	smpsAlterNote       $09
00095669 E701                       	dc.b	smpsNoAttack, $01
0009566B E10F                       	smpsAlterNote       $0F
0009566D E701                       	dc.b	smpsNoAttack, $01
0009566F E113                       	smpsAlterNote       $13
00095671 E701                       	dc.b	smpsNoAttack, $01
00095673 E10F                       	smpsAlterNote       $0F
00095675 E701                       	dc.b	smpsNoAttack, $01
00095677 E10C                       	smpsAlterNote       $0C
00095679 E701                       	dc.b	smpsNoAttack, $01
0009567B E108                       	smpsAlterNote       $08
0009567D E701                       	dc.b	smpsNoAttack, $01
0009567F E10C                       	smpsAlterNote       $0C
00095681 E701                       	dc.b	smpsNoAttack, $01
00095683 E112                       	smpsAlterNote       $12
00095685 E701                       	dc.b	smpsNoAttack, $01
00095687 E113                       	smpsAlterNote       $13
00095689 E701                       	dc.b	smpsNoAttack, $01
0009568B E10F                       	smpsAlterNote       $0F
0009568D E701                       	dc.b	smpsNoAttack, $01
0009568F E109                       	smpsAlterNote       $09
00095691 E701                       	dc.b	smpsNoAttack, $01
00095693 E10D                       	smpsAlterNote       $0D
00095695 C402                       	dc.b	nG5, $02
00095697 E10F                       	smpsAlterNote       $0F
00095699 C501 8001 C60D 8001 C604   	dc.b	nAb5, $01, nRst, $01, nA5, $0D, nRst, $01, nA5, $04
000956A3 E10D                       	smpsAlterNote       $0D
000956A5 C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
000956AB E10B                       	smpsAlterNote       $0B
000956AD BF0D                       	dc.b	nD5, $0D
000956AF E108                       	smpsAlterNote       $08
000956B1 E701                       	dc.b	smpsNoAttack, $01
000956B3 E104                       	smpsAlterNote       $04
000956B5 E701                       	dc.b	smpsNoAttack, $01
000956B7 E105                       	smpsAlterNote       $05
000956B9 E701                       	dc.b	smpsNoAttack, $01
000956BB E10B                       	smpsAlterNote       $0B
000956BD E701                       	dc.b	smpsNoAttack, $01
000956BF E10F                       	smpsAlterNote       $0F
000956C1 E701                       	dc.b	smpsNoAttack, $01
000956C3 E10B                       	smpsAlterNote       $0B
000956C5 E701                       	dc.b	smpsNoAttack, $01
000956C7 E108                       	smpsAlterNote       $08
000956C9 E701                       	dc.b	smpsNoAttack, $01
000956CB E104                       	smpsAlterNote       $04
000956CD E701                       	dc.b	smpsNoAttack, $01
000956CF E108                       	smpsAlterNote       $08
000956D1 E701                       	dc.b	smpsNoAttack, $01
000956D3 E10E                       	smpsAlterNote       $0E
000956D5 E701                       	dc.b	smpsNoAttack, $01
000956D7 E10F                       	smpsAlterNote       $0F
000956D9 E701                       	dc.b	smpsNoAttack, $01
000956DB E10C                       	smpsAlterNote       $0C
000956DD C101                       	dc.b	nE5, $01
000956DF E10D                       	smpsAlterNote       $0D
000956E1 C201 C401 8001 C606        	dc.b	nF5, $01, nG5, $01, nRst, $01, nA5, $06
000956E9 E10F                       	smpsAlterNote       $0F
000956EB C607                       	dc.b	nA5, $07
000956ED E10C                       	smpsAlterNote       $0C
000956EF CD07                       	dc.b	nE6, $07
000956F1 E10D                       	smpsAlterNote       $0D
000956F3 CE06 8001                  	dc.b	nF6, $06, nRst, $01
000956F7 E10C                       	smpsAlterNote       $0C
000956F9 CD03                       	dc.b	nE6, $03
000956FB E10A                       	smpsAlterNote       $0A
000956FD C903 8001                  	dc.b	nC6, $03, nRst, $01
00095701 E10D                       	smpsAlterNote       $0D
00095703 C403 C70D E701             	dc.b	nG5, $03, nBb5, $0D, smpsNoAttack, $01
00095709 E10A                       	smpsAlterNote       $0A
0009570B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009570F E110                       	smpsAlterNote       $10
00095711 E701                       	dc.b	smpsNoAttack, $01
00095713 E114                       	smpsAlterNote       $14
00095715 E701                       	dc.b	smpsNoAttack, $01
00095717 E113                       	smpsAlterNote       $13
00095719 E701                       	dc.b	smpsNoAttack, $01
0009571B E10D                       	smpsAlterNote       $0D
0009571D E701                       	dc.b	smpsNoAttack, $01
0009571F E109                       	smpsAlterNote       $09
00095721 E701                       	dc.b	smpsNoAttack, $01
00095723 E10D                       	smpsAlterNote       $0D
00095725 E701                       	dc.b	smpsNoAttack, $01
00095727 E110                       	smpsAlterNote       $10
00095729 E701                       	dc.b	smpsNoAttack, $01
0009572B E114                       	smpsAlterNote       $14
0009572D E701                       	dc.b	smpsNoAttack, $01
0009572F E10F                       	smpsAlterNote       $0F
00095731 C607                       	dc.b	nA5, $07
00095733 E10D                       	smpsAlterNote       $0D
00095735 C40D                       	dc.b	nG5, $0D
00095737 E10A                       	smpsAlterNote       $0A
00095739 E701                       	dc.b	smpsNoAttack, $01
0009573B E106                       	smpsAlterNote       $06
0009573D E701                       	dc.b	smpsNoAttack, $01
0009573F E10A                       	smpsAlterNote       $0A
00095741 E701                       	dc.b	smpsNoAttack, $01
00095743 E10D                       	smpsAlterNote       $0D
00095745 E701                       	dc.b	smpsNoAttack, $01
00095747 E111                       	smpsAlterNote       $11
00095749 E701                       	dc.b	smpsNoAttack, $01
0009574B E10D                       	smpsAlterNote       $0D
0009574D E701                       	dc.b	smpsNoAttack, $01
0009574F E107                       	smpsAlterNote       $07
00095751 E701                       	dc.b	smpsNoAttack, $01
00095753 E106                       	smpsAlterNote       $06
00095755 E701                       	dc.b	smpsNoAttack, $01
00095757 E10A                       	smpsAlterNote       $0A
00095759 E701                       	dc.b	smpsNoAttack, $01
0009575B E110                       	smpsAlterNote       $10
0009575D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095761 E10D                       	smpsAlterNote       $0D
00095763 E701                       	dc.b	smpsNoAttack, $01
00095765 E107                       	smpsAlterNote       $07
00095767 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009576B E10F                       	smpsAlterNote       $0F
0009576D C60E                       	dc.b	nA5, $0E
0009576F E109                       	smpsAlterNote       $09
00095771 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095775 E10F                       	smpsAlterNote       $0F
00095777 E701                       	dc.b	smpsNoAttack, $01
00095779 E112                       	smpsAlterNote       $12
0009577B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009577F E10C                       	smpsAlterNote       $0C
00095781 E701                       	dc.b	smpsNoAttack, $01
00095783 E108                       	smpsAlterNote       $08
00095785 E701                       	dc.b	smpsNoAttack, $01
00095787 E109                       	smpsAlterNote       $09
00095789 E701                       	dc.b	smpsNoAttack, $01
0009578B E10F                       	smpsAlterNote       $0F
0009578D E701                       	dc.b	smpsNoAttack, $01
0009578F E113                       	smpsAlterNote       $13
00095791 E701                       	dc.b	smpsNoAttack, $01
00095793 E10F                       	smpsAlterNote       $0F
00095795 E701                       	dc.b	smpsNoAttack, $01
00095797 E10C                       	smpsAlterNote       $0C
00095799 E701                       	dc.b	smpsNoAttack, $01
0009579B E108                       	smpsAlterNote       $08
0009579D E701                       	dc.b	smpsNoAttack, $01
0009579F E109                       	smpsAlterNote       $09
000957A1 8001                       	dc.b	nRst, $01
000957A3 E110                       	smpsAlterNote       $10
000957A5 C70D                       	dc.b	nBb5, $0D
000957A7 E10D                       	smpsAlterNote       $0D
000957A9 E701                       	dc.b	smpsNoAttack, $01
000957AB E109                       	smpsAlterNote       $09
000957AD E701                       	dc.b	smpsNoAttack, $01
000957AF E10D                       	smpsAlterNote       $0D
000957B1 E701                       	dc.b	smpsNoAttack, $01
000957B3 E113                       	smpsAlterNote       $13
000957B5 E701                       	dc.b	smpsNoAttack, $01
000957B7 E114                       	smpsAlterNote       $14
000957B9 E701                       	dc.b	smpsNoAttack, $01
000957BB E110                       	smpsAlterNote       $10
000957BD E701                       	dc.b	smpsNoAttack, $01
000957BF E10A                       	smpsAlterNote       $0A
000957C1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000957C5 E10D                       	smpsAlterNote       $0D
000957C7 E701                       	dc.b	smpsNoAttack, $01
000957C9 E113                       	smpsAlterNote       $13
000957CB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000957CF E10D                       	smpsAlterNote       $0D
000957D1 E701                       	dc.b	smpsNoAttack, $01
000957D3 E10A                       	smpsAlterNote       $0A
000957D5 E701 E701 C90C 8001 8001   	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nC6, $0C, nRst, $01, nRst, $01
000957DF E10B                       	smpsAlterNote       $0B
000957E1 8001                       	dc.b	nRst, $01
000957E3 E10C                       	smpsAlterNote       $0C
000957E5 CD0C 8001                  	dc.b	nE6, $0C, nRst, $01
000957E9 E10B                       	smpsAlterNote       $0B
000957EB CB0D                       	dc.b	nD6, $0D
000957ED E105                       	smpsAlterNote       $05
000957EF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000957F3 E108                       	smpsAlterNote       $08
000957F5 E701                       	dc.b	smpsNoAttack, $01
000957F7 E10E                       	smpsAlterNote       $0E
000957F9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000957FD E108                       	smpsAlterNote       $08
000957FF E701                       	dc.b	smpsNoAttack, $01
00095801 E105                       	smpsAlterNote       $05
00095803 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095807 E10B                       	smpsAlterNote       $0B
00095809 E701                       	dc.b	smpsNoAttack, $01
0009580B E10F                       	smpsAlterNote       $0F
0009580D E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00095811 E10C                       	smpsAlterNote       $0C
00095813 CC0D                       	dc.b	nEb6, $0D
00095815 E106                       	smpsAlterNote       $06
00095817 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009581B E109                       	smpsAlterNote       $09
0009581D E701                       	dc.b	smpsNoAttack, $01
0009581F E10C                       	smpsAlterNote       $0C
00095821 8001                       	dc.b	nRst, $01
00095823 E10A                       	smpsAlterNote       $0A
00095825 C906 8001 C901 8001 C902+  	dc.b	nC6, $06, nRst, $01, nC6, $01, nRst, $01, nC6, $02, nC6, $02
00095831 CB0E                       	dc.b	nD6, $0E
00095833 E105                       	smpsAlterNote       $05
00095835 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095839 E10B                       	smpsAlterNote       $0B
0009583B E701                       	dc.b	smpsNoAttack, $01
0009583D E10E                       	smpsAlterNote       $0E
0009583F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095843 E108                       	smpsAlterNote       $08
00095845 E701                       	dc.b	smpsNoAttack, $01
00095847 E104                       	smpsAlterNote       $04
00095849 E701                       	dc.b	smpsNoAttack, $01
0009584B E105                       	smpsAlterNote       $05
0009584D E701                       	dc.b	smpsNoAttack, $01
0009584F E10B                       	smpsAlterNote       $0B
00095851 E701                       	dc.b	smpsNoAttack, $01
00095853 E10F                       	smpsAlterNote       $0F
00095855 E701                       	dc.b	smpsNoAttack, $01
00095857 E10D                       	smpsAlterNote       $0D
00095859 CE0A 8001                  	dc.b	nF6, $0A, nRst, $01
0009585D E10C                       	smpsAlterNote       $0C
0009585F CC06 8001                  	dc.b	nEb6, $06, nRst, $01
00095863 E10A                       	smpsAlterNote       $0A
00095865 C906 C902 8001 C901 8001+  	dc.b	nC6, $06, nC6, $02, nRst, $01, nC6, $01, nRst, $01, nC6, $02
00095871 CB0D                       	dc.b	nD6, $0D
00095873 E108                       	smpsAlterNote       $08
00095875 E701                       	dc.b	smpsNoAttack, $01
00095877 E104                       	smpsAlterNote       $04
00095879 E701                       	dc.b	smpsNoAttack, $01
0009587B E105                       	smpsAlterNote       $05
0009587D E701                       	dc.b	smpsNoAttack, $01
0009587F E10B                       	smpsAlterNote       $0B
00095881 E701                       	dc.b	smpsNoAttack, $01
00095883 E10F                       	smpsAlterNote       $0F
00095885 E701                       	dc.b	smpsNoAttack, $01
00095887 E10B                       	smpsAlterNote       $0B
00095889 E701                       	dc.b	smpsNoAttack, $01
0009588B E108                       	smpsAlterNote       $08
0009588D E701                       	dc.b	smpsNoAttack, $01
0009588F E104                       	smpsAlterNote       $04
00095891 E701                       	dc.b	smpsNoAttack, $01
00095893 E108                       	smpsAlterNote       $08
00095895 E701                       	dc.b	smpsNoAttack, $01
00095897 E10E                       	smpsAlterNote       $0E
00095899 E701                       	dc.b	smpsNoAttack, $01
0009589B E10F                       	smpsAlterNote       $0F
0009589D E701                       	dc.b	smpsNoAttack, $01
0009589F E10C                       	smpsAlterNote       $0C
000958A1 CC0D                       	dc.b	nEb6, $0D
000958A3 E109                       	smpsAlterNote       $09
000958A5 E701                       	dc.b	smpsNoAttack, $01
000958A7 E105                       	smpsAlterNote       $05
000958A9 E701                       	dc.b	smpsNoAttack, $01
000958AB E106                       	smpsAlterNote       $06
000958AD E701                       	dc.b	smpsNoAttack, $01
000958AF E10C                       	smpsAlterNote       $0C
000958B1 E701                       	dc.b	smpsNoAttack, $01
000958B3 E10A                       	smpsAlterNote       $0A
000958B5 C907 C902 C902 8001 C901+  	dc.b	nC6, $07, nC6, $02, nC6, $02, nRst, $01, nC6, $01, nRst, $01
000958C1 CB0D                       	dc.b	nD6, $0D
000958C3 E108                       	smpsAlterNote       $08
000958C5 E701                       	dc.b	smpsNoAttack, $01
000958C7 E104                       	smpsAlterNote       $04
000958C9 E701                       	dc.b	smpsNoAttack, $01
000958CB E108                       	smpsAlterNote       $08
000958CD E701                       	dc.b	smpsNoAttack, $01
000958CF E10B                       	smpsAlterNote       $0B
000958D1 E701                       	dc.b	smpsNoAttack, $01
000958D3 E10F                       	smpsAlterNote       $0F
000958D5 E701                       	dc.b	smpsNoAttack, $01
000958D7 E10B                       	smpsAlterNote       $0B
000958D9 E701                       	dc.b	smpsNoAttack, $01
000958DB E105                       	smpsAlterNote       $05
000958DD E701                       	dc.b	smpsNoAttack, $01
000958DF E104                       	smpsAlterNote       $04
000958E1 E701                       	dc.b	smpsNoAttack, $01
000958E3 E108                       	smpsAlterNote       $08
000958E5 E701                       	dc.b	smpsNoAttack, $01
000958E7 E10E                       	smpsAlterNote       $0E
000958E9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000958ED E10B                       	smpsAlterNote       $0B
000958EF E701                       	dc.b	smpsNoAttack, $01
000958F1 E105                       	smpsAlterNote       $05
000958F3 E701 E701 8019             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $19
000958FB 03                         	dc.b	$03
000958FC E601                       	smpsAlterVol        $01
000958FE F6F1 D1                    	smpsJump            music84_Jump01
00095901                            
00095901                            ; FM5 Data
00095901                            music84_FM5:
00095903 E080                       	smpsPan             panLeft, $00
00095905 8003                       	dc.b	nRst, $03
00095907 E10D                       	smpsAlterNote       $0D
00095909 C203 8008                  	dc.b	nF5, $03, nRst, $08
0009590D E10C                       	smpsAlterNote       $0C
0009590F C103 800A                  	dc.b	nE5, $03, nRst, $0A
00095913 E10F                       	smpsAlterNote       $0F
00095915 BA03 8006                  	dc.b	nA4, $03, nRst, $06
0009591B E6FE                       	smpsAlterVol        $FE
0009591D C703 C603 8001             	dc.b	nBb5, $03, nA5, $03, nRst, $01
00095923 E10D                       	smpsAlterNote       $0D
00095925 C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
0009592B E10C                       	smpsAlterNote       $0C
0009592D C102 8001                  	dc.b	nE5, $02, nRst, $01
00095931 E10A                       	smpsAlterNote       $0A
00095933 BD01 8001                  	dc.b	nC5, $01, nRst, $01
00095939 03                         	dc.b	$03
0009593A                            
0009593A                            music84_Jump00:
0009593A 8004                       	dc.b	nRst, $04
0009593C E602                       	smpsAlterVol        $02
0009593E E10D                       	smpsAlterNote       $0D
00095940 B60D                       	dc.b	nF4, $0D
00095942 E107                       	smpsAlterNote       $07
00095944 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095948 E10A                       	smpsAlterNote       $0A
0009594A E701                       	dc.b	smpsNoAttack, $01
0009594C E110                       	smpsAlterNote       $10
0009594E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095952 E10A                       	smpsAlterNote       $0A
00095954 E701                       	dc.b	smpsNoAttack, $01
00095956 E107                       	smpsAlterNote       $07
00095958 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009595C E10D                       	smpsAlterNote       $0D
0009595E E701                       	dc.b	smpsNoAttack, $01
00095960 E111                       	smpsAlterNote       $11
00095962 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00095966 E10D                       	smpsAlterNote       $0D
00095968 B80D                       	dc.b	nG4, $0D
0009596A E107                       	smpsAlterNote       $07
0009596C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095970 E10A                       	smpsAlterNote       $0A
00095972 E701                       	dc.b	smpsNoAttack, $01
00095974 E110                       	smpsAlterNote       $10
00095976 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009597A E10A                       	smpsAlterNote       $0A
0009597C E701                       	dc.b	smpsNoAttack, $01
0009597E E107                       	smpsAlterNote       $07
00095980 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095984 E10D                       	smpsAlterNote       $0D
00095986 E701                       	dc.b	smpsNoAttack, $01
00095988 E111                       	smpsAlterNote       $11
0009598A E701                       	dc.b	smpsNoAttack, $01
0009598C E110                       	smpsAlterNote       $10
0009598E E701                       	dc.b	smpsNoAttack, $01
00095990 E10A                       	smpsAlterNote       $0A
00095992 E701                       	dc.b	smpsNoAttack, $01
00095994 E106                       	smpsAlterNote       $06
00095996 E701                       	dc.b	smpsNoAttack, $01
00095998 E10A                       	smpsAlterNote       $0A
0009599A E701                       	dc.b	smpsNoAttack, $01
0009599C E10D                       	smpsAlterNote       $0D
0009599E E701                       	dc.b	smpsNoAttack, $01
000959A0 E111                       	smpsAlterNote       $11
000959A2 E701                       	dc.b	smpsNoAttack, $01
000959A4 E10D                       	smpsAlterNote       $0D
000959A6 E701                       	dc.b	smpsNoAttack, $01
000959A8 E10F                       	smpsAlterNote       $0F
000959AA BA0E                       	dc.b	nA4, $0E
000959AC E109                       	smpsAlterNote       $09
000959AE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000959B2 E10F                       	smpsAlterNote       $0F
000959B4 E701                       	dc.b	smpsNoAttack, $01
000959B6 E112                       	smpsAlterNote       $12
000959B8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000959BC E10C                       	smpsAlterNote       $0C
000959BE E701                       	dc.b	smpsNoAttack, $01
000959C0 E108                       	smpsAlterNote       $08
000959C2 E701                       	dc.b	smpsNoAttack, $01
000959C4 E109                       	smpsAlterNote       $09
000959C6 E701                       	dc.b	smpsNoAttack, $01
000959C8 E10F                       	smpsAlterNote       $0F
000959CA E701                       	dc.b	smpsNoAttack, $01
000959CC E113                       	smpsAlterNote       $13
000959CE E701                       	dc.b	smpsNoAttack, $01
000959D0 E10F                       	smpsAlterNote       $0F
000959D2 E701                       	dc.b	smpsNoAttack, $01
000959D4 E109                       	smpsAlterNote       $09
000959D6 E701                       	dc.b	smpsNoAttack, $01
000959D8 E108                       	smpsAlterNote       $08
000959DA E701                       	dc.b	smpsNoAttack, $01
000959DC E10C                       	smpsAlterNote       $0C
000959DE E701                       	dc.b	smpsNoAttack, $01
000959E0 E112                       	smpsAlterNote       $12
000959E2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000959E6 E10F                       	smpsAlterNote       $0F
000959E8 E701                       	dc.b	smpsNoAttack, $01
000959EA E109                       	smpsAlterNote       $09
000959EC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000959F0 E10F                       	smpsAlterNote       $0F
000959F2 E701                       	dc.b	smpsNoAttack, $01
000959F4 E112                       	smpsAlterNote       $12
000959F6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000959FA E10C                       	smpsAlterNote       $0C
000959FC E701                       	dc.b	smpsNoAttack, $01
000959FE E108                       	smpsAlterNote       $08
00095A00 E701                       	dc.b	smpsNoAttack, $01
00095A02 E109                       	smpsAlterNote       $09
00095A04 E701                       	dc.b	smpsNoAttack, $01
00095A06 E10F                       	smpsAlterNote       $0F
00095A08 E701                       	dc.b	smpsNoAttack, $01
00095A0A E113                       	smpsAlterNote       $13
00095A0C E701                       	dc.b	smpsNoAttack, $01
00095A0E E10F                       	smpsAlterNote       $0F
00095A10 E701                       	dc.b	smpsNoAttack, $01
00095A12 E10C                       	smpsAlterNote       $0C
00095A14 E701                       	dc.b	smpsNoAttack, $01
00095A16 E108                       	smpsAlterNote       $08
00095A18 E701                       	dc.b	smpsNoAttack, $01
00095A1A E109                       	smpsAlterNote       $09
00095A1C 8001                       	dc.b	nRst, $01
00095A1E E10C                       	smpsAlterNote       $0C
00095A20 B50A                       	dc.b	nE4, $0A
00095A22 E10D                       	smpsAlterNote       $0D
00095A24 B60D                       	dc.b	nF4, $0D
00095A26 E10A                       	smpsAlterNote       $0A
00095A28 E701                       	dc.b	smpsNoAttack, $01
00095A2A E106                       	smpsAlterNote       $06
00095A2C E701                       	dc.b	smpsNoAttack, $01
00095A2E E107                       	smpsAlterNote       $07
00095A30 E701                       	dc.b	smpsNoAttack, $01
00095A32 E10D                       	smpsAlterNote       $0D
00095A34 E701                       	dc.b	smpsNoAttack, $01
00095A36 E111                       	smpsAlterNote       $11
00095A38 E701                       	dc.b	smpsNoAttack, $01
00095A3A E10D                       	smpsAlterNote       $0D
00095A3C E701                       	dc.b	smpsNoAttack, $01
00095A3E E10A                       	smpsAlterNote       $0A
00095A40 E701                       	dc.b	smpsNoAttack, $01
00095A42 E106                       	smpsAlterNote       $06
00095A44 E701                       	dc.b	smpsNoAttack, $01
00095A46 E10A                       	smpsAlterNote       $0A
00095A48 E701                       	dc.b	smpsNoAttack, $01
00095A4A E110                       	smpsAlterNote       $10
00095A4C E701                       	dc.b	smpsNoAttack, $01
00095A4E E111                       	smpsAlterNote       $11
00095A50 E701                       	dc.b	smpsNoAttack, $01
00095A52 E10D                       	smpsAlterNote       $0D
00095A54 B80D                       	dc.b	nG4, $0D
00095A56 E10A                       	smpsAlterNote       $0A
00095A58 E701                       	dc.b	smpsNoAttack, $01
00095A5A E106                       	smpsAlterNote       $06
00095A5C E701                       	dc.b	smpsNoAttack, $01
00095A5E E107                       	smpsAlterNote       $07
00095A60 E701                       	dc.b	smpsNoAttack, $01
00095A62 E10D                       	smpsAlterNote       $0D
00095A64 E701                       	dc.b	smpsNoAttack, $01
00095A66 E111                       	smpsAlterNote       $11
00095A68 E701                       	dc.b	smpsNoAttack, $01
00095A6A E10D                       	smpsAlterNote       $0D
00095A6C E701                       	dc.b	smpsNoAttack, $01
00095A6E E10A                       	smpsAlterNote       $0A
00095A70 E701                       	dc.b	smpsNoAttack, $01
00095A72 E106                       	smpsAlterNote       $06
00095A74 E701                       	dc.b	smpsNoAttack, $01
00095A76 E10A                       	smpsAlterNote       $0A
00095A78 E701                       	dc.b	smpsNoAttack, $01
00095A7A E110                       	smpsAlterNote       $10
00095A7C E701                       	dc.b	smpsNoAttack, $01
00095A7E E111                       	smpsAlterNote       $11
00095A80 E701                       	dc.b	smpsNoAttack, $01
00095A82 E10D                       	smpsAlterNote       $0D
00095A84 E701                       	dc.b	smpsNoAttack, $01
00095A86 E107                       	smpsAlterNote       $07
00095A88 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095A8C E10A                       	smpsAlterNote       $0A
00095A8E E701                       	dc.b	smpsNoAttack, $01
00095A90 E110                       	smpsAlterNote       $10
00095A92 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095A96 E10D                       	smpsAlterNote       $0D
00095A98 8001                       	dc.b	nRst, $01
00095A9A E10F                       	smpsAlterNote       $0F
00095A9C BA0D                       	dc.b	nA4, $0D
00095A9E E10C                       	smpsAlterNote       $0C
00095AA0 E701                       	dc.b	smpsNoAttack, $01
00095AA2 E108                       	smpsAlterNote       $08
00095AA4 E701                       	dc.b	smpsNoAttack, $01
00095AA6 E10C                       	smpsAlterNote       $0C
00095AA8 E701                       	dc.b	smpsNoAttack, $01
00095AAA E112                       	smpsAlterNote       $12
00095AAC E701                       	dc.b	smpsNoAttack, $01
00095AAE E113                       	smpsAlterNote       $13
00095AB0 E701                       	dc.b	smpsNoAttack, $01
00095AB2 E10F                       	smpsAlterNote       $0F
00095AB4 E701                       	dc.b	smpsNoAttack, $01
00095AB6 E109                       	smpsAlterNote       $09
00095AB8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095ABC E10C                       	smpsAlterNote       $0C
00095ABE E701                       	dc.b	smpsNoAttack, $01
00095AC0 E112                       	smpsAlterNote       $12
00095AC2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095AC6 E10C                       	smpsAlterNote       $0C
00095AC8 E701                       	dc.b	smpsNoAttack, $01
00095ACA E109                       	smpsAlterNote       $09
00095ACC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095AD0 E10F                       	smpsAlterNote       $0F
00095AD2 E701                       	dc.b	smpsNoAttack, $01
00095AD4 E113                       	smpsAlterNote       $13
00095AD6 E701                       	dc.b	smpsNoAttack, $01
00095AD8 E112                       	smpsAlterNote       $12
00095ADA E701                       	dc.b	smpsNoAttack, $01
00095ADC E10C                       	smpsAlterNote       $0C
00095ADE E701                       	dc.b	smpsNoAttack, $01
00095AE0 E108                       	smpsAlterNote       $08
00095AE2 E701                       	dc.b	smpsNoAttack, $01
00095AE4 E10C                       	smpsAlterNote       $0C
00095AE6 E701                       	dc.b	smpsNoAttack, $01
00095AE8 E10F                       	smpsAlterNote       $0F
00095AEA E701                       	dc.b	smpsNoAttack, $01
00095AEC E113                       	smpsAlterNote       $13
00095AEE E701                       	dc.b	smpsNoAttack, $01
00095AF0 E10F                       	smpsAlterNote       $0F
00095AF2 E701                       	dc.b	smpsNoAttack, $01
00095AF4 E109                       	smpsAlterNote       $09
00095AF6 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00095AFA E10D                       	smpsAlterNote       $0D
00095AFC B609 8001                  	dc.b	nF4, $09, nRst, $01
00095B00 E10C                       	smpsAlterNote       $0C
00095B02 B506 8001                  	dc.b	nE4, $06, nRst, $01
00095B06 E10B                       	smpsAlterNote       $0B
00095B08 B30D                       	dc.b	nD4, $0D
00095B0A E10C                       	smpsAlterNote       $0C
00095B0C B503 8001                  	dc.b	nE4, $03, nRst, $01
00095B10 E10D                       	smpsAlterNote       $0D
00095B12 B603 B803 8001 BA0D        	dc.b	nF4, $03, nG4, $03, nRst, $01, nA4, $0D
00095B1A E109                       	smpsAlterNote       $09
00095B1C E701                       	dc.b	smpsNoAttack, $01
00095B1E E108                       	smpsAlterNote       $08
00095B20 E701                       	dc.b	smpsNoAttack, $01
00095B22 E10C                       	smpsAlterNote       $0C
00095B24 E701                       	dc.b	smpsNoAttack, $01
00095B26 E112                       	smpsAlterNote       $12
00095B28 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095B2C E10F                       	smpsAlterNote       $0F
00095B2E E701                       	dc.b	smpsNoAttack, $01
00095B30 E109                       	smpsAlterNote       $09
00095B32 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095B36 E10F                       	smpsAlterNote       $0F
00095B38 E701                       	dc.b	smpsNoAttack, $01
00095B3A E112                       	smpsAlterNote       $12
00095B3C E701                       	dc.b	smpsNoAttack, $01
00095B3E E113                       	smpsAlterNote       $13
00095B40 8001                       	dc.b	nRst, $01
00095B42 E10D                       	smpsAlterNote       $0D
00095B44 C20D                       	dc.b	nF5, $0D
00095B46 E107                       	smpsAlterNote       $07
00095B48 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095B4C E10A                       	smpsAlterNote       $0A
00095B4E E701                       	dc.b	smpsNoAttack, $01
00095B50 E110                       	smpsAlterNote       $10
00095B52 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095B56 E10A                       	smpsAlterNote       $0A
00095B58 E701                       	dc.b	smpsNoAttack, $01
00095B5A E107                       	smpsAlterNote       $07
00095B5C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095B60 E10D                       	smpsAlterNote       $0D
00095B62 E701                       	dc.b	smpsNoAttack, $01
00095B64 E111                       	smpsAlterNote       $11
00095B66 E701                       	dc.b	smpsNoAttack, $01
00095B68 E110                       	smpsAlterNote       $10
00095B6A E701                       	dc.b	smpsNoAttack, $01
00095B6C E10A                       	smpsAlterNote       $0A
00095B6E E701                       	dc.b	smpsNoAttack, $01
00095B70 E106                       	smpsAlterNote       $06
00095B72 E701                       	dc.b	smpsNoAttack, $01
00095B74 E10A                       	smpsAlterNote       $0A
00095B76 E701                       	dc.b	smpsNoAttack, $01
00095B78 E10D                       	smpsAlterNote       $0D
00095B7A E701                       	dc.b	smpsNoAttack, $01
00095B7C E111                       	smpsAlterNote       $11
00095B7E E701                       	dc.b	smpsNoAttack, $01
00095B80 E10D                       	smpsAlterNote       $0D
00095B82 E701                       	dc.b	smpsNoAttack, $01
00095B84 E107                       	smpsAlterNote       $07
00095B86 E701                       	dc.b	smpsNoAttack, $01
00095B88 E106                       	smpsAlterNote       $06
00095B8A E701                       	dc.b	smpsNoAttack, $01
00095B8C E10A                       	smpsAlterNote       $0A
00095B8E E701                       	dc.b	smpsNoAttack, $01
00095B90 E110                       	smpsAlterNote       $10
00095B92 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095B96 E10D                       	smpsAlterNote       $0D
00095B98 E701                       	dc.b	smpsNoAttack, $01
00095B9A E107                       	smpsAlterNote       $07
00095B9C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095BA0 E10D                       	smpsAlterNote       $0D
00095BA2 E701                       	dc.b	smpsNoAttack, $01
00095BA4 E110                       	smpsAlterNote       $10
00095BA6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095BAA E10A                       	smpsAlterNote       $0A
00095BAC E701                       	dc.b	smpsNoAttack, $01
00095BAE E106                       	smpsAlterNote       $06
00095BB0 E701                       	dc.b	smpsNoAttack, $01
00095BB2 E107                       	smpsAlterNote       $07
00095BB4 E701                       	dc.b	smpsNoAttack, $01
00095BB6 E10D                       	smpsAlterNote       $0D
00095BB8 E701                       	dc.b	smpsNoAttack, $01
00095BBA E111                       	smpsAlterNote       $11
00095BBC E701                       	dc.b	smpsNoAttack, $01
00095BBE E10D                       	smpsAlterNote       $0D
00095BC0 E701                       	dc.b	smpsNoAttack, $01
00095BC2 E10A                       	smpsAlterNote       $0A
00095BC4 E701                       	dc.b	smpsNoAttack, $01
00095BC6 E106                       	smpsAlterNote       $06
00095BC8 E701                       	dc.b	smpsNoAttack, $01
00095BCA E10A                       	smpsAlterNote       $0A
00095BCC E701                       	dc.b	smpsNoAttack, $01
00095BCE E110                       	smpsAlterNote       $10
00095BD0 E701                       	dc.b	smpsNoAttack, $01
00095BD2 E111                       	smpsAlterNote       $11
00095BD4 E701                       	dc.b	smpsNoAttack, $01
00095BD6 E10D                       	smpsAlterNote       $0D
00095BD8 E701                       	dc.b	smpsNoAttack, $01
00095BDA E107                       	smpsAlterNote       $07
00095BDC E701                       	dc.b	smpsNoAttack, $01
00095BDE E10D                       	smpsAlterNote       $0D
00095BE0 C207                       	dc.b	nF5, $07
00095BE2 E10C                       	smpsAlterNote       $0C
00095BE4 C10D                       	dc.b	nE5, $0D
00095BE6 E109                       	smpsAlterNote       $09
00095BE8 E701                       	dc.b	smpsNoAttack, $01
00095BEA E106                       	smpsAlterNote       $06
00095BEC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095BF0 E10C                       	smpsAlterNote       $0C
00095BF2 E701                       	dc.b	smpsNoAttack, $01
00095BF4 E110                       	smpsAlterNote       $10
00095BF6 E701                       	dc.b	smpsNoAttack, $01
00095BF8 E10F                       	smpsAlterNote       $0F
00095BFA E701                       	dc.b	smpsNoAttack, $01
00095BFC E109                       	smpsAlterNote       $09
00095BFE E701                       	dc.b	smpsNoAttack, $01
00095C00 E105                       	smpsAlterNote       $05
00095C02 E701                       	dc.b	smpsNoAttack, $01
00095C04 E109                       	smpsAlterNote       $09
00095C06 E701                       	dc.b	smpsNoAttack, $01
00095C08 E10C                       	smpsAlterNote       $0C
00095C0A E701                       	dc.b	smpsNoAttack, $01
00095C0C E110                       	smpsAlterNote       $10
00095C0E E701                       	dc.b	smpsNoAttack, $01
00095C10 E10B                       	smpsAlterNote       $0B
00095C12 BF0D                       	dc.b	nD5, $0D
00095C14 E108                       	smpsAlterNote       $08
00095C16 E701                       	dc.b	smpsNoAttack, $01
00095C18 E105                       	smpsAlterNote       $05
00095C1A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095C1E E10B                       	smpsAlterNote       $0B
00095C20 E701                       	dc.b	smpsNoAttack, $01
00095C22 E10F                       	smpsAlterNote       $0F
00095C24 E701                       	dc.b	smpsNoAttack, $01
00095C26 E10E                       	smpsAlterNote       $0E
00095C28 E701                       	dc.b	smpsNoAttack, $01
00095C2A E108                       	smpsAlterNote       $08
00095C2C E701                       	dc.b	smpsNoAttack, $01
00095C2E E104                       	smpsAlterNote       $04
00095C30 E701                       	dc.b	smpsNoAttack, $01
00095C32 E108                       	smpsAlterNote       $08
00095C34 E701                       	dc.b	smpsNoAttack, $01
00095C36 E10E                       	smpsAlterNote       $0E
00095C38 E701                       	dc.b	smpsNoAttack, $01
00095C3A E10F                       	smpsAlterNote       $0F
00095C3C E701                       	dc.b	smpsNoAttack, $01
00095C3E E10B                       	smpsAlterNote       $0B
00095C40 E701                       	dc.b	smpsNoAttack, $01
00095C42 E105                       	smpsAlterNote       $05
00095C44 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095C48 E108                       	smpsAlterNote       $08
00095C4A E701                       	dc.b	smpsNoAttack, $01
00095C4C E10E                       	smpsAlterNote       $0E
00095C4E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095C52 E108                       	smpsAlterNote       $08
00095C54 E701                       	dc.b	smpsNoAttack, $01
00095C56 E105                       	smpsAlterNote       $05
00095C58 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095C5C E10B                       	smpsAlterNote       $0B
00095C5E E701                       	dc.b	smpsNoAttack, $01
00095C60 E10F                       	smpsAlterNote       $0F
00095C62 E701                       	dc.b	smpsNoAttack, $01
00095C64 E10E                       	smpsAlterNote       $0E
00095C66 E701                       	dc.b	smpsNoAttack, $01
00095C68 E108                       	smpsAlterNote       $08
00095C6A E701                       	dc.b	smpsNoAttack, $01
00095C6C E104                       	smpsAlterNote       $04
00095C6E E701                       	dc.b	smpsNoAttack, $01
00095C70 E108                       	smpsAlterNote       $08
00095C72 E701                       	dc.b	smpsNoAttack, $01
00095C74 E10B                       	smpsAlterNote       $0B
00095C76 E701                       	dc.b	smpsNoAttack, $01
00095C78 E10F                       	smpsAlterNote       $0F
00095C7A E701                       	dc.b	smpsNoAttack, $01
00095C7C E10B                       	smpsAlterNote       $0B
00095C7E E701                       	dc.b	smpsNoAttack, $01
00095C80 E105                       	smpsAlterNote       $05
00095C82 E701                       	dc.b	smpsNoAttack, $01
00095C84 E104                       	smpsAlterNote       $04
00095C86 E701                       	dc.b	smpsNoAttack, $01
00095C88 E108                       	smpsAlterNote       $08
00095C8A E701                       	dc.b	smpsNoAttack, $01
00095C8C E10E                       	smpsAlterNote       $0E
00095C8E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095C92 E10B                       	smpsAlterNote       $0B
00095C94 E701                       	dc.b	smpsNoAttack, $01
00095C96 E105                       	smpsAlterNote       $05
00095C98 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095C9C E10B                       	smpsAlterNote       $0B
00095C9E E701                       	dc.b	smpsNoAttack, $01
00095CA0 E10E                       	smpsAlterNote       $0E
00095CA2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095CA6 E108                       	smpsAlterNote       $08
00095CA8 E701                       	dc.b	smpsNoAttack, $01
00095CAA E105                       	smpsAlterNote       $05
00095CAC 8001                       	dc.b	nRst, $01
00095CB0 E601                       	smpsAlterVol        $01
00095CB2 E10B                       	smpsAlterNote       $0B
00095CB4 BF06 8001 BF03 BF03 8001+  	dc.b	nD5, $06, nRst, $01, nD5, $03, nD5, $03, nRst, $01, nCs5, $03
00095CC0 8004                       	dc.b	nRst, $04
00095CC4 E6FF                       	smpsAlterVol        $FF
00095CC6 E10D                       	smpsAlterNote       $0D
00095CC8 B802 8001 B603 B601        	dc.b	nG4, $02, nRst, $01, nF4, $03, nF4, $01
00095CD0 E10C                       	smpsAlterNote       $0C
00095CD2 E7B5 0280 01               	dc.b	smpsNoAttack, nE4, $02, nRst, $01
00095CD7 E10D                       	smpsAlterNote       $0D
00095CD9 B60D                       	dc.b	nF4, $0D
00095CDB E10A                       	smpsAlterNote       $0A
00095CDD E701                       	dc.b	smpsNoAttack, $01
00095CDF E106                       	smpsAlterNote       $06
00095CE1 E701                       	dc.b	smpsNoAttack, $01
00095CE3 E10A                       	smpsAlterNote       $0A
00095CE5 E701                       	dc.b	smpsNoAttack, $01
00095CE7 E110                       	smpsAlterNote       $10
00095CE9 E701                       	dc.b	smpsNoAttack, $01
00095CEB E111                       	smpsAlterNote       $11
00095CED E701                       	dc.b	smpsNoAttack, $01
00095CEF E10D                       	smpsAlterNote       $0D
00095CF1 E701                       	dc.b	smpsNoAttack, $01
00095CF3 E107                       	smpsAlterNote       $07
00095CF5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095CF9 E10A                       	smpsAlterNote       $0A
00095CFB E701                       	dc.b	smpsNoAttack, $01
00095CFD E110                       	smpsAlterNote       $10
00095CFF E701                       	dc.b	smpsNoAttack, $01
00095D01 E111                       	smpsAlterNote       $11
00095D03 8001                       	dc.b	nRst, $01
00095D05 E10D                       	smpsAlterNote       $0D
00095D07 B80D                       	dc.b	nG4, $0D
00095D09 E10A                       	smpsAlterNote       $0A
00095D0B E701                       	dc.b	smpsNoAttack, $01
00095D0D E106                       	smpsAlterNote       $06
00095D0F E701                       	dc.b	smpsNoAttack, $01
00095D11 E10A                       	smpsAlterNote       $0A
00095D13 E701                       	dc.b	smpsNoAttack, $01
00095D15 E110                       	smpsAlterNote       $10
00095D17 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095D1B E10D                       	smpsAlterNote       $0D
00095D1D E701                       	dc.b	smpsNoAttack, $01
00095D1F E107                       	smpsAlterNote       $07
00095D21 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095D25 E10D                       	smpsAlterNote       $0D
00095D27 E701                       	dc.b	smpsNoAttack, $01
00095D29 E110                       	smpsAlterNote       $10
00095D2B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095D2F E10A                       	smpsAlterNote       $0A
00095D31 E701                       	dc.b	smpsNoAttack, $01
00095D33 E106                       	smpsAlterNote       $06
00095D35 E701                       	dc.b	smpsNoAttack, $01
00095D37 E107                       	smpsAlterNote       $07
00095D39 E701                       	dc.b	smpsNoAttack, $01
00095D3B E10D                       	smpsAlterNote       $0D
00095D3D E701                       	dc.b	smpsNoAttack, $01
00095D3F E111                       	smpsAlterNote       $11
00095D41 E701                       	dc.b	smpsNoAttack, $01
00095D43 E10D                       	smpsAlterNote       $0D
00095D45 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00095D49 E10F                       	smpsAlterNote       $0F
00095D4B BA02 8001                  	dc.b	nA4, $02, nRst, $01
00095D4F E110                       	smpsAlterNote       $10
00095D51 BB03                       	dc.b	nBb4, $03
00095D53 E10F                       	smpsAlterNote       $0F
00095D55 BA03 8001 C603             	dc.b	nA4, $03, nRst, $01, nA5, $03
00095D5B E110                       	smpsAlterNote       $10
00095D5D C703 8001                  	dc.b	nBb5, $03, nRst, $01
00095D61 E10F                       	smpsAlterNote       $0F
00095D63 C603 D203 8001             	dc.b	nA5, $03, nA6, $03, nRst, $01
00095D69 E110                       	smpsAlterNote       $10
00095D6B D302 8001                  	dc.b	nBb6, $02, nRst, $01
00095D6F E10F                       	smpsAlterNote       $0F
00095D71 D20D                       	dc.b	nA6, $0D
00095D73 E10C                       	smpsAlterNote       $0C
00095D75 E701                       	dc.b	smpsNoAttack, $01
00095D77 E108                       	smpsAlterNote       $08
00095D79 E701                       	dc.b	smpsNoAttack, $01
00095D7B E10C                       	smpsAlterNote       $0C
00095D7D E701                       	dc.b	smpsNoAttack, $01
00095D7F E10F                       	smpsAlterNote       $0F
00095D81 E701                       	dc.b	smpsNoAttack, $01
00095D83 E113                       	smpsAlterNote       $13
00095D85 E701                       	dc.b	smpsNoAttack, $01
00095D87 E10F                       	smpsAlterNote       $0F
00095D89 E701                       	dc.b	smpsNoAttack, $01
00095D8B E109                       	smpsAlterNote       $09
00095D8D E701                       	dc.b	smpsNoAttack, $01
00095D8F E108                       	smpsAlterNote       $08
00095D91 E701                       	dc.b	smpsNoAttack, $01
00095D93 E10C                       	smpsAlterNote       $0C
00095D95 E701                       	dc.b	smpsNoAttack, $01
00095D97 E112                       	smpsAlterNote       $12
00095D99 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095D9D E10F                       	smpsAlterNote       $0F
00095D9F E701                       	dc.b	smpsNoAttack, $01
00095DA1 E109                       	smpsAlterNote       $09
00095DA3 E701 E701 8007             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $07
00095DA9 E10D                       	smpsAlterNote       $0D
00095DAB CE07                       	dc.b	nF6, $07
00095DAD E10C                       	smpsAlterNote       $0C
00095DAF CD06 8001                  	dc.b	nE6, $06, nRst, $01
00095DB3 E10D                       	smpsAlterNote       $0D
00095DB5 CE03                       	dc.b	nF6, $03
00095DB7 E10C                       	smpsAlterNote       $0C
00095DB9 CC0D                       	dc.b	nEb6, $0D
00095DBB E109                       	smpsAlterNote       $09
00095DBD E701                       	dc.b	smpsNoAttack, $01
00095DBF E106                       	smpsAlterNote       $06
00095DC1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095DC5 E10C                       	smpsAlterNote       $0C
00095DC7 E701                       	dc.b	smpsNoAttack, $01
00095DC9 E110                       	smpsAlterNote       $10
00095DCB E701                       	dc.b	smpsNoAttack, $01
00095DCD E10F                       	smpsAlterNote       $0F
00095DCF E701                       	dc.b	smpsNoAttack, $01
00095DD1 E109                       	smpsAlterNote       $09
00095DD3 E701                       	dc.b	smpsNoAttack, $01
00095DD5 E105                       	smpsAlterNote       $05
00095DD7 E701                       	dc.b	smpsNoAttack, $01
00095DD9 E109                       	smpsAlterNote       $09
00095DDB E701                       	dc.b	smpsNoAttack, $01
00095DDD E10C                       	smpsAlterNote       $0C
00095DDF E701                       	dc.b	smpsNoAttack, $01
00095DE1 E110                       	smpsAlterNote       $10
00095DE3 E701                       	dc.b	smpsNoAttack, $01
00095DE5 E10C                       	smpsAlterNote       $0C
00095DE7 E701                       	dc.b	smpsNoAttack, $01
00095DE9 E106                       	smpsAlterNote       $06
00095DEB E701                       	dc.b	smpsNoAttack, $01
00095DED E105                       	smpsAlterNote       $05
00095DEF E701                       	dc.b	smpsNoAttack, $01
00095DF1 E109                       	smpsAlterNote       $09
00095DF3 E701                       	dc.b	smpsNoAttack, $01
00095DF5 E10F                       	smpsAlterNote       $0F
00095DF7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095DFB E10C                       	smpsAlterNote       $0C
00095DFD E701                       	dc.b	smpsNoAttack, $01
00095DFF E10B                       	smpsAlterNote       $0B
00095E01 CB03 8001 CA02 8001 CB03   	dc.b	nD6, $03, nRst, $01, nCs6, $02, nRst, $01, nD6, $03
00095E0B E10F                       	smpsAlterNote       $0F
00095E0D C603 8001 C503 C603 8001   	dc.b	nA5, $03, nRst, $01, nAb5, $03, nA5, $03, nRst, $01
00095E17 E10D                       	smpsAlterNote       $0D
00095E19 C203                       	dc.b	nF5, $03
00095E1B E10C                       	smpsAlterNote       $0C
00095E1D C103 8001                  	dc.b	nE5, $03, nRst, $01
00095E21 E10D                       	smpsAlterNote       $0D
00095E23 C20D                       	dc.b	nF5, $0D
00095E25 E10C                       	smpsAlterNote       $0C
00095E27 C10D 8001                  	dc.b	nE5, $0D, nRst, $01
00095E2B E10B                       	smpsAlterNote       $0B
00095E2D BF0D                       	dc.b	nD5, $0D
00095E2F E108                       	smpsAlterNote       $08
00095E31 E701                       	dc.b	smpsNoAttack, $01
00095E33 E104                       	smpsAlterNote       $04
00095E35 E701                       	dc.b	smpsNoAttack, $01
00095E37 E108                       	smpsAlterNote       $08
00095E39 E701                       	dc.b	smpsNoAttack, $01
00095E3B E10E                       	smpsAlterNote       $0E
00095E3D E701                       	dc.b	smpsNoAttack, $01
00095E3F E10F                       	smpsAlterNote       $0F
00095E41 E701                       	dc.b	smpsNoAttack, $01
00095E43 E10B                       	smpsAlterNote       $0B
00095E45 E701                       	dc.b	smpsNoAttack, $01
00095E47 E105                       	smpsAlterNote       $05
00095E49 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095E4D E108                       	smpsAlterNote       $08
00095E4F E701                       	dc.b	smpsNoAttack, $01
00095E51 E10E                       	smpsAlterNote       $0E
00095E53 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095E57 E108                       	smpsAlterNote       $08
00095E59 E701                       	dc.b	smpsNoAttack, $01
00095E5B E105                       	smpsAlterNote       $05
00095E5D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095E61 E10B                       	smpsAlterNote       $0B
00095E63 E701                       	dc.b	smpsNoAttack, $01
00095E65 E10F                       	smpsAlterNote       $0F
00095E67 E701                       	dc.b	smpsNoAttack, $01
00095E69 E10E                       	smpsAlterNote       $0E
00095E6B E701                       	dc.b	smpsNoAttack, $01
00095E6D E108                       	smpsAlterNote       $08
00095E6F E701                       	dc.b	smpsNoAttack, $01
00095E71 E104                       	smpsAlterNote       $04
00095E73 E701                       	dc.b	smpsNoAttack, $01
00095E75 E108                       	smpsAlterNote       $08
00095E77 E701                       	dc.b	smpsNoAttack, $01
00095E79 E10B                       	smpsAlterNote       $0B
00095E7B E701                       	dc.b	smpsNoAttack, $01
00095E7D E10F                       	smpsAlterNote       $0F
00095E7F E701                       	dc.b	smpsNoAttack, $01
00095E81 E10B                       	smpsAlterNote       $0B
00095E83 E701                       	dc.b	smpsNoAttack, $01
00095E85 E105                       	smpsAlterNote       $05
00095E87 E701                       	dc.b	smpsNoAttack, $01
00095E89 E104                       	smpsAlterNote       $04
00095E8B E701                       	dc.b	smpsNoAttack, $01
00095E8D E108                       	smpsAlterNote       $08
00095E8F E701                       	dc.b	smpsNoAttack, $01
00095E91 E10E                       	smpsAlterNote       $0E
00095E93 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095E97 E10B                       	smpsAlterNote       $0B
00095E99 E701                       	dc.b	smpsNoAttack, $01
00095E9B E105                       	smpsAlterNote       $05
00095E9D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095EA1 E10B                       	smpsAlterNote       $0B
00095EA3 E701                       	dc.b	smpsNoAttack, $01
00095EA5 E10E                       	smpsAlterNote       $0E
00095EA7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095EAB E108                       	smpsAlterNote       $08
00095EAD E701                       	dc.b	smpsNoAttack, $01
00095EAF E104                       	smpsAlterNote       $04
00095EB1 E701                       	dc.b	smpsNoAttack, $01
00095EB3 E105                       	smpsAlterNote       $05
00095EB5 E701                       	dc.b	smpsNoAttack, $01
00095EB7 E10B                       	smpsAlterNote       $0B
00095EB9 E701                       	dc.b	smpsNoAttack, $01
00095EBB E10F                       	smpsAlterNote       $0F
00095EBD E701                       	dc.b	smpsNoAttack, $01
00095EBF E10B                       	smpsAlterNote       $0B
00095EC1 E701                       	dc.b	smpsNoAttack, $01
00095EC3 E108                       	smpsAlterNote       $08
00095EC5 E701                       	dc.b	smpsNoAttack, $01
00095EC7 E104                       	smpsAlterNote       $04
00095EC9 E701                       	dc.b	smpsNoAttack, $01
00095ECB E108                       	smpsAlterNote       $08
00095ECD E701                       	dc.b	smpsNoAttack, $01
00095ECF E10E                       	smpsAlterNote       $0E
00095ED1 E701                       	dc.b	smpsNoAttack, $01
00095ED3 E10F                       	smpsAlterNote       $0F
00095ED5 E701                       	dc.b	smpsNoAttack, $01
00095ED7 E10B                       	smpsAlterNote       $0B
00095ED9 E701                       	dc.b	smpsNoAttack, $01
00095EDB E105                       	smpsAlterNote       $05
00095EDD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095EE1 E108                       	smpsAlterNote       $08
00095EE3 E701                       	dc.b	smpsNoAttack, $01
00095EE5 E10E                       	smpsAlterNote       $0E
00095EE7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095EEB E108                       	smpsAlterNote       $08
00095EED E701                       	dc.b	smpsNoAttack, $01
00095EEF E105                       	smpsAlterNote       $05
00095EF1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095EF5 E10B                       	smpsAlterNote       $0B
00095EF7 E701                       	dc.b	smpsNoAttack, $01
00095EF9 E10F                       	smpsAlterNote       $0F
00095EFB E701                       	dc.b	smpsNoAttack, $01
00095EFD E10E                       	smpsAlterNote       $0E
00095EFF E701                       	dc.b	smpsNoAttack, $01
00095F01 E108                       	smpsAlterNote       $08
00095F03 E701                       	dc.b	smpsNoAttack, $01
00095F05 E104                       	smpsAlterNote       $04
00095F07 E701                       	dc.b	smpsNoAttack, $01
00095F09 E108                       	smpsAlterNote       $08
00095F0B E701                       	dc.b	smpsNoAttack, $01
00095F0D E10B                       	smpsAlterNote       $0B
00095F0F E701                       	dc.b	smpsNoAttack, $01
00095F11 E10F                       	smpsAlterNote       $0F
00095F13 E701                       	dc.b	smpsNoAttack, $01
00095F15 E10B                       	smpsAlterNote       $0B
00095F17 E701                       	dc.b	smpsNoAttack, $01
00095F19 E105                       	smpsAlterNote       $05
00095F1B E701                       	dc.b	smpsNoAttack, $01
00095F1D E104                       	smpsAlterNote       $04
00095F1F E701                       	dc.b	smpsNoAttack, $01
00095F21 E105                       	smpsAlterNote       $05
00095F23 8001                       	dc.b	nRst, $01
00095F25 E10D                       	smpsAlterNote       $0D
00095F27 C20D                       	dc.b	nF5, $0D
00095F29 E107                       	smpsAlterNote       $07
00095F2B E701                       	dc.b	smpsNoAttack, $01
00095F2D E106                       	smpsAlterNote       $06
00095F2F E701                       	dc.b	smpsNoAttack, $01
00095F31 E10A                       	smpsAlterNote       $0A
00095F33 E701                       	dc.b	smpsNoAttack, $01
00095F35 E110                       	smpsAlterNote       $10
00095F37 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095F3B E10D                       	smpsAlterNote       $0D
00095F3D E701                       	dc.b	smpsNoAttack, $01
00095F3F E107                       	smpsAlterNote       $07
00095F41 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095F45 E10D                       	smpsAlterNote       $0D
00095F47 E701                       	dc.b	smpsNoAttack, $01
00095F49 E110                       	smpsAlterNote       $10
00095F4B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095F4F E10A                       	smpsAlterNote       $0A
00095F51 E701                       	dc.b	smpsNoAttack, $01
00095F53 E106                       	smpsAlterNote       $06
00095F55 E701                       	dc.b	smpsNoAttack, $01
00095F57 E107                       	smpsAlterNote       $07
00095F59 E701                       	dc.b	smpsNoAttack, $01
00095F5B E10D                       	smpsAlterNote       $0D
00095F5D E701                       	dc.b	smpsNoAttack, $01
00095F5F E111                       	smpsAlterNote       $11
00095F61 E701                       	dc.b	smpsNoAttack, $01
00095F63 E10D                       	smpsAlterNote       $0D
00095F65 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00095F69 E10C                       	smpsAlterNote       $0C
00095F6B C10D                       	dc.b	nE5, $0D
00095F6D E10D                       	smpsAlterNote       $0D
00095F6F C20A                       	dc.b	nF5, $0A
00095F71 E10C                       	smpsAlterNote       $0C
00095F73 C10E                       	dc.b	nE5, $0E
00095F75 E106                       	smpsAlterNote       $06
00095F77 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095F7B E10C                       	smpsAlterNote       $0C
00095F7D E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00095F81 E10B                       	smpsAlterNote       $0B
00095F83 BF0D                       	dc.b	nD5, $0D
00095F85 E10C                       	smpsAlterNote       $0C
00095F87 C107                       	dc.b	nE5, $07
00095F89 E10D                       	smpsAlterNote       $0D
00095F8B C206 8001 C406 8001 C603   	dc.b	nF5, $06, nRst, $01, nG5, $06, nRst, $01, nA5, $03
00095F95 E110                       	smpsAlterNote       $10
00095F97 C707 C703 8001             	dc.b	nBb5, $07, nBb5, $03, nRst, $01
00095F9D E10F                       	smpsAlterNote       $0F
00095F9F C602 8001 D206 8001        	dc.b	nA5, $02, nRst, $01, nA6, $06, nRst, $01
00095FA7 E10D                       	smpsAlterNote       $0D
00095FA9 D003                       	dc.b	nG6, $03
00095FAD E0C0                       	smpsPan             panCenter, $00
00095FAF E6FF                       	smpsAlterVol        $FF
00095FB1 AA06 800F AA03 AA03 8019+  	dc.b	nF3, $06, nRst, $0F, nF3, $03, nF3, $03, nRst, $19, nF3, $02
00095FBD 8001                       	dc.b	nRst, $01
00095FBF E10C                       	smpsAlterNote       $0C
00095FC1 A906 800F A902 8001        	dc.b	nE3, $06, nRst, $0F, nE3, $02, nRst, $01
00095FCB E604                       	smpsAlterVol        $04
00095FCD E10B                       	smpsAlterNote       $0B
00095FCF B306 8001                  	dc.b	nD4, $06, nRst, $01
00095FD3 E10F                       	smpsAlterNote       $0F
00095FD5 AE03                       	dc.b	nA3, $03
00095FD7 E10D                       	smpsAlterNote       $0D
00095FD9 B603 8001                  	dc.b	nF4, $03, nRst, $01
00095FDD E10C                       	smpsAlterNote       $0C
00095FDF B506 8001                  	dc.b	nE4, $06, nRst, $01
00095FE3 E10B                       	smpsAlterNote       $0B
00095FE5 B302 8001                  	dc.b	nD4, $02, nRst, $01
00095FE9 E10A                       	smpsAlterNote       $0A
00095FEB B103                       	dc.b	nC4, $03
00095FED E110                       	smpsAlterNote       $10
00095FEF AF03 8001                  	dc.b	nBb3, $03, nRst, $01
00095FF3 E10F                       	smpsAlterNote       $0F
00095FF5 AE03 800A                  	dc.b	nA3, $03, nRst, $0A
00095FF9 E080                       	smpsPan             panLeft, $00
00095FFB 01                         	dc.b	$01
00095FFE E6FB                       	smpsAlterVol        $FB
00096000 E1E4                       	smpsAlterNote       $E4
00096002 C501                       	dc.b	nAb5, $01
00096004 E1F4                       	smpsAlterNote       $F4
00096006 E701                       	dc.b	smpsNoAttack, $01
00096008 E104                       	smpsAlterNote       $04
0009600A E701                       	dc.b	smpsNoAttack, $01
0009600C E114                       	smpsAlterNote       $14
0009600E E701                       	dc.b	smpsNoAttack, $01
00096010 E11C                       	smpsAlterNote       $1C
00096012 E701                       	dc.b	smpsNoAttack, $01
00096014 E1EF                       	smpsAlterNote       $EF
00096016 E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
00096019 E1FF                       	smpsAlterNote       $FF
0009601B E701                       	dc.b	smpsNoAttack, $01
0009601D E10F                       	smpsAlterNote       $0F
0009601F C606                       	dc.b	nA5, $06
00096021 E109                       	smpsAlterNote       $09
00096023 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096027 E10F                       	smpsAlterNote       $0F
00096029 E701                       	dc.b	smpsNoAttack, $01
0009602B E112                       	smpsAlterNote       $12
0009602D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096031 E10C                       	smpsAlterNote       $0C
00096033 E701                       	dc.b	smpsNoAttack, $01
00096035 E108                       	smpsAlterNote       $08
00096037 E701                       	dc.b	smpsNoAttack, $01
00096039 E109                       	smpsAlterNote       $09
0009603B E701                       	dc.b	smpsNoAttack, $01
0009603D E10F                       	smpsAlterNote       $0F
0009603F E701                       	dc.b	smpsNoAttack, $01
00096041 E113                       	smpsAlterNote       $13
00096043 E701                       	dc.b	smpsNoAttack, $01
00096045 E10F                       	smpsAlterNote       $0F
00096047 E701                       	dc.b	smpsNoAttack, $01
00096049 E10C                       	smpsAlterNote       $0C
0009604B E701                       	dc.b	smpsNoAttack, $01
0009604D E108                       	smpsAlterNote       $08
0009604F E701                       	dc.b	smpsNoAttack, $01
00096051 E10C                       	smpsAlterNote       $0C
00096053 E701                       	dc.b	smpsNoAttack, $01
00096055 E112                       	smpsAlterNote       $12
00096057 E701                       	dc.b	smpsNoAttack, $01
00096059 E113                       	smpsAlterNote       $13
0009605B E701                       	dc.b	smpsNoAttack, $01
0009605D E10F                       	smpsAlterNote       $0F
0009605F E701                       	dc.b	smpsNoAttack, $01
00096061 E109                       	smpsAlterNote       $09
00096063 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096067 E10C                       	smpsAlterNote       $0C
00096069 E701                       	dc.b	smpsNoAttack, $01
0009606B E112                       	smpsAlterNote       $12
0009606D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096071 E10C                       	smpsAlterNote       $0C
00096073 E701                       	dc.b	smpsNoAttack, $01
00096075 E109                       	smpsAlterNote       $09
00096077 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009607B E10F                       	smpsAlterNote       $0F
0009607D E701                       	dc.b	smpsNoAttack, $01
0009607F E113                       	smpsAlterNote       $13
00096081 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00096085 E10D                       	smpsAlterNote       $0D
00096087 C402 8001 C203             	dc.b	nG5, $02, nRst, $01, nF5, $03
0009608D E10C                       	smpsAlterNote       $0C
0009608F C102 8001                  	dc.b	nE5, $02, nRst, $01
00096093 E10D                       	smpsAlterNote       $0D
00096095 C201 8001                  	dc.b	nF5, $01, nRst, $01
00096099 E10C                       	smpsAlterNote       $0C
0009609B C102                       	dc.b	nE5, $02
0009609D E10B                       	smpsAlterNote       $0B
0009609F BF02 8001                  	dc.b	nD5, $02, nRst, $01
000960A3 E10C                       	smpsAlterNote       $0C
000960A5 C101 8001                  	dc.b	nE5, $01, nRst, $01
000960A9 E10B                       	smpsAlterNote       $0B
000960AB BF02                       	dc.b	nD5, $02
000960AD E10A                       	smpsAlterNote       $0A
000960AF BD02 BF02 8001 BD01 8001   	dc.b	nC5, $02, nD5, $02, nRst, $01, nC5, $01, nRst, $01
000960B9 E110                       	smpsAlterNote       $10
000960BB BB02                       	dc.b	nBb4, $02
000960BD E10A                       	smpsAlterNote       $0A
000960BF BD02 8001                  	dc.b	nC5, $02, nRst, $01
000960C3 E110                       	smpsAlterNote       $10
000960C5 BB01 8001                  	dc.b	nBb4, $01, nRst, $01
000960C9 E10F                       	smpsAlterNote       $0F
000960CB BA01 8001                  	dc.b	nA4, $01, nRst, $01
000960CF E110                       	smpsAlterNote       $10
000960D1 BB02                       	dc.b	nBb4, $02
000960D3 E10F                       	smpsAlterNote       $0F
000960D5 BA02 8001 B901 8001 BA02   	dc.b	nA4, $02, nRst, $01, nAb4, $01, nRst, $01, nA4, $02
000960DF E10C                       	smpsAlterNote       $0C
000960E1 B502 B501 C101 8001        	dc.b	nE4, $02, nE4, $01, nE5, $01, nRst, $01
000960E9 E10B                       	smpsAlterNote       $0B
000960EB BE01 8001                  	dc.b	nCs5, $01, nRst, $01
000960EF E10F                       	smpsAlterNote       $0F
000960F1 BA02                       	dc.b	nA4, $02
000960F5 E0C0                       	smpsPan             panCenter, $00
000960F7 E601                       	smpsAlterVol        $01
000960F9 E109                       	smpsAlterNote       $09
000960FB AA07 800E AA03 AA07 8015+  	dc.b	nF3, $07, nRst, $0E, nF3, $03, nF3, $07, nRst, $15, nF3, $03
00096107 E108                       	smpsAlterNote       $08
00096109 A906 800F A903             	dc.b	nE3, $06, nRst, $0F, nE3, $03
0009610F E107                       	smpsAlterNote       $07
00096111 B306 8001 AE03             	dc.b	nD4, $06, nRst, $01, nA3, $03
00096117 E109                       	smpsAlterNote       $09
00096119 B603 8001                  	dc.b	nF4, $03, nRst, $01
0009611D E108                       	smpsAlterNote       $08
0009611F B506 8001                  	dc.b	nE4, $06, nRst, $01
00096123 E107                       	smpsAlterNote       $07
00096125 B302 8001                  	dc.b	nD4, $02, nRst, $01
00096129 E106                       	smpsAlterNote       $06
0009612B B103                       	dc.b	nC4, $03
0009612D E10C                       	smpsAlterNote       $0C
0009612F AF03 8001                  	dc.b	nBb3, $03, nRst, $01
00096135 E080                       	smpsPan             panLeft, $00
00096137 07                         	dc.b	$07
00096138 E6FE                       	smpsAlterVol        $FE
0009613A E10B                       	smpsAlterNote       $0B
0009613C B20D                       	dc.b	nCs4, $0D
0009613E E105                       	smpsAlterNote       $05
00096140 E701                       	dc.b	smpsNoAttack, $01
00096142 E104                       	smpsAlterNote       $04
00096144 E701                       	dc.b	smpsNoAttack, $01
00096146 E108                       	smpsAlterNote       $08
00096148 E701                       	dc.b	smpsNoAttack, $01
0009614A E10E                       	smpsAlterNote       $0E
0009614C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096150 E10B                       	smpsAlterNote       $0B
00096152 E701                       	dc.b	smpsNoAttack, $01
00096154 E105                       	smpsAlterNote       $05
00096156 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009615A E10B                       	smpsAlterNote       $0B
0009615C E701                       	dc.b	smpsNoAttack, $01
0009615E E10E                       	smpsAlterNote       $0E
00096160 E701                       	dc.b	smpsNoAttack, $01
00096162 E10F                       	smpsAlterNote       $0F
00096164 8001                       	dc.b	nRst, $01
00096166 E10B                       	smpsAlterNote       $0B
00096168 B30D                       	dc.b	nD4, $0D
0009616A E105                       	smpsAlterNote       $05
0009616C E701                       	dc.b	smpsNoAttack, $01
0009616E E104                       	smpsAlterNote       $04
00096170 E701                       	dc.b	smpsNoAttack, $01
00096172 E108                       	smpsAlterNote       $08
00096174 E701                       	dc.b	smpsNoAttack, $01
00096176 E10E                       	smpsAlterNote       $0E
00096178 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009617C E10B                       	smpsAlterNote       $0B
0009617E E701                       	dc.b	smpsNoAttack, $01
00096180 E105                       	smpsAlterNote       $05
00096182 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096186 E10B                       	smpsAlterNote       $0B
00096188 E701                       	dc.b	smpsNoAttack, $01
0009618A E10E                       	smpsAlterNote       $0E
0009618C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096190 E108                       	smpsAlterNote       $08
00096192 E701                       	dc.b	smpsNoAttack, $01
00096194 E104                       	smpsAlterNote       $04
00096196 E701                       	dc.b	smpsNoAttack, $01
00096198 E105                       	smpsAlterNote       $05
0009619A E701                       	dc.b	smpsNoAttack, $01
0009619C E10B                       	smpsAlterNote       $0B
0009619E E701                       	dc.b	smpsNoAttack, $01
000961A0 E10F                       	smpsAlterNote       $0F
000961A2 E701                       	dc.b	smpsNoAttack, $01
000961A4 E10B                       	smpsAlterNote       $0B
000961A6 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000961AA E10C                       	smpsAlterNote       $0C
000961AC B50D                       	dc.b	nE4, $0D
000961AE E106                       	smpsAlterNote       $06
000961B0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000961B4 E10C                       	smpsAlterNote       $0C
000961B6 E701                       	dc.b	smpsNoAttack, $01
000961B8 E10F                       	smpsAlterNote       $0F
000961BA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000961BE E109                       	smpsAlterNote       $09
000961C0 E701                       	dc.b	smpsNoAttack, $01
000961C2 E105                       	smpsAlterNote       $05
000961C4 E701                       	dc.b	smpsNoAttack, $01
000961C6 E106                       	smpsAlterNote       $06
000961C8 E701                       	dc.b	smpsNoAttack, $01
000961CA E10C                       	smpsAlterNote       $0C
000961CC E701                       	dc.b	smpsNoAttack, $01
000961CE E110                       	smpsAlterNote       $10
000961D0 E701                       	dc.b	smpsNoAttack, $01
000961D2 E10B                       	smpsAlterNote       $0B
000961D4 B30E                       	dc.b	nD4, $0E
000961D6 E105                       	smpsAlterNote       $05
000961D8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000961DC E10B                       	smpsAlterNote       $0B
000961DE E701                       	dc.b	smpsNoAttack, $01
000961E0 E10E                       	smpsAlterNote       $0E
000961E2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000961E6 E108                       	smpsAlterNote       $08
000961E8 E701                       	dc.b	smpsNoAttack, $01
000961EA E104                       	smpsAlterNote       $04
000961EC E701                       	dc.b	smpsNoAttack, $01
000961EE E105                       	smpsAlterNote       $05
000961F0 E701                       	dc.b	smpsNoAttack, $01
000961F2 E10B                       	smpsAlterNote       $0B
000961F4 E701                       	dc.b	smpsNoAttack, $01
000961F6 E10F                       	smpsAlterNote       $0F
000961F8 E701                       	dc.b	smpsNoAttack, $01
000961FA E10B                       	smpsAlterNote       $0B
000961FC E701                       	dc.b	smpsNoAttack, $01
000961FE E108                       	smpsAlterNote       $08
00096200 E701                       	dc.b	smpsNoAttack, $01
00096202 E104                       	smpsAlterNote       $04
00096204 E701                       	dc.b	smpsNoAttack, $01
00096206 E108                       	smpsAlterNote       $08
00096208 E701                       	dc.b	smpsNoAttack, $01
0009620A E10E                       	smpsAlterNote       $0E
0009620C E701                       	dc.b	smpsNoAttack, $01
0009620E E10F                       	smpsAlterNote       $0F
00096210 E701                       	dc.b	smpsNoAttack, $01
00096212 E10B                       	smpsAlterNote       $0B
00096214 E701 B20D                  	dc.b	smpsNoAttack, $01, nCs4, $0D
00096218 E108                       	smpsAlterNote       $08
0009621A E701                       	dc.b	smpsNoAttack, $01
0009621C E105                       	smpsAlterNote       $05
0009621E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096222 E10B                       	smpsAlterNote       $0B
00096224 E701                       	dc.b	smpsNoAttack, $01
00096226 E10F                       	smpsAlterNote       $0F
00096228 E701                       	dc.b	smpsNoAttack, $01
0009622A E10E                       	smpsAlterNote       $0E
0009622C E701                       	dc.b	smpsNoAttack, $01
0009622E E108                       	smpsAlterNote       $08
00096230 E701                       	dc.b	smpsNoAttack, $01
00096232 E104                       	smpsAlterNote       $04
00096234 E701                       	dc.b	smpsNoAttack, $01
00096236 E108                       	smpsAlterNote       $08
00096238 E701                       	dc.b	smpsNoAttack, $01
0009623A E10B                       	smpsAlterNote       $0B
0009623C E701                       	dc.b	smpsNoAttack, $01
0009623E E10F                       	smpsAlterNote       $0F
00096240 E701                       	dc.b	smpsNoAttack, $01
00096242 E10B                       	smpsAlterNote       $0B
00096244 B30D                       	dc.b	nD4, $0D
00096246 E108                       	smpsAlterNote       $08
00096248 E701                       	dc.b	smpsNoAttack, $01
0009624A E105                       	smpsAlterNote       $05
0009624C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096250 E10B                       	smpsAlterNote       $0B
00096252 E701                       	dc.b	smpsNoAttack, $01
00096254 E10F                       	smpsAlterNote       $0F
00096256 E701                       	dc.b	smpsNoAttack, $01
00096258 E10E                       	smpsAlterNote       $0E
0009625A E701                       	dc.b	smpsNoAttack, $01
0009625C E108                       	smpsAlterNote       $08
0009625E E701                       	dc.b	smpsNoAttack, $01
00096260 E104                       	smpsAlterNote       $04
00096262 E701                       	dc.b	smpsNoAttack, $01
00096264 E108                       	smpsAlterNote       $08
00096266 E701                       	dc.b	smpsNoAttack, $01
00096268 E10B                       	smpsAlterNote       $0B
0009626A E701                       	dc.b	smpsNoAttack, $01
0009626C E10F                       	smpsAlterNote       $0F
0009626E E701                       	dc.b	smpsNoAttack, $01
00096270 E10B                       	smpsAlterNote       $0B
00096272 E701                       	dc.b	smpsNoAttack, $01
00096274 E105                       	smpsAlterNote       $05
00096276 E701                       	dc.b	smpsNoAttack, $01
00096278 E104                       	smpsAlterNote       $04
0009627A E701                       	dc.b	smpsNoAttack, $01
0009627C E108                       	smpsAlterNote       $08
0009627E E701                       	dc.b	smpsNoAttack, $01
00096280 E10E                       	smpsAlterNote       $0E
00096282 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096286 E10B                       	smpsAlterNote       $0B
00096288 8001 B20D                  	dc.b	nRst, $01, nCs4, $0D
0009628C E108                       	smpsAlterNote       $08
0009628E E701                       	dc.b	smpsNoAttack, $01
00096290 E104                       	smpsAlterNote       $04
00096292 E701                       	dc.b	smpsNoAttack, $01
00096294 E108                       	smpsAlterNote       $08
00096296 E701                       	dc.b	smpsNoAttack, $01
00096298 E10B                       	smpsAlterNote       $0B
0009629A E701                       	dc.b	smpsNoAttack, $01
0009629E E0C0                       	smpsPan             panCenter, $00
000962A0 E601                       	smpsAlterVol        $01
000962A2 E108                       	smpsAlterNote       $08
000962A4 A906 8001 A903 A903 8001+  	dc.b	nE3, $06, nRst, $01, nE3, $03, nE3, $03, nRst, $01, nE3, $06
000962B0 8008 A902 8001             	dc.b	nRst, $08, nE3, $02, nRst, $01
000962B8 E080                       	smpsPan             panLeft, $00
000962BA 07                         	dc.b	$07
000962BB E6FF                       	smpsAlterVol        $FF
000962BD E10D                       	smpsAlterNote       $0D
000962BF B60D                       	dc.b	nF4, $0D
000962C1 E10A                       	smpsAlterNote       $0A
000962C3 E701                       	dc.b	smpsNoAttack, $01
000962C5 E106                       	smpsAlterNote       $06
000962C7 E701                       	dc.b	smpsNoAttack, $01
000962C9 E10A                       	smpsAlterNote       $0A
000962CB E701                       	dc.b	smpsNoAttack, $01
000962CD E110                       	smpsAlterNote       $10
000962CF E701                       	dc.b	smpsNoAttack, $01
000962D1 E111                       	smpsAlterNote       $11
000962D3 E701                       	dc.b	smpsNoAttack, $01
000962D5 E10D                       	smpsAlterNote       $0D
000962D7 E701                       	dc.b	smpsNoAttack, $01
000962D9 E107                       	smpsAlterNote       $07
000962DB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000962DF E10A                       	smpsAlterNote       $0A
000962E1 E701                       	dc.b	smpsNoAttack, $01
000962E3 E110                       	smpsAlterNote       $10
000962E5 E701                       	dc.b	smpsNoAttack, $01
000962E7 E111                       	smpsAlterNote       $11
000962E9 8001                       	dc.b	nRst, $01
000962EB E10D                       	smpsAlterNote       $0D
000962ED B80D                       	dc.b	nG4, $0D
000962EF E10A                       	smpsAlterNote       $0A
000962F1 E701                       	dc.b	smpsNoAttack, $01
000962F3 E106                       	smpsAlterNote       $06
000962F5 E701                       	dc.b	smpsNoAttack, $01
000962F7 E10A                       	smpsAlterNote       $0A
000962F9 E701                       	dc.b	smpsNoAttack, $01
000962FB E110                       	smpsAlterNote       $10
000962FD E701                       	dc.b	smpsNoAttack, $01
000962FF E111                       	smpsAlterNote       $11
00096301 E701                       	dc.b	smpsNoAttack, $01
00096303 E10D                       	smpsAlterNote       $0D
00096305 E701                       	dc.b	smpsNoAttack, $01
00096307 E107                       	smpsAlterNote       $07
00096309 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009630D E10D                       	smpsAlterNote       $0D
0009630F E701                       	dc.b	smpsNoAttack, $01
00096311 E110                       	smpsAlterNote       $10
00096313 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096317 E10A                       	smpsAlterNote       $0A
00096319 E701                       	dc.b	smpsNoAttack, $01
0009631B E106                       	smpsAlterNote       $06
0009631D E701                       	dc.b	smpsNoAttack, $01
0009631F E107                       	smpsAlterNote       $07
00096321 E701                       	dc.b	smpsNoAttack, $01
00096323 E10D                       	smpsAlterNote       $0D
00096325 E701                       	dc.b	smpsNoAttack, $01
00096327 E111                       	smpsAlterNote       $11
00096329 E701                       	dc.b	smpsNoAttack, $01
0009632B E10D                       	smpsAlterNote       $0D
0009632D E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00096331 E10F                       	smpsAlterNote       $0F
00096333 BA0D                       	dc.b	nA4, $0D
00096335 E109                       	smpsAlterNote       $09
00096337 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009633B E10C                       	smpsAlterNote       $0C
0009633D E701                       	dc.b	smpsNoAttack, $01
0009633F E112                       	smpsAlterNote       $12
00096341 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096345 E10C                       	smpsAlterNote       $0C
00096347 E701                       	dc.b	smpsNoAttack, $01
00096349 E109                       	smpsAlterNote       $09
0009634B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009634F E10F                       	smpsAlterNote       $0F
00096351 E701                       	dc.b	smpsNoAttack, $01
00096353 E113                       	smpsAlterNote       $13
00096355 E701                       	dc.b	smpsNoAttack, $01
00096357 E112                       	smpsAlterNote       $12
00096359 E701                       	dc.b	smpsNoAttack, $01
0009635B E10C                       	smpsAlterNote       $0C
0009635D E701                       	dc.b	smpsNoAttack, $01
0009635F E108                       	smpsAlterNote       $08
00096361 E701                       	dc.b	smpsNoAttack, $01
00096363 E10C                       	smpsAlterNote       $0C
00096365 E701                       	dc.b	smpsNoAttack, $01
00096367 E10F                       	smpsAlterNote       $0F
00096369 E701                       	dc.b	smpsNoAttack, $01
0009636B E113                       	smpsAlterNote       $13
0009636D E701                       	dc.b	smpsNoAttack, $01
0009636F E10F                       	smpsAlterNote       $0F
00096371 E701                       	dc.b	smpsNoAttack, $01
00096373 E109                       	smpsAlterNote       $09
00096375 E701                       	dc.b	smpsNoAttack, $01
00096377 E108                       	smpsAlterNote       $08
00096379 E701                       	dc.b	smpsNoAttack, $01
0009637B E10C                       	smpsAlterNote       $0C
0009637D E701                       	dc.b	smpsNoAttack, $01
0009637F E112                       	smpsAlterNote       $12
00096381 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096385 E10F                       	smpsAlterNote       $0F
00096387 E701                       	dc.b	smpsNoAttack, $01
00096389 E109                       	smpsAlterNote       $09
0009638B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009638F E10F                       	smpsAlterNote       $0F
00096391 E701                       	dc.b	smpsNoAttack, $01
00096393 E112                       	smpsAlterNote       $12
00096395 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096399 E10C                       	smpsAlterNote       $0C
0009639B E701                       	dc.b	smpsNoAttack, $01
0009639D E108                       	smpsAlterNote       $08
0009639F E701                       	dc.b	smpsNoAttack, $01
000963A1 E109                       	smpsAlterNote       $09
000963A3 E701                       	dc.b	smpsNoAttack, $01
000963A5 E10C                       	smpsAlterNote       $0C
000963A7 B50A                       	dc.b	nE4, $0A
000963A9 E10D                       	smpsAlterNote       $0D
000963AB B60E                       	dc.b	nF4, $0E
000963AD E107                       	smpsAlterNote       $07
000963AF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000963B3 E10D                       	smpsAlterNote       $0D
000963B5 E701                       	dc.b	smpsNoAttack, $01
000963B7 E110                       	smpsAlterNote       $10
000963B9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000963BD E10A                       	smpsAlterNote       $0A
000963BF E701                       	dc.b	smpsNoAttack, $01
000963C1 E106                       	smpsAlterNote       $06
000963C3 E701                       	dc.b	smpsNoAttack, $01
000963C5 E107                       	smpsAlterNote       $07
000963C7 E701                       	dc.b	smpsNoAttack, $01
000963C9 E10D                       	smpsAlterNote       $0D
000963CB E701                       	dc.b	smpsNoAttack, $01
000963CD E111                       	smpsAlterNote       $11
000963CF E701                       	dc.b	smpsNoAttack, $01
000963D1 E10D                       	smpsAlterNote       $0D
000963D3 B80D                       	dc.b	nG4, $0D
000963D5 E10A                       	smpsAlterNote       $0A
000963D7 E701                       	dc.b	smpsNoAttack, $01
000963D9 E107                       	smpsAlterNote       $07
000963DB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000963DF E10D                       	smpsAlterNote       $0D
000963E1 E701                       	dc.b	smpsNoAttack, $01
000963E3 E111                       	smpsAlterNote       $11
000963E5 E701                       	dc.b	smpsNoAttack, $01
000963E7 E110                       	smpsAlterNote       $10
000963E9 E701                       	dc.b	smpsNoAttack, $01
000963EB E10A                       	smpsAlterNote       $0A
000963ED E701                       	dc.b	smpsNoAttack, $01
000963EF E106                       	smpsAlterNote       $06
000963F1 E701                       	dc.b	smpsNoAttack, $01
000963F3 E10A                       	smpsAlterNote       $0A
000963F5 E701                       	dc.b	smpsNoAttack, $01
000963F7 E10D                       	smpsAlterNote       $0D
000963F9 E701                       	dc.b	smpsNoAttack, $01
000963FB E111                       	smpsAlterNote       $11
000963FD E701                       	dc.b	smpsNoAttack, $01
000963FF E10D                       	smpsAlterNote       $0D
00096401 E701                       	dc.b	smpsNoAttack, $01
00096403 E107                       	smpsAlterNote       $07
00096405 E701                       	dc.b	smpsNoAttack, $01
00096407 E106                       	smpsAlterNote       $06
00096409 E701                       	dc.b	smpsNoAttack, $01
0009640B E10A                       	smpsAlterNote       $0A
0009640D E701                       	dc.b	smpsNoAttack, $01
0009640F E110                       	smpsAlterNote       $10
00096411 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096415 E10D                       	smpsAlterNote       $0D
00096417 E701                       	dc.b	smpsNoAttack, $01
00096419 E10F                       	smpsAlterNote       $0F
0009641B BA0D                       	dc.b	nA4, $0D
0009641D E10C                       	smpsAlterNote       $0C
0009641F E701                       	dc.b	smpsNoAttack, $01
00096421 E108                       	smpsAlterNote       $08
00096423 E701                       	dc.b	smpsNoAttack, $01
00096425 E109                       	smpsAlterNote       $09
00096427 E701                       	dc.b	smpsNoAttack, $01
00096429 E10F                       	smpsAlterNote       $0F
0009642B E701                       	dc.b	smpsNoAttack, $01
0009642D E113                       	smpsAlterNote       $13
0009642F E701                       	dc.b	smpsNoAttack, $01
00096431 E10F                       	smpsAlterNote       $0F
00096433 E701                       	dc.b	smpsNoAttack, $01
00096435 E10C                       	smpsAlterNote       $0C
00096437 E701                       	dc.b	smpsNoAttack, $01
00096439 E108                       	smpsAlterNote       $08
0009643B E701                       	dc.b	smpsNoAttack, $01
0009643D E10C                       	smpsAlterNote       $0C
0009643F E701                       	dc.b	smpsNoAttack, $01
00096441 E112                       	smpsAlterNote       $12
00096443 E701                       	dc.b	smpsNoAttack, $01
00096445 E113                       	smpsAlterNote       $13
00096447 E701                       	dc.b	smpsNoAttack, $01
00096449 E10F                       	smpsAlterNote       $0F
0009644B E701                       	dc.b	smpsNoAttack, $01
0009644D E109                       	smpsAlterNote       $09
0009644F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096453 E10C                       	smpsAlterNote       $0C
00096455 E701                       	dc.b	smpsNoAttack, $01
00096457 E112                       	smpsAlterNote       $12
00096459 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009645D E10C                       	smpsAlterNote       $0C
0009645F E701                       	dc.b	smpsNoAttack, $01
00096461 E109                       	smpsAlterNote       $09
00096463 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096467 E10F                       	smpsAlterNote       $0F
00096469 E701                       	dc.b	smpsNoAttack, $01
0009646B E113                       	smpsAlterNote       $13
0009646D E701                       	dc.b	smpsNoAttack, $01
0009646F E112                       	smpsAlterNote       $12
00096471 E701                       	dc.b	smpsNoAttack, $01
00096473 E10C                       	smpsAlterNote       $0C
00096475 E701                       	dc.b	smpsNoAttack, $01
00096477 E109                       	smpsAlterNote       $09
00096479 8001                       	dc.b	nRst, $01
0009647B E10D                       	smpsAlterNote       $0D
0009647D B60A                       	dc.b	nF4, $0A
0009647F E10C                       	smpsAlterNote       $0C
00096481 B506 8001                  	dc.b	nE4, $06, nRst, $01
00096485 E10B                       	smpsAlterNote       $0B
00096487 B30D 8001                  	dc.b	nD4, $0D, nRst, $01
0009648B E10C                       	smpsAlterNote       $0C
0009648D B503                       	dc.b	nE4, $03
0009648F E10D                       	smpsAlterNote       $0D
00096491 B603 8001 B802 8001 BA0D   	dc.b	nF4, $03, nRst, $01, nG4, $02, nRst, $01, nA4, $0D
0009649B E10C                       	smpsAlterNote       $0C
0009649D E701                       	dc.b	smpsNoAttack, $01
0009649F E108                       	smpsAlterNote       $08
000964A1 E701                       	dc.b	smpsNoAttack, $01
000964A3 E10C                       	smpsAlterNote       $0C
000964A5 E701                       	dc.b	smpsNoAttack, $01
000964A7 E112                       	smpsAlterNote       $12
000964A9 E701                       	dc.b	smpsNoAttack, $01
000964AB E113                       	smpsAlterNote       $13
000964AD E701                       	dc.b	smpsNoAttack, $01
000964AF E10F                       	smpsAlterNote       $0F
000964B1 E701                       	dc.b	smpsNoAttack, $01
000964B3 E109                       	smpsAlterNote       $09
000964B5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000964B9 E10C                       	smpsAlterNote       $0C
000964BB E701                       	dc.b	smpsNoAttack, $01
000964BD E112                       	smpsAlterNote       $12
000964BF E701                       	dc.b	smpsNoAttack, $01
000964C1 E113                       	smpsAlterNote       $13
000964C3 8001                       	dc.b	nRst, $01
000964C5 E10D                       	smpsAlterNote       $0D
000964C7 C20D                       	dc.b	nF5, $0D
000964C9 E10A                       	smpsAlterNote       $0A
000964CB E701                       	dc.b	smpsNoAttack, $01
000964CD E106                       	smpsAlterNote       $06
000964CF E701                       	dc.b	smpsNoAttack, $01
000964D1 E10A                       	smpsAlterNote       $0A
000964D3 E701                       	dc.b	smpsNoAttack, $01
000964D5 E110                       	smpsAlterNote       $10
000964D7 E701                       	dc.b	smpsNoAttack, $01
000964D9 E111                       	smpsAlterNote       $11
000964DB E701                       	dc.b	smpsNoAttack, $01
000964DD E10D                       	smpsAlterNote       $0D
000964DF E701                       	dc.b	smpsNoAttack, $01
000964E1 E107                       	smpsAlterNote       $07
000964E3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000964E7 E10A                       	smpsAlterNote       $0A
000964E9 E701                       	dc.b	smpsNoAttack, $01
000964EB E110                       	smpsAlterNote       $10
000964ED E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000964F1 E10A                       	smpsAlterNote       $0A
000964F3 E701                       	dc.b	smpsNoAttack, $01
000964F5 E107                       	smpsAlterNote       $07
000964F7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000964FB E10D                       	smpsAlterNote       $0D
000964FD E701                       	dc.b	smpsNoAttack, $01
000964FF E111                       	smpsAlterNote       $11
00096501 E701                       	dc.b	smpsNoAttack, $01
00096503 E110                       	smpsAlterNote       $10
00096505 E701                       	dc.b	smpsNoAttack, $01
00096507 E10A                       	smpsAlterNote       $0A
00096509 E701                       	dc.b	smpsNoAttack, $01
0009650B E106                       	smpsAlterNote       $06
0009650D E701                       	dc.b	smpsNoAttack, $01
0009650F E10A                       	smpsAlterNote       $0A
00096511 E701                       	dc.b	smpsNoAttack, $01
00096513 E10D                       	smpsAlterNote       $0D
00096515 E701                       	dc.b	smpsNoAttack, $01
00096517 E111                       	smpsAlterNote       $11
00096519 E701                       	dc.b	smpsNoAttack, $01
0009651B E10D                       	smpsAlterNote       $0D
0009651D E701                       	dc.b	smpsNoAttack, $01
0009651F E107                       	smpsAlterNote       $07
00096521 E701                       	dc.b	smpsNoAttack, $01
00096523 E106                       	smpsAlterNote       $06
00096525 E701                       	dc.b	smpsNoAttack, $01
00096527 E10A                       	smpsAlterNote       $0A
00096529 E701                       	dc.b	smpsNoAttack, $01
0009652B E110                       	smpsAlterNote       $10
0009652D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096531 E10D                       	smpsAlterNote       $0D
00096533 E701                       	dc.b	smpsNoAttack, $01
00096535 E107                       	smpsAlterNote       $07
00096537 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009653B E10D                       	smpsAlterNote       $0D
0009653D E701                       	dc.b	smpsNoAttack, $01
0009653F E110                       	smpsAlterNote       $10
00096541 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096545 E10A                       	smpsAlterNote       $0A
00096547 E701                       	dc.b	smpsNoAttack, $01
00096549 E106                       	smpsAlterNote       $06
0009654B E701                       	dc.b	smpsNoAttack, $01
0009654D E107                       	smpsAlterNote       $07
0009654F E701                       	dc.b	smpsNoAttack, $01
00096551 E10D                       	smpsAlterNote       $0D
00096553 E701                       	dc.b	smpsNoAttack, $01
00096555 E111                       	smpsAlterNote       $11
00096557 E701                       	dc.b	smpsNoAttack, $01
00096559 E10D                       	smpsAlterNote       $0D
0009655B E701                       	dc.b	smpsNoAttack, $01
0009655D E10A                       	smpsAlterNote       $0A
0009655F E701                       	dc.b	smpsNoAttack, $01
00096561 E107                       	smpsAlterNote       $07
00096563 8001                       	dc.b	nRst, $01
00096565 E10D                       	smpsAlterNote       $0D
00096567 C206 8001                  	dc.b	nF5, $06, nRst, $01
0009656D E601                       	smpsAlterVol        $01
0009656F E110                       	smpsAlterNote       $10
00096571 BB0D                       	dc.b	nBb4, $0D
00096573 E10A                       	smpsAlterNote       $0A
00096575 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096579 E110                       	smpsAlterNote       $10
0009657B E701                       	dc.b	smpsNoAttack, $01
0009657D E113                       	smpsAlterNote       $13
0009657F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096583 E10D                       	smpsAlterNote       $0D
00096585 E701                       	dc.b	smpsNoAttack, $01
00096587 E109                       	smpsAlterNote       $09
00096589 E701                       	dc.b	smpsNoAttack, $01
0009658B E10A                       	smpsAlterNote       $0A
0009658D E701                       	dc.b	smpsNoAttack, $01
0009658F E110                       	smpsAlterNote       $10
00096591 E701                       	dc.b	smpsNoAttack, $01
00096593 E114                       	smpsAlterNote       $14
00096595 E701                       	dc.b	smpsNoAttack, $01
00096597 E110                       	smpsAlterNote       $10
00096599 E701                       	dc.b	smpsNoAttack, $01
0009659B E10D                       	smpsAlterNote       $0D
0009659D E701                       	dc.b	smpsNoAttack, $01
0009659F E109                       	smpsAlterNote       $09
000965A1 E701                       	dc.b	smpsNoAttack, $01
000965A3 E10A                       	smpsAlterNote       $0A
000965A5 8001 BD0D                  	dc.b	nRst, $01, nC5, $0D
000965A9 E107                       	smpsAlterNote       $07
000965AB E701                       	dc.b	smpsNoAttack, $01
000965AD E103                       	smpsAlterNote       $03
000965AF E701                       	dc.b	smpsNoAttack, $01
000965B1 E107                       	smpsAlterNote       $07
000965B3 E701                       	dc.b	smpsNoAttack, $01
000965B5 E10D                       	smpsAlterNote       $0D
000965B7 E701                       	dc.b	smpsNoAttack, $01
000965B9 E10E                       	smpsAlterNote       $0E
000965BB E701                       	dc.b	smpsNoAttack, $01
000965BD E10A                       	smpsAlterNote       $0A
000965BF E701                       	dc.b	smpsNoAttack, $01
000965C1 E104                       	smpsAlterNote       $04
000965C3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000965C7 E107                       	smpsAlterNote       $07
000965C9 E701                       	dc.b	smpsNoAttack, $01
000965CB E10D                       	smpsAlterNote       $0D
000965CD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000965D1 E107                       	smpsAlterNote       $07
000965D3 E701                       	dc.b	smpsNoAttack, $01
000965D5 E104                       	smpsAlterNote       $04
000965D7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000965DB E10B                       	smpsAlterNote       $0B
000965DD BF0D                       	dc.b	nD5, $0D
000965DF E108                       	smpsAlterNote       $08
000965E1 E701                       	dc.b	smpsNoAttack, $01
000965E3 E105                       	smpsAlterNote       $05
000965E5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000965E9 E10B                       	smpsAlterNote       $0B
000965EB E701                       	dc.b	smpsNoAttack, $01
000965ED E10F                       	smpsAlterNote       $0F
000965EF E701                       	dc.b	smpsNoAttack, $01
000965F1 E10E                       	smpsAlterNote       $0E
000965F3 E701                       	dc.b	smpsNoAttack, $01
000965F5 E108                       	smpsAlterNote       $08
000965F7 E701                       	dc.b	smpsNoAttack, $01
000965F9 E104                       	smpsAlterNote       $04
000965FB E701                       	dc.b	smpsNoAttack, $01
000965FD E108                       	smpsAlterNote       $08
000965FF E701                       	dc.b	smpsNoAttack, $01
00096601 E10B                       	smpsAlterNote       $0B
00096603 E701                       	dc.b	smpsNoAttack, $01
00096605 E10F                       	smpsAlterNote       $0F
00096607 E701                       	dc.b	smpsNoAttack, $01
00096609 E10B                       	smpsAlterNote       $0B
0009660B E701                       	dc.b	smpsNoAttack, $01
0009660D E105                       	smpsAlterNote       $05
0009660F E701                       	dc.b	smpsNoAttack, $01
00096611 E104                       	smpsAlterNote       $04
00096613 E701                       	dc.b	smpsNoAttack, $01
00096615 E105                       	smpsAlterNote       $05
00096617 8001                       	dc.b	nRst, $01
00096619 E10C                       	smpsAlterNote       $0C
0009661B C10C                       	dc.b	nE5, $0C
0009661D E10D                       	smpsAlterNote       $0D
0009661F C201                       	dc.b	nF5, $01
00096621 E10E                       	smpsAlterNote       $0E
00096623 C301 8001                  	dc.b	nFs5, $01, nRst, $01
00096627 E10D                       	smpsAlterNote       $0D
00096629 C40C C20D                  	dc.b	nG5, $0C, nF5, $0D
0009662D E10A                       	smpsAlterNote       $0A
0009662F E701                       	dc.b	smpsNoAttack, $01
00096631 E106                       	smpsAlterNote       $06
00096633 E701                       	dc.b	smpsNoAttack, $01
00096635 E10A                       	smpsAlterNote       $0A
00096637 E701                       	dc.b	smpsNoAttack, $01
00096639 E10D                       	smpsAlterNote       $0D
0009663B E701                       	dc.b	smpsNoAttack, $01
0009663D E111                       	smpsAlterNote       $11
0009663F E701                       	dc.b	smpsNoAttack, $01
00096641 E10D                       	smpsAlterNote       $0D
00096643 E701                       	dc.b	smpsNoAttack, $01
00096645 E107                       	smpsAlterNote       $07
00096647 E701                       	dc.b	smpsNoAttack, $01
00096649 E106                       	smpsAlterNote       $06
0009664B E701                       	dc.b	smpsNoAttack, $01
0009664D E10A                       	smpsAlterNote       $0A
0009664F E701                       	dc.b	smpsNoAttack, $01
00096651 E110                       	smpsAlterNote       $10
00096653 E701                       	dc.b	smpsNoAttack, $01
00096655 E111                       	smpsAlterNote       $11
00096657 8001                       	dc.b	nRst, $01
00096659 E10D                       	smpsAlterNote       $0D
0009665B C40D                       	dc.b	nG5, $0D
0009665D E10A                       	smpsAlterNote       $0A
0009665F E701                       	dc.b	smpsNoAttack, $01
00096661 E106                       	smpsAlterNote       $06
00096663 E701                       	dc.b	smpsNoAttack, $01
00096665 E10A                       	smpsAlterNote       $0A
00096667 E701                       	dc.b	smpsNoAttack, $01
00096669 E10D                       	smpsAlterNote       $0D
0009666B E701                       	dc.b	smpsNoAttack, $01
0009666D E10C                       	smpsAlterNote       $0C
0009666F C006 8001 C002 C002 8001+  	dc.b	nEb5, $06, nRst, $01, nEb5, $02, nEb5, $02, nRst, $01, nEb5, $01
0009667B 8001                       	dc.b	nRst, $01
0009667D E10D                       	smpsAlterNote       $0D
0009667F C20D                       	dc.b	nF5, $0D
00096681 E10A                       	smpsAlterNote       $0A
00096683 E701                       	dc.b	smpsNoAttack, $01
00096685 E106                       	smpsAlterNote       $06
00096687 E701                       	dc.b	smpsNoAttack, $01
00096689 E10A                       	smpsAlterNote       $0A
0009668B E701                       	dc.b	smpsNoAttack, $01
0009668D E110                       	smpsAlterNote       $10
0009668F E701                       	dc.b	smpsNoAttack, $01
00096691 E111                       	smpsAlterNote       $11
00096693 E701                       	dc.b	smpsNoAttack, $01
00096695 E10D                       	smpsAlterNote       $0D
00096697 E701                       	dc.b	smpsNoAttack, $01
00096699 E107                       	smpsAlterNote       $07
0009669B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009669F E10A                       	smpsAlterNote       $0A
000966A1 E701                       	dc.b	smpsNoAttack, $01
000966A3 E110                       	smpsAlterNote       $10
000966A5 E701                       	dc.b	smpsNoAttack, $01
000966A7 E111                       	smpsAlterNote       $11
000966A9 8001                       	dc.b	nRst, $01
000966AB E10F                       	smpsAlterNote       $0F
000966AD C60A                       	dc.b	nA5, $0A
000966AF E10D                       	smpsAlterNote       $0D
000966B1 C406 8001                  	dc.b	nG5, $06, nRst, $01
000966B5 E10C                       	smpsAlterNote       $0C
000966B7 C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
000966C3 8001                       	dc.b	nRst, $01
000966C5 E10D                       	smpsAlterNote       $0D
000966C7 C20D                       	dc.b	nF5, $0D
000966C9 E107                       	smpsAlterNote       $07
000966CB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000966CF E10A                       	smpsAlterNote       $0A
000966D1 E701                       	dc.b	smpsNoAttack, $01
000966D3 E110                       	smpsAlterNote       $10
000966D5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000966D9 E10A                       	smpsAlterNote       $0A
000966DB E701                       	dc.b	smpsNoAttack, $01
000966DD E107                       	smpsAlterNote       $07
000966DF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000966E3 E10D                       	smpsAlterNote       $0D
000966E5 E701                       	dc.b	smpsNoAttack, $01
000966E7 E111                       	smpsAlterNote       $11
000966E9 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000966ED E10D                       	smpsAlterNote       $0D
000966EF C40D                       	dc.b	nG5, $0D
000966F1 E107                       	smpsAlterNote       $07
000966F3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000966F7 E10A                       	smpsAlterNote       $0A
000966F9 E701                       	dc.b	smpsNoAttack, $01
000966FB E10D                       	smpsAlterNote       $0D
000966FD 8001                       	dc.b	nRst, $01
000966FF E10C                       	smpsAlterNote       $0C
00096701 C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
0009670D E10D                       	smpsAlterNote       $0D
0009670F C20E                       	dc.b	nF5, $0E
00096711 E107                       	smpsAlterNote       $07
00096713 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096717 E10D                       	smpsAlterNote       $0D
00096719 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0009671F E0C0                       	smpsPan             panCenter, $00
00096721 E603                       	smpsAlterVol        $03
00096723 E108                       	smpsAlterNote       $08
00096725 B406                       	dc.b	nEb4, $06
00096727 E10C                       	smpsAlterNote       $0C
00096729 AF03 8001                  	dc.b	nBb3, $03, nRst, $01
0009672D E108                       	smpsAlterNote       $08
0009672F B403                       	dc.b	nEb4, $03
00096731 E109                       	smpsAlterNote       $09
00096733 B803 8001                  	dc.b	nG4, $03, nRst, $01
00096737 E10C                       	smpsAlterNote       $0C
00096739 BB03 BB03 8008             	dc.b	nBb4, $03, nBb4, $03, nRst, $08
00096741 03                         	dc.b	$03
00096742 E6FD                       	smpsAlterVol        $FD
00096744 F6F1 F4                    	smpsJump            music84_Jump00
00096747                            
00096747                            ; PSG1 Data
00096747                            music84_PSG1:
00096747 E1FD                       	smpsAlterNote       $FD
00096749 EC04                       	smpsPSGAlterVol     $04
0009674B 9203                       	dc.b	nF1, $03
0009674D E1FE                       	smpsAlterNote       $FE
0009674F 9603                       	dc.b	nA1, $03
00096751 EC04                       	smpsPSGAlterVol     $04
00096753 E701                       	dc.b	smpsNoAttack, $01
00096755 E1FF                       	smpsAlterNote       $FF
00096757 ECFC                       	smpsPSGAlterVol     $FC
00096759 9B03                       	dc.b	nD2, $03
0009675B E1FD                       	smpsAlterNote       $FD
0009675D 9403                       	dc.b	nG1, $03
0009675F EC04                       	smpsPSGAlterVol     $04
00096761 E701                       	dc.b	smpsNoAttack, $01
00096763 E1FE                       	smpsAlterNote       $FE
00096765 ECFC                       	smpsPSGAlterVol     $FC
00096767 9703                       	dc.b	nBb1, $03
00096769 E1FF                       	smpsAlterNote       $FF
0009676B 9B03                       	dc.b	nD2, $03
0009676D EC04                       	smpsPSGAlterVol     $04
0009676F E701                       	dc.b	smpsNoAttack, $01
00096771 E1FE                       	smpsAlterNote       $FE
00096773 ECFC                       	smpsPSGAlterVol     $FC
00096775 A002                       	dc.b	nG2, $02
00096777 EC04                       	smpsPSGAlterVol     $04
00096779 E701                       	dc.b	smpsNoAttack, $01
0009677B E1FF                       	smpsAlterNote       $FF
0009677D ECFC                       	smpsPSGAlterVol     $FC
0009677F A203                       	dc.b	nA2, $03
00096781 EC0B                       	smpsPSGAlterVol     $0B
00096783 800A                       	dc.b	nRst, $0A
00096785 E105                       	smpsAlterNote       $05
00096787 01                         	dc.b	$01
00096788 E1FC                       	smpsAlterNote       $FC
0009678A 01                         	dc.b	$01
0009678B E105                       	smpsAlterNote       $05
0009678D 01                         	dc.b	$01
0009678E E1FD                       	smpsAlterNote       $FD
00096790 01                         	dc.b	$01
00096791 E105                       	smpsAlterNote       $05
00096793 01                         	dc.b	$01
00096794 E1FD                       	smpsAlterNote       $FD
00096796 01                         	dc.b	$01
00096797 E1FA                       	smpsAlterNote       $FA
00096799 01                         	dc.b	$01
0009679A E1FC                       	smpsAlterNote       $FC
0009679C 01                         	dc.b	$01
0009679D E105                       	smpsAlterNote       $05
0009679F 01                         	dc.b	$01
000967A0 E108                       	smpsAlterNote       $08
000967A2 0101                       	dc.b	$01, $01
000967A4 E105                       	smpsAlterNote       $05
000967A6 01                         	dc.b	$01
000967A7 E1FA                       	smpsAlterNote       $FA
000967A9 0101                       	dc.b	$01, $01
000967AB E1FD                       	smpsAlterNote       $FD
000967AD 01                         	dc.b	$01
000967AE E105                       	smpsAlterNote       $05
000967B0 01                         	dc.b	$01
000967B1 E108                       	smpsAlterNote       $08
000967B3 01                         	dc.b	$01
000967B4 E105                       	smpsAlterNote       $05
000967B6 01                         	dc.b	$01
000967B7 E1FC                       	smpsAlterNote       $FC
000967B9 01                         	dc.b	$01
000967BA E105                       	smpsAlterNote       $05
000967BC 01                         	dc.b	$01
000967BD E1FD                       	smpsAlterNote       $FD
000967BF 01                         	dc.b	$01
000967C0                            
000967C0                            music84_Jump07:
000967C0 E105                       	smpsAlterNote       $05
000967C2 8001                       	dc.b	nRst, $01
000967C4 E1FD                       	smpsAlterNote       $FD
000967C6 01                         	dc.b	$01
000967C7 E1FA                       	smpsAlterNote       $FA
000967C9 01                         	dc.b	$01
000967CA E1FC                       	smpsAlterNote       $FC
000967CC 01                         	dc.b	$01
000967CD E1FD                       	smpsAlterNote       $FD
000967CF ECF5                       	smpsPSGAlterVol     $F5
000967D1 9206                       	dc.b	nF1, $06
000967D3 EC04                       	smpsPSGAlterVol     $04
000967D5 E701                       	dc.b	smpsNoAttack, $01
000967D7 EC07                       	smpsPSGAlterVol     $07
000967D9 8003                       	dc.b	nRst, $03
000967DB ECF5                       	smpsPSGAlterVol     $F5
000967DD 9206                       	dc.b	nF1, $06
000967DF EC04                       	smpsPSGAlterVol     $04
000967E1 E701                       	dc.b	smpsNoAttack, $01
000967E3 EC07                       	smpsPSGAlterVol     $07
000967E5 8006                       	dc.b	nRst, $06
000967E7 E100                       	smpsAlterNote       $00
000967E9 01                         	dc.b	$01
000967EA E104                       	smpsAlterNote       $04
000967EC 01                         	dc.b	$01
000967ED E100                       	smpsAlterNote       $00
000967EF 01                         	dc.b	$01
000967F0 E1FB                       	smpsAlterNote       $FB
000967F2 01                         	dc.b	$01
000967F3 E1FD                       	smpsAlterNote       $FD
000967F5 ECF5                       	smpsPSGAlterVol     $F5
000967F7 9406                       	dc.b	nG1, $06
000967F9 EC04                       	smpsPSGAlterVol     $04
000967FB E701                       	dc.b	smpsNoAttack, $01
000967FD EC07                       	smpsPSGAlterVol     $07
000967FF 8003                       	dc.b	nRst, $03
00096801 ECF5                       	smpsPSGAlterVol     $F5
00096803 9407                       	dc.b	nG1, $07
00096805 EC0B                       	smpsPSGAlterVol     $0B
00096807 8006                       	dc.b	nRst, $06
00096809 E100                       	smpsAlterNote       $00
0009680B 01                         	dc.b	$01
0009680C E103                       	smpsAlterNote       $03
0009680E 0101                       	dc.b	$01, $01
00096810 E1FD                       	smpsAlterNote       $FD
00096812 01                         	dc.b	$01
00096813 ECF5                       	smpsPSGAlterVol     $F5
00096815 9207                       	dc.b	nF1, $07
00096817 EC0B                       	smpsPSGAlterVol     $0B
00096819 8004                       	dc.b	nRst, $04
0009681B ECF5                       	smpsPSGAlterVol     $F5
0009681D 9206                       	dc.b	nF1, $06
0009681F EC04                       	smpsPSGAlterVol     $04
00096821 E701                       	dc.b	smpsNoAttack, $01
00096823 EC07                       	smpsPSGAlterVol     $07
00096825 8006                       	dc.b	nRst, $06
00096827 E103                       	smpsAlterNote       $03
00096829 01                         	dc.b	$01
0009682A E104                       	smpsAlterNote       $04
0009682C 01                         	dc.b	$01
0009682D E100                       	smpsAlterNote       $00
0009682F 01                         	dc.b	$01
00096830 E1FA                       	smpsAlterNote       $FA
00096832 01                         	dc.b	$01
00096833 E1FD                       	smpsAlterNote       $FD
00096835 ECF5                       	smpsPSGAlterVol     $F5
00096837 9206                       	dc.b	nF1, $06
00096839 EC04                       	smpsPSGAlterVol     $04
0009683B E701                       	dc.b	smpsNoAttack, $01
0009683D EC07                       	smpsPSGAlterVol     $07
0009683F 8003                       	dc.b	nRst, $03
00096841 ECF5                       	smpsPSGAlterVol     $F5
00096843 9106                       	dc.b	nE1, $06
00096845 EC04                       	smpsPSGAlterVol     $04
00096847 E701                       	dc.b	smpsNoAttack, $01
00096849 EC07                       	smpsPSGAlterVol     $07
0009684B 8006                       	dc.b	nRst, $06
0009684D E100                       	smpsAlterNote       $00
0009684F 01                         	dc.b	$01
00096850 E104                       	smpsAlterNote       $04
00096852 01                         	dc.b	$01
00096853 E100                       	smpsAlterNote       $00
00096855 01                         	dc.b	$01
00096856 E1FD                       	smpsAlterNote       $FD
00096858 01                         	dc.b	$01
00096859 ECF5                       	smpsPSGAlterVol     $F5
0009685B 9206                       	dc.b	nF1, $06
0009685D EC04                       	smpsPSGAlterVol     $04
0009685F E701                       	dc.b	smpsNoAttack, $01
00096861 EC07                       	smpsPSGAlterVol     $07
00096863 8003                       	dc.b	nRst, $03
00096865 ECF5                       	smpsPSGAlterVol     $F5
00096867 9207                       	dc.b	nF1, $07
00096869 EC0B                       	smpsPSGAlterVol     $0B
0009686B 8007                       	dc.b	nRst, $07
0009686D E103                       	smpsAlterNote       $03
0009686F 0101                       	dc.b	$01, $01
00096871 E1FD                       	smpsAlterNote       $FD
00096873 01                         	dc.b	$01
00096874 E1FB                       	smpsAlterNote       $FB
00096876 01                         	dc.b	$01
00096877 E1FD                       	smpsAlterNote       $FD
00096879 ECF5                       	smpsPSGAlterVol     $F5
0009687B 9406                       	dc.b	nG1, $06
0009687D EC0B                       	smpsPSGAlterVol     $0B
0009687F 8004                       	dc.b	nRst, $04
00096881 ECF5                       	smpsPSGAlterVol     $F5
00096883 9406                       	dc.b	nG1, $06
00096885 EC04                       	smpsPSGAlterVol     $04
00096887 E701                       	dc.b	smpsNoAttack, $01
00096889 EC07                       	smpsPSGAlterVol     $07
0009688B 8006                       	dc.b	nRst, $06
0009688D E100                       	smpsAlterNote       $00
0009688F 01                         	dc.b	$01
00096890 E104                       	smpsAlterNote       $04
00096892 01                         	dc.b	$01
00096893 E100                       	smpsAlterNote       $00
00096895 01                         	dc.b	$01
00096896 E1F9                       	smpsAlterNote       $F9
00096898 01                         	dc.b	$01
00096899 E1FD                       	smpsAlterNote       $FD
0009689B ECF5                       	smpsPSGAlterVol     $F5
0009689D 9206                       	dc.b	nF1, $06
0009689F EC04                       	smpsPSGAlterVol     $04
000968A1 E701                       	dc.b	smpsNoAttack, $01
000968A3 EC07                       	smpsPSGAlterVol     $07
000968A5 8003                       	dc.b	nRst, $03
000968A7 ECF5                       	smpsPSGAlterVol     $F5
000968A9 9207                       	dc.b	nF1, $07
000968AB EC0B                       	smpsPSGAlterVol     $0B
000968AD 8006                       	dc.b	nRst, $06
000968AF E100                       	smpsAlterNote       $00
000968B1 01                         	dc.b	$01
000968B2 E104                       	smpsAlterNote       $04
000968B4 01                         	dc.b	$01
000968B5 E103                       	smpsAlterNote       $03
000968B7 01                         	dc.b	$01
000968B8 E1FD                       	smpsAlterNote       $FD
000968BA 01                         	dc.b	$01
000968BB ECF5                       	smpsPSGAlterVol     $F5
000968BD 9207                       	dc.b	nF1, $07
000968BF EC0B                       	smpsPSGAlterVol     $0B
000968C1 8004                       	dc.b	nRst, $04
000968C3 ECF5                       	smpsPSGAlterVol     $F5
000968C5 9206                       	dc.b	nF1, $06
000968C7 EC0B                       	smpsPSGAlterVol     $0B
000968C9 8007                       	dc.b	nRst, $07
000968CB E103                       	smpsAlterNote       $03
000968CD 0101                       	dc.b	$01, $01
000968CF E100                       	smpsAlterNote       $00
000968D1 01                         	dc.b	$01
000968D2 E1FA                       	smpsAlterNote       $FA
000968D4 01                         	dc.b	$01
000968D5 E1FD                       	smpsAlterNote       $FD
000968D7 ECF5                       	smpsPSGAlterVol     $F5
000968D9 9206                       	dc.b	nF1, $06
000968DB EC04                       	smpsPSGAlterVol     $04
000968DD E701                       	dc.b	smpsNoAttack, $01
000968DF EC07                       	smpsPSGAlterVol     $07
000968E1 8003                       	dc.b	nRst, $03
000968E3 ECF5                       	smpsPSGAlterVol     $F5
000968E5 9206                       	dc.b	nF1, $06
000968E7 EC04                       	smpsPSGAlterVol     $04
000968E9 E701                       	dc.b	smpsNoAttack, $01
000968EB EC07                       	smpsPSGAlterVol     $07
000968ED 8006                       	dc.b	nRst, $06
000968EF E100                       	smpsAlterNote       $00
000968F1 01                         	dc.b	$01
000968F2 E104                       	smpsAlterNote       $04
000968F4 01                         	dc.b	$01
000968F5 E100                       	smpsAlterNote       $00
000968F7 01                         	dc.b	$01
000968F8 E1FD                       	smpsAlterNote       $FD
000968FA 01                         	dc.b	$01
000968FB ECF5                       	smpsPSGAlterVol     $F5
000968FD 9206                       	dc.b	nF1, $06
000968FF EC04                       	smpsPSGAlterVol     $04
00096901 E701                       	dc.b	smpsNoAttack, $01
00096903 EC07                       	smpsPSGAlterVol     $07
00096905 8003                       	dc.b	nRst, $03
00096907 ECF5                       	smpsPSGAlterVol     $F5
00096909 9207                       	dc.b	nF1, $07
0009690B EC0B                       	smpsPSGAlterVol     $0B
0009690D 8007                       	dc.b	nRst, $07
0009690F E103                       	smpsAlterNote       $03
00096911 0101                       	dc.b	$01, $01
00096913 E1FD                       	smpsAlterNote       $FD
00096915 01                         	dc.b	$01
00096916 E1FA                       	smpsAlterNote       $FA
00096918 01                         	dc.b	$01
00096919 E1FD                       	smpsAlterNote       $FD
0009691B ECF5                       	smpsPSGAlterVol     $F5
0009691D 9206                       	dc.b	nF1, $06
0009691F EC0B                       	smpsPSGAlterVol     $0B
00096921 8004                       	dc.b	nRst, $04
00096923 ECF5                       	smpsPSGAlterVol     $F5
00096925 9206                       	dc.b	nF1, $06
00096927 EC04                       	smpsPSGAlterVol     $04
00096929 E701                       	dc.b	smpsNoAttack, $01
0009692B EC07                       	smpsPSGAlterVol     $07
0009692D 8006                       	dc.b	nRst, $06
0009692F E103                       	smpsAlterNote       $03
00096931 01                         	dc.b	$01
00096932 E104                       	smpsAlterNote       $04
00096934 01                         	dc.b	$01
00096935 E100                       	smpsAlterNote       $00
00096937 01                         	dc.b	$01
00096938 E1FA                       	smpsAlterNote       $FA
0009693A 01                         	dc.b	$01
0009693B E1FD                       	smpsAlterNote       $FD
0009693D ECF5                       	smpsPSGAlterVol     $F5
0009693F 9206                       	dc.b	nF1, $06
00096941 EC04                       	smpsPSGAlterVol     $04
00096943 E701                       	dc.b	smpsNoAttack, $01
00096945 EC07                       	smpsPSGAlterVol     $07
00096947 8003                       	dc.b	nRst, $03
00096949 ECF5                       	smpsPSGAlterVol     $F5
0009694B 9206                       	dc.b	nF1, $06
0009694D EC04                       	smpsPSGAlterVol     $04
0009694F E701                       	dc.b	smpsNoAttack, $01
00096951 EC07                       	smpsPSGAlterVol     $07
00096953 8006                       	dc.b	nRst, $06
00096955 E100                       	smpsAlterNote       $00
00096957 01                         	dc.b	$01
00096958 E104                       	smpsAlterNote       $04
0009695A 01                         	dc.b	$01
0009695B E103                       	smpsAlterNote       $03
0009695D 01                         	dc.b	$01
0009695E E1FD                       	smpsAlterNote       $FD
00096960 01                         	dc.b	$01
00096961 ECF5                       	smpsPSGAlterVol     $F5
00096963 9107                       	dc.b	nE1, $07
00096965 EC0B                       	smpsPSGAlterVol     $0B
00096967 8004                       	dc.b	nRst, $04
00096969 ECF5                       	smpsPSGAlterVol     $F5
0009696B 9106                       	dc.b	nE1, $06
0009696D EC0B                       	smpsPSGAlterVol     $0B
0009696F 8007                       	dc.b	nRst, $07
00096971 E103                       	smpsAlterNote       $03
00096973 0101                       	dc.b	$01, $01
00096975 E100                       	smpsAlterNote       $00
00096977 01                         	dc.b	$01
00096978 E1FA                       	smpsAlterNote       $FA
0009697A 01                         	dc.b	$01
0009697B E1FD                       	smpsAlterNote       $FD
0009697D ECF5                       	smpsPSGAlterVol     $F5
0009697F 9106                       	dc.b	nE1, $06
00096981 EC04                       	smpsPSGAlterVol     $04
00096983 E701                       	dc.b	smpsNoAttack, $01
00096985 EC07                       	smpsPSGAlterVol     $07
00096987 8003                       	dc.b	nRst, $03
00096989 ECF5                       	smpsPSGAlterVol     $F5
0009698B 9106                       	dc.b	nE1, $06
0009698D EC04                       	smpsPSGAlterVol     $04
0009698F E701                       	dc.b	smpsNoAttack, $01
00096991 EC07                       	smpsPSGAlterVol     $07
00096993 8006                       	dc.b	nRst, $06
00096995 E100                       	smpsAlterNote       $00
00096997 01                         	dc.b	$01
00096998 E104                       	smpsAlterNote       $04
0009699A 01                         	dc.b	$01
0009699B E100                       	smpsAlterNote       $00
0009699D 01                         	dc.b	$01
0009699E E1FA                       	smpsAlterNote       $FA
000969A0 01                         	dc.b	$01
000969A1 E1FD                       	smpsAlterNote       $FD
000969A3 ECF5                       	smpsPSGAlterVol     $F5
000969A5 9106                       	dc.b	nE1, $06
000969A7 EC04                       	smpsPSGAlterVol     $04
000969A9 E701                       	dc.b	smpsNoAttack, $01
000969AB EC07                       	smpsPSGAlterVol     $07
000969AD 8003                       	dc.b	nRst, $03
000969AF ECF5                       	smpsPSGAlterVol     $F5
000969B1 9107 9106                  	dc.b	nE1, $07, nE1, $06
000969B5 EC04                       	smpsPSGAlterVol     $04
000969B7 E701                       	dc.b	smpsNoAttack, $01
000969B9 ECFC                       	smpsPSGAlterVol     $FC
000969BB 9103 9103                  	dc.b	nE1, $03, nE1, $03
000969BF EC04                       	smpsPSGAlterVol     $04
000969C1 E701                       	dc.b	smpsNoAttack, $01
000969C3 ECFC                       	smpsPSGAlterVol     $FC
000969C5 9106                       	dc.b	nE1, $06
000969C7 EC04                       	smpsPSGAlterVol     $04
000969C9 E701                       	dc.b	smpsNoAttack, $01
000969CB EC07                       	smpsPSGAlterVol     $07
000969CD 8006                       	dc.b	nRst, $06
000969CF E100                       	smpsAlterNote       $00
000969D1 01                         	dc.b	$01
000969D2 E104                       	smpsAlterNote       $04
000969D4 01                         	dc.b	$01
000969D5 E100                       	smpsAlterNote       $00
000969D7 01                         	dc.b	$01
000969D8 E1FA                       	smpsAlterNote       $FA
000969DA 01                         	dc.b	$01
000969DB E1F9                       	smpsAlterNote       $F9
000969DD 01                         	dc.b	$01
000969DE E1FD                       	smpsAlterNote       $FD
000969E0 01                         	dc.b	$01
000969E1 E103                       	smpsAlterNote       $03
000969E3 01                         	dc.b	$01
000969E4 E104                       	smpsAlterNote       $04
000969E6 01                         	dc.b	$01
000969E7 E100                       	smpsAlterNote       $00
000969E9 01                         	dc.b	$01
000969EA E1FA                       	smpsAlterNote       $FA
000969EC 0101                       	dc.b	$01, $01
000969EE E1FD                       	smpsAlterNote       $FD
000969F0 ECF5                       	smpsPSGAlterVol     $F5
000969F2 9206                       	dc.b	nF1, $06
000969F4 EC04                       	smpsPSGAlterVol     $04
000969F6 E701                       	dc.b	smpsNoAttack, $01
000969F8 EC07                       	smpsPSGAlterVol     $07
000969FA 8003                       	dc.b	nRst, $03
000969FC ECF5                       	smpsPSGAlterVol     $F5
000969FE 9206                       	dc.b	nF1, $06
00096A00 EC04                       	smpsPSGAlterVol     $04
00096A02 E701                       	dc.b	smpsNoAttack, $01
00096A04 EC07                       	smpsPSGAlterVol     $07
00096A06 8006                       	dc.b	nRst, $06
00096A08 E100                       	smpsAlterNote       $00
00096A0A 01                         	dc.b	$01
00096A0B E104                       	smpsAlterNote       $04
00096A0D 01                         	dc.b	$01
00096A0E E103                       	smpsAlterNote       $03
00096A10 01                         	dc.b	$01
00096A11 E1FD                       	smpsAlterNote       $FD
00096A13 01                         	dc.b	$01
00096A14 ECF5                       	smpsPSGAlterVol     $F5
00096A16 9407                       	dc.b	nG1, $07
00096A18 EC0B                       	smpsPSGAlterVol     $0B
00096A1A 8004                       	dc.b	nRst, $04
00096A1C ECF5                       	smpsPSGAlterVol     $F5
00096A1E 9406                       	dc.b	nG1, $06
00096A20 EC0B                       	smpsPSGAlterVol     $0B
00096A22 8007                       	dc.b	nRst, $07
00096A24 E103                       	smpsAlterNote       $03
00096A26 0101                       	dc.b	$01, $01
00096A28 E1FD                       	smpsAlterNote       $FD
00096A2A 01                         	dc.b	$01
00096A2B E1F9                       	smpsAlterNote       $F9
00096A2D 01                         	dc.b	$01
00096A2E E1FD                       	smpsAlterNote       $FD
00096A30 ECF5                       	smpsPSGAlterVol     $F5
00096A32 9206                       	dc.b	nF1, $06
00096A34 EC04                       	smpsPSGAlterVol     $04
00096A36 E701                       	dc.b	smpsNoAttack, $01
00096A38 EC07                       	smpsPSGAlterVol     $07
00096A3A 8003                       	dc.b	nRst, $03
00096A3C ECF5                       	smpsPSGAlterVol     $F5
00096A3E 9206                       	dc.b	nF1, $06
00096A40 EC04                       	smpsPSGAlterVol     $04
00096A42 E701                       	dc.b	smpsNoAttack, $01
00096A44 EC07                       	smpsPSGAlterVol     $07
00096A46 8006                       	dc.b	nRst, $06
00096A48 E100                       	smpsAlterNote       $00
00096A4A 01                         	dc.b	$01
00096A4B E104                       	smpsAlterNote       $04
00096A4D 01                         	dc.b	$01
00096A4E E100                       	smpsAlterNote       $00
00096A50 01                         	dc.b	$01
00096A51 E1FA                       	smpsAlterNote       $FA
00096A53 01                         	dc.b	$01
00096A54 E1FD                       	smpsAlterNote       $FD
00096A56 ECF5                       	smpsPSGAlterVol     $F5
00096A58 9206                       	dc.b	nF1, $06
00096A5A EC04                       	smpsPSGAlterVol     $04
00096A5C E701                       	dc.b	smpsNoAttack, $01
00096A5E EC07                       	smpsPSGAlterVol     $07
00096A60 8003                       	dc.b	nRst, $03
00096A62 ECF5                       	smpsPSGAlterVol     $F5
00096A64 9107                       	dc.b	nE1, $07
00096A66 EC0B                       	smpsPSGAlterVol     $0B
00096A68 8006                       	dc.b	nRst, $06
00096A6A E100                       	smpsAlterNote       $00
00096A6C 01                         	dc.b	$01
00096A6D E103                       	smpsAlterNote       $03
00096A6F 0101                       	dc.b	$01, $01
00096A71 E1FD                       	smpsAlterNote       $FD
00096A73 01                         	dc.b	$01
00096A74 ECF5                       	smpsPSGAlterVol     $F5
00096A76 9207                       	dc.b	nF1, $07
00096A78 EC0B                       	smpsPSGAlterVol     $0B
00096A7A 8004                       	dc.b	nRst, $04
00096A7C ECF5                       	smpsPSGAlterVol     $F5
00096A7E 9206                       	dc.b	nF1, $06
00096A80 EC04                       	smpsPSGAlterVol     $04
00096A82 E701                       	dc.b	smpsNoAttack, $01
00096A84 EC07                       	smpsPSGAlterVol     $07
00096A86 8006                       	dc.b	nRst, $06
00096A88 E103                       	smpsAlterNote       $03
00096A8A 01                         	dc.b	$01
00096A8B E104                       	smpsAlterNote       $04
00096A8D 01                         	dc.b	$01
00096A8E E100                       	smpsAlterNote       $00
00096A90 01                         	dc.b	$01
00096A91 E1FB                       	smpsAlterNote       $FB
00096A93 01                         	dc.b	$01
00096A94 E1FD                       	smpsAlterNote       $FD
00096A96 ECF5                       	smpsPSGAlterVol     $F5
00096A98 9406                       	dc.b	nG1, $06
00096A9A EC04                       	smpsPSGAlterVol     $04
00096A9C E701                       	dc.b	smpsNoAttack, $01
00096A9E EC07                       	smpsPSGAlterVol     $07
00096AA0 8003                       	dc.b	nRst, $03
00096AA2 ECF5                       	smpsPSGAlterVol     $F5
00096AA4 9406                       	dc.b	nG1, $06
00096AA6 EC04                       	smpsPSGAlterVol     $04
00096AA8 E701                       	dc.b	smpsNoAttack, $01
00096AAA EC07                       	smpsPSGAlterVol     $07
00096AAC 8006                       	dc.b	nRst, $06
00096AAE E100                       	smpsAlterNote       $00
00096AB0 01                         	dc.b	$01
00096AB1 E104                       	smpsAlterNote       $04
00096AB3 01                         	dc.b	$01
00096AB4 E100                       	smpsAlterNote       $00
00096AB6 01                         	dc.b	$01
00096AB7 E1FD                       	smpsAlterNote       $FD
00096AB9 01                         	dc.b	$01
00096ABA ECF5                       	smpsPSGAlterVol     $F5
00096ABC 9206                       	dc.b	nF1, $06
00096ABE EC04                       	smpsPSGAlterVol     $04
00096AC0 E701                       	dc.b	smpsNoAttack, $01
00096AC2 EC07                       	smpsPSGAlterVol     $07
00096AC4 8003                       	dc.b	nRst, $03
00096AC6 ECF5                       	smpsPSGAlterVol     $F5
00096AC8 9207                       	dc.b	nF1, $07
00096ACA EC0B                       	smpsPSGAlterVol     $0B
00096ACC 8007                       	dc.b	nRst, $07
00096ACE E103                       	smpsAlterNote       $03
00096AD0 0101                       	dc.b	$01, $01
00096AD2 E1FD                       	smpsAlterNote       $FD
00096AD4 01                         	dc.b	$01
00096AD5 E1FA                       	smpsAlterNote       $FA
00096AD7 01                         	dc.b	$01
00096AD8 E1FD                       	smpsAlterNote       $FD
00096ADA ECF5                       	smpsPSGAlterVol     $F5
00096ADC 9206                       	dc.b	nF1, $06
00096ADE EC0B                       	smpsPSGAlterVol     $0B
00096AE0 8004                       	dc.b	nRst, $04
00096AE2 ECF5                       	smpsPSGAlterVol     $F5
00096AE4 9206                       	dc.b	nF1, $06
00096AE6 EC04                       	smpsPSGAlterVol     $04
00096AE8 E701                       	dc.b	smpsNoAttack, $01
00096AEA EC07                       	smpsPSGAlterVol     $07
00096AEC 8006                       	dc.b	nRst, $06
00096AEE E100                       	smpsAlterNote       $00
00096AF0 01                         	dc.b	$01
00096AF1 E104                       	smpsAlterNote       $04
00096AF3 01                         	dc.b	$01
00096AF4 E100                       	smpsAlterNote       $00
00096AF6 01                         	dc.b	$01
00096AF7 E1FA                       	smpsAlterNote       $FA
00096AF9 01                         	dc.b	$01
00096AFA E1FD                       	smpsAlterNote       $FD
00096AFC ECF5                       	smpsPSGAlterVol     $F5
00096AFE 9206                       	dc.b	nF1, $06
00096B00 EC04                       	smpsPSGAlterVol     $04
00096B02 E704                       	dc.b	smpsNoAttack, $04
00096B04 ECFC                       	smpsPSGAlterVol     $FC
00096B06 9207                       	dc.b	nF1, $07
00096B08 EC0B                       	smpsPSGAlterVol     $0B
00096B0A 8006                       	dc.b	nRst, $06
00096B0C E100                       	smpsAlterNote       $00
00096B0E 01                         	dc.b	$01
00096B0F E104                       	smpsAlterNote       $04
00096B11 01                         	dc.b	$01
00096B12 E103                       	smpsAlterNote       $03
00096B14 01                         	dc.b	$01
00096B15 E1FD                       	smpsAlterNote       $FD
00096B17 01                         	dc.b	$01
00096B18 ECF5                       	smpsPSGAlterVol     $F5
00096B1A 9207                       	dc.b	nF1, $07
00096B1C EC0B                       	smpsPSGAlterVol     $0B
00096B1E 8004                       	dc.b	nRst, $04
00096B20 ECF5                       	smpsPSGAlterVol     $F5
00096B22 9206                       	dc.b	nF1, $06
00096B24 EC0B                       	smpsPSGAlterVol     $0B
00096B26 8007                       	dc.b	nRst, $07
00096B28 E103                       	smpsAlterNote       $03
00096B2A 0101                       	dc.b	$01, $01
00096B2C E100                       	smpsAlterNote       $00
00096B2E 01                         	dc.b	$01
00096B2F E1FA                       	smpsAlterNote       $FA
00096B31 01                         	dc.b	$01
00096B32 E1FD                       	smpsAlterNote       $FD
00096B34 ECF5                       	smpsPSGAlterVol     $F5
00096B36 9206                       	dc.b	nF1, $06
00096B38 EC04                       	smpsPSGAlterVol     $04
00096B3A E704                       	dc.b	smpsNoAttack, $04
00096B3C ECFC                       	smpsPSGAlterVol     $FC
00096B3E 9206                       	dc.b	nF1, $06
00096B40 EC04                       	smpsPSGAlterVol     $04
00096B42 E701                       	dc.b	smpsNoAttack, $01
00096B44 EC07                       	smpsPSGAlterVol     $07
00096B46 8006                       	dc.b	nRst, $06
00096B48 E100                       	smpsAlterNote       $00
00096B4A 01                         	dc.b	$01
00096B4B E104                       	smpsAlterNote       $04
00096B4D 01                         	dc.b	$01
00096B4E E100                       	smpsAlterNote       $00
00096B50 01                         	dc.b	$01
00096B51 E1FD                       	smpsAlterNote       $FD
00096B53 01                         	dc.b	$01
00096B54 ECF5                       	smpsPSGAlterVol     $F5
00096B56 9206                       	dc.b	nF1, $06
00096B58 EC04                       	smpsPSGAlterVol     $04
00096B5A E701                       	dc.b	smpsNoAttack, $01
00096B5C EC07                       	smpsPSGAlterVol     $07
00096B5E 8003                       	dc.b	nRst, $03
00096B60 ECF5                       	smpsPSGAlterVol     $F5
00096B62 9207                       	dc.b	nF1, $07
00096B64 EC0B                       	smpsPSGAlterVol     $0B
00096B66 8007                       	dc.b	nRst, $07
00096B68 E103                       	smpsAlterNote       $03
00096B6A 0101                       	dc.b	$01, $01
00096B6C E1FD                       	smpsAlterNote       $FD
00096B6E 01                         	dc.b	$01
00096B6F E1FA                       	smpsAlterNote       $FA
00096B71 01                         	dc.b	$01
00096B72 E1FD                       	smpsAlterNote       $FD
00096B74 ECF5                       	smpsPSGAlterVol     $F5
00096B76 9106                       	dc.b	nE1, $06
00096B78 EC0B                       	smpsPSGAlterVol     $0B
00096B7A 8004                       	dc.b	nRst, $04
00096B7C ECF5                       	smpsPSGAlterVol     $F5
00096B7E 9106                       	dc.b	nE1, $06
00096B80 EC04                       	smpsPSGAlterVol     $04
00096B82 E701                       	dc.b	smpsNoAttack, $01
00096B84 EC07                       	smpsPSGAlterVol     $07
00096B86 8006                       	dc.b	nRst, $06
00096B88 E100                       	smpsAlterNote       $00
00096B8A 01                         	dc.b	$01
00096B8B E104                       	smpsAlterNote       $04
00096B8D 01                         	dc.b	$01
00096B8E E100                       	smpsAlterNote       $00
00096B90 01                         	dc.b	$01
00096B91 E1FA                       	smpsAlterNote       $FA
00096B93 01                         	dc.b	$01
00096B94 E1FD                       	smpsAlterNote       $FD
00096B96 ECF5                       	smpsPSGAlterVol     $F5
00096B98 9106                       	dc.b	nE1, $06
00096B9A EC04                       	smpsPSGAlterVol     $04
00096B9C E701                       	dc.b	smpsNoAttack, $01
00096B9E EC07                       	smpsPSGAlterVol     $07
00096BA0 8003                       	dc.b	nRst, $03
00096BA2 ECF5                       	smpsPSGAlterVol     $F5
00096BA4 9106                       	dc.b	nE1, $06
00096BA6 EC04                       	smpsPSGAlterVol     $04
00096BA8 E701                       	dc.b	smpsNoAttack, $01
00096BAA EC07                       	smpsPSGAlterVol     $07
00096BAC 8006                       	dc.b	nRst, $06
00096BAE E100                       	smpsAlterNote       $00
00096BB0 01                         	dc.b	$01
00096BB1 E104                       	smpsAlterNote       $04
00096BB3 01                         	dc.b	$01
00096BB4 E103                       	smpsAlterNote       $03
00096BB6 01                         	dc.b	$01
00096BB7 E1FD                       	smpsAlterNote       $FD
00096BB9 01                         	dc.b	$01
00096BBA ECF5                       	smpsPSGAlterVol     $F5
00096BBC 9107                       	dc.b	nE1, $07
00096BBE EC0B                       	smpsPSGAlterVol     $0B
00096BC0 8004                       	dc.b	nRst, $04
00096BC2 ECF5                       	smpsPSGAlterVol     $F5
00096BC4 9106                       	dc.b	nE1, $06
00096BC6 EC0B                       	smpsPSGAlterVol     $0B
00096BC8 8007                       	dc.b	nRst, $07
00096BCA E103                       	smpsAlterNote       $03
00096BCC 0101                       	dc.b	$01, $01
00096BCE E100                       	smpsAlterNote       $00
00096BD0 01                         	dc.b	$01
00096BD1 E1FA                       	smpsAlterNote       $FA
00096BD3 01                         	dc.b	$01
00096BD4 E1FD                       	smpsAlterNote       $FD
00096BD6 ECF5                       	smpsPSGAlterVol     $F5
00096BD8 9106                       	dc.b	nE1, $06
00096BDA EC04                       	smpsPSGAlterVol     $04
00096BDC E701                       	dc.b	smpsNoAttack, $01
00096BDE EC07                       	smpsPSGAlterVol     $07
00096BE0 8003                       	dc.b	nRst, $03
00096BE2 ECF5                       	smpsPSGAlterVol     $F5
00096BE4 9106                       	dc.b	nE1, $06
00096BE6 EC04                       	smpsPSGAlterVol     $04
00096BE8 E701                       	dc.b	smpsNoAttack, $01
00096BEA EC07                       	smpsPSGAlterVol     $07
00096BEC 8003                       	dc.b	nRst, $03
00096BEE ECF5                       	smpsPSGAlterVol     $F5
00096BF0 9207                       	dc.b	nF1, $07
00096BF2 EC0B                       	smpsPSGAlterVol     $0B
00096BF4 8006                       	dc.b	nRst, $06
00096BF6 E100                       	smpsAlterNote       $00
00096BF8 01                         	dc.b	$01
00096BF9 E104                       	smpsAlterNote       $04
00096BFB 01                         	dc.b	$01
00096BFC E103                       	smpsAlterNote       $03
00096BFE 01                         	dc.b	$01
00096BFF E1FD                       	smpsAlterNote       $FD
00096C01 01                         	dc.b	$01
00096C02 E1F9                       	smpsAlterNote       $F9
00096C04 01                         	dc.b	$01
00096C05 E1FD                       	smpsAlterNote       $FD
00096C07 01                         	dc.b	$01
00096C08 E100                       	smpsAlterNote       $00
00096C0A 01                         	dc.b	$01
00096C0B E104                       	smpsAlterNote       $04
00096C0D 01                         	dc.b	$01
00096C0E E1FD                       	smpsAlterNote       $FD
00096C10 ECF5                       	smpsPSGAlterVol     $F5
00096C12 9203 9203                  	dc.b	nF1, $03, nF1, $03
00096C16 EC04                       	smpsPSGAlterVol     $04
00096C18 E701                       	dc.b	smpsNoAttack, $01
00096C1A EC07                       	smpsPSGAlterVol     $07
00096C1C 8009                       	dc.b	nRst, $09
00096C1E E100                       	smpsAlterNote       $00
00096C20 01                         	dc.b	$01
00096C21 E104                       	smpsAlterNote       $04
00096C23 01                         	dc.b	$01
00096C24 E103                       	smpsAlterNote       $03
00096C26 01                         	dc.b	$01
00096C27 E1FD                       	smpsAlterNote       $FD
00096C29 01                         	dc.b	$01
00096C2A E1F9                       	smpsAlterNote       $F9
00096C2C 01                         	dc.b	$01
00096C2D E1FD                       	smpsAlterNote       $FD
00096C2F 01                         	dc.b	$01
00096C30 E100                       	smpsAlterNote       $00
00096C32 01                         	dc.b	$01
00096C33 E104                       	smpsAlterNote       $04
00096C35 01                         	dc.b	$01
00096C36 E100                       	smpsAlterNote       $00
00096C38 01                         	dc.b	$01
00096C39 E1FA                       	smpsAlterNote       $FA
00096C3B 01                         	dc.b	$01
00096C3C E1F9                       	smpsAlterNote       $F9
00096C3E 01                         	dc.b	$01
00096C3F E1FD                       	smpsAlterNote       $FD
00096C41 01                         	dc.b	$01
00096C42 E103                       	smpsAlterNote       $03
00096C44 0101                       	dc.b	$01, $01
00096C46 E100                       	smpsAlterNote       $00
00096C48 01                         	dc.b	$01
00096C49 E1FD                       	smpsAlterNote       $FD
00096C4B ECF5                       	smpsPSGAlterVol     $F5
00096C4D 9202                       	dc.b	nF1, $02
00096C4F EC04                       	smpsPSGAlterVol     $04
00096C51 E701                       	dc.b	smpsNoAttack, $01
00096C53 ECFC                       	smpsPSGAlterVol     $FC
00096C55 9106                       	dc.b	nE1, $06
00096C57 EC04                       	smpsPSGAlterVol     $04
00096C59 E701                       	dc.b	smpsNoAttack, $01
00096C5B EC07                       	smpsPSGAlterVol     $07
00096C5D 8006                       	dc.b	nRst, $06
00096C5F E100                       	smpsAlterNote       $00
00096C61 01                         	dc.b	$01
00096C62 E104                       	smpsAlterNote       $04
00096C64 01                         	dc.b	$01
00096C65 E100                       	smpsAlterNote       $00
00096C67 01                         	dc.b	$01
00096C68 E1FD                       	smpsAlterNote       $FD
00096C6A 01                         	dc.b	$01
00096C6B E1F9                       	smpsAlterNote       $F9
00096C6D 01                         	dc.b	$01
00096C6E E1FD                       	smpsAlterNote       $FD
00096C70 01                         	dc.b	$01
00096C71 E103                       	smpsAlterNote       $03
00096C73 01                         	dc.b	$01
00096C74 E104                       	smpsAlterNote       $04
00096C76 01                         	dc.b	$01
00096C77 E1FD                       	smpsAlterNote       $FD
00096C79 ECF5                       	smpsPSGAlterVol     $F5
00096C7B 9102                       	dc.b	nE1, $02
00096C7D EC04                       	smpsPSGAlterVol     $04
00096C7F E701                       	dc.b	smpsNoAttack, $01
00096C81 ECFC                       	smpsPSGAlterVol     $FC
00096C83 920D                       	dc.b	nF1, $0D
00096C85 E100                       	smpsAlterNote       $00
00096C87 E701                       	dc.b	smpsNoAttack, $01
00096C89 E104                       	smpsAlterNote       $04
00096C8B E701                       	dc.b	smpsNoAttack, $01
00096C8D E100                       	smpsAlterNote       $00
00096C8F E701                       	dc.b	smpsNoAttack, $01
00096C91 E1FD                       	smpsAlterNote       $FD
00096C93 E701                       	dc.b	smpsNoAttack, $01
00096C95 E1F9                       	smpsAlterNote       $F9
00096C97 E701                       	dc.b	smpsNoAttack, $01
00096C99 E1FD                       	smpsAlterNote       $FD
00096C9B E701                       	dc.b	smpsNoAttack, $01
00096C9D E103                       	smpsAlterNote       $03
00096C9F E701                       	dc.b	smpsNoAttack, $01
00096CA1 E104                       	smpsAlterNote       $04
00096CA3 E701                       	dc.b	smpsNoAttack, $01
00096CA5 E100                       	smpsAlterNote       $00
00096CA7 E701                       	dc.b	smpsNoAttack, $01
00096CA9 E1FA                       	smpsAlterNote       $FA
00096CAB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096CAF E1FD                       	smpsAlterNote       $FD
00096CB1 E701                       	dc.b	smpsNoAttack, $01
00096CB3 E103                       	smpsAlterNote       $03
00096CB5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096CB9 E1FD                       	smpsAlterNote       $FD
00096CBB E701                       	dc.b	smpsNoAttack, $01
00096CBD E1F9                       	smpsAlterNote       $F9
00096CBF E701                       	dc.b	smpsNoAttack, $01
00096CC1 E1FA                       	smpsAlterNote       $FA
00096CC3 E701                       	dc.b	smpsNoAttack, $01
00096CC5 E100                       	smpsAlterNote       $00
00096CC7 EC04                       	smpsPSGAlterVol     $04
00096CC9 E701                       	dc.b	smpsNoAttack, $01
00096CCB EC07                       	smpsPSGAlterVol     $07
00096CCD E104                       	smpsAlterNote       $04
00096CCF 8001                       	dc.b	nRst, $01
00096CD1 E100                       	smpsAlterNote       $00
00096CD3 01                         	dc.b	$01
00096CD4 E1FD                       	smpsAlterNote       $FD
00096CD6 01                         	dc.b	$01
00096CD7 E1F9                       	smpsAlterNote       $F9
00096CD9 01                         	dc.b	$01
00096CDA E1FD                       	smpsAlterNote       $FD
00096CDC 01                         	dc.b	$01
00096CDD E103                       	smpsAlterNote       $03
00096CDF 01                         	dc.b	$01
00096CE0 E104                       	smpsAlterNote       $04
00096CE2 01                         	dc.b	$01
00096CE3 E1FD                       	smpsAlterNote       $FD
00096CE5 ECF5                       	smpsPSGAlterVol     $F5
00096CE7 9106                       	dc.b	nE1, $06
00096CE9 EC04                       	smpsPSGAlterVol     $04
00096CEB E701                       	dc.b	smpsNoAttack, $01
00096CED EC07                       	smpsPSGAlterVol     $07
00096CEF 8003                       	dc.b	nRst, $03
00096CF1 ECF5                       	smpsPSGAlterVol     $F5
00096CF3 9106                       	dc.b	nE1, $06
00096CF5 EC04                       	smpsPSGAlterVol     $04
00096CF7 E701                       	dc.b	smpsNoAttack, $01
00096CF9 EC07                       	smpsPSGAlterVol     $07
00096CFB 8006                       	dc.b	nRst, $06
00096CFD E100                       	smpsAlterNote       $00
00096CFF 01                         	dc.b	$01
00096D00 E104                       	smpsAlterNote       $04
00096D02 01                         	dc.b	$01
00096D03 E100                       	smpsAlterNote       $00
00096D05 01                         	dc.b	$01
00096D06 E1FA                       	smpsAlterNote       $FA
00096D08 01                         	dc.b	$01
00096D09 E1FD                       	smpsAlterNote       $FD
00096D0B ECF5                       	smpsPSGAlterVol     $F5
00096D0D 9206                       	dc.b	nF1, $06
00096D0F EC04                       	smpsPSGAlterVol     $04
00096D11 E701                       	dc.b	smpsNoAttack, $01
00096D13 EC07                       	smpsPSGAlterVol     $07
00096D15 8003                       	dc.b	nRst, $03
00096D17 ECF5                       	smpsPSGAlterVol     $F5
00096D19 9207                       	dc.b	nF1, $07
00096D1B EC0B                       	smpsPSGAlterVol     $0B
00096D1D 8006                       	dc.b	nRst, $06
00096D1F E100                       	smpsAlterNote       $00
00096D21 01                         	dc.b	$01
00096D22 E103                       	smpsAlterNote       $03
00096D24 0101                       	dc.b	$01, $01
00096D26 E1FD                       	smpsAlterNote       $FD
00096D28 01                         	dc.b	$01
00096D29 ECF5                       	smpsPSGAlterVol     $F5
00096D2B 9107                       	dc.b	nE1, $07
00096D2D EC0B                       	smpsPSGAlterVol     $0B
00096D2F 8004                       	dc.b	nRst, $04
00096D31 ECF5                       	smpsPSGAlterVol     $F5
00096D33 9106                       	dc.b	nE1, $06
00096D35 EC04                       	smpsPSGAlterVol     $04
00096D37 E701                       	dc.b	smpsNoAttack, $01
00096D39 EC07                       	smpsPSGAlterVol     $07
00096D3B 8006                       	dc.b	nRst, $06
00096D3D E103                       	smpsAlterNote       $03
00096D3F 01                         	dc.b	$01
00096D40 E104                       	smpsAlterNote       $04
00096D42 01                         	dc.b	$01
00096D43 E100                       	smpsAlterNote       $00
00096D45 01                         	dc.b	$01
00096D46 E1FA                       	smpsAlterNote       $FA
00096D48 01                         	dc.b	$01
00096D49 E1FD                       	smpsAlterNote       $FD
00096D4B ECF5                       	smpsPSGAlterVol     $F5
00096D4D 9106                       	dc.b	nE1, $06
00096D4F EC04                       	smpsPSGAlterVol     $04
00096D51 E701                       	dc.b	smpsNoAttack, $01
00096D53 EC07                       	smpsPSGAlterVol     $07
00096D55 8003                       	dc.b	nRst, $03
00096D57 ECF5                       	smpsPSGAlterVol     $F5
00096D59 9106                       	dc.b	nE1, $06
00096D5B EC04                       	smpsPSGAlterVol     $04
00096D5D E701                       	dc.b	smpsNoAttack, $01
00096D5F EC07                       	smpsPSGAlterVol     $07
00096D61 8003                       	dc.b	nRst, $03
00096D63 ECF5                       	smpsPSGAlterVol     $F5
00096D65 9207                       	dc.b	nF1, $07
00096D67 EC0B                       	smpsPSGAlterVol     $0B
00096D69 8006                       	dc.b	nRst, $06
00096D6B E100                       	smpsAlterNote       $00
00096D6D 01                         	dc.b	$01
00096D6E E103                       	smpsAlterNote       $03
00096D70 0101                       	dc.b	$01, $01
00096D72 E1FD                       	smpsAlterNote       $FD
00096D74 01                         	dc.b	$01
00096D75 E1F9                       	smpsAlterNote       $F9
00096D77 01                         	dc.b	$01
00096D78 E1FA                       	smpsAlterNote       $FA
00096D7A 01                         	dc.b	$01
00096D7B E100                       	smpsAlterNote       $00
00096D7D 01                         	dc.b	$01
00096D7E E104                       	smpsAlterNote       $04
00096D80 01                         	dc.b	$01
00096D81 E1FD                       	smpsAlterNote       $FD
00096D83 ECF5                       	smpsPSGAlterVol     $F5
00096D85 9203 9203                  	dc.b	nF1, $03, nF1, $03
00096D89 EC04                       	smpsPSGAlterVol     $04
00096D8B E701                       	dc.b	smpsNoAttack, $01
00096D8D EC07                       	smpsPSGAlterVol     $07
00096D8F 8009                       	dc.b	nRst, $09
00096D91 E100                       	smpsAlterNote       $00
00096D93 01                         	dc.b	$01
00096D94 E103                       	smpsAlterNote       $03
00096D96 0101                       	dc.b	$01, $01
00096D98 E1FD                       	smpsAlterNote       $FD
00096D9A 01                         	dc.b	$01
00096D9B E1F9                       	smpsAlterNote       $F9
00096D9D 01                         	dc.b	$01
00096D9E E1FA                       	smpsAlterNote       $FA
00096DA0 01                         	dc.b	$01
00096DA1 E100                       	smpsAlterNote       $00
00096DA3 01                         	dc.b	$01
00096DA4 E104                       	smpsAlterNote       $04
00096DA6 01                         	dc.b	$01
00096DA7 E100                       	smpsAlterNote       $00
00096DA9 01                         	dc.b	$01
00096DAA E1FD                       	smpsAlterNote       $FD
00096DAC 01                         	dc.b	$01
00096DAD E1F9                       	smpsAlterNote       $F9
00096DAF 01                         	dc.b	$01
00096DB0 E1FD                       	smpsAlterNote       $FD
00096DB2 01                         	dc.b	$01
00096DB3 E103                       	smpsAlterNote       $03
00096DB5 01                         	dc.b	$01
00096DB6 E104                       	smpsAlterNote       $04
00096DB8 01                         	dc.b	$01
00096DB9 E100                       	smpsAlterNote       $00
00096DBB 01                         	dc.b	$01
00096DBC E1FD                       	smpsAlterNote       $FD
00096DBE ECF5                       	smpsPSGAlterVol     $F5
00096DC0 9203 9106                  	dc.b	nF1, $03, nE1, $06
00096DC4 EC04                       	smpsPSGAlterVol     $04
00096DC6 E701                       	dc.b	smpsNoAttack, $01
00096DC8 EC07                       	smpsPSGAlterVol     $07
00096DCA 8006                       	dc.b	nRst, $06
00096DCC E100                       	smpsAlterNote       $00
00096DCE 01                         	dc.b	$01
00096DCF E104                       	smpsAlterNote       $04
00096DD1 01                         	dc.b	$01
00096DD2 E103                       	smpsAlterNote       $03
00096DD4 01                         	dc.b	$01
00096DD5 E1FD                       	smpsAlterNote       $FD
00096DD7 01                         	dc.b	$01
00096DD8 E1F9                       	smpsAlterNote       $F9
00096DDA 01                         	dc.b	$01
00096DDB E1FD                       	smpsAlterNote       $FD
00096DDD 01                         	dc.b	$01
00096DDE E100                       	smpsAlterNote       $00
00096DE0 01                         	dc.b	$01
00096DE1 E104                       	smpsAlterNote       $04
00096DE3 01                         	dc.b	$01
00096DE4 E1FD                       	smpsAlterNote       $FD
00096DE6 ECF5                       	smpsPSGAlterVol     $F5
00096DE8 9103 920D                  	dc.b	nE1, $03, nF1, $0D
00096DEC E100                       	smpsAlterNote       $00
00096DEE E701                       	dc.b	smpsNoAttack, $01
00096DF0 E104                       	smpsAlterNote       $04
00096DF2 E701                       	dc.b	smpsNoAttack, $01
00096DF4 E100                       	smpsAlterNote       $00
00096DF6 E701                       	dc.b	smpsNoAttack, $01
00096DF8 E1FD                       	smpsAlterNote       $FD
00096DFA E701                       	dc.b	smpsNoAttack, $01
00096DFC E1F9                       	smpsAlterNote       $F9
00096DFE E701                       	dc.b	smpsNoAttack, $01
00096E00 E1FD                       	smpsAlterNote       $FD
00096E02 E701                       	dc.b	smpsNoAttack, $01
00096E04 E103                       	smpsAlterNote       $03
00096E06 E701                       	dc.b	smpsNoAttack, $01
00096E08 E104                       	smpsAlterNote       $04
00096E0A E701                       	dc.b	smpsNoAttack, $01
00096E0C E100                       	smpsAlterNote       $00
00096E0E E701                       	dc.b	smpsNoAttack, $01
00096E10 E1FA                       	smpsAlterNote       $FA
00096E12 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096E16 E1FD                       	smpsAlterNote       $FD
00096E18 E701                       	dc.b	smpsNoAttack, $01
00096E1A E103                       	smpsAlterNote       $03
00096E1C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096E20 E100                       	smpsAlterNote       $00
00096E22 E701                       	dc.b	smpsNoAttack, $01
00096E24 E1FA                       	smpsAlterNote       $FA
00096E26 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096E2A E100                       	smpsAlterNote       $00
00096E2C EC04                       	smpsPSGAlterVol     $04
00096E2E E701                       	dc.b	smpsNoAttack, $01
00096E30 EC07                       	smpsPSGAlterVol     $07
00096E32 E104                       	smpsAlterNote       $04
00096E34 8001                       	dc.b	nRst, $01
00096E36 E103                       	smpsAlterNote       $03
00096E38 01                         	dc.b	$01
00096E39 E1FD                       	smpsAlterNote       $FD
00096E3B 01                         	dc.b	$01
00096E3C E1F9                       	smpsAlterNote       $F9
00096E3E 01                         	dc.b	$01
00096E3F E1FD                       	smpsAlterNote       $FD
00096E41 01                         	dc.b	$01
00096E42 E100                       	smpsAlterNote       $00
00096E44 01                         	dc.b	$01
00096E45 E104                       	smpsAlterNote       $04
00096E47 01                         	dc.b	$01
00096E48 E1FD                       	smpsAlterNote       $FD
00096E4A ECF5                       	smpsPSGAlterVol     $F5
00096E4C 9106                       	dc.b	nE1, $06
00096E4E EC04                       	smpsPSGAlterVol     $04
00096E50 E701                       	dc.b	smpsNoAttack, $01
00096E52 EC07                       	smpsPSGAlterVol     $07
00096E54 8003                       	dc.b	nRst, $03
00096E56 ECF5                       	smpsPSGAlterVol     $F5
00096E58 9106                       	dc.b	nE1, $06
00096E5A EC04                       	smpsPSGAlterVol     $04
00096E5C E701                       	dc.b	smpsNoAttack, $01
00096E5E EC07                       	smpsPSGAlterVol     $07
00096E60 8006                       	dc.b	nRst, $06
00096E62 E100                       	smpsAlterNote       $00
00096E64 01                         	dc.b	$01
00096E65 E104                       	smpsAlterNote       $04
00096E67 01                         	dc.b	$01
00096E68 E100                       	smpsAlterNote       $00
00096E6A 01                         	dc.b	$01
00096E6B E1FD                       	smpsAlterNote       $FD
00096E6D 01                         	dc.b	$01
00096E6E ECF5                       	smpsPSGAlterVol     $F5
00096E70 9206                       	dc.b	nF1, $06
00096E72 EC04                       	smpsPSGAlterVol     $04
00096E74 E701                       	dc.b	smpsNoAttack, $01
00096E76 EC07                       	smpsPSGAlterVol     $07
00096E78 8003                       	dc.b	nRst, $03
00096E7A ECF5                       	smpsPSGAlterVol     $F5
00096E7C 9207                       	dc.b	nF1, $07
00096E7E EC0B                       	smpsPSGAlterVol     $0B
00096E80 8007                       	dc.b	nRst, $07
00096E82 E103                       	smpsAlterNote       $03
00096E84 0101                       	dc.b	$01, $01
00096E86 E1FD                       	smpsAlterNote       $FD
00096E88 01                         	dc.b	$01
00096E89 E1FA                       	smpsAlterNote       $FA
00096E8B 01                         	dc.b	$01
00096E8C E1FD                       	smpsAlterNote       $FD
00096E8E ECF5                       	smpsPSGAlterVol     $F5
00096E90 9106                       	dc.b	nE1, $06
00096E92 EC0B                       	smpsPSGAlterVol     $0B
00096E94 8004                       	dc.b	nRst, $04
00096E96 ECF5                       	smpsPSGAlterVol     $F5
00096E98 9106                       	dc.b	nE1, $06
00096E9A EC04                       	smpsPSGAlterVol     $04
00096E9C E701                       	dc.b	smpsNoAttack, $01
00096E9E EC07                       	smpsPSGAlterVol     $07
00096EA0 8006                       	dc.b	nRst, $06
00096EA2 E100                       	smpsAlterNote       $00
00096EA4 01                         	dc.b	$01
00096EA5 E104                       	smpsAlterNote       $04
00096EA7 01                         	dc.b	$01
00096EA8 E100                       	smpsAlterNote       $00
00096EAA 01                         	dc.b	$01
00096EAB E1FA                       	smpsAlterNote       $FA
00096EAD 01                         	dc.b	$01
00096EAE E1FD                       	smpsAlterNote       $FD
00096EB0 ECF5                       	smpsPSGAlterVol     $F5
00096EB2 9206                       	dc.b	nF1, $06
00096EB4 EC04                       	smpsPSGAlterVol     $04
00096EB6 E701                       	dc.b	smpsNoAttack, $01
00096EB8 EC07                       	smpsPSGAlterVol     $07
00096EBA 8003                       	dc.b	nRst, $03
00096EBC ECF5                       	smpsPSGAlterVol     $F5
00096EBE 9206                       	dc.b	nF1, $06
00096EC0 EC04                       	smpsPSGAlterVol     $04
00096EC2 E701                       	dc.b	smpsNoAttack, $01
00096EC4 EC07                       	smpsPSGAlterVol     $07
00096EC6 8006                       	dc.b	nRst, $06
00096EC8 E100                       	smpsAlterNote       $00
00096ECA 01                         	dc.b	$01
00096ECB E104                       	smpsAlterNote       $04
00096ECD 01                         	dc.b	$01
00096ECE E103                       	smpsAlterNote       $03
00096ED0 01                         	dc.b	$01
00096ED1 E1FD                       	smpsAlterNote       $FD
00096ED3 01                         	dc.b	$01
00096ED4 ECF5                       	smpsPSGAlterVol     $F5
00096ED6 9107                       	dc.b	nE1, $07
00096ED8 EC0B                       	smpsPSGAlterVol     $0B
00096EDA 8004                       	dc.b	nRst, $04
00096EDC ECF5                       	smpsPSGAlterVol     $F5
00096EDE 9106                       	dc.b	nE1, $06
00096EE0 EC0B                       	smpsPSGAlterVol     $0B
00096EE2 8007                       	dc.b	nRst, $07
00096EE4 E103                       	smpsAlterNote       $03
00096EE6 0101                       	dc.b	$01, $01
00096EE8 E100                       	smpsAlterNote       $00
00096EEA 01                         	dc.b	$01
00096EEB E1FA                       	smpsAlterNote       $FA
00096EED 01                         	dc.b	$01
00096EEE E1FD                       	smpsAlterNote       $FD
00096EF0 ECF5                       	smpsPSGAlterVol     $F5
00096EF2 9206                       	dc.b	nF1, $06
00096EF4 EC04                       	smpsPSGAlterVol     $04
00096EF6 E701                       	dc.b	smpsNoAttack, $01
00096EF8 EC07                       	smpsPSGAlterVol     $07
00096EFA 8003                       	dc.b	nRst, $03
00096EFC ECF5                       	smpsPSGAlterVol     $F5
00096EFE 9206                       	dc.b	nF1, $06
00096F00 EC04                       	smpsPSGAlterVol     $04
00096F02 E701                       	dc.b	smpsNoAttack, $01
00096F04 EC07                       	smpsPSGAlterVol     $07
00096F06 8006                       	dc.b	nRst, $06
00096F08 E100                       	smpsAlterNote       $00
00096F0A 01                         	dc.b	$01
00096F0B E104                       	smpsAlterNote       $04
00096F0D 01                         	dc.b	$01
00096F0E E100                       	smpsAlterNote       $00
00096F10 01                         	dc.b	$01
00096F11 E1FD                       	smpsAlterNote       $FD
00096F13 01                         	dc.b	$01
00096F14 ECF5                       	smpsPSGAlterVol     $F5
00096F16 9106                       	dc.b	nE1, $06
00096F18 EC04                       	smpsPSGAlterVol     $04
00096F1A E701                       	dc.b	smpsNoAttack, $01
00096F1C EC07                       	smpsPSGAlterVol     $07
00096F1E 8003                       	dc.b	nRst, $03
00096F20 ECF5                       	smpsPSGAlterVol     $F5
00096F22 9107 9106                  	dc.b	nE1, $07, nE1, $06
00096F26 EC04                       	smpsPSGAlterVol     $04
00096F28 E701                       	dc.b	smpsNoAttack, $01
00096F2A ECFC                       	smpsPSGAlterVol     $FC
00096F2C 9103                       	dc.b	nE1, $03
00096F2E EC04                       	smpsPSGAlterVol     $04
00096F30 E701                       	dc.b	smpsNoAttack, $01
00096F32 ECFC                       	smpsPSGAlterVol     $FC
00096F34 9102                       	dc.b	nE1, $02
00096F36 EC04                       	smpsPSGAlterVol     $04
00096F38 E701                       	dc.b	smpsNoAttack, $01
00096F3A ECFC                       	smpsPSGAlterVol     $FC
00096F3C 9103                       	dc.b	nE1, $03
00096F3E EC0B                       	smpsPSGAlterVol     $0B
00096F40 800A                       	dc.b	nRst, $0A
00096F42 E100                       	smpsAlterNote       $00
00096F44 01                         	dc.b	$01
00096F45 E104                       	smpsAlterNote       $04
00096F47 01                         	dc.b	$01
00096F48 E100                       	smpsAlterNote       $00
00096F4A 01                         	dc.b	$01
00096F4B E1FA                       	smpsAlterNote       $FA
00096F4D 01                         	dc.b	$01
00096F4E E1F9                       	smpsAlterNote       $F9
00096F50 01                         	dc.b	$01
00096F51 E1FD                       	smpsAlterNote       $FD
00096F53 01                         	dc.b	$01
00096F54 E103                       	smpsAlterNote       $03
00096F56 0101                       	dc.b	$01, $01
00096F58 E100                       	smpsAlterNote       $00
00096F5A 01                         	dc.b	$01
00096F5B E1FA                       	smpsAlterNote       $FA
00096F5D 0101                       	dc.b	$01, $01
00096F5F E1FD                       	smpsAlterNote       $FD
00096F61 ECF5                       	smpsPSGAlterVol     $F5
00096F63 9206                       	dc.b	nF1, $06
00096F65 EC04                       	smpsPSGAlterVol     $04
00096F67 E704                       	dc.b	smpsNoAttack, $04
00096F69 ECFC                       	smpsPSGAlterVol     $FC
00096F6B 9206                       	dc.b	nF1, $06
00096F6D EC04                       	smpsPSGAlterVol     $04
00096F6F E701                       	dc.b	smpsNoAttack, $01
00096F71 EC07                       	smpsPSGAlterVol     $07
00096F73 8006                       	dc.b	nRst, $06
00096F75 E100                       	smpsAlterNote       $00
00096F77 01                         	dc.b	$01
00096F78 E104                       	smpsAlterNote       $04
00096F7A 01                         	dc.b	$01
00096F7B E103                       	smpsAlterNote       $03
00096F7D 01                         	dc.b	$01
00096F7E E1FD                       	smpsAlterNote       $FD
00096F80 01                         	dc.b	$01
00096F81 ECF5                       	smpsPSGAlterVol     $F5
00096F83 9407                       	dc.b	nG1, $07
00096F85 EC0B                       	smpsPSGAlterVol     $0B
00096F87 8004                       	dc.b	nRst, $04
00096F89 ECF5                       	smpsPSGAlterVol     $F5
00096F8B 9406                       	dc.b	nG1, $06
00096F8D EC0B                       	smpsPSGAlterVol     $0B
00096F8F 8007                       	dc.b	nRst, $07
00096F91 E103                       	smpsAlterNote       $03
00096F93 0101                       	dc.b	$01, $01
00096F95 E1FD                       	smpsAlterNote       $FD
00096F97 01                         	dc.b	$01
00096F98 E1F9                       	smpsAlterNote       $F9
00096F9A 01                         	dc.b	$01
00096F9B E1FD                       	smpsAlterNote       $FD
00096F9D ECF5                       	smpsPSGAlterVol     $F5
00096F9F 9206                       	dc.b	nF1, $06
00096FA1 EC04                       	smpsPSGAlterVol     $04
00096FA3 E701                       	dc.b	smpsNoAttack, $01
00096FA5 EC07                       	smpsPSGAlterVol     $07
00096FA7 8003                       	dc.b	nRst, $03
00096FA9 ECF5                       	smpsPSGAlterVol     $F5
00096FAB 9206                       	dc.b	nF1, $06
00096FAD EC04                       	smpsPSGAlterVol     $04
00096FAF E701                       	dc.b	smpsNoAttack, $01
00096FB1 EC07                       	smpsPSGAlterVol     $07
00096FB3 8006                       	dc.b	nRst, $06
00096FB5 E100                       	smpsAlterNote       $00
00096FB7 01                         	dc.b	$01
00096FB8 E104                       	smpsAlterNote       $04
00096FBA 01                         	dc.b	$01
00096FBB E100                       	smpsAlterNote       $00
00096FBD 01                         	dc.b	$01
00096FBE E1FA                       	smpsAlterNote       $FA
00096FC0 01                         	dc.b	$01
00096FC1 E1FD                       	smpsAlterNote       $FD
00096FC3 ECF5                       	smpsPSGAlterVol     $F5
00096FC5 9206                       	dc.b	nF1, $06
00096FC7 EC04                       	smpsPSGAlterVol     $04
00096FC9 E701                       	dc.b	smpsNoAttack, $01
00096FCB EC07                       	smpsPSGAlterVol     $07
00096FCD 8003                       	dc.b	nRst, $03
00096FCF ECF5                       	smpsPSGAlterVol     $F5
00096FD1 9107                       	dc.b	nE1, $07
00096FD3 EC0B                       	smpsPSGAlterVol     $0B
00096FD5 8006                       	dc.b	nRst, $06
00096FD7 E100                       	smpsAlterNote       $00
00096FD9 01                         	dc.b	$01
00096FDA E103                       	smpsAlterNote       $03
00096FDC 0101                       	dc.b	$01, $01
00096FDE E1FD                       	smpsAlterNote       $FD
00096FE0 01                         	dc.b	$01
00096FE1 ECF5                       	smpsPSGAlterVol     $F5
00096FE3 9207                       	dc.b	nF1, $07
00096FE5 EC0B                       	smpsPSGAlterVol     $0B
00096FE7 8004                       	dc.b	nRst, $04
00096FE9 ECF5                       	smpsPSGAlterVol     $F5
00096FEB 9206                       	dc.b	nF1, $06
00096FED EC04                       	smpsPSGAlterVol     $04
00096FEF E701                       	dc.b	smpsNoAttack, $01
00096FF1 EC07                       	smpsPSGAlterVol     $07
00096FF3 8006                       	dc.b	nRst, $06
00096FF5 E103                       	smpsAlterNote       $03
00096FF7 01                         	dc.b	$01
00096FF8 E104                       	smpsAlterNote       $04
00096FFA 01                         	dc.b	$01
00096FFB E100                       	smpsAlterNote       $00
00096FFD 01                         	dc.b	$01
00096FFE E1FB                       	smpsAlterNote       $FB
00097000 01                         	dc.b	$01
00097001 E1FD                       	smpsAlterNote       $FD
00097003 ECF5                       	smpsPSGAlterVol     $F5
00097005 9406                       	dc.b	nG1, $06
00097007 EC04                       	smpsPSGAlterVol     $04
00097009 E701                       	dc.b	smpsNoAttack, $01
0009700B EC07                       	smpsPSGAlterVol     $07
0009700D 8003                       	dc.b	nRst, $03
0009700F ECF5                       	smpsPSGAlterVol     $F5
00097011 9406                       	dc.b	nG1, $06
00097013 EC04                       	smpsPSGAlterVol     $04
00097015 E701                       	dc.b	smpsNoAttack, $01
00097017 EC07                       	smpsPSGAlterVol     $07
00097019 8006                       	dc.b	nRst, $06
0009701B E100                       	smpsAlterNote       $00
0009701D 01                         	dc.b	$01
0009701E E104                       	smpsAlterNote       $04
00097020 01                         	dc.b	$01
00097021 E100                       	smpsAlterNote       $00
00097023 01                         	dc.b	$01
00097024 E1FD                       	smpsAlterNote       $FD
00097026 01                         	dc.b	$01
00097027 ECF5                       	smpsPSGAlterVol     $F5
00097029 9206                       	dc.b	nF1, $06
0009702B EC04                       	smpsPSGAlterVol     $04
0009702D E701                       	dc.b	smpsNoAttack, $01
0009702F EC07                       	smpsPSGAlterVol     $07
00097031 8003                       	dc.b	nRst, $03
00097033 ECF5                       	smpsPSGAlterVol     $F5
00097035 9207                       	dc.b	nF1, $07
00097037 EC0B                       	smpsPSGAlterVol     $0B
00097039 8007                       	dc.b	nRst, $07
0009703B E103                       	smpsAlterNote       $03
0009703D 0101                       	dc.b	$01, $01
0009703F E1FD                       	smpsAlterNote       $FD
00097041 01                         	dc.b	$01
00097042 E1FA                       	smpsAlterNote       $FA
00097044 01                         	dc.b	$01
00097045 E1FD                       	smpsAlterNote       $FD
00097047 ECF5                       	smpsPSGAlterVol     $F5
00097049 9206                       	dc.b	nF1, $06
0009704B EC0B                       	smpsPSGAlterVol     $0B
0009704D 8004                       	dc.b	nRst, $04
0009704F ECF5                       	smpsPSGAlterVol     $F5
00097051 9206                       	dc.b	nF1, $06
00097053 EC04                       	smpsPSGAlterVol     $04
00097055 E701                       	dc.b	smpsNoAttack, $01
00097057 EC07                       	smpsPSGAlterVol     $07
00097059 8006                       	dc.b	nRst, $06
0009705B E100                       	smpsAlterNote       $00
0009705D 01                         	dc.b	$01
0009705E E104                       	smpsAlterNote       $04
00097060 01                         	dc.b	$01
00097061 E100                       	smpsAlterNote       $00
00097063 01                         	dc.b	$01
00097064 E1FA                       	smpsAlterNote       $FA
00097066 01                         	dc.b	$01
00097067 E1FD                       	smpsAlterNote       $FD
00097069 ECF5                       	smpsPSGAlterVol     $F5
0009706B 9206                       	dc.b	nF1, $06
0009706D EC04                       	smpsPSGAlterVol     $04
0009706F E701                       	dc.b	smpsNoAttack, $01
00097071 EC07                       	smpsPSGAlterVol     $07
00097073 8003                       	dc.b	nRst, $03
00097075 ECF5                       	smpsPSGAlterVol     $F5
00097077 9207                       	dc.b	nF1, $07
00097079 EC0B                       	smpsPSGAlterVol     $0B
0009707B 8006                       	dc.b	nRst, $06
0009707D E100                       	smpsAlterNote       $00
0009707F 01                         	dc.b	$01
00097080 E103                       	smpsAlterNote       $03
00097082 0101                       	dc.b	$01, $01
00097084 E1FD                       	smpsAlterNote       $FD
00097086 01                         	dc.b	$01
00097087 ECF5                       	smpsPSGAlterVol     $F5
00097089 9207                       	dc.b	nF1, $07
0009708B EC0B                       	smpsPSGAlterVol     $0B
0009708D 8004                       	dc.b	nRst, $04
0009708F ECF5                       	smpsPSGAlterVol     $F5
00097091 9206                       	dc.b	nF1, $06
00097093 EC0B                       	smpsPSGAlterVol     $0B
00097095 8007                       	dc.b	nRst, $07
00097097 E103                       	smpsAlterNote       $03
00097099 0101                       	dc.b	$01, $01
0009709B E100                       	smpsAlterNote       $00
0009709D 01                         	dc.b	$01
0009709E E1FA                       	smpsAlterNote       $FA
000970A0 01                         	dc.b	$01
000970A1 E1FD                       	smpsAlterNote       $FD
000970A3 ECF5                       	smpsPSGAlterVol     $F5
000970A5 9206                       	dc.b	nF1, $06
000970A7 EC04                       	smpsPSGAlterVol     $04
000970A9 E701                       	dc.b	smpsNoAttack, $01
000970AB EC07                       	smpsPSGAlterVol     $07
000970AD 8003                       	dc.b	nRst, $03
000970AF ECF5                       	smpsPSGAlterVol     $F5
000970B1 9206                       	dc.b	nF1, $06
000970B3 EC04                       	smpsPSGAlterVol     $04
000970B5 E701                       	dc.b	smpsNoAttack, $01
000970B7 EC07                       	smpsPSGAlterVol     $07
000970B9 8006                       	dc.b	nRst, $06
000970BB E100                       	smpsAlterNote       $00
000970BD 01                         	dc.b	$01
000970BE E104                       	smpsAlterNote       $04
000970C0 01                         	dc.b	$01
000970C1 E100                       	smpsAlterNote       $00
000970C3 01                         	dc.b	$01
000970C4 E1FD                       	smpsAlterNote       $FD
000970C6 01                         	dc.b	$01
000970C7 ECF5                       	smpsPSGAlterVol     $F5
000970C9 9206                       	dc.b	nF1, $06
000970CB EC04                       	smpsPSGAlterVol     $04
000970CD E701                       	dc.b	smpsNoAttack, $01
000970CF EC07                       	smpsPSGAlterVol     $07
000970D1 8003                       	dc.b	nRst, $03
000970D3 ECF5                       	smpsPSGAlterVol     $F5
000970D5 9207                       	dc.b	nF1, $07
000970D7 EC0B                       	smpsPSGAlterVol     $0B
000970D9 8007                       	dc.b	nRst, $07
000970DB E104                       	smpsAlterNote       $04
000970DD 0101                       	dc.b	$01, $01
000970DF E1FB                       	smpsAlterNote       $FB
000970E1 01                         	dc.b	$01
000970E2 E1F6                       	smpsAlterNote       $F6
000970E4 0101                       	dc.b	$01, $01
000970E6 E1FF                       	smpsAlterNote       $FF
000970E8 01                         	dc.b	$01
000970E9 E105                       	smpsAlterNote       $05
000970EB 01                         	dc.b	$01
000970EC E104                       	smpsAlterNote       $04
000970EE 01                         	dc.b	$01
000970EF E1FB                       	smpsAlterNote       $FB
000970F1 01                         	dc.b	$01
000970F2 E1F5                       	smpsAlterNote       $F5
000970F4 01                         	dc.b	$01
000970F5 E1FC                       	smpsAlterNote       $FC
000970F7 ECF5                       	smpsPSGAlterVol     $F5
000970F9 8B0E                       	dc.b	nBb0, $0E
000970FB E102                       	smpsAlterNote       $02
000970FD EC0B                       	smpsPSGAlterVol     $0B
000970FF 8001                       	dc.b	nRst, $01
00097101 E101                       	smpsAlterNote       $01
00097103 01                         	dc.b	$01
00097104 E1FC                       	smpsAlterNote       $FC
00097106 01                         	dc.b	$01
00097107 E1F9                       	smpsAlterNote       $F9
00097109 0101                       	dc.b	$01, $01
0009710B E1FF                       	smpsAlterNote       $FF
0009710D 01                         	dc.b	$01
0009710E E102                       	smpsAlterNote       $02
00097110 01                         	dc.b	$01
00097111 E1FF                       	smpsAlterNote       $FF
00097113 01                         	dc.b	$01
00097114 E1FC                       	smpsAlterNote       $FC
00097116 01                         	dc.b	$01
00097117 E1F8                       	smpsAlterNote       $F8
00097119 01                         	dc.b	$01
0009711A E1FC                       	smpsAlterNote       $FC
0009711C 01                         	dc.b	$01
0009711D E101                       	smpsAlterNote       $01
0009711F 01                         	dc.b	$01
00097120 E102                       	smpsAlterNote       $02
00097122 01                         	dc.b	$01
00097123 E1FF                       	smpsAlterNote       $FF
00097125 01                         	dc.b	$01
00097126 E1FB                       	smpsAlterNote       $FB
00097128 ECF5                       	smpsPSGAlterVol     $F5
0009712A 8D0D                       	dc.b	nC1, $0D
0009712C E101                       	smpsAlterNote       $01
0009712E EC0B                       	smpsPSGAlterVol     $0B
00097130 8001                       	dc.b	nRst, $01
00097132 E102                       	smpsAlterNote       $02
00097134 01                         	dc.b	$01
00097135 E1FF                       	smpsAlterNote       $FF
00097137 01                         	dc.b	$01
00097138 E1F9                       	smpsAlterNote       $F9
0009713A 0101                       	dc.b	$01, $01
0009713C E1FC                       	smpsAlterNote       $FC
0009713E 01                         	dc.b	$01
0009713F E101                       	smpsAlterNote       $01
00097141 0101                       	dc.b	$01, $01
00097143 E1FC                       	smpsAlterNote       $FC
00097145 01                         	dc.b	$01
00097146 E1F9                       	smpsAlterNote       $F9
00097148 0101                       	dc.b	$01, $01
0009714A E1FF                       	smpsAlterNote       $FF
0009714C 01                         	dc.b	$01
0009714D E102                       	smpsAlterNote       $02
0009714F 01                         	dc.b	$01
00097150 E101                       	smpsAlterNote       $01
00097152 01                         	dc.b	$01
00097153 E1FC                       	smpsAlterNote       $FC
00097155 ECF5                       	smpsPSGAlterVol     $F5
00097157 8F0D                       	dc.b	nD1, $0D
00097159 E1FF                       	smpsAlterNote       $FF
0009715B EC04                       	smpsPSGAlterVol     $04
0009715D E701                       	dc.b	smpsNoAttack, $01
0009715F EC07                       	smpsPSGAlterVol     $07
00097161 E103                       	smpsAlterNote       $03
00097163 8001                       	dc.b	nRst, $01
00097165 E102                       	smpsAlterNote       $02
00097167 01                         	dc.b	$01
00097168 E1FD                       	smpsAlterNote       $FD
0009716A 01                         	dc.b	$01
0009716B E1F9                       	smpsAlterNote       $F9
0009716D 01                         	dc.b	$01
0009716E E1FD                       	smpsAlterNote       $FD
00097170 01                         	dc.b	$01
00097171 E100                       	smpsAlterNote       $00
00097173 01                         	dc.b	$01
00097174 E103                       	smpsAlterNote       $03
00097176 01                         	dc.b	$01
00097177 E100                       	smpsAlterNote       $00
00097179 01                         	dc.b	$01
0009717A E1FA                       	smpsAlterNote       $FA
0009717C 01                         	dc.b	$01
0009717D E1F9                       	smpsAlterNote       $F9
0009717F 01                         	dc.b	$01
00097180 E1FD                       	smpsAlterNote       $FD
00097182 01                         	dc.b	$01
00097183 E102                       	smpsAlterNote       $02
00097185 0101                       	dc.b	$01, $01
00097187 E100                       	smpsAlterNote       $00
00097189 01                         	dc.b	$01
0009718A E1FD                       	smpsAlterNote       $FD
0009718C ECF5                       	smpsPSGAlterVol     $F5
0009718E 910D                       	dc.b	nE1, $0D
00097190 E103                       	smpsAlterNote       $03
00097192 EC0B                       	smpsPSGAlterVol     $0B
00097194 8001 01                    	dc.b	nRst, $01, $01
00097197 E100                       	smpsAlterNote       $00
00097199 01                         	dc.b	$01
0009719A E1FA                       	smpsAlterNote       $FA
0009719C 0101                       	dc.b	$01, $01
0009719E E100                       	smpsAlterNote       $00
000971A0 01                         	dc.b	$01
000971A1 E103                       	smpsAlterNote       $03
000971A3 01                         	dc.b	$01
000971A4 E1FD                       	smpsAlterNote       $FD
000971A6 ECF5                       	smpsPSGAlterVol     $F5
000971A8 9206                       	dc.b	nF1, $06
000971AA EC04                       	smpsPSGAlterVol     $04
000971AC E701                       	dc.b	smpsNoAttack, $01
000971AE EC07                       	smpsPSGAlterVol     $07
000971B0 8003                       	dc.b	nRst, $03
000971B2 ECF5                       	smpsPSGAlterVol     $F5
000971B4 9207                       	dc.b	nF1, $07
000971B6 EC0B                       	smpsPSGAlterVol     $0B
000971B8 8006                       	dc.b	nRst, $06
000971BA E100                       	smpsAlterNote       $00
000971BC 01                         	dc.b	$01
000971BD E103                       	smpsAlterNote       $03
000971BF 0101                       	dc.b	$01, $01
000971C1 E1FD                       	smpsAlterNote       $FD
000971C3 01                         	dc.b	$01
000971C4 ECF5                       	smpsPSGAlterVol     $F5
000971C6 9407                       	dc.b	nG1, $07
000971C8 EC0B                       	smpsPSGAlterVol     $0B
000971CA 8004                       	dc.b	nRst, $04
000971CC ECF5                       	smpsPSGAlterVol     $F5
000971CE 9406                       	dc.b	nG1, $06
000971D0 EC04                       	smpsPSGAlterVol     $04
000971D2 E701                       	dc.b	smpsNoAttack, $01
000971D4 EC07                       	smpsPSGAlterVol     $07
000971D6 8006                       	dc.b	nRst, $06
000971D8 E103                       	smpsAlterNote       $03
000971DA 01                         	dc.b	$01
000971DB E104                       	smpsAlterNote       $04
000971DD 01                         	dc.b	$01
000971DE E100                       	smpsAlterNote       $00
000971E0 01                         	dc.b	$01
000971E1 E1F9                       	smpsAlterNote       $F9
000971E3 01                         	dc.b	$01
000971E4 E1FD                       	smpsAlterNote       $FD
000971E6 ECF5                       	smpsPSGAlterVol     $F5
000971E8 9206                       	dc.b	nF1, $06
000971EA EC04                       	smpsPSGAlterVol     $04
000971EC E701                       	dc.b	smpsNoAttack, $01
000971EE EC07                       	smpsPSGAlterVol     $07
000971F0 8003                       	dc.b	nRst, $03
000971F2 ECF5                       	smpsPSGAlterVol     $F5
000971F4 9206                       	dc.b	nF1, $06
000971F6 EC04                       	smpsPSGAlterVol     $04
000971F8 E701                       	dc.b	smpsNoAttack, $01
000971FA EC07                       	smpsPSGAlterVol     $07
000971FC 8006                       	dc.b	nRst, $06
000971FE E100                       	smpsAlterNote       $00
00097200 01                         	dc.b	$01
00097201 E104                       	smpsAlterNote       $04
00097203 01                         	dc.b	$01
00097204 E103                       	smpsAlterNote       $03
00097206 01                         	dc.b	$01
00097207 E1FD                       	smpsAlterNote       $FD
00097209 01                         	dc.b	$01
0009720A ECF5                       	smpsPSGAlterVol     $F5
0009720C 9407                       	dc.b	nG1, $07
0009720E EC0B                       	smpsPSGAlterVol     $0B
00097210 8004                       	dc.b	nRst, $04
00097212 ECF5                       	smpsPSGAlterVol     $F5
00097214 9406                       	dc.b	nG1, $06
00097216 EC0B                       	smpsPSGAlterVol     $0B
00097218 8007                       	dc.b	nRst, $07
0009721A E103                       	smpsAlterNote       $03
0009721C 0101                       	dc.b	$01, $01
0009721E E100                       	smpsAlterNote       $00
00097220 01                         	dc.b	$01
00097221 E1F9                       	smpsAlterNote       $F9
00097223 01                         	dc.b	$01
00097224 E1FD                       	smpsAlterNote       $FD
00097226 ECF5                       	smpsPSGAlterVol     $F5
00097228 9206                       	dc.b	nF1, $06
0009722A EC04                       	smpsPSGAlterVol     $04
0009722C E701                       	dc.b	smpsNoAttack, $01
0009722E EC07                       	smpsPSGAlterVol     $07
00097230 8003                       	dc.b	nRst, $03
00097232 ECF5                       	smpsPSGAlterVol     $F5
00097234 9206                       	dc.b	nF1, $06
00097236 EC04                       	smpsPSGAlterVol     $04
00097238 E701                       	dc.b	smpsNoAttack, $01
0009723A EC07                       	smpsPSGAlterVol     $07
0009723C 8006                       	dc.b	nRst, $06
0009723E E100                       	smpsAlterNote       $00
00097240 01                         	dc.b	$01
00097241 E104                       	smpsAlterNote       $04
00097243 01                         	dc.b	$01
00097244 E100                       	smpsAlterNote       $00
00097246 01                         	dc.b	$01
00097247 E1FB                       	smpsAlterNote       $FB
00097249 01                         	dc.b	$01
0009724A E1FD                       	smpsAlterNote       $FD
0009724C ECF5                       	smpsPSGAlterVol     $F5
0009724E 9406                       	dc.b	nG1, $06
00097250 EC04                       	smpsPSGAlterVol     $04
00097252 E701                       	dc.b	smpsNoAttack, $01
00097254 EC07                       	smpsPSGAlterVol     $07
00097256 8003                       	dc.b	nRst, $03
00097258 ECF5                       	smpsPSGAlterVol     $F5
0009725A 9407                       	dc.b	nG1, $07
0009725C EC0B                       	smpsPSGAlterVol     $0B
0009725E 8006                       	dc.b	nRst, $06
00097260 E100                       	smpsAlterNote       $00
00097262 01                         	dc.b	$01
00097263 E103                       	smpsAlterNote       $03
00097265 0101                       	dc.b	$01, $01
00097267 E1FD                       	smpsAlterNote       $FD
00097269 01                         	dc.b	$01
0009726A ECF5                       	smpsPSGAlterVol     $F5
0009726C 9207                       	dc.b	nF1, $07
0009726E EC0B                       	smpsPSGAlterVol     $0B
00097270 8004                       	dc.b	nRst, $04
00097272 ECF5                       	smpsPSGAlterVol     $F5
00097274 9206                       	dc.b	nF1, $06
00097276 EC04                       	smpsPSGAlterVol     $04
00097278 E701                       	dc.b	smpsNoAttack, $01
0009727A ECFC                       	smpsPSGAlterVol     $FC
0009727C E1FC                       	smpsAlterNote       $FC
0009727E 9006 8B03                  	dc.b	nEb1, $06, nBb0, $03
00097282 EC04                       	smpsPSGAlterVol     $04
00097284 E701                       	dc.b	smpsNoAttack, $01
00097286 ECFC                       	smpsPSGAlterVol     $FC
00097288 9003                       	dc.b	nEb1, $03
0009728A E1FD                       	smpsAlterNote       $FD
0009728C 9403                       	dc.b	nG1, $03
0009728E EC04                       	smpsPSGAlterVol     $04
00097290 E701                       	dc.b	smpsNoAttack, $01
00097292 E1FE                       	smpsAlterNote       $FE
00097294 ECFC                       	smpsPSGAlterVol     $FC
00097296 9703 9703                  	dc.b	nBb1, $03, nBb1, $03
0009729A EC04                       	smpsPSGAlterVol     $04
0009729C E701                       	dc.b	smpsNoAttack, $01
0009729E EC07                       	smpsPSGAlterVol     $07
000972A0 8009                       	dc.b	nRst, $09
000972A2 E100                       	smpsAlterNote       $00
000972A4 01                         	dc.b	$01
000972A5 F6F5 19                    	smpsJump            music84_Jump07
000972A8                            
000972A8                            ; PSG2 Data
000972A8                            music84_PSG2:
000972A8 E1FC                       	smpsAlterNote       $FC
000972AA EC04                       	smpsPSGAlterVol     $04
000972AC 8F03                       	dc.b	nD1, $03
000972AE E1FD                       	smpsAlterNote       $FD
000972B0 9203                       	dc.b	nF1, $03
000972B2 EC04                       	smpsPSGAlterVol     $04
000972B4 E701                       	dc.b	smpsNoAttack, $01
000972B6 E1FE                       	smpsAlterNote       $FE
000972B8 ECFC                       	smpsPSGAlterVol     $FC
000972BA 9603                       	dc.b	nA1, $03
000972BC E1FD                       	smpsAlterNote       $FD
000972BE 9103                       	dc.b	nE1, $03
000972C0 EC04                       	smpsPSGAlterVol     $04
000972C2 E701                       	dc.b	smpsNoAttack, $01
000972C4 ECFC                       	smpsPSGAlterVol     $FC
000972C6 9403                       	dc.b	nG1, $03
000972C8 E1FE                       	smpsAlterNote       $FE
000972CA 9703                       	dc.b	nBb1, $03
000972CC EC04                       	smpsPSGAlterVol     $04
000972CE E701                       	dc.b	smpsNoAttack, $01
000972D0 E1FF                       	smpsAlterNote       $FF
000972D2 ECFC                       	smpsPSGAlterVol     $FC
000972D4 9B02                       	dc.b	nD2, $02
000972D6 EC04                       	smpsPSGAlterVol     $04
000972D8 E701                       	dc.b	smpsNoAttack, $01
000972DA ECFC                       	smpsPSGAlterVol     $FC
000972DC E1FE                       	smpsAlterNote       $FE
000972DE 9A03                       	dc.b	nCs2, $03
000972E0 EC0B                       	smpsPSGAlterVol     $0B
000972E2 800A                       	dc.b	nRst, $0A
000972E4 E102                       	smpsAlterNote       $02
000972E6 01                         	dc.b	$01
000972E7 E10A                       	smpsAlterNote       $0A
000972E9 01                         	dc.b	$01
000972EA E102                       	smpsAlterNote       $02
000972EC 01                         	dc.b	$01
000972ED E1FC                       	smpsAlterNote       $FC
000972EF 01                         	dc.b	$01
000972F0 E10A                       	smpsAlterNote       $0A
000972F2 01                         	dc.b	$01
000972F3 E1FC                       	smpsAlterNote       $FC
000972F5 01                         	dc.b	$01
000972F6 E108                       	smpsAlterNote       $08
000972F8 01                         	dc.b	$01
000972F9 E10A                       	smpsAlterNote       $0A
000972FB 01                         	dc.b	$01
000972FC E102                       	smpsAlterNote       $02
000972FE 01                         	dc.b	$01
000972FF E1F7                       	smpsAlterNote       $F7
00097301 0101                       	dc.b	$01, $01
00097303 E102                       	smpsAlterNote       $02
00097305 01                         	dc.b	$01
00097306 E108                       	smpsAlterNote       $08
00097308 0101                       	dc.b	$01, $01
0009730A E1FC                       	smpsAlterNote       $FC
0009730C 01                         	dc.b	$01
0009730D E10A                       	smpsAlterNote       $0A
0009730F 01                         	dc.b	$01
00097310 E1F7                       	smpsAlterNote       $F7
00097312 01                         	dc.b	$01
00097313 E102                       	smpsAlterNote       $02
00097315 01                         	dc.b	$01
00097316 E10A                       	smpsAlterNote       $0A
00097318 01                         	dc.b	$01
00097319 E102                       	smpsAlterNote       $02
0009731B 01                         	dc.b	$01
0009731C E1FC                       	smpsAlterNote       $FC
0009731E 01                         	dc.b	$01
0009731F                            
0009731F                            music84_Jump06:
0009731F E10A                       	smpsAlterNote       $0A
00097321 8001                       	dc.b	nRst, $01
00097323 E1FC                       	smpsAlterNote       $FC
00097325 01                         	dc.b	$01
00097326 E108                       	smpsAlterNote       $08
00097328 01                         	dc.b	$01
00097329 E10A                       	smpsAlterNote       $0A
0009732B 01                         	dc.b	$01
0009732C E1FC                       	smpsAlterNote       $FC
0009732E ECF5                       	smpsPSGAlterVol     $F5
00097330 8F06                       	dc.b	nD1, $06
00097332 EC04                       	smpsPSGAlterVol     $04
00097334 E701                       	dc.b	smpsNoAttack, $01
00097336 EC07                       	smpsPSGAlterVol     $07
00097338 8003                       	dc.b	nRst, $03
0009733A ECF5                       	smpsPSGAlterVol     $F5
0009733C 8F06                       	dc.b	nD1, $06
0009733E EC04                       	smpsPSGAlterVol     $04
00097340 E701                       	dc.b	smpsNoAttack, $01
00097342 EC07                       	smpsPSGAlterVol     $07
00097344 8006                       	dc.b	nRst, $06
00097346 E1FF                       	smpsAlterNote       $FF
00097348 01                         	dc.b	$01
00097349 E102                       	smpsAlterNote       $02
0009734B 01                         	dc.b	$01
0009734C E1FF                       	smpsAlterNote       $FF
0009734E 01                         	dc.b	$01
0009734F E1F9                       	smpsAlterNote       $F9
00097351 01                         	dc.b	$01
00097352 E1FC                       	smpsAlterNote       $FC
00097354 ECF5                       	smpsPSGAlterVol     $F5
00097356 9006                       	dc.b	nEb1, $06
00097358 EC04                       	smpsPSGAlterVol     $04
0009735A E701                       	dc.b	smpsNoAttack, $01
0009735C EC07                       	smpsPSGAlterVol     $07
0009735E 8003                       	dc.b	nRst, $03
00097360 ECF5                       	smpsPSGAlterVol     $F5
00097362 9007                       	dc.b	nEb1, $07
00097364 EC0B                       	smpsPSGAlterVol     $0B
00097366 8006                       	dc.b	nRst, $06
00097368 E1FF                       	smpsAlterNote       $FF
0009736A 01                         	dc.b	$01
0009736B E103                       	smpsAlterNote       $03
0009736D 0101                       	dc.b	$01, $01
0009736F E1FC                       	smpsAlterNote       $FC
00097371 01                         	dc.b	$01
00097372 ECF5                       	smpsPSGAlterVol     $F5
00097374 8F07                       	dc.b	nD1, $07
00097376 EC0B                       	smpsPSGAlterVol     $0B
00097378 8004                       	dc.b	nRst, $04
0009737A ECF5                       	smpsPSGAlterVol     $F5
0009737C 8F06                       	dc.b	nD1, $06
0009737E EC04                       	smpsPSGAlterVol     $04
00097380 E701                       	dc.b	smpsNoAttack, $01
00097382 EC07                       	smpsPSGAlterVol     $07
00097384 8006                       	dc.b	nRst, $06
00097386 E102                       	smpsAlterNote       $02
00097388 01                         	dc.b	$01
00097389 E103                       	smpsAlterNote       $03
0009738B 01                         	dc.b	$01
0009738C E1FF                       	smpsAlterNote       $FF
0009738E 01                         	dc.b	$01
0009738F E1F9                       	smpsAlterNote       $F9
00097391 01                         	dc.b	$01
00097392 E1FC                       	smpsAlterNote       $FC
00097394 ECF5                       	smpsPSGAlterVol     $F5
00097396 8F06                       	dc.b	nD1, $06
00097398 EC04                       	smpsPSGAlterVol     $04
0009739A E701                       	dc.b	smpsNoAttack, $01
0009739C EC07                       	smpsPSGAlterVol     $07
0009739E 8003                       	dc.b	nRst, $03
000973A0 ECF5                       	smpsPSGAlterVol     $F5
000973A2 8F06                       	dc.b	nD1, $06
000973A4 EC04                       	smpsPSGAlterVol     $04
000973A6 E701                       	dc.b	smpsNoAttack, $01
000973A8 EC07                       	smpsPSGAlterVol     $07
000973AA 8006                       	dc.b	nRst, $06
000973AC E1FF                       	smpsAlterNote       $FF
000973AE 01                         	dc.b	$01
000973AF E103                       	smpsAlterNote       $03
000973B1 01                         	dc.b	$01
000973B2 E1FF                       	smpsAlterNote       $FF
000973B4 01                         	dc.b	$01
000973B5 E1FC                       	smpsAlterNote       $FC
000973B7 01                         	dc.b	$01
000973B8 ECF5                       	smpsPSGAlterVol     $F5
000973BA 8F06                       	dc.b	nD1, $06
000973BC EC04                       	smpsPSGAlterVol     $04
000973BE E701                       	dc.b	smpsNoAttack, $01
000973C0 EC07                       	smpsPSGAlterVol     $07
000973C2 8003                       	dc.b	nRst, $03
000973C4 ECF5                       	smpsPSGAlterVol     $F5
000973C6 8F07                       	dc.b	nD1, $07
000973C8 EC0B                       	smpsPSGAlterVol     $0B
000973CA 8007                       	dc.b	nRst, $07
000973CC E101                       	smpsAlterNote       $01
000973CE 0101                       	dc.b	$01, $01
000973D0 E1FC                       	smpsAlterNote       $FC
000973D2 01                         	dc.b	$01
000973D3 E1F9                       	smpsAlterNote       $F9
000973D5 01                         	dc.b	$01
000973D6 E1FC                       	smpsAlterNote       $FC
000973D8 ECF5                       	smpsPSGAlterVol     $F5
000973DA 9006                       	dc.b	nEb1, $06
000973DC EC0B                       	smpsPSGAlterVol     $0B
000973DE 8004                       	dc.b	nRst, $04
000973E0 ECF5                       	smpsPSGAlterVol     $F5
000973E2 9006                       	dc.b	nEb1, $06
000973E4 EC04                       	smpsPSGAlterVol     $04
000973E6 E701                       	dc.b	smpsNoAttack, $01
000973E8 EC07                       	smpsPSGAlterVol     $07
000973EA 8006                       	dc.b	nRst, $06
000973EC E100                       	smpsAlterNote       $00
000973EE 01                         	dc.b	$01
000973EF E102                       	smpsAlterNote       $02
000973F1 01                         	dc.b	$01
000973F2 E100                       	smpsAlterNote       $00
000973F4 01                         	dc.b	$01
000973F5 E1FD                       	smpsAlterNote       $FD
000973F7 01                         	dc.b	$01
000973F8 E1FF                       	smpsAlterNote       $FF
000973FA ECF5                       	smpsPSGAlterVol     $F5
000973FC 9B06                       	dc.b	nD2, $06
000973FE EC04                       	smpsPSGAlterVol     $04
00097400 E701                       	dc.b	smpsNoAttack, $01
00097402 EC07                       	smpsPSGAlterVol     $07
00097404 8003                       	dc.b	nRst, $03
00097406 ECF5                       	smpsPSGAlterVol     $F5
00097408 9B07                       	dc.b	nD2, $07
0009740A EC0B                       	smpsPSGAlterVol     $0B
0009740C 8006                       	dc.b	nRst, $06
0009740E E102                       	smpsAlterNote       $02
00097410 01                         	dc.b	$01
00097411 E106                       	smpsAlterNote       $06
00097413 01                         	dc.b	$01
00097414 E105                       	smpsAlterNote       $05
00097416 01                         	dc.b	$01
00097417 E1FF                       	smpsAlterNote       $FF
00097419 01                         	dc.b	$01
0009741A ECF5                       	smpsPSGAlterVol     $F5
0009741C 9B07                       	dc.b	nD2, $07
0009741E EC0B                       	smpsPSGAlterVol     $0B
00097420 8004                       	dc.b	nRst, $04
00097422 ECF5                       	smpsPSGAlterVol     $F5
00097424 9B06                       	dc.b	nD2, $06
00097426 EC0B                       	smpsPSGAlterVol     $0B
00097428 8007                       	dc.b	nRst, $07
0009742A E105                       	smpsAlterNote       $05
0009742C 0101                       	dc.b	$01, $01
0009742E E102                       	smpsAlterNote       $02
00097430 01                         	dc.b	$01
00097431 E1FC                       	smpsAlterNote       $FC
00097433 01                         	dc.b	$01
00097434 E1FF                       	smpsAlterNote       $FF
00097436 ECF5                       	smpsPSGAlterVol     $F5
00097438 9B06                       	dc.b	nD2, $06
0009743A EC04                       	smpsPSGAlterVol     $04
0009743C E701                       	dc.b	smpsNoAttack, $01
0009743E EC07                       	smpsPSGAlterVol     $07
00097440 8003                       	dc.b	nRst, $03
00097442 ECF5                       	smpsPSGAlterVol     $F5
00097444 9B06                       	dc.b	nD2, $06
00097446 EC04                       	smpsPSGAlterVol     $04
00097448 E701                       	dc.b	smpsNoAttack, $01
0009744A EC07                       	smpsPSGAlterVol     $07
0009744C 8006                       	dc.b	nRst, $06
0009744E E102                       	smpsAlterNote       $02
00097450 01                         	dc.b	$01
00097451 E106                       	smpsAlterNote       $06
00097453 01                         	dc.b	$01
00097454 E102                       	smpsAlterNote       $02
00097456 01                         	dc.b	$01
00097457 E1FF                       	smpsAlterNote       $FF
00097459 01                         	dc.b	$01
0009745A ECF5                       	smpsPSGAlterVol     $F5
0009745C 9B06                       	dc.b	nD2, $06
0009745E EC04                       	smpsPSGAlterVol     $04
00097460 E701                       	dc.b	smpsNoAttack, $01
00097462 EC07                       	smpsPSGAlterVol     $07
00097464 8003                       	dc.b	nRst, $03
00097466 ECF5                       	smpsPSGAlterVol     $F5
00097468 9B07                       	dc.b	nD2, $07
0009746A EC0B                       	smpsPSGAlterVol     $0B
0009746C 8007                       	dc.b	nRst, $07
0009746E E105                       	smpsAlterNote       $05
00097470 0101                       	dc.b	$01, $01
00097472 E1FF                       	smpsAlterNote       $FF
00097474 01                         	dc.b	$01
00097475 E1FC                       	smpsAlterNote       $FC
00097477 01                         	dc.b	$01
00097478 E1FF                       	smpsAlterNote       $FF
0009747A ECF5                       	smpsPSGAlterVol     $F5
0009747C 9B06                       	dc.b	nD2, $06
0009747E EC0B                       	smpsPSGAlterVol     $0B
00097480 8004                       	dc.b	nRst, $04
00097482 ECF5                       	smpsPSGAlterVol     $F5
00097484 9B06                       	dc.b	nD2, $06
00097486 EC04                       	smpsPSGAlterVol     $04
00097488 E701                       	dc.b	smpsNoAttack, $01
0009748A EC07                       	smpsPSGAlterVol     $07
0009748C 8006                       	dc.b	nRst, $06
0009748E E105                       	smpsAlterNote       $05
00097490 01                         	dc.b	$01
00097491 E106                       	smpsAlterNote       $06
00097493 01                         	dc.b	$01
00097494 E102                       	smpsAlterNote       $02
00097496 01                         	dc.b	$01
00097497 E1FC                       	smpsAlterNote       $FC
00097499 01                         	dc.b	$01
0009749A E1FF                       	smpsAlterNote       $FF
0009749C ECF5                       	smpsPSGAlterVol     $F5
0009749E 9B06                       	dc.b	nD2, $06
000974A0 EC04                       	smpsPSGAlterVol     $04
000974A2 E701                       	dc.b	smpsNoAttack, $01
000974A4 EC07                       	smpsPSGAlterVol     $07
000974A6 8003                       	dc.b	nRst, $03
000974A8 ECF5                       	smpsPSGAlterVol     $F5
000974AA 9B06                       	dc.b	nD2, $06
000974AC EC04                       	smpsPSGAlterVol     $04
000974AE E701                       	dc.b	smpsNoAttack, $01
000974B0 EC07                       	smpsPSGAlterVol     $07
000974B2 8006                       	dc.b	nRst, $06
000974B4 E102                       	smpsAlterNote       $02
000974B6 01                         	dc.b	$01
000974B7 E106                       	smpsAlterNote       $06
000974B9 01                         	dc.b	$01
000974BA E105                       	smpsAlterNote       $05
000974BC 01                         	dc.b	$01
000974BD E1FF                       	smpsAlterNote       $FF
000974BF 01                         	dc.b	$01
000974C0 ECF5                       	smpsPSGAlterVol     $F5
000974C2 9B07                       	dc.b	nD2, $07
000974C4 EC0B                       	smpsPSGAlterVol     $0B
000974C6 8004                       	dc.b	nRst, $04
000974C8 ECF5                       	smpsPSGAlterVol     $F5
000974CA 9B06                       	dc.b	nD2, $06
000974CC EC0B                       	smpsPSGAlterVol     $0B
000974CE 8007                       	dc.b	nRst, $07
000974D0 E105                       	smpsAlterNote       $05
000974D2 0101                       	dc.b	$01, $01
000974D4 E102                       	smpsAlterNote       $02
000974D6 01                         	dc.b	$01
000974D7 E1FC                       	smpsAlterNote       $FC
000974D9 01                         	dc.b	$01
000974DA E1FF                       	smpsAlterNote       $FF
000974DC ECF5                       	smpsPSGAlterVol     $F5
000974DE 9B06                       	dc.b	nD2, $06
000974E0 EC04                       	smpsPSGAlterVol     $04
000974E2 E701                       	dc.b	smpsNoAttack, $01
000974E4 EC07                       	smpsPSGAlterVol     $07
000974E6 8003                       	dc.b	nRst, $03
000974E8 ECF5                       	smpsPSGAlterVol     $F5
000974EA 9B06                       	dc.b	nD2, $06
000974EC EC04                       	smpsPSGAlterVol     $04
000974EE E701                       	dc.b	smpsNoAttack, $01
000974F0 EC07                       	smpsPSGAlterVol     $07
000974F2 8006                       	dc.b	nRst, $06
000974F4 E102                       	smpsAlterNote       $02
000974F6 01                         	dc.b	$01
000974F7 E106                       	smpsAlterNote       $06
000974F9 01                         	dc.b	$01
000974FA E102                       	smpsAlterNote       $02
000974FC 01                         	dc.b	$01
000974FD E1FF                       	smpsAlterNote       $FF
000974FF 01                         	dc.b	$01
00097500 ECF5                       	smpsPSGAlterVol     $F5
00097502 9B06                       	dc.b	nD2, $06
00097504 EC04                       	smpsPSGAlterVol     $04
00097506 E701                       	dc.b	smpsNoAttack, $01
00097508 EC07                       	smpsPSGAlterVol     $07
0009750A 8003                       	dc.b	nRst, $03
0009750C ECF5                       	smpsPSGAlterVol     $F5
0009750E 9B07                       	dc.b	nD2, $07
00097510 E1FE                       	smpsAlterNote       $FE
00097512 9706                       	dc.b	nBb1, $06
00097514 EC04                       	smpsPSGAlterVol     $04
00097516 E701                       	dc.b	smpsNoAttack, $01
00097518 ECFC                       	smpsPSGAlterVol     $FC
0009751A 9703                       	dc.b	nBb1, $03
0009751C EC04                       	smpsPSGAlterVol     $04
0009751E E701                       	dc.b	smpsNoAttack, $01
00097520 ECFC                       	smpsPSGAlterVol     $FC
00097522 9702                       	dc.b	nBb1, $02
00097524 EC04                       	smpsPSGAlterVol     $04
00097526 E701                       	dc.b	smpsNoAttack, $01
00097528 ECFC                       	smpsPSGAlterVol     $FC
0009752A 9606                       	dc.b	nA1, $06
0009752C EC04                       	smpsPSGAlterVol     $04
0009752E E701                       	dc.b	smpsNoAttack, $01
00097530 EC07                       	smpsPSGAlterVol     $07
00097532 8006                       	dc.b	nRst, $06
00097534 E101                       	smpsAlterNote       $01
00097536 01                         	dc.b	$01
00097537 E107                       	smpsAlterNote       $07
00097539 01                         	dc.b	$01
0009753A E101                       	smpsAlterNote       $01
0009753C 01                         	dc.b	$01
0009753D E1F8                       	smpsAlterNote       $F8
0009753F 01                         	dc.b	$01
00097540 E1F7                       	smpsAlterNote       $F7
00097542 01                         	dc.b	$01
00097543 E1FC                       	smpsAlterNote       $FC
00097545 01                         	dc.b	$01
00097546 E106                       	smpsAlterNote       $06
00097548 01                         	dc.b	$01
00097549 E107                       	smpsAlterNote       $07
0009754B 01                         	dc.b	$01
0009754C E101                       	smpsAlterNote       $01
0009754E 01                         	dc.b	$01
0009754F E1F8                       	smpsAlterNote       $F8
00097551 0101                       	dc.b	$01, $01
00097553 E1FC                       	smpsAlterNote       $FC
00097555 ECF5                       	smpsPSGAlterVol     $F5
00097557 8F06                       	dc.b	nD1, $06
00097559 EC04                       	smpsPSGAlterVol     $04
0009755B E701                       	dc.b	smpsNoAttack, $01
0009755D EC07                       	smpsPSGAlterVol     $07
0009755F 8003                       	dc.b	nRst, $03
00097561 ECF5                       	smpsPSGAlterVol     $F5
00097563 8F06                       	dc.b	nD1, $06
00097565 EC04                       	smpsPSGAlterVol     $04
00097567 E701                       	dc.b	smpsNoAttack, $01
00097569 EC07                       	smpsPSGAlterVol     $07
0009756B 8006                       	dc.b	nRst, $06
0009756D E1FF                       	smpsAlterNote       $FF
0009756F 01                         	dc.b	$01
00097570 E102                       	smpsAlterNote       $02
00097572 01                         	dc.b	$01
00097573 E101                       	smpsAlterNote       $01
00097575 01                         	dc.b	$01
00097576 E1FC                       	smpsAlterNote       $FC
00097578 01                         	dc.b	$01
00097579 ECF5                       	smpsPSGAlterVol     $F5
0009757B 9007                       	dc.b	nEb1, $07
0009757D EC0B                       	smpsPSGAlterVol     $0B
0009757F 8004                       	dc.b	nRst, $04
00097581 ECF5                       	smpsPSGAlterVol     $F5
00097583 9006                       	dc.b	nEb1, $06
00097585 EC0B                       	smpsPSGAlterVol     $0B
00097587 8007                       	dc.b	nRst, $07
00097589 E103                       	smpsAlterNote       $03
0009758B 0101                       	dc.b	$01, $01
0009758D E1FC                       	smpsAlterNote       $FC
0009758F 01                         	dc.b	$01
00097590 E1F9                       	smpsAlterNote       $F9
00097592 01                         	dc.b	$01
00097593 E1FC                       	smpsAlterNote       $FC
00097595 ECF5                       	smpsPSGAlterVol     $F5
00097597 8F06                       	dc.b	nD1, $06
00097599 EC04                       	smpsPSGAlterVol     $04
0009759B E701                       	dc.b	smpsNoAttack, $01
0009759D EC07                       	smpsPSGAlterVol     $07
0009759F 8003                       	dc.b	nRst, $03
000975A1 ECF5                       	smpsPSGAlterVol     $F5
000975A3 8F06                       	dc.b	nD1, $06
000975A5 EC04                       	smpsPSGAlterVol     $04
000975A7 E701                       	dc.b	smpsNoAttack, $01
000975A9 EC07                       	smpsPSGAlterVol     $07
000975AB 8006                       	dc.b	nRst, $06
000975AD E1FF                       	smpsAlterNote       $FF
000975AF 01                         	dc.b	$01
000975B0 E103                       	smpsAlterNote       $03
000975B2 01                         	dc.b	$01
000975B3 E1FF                       	smpsAlterNote       $FF
000975B5 01                         	dc.b	$01
000975B6 E1F9                       	smpsAlterNote       $F9
000975B8 01                         	dc.b	$01
000975B9 E1FC                       	smpsAlterNote       $FC
000975BB ECF5                       	smpsPSGAlterVol     $F5
000975BD 8F06                       	dc.b	nD1, $06
000975BF EC04                       	smpsPSGAlterVol     $04
000975C1 E701                       	dc.b	smpsNoAttack, $01
000975C3 EC07                       	smpsPSGAlterVol     $07
000975C5 8003                       	dc.b	nRst, $03
000975C7 ECF5                       	smpsPSGAlterVol     $F5
000975C9 8F07                       	dc.b	nD1, $07
000975CB EC0B                       	smpsPSGAlterVol     $0B
000975CD 8006                       	dc.b	nRst, $06
000975CF E1FF                       	smpsAlterNote       $FF
000975D1 01                         	dc.b	$01
000975D2 E102                       	smpsAlterNote       $02
000975D4 0101                       	dc.b	$01, $01
000975D6 E1FC                       	smpsAlterNote       $FC
000975D8 01                         	dc.b	$01
000975D9 ECF5                       	smpsPSGAlterVol     $F5
000975DB 8F07                       	dc.b	nD1, $07
000975DD EC0B                       	smpsPSGAlterVol     $0B
000975DF 8004                       	dc.b	nRst, $04
000975E1 ECF5                       	smpsPSGAlterVol     $F5
000975E3 8F06                       	dc.b	nD1, $06
000975E5 EC04                       	smpsPSGAlterVol     $04
000975E7 E701                       	dc.b	smpsNoAttack, $01
000975E9 EC07                       	smpsPSGAlterVol     $07
000975EB 8006                       	dc.b	nRst, $06
000975ED E101                       	smpsAlterNote       $01
000975EF 01                         	dc.b	$01
000975F0 E102                       	smpsAlterNote       $02
000975F2 01                         	dc.b	$01
000975F3 E1FF                       	smpsAlterNote       $FF
000975F5 01                         	dc.b	$01
000975F6 E1F9                       	smpsAlterNote       $F9
000975F8 01                         	dc.b	$01
000975F9 E1FC                       	smpsAlterNote       $FC
000975FB ECF5                       	smpsPSGAlterVol     $F5
000975FD 9006                       	dc.b	nEb1, $06
000975FF EC04                       	smpsPSGAlterVol     $04
00097601 E701                       	dc.b	smpsNoAttack, $01
00097603 EC07                       	smpsPSGAlterVol     $07
00097605 8003                       	dc.b	nRst, $03
00097607 ECF5                       	smpsPSGAlterVol     $F5
00097609 9006                       	dc.b	nEb1, $06
0009760B EC04                       	smpsPSGAlterVol     $04
0009760D E701                       	dc.b	smpsNoAttack, $01
0009760F EC07                       	smpsPSGAlterVol     $07
00097611 8006                       	dc.b	nRst, $06
00097613 E100                       	smpsAlterNote       $00
00097615 01                         	dc.b	$01
00097616 E102                       	smpsAlterNote       $02
00097618 01                         	dc.b	$01
00097619 E100                       	smpsAlterNote       $00
0009761B 01                         	dc.b	$01
0009761C E1FF                       	smpsAlterNote       $FF
0009761E 01                         	dc.b	$01
0009761F ECF5                       	smpsPSGAlterVol     $F5
00097621 9B06                       	dc.b	nD2, $06
00097623 EC04                       	smpsPSGAlterVol     $04
00097625 E701                       	dc.b	smpsNoAttack, $01
00097627 EC07                       	smpsPSGAlterVol     $07
00097629 8003                       	dc.b	nRst, $03
0009762B ECF5                       	smpsPSGAlterVol     $F5
0009762D 9B07                       	dc.b	nD2, $07
0009762F EC0B                       	smpsPSGAlterVol     $0B
00097631 8007                       	dc.b	nRst, $07
00097633 E105                       	smpsAlterNote       $05
00097635 0101                       	dc.b	$01, $01
00097637 E1FF                       	smpsAlterNote       $FF
00097639 01                         	dc.b	$01
0009763A E1FC                       	smpsAlterNote       $FC
0009763C 01                         	dc.b	$01
0009763D E1FF                       	smpsAlterNote       $FF
0009763F ECF5                       	smpsPSGAlterVol     $F5
00097641 9B06                       	dc.b	nD2, $06
00097643 EC0B                       	smpsPSGAlterVol     $0B
00097645 8004                       	dc.b	nRst, $04
00097647 ECF5                       	smpsPSGAlterVol     $F5
00097649 9B06                       	dc.b	nD2, $06
0009764B EC04                       	smpsPSGAlterVol     $04
0009764D E701                       	dc.b	smpsNoAttack, $01
0009764F EC07                       	smpsPSGAlterVol     $07
00097651 8006                       	dc.b	nRst, $06
00097653 E102                       	smpsAlterNote       $02
00097655 01                         	dc.b	$01
00097656 E106                       	smpsAlterNote       $06
00097658 01                         	dc.b	$01
00097659 E102                       	smpsAlterNote       $02
0009765B 01                         	dc.b	$01
0009765C E1FC                       	smpsAlterNote       $FC
0009765E 01                         	dc.b	$01
0009765F E1FF                       	smpsAlterNote       $FF
00097661 ECF5                       	smpsPSGAlterVol     $F5
00097663 9B06                       	dc.b	nD2, $06
00097665 EC04                       	smpsPSGAlterVol     $04
00097667 E701                       	dc.b	smpsNoAttack, $01
00097669 EC07                       	smpsPSGAlterVol     $07
0009766B 8003                       	dc.b	nRst, $03
0009766D ECF5                       	smpsPSGAlterVol     $F5
0009766F 9B07                       	dc.b	nD2, $07
00097671 EC0B                       	smpsPSGAlterVol     $0B
00097673 8006                       	dc.b	nRst, $06
00097675 E102                       	smpsAlterNote       $02
00097677 01                         	dc.b	$01
00097678 E105                       	smpsAlterNote       $05
0009767A 0101                       	dc.b	$01, $01
0009767C E1FF                       	smpsAlterNote       $FF
0009767E 01                         	dc.b	$01
0009767F ECF5                       	smpsPSGAlterVol     $F5
00097681 9B07                       	dc.b	nD2, $07
00097683 EC0B                       	smpsPSGAlterVol     $0B
00097685 8004                       	dc.b	nRst, $04
00097687 ECF5                       	smpsPSGAlterVol     $F5
00097689 9B06                       	dc.b	nD2, $06
0009768B EC0B                       	smpsPSGAlterVol     $0B
0009768D 8007                       	dc.b	nRst, $07
0009768F E105                       	smpsAlterNote       $05
00097691 0101                       	dc.b	$01, $01
00097693 E102                       	smpsAlterNote       $02
00097695 01                         	dc.b	$01
00097696 E1FC                       	smpsAlterNote       $FC
00097698 01                         	dc.b	$01
00097699 E1FF                       	smpsAlterNote       $FF
0009769B ECF5                       	smpsPSGAlterVol     $F5
0009769D 9B06                       	dc.b	nD2, $06
0009769F EC04                       	smpsPSGAlterVol     $04
000976A1 E701                       	dc.b	smpsNoAttack, $01
000976A3 EC07                       	smpsPSGAlterVol     $07
000976A5 8003                       	dc.b	nRst, $03
000976A7 ECF5                       	smpsPSGAlterVol     $F5
000976A9 9B06                       	dc.b	nD2, $06
000976AB EC04                       	smpsPSGAlterVol     $04
000976AD E701                       	dc.b	smpsNoAttack, $01
000976AF EC07                       	smpsPSGAlterVol     $07
000976B1 8006                       	dc.b	nRst, $06
000976B3 E102                       	smpsAlterNote       $02
000976B5 01                         	dc.b	$01
000976B6 E106                       	smpsAlterNote       $06
000976B8 01                         	dc.b	$01
000976B9 E102                       	smpsAlterNote       $02
000976BB 01                         	dc.b	$01
000976BC E1FF                       	smpsAlterNote       $FF
000976BE 01                         	dc.b	$01
000976BF ECF5                       	smpsPSGAlterVol     $F5
000976C1 9B06                       	dc.b	nD2, $06
000976C3 EC04                       	smpsPSGAlterVol     $04
000976C5 E701                       	dc.b	smpsNoAttack, $01
000976C7 EC07                       	smpsPSGAlterVol     $07
000976C9 8003                       	dc.b	nRst, $03
000976CB ECF5                       	smpsPSGAlterVol     $F5
000976CD 9B07                       	dc.b	nD2, $07
000976CF EC0B                       	smpsPSGAlterVol     $0B
000976D1 8007                       	dc.b	nRst, $07
000976D3 E105                       	smpsAlterNote       $05
000976D5 0101                       	dc.b	$01, $01
000976D7 E1FF                       	smpsAlterNote       $FF
000976D9 01                         	dc.b	$01
000976DA E1FC                       	smpsAlterNote       $FC
000976DC 01                         	dc.b	$01
000976DD E1FF                       	smpsAlterNote       $FF
000976DF ECF5                       	smpsPSGAlterVol     $F5
000976E1 9B06                       	dc.b	nD2, $06
000976E3 EC0B                       	smpsPSGAlterVol     $0B
000976E5 8004                       	dc.b	nRst, $04
000976E7 ECF5                       	smpsPSGAlterVol     $F5
000976E9 9B06                       	dc.b	nD2, $06
000976EB EC04                       	smpsPSGAlterVol     $04
000976ED E701                       	dc.b	smpsNoAttack, $01
000976EF EC07                       	smpsPSGAlterVol     $07
000976F1 8006                       	dc.b	nRst, $06
000976F3 E102                       	smpsAlterNote       $02
000976F5 01                         	dc.b	$01
000976F6 E106                       	smpsAlterNote       $06
000976F8 01                         	dc.b	$01
000976F9 E102                       	smpsAlterNote       $02
000976FB 01                         	dc.b	$01
000976FC E1FC                       	smpsAlterNote       $FC
000976FE 01                         	dc.b	$01
000976FF E1FF                       	smpsAlterNote       $FF
00097701 ECF5                       	smpsPSGAlterVol     $F5
00097703 9B06                       	dc.b	nD2, $06
00097705 EC04                       	smpsPSGAlterVol     $04
00097707 E701                       	dc.b	smpsNoAttack, $01
00097709 EC07                       	smpsPSGAlterVol     $07
0009770B 8003                       	dc.b	nRst, $03
0009770D ECF5                       	smpsPSGAlterVol     $F5
0009770F 9B06                       	dc.b	nD2, $06
00097711 EC04                       	smpsPSGAlterVol     $04
00097713 E701                       	dc.b	smpsNoAttack, $01
00097715 EC07                       	smpsPSGAlterVol     $07
00097717 8006                       	dc.b	nRst, $06
00097719 E102                       	smpsAlterNote       $02
0009771B 01                         	dc.b	$01
0009771C E106                       	smpsAlterNote       $06
0009771E 01                         	dc.b	$01
0009771F E105                       	smpsAlterNote       $05
00097721 01                         	dc.b	$01
00097722 E1FF                       	smpsAlterNote       $FF
00097724 01                         	dc.b	$01
00097725 ECF5                       	smpsPSGAlterVol     $F5
00097727 9B07                       	dc.b	nD2, $07
00097729 EC0B                       	smpsPSGAlterVol     $0B
0009772B 8004                       	dc.b	nRst, $04
0009772D ECF5                       	smpsPSGAlterVol     $F5
0009772F 9B06                       	dc.b	nD2, $06
00097731 EC0B                       	smpsPSGAlterVol     $0B
00097733 8007                       	dc.b	nRst, $07
00097735 E105                       	smpsAlterNote       $05
00097737 0101                       	dc.b	$01, $01
00097739 E101                       	smpsAlterNote       $01
0009773B 01                         	dc.b	$01
0009773C E1FB                       	smpsAlterNote       $FB
0009773E 01                         	dc.b	$01
0009773F E1FE                       	smpsAlterNote       $FE
00097741 ECF5                       	smpsPSGAlterVol     $F5
00097743 9A06                       	dc.b	nCs2, $06
00097745 EC04                       	smpsPSGAlterVol     $04
00097747 E701                       	dc.b	smpsNoAttack, $01
00097749 EC07                       	smpsPSGAlterVol     $07
0009774B 8003                       	dc.b	nRst, $03
0009774D ECF5                       	smpsPSGAlterVol     $F5
0009774F 9A06                       	dc.b	nCs2, $06
00097751 EC04                       	smpsPSGAlterVol     $04
00097753 E701                       	dc.b	smpsNoAttack, $01
00097755 EC07                       	smpsPSGAlterVol     $07
00097757 8003                       	dc.b	nRst, $03
00097759 E1FC                       	smpsAlterNote       $FC
0009775B ECF5                       	smpsPSGAlterVol     $F5
0009775D 8F07                       	dc.b	nD1, $07
0009775F EC0B                       	smpsPSGAlterVol     $0B
00097761 8006                       	dc.b	nRst, $06
00097763 E1FF                       	smpsAlterNote       $FF
00097765 01                         	dc.b	$01
00097766 E103                       	smpsAlterNote       $03
00097768 01                         	dc.b	$01
00097769 E102                       	smpsAlterNote       $02
0009776B 01                         	dc.b	$01
0009776C E1FC                       	smpsAlterNote       $FC
0009776E 01                         	dc.b	$01
0009776F E1F8                       	smpsAlterNote       $F8
00097771 01                         	dc.b	$01
00097772 E1FC                       	smpsAlterNote       $FC
00097774 01                         	dc.b	$01
00097775 E1FF                       	smpsAlterNote       $FF
00097777 01                         	dc.b	$01
00097778 E103                       	smpsAlterNote       $03
0009777A 01                         	dc.b	$01
0009777B E1FC                       	smpsAlterNote       $FC
0009777D ECF5                       	smpsPSGAlterVol     $F5
0009777F 8F03 8F03                  	dc.b	nD1, $03, nD1, $03
00097783 EC04                       	smpsPSGAlterVol     $04
00097785 E701                       	dc.b	smpsNoAttack, $01
00097787 EC07                       	smpsPSGAlterVol     $07
00097789 8009                       	dc.b	nRst, $09
0009778B E1FF                       	smpsAlterNote       $FF
0009778D 01                         	dc.b	$01
0009778E E103                       	smpsAlterNote       $03
00097790 01                         	dc.b	$01
00097791 E102                       	smpsAlterNote       $02
00097793 01                         	dc.b	$01
00097794 E1FC                       	smpsAlterNote       $FC
00097796 01                         	dc.b	$01
00097797 E1F8                       	smpsAlterNote       $F8
00097799 01                         	dc.b	$01
0009779A E1FC                       	smpsAlterNote       $FC
0009779C 01                         	dc.b	$01
0009779D E1FF                       	smpsAlterNote       $FF
0009779F 01                         	dc.b	$01
000977A0 E103                       	smpsAlterNote       $03
000977A2 01                         	dc.b	$01
000977A3 E1FF                       	smpsAlterNote       $FF
000977A5 01                         	dc.b	$01
000977A6 E1F9                       	smpsAlterNote       $F9
000977A8 01                         	dc.b	$01
000977A9 E1F8                       	smpsAlterNote       $F8
000977AB 01                         	dc.b	$01
000977AC E1FC                       	smpsAlterNote       $FC
000977AE 01                         	dc.b	$01
000977AF E102                       	smpsAlterNote       $02
000977B1 0101                       	dc.b	$01, $01
000977B3 E1FF                       	smpsAlterNote       $FF
000977B5 01                         	dc.b	$01
000977B6 E1FC                       	smpsAlterNote       $FC
000977B8 ECF5                       	smpsPSGAlterVol     $F5
000977BA 8F02                       	dc.b	nD1, $02
000977BC EC04                       	smpsPSGAlterVol     $04
000977BE E701                       	dc.b	smpsNoAttack, $01
000977C0 ECFC                       	smpsPSGAlterVol     $FC
000977C2 E1FB                       	smpsAlterNote       $FB
000977C4 8D06                       	dc.b	nC1, $06
000977C6 EC04                       	smpsPSGAlterVol     $04
000977C8 E701                       	dc.b	smpsNoAttack, $01
000977CA EC07                       	smpsPSGAlterVol     $07
000977CC 8006                       	dc.b	nRst, $06
000977CE E1FE                       	smpsAlterNote       $FE
000977D0 01                         	dc.b	$01
000977D1 E102                       	smpsAlterNote       $02
000977D3 01                         	dc.b	$01
000977D4 E1FE                       	smpsAlterNote       $FE
000977D6 01                         	dc.b	$01
000977D7 E1FB                       	smpsAlterNote       $FB
000977D9 01                         	dc.b	$01
000977DA E1F7                       	smpsAlterNote       $F7
000977DC 01                         	dc.b	$01
000977DD E1FB                       	smpsAlterNote       $FB
000977DF 01                         	dc.b	$01
000977E0 E101                       	smpsAlterNote       $01
000977E2 01                         	dc.b	$01
000977E3 E102                       	smpsAlterNote       $02
000977E5 01                         	dc.b	$01
000977E6 E1FB                       	smpsAlterNote       $FB
000977E8 ECF5                       	smpsPSGAlterVol     $F5
000977EA 8D02                       	dc.b	nC1, $02
000977EC EC04                       	smpsPSGAlterVol     $04
000977EE E701                       	dc.b	smpsNoAttack, $01
000977F0 E1FC                       	smpsAlterNote       $FC
000977F2 ECFC                       	smpsPSGAlterVol     $FC
000977F4 8F0D                       	dc.b	nD1, $0D
000977F6 E1FF                       	smpsAlterNote       $FF
000977F8 E701                       	dc.b	smpsNoAttack, $01
000977FA E103                       	smpsAlterNote       $03
000977FC E701                       	dc.b	smpsNoAttack, $01
000977FE E1FF                       	smpsAlterNote       $FF
00097800 E701                       	dc.b	smpsNoAttack, $01
00097802 E1FC                       	smpsAlterNote       $FC
00097804 E701                       	dc.b	smpsNoAttack, $01
00097806 E1F8                       	smpsAlterNote       $F8
00097808 E701                       	dc.b	smpsNoAttack, $01
0009780A E1FC                       	smpsAlterNote       $FC
0009780C E701                       	dc.b	smpsNoAttack, $01
0009780E E102                       	smpsAlterNote       $02
00097810 E701                       	dc.b	smpsNoAttack, $01
00097812 E103                       	smpsAlterNote       $03
00097814 E701                       	dc.b	smpsNoAttack, $01
00097816 E1FF                       	smpsAlterNote       $FF
00097818 E701                       	dc.b	smpsNoAttack, $01
0009781A E1F9                       	smpsAlterNote       $F9
0009781C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097820 E1FC                       	smpsAlterNote       $FC
00097822 E701                       	dc.b	smpsNoAttack, $01
00097824 E102                       	smpsAlterNote       $02
00097826 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009782A E1FC                       	smpsAlterNote       $FC
0009782C E701                       	dc.b	smpsNoAttack, $01
0009782E E1F9                       	smpsAlterNote       $F9
00097830 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097834 E1FF                       	smpsAlterNote       $FF
00097836 EC04                       	smpsPSGAlterVol     $04
00097838 E701                       	dc.b	smpsNoAttack, $01
0009783A EC07                       	smpsPSGAlterVol     $07
0009783C E103                       	smpsAlterNote       $03
0009783E 8001                       	dc.b	nRst, $01
00097840 E102                       	smpsAlterNote       $02
00097842 01                         	dc.b	$01
00097843 E1FB                       	smpsAlterNote       $FB
00097845 01                         	dc.b	$01
00097846 E1F7                       	smpsAlterNote       $F7
00097848 01                         	dc.b	$01
00097849 E1FB                       	smpsAlterNote       $FB
0009784B 01                         	dc.b	$01
0009784C E102                       	smpsAlterNote       $02
0009784E 01                         	dc.b	$01
0009784F E103                       	smpsAlterNote       $03
00097851 01                         	dc.b	$01
00097852 E1FB                       	smpsAlterNote       $FB
00097854 ECF5                       	smpsPSGAlterVol     $F5
00097856 8E06                       	dc.b	nCs1, $06
00097858 EC04                       	smpsPSGAlterVol     $04
0009785A E701                       	dc.b	smpsNoAttack, $01
0009785C EC07                       	smpsPSGAlterVol     $07
0009785E 8003                       	dc.b	nRst, $03
00097860 ECF5                       	smpsPSGAlterVol     $F5
00097862 8E06                       	dc.b	nCs1, $06
00097864 EC04                       	smpsPSGAlterVol     $04
00097866 E701                       	dc.b	smpsNoAttack, $01
00097868 EC07                       	smpsPSGAlterVol     $07
0009786A 8006                       	dc.b	nRst, $06
0009786C E1FE                       	smpsAlterNote       $FE
0009786E 01                         	dc.b	$01
0009786F E102                       	smpsAlterNote       $02
00097871 01                         	dc.b	$01
00097872 E1FE                       	smpsAlterNote       $FE
00097874 01                         	dc.b	$01
00097875 E1F9                       	smpsAlterNote       $F9
00097877 01                         	dc.b	$01
00097878 E1FC                       	smpsAlterNote       $FC
0009787A ECF5                       	smpsPSGAlterVol     $F5
0009787C 8F06                       	dc.b	nD1, $06
0009787E EC04                       	smpsPSGAlterVol     $04
00097880 E701                       	dc.b	smpsNoAttack, $01
00097882 EC07                       	smpsPSGAlterVol     $07
00097884 8003                       	dc.b	nRst, $03
00097886 ECF5                       	smpsPSGAlterVol     $F5
00097888 8F07                       	dc.b	nD1, $07
0009788A EC0B                       	smpsPSGAlterVol     $0B
0009788C 8006                       	dc.b	nRst, $06
0009788E E1FF                       	smpsAlterNote       $FF
00097890 01                         	dc.b	$01
00097891 E102                       	smpsAlterNote       $02
00097893 0101                       	dc.b	$01, $01
00097895 E1FB                       	smpsAlterNote       $FB
00097897 01                         	dc.b	$01
00097898 ECF5                       	smpsPSGAlterVol     $F5
0009789A 8E07                       	dc.b	nCs1, $07
0009789C EC0B                       	smpsPSGAlterVol     $0B
0009789E 8004                       	dc.b	nRst, $04
000978A0 ECF5                       	smpsPSGAlterVol     $F5
000978A2 8E06                       	dc.b	nCs1, $06
000978A4 EC04                       	smpsPSGAlterVol     $04
000978A6 E701                       	dc.b	smpsNoAttack, $01
000978A8 EC07                       	smpsPSGAlterVol     $07
000978AA 8006                       	dc.b	nRst, $06
000978AC E101                       	smpsAlterNote       $01
000978AE 01                         	dc.b	$01
000978AF E102                       	smpsAlterNote       $02
000978B1 01                         	dc.b	$01
000978B2 E1FE                       	smpsAlterNote       $FE
000978B4 01                         	dc.b	$01
000978B5 E1F8                       	smpsAlterNote       $F8
000978B7 01                         	dc.b	$01
000978B8 E1FB                       	smpsAlterNote       $FB
000978BA ECF5                       	smpsPSGAlterVol     $F5
000978BC 8E06                       	dc.b	nCs1, $06
000978BE EC04                       	smpsPSGAlterVol     $04
000978C0 E701                       	dc.b	smpsNoAttack, $01
000978C2 EC07                       	smpsPSGAlterVol     $07
000978C4 8003                       	dc.b	nRst, $03
000978C6 ECF5                       	smpsPSGAlterVol     $F5
000978C8 8E06                       	dc.b	nCs1, $06
000978CA EC04                       	smpsPSGAlterVol     $04
000978CC E701                       	dc.b	smpsNoAttack, $01
000978CE EC07                       	smpsPSGAlterVol     $07
000978D0 8004                       	dc.b	nRst, $04
000978D2 E1FC                       	smpsAlterNote       $FC
000978D4 ECF5                       	smpsPSGAlterVol     $F5
000978D6 8F06                       	dc.b	nD1, $06
000978D8 EC0B                       	smpsPSGAlterVol     $0B
000978DA 8006                       	dc.b	nRst, $06
000978DC E1FF                       	smpsAlterNote       $FF
000978DE 01                         	dc.b	$01
000978DF E102                       	smpsAlterNote       $02
000978E1 0101                       	dc.b	$01, $01
000978E3 E1FC                       	smpsAlterNote       $FC
000978E5 01                         	dc.b	$01
000978E6 E1F8                       	smpsAlterNote       $F8
000978E8 01                         	dc.b	$01
000978E9 E1F9                       	smpsAlterNote       $F9
000978EB 01                         	dc.b	$01
000978EC E1FF                       	smpsAlterNote       $FF
000978EE 01                         	dc.b	$01
000978EF E103                       	smpsAlterNote       $03
000978F1 01                         	dc.b	$01
000978F2 E1FC                       	smpsAlterNote       $FC
000978F4 ECF5                       	smpsPSGAlterVol     $F5
000978F6 8F03 8F03                  	dc.b	nD1, $03, nD1, $03
000978FA EC04                       	smpsPSGAlterVol     $04
000978FC E701                       	dc.b	smpsNoAttack, $01
000978FE EC07                       	smpsPSGAlterVol     $07
00097900 8009                       	dc.b	nRst, $09
00097902 E1FF                       	smpsAlterNote       $FF
00097904 01                         	dc.b	$01
00097905 E102                       	smpsAlterNote       $02
00097907 0101                       	dc.b	$01, $01
00097909 E1FC                       	smpsAlterNote       $FC
0009790B 01                         	dc.b	$01
0009790C E1F8                       	smpsAlterNote       $F8
0009790E 01                         	dc.b	$01
0009790F E1F9                       	smpsAlterNote       $F9
00097911 01                         	dc.b	$01
00097912 E1FF                       	smpsAlterNote       $FF
00097914 01                         	dc.b	$01
00097915 E103                       	smpsAlterNote       $03
00097917 01                         	dc.b	$01
00097918 E1FF                       	smpsAlterNote       $FF
0009791A 01                         	dc.b	$01
0009791B E1FC                       	smpsAlterNote       $FC
0009791D 01                         	dc.b	$01
0009791E E1F8                       	smpsAlterNote       $F8
00097920 01                         	dc.b	$01
00097921 E1FC                       	smpsAlterNote       $FC
00097923 01                         	dc.b	$01
00097924 E102                       	smpsAlterNote       $02
00097926 01                         	dc.b	$01
00097927 E103                       	smpsAlterNote       $03
00097929 01                         	dc.b	$01
0009792A E1FF                       	smpsAlterNote       $FF
0009792C 01                         	dc.b	$01
0009792D E1FC                       	smpsAlterNote       $FC
0009792F ECF5                       	smpsPSGAlterVol     $F5
00097931 8F03                       	dc.b	nD1, $03
00097933 E1FB                       	smpsAlterNote       $FB
00097935 8D06                       	dc.b	nC1, $06
00097937 EC04                       	smpsPSGAlterVol     $04
00097939 E701                       	dc.b	smpsNoAttack, $01
0009793B EC07                       	smpsPSGAlterVol     $07
0009793D 8006                       	dc.b	nRst, $06
0009793F E1FE                       	smpsAlterNote       $FE
00097941 01                         	dc.b	$01
00097942 E102                       	smpsAlterNote       $02
00097944 01                         	dc.b	$01
00097945 E101                       	smpsAlterNote       $01
00097947 01                         	dc.b	$01
00097948 E1FB                       	smpsAlterNote       $FB
0009794A 01                         	dc.b	$01
0009794B E1F7                       	smpsAlterNote       $F7
0009794D 01                         	dc.b	$01
0009794E E1FB                       	smpsAlterNote       $FB
00097950 01                         	dc.b	$01
00097951 E1FE                       	smpsAlterNote       $FE
00097953 01                         	dc.b	$01
00097954 E102                       	smpsAlterNote       $02
00097956 01                         	dc.b	$01
00097957 E1FB                       	smpsAlterNote       $FB
00097959 ECF5                       	smpsPSGAlterVol     $F5
0009795B 8D03                       	dc.b	nC1, $03
0009795D E1FC                       	smpsAlterNote       $FC
0009795F 8F0D                       	dc.b	nD1, $0D
00097961 E1FF                       	smpsAlterNote       $FF
00097963 E701                       	dc.b	smpsNoAttack, $01
00097965 E103                       	smpsAlterNote       $03
00097967 E701                       	dc.b	smpsNoAttack, $01
00097969 E1FF                       	smpsAlterNote       $FF
0009796B E701                       	dc.b	smpsNoAttack, $01
0009796D E1FC                       	smpsAlterNote       $FC
0009796F E701                       	dc.b	smpsNoAttack, $01
00097971 E1F8                       	smpsAlterNote       $F8
00097973 E701                       	dc.b	smpsNoAttack, $01
00097975 E1FC                       	smpsAlterNote       $FC
00097977 E701                       	dc.b	smpsNoAttack, $01
00097979 E102                       	smpsAlterNote       $02
0009797B E701                       	dc.b	smpsNoAttack, $01
0009797D E103                       	smpsAlterNote       $03
0009797F E701                       	dc.b	smpsNoAttack, $01
00097981 E1FF                       	smpsAlterNote       $FF
00097983 E701                       	dc.b	smpsNoAttack, $01
00097985 E1F9                       	smpsAlterNote       $F9
00097987 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009798B E1FC                       	smpsAlterNote       $FC
0009798D E701                       	dc.b	smpsNoAttack, $01
0009798F E102                       	smpsAlterNote       $02
00097991 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097995 E1FF                       	smpsAlterNote       $FF
00097997 E701                       	dc.b	smpsNoAttack, $01
00097999 E1F9                       	smpsAlterNote       $F9
0009799B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009799F E1FF                       	smpsAlterNote       $FF
000979A1 EC04                       	smpsPSGAlterVol     $04
000979A3 E701                       	dc.b	smpsNoAttack, $01
000979A5 EC07                       	smpsPSGAlterVol     $07
000979A7 E103                       	smpsAlterNote       $03
000979A9 8001                       	dc.b	nRst, $01
000979AB E102                       	smpsAlterNote       $02
000979AD 01                         	dc.b	$01
000979AE E1FB                       	smpsAlterNote       $FB
000979B0 01                         	dc.b	$01
000979B1 E1F7                       	smpsAlterNote       $F7
000979B3 01                         	dc.b	$01
000979B4 E1FB                       	smpsAlterNote       $FB
000979B6 01                         	dc.b	$01
000979B7 E1FF                       	smpsAlterNote       $FF
000979B9 01                         	dc.b	$01
000979BA E103                       	smpsAlterNote       $03
000979BC 01                         	dc.b	$01
000979BD E1FB                       	smpsAlterNote       $FB
000979BF ECF5                       	smpsPSGAlterVol     $F5
000979C1 8E06                       	dc.b	nCs1, $06
000979C3 EC04                       	smpsPSGAlterVol     $04
000979C5 E701                       	dc.b	smpsNoAttack, $01
000979C7 EC07                       	smpsPSGAlterVol     $07
000979C9 8003                       	dc.b	nRst, $03
000979CB ECF5                       	smpsPSGAlterVol     $F5
000979CD 8E06                       	dc.b	nCs1, $06
000979CF EC04                       	smpsPSGAlterVol     $04
000979D1 E701                       	dc.b	smpsNoAttack, $01
000979D3 EC07                       	smpsPSGAlterVol     $07
000979D5 8006                       	dc.b	nRst, $06
000979D7 E1FE                       	smpsAlterNote       $FE
000979D9 01                         	dc.b	$01
000979DA E102                       	smpsAlterNote       $02
000979DC 01                         	dc.b	$01
000979DD E1FE                       	smpsAlterNote       $FE
000979DF 01                         	dc.b	$01
000979E0 E1FC                       	smpsAlterNote       $FC
000979E2 01                         	dc.b	$01
000979E3 ECF5                       	smpsPSGAlterVol     $F5
000979E5 8F06                       	dc.b	nD1, $06
000979E7 EC04                       	smpsPSGAlterVol     $04
000979E9 E701                       	dc.b	smpsNoAttack, $01
000979EB EC07                       	smpsPSGAlterVol     $07
000979ED 8003                       	dc.b	nRst, $03
000979EF ECF5                       	smpsPSGAlterVol     $F5
000979F1 8F07                       	dc.b	nD1, $07
000979F3 EC0B                       	smpsPSGAlterVol     $0B
000979F5 8007                       	dc.b	nRst, $07
000979F7 E102                       	smpsAlterNote       $02
000979F9 0101                       	dc.b	$01, $01
000979FB E1FB                       	smpsAlterNote       $FB
000979FD 01                         	dc.b	$01
000979FE E1F8                       	smpsAlterNote       $F8
00097A00 01                         	dc.b	$01
00097A01 E1FB                       	smpsAlterNote       $FB
00097A03 ECF5                       	smpsPSGAlterVol     $F5
00097A05 8E06                       	dc.b	nCs1, $06
00097A07 EC0B                       	smpsPSGAlterVol     $0B
00097A09 8004                       	dc.b	nRst, $04
00097A0B ECF5                       	smpsPSGAlterVol     $F5
00097A0D 8E06                       	dc.b	nCs1, $06
00097A0F EC04                       	smpsPSGAlterVol     $04
00097A11 E701                       	dc.b	smpsNoAttack, $01
00097A13 EC07                       	smpsPSGAlterVol     $07
00097A15 8006                       	dc.b	nRst, $06
00097A17 E1FE                       	smpsAlterNote       $FE
00097A19 01                         	dc.b	$01
00097A1A E102                       	smpsAlterNote       $02
00097A1C 01                         	dc.b	$01
00097A1D E1FE                       	smpsAlterNote       $FE
00097A1F 01                         	dc.b	$01
00097A20 E1F9                       	smpsAlterNote       $F9
00097A22 01                         	dc.b	$01
00097A23 E1FC                       	smpsAlterNote       $FC
00097A25 ECF5                       	smpsPSGAlterVol     $F5
00097A27 8F06                       	dc.b	nD1, $06
00097A29 EC04                       	smpsPSGAlterVol     $04
00097A2B E701                       	dc.b	smpsNoAttack, $01
00097A2D EC07                       	smpsPSGAlterVol     $07
00097A2F 8003                       	dc.b	nRst, $03
00097A31 ECF5                       	smpsPSGAlterVol     $F5
00097A33 8F06                       	dc.b	nD1, $06
00097A35 EC04                       	smpsPSGAlterVol     $04
00097A37 E701                       	dc.b	smpsNoAttack, $01
00097A39 EC07                       	smpsPSGAlterVol     $07
00097A3B 8006                       	dc.b	nRst, $06
00097A3D E1FF                       	smpsAlterNote       $FF
00097A3F 01                         	dc.b	$01
00097A40 E103                       	smpsAlterNote       $03
00097A42 01                         	dc.b	$01
00097A43 E102                       	smpsAlterNote       $02
00097A45 01                         	dc.b	$01
00097A46 E1FB                       	smpsAlterNote       $FB
00097A48 01                         	dc.b	$01
00097A49 ECF5                       	smpsPSGAlterVol     $F5
00097A4B 8E07                       	dc.b	nCs1, $07
00097A4D EC0B                       	smpsPSGAlterVol     $0B
00097A4F 8004                       	dc.b	nRst, $04
00097A51 ECF5                       	smpsPSGAlterVol     $F5
00097A53 8E06                       	dc.b	nCs1, $06
00097A55 EC0B                       	smpsPSGAlterVol     $0B
00097A57 8007                       	dc.b	nRst, $07
00097A59 E101                       	smpsAlterNote       $01
00097A5B 0101                       	dc.b	$01, $01
00097A5D E1FE                       	smpsAlterNote       $FE
00097A5F 01                         	dc.b	$01
00097A60 E1F9                       	smpsAlterNote       $F9
00097A62 01                         	dc.b	$01
00097A63 E1FC                       	smpsAlterNote       $FC
00097A65 ECF5                       	smpsPSGAlterVol     $F5
00097A67 8F06                       	dc.b	nD1, $06
00097A69 EC04                       	smpsPSGAlterVol     $04
00097A6B E701                       	dc.b	smpsNoAttack, $01
00097A6D EC07                       	smpsPSGAlterVol     $07
00097A6F 8003                       	dc.b	nRst, $03
00097A71 ECF5                       	smpsPSGAlterVol     $F5
00097A73 8F06                       	dc.b	nD1, $06
00097A75 EC04                       	smpsPSGAlterVol     $04
00097A77 E701                       	dc.b	smpsNoAttack, $01
00097A79 EC07                       	smpsPSGAlterVol     $07
00097A7B 8006                       	dc.b	nRst, $06
00097A7D E1FF                       	smpsAlterNote       $FF
00097A7F 01                         	dc.b	$01
00097A80 E103                       	smpsAlterNote       $03
00097A82 01                         	dc.b	$01
00097A83 E1FF                       	smpsAlterNote       $FF
00097A85 01                         	dc.b	$01
00097A86 E1FB                       	smpsAlterNote       $FB
00097A88 01                         	dc.b	$01
00097A89 ECF5                       	smpsPSGAlterVol     $F5
00097A8B 8E06                       	dc.b	nCs1, $06
00097A8D EC04                       	smpsPSGAlterVol     $04
00097A8F E701                       	dc.b	smpsNoAttack, $01
00097A91 EC07                       	smpsPSGAlterVol     $07
00097A93 8003                       	dc.b	nRst, $03
00097A95 ECF5                       	smpsPSGAlterVol     $F5
00097A97 8E07                       	dc.b	nCs1, $07
00097A99 E1FF                       	smpsAlterNote       $FF
00097A9B 9B06                       	dc.b	nD2, $06
00097A9D EC04                       	smpsPSGAlterVol     $04
00097A9F E701                       	dc.b	smpsNoAttack, $01
00097AA1 ECFC                       	smpsPSGAlterVol     $FC
00097AA3 9B03                       	dc.b	nD2, $03
00097AA5 EC04                       	smpsPSGAlterVol     $04
00097AA7 E701                       	dc.b	smpsNoAttack, $01
00097AA9 ECFC                       	smpsPSGAlterVol     $FC
00097AAB 9B02                       	dc.b	nD2, $02
00097AAD EC04                       	smpsPSGAlterVol     $04
00097AAF E701                       	dc.b	smpsNoAttack, $01
00097AB1 ECFC                       	smpsPSGAlterVol     $FC
00097AB3 E1FE                       	smpsAlterNote       $FE
00097AB5 9A03                       	dc.b	nCs2, $03
00097AB7 EC0B                       	smpsPSGAlterVol     $0B
00097AB9 800A                       	dc.b	nRst, $0A
00097ABB E102                       	smpsAlterNote       $02
00097ABD 01                         	dc.b	$01
00097ABE E10A                       	smpsAlterNote       $0A
00097AC0 01                         	dc.b	$01
00097AC1 E102                       	smpsAlterNote       $02
00097AC3 01                         	dc.b	$01
00097AC4 E1F7                       	smpsAlterNote       $F7
00097AC6 01                         	dc.b	$01
00097AC7 E10A                       	smpsAlterNote       $0A
00097AC9 01                         	dc.b	$01
00097ACA E1FC                       	smpsAlterNote       $FC
00097ACC 01                         	dc.b	$01
00097ACD E108                       	smpsAlterNote       $08
00097ACF 0101                       	dc.b	$01, $01
00097AD1 E102                       	smpsAlterNote       $02
00097AD3 01                         	dc.b	$01
00097AD4 E1F7                       	smpsAlterNote       $F7
00097AD6 0101                       	dc.b	$01, $01
00097AD8 E1FC                       	smpsAlterNote       $FC
00097ADA ECF5                       	smpsPSGAlterVol     $F5
00097ADC 8F06                       	dc.b	nD1, $06
00097ADE EC04                       	smpsPSGAlterVol     $04
00097AE0 E701                       	dc.b	smpsNoAttack, $01
00097AE2 EC07                       	smpsPSGAlterVol     $07
00097AE4 8003                       	dc.b	nRst, $03
00097AE6 ECF5                       	smpsPSGAlterVol     $F5
00097AE8 8F06                       	dc.b	nD1, $06
00097AEA EC04                       	smpsPSGAlterVol     $04
00097AEC E701                       	dc.b	smpsNoAttack, $01
00097AEE EC07                       	smpsPSGAlterVol     $07
00097AF0 8006                       	dc.b	nRst, $06
00097AF2 E1FF                       	smpsAlterNote       $FF
00097AF4 01                         	dc.b	$01
00097AF5 E102                       	smpsAlterNote       $02
00097AF7 01                         	dc.b	$01
00097AF8 E101                       	smpsAlterNote       $01
00097AFA 01                         	dc.b	$01
00097AFB E1FC                       	smpsAlterNote       $FC
00097AFD 01                         	dc.b	$01
00097AFE ECF5                       	smpsPSGAlterVol     $F5
00097B00 9007                       	dc.b	nEb1, $07
00097B02 EC0B                       	smpsPSGAlterVol     $0B
00097B04 8004                       	dc.b	nRst, $04
00097B06 ECF5                       	smpsPSGAlterVol     $F5
00097B08 9006                       	dc.b	nEb1, $06
00097B0A EC0B                       	smpsPSGAlterVol     $0B
00097B0C 8007                       	dc.b	nRst, $07
00097B0E E103                       	smpsAlterNote       $03
00097B10 0101                       	dc.b	$01, $01
00097B12 E1FF                       	smpsAlterNote       $FF
00097B14 01                         	dc.b	$01
00097B15 E1F9                       	smpsAlterNote       $F9
00097B17 01                         	dc.b	$01
00097B18 E1FC                       	smpsAlterNote       $FC
00097B1A ECF5                       	smpsPSGAlterVol     $F5
00097B1C 8F06                       	dc.b	nD1, $06
00097B1E EC04                       	smpsPSGAlterVol     $04
00097B20 E701                       	dc.b	smpsNoAttack, $01
00097B22 EC07                       	smpsPSGAlterVol     $07
00097B24 8003                       	dc.b	nRst, $03
00097B26 ECF5                       	smpsPSGAlterVol     $F5
00097B28 8F06                       	dc.b	nD1, $06
00097B2A EC04                       	smpsPSGAlterVol     $04
00097B2C E701                       	dc.b	smpsNoAttack, $01
00097B2E EC07                       	smpsPSGAlterVol     $07
00097B30 8006                       	dc.b	nRst, $06
00097B32 E1FF                       	smpsAlterNote       $FF
00097B34 01                         	dc.b	$01
00097B35 E103                       	smpsAlterNote       $03
00097B37 01                         	dc.b	$01
00097B38 E1FF                       	smpsAlterNote       $FF
00097B3A 01                         	dc.b	$01
00097B3B E1F9                       	smpsAlterNote       $F9
00097B3D 01                         	dc.b	$01
00097B3E E1FC                       	smpsAlterNote       $FC
00097B40 ECF5                       	smpsPSGAlterVol     $F5
00097B42 8F06                       	dc.b	nD1, $06
00097B44 EC04                       	smpsPSGAlterVol     $04
00097B46 E701                       	dc.b	smpsNoAttack, $01
00097B48 EC07                       	smpsPSGAlterVol     $07
00097B4A 8003                       	dc.b	nRst, $03
00097B4C ECF5                       	smpsPSGAlterVol     $F5
00097B4E 8F07                       	dc.b	nD1, $07
00097B50 EC0B                       	smpsPSGAlterVol     $0B
00097B52 8006                       	dc.b	nRst, $06
00097B54 E1FF                       	smpsAlterNote       $FF
00097B56 01                         	dc.b	$01
00097B57 E102                       	smpsAlterNote       $02
00097B59 0101                       	dc.b	$01, $01
00097B5B E1FC                       	smpsAlterNote       $FC
00097B5D 01                         	dc.b	$01
00097B5E ECF5                       	smpsPSGAlterVol     $F5
00097B60 8F07                       	dc.b	nD1, $07
00097B62 EC0B                       	smpsPSGAlterVol     $0B
00097B64 8004                       	dc.b	nRst, $04
00097B66 ECF5                       	smpsPSGAlterVol     $F5
00097B68 8F06                       	dc.b	nD1, $06
00097B6A EC04                       	smpsPSGAlterVol     $04
00097B6C E701                       	dc.b	smpsNoAttack, $01
00097B6E EC07                       	smpsPSGAlterVol     $07
00097B70 8006                       	dc.b	nRst, $06
00097B72 E101                       	smpsAlterNote       $01
00097B74 01                         	dc.b	$01
00097B75 E102                       	smpsAlterNote       $02
00097B77 01                         	dc.b	$01
00097B78 E1FF                       	smpsAlterNote       $FF
00097B7A 01                         	dc.b	$01
00097B7B E1F9                       	smpsAlterNote       $F9
00097B7D 01                         	dc.b	$01
00097B7E E1FC                       	smpsAlterNote       $FC
00097B80 ECF5                       	smpsPSGAlterVol     $F5
00097B82 9006                       	dc.b	nEb1, $06
00097B84 EC04                       	smpsPSGAlterVol     $04
00097B86 E701                       	dc.b	smpsNoAttack, $01
00097B88 EC07                       	smpsPSGAlterVol     $07
00097B8A 8003                       	dc.b	nRst, $03
00097B8C ECF5                       	smpsPSGAlterVol     $F5
00097B8E 9006                       	dc.b	nEb1, $06
00097B90 EC04                       	smpsPSGAlterVol     $04
00097B92 E701                       	dc.b	smpsNoAttack, $01
00097B94 EC07                       	smpsPSGAlterVol     $07
00097B96 8006                       	dc.b	nRst, $06
00097B98 E100                       	smpsAlterNote       $00
00097B9A 01                         	dc.b	$01
00097B9B E102                       	smpsAlterNote       $02
00097B9D 01                         	dc.b	$01
00097B9E E100                       	smpsAlterNote       $00
00097BA0 01                         	dc.b	$01
00097BA1 E1FF                       	smpsAlterNote       $FF
00097BA3 01                         	dc.b	$01
00097BA4 ECF5                       	smpsPSGAlterVol     $F5
00097BA6 9B06                       	dc.b	nD2, $06
00097BA8 EC04                       	smpsPSGAlterVol     $04
00097BAA E701                       	dc.b	smpsNoAttack, $01
00097BAC EC07                       	smpsPSGAlterVol     $07
00097BAE 8003                       	dc.b	nRst, $03
00097BB0 ECF5                       	smpsPSGAlterVol     $F5
00097BB2 9B07                       	dc.b	nD2, $07
00097BB4 EC0B                       	smpsPSGAlterVol     $0B
00097BB6 8007                       	dc.b	nRst, $07
00097BB8 E105                       	smpsAlterNote       $05
00097BBA 0101                       	dc.b	$01, $01
00097BBC E1FF                       	smpsAlterNote       $FF
00097BBE 01                         	dc.b	$01
00097BBF E1FC                       	smpsAlterNote       $FC
00097BC1 01                         	dc.b	$01
00097BC2 E1FF                       	smpsAlterNote       $FF
00097BC4 ECF5                       	smpsPSGAlterVol     $F5
00097BC6 9B06                       	dc.b	nD2, $06
00097BC8 EC0B                       	smpsPSGAlterVol     $0B
00097BCA 8004                       	dc.b	nRst, $04
00097BCC ECF5                       	smpsPSGAlterVol     $F5
00097BCE 9B06                       	dc.b	nD2, $06
00097BD0 EC04                       	smpsPSGAlterVol     $04
00097BD2 E701                       	dc.b	smpsNoAttack, $01
00097BD4 EC07                       	smpsPSGAlterVol     $07
00097BD6 8006                       	dc.b	nRst, $06
00097BD8 E102                       	smpsAlterNote       $02
00097BDA 01                         	dc.b	$01
00097BDB E106                       	smpsAlterNote       $06
00097BDD 01                         	dc.b	$01
00097BDE E102                       	smpsAlterNote       $02
00097BE0 01                         	dc.b	$01
00097BE1 E1FC                       	smpsAlterNote       $FC
00097BE3 01                         	dc.b	$01
00097BE4 E1FF                       	smpsAlterNote       $FF
00097BE6 ECF5                       	smpsPSGAlterVol     $F5
00097BE8 9B06                       	dc.b	nD2, $06
00097BEA EC04                       	smpsPSGAlterVol     $04
00097BEC E701                       	dc.b	smpsNoAttack, $01
00097BEE EC07                       	smpsPSGAlterVol     $07
00097BF0 8003                       	dc.b	nRst, $03
00097BF2 ECF5                       	smpsPSGAlterVol     $F5
00097BF4 9B07                       	dc.b	nD2, $07
00097BF6 EC0B                       	smpsPSGAlterVol     $0B
00097BF8 8006                       	dc.b	nRst, $06
00097BFA E102                       	smpsAlterNote       $02
00097BFC 01                         	dc.b	$01
00097BFD E105                       	smpsAlterNote       $05
00097BFF 0101                       	dc.b	$01, $01
00097C01 E1FF                       	smpsAlterNote       $FF
00097C03 01                         	dc.b	$01
00097C04 ECF5                       	smpsPSGAlterVol     $F5
00097C06 9B07                       	dc.b	nD2, $07
00097C08 EC0B                       	smpsPSGAlterVol     $0B
00097C0A 8004                       	dc.b	nRst, $04
00097C0C ECF5                       	smpsPSGAlterVol     $F5
00097C0E 9B06                       	dc.b	nD2, $06
00097C10 EC04                       	smpsPSGAlterVol     $04
00097C12 E701                       	dc.b	smpsNoAttack, $01
00097C14 EC07                       	smpsPSGAlterVol     $07
00097C16 8006                       	dc.b	nRst, $06
00097C18 E105                       	smpsAlterNote       $05
00097C1A 0101                       	dc.b	$01, $01
00097C1C E102                       	smpsAlterNote       $02
00097C1E 01                         	dc.b	$01
00097C1F E1FC                       	smpsAlterNote       $FC
00097C21 01                         	dc.b	$01
00097C22 E1FF                       	smpsAlterNote       $FF
00097C24 ECF5                       	smpsPSGAlterVol     $F5
00097C26 9B06                       	dc.b	nD2, $06
00097C28 EC04                       	smpsPSGAlterVol     $04
00097C2A E701                       	dc.b	smpsNoAttack, $01
00097C2C EC07                       	smpsPSGAlterVol     $07
00097C2E 8003                       	dc.b	nRst, $03
00097C30 ECF5                       	smpsPSGAlterVol     $F5
00097C32 9B06                       	dc.b	nD2, $06
00097C34 EC04                       	smpsPSGAlterVol     $04
00097C36 E701                       	dc.b	smpsNoAttack, $01
00097C38 EC07                       	smpsPSGAlterVol     $07
00097C3A 8006                       	dc.b	nRst, $06
00097C3C E102                       	smpsAlterNote       $02
00097C3E 01                         	dc.b	$01
00097C3F E106                       	smpsAlterNote       $06
00097C41 01                         	dc.b	$01
00097C42 E102                       	smpsAlterNote       $02
00097C44 01                         	dc.b	$01
00097C45 E1FF                       	smpsAlterNote       $FF
00097C47 01                         	dc.b	$01
00097C48 ECF5                       	smpsPSGAlterVol     $F5
00097C4A 9B06                       	dc.b	nD2, $06
00097C4C EC04                       	smpsPSGAlterVol     $04
00097C4E E701                       	dc.b	smpsNoAttack, $01
00097C50 EC07                       	smpsPSGAlterVol     $07
00097C52 8003                       	dc.b	nRst, $03
00097C54 ECF5                       	smpsPSGAlterVol     $F5
00097C56 9B07                       	dc.b	nD2, $07
00097C58 EC0B                       	smpsPSGAlterVol     $0B
00097C5A 8007                       	dc.b	nRst, $07
00097C5C E107                       	smpsAlterNote       $07
00097C5E 0101                       	dc.b	$01, $01
00097C60 E1FE                       	smpsAlterNote       $FE
00097C62 01                         	dc.b	$01
00097C63 E1FA                       	smpsAlterNote       $FA
00097C65 0101                       	dc.b	$01, $01
00097C67 E103                       	smpsAlterNote       $03
00097C69 01                         	dc.b	$01
00097C6A E109                       	smpsAlterNote       $09
00097C6C 01                         	dc.b	$01
00097C6D E107                       	smpsAlterNote       $07
00097C6F 01                         	dc.b	$01
00097C70 E1FE                       	smpsAlterNote       $FE
00097C72 01                         	dc.b	$01
00097C73 E108                       	smpsAlterNote       $08
00097C75 01                         	dc.b	$01
00097C76 E1FD                       	smpsAlterNote       $FD
00097C78 ECF5                       	smpsPSGAlterVol     $F5
00097C7A 940E                       	dc.b	nG1, $0E
00097C7C E103                       	smpsAlterNote       $03
00097C7E EC0B                       	smpsPSGAlterVol     $0B
00097C80 8001 01                    	dc.b	nRst, $01, $01
00097C83 E1FD                       	smpsAlterNote       $FD
00097C85 01                         	dc.b	$01
00097C86 E1FB                       	smpsAlterNote       $FB
00097C88 0101                       	dc.b	$01, $01
00097C8A E100                       	smpsAlterNote       $00
00097C8C 01                         	dc.b	$01
00097C8D E103                       	smpsAlterNote       $03
00097C8F 01                         	dc.b	$01
00097C90 E100                       	smpsAlterNote       $00
00097C92 01                         	dc.b	$01
00097C93 E1FD                       	smpsAlterNote       $FD
00097C95 01                         	dc.b	$01
00097C96 E1FA                       	smpsAlterNote       $FA
00097C98 01                         	dc.b	$01
00097C99 E1FD                       	smpsAlterNote       $FD
00097C9B 01                         	dc.b	$01
00097C9C E103                       	smpsAlterNote       $03
00097C9E 0101                       	dc.b	$01, $01
00097CA0 E100                       	smpsAlterNote       $00
00097CA2 01                         	dc.b	$01
00097CA3 E1FE                       	smpsAlterNote       $FE
00097CA5 ECF5                       	smpsPSGAlterVol     $F5
00097CA7 960D                       	dc.b	nA1, $0D
00097CA9 E104                       	smpsAlterNote       $04
00097CAB EC0B                       	smpsPSGAlterVol     $0B
00097CAD 8001 01                    	dc.b	nRst, $01, $01
00097CB0 E101                       	smpsAlterNote       $01
00097CB2 01                         	dc.b	$01
00097CB3 E1FB                       	smpsAlterNote       $FB
00097CB5 0101                       	dc.b	$01, $01
00097CB7 E1FE                       	smpsAlterNote       $FE
00097CB9 01                         	dc.b	$01
00097CBA E104                       	smpsAlterNote       $04
00097CBC 0101                       	dc.b	$01, $01
00097CBE E1FE                       	smpsAlterNote       $FE
00097CC0 01                         	dc.b	$01
00097CC1 E1FB                       	smpsAlterNote       $FB
00097CC3 0101                       	dc.b	$01, $01
00097CC5 E101                       	smpsAlterNote       $01
00097CC7 01                         	dc.b	$01
00097CC8 E104                       	smpsAlterNote       $04
00097CCA 0101                       	dc.b	$01, $01
00097CCC E1FE                       	smpsAlterNote       $FE
00097CCE ECF5                       	smpsPSGAlterVol     $F5
00097CD0 970D                       	dc.b	nBb1, $0D
00097CD2 E101                       	smpsAlterNote       $01
00097CD4 EC04                       	smpsPSGAlterVol     $04
00097CD6 E701                       	dc.b	smpsNoAttack, $01
00097CD8 EC07                       	smpsPSGAlterVol     $07
00097CDA E104                       	smpsAlterNote       $04
00097CDC 8001                       	dc.b	nRst, $01
00097CDE E103                       	smpsAlterNote       $03
00097CE0 01                         	dc.b	$01
00097CE1 E1FE                       	smpsAlterNote       $FE
00097CE3 01                         	dc.b	$01
00097CE4 E1FA                       	smpsAlterNote       $FA
00097CE6 01                         	dc.b	$01
00097CE7 E1FE                       	smpsAlterNote       $FE
00097CE9 01                         	dc.b	$01
00097CEA E101                       	smpsAlterNote       $01
00097CEC 01                         	dc.b	$01
00097CED E104                       	smpsAlterNote       $04
00097CEF 01                         	dc.b	$01
00097CF0 E101                       	smpsAlterNote       $01
00097CF2 01                         	dc.b	$01
00097CF3 E1FB                       	smpsAlterNote       $FB
00097CF5 01                         	dc.b	$01
00097CF6 E1FA                       	smpsAlterNote       $FA
00097CF8 01                         	dc.b	$01
00097CF9 E1FE                       	smpsAlterNote       $FE
00097CFB 01                         	dc.b	$01
00097CFC E103                       	smpsAlterNote       $03
00097CFE 0101                       	dc.b	$01, $01
00097D00 E101                       	smpsAlterNote       $01
00097D02 01                         	dc.b	$01
00097D03 E1FE                       	smpsAlterNote       $FE
00097D05 ECF5                       	smpsPSGAlterVol     $F5
00097D07 990D                       	dc.b	nC2, $0D
00097D09 E104                       	smpsAlterNote       $04
00097D0B EC0B                       	smpsPSGAlterVol     $0B
00097D0D 8001 01                    	dc.b	nRst, $01, $01
00097D10 E102                       	smpsAlterNote       $02
00097D12 01                         	dc.b	$01
00097D13 E1FC                       	smpsAlterNote       $FC
00097D15 0101                       	dc.b	$01, $01
00097D17 E102                       	smpsAlterNote       $02
00097D19 01                         	dc.b	$01
00097D1A E104                       	smpsAlterNote       $04
00097D1C 01                         	dc.b	$01
00097D1D E1FF                       	smpsAlterNote       $FF
00097D1F ECF5                       	smpsPSGAlterVol     $F5
00097D21 9B06                       	dc.b	nD2, $06
00097D23 EC04                       	smpsPSGAlterVol     $04
00097D25 E701                       	dc.b	smpsNoAttack, $01
00097D27 EC07                       	smpsPSGAlterVol     $07
00097D29 8003                       	dc.b	nRst, $03
00097D2B ECF5                       	smpsPSGAlterVol     $F5
00097D2D 9B07                       	dc.b	nD2, $07
00097D2F EC0B                       	smpsPSGAlterVol     $0B
00097D31 8006                       	dc.b	nRst, $06
00097D33 E101                       	smpsAlterNote       $01
00097D35 01                         	dc.b	$01
00097D36 E104                       	smpsAlterNote       $04
00097D38 0101                       	dc.b	$01, $01
00097D3A E1FE                       	smpsAlterNote       $FE
00097D3C 01                         	dc.b	$01
00097D3D E1FC                       	smpsAlterNote       $FC
00097D3F 01                         	dc.b	$01
00097D40 E1FE                       	smpsAlterNote       $FE
00097D42 ECF5                       	smpsPSGAlterVol     $F5
00097D44 9C06                       	dc.b	nEb2, $06
00097D46 EC0B                       	smpsPSGAlterVol     $0B
00097D48 8004                       	dc.b	nRst, $04
00097D4A ECF5                       	smpsPSGAlterVol     $F5
00097D4C 9C06                       	dc.b	nEb2, $06
00097D4E EC04                       	smpsPSGAlterVol     $04
00097D50 E701                       	dc.b	smpsNoAttack, $01
00097D52 EC07                       	smpsPSGAlterVol     $07
00097D54 8006                       	dc.b	nRst, $06
00097D56 E105                       	smpsAlterNote       $05
00097D58 01                         	dc.b	$01
00097D59 E106                       	smpsAlterNote       $06
00097D5B 01                         	dc.b	$01
00097D5C E102                       	smpsAlterNote       $02
00097D5E 01                         	dc.b	$01
00097D5F E1FB                       	smpsAlterNote       $FB
00097D61 01                         	dc.b	$01
00097D62 E1FF                       	smpsAlterNote       $FF
00097D64 ECF5                       	smpsPSGAlterVol     $F5
00097D66 9B06                       	dc.b	nD2, $06
00097D68 EC04                       	smpsPSGAlterVol     $04
00097D6A E701                       	dc.b	smpsNoAttack, $01
00097D6C EC07                       	smpsPSGAlterVol     $07
00097D6E 8003                       	dc.b	nRst, $03
00097D70 ECF5                       	smpsPSGAlterVol     $F5
00097D72 9B06                       	dc.b	nD2, $06
00097D74 EC04                       	smpsPSGAlterVol     $04
00097D76 E701                       	dc.b	smpsNoAttack, $01
00097D78 EC07                       	smpsPSGAlterVol     $07
00097D7A 8006                       	dc.b	nRst, $06
00097D7C E101                       	smpsAlterNote       $01
00097D7E 01                         	dc.b	$01
00097D7F E105                       	smpsAlterNote       $05
00097D81 01                         	dc.b	$01
00097D82 E104                       	smpsAlterNote       $04
00097D84 01                         	dc.b	$01
00097D85 E1FE                       	smpsAlterNote       $FE
00097D87 01                         	dc.b	$01
00097D88 ECF5                       	smpsPSGAlterVol     $F5
00097D8A 9C07                       	dc.b	nEb2, $07
00097D8C EC0B                       	smpsPSGAlterVol     $0B
00097D8E 8004                       	dc.b	nRst, $04
00097D90 ECF5                       	smpsPSGAlterVol     $F5
00097D92 9C06                       	dc.b	nEb2, $06
00097D94 EC0B                       	smpsPSGAlterVol     $0B
00097D96 8007                       	dc.b	nRst, $07
00097D98 E105                       	smpsAlterNote       $05
00097D9A 0101                       	dc.b	$01, $01
00097D9C E102                       	smpsAlterNote       $02
00097D9E 01                         	dc.b	$01
00097D9F E1FB                       	smpsAlterNote       $FB
00097DA1 01                         	dc.b	$01
00097DA2 E1FF                       	smpsAlterNote       $FF
00097DA4 ECF5                       	smpsPSGAlterVol     $F5
00097DA6 9B06                       	dc.b	nD2, $06
00097DA8 EC04                       	smpsPSGAlterVol     $04
00097DAA E701                       	dc.b	smpsNoAttack, $01
00097DAC EC07                       	smpsPSGAlterVol     $07
00097DAE 8003                       	dc.b	nRst, $03
00097DB0 ECF5                       	smpsPSGAlterVol     $F5
00097DB2 9B06                       	dc.b	nD2, $06
00097DB4 EC04                       	smpsPSGAlterVol     $04
00097DB6 E701                       	dc.b	smpsNoAttack, $01
00097DB8 EC07                       	smpsPSGAlterVol     $07
00097DBA 8006                       	dc.b	nRst, $06
00097DBC E101                       	smpsAlterNote       $01
00097DBE 01                         	dc.b	$01
00097DBF E105                       	smpsAlterNote       $05
00097DC1 01                         	dc.b	$01
00097DC2 E101                       	smpsAlterNote       $01
00097DC4 01                         	dc.b	$01
00097DC5 E1FC                       	smpsAlterNote       $FC
00097DC7 01                         	dc.b	$01
00097DC8 E1FE                       	smpsAlterNote       $FE
00097DCA ECF5                       	smpsPSGAlterVol     $F5
00097DCC 9C06                       	dc.b	nEb2, $06
00097DCE EC04                       	smpsPSGAlterVol     $04
00097DD0 E701                       	dc.b	smpsNoAttack, $01
00097DD2 EC07                       	smpsPSGAlterVol     $07
00097DD4 8003                       	dc.b	nRst, $03
00097DD6 ECF5                       	smpsPSGAlterVol     $F5
00097DD8 9C07                       	dc.b	nEb2, $07
00097DDA EC0B                       	smpsPSGAlterVol     $0B
00097DDC 8006                       	dc.b	nRst, $06
00097DDE E102                       	smpsAlterNote       $02
00097DE0 01                         	dc.b	$01
00097DE1 E105                       	smpsAlterNote       $05
00097DE3 0101                       	dc.b	$01, $01
00097DE5 E1FF                       	smpsAlterNote       $FF
00097DE7 01                         	dc.b	$01
00097DE8 ECF5                       	smpsPSGAlterVol     $F5
00097DEA 9B07                       	dc.b	nD2, $07
00097DEC EC0B                       	smpsPSGAlterVol     $0B
00097DEE 8004                       	dc.b	nRst, $04
00097DF0 ECF5                       	smpsPSGAlterVol     $F5
00097DF2 9B06                       	dc.b	nD2, $06
00097DF4 EC04                       	smpsPSGAlterVol     $04
00097DF6 E701                       	dc.b	smpsNoAttack, $01
00097DF8 EC07                       	smpsPSGAlterVol     $07
00097DFA 8002                       	dc.b	nRst, $02
00097DFC E1FC                       	smpsAlterNote       $FC
00097DFE ECF5                       	smpsPSGAlterVol     $F5
00097E00 9006                       	dc.b	nEb1, $06
00097E02 EC04                       	smpsPSGAlterVol     $04
00097E04 E701                       	dc.b	smpsNoAttack, $01
00097E06 ECFC                       	smpsPSGAlterVol     $FC
00097E08 8B03 9003                  	dc.b	nBb0, $03, nEb1, $03
00097E0C EC04                       	smpsPSGAlterVol     $04
00097E0E E701                       	dc.b	smpsNoAttack, $01
00097E10 E1FD                       	smpsAlterNote       $FD
00097E12 ECFC                       	smpsPSGAlterVol     $FC
00097E14 9402                       	dc.b	nG1, $02
00097E16 EC04                       	smpsPSGAlterVol     $04
00097E18 E701                       	dc.b	smpsNoAttack, $01
00097E1A E1FE                       	smpsAlterNote       $FE
00097E1C ECFC                       	smpsPSGAlterVol     $FC
00097E1E 9703 9703                  	dc.b	nBb1, $03, nBb1, $03
00097E22 EC04                       	smpsPSGAlterVol     $04
00097E24 E701                       	dc.b	smpsNoAttack, $01
00097E26 EC07                       	smpsPSGAlterVol     $07
00097E28 8008                       	dc.b	nRst, $08
00097E2A F6F4 F3                    	smpsJump            music84_Jump06
00097E2D                            
00097E2D                            ; PSG3 Data
00097E2D                            music84_PSG3:
00097E2D F500                       	smpsPSGvoice        $00
00097E2F E1FF                       	smpsAlterNote       $FF
00097E31 EC0F                       	smpsPSGAlterVol     $0F
00097E33 803A                       	dc.b	nRst, $3A
00097E35                            
00097E35                            music84_Jump05:
00097E35 8068 6868 6868 6868 6868+  	dc.b	nRst, $68, $68, $68, $68, $68, $68, $68, $68, $68, $68, $68
00097E41 6868 6868 6868 6868 6802   	dc.b	$68, $68, $68, $68, $68, $68, $68, $68, $68, $02
00097E4B F6FF E8                    	smpsJump            music84_Jump05
00097E4E                            
00097E4E                            ; DAC Data
00097E4E                            music84_DAC:
00097E4E E0C0                       	smpsPan             panCenter, $00
00097E50 8001 8203 8102 8101 8103+  	dc.b	nRst, $01, dSnare, $03, dKick, $02, dKick, $01, dKick, $03, dKick, $01
00097E5C 8203 8102 8101 8204 8103+  	dc.b	dSnare, $03, dKick, $02, dKick, $01, dSnare, $04, dKick, $03, dSnare, $07
00097E68 8104 8103 8104 8103 8104+  	dc.b	dKick, $04, dKick, $03, dKick, $04, dKick, $03, dKick, $04, dKick, $03
00097E74 8203 8107 8207 8106 8101+  	dc.b	dSnare, $03, dKick, $07, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03
00097E80 8107 8103 8207 8103 8104+  	dc.b	dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04, dSnare, $07
00097E8C 8107 8206 8107 8204 8107+  	dc.b	dKick, $07, dSnare, $06, dKick, $07, dSnare, $04, dKick, $07, dKick, $03
00097E98 8207 8103 8104 8207 8106+  	dc.b	dSnare, $07, dKick, $03, dKick, $04, dSnare, $07, dKick, $06, dKick, $01
00097EA4 8206 8107 8204 8106 8104+  	dc.b	dSnare, $06, dKick, $07, dSnare, $04, dKick, $06, dKick, $04, dSnare, $07
00097EB0 8103 8103 8101 8206 8107+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07, dSnare, $07
00097EBC 8107 8203 8107 8104 8206+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $06, dKick, $04
00097EC8 8103 8207 8107 8207 8107+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03
00097ED4 8107 8103 8101 8206 8104+  	dc.b	dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04, dKick, $03
00097EE0 8207 8107 8207 8106 8101+  	dc.b	dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03
00097EEC 8107 8103 8207 8103 8104+  	dc.b	dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04, dSnare, $07
00097EF8 8106 8101 8206 8107 8204+  	dc.b	dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04, dKick, $06
00097F04 8104 8207 8103 8104 8206+  	dc.b	dKick, $04, dSnare, $07, dKick, $03, dKick, $04, dSnare, $06, dKick, $07
00097F10 8207 8107 8203 8107 8202+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dSnare, $02, dKick, $02
00097F1C 8103 8207 8101 8101 8101+  	dc.b	dKick, $03, dSnare, $07, dKick, $01, dKick, $01, dKick, $01, dKick, $01
00097F28 8206 8107 8207 8107 8203+  	dc.b	dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07
00097F34 8103 8101 8206 8104 8103+  	dc.b	dKick, $03, dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07
00097F40 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
00097F4C 8207 8103 8101 8103 8207+  	dc.b	dSnare, $07, dKick, $03, dKick, $01, dKick, $03, dSnare, $07, dKick, $07
00097F58 8206 8101 8106 8204 8107+  	dc.b	dSnare, $06, dKick, $01, dKick, $06, dSnare, $04, dKick, $07, dKick, $03
00097F64 8207 8103 8104 8207 8106+  	dc.b	dSnare, $07, dKick, $03, dKick, $04, dSnare, $07, dKick, $06, dKick, $01
00097F70 8206 8107 8203 8101 8106+  	dc.b	dSnare, $06, dKick, $07, dSnare, $03, dKick, $01, dKick, $06, dKick, $04
00097F7C 8207 8103 8103 8101 8206+  	dc.b	dSnare, $07, dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07
00097F88 8207 8107 8203 8107 8104+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $06
00097F94 8104 8103 8207 8107 8207+  	dc.b	dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
00097FA0 8203 8107 8103 8101 8206+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04
00097FAC 8103 8207 8107 8207 8106+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01
00097FB8 8203 8107 8103 8207 8103+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
00097FC4 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04
00097FD0 8106 8104 8207 8104 8103+  	dc.b	dKick, $06, dKick, $04, dSnare, $07, dKick, $04, dKick, $03, dSnare, $07
00097FDC 8106 8207 8107 8203 8107+  	dc.b	dKick, $06, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04
00097FE8 8206 8101 8103 8103 8101+  	dc.b	dSnare, $06, dKick, $01, dKick, $03, dKick, $03, dKick, $01, dSnare, $06
00097FF4 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
00098000 8101 8206 8104 8103 8207+  	dc.b	dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $07
0009800C 8207 8106 8101 8203 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $03, dKick, $07, dKick, $03
00098018 8207 8103 8101 8103 8207+  	dc.b	dSnare, $07, dKick, $03, dKick, $01, dKick, $03, dSnare, $07, dKick, $07
00098024 8206 8107 8204 8107 8103+  	dc.b	dSnare, $06, dKick, $07, dSnare, $04, dKick, $07, dKick, $03, dSnare, $07
00098030 8103 8104 8207 8214 8204+  	dc.b	dKick, $03, dKick, $04, dSnare, $07, dSnare, $14, dSnare, $04, dSnare, $1B
0009803C 8203 8101 8214 8203 8207+  	dc.b	dSnare, $03, dKick, $01, dSnare, $14, dSnare, $03, dSnare, $07, dKick, $04
00098048 8206 8107 8207 8107 8207+  	dc.b	dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
00098054 8203 8107 8103 8101 8206+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04
00098060 8103 8207 8107 8207 8106+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01
0009806C 8203 8107 8103 8207 8103+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
00098078 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04
00098084 8106 8104 8207 8103 8104+  	dc.b	dKick, $06, dKick, $04, dSnare, $07, dKick, $03, dKick, $04, dSnare, $06
00098090 8107 8207 8107 8204 8207+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $04, dSnare, $07, dKick, $01
0009809C 8102 8104 8109 8101 8206+  	dc.b	dKick, $02, dKick, $04, dKick, $09, dKick, $01, dSnare, $06, dKick, $07
000980A8 8207 8107 8203 8107 8103+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dKick, $01
000980B4 8206 8104 8103 8207 8107+  	dc.b	dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07
000980C0 8107 8203 8107 8103 8207+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $04
000980CC 8103 8207 8107 8206 8101+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $06, dKick, $01, dKick, $06
000980D8 8204 8107 8103 8207 8103+  	dc.b	dSnare, $04, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
000980E4 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $03
000980F0 8101 8106 8104 8207 8103+  	dc.b	dKick, $01, dKick, $06, dKick, $04, dSnare, $07, dKick, $03, dKick, $03
000980FC 8101 8206 8107 8207 8107+  	dc.b	dKick, $01, dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03
00098108 8107 8104 8206 8104 8103+  	dc.b	dKick, $07, dKick, $04, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07
00098114 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
00098120 8101 8206 8104 8103 8207+  	dc.b	dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $03
0009812C 8104 8207 8106 8101 8203+  	dc.b	dKick, $04, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03, dKick, $07
00098138 8103 8208 8102 8104 8203+  	dc.b	dKick, $03, dSnare, $08, dKick, $02, dKick, $04, dSnare, $03, dKick, $04
00098144 8103 8103 8101 8203 8103+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $03, dKick, $03, dKick, $01
00098150 8203 8103 8202 8101 8202+  	dc.b	dSnare, $03, dKick, $03, dSnare, $02, dKick, $01, dSnare, $02, dSnare, $02
0009815C 8202 8201 8101 8201 8102+  	dc.b	dSnare, $02, dSnare, $01, dKick, $01, dSnare, $01, dKick, $02, dKick, $02
00098168 8102 8101 8102 8102 8102+  	dc.b	dKick, $02, dKick, $01, dKick, $02, dKick, $02, dKick, $02, dKick, $01
00098174 8102 8202 8102 8101 8101+  	dc.b	dKick, $02, dSnare, $02, dKick, $02, dKick, $01, dKick, $01, dKick, $07
00098180 8207 8107 8203 8107 8104+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $07
0009818C 8103 8103 8101 8206 8107+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07, dSnare, $07
00098198 8107 8203 8107 8103 8101+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06
000981A4 8104 8103 8207 8107 8207+  	dc.b	dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
000981B0 8203 8107 8103 8207 8104+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $04, dKick, $03
000981BC 8207 8107 8206 8107 8204+  	dc.b	dSnare, $07, dKick, $07, dSnare, $06, dKick, $07, dSnare, $04, dKick, $07
000981C8 8103 8207 8203 8204 8107+  	dc.b	dKick, $03, dSnare, $07, dSnare, $03, dSnare, $04, dKick, $07, dKick, $17
000981D4 E0C0                       	smpsPan             panCenter, $00
000981D6 F2                         	smpsStop
000981D7                            
000981D7                            music84_Voices:
000981D7                            ;	Voice $00
000981D7                            ;	$3D
000981D7                            ;	$41, $31, $41, $51, 	$11, $11, $11, $11, 	$0A, $00, $00, $00
000981D7                            ;	$0B, $00, $00, $00, 	$F7, $F8, $F8, $F8, 	$1A, $14, $20, $14
000981D7                            	smpsVcAlgorithm     $05
000981D7                            	smpsVcFeedback      $07
000981D7                            	smpsVcUnusedBits    $00
000981D7                            	smpsVcDetune        $05, $04, $03, $04
000981D7                            	smpsVcCoarseFreq    $01, $01, $01, $01
000981D7                            	smpsVcRateScale     $00, $00, $00, $00
000981D7                            	smpsVcAttackRate    $11, $11, $11, $11
000981D7                            	smpsVcAmpMod        $00, $00, $00, $00
000981D7                            	smpsVcDecayRate1    $00, $00, $00, $0A
000981D7                            	smpsVcDecayRate2    $00, $00, $00, $0B
000981D7                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000981D7                            	smpsVcReleaseRate   $08, $08, $08, $07
000981D7 3D41 3141 5111 1111 110A+  	smpsVcTotalLevel    $14, $20, $14, $1A
000981F0                            
000981F0                            ;	Voice $01
000981F0                            ;	$04
000981F0                            ;	$5A, $41, $3A, $41, 	$5F, $1F, $5F, $1F, 	$00, $0E, $00, $0E
000981F0                            ;	$00, $05, $00, $05, 	$E6, $86, $E6, $86, 	$19, $10, $19, $10
000981F0                            	smpsVcAlgorithm     $04
000981F0                            	smpsVcFeedback      $00
000981F0                            	smpsVcUnusedBits    $00
000981F0                            	smpsVcDetune        $04, $03, $04, $05
000981F0                            	smpsVcCoarseFreq    $01, $0A, $01, $0A
000981F0                            	smpsVcRateScale     $00, $01, $00, $01
000981F0                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000981F0                            	smpsVcAmpMod        $00, $00, $00, $00
000981F0                            	smpsVcDecayRate1    $0E, $00, $0E, $00
000981F0                            	smpsVcDecayRate2    $05, $00, $05, $00
000981F0                            	smpsVcDecayLevel    $08, $0E, $08, $0E
000981F0                            	smpsVcReleaseRate   $06, $06, $06, $06
000981F0 045A 413A 415F 1F5F 1F00+  	smpsVcTotalLevel    $10, $19, $10, $19
00098209                            
00098209                            ;	Voice $02
00098209                            ;	$30
00098209                            ;	$6C, $03, $21, $41, 	$14, $1F, $1F, $1F, 	$0D, $0C, $0E, $01
00098209                            ;	$01, $01, $01, $01, 	$FF, $C8, $BB, $89, 	$24, $27, $14, $10
00098209                            	smpsVcAlgorithm     $00
00098209                            	smpsVcFeedback      $06
00098209                            	smpsVcUnusedBits    $00
00098209                            	smpsVcDetune        $04, $02, $00, $06
00098209                            	smpsVcCoarseFreq    $01, $01, $03, $0C
00098209                            	smpsVcRateScale     $00, $00, $00, $00
00098209                            	smpsVcAttackRate    $1F, $1F, $1F, $14
00098209                            	smpsVcAmpMod        $00, $00, $00, $00
00098209                            	smpsVcDecayRate1    $01, $0E, $0C, $0D
00098209                            	smpsVcDecayRate2    $01, $01, $01, $01
00098209                            	smpsVcDecayLevel    $08, $0B, $0C, $0F
00098209                            	smpsVcReleaseRate   $09, $0B, $08, $0F
00098209 306C 0321 4114 1F1F 1F0D+  	smpsVcTotalLevel    $10, $14, $27, $24
00098222                            
00098222                            ;	Voice $03
00098222                            ;	$3A
00098222                            ;	$01, $21, $61, $41, 	$14, $14, $19, $18, 	$09, $09, $0D, $09
00098222                            ;	$00, $00, $00, $00, 	$F7, $BF, $FF, $E8, 	$26, $16, $1E, $10
00098222                            	smpsVcAlgorithm     $02
00098222                            	smpsVcFeedback      $07
00098222                            	smpsVcUnusedBits    $00
00098222                            	smpsVcDetune        $04, $06, $02, $00
00098222                            	smpsVcCoarseFreq    $01, $01, $01, $01
00098222                            	smpsVcRateScale     $00, $00, $00, $00
00098222                            	smpsVcAttackRate    $18, $19, $14, $14
00098222                            	smpsVcAmpMod        $00, $00, $00, $00
00098222                            	smpsVcDecayRate1    $09, $0D, $09, $09
00098222                            	smpsVcDecayRate2    $00, $00, $00, $00
00098222                            	smpsVcDecayLevel    $0E, $0F, $0B, $0F
00098222                            	smpsVcReleaseRate   $08, $0F, $0F, $07
00098222 3A01 2161 4114 1419 1809+  	smpsVcTotalLevel    $10, $1E, $16, $26
0009823B                            
0009823B                            ;	Voice $04
0009823B                            ;	$3C
0009823B                            ;	$3A, $02, $00, $70, 	$1F, $10, $1F, $10, 	$00, $00, $00, $00
0009823B                            ;	$00, $00, $00, $00, 	$F2, $FA, $F2, $FA, 	$30, $1F, $24, $18
0009823B                            	smpsVcAlgorithm     $04
0009823B                            	smpsVcFeedback      $07
0009823B                            	smpsVcUnusedBits    $00
0009823B                            	smpsVcDetune        $07, $00, $00, $03
0009823B                            	smpsVcCoarseFreq    $00, $00, $02, $0A
0009823B                            	smpsVcRateScale     $00, $00, $00, $00
0009823B                            	smpsVcAttackRate    $10, $1F, $10, $1F
0009823B                            	smpsVcAmpMod        $00, $00, $00, $00
0009823B                            	smpsVcDecayRate1    $00, $00, $00, $00
0009823B                            	smpsVcDecayRate2    $00, $00, $00, $00
0009823B                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
0009823B                            	smpsVcReleaseRate   $0A, $02, $0A, $02
0009823B 3C3A 0200 701F 101F 1000+  	smpsVcTotalLevel    $18, $24, $1F, $30
00098254                            
00098254                            ;	Voice $05
00098254                            ;	$38
00098254                            ;	$00, $21, $61, $41, 	$10, $1F, $1F, $1F, 	$17, $00, $03, $00
00098254                            ;	$0B, $08, $08, $00, 	$A5, $F5, $F5, $F8, 	$1D, $10, $11, $14
00098254                            	smpsVcAlgorithm     $00
00098254                            	smpsVcFeedback      $07
00098254                            	smpsVcUnusedBits    $00
00098254                            	smpsVcDetune        $04, $06, $02, $00
00098254                            	smpsVcCoarseFreq    $01, $01, $01, $00
00098254                            	smpsVcRateScale     $00, $00, $00, $00
00098254                            	smpsVcAttackRate    $1F, $1F, $1F, $10
00098254                            	smpsVcAmpMod        $00, $00, $00, $00
00098254                            	smpsVcDecayRate1    $00, $03, $00, $17
00098254                            	smpsVcDecayRate2    $00, $08, $08, $0B
00098254                            	smpsVcDecayLevel    $0F, $0F, $0F, $0A
00098254                            	smpsVcReleaseRate   $08, $05, $05, $05
00098254 3800 2161 4110 1F1F 1F17+  	smpsVcTotalLevel    $14, $11, $10, $1D
0009826D                            
0009826D                            
0009826E 00                         		even
0009826E                            Music85:	incbin	sound\glass2.bin ; Spring Yard Act 1
0009C47E                            		even
0009C47E                            Music86:	incbin	sound\music86.bin; Scrap Brain Act 1
0009FFD6 00                         		even
0009FFD6                            Music87:	include	sound\music87.asm; Invincibility
0009FFD6                            triple_Header:
0009FFD6 =00000001                  smpsHeaderStartSong = 1
0009FFD6 0000                       	smpsHeaderVoice     triple_Voices
0009FFD8 0501                       	smpsHeaderChan      $05, $01
0009FFDA 0200                       	smpsHeaderTempo     $02, $00
0009FFDC                            
0009FFE0 0000 F40A                  	smpsHeaderFM        triple_FM1,	$F4, $0A
0009FFE4 0000 000F                  	smpsHeaderFM        triple_FM2,	$00, $0F
0009FFE8 0000 000B                  	smpsHeaderFM        triple_FM3,	$00, $0B
0009FFEC 0000 0013                  	smpsHeaderFM        triple_FM4,	$00, $13
0009FFF0 0000 0C01 0000             	smpsHeaderPSG       triple_PSG1,	$0C, $01, $00, $00
0009FFF6                            
0009FFF6                            ; DAC Data
0009FFF6                            triple_DAC:
0009FFF6 E0C0                       	smpsPan             panCenter, $00
0009FFF8 8203 0381 8182             	dc.b	dSnare, $03, $03, dKick, dKick, dSnare
0009FFFE                            
0009FFFE                            triple_Loop01:
0009FFFE 8282 82                    	dc.b	dSnare, dSnare, dSnare
000A0001                            
000A0001                            triple_Loop00:
000A0001 8106 8281 8281 8203 8106+  	dc.b	dKick, $06, dSnare, dKick, dSnare, dKick, dSnare, $03, dKick, $06, $03, dSnare
000A000D 06                         	dc.b	$06
000A000E F700 08FF EF               	smpsLoop            $00, $08, triple_Loop00
000A0013 810C 8209 0981 0682 0903+  	dc.b	dKick, $0C, dSnare, $09, $09, dKick, $06, dSnare, $09, $03, dKick, $0C
000A001F 8209 0981 0682 03          	dc.b	dSnare, $09, $09, dKick, $06, dSnare, $03
000A0026 F701 02FF D4               	smpsLoop            $01, $02, triple_Loop01
000A002B 0303 1B                    	dc.b	$03, $03, $1B
000A002E E0C0                       	smpsPan             panCenter, $00
000A0030 F6FF C4                    	smpsJump triple_DAC
000A0033                            
000A0033                            ; FM1 Data
000A0033                            triple_FM1:
000A0033 E0C0                       	smpsPan             panCenter, $00
000A0037 8018                       	dc.b	nRst, $18
000A0039                            
000A0039                            triple_Loop0B:
000A0039 AC06 B8                    	dc.b	nG3, $06, nG4
000A003C F700 04FF F9               	smpsLoop            $00, $04, triple_Loop0B
000A0041                            
000A0041                            triple_Loop0C:
000A0041 A7B3                       	dc.b	nD3, nD4
000A0043 F700 04FF FA               	smpsLoop            $00, $04, triple_Loop0C
000A0048                            
000A0048                            triple_Loop0D:
000A0048 A9B5                       	dc.b	nE3, nE4
000A004A F700 04FF FA               	smpsLoop            $00, $04, triple_Loop0D
000A004F A5B1 A5B1 A7B3 A7B3        	dc.b	nC3, nC4, nC3, nC4, nD3, nD4, nD3, nD4
000A0057 F701 02FF DE               	smpsLoop            $01, $02, triple_Loop0B
000A005C A4B0 A4B0 A0AC A0AC A203+  	dc.b	nB2, nB3, nB2, nB3, nG2, nG3, nG2, nG3, nA2, $03, nRst, nA3
000A0068 80A6 80B2 80A4 A6A7 A9A6+  	dc.b	nRst, nCs3, nRst, nCs4, nRst, nB2, nCs3, nD3, nE3, nCs3, nEb3, nF3
000A0074 AD                         	dc.b	nAb3
000A0075 F702 02FF C0               	smpsLoop            $02, $02, triple_Loop0B
000A007A 8018                       	dc.b	nRst, $18
000A007C E0C0                       	smpsPan             panCenter, $00
000A0080 F6FF B1                    	smpsJump triple_FM1
000A0083                            
000A0083                            ; FM2 Data
000A0083                            triple_FM2:
000A0083 E0C0                       	smpsPan             panCenter, $00
000A0087 8018                       	dc.b	nRst, $18
000A0089                            
000A0089                            triple_Loop07:
000A0089 C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
000A0095 C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
000A00A1 F700 02FF E4               	smpsLoop            $00, $02, triple_Loop07
000A00A6 8003                       	dc.b	nRst, $03
000A00A8                            
000A00A8                            triple_Loop08:
000A00A8 B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
000A00AE F700 03FF F6               	smpsLoop            $00, $03, triple_Loop08
000A00B3 B809 BC03 8009             	dc.b	nG4, $09, nB4, $03, nRst, $09
000A00B9                            
000A00B9                            triple_Loop09:
000A00B9 C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
000A00C5 C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
000A00D1 F700 02FF E4               	smpsLoop            $00, $02, triple_Loop09
000A00D6 8003                       	dc.b	nRst, $03
000A00D8                            
000A00D8                            triple_Loop0A:
000A00D8 B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
000A00DE F700 03FF F6               	smpsLoop            $00, $03, triple_Loop0A
000A00E3 B809 BC03 8021             	dc.b	nG4, $09, nB4, $03, nRst, $21
000A00E9 E0C0                       	smpsPan             panCenter, $00
000A00ED F6FF 94                    	smpsJump triple_FM2
000A00F0                            
000A00F0                            ; FM3 Data
000A00F0                            triple_FM3:
000A00F0 E0C0                       	smpsPan             panCenter, $00
000A00F4 8018                       	dc.b	nRst, $18
000A00F6                            
000A00F6                            triple_Loop06:
000A00F6 B830 B7B8 36B3 2A          	dc.b	nG4, $30, nFs4, nG4, $36, nD4, $2A
000A00FD F700 02FF F5               	smpsLoop            $00, $02, triple_Loop06
000A0102 8030 B802 BABC BDBF C1BA+  	dc.b	nRst, $30, nG4, $02, nA4, nB4, nC5, nD5, nE5, nA4, nB4, nCs5
000A010E BFC1 C3BC BEC0 C1C3 C5BE+  	dc.b	nD5, nE5, nFs5, nB4, nCs5, nEb5, nE5, nFs5, nAb5, nCs5, nEb5, nF5
000A011A C3C5 C7                    	dc.b	nFs5, nAb5, nBb5
000A011D F701 02FF D5               	smpsLoop            $01, $02, triple_Loop06
000A0122 8018                       	dc.b	nRst, $18
000A0124 E0C0                       	smpsPan             panCenter, $00
000A0128 F6FF C6                    	smpsJump triple_FM3
000A012B                            
000A012B                            ; FM4 Data
000A012B                            triple_FM4:
000A012B E103                       	smpsAlterNote       $03
000A012F E0C0                       	smpsPan             panCenter, $00
000A0131 8018                       	dc.b	nRst, $18
000A0133                            
000A0133                            triple_Loop02:
000A0133 C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
000A013F C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
000A014B F700 02FF E4               	smpsLoop            $00, $02, triple_Loop02
000A0150 8003                       	dc.b	nRst, $03
000A0152                            
000A0152                            triple_Loop03:
000A0152 B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
000A0158 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop03
000A015D B809 BC03 8009             	dc.b	nG4, $09, nB4, $03, nRst, $09
000A0163                            
000A0163                            triple_Loop04:
000A0163 C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
000A016F C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
000A017B F700 02FF E4               	smpsLoop            $00, $02, triple_Loop04
000A0180 8003                       	dc.b	nRst, $03
000A0182                            
000A0182                            triple_Loop05:
000A0182 B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
000A0188 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop05
000A018D B809 BC03 8021             	dc.b	nG4, $09, nB4, $03, nRst, $21
000A0193 E0C0                       	smpsPan             panCenter, $00
000A0195 F6FF 94                    	smpsJump triple_FM4
000A0198                            
000A0198                            ; PSG1 Data
000A0198                            triple_PSG1:
000A0198 8018                       	dc.b	nRst, $18
000A019A                            
000A019A                            triple_Loop0E:
000A019A A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
000A01A6 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
000A01B2 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
000A01BE 9402 8004                  	dc.b	nG1, $02, nRst, $04
000A01C2 F700 07FF D4               	smpsLoop            $00, $07, triple_Loop0E
000A01C7 A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
000A01D3 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
000A01DF 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
000A01EB 9402 8007                  	dc.b	nG1, $02, nRst, $07
000A01EF                            
000A01EF                            triple_Loop0F:
000A01EF 9109 9403 800C             	dc.b	nE1, $09, nG1, $03, nRst, $0C
000A01F5 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop0F
000A01FA 9109 9403 8009             	dc.b	nE1, $09, nG1, $03, nRst, $09
000A0200                            
000A0200                            triple_Loop10:
000A0200 A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
000A020C 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
000A0218 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
000A0224 9402 8004                  	dc.b	nG1, $02, nRst, $04
000A0228 F700 07FF D4               	smpsLoop            $00, $07, triple_Loop10
000A022D A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
000A0239 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
000A0245 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
000A0251 9402 8007                  	dc.b	nG1, $02, nRst, $07
000A0255                            
000A0255                            triple_Loop11:
000A0255 9109 9403 800C             	dc.b	nE1, $09, nG1, $03, nRst, $0C
000A025B F700 03FF F6               	smpsLoop            $00, $03, triple_Loop11
000A0260 9109 9403 8021             	dc.b	nE1, $09, nG1, $03, nRst, $21
000A0266 F500                       	smpsPSGvoice        $00
000A0268 F6FF 2E                    	smpsJump triple_PSG1
000A026B                            
000A026B                            triple_Voices:
000A026B                            ;	Voice $00
000A026B                            ;	$3A
000A026B                            ;	$01, $07, $01, $01, 	$8E, $8E, $8D, $53, 	$0E, $0E, $0E, $03
000A026B                            ;	$00, $00, $00, $00, 	$1F, $FF, $1F, $0F, 	$18, $28, $27, $80
000A026B                            	smpsVcAlgorithm     $02
000A026B                            	smpsVcFeedback      $07
000A026B                            	smpsVcUnusedBits    $00
000A026B                            	smpsVcDetune        $00, $00, $00, $00
000A026B                            	smpsVcCoarseFreq    $01, $01, $07, $01
000A026B                            	smpsVcRateScale     $01, $02, $02, $02
000A026B                            	smpsVcAttackRate    $13, $0D, $0E, $0E
000A026B                            	smpsVcAmpMod        $00, $00, $00, $00
000A026B                            	smpsVcDecayRate1    $03, $0E, $0E, $0E
000A026B                            	smpsVcDecayRate2    $00, $00, $00, $00
000A026B                            	smpsVcDecayLevel    $00, $01, $0F, $01
000A026B                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000A026B 3A01 0701 018E 8E8D 530E+  	smpsVcTotalLevel    $00, $27, $28, $18
000A0284                            
000A0284                            ;	Voice $01
000A0284                            ;	$20
000A0284                            ;	$7A, $31, $00, $00, 	$9F, $D8, $DC, $DF, 	$10, $0A, $04, $04
000A0284                            ;	$0F, $08, $08, $08, 	$5F, $5F, $BF, $BF, 	$14, $2B, $17, $80
000A0284                            	smpsVcAlgorithm     $00
000A0284                            	smpsVcFeedback      $04
000A0284                            	smpsVcUnusedBits    $00
000A0284                            	smpsVcDetune        $00, $00, $03, $07
000A0284                            	smpsVcCoarseFreq    $00, $00, $01, $0A
000A0284                            	smpsVcRateScale     $03, $03, $03, $02
000A0284                            	smpsVcAttackRate    $1F, $1C, $18, $1F
000A0284                            	smpsVcAmpMod        $00, $00, $00, $00
000A0284                            	smpsVcDecayRate1    $04, $04, $0A, $10
000A0284                            	smpsVcDecayRate2    $08, $08, $08, $0F
000A0284                            	smpsVcDecayLevel    $0B, $0B, $05, $05
000A0284                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000A0284 207A 3100 009F D8DC DF10+  	smpsVcTotalLevel    $00, $17, $2B, $14
000A0284 207A 3100 009F D8DC DF10+  	smpsVcTotalLevel    $00, $17, $2B, $14
000A029E 00                         		even
000A029E                            Music88:	incbin	sound\music88.bin; Extra Life
000A038C                            		even
000A038C                            Music89:	incbin	sound\music89.bin; Special Stage
000A4254 00                         		even
000A4254                            Music8A:	incbin	sound\music8A.bin; Title Screen
000A441E                            		even
000A441E                            Music8B:	incbin	sound\music8B.bin; Ending Theme
000A46B8                            		even
000A46B8                            Music8C:	incbin	sound\music8C.bin; VS Boss
000A4956                            		even
000A4956                            Music8D:	incbin	sound\music8D.bin; Final Zone
000A4B72                            		even
000A4B72                            Music8E:	include	sound\merry.asm ; Act Clear
000A4B72 =0000008B                  dMerryWtf1 = dVLowTimpani ; $87
000A4B72 =0000008A                  dMerryWtf2 = dLowTimpani  ; $85
000A4B72 =0000008B                  dMerryWtf3 = dVLowTimpani ; $84
000A4B72 =0000008A                  dMerryClap = dLowTimpani
000A4B72                            
000A4B72                            MerrysLittleLamb_Header:
000A4B72 0000                       	smpsHeaderVoice     MerrysLittleLamb_Voices
000A4B74 0603                       	smpsHeaderChan      $06, $03
000A4B76 0100                       	smpsHeaderTempo     $01, $00
000A4B78                            
000A4B7C 0000 0000                  	smpsHeaderFM        MerrysLittleLamb_FM1,	$00, $00
000A4B80 0000 0000                  	smpsHeaderFM        MerrysLittleLamb_FM2,	$00, $00
000A4B84 0000 0000                  	smpsHeaderFM        MerrysLittleLamb_FM3,	$00, $00
000A4B88 0000 0000                  	smpsHeaderFM        MerrysLittleLamb_FM4,	$00, $00
000A4B8C 0000 0000                  	smpsHeaderFM        MerrysLittleLamb_FM5,	$00, $00
000A4B90 0000 0000 0000             	smpsHeaderPSG       MerrysLittleLamb_PSG1,	$00, $00, $00, $00
000A4B96 0000 0000 0000             	smpsHeaderPSG       MerrysLittleLamb_PSG2,	$00, $00, $00, $00
000A4B9C 0000 0000 0000             	smpsHeaderPSG       MerrysLittleLamb_PSG3,	$00, $00, $00, $00
000A4BA2                            
000A4BA2                            MerrysLittleLamb_FM1:
000A4BA2 E0C0                       	smpsPan             panCenter, $00
000A4BA4 807F 7F7F 20               	dc.b	nRst, $7F, $7F, $7F, $20
000A4BAB E60F                       	smpsAlterVol        $0F
000A4BAD A704                       	dc.b	nD3, $04
000A4BAF E606                       	smpsAlterVol        $06
000A4BB1 A705 A7A7 04               	dc.b	nD3, $05, nD3, nD3, $04
000A4BB6 E6FA                       	smpsAlterVol        $FA
000A4BB8 A705                       	dc.b	nD3, $05
000A4BBA E606                       	smpsAlterVol        $06
000A4BBC A704 A705 A7               	dc.b	nD3, $04, nD3, $05, nD3
000A4BC1 E6FA                       	smpsAlterVol        $FA
000A4BC3 A704                       	dc.b	nD3, $04
000A4BC5 E606                       	smpsAlterVol        $06
000A4BC7 A705 A704 A705             	dc.b	nD3, $05, nD3, $04, nD3, $05
000A4BCD E6FA                       	smpsAlterVol        $FA
000A4BCF A7                         	dc.b	nD3
000A4BD0 E606                       	smpsAlterVol        $06
000A4BD2 A704 A705 A7               	dc.b	nD3, $04, nD3, $05, nD3
000A4BD7 E6FA                       	smpsAlterVol        $FA
000A4BD9 A704                       	dc.b	nD3, $04
000A4BDB E606                       	smpsAlterVol        $06
000A4BDD A705 A704 A705             	dc.b	nD3, $05, nD3, $04, nD3, $05
000A4BE3 E6FA                       	smpsAlterVol        $FA
000A4BE5 A7                         	dc.b	nD3
000A4BE6 E606                       	smpsAlterVol        $06
000A4BE8 A704 A705 A704             	dc.b	nD3, $04, nD3, $05, nD3, $04
000A4BEE E6FA                       	smpsAlterVol        $FA
000A4BF0 A705                       	dc.b	nD3, $05
000A4BF2 E606                       	smpsAlterVol        $06
000A4BF4 A7A7 04A7 05               	dc.b	nD3, nD3, $04, nD3, $05
000A4BF9 E6FA                       	smpsAlterVol        $FA
000A4BFB A7                         	dc.b	nD3
000A4BFC E606                       	smpsAlterVol        $06
000A4BFE A704 A705 A704             	dc.b	nD3, $04, nD3, $05, nD3, $04
000A4C04 E6FA                       	smpsAlterVol        $FA
000A4C06 A705                       	dc.b	nD3, $05
000A4C08 E606                       	smpsAlterVol        $06
000A4C0A A7A7 04A7 05               	dc.b	nD3, nD3, $04, nD3, $05
000A4C0F E6FA                       	smpsAlterVol        $FA
000A4C11 A704                       	dc.b	nD3, $04
000A4C13 E606                       	smpsAlterVol        $06
000A4C15 A705 A7A7 04               	dc.b	nD3, $05, nD3, nD3, $04
000A4C1A E6FA                       	smpsAlterVol        $FA
000A4C1C A705                       	dc.b	nD3, $05
000A4C1E E606                       	smpsAlterVol        $06
000A4C20 A704 A705 A7               	dc.b	nD3, $04, nD3, $05, nD3
000A4C25 E6FA                       	smpsAlterVol        $FA
000A4C27 A704                       	dc.b	nD3, $04
000A4C29 E606                       	smpsAlterVol        $06
000A4C2B A705 A7A7 04               	dc.b	nD3, $05, nD3, nD3, $04
000A4C30 E6FA                       	smpsAlterVol        $FA
000A4C32 A705                       	dc.b	nD3, $05
000A4C34 E606                       	smpsAlterVol        $06
000A4C36 A704 A705 A7               	dc.b	nD3, $04, nD3, $05, nD3
000A4C3B E6FA                       	smpsAlterVol        $FA
000A4C3D A704                       	dc.b	nD3, $04
000A4C3F E606                       	smpsAlterVol        $06
000A4C41 A705 A704 A705             	dc.b	nD3, $05, nD3, $04, nD3, $05
000A4C47 E6FA                       	smpsAlterVol        $FA
000A4C49 A7                         	dc.b	nD3
000A4C4A E606                       	smpsAlterVol        $06
000A4C4C A704 A705 A704             	dc.b	nD3, $04, nD3, $05, nD3, $04
000A4C52 E6FA                       	smpsAlterVol        $FA
000A4C54 A705                       	dc.b	nD3, $05
000A4C56 E606                       	smpsAlterVol        $06
000A4C58 A7A7 04A7 05               	dc.b	nD3, nD3, $04, nD3, $05
000A4C5D E6FA                       	smpsAlterVol        $FA
000A4C5F A7                         	dc.b	nD3
000A4C60 E606                       	smpsAlterVol        $06
000A4C62 A704 A705 A704             	dc.b	nD3, $04, nD3, $05, nD3, $04
000A4C68 E6FA                       	smpsAlterVol        $FA
000A4C6A A705                       	dc.b	nD3, $05
000A4C6C E606                       	smpsAlterVol        $06
000A4C6E A7A7 04A7 05               	dc.b	nD3, nD3, $04, nD3, $05
000A4C73 E6FA                       	smpsAlterVol        $FA
000A4C75 A704                       	dc.b	nD3, $04
000A4C77 E606                       	smpsAlterVol        $06
000A4C79 A705 A7A7 04               	dc.b	nD3, $05, nD3, nD3, $04
000A4C7E E6FA                       	smpsAlterVol        $FA
000A4C80 A705                       	dc.b	nD3, $05
000A4C82 E606                       	smpsAlterVol        $06
000A4C84 A7A7 04A7 05               	dc.b	nD3, nD3, $04, nD3, $05
000A4C89 E6FA                       	smpsAlterVol        $FA
000A4C8B A704                       	dc.b	nD3, $04
000A4C8D E606                       	smpsAlterVol        $06
000A4C8F A705 A7A7 04               	dc.b	nD3, $05, nD3, nD3, $04
000A4C94 E6FA                       	smpsAlterVol        $FA
000A4C96 A705                       	dc.b	nD3, $05
000A4C98 E606                       	smpsAlterVol        $06
000A4C9A A704 A705 A7               	dc.b	nD3, $04, nD3, $05, nD3
000A4C9F E6FA                       	smpsAlterVol        $FA
000A4CA1 A704                       	dc.b	nD3, $04
000A4CA3 E606                       	smpsAlterVol        $06
000A4CA5 A705 A704 A705             	dc.b	nD3, $05, nD3, $04, nD3, $05
000A4CAB E6FA                       	smpsAlterVol        $FA
000A4CAD A7                         	dc.b	nD3
000A4CAE E606                       	smpsAlterVol        $06
000A4CB0 A704 A705 A7               	dc.b	nD3, $04, nD3, $05, nD3
000A4CB5 E6FA                       	smpsAlterVol        $FA
000A4CB7 A704                       	dc.b	nD3, $04
000A4CB9 E606                       	smpsAlterVol        $06
000A4CBB A705 A704 A705             	dc.b	nD3, $05, nD3, $04, nD3, $05
000A4CC1 E6FA                       	smpsAlterVol        $FA
000A4CC3 A7                         	dc.b	nD3
000A4CC4 E606                       	smpsAlterVol        $06
000A4CC6 A704 A705 A704             	dc.b	nD3, $04, nD3, $05, nD3, $04
000A4CCC E6FA                       	smpsAlterVol        $FA
000A4CCE A705                       	dc.b	nD3, $05
000A4CD0 E606                       	smpsAlterVol        $06
000A4CD2 A7A7 04A7 05               	dc.b	nD3, nD3, $04, nD3, $05
000A4CD7 E6FA                       	smpsAlterVol        $FA
000A4CD9 A704                       	dc.b	nD3, $04
000A4CDB E606                       	smpsAlterVol        $06
000A4CDD A705 A7A7 04               	dc.b	nD3, $05, nD3, nD3, $04
000A4CE2 E6FA                       	smpsAlterVol        $FA
000A4CE4 A705                       	dc.b	nD3, $05
000A4CE6 E606                       	smpsAlterVol        $06
000A4CE8 A7A7 04A7 05               	dc.b	nD3, nD3, $04, nD3, $05
000A4CED E6FA                       	smpsAlterVol        $FA
000A4CEF A704                       	dc.b	nD3, $04
000A4CF1 E606                       	smpsAlterVol        $06
000A4CF3 A705 A7A7 04               	dc.b	nD3, $05, nD3, nD3, $04
000A4CF8 E6FA                       	smpsAlterVol        $FA
000A4CFA A705                       	dc.b	nD3, $05
000A4CFC E606                       	smpsAlterVol        $06
000A4CFE A704 A705 A7               	dc.b	nD3, $04, nD3, $05, nD3
000A4D03 E6FA                       	smpsAlterVol        $FA
000A4D05 A704                       	dc.b	nD3, $04
000A4D07 E606                       	smpsAlterVol        $06
000A4D09 A705 A7A7 7FE7 19          	dc.b	nD3, $05, nD3, nD3, $7F, smpsNoAttack, $19
000A4D10 F2                         	smpsStop
000A4D11                            
000A4D11                            MerrysLittleLamb_FM2:
000A4D11 E0C0                       	smpsPan             panCenter, $00
000A4D13 807F 7F7F 7F30             	dc.b	nRst, $7F, $7F, $7F, $7F, $30
000A4D1B E610                       	smpsAlterVol        $10
000A4D1D A87F E719 807F 7F7F 3E     	dc.b	nEb3, $7F, smpsNoAttack, $19, nRst, $7F, $7F, $7F, $3E
000A4D26                            
000A4D26                            MerrysLittleLamb_FM3:
000A4D26                            MerrysLittleLamb_FM4:
000A4D26                            MerrysLittleLamb_FM5:
000A4D26 F2                         	smpsStop
000A4D27                            
000A4D27                            MerrysLittleLamb_PSG1:
000A4D27 807F 7F7F 7F06 B701        	dc.b	nRst, $7F, $7F, $7F, $7F, $06, nFs4, $01
000A4D2F EC02                       	smpsPSGAlterVol     $02
000A4D31 B7                         	dc.b	nFs4
000A4D32 EC03                       	smpsPSGAlterVol     $03
000A4D34 B7                         	dc.b	nFs4
000A4D35 EC03                       	smpsPSGAlterVol     $03
000A4D37 B7                         	dc.b	nFs4
000A4D38 EC03                       	smpsPSGAlterVol     $03
000A4D3A B7                         	dc.b	nFs4
000A4D3B ECF5                       	smpsPSGAlterVol     $F5
000A4D3D B7                         	dc.b	nFs4
000A4D3E EC02                       	smpsPSGAlterVol     $02
000A4D40 B7                         	dc.b	nFs4
000A4D41 EC03                       	smpsPSGAlterVol     $03
000A4D43 B7                         	dc.b	nFs4
000A4D44 EC03                       	smpsPSGAlterVol     $03
000A4D46 B7                         	dc.b	nFs4
000A4D47 ECF8                       	smpsPSGAlterVol     $F8
000A4D49 B7                         	dc.b	nFs4
000A4D4A EC02                       	smpsPSGAlterVol     $02
000A4D4C B7                         	dc.b	nFs4
000A4D4D EC03                       	smpsPSGAlterVol     $03
000A4D4F B7                         	dc.b	nFs4
000A4D50 EC03                       	smpsPSGAlterVol     $03
000A4D52 B7                         	dc.b	nFs4
000A4D53 EC03                       	smpsPSGAlterVol     $03
000A4D55 B7                         	dc.b	nFs4
000A4D56 ECF5                       	smpsPSGAlterVol     $F5
000A4D58 B7                         	dc.b	nFs4
000A4D59 EC02                       	smpsPSGAlterVol     $02
000A4D5B B7                         	dc.b	nFs4
000A4D5C EC03                       	smpsPSGAlterVol     $03
000A4D5E B7                         	dc.b	nFs4
000A4D5F EC03                       	smpsPSGAlterVol     $03
000A4D61 B7                         	dc.b	nFs4
000A4D62 EC03                       	smpsPSGAlterVol     $03
000A4D64 B7                         	dc.b	nFs4
000A4D65 ECF5                       	smpsPSGAlterVol     $F5
000A4D67 B7                         	dc.b	nFs4
000A4D68 EC02                       	smpsPSGAlterVol     $02
000A4D6A B7                         	dc.b	nFs4
000A4D6B EC06                       	smpsPSGAlterVol     $06
000A4D6D B7                         	dc.b	nFs4
000A4D6E EC03                       	smpsPSGAlterVol     $03
000A4D70 B7                         	dc.b	nFs4
000A4D71 ECF5                       	smpsPSGAlterVol     $F5
000A4D73 B7                         	dc.b	nFs4
000A4D74 EC02                       	smpsPSGAlterVol     $02
000A4D76 B7                         	dc.b	nFs4
000A4D77 EC03                       	smpsPSGAlterVol     $03
000A4D79 B7                         	dc.b	nFs4
000A4D7A EC03                       	smpsPSGAlterVol     $03
000A4D7C B7                         	dc.b	nFs4
000A4D7D EC03                       	smpsPSGAlterVol     $03
000A4D7F B7                         	dc.b	nFs4
000A4D80 ECF5                       	smpsPSGAlterVol     $F5
000A4D82 B7                         	dc.b	nFs4
000A4D83 EC02                       	smpsPSGAlterVol     $02
000A4D85 B7                         	dc.b	nFs4
000A4D86 EC03                       	smpsPSGAlterVol     $03
000A4D88 B7                         	dc.b	nFs4
000A4D89 EC03                       	smpsPSGAlterVol     $03
000A4D8B B7                         	dc.b	nFs4
000A4D8C EC03                       	smpsPSGAlterVol     $03
000A4D8E B780 7F2B                  	dc.b	nFs4, nRst, $7F, $2B
000A4D92 ECF7                       	smpsPSGAlterVol     $F7
000A4D94 A008 8006 9E08 8006 A308+  	dc.b	nG2, $08, nRst, $06, nF2, $08, nRst, $06, nBb2, $08, nRst, $0A
000A4DA0 A006 8004 A005 8004 A205+  	dc.b	nG2, $06, nRst, $04, nG2, $05, nRst, $04, nA2, $05, nRst, $04
000A4DAC A005 8004 A208 8001 A305+  	dc.b	nG2, $05, nRst, $04, nA2, $08, nRst, $01, nBb2, $05, nRst, $01
000A4DB8 A305 8003 A305 8001 A304+  	dc.b	nBb2, $05, nRst, $03, nBb2, $05, nRst, $01, nBb2, $04, nRst, nBb2
000A4DC4 0580 01A3 0480 A308 807F+  	dc.b	$05, nRst, $01, nBb2, $04, nRst, nBb2, $08, nRst, $7F, $7F, $26
000A4DD0 F2                         	smpsStop
000A4DD1                            
000A4DD1                            MerrysLittleLamb_PSG2:
000A4DD1 807F 7F7F 7F7F 52          	dc.b	nRst, $7F, $7F, $7F, $7F, $7F, $52
000A4DD8 EC02                       	smpsPSGAlterVol     $02
000A4DDA A708 8006 A908 8006 A908+  	dc.b	nD3, $08, nRst, $06, nE3, $08, nRst, $06, nE3, $08, nRst, $0A
000A4DE6 E101                       	smpsAlterNote       $01
000A4DE8 AB06 8004                  	dc.b	nFs3, $06, nRst, $04
000A4DEC E101                       	smpsAlterNote       $01
000A4DEE AB05 8004                  	dc.b	nFs3, $05, nRst, $04
000A4DF2 E101                       	smpsAlterNote       $01
000A4DF4 AB05 8004                  	dc.b	nFs3, $05, nRst, $04
000A4DF8 E101                       	smpsAlterNote       $01
000A4DFA AB05 8004                  	dc.b	nFs3, $05, nRst, $04
000A4DFE E101                       	smpsAlterNote       $01
000A4E00 AB08 8001                  	dc.b	nFs3, $08, nRst, $01
000A4E04 E101                       	smpsAlterNote       $01
000A4E06 AB05 8001                  	dc.b	nFs3, $05, nRst, $01
000A4E0A E101                       	smpsAlterNote       $01
000A4E0C AB05 8003                  	dc.b	nFs3, $05, nRst, $03
000A4E10 E101                       	smpsAlterNote       $01
000A4E12 AB05 8001                  	dc.b	nFs3, $05, nRst, $01
000A4E16 E101                       	smpsAlterNote       $01
000A4E18 AB04 80                    	dc.b	nFs3, $04, nRst
000A4E1B E101                       	smpsAlterNote       $01
000A4E1D AB05 8001                  	dc.b	nFs3, $05, nRst, $01
000A4E21 E101                       	smpsAlterNote       $01
000A4E23 AB04 80                    	dc.b	nFs3, $04, nRst
000A4E26 E101                       	smpsAlterNote       $01
000A4E28 AB08 807F 7F26             	dc.b	nFs3, $08, nRst, $7F, $7F, $26
000A4E2E F2                         	smpsStop
000A4E2F                            
000A4E2F                            MerrysLittleLamb_PSG3:
000A4E2F 807F 7F7F 7F39             	dc.b	nRst, $7F, $7F, $7F, $7F, $39
000A4E35 F3E7                       	smpsPSGform         $E7
000A4E37 E108                       	smpsAlterNote       $08
000A4E39 0002                       	dc.b	nMaxPSG, $02
000A4E3B EC01                       	smpsPSGAlterVol     $01
000A4E3D E108                       	smpsAlterNote       $08
000A4E3F 0005                       	dc.b	nMaxPSG, $05
000A4E41 EC01                       	smpsPSGAlterVol     $01
000A4E43 E108                       	smpsAlterNote       $08
000A4E45 0008                       	dc.b	nMaxPSG, $08
000A4E47 EC01                       	smpsPSGAlterVol     $01
000A4E49 E108                       	smpsAlterNote       $08
000A4E4B 00                         	dc.b	nMaxPSG
000A4E4C EC01                       	smpsPSGAlterVol     $01
000A4E4E E108                       	smpsAlterNote       $08
000A4E50 00                         	dc.b	nMaxPSG
000A4E51 EC01                       	smpsPSGAlterVol     $01
000A4E53 E108                       	smpsAlterNote       $08
000A4E55 0007                       	dc.b	nMaxPSG, $07
000A4E57 EC01                       	smpsPSGAlterVol     $01
000A4E59 E108                       	smpsAlterNote       $08
000A4E5B 0005                       	dc.b	nMaxPSG, $05
000A4E5D EC01                       	smpsPSGAlterVol     $01
000A4E5F E108                       	smpsAlterNote       $08
000A4E61 0007                       	dc.b	nMaxPSG, $07
000A4E63 EC01                       	smpsPSGAlterVol     $01
000A4E65 E108                       	smpsAlterNote       $08
000A4E67 0004                       	dc.b	nMaxPSG, $04
000A4E69 EC01                       	smpsPSGAlterVol     $01
000A4E6B E108                       	smpsAlterNote       $08
000A4E6D 0007                       	dc.b	nMaxPSG, $07
000A4E6F EC01                       	smpsPSGAlterVol     $01
000A4E71 E108                       	smpsAlterNote       $08
000A4E73 0006                       	dc.b	nMaxPSG, $06
000A4E75 EC01                       	smpsPSGAlterVol     $01
000A4E77 E108                       	smpsAlterNote       $08
000A4E79 0009                       	dc.b	nMaxPSG, $09
000A4E7B EC01                       	smpsPSGAlterVol     $01
000A4E7D E108                       	smpsAlterNote       $08
000A4E7F 0007                       	dc.b	nMaxPSG, $07
000A4E81 EC01                       	smpsPSGAlterVol     $01
000A4E83 E108                       	smpsAlterNote       $08
000A4E85 0001                       	dc.b	nMaxPSG, $01
000A4E87 ECFF                       	smpsPSGAlterVol     $FF
000A4E89 E108                       	smpsAlterNote       $08
000A4E8B 00                         	dc.b	nMaxPSG
000A4E8C EC01                       	smpsPSGAlterVol     $01
000A4E8E E108                       	smpsAlterNote       $08
000A4E90 0009                       	dc.b	nMaxPSG, $09
000A4E92 EC01                       	smpsPSGAlterVol     $01
000A4E94 E108                       	smpsAlterNote       $08
000A4E96 0007 807F 7F7F 68          	dc.b	nMaxPSG, $07, nRst, $7F, $7F, $7F, $68
000A4E9D F2                         	smpsStop
000A4E9E                            
000A4E9E                            MerrysLittleLamb_DAC:
000A4E9E 8913 8A06 8B0D 8A89 8989+  	dc.b	dMidTimpani, $13, dLowTimpani, $06, dVLowTimpani, $0D, dLowTimpani, dMidTimpani, dMidTimpani, dMidTimpani, $1A, dLowTimpani
000A4EAA 0D8A 8A19 890D 8888 1A89+  	dc.b	$0D, dLowTimpani, dLowTimpani, $19, dMidTimpani, $0D, dHiTimpani, dHiTimpani, $1A, dMidTimpani, $14, dLowTimpani
000A4EB6 068B 0D8A 8989 898A 0C8A+  	dc.b	$06, dVLowTimpani, $0D, dLowTimpani, dMidTimpani, dMidTimpani, dMidTimpani, dLowTimpani, $0C, dLowTimpani, $0D, dLowTimpani
000A4EC2 898A 8B34 890E 8A04 8B09+  	dc.b	dMidTimpani, dLowTimpani, dMerryWtf1, $34, dMidTimpani, $0E, dLowTimpani, $04, dVLowTimpani, $09, dLowTimpani, $0A
000A4ECE 8909 8989 8A0A 8A09 8A8A+  	dc.b	dMidTimpani, $09, dMidTimpani, dMidTimpani, dMerryWtf2, $0A, dLowTimpani, $09, dLowTimpani, dLowTimpani, dMerryWtf3, dMidTimpani
000A4EDA 0A88 0988 8289 0581 098A+  	dc.b	$0A, dHiTimpani, $09, dHiTimpani, dSnare, dMidTimpani, $05, dKick, $09, dLowTimpani, $05, dVLowTimpani
000A4EE6 098A 8989 0A89 098A 8805+  	dc.b	$09, dLowTimpani, dMidTimpani, dMidTimpani, $0A, dMidTimpani, $09, dLowTimpani, dHiTimpani, $05, dMidTimpani, $04
000A4EF2 8A0A 8909 8A82 0182 0482+  	dc.b	dLowTimpani, $0A, dMidTimpani, $09, dLowTimpani, dSnare, $01, dSnare, $04, dSnare, $01, dSnare
000A4EFE 0382 0181 0481 0182 0382+  	dc.b	$03, dSnare, $01, dKick, $04, dKick, $01, dSnare, $03, dSnare, $01, dKick
000A4F0A 0481 0182 0482 0181 0381+  	dc.b	$04, dKick, $01, dSnare, $04, dSnare, $01, dKick, $03, dKick, $01, dSnare
000A4F16 0489 0582 0482 058A 048B+  	dc.b	$04, dMidTimpani, $05, dSnare, $04, dSnare, $05, dLowTimpani, $04, dVLowTimpani, $05, dSnare
000A4F22 8A04 8205 8904 8205 8982+  	dc.b	dLowTimpani, $04, dSnare, $05, dMidTimpani, $04, dSnare, $05, dMidTimpani, dSnare, $04, dMidTimpani
000A4F2E 0582 8A04 8205 8A04 8205+  	dc.b	$05, dSnare, dMerryWtf2, $04, dSnare, $05, dLowTimpani, $04, dSnare, $05, dLowTimpani, dSnare
000A4F3A 048A 0582 0486 0582 8904+  	dc.b	$04, dLowTimpani, $05, dSnare, $04, $86, $05, dSnare, dMidTimpani, $04, dSnare, $05
000A4F46 8804 8205 8882 0482 0582+  	dc.b	dHiTimpani, $04, dSnare, $05, dHiTimpani, dSnare, $04, dSnare, $05, dSnare, dMidTimpani, $04
000A4F52 8205 8204 8A05 8B82 048A+  	dc.b	dSnare, $05, dSnare, $04, dLowTimpani, $05, dVLowTimpani, dSnare, $04, dLowTimpani, $05, dSnare
000A4F5E 0489 0582 8909 8904 8205+  	dc.b	$04, dMidTimpani, $05, dSnare, dMidTimpani, $09, dMidTimpani, $04, dSnare, $05, dLowTimpani, $09
000A4F6A 8801 8804 8801 8904 8988+  	dc.b	dHiTimpani, $01, dHiTimpani, $04, dHiTimpani, $01, dMidTimpani, $04, dMidTimpani, dHiTimpani, $01, dHiTimpani
000A4F76 0488 0189 0389 0189 0488+  	dc.b	$04, dHiTimpani, $01, dMidTimpani, $03, dMidTimpani, $01, dMidTimpani, $04, dHiTimpani, $01, dHiTimpani
000A4F82 0488 0189 0389 0189 048A+  	dc.b	$04, dHiTimpani, $01, dMidTimpani, $03, dMidTimpani, $01, dMidTimpani, $04, dMerryClap, $01, dMerryClap
000A4F8E 038A 018B 048B 018B 0482+  	dc.b	$03, dMerryClap, $01, dVLowTimpani, $04, dVLowTimpani, $01, dVLowTimpani, $04, dSnare, $01, dKick
000A4F9A 0381 0182 0482 0181 0482+  	dc.b	$03, dKick, $01, dSnare, $04, dSnare, $01, dKick, $04, dSnare, $7F, nRst
000A4FA6 F2                         	smpsStop
000A4FA7                            
000A4FA7                            MerrysLittleLamb_Voices:
000A4FA7                            ;	Voice $00
000A4FA7                            ;	$00
000A4FA7                            ;	$70, $70, $70, $70, 	$1F, $1F, $1F, $1F, 	$00, $00, $00, $1F
000A4FA7                            ;	$00, $00, $00, $12, 	$F0, $F0, $F0, $0F, 	$00, $00, $00, $00
000A4FA7                            	smpsVcAlgorithm     $00
000A4FA7                            	smpsVcFeedback      $00
000A4FA7                            	smpsVcUnusedBits    $00
000A4FA7                            	smpsVcDetune        $07, $07, $07, $07
000A4FA7                            	smpsVcCoarseFreq    $00, $00, $00, $00
000A4FA7                            	smpsVcRateScale     $00, $00, $00, $00
000A4FA7                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000A4FA7                            	smpsVcAmpMod        $00, $00, $00, $00
000A4FA7                            	smpsVcDecayRate1    $1F, $00, $00, $00
000A4FA7                            	smpsVcDecayRate2    $12, $00, $00, $00
000A4FA7                            	smpsVcDecayLevel    $00, $0F, $0F, $0F
000A4FA7                            	smpsVcReleaseRate   $0F, $00, $00, $00
000A4FA7 0070 7070 701F 1F1F 1F00+  	smpsVcTotalLevel    $00, $00, $00, $00
000A4FC0                            
000A4FC0                            ;	Voice $01
000A4FC0                            ;	$25
000A4FC0                            ;	$01, $01, $01, $71, 	$1E, $1E, $1E, $1E, 	$08, $06, $0B, $03
000A4FC0                            ;	$00, $00, $00, $00, 	$4F, $4F, $AF, $0F, 	$08, $16, $06, $00
000A4FC0                            	smpsVcAlgorithm     $05
000A4FC0                            	smpsVcFeedback      $04
000A4FC0                            	smpsVcUnusedBits    $00
000A4FC0                            	smpsVcDetune        $07, $00, $00, $00
000A4FC0                            	smpsVcCoarseFreq    $01, $01, $01, $01
000A4FC0                            	smpsVcRateScale     $00, $00, $00, $00
000A4FC0                            	smpsVcAttackRate    $1E, $1E, $1E, $1E
000A4FC0                            	smpsVcAmpMod        $00, $00, $00, $00
000A4FC0                            	smpsVcDecayRate1    $03, $0B, $06, $08
000A4FC0                            	smpsVcDecayRate2    $00, $00, $00, $00
000A4FC0                            	smpsVcDecayLevel    $00, $0A, $04, $04
000A4FC0                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000A4FC0 2501 0101 711E 1E1E 1E08+  	smpsVcTotalLevel    $00, $06, $16, $08
000A4FD9                            
000A4FD9                            
000A4FDA 00                         		even
000A4FDA                            Music8F:	incbin	sound\music8F.bin ; Game Over
000A561A 00                         		even
000A561A                            Music90:	incbin	sound\music90.bin ; Continue
000A59B4 00                         		even
000A59B4                            Music91:	incbin	sound\music91.bin ; Credits
000A6C82                            		even
000A6C82                            Music92:	incbin	sound\music92.bin ; Drowning
000A6FC4 00                         		even
000A6FC4                            Music93:	incbin	sound\music93.bin ; Chaos Emerald
000A7094                            		even
000A7094                            Music94:	incbin	sound\music94.bin ; Green Hill Act 2
000A7D6A 00                         		even
000A7D6A                            Music95:	incbin	sound\music95.bin ; Green Hill Act 3
000A7EBA 00                         		even
000A7EBA                            Music96:	incbin	sound\music96.bin ; Labyrinth Act 2
000A7EF4 00                         		even
000A7EF4                            Music97:	incbin	sound\music97.bin ; Labyrinth Act 3
000A7F2E 00                         		even
000A7F2E                            Music98:	incbin	sound\music98.bin ; Marble Act 2
000A7F68 00                         		even
000A7F68                            Music99:	incbin	sound\music99.bin ; Marble Act 3
000A7FA2 00                         		even
000A7FA2                            Music9A:	incbin	sound\music9A.bin ; Star Light Act 2
000A7FDC 00                         		even
000A7FDC                            Music9B:	incbin	sound\music9B.bin ; Star Light Act 3
000A8016 00                         		even
000A8016                            Music9C:	incbin	sound\music9C.bin ; Spring Yard Act 2
000A8050 00                         		even
000A8050                            Music9D:	incbin	sound\music9D.bin ; Spring Yard Act 3
000A808A 00                         		even
000A808A                            Music9E:	incbin	sound\music9E.bin ; Scrap Brain Act 2
000A857A                            		even
000A857A                            Music9F:	include	sound\music9F.asm ; Scrap Brain Act 3
000A857A                            GentleBreeze_Header:
000A857A =00000001                  smpsHeaderStartSong = 1
000A857A 0000                       	smpsHeaderVoice     GentleBreeze_Voices
000A857C 0603                       	smpsHeaderChan      $06, $03
000A857E 0100                       	smpsHeaderTempo     $01, $00
000A8580                            
000A8584 0000 0000                  	smpsHeaderFM        GentleBreeze_FM1,	$00, $00
000A8588 0000 0000                  	smpsHeaderFM        GentleBreeze_FM2,	$00, $00
000A858C 0000 0000                  	smpsHeaderFM        GentleBreeze_FM3,	$00, $00
000A8590 0000 0000                  	smpsHeaderFM        GentleBreeze_FM4,	$00, $00
000A8594 0000 0000                  	smpsHeaderFM        GentleBreeze_FM5,	$00, $00
000A8598 0000 0000 0000             	smpsHeaderPSG       GentleBreeze_PSG1,	$00, $00, $00, $00
000A859E 0000 0000 0000             	smpsHeaderPSG       GentleBreeze_PSG2,	$00, $00, $00, $00
000A85A4 0000 0000 0000             	smpsHeaderPSG       GentleBreeze_PSG3,	$00, $00, $00, $00
000A85AA                            
000A85AA                            ; PSG3 Data
000A85AA                            GentleBreeze_PSG3:
000A85AA F2                         	smpsStop
000A85AB                            
000A85AB                            ; FM1 Data
000A85AB                            GentleBreeze_FM1:
000A85AD E0C0                       	smpsPan             panCenter, $00
000A85AF E1FF                       	smpsAlterNote       $FF
000A85B1 C410                       	dc.b	nG5, $10
000A85B3 E60F                       	smpsAlterVol        $0F
000A85B5 C4                         	dc.b	nG5
000A85B6 E6F1                       	smpsAlterVol        $F1
000A85B8 E100                       	smpsAlterNote       $00
000A85BA C2                         	dc.b	nF5
000A85BB E60F                       	smpsAlterVol        $0F
000A85BD 08                         	dc.b	$08
000A85BE E6F1                       	smpsAlterVol        $F1
000A85C0 C010                       	dc.b	nEb5, $10
000A85C2 E60F                       	smpsAlterVol        $0F
000A85C4 C0                         	dc.b	nEb5
000A85C5 E6F1                       	smpsAlterVol        $F1
000A85C7 BDC0 C208 C910             	dc.b	nC5, nEb5, nF5, $08, nC6, $10
000A85CD E60F                       	smpsAlterVol        $0F
000A85CF C9                         	dc.b	nC6
000A85D0 E6F1                       	smpsAlterVol        $F1
000A85D2 C5                         	dc.b	nAb5
000A85D3 E60F                       	smpsAlterVol        $0F
000A85D5 08                         	dc.b	$08
000A85D6 E6F1                       	smpsAlterVol        $F1
000A85D8 C010                       	dc.b	nEb5, $10
000A85DA E60F                       	smpsAlterVol        $0F
000A85DC C0                         	dc.b	nEb5
000A85DD E6F1                       	smpsAlterVol        $F1
000A85DF C208                       	dc.b	nF5, $08
000A85E1 E1FF                       	smpsAlterNote       $FF
000A85E3 C410                       	dc.b	nG5, $10
000A85E5 E100                       	smpsAlterNote       $00
000A85E7 C5C7                       	dc.b	nAb5, nBb5
000A85E9 E60F                       	smpsAlterVol        $0F
000A85EB C7                         	dc.b	nBb5
000A85EC E6F1                       	smpsAlterVol        $F1
000A85EE C5                         	dc.b	nAb5
000A85EF E60F                       	smpsAlterVol        $0F
000A85F1 08                         	dc.b	$08
000A85F2 E6F1                       	smpsAlterVol        $F1
000A85F4 E1FF                       	smpsAlterNote       $FF
000A85F6 C410                       	dc.b	nG5, $10
000A85F8 E60F                       	smpsAlterVol        $0F
000A85FA C4                         	dc.b	nG5
000A85FB E6F1                       	smpsAlterVol        $F1
000A85FD C4                         	dc.b	nG5
000A85FE E100                       	smpsAlterNote       $00
000A8600 C208 C010 C2               	dc.b	nF5, $08, nEb5, $10, nF5
000A8605 E60F                       	smpsAlterVol        $0F
000A8607 C2                         	dc.b	nF5
000A8608 E6F1                       	smpsAlterVol        $F1
000A860A E1FF                       	smpsAlterNote       $FF
000A860C C4                         	dc.b	nG5
000A860D E60F                       	smpsAlterVol        $0F
000A860F 08                         	dc.b	$08
000A8610 E6F1                       	smpsAlterVol        $F1
000A8612 10                         	dc.b	$10
000A8613 E60F                       	smpsAlterVol        $0F
000A8615 38                         	dc.b	$38
000A8616 E6F1                       	smpsAlterVol        $F1
000A8618 10                         	dc.b	$10
000A8619 E60F                       	smpsAlterVol        $0F
000A861B C4                         	dc.b	nG5
000A861C E6F1                       	smpsAlterVol        $F1
000A861E E100                       	smpsAlterNote       $00
000A8620 C2                         	dc.b	nF5
000A8621 E60F                       	smpsAlterVol        $0F
000A8623 08                         	dc.b	$08
000A8624 E6F1                       	smpsAlterVol        $F1
000A8626 C010                       	dc.b	nEb5, $10
000A8628 E60F                       	smpsAlterVol        $0F
000A862A C0                         	dc.b	nEb5
000A862B E6F1                       	smpsAlterVol        $F1
000A862D BDC0 C208 C910             	dc.b	nC5, nEb5, nF5, $08, nC6, $10
000A8633 E60F                       	smpsAlterVol        $0F
000A8635 C9                         	dc.b	nC6
000A8636 E6F1                       	smpsAlterVol        $F1
000A8638 C5                         	dc.b	nAb5
000A8639 E60F                       	smpsAlterVol        $0F
000A863B 08                         	dc.b	$08
000A863C E6F1                       	smpsAlterVol        $F1
000A863E C010                       	dc.b	nEb5, $10
000A8640 E60F                       	smpsAlterVol        $0F
000A8642 C0                         	dc.b	nEb5
000A8643 E6F1                       	smpsAlterVol        $F1
000A8645 C208                       	dc.b	nF5, $08
000A8647 E1FF                       	smpsAlterNote       $FF
000A8649 C410                       	dc.b	nG5, $10
000A864B E100                       	smpsAlterNote       $00
000A864D C5C7                       	dc.b	nAb5, nBb5
000A864F E60F                       	smpsAlterVol        $0F
000A8651 C7                         	dc.b	nBb5
000A8652 E6F1                       	smpsAlterVol        $F1
000A8654 C5                         	dc.b	nAb5
000A8655 E60F                       	smpsAlterVol        $0F
000A8657 08                         	dc.b	$08
000A8658 E6F1                       	smpsAlterVol        $F1
000A865A E1FF                       	smpsAlterNote       $FF
000A865C C410                       	dc.b	nG5, $10
000A865E E60F                       	smpsAlterVol        $0F
000A8660 C4                         	dc.b	nG5
000A8661 E6F1                       	smpsAlterVol        $F1
000A8663 C4                         	dc.b	nG5
000A8664 E100                       	smpsAlterNote       $00
000A8666 C208 C010 C2               	dc.b	nF5, $08, nEb5, $10, nF5
000A866B E60F                       	smpsAlterVol        $0F
000A866D 28                         	dc.b	$28
000A866E E6F1                       	smpsAlterVol        $F1
000A8670 C008 10                    	dc.b	nEb5, $08, $10
000A8673 E60F                       	smpsAlterVol        $0F
000A8675 21                         	dc.b	$21
000A8676                            
000A8676                            GentleBreeze_Loop12:
000A8676 E7C0 7F                    	dc.b	smpsNoAttack, nEb5, $7F
000A8679 F700 08FF F9               	smpsLoop            $00, $08, GentleBreeze_Loop12
000A867E E717                       	dc.b	smpsNoAttack, $17
000A8680 E6F1                       	smpsAlterVol        $F1
000A8682 E1FF                       	smpsAlterNote       $FF
000A8684 C410                       	dc.b	nG5, $10
000A8686 E60F                       	smpsAlterVol        $0F
000A8688 C4                         	dc.b	nG5
000A8689 E6F1                       	smpsAlterVol        $F1
000A868B E100                       	smpsAlterNote       $00
000A868D C2                         	dc.b	nF5
000A868E E60F                       	smpsAlterVol        $0F
000A8690 08                         	dc.b	$08
000A8691 E6F1                       	smpsAlterVol        $F1
000A8693 C010                       	dc.b	nEb5, $10
000A8695 E60F                       	smpsAlterVol        $0F
000A8697 C0                         	dc.b	nEb5
000A8698 E6F1                       	smpsAlterVol        $F1
000A869A BDC0 C208 C910             	dc.b	nC5, nEb5, nF5, $08, nC6, $10
000A86A0 E60F                       	smpsAlterVol        $0F
000A86A2 C9                         	dc.b	nC6
000A86A3 E6F1                       	smpsAlterVol        $F1
000A86A5 C5                         	dc.b	nAb5
000A86A6 E60F                       	smpsAlterVol        $0F
000A86A8 08                         	dc.b	$08
000A86A9 E6F1                       	smpsAlterVol        $F1
000A86AB C010                       	dc.b	nEb5, $10
000A86AD E60F                       	smpsAlterVol        $0F
000A86AF C0                         	dc.b	nEb5
000A86B0 E6F1                       	smpsAlterVol        $F1
000A86B2 C208                       	dc.b	nF5, $08
000A86B4 E1FF                       	smpsAlterNote       $FF
000A86B6 C410                       	dc.b	nG5, $10
000A86B8 E100                       	smpsAlterNote       $00
000A86BA C5C7                       	dc.b	nAb5, nBb5
000A86BC E60F                       	smpsAlterVol        $0F
000A86BE C7                         	dc.b	nBb5
000A86BF E6F1                       	smpsAlterVol        $F1
000A86C1 C5                         	dc.b	nAb5
000A86C2 E60F                       	smpsAlterVol        $0F
000A86C4 08                         	dc.b	$08
000A86C5 E6F1                       	smpsAlterVol        $F1
000A86C7 E1FF                       	smpsAlterNote       $FF
000A86C9 C410                       	dc.b	nG5, $10
000A86CB E60F                       	smpsAlterVol        $0F
000A86CD C4                         	dc.b	nG5
000A86CE E6F1                       	smpsAlterVol        $F1
000A86D0 C4                         	dc.b	nG5
000A86D1 E100                       	smpsAlterNote       $00
000A86D3 C208 C010 C2               	dc.b	nF5, $08, nEb5, $10, nF5
000A86D8 E60F                       	smpsAlterVol        $0F
000A86DA C2                         	dc.b	nF5
000A86DB E6F1                       	smpsAlterVol        $F1
000A86DD E1FF                       	smpsAlterNote       $FF
000A86DF C4                         	dc.b	nG5
000A86E0 E60F                       	smpsAlterVol        $0F
000A86E2 08                         	dc.b	$08
000A86E3 E6F1                       	smpsAlterVol        $F1
000A86E5 10                         	dc.b	$10
000A86E6 E60F                       	smpsAlterVol        $0F
000A86E8 38                         	dc.b	$38
000A86E9 E6F1                       	smpsAlterVol        $F1
000A86EB 10                         	dc.b	$10
000A86EC E60F                       	smpsAlterVol        $0F
000A86EE C4                         	dc.b	nG5
000A86EF E6F1                       	smpsAlterVol        $F1
000A86F1 E100                       	smpsAlterNote       $00
000A86F3 C2                         	dc.b	nF5
000A86F4 E60F                       	smpsAlterVol        $0F
000A86F6 08                         	dc.b	$08
000A86F7 E6F1                       	smpsAlterVol        $F1
000A86F9 C010                       	dc.b	nEb5, $10
000A86FB E60F                       	smpsAlterVol        $0F
000A86FD C0                         	dc.b	nEb5
000A86FE E6F1                       	smpsAlterVol        $F1
000A8700 BDC0 C208 C910             	dc.b	nC5, nEb5, nF5, $08, nC6, $10
000A8706 E60F                       	smpsAlterVol        $0F
000A8708 C9                         	dc.b	nC6
000A8709 E6F1                       	smpsAlterVol        $F1
000A870B C5                         	dc.b	nAb5
000A870C E60F                       	smpsAlterVol        $0F
000A870E 08                         	dc.b	$08
000A870F E6F1                       	smpsAlterVol        $F1
000A8711 C010                       	dc.b	nEb5, $10
000A8713 E60F                       	smpsAlterVol        $0F
000A8715 C0                         	dc.b	nEb5
000A8716 E6F1                       	smpsAlterVol        $F1
000A8718 C208                       	dc.b	nF5, $08
000A871A E1FF                       	smpsAlterNote       $FF
000A871C C410                       	dc.b	nG5, $10
000A871E E100                       	smpsAlterNote       $00
000A8720 C5C7                       	dc.b	nAb5, nBb5
000A8722 E60F                       	smpsAlterVol        $0F
000A8724 C7                         	dc.b	nBb5
000A8725 E6F1                       	smpsAlterVol        $F1
000A8727 C5                         	dc.b	nAb5
000A8728 E60F                       	smpsAlterVol        $0F
000A872A 08                         	dc.b	$08
000A872B E6F1                       	smpsAlterVol        $F1
000A872D E1FF                       	smpsAlterNote       $FF
000A872F C410                       	dc.b	nG5, $10
000A8731 E60F                       	smpsAlterVol        $0F
000A8733 C4                         	dc.b	nG5
000A8734 E6F1                       	smpsAlterVol        $F1
000A8736 C4                         	dc.b	nG5
000A8737 E100                       	smpsAlterNote       $00
000A8739 C208 C010 C2               	dc.b	nF5, $08, nEb5, $10, nF5
000A873E E60F                       	smpsAlterVol        $0F
000A8740 28                         	dc.b	$28
000A8741 E6F1                       	smpsAlterVol        $F1
000A8743 C008 10                    	dc.b	nEb5, $08, $10
000A8746 E60F                       	smpsAlterVol        $0F
000A8748 21                         	dc.b	$21
000A8749 E0C0                       	smpsPan             panCenter, $00
000A874B F6FF 29                    	smpsJump            GentleBreeze_Loop12
000A874E                            
000A874E                            ; FM2 Data
000A874E                            GentleBreeze_FM2:
000A8750 E60C                       	smpsAlterVol        $0C
000A8752 E0C0                       	smpsPan             panCenter, $00
000A8754 9E20 A018 A508 8040 A020+  	dc.b	nF2, $20, nG2, $18, nC3, $08, nRst, $40, nG2, $20, nF2, $18
000A8760 A508 8020 A010 9E9E 20A0+  	dc.b	nC3, $08, nRst, $20, nG2, $10, nF2, nF2, $20, nG2, $18, nC3
000A876C 0880 409E 38A0 489E 20A0+  	dc.b	$08, nRst, $40, nF2, $38, nG2, $48, nF2, $20, nG2, $18, nC3
000A8778 0880 40A0 209E 18A5 0880+  	dc.b	$08, nRst, $40, nG2, $20, nF2, $18, nC3, $08, nRst, $20, nG2
000A8784 109E 9E20 A018 A508 8040+  	dc.b	$10, nF2, nF2, $20, nG2, $18, nC3, $08, nRst, $40, nF2, $38
000A8790 A039                       	dc.b	nG2, $39
000A8792                            
000A8792                            GentleBreeze_Jump04:
000A8792 E7A0 0F                    	dc.b	smpsNoAttack, nG2, $0F
000A8795                            
000A8795                            GentleBreeze_Loop11:
000A8795 A118 0880 10A1 2008 A09E+  	dc.b	nAb2, $18, $08, nRst, $10, nAb2, $20, $08, nG2, nF2, nFs2, nG2
000A87A1 A1A0 1808 8010 A020 0880+  	dc.b	nAb2, nG2, $18, $08, nRst, $10, nG2, $20, $08, nRst, nG2, nC3
000A87AD 189E A020 A510 A008 A518+  	dc.b	$18, nF2, nG2, $20, nC3, $10, nG2, $08, nC3, $18, nG2, $08
000A87B9 9FA0 9C18 979C 2008 9EA2+  	dc.b	nFs2, nG2, nEb2, $18, nBb1, nEb2, $20, $08, nF2, nA2, nEb3, nB2
000A87C5 A3                         	dc.b	nBb2
000A87C6 F700 02FF CB               	smpsLoop            $00, $02, GentleBreeze_Loop11
000A87CB 9E20 A018 A508 8040 A020+  	dc.b	nF2, $20, nG2, $18, nC3, $08, nRst, $40, nG2, $20, nF2, $18
000A87D7 A508 8020 A010 9E9E 20A0+  	dc.b	nC3, $08, nRst, $20, nG2, $10, nF2, nF2, $20, nG2, $18, nC3
000A87E3 0880 409E 38A0 489E 20A0+  	dc.b	$08, nRst, $40, nF2, $38, nG2, $48, nF2, $20, nG2, $18, nC3
000A87EF 0880 40A0 209E 18A5 0880+  	dc.b	$08, nRst, $40, nG2, $20, nF2, $18, nC3, $08, nRst, $20, nG2
000A87FB 109E 9E20 A018 A508 8040+  	dc.b	$10, nF2, nF2, $20, nG2, $18, nC3, $08, nRst, $40, nF2, $38
000A8807 A039                       	dc.b	nG2, $39
000A8809 E0C0                       	smpsPan             panCenter, $00
000A880B F6FF 85                    	smpsJump            GentleBreeze_Jump04
000A880E                            
000A880E                            ; FM3 Data
000A880E                            GentleBreeze_FM3:
000A8810 E0C0                       	smpsPan             panCenter, $00
000A8812 807F 7F7F 7F04             	dc.b	nRst, $7F, $7F, $7F, $7F, $04
000A881A E616                       	smpsAlterVol        $16
000A881C F000 0207 03               	smpsModSet          $00, $02, $07, $03
000A8821                            
000A8821                            GentleBreeze_Loop0F:
000A8821 C008 BDC9                  	dc.b	nEb5, $08, nC5, nC6
000A8825 E1FF                       	smpsAlterNote       $FF
000A8827 C4                         	dc.b	nG5
000A8828 E100                       	smpsAlterNote       $00
000A882A C0BB BDC0 10               	dc.b	nEb5, nBb4, nC5, nEb5, $10
000A882F E608                       	smpsAlterVol        $08
000A8831 C080 08                    	dc.b	nEb5, nRst, $08
000A8834 E6F8                       	smpsAlterVol        $F8
000A8836 C7                         	dc.b	nBb5
000A8837 E1FF                       	smpsAlterNote       $FF
000A8839 C4                         	dc.b	nG5
000A883A E100                       	smpsAlterNote       $00
000A883C C0BB                       	dc.b	nEb5, nBb4
000A883E F700 02FF DF               	smpsLoop            $00, $02, GentleBreeze_Loop0F
000A8843 C0BD C9                    	dc.b	nEb5, nC5, nC6
000A8846 E1FF                       	smpsAlterNote       $FF
000A8848 C4                         	dc.b	nG5
000A8849 E100                       	smpsAlterNote       $00
000A884B C0BB BDC0 10               	dc.b	nEb5, nBb4, nC5, nEb5, $10
000A8850 E608                       	smpsAlterVol        $08
000A8852 C080 08                    	dc.b	nEb5, nRst, $08
000A8855 E6F8                       	smpsAlterVol        $F8
000A8857 E1FF                       	smpsAlterNote       $FF
000A8859 C4                         	dc.b	nG5
000A885A E100                       	smpsAlterNote       $00
000A885C C2C0 BBC0 BBC7 C5          	dc.b	nF5, nEb5, nBb4, nEb5, nBb4, nBb5, nAb5
000A8863 E1FF                       	smpsAlterNote       $FF
000A8865 C4                         	dc.b	nG5
000A8866 E100                       	smpsAlterNote       $00
000A8868 C2C0 BBBB C0               	dc.b	nF5, nEb5, nBb4, nBb4, nEb5
000A886D E1FF                       	smpsAlterNote       $FF
000A886F C4                         	dc.b	nG5
000A8870 E100                       	smpsAlterNote       $00
000A8872 C7                         	dc.b	nBb5
000A8873 E1FF                       	smpsAlterNote       $FF
000A8875 C4                         	dc.b	nG5
000A8876 E100                       	smpsAlterNote       $00
000A8878 C2C0 01                    	dc.b	nF5, nEb5, $01
000A887B                            
000A887B                            GentleBreeze_Jump03:
000A887B E7C0 07BB 08               	dc.b	smpsNoAttack, nEb5, $07, nBb4, $08
000A8882 E6FA                       	smpsAlterVol        $FA
000A8884 F4                         	smpsModOff
000A8885 E1FF                       	smpsAlterNote       $FF
000A8887 B850                       	dc.b	nG4, $50
000A8889 E100                       	smpsAlterNote       $00
000A888B B408 B1B4 B5B6 AF18 B510+  	dc.b	nEb4, $08, nC4, nEb4, nE4, nF4, nBb3, $18, nE4, $10, nF4, $08
000A8897 E1FF                       	smpsAlterNote       $FF
000A8899 B810                       	dc.b	nG4, $10
000A889B E100                       	smpsAlterNote       $00
000A889D BB18 B908 80               	dc.b	nBb4, $18, nAb4, $08, nRst
000A88A2 E1FF                       	smpsAlterNote       $FF
000A88A4 B8                         	dc.b	nG4
000A88A5 E100                       	smpsAlterNote       $00
000A88A7 B610                       	dc.b	nF4, $10
000A88A9 E1FF                       	smpsAlterNote       $FF
000A88AB B850                       	dc.b	nG4, $50
000A88AD E100                       	smpsAlterNote       $00
000A88AF B608 B410 08B6 AF60        	dc.b	nF4, $08, nEb4, $10, $08, nF4, nBb3, $60
000A88B7 E1FF                       	smpsAlterNote       $FF
000A88B9 AC08                       	dc.b	nG3, $08
000A88BB E100                       	smpsAlterNote       $00
000A88BD AFB3 B4B6 B7               	dc.b	nBb3, nD4, nEb4, nF4, nFs4
000A88C2 E1FF                       	smpsAlterNote       $FF
000A88C4 B850                       	dc.b	nG4, $50
000A88C6 E100                       	smpsAlterNote       $00
000A88C8 BB08                       	dc.b	nBb4, $08
000A88CA E1FF                       	smpsAlterNote       $FF
000A88CC B8                         	dc.b	nG4
000A88CD E100                       	smpsAlterNote       $00
000A88CF BDBB B6                    	dc.b	nC5, nBb4, nF4
000A88D2 E1FF                       	smpsAlterNote       $FF
000A88D4 B810 08                    	dc.b	nG4, $10, $08
000A88D7 E100                       	smpsAlterNote       $00
000A88D9 B6                         	dc.b	nF4
000A88DA E1FF                       	smpsAlterNote       $FF
000A88DC B880                       	dc.b	nG4, nRst
000A88DE E100                       	smpsAlterNote       $00
000A88E0 BBB9 BB                    	dc.b	nBb4, nAb4, nBb4
000A88E3 E1FF                       	smpsAlterNote       $FF
000A88E5 B810                       	dc.b	nG4, $10
000A88E7 E100                       	smpsAlterNote       $00
000A88E9 B308 B4B1 AFB4 B5          	dc.b	nD4, $08, nEb4, nC4, nBb3, nEb4, nE4
000A88F0 E1FF                       	smpsAlterNote       $FF
000A88F2 B87F E77F E702 807F 7F7F+  	dc.b	nG4, $7F, smpsNoAttack, $7F, smpsNoAttack, $02, nRst, $7F, $7F, $7F, $7F, $04
000A8900 E606                       	smpsAlterVol        $06
000A8902 F000 0207 03               	smpsModSet          $00, $02, $07, $03
000A8907 E100                       	smpsAlterNote       $00
000A8909                            
000A8909                            GentleBreeze_Loop10:
000A8909 C008 BDC9                  	dc.b	nEb5, $08, nC5, nC6
000A890D E1FF                       	smpsAlterNote       $FF
000A890F C4                         	dc.b	nG5
000A8910 E100                       	smpsAlterNote       $00
000A8912 C0BB BDC0 10               	dc.b	nEb5, nBb4, nC5, nEb5, $10
000A8917 E608                       	smpsAlterVol        $08
000A8919 C080 08                    	dc.b	nEb5, nRst, $08
000A891C E6F8                       	smpsAlterVol        $F8
000A891E C7                         	dc.b	nBb5
000A891F E1FF                       	smpsAlterNote       $FF
000A8921 C4                         	dc.b	nG5
000A8922 E100                       	smpsAlterNote       $00
000A8924 C0BB                       	dc.b	nEb5, nBb4
000A8926 F700 02FF DF               	smpsLoop            $00, $02, GentleBreeze_Loop10
000A892B C0BD C9                    	dc.b	nEb5, nC5, nC6
000A892E E1FF                       	smpsAlterNote       $FF
000A8930 C4                         	dc.b	nG5
000A8931 E100                       	smpsAlterNote       $00
000A8933 C0BB BDC0 10               	dc.b	nEb5, nBb4, nC5, nEb5, $10
000A8938 E608                       	smpsAlterVol        $08
000A893A C080 08                    	dc.b	nEb5, nRst, $08
000A893D E6F8                       	smpsAlterVol        $F8
000A893F E1FF                       	smpsAlterNote       $FF
000A8941 C4                         	dc.b	nG5
000A8942 E100                       	smpsAlterNote       $00
000A8944 C2C0 BBC0 BBC7 C5          	dc.b	nF5, nEb5, nBb4, nEb5, nBb4, nBb5, nAb5
000A894B E1FF                       	smpsAlterNote       $FF
000A894D C4                         	dc.b	nG5
000A894E E100                       	smpsAlterNote       $00
000A8950 C2C0 BBBB C0               	dc.b	nF5, nEb5, nBb4, nBb4, nEb5
000A8955 E1FF                       	smpsAlterNote       $FF
000A8957 C4                         	dc.b	nG5
000A8958 E100                       	smpsAlterNote       $00
000A895A C7                         	dc.b	nBb5
000A895B E1FF                       	smpsAlterNote       $FF
000A895D C4                         	dc.b	nG5
000A895E E100                       	smpsAlterNote       $00
000A8960 C2C0 01                    	dc.b	nF5, nEb5, $01
000A8963 E0C0                       	smpsPan             panCenter, $00
000A8965 F1                         	smpsModOn
000A8966 F6FF 13                    	smpsJump            GentleBreeze_Jump03
000A8969                            
000A8969                            ; FM4 Data
000A8969                            GentleBreeze_FM4:
000A896B E0C0                       	smpsPan             panCenter, $00
000A896D 80                         	dc.b	nRst
000A896E                            
000A896E                            GentleBreeze_Loop0D:
000A896E 7F                         	dc.b	$7F
000A896F F700 07FF FB               	smpsLoop            $00, $07, GentleBreeze_Loop0D
000A8974 77                         	dc.b	$77
000A8977 E609                       	smpsAlterVol        $09
000A8979 C001                       	dc.b	nEb5, $01
000A897B                            
000A897B                            GentleBreeze_Jump02:
000A897B E7C0 07C2 08               	dc.b	smpsNoAttack, nEb5, $07, nF5, $08
000A8980 E607                       	smpsAlterVol        $07
000A8982 E1FF                       	smpsAlterNote       $FF
000A8984 C450                       	dc.b	nG5, $50
000A8986 E100                       	smpsAlterNote       $00
000A8988 C008 BDC0 C1C2 BB18 C110+  	dc.b	nEb5, $08, nC5, nEb5, nE5, nF5, nBb4, $18, nE5, $10, nF5, $08
000A8994 E1FF                       	smpsAlterNote       $FF
000A8996 C410                       	dc.b	nG5, $10
000A8998 E100                       	smpsAlterNote       $00
000A899A C718 C508 80               	dc.b	nBb5, $18, nAb5, $08, nRst
000A899F E1FF                       	smpsAlterNote       $FF
000A89A1 C4                         	dc.b	nG5
000A89A2 E100                       	smpsAlterNote       $00
000A89A4 C210                       	dc.b	nF5, $10
000A89A6 E1FF                       	smpsAlterNote       $FF
000A89A8 C450                       	dc.b	nG5, $50
000A89AA E100                       	smpsAlterNote       $00
000A89AC C208 C010 08C2 BB60        	dc.b	nF5, $08, nEb5, $10, $08, nF5, nBb4, $60
000A89B4 E1FF                       	smpsAlterNote       $FF
000A89B6 B808                       	dc.b	nG4, $08
000A89B8 E100                       	smpsAlterNote       $00
000A89BA BBBF C0C2 C3               	dc.b	nBb4, nD5, nEb5, nF5, nFs5
000A89BF E1FF                       	smpsAlterNote       $FF
000A89C1 C450                       	dc.b	nG5, $50
000A89C3 E100                       	smpsAlterNote       $00
000A89C5 C708                       	dc.b	nBb5, $08
000A89C7 E1FF                       	smpsAlterNote       $FF
000A89C9 C4                         	dc.b	nG5
000A89CA E100                       	smpsAlterNote       $00
000A89CC C9C7 C2                    	dc.b	nC6, nBb5, nF5
000A89CF E1FF                       	smpsAlterNote       $FF
000A89D1 C410 08                    	dc.b	nG5, $10, $08
000A89D4 E100                       	smpsAlterNote       $00
000A89D6 C2                         	dc.b	nF5
000A89D7 E1FF                       	smpsAlterNote       $FF
000A89D9 C480                       	dc.b	nG5, nRst
000A89DB E100                       	smpsAlterNote       $00
000A89DD C7C5 C7                    	dc.b	nBb5, nAb5, nBb5
000A89E0 E1FF                       	smpsAlterNote       $FF
000A89E2 C410                       	dc.b	nG5, $10
000A89E4 E100                       	smpsAlterNote       $00
000A89E6 BF08 C0BD BBC0 C1          	dc.b	nD5, $08, nEb5, nC5, nBb4, nEb5, nE5
000A89ED E1FF                       	smpsAlterNote       $FF
000A89EF C47F E701 7FE7 0180        	dc.b	nG5, $7F, smpsNoAttack, $01, $7F, smpsNoAttack, $01, nRst
000A89F7                            
000A89F7                            GentleBreeze_Loop0E:
000A89F7 7F                         	dc.b	$7F
000A89F8 F700 07FF FB               	smpsLoop            $00, $07, GentleBreeze_Loop0E
000A89FD 77                         	dc.b	$77
000A89FE E100                       	smpsAlterNote       $00
000A8A00 C001                       	dc.b	nEb5, $01
000A8A02 E6F9                       	smpsAlterVol        $F9
000A8A04 E0C0                       	smpsPan             panCenter, $00
000A8A06 E100                       	smpsAlterNote       $00
000A8A08 F6FF 71                    	smpsJump            GentleBreeze_Jump02
000A8A0B                            
000A8A0B                            ; FM5 Data
000A8A0B                            GentleBreeze_FM5:
000A8A0D E0C0                       	smpsPan             panCenter, $00
000A8A0F A5                         	dc.b	nC3
000A8A10                            
000A8A10                            GentleBreeze_Loop06:
000A8A10 10                         	dc.b	$10
000A8A11 E607                       	smpsAlterVol        $07
000A8A13 A5                         	dc.b	nC3
000A8A14 E6F9                       	smpsAlterVol        $F9
000A8A16 08                         	dc.b	$08
000A8A17 E607                       	smpsAlterVol        $07
000A8A19 A5                         	dc.b	nC3
000A8A1A E608                       	smpsAlterVol        $08
000A8A1C A5                         	dc.b	nC3
000A8A1D E6F1                       	smpsAlterVol        $F1
000A8A1F 18                         	dc.b	$18
000A8A20 E607                       	smpsAlterVol        $07
000A8A22 10                         	dc.b	$10
000A8A23 E608                       	smpsAlterVol        $08
000A8A25 A5                         	dc.b	nC3
000A8A26 E6F1                       	smpsAlterVol        $F1
000A8A28 A5                         	dc.b	nC3
000A8A29 F700 03FF E3               	smpsLoop            $00, $03, GentleBreeze_Loop06
000A8A2E A5                         	dc.b	nC3
000A8A2F                            
000A8A2F                            GentleBreeze_Loop07:
000A8A2F E607                       	smpsAlterVol        $07
000A8A31 A5                         	dc.b	nC3
000A8A32 E6F9                       	smpsAlterVol        $F9
000A8A34 08                         	dc.b	$08
000A8A35 E607                       	smpsAlterVol        $07
000A8A37 A5                         	dc.b	nC3
000A8A38 E608                       	smpsAlterVol        $08
000A8A3A A5                         	dc.b	nC3
000A8A3B E6F1                       	smpsAlterVol        $F1
000A8A3D 10                         	dc.b	$10
000A8A3E F700 02FF ED               	smpsLoop            $00, $02, GentleBreeze_Loop07
000A8A43                            
000A8A43                            GentleBreeze_Loop08:
000A8A43 A5                         	dc.b	nC3
000A8A44 E607                       	smpsAlterVol        $07
000A8A46 A5                         	dc.b	nC3
000A8A47 E6F9                       	smpsAlterVol        $F9
000A8A49 08                         	dc.b	$08
000A8A4A E607                       	smpsAlterVol        $07
000A8A4C A5                         	dc.b	nC3
000A8A4D E608                       	smpsAlterVol        $08
000A8A4F A5                         	dc.b	nC3
000A8A50 E6F1                       	smpsAlterVol        $F1
000A8A52 18                         	dc.b	$18
000A8A53 E607                       	smpsAlterVol        $07
000A8A55 10                         	dc.b	$10
000A8A56 E608                       	smpsAlterVol        $08
000A8A58 A5                         	dc.b	nC3
000A8A59 E6F1                       	smpsAlterVol        $F1
000A8A5B A5                         	dc.b	nC3
000A8A5C F700 03FF E3               	smpsLoop            $00, $03, GentleBreeze_Loop08
000A8A61 A5                         	dc.b	nC3
000A8A62 E607                       	smpsAlterVol        $07
000A8A64 A5                         	dc.b	nC3
000A8A65 E6F9                       	smpsAlterVol        $F9
000A8A67 08                         	dc.b	$08
000A8A68 E607                       	smpsAlterVol        $07
000A8A6A A5                         	dc.b	nC3
000A8A6B E608                       	smpsAlterVol        $08
000A8A6D A5                         	dc.b	nC3
000A8A6E E6F1                       	smpsAlterVol        $F1
000A8A70 10                         	dc.b	$10
000A8A71 E607                       	smpsAlterVol        $07
000A8A73 A5                         	dc.b	nC3
000A8A74 E6F9                       	smpsAlterVol        $F9
000A8A76 08                         	dc.b	$08
000A8A77 E607                       	smpsAlterVol        $07
000A8A79 A5                         	dc.b	nC3
000A8A7A E608                       	smpsAlterVol        $08
000A8A7C A5                         	dc.b	nC3
000A8A7D E6F1                       	smpsAlterVol        $F1
000A8A7F 01                         	dc.b	$01
000A8A80                            
000A8A80                            GentleBreeze_Jump01:
000A8A80 E7A5 0F                    	dc.b	smpsNoAttack, nC3, $0F
000A8A83 E607                       	smpsAlterVol        $07
000A8A85                            
000A8A85                            GentleBreeze_Loop09:
000A8A85 10                         	dc.b	$10
000A8A86 E608                       	smpsAlterVol        $08
000A8A88 A5                         	dc.b	nC3
000A8A89 E6F1                       	smpsAlterVol        $F1
000A8A8B 08                         	dc.b	$08
000A8A8C E60F                       	smpsAlterVol        $0F
000A8A8E 18                         	dc.b	$18
000A8A8F E6F8                       	smpsAlterVol        $F8
000A8A91 F700 0FFF F0               	smpsLoop            $00, $0F, GentleBreeze_Loop09
000A8A96 10                         	dc.b	$10
000A8A97 E608                       	smpsAlterVol        $08
000A8A99 A5                         	dc.b	nC3
000A8A9A E6F1                       	smpsAlterVol        $F1
000A8A9C 08                         	dc.b	$08
000A8A9D E60F                       	smpsAlterVol        $0F
000A8A9F 18                         	dc.b	$18
000A8AA0 E6F1                       	smpsAlterVol        $F1
000A8AA2                            
000A8AA2                            GentleBreeze_Loop0A:
000A8AA2 10                         	dc.b	$10
000A8AA3 E607                       	smpsAlterVol        $07
000A8AA5 A5                         	dc.b	nC3
000A8AA6 E6F9                       	smpsAlterVol        $F9
000A8AA8 08                         	dc.b	$08
000A8AA9 E607                       	smpsAlterVol        $07
000A8AAB A5                         	dc.b	nC3
000A8AAC E608                       	smpsAlterVol        $08
000A8AAE A5                         	dc.b	nC3
000A8AAF E6F1                       	smpsAlterVol        $F1
000A8AB1 18                         	dc.b	$18
000A8AB2 E607                       	smpsAlterVol        $07
000A8AB4 10                         	dc.b	$10
000A8AB5 E608                       	smpsAlterVol        $08
000A8AB7 A5                         	dc.b	nC3
000A8AB8 E6F1                       	smpsAlterVol        $F1
000A8ABA A5                         	dc.b	nC3
000A8ABB F700 03FF E3               	smpsLoop            $00, $03, GentleBreeze_Loop0A
000A8AC0 A5                         	dc.b	nC3
000A8AC1                            
000A8AC1                            GentleBreeze_Loop0B:
000A8AC1 E607                       	smpsAlterVol        $07
000A8AC3 A5                         	dc.b	nC3
000A8AC4 E6F9                       	smpsAlterVol        $F9
000A8AC6 08                         	dc.b	$08
000A8AC7 E607                       	smpsAlterVol        $07
000A8AC9 A5                         	dc.b	nC3
000A8ACA E608                       	smpsAlterVol        $08
000A8ACC A5                         	dc.b	nC3
000A8ACD E6F1                       	smpsAlterVol        $F1
000A8ACF 10                         	dc.b	$10
000A8AD0 F700 02FF ED               	smpsLoop            $00, $02, GentleBreeze_Loop0B
000A8AD5                            
000A8AD5                            GentleBreeze_Loop0C:
000A8AD5 A5                         	dc.b	nC3
000A8AD6 E607                       	smpsAlterVol        $07
000A8AD8 A5                         	dc.b	nC3
000A8AD9 E6F9                       	smpsAlterVol        $F9
000A8ADB 08                         	dc.b	$08
000A8ADC E607                       	smpsAlterVol        $07
000A8ADE A5                         	dc.b	nC3
000A8ADF E608                       	smpsAlterVol        $08
000A8AE1 A5                         	dc.b	nC3
000A8AE2 E6F1                       	smpsAlterVol        $F1
000A8AE4 18                         	dc.b	$18
000A8AE5 E607                       	smpsAlterVol        $07
000A8AE7 10                         	dc.b	$10
000A8AE8 E608                       	smpsAlterVol        $08
000A8AEA A5                         	dc.b	nC3
000A8AEB E6F1                       	smpsAlterVol        $F1
000A8AED A5                         	dc.b	nC3
000A8AEE F700 03FF E3               	smpsLoop            $00, $03, GentleBreeze_Loop0C
000A8AF3 A5                         	dc.b	nC3
000A8AF4 E607                       	smpsAlterVol        $07
000A8AF6 A5                         	dc.b	nC3
000A8AF7 E6F9                       	smpsAlterVol        $F9
000A8AF9 08                         	dc.b	$08
000A8AFA E607                       	smpsAlterVol        $07
000A8AFC A5                         	dc.b	nC3
000A8AFD E608                       	smpsAlterVol        $08
000A8AFF A5                         	dc.b	nC3
000A8B00 E6F1                       	smpsAlterVol        $F1
000A8B02 10                         	dc.b	$10
000A8B03 E607                       	smpsAlterVol        $07
000A8B05 A5                         	dc.b	nC3
000A8B06 E6F9                       	smpsAlterVol        $F9
000A8B08 08                         	dc.b	$08
000A8B09 E607                       	smpsAlterVol        $07
000A8B0B A5                         	dc.b	nC3
000A8B0C E608                       	smpsAlterVol        $08
000A8B0E A5                         	dc.b	nC3
000A8B0F E6F1                       	smpsAlterVol        $F1
000A8B11 01                         	dc.b	$01
000A8B12 E0C0                       	smpsPan             panCenter, $00
000A8B14 F6FF 6A                    	smpsJump            GentleBreeze_Jump01
000A8B17                            
000A8B17                            ; DAC Data
000A8B17                            GentleBreeze_DAC:
000A8B17 81                         	dc.b	dKick
000A8B18                            
000A8B18                            GentleBreeze_Loop00:
000A8B18 2018 2810 0881             	dc.b	$20, $18, $28, $10, $08, dKick
000A8B1E F700 02FF F6               	smpsLoop            $00, $02, GentleBreeze_Loop00
000A8B23 2018 7F80 2988 0889 8A8B+  	dc.b	$20, $18, $7F, nRst, $29, dHiTimpani, $08, dMidTimpani, dLowTimpani, dVLowTimpani, dKick
000A8B2E                            
000A8B2E                            GentleBreeze_Loop01:
000A8B2E 2018 2810 0881             	dc.b	$20, $18, $28, $10, $08, dKick
000A8B34 F700 02FF F6               	smpsLoop            $00, $02, GentleBreeze_Loop01
000A8B39 2018 7F80 2988 0889 8A01   	dc.b	$20, $18, $7F, nRst, $29, dHiTimpani, $08, dMidTimpani, dLowTimpani, $01
000A8B43                            
000A8B43                            GentleBreeze_Jump00:
000A8B43 8007 8B08                  	dc.b	nRst, $07, dVLowTimpani, $08
000A8B47                            
000A8B47                            GentleBreeze_Loop02:
000A8B47 81                         	dc.b	dKick
000A8B48                            
000A8B48                            GentleBreeze_Loop03:
000A8B48 1008 8182 2081 1008 8182+  	dc.b	$10, $08, dKick, dSnare, $20, dKick, $10, $08, dKick, dSnare, $10, dMidTimpani
000A8B54 088A                       	dc.b	$08, dLowTimpani
000A8B56 F700 03FF ED               	smpsLoop            $00, $03, GentleBreeze_Loop02
000A8B5B 8110 0881 8210 8808 8982+  	dc.b	dKick, $10, $08, dKick, dSnare, $10, dHiTimpani, $08, dMidTimpani, dSnare, dLowTimpani, dVLowTimpani
000A8B67 1082 0881 18               	dc.b	$10, dSnare, $08, dKick, $18
000A8B6C F701 02FF D8               	smpsLoop            $01, $02, GentleBreeze_Loop03
000A8B71                            
000A8B71                            GentleBreeze_Loop04:
000A8B71 2018 2810 0881             	dc.b	$20, $18, $28, $10, $08, dKick
000A8B77 F700 02FF F6               	smpsLoop            $00, $02, GentleBreeze_Loop04
000A8B7C 2018 7F80 2988 0889 8A8B+  	dc.b	$20, $18, $7F, nRst, $29, dHiTimpani, $08, dMidTimpani, dLowTimpani, dVLowTimpani, dKick
000A8B87                            
000A8B87                            GentleBreeze_Loop05:
000A8B87 2018 2810 0881             	dc.b	$20, $18, $28, $10, $08, dKick
000A8B8D F700 02FF F6               	smpsLoop            $00, $02, GentleBreeze_Loop05
000A8B92 2018 7F80 2988 0889 8A01   	dc.b	$20, $18, $7F, nRst, $29, dHiTimpani, $08, dMidTimpani, dLowTimpani, $01
000A8B9C F6FF A5                    	smpsJump            GentleBreeze_Jump00
000A8B9F                            
000A8B9F                            ; PSG 1 Data
000A8B9F                            GentleBreeze_PSG1:
000A8B9F 80                         	dc.b	nRst
000A8BA0                            
000A8BA0                            GentleBreeze_LoopPSG02:
000A8BA0 7F                         	dc.b	$7F
000A8BA1 F700 08FF FB               	smpsLoop            $00, $08, GentleBreeze_LoopPSG02
000A8BA6 08                         	dc.b	$08
000A8BA7 EC04                       	smpsPSGAlterVol     $04
000A8BA9                            
000A8BA9                            GentleBreeze_JumpPSG01:
000A8BA9 A37F A07F 019E 7F7F 02A3+  	dc.b	nBb2, $7F, nG2, $7F, $01, nF2, $7F, $7F, $02, nBb2, $7F, $01
000A8BB5 A07F 019E 7F7F 0280        	dc.b	nG2, $7F, $01, nF2, $7F, $7F, $02, nRst
000A8BBD                            
000A8BBD                            GentleBreeze_LoopPSG03:
000A8BBD 7F                         	dc.b	$7F
000A8BBE F700 08FF FB               	smpsLoop            $00, $08, GentleBreeze_LoopPSG03
000A8BC3 08A3 01                    	dc.b	$08, nBb2, $01
000A8BC6 F6FF E1                    	smpsJump            GentleBreeze_JumpPSG01
000A8BC9                            
000A8BC9                            ; PSG2 Data
000A8BC9                            GentleBreeze_PSG2:
000A8BC9 80                         	dc.b	nRst
000A8BCA                            
000A8BCA                            GentleBreeze_LoopPSG00:
000A8BCA 7F                         	dc.b	$7F
000A8BCB F700 08FF FB               	smpsLoop            $00, $08, GentleBreeze_LoopPSG00
000A8BD0 08                         	dc.b	$08
000A8BD1 EC04                       	smpsPSGAlterVol     $04
000A8BD3                            
000A8BD3                            GentleBreeze_JumpPSG00:
000A8BD3 A87F A77F 01A5 7F7F 02A8+  	dc.b	nEb3, $7F, nD3, $7F, $01, nC3, $7F, $7F, $02, nEb3, $7F, $01
000A8BDF A77F 01A5 7F7F 0280        	dc.b	nD3, $7F, $01, nC3, $7F, $7F, $02, nRst
000A8BE7                            
000A8BE7                            GentleBreeze_LoopPSG01:
000A8BE7 7F                         	dc.b	$7F
000A8BE8 F700 08FF FB               	smpsLoop            $00, $08, GentleBreeze_LoopPSG01
000A8BED 08A8 01                    	dc.b	$08, nEb3, $01
000A8BF0 F6FF E1                    	smpsJump            GentleBreeze_JumpPSG00
000A8BF3                            
000A8BF3                            GentleBreeze_Voices:
000A8BF3                            ;	Voice $00
000A8BF3                            ;	$0C
000A8BF3                            ;	$2A, $70, $2A, $71, 	$1F, $1F, $1F, $1F, 	$0D, $04, $11, $0C
000A8BF3                            ;	$00, $00, $00, $01, 	$F3, $F4, $F1, $89, 	$7F, $7F, $18, $00
000A8BF3                            	smpsVcAlgorithm     $04
000A8BF3                            	smpsVcFeedback      $01
000A8BF3                            	smpsVcUnusedBits    $00
000A8BF3                            	smpsVcDetune        $07, $02, $07, $02
000A8BF3                            	smpsVcCoarseFreq    $01, $0A, $00, $0A
000A8BF3                            	smpsVcRateScale     $00, $00, $00, $00
000A8BF3                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000A8BF3                            	smpsVcAmpMod        $00, $00, $00, $00
000A8BF3                            	smpsVcDecayRate1    $0C, $11, $04, $0D
000A8BF3                            	smpsVcDecayRate2    $01, $00, $00, $00
000A8BF3                            	smpsVcDecayLevel    $08, $0F, $0F, $0F
000A8BF3                            	smpsVcReleaseRate   $09, $01, $04, $03
000A8BF3 0C2A 702A 711F 1F1F 1F0D+  	smpsVcTotalLevel    $00, $18, $7F, $7F
000A8C0C                            
000A8C0C                            ;	Voice $01
000A8C0C                            ;	$38
000A8C0C                            ;	$54, $17, $70, $30, 	$9F, $1F, $9F, $1F, 	$12, $02, $0A, $0A
000A8C0C                            ;	$00, $10, $00, $00, 	$05, $05, $05, $08, 	$21, $35, $10, $00
000A8C0C                            	smpsVcAlgorithm     $00
000A8C0C                            	smpsVcFeedback      $07
000A8C0C                            	smpsVcUnusedBits    $00
000A8C0C                            	smpsVcDetune        $03, $07, $01, $05
000A8C0C                            	smpsVcCoarseFreq    $00, $00, $07, $04
000A8C0C                            	smpsVcRateScale     $00, $02, $00, $02
000A8C0C                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000A8C0C                            	smpsVcAmpMod        $00, $00, $00, $00
000A8C0C                            	smpsVcDecayRate1    $0A, $0A, $02, $12
000A8C0C                            	smpsVcDecayRate2    $00, $00, $10, $00
000A8C0C                            	smpsVcDecayLevel    $00, $00, $00, $00
000A8C0C                            	smpsVcReleaseRate   $08, $05, $05, $05
000A8C0C 3854 1770 309F 1F9F 1F12+  	smpsVcTotalLevel    $00, $10, $35, $21
000A8C25                            
000A8C25                            ;	Voice $02
000A8C25                            ;	$00
000A8C25                            ;	$00, $00, $00, $00, 	$00, $00, $00, $00, 	$00, $00, $00, $00
000A8C25                            ;	$00, $00, $00, $00, 	$FF, $FF, $FF, $FF, 	$00, $00, $00, $00
000A8C25                            	smpsVcAlgorithm     $00
000A8C25                            	smpsVcFeedback      $00
000A8C25                            	smpsVcUnusedBits    $00
000A8C25                            	smpsVcDetune        $00, $00, $00, $00
000A8C25                            	smpsVcCoarseFreq    $00, $00, $00, $00
000A8C25                            	smpsVcRateScale     $00, $00, $00, $00
000A8C25                            	smpsVcAttackRate    $00, $00, $00, $00
000A8C25                            	smpsVcAmpMod        $00, $00, $00, $00
000A8C25                            	smpsVcDecayRate1    $00, $00, $00, $00
000A8C25                            	smpsVcDecayRate2    $00, $00, $00, $00
000A8C25                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000A8C25                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000A8C25 0000 0000 0000 0000 0000+  	smpsVcTotalLevel    $00, $00, $00, $00
000A8C3E                            
000A8C3E                            ;	Voice $03
000A8C3E                            ;	$36
000A8C3E                            ;	$0F, $0F, $08, $09, 	$16, $18, $00, $1F, 	$0F, $16, $0C, $0B
000A8C3E                            ;	$00, $12, $00, $00, 	$06, $2F, $4F, $4F, 	$00, $00, $65, $53
000A8C3E                            	smpsVcAlgorithm     $06
000A8C3E                            	smpsVcFeedback      $06
000A8C3E                            	smpsVcUnusedBits    $00
000A8C3E                            	smpsVcDetune        $00, $00, $00, $00
000A8C3E                            	smpsVcCoarseFreq    $09, $08, $0F, $0F
000A8C3E                            	smpsVcRateScale     $00, $00, $00, $00
000A8C3E                            	smpsVcAttackRate    $1F, $00, $18, $16
000A8C3E                            	smpsVcAmpMod        $00, $00, $00, $00
000A8C3E                            	smpsVcDecayRate1    $0B, $0C, $16, $0F
000A8C3E                            	smpsVcDecayRate2    $00, $00, $12, $00
000A8C3E                            	smpsVcDecayLevel    $04, $04, $02, $00
000A8C3E                            	smpsVcReleaseRate   $0F, $0F, $0F, $06
000A8C3E 360F 0F08 0916 1800 1F0F+  	smpsVcTotalLevel    $53, $65, $00, $00
000A8C57                            
000A8C57                            ;	Voice $04
000A8C57                            ;	$07
000A8C57                            ;	$05, $53, $64, $75, 	$5C, $5C, $5C, $1C, 	$17, $17, $17, $17
000A8C57                            ;	$00, $00, $00, $00, 	$26, $26, $26, $26, 	$00, $00, $00, $00
000A8C57                            	smpsVcAlgorithm     $07
000A8C57                            	smpsVcFeedback      $00
000A8C57                            	smpsVcUnusedBits    $00
000A8C57                            	smpsVcDetune        $07, $06, $05, $00
000A8C57                            	smpsVcCoarseFreq    $05, $04, $03, $05
000A8C57                            	smpsVcRateScale     $00, $01, $01, $01
000A8C57                            	smpsVcAttackRate    $1C, $1C, $1C, $1C
000A8C57                            	smpsVcAmpMod        $00, $00, $00, $00
000A8C57                            	smpsVcDecayRate1    $17, $17, $17, $17
000A8C57                            	smpsVcDecayRate2    $00, $00, $00, $00
000A8C57                            	smpsVcDecayLevel    $02, $02, $02, $02
000A8C57                            	smpsVcReleaseRate   $06, $06, $06, $06
000A8C57 0705 5364 755C 5C5C 1C17+  	smpsVcTotalLevel    $00, $00, $00, $00
000A8C70                            
000A8C70                            ;	Voice $05
000A8C70                            ;	$3C
000A8C70                            ;	$21, $21, $63, $61, 	$13, $10, $14, $0E, 	$09, $0B, $0B, $10
000A8C70                            ;	$04, $04, $04, $04, 	$17, $17, $17, $27, 	$1C, $02, $1B, $00
000A8C70                            	smpsVcAlgorithm     $04
000A8C70                            	smpsVcFeedback      $07
000A8C70                            	smpsVcUnusedBits    $00
000A8C70                            	smpsVcDetune        $06, $06, $02, $02
000A8C70                            	smpsVcCoarseFreq    $01, $03, $01, $01
000A8C70                            	smpsVcRateScale     $00, $00, $00, $00
000A8C70                            	smpsVcAttackRate    $0E, $14, $10, $13
000A8C70                            	smpsVcAmpMod        $00, $00, $00, $00
000A8C70                            	smpsVcDecayRate1    $10, $0B, $0B, $09
000A8C70                            	smpsVcDecayRate2    $04, $04, $04, $04
000A8C70                            	smpsVcDecayLevel    $02, $01, $01, $01
000A8C70                            	smpsVcReleaseRate   $07, $07, $07, $07
000A8C70 3C21 2163 6113 1014 0E09+  	smpsVcTotalLevel    $00, $1B, $02, $1C
000A8C89                            
000A8C89                            
000A8C8A 00                         		even
000A8C8A                            ; ---------------------------------------------------------------------------
000A8C8A                            ; Sound	effect pointers
000A8C8A                            ; ---------------------------------------------------------------------------
000A8C8A 0000 0000 0000 0000 0000+  SoundIndex:	dc.l SoundA0, SoundA1, SoundA2
000A8C96 0000 0000 0000 0000 0000+  		dc.l SoundA3, SoundA4, SoundA5
000A8CA2 0000 0000 0000 0000 0000+  		dc.l SoundA6, SoundA7, SoundA8
000A8CAE 0000 0000 0000 0000 0000+  		dc.l SoundA9, SoundAA, SoundAB
000A8CBA 0000 0000 0000 0000 0000+  		dc.l SoundAC, SoundAD, SoundAE
000A8CC6 0000 0000 0000 0000 0000+  		dc.l SoundAF, SoundB0, SoundB1
000A8CD2 0000 0000 0000 0000 0000+  		dc.l SoundB2, SoundB3, SoundB4
000A8CDE 0000 0000 0000 0000 0000+  		dc.l SoundB5, SoundB6, SoundB7
000A8CEA 0000 0000 0000 0000 0000+  		dc.l SoundB8, SoundB9, SoundBA
000A8CF6 0000 0000 0000 0000 0000+  		dc.l SoundBB, SoundBC, SoundBD
000A8D02 0000 0000 0000 0000 0000+  		dc.l SoundBE, SoundBF, SoundC0
000A8D0E 0000 0000 0000 0000 0000+  		dc.l SoundC1, SoundC2, SoundC3
000A8D1A 0000 0000 0000 0000 0000+  		dc.l SoundC4, SoundC5, SoundC6
000A8D26 0000 0000 0000 0000 0000+  		dc.l SoundC7, SoundC8, SoundC9
000A8D32 0000 0000 0000 0000 0000+  		dc.l SoundCA, SoundCB, SoundCC
000A8D3E 0000 0000 0000 0000 0000+  		dc.l SoundCD, SoundCE, SoundCF
000A8D4A 0000 0000                  SoundD0Index:	dc.l SoundD0
000A8D4E                            SoundA0:	include	sound\jump.asm
000A8D4E                            jump_Header:
000A8D4E =00000001                  smpsHeaderStartSong = 1
000A8D4E 0000                       	smpsHeaderVoice     jump_Voices
000A8D50 01                         	smpsHeaderTempoSFX  $01
000A8D51 01                         	smpsHeaderChanSFX   $01
000A8D52                            
000A8D5E                            
000A8D5E                            ; FM4 Data
000A8D5E                            jump_FM4:
000A8D60 E000                       	smpsPan             panNone, $00
000A8D62 E607                       	smpsAlterVol        $07
000A8D64 E0C0                       	smpsPan             panCenter, $00
000A8D66 9903 B1                    	dc.b	nC2, $03, nC4
000A8D69 E607                       	smpsAlterVol        $07
000A8D6B E040                       	smpsPan             panRight, $00
000A8D6D 99B1                       	dc.b	nC2, nC4
000A8D6F E60A                       	smpsAlterVol        $0A
000A8D71 E080                       	smpsPan             panLeft, $00
000A8D73 99B1                       	dc.b	nC2, nC4
000A8D75 E603                       	smpsAlterVol        $03
000A8D77 E0C0                       	smpsPan             panCenter, $00
000A8D79 99B1                       	dc.b	nC2, nC4
000A8D7B E000                       	smpsPan             panNone, $00
000A8D7D 803D                       	dc.b	nRst, $3D
000A8D7F F2                         	smpsStop
000A8D80                            
000A8D80                            ; PSG3 Data
000A8D80                            jump_PSG3:
000A8D80 F3E7                       	smpsPSGform         $E7
000A8D82 8056                       	dc.b	nRst, $56
000A8D84 F2                         	smpsStop
000A8D85                            
000A8D85                            jump_Voices:
000A8D85                            ;	Voice $00
000A8D85                            ;	$3C
000A8D85                            ;	$00, $0F, $01, $00, 	$1F, $1F, $1F, $1F, 	$00, $12, $14, $0E
000A8D85                            ;	$00, $11, $00, $11, 	$0F, $EF, $FF, $0F, 	$00, $00, $00, $00
000A8D85                            	smpsVcAlgorithm     $04
000A8D85                            	smpsVcFeedback      $07
000A8D85                            	smpsVcUnusedBits    $00
000A8D85                            	smpsVcDetune        $00, $00, $00, $00
000A8D85                            	smpsVcCoarseFreq    $00, $01, $0F, $00
000A8D85                            	smpsVcRateScale     $00, $00, $00, $00
000A8D85                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000A8D85                            	smpsVcAmpMod        $00, $00, $00, $00
000A8D85                            	smpsVcDecayRate1    $0E, $14, $12, $00
000A8D85                            	smpsVcDecayRate2    $11, $00, $11, $00
000A8D85                            	smpsVcDecayLevel    $00, $0F, $0E, $00
000A8D85                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000A8D85 3C00 0F01 001F 1F1F 1F00+  	smpsVcTotalLevel    $00, $00, $00, $00
000A8D9E                            
000A8D9E                            
000A8D9E                            		even
000A8D9E                            SoundA1:	incbin	sound\soundA1.bin
000A8DC8                            		even
000A8DC8                            SoundA2:	incbin	sound\soundA2.bin
000A8DE8                            		even
000A8DE8                            SoundA3:	incbin	sound\soundA3.bin
000A8E1A                            		even
000A8E1A                            SoundA4:	incbin	sound\soundA4.bin
000A8E50                            		even
000A8E50                            SoundA5:	include	sound\fart.asm
000A8E50                            Fart_Header:
000A8E50 =00000001                  smpsHeaderStartSong = 1
000A8E50 0000                       	smpsHeaderVoice     Fart_Voices
000A8E52 01                         	smpsHeaderTempoSFX  $01
000A8E53 04                         	smpsHeaderChanSFX   $04
000A8E54                            
000A8E6C                            
000A8E6C                            Fart_FM3:
000A8E6E E607                       	smpsAlterVol        $07
000A8E70 E0C0                       	smpsPan             panCenter, $00
000A8E72 F000 0210 03               	smpsModSet          $00, $02, $10, $03
000A8E77 A003 E7                    	dc.b	nG2, $03, smpsNoAttack
000A8E7A E1FE                       	smpsAlterNote       $FE
000A8E7C A201 E7                    	dc.b	nA2, $01, smpsNoAttack
000A8E7F E100                       	smpsAlterNote       $00
000A8E81 A211 807F 2C               	dc.b	nA2, $11, nRst, $7F, $2C
000A8E86 F2                         	smpsStop
000A8E87                            
000A8E87                            ; FM4 Data
000A8E87                            Fart_FM4:
000A8E89 E0C0                       	smpsPan             panCenter, $00
000A8E8B 8006                       	dc.b	nRst, $06
000A8E8F E616                       	smpsAlterVol        $16
000A8E91 E080                       	smpsPan             panLeft, $00
000A8E93 F000 0210 03               	smpsModSet          $00, $02, $10, $03
000A8E98 A212                       	dc.b	nA2, $12
000A8E9A E60A                       	smpsAlterVol        $0A
000A8E9C E7A2 0C                    	dc.b	smpsNoAttack, nA2, $0C
000A8E9F E603                       	smpsAlterVol        $03
000A8EA1 E7A2                       	dc.b	smpsNoAttack, nA2
000A8EA3 E603                       	smpsAlterVol        $03
000A8EA5 E7A2                       	dc.b	smpsNoAttack, nA2
000A8EA7 E604                       	smpsAlterVol        $04
000A8EA9 E7A2                       	dc.b	smpsNoAttack, nA2
000A8EAB E606                       	smpsAlterVol        $06
000A8EAD E7A2 18                    	dc.b	smpsNoAttack, nA2, $18
000A8EB0 E610                       	smpsAlterVol        $10
000A8EB2 E7A2 0C                    	dc.b	smpsNoAttack, nA2, $0C
000A8EB5 E610                       	smpsAlterVol        $10
000A8EB7 E7A2 1280 42               	dc.b	smpsNoAttack, nA2, $12, nRst, $42
000A8EBC F2                         	smpsStop
000A8EBD                            
000A8EBD                            ; FM5 Data
000A8EBD                            Fart_FM5:
000A8EBF E0C0                       	smpsPan             panCenter, $00
000A8EC1 8009                       	dc.b	nRst, $09
000A8EC5 E616                       	smpsAlterVol        $16
000A8EC7 E040                       	smpsPan             panRight, $00
000A8EC9 F000 0210 03               	smpsModSet          $00, $02, $10, $03
000A8ECE A215                       	dc.b	nA2, $15
000A8ED0 E60A                       	smpsAlterVol        $0A
000A8ED2 E7A2 0C                    	dc.b	smpsNoAttack, nA2, $0C
000A8ED5 E603                       	smpsAlterVol        $03
000A8ED7 E7A2                       	dc.b	smpsNoAttack, nA2
000A8ED9 E603                       	smpsAlterVol        $03
000A8EDB E7A2                       	dc.b	smpsNoAttack, nA2
000A8EDD E604                       	smpsAlterVol        $04
000A8EDF E7A2                       	dc.b	smpsNoAttack, nA2
000A8EE1 E606                       	smpsAlterVol        $06
000A8EE3 E7A2 15                    	dc.b	smpsNoAttack, nA2, $15
000A8EE6 E610                       	smpsAlterVol        $10
000A8EE8 E7A2 0C                    	dc.b	smpsNoAttack, nA2, $0C
000A8EEB E610                       	smpsAlterVol        $10
000A8EED E7A2 1280 3F               	dc.b	smpsNoAttack, nA2, $12, nRst, $3F
000A8EF2 F2                         	smpsStop
000A8EF3                            
000A8EF3                            ; PSG3 Data
000A8EF3                            Fart_PSG3:
000A8EF3 F2                         	smpsStop
000A8EF4                            
000A8EF4                            ; FM Voices
000A8EF4                            Fart_Voices:
000A8EF4                            ;	Voice $00
000A8EF4                            ;	$39
000A8EF4                            ;	$70, $32, $71, $01, 	$DF, $DF, $DF, $1F, 	$04, $00, $00, $00
000A8EF4                            ;	$1F, $16, $00, $00, 	$E0, $00, $09, $FA, 	$12, $00, $00, $00
000A8EF4                            	smpsVcAlgorithm     $01
000A8EF4                            	smpsVcFeedback      $07
000A8EF4                            	smpsVcUnusedBits    $00
000A8EF4                            	smpsVcDetune        $00, $07, $03, $07
000A8EF4                            	smpsVcCoarseFreq    $01, $01, $02, $00
000A8EF4                            	smpsVcRateScale     $00, $03, $03, $03
000A8EF4                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000A8EF4                            	smpsVcAmpMod        $00, $00, $00, $00
000A8EF4                            	smpsVcDecayRate1    $00, $00, $00, $04
000A8EF4                            	smpsVcDecayRate2    $00, $00, $16, $1F
000A8EF4                            	smpsVcDecayLevel    $0F, $00, $00, $0E
000A8EF4                            	smpsVcReleaseRate   $0A, $09, $00, $00
000A8EF4 3970 3271 01DF DFDF 1F04+  	smpsVcTotalLevel    $00, $00, $00, $12
000A8F0D                            
000A8F0D                            ;	Voice $01
000A8F0D                            ;	$00
000A8F0D                            ;	$00, $00, $00, $00, 	$00, $00, $00, $00, 	$00, $00, $00, $00
000A8F0D                            ;	$00, $00, $00, $00, 	$FF, $FF, $FF, $FF, 	$00, $00, $00, $00
000A8F0D                            	smpsVcAlgorithm     $00
000A8F0D                            	smpsVcFeedback      $00
000A8F0D                            	smpsVcUnusedBits    $00
000A8F0D                            	smpsVcDetune        $00, $00, $00, $00
000A8F0D                            	smpsVcCoarseFreq    $00, $00, $00, $00
000A8F0D                            	smpsVcRateScale     $00, $00, $00, $00
000A8F0D                            	smpsVcAttackRate    $00, $00, $00, $00
000A8F0D                            	smpsVcAmpMod        $00, $00, $00, $00
000A8F0D                            	smpsVcDecayRate1    $00, $00, $00, $00
000A8F0D                            	smpsVcDecayRate2    $00, $00, $00, $00
000A8F0D                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000A8F0D                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000A8F0D 0000 0000 0000 0000 0000+  	smpsVcTotalLevel    $00, $00, $00, $00
000A8F0D 0000 0000 0000 0000 0000+  	smpsVcTotalLevel    $00, $00, $00, $00
000A8F26                            		even
000A8F26                            SoundA6:	incbin	sound\soundA6.bin
000A8F56                            		even
000A8F56                            SoundA7:	incbin	sound\soundA7.bin
000A8F86                            		even
000A8F86                            SoundA8:	incbin	sound\soundA8.bin
000A8FBA                            		even
000A8FBA                            SoundA9:	incbin	sound\soundA9.bin
000A8FCC                            		even
000A8FCC                            SoundAA:	incbin	sound\soundAA.bin
000A900E                            		even
000A900E                            SoundAB:	incbin	sound\soundAB.bin
000A902E                            		even
000A902E                            SoundAC:	incbin	sound\soundAC.bin
000A9062                            		even
000A9062                            SoundAD:	incbin	sound\soundAD.bin
000A9098                            		even
000A9098                            SoundAE:	incbin	sound\soundAE.bin
000A90E2                            		even
000A90E2                            SoundAF:	incbin	sound\soundAF.bin
000A9110                            		even
000A9110                            SoundB0:	incbin	sound\soundB0.bin
000A9142                            		even
000A9142                            SoundB1:	incbin	sound\soundB1.bin
000A916E                            		even
000A916E                            SoundB2:	incbin	sound\soundB2.bin
000A91BE                            		even
000A91BE                            SoundB3:	incbin	sound\soundB3.bin
000A9208                            		even
000A9208                            SoundB4:	include	sound\soundB4.asm
000A9208                            SndB4_Bumper_Header:
000A9208 =00000001                  smpsHeaderStartSong = 1
000A9208 0000                       	smpsHeaderVoice     SndB4_Bumper_Voices
000A920A 01                         	smpsHeaderTempoSFX  $01
000A920B 03                         	smpsHeaderChanSFX   $03
000A920C                            
000A921E                            
000A921E                            ; FM5 Data
000A921E                            SndB4_Bumper_FM5:
000A9220 F600 00                    	smpsJump            SndB4_Bumper_Jump00
000A9223                            
000A9223                            ; FM4 Data
000A9223                            SndB4_Bumper_FM4:
000A9223 F2                         	smpsStop
000A9224                            
000A9224                            SndB4_Bumper_Jump00:
000A9224 A020                       	dc.b	nG2, $20
000A9226 F2                         	smpsStop
000A9227                            
000A9227                            ; FM3 Data
000A9227                            SndB4_Bumper_FM3:
000A9227 F2                         	smpsStop
000A9228                            
000A9228                            SndB4_Bumper_Voices:
000A9228                            ;	Voice $00
000A9228                            ;	$32
000A9228                            ;	$04, $20, $70, $70, 	$1F, $1F, $1F, $1F, 	$09, $00, $00, $08
000A9228                            ;	$09, $00, $00, $0B, 	$00, $00, $00, $0F, 	$0C, $00, $30, $00
000A9228                            	smpsVcAlgorithm     $02
000A9228                            	smpsVcFeedback      $06
000A9228                            	smpsVcUnusedBits    $00
000A9228                            	smpsVcDetune        $07, $07, $02, $00
000A9228                            	smpsVcCoarseFreq    $00, $00, $00, $04
000A9228                            	smpsVcRateScale     $00, $00, $00, $00
000A9228                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000A9228                            	smpsVcAmpMod        $00, $00, $00, $00
000A9228                            	smpsVcDecayRate1    $08, $00, $00, $09
000A9228                            	smpsVcDecayRate2    $0B, $00, $00, $09
000A9228                            	smpsVcDecayLevel    $00, $00, $00, $00
000A9228                            	smpsVcReleaseRate   $0F, $00, $00, $00
000A9228 3204 2070 701F 1F1F 1F09+  	smpsVcTotalLevel    $00, $30, $00, $0C
000A9228 3204 2070 701F 1F1F 1F09+  	smpsVcTotalLevel    $00, $30, $00, $0C
000A9242 00                         		even
000A9242                            SoundB5:	incbin	sound\soundB5.bin
000A9260 00                         		even
000A9260                            SoundB6:	incbin	sound\soundB6.bin
000A927E                            		even
000A927E                            SoundB7:	incbin	sound\soundB7.bin
000A92BA                            		even
000A92BA                            SoundB8:	incbin	sound\soundB8.bin
000A92D8                            		even
000A92D8                            SoundB9:	incbin	sound\soundB9.bin
000A933C                            		even
000A933C                            SoundBA:	incbin	sound\soundBA.bin
000A93A0                            		even
000A93A0                            SoundBB:	incbin	sound\soundBB.bin
000A93CC                            		even
000A93CC                            SoundBC:	incbin	sound\soundBC.bin
000A940E                            		even
000A940E                            SoundBD:	incbin	sound\soundBD.bin
000A9462                            		even
000A9462                            SoundBE:	incbin	sound\soundBE.bin
000A949C                            		even
000A949C                            SoundBF:	incbin	sound\soundBF.bin
000A950E                            		even
000A950E                            SoundC0:	incbin	sound\soundC0.bin
000A953C                            		even
000A953C                            SoundC1:	incbin	sound\soundC1.bin
000A9596                            		even
000A9596                            SoundC2:	incbin	sound\soundC2.bin
000A95C0                            		even
000A95C0                            SoundC3:	incbin	sound\soundC3.bin
000A963A                            		even
000A963A                            SoundC4:	incbin	sound\soundC4.bin
000A9738                            		even
000A9738                            SoundC5:	incbin	sound\soundC5.bin
000A97A0                            		even
000A97A0                            SoundC6:	incbin	sound\soundC6.bin
000A97E2                            		even
000A97E2                            SoundC7:	incbin	sound\soundC7.bin
000A9810                            		even
000A9810                            SoundC8:	incbin	sound\soundC8.bin
000A9822                            		even
000A9822                            SoundC9:	incbin	sound\soundC9.bin
000A9850                            		even
000A9850                            SoundCA:	incbin	sound\soundCA.bin
000A987E                            		even
000A987E                            SoundCB:	incbin	sound\soundCB.bin
000A98CA                            		even
000A98CA                            SoundCC:	incbin	sound\C9.ssf
000A98F8                            		even
000A98F8                            SoundCD:	incbin	sound\soundCD.bin
000A9924                            		even
000A9924                            SoundCE:	incbin	sound\soundCE.bin
000A9942 00                         		even
000A9942                            SoundCF:	incbin	sound\soundCF.bin
000A997A                            		even
000A997A                            SoundD0:	incbin	sound\soundD0.bin
000A99B4                            		even
000A99B4                            SegaPCM:	incbin	sound\segapcm.bin
000C3B0A                            SegaPCM_end:
000C3B0A                            	even
000C3B0A                            
000C3B0A                            IdiotPCM:	incbin	sound\youare.bin
000CDBDB                            IdiotPCM_end:
000CDBDC 00                         	even
000CDBDC                            
000CDBDC                            Minecraft:	include	minecraft\code\main.asm
000CDBDC                            ; Minecraft: Very Legacy Console Edition
000CDBDC                            ; Main file
000CDBDC                            
000CDBDC                            ;	align	$20000
000CDBDC                            	opt	l.
000CDBDC                            	include	"minecraft\code\variables.asm"
000CDBDC                            ; Minecraft: Very Legacy Console Edition
000CDBDC                            ; Variable Definitions
000CDBDC                            
000CDBDC =00000040                  MAP_HEIGHT	equ	64
000CDBDC =00000100                  MAP_WIDTH	equ	256
000CDBDC                            
000CDBDC                            		rsset	$FF0000
000CDBDC =00FF0000                  mcRAM		rs.b	0
000CDBDC =00FF0000                  mapWallBlocks	rs.b	MAP_HEIGHT*MAP_WIDTH	; wall layer layout data
000CDBDC =00FF4000                  mapCollBlocks	rs.b	MAP_HEIGHT*MAP_WIDTH	; collision layer layout data
000CDBDC                            
000CDBDC                            		rsset	$FFFF8000
000CDBDC =FFFF8000                  planeBuffer	rs.w	29*64			; foreground plane buffer
000CDBDC =FFFF8E80                  planeBuffer_End	rs.b	0
000CDBDC =00000E80                  PLANE_BUFF_SIZE	equ	planeBuffer_End-planeBuffer
000CDBDC                            
000CDBDC =FFFF8E80                  camXPosFG	rs.w	1			; camera foreground layout x position
000CDBDC =FFFF8E82                  camYposFG	rs.w	1			; camera foreground layout y position
000CDBDC =FFFF8E84                  camXPosBG	rs.w	1			; camera background layout x position
000CDBDC =FFFF8E86                  camYposBG	rs.w	1			; camera background layout y position
000CDBDC                            
000CDBDC                            		rsset	__rs&$FFFFFF
000CDBDC =00FF8E88                  mcRAM_End	rs.b	0
000CDBDC =00FF8E88                  mcRAM_End	rs.b	0
000CDBDC                            	include	"minecraft\code\macros.asm"
000CDBDC                            ; =========================================================================================================================================================
000CDBDC                            ; MegaDrive macros
000CDBDC                            ; =========================================================================================================================================================
000CDBDC                            clrRAM		macro	starta, enda
000CDBDC                            		local	endaddr
000CDBDC                            		if narg<2
000CDBDC                            endaddr			EQUS	"\starta\_End"
000CDBDC                            		else
000CDBDC                            endaddr			EQUS	"\enda"
000CDBDC                            		endif
000CDBDC                            
000CDBDC                            		moveq	#0,d0
000CDBDC                            
000CDBDC                            		if ((\starta)&$8000)=0
000CDBDC                            			lea	\starta,a1
000CDBDC                            		else
000CDBDC                            			lea	(\starta).w,a1
000CDBDC                            		endif
000CDBDC                            		if (\starta)&1
000CDBDC                            			move.b	d0,(a1)+
000CDBDC                            		endif
000CDBDC                            
000CDBDC                            		move.w	#(((\endaddr)-(\starta))-((\starta)&1))>>2-1,d1
000CDBDC                            .Clear\@:	move.l	d0,(a1)+
000CDBDC                            		dbf	d1,.Clear\@
000CDBDC                            
000CDBDC                            		if (((\endaddr)-(\starta))-((\starta)&1))&2
000CDBDC                            			move.w	d0,(a1)+
000CDBDC                            		endif
000CDBDC                            		if (((\endaddr)-(\starta))-((\starta)&1))&1
000CDBDC                            			move.b	d0,(a1)+
000CDBDC                            		endif
000CDBDC                            		endm
000CDBDC                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CDBDC                            ; Disable interrupts
000CDBDC                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CDBDC                            ; ARGUMENTS:
000CDBDC                            ;	Nothing
000CDBDC                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CDBDC                            ; RETURNS:
000CDBDC                            ;	Nothing
000CDBDC                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CDBDC                            intsOff		macros
000CDBDC                            		ori	#$700,sr
000CDBDC                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CDBDC                            ; Enable interrupts
000CDBDC                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CDBDC                            ; ARGUMENTS:
000CDBDC                            ;	Nothing
000CDBDC                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CDBDC                            ; RETURNS:
000CDBDC                            ;	Nothing
000CDBDC                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CDBDC                            intsOn		macros
000CDBDC                            		andi	#$F8FF,sr
000CDBDC                            
000CDBDC                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CDBDC                            ; VDP command instruction
000CDBDC                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CDBDC                            ; ARGUMENTS:
000CDBDC                            ;	addr	- Address in VDP memory
000CDBDC                            ;	type	- Type of VDP memory
000CDBDC                            ;	rwd	- VDP command
000CDBDC                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CDBDC                            ; RETURNS:
000CDBDC                            ;	Nothing
000CDBDC                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CDBDC =00000021                  VRAM		EQU	%100001		; VRAM
000CDBDC =0000002B                  CRAM		EQU	%101011		; CRAM
000CDBDC =00000025                  VSRAM		EQU	%100101		; VSRAM
000CDBDC =0000000C                  READ		EQU	%001100		; VDP read
000CDBDC =00000007                  WRITE		EQU	%000111		; VDP write
000CDBDC =00000027                  DMA		EQU	%100111		; VDP DMA
000CDBDC                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CDBDC                            vdpCmd		macro	ins, addr, type, rwd, end, end2
000CDBDC                            		if narg=5
000CDBDC                            			\ins	#((((\type&\rwd)&3)<<30)|((\addr&$3FFF)<<16)|(((\type&\rwd)&$FC)<<2)|((\addr&$C000)>>14)), \end
000CDBDC                            		elseif narg>=6
000CDBDC                            			\ins	#((((\type&\rwd)&3)<<30)|((\addr&$3FFF)<<16)|(((\type&\rwd)&$FC)<<2)|((\addr&$C000)>>14))\end, \end2
000CDBDC                            		else
000CDBDC                            			\ins	((((\type&\rwd)&3)<<30)|((\addr&$3FFF)<<16)|(((\type&\rwd)&$FC)<<2)|((\addr&$C000)>>14))
000CDBDC                            		endif
000CDBDC                            		endm
000CDBDC                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CDBDC                            ; VDP DMA from 68000 memory to VDP memory
000CDBDC                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CDBDC                            ; ARGUMENTS:
000CDBDC                            ;	src	- Source address in 68000 memory
000CDBDC                            ;	dest	- Destination address in VDP memory
000CDBDC                            ;	len	- Length of data in bytes
000CDBDC                            ;	type	- Type of VDP memory
000CDBDC                            ;	a6.l	- VDP control port
000CDBDC                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CDBDC                            ; RETURNS:
000CDBDC                            ;	Nothing
000CDBDC                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CDBDC                            dma68k		macro	src, dest, len, type
000CDBDC                            		move.l	#$94009300|((((\len)/2)&$FF00)<<8)|(((\len)/2)&$FF),(a6)
000CDBDC                            		move.l	#$96009500|((((\src)/2)&$FF00)<<8)|(((\src)/2)&$FF),(a6)
000CDBDC                            		move.w	#$9700|(((\src)>>17)&$7F),(a6)
000CDBDC                            		vdpCmd	move.w, \dest, \type, DMA, >>16, (a6)
000CDBDC                            		vdpCmd	move.w, \dest, \type, DMA, &$FFFF, -(sp)
000CDBDC                            		move.w	(sp)+,(a6)
000CDBDC                            		endm
000CDBDC                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CDBDC                            ; Fill VRAM with byte
000CDBDC                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CDBDC                            ; ARGUMENTS:
000CDBDC                            ;	byte	- Byte to fill VRAM with
000CDBDC                            ;	addr	- Address in VRAM
000CDBDC                            ;	len	- Length of fill in bytes
000CDBDC                            ;	a6.l	- VDP control port
000CDBDC                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CDBDC                            ; RETURNS:
000CDBDC                            ;	Nothing
000CDBDC                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CDBDC                            dmaFill		macro	byte, addr, len
000CDBDC                            		move.w	#$8F01,(a6)
000CDBDC                            		move.l	#$94009300|((((\len)-1)&$FF00)<<8)|(((\len)-1)&$FF),(a6)
000CDBDC                            		move.w	#$9780,(a6)
000CDBDC                            		move.l	#$40000080|(((\addr)&$3FFF)<<16)|(((\addr)&$C000)>>14),(a6)
000CDBDC                            		move.w	#(\byte)<<8,-4(a6)
000CDBDC                            		waitDMA	(a6)
000CDBDC                            		move.w	#$8F02,(a6)
000CDBDC                            		endm
000CDBDC                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CDBDC                            ; Copy a region of VRAM to a location in VRAM
000CDBDC                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CDBDC                            ; ARGUMENTS:
000CDBDC                            ;	src	- Source address in VRAM
000CDBDC                            ;	dest	- Destination address in VRAM
000CDBDC                            ;	len	- Length of copy in bytes
000CDBDC                            ;	a6.l	- VDP control port
000CDBDC                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CDBDC                            ; RETURNS:
000CDBDC                            ;	Nothing
000CDBDC                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CDBDC                            dmaCopy		macro	src, dest, len
000CDBDC                            		move.w	#$8F01,(a6)
000CDBDC                            		move.l	#$94009300|((((\len)-1)&$FF00)<<8)|(((\len)-1)&$FF),(a6)
000CDBDC                            		move.l	#$96009500|(((\src)&$FF00)<<8)|((\src)&$FF),(a6)
000CDBDC                            		move.w	#$97C0,(a6)
000CDBDC                            		move.l	#$000000C0|(((\dest)&$3FFF)<<16)|(((\dest)&$C000)>>14),(a6)
000CDBDC                            		waitDMA	(a6)
000CDBDC                            		move.w	#$8F02,(a6)
000CDBDC                            		endm
000CDBDC                            		endm
000CDBDC                            
000CDBDC                            MC_Init:
000CDBDC 007C 0700                  		intsOff						; disable CPU interrupts
000CDBE0 21FC 0000 0000 FFC6        		move.l	#MC_VInt,(vBlankAdress).w
000CDBE8                            
000CDBE8 4DF9 00C0 0004             		lea	($C00004).l,a6				; load the address of the VDP control port into a6
000CDBEE 3CBC 8134                  		move.w	#$8134,(a6)				; disable display
000CDBF2                            
000CDBF2 3CBC 8230                  		move.w	#$8200+($C000>>10),(a6)			; set plane A address
000CDBF6 3CBC 8334                  		move.w	#$8300+($D000>>10),(a6)			; set plane W address
000CDBFA 3CBC 8407                  		move.w	#$8400+($E000>>13),(a6)			; set plane B address
000CDBFE 3CBC 857C                  		move.w	#$8500+($F800>>9),(a6)			; set sprite table address
000CDC02                            		
000CDC02 3CBC 8B00                  		move.w	#$8B00,(a6)				; EXT-INT off, VScroll by screen, HScroll by screen
000CDC06 3CBC 8C89                  		move.w	#$8C89,(a6)				; set screen size and enable shadow/highlight mode
000CDC0A 3CBC 8D3F                  		move.w	#$8D00+($FC00>>10),(a6)			; set HScroll table address
000CDC0E 3CBC 8F02                  		move.w	#$8F02,(a6)				; set auto-incremement size to word
000CDC12 3CBC 9001                  		move.w	#$9001,(a6)				; set plane size 64x32
000CDC16                            
000CDC28 6100 0000                  		bsr.w	MC_ClearScreen				; clear VRAM, CRAM, and VSRAM
000CDC2C                            
000CDC2C                            .waitVBlank:	
000CDC2C 44D6                       		move.w	(a6),ccr				; is v-blank active?
000CDC2E 6AFC                       		bpl.s	.waitVBlank				; if not, wait for it to start
000CDC30                            
000CDC64                            
000CDC64 3CBC 8174                  		move.w	#$8174,(a6)				; enable display
000CDC68 027C F8FF                  		intsOn						; enable CPU interrupts
000CDC6C                            
000CDC6C 41FA 0000                  		lea	MC_BlockRender(pc),a0
000CDC70 43F8 8000                  		lea	(planeBuffer).w,a1
000CDC74 7E2E                       		moveq	#$2F-1,d7
000CDC76                            
000CDC76                            .loopLo:
000CDC76 32D8                       		move.w	(a0)+,(a1)+
000CDC78 51CF FFFC                  		dbf	d7,.loopLo
000CDC7C                            
000CDC7C 41FA 0000                  		lea	MC_BlockRender(pc),a0
000CDC80 43F8 8080                  		lea	(planeBuffer+(64*2)).w,a1
000CDC84 7E2E                       		moveq	#$2F-1,d7
000CDC86                            
000CDC86                            .loopHi:
000CDC86 303C 8000                  		move.w	#$8000,d0
000CDC8A 8058                       		or.w	(a0)+,d0
000CDC8C 32C0                       		move.w	d0,(a1)+
000CDC8E 51CF FFF6                  		dbf	d7,.loopHi
000CDC92                            
000CDC92 6000 FFFE                  		bra.w	*					; spin infinitely
000CDC96                            
000CDC96                            ; ===========================================================================
000CDC96                            ; ---------------------------------------------------------------------------
000CDC96                            ; Clear The Screen
000CDC96                            ; ---------------------------------------------------------------------------
000CDC96                            MC_ClearScreen:
000CDC96 3CBC 8F01                  		move.w	#$8F01,(a6)				; set auto-incremement size to byte
000CDC9A                            
000CDC9A 2CBC 94FF 93FF             		move.l	#$94FF93FF,(a6)				; clear the VRAM
000CDCA0 3CBC 9780                  		move.w	#$9780,(a6)				; ^
000CDCA4 2CBC 4000 0080             		move.l	#$40000080,(a6)				; ^
000CDCAA 3D7C 0000 FFFC             		move.w	#0,-4(a6)				; ^
000CDCB0                            
000CDCB0 44D6                       .waitVRAMClr:	move.w	(a6),ccr				; is a DMA in progress?
000CDCB2 69FC                       		bvs.s	.waitVRAMClr				; if so, loop until DMA is complete
000CDCB4                            
000CDCB4 2CBC 9400 937F             		move.l	#$9400937F,(a6)				; clear the CRAM
000CDCBA 3CBC 9780                  		move.w	#$9780,(a6)				; ^
000CDCBE 2CBC C000 0080             		move.l	#$C0000080,(a6)				; ^
000CDCC4 3D7C 0000 FFFC             		move.w	#0,-4(a6)				; ^
000CDCCA                            
000CDCCA 44D6                       .waitCRAMClr:	move.w	(a6),ccr				; is a DMA in progress?
000CDCCC 69FC                       		bvs.s	.waitCRAMClr				; if so, loop until DMA is complete
000CDCCE                            
000CDCCE 2CBC 9400 935F             		move.l	#$9400935F,(a6)				; clear the VSRAM
000CDCD4 3CBC 9780                  		move.w	#$9780,(a6)				; ^
000CDCD8 2CBC 4000 0090             		move.l	#$40000090,(a6)				; ^
000CDCDE 3D7C 0000 FFFC             		move.w	#0,-4(a6)				; ^
000CDCE4                            
000CDCE4 44D6                       .waitVSRAMClr:	move.w	(a6),ccr				; is a DMA in progress?
000CDCE6 69FC                       		bvs.s	.waitVSRAMClr				; if so, loop until DMA is complete
000CDCE8                            
000CDCE8 3CBC 8F02                  		move.w	#$8F02,(a6)				; set auto-incremement size to word
000CDCEC 4E75                       		rts						; return
000CDCEE                            ; ---------------------------------------------------------------------------
000CDCEE                            
000CDCEE                            ; ===========================================================================
000CDCEE                            ; ---------------------------------------------------------------------------
000CDCEE                            ; VBlank Interrupt
000CDCEE                            ; ---------------------------------------------------------------------------
000CDCEE                            MC_VInt:
000CDD08                            
000CDD08 5278 8E80                  		addq.w	#1,(camXPosFG).w			; update scrolling
000CDD12 3D78 8E80 FFFC             		move.w	(camXPosFG).w,-4(a6)			; ^
000CDD18                            
000CDD18                            
000CDD18 4E73                       		rte						; return
000CDD1A                            ; ---------------------------------------------------------------------------
000CDD1A                            
000CDD1A                            block_entry	macro	tileID, palLine, priority
000CDD1A                            	if (narg<3)
000CDD1A                            		dc.w	(palLine<<13)|tileID
000CDD1A                            	else
000CDD1A                            		dc.w	$8000|(palLine<<13)|tileID
000CDD1A                            	endif
000CDD1A                            		endm
000CDD1A                            
000CDD1A                            MC_BlockRender:
000CDD5A                            
000CDD78                            
000CDD78                            ; ---------------------------------------------------------------------------
000CDD78                            MC_Palette:
000CDD78 0E86 08AE 068E 046C 0EE0+  	dc.w	$E86, $8AE, $68E, $46C, $EE0, $CC0, $AA0, $E68, $C46, $824, $444, $222, $000, $EEE, $246, $024
000CDD98 0000 0CCC 0AAA 0888 0666+  	dc.w	$000, $CCC, $AAA, $888, $666, $444, $222, $4E6, $2C4, $0A2, $080, $6AE, $48C, $26A, $048, $026
000CDDB8 0000 0EEE 0CCC 0AAA 04CE+  	dc.w	$000, $EEE, $CCC, $AAA, $4CE, $2AC, $08A, $E6C, $C4A, $A08, $44E, $22C, $00A, $EE0, $888, $666
000CDDD8 0EEE 0EEE 0EEE 0EEE 0EEE+  	dc.w	$EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE
000CDDF8                            ; ---------------------------------------------------------------------------
000CDDF8                            MC_Terrain:
000CDDF8                            	incbin	"minecraft\assets\bin\terrain.bin"
000CE278                            MC_Terrain_End:
000CE278                            ; ---------------------------------------------------------------------------
000CE278                            ; ---------------------------------------------------------------------------
000CE278                            ; end of 'ROM'
000CE278                            EndOfRom:
000CE278                            
000CE278                            
