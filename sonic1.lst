00000000                            ; /=========================================================================\
00000000                            ; ยบ	This file is generated by The Interactive Disassembler (IDA)	    ยบ
00000000                            ; ยบ	Copyright (c) 2003 by DataRescue sa/nv,	<ida@datarescue.com>	    ยบ
00000000                            ; \=========================================================================/
00000000                            ;
00000000                            ; Disassembly created by Hivebrain
00000000                            ; thanks to drx and Stealth
00000000                            
00000000                            ; Processor:	    68000
00000000                            ; Target Assembler: 680x0 Assembler in MRI compatible mode
00000000                            ; This file should be compiled with "as	-M"
00000000                            
00000000                            ; ===========================================================================
00000000                            align macro
00000000                            	cnop 0,\1
00000000                            	endm
00000000                            		include	"sound/smps2asm_inc.asm"
00000000                            ; =============================================================================================
00000000                            ; Created by Flamewing, based on S1SMPS2ASM version 1.1 by Marc Gordon (AKA Cinossu)
00000000                            ; =============================================================================================
00000000 =00000005                  SonicDriverVer:	equ	5
00000000                            align0	macro	val
00000000                            	cnop	0,\val
00000000                                endm
00000000                            	
00000000                            smpsWeirdD1LRR macro
00000000                            		dc.b	$F9
00000000                            	endm
00000000                            nMaxPSG		EQU nA5
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Standard Octave Pitch Equates
00000000 =FFFFFF88                  smpsPitch10lo:	EQU -120	; $88
00000000 =FFFFFF94                  smpsPitch09lo:	EQU -108	; $94
00000000 =FFFFFFA0                  smpsPitch08lo:	EQU  -96	; $A0
00000000 =FFFFFFAC                  smpsPitch07lo:	EQU  -84	; $AC
00000000 =FFFFFFB8                  smpsPitch06lo:	EQU  -72	; $B8
00000000 =FFFFFFC4                  smpsPitch05lo:	EQU  -60	; $C4
00000000 =FFFFFFD0                  smpsPitch04lo:	EQU  -48	; $D0
00000000 =FFFFFFDC                  smpsPitch03lo:	EQU  -36	; $DC
00000000 =FFFFFFE8                  smpsPitch02lo:	EQU  -24	; $E8
00000000 =FFFFFFF4                  smpsPitch01lo:	EQU  -12	; $F4
00000000 =00000000                  smpsPitch00:	EQU    0	; $00
00000000 =0000000C                  smpsPitch01hi:	EQU  +12	; $0C
00000000 =00000018                  smpsPitch02hi:	EQU  +24	; $18
00000000 =00000024                  smpsPitch03hi:	EQU  +36	; $24
00000000 =00000030                  smpsPitch04hi:	EQU  +48	; $30
00000000 =0000003C                  smpsPitch05hi:	EQU  +60	; $3C
00000000 =00000048                  smpsPitch06hi:	EQU  +72	; $48
00000000 =00000054                  smpsPitch07hi:	EQU  +84	; $54
00000000 =00000060                  smpsPitch08hi:	EQU  +96	; $60
00000000 =0000006C                  smpsPitch09hi:	EQU +108	; $6C
00000000 =00000078                  smpsPitch10hi:	EQU +120	; $78
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Note Equates
00000000 =00000080                  nRst:	EQU $80		; $80
00000000 =00000081                  nC0:	EQU $81		; $81
00000000 =00000082                  nCs0:	EQU nC0+1	; $82
00000000 =00000083                  nD0:	EQU nCs0+1	; $83
00000000 =00000084                  nEb0:	EQU nD0+1	; $84
00000000 =00000085                  nE0:	EQU nEb0+1	; $85
00000000 =00000086                  nF0:	EQU nE0+1	; $86
00000000 =00000087                  nFs0:	EQU nF0+1	; $87
00000000 =00000088                  nG0:	EQU nFs0+1	; $88
00000000 =00000089                  nAb0:	EQU nG0+1	; $89
00000000 =0000008A                  nA0:	EQU nAb0+1	; $8A
00000000 =0000008B                  nBb0:	EQU nA0+1	; $8B
00000000 =0000008C                  nB0:	EQU nBb0+1	; $8C
00000000 =0000008D                  nC1:	EQU nB0+1	; $8D
00000000 =0000008E                  nCs1:	EQU nC1+1	; $8E
00000000 =0000008F                  nD1:	EQU nCs1+1	; $8F
00000000 =00000090                  nEb1:	EQU nD1+1	; $90
00000000 =00000091                  nE1:	EQU nEb1+1	; $91
00000000 =00000092                  nF1:	EQU nE1+1	; $92
00000000 =00000093                  nFs1:	EQU nF1+1	; $93
00000000 =00000094                  nG1:	EQU nFs1+1	; $94
00000000 =00000095                  nAb1:	EQU nG1+1	; $95
00000000 =00000096                  nA1:	EQU nAb1+1	; $96
00000000 =00000097                  nBb1:	EQU nA1+1	; $97
00000000 =00000098                  nB1:	EQU nBb1+1	; $98
00000000 =00000099                  nC2:	EQU nB1+1	; $99
00000000 =0000009A                  nCs2:	EQU nC2+1	; $9A
00000000 =0000009B                  nD2:	EQU nCs2+1	; $9B
00000000 =0000009C                  nEb2:	EQU nD2+1	; $9C
00000000 =0000009D                  nE2:	EQU nEb2+1	; $9D
00000000 =0000009E                  nF2:	EQU nE2+1	; $9E
00000000 =0000009F                  nFs2:	EQU nF2+1	; $9F
00000000 =000000A0                  nG2:	EQU nFs2+1	; $A0
00000000 =000000A1                  nAb2:	EQU nG2+1	; $A1
00000000 =000000A2                  nA2:	EQU nAb2+1	; $A2
00000000 =000000A3                  nBb2:	EQU nA2+1	; $A3
00000000 =000000A4                  nB2:	EQU nBb2+1	; $A4
00000000 =000000A5                  nC3:	EQU nB2+1	; $A5
00000000 =000000A6                  nCs3:	EQU nC3+1	; $A6
00000000 =000000A7                  nD3:	EQU nCs3+1	; $A7
00000000 =000000A8                  nEb3:	EQU nD3+1	; $A8
00000000 =000000A9                  nE3:	EQU nEb3+1	; $A9
00000000 =000000AA                  nF3:	EQU nE3+1	; $AA
00000000 =000000AB                  nFs3:	EQU nF3+1	; $AB
00000000 =000000AC                  nG3:	EQU nFs3+1	; $AC
00000000 =000000AD                  nAb3:	EQU nG3+1	; $AD
00000000 =000000AE                  nA3:	EQU nAb3+1	; $AE
00000000 =000000AF                  nBb3:	EQU nA3+1	; $AF
00000000 =000000B0                  nB3:	EQU nBb3+1	; $B0
00000000 =000000B1                  nC4:	EQU nB3+1	; $B1
00000000 =000000B2                  nCs4:	EQU nC4+1	; $B2
00000000 =000000B3                  nD4:	EQU nCs4+1	; $B3
00000000 =000000B4                  nEb4:	EQU nD4+1	; $B4
00000000 =000000B5                  nE4:	EQU nEb4+1	; $B5
00000000 =000000B6                  nF4:	EQU nE4+1	; $B6
00000000 =000000B7                  nFs4:	EQU nF4+1	; $B7
00000000 =000000B8                  nG4:	EQU nFs4+1	; $B8
00000000 =000000B9                  nAb4:	EQU nG4+1	; $B9
00000000 =000000BA                  nA4:	EQU nAb4+1	; $BA
00000000 =000000BB                  nBb4:	EQU nA4+1	; $BB
00000000 =000000BC                  nB4:	EQU nBb4+1	; $BC
00000000 =000000BD                  nC5:	EQU nB4+1	; $BD
00000000 =000000BE                  nCs5:	EQU nC5+1	; $BE
00000000 =000000BF                  nD5:	EQU nCs5+1	; $BF
00000000 =000000C0                  nEb5:	EQU nD5+1	; $C0
00000000 =000000C1                  nE5:	EQU nEb5+1	; $C1
00000000 =000000C2                  nF5:	EQU nE5+1	; $C2
00000000 =000000C3                  nFs5:	EQU nF5+1	; $C3
00000000 =000000C4                  nG5:	EQU nFs5+1	; $C4
00000000 =000000C5                  nAb5:	EQU nG5+1	; $C5
00000000 =000000C6                  nA5:	EQU nAb5+1	; $C6
00000000 =000000C7                  nBb5:	EQU nA5+1	; $C7
00000000 =000000C8                  nB5:	EQU nBb5+1	; $C8
00000000 =000000C9                  nC6:	EQU nB5+1	; $C9
00000000 =000000CA                  nCs6:	EQU nC6+1	; $CA
00000000 =000000CB                  nD6:	EQU nCs6+1	; $CB
00000000 =000000CC                  nEb6:	EQU nD6+1	; $CC
00000000 =000000CD                  nE6:	EQU nEb6+1	; $CD
00000000 =000000CE                  nF6:	EQU nE6+1	; $CE
00000000 =000000CF                  nFs6:	EQU nF6+1	; $CF
00000000 =000000D0                  nG6:	EQU nFs6+1	; $D0
00000000 =000000D1                  nAb6:	EQU nG6+1	; $D1
00000000 =000000D2                  nA6:	EQU nAb6+1	; $D2
00000000 =000000D3                  nBb6:	EQU nA6+1	; $D3
00000000 =000000D4                  nB6:	EQU nBb6+1	; $D4
00000000 =000000D5                  nC7:	EQU nB6+1	; $D5
00000000 =000000D6                  nCs7:	EQU nC7+1	; $D6
00000000 =000000D7                  nD7:	EQU nCs7+1	; $D7
00000000 =000000D8                  nEb7:	EQU nD7+1	; $D8
00000000 =000000D9                  nE7:	EQU nEb7+1	; $D9
00000000 =000000DA                  nF7:	EQU nE7+1	; $DA
00000000 =000000DB                  nFs7:	EQU nF7+1	; $DB
00000000 =000000DC                  nG7:	EQU nFs7+1	; $DC
00000000 =000000DD                  nAb7:	EQU nG7+1	; $DD
00000000 =000000DE                  nA7:	EQU nAb7+1	; $DE
00000000 =000000DF                  nBb7:	EQU nA7+1	; $DF
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; PSG envelope equates
00000000 =00000000                  fTone_00:	EQU $00
00000000 =00000001                  fTone_01:	EQU fTone_00+1
00000000 =00000002                  fTone_02:	EQU fTone_01+1
00000000 =00000003                  fTone_03:	EQU fTone_02+1
00000000 =00000004                  fTone_04:	EQU fTone_03+1
00000000 =00000005                  fTone_05:	EQU fTone_04+1
00000000 =00000006                  fTone_06:	EQU fTone_05+1
00000000 =00000007                  fTone_07:	EQU fTone_06+1
00000000 =00000008                  fTone_08:	EQU fTone_07+1
00000000 =00000009                  fTone_09:	EQU fTone_08+1
00000000 =0000000A                  fTone_0A:	EQU fTone_09+1
00000000 =0000000B                  fTone_0B:	EQU fTone_0A+1
00000000 =0000000C                  fTone_0C:	EQU fTone_0B+1
00000000 =0000000D                  fTone_0D:	EQU fTone_0C+1
00000000 =0000000E                  fTone_0E:	EQU fTone_0D+1
00000000 =0000000F                  fTone_0F:	EQU fTone_0E+1
00000000 =00000010                  fTone_10:	EQU fTone_0F+1
00000000 =00000011                  fTone_11:	EQU fTone_10+1
00000000 =00000012                  fTone_12:	EQU fTone_11+1
00000000 =00000013                  fTone_13:	EQU fTone_12+1
00000000 =00000014                  fTone_14:	EQU fTone_13+1
00000000 =00000015                  fTone_15:	EQU fTone_14+1
00000000 =00000016                  fTone_16:	EQU fTone_15+1
00000000 =00000017                  fTone_17:	EQU fTone_16+1
00000000 =00000018                  fTone_18:	EQU fTone_17+1
00000000 =00000019                  fTone_19:	EQU fTone_18+1
00000000 =0000001A                  fTone_1A:	EQU fTone_19+1
00000000 =0000001B                  fTone_1B:	EQU fTone_1A+1
00000000 =0000001C                  fTone_1C:	EQU fTone_1B+1
00000000 =0000001D                  fTone_1D:	EQU fTone_1C+1
00000000 =0000001E                  fTone_1E:	EQU fTone_1D+1
00000000 =0000001F                  fTone_1F:	EQU fTone_1E+1
00000000 =00000020                  fTone_20:	EQU fTone_1F+1
00000000 =00000021                  fTone_21:	EQU fTone_20+1
00000000 =00000022                  fTone_22:	EQU fTone_21+1
00000000 =00000023                  fTone_23:	EQU fTone_22+1
00000000 =00000024                  fTone_24:	EQU fTone_23+1
00000000 =00000025                  fTone_25:	EQU fTone_24+1
00000000 =00000026                  fTone_26:	EQU fTone_25+1
00000000 =00000027                  fTone_27:	EQU fTone_26+1
00000000 =00000028                  fTone_28:	EQU fTone_27+1
00000000 =00000029                  fTone_29:	EQU fTone_28+1
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; DAC Equates
00000000 =00000081                  dKick			EQU	$81
00000000 =00000082                  dSnare			EQU	$82
00000000 =00000082                  dMuffledSnare			EQU	$82
00000000 =00000083                  dTimpani		EQU	$83
00000000 =00000088                  dHiTimpani		EQU	$88
00000000 =00000089                  dMidTimpani		EQU	$89
00000000 =0000008A                  dLowTimpani		EQU	$8A
00000000 =0000008B                  dVLowTimpani		EQU	$8B
00000000 =00000083                  dCrashCymbal	EQU $83
00000000 =00000081                  dKickS3			EQU	$81
00000000 =00000082                  dSnareS3			EQU	$82
00000000 =0000008A                  delectriclowtom	EQU	$8A
00000000 =0000008B                  delectricfloortom	EQU	$8B
00000000 =00000088                  delectrichightom	EQU	$88
00000000 =00000089                  delectricmidtom	EQU	$89
00000000 =00000082                  dClapS3			EQU	$82
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Channel IDs for SFX
00000000 =00000080                  cPSG1				EQU $80
00000000 =000000A0                  cPSG2				EQU $A0
00000000 =000000C0                  cPSG3				EQU $C0
00000000 =000000E0                  cNoise				EQU $E0	; Not for use in S3/S&K/S3D
00000000 =00000002                  cFM3				EQU $02
00000000 =00000004                  cFM4				EQU $04
00000000 =00000005                  cFM5				EQU $05
00000000 =00000006                  cFM6				EQU $06	; Only in S3/S&K/S3D, overrides DAC
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ;---------------------------------------------
00000000                            ; SMPS F_Tone Equates 
00000000                            ;---------------------------------------------	
00000000 =00000000                  fTone_00:	EQU $00
00000000 =00000001                  fTone_01:	EQU fTone_00+1
00000000 =00000002                  fTone_02:	EQU fTone_01+1
00000000 =00000003                  fTone_03:	EQU fTone_02+1
00000000 =00000004                  fTone_04:	EQU fTone_03+1
00000000 =00000005                  fTone_05:	EQU fTone_04+1
00000000 =00000006                  fTone_06:	EQU fTone_05+1
00000000 =00000007                  fTone_07:	EQU fTone_06+1
00000000 =00000008                  fTone_08:	EQU fTone_07+1
00000000 =00000009                  fTone_09:	EQU fTone_08+1
00000000 =0000000A                  fTone_0A:	EQU fTone_09+1
00000000 =0000000B                  fTone_0B:	EQU fTone_0A+1
00000000 =0000000C                  fTone_0C:	EQU fTone_0B+1
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; PSG conversion to S3/S&K/S3D drivers require a tone shift of 12 semi-tones.
00000000                            conv0To256  macro val 
00000000                            	if val<$01
00000000                            		dc.b (256-val+$FF)&$FF
00000000                            	else	
00000000                            		dc.b (256-val)&$FF	
00000000                            	endc
00000000                            	endm
00000000                            SMPSModFix:	macro steps
00000000                            	dc.b (steps/(speed-1))
00000000                            	endm	
00000000 =0000000C                  psgdelta	EQU $0C
00000000                            PSGPitch macro pitch
00000000                            		dc.b	(pitch+psgdelta)&$FF
00000000                            	endm
00000000                            
00000000                            s1TempotoS2 macro tmod
00000000                            	if tmod<$01
00000000                            		dc.b ((($FF+tmod-1)*256+($FF+tmod/2))/$FF+tmod)&$FF 	
00000000                            	else
00000000                            		dc.b (((tmod-1)*256+(tmod/2))/tmod)&$FF
00000000                            	endc
00000000                            	endm
00000000                            	
00000000                            s3TempotoS2 macro tmod
00000000                            	if tmod<$01
00000000                            		dc.b (256-tmod+$FF)&$FF
00000000                            	else	
00000000                            		dc.b (256-tmod)&$FF	
00000000                            	endc
00000000                            	endm
00000000                            	
00000000                            convertMainTempoMod	macro tmod
00000000                            	if 		smpsHeaderStartSong=2
00000000                            		dc.b tmod
00000000                            	elseif 		smpsHeaderStartSong<2
00000000                            		s1TempotoS2 	\tmod
00000000                            	elseif	smpsHeaderStartSong>2
00000000                            		s3TempotoS2  	\tmod
00000000                            	endc
00000000                            	endm	
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Header Macros
00000000 =00000000                  smpsHeaderStartSong = 0
00000000                            
00000000                            smpsHeaderVoiceNull macro
00000000                            	dc.w	$0000
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Voice Location
00000000                            ; Common to music and SFX
00000000                            smpsHeaderVoice macro loc
00000000                            songStart set *
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Voice Location as S3's Universal Voice Bank
00000000                            ; Common to music and SFX
00000000                            smpsHeaderVoiceUVB macro
00000000                            	if songStart<>*
00000000                            		fail "Missing smpsHeaderStartSong or smpsHeaderStartSongConvert"
00000000                            	endc
00000000                            	;dc.w	little_endian(z80_UniVoiceBank)
00000000                            	z80_ptr	z80_UniVoiceBank
00000000                            	endm
00000000                            
00000000                            ; Header macros for music (not for SFX)
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChan macro fm,psg
00000000                            	dc.b	fm,psg
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempo macro tdiv,tmod
00000000                            	dc.b	tdiv,tmod
00000000                            	endm
00000000                            
00000000                            ; Header - Set up DAC Channel
00000000                            smpsHeaderDAC macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	if narg>=2
00000000                            		dc.b	\pitch
00000000                            	else
00000000                            		dc.b	$00
00000000                            	endc
00000000                            	if narg>=3
00000000                            		dc.b	\vol
00000000                            	else
00000000                            		dc.b	$00
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderFM macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch,vol
00000000                            	endm
00000000                            
00000000                            ; Header - Set up PSG Channel
00000000                            smpsHeaderPSG macro loc,pitch,vol,mod,voice
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch,vol,mod,voice
00000000                            	endm
00000000                            
00000000                            ; Header macros for SFX (not for music)
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempoSFX macro div
00000000                            	dc.b	div
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChanSFX macro chan
00000000                            	dc.b	chan
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderSFXChannel macro chanid,loc,pitch,vol
00000000                            	if (chanid=cNoise)
00000000                            		fail "Using channel ID of cNoise ($E0) in Sonic 3 driver is dangerous. Fix the song so that it turns into a noise channel instead."
00000000                            	endc
00000000                            	dc.b	$80,chanid
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch, vol
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Co-ord Flag Macros and Equates
00000000                            ; E0xx - Panning, AMS, FMS
00000000                            smpsPan macro direction,amsfms
00000000                            panNone set $00
00000000                            panRight set $40
00000000                            panLeft set $80
00000000                            panCentre set $C0
00000000                            panCenter set $C0 ; silly Americans :U
00000000                            	dc.b $E0,direction+amsfms
00000000                            	endm
00000000                            
00000000                            ; E1xx - Set channel frequency displacement to xx
00000000                            smpsAlterNote macro val
00000000                            	dc.b	$E1,val
00000000                            	endm
00000000                            
00000000                            ; E2xx - Useless
00000000                            smpsNop macro val
00000000                            	dc.b	$E2,val
00000000                            	endm
00000000                            ; Return (used after smpsCall)
00000000                            smpsReturn macro val
00000000                            	dc.b	$E3
00000000                            	endm
00000000                            
00000000                            ; Fade in previous song (ie. 1-Up)
00000000                            smpsFade macro val
00000000                            	dc.b	$E4
00000000                            	endm
00000000                            
00000000                            ; E5xx - Set channel tempo divider to xx
00000000                            smpsChanTempoDiv macro val
00000000                            	dc.b	$E5,val
00000000                            ;	endc
00000000                            	endm
00000000                            
00000000                            ; E6xx - Alter Volume by xx
00000000                            smpsAlterVol macro val
00000000                            	dc.b	$E6,val
00000000                            	endm
00000000                            
00000000                            sVol  macro val
00000000                            	$E6,val
00000000                            	endm
00000000                            ; E7 - Prevent attack of next note
00000000 =000000E7                  smpsNoAttack	EQU $E7
00000000                            
00000000                            ; E8xx - Set note fill to xx
00000000                            smpsNoteFill macro val
00000000                            		dc.b	$E8,val
00000000                            ;	endc
00000000                            	endm
00000000                            smpsAlterPitch 	macro	value
00000000                            	dc.b $E9,value
00000000                            	endm
00000000                            
00000000                            
00000000                            ; Set music tempo modifier to xx
00000000                            smpsSetTempoMod macro mod
00000000                            	dc.b	$EA,mod
00000000                            	endm
00000000                            
00000000                            ; Set music tempo divider to xx
00000000                            smpsSetTempoDiv macro val
00000000                            	dc.b	$EB,val
00000000                            	endm
00000000                            
00000000                            ; ECxx - Set Volume to xx
00000000                            smpsSetVol macro val
00000000                            	dc.b	$EC,val
00000000                            	endm
00000000                            
00000000                            ; Works on all drivers
00000000                            smpsPSGAlterVol macro vol
00000000                            	dc.b	$EC,vol
00000000                            	endm
00000000                            
00000000                            ; Clears pushing sound flag in S1
00000000                            smpsClearPush macro	
00000000                            	dc.b	$ED
00000000                            	endm
00000000                            
00000000                            ; Stops special SFX (S1 only) and restarts overridden music track
00000000                            smpsStopSpecial macro
00000000                            		dc.b	$EE
00000000                            	endm
00000000                            
00000000                            ; EFxx[yy] - Set Voice of FM channel to xx; xx < 0 means yy present
00000000                            smpsSetvoice macro voice,songID
00000000                            	if narg<=1
00000000                            		dc.b	$EF,voice
00000000                            	else
00000000                            		dc.b	$EF,voice|$80,songID+$81
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; F0wwxxyyzz - Modulation - ww: wait time - xx: modulation speed - yy: change per step - zz: number of steps
00000000                            smpsModSet macro wait,speed,change,step
00000000                            	dc.b	$F0
00000000                            	dc.b	wait,speed,change,step
00000000                            	endm
00000000                            
00000000                            ; Turn on Modulation
00000000                            smpsModOn macro
00000000                            	dc.b	$F1
00000000                            	endm
00000000                            
00000000                            ; F2 - End of channel
00000000                            smpsStop macro
00000000                            	dc.b	$F2
00000000                            	endm
00000000                            
00000000                            ; F3xx - PSG waveform to xx
00000000                            smpsPSGform macro form
00000000                            	dc.b	$F3,form
00000000                            	endm
00000000                            
00000000                            ; Turn off Modulation
00000000                            smpsModOff macro
00000000                            	dc.b	$F4
00000000                            	endm
00000000                            
00000000                            ; F5xx - PSG voice to xx
00000000                            smpsPSGvoice macro voice
00000000                            	dc.b	$F5,voice
00000000                            	endm
00000000                            
00000000                            ; F6xxxx - Jump to xxxx
00000000                            smpsJump macro loc
00000000                            	dc.b	$F6
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F7xxyyzzzz - Loop back to zzzz yy times, xx being the loop index for loop recursion fixing
00000000                            smpsLoop macro index,loops,loc
00000000                            	dc.b	$F7
00000000                            	dc.b	index,loops
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F8xxxx - Call pattern at xxxx, saving return point
00000000                            smpsCall macro loc
00000000                            	dc.b	$F8
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Alter Volume
00000000                            smpsFMAlterVol macro val1,val2
00000000                            	if narg<=1
00000000                            		dc.b	$E6,val1
00000000                            	else
00000000                            		dc.b	$E5,val1,val2
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; S3/S&K/S3D-only coordination flags
00000000                            ; Silences FM channel then stops as per smpsStop
00000000                            smpsStopFM macro
00000000                            	dc.b	$E3
00000000                            	endm
00000000                            
00000000                            ; Spindash Rev
00000000                            smpsSpindashRev macro
00000000                            	dc.b	$E9
00000000                            	endm
00000000                            	
00000000                            smpsPlayDACSample macro sample
00000000                            	dc.b	$EA,sample
00000000                            	endm
00000000                            	
00000000                            smpsConditionalJump macro index,loc
00000000                            	dc.b	$EB
00000000                            	dc.b	index
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            ; Set note values to xx-$40
00000000                            smpsSetNote macro val
00000000                            	dc.b	$ED,val
00000000                            	endm
00000000                            
00000000                            smpsFMICommand macro reg,val
00000000                            	dc.b	$EE,reg,val
00000000                            	endm
00000000                            
00000000                            ; Set Modulation
00000000                            smpsModChange2 macro fmmod,psgmod
00000000                            	dc.b	$F1,fmmod,psgmod
00000000                            	endm
00000000                            
00000000                            ; Set Modulation
00000000                            smpsModChange macro val
00000000                            	dc.b	$F4,val
00000000                            	endm
00000000                            
00000000                            ; FCxxxx - Jump to xxxx
00000000                            smpsContinuousLoop macro loc
00000000                            	dc.b	$FC
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            smpsAlternateSMPS macro flag
00000000                            	dc.b	$FD,flag
00000000                            	endm
00000000                            
00000000                            smpsFM3SpecialMode macro ind1,ind2,ind3,ind4
00000000                            	dc.b	$FE,ind1,ind2,ind3,ind4
00000000                            	endm
00000000                            
00000000                            smpsPlaySound macro index
00000000                            	dc.b	$FF,$01,index
00000000                            	endm
00000000                            
00000000                            smpsHaltMusic macro flag
00000000                            	dc.b	$FF,$02,flag
00000000                            	endm
00000000                            
00000000                            smpsCopyData macro data,len
00000000                            	fail "Coord. Flag to copy data should not be used. Complain to Flamewing if any music uses it."
00000000                            	dc.b	$FF,$03
00000000                            	;dc.w	little_endian(data)
00000000                            	z80_ptr	data
00000000                            	dc.b	len
00000000                            	endm
00000000                            
00000000                            smpsSSGEG macro op1,op2,op3,op4
00000000                            	dc.b	$FF,$05,op1,op2,op3,op4
00000000                            	endm
00000000                            
00000000                            smpsFMFlutter macro tone,mask
00000000                            	dc.b	$FF,$06,tone,mask
00000000                            	endm
00000000                            
00000000                            smpsResetSpindashRev macro val
00000000                            	dc.b	$FF,$07
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Macros for FM instruments
00000000                            ; Voices - Feedback
00000000                            smpsVcFeedback macro val
00000000                            vcFeedback set \val
00000000                            	endm
00000000                            
00000000                            ; Voices - Algorithm
00000000                            smpsVcAlgorithm macro val
00000000                            vcAlgorithm set \val
00000000                            	endm
00000000                            
00000000                            smpsVcUnusedBits macro val
00000000                            vcUnusedBits set \val
00000000                            	endm
00000000                            
00000000                            ; Voices - Detune
00000000                            smpsVcDetune macro op1,op2,op3,op4
00000000                            vcDT1 set \op1
00000000                            vcDT2 set \op2
00000000                            vcDT3 set \op3
00000000                            vcDT4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Coarse-Frequency
00000000                            smpsVcCoarseFreq macro op1,op2,op3,op4
00000000                            vcCF1 set \op1
00000000                            vcCF2 set \op2
00000000                            vcCF3 set \op3
00000000                            vcCF4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Rate Scale
00000000                            smpsVcRateScale macro op1,op2,op3,op4
00000000                            vcRS1 set \op1
00000000                            vcRS2 set \op2
00000000                            vcRS3 set \op3
00000000                            vcRS4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Attack Rate
00000000                            smpsVcAttackRate macro op1,op2,op3,op4
00000000                            vcAR1 set \op1
00000000                            vcAR2 set \op2
00000000                            vcAR3 set \op3
00000000                            vcAR4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Amplitude Modulation
00000000                            smpsVcAmpMod macro op1,op2,op3,op4
00000000                            vcAM1 set \op1
00000000                            vcAM2 set \op2
00000000                            vcAM3 set \op3
00000000                            vcAM4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - First Decay Rate
00000000                            smpsVcDecayRate1 macro op1,op2,op3,op4
00000000                            vcD1R1 set \op1
00000000                            vcD1R2 set \op2
00000000                            vcD1R3 set \op3
00000000                            vcD1R4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Second Decay Rate
00000000                            smpsVcDecayRate2 macro op1,op2,op3,op4
00000000                            vcD2R1 set \op1
00000000                            vcD2R2 set \op2
00000000                            vcD2R3 set \op3
00000000                            vcD2R4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Decay Level
00000000                            smpsVcDecayLevel macro op1,op2,op3,op4
00000000                            vcDL1 set \op1
00000000                            vcDL2 set \op2
00000000                            vcDL3 set \op3
00000000                            vcDL4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Release Rate
00000000                            smpsVcReleaseRate macro op1,op2,op3,op4
00000000                            vcRR1 set \op1
00000000                            vcRR2 set \op2
00000000                            vcRR3 set \op3
00000000                            vcRR4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Total Level
00000000                            smpsVcTotalLevel macro op1,op2,op3,op4
00000000                            vcTL1 set \op1
00000000                            vcTL2 set \op2
00000000                            vcTL3 set \op3
00000000                            vcTL4 set \op4
00000000                            	dc.b	(vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
00000000                            ;   0     1     2     3     4     5     6     7
00000000                            ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
00000000                            vcTLMask4 set ((vcAlgorithm=7)<<7)
00000000                            vcTLMask3 set ((vcAlgorithm>=4)<<7)
00000000                            vcTLMask2 set ((vcAlgorithm>=5)<<7)
00000000                            vcTLMask1 set $80
00000000                            ;	dc.b	(vcDT4<<4)+vcCF4 ,(vcDT3<<4)+vcCF3 ,(vcDT2<<4)+vcCF2 ,(vcDT1<<4)+vcCF1
00000000                            ;	dc.b	(vcRS4<<6)+vcAR4 ,(vcRS3<<6)+vcAR3 ,(vcRS2<<6)+vcAR2 ,(vcRS1<<6)+vcAR1
00000000                            ;	dc.b	(vcAM4<<5)+vcD1R4,(vcAM3<<5)+vcD1R3,(vcAM2<<5)+vcD1R2,(vcAM1<<5)+vcD1R1
00000000                            ;	dc.b	vcD2R4           ,vcD2R3           ,vcD2R2           ,vcD2R1
00000000                            ;	dc.b	(vcDL4<<4)+vcRR4 ,(vcDL3<<4)+vcRR3 ,(vcDL2<<4)+vcRR2 ,(vcDL1<<4)+vcRR1
00000000                            ;	dc.b	vcTL4|vcTLMask4  ,vcTL3|vcTLMask3  ,vcTL2|vcTLMask2  ,vcTL1|vcTLMask1
00000000                            	dc.b	(vcDT4<<4)+vcCF4,(vcDT3<<4)+vcCF3,(vcDT2<<4)+vcCF2,(vcDT1<<4)+vcCF1
00000000                            	dc.b	(vcRS4<<6)+vcAR4,(vcRS3<<6)+vcAR3,(vcRS2<<6)+vcAR2,(vcRS1<<6)+vcAR1
00000000                            	dc.b	(vcAM4<<5)+vcD1R4,(vcAM3<<5)+vcD1R3,(vcAM2<<5)+vcD1R2,(vcAM1<<5)+vcD1R1
00000000                            	dc.b	vcD2R4,vcD2R3,vcD2R2,vcD2R1
00000000                            	dc.b	(vcDL4<<4)+vcRR4,(vcDL3<<4)+vcRR3,(vcDL2<<4)+vcRR2,(vcDL1<<4)+vcRR1
00000000                            	dc.b	vcTL4|vcTLMask4,vcTL3|vcTLMask3,vcTL2|vcTLMask2,vcTL1|vcTLMask1
00000000                            	endm
00000000                            
00000000                            
00000000                            
00000000                            ;level select constants (to not give the foward reference warning this was moved here)
00000000 =60860003                  lsscrpos = $60860003 ; level select screen position
00000000 =00240000                  lsoff = $240000 ; second row jump
00000000 =64C20003                  lsstpos = lsscrpos+$43C0000 ; sound test
00000000 =6C820003                  lsnppos = $6C820003	; now playing
00000000 =6D020003                  lsctrlpos = $6D020003 ; control help
00000000                            lsrow1size: equ (LMTSecondRow-LevelMenuText)/16
00000000                            lsrow2size: equ (LMTEnd-LMTSecondRow)/16
00000000                            lsselectable: equ ((LMTSelectableEnd-LevelMenuText)/16)-1 ; last selectable item
00000000                            ; level select item constants
00000000                            lssndtest: equ lsrow2size+8
00000000                            lswifi: equ lsrow2size+9
00000000                            
00000000 =FFFFFFC4                  vBlankRoutine equ $FFFFFFC4 ; VBlank Routine Jump Instruction (6 bytes)
00000000 =FFFFFFC4                  vBlankJump equ vBlankRoutine
00000000 =FFFFFFC6                  vBlankAdress equ vBlankRoutine+2
00000000                            ; options menu
00000000                            optamm: equ ((OMTEnd-OptionMenuText)/16)-1
00000000                            
00000000                            ; NOTES FOR ANYONE MAKING CHARACTERS
00000000 =FFFFFFE8                  v_character = $FFFFFFE8
00000000                            ; pointers for:
00000000                            ; PLAYER MAPPINGS -> Player_Maps
00000000                            ; PLAYER ANIM SCRIPTS -> Player_Anim
00000000                            ; PLAYER ART -> Player_Art
00000000                            ; PLAYER DPLC -> Player_DPLC
00000000                            ; PLAYER PALETTE -> Player_Palette
00000000                            
00000000                            
00000000                            StartOfRom:
00000000 00FF FE00 0000 0000 0000+  Vectors:	dc.l $FFFE00, EntryPoint, BusError, AddressError
00000010 0000 0000 0000 0000 0000+  		dc.l IllegalInstr, ZeroDivide, ChkInstr, TrapvInstr
00000020 0000 0000 0000 0000 0000+  		dc.l PrivilegeViol, Trace, Line1010Emu,	Line1111Emu
00000030 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000040 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000050 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000060 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorTrap, ErrorTrap,	ErrorTrap
00000070 0000 0000 0000 0000 FFFF+  		dc.l PalToCRAM,	ErrorTrap, vBlankRoutine, ErrorTrap
00000080 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
00000090 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000A0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000B0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000C0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000D0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000E0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000F0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
00000100 5345 4741 204D 4547 4120+  Console:	dc.b 'SEGA MEGA DRIVE ' ; Hardware system ID
00000110 2843 2949 444B 2032 3030+  Date:		dc.b '(C)IDK 2001.SEP '
00000120 686F 7720 746F 2064 6973+  Title_Local:	dc.b 'how to disassemble vhs tapes on a slab of wood  ' ; Domestic name
00000150 686F 7720 746F 2064 6973+  Title_Int:	dc.b 'how to disassemble vhs tapes on a slab of wood  '
00000180 474D 2030 3030 3031 3030+  Serial:		dc.b 'GM 00001009-00'   ; Serial/version number
0000018E 0000                       Checksum:	dc.w 0
00000190 4A20 2020 2020 2020 2020+  		dc.b 'J               ' ; I/O support
000001A0 0000 0000                  RomStartLoc:	dc.l StartOfRom		; ROM start
000001A4 0000 0000                  RomEndLoc:	dc.l EndOfRom-1		; ROM end
000001A8 00FF 0000                  RamStartLoc:	dc.l $FF0000		; RAM start
000001AC 00FF FFFF                  RamEndLoc:	dc.l $FFFFFF		; RAM end
000001B0 2020 2020                  SRAMSupport:	dc.l $20202020		; change to $5241E020 to create	SRAM
000001B4 2020 2020                  		dc.l $20202020		; SRAM start
000001B8 2020 2020                  		dc.l $20202020		; SRAM end
000001BC 2020 2020 2020 2020 2020+  Notes:		dc.b '                                                    '
000001F0 4A55 4520 2020 2020 2020+  Region:		dc.b 'JUE             ' ; Region
00000200                            
00000200                            ; ===========================================================================
00000200                            
00000200                            ErrorTrap:
00000200 4E71                       		nop	
00000202 4E71                       		nop	
00000204 60FA                       		bra.s	ErrorTrap
00000206                            ; ===========================================================================
00000206                            
00000206                            EntryPoint:
00000206 4AB9 00A1 0008             		tst.l	($A10008).l	; test port A control
0000020C 6600                       		bne.s	PortA_Ok
0000020E 4A79 00A1 000C             		tst.w	($A1000C).l	; test port C control
00000214                            
00000214                            PortA_Ok:
00000214 6600                       		bne.s	PortC_Ok
00000216 4BFA 0000                  		lea	SetupValues(pc),a5
0000021A 4C9D 00E0                  		movem.w	(a5)+,d5-d7
0000021E 4CDD 1F00                  		movem.l	(a5)+,a0-a4
00000222 1029 EF01                  		move.b	-$10FF(a1),d0	; get hardware version
00000226 0200 000F                  		andi.b	#$F,d0
0000022A 6700                       		beq.s	SkipSecurity
0000022C 237C 5345 4741 2F00        		move.l	#'SEGA',$2F00(a1)
00000234                            
00000234                            SkipSecurity:
00000234 3014                       		move.w	(a4),d0		; check	if VDP works
00000236 7000                       		moveq	#0,d0
00000238 2C40                       		movea.l	d0,a6
0000023A 4E66                       		move.l	a6,usp		; set usp to $0
0000023C 7217                       		moveq	#$17,d1
0000023E                            
0000023E                            VDPInitLoop:
0000023E 1A1D                       		move.b	(a5)+,d5	; add $8000 to value
00000240 3885                       		move.w	d5,(a4)		; move value to	VDP register
00000242 DA47                       		add.w	d7,d5		; next register
00000244 51C9 FFF8                  		dbf	d1,VDPInitLoop
00000248 289D                       		move.l	(a5)+,(a4)
0000024A 3680                       		move.w	d0,(a3)		; clear	the screen
0000024C 3287                       		move.w	d7,(a1)		; stop the Z80
0000024E 3487                       		move.w	d7,(a2)		; reset	the Z80
00000250                            
00000250                            WaitForZ80:
00000250 0111                       		btst	d0,(a1)		; has the Z80 stopped?
00000252 66FC                       		bne.s	WaitForZ80	; if not, branch
00000254 7425                       		moveq	#$25,d2
00000256                            
00000256                            Z80InitLoop:
00000256 10DD                       		move.b	(a5)+,(a0)+
00000258 51CA FFFC                  		dbf	d2,Z80InitLoop
0000025C 3480                       		move.w	d0,(a2)
0000025E 3280                       		move.w	d0,(a1)		; start	the Z80
00000260 3487                       		move.w	d7,(a2)		; reset	the Z80
00000262                            
00000262                            ClrRAMLoop:
00000262 2D00                       		move.l	d0,-(a6)
00000264 51CE FFFC                  		dbf	d6,ClrRAMLoop	; clear	the entire RAM
00000268 289D                       		move.l	(a5)+,(a4)	; set VDP display mode and increment
0000026A 289D                       		move.l	(a5)+,(a4)	; set VDP to CRAM write
0000026C 761F                       		moveq	#$1F,d3
0000026E                            
0000026E                            ClrCRAMLoop:
0000026E 2680                       		move.l	d0,(a3)
00000270 51CB FFFC                  		dbf	d3,ClrCRAMLoop	; clear	the CRAM
00000274 289D                       		move.l	(a5)+,(a4)
00000276 7813                       		moveq	#$13,d4
00000278                            
00000278                            ClrVDPStuff:
00000278 2680                       		move.l	d0,(a3)
0000027A 51CC FFFC                  		dbf	d4,ClrVDPStuff
0000027E 7A03                       		moveq	#3,d5
00000280                            
00000280                            PSGInitLoop:
00000280 175D 0011                  		move.b	(a5)+,$11(a3)	; reset	the PSG
00000284 51CD FFFA                  		dbf	d5,PSGInitLoop
00000288 3480                       		move.w	d0,(a2)
0000028A 4CD6 7FFF                  		movem.l	(a6),d0-a6	; clear	all registers
0000028E 46FC 2700                  		move	#$2700,sr	; set the sr
00000292                            
00000292                            PortC_Ok:
00000292 6000                       		bra.s	GameProgram
00000294                            ; ===========================================================================
00000294 8000                       SetupValues:	dc.w $8000		; XREF: PortA_Ok
00000296 3FFF                       		dc.w $3FFF
00000298 0100                       		dc.w $100
0000029A                            
0000029A 00A0 0000                  		dc.l $A00000		; start	of Z80 RAM
0000029E 00A1 1100                  		dc.l $A11100		; Z80 bus request
000002A2 00A1 1200                  		dc.l $A11200		; Z80 reset
000002A6 00C0 0000                  		dc.l $C00000
000002AA 00C0 0004                  		dc.l $C00004		; address for VDP registers
000002AE                            
000002AE 0414 303C                  		dc.b 4,	$14, $30, $3C	; values for VDP registers
000002B2 076C 0000                  		dc.b 7,	$6C, 0,	0
000002B6 0000 FF00                  		dc.b 0,	0, $FF,	0
000002BA 8137 0001                  		dc.b $81, $37, 0, 1
000002BE 0100 00FF                  		dc.b 1,	0, 0, $FF
000002C2 FF00 0080                  		dc.b $FF, 0, 0,	$80
000002C6                            
000002C6 4000 0080                  		dc.l $40000080
000002CA                            
000002CA AF01 D91F 1127 0021 2600+  		dc.b $AF, 1, $D9, $1F, $11, $27, 0, $21, $26, 0, $F9, $77 ; Z80	instructions
000002D6 EDB0 DDE1 FDE1 ED47 ED4F   		dc.b $ED, $B0, $DD, $E1, $FD, $E1, $ED,	$47, $ED, $4F
000002E0 D1E1 F108 D9C1 D1E1 F1F9+  		dc.b $D1, $E1, $F1, 8, $D9, $C1, $D1, $E1, $F1,	$F9, $F3
000002EB ED56 36E9 E9               		dc.b $ED, $56, $36, $E9, $E9
000002F0                            
000002F0 8104                       		dc.w $8104		; value	for VDP	display	mode
000002F2 8F02                       		dc.w $8F02		; value	for VDP	increment
000002F4 C000 0000                  		dc.l $C0000000		; value	for CRAM write mode
000002F8 4000 0010                  		dc.l $40000010
000002FC                            
000002FC 9FBF DFFF                  		dc.b $9F, $BF, $DF, $FF	; values for PSG channel volumes
00000300                            ; ===========================================================================
00000300                            
00000300                            GameProgram:
00000300 4A79 00C0 0004             		tst.w	($C00004).l
00000306 007C 0700                  		ori	#$700,sr
0000030A                            
0000030A 0839 0006 00A1 000D        		btst	#6,($A1000D).l
00000312 6700                       		beq.s	CheckSumCheck
00000314 0CB8 696E 6974 FFFC        		cmpi.l	#'init',($FFFFFFFC).w ; has checksum routine already run?
0000031C 6700 0000                  		beq.w	GameInit	; if yes, branch
00000320                            
00000320                            CheckSumCheck:
00000320 207C 0000 0200             		movea.l	#ErrorTrap,a0	; start	checking bytes after the header	($200)
00000326 227C 0000 01A4             		movea.l	#RomEndLoc,a1	; stop at end of ROM
0000032C 2011                       		move.l	(a1),d0
0000032E 7200                       		moveq	#0,d1
00000330                            
00000330                            loc_32C:
00000330 D258                       		add.w	(a0)+,d1
00000332 B088                       		cmp.l	a0,d0
00000334 64FA                       		bcc.s	loc_32C
00000336 227C 0000 018E             		movea.l	#Checksum,a1	; read the checksum
0000033C B251                       		cmp.w	(a1),d1		; compare correct checksum to the one in ROM
0000033E 6600 0000                  		bne.w	CheckSumError	; if they don't match, branch
00000342 4DF8 FE00                  		lea	($FFFFFE00).w,a6
00000346 7E00                       		moveq	#0,d7
00000348 3C3C 007F                  		move.w	#$7F,d6
0000034C                            
0000034C                            loc_348:
0000034C 2CC7                       		move.l	d7,(a6)+
0000034E 51CE FFFC                  		dbf	d6,loc_348
00000352 1039 00A1 0001             		move.b	($A10001).l,d0
00000358 0200 00C0                  		andi.b	#$C0,d0
0000035C 11C0 FFF8                  		move.b	d0,($FFFFFFF8).w
00000360 21FC 696E 6974 FFFC        		move.l	#'init',($FFFFFFFC).w ; set flag so checksum won't be run again
00000368                            
00000368                            GameInit:
00000368 4DF9 00FF 0000             		lea	($FF0000).l,a6
0000036E 7E00                       		moveq	#0,d7
00000370 3C3C 3F7F                  		move.w	#$3F7F,d6
00000374                            
00000374                            GameClrRAM:
00000374 2CC7                       		move.l	d7,(a6)+
00000376 51CE FFFC                  		dbf	d6,GameClrRAM	; fill RAM ($0000-$FDFF) with $0
0000037A                            
0000037A 31FC 4EF9 FFC4             		move.w	#$4EF9,(vBlankJump).w			; JMP opcode
00000380 21FC 0000 0000 FFC6        		move.l	#loc_B10,(vBlankAdress).w		; Set the V-INT pointer to the standard V-INT routine
00000388                            
00000388 6100 0000                  		bsr.w	VDPSetupGame
0000038C 6100 0000                  		bsr.w	SoundDriverLoad
00000390 6100 0000                  		bsr.w	JoypadInit
00000394 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set Game Mode to Sega Screen
0000039A                            
0000039A                            	;	move.b	#$20,($FFFFF600).w ; set Game Mode to Minecraft
0000039A                            
0000039A                            MainGameLoop:
0000039A 1038 F600                  		move.b	($FFFFF600).w,d0 ; load	Game Mode
0000039E 0240 003C                  		andi.w	#$3C,d0
000003A2 4EBB 0000                  		jsr	GameModeArray(pc,d0.w) ; jump to apt location in ROM
000003A6 60F2                       		bra.s	MainGameLoop
000003A8                            ; ===========================================================================
000003A8                            ; ---------------------------------------------------------------------------
000003A8                            ; Main game mode array
000003A8                            ; ---------------------------------------------------------------------------
000003A8                            
000003A8                            GameModeArray:
000003A8 6000 0000                  		bra.w	SegaScreen	; Sega Screen ($00)
000003AC                            ; ===========================================================================
000003AC 6000 0000                  		bra.w	TitleScreen	; Title	Screen ($04)
000003B0                            ; ===========================================================================
000003B0 6000 0000                  		bra.w	Level		; Demo Mode ($08)
000003B4                            ; ===========================================================================
000003B4 6000 0000                  		bra.w	Level		; Normal Level ($0C)
000003B8                            ; ===========================================================================
000003B8 6000 0000                  		bra.w	SpecialStage	; Special Stage	($10)
000003BC                            ; ===========================================================================
000003BC 6000 0000                  		bra.w	ContinueScreen	; Continue Screen ($14)
000003C0                            ; ===========================================================================
000003C0 6000 0000                  		bra.w	EndingSequence	; End of game sequence ($18)
000003C4                            ; ===========================================================================
000003C4 6000 0000                  		bra.w	Credits		; Credits ($1C)
000003C8                            ; ===========================================================================
000003C8 4EF9 0000 0000             		jmp	Minecraft	; Minecraft ($20)	
000003CE                            ; ===========================================================================
000003CE                            
000003CE                            CheckSumError:
000003CE 6100 0000                  		bsr.w	VDPSetupGame
000003D2 23FC C000 0000 00C0 0004   		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
000003DC 7E3F                       		moveq	#$3F,d7
000003DE                            
000003DE                            CheckSum_Red:
000003DE 33FC 000E 00C0 0000        		move.w	#$E,($C00000).l	; fill screen with colour red
000003E6 51CF FFF6                  		dbf	d7,CheckSum_Red	; repeat $3F more times
000003EA                            
000003EA                            CheckSum_Loop:
000003EA 60FE                       		bra.s	CheckSum_Loop
000003EC                            ; ===========================================================================
000003EC                            
000003EC                            BusError:
000003EC 11FC 0002 FC44             		move.b	#2,($FFFFFC44).w
000003F2 6000                       		bra.s	loc_43A
000003F4                            ; ===========================================================================
000003F4                            
000003F4                            AddressError:
000003F4 11FC 0004 FC44             		move.b	#4,($FFFFFC44).w
000003FA 6000                       		bra.s	loc_43A
000003FC                            ; ===========================================================================
000003FC                            
000003FC                            IllegalInstr:
000003FC 11FC 0006 FC44             		move.b	#6,($FFFFFC44).w
00000402 54AF 0002                  		addq.l	#2,2(sp)
00000406 6000                       		bra.s	loc_462
00000408                            ; ===========================================================================
00000408                            
00000408                            ZeroDivide:
00000408 11FC 0008 FC44             		move.b	#8,($FFFFFC44).w
0000040E 6000                       		bra.s	loc_462
00000410                            ; ===========================================================================
00000410                            
00000410                            ChkInstr:
00000410 11FC 000A FC44             		move.b	#$A,($FFFFFC44).w
00000416 6000                       		bra.s	loc_462
00000418                            ; ===========================================================================
00000418                            
00000418                            TrapvInstr:
00000418 11FC 000C FC44             		move.b	#$C,($FFFFFC44).w
0000041E 6000                       		bra.s	loc_462
00000420                            ; ===========================================================================
00000420                            
00000420                            PrivilegeViol:
00000420 11FC 000E FC44             		move.b	#$E,($FFFFFC44).w
00000426 6000                       		bra.s	loc_462
00000428                            ; ===========================================================================
00000428                            
00000428                            Trace:
00000428 11FC 0010 FC44             		move.b	#$10,($FFFFFC44).w
0000042E 6000                       		bra.s	loc_462
00000430                            ; ===========================================================================
00000430                            
00000430                            Line1010Emu:
00000430 11FC 0012 FC44             		move.b	#$12,($FFFFFC44).w
00000436 54AF 0002                  		addq.l	#2,2(sp)
0000043A 6000                       		bra.s	loc_462
0000043C                            ; ===========================================================================
0000043C                            
0000043C                            Line1111Emu:
0000043C 11FC 0014 FC44             		move.b	#$14,($FFFFFC44).w
00000442 54AF 0002                  		addq.l	#2,2(sp)
00000446 6000                       		bra.s	loc_462
00000448                            ; ===========================================================================
00000448                            
00000448                            ErrorExcept:
00000448 11FC 0000 FC44             		move.b	#0,($FFFFFC44).w
0000044E 6000                       		bra.s	loc_462
00000450                            ; ===========================================================================
00000450                            
00000450                            loc_43A:
00000450 46FC 2700                  		move	#$2700,sr
00000454 544F                       		addq.w	#2,sp
00000456 21DF FC40                  		move.l	(sp)+,($FFFFFC40).w
0000045A 544F                       		addq.w	#2,sp
0000045C 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
00000462 6100 0000                  		bsr.w	ShowErrorMsg
00000466 202F 0002                  		move.l	2(sp),d0
0000046A 6100 0000                  		bsr.w	sub_5BA
0000046E 2038 FC40                  		move.l	($FFFFFC40).w,d0
00000472 6100 0000                  		bsr.w	sub_5BA
00000476 6000                       		bra.s	loc_478
00000478                            ; ===========================================================================
00000478                            
00000478                            loc_462:
00000478 46FC 2700                  		move	#$2700,sr
0000047C 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
00000482 6100 0000                  		bsr.w	ShowErrorMsg
00000486 202F 0002                  		move.l	2(sp),d0
0000048A 6100 0000                  		bsr.w	sub_5BA
0000048E                            
0000048E                            loc_478:
0000048E 6100 0000                  		bsr.w	ErrorWaitForC
00000492 4CF8 FFFF FC00             		movem.l	($FFFFFC00).w,d0-a7
00000498 46FC 2300                  		move	#$2300,sr
0000049C 4E73                       		rte	
0000049E                            
0000049E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000049E                            
0000049E                            
0000049E                            ShowErrorMsg:				; XREF: loc_43A; loc_462
0000049E 4DF9 00C0 0000             		lea	($C00000).l,a6
000004A4 23FC 7800 0003 00C0 0004   		move.l	#$78000003,($C00004).l
000004AE 41F9 0000 0000             		lea	(Art_Text).l,a0
000004B4 323C 027F                  		move.w	#$27F,d1
000004B8                            
000004B8                            Error_LoadGfx:
000004B8 3C98                       		move.w	(a0)+,(a6)
000004BA 51C9 FFFC                  		dbf	d1,Error_LoadGfx
000004BE 7000                       		moveq	#0,d0		; clear	d0
000004C0 1038 FC44                  		move.b	($FFFFFC44).w,d0 ; load	error code
000004C4 303B 0000                  		move.w	ErrorText(pc,d0.w),d0
000004C8 41FB 0000                  		lea	ErrorText(pc,d0.w),a0
000004CC 23FC 4604 0003 00C0 0004   		move.l	#$46040003,($C00004).l ; position
000004D6 7212                       		moveq	#$12,d1		; number of characters
000004D8                            
000004D8                            Error_LoopChars:
000004D8 7000                       		moveq	#0,d0
000004DA 1018                       		move.b	(a0)+,d0
000004DC 0640 0790                  		addi.w	#$790,d0
000004E0 3C80                       		move.w	d0,(a6)
000004E2 51C9 FFF4                  		dbf	d1,Error_LoopChars ; repeat for	number of characters
000004E6 4E75                       		rts	
000004E8                            ; End of function ShowErrorMsg
000004E8                            
000004E8                            ; ===========================================================================
000004E8 0000 0000                  ErrorText:	dc.w asc_4E8-ErrorText,	asc_4FB-ErrorText ; XREF: ShowErrorMsg
000004EC 0000 0000                  		dc.w asc_50E-ErrorText,	asc_521-ErrorText
000004F0 0000 0000                  		dc.w asc_534-ErrorText,	asc_547-ErrorText
000004F4 0000 0000                  		dc.w asc_55A-ErrorText,	asc_56D-ErrorText
000004F8 0000 0000                  		dc.w asc_580-ErrorText,	asc_593-ErrorText
000004FC 0000                       		dc.w asc_5A6-ErrorText
000004FE 4552 524F 5220 4558 4345+  asc_4E8:	dc.b 'ERROR EXCEPTION    '
00000511 4255 5320 4552 524F 5220+  asc_4FB:	dc.b 'BUS ERROR          '
00000524 4144 4452 4553 5320 4552+  asc_50E:	dc.b 'ADDRESS ERROR      '
00000537 494C 4C45 4741 4C20 494E+  asc_521:	dc.b 'ILLEGAL INSTRUCTION'
0000054A 4045 524F 2044 4956 4944+  asc_534:	dc.b '@ERO DIVIDE        '
0000055D 4348 4B20 494E 5354 5255+  asc_547:	dc.b 'CHK INSTRUCTION    '
00000570 5452 4150 5620 494E 5354+  asc_55A:	dc.b 'TRAPV INSTRUCTION  '
00000583 5052 4956 494C 4547 4520+  asc_56D:	dc.b 'PRIVILEGE VIOLATION'
00000596 5452 4143 4520 2020 2020+  asc_580:	dc.b 'TRACE              '
000005A9 4C49 4E45 2031 3031 3020+  asc_593:	dc.b 'LINE 1010 EMULATOR '
000005BC 4C49 4E45 2031 3131 3120+  asc_5A6:	dc.b 'LINE 1111 EMULATOR '
000005D0 00                         		even
000005D0                            
000005D0                            ; ||||||||||||||| S U B	R O U T	I N ET |||||||||||||||||||||||||||||||||||||||
000005D0                            
000005D0                            
000005D0                            sub_5BA:				; XREF: loc_43A; loc_462
000005D0 3CBC 07CA                  		move.w	#$7CA,(a6)
000005D4 7407                       		moveq	#7,d2
000005D6                            
000005D6                            loc_5C0:
000005D6 E998                       		rol.l	#4,d0
000005D8 6100                       		bsr.s	sub_5CA
000005DA 51CA FFFA                  		dbf	d2,loc_5C0
000005DE 4E75                       		rts	
000005E0                            ; End of function sub_5BA
000005E0                            
000005E0                            
000005E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005E0                            
000005E0                            
000005E0                            sub_5CA:				; XREF: sub_5BA
000005E0 3200                       		move.w	d0,d1
000005E2 0241 000F                  		andi.w	#$F,d1
000005E6 0C41 000A                  		cmpi.w	#$A,d1
000005EA 6500                       		bcs.s	loc_5D8
000005EC 5E41                       		addq.w	#7,d1
000005EE                            
000005EE                            loc_5D8:
000005EE 0641 07C0                  		addi.w	#$7C0,d1
000005F2 3C81                       		move.w	d1,(a6)
000005F4 4E75                       		rts	
000005F6                            ; End of function sub_5CA
000005F6                            
000005F6                            
000005F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005F6                            
000005F6                            
000005F6                            ErrorWaitForC:				; XREF: loc_478
000005F6 6100 0000                  		bsr.w	ReadJoypads
000005FA 0C38 0020 F605             		cmpi.b	#$20,($FFFFF605).w ; is	button C pressed?
00000600 6600 FFF4                  		bne.w	ErrorWaitForC	; if not, branch
00000604 4E75                       		rts	
00000606                            ; End of function ErrorWaitForC
00000606                            
00000606                            ; ===========================================================================
00000606                            
00000606                            Art_Text:	incbin	artunc\menutext.bin	; text used in level select and debug mode
00000D46                            Art_Text_end:		even
00000D46                            
00000D46                            ; ===========================================================================
00000D46                            ;VBlank
00000D46                            loc_B10:				; XREF: Vectors
00000D46 48E7 FFFE                  		movem.l	d0-a6,-(sp)
00000D4A 4A38 F62A                  		tst.b	($FFFFF62A).w
00000D4E 6700                       		beq.s	loc_B88
00000D50 3039 00C0 0004             		move.w	($C00004).l,d0
00000D56 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
00000D60 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
00000D68 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w
00000D6E 6700                       		beq.s	loc_B42
00000D70 303C 0700                  		move.w	#$700,d0
00000D74                            
00000D74                            loc_B3E:
00000D74 51C8 FFFE                  		dbf	d0,loc_B3E
00000D78                            
00000D78                            loc_B42:
00000D78 1038 F62A                  		move.b	($FFFFF62A).w,d0
00000D7C 11FC 0000 F62A             		move.b	#0,($FFFFF62A).w
00000D82 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000D88 0240 003E                  		andi.w	#$3E,d0
00000D8C 303B 0000                  		move.w	off_B6E(pc,d0.w),d0
00000D90 4EBB 0000                  		jsr	off_B6E(pc,d0.w)
00000D94                            
00000D94                            loc_B5E:				; XREF: loc_B88
00000D94 4EB9 0000 0000             		jsr	sub_71B4C
00000D9A                            
00000D9A                            loc_B64:				; XREF: loc_D50
00000D9A 52B8 FE0C                  		addq.l	#1,($FFFFFE0C).w
00000D9E 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
00000DA2 4E73                       		rte	
00000DA4                            ; ===========================================================================
00000DA4 0000 0000                  off_B6E:	dc.w loc_B88-off_B6E, loc_C32-off_B6E
00000DA8 0000 0000                  		dc.w loc_C44-off_B6E, loc_C5E-off_B6E
00000DAC 0000 0000                  		dc.w loc_C6E-off_B6E, loc_DA6-off_B6E
00000DB0 0000 0000                  		dc.w loc_E72-off_B6E, loc_F8A-off_B6E
00000DB4 0000 0000                  		dc.w loc_C64-off_B6E, loc_F9A-off_B6E
00000DB8 0000 0000                  		dc.w loc_C36-off_B6E, loc_FA6-off_B6E
00000DBC 0000                       		dc.w loc_E72-off_B6E
00000DBE                            ; ===========================================================================
00000DBE                            
00000DBE                            loc_B88:				; XREF: loc_B10; off_B6E
00000DBE 0C38 008C F600             		cmpi.b	#$8C,($FFFFF600).w
00000DC4 6700                       		beq.s	loc_B9A
00000DC6 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
00000DCC 6600 FFC6                  		bne.w	loc_B5E
00000DD0                            
00000DD0                            loc_B9A:
00000DD0 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ ?
00000DD6 6600 FFBC                  		bne.w	loc_B5E		; if not, branch
00000DDA 3039 00C0 0004             		move.w	($C00004).l,d0
00000DE0 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w
00000DE6 6700                       		beq.s	loc_BBA
00000DE8 303C 0700                  		move.w	#$700,d0
00000DEC                            
00000DEC                            loc_BB6:
00000DEC 51C8 FFFE                  		dbf	d0,loc_BB6
00000DF0                            
00000DF0                            loc_BBA:
00000DF0 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000DF6 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l
00000DFE                            
00000DFE                            loc_BC8:
00000DFE 0839 0000 00A1 1100        		btst	#0,($A11100).l
00000E06 66F6                       		bne.s	loc_BC8
00000E08 4A38 F64E                  		tst.b	($FFFFF64E).w
00000E0C 6600                       		bne.s	loc_BFE
00000E0E 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E14 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000E1A 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000E20 3ABC 977F                  		move.w	#$977F,(a5)
00000E24 3ABC C000                  		move.w	#$C000,(a5)
00000E28 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000E2E 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E32 6000                       		bra.s	loc_C22
00000E34                            ; ===========================================================================
00000E34                            
00000E34                            loc_BFE:				; XREF: loc_BC8
00000E34 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E3A 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000E40 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000E46 3ABC 977F                  		move.w	#$977F,(a5)
00000E4A 3ABC C000                  		move.w	#$C000,(a5)
00000E4E 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000E54 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E58                            
00000E58                            loc_C22:				; XREF: loc_BC8
00000E58 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000E5C 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00000E64 6000 FF2E                  		bra.w	loc_B5E
00000E68                            ; ===========================================================================
00000E68                            
00000E68                            loc_C32:				; XREF: off_B6E
00000E68 6100 0000                  		bsr.w	sub_106E
00000E6C                            
00000E6C                            loc_C36:				; XREF: off_B6E
00000E6C 4A78 F614                  		tst.w	($FFFFF614).w
00000E70 6700 0000                  		beq.w	locret_C42
00000E74 5378 F614                  		subq.w	#1,($FFFFF614).w
00000E78                            
00000E78                            locret_C42:
00000E78 4E75                       		rts	
00000E7A                            ; ===========================================================================
00000E7A                            
00000E7A                            loc_C44:				; XREF: off_B6E
00000E7A 6100 0000                  		bsr.w	sub_106E
00000E7E 6100 0000                  		bsr.w	sub_6886
00000E82 6100 0000                  		bsr.w	sub_1642
00000E86 4A78 F614                  		tst.w	($FFFFF614).w
00000E8A 6700 0000                  		beq.w	locret_C5C
00000E8E 5378 F614                  		subq.w	#1,($FFFFF614).w
00000E92                            
00000E92                            locret_C5C:
00000E92 4E75                       		rts	
00000E94                            ; ===========================================================================
00000E94                            
00000E94                            loc_C5E:				; XREF: off_B6E
00000E94 6100 0000                  		bsr.w	sub_106E
00000E98 4E75                       		rts	
00000E9A                            ; ===========================================================================
00000E9A                            
00000E9A                            loc_C64:				; XREF: off_B6E
00000E9A 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)	?
00000EA0 6700 0000                  		beq.w	loc_DA6		; if yes, branch
00000EA4                            
00000EA4                            loc_C6E:				; XREF: off_B6E
00000EA4 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000EAC                            
00000EAC                            loc_C76:
00000EAC 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000EB4 66F6                       		bne.s	loc_C76		; if not, branch
00000EB6 6100 0000                  		bsr.w	ReadJoypads
00000EBA 4A38 F64E                  		tst.b	($FFFFF64E).w
00000EBE 6600                       		bne.s	loc_CB0
00000EC0 4BF9 00C0 0004             		lea	($C00004).l,a5
00000EC6 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000ECC 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000ED2 3ABC 977F                  		move.w	#$977F,(a5)
00000ED6 3ABC C000                  		move.w	#$C000,(a5)
00000EDA 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000EE0 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000EE4 6000                       		bra.s	loc_CD4
00000EE6                            ; ===========================================================================
00000EE6                            
00000EE6                            loc_CB0:				; XREF: loc_C76
00000EE6 4BF9 00C0 0004             		lea	($C00004).l,a5
00000EEC 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000EF2 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000EF8 3ABC 977F                  		move.w	#$977F,(a5)
00000EFC 3ABC C000                  		move.w	#$C000,(a5)
00000F00 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000F06 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F0A                            
00000F0A                            loc_CD4:				; XREF: loc_C76
00000F0A 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000F0E 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F14 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000F1A 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000F20 3ABC 977F                  		move.w	#$977F,(a5)
00000F24 3ABC 7C00                  		move.w	#$7C00,(a5)
00000F28 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F2E 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F32 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F38 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000F3E 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000F44 3ABC 977F                  		move.w	#$977F,(a5)
00000F48 3ABC 7800                  		move.w	#$7800,(a5)
00000F4C 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F52 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F56 4A38 F767                  		tst.b	($FFFFF767).w
00000F5A 6700                       		beq.s	loc_D50
00000F5C 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F62 2ABC 9401 9370             		move.l	#$94019370,(a5)
00000F68 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00000F6E 3ABC 977F                  		move.w	#$977F,(a5)
00000F72 3ABC 7000                  		move.w	#$7000,(a5)
00000F76 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F7C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F80 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00000F86                            
00000F86                            loc_D50:
00000F86 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00000F8E 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00000F94 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
00000F9A 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
00000FA0 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00000FA6 0C38 0060 F625             		cmpi.b	#$60,($FFFFF625).w
00000FAC 6400                       		bcc.s	Demo_Time
00000FAE 11FC 0001 F64F             		move.b	#1,($FFFFF64F).w
00000FB4 588F                       		addq.l	#4,sp
00000FB6 6000 FDE2                  		bra.w	loc_B64
00000FBA                            
00000FBA                            ; ---------------------------------------------------------------------------
00000FBA                            ; Subroutine to	run a demo for an amount of time
00000FBA                            ; ---------------------------------------------------------------------------
00000FBA                            
00000FBA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000FBA                            
00000FBA                            
00000FBA                            Demo_Time:				; XREF: loc_D50; PalToCRAM
00000FBA 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000FBE 4EB9 0000 0000             		jsr	AniArt_Load
00000FC4 4EB9 0000 0000             		jsr	HudUpdate
00000FCA 6100 0000                  		bsr.w	sub_165E
00000FCE 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00000FD2 6700 0000                  		beq.w	Demo_TimeEnd	; if not, branch
00000FD6 5378 F614                  		subq.w	#1,($FFFFF614).w ; subtract 1 from time	left
00000FDA                            
00000FDA                            Demo_TimeEnd:
00000FDA 4E75                       		rts	
00000FDC                            ; End of function Demo_Time
00000FDC                            
00000FDC                            ; ===========================================================================
00000FDC                            
00000FDC                            loc_DA6:				; XREF: off_B6E
00000FDC 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000FE4                            
00000FE4                            loc_DAE:
00000FE4 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000FEC 66F6                       		bne.s	loc_DAE		; if not, branch
00000FEE 6100 0000                  		bsr.w	ReadJoypads
00000FF2 4BF9 00C0 0004             		lea	($C00004).l,a5
00000FF8 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000FFE 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00001004 3ABC 977F                  		move.w	#$977F,(a5)
00001008 3ABC C000                  		move.w	#$C000,(a5)
0000100C 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00001012 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001016 4BF9 00C0 0004             		lea	($C00004).l,a5
0000101C 2ABC 9401 9340             		move.l	#$94019340,(a5)
00001022 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00001028 3ABC 977F                  		move.w	#$977F,(a5)
0000102C 3ABC 7800                  		move.w	#$7800,(a5)
00001030 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001036 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000103A 4BF9 00C0 0004             		lea	($C00004).l,a5
00001040 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00001046 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
0000104C 3ABC 977F                  		move.w	#$977F,(a5)
00001050 3ABC 7C00                  		move.w	#$7C00,(a5)
00001054 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000105A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000105E 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00001066 6100 0000                  		bsr.w	PalCycle_SS
0000106A 4A38 F767                  		tst.b	($FFFFF767).w
0000106E 6700                       		beq.s	loc_E64
00001070 4BF9 00C0 0004             		lea	($C00004).l,a5
00001076 2ABC 9401 9370             		move.l	#$94019370,(a5)
0000107C 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00001082 3ABC 977F                  		move.w	#$977F,(a5)
00001086 3ABC 7000                  		move.w	#$7000,(a5)
0000108A 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001090 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001094 11FC 0000 F767             		move.b	#0,($FFFFF767).w
0000109A                            
0000109A                            loc_E64:
0000109A 4A78 F614                  		tst.w	($FFFFF614).w
0000109E 6700 0000                  		beq.w	locret_E70
000010A2 5378 F614                  		subq.w	#1,($FFFFF614).w
000010A6                            
000010A6                            locret_E70:
000010A6 4E75                       		rts	
000010A8                            ; ===========================================================================
000010A8                            
000010A8                            loc_E72:				; XREF: off_B6E
000010A8 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
000010B0                            
000010B0                            loc_E7A:
000010B0 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
000010B8 66F6                       		bne.s	loc_E7A		; if not, branch
000010BA 6100 0000                  		bsr.w	ReadJoypads
000010BE 4A38 F64E                  		tst.b	($FFFFF64E).w
000010C2 6600                       		bne.s	loc_EB4
000010C4 4BF9 00C0 0004             		lea	($C00004).l,a5
000010CA 2ABC 9400 9340             		move.l	#$94009340,(a5)
000010D0 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
000010D6 3ABC 977F                  		move.w	#$977F,(a5)
000010DA 3ABC C000                  		move.w	#$C000,(a5)
000010DE 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000010E4 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000010E8 6000                       		bra.s	loc_ED8
000010EA                            ; ===========================================================================
000010EA                            
000010EA                            loc_EB4:				; XREF: loc_E7A
000010EA 4BF9 00C0 0004             		lea	($C00004).l,a5
000010F0 2ABC 9400 9340             		move.l	#$94009340,(a5)
000010F6 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
000010FC 3ABC 977F                  		move.w	#$977F,(a5)
00001100 3ABC C000                  		move.w	#$C000,(a5)
00001104 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
0000110A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000110E                            
0000110E                            loc_ED8:				; XREF: loc_E7A
0000110E 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00001112 4BF9 00C0 0004             		lea	($C00004).l,a5
00001118 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
0000111E 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00001124                            
00001124                            loc_EEE:
00001124 3ABC 977F                  		move.w	#$977F,(a5)
00001128 3ABC 7C00                  		move.w	#$7C00,(a5)
0000112C 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001132 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001136 4BF9 00C0 0004             		lea	($C00004).l,a5
0000113C 2ABC 9401 9340             		move.l	#$94019340,(a5)
00001142 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00001148 3ABC 977F                  		move.w	#$977F,(a5)
0000114C 3ABC 7800                  		move.w	#$7800,(a5)
00001150 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001156 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000115A 4A38 F767                  		tst.b	($FFFFF767).w
0000115E 6700                       		beq.s	loc_F54
00001160 4BF9 00C0 0004             		lea	($C00004).l,a5
00001166 2ABC 9401 9370             		move.l	#$94019370,(a5)
0000116C 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00001172 3ABC 977F                  		move.w	#$977F,(a5)
00001176 3ABC 7000                  		move.w	#$7000,(a5)
0000117A 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001180 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001184 11FC 0000 F767             		move.b	#0,($FFFFF767).w
0000118A                            
0000118A                            loc_F54:
0000118A 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001192 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00001198 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
0000119E 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
000011A4 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
000011AA 6100 0000                  		bsr.w	LoadTilesAsYouMove
000011AE 4EB9 0000 0000             		jsr	AniArt_Load
000011B4 4EB9 0000 0000             		jsr	HudUpdate
000011BA 6100 0000                  		bsr.w	sub_1642
000011BE 4E75                       		rts	
000011C0                            ; ===========================================================================
000011C0                            
000011C0                            loc_F8A:				; XREF: off_B6E
000011C0 6100 0000                  		bsr.w	sub_106E
000011C4 5238 F628                  		addq.b	#1,($FFFFF628).w
000011C8 11FC 000E F62A             		move.b	#$E,($FFFFF62A).w
000011CE 4E75                       		rts	
000011D0                            ; ===========================================================================
000011D0                            
000011D0                            loc_F9A:				; XREF: off_B6E
000011D0 6100 0000                  		bsr.w	sub_106E
000011D4 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
000011D8 6000 0000                  		bra.w	sub_1642
000011DC                            ; ===========================================================================
000011DC                            
000011DC                            loc_FA6:				; XREF: off_B6E
000011DC 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
000011E4                            
000011E4                            loc_FAE:
000011E4 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
000011EC 66F6                       		bne.s	loc_FAE		; if not, branch
000011EE 6100 0000                  		bsr.w	ReadJoypads
000011F2 4BF9 00C0 0004             		lea	($C00004).l,a5
000011F8 2ABC 9400 9340             		move.l	#$94009340,(a5)
000011FE 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00001204 3ABC 977F                  		move.w	#$977F,(a5)
00001208 3ABC C000                  		move.w	#$C000,(a5)
0000120C 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00001212 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001216 4BF9 00C0 0004             		lea	($C00004).l,a5
0000121C 2ABC 9401 9340             		move.l	#$94019340,(a5)
00001222 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00001228 3ABC 977F                  		move.w	#$977F,(a5)
0000122C 3ABC 7800                  		move.w	#$7800,(a5)
00001230 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001236 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000123A 4BF9 00C0 0004             		lea	($C00004).l,a5
00001240 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00001246 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
0000124C 3ABC 977F                  		move.w	#$977F,(a5)
00001250 3ABC 7C00                  		move.w	#$7C00,(a5)
00001254 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000125A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000125E 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001266 4A38 F767                  		tst.b	($FFFFF767).w
0000126A 6700                       		beq.s	loc_1060
0000126C 4BF9 00C0 0004             		lea	($C00004).l,a5
00001272 2ABC 9401 9370             		move.l	#$94019370,(a5)
00001278 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
0000127E 3ABC 977F                  		move.w	#$977F,(a5)
00001282 3ABC 7000                  		move.w	#$7000,(a5)
00001286 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000128C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001290 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00001296                            
00001296                            loc_1060:
00001296 4A78 F614                  		tst.w	($FFFFF614).w
0000129A 6700 0000                  		beq.w	locret_106C
0000129E 5378 F614                  		subq.w	#1,($FFFFF614).w
000012A2                            
000012A2                            locret_106C:
000012A2 4E75                       		rts	
000012A4                            
000012A4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000012A4                            
000012A4                            
000012A4                            sub_106E:				; XREF: loc_C32; et al
000012A4 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
000012AC                            
000012AC                            loc_1076:
000012AC 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
000012B4 66F6                       		bne.s	loc_1076	; if not, branch
000012B6 6100 0000                  		bsr.w	ReadJoypads
000012BA 4A38 F64E                  		tst.b	($FFFFF64E).w
000012BE 6600                       		bne.s	loc_10B0
000012C0 4BF9 00C0 0004             		lea	($C00004).l,a5
000012C6 2ABC 9400 9340             		move.l	#$94009340,(a5)
000012CC 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
000012D2 3ABC 977F                  		move.w	#$977F,(a5)
000012D6 3ABC C000                  		move.w	#$C000,(a5)
000012DA 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000012E0 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000012E4 6000                       		bra.s	loc_10D4
000012E6                            ; ===========================================================================
000012E6                            
000012E6                            loc_10B0:				; XREF: sub_106E
000012E6 4BF9 00C0 0004             		lea	($C00004).l,a5
000012EC 2ABC 9400 9340             		move.l	#$94009340,(a5)
000012F2 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
000012F8 3ABC 977F                  		move.w	#$977F,(a5)
000012FC 3ABC C000                  		move.w	#$C000,(a5)
00001300 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00001306 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000130A                            
0000130A                            loc_10D4:				; XREF: sub_106E
0000130A 4BF9 00C0 0004             		lea	($C00004).l,a5
00001310 2ABC 9401 9340             		move.l	#$94019340,(a5)
00001316 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
0000131C 3ABC 977F                  		move.w	#$977F,(a5)
00001320 3ABC 7800                  		move.w	#$7800,(a5)
00001324 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000132A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000132E 4BF9 00C0 0004             		lea	($C00004).l,a5
00001334 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
0000133A 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00001340 3ABC 977F                  		move.w	#$977F,(a5)
00001344 3ABC 7C00                  		move.w	#$7C00,(a5)
00001348 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000134E 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001352 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
0000135A 4E75                       		rts	
0000135C                            ; End of function sub_106E
0000135C                            
0000135C                            ; ---------------------------------------------------------------------------
0000135C                            ; Subroutine to	move pallets from the RAM to CRAM
0000135C                            ; ---------------------------------------------------------------------------
0000135C                            
0000135C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000135C                            
0000135C                            
0000135C                            PalToCRAM:
0000135C 46FC 2700                  		move	#$2700,sr
00001360 4A78 F644                  		tst.w	($FFFFF644).w
00001364 6700                       		beq.s	locret_119C
00001366 31FC 0000 F644             		move.w	#0,($FFFFF644).w
0000136C 48E7 00C0                  		movem.l	a0-a1,-(sp)
00001370 43F9 00C0 0000             		lea	($C00000).l,a1
00001376 41F8 FA80                  		lea	($FFFFFA80).w,a0 ; load	pallet from RAM
0000137A 237C C000 0000 0004        		move.l	#$C0000000,4(a1) ; set VDP to CRAM write
00001382 2298                       		move.l	(a0)+,(a1)	; move pallet to CRAM
00001384 2298                       		move.l	(a0)+,(a1)
00001386 2298                       		move.l	(a0)+,(a1)
00001388 2298                       		move.l	(a0)+,(a1)
0000138A 2298                       		move.l	(a0)+,(a1)
0000138C 2298                       		move.l	(a0)+,(a1)
0000138E 2298                       		move.l	(a0)+,(a1)
00001390 2298                       		move.l	(a0)+,(a1)
00001392 2298                       		move.l	(a0)+,(a1)
00001394 2298                       		move.l	(a0)+,(a1)
00001396 2298                       		move.l	(a0)+,(a1)
00001398 2298                       		move.l	(a0)+,(a1)
0000139A 2298                       		move.l	(a0)+,(a1)
0000139C 2298                       		move.l	(a0)+,(a1)
0000139E 2298                       		move.l	(a0)+,(a1)
000013A0 2298                       		move.l	(a0)+,(a1)
000013A2 2298                       		move.l	(a0)+,(a1)
000013A4 2298                       		move.l	(a0)+,(a1)
000013A6 2298                       		move.l	(a0)+,(a1)
000013A8 2298                       		move.l	(a0)+,(a1)
000013AA 2298                       		move.l	(a0)+,(a1)
000013AC 2298                       		move.l	(a0)+,(a1)
000013AE 2298                       		move.l	(a0)+,(a1)
000013B0 2298                       		move.l	(a0)+,(a1)
000013B2 2298                       		move.l	(a0)+,(a1)
000013B4 2298                       		move.l	(a0)+,(a1)
000013B6 2298                       		move.l	(a0)+,(a1)
000013B8 2298                       		move.l	(a0)+,(a1)
000013BA 2298                       		move.l	(a0)+,(a1)
000013BC 2298                       		move.l	(a0)+,(a1)
000013BE 2298                       		move.l	(a0)+,(a1)
000013C0 2298                       		move.l	(a0)+,(a1)
000013C2 337C 8ADF 0004             		move.w	#$8ADF,4(a1)
000013C8 4CDF 0300                  		movem.l	(sp)+,a0-a1
000013CC 4A38 F64F                  		tst.b	($FFFFF64F).w
000013D0 6600                       		bne.s	loc_119E
000013D2                            
000013D2                            locret_119C:
000013D2 4E73                       		rte	
000013D4                            ; ===========================================================================
000013D4                            
000013D4                            loc_119E:				; XREF: PalToCRAM
000013D4 4238 F64F                  		clr.b	($FFFFF64F).w
000013D8 48E7 FFFE                  		movem.l	d0-a6,-(sp)
000013DC 6100 FBDC                  		bsr.w	Demo_Time
000013E0 4EB9 0000 0000             		jsr	sub_71B4C
000013E6 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
000013EA 4E73                       		rte	
000013EC                            ; End of function PalToCRAM
000013EC                            
000013EC                            ; ---------------------------------------------------------------------------
000013EC                            ; Subroutine to	initialise joypads
000013EC                            ; ---------------------------------------------------------------------------
000013EC                            
000013EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000013EC                            
000013EC                            
000013EC                            JoypadInit:				; XREF: GameClrRAM
000013EC 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
000013F4                            
000013F4                            Joypad_WaitZ80:
000013F4 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has the Z80 stopped?
000013FC 66F6                       		bne.s	Joypad_WaitZ80	; if not, branch
000013FE 7040                       		moveq	#$40,d0
00001400 13C0 00A1 0009             		move.b	d0,($A10009).l	; init port 1 (joypad 1)
00001406 13C0 00A1 000B             		move.b	d0,($A1000B).l	; init port 2 (joypad 2)
0000140C 13C0 00A1 000D             		move.b	d0,($A1000D).l	; init port 3 (extra)
00001412 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
0000141A 4E75                       		rts	
0000141C                            ; End of function JoypadInit
0000141C                            
0000141C                            ; ---------------------------------------------------------------------------
0000141C                            ; Subroutine to	read joypad input, and send it to the RAM
0000141C                            ; ---------------------------------------------------------------------------
0000141C                            
0000141C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000141C                            
0000141C                            
0000141C                            ReadJoypads:
0000141C 41F8 F604                  		lea	($FFFFF604).w,a0 ; address where joypad	states are written
00001420 43F9 00A1 0003             		lea	($A10003).l,a1	; first	joypad port
00001426 6100                       		bsr.s	Joypad_Read	; do the first joypad
00001428 5449                       		addq.w	#2,a1		; do the second	joypad
0000142A                            
0000142A                            Joypad_Read:
0000142A 12BC 0000                  		move.b	#0,(a1)
0000142E 4E71                       		nop	
00001430 4E71                       		nop	
00001432 1011                       		move.b	(a1),d0
00001434 E508                       		lsl.b	#2,d0
00001436 0200 00C0                  		andi.b	#$C0,d0
0000143A 12BC 0040                  		move.b	#$40,(a1)
0000143E 4E71                       		nop	
00001440 4E71                       		nop	
00001442 1211                       		move.b	(a1),d1
00001444 0201 003F                  		andi.b	#$3F,d1
00001448 8001                       		or.b	d1,d0
0000144A 4600                       		not.b	d0
0000144C 1210                       		move.b	(a0),d1
0000144E B101                       		eor.b	d0,d1
00001450 10C0                       		move.b	d0,(a0)+
00001452 C200                       		and.b	d0,d1
00001454 10C1                       		move.b	d1,(a0)+
00001456 4E75                       		rts	
00001458                            ; End of function ReadJoypads
00001458                            
00001458                            
00001458                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001458                            
00001458                            
00001458                            VDPSetupGame:				; XREF: GameClrRAM; ChecksumError
00001458 41F9 00C0 0004             		lea	($C00004).l,a0
0000145E 43F9 00C0 0000             		lea	($C00000).l,a1
00001464 45F9 0000 0000             		lea	(VDPSetupArray).l,a2
0000146A 7E12                       		moveq	#$12,d7
0000146C                            
0000146C                            VDP_Loop:
0000146C 309A                       		move.w	(a2)+,(a0)
0000146E 51CF FFFC                  		dbf	d7,VDP_Loop	; set the VDP registers
00001472                            
00001472 3039 0000 0000             		move.w	(VDPSetupArray+2).l,d0
00001478 31C0 F60C                  		move.w	d0,($FFFFF60C).w
0000147C 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00001482 7000                       		moveq	#0,d0
00001484 23FC C000 0000 00C0 0004   		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
0000148E 3E3C 003F                  		move.w	#$3F,d7
00001492                            
00001492                            VDP_ClrCRAM:
00001492 3280                       		move.w	d0,(a1)
00001494 51CF FFFC                  		dbf	d7,VDP_ClrCRAM	; clear	the CRAM
00001498                            
00001498 42B8 F616                  		clr.l	($FFFFF616).w
0000149C 42B8 F61A                  		clr.l	($FFFFF61A).w
000014A0 2F01                       		move.l	d1,-(sp)
000014A2 4BF9 00C0 0004             		lea	($C00004).l,a5
000014A8 3ABC 8F01                  		move.w	#$8F01,(a5)
000014AC 2ABC 94FF 93FF             		move.l	#$94FF93FF,(a5)
000014B2 3ABC 9780                  		move.w	#$9780,(a5)
000014B6 2ABC 4000 0080             		move.l	#$40000080,(a5)
000014BC 33FC 0000 00C0 0000        		move.w	#0,($C00000).l	; clear	the screen
000014C4                            
000014C4                            loc_128E:
000014C4 3215                       		move.w	(a5),d1
000014C6 0801 0001                  		btst	#1,d1
000014CA 66F8                       		bne.s	loc_128E
000014CC                            
000014CC 3ABC 8F02                  		move.w	#$8F02,(a5)
000014D0 221F                       		move.l	(sp)+,d1
000014D2 4E75                       		rts	
000014D4                            ; End of function VDPSetupGame
000014D4                            
000014D4                            ; ===========================================================================
000014D4 8004 8134 8230 8328        VDPSetupArray:	dc.w $8004, $8134, $8230, $8328	; XREF: VDPSetupGame
000014DC 8407 857C 8600 8700        		dc.w $8407, $857C, $8600, $8700
000014E4 8800 8900 8A00 8B00        		dc.w $8800, $8900, $8A00, $8B00
000014EC 8C81 8D3F 8E00 8F02        		dc.w $8C81, $8D3F, $8E00, $8F02
000014F4 9001 9100 9200             		dc.w $9001, $9100, $9200
000014FA                            
000014FA                            ; ---------------------------------------------------------------------------
000014FA                            ; Subroutine to	clear the screen
000014FA                            ; ---------------------------------------------------------------------------
000014FA                            
000014FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000014FA                            
000014FA                            
000014FA                            ClearScreen:
000014FA 4BF9 00C0 0004             		lea	($C00004).l,a5
00001500 3ABC 8F01                  		move.w	#$8F01,(a5)
00001504 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
0000150A 3ABC 9780                  		move.w	#$9780,(a5)
0000150E 2ABC 4000 0083             		move.l	#$40000083,(a5)
00001514 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
0000151C                            
0000151C                            loc_12E6:
0000151C 3215                       		move.w	(a5),d1
0000151E 0801 0001                  		btst	#1,d1
00001522 66F8                       		bne.s	loc_12E6
00001524                            
00001524 3ABC 8F02                  		move.w	#$8F02,(a5)
00001528 4BF9 00C0 0004             		lea	($C00004).l,a5
0000152E 3ABC 8F01                  		move.w	#$8F01,(a5)
00001532 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
00001538 3ABC 9780                  		move.w	#$9780,(a5)
0000153C 2ABC 6000 0083             		move.l	#$60000083,(a5)
00001542 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
0000154A                            
0000154A                            loc_1314:
0000154A 3215                       		move.w	(a5),d1
0000154C 0801 0001                  		btst	#1,d1
00001550 66F8                       		bne.s	loc_1314
00001552                            
00001552 3ABC 8F02                  		move.w	#$8F02,(a5)
00001556 21FC 0000 0000 F616        		move.l	#0,($FFFFF616).w
0000155E 21FC 0000 0000 F61A        		move.l	#0,($FFFFF61A).w
00001566 43F8 F800                  		lea	($FFFFF800).w,a1
0000156A 7000                       		moveq	#0,d0
0000156C 323C 009F                  		move.w	#$9F,d1
00001570                            
00001570                            loc_133A:
00001570 22C0                       		move.l	d0,(a1)+
00001572 51C9 FFFC                  		dbf	d1,loc_133A
00001576                            
00001576 43F8 CC00                  		lea	($FFFFCC00).w,a1
0000157A 7000                       		moveq	#0,d0
0000157C 323C 00FF                  		move.w	#$FF,d1
00001580                            
00001580                            loc_134A:
00001580 22C0                       		move.l	d0,(a1)+
00001582 51C9 FFFC                  		dbf	d1,loc_134A
00001586 4E75                       		rts	
00001588                            ; End of function ClearScreen
00001588                            
00001588                            ; ---------------------------------------------------------------------------
00001588                            ; Subroutine to	load the sound driver
00001588                            ; ---------------------------------------------------------------------------
00001588                            
00001588                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001588                            
00001588                            
00001588                            SoundDriverLoad:			; XREF: GameClrRAM; TitleScreen
00001588 4E71                       		nop	
0000158A 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00001592 33FC 0100 00A1 1200        		move.w	#$100,($A11200).l ; reset the Z80
0000159A 41F9 0000 0000             		lea	(Kos_Z80).l,a0	; load sound driver
000015A0 43F9 00A0 0000             		lea	($A00000).l,a1
000015A6 6100 0000                  		bsr.w	KosDec		; decompress
000015AA 33FC 0000 00A1 1200        		move.w	#0,($A11200).l
000015B2 4E71                       		nop	
000015B4 4E71                       		nop	
000015B6 4E71                       		nop	
000015B8 4E71                       		nop	
000015BA 33FC 0100 00A1 1200        		move.w	#$100,($A11200).l ; reset the Z80
000015C2 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
000015CA 4E75                       		rts	
000015CC                            ; End of function SoundDriverLoad
000015CC                            
000015CC                            ; ---------------------------------------------------------------------------
000015CC                            ; Subroutine to	play a sound or	music track
000015CC                            ; ---------------------------------------------------------------------------
000015CC                            
000015CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015CC                            
000015CC                            
000015CC                            PlaySound:
000015CC 11C0 F00A                  		move.b	d0,($FFFFF00A).w
000015D0 4E75                       		rts	
000015D2                            ; End of function PlaySound
000015D2                            
000015D2                            ; ---------------------------------------------------------------------------
000015D2                            ; Subroutine to	play a special sound/music (E0-E4)
000015D2                            ;
000015D2                            ; E0 - Fade out
000015D2                            ; E1 - Sega
000015D2                            ; E2 - Speed up
000015D2                            ; E3 - Normal speed
000015D2                            ; E4 - Stop
000015D2                            ; ---------------------------------------------------------------------------
000015D2                            
000015D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015D2                            
000015D2                            
000015D2                            PlaySound_Special:
000015D2 11C0 F00B                  		move.b	d0,($FFFFF00B).w
000015D6 4E75                       		rts	
000015D8                            ; End of function PlaySound_Special
000015D8                            
000015D8                            ; ===========================================================================
000015D8                            ; ---------------------------------------------------------------------------
000015D8                            ; Unused sound/music subroutine
000015D8                            ; ---------------------------------------------------------------------------
000015D8                            
000015D8                            PlaySound_Unk:
000015D8 11C0 F00C                  		move.b	d0,($FFFFF00C).w
000015DC 4E75                       		rts	
000015DE                            
000015DE                            ; ---------------------------------------------------------------------------
000015DE                            ; Subroutine to	pause the game
000015DE                            ; ---------------------------------------------------------------------------
000015DE                            
000015DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015DE                            
000015DE                            
000015DE                            PauseGame:				; XREF: Level_MainLoop; et al
000015DE 4E71                       		nop	
000015E0 4A38 FE12                  		tst.b	($FFFFFE12).w	; do you have any lives	left?
000015E4 6700                       		beq.s	Unpause		; if not, branch
000015E6 4A78 F63A                  		tst.w	($FFFFF63A).w	; is game already paused?
000015EA 6600                       		bne.s	loc_13BE	; if yes, branch
000015EC 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
000015F2 6700                       		beq.s	Pause_DoNothing	; if not, branch
000015F4                            
000015F4                            loc_13BE:
000015F4 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w ; freeze time
000015FA 11FC 0001 F003             		move.b	#1,($FFFFF003).w ; pause music
00001600                            
00001600                            loc_13CA:
00001600 11FC 0010 F62A             		move.b	#$10,($FFFFF62A).w
00001606 6100 0000                  		bsr.w	DelayProgram
0000160A 4A38 FFE1                  		tst.b	($FFFFFFE1).w	; is slow-motion cheat on?
0000160E 6700                       		beq.s	Pause_ChkStart	; if not, branch
00001610 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
00001616 6700                       		beq.s	Pause_ChkBC	; if not, branch
00001618 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; set game mode to 4 (title screen)
0000161E 4E71                       		nop	
00001620 6000                       		bra.s	loc_1404
00001622                            ; ===========================================================================
00001622                            
00001622                            Pause_ChkBC:				; XREF: PauseGame
00001622 0838 0004 F604             		btst	#4,($FFFFF604).w ; is button B pressed?
00001628 6600                       		bne.s	Pause_SlowMo	; if yes, branch
0000162A 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
00001630 6600                       		bne.s	Pause_SlowMo	; if yes, branch
00001632                            
00001632                            Pause_ChkStart:				; XREF: PauseGame
00001632 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
00001638 67C6                       		beq.s	loc_13CA	; if not, branch
0000163A                            
0000163A                            loc_1404:				; XREF: PauseGame
0000163A 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
00001640                            
00001640                            Unpause:				; XREF: PauseGame
00001640 31FC 0000 F63A             		move.w	#0,($FFFFF63A).w ; unpause the game
00001646                            
00001646                            Pause_DoNothing:			; XREF: PauseGame
00001646 4E75                       		rts	
00001648                            ; ===========================================================================
00001648                            
00001648                            Pause_SlowMo:				; XREF: PauseGame
00001648 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w
0000164E 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
00001654 4E75                       		rts	
00001656                            ; End of function PauseGame
00001656                            
00001656                            ; ---------------------------------------------------------------------------
00001656                            ; Subroutine to	display	patterns via the VDP
00001656                            ; ---------------------------------------------------------------------------
00001656                            
00001656                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001656                            
00001656                            
00001656                            ShowVDPGraphics:			; XREF: SegaScreen; TitleScreen; SS_BGLoad
00001656 4DF9 00C0 0000             		lea	($C00000).l,a6
0000165C 283C 0080 0000             		move.l	#$800000,d4
00001662                            
00001662                            loc_142C:
00001662 2D40 0004                  		move.l	d0,4(a6)
00001666 3601                       		move.w	d1,d3
00001668                            
00001668                            loc_1432:
00001668 3C99                       		move.w	(a1)+,(a6)
0000166A 51CB FFFC                  		dbf	d3,loc_1432
0000166E D084                       		add.l	d4,d0
00001670 51CA FFF0                  		dbf	d2,loc_142C
00001674 4E75                       		rts	
00001676                            ; End of function ShowVDPGraphics
00001676                            
00001676                            ; ---------------------------------------------------------------------------
00001676                            ; Nemesis decompression	algorithm
00001676                            ; ---------------------------------------------------------------------------
00001676                            
00001676                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001676                            
00001676                            
00001676                            NemDec:
00001676 48E7 FFDC                  		movem.l	d0-a1/a3-a5,-(sp)
0000167A 47F9 0000 0000             		lea	(loc_1502).l,a3
00001680 49F9 00C0 0000             		lea	($C00000).l,a4
00001686 6000                       		bra.s	loc_145C
00001688                            ; ===========================================================================
00001688 48E7 FFDC                  		movem.l	d0-a1/a3-a5,-(sp)
0000168C 47F9 0000 0000             		lea	(loc_1518).l,a3
00001692                            
00001692                            loc_145C:				; XREF: NemDec
00001692 43F8 AA00                  		lea	($FFFFAA00).w,a1
00001696 3418                       		move.w	(a0)+,d2
00001698 E34A                       		lsl.w	#1,d2
0000169A 6400                       		bcc.s	loc_146A
0000169C D6FC 000A                  		adda.w	#$A,a3
000016A0                            
000016A0                            loc_146A:
000016A0 E54A                       		lsl.w	#2,d2
000016A2 3A42                       		movea.w	d2,a5
000016A4 7608                       		moveq	#8,d3
000016A6 7400                       		moveq	#0,d2
000016A8 7800                       		moveq	#0,d4
000016AA 6100 0000                  		bsr.w	NemDec4
000016AE 1A18                       		move.b	(a0)+,d5
000016B0 E145                       		asl.w	#8,d5
000016B2 1A18                       		move.b	(a0)+,d5
000016B4 3C3C 0010                  		move.w	#$10,d6
000016B8 6100                       		bsr.s	NemDec2
000016BA 4CDF 3BFF                  		movem.l	(sp)+,d0-a1/a3-a5
000016BE 4E75                       		rts	
000016C0                            ; End of function NemDec
000016C0                            
000016C0                            
000016C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000016C0                            
000016C0                            
000016C0                            NemDec2:				; XREF: NemDec
000016C0 3E06                       		move.w	d6,d7
000016C2 5147                       		subq.w	#8,d7
000016C4 3205                       		move.w	d5,d1
000016C6 EE69                       		lsr.w	d7,d1
000016C8 0C01 00FC                  		cmpi.b	#-4,d1
000016CC 6400                       		bcc.s	loc_14D6
000016CE 0241 00FF                  		andi.w	#$FF,d1
000016D2 D241                       		add.w	d1,d1
000016D4 1031 1000                  		move.b	(a1,d1.w),d0
000016D8 4880                       		ext.w	d0
000016DA 9C40                       		sub.w	d0,d6
000016DC 0C46 0009                  		cmpi.w	#9,d6
000016E0 6400                       		bcc.s	loc_14B2
000016E2 5046                       		addq.w	#8,d6
000016E4 E145                       		asl.w	#8,d5
000016E6 1A18                       		move.b	(a0)+,d5
000016E8                            
000016E8                            loc_14B2:
000016E8 1231 1001                  		move.b	1(a1,d1.w),d1
000016EC 3001                       		move.w	d1,d0
000016EE 0241 000F                  		andi.w	#$F,d1
000016F2 0240 00F0                  		andi.w	#$F0,d0
000016F6                            
000016F6                            loc_14C0:				; XREF: NemDec3
000016F6 E848                       		lsr.w	#4,d0
000016F8                            
000016F8                            loc_14C2:				; XREF: NemDec3
000016F8 E98C                       		lsl.l	#4,d4
000016FA 8801                       		or.b	d1,d4
000016FC 5343                       		subq.w	#1,d3
000016FE 6600                       		bne.s	loc_14D0
00001700 4ED3                       		jmp	(a3)
00001702                            ; End of function NemDec2
00001702                            
00001702                            
00001702                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001702                            
00001702                            
00001702                            NemDec3:				; XREF: loc_1502
00001702 7800                       		moveq	#0,d4
00001704 7608                       		moveq	#8,d3
00001706                            
00001706                            loc_14D0:				; XREF: NemDec2
00001706 51C8 FFF0                  		dbf	d0,loc_14C2
0000170A 60B4                       		bra.s	NemDec2
0000170C                            ; ===========================================================================
0000170C                            
0000170C                            loc_14D6:				; XREF: NemDec2
0000170C 5D46                       		subq.w	#6,d6
0000170E 0C46 0009                  		cmpi.w	#9,d6
00001712 6400                       		bcc.s	loc_14E4
00001714 5046                       		addq.w	#8,d6
00001716 E145                       		asl.w	#8,d5
00001718 1A18                       		move.b	(a0)+,d5
0000171A                            
0000171A                            loc_14E4:				; XREF: NemDec3
0000171A 5F46                       		subq.w	#7,d6
0000171C 3205                       		move.w	d5,d1
0000171E EC69                       		lsr.w	d6,d1
00001720 3001                       		move.w	d1,d0
00001722 0241 000F                  		andi.w	#$F,d1
00001726 0240 0070                  		andi.w	#$70,d0
0000172A 0C46 0009                  		cmpi.w	#9,d6
0000172E 64C6                       		bcc.s	loc_14C0
00001730 5046                       		addq.w	#8,d6
00001732 E145                       		asl.w	#8,d5
00001734 1A18                       		move.b	(a0)+,d5
00001736 60BE                       		bra.s	loc_14C0
00001738                            ; End of function NemDec3
00001738                            
00001738                            ; ===========================================================================
00001738                            
00001738                            loc_1502:				; XREF: NemDec
00001738 2884                       		move.l	d4,(a4)
0000173A 534D                       		subq.w	#1,a5
0000173C 380D                       		move.w	a5,d4
0000173E 66C2                       		bne.s	NemDec3
00001740 4E75                       		rts	
00001742                            ; ===========================================================================
00001742 B982                       		eor.l	d4,d2
00001744 2882                       		move.l	d2,(a4)
00001746 534D                       		subq.w	#1,a5
00001748 380D                       		move.w	a5,d4
0000174A 66B6                       		bne.s	NemDec3
0000174C 4E75                       		rts	
0000174E                            ; ===========================================================================
0000174E                            
0000174E                            loc_1518:				; XREF: NemDec
0000174E 28C4                       		move.l	d4,(a4)+
00001750 534D                       		subq.w	#1,a5
00001752 380D                       		move.w	a5,d4
00001754 66AC                       		bne.s	NemDec3
00001756 4E75                       		rts	
00001758                            ; ===========================================================================
00001758 B982                       		eor.l	d4,d2
0000175A 28C2                       		move.l	d2,(a4)+
0000175C 534D                       		subq.w	#1,a5
0000175E 380D                       		move.w	a5,d4
00001760 66A0                       		bne.s	NemDec3
00001762 4E75                       		rts	
00001764                            
00001764                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001764                            
00001764                            
00001764                            NemDec4:				; XREF: NemDec
00001764 1018                       		move.b	(a0)+,d0
00001766                            
00001766                            loc_1530:
00001766 0C00 00FF                  		cmpi.b	#-1,d0
0000176A 6600                       		bne.s	loc_1538
0000176C 4E75                       		rts	
0000176E                            ; ===========================================================================
0000176E                            
0000176E                            loc_1538:				; XREF: NemDec4
0000176E 3E00                       		move.w	d0,d7
00001770                            
00001770                            loc_153A:
00001770 1018                       		move.b	(a0)+,d0
00001772 0C00 0080                  		cmpi.b	#$80,d0
00001776 64EE                       		bcc.s	loc_1530
00001778 1200                       		move.b	d0,d1
0000177A 0247 000F                  		andi.w	#$F,d7
0000177E 0241 0070                  		andi.w	#$70,d1
00001782 8E41                       		or.w	d1,d7
00001784 0240 000F                  		andi.w	#$F,d0
00001788 1200                       		move.b	d0,d1
0000178A E149                       		lsl.w	#8,d1
0000178C 8E41                       		or.w	d1,d7
0000178E 7208                       		moveq	#8,d1
00001790 9240                       		sub.w	d0,d1
00001792 6600                       		bne.s	loc_1568
00001794 1018                       		move.b	(a0)+,d0
00001796 D040                       		add.w	d0,d0
00001798 3387 0000                  		move.w	d7,(a1,d0.w)
0000179C 60D2                       		bra.s	loc_153A
0000179E                            ; ===========================================================================
0000179E                            
0000179E                            loc_1568:				; XREF: NemDec4
0000179E 1018                       		move.b	(a0)+,d0
000017A0 E368                       		lsl.w	d1,d0
000017A2 D040                       		add.w	d0,d0
000017A4 7A01                       		moveq	#1,d5
000017A6 E36D                       		lsl.w	d1,d5
000017A8 5345                       		subq.w	#1,d5
000017AA                            
000017AA                            loc_1574:
000017AA 3387 0000                  		move.w	d7,(a1,d0.w)
000017AE 5440                       		addq.w	#2,d0
000017B0 51CD FFF8                  		dbf	d5,loc_1574
000017B4 60BA                       		bra.s	loc_153A
000017B6                            ; End of function NemDec4
000017B6                            
000017B6                            ; ---------------------------------------------------------------------------
000017B6                            ; Subroutine to	load pattern load cues
000017B6                            ; ---------------------------------------------------------------------------
000017B6                            
000017B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017B6                            
000017B6                            
000017B6                            LoadPLC:
000017B6 48E7 0060                  		movem.l	a1-a2,-(sp)
000017BA 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
000017C0 D040                       		add.w	d0,d0
000017C2 3031 0000                  		move.w	(a1,d0.w),d0
000017C6 43F1 0000                  		lea	(a1,d0.w),a1
000017CA 45F8 F680                  		lea	($FFFFF680).w,a2
000017CE                            
000017CE                            loc_1598:
000017CE 4A92                       		tst.l	(a2)
000017D0 6700                       		beq.s	loc_15A0
000017D2 5C4A                       		addq.w	#6,a2
000017D4 60F8                       		bra.s	loc_1598
000017D6                            ; ===========================================================================
000017D6                            
000017D6                            loc_15A0:				; XREF: LoadPLC
000017D6 3019                       		move.w	(a1)+,d0
000017D8 6B00                       		bmi.s	loc_15AC
000017DA                            
000017DA                            loc_15A4:
000017DA 24D9                       		move.l	(a1)+,(a2)+
000017DC 34D9                       		move.w	(a1)+,(a2)+
000017DE 51C8 FFFA                  		dbf	d0,loc_15A4
000017E2                            
000017E2                            loc_15AC:
000017E2 4CDF 0600                  		movem.l	(sp)+,a1-a2
000017E6 4E75                       		rts	
000017E8                            ; End of function LoadPLC
000017E8                            
000017E8                            
000017E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017E8                            
000017E8                            
000017E8                            LoadPLC2:
000017E8 48E7 0060                  		movem.l	a1-a2,-(sp)
000017EC 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
000017F2 D040                       		add.w	d0,d0
000017F4 3031 0000                  		move.w	(a1,d0.w),d0
000017F8 43F1 0000                  		lea	(a1,d0.w),a1
000017FC 6100                       		bsr.s	ClearPLC
000017FE 45F8 F680                  		lea	($FFFFF680).w,a2
00001802 3019                       		move.w	(a1)+,d0
00001804 6B00                       		bmi.s	loc_15D8
00001806                            
00001806                            loc_15D0:
00001806 24D9                       		move.l	(a1)+,(a2)+
00001808 34D9                       		move.w	(a1)+,(a2)+
0000180A 51C8 FFFA                  		dbf	d0,loc_15D0
0000180E                            
0000180E                            loc_15D8:
0000180E 4CDF 0600                  		movem.l	(sp)+,a1-a2
00001812 4E75                       		rts	
00001814                            ; End of function LoadPLC2
00001814                            
00001814                            ; ---------------------------------------------------------------------------
00001814                            ; Subroutine to	clear the pattern load cues
00001814                            ; ---------------------------------------------------------------------------
00001814                            
00001814                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001814                            
00001814                            
00001814                            ClearPLC:				; XREF: LoadPLC2
00001814 45F8 F680                  		lea	($FFFFF680).w,a2
00001818 701F                       		moveq	#$1F,d0
0000181A                            
0000181A                            ClearPLC_Loop:
0000181A 429A                       		clr.l	(a2)+
0000181C 51C8 FFFC                  		dbf	d0,ClearPLC_Loop
00001820 4E75                       		rts	
00001822                            ; End of function ClearPLC
00001822                            
00001822                            ; ---------------------------------------------------------------------------
00001822                            ; Subroutine to	use graphics listed in a pattern load cue
00001822                            ; ---------------------------------------------------------------------------
00001822                            
00001822                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001822                            
00001822                            
00001822                            RunPLC_RAM:				; XREF: Pal_FadeTo
00001822 4AB8 F680                  		tst.l	($FFFFF680).w
00001826 6700                       		beq.s	locret_1640
00001828 4A78 F6F8                  		tst.w	($FFFFF6F8).w
0000182C 6600                       		bne.s	locret_1640
0000182E 2078 F680                  		movea.l	($FFFFF680).w,a0
00001832 47F9 0000 1738             		lea	(loc_1502).l,a3
00001838 43F8 AA00                  		lea	($FFFFAA00).w,a1
0000183C 3418                       		move.w	(a0)+,d2
0000183E 6A00                       		bpl.s	loc_160E
00001840 D6FC 000A                  		adda.w	#$A,a3
00001844                            
00001844                            loc_160E:
00001844 0242 7FFF                  		andi.w	#$7FFF,d2
00001848 31C2 F6F8                  		move.w	d2,($FFFFF6F8).w
0000184C 6100 FF16                  		bsr.w	NemDec4
00001850 1A18                       		move.b	(a0)+,d5
00001852 E145                       		asl.w	#8,d5
00001854 1A18                       		move.b	(a0)+,d5
00001856 7C10                       		moveq	#$10,d6
00001858 7000                       		moveq	#0,d0
0000185A 21C8 F680                  		move.l	a0,($FFFFF680).w
0000185E 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
00001862 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
00001866 21C0 F6E8                  		move.l	d0,($FFFFF6E8).w
0000186A 21C0 F6EC                  		move.l	d0,($FFFFF6EC).w
0000186E 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
00001872 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
00001876                            
00001876                            locret_1640:
00001876 4E75                       		rts	
00001878                            ; End of function RunPLC_RAM
00001878                            
00001878                            
00001878                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001878                            
00001878                            
00001878                            sub_1642:				; XREF: loc_C44; loc_F54; loc_F9A
00001878 4A78 F6F8                  		tst.w	($FFFFF6F8).w
0000187C 6700 0000                  		beq.w	locret_16DA
00001880 31FC 0009 F6FA             		move.w	#9,($FFFFF6FA).w
00001886 7000                       		moveq	#0,d0
00001888 3038 F684                  		move.w	($FFFFF684).w,d0
0000188C 0678 0120 F684             		addi.w	#$120,($FFFFF684).w
00001892 6000                       		bra.s	loc_1676
00001894                            ; End of function sub_1642
00001894                            
00001894                            
00001894                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001894                            
00001894                            
00001894                            sub_165E:				; XREF: Demo_Time
00001894 4A78 F6F8                  		tst.w	($FFFFF6F8).w
00001898 6700                       		beq.s	locret_16DA
0000189A 31FC 0003 F6FA             		move.w	#3,($FFFFF6FA).w
000018A0 7000                       		moveq	#0,d0
000018A2 3038 F684                  		move.w	($FFFFF684).w,d0
000018A6 0678 0060 F684             		addi.w	#$60,($FFFFF684).w
000018AC                            
000018AC                            loc_1676:				; XREF: sub_1642
000018AC 49F9 00C0 0004             		lea	($C00004).l,a4
000018B2 E588                       		lsl.l	#2,d0
000018B4 E448                       		lsr.w	#2,d0
000018B6 0040 4000                  		ori.w	#$4000,d0
000018BA 4840                       		swap	d0
000018BC 2880                       		move.l	d0,(a4)
000018BE 594C                       		subq.w	#4,a4
000018C0 2078 F680                  		movea.l	($FFFFF680).w,a0
000018C4 2678 F6E0                  		movea.l	($FFFFF6E0).w,a3
000018C8 2038 F6E4                  		move.l	($FFFFF6E4).w,d0
000018CC 2238 F6E8                  		move.l	($FFFFF6E8).w,d1
000018D0 2438 F6EC                  		move.l	($FFFFF6EC).w,d2
000018D4 2A38 F6F0                  		move.l	($FFFFF6F0).w,d5
000018D8 2C38 F6F4                  		move.l	($FFFFF6F4).w,d6
000018DC 43F8 AA00                  		lea	($FFFFAA00).w,a1
000018E0                            
000018E0                            loc_16AA:				; XREF: sub_165E
000018E0 3A7C 0008                  		movea.w	#8,a5
000018E4 6100 FE1C                  		bsr.w	NemDec3
000018E8 5378 F6F8                  		subq.w	#1,($FFFFF6F8).w
000018EC 6700                       		beq.s	loc_16DC
000018EE 5378 F6FA                  		subq.w	#1,($FFFFF6FA).w
000018F2 66EC                       		bne.s	loc_16AA
000018F4 21C8 F680                  		move.l	a0,($FFFFF680).w
000018F8 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
000018FC 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
00001900 21C1 F6E8                  		move.l	d1,($FFFFF6E8).w
00001904 21C2 F6EC                  		move.l	d2,($FFFFF6EC).w
00001908 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
0000190C 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
00001910                            
00001910                            locret_16DA:				; XREF: sub_1642
00001910 4E75                       		rts	
00001912                            ; ===========================================================================
00001912                            
00001912                            loc_16DC:				; XREF: sub_165E
00001912 41F8 F680                  		lea	($FFFFF680).w,a0
00001916 7015                       		moveq	#$15,d0
00001918                            
00001918                            loc_16E2:				; XREF: sub_165E
00001918 20E8 0006                  		move.l	6(a0),(a0)+
0000191C 51C8 FFFA                  		dbf	d0,loc_16E2
00001920 4E75                       		rts	
00001922                            ; End of function sub_165E
00001922                            
00001922                            ; ---------------------------------------------------------------------------
00001922                            ; Subroutine to	execute	the pattern load cue
00001922                            ; ---------------------------------------------------------------------------
00001922                            
00001922                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001922                            
00001922                            
00001922                            RunPLC_ROM:
00001922 43F9 0000 0000             		lea	(ArtLoadCues).l,a1 ; load the PLC index
00001928 D040                       		add.w	d0,d0
0000192A 3031 0000                  		move.w	(a1,d0.w),d0
0000192E 43F1 0000                  		lea	(a1,d0.w),a1
00001932 3219                       		move.w	(a1)+,d1	; load number of entries in the	PLC
00001934                            
00001934                            RunPLC_Loop:
00001934 2059                       		movea.l	(a1)+,a0	; get art pointer
00001936 7000                       		moveq	#0,d0
00001938 3019                       		move.w	(a1)+,d0	; get VRAM address
0000193A E588                       		lsl.l	#2,d0		; divide address by $20
0000193C E448                       		lsr.w	#2,d0
0000193E 0040 4000                  		ori.w	#$4000,d0
00001942 4840                       		swap	d0
00001944 23C0 00C0 0004             		move.l	d0,($C00004).l	; put the VRAM address into VDP
0000194A 6100 FD2A                  		bsr.w	NemDec		; decompress
0000194E 51C9 FFE4                  		dbf	d1,RunPLC_Loop	; loop for number of entries
00001952 4E75                       		rts	
00001954                            ; End of function RunPLC_ROM
00001954                            
00001954                            ; ---------------------------------------------------------------------------
00001954                            ; Enigma decompression algorithm
00001954                            ; ---------------------------------------------------------------------------
00001954                            
00001954                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001954                            
00001954                            
00001954                            EniDec:
00001954 48E7 FF7C                  		movem.l	d0-d7/a1-a5,-(sp)
00001958 3640                       		movea.w	d0,a3
0000195A 1018                       		move.b	(a0)+,d0
0000195C 4880                       		ext.w	d0
0000195E 3A40                       		movea.w	d0,a5
00001960 1818                       		move.b	(a0)+,d4
00001962 E70C                       		lsl.b	#3,d4
00001964 3458                       		movea.w	(a0)+,a2
00001966 D4CB                       		adda.w	a3,a2
00001968 3858                       		movea.w	(a0)+,a4
0000196A D8CB                       		adda.w	a3,a4
0000196C 1A18                       		move.b	(a0)+,d5
0000196E E145                       		asl.w	#8,d5
00001970 1A18                       		move.b	(a0)+,d5
00001972 7C10                       		moveq	#$10,d6
00001974                            
00001974                            loc_173E:				; XREF: loc_1768
00001974 7007                       		moveq	#7,d0
00001976 3E06                       		move.w	d6,d7
00001978 9E40                       		sub.w	d0,d7
0000197A 3205                       		move.w	d5,d1
0000197C EE69                       		lsr.w	d7,d1
0000197E 0241 007F                  		andi.w	#$7F,d1
00001982 3401                       		move.w	d1,d2
00001984 0C41 0040                  		cmpi.w	#$40,d1
00001988 6400                       		bcc.s	loc_1758
0000198A 7006                       		moveq	#6,d0
0000198C E24A                       		lsr.w	#1,d2
0000198E                            
0000198E                            loc_1758:
0000198E 6100 0000                  		bsr.w	sub_188C
00001992 0242 000F                  		andi.w	#$F,d2
00001996 E849                       		lsr.w	#4,d1
00001998 D241                       		add.w	d1,d1
0000199A 4EFB 1000                  		jmp	loc_17B4(pc,d1.w)
0000199E                            ; End of function EniDec
0000199E                            
0000199E                            ; ===========================================================================
0000199E                            
0000199E                            loc_1768:				; XREF: loc_17B4
0000199E 32CA                       		move.w	a2,(a1)+
000019A0 524A                       		addq.w	#1,a2
000019A2 51CA FFFA                  		dbf	d2,loc_1768
000019A6 60CC                       		bra.s	loc_173E
000019A8                            ; ===========================================================================
000019A8                            
000019A8                            loc_1772:				; XREF: loc_17B4
000019A8 32CC                       		move.w	a4,(a1)+
000019AA 51CA FFFC                  		dbf	d2,loc_1772
000019AE 60C4                       		bra.s	loc_173E
000019B0                            ; ===========================================================================
000019B0                            
000019B0                            loc_177A:				; XREF: loc_17B4
000019B0 6100 0000                  		bsr.w	loc_17DC
000019B4                            
000019B4                            loc_177E:
000019B4 32C1                       		move.w	d1,(a1)+
000019B6 51CA FFFC                  		dbf	d2,loc_177E
000019BA 60B8                       		bra.s	loc_173E
000019BC                            ; ===========================================================================
000019BC                            
000019BC                            loc_1786:				; XREF: loc_17B4
000019BC 6100 0000                  		bsr.w	loc_17DC
000019C0                            
000019C0                            loc_178A:
000019C0 32C1                       		move.w	d1,(a1)+
000019C2 5241                       		addq.w	#1,d1
000019C4 51CA FFFA                  		dbf	d2,loc_178A
000019C8 60AA                       		bra.s	loc_173E
000019CA                            ; ===========================================================================
000019CA                            
000019CA                            loc_1794:				; XREF: loc_17B4
000019CA 6100 0000                  		bsr.w	loc_17DC
000019CE                            
000019CE                            loc_1798:
000019CE 32C1                       		move.w	d1,(a1)+
000019D0 5341                       		subq.w	#1,d1
000019D2 51CA FFFA                  		dbf	d2,loc_1798
000019D6 609C                       		bra.s	loc_173E
000019D8                            ; ===========================================================================
000019D8                            
000019D8                            loc_17A2:				; XREF: loc_17B4
000019D8 0C42 000F                  		cmpi.w	#$F,d2
000019DC 6700                       		beq.s	loc_17C4
000019DE                            
000019DE                            loc_17A8:
000019DE 6100 0000                  		bsr.w	loc_17DC
000019E2 32C1                       		move.w	d1,(a1)+
000019E4 51CA FFF8                  		dbf	d2,loc_17A8
000019E8 608A                       		bra.s	loc_173E
000019EA                            ; ===========================================================================
000019EA                            
000019EA                            loc_17B4:				; XREF: EniDec
000019EA 60B2                       		bra.s	loc_1768
000019EC                            ; ===========================================================================
000019EC 60B0                       		bra.s	loc_1768
000019EE                            ; ===========================================================================
000019EE 60B8                       		bra.s	loc_1772
000019F0                            ; ===========================================================================
000019F0 60B6                       		bra.s	loc_1772
000019F2                            ; ===========================================================================
000019F2 60BC                       		bra.s	loc_177A
000019F4                            ; ===========================================================================
000019F4 60C6                       		bra.s	loc_1786
000019F6                            ; ===========================================================================
000019F6 60D2                       		bra.s	loc_1794
000019F8                            ; ===========================================================================
000019F8 60DE                       		bra.s	loc_17A2
000019FA                            ; ===========================================================================
000019FA                            
000019FA                            loc_17C4:				; XREF: loc_17A2
000019FA 5348                       		subq.w	#1,a0
000019FC 0C46 0010                  		cmpi.w	#$10,d6
00001A00 6600                       		bne.s	loc_17CE
00001A02 5348                       		subq.w	#1,a0
00001A04                            
00001A04                            loc_17CE:
00001A04 3008                       		move.w	a0,d0
00001A06 E248                       		lsr.w	#1,d0
00001A08 6400                       		bcc.s	loc_17D6
00001A0A 5248                       		addq.w	#1,a0
00001A0C                            
00001A0C                            loc_17D6:
00001A0C 4CDF 3EFF                  		movem.l	(sp)+,d0-d7/a1-a5
00001A10 4E75                       		rts	
00001A12                            ; ===========================================================================
00001A12                            
00001A12                            loc_17DC:				; XREF: loc_17A2
00001A12 360B                       		move.w	a3,d3
00001A14 1204                       		move.b	d4,d1
00001A16 D201                       		add.b	d1,d1
00001A18 6400                       		bcc.s	loc_17EE
00001A1A 5346                       		subq.w	#1,d6
00001A1C 0D05                       		btst	d6,d5
00001A1E 6700                       		beq.s	loc_17EE
00001A20 0043 8000                  		ori.w	#-$8000,d3
00001A24                            
00001A24                            loc_17EE:
00001A24 D201                       		add.b	d1,d1
00001A26 6400                       		bcc.s	loc_17FC
00001A28 5346                       		subq.w	#1,d6
00001A2A 0D05                       		btst	d6,d5
00001A2C 6700                       		beq.s	loc_17FC
00001A2E 0643 4000                  		addi.w	#$4000,d3
00001A32                            
00001A32                            loc_17FC:
00001A32 D201                       		add.b	d1,d1
00001A34 6400                       		bcc.s	loc_180A
00001A36 5346                       		subq.w	#1,d6
00001A38 0D05                       		btst	d6,d5
00001A3A 6700                       		beq.s	loc_180A
00001A3C 0643 2000                  		addi.w	#$2000,d3
00001A40                            
00001A40                            loc_180A:
00001A40 D201                       		add.b	d1,d1
00001A42 6400                       		bcc.s	loc_1818
00001A44 5346                       		subq.w	#1,d6
00001A46 0D05                       		btst	d6,d5
00001A48 6700                       		beq.s	loc_1818
00001A4A 0043 1000                  		ori.w	#$1000,d3
00001A4E                            
00001A4E                            loc_1818:
00001A4E D201                       		add.b	d1,d1
00001A50 6400                       		bcc.s	loc_1826
00001A52 5346                       		subq.w	#1,d6
00001A54 0D05                       		btst	d6,d5
00001A56 6700                       		beq.s	loc_1826
00001A58 0043 0800                  		ori.w	#$800,d3
00001A5C                            
00001A5C                            loc_1826:
00001A5C 3205                       		move.w	d5,d1
00001A5E 3E06                       		move.w	d6,d7
00001A60 9E4D                       		sub.w	a5,d7
00001A62 6400                       		bcc.s	loc_1856
00001A64 3C07                       		move.w	d7,d6
00001A66 0646 0010                  		addi.w	#$10,d6
00001A6A 4447                       		neg.w	d7
00001A6C EF69                       		lsl.w	d7,d1
00001A6E 1A10                       		move.b	(a0),d5
00001A70 EF3D                       		rol.b	d7,d5
00001A72 DE47                       		add.w	d7,d7
00001A74 CA7B 7000                  		and.w	word_186C-2(pc,d7.w),d5
00001A78 D245                       		add.w	d5,d1
00001A7A                            
00001A7A                            loc_1844:				; XREF: loc_1868
00001A7A 300D                       		move.w	a5,d0
00001A7C D040                       		add.w	d0,d0
00001A7E C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
00001A82 D243                       		add.w	d3,d1
00001A84 1A18                       		move.b	(a0)+,d5
00001A86 E14D                       		lsl.w	#8,d5
00001A88 1A18                       		move.b	(a0)+,d5
00001A8A 4E75                       		rts	
00001A8C                            ; ===========================================================================
00001A8C                            
00001A8C                            loc_1856:				; XREF: loc_1826
00001A8C 6700                       		beq.s	loc_1868
00001A8E EE69                       		lsr.w	d7,d1
00001A90 300D                       		move.w	a5,d0
00001A92 D040                       		add.w	d0,d0
00001A94 C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
00001A98 D243                       		add.w	d3,d1
00001A9A 300D                       		move.w	a5,d0
00001A9C 6000                       		bra.s	sub_188C
00001A9E                            ; ===========================================================================
00001A9E                            
00001A9E                            loc_1868:				; XREF: loc_1856
00001A9E 7C10                       		moveq	#$10,d6
00001AA0                            
00001AA0                            loc_186A:
00001AA0 60D8                       		bra.s	loc_1844
00001AA2                            ; ===========================================================================
00001AA2 0001 0003 0007 000F 001F+  word_186C:	dc.w 1,	3, 7, $F, $1F, $3F, $7F, $FF, $1FF, $3FF, $7FF
00001AB8 0FFF 1FFF 3FFF 7FFF FFFF   		dc.w $FFF, $1FFF, $3FFF, $7FFF,	$FFFF	; XREF: loc_1856
00001AC2                            
00001AC2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001AC2                            
00001AC2                            
00001AC2                            sub_188C:				; XREF: EniDec
00001AC2 9C40                       		sub.w	d0,d6
00001AC4 0C46 0009                  		cmpi.w	#9,d6
00001AC8 6400                       		bcc.s	locret_189A
00001ACA 5046                       		addq.w	#8,d6
00001ACC E145                       		asl.w	#8,d5
00001ACE 1A18                       		move.b	(a0)+,d5
00001AD0                            
00001AD0                            locret_189A:
00001AD0 4E75                       		rts	
00001AD2                            ; End of function sub_188C
00001AD2                            
00001AD2                            ; ---------------------------------------------------------------------------
00001AD2                            ; Kosinski decompression algorithm
00001AD2                            ; ---------------------------------------------------------------------------
00001AD2                            
00001AD2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001AD2                            
00001AD2                            
00001AD2                            KosDec:
00001AD2                            
00001AD2 =FFFFFFFE                  var_2		= -2
00001AD2 =FFFFFFFF                  var_1		= -1
00001AD2                            
00001AD2 558F                       		subq.l	#2,sp
00001AD4 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001AD8 1E98                       		move.b	(a0)+,(sp)
00001ADA 3A17                       		move.w	(sp),d5
00001ADC 780F                       		moveq	#$F,d4
00001ADE                            
00001ADE                            loc_18A8:
00001ADE E24D                       		lsr.w	#1,d5
00001AE0 40C6                       		move	sr,d6
00001AE2 51CC 0000                  		dbf	d4,loc_18BA
00001AE6 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001AEA 1E98                       		move.b	(a0)+,(sp)
00001AEC 3A17                       		move.w	(sp),d5
00001AEE 780F                       		moveq	#$F,d4
00001AF0                            
00001AF0                            loc_18BA:
00001AF0 44C6                       		move	d6,ccr
00001AF2 6400                       		bcc.s	loc_18C2
00001AF4 12D8                       		move.b	(a0)+,(a1)+
00001AF6 60E6                       		bra.s	loc_18A8
00001AF8                            ; ===========================================================================
00001AF8                            
00001AF8                            loc_18C2:				; XREF: KosDec
00001AF8 7600                       		moveq	#0,d3
00001AFA E24D                       		lsr.w	#1,d5
00001AFC 40C6                       		move	sr,d6
00001AFE 51CC 0000                  		dbf	d4,loc_18D6
00001B02 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001B06 1E98                       		move.b	(a0)+,(sp)
00001B08 3A17                       		move.w	(sp),d5
00001B0A 780F                       		moveq	#$F,d4
00001B0C                            
00001B0C                            loc_18D6:
00001B0C 44C6                       		move	d6,ccr
00001B0E 6500                       		bcs.s	loc_1906
00001B10 E24D                       		lsr.w	#1,d5
00001B12 51CC 0000                  		dbf	d4,loc_18EA
00001B16 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001B1A 1E98                       		move.b	(a0)+,(sp)
00001B1C 3A17                       		move.w	(sp),d5
00001B1E 780F                       		moveq	#$F,d4
00001B20                            
00001B20                            loc_18EA:
00001B20 E353                       		roxl.w	#1,d3
00001B22 E24D                       		lsr.w	#1,d5
00001B24 51CC 0000                  		dbf	d4,loc_18FC
00001B28 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001B2C 1E98                       		move.b	(a0)+,(sp)
00001B2E 3A17                       		move.w	(sp),d5
00001B30 780F                       		moveq	#$F,d4
00001B32                            
00001B32                            loc_18FC:
00001B32 E353                       		roxl.w	#1,d3
00001B34 5243                       		addq.w	#1,d3
00001B36 74FF                       		moveq	#-1,d2
00001B38 1418                       		move.b	(a0)+,d2
00001B3A 6000                       		bra.s	loc_191C
00001B3C                            ; ===========================================================================
00001B3C                            
00001B3C                            loc_1906:				; XREF: loc_18C2
00001B3C 1018                       		move.b	(a0)+,d0
00001B3E 1218                       		move.b	(a0)+,d1
00001B40 74FF                       		moveq	#-1,d2
00001B42 1401                       		move.b	d1,d2
00001B44 EB4A                       		lsl.w	#5,d2
00001B46 1400                       		move.b	d0,d2
00001B48 0241 0007                  		andi.w	#7,d1
00001B4C 6700                       		beq.s	loc_1928
00001B4E 1601                       		move.b	d1,d3
00001B50 5243                       		addq.w	#1,d3
00001B52                            
00001B52                            loc_191C:
00001B52 1031 2000                  		move.b	(a1,d2.w),d0
00001B56 12C0                       		move.b	d0,(a1)+
00001B58 51CB FFF8                  		dbf	d3,loc_191C
00001B5C 6080                       		bra.s	loc_18A8
00001B5E                            ; ===========================================================================
00001B5E                            
00001B5E                            loc_1928:				; XREF: loc_1906
00001B5E 1218                       		move.b	(a0)+,d1
00001B60 6700                       		beq.s	loc_1938
00001B62 0C01 0001                  		cmpi.b	#1,d1
00001B66 6700 FF76                  		beq.w	loc_18A8
00001B6A 1601                       		move.b	d1,d3
00001B6C 60E4                       		bra.s	loc_191C
00001B6E                            ; ===========================================================================
00001B6E                            
00001B6E                            loc_1938:				; XREF: loc_1928
00001B6E 548F                       		addq.l	#2,sp
00001B70 4E75                       		rts	
00001B72                            ; End of function KosDec
00001B72                            
00001B72                            ; ---------------------------------------------------------------------------
00001B72                            ; Pallet cycling routine loading subroutine
00001B72                            ; ---------------------------------------------------------------------------
00001B72                            
00001B72                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001B72                            
00001B72                            
00001B72                            PalCycle_Load:				; XREF: Demo; Level_MainLoop; End_MainLoop
00001B72 7400                       		moveq	#0,d2
00001B74 7000                       		moveq	#0,d0
00001B76 1038 FE10                  		move.b	($FFFFFE10).w,d0 ; get level number
00001B7A D040                       		add.w	d0,d0		; multiply by 2
00001B7C 303B 0000                  		move.w	PalCycle(pc,d0.w),d0 ; load animated pallets offset index into d0
00001B80 4EFB 0000                  		jmp	PalCycle(pc,d0.w) ; jump to PalCycle + offset index
00001B84                            ; End of function PalCycle_Load
00001B84                            
00001B84                            ; ===========================================================================
00001B84                            ; ---------------------------------------------------------------------------
00001B84                            ; Pallet cycling routines
00001B84                            ; ---------------------------------------------------------------------------
00001B84 0000                       PalCycle:	dc.w PalCycle_GHZ-PalCycle
00001B86 0000                       		dc.w PalCycle_LZ-PalCycle
00001B88 0000                       		dc.w PalCycle_MZ-PalCycle
00001B8A 0000                       		dc.w PalCycle_SLZ-PalCycle
00001B8C 0000                       		dc.w PalCycle_SYZ-PalCycle
00001B8E 0000                       		dc.w PalCycle_SBZ-PalCycle
00001B90 0000                       		dc.w PalCycle_GHZ-PalCycle
00001B92 0000                       		dc.w PalCycle_GHZ-PalCycle
00001B94                            
00001B94                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001B94                            
00001B94                            
00001B94                            PalCycle_Title:				; XREF: TitleScreen
00001B94 41F9 0000 0000             		lea	(Pal_TitleCyc).l,a0
00001B9A 6000                       		bra.s	loc_196A
00001B9C                            ; ===========================================================================
00001B9C                            
00001B9C                            PalCycle_GHZ:				; XREF: PalCycle
00001B9C 41F9 0000 0000             		lea	(Pal_GHZCyc).l,a0
00001BA2                            
00001BA2                            loc_196A:				; XREF: PalCycle_Title
00001BA2 5378 F634                  		subq.w	#1,($FFFFF634).w
00001BA6 6A00                       		bpl.s	locret_1990
00001BA8 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00001BAE 3038 F632                  		move.w	($FFFFF632).w,d0
00001BB2 5278 F632                  		addq.w	#1,($FFFFF632).w
00001BB6 0240 0003                  		andi.w	#3,d0
00001BBA E748                       		lsl.w	#3,d0
00001BBC 43F8 FB50                  		lea	($FFFFFB50).w,a1
00001BC0 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001BC4 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001BC8                            
00001BC8                            locret_1990:
00001BC8 4E75                       		rts	
00001BCA                            ; End of function PalCycle_Title
00001BCA                            
00001BCA                            
00001BCA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001BCA                            
00001BCA                            
00001BCA                            PalCycle_LZ:				; XREF: PalCycle
00001BCA 5378 F634                  		subq.w	#1,($FFFFF634).w
00001BCE 6A00                       		bpl.s	loc_19D8
00001BD0 31FC 0002 F634             		move.w	#2,($FFFFF634).w
00001BD6 3038 F632                  		move.w	($FFFFF632).w,d0
00001BDA 5278 F632                  		addq.w	#1,($FFFFF632).w
00001BDE 0240 0003                  		andi.w	#3,d0
00001BE2 E748                       		lsl.w	#3,d0
00001BE4 41F9 0000 0000             		lea	(Pal_LZCyc1).l,a0
00001BEA 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; check if level is SBZ3
00001BF0 6600                       		bne.s	loc_19C0
00001BF2 41F9 0000 0000             		lea	(Pal_SBZ3Cyc1).l,a0 ; load SBZ3	pallet instead
00001BF8                            
00001BF8                            loc_19C0:
00001BF8 43F8 FB56                  		lea	($FFFFFB56).w,a1
00001BFC 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001C00 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001C04 43F8 FAD6                  		lea	($FFFFFAD6).w,a1
00001C08 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001C0C 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001C10                            
00001C10                            loc_19D8:
00001C10 3038 FE04                  		move.w	($FFFFFE04).w,d0
00001C14 0240 0007                  		andi.w	#7,d0
00001C18 103B 0000                  		move.b	byte_1A3C(pc,d0.w),d0
00001C1C 6700                       		beq.s	locret_1A3A
00001C1E 7201                       		moveq	#1,d1
00001C20 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00001C24 6700                       		beq.s	loc_19F0
00001C26 4441                       		neg.w	d1
00001C28                            
00001C28                            loc_19F0:
00001C28 3038 F650                  		move.w	($FFFFF650).w,d0
00001C2C 0240 0003                  		andi.w	#3,d0
00001C30 D041                       		add.w	d1,d0
00001C32 0C40 0003                  		cmpi.w	#3,d0
00001C36 6500                       		bcs.s	loc_1A0A
00001C38 3200                       		move.w	d0,d1
00001C3A 7000                       		moveq	#0,d0
00001C3C 4A41                       		tst.w	d1
00001C3E 6A00                       		bpl.s	loc_1A0A
00001C40 7002                       		moveq	#2,d0
00001C42                            
00001C42                            loc_1A0A:
00001C42 31C0 F650                  		move.w	d0,($FFFFF650).w
00001C46 D040                       		add.w	d0,d0
00001C48 3200                       		move.w	d0,d1
00001C4A D040                       		add.w	d0,d0
00001C4C D041                       		add.w	d1,d0
00001C4E 41F9 0000 0000             		lea	(Pal_LZCyc2).l,a0
00001C54 43F8 FB76                  		lea	($FFFFFB76).w,a1
00001C58 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001C5C 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001C60 41F9 0000 0000             		lea	(Pal_LZCyc3).l,a0
00001C66 43F8 FAF6                  		lea	($FFFFFAF6).w,a1
00001C6A 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001C6E 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001C72                            
00001C72                            locret_1A3A:
00001C72 4E75                       		rts	
00001C74                            ; End of function PalCycle_LZ
00001C74                            
00001C74                            ; ===========================================================================
00001C74 0100 0001 0000 0100        byte_1A3C:	dc.b 1,	0, 0, 1, 0, 0, 1, 0
00001C7C                            ; ===========================================================================
00001C7C                            
00001C7C                            PalCycle_MZ:				; XREF: PalCycle
00001C7C 4E75                       		rts	
00001C7E                            
00001C7E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001C7E                            
00001C7E                            
00001C7E                            PalCycle_SLZ:				; XREF: PalCycle
00001C7E 4E75                       		rts	
00001C80                            ; End of function PalCycle_SLZ
00001C80                            
00001C80                            
00001C80                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001C80                            
00001C80                            
00001C80                            PalCycle_SYZ:				; XREF: PalCycle
00001C80 5378 F634                  		subq.w	#1,($FFFFF634).w
00001C84 6A00                       		bpl.s	locret_1AC6
00001C86 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00001C8C 3038 F632                  		move.w	($FFFFF632).w,d0
00001C90 5278 F632                  		addq.w	#1,($FFFFF632).w
00001C94 0240 0003                  		andi.w	#3,d0
00001C98 E548                       		lsl.w	#2,d0
00001C9A 3200                       		move.w	d0,d1
00001C9C D040                       		add.w	d0,d0
00001C9E 41F9 0000 0000             		lea	(Pal_SYZCyc1).l,a0
00001CA4 43F8 FB6E                  		lea	($FFFFFB6E).w,a1
00001CA8 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001CAC 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001CB0 41F9 0000 0000             		lea	(Pal_SYZCyc2).l,a0
00001CB6 43F8 FB76                  		lea	($FFFFFB76).w,a1
00001CBA 32B0 1000                  		move.w	(a0,d1.w),(a1)
00001CBE 3370 1002 0004             		move.w	2(a0,d1.w),4(a1)
00001CC4                            
00001CC4                            locret_1AC6:
00001CC4 4E75                       		rts	
00001CC6                            ; End of function PalCycle_SYZ
00001CC6                            
00001CC6                            
00001CC6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001CC6                            
00001CC6                            
00001CC6                            PalCycle_SBZ:				; XREF: PalCycle
00001CC6 45F9 0000 0000             		lea	(Pal_SBZCycList).l,a2
00001CCC 4A38 FE11                  		tst.b	($FFFFFE11).w
00001CD0 6700                       		beq.s	loc_1ADA
00001CD2 45F9 0000 0000             		lea	(Pal_SBZCycList2).l,a2
00001CD8                            
00001CD8                            loc_1ADA:
00001CD8 43F8 F650                  		lea	($FFFFF650).w,a1
00001CDC 321A                       		move.w	(a2)+,d1
00001CDE                            
00001CDE                            loc_1AE0:
00001CDE 5311                       		subq.b	#1,(a1)
00001CE0 6B00                       		bmi.s	loc_1AEA
00001CE2 5489                       		addq.l	#2,a1
00001CE4 5C8A                       		addq.l	#6,a2
00001CE6 6000                       		bra.s	loc_1B06
00001CE8                            ; ===========================================================================
00001CE8                            
00001CE8                            loc_1AEA:				; XREF: PalCycle_SBZ
00001CE8 12DA                       		move.b	(a2)+,(a1)+
00001CEA 1011                       		move.b	(a1),d0
00001CEC 5200                       		addq.b	#1,d0
00001CEE B01A                       		cmp.b	(a2)+,d0
00001CF0 6500                       		bcs.s	loc_1AF6
00001CF2 7000                       		moveq	#0,d0
00001CF4                            
00001CF4                            loc_1AF6:
00001CF4 12C0                       		move.b	d0,(a1)+
00001CF6 0240 000F                  		andi.w	#$F,d0
00001CFA D040                       		add.w	d0,d0
00001CFC 305A                       		movea.w	(a2)+,a0
00001CFE 365A                       		movea.w	(a2)+,a3
00001D00 36B0 0000                  		move.w	(a0,d0.w),(a3)
00001D04                            
00001D04                            loc_1B06:				; XREF: PalCycle_SBZ
00001D04 51C9 FFD8                  		dbf	d1,loc_1AE0
00001D08 5378 F634                  		subq.w	#1,($FFFFF634).w
00001D0C 6A00                       		bpl.s	locret_1B64
00001D0E 41F9 0000 0000             		lea	(Pal_SBZCyc4).l,a0
00001D14 31FC 0001 F634             		move.w	#1,($FFFFF634).w
00001D1A 4A38 FE11                  		tst.b	($FFFFFE11).w
00001D1E 6700                       		beq.s	loc_1B2E
00001D20 41F9 0000 0000             		lea	(Pal_SBZCyc10).l,a0
00001D26 31FC 0000 F634             		move.w	#0,($FFFFF634).w
00001D2C                            
00001D2C                            loc_1B2E:
00001D2C 72FF                       		moveq	#-1,d1
00001D2E 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00001D32 6700                       		beq.s	loc_1B38
00001D34 4441                       		neg.w	d1
00001D36                            
00001D36                            loc_1B38:
00001D36 3038 F632                  		move.w	($FFFFF632).w,d0
00001D3A 0240 0003                  		andi.w	#3,d0
00001D3E D041                       		add.w	d1,d0
00001D40 0C40 0003                  		cmpi.w	#3,d0
00001D44 6500                       		bcs.s	loc_1B52
00001D46 3200                       		move.w	d0,d1
00001D48 7000                       		moveq	#0,d0
00001D4A 4A41                       		tst.w	d1
00001D4C 6A00                       		bpl.s	loc_1B52
00001D4E 7002                       		moveq	#2,d0
00001D50                            
00001D50                            loc_1B52:
00001D50 31C0 F632                  		move.w	d0,($FFFFF632).w
00001D54 D040                       		add.w	d0,d0
00001D56 43F8 FB58                  		lea	($FFFFFB58).w,a1
00001D5A 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001D5E 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001D62                            
00001D62                            locret_1B64:
00001D62 4E75                       		rts	
00001D64                            ; End of function PalCycle_SBZ
00001D64                            
00001D64                            ; ===========================================================================
00001D64                            Pal_TitleCyc:	incbin	pallet\c_title.bin
00001D84                            Pal_GHZCyc:	incbin	pallet\c_ghz.bin
00001DA4                            Pal_LZCyc1:	incbin	pallet\c_lz_wat.bin	; waterfalls pallet
00001DC4                            Pal_LZCyc2:	incbin	pallet\c_lz_bel.bin	; conveyor belt pallet
00001DD6                            Pal_LZCyc3:	incbin	pallet\c_lz_buw.bin	; conveyor belt (underwater) pallet
00001DE8                            Pal_SBZ3Cyc1:	incbin	pallet\c_sbz3_w.bin	; waterfalls pallet
00001E50                            Pal_SLZCyc:	incbin	pallet\c_slz.bin
00001E74                            Pal_SYZCyc1:	incbin	pallet\c_syz_1.bin
00001E94                            Pal_SYZCyc2:	incbin	pallet\c_syz_2.bin
00001EA4                            
00001EA4                            Pal_SBZCycList:
00001EA4                            	include "_inc\SBZ pallet script 1.asm"
00001EA4                            ; ---------------------------------------------------------------------------
00001EA4                            ; Scrap Brain Zone 1 pallet cycling script
00001EA4                            ; ---------------------------------------------------------------------------
00001EA4 0008                       	dc.w 8			; number of entries - 1
00001EA6 0708                       	dc.b 7,	8		; duration in frames, number of	colours
00001EA8 0000                       	dc.w Pal_SBZCyc1	; pallet pointer
00001EAA FB50                       	dc.w $FB50		; RAM address
00001EAC 0D08                       	dc.b $D, 8
00001EAE 0000                       	dc.w Pal_SBZCyc2
00001EB0 FB52                       	dc.w $FB52
00001EB2 0E08                       	dc.b $E, 8
00001EB4 0000                       	dc.w Pal_SBZCyc3
00001EB6 FB6E                       	dc.w $FB6E
00001EB8 0B08                       	dc.b $B, 8
00001EBA 0000                       	dc.w Pal_SBZCyc5
00001EBC FB70                       	dc.w $FB70
00001EBE 0708                       	dc.b 7,	8
00001EC0 0000                       	dc.w Pal_SBZCyc6
00001EC2 FB72                       	dc.w $FB72
00001EC4 1C10                       	dc.b $1C, $10
00001EC6 0000                       	dc.w Pal_SBZCyc7
00001EC8 FB7E                       	dc.w $FB7E
00001ECA 0303                       	dc.b 3,	3
00001ECC 0000                       	dc.w Pal_SBZCyc8
00001ECE FB78                       	dc.w $FB78
00001ED0 0303                       	dc.b 3,	3
00001ED2 0000                       	dc.w Pal_SBZCyc8+2
00001ED4 FB7A                       	dc.w $FB7A
00001ED6 0303                       	dc.b 3,	3
00001ED8 0000                       	dc.w Pal_SBZCyc8+4
00001EDA FB7C                       	dc.w $FB7C
00001EDC                            	even
00001EDC                            	even
00001EDC                            
00001EDC                            Pal_SBZCycList2:
00001EDC                            	include "_inc\SBZ pallet script 2.asm"
00001EDC                            ; ---------------------------------------------------------------------------
00001EDC                            ; Scrap Brain Zone 2 pallet cycling script
00001EDC                            ; ---------------------------------------------------------------------------
00001EDC 0006                       	dc.w 6
00001EDE 0708                       	dc.b 7,	8
00001EE0 0000                       	dc.w Pal_SBZCyc1
00001EE2 FB50                       	dc.w $FB50
00001EE4 0D08                       	dc.b $D, 8
00001EE6 0000                       	dc.w Pal_SBZCyc2
00001EE8 FB52                       	dc.w $FB52
00001EEA 0908                       	dc.b 9,	8
00001EEC 0000                       	dc.w Pal_SBZCyc9
00001EEE FB70                       	dc.w $FB70
00001EF0 0708                       	dc.b 7,	8
00001EF2 0000                       	dc.w Pal_SBZCyc6
00001EF4 FB72                       	dc.w $FB72
00001EF6 0303                       	dc.b 3,	3
00001EF8 0000                       	dc.w Pal_SBZCyc8
00001EFA FB78                       	dc.w $FB78
00001EFC 0303                       	dc.b 3,	3
00001EFE 0000                       	dc.w Pal_SBZCyc8+2
00001F00 FB7A                       	dc.w $FB7A
00001F02 0303                       	dc.b 3,	3
00001F04 0000                       	dc.w Pal_SBZCyc8+4
00001F06 FB7C                       	dc.w $FB7C
00001F08                            	even
00001F08                            	even
00001F08                            
00001F08                            Pal_SBZCyc1:	incbin	pallet\c_sbz_1.bin
00001F18                            Pal_SBZCyc2:	incbin	pallet\c_sbz_2.bin
00001F28                            Pal_SBZCyc3:	incbin	pallet\c_sbz_3.bin
00001F38                            Pal_SBZCyc4:	incbin	pallet\c_sbz_4.bin
00001F44                            Pal_SBZCyc5:	incbin	pallet\c_sbz_5.bin
00001F54                            Pal_SBZCyc6:	incbin	pallet\c_sbz_6.bin
00001F64                            Pal_SBZCyc7:	incbin	pallet\c_sbz_7.bin
00001F84                            Pal_SBZCyc8:	incbin	pallet\c_sbz_8.bin
00001F8E                            Pal_SBZCyc9:	incbin	pallet\c_sbz_9.bin
00001F9E                            Pal_SBZCyc10:	incbin	pallet\c_sbz_10.bin
00001FAA                            ; ---------------------------------------------------------------------------
00001FAA                            ; Subroutine to	fade out and fade in
00001FAA                            ; ---------------------------------------------------------------------------
00001FAA                            
00001FAA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001FAA                            
00001FAA                            
00001FAA                            Pal_FadeTo:
00001FAA 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00001FB0                            
00001FB0                            Pal_FadeTo2:
00001FB0 7000                       		moveq	#0,d0
00001FB2 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001FB6 1038 F626                  		move.b	($FFFFF626).w,d0
00001FBA D0C0                       		adda.w	d0,a0
00001FBC 7200                       		moveq	#0,d1
00001FBE 1038 F627                  		move.b	($FFFFF627).w,d0
00001FC2                            
00001FC2                            Pal_ToBlack:
00001FC2 30C1                       		move.w	d1,(a0)+
00001FC4 51C8 FFFC                  		dbf	d0,Pal_ToBlack	; fill pallet with $000	(black)
00001FC8                            
00001FC8 383C 0015                  		move.w	#$15,d4
00001FCC 1A3C 0009                  		move.b	#9,d5
00001FD0                            
00001FD0                            loc_1DCE:
00001FD0 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001FD6 6100 0000                  		bsr.w	DelayProgram
00001FDA 6100                       		bsr.s	Pal_FadeIn
00001FDC 6100 F844                  		bsr.w	RunPLC_RAM
00001FE0 51CC FFEE                  		dbf	d4,loc_1DCE
00001FE4 4E75                       		rts	
00001FE6                            ; End of function Pal_FadeTo
00001FE6                            
00001FE6                            ; ---------------------------------------------------------------------------
00001FE6                            ; Pallet fade-in subroutine
00001FE6                            ; ---------------------------------------------------------------------------
00001FE6                            
00001FE6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001FE6                            
00001FE6                            
00001FE6                            Pal_FadeIn:				; XREF: Pal_FadeTo
00001FE6 7000                       		moveq	#0,d0
00001FE8 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001FEC 43F8 FB80                  		lea	($FFFFFB80).w,a1
00001FF0 1038 F626                  		move.b	($FFFFF626).w,d0
00001FF4 D0C0                       		adda.w	d0,a0
00001FF6 D2C0                       		adda.w	d0,a1
00001FF8 1038 F627                  		move.b	($FFFFF627).w,d0
00001FFC                            
00001FFC                            loc_1DFA:
00001FFC 6100                       		bsr.s	Pal_AddColor
00001FFE 51C8 FFFC                  		dbf	d0,loc_1DFA
00002002 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00002008 6600                       		bne.s	locret_1E24
0000200A 7000                       		moveq	#0,d0
0000200C 41F8 FA80                  		lea	($FFFFFA80).w,a0
00002010 43F8 FA00                  		lea	($FFFFFA00).w,a1
00002014 1038 F626                  		move.b	($FFFFF626).w,d0
00002018 D0C0                       		adda.w	d0,a0
0000201A D2C0                       		adda.w	d0,a1
0000201C 1038 F627                  		move.b	($FFFFF627).w,d0
00002020                            
00002020                            loc_1E1E:
00002020 6100                       		bsr.s	Pal_AddColor
00002022 51C8 FFFC                  		dbf	d0,loc_1E1E
00002026                            
00002026                            locret_1E24:
00002026 4E75                       		rts	
00002028                            ; End of function Pal_FadeIn
00002028                            
00002028                            
00002028                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002028                            
00002028                            
00002028                            Pal_AddColor:				; XREF: Pal_FadeIn
00002028 3419                       		move.w	(a1)+,d2
0000202A 3610                       		move.w	(a0),d3
0000202C B642                       		cmp.w	d2,d3
0000202E 6700                       		beq.s	loc_1E4E
00002030 3203                       		move.w	d3,d1
00002032 0641 0200                  		addi.w	#$200,d1	; increase blue	value
00002036 B242                       		cmp.w	d2,d1		; has blue reached threshold level?
00002038 6200                       		bhi.s	Pal_AddGreen	; if yes, branch
0000203A 30C1                       		move.w	d1,(a0)+	; update pallet
0000203C 4E75                       		rts	
0000203E                            ; ===========================================================================
0000203E                            
0000203E                            Pal_AddGreen:				; XREF: Pal_AddColor
0000203E 3203                       		move.w	d3,d1
00002040 0641 0020                  		addi.w	#$20,d1		; increase green value
00002044 B242                       		cmp.w	d2,d1
00002046 6200                       		bhi.s	Pal_AddRed
00002048 30C1                       		move.w	d1,(a0)+	; update pallet
0000204A 4E75                       		rts	
0000204C                            ; ===========================================================================
0000204C                            
0000204C                            Pal_AddRed:				; XREF: Pal_AddGreen
0000204C 5458                       		addq.w	#2,(a0)+	; increase red value
0000204E 4E75                       		rts	
00002050                            ; ===========================================================================
00002050                            
00002050                            loc_1E4E:				; XREF: Pal_AddColor
00002050 5448                       		addq.w	#2,a0
00002052 4E75                       		rts	
00002054                            ; End of function Pal_AddColor
00002054                            
00002054                            
00002054                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002054                            
00002054                            
00002054                            Pal_FadeFrom:
00002054 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
0000205A 383C 0015                  		move.w	#$15,d4
0000205E                            loc_1E5C:
0000205E 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00002064 6100 0000                  		bsr.w	DelayProgram
00002068 6100                       		bsr.s	Pal_FadeOut
0000206A 6100 F7B6                  		bsr.w	RunPLC_RAM
0000206E 51CC FFEE                  		dbf	d4,loc_1E5C
00002072 4E75                       		rts	
00002074                            ; End of function Pal_FadeFrom
00002074                            
00002074                            ; ---------------------------------------------------------------------------
00002074                            ; Pallet fade-out subroutine
00002074                            ; ---------------------------------------------------------------------------
00002074                            
00002074                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002074                            
00002074                            
00002074                            Pal_FadeOut:				; XREF: Pal_FadeFrom
00002074 7000                       		moveq	#0,d0
00002076 41F8 FB00                  		lea	($FFFFFB00).w,a0
0000207A 1038 F626                  		move.b	($FFFFF626).w,d0
0000207E D0C0                       		adda.w	d0,a0
00002080 1038 F627                  		move.b	($FFFFF627).w,d0
00002084                            
00002084                            loc_1E82:
00002084 6100                       		bsr.s	Pal_DecColor
00002086 51C8 FFFC                  		dbf	d0,loc_1E82
0000208A                            
0000208A 7000                       		moveq	#0,d0
0000208C 41F8 FA80                  		lea	($FFFFFA80).w,a0
00002090 1038 F626                  		move.b	($FFFFF626).w,d0
00002094 D0C0                       		adda.w	d0,a0
00002096 1038 F627                  		move.b	($FFFFF627).w,d0
0000209A                            
0000209A                            loc_1E98:
0000209A 6100                       		bsr.s	Pal_DecColor
0000209C 51C8 FFFC                  		dbf	d0,loc_1E98
000020A0 4E75                       		rts	
000020A2                            ; End of function Pal_FadeOut
000020A2                            
000020A2                            
000020A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000020A2                            
000020A2                            
000020A2                            Pal_DecColor:				; XREF: Pal_FadeOut
000020A2 3410                       		move.w	(a0),d2
000020A4 6700                       		beq.s	loc_1ECC
000020A6 3202                       		move.w	d2,d1
000020A8 0241 000E                  		andi.w	#$E,d1
000020AC 6700                       		beq.s	Pal_DecGreen
000020AE 5558                       		subq.w	#2,(a0)+	; decrease red value
000020B0 4E75                       		rts	
000020B2                            ; ===========================================================================
000020B2                            
000020B2                            Pal_DecGreen:				; XREF: Pal_DecColor
000020B2 3202                       		move.w	d2,d1
000020B4 0241 00E0                  		andi.w	#$E0,d1
000020B8 6700                       		beq.s	Pal_DecBlue
000020BA 0458 0020                  		subi.w	#$20,(a0)+	; decrease green value
000020BE 4E75                       		rts	
000020C0                            ; ===========================================================================
000020C0                            
000020C0                            Pal_DecBlue:				; XREF: Pal_DecGreen
000020C0 3202                       		move.w	d2,d1
000020C2 0241 0E00                  		andi.w	#$E00,d1
000020C6 6700                       		beq.s	loc_1ECC
000020C8 0458 0200                  		subi.w	#$200,(a0)+	; decrease blue	value
000020CC 4E75                       		rts	
000020CE                            ; ===========================================================================
000020CE                            
000020CE                            loc_1ECC:				; XREF: Pal_DecColor
000020CE 5448                       		addq.w	#2,a0
000020D0 4E75                       		rts	
000020D2                            ; End of function Pal_DecColor
000020D2                            
000020D2                            ; ---------------------------------------------------------------------------
000020D2                            ; Subroutine to	fill the pallet	with white (special stage)
000020D2                            ; ---------------------------------------------------------------------------
000020D2                            
000020D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000020D2                            
000020D2                            
000020D2                            Pal_MakeWhite:				; XREF: SpecialStage
000020D2 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000020D8 7000                       		moveq	#0,d0
000020DA 41F8 FB00                  		lea	($FFFFFB00).w,a0
000020DE 1038 F626                  		move.b	($FFFFF626).w,d0
000020E2 D0C0                       		adda.w	d0,a0
000020E4 323C 0EEE                  		move.w	#$EEE,d1
000020E8 1038 F627                  		move.b	($FFFFF627).w,d0
000020EC                            
000020EC                            PalWhite_Loop:
000020EC 30C1                       		move.w	d1,(a0)+
000020EE 51C8 FFFC                  		dbf	d0,PalWhite_Loop
000020F2 383C 0015                  		move.w	#$15,d4
000020F6                            
000020F6                            loc_1EF4:
000020F6 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
000020FC 6100 0000                  		bsr.w	DelayProgram
00002100 6100                       		bsr.s	Pal_WhiteToBlack
00002102 6100 F71E                  		bsr.w	RunPLC_RAM
00002106 51CC FFEE                  		dbf	d4,loc_1EF4
0000210A 4E75                       		rts	
0000210C                            ; End of function Pal_MakeWhite
0000210C                            
0000210C                            
0000210C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000210C                            
0000210C                            
0000210C                            Pal_WhiteToBlack:			; XREF: Pal_MakeWhite
0000210C 7000                       		moveq	#0,d0
0000210E 41F8 FB00                  		lea	($FFFFFB00).w,a0
00002112 43F8 FB80                  		lea	($FFFFFB80).w,a1
00002116 1038 F626                  		move.b	($FFFFF626).w,d0
0000211A D0C0                       		adda.w	d0,a0
0000211C D2C0                       		adda.w	d0,a1
0000211E 1038 F627                  		move.b	($FFFFF627).w,d0
00002122                            
00002122                            loc_1F20:
00002122 6100                       		bsr.s	Pal_DecColor2
00002124 51C8 FFFC                  		dbf	d0,loc_1F20
00002128                            
00002128 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
0000212E 6600                       		bne.s	locret_1F4A
00002130 7000                       		moveq	#0,d0
00002132 41F8 FA80                  		lea	($FFFFFA80).w,a0
00002136 43F8 FA00                  		lea	($FFFFFA00).w,a1
0000213A 1038 F626                  		move.b	($FFFFF626).w,d0
0000213E D0C0                       		adda.w	d0,a0
00002140 D2C0                       		adda.w	d0,a1
00002142 1038 F627                  		move.b	($FFFFF627).w,d0
00002146                            
00002146                            loc_1F44:
00002146 6100                       		bsr.s	Pal_DecColor2
00002148 51C8 FFFC                  		dbf	d0,loc_1F44
0000214C                            
0000214C                            locret_1F4A:
0000214C 4E75                       		rts	
0000214E                            ; End of function Pal_WhiteToBlack
0000214E                            
0000214E                            
0000214E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000214E                            
0000214E                            
0000214E                            Pal_DecColor2:				; XREF: Pal_WhiteToBlack
0000214E 3419                       		move.w	(a1)+,d2
00002150 3610                       		move.w	(a0),d3
00002152 B642                       		cmp.w	d2,d3
00002154 6700                       		beq.s	loc_1F78
00002156 3203                       		move.w	d3,d1
00002158 0441 0200                  		subi.w	#$200,d1	; decrease blue	value
0000215C 6500                       		bcs.s	loc_1F64
0000215E B242                       		cmp.w	d2,d1
00002160 6500                       		bcs.s	loc_1F64
00002162 30C1                       		move.w	d1,(a0)+
00002164 4E75                       		rts	
00002166                            ; ===========================================================================
00002166                            
00002166                            loc_1F64:				; XREF: Pal_DecColor2
00002166 3203                       		move.w	d3,d1
00002168 0441 0020                  		subi.w	#$20,d1		; decrease green value
0000216C 6500                       		bcs.s	loc_1F74
0000216E B242                       		cmp.w	d2,d1
00002170 6500                       		bcs.s	loc_1F74
00002172 30C1                       		move.w	d1,(a0)+
00002174 4E75                       		rts	
00002176                            ; ===========================================================================
00002176                            
00002176                            loc_1F74:				; XREF: loc_1F64
00002176 5558                       		subq.w	#2,(a0)+	; decrease red value
00002178 4E75                       		rts	
0000217A                            ; ===========================================================================
0000217A                            
0000217A                            loc_1F78:				; XREF: Pal_DecColor2
0000217A 5448                       		addq.w	#2,a0
0000217C 4E75                       		rts	
0000217E                            ; End of function Pal_DecColor2
0000217E                            
0000217E                            ; ---------------------------------------------------------------------------
0000217E                            ; Subroutine to	make a white flash when	you enter a special stage
0000217E                            ; ---------------------------------------------------------------------------
0000217E                            
0000217E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000217E                            
0000217E                            
0000217E                            Pal_MakeFlash:				; XREF: SpecialStage
0000217E 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00002184 383C 0015                  		move.w	#$15,d4
00002188                            
00002188                            loc_1F86:
00002188 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
0000218E 6100 0000                  		bsr.w	DelayProgram
00002192 6100                       		bsr.s	Pal_ToWhite
00002194 6100 F68C                  		bsr.w	RunPLC_RAM
00002198 51CC FFEE                  		dbf	d4,loc_1F86
0000219C 4E75                       		rts	
0000219E                            ; End of function Pal_MakeFlash
0000219E                            
0000219E                            
0000219E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000219E                            
0000219E                            
0000219E                            Pal_ToWhite:				; XREF: Pal_MakeFlash
0000219E 7000                       		moveq	#0,d0
000021A0 41F8 FB00                  		lea	($FFFFFB00).w,a0
000021A4 1038 F626                  		move.b	($FFFFF626).w,d0
000021A8 D0C0                       		adda.w	d0,a0
000021AA 1038 F627                  		move.b	($FFFFF627).w,d0
000021AE                            
000021AE                            loc_1FAC:
000021AE 6100                       		bsr.s	Pal_AddColor2
000021B0 51C8 FFFC                  		dbf	d0,loc_1FAC
000021B4 7000                       		moveq	#0,d0
000021B6 41F8 FA80                  		lea	($FFFFFA80).w,a0
000021BA 1038 F626                  		move.b	($FFFFF626).w,d0
000021BE D0C0                       		adda.w	d0,a0
000021C0 1038 F627                  		move.b	($FFFFF627).w,d0
000021C4                            
000021C4                            loc_1FC2:
000021C4 6100                       		bsr.s	Pal_AddColor2
000021C6 51C8 FFFC                  		dbf	d0,loc_1FC2
000021CA 4E75                       		rts	
000021CC                            ; End of function Pal_ToWhite
000021CC                            
000021CC                            
000021CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000021CC                            
000021CC                            
000021CC                            Pal_AddColor2:				; XREF: Pal_ToWhite
000021CC 3410                       		move.w	(a0),d2
000021CE 0C42 0EEE                  		cmpi.w	#$EEE,d2
000021D2 6700                       		beq.s	loc_2006
000021D4 3202                       		move.w	d2,d1
000021D6 0241 000E                  		andi.w	#$E,d1
000021DA 0C41 000E                  		cmpi.w	#$E,d1
000021DE 6700                       		beq.s	loc_1FE2
000021E0 5458                       		addq.w	#2,(a0)+	; increase red value
000021E2 4E75                       		rts	
000021E4                            ; ===========================================================================
000021E4                            
000021E4                            loc_1FE2:				; XREF: Pal_AddColor2
000021E4 3202                       		move.w	d2,d1
000021E6 0241 00E0                  		andi.w	#$E0,d1
000021EA 0C41 00E0                  		cmpi.w	#$E0,d1
000021EE 6700                       		beq.s	loc_1FF4
000021F0 0658 0020                  		addi.w	#$20,(a0)+	; increase green value
000021F4 4E75                       		rts	
000021F6                            ; ===========================================================================
000021F6                            
000021F6                            loc_1FF4:				; XREF: loc_1FE2
000021F6 3202                       		move.w	d2,d1
000021F8 0241 0E00                  		andi.w	#$E00,d1
000021FC 0C41 0E00                  		cmpi.w	#$E00,d1
00002200 6700                       		beq.s	loc_2006
00002202 0658 0200                  		addi.w	#$200,(a0)+	; increase blue	value
00002206 4E75                       		rts	
00002208                            ; ===========================================================================
00002208                            
00002208                            loc_2006:				; XREF: Pal_AddColor2
00002208 5448                       		addq.w	#2,a0
0000220A 4E75                       		rts	
0000220C                            ; End of function Pal_AddColor2
0000220C                            
0000220C                            ; ---------------------------------------------------------------------------
0000220C                            ; Pallet cycling routine - Sega	logo
0000220C                            ; ---------------------------------------------------------------------------
0000220C                            
0000220C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000220C                            
0000220C                            
0000220C                            PalCycle_Sega:				; XREF: SegaScreen
0000220C 4A38 F635                  		tst.b	($FFFFF635).w
00002210 6600                       		bne.s	loc_206A
00002212 43F8 FB20                  		lea	($FFFFFB20).w,a1
00002216 41F9 0000 0000             		lea	(Pal_Sega1).l,a0
0000221C 7205                       		moveq	#5,d1
0000221E 3038 F632                  		move.w	($FFFFF632).w,d0
00002222                            
00002222                            loc_2020:
00002222 6A00                       		bpl.s	loc_202A
00002224 5448                       		addq.w	#2,a0
00002226 5341                       		subq.w	#1,d1
00002228 5440                       		addq.w	#2,d0
0000222A 60F6                       		bra.s	loc_2020
0000222C                            ; ===========================================================================
0000222C                            
0000222C                            loc_202A:				; XREF: PalCycle_Sega
0000222C 3400                       		move.w	d0,d2
0000222E 0242 001E                  		andi.w	#$1E,d2
00002232 6600                       		bne.s	loc_2034
00002234 5440                       		addq.w	#2,d0
00002236                            
00002236                            loc_2034:
00002236 0C40 0060                  		cmpi.w	#$60,d0
0000223A 6400                       		bcc.s	loc_203E
0000223C 3398 0000                  		move.w	(a0)+,(a1,d0.w)
00002240                            
00002240                            loc_203E:
00002240 5440                       		addq.w	#2,d0
00002242 51C9 FFE8                  		dbf	d1,loc_202A
00002246 3038 F632                  		move.w	($FFFFF632).w,d0
0000224A 5440                       		addq.w	#2,d0
0000224C 3400                       		move.w	d0,d2
0000224E 0242 001E                  		andi.w	#$1E,d2
00002252 6600                       		bne.s	loc_2054
00002254 5440                       		addq.w	#2,d0
00002256                            
00002256                            loc_2054:
00002256 0C40 0064                  		cmpi.w	#$64,d0
0000225A 6D00                       		blt.s	loc_2062
0000225C 31FC 0401 F634             		move.w	#$401,($FFFFF634).w
00002262 70F4                       		moveq	#-$C,d0
00002264                            
00002264                            loc_2062:
00002264 31C0 F632                  		move.w	d0,($FFFFF632).w
00002268 7001                       		moveq	#1,d0
0000226A 4E75                       		rts	
0000226C                            ; ===========================================================================
0000226C                            
0000226C                            loc_206A:				; XREF: loc_202A
0000226C 5338 F634                  		subq.b	#1,($FFFFF634).w
00002270 6A00                       		bpl.s	loc_20BC
00002272 11FC 0004 F634             		move.b	#4,($FFFFF634).w
00002278 3038 F632                  		move.w	($FFFFF632).w,d0
0000227C 0640 000C                  		addi.w	#$C,d0
00002280 0C40 0030                  		cmpi.w	#$30,d0
00002284 6500                       		bcs.s	loc_2088
00002286 7000                       		moveq	#0,d0
00002288 4E75                       		rts	
0000228A                            ; ===========================================================================
0000228A                            
0000228A                            loc_2088:				; XREF: loc_206A
0000228A 31C0 F632                  		move.w	d0,($FFFFF632).w
0000228E 41F9 0000 0000             		lea	(Pal_Sega2).l,a0
00002294 41F0 0000                  		lea	(a0,d0.w),a0
00002298 43F8 FB04                  		lea	($FFFFFB04).w,a1
0000229C 22D8                       		move.l	(a0)+,(a1)+
0000229E 22D8                       		move.l	(a0)+,(a1)+
000022A0 3298                       		move.w	(a0)+,(a1)
000022A2 43F8 FB20                  		lea	($FFFFFB20).w,a1
000022A6 7000                       		moveq	#0,d0
000022A8 722C                       		moveq	#$2C,d1
000022AA                            
000022AA                            loc_20A8:
000022AA 3400                       		move.w	d0,d2
000022AC 0242 001E                  		andi.w	#$1E,d2
000022B0 6600                       		bne.s	loc_20B2
000022B2 5440                       		addq.w	#2,d0
000022B4                            
000022B4                            loc_20B2:
000022B4 3390 0000                  		move.w	(a0),(a1,d0.w)
000022B8 5440                       		addq.w	#2,d0
000022BA 51C9 FFEE                  		dbf	d1,loc_20A8
000022BE                            
000022BE                            loc_20BC:
000022BE 7001                       		moveq	#1,d0
000022C0 4E75                       		rts	
000022C2                            ; End of function PalCycle_Sega
000022C2                            
000022C2                            ; ===========================================================================
000022C2                            
000022C2                            Pal_Sega1:	incbin	pallet\sega1.bin
000022CE                            Pal_Sega2:	incbin	pallet\sega2.bin
000022FE                            
000022FE                            ; ---------------------------------------------------------------------------
000022FE                            ; Subroutines to load pallets
000022FE                            ; ---------------------------------------------------------------------------
000022FE                            
000022FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000022FE                            
000022FE                            
000022FE                            PalLoad1:
000022FE 43F9 0000 0000             		lea	(PalPointers).l,a1
00002304 E748                       		lsl.w	#3,d0
00002306 D2C0                       		adda.w	d0,a1
00002308 2459                       		movea.l	(a1)+,a2
0000230A 3659                       		movea.w	(a1)+,a3
0000230C D6FC 0080                  		adda.w	#$80,a3
00002310 3E19                       		move.w	(a1)+,d7
00002312                            
00002312                            loc_2110:
00002312 26DA                       		move.l	(a2)+,(a3)+
00002314 51CF FFFC                  		dbf	d7,loc_2110
00002318 4E75                       		rts	
0000231A                            ; End of function PalLoad1
0000231A                            
0000231A                            
0000231A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000231A                            
0000231A                            
0000231A                            PalLoad2:
0000231A 43F9 0000 0000             		lea	(PalPointers).l,a1
00002320 E748                       		lsl.w	#3,d0
00002322 D2C0                       		adda.w	d0,a1
00002324 2459                       		movea.l	(a1)+,a2
00002326 3659                       		movea.w	(a1)+,a3
00002328 3E19                       		move.w	(a1)+,d7
0000232A                            
0000232A                            loc_2128:
0000232A 26DA                       		move.l	(a2)+,(a3)+
0000232C 51CF FFFC                  		dbf	d7,loc_2128
00002330 4E75                       		rts	
00002332                            ; End of function PalLoad2
00002332                            
00002332                            ; ---------------------------------------------------------------------------
00002332                            ; Underwater pallet loading subroutine
00002332                            ; ---------------------------------------------------------------------------
00002332                            
00002332                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002332                            
00002332                            
00002332                            PalLoad3_Water:
00002332 43F9 0000 0000             		lea	(PalPointers).l,a1
00002338 E748                       		lsl.w	#3,d0
0000233A D2C0                       		adda.w	d0,a1
0000233C 2459                       		movea.l	(a1)+,a2
0000233E 3659                       		movea.w	(a1)+,a3
00002340 96FC 0080                  		suba.w	#$80,a3
00002344 3E19                       		move.w	(a1)+,d7
00002346                            
00002346                            loc_2144:
00002346 26DA                       		move.l	(a2)+,(a3)+
00002348 51CF FFFC                  		dbf	d7,loc_2144
0000234C 4E75                       		rts	
0000234E                            ; End of function PalLoad3_Water
0000234E                            
0000234E                            
0000234E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000234E                            
0000234E                            
0000234E                            PalLoad4_Water:
0000234E 43F9 0000 0000             		lea	(PalPointers).l,a1
00002354 E748                       		lsl.w	#3,d0
00002356 D2C0                       		adda.w	d0,a1
00002358 2459                       		movea.l	(a1)+,a2
0000235A 3659                       		movea.w	(a1)+,a3
0000235C 96FC 0100                  		suba.w	#$100,a3
00002360 3E19                       		move.w	(a1)+,d7
00002362                            
00002362                            loc_2160:
00002362 26DA                       		move.l	(a2)+,(a3)+
00002364 51CF FFFC                  		dbf	d7,loc_2160
00002368 4E75                       		rts	
0000236A                            ; End of function PalLoad4_Water
0000236A                            
0000236A                            ; ===========================================================================
0000236A                            ; ---------------------------------------------------------------------------
0000236A                            ; Pallet pointers
0000236A                            ; ---------------------------------------------------------------------------
0000236A                            PalPointers:
0000236A                            	include "_inc\Pallet pointers.asm"
0000236A                            ; ---------------------------------------------------------------------------
0000236A                            ; Pallet pointers
0000236A                            ; ---------------------------------------------------------------------------
0000236A 0000 0000                  	dc.l Pal_SegaBG		; pallet address
0000236E FB00                       	dc.w $FB00		; RAM address
00002370 001F                       	dc.w $1F		; (pallet length / 2) - 1
00002372 0000 0000                  	dc.l Pal_Title
00002376 FB00                       	dc.w $FB00
00002378 001F                       	dc.w $1F
0000237A 0000 0000                  	dc.l Pal_LevelSel
0000237E FB00                       	dc.w $FB00
00002380 001F                       	dc.w $1F
00002382 0000 0000                  	dc.l Pal_Sonic
00002386 FB00                       	dc.w $FB00
00002388 0007                       	dc.w 7
0000238A 0000 0000                  	dc.l Pal_GHZ
0000238E FB20                       	dc.w $FB20
00002390 0017                       	dc.w $17
00002392 0000 0000                  	dc.l Pal_LZ
00002396 FB20                       	dc.w $FB20
00002398 0017                       	dc.w $17
0000239A 0000 0000                  	dc.l Pal_MZ
0000239E FB20                       	dc.w $FB20
000023A0 0017                       	dc.w $17
000023A2 0000 0000                  	dc.l Pal_SLZ
000023A6 FB20                       	dc.w $FB20
000023A8 0017                       	dc.w $17
000023AA 0000 0000                  	dc.l Pal_SYZ
000023AE FB20                       	dc.w $FB20
000023B0 0017                       	dc.w $17
000023B2 0000 0000                  	dc.l Pal_SBZ1
000023B6 FB20                       	dc.w $FB20
000023B8 0017                       	dc.w $17
000023BA 0000 0000                  	dc.l Pal_Special
000023BE FB00                       	dc.w $FB00
000023C0 001F                       	dc.w $1F
000023C2 0000 0000                  	dc.l Pal_LZWater
000023C6 FB00                       	dc.w $FB00
000023C8 001F                       	dc.w $1F
000023CA 0000 0000                  	dc.l Pal_SBZ3
000023CE FB20                       	dc.w $FB20
000023D0 0017                       	dc.w $17
000023D2 0000 0000                  	dc.l Pal_SBZ3Water
000023D6 FB00                       	dc.w $FB00
000023D8 001F                       	dc.w $1F
000023DA 0000 0000                  	dc.l Pal_SBZ2
000023DE FB20                       	dc.w $FB20
000023E0 0017                       	dc.w $17
000023E2 0000 0000                  	dc.l Pal_LZSonWater
000023E6 FB00                       	dc.w $FB00
000023E8 0007                       	dc.w 7
000023EA 0000 0000                  	dc.l Pal_SBZ3SonWat
000023EE FB00                       	dc.w $FB00
000023F0 0007                       	dc.w 7
000023F2 0000 0000                  	dc.l Pal_SpeResult
000023F6 FB00                       	dc.w $FB00
000023F8 001F                       	dc.w $1F
000023FA 0000 0000                  	dc.l Pal_SpeContinue
000023FE FB00                       	dc.w $FB00
00002400 000F                       	dc.w $F
00002402 0000 0000                  	dc.l Pal_Ending
00002406 FB00                       	dc.w $FB00
00002408 001F                       	dc.w $1F
0000240A 0000 0000                  	dc.l Pal_Idiot
0000240E FB20                       	dc.w $FB20
00002410 0007                       	dc.w 7
00002412 0000 0000                  	dc.l Pal_BHZ
00002416 FB20                       	dc.w $FB20
00002418 0017                       	dc.w $17
0000241A 0000 0000                  	dc.l Pal_Gronic
0000241E FB00                       	dc.w $FB00
00002420 0007                       	dc.w 7
00002422 0000 0000                  	dc.l Pal_LZGroWater
00002426 FB00                       	dc.w $FB00
00002428 0007                       	dc.w 7
0000242A 0000 0000                  	dc.l Pal_SBZ3GroWat
0000242E FB00                       	dc.w $FB00
00002430 0007                       	dc.w 7
00002432 0000 0000                  	dc.l Pal_Anakama
00002436 FB00                       	dc.w $FB00
00002438 0007                       	dc.w 7
00002438 0007                       	dc.w 7
0000243A                            
0000243A                            ; ---------------------------------------------------------------------------
0000243A                            ; Pallet data
0000243A                            ; ---------------------------------------------------------------------------
0000243A                            Pal_SegaBG:	incbin	pallet\sega_bg.bin
000024BA                            Pal_Title:	incbin	pallet\title.bin
0000253A                            Pal_LevelSel:	incbin	pallet\levelsel.bin
000025BA                            Pal_Sonic:	incbin	pallet\sonic.bin
000025DA                            Pal_GHZ:	incbin	pallet\ghz.bin
0000263A                            Pal_LZ:		incbin	pallet\lz.bin
0000269A                            Pal_LZWater:	incbin	pallet\lz_uw.bin	; LZ underwater pallets
0000271A                            Pal_MZ:		incbin	pallet\mz.bin
0000277A                            Pal_SLZ:	incbin	pallet\slz.bin
000027DA                            Pal_SYZ:	incbin	pallet\syz.bin
0000283A                            Pal_SBZ1:	incbin	pallet\sbz_act1.bin	; SBZ act 1 pallets
0000289A                            Pal_SBZ2:	incbin	pallet\sbz_act2.bin	; SBZ act 2 & Final Zone pallets
000028FA                            Pal_Special:	incbin	pallet\special.bin	; special stage pallets
0000297A                            Pal_SBZ3:	incbin	pallet\sbz_act3.bin	; SBZ act 3 pallets
000029DA                            Pal_SBZ3Water:	incbin	pallet\sbz_a3uw.bin	; SBZ act 3 (underwater) pallets
00002A5A                            Pal_LZSonWater:	incbin	pallet\son_lzuw.bin	; Sonic (underwater in LZ) pallet
00002A7A                            Pal_SBZ3SonWat:	incbin	pallet\son_sbzu.bin	; Sonic (underwater in SBZ act 3) pallet
00002A9A                            Pal_BHZ:	incbin	pallet\bhz.bin
00002AFA                            Pal_SpeResult:	incbin	pallet\ssresult.bin	; special stage results screen pallets
00002B7A                            Pal_SpeContinue:incbin	pallet\sscontin.bin	; special stage results screen continue pallet
00002BBA                            Pal_Ending:	incbin	pallet\ending.bin	; ending sequence pallets
00002C3A                            Pal_Idiot:	incbin	pallet\idiot.bin	; idiot pallet
00002C5A                            Pal_Gronic:	incbin	pallet\gronic.bin	; gronic char
00002C7A                            Pal_LZGroWater:	incbin	pallet\groniclzuw.bin	; Gronic (underwater in SBZ act 3) pallet
00002C9A                            Pal_SBZ3GroWat:	incbin	pallet\gronicsbz3uw.bin	; Gronic (underwater in SBZ act 3) pallet
00002CBA                            Pal_Anakama:incbin	pallet\anakama.bin	; anakama char
00002D3A                            
00002D3A                            ; ---------------------------------------------------------------------------
00002D3A                            ; Subroutine to	delay the program by ($FFFFF62A) frames
00002D3A                            ; ---------------------------------------------------------------------------
00002D3A                            
00002D3A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002D3A                            
00002D3A                            
00002D3A                            DelayProgram:				; XREF: PauseGame
00002D3A 46FC 2300                  		move	#$2300,sr
00002D3E                            
00002D3E                            loc_29AC:
00002D3E 4A38 F62A                  		tst.b	($FFFFF62A).w
00002D42 66FA                       		bne.s	loc_29AC
00002D44 4E75                       		rts	
00002D46                            ; End of function DelayProgram
00002D46                            
00002D46                            ; ---------------------------------------------------------------------------
00002D46                            ; Subroutine to	generate a pseudo-random number	in d0
00002D46                            ; ---------------------------------------------------------------------------
00002D46                            
00002D46                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002D46                            
00002D46                            
00002D46                            RandomNumber:
00002D46 2238 F636                  		move.l	($FFFFF636).w,d1
00002D4A 6600                       		bne.s	loc_29C0
00002D4C 223C 2A6D 365A             		move.l	#$2A6D365A,d1
00002D52                            
00002D52                            loc_29C0:
00002D52 2001                       		move.l	d1,d0
00002D54 E581                       		asl.l	#2,d1
00002D56 D280                       		add.l	d0,d1
00002D58 E781                       		asl.l	#3,d1
00002D5A D280                       		add.l	d0,d1
00002D5C 3001                       		move.w	d1,d0
00002D5E 4841                       		swap	d1
00002D60 D041                       		add.w	d1,d0
00002D62 3200                       		move.w	d0,d1
00002D64 4841                       		swap	d1
00002D66 21C1 F636                  		move.l	d1,($FFFFF636).w
00002D6A 4E75                       		rts	
00002D6C                            ; End of function RandomNumber
00002D6C                            
00002D6C                            
00002D6C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002D6C                            
00002D6C                            
00002D6C                            CalcSine:				; XREF: SS_BGAnimate; et al
00002D6C 0240 00FF                  		andi.w	#$FF,d0
00002D70 D040                       		add.w	d0,d0
00002D72 0640 0080                  		addi.w	#$80,d0
00002D76 323B 0000                  		move.w	Sine_Data(pc,d0.w),d1
00002D7A 0440 0080                  		subi.w	#$80,d0
00002D7E 303B 0000                  		move.w	Sine_Data(pc,d0.w),d0
00002D82 4E75                       		rts	
00002D84                            ; End of function CalcSine
00002D84                            
00002D84                            ; ===========================================================================
00002D84                            
00002D84                            Sine_Data:	incbin	misc\sinewave.bin	; values for a 360ยบ sine wave
00003004                            
00003004                            ; ===========================================================================
00003004 48E7 6000                  		movem.l	d1-d2,-(sp)
00003008 3200                       		move.w	d0,d1
0000300A 4841                       		swap	d1
0000300C 7000                       		moveq	#0,d0
0000300E 3200                       		move.w	d0,d1
00003010 7407                       		moveq	#7,d2
00003012                            
00003012                            loc_2C80:
00003012 E599                       		rol.l	#2,d1
00003014 D040                       		add.w	d0,d0
00003016 5240                       		addq.w	#1,d0
00003018 9240                       		sub.w	d0,d1
0000301A 6400                       		bcc.s	loc_2C9A
0000301C D240                       		add.w	d0,d1
0000301E 5340                       		subq.w	#1,d0
00003020 51CA FFF0                  		dbf	d2,loc_2C80
00003024 E248                       		lsr.w	#1,d0
00003026 4CDF 0006                  		movem.l	(sp)+,d1-d2
0000302A 4E75                       		rts	
0000302C                            ; ===========================================================================
0000302C                            
0000302C                            loc_2C9A:
0000302C 5240                       		addq.w	#1,d0
0000302E 51CA FFE2                  		dbf	d2,loc_2C80
00003032 E248                       		lsr.w	#1,d0
00003034 4CDF 0006                  		movem.l	(sp)+,d1-d2
00003038 4E75                       		rts	
0000303A                            
0000303A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000303A                            
0000303A                            
0000303A                            CalcAngle:
0000303A 48E7 1800                  		movem.l	d3-d4,-(sp)
0000303E 7600                       		moveq	#0,d3
00003040 7800                       		moveq	#0,d4
00003042 3601                       		move.w	d1,d3
00003044 3802                       		move.w	d2,d4
00003046 8843                       		or.w	d3,d4
00003048 6700                       		beq.s	loc_2D04
0000304A 3802                       		move.w	d2,d4
0000304C 4A43                       		tst.w	d3
0000304E 6A00 0000                  		bpl.w	loc_2CC2
00003052 4443                       		neg.w	d3
00003054                            
00003054                            loc_2CC2:
00003054 4A44                       		tst.w	d4
00003056 6A00 0000                  		bpl.w	loc_2CCA
0000305A 4444                       		neg.w	d4
0000305C                            
0000305C                            loc_2CCA:
0000305C B843                       		cmp.w	d3,d4
0000305E 6400 0000                  		bcc.w	loc_2CDC
00003062 E18C                       		lsl.l	#8,d4
00003064 88C3                       		divu.w	d3,d4
00003066 7000                       		moveq	#0,d0
00003068 103B 4000                  		move.b	Angle_Data(pc,d4.w),d0
0000306C 6000                       		bra.s	loc_2CE6
0000306E                            ; ===========================================================================
0000306E                            
0000306E                            loc_2CDC:				; XREF: CalcAngle
0000306E E18B                       		lsl.l	#8,d3
00003070 86C4                       		divu.w	d4,d3
00003072 7040                       		moveq	#$40,d0
00003074 903B 3000                  		sub.b	Angle_Data(pc,d3.w),d0
00003078                            
00003078                            loc_2CE6:
00003078 4A41                       		tst.w	d1
0000307A 6A00 0000                  		bpl.w	loc_2CF2
0000307E 4440                       		neg.w	d0
00003080 0640 0080                  		addi.w	#$80,d0
00003084                            
00003084                            loc_2CF2:
00003084 4A42                       		tst.w	d2
00003086 6A00 0000                  		bpl.w	loc_2CFE
0000308A 4440                       		neg.w	d0
0000308C 0640 0100                  		addi.w	#$100,d0
00003090                            
00003090                            loc_2CFE:
00003090 4CDF 0018                  		movem.l	(sp)+,d3-d4
00003094 4E75                       		rts	
00003096                            ; ===========================================================================
00003096                            
00003096                            loc_2D04:				; XREF: CalcAngle
00003096 303C 0040                  		move.w	#$40,d0
0000309A 4CDF 0018                  		movem.l	(sp)+,d3-d4
0000309E 4E75                       		rts	
000030A0                            ; End of function CalcAngle
000030A0                            
000030A0                            ; ===========================================================================
000030A0                            
000030A0                            Angle_Data:	incbin	misc\angles.bin
000031A2                            
000031A2                            ; ===========================================================================
000031A2                            
000031A2                            ; ---------------------------------------------------------------------------
000031A2                            ; Sega screen
000031A2                            ; ---------------------------------------------------------------------------
000031A2                            
000031A2                            SegaScreen:				; XREF: GameModeArray
000031A2 103C 00E4                  		move.b	#$E4,d0
000031A6 6100 E42A                  		bsr.w	PlaySound_Special ; stop music
000031AA 6100 E668                  		bsr.w	ClearPLC
000031AE 6100 EEA4                  		bsr.w	Pal_FadeFrom
000031B2 4DF9 00C0 0004             		lea	($C00004).l,a6
000031B8 3CBC 8004                  		move.w	#$8004,(a6)
000031BC 3CBC 8230                  		move.w	#$8230,(a6)
000031C0 3CBC 8407                  		move.w	#$8407,(a6)
000031C4 3CBC 8700                  		move.w	#$8700,(a6)
000031C8 3CBC 8B00                  		move.w	#$8B00,(a6)
000031CC 4238 F64E                  		clr.b	($FFFFF64E).w
000031D0 46FC 2700                  		move	#$2700,sr
000031D4 3038 F60C                  		move.w	($FFFFF60C).w,d0
000031D8 0200 00BF                  		andi.b	#$BF,d0
000031DC 33C0 00C0 0004             		move.w	d0,($C00004).l
000031E2 6100 E316                  		bsr.w	ClearScreen
000031E6 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
000031F0 41F9 0000 0000             		lea	(Nem_SegaLogo).l,a0 ; load Sega	logo patterns
000031F6 6100 E47E                  		bsr.w	NemDec
000031FA 43F9 00FF 0000             		lea	($FF0000).l,a1
00003200 41F9 0000 0000             		lea	(Eni_SegaLogo).l,a0 ; load Sega	logo mappings
00003206 303C 0000                  		move.w	#0,d0
0000320A 6100 E748                  		bsr.w	EniDec
0000320E 43F9 00FF 0000             		lea	($FF0000).l,a1
00003214 203C 6510 0003             		move.l	#$65100003,d0
0000321A 7217                       		moveq	#$17,d1
0000321C 7407                       		moveq	#7,d2
0000321E 6100 E436                  		bsr.w	ShowVDPGraphics
00003222 43F9 00FF 0180             		lea	($FF0180).l,a1
00003228 203C 4000 0003             		move.l	#$40000003,d0
0000322E 7227                       		moveq	#$27,d1
00003230 741B                       		moveq	#$1B,d2
00003232 6100 E422                  		bsr.w	ShowVDPGraphics
00003236 7000                       		moveq	#0,d0
00003238 6100 F0E0                  		bsr.w	PalLoad2	; load Sega logo pallet
0000323C 31FC FFF6 F632             		move.w	#-$A,($FFFFF632).w
00003242 31FC 0000 F634             		move.w	#0,($FFFFF634).w
00003248 31FC 0000 F662             		move.w	#0,($FFFFF662).w
0000324E 31FC 0000 F660             		move.w	#0,($FFFFF660).w
00003254 3038 F60C                  		move.w	($FFFFF60C).w,d0
00003258 0000 0040                  		ori.b	#$40,d0
0000325C 33C0 00C0 0004             		move.w	d0,($C00004).l
00003262                            
00003262                            Sega_WaitPallet:
00003262 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
00003268 6100 FAD0                  		bsr.w	DelayProgram
0000326C 6100 EF9E                  		bsr.w	PalCycle_Sega
00003270 66F0                       		bne.s	Sega_WaitPallet
00003272                            
00003272 103C 00E1                  		move.b	#$E1,d0
00003276 6100 E35A                  		bsr.w	PlaySound_Special ; play "SEGA"	sound
0000327A 11FC 0014 F62A             		move.b	#$14,($FFFFF62A).w
00003280 6100 FAB8                  		bsr.w	DelayProgram
00003284 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
0000328A                            
0000328A                            Sega_WaitEnd:
0000328A 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
00003290 6100 FAA8                  		bsr.w	DelayProgram
00003294 4A78 F614                  		tst.w	($FFFFF614).w
00003298 6700                       		beq.s	Sega_GotoTitle
0000329A 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
000032A0 67E8                       		beq.s	Sega_WaitEnd	; if not, branch
000032A2                            
000032A2                            Sega_GotoTitle:
000032A2 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; go to title screen
000032A8 4E75                       		rts	
000032AA                            ; ===========================================================================
000032AA                            
000032AA                            ; ---------------------------------------------------------------------------
000032AA                            ; Title	screen
000032AA                            ; ---------------------------------------------------------------------------
000032AA                            
000032AA                            TitleScreen:				; XREF: GameModeArray
000032AA 103C 00E4                  		move.b	#$E4,d0
000032AE 6100 E322                  		bsr.w	PlaySound_Special ; stop music
000032B2 6100 EDA0                  		bsr.w	Pal_FadeFrom
000032B6 6100 E55C                  		bsr.w	ClearPLC
000032BA 46FC 2700                  		move	#$2700,sr
000032BE 6100 E2C8                  		bsr.w	SoundDriverLoad
000032C2 4DF9 00C0 0004             		lea	($C00004).l,a6
000032C8 3CBC 8004                  		move.w	#$8004,(a6)
000032CC 3CBC 8230                  		move.w	#$8230,(a6)
000032D0 3CBC 8407                  		move.w	#$8407,(a6)
000032D4 3CBC 9001                  		move.w	#$9001,(a6)
000032D8 3CBC 9200                  		move.w	#$9200,(a6)
000032DC 3CBC 8B03                  		move.w	#$8B03,(a6)
000032E0 3CBC 8720                  		move.w	#$8720,(a6)
000032E4 4238 F64E                  		clr.b	($FFFFF64E).w
000032E8 6100 E210                  		bsr.w	ClearScreen
000032EC 43F8 D000                  		lea	($FFFFD000).w,a1
000032F0 7000                       		moveq	#0,d0
000032F2 323C 07FF                  		move.w	#$7FF,d1
000032F6                            
000032F6                            Title_ClrObjRam:
000032F6 22C0                       		move.l	d0,(a1)+
000032F8 51C9 FFFC                  		dbf	d1,Title_ClrObjRam ; fill object RAM ($D000-$EFFF) with	$0
000032FC                            
000032FC                            ; gomer
000032FC 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
00003306 41F9 0000 0000             		lea	(Nem_Gomer).l,a0 ; load Gomer patterns
0000330C 6100 E368                  		bsr.w	NemDec
00003310 7003                       		moveq	#3,d0		; load Sonic's pallet
00003312 6100 EFEA                  		bsr.w	PalLoad1
00003316                            
00003316 43F9 00FF 0000             		lea	($FF0000).l,a1
0000331C 41F9 0000 0000             		lea	(Eni_Gomer).l,a0 ; load mappings for	Gomer credits
00003322 303C 0000                  		move.w	#0,d0
00003326 6100 E62C                  		bsr.w	EniDec
0000332A                            ; help how the fuck can i do this IT SHOWS NOTHING
0000332A 6100 EC7E                  		bsr.w	Pal_FadeTo
0000332E 43F9 00FF 0000             		lea	($FF0000).l,a1
00003334 203C 4000 0003             		move.l	#$40000003,d0
0000333A 7227                       		moveq	#$27,d1
0000333C 741B                       		moveq	#$1B,d2
0000333E 6100 E316                  		bsr.w	ShowVDPGraphics
00003342                            
00003342                            
00003342 43F9 00FF 0000             		lea	($FF0000).l,a1
00003348 203C 6000 0003             		move.l	#$60000003,d0
0000334E 7227                       		moveq	#$27,d1
00003350 741B                       		moveq	#$1B,d2
00003352                            
00003352 6100 ED00                  		bsr.w	Pal_FadeFrom
00003356                            
00003356                            
00003356 6100 E1A2                  		bsr.w	ClearScreen
0000335A 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
00003364 41F9 0000 0000             		lea	(Nem_JapNames).l,a0 ; load Japanese credits
0000336A 6100 E30A                  		bsr.w	NemDec
0000336E 23FC 54C0 0000 00C0 0004   		move.l	#$54C00000,($C00004).l
00003378 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load alphabet
0000337E 6100 E2F6                  		bsr.w	NemDec
00003382 43F9 00FF 0000             		lea	($FF0000).l,a1
00003388 41F9 0000 0000             		lea	(Eni_JapNames).l,a0 ; load mappings for	Japanese credits
0000338E 303C 0000                  		move.w	#0,d0
00003392 6100 E5C0                  		bsr.w	EniDec
00003396 43F9 00FF 0000             		lea	($FF0000).l,a1
0000339C 203C 4000 0003             		move.l	#$40000003,d0
000033A2 7227                       		moveq	#$27,d1
000033A4 741B                       		moveq	#$1B,d2
000033A6 6100 E2AE                  		bsr.w	ShowVDPGraphics
000033AA 6100 ECA8                  		bsr.w	Pal_FadeFrom
000033AE 43F8 FB80                  		lea	($FFFFFB80).w,a1
000033B2 7000                       		moveq	#0,d0
000033B4 323C 001F                  		move.w	#$1F,d1
000033B8                            
000033B8                            
000033B8                            Title_ClrPallet:
000033B8 22C0                       		move.l	d0,(a1)+
000033BA 51C9 FFFC                  		dbf	d1,Title_ClrPallet ; fill pallet with 0	(black)
000033BE                            
000033BE 7003                       		moveq	#3,d0		; load Sonic's pallet
000033C0 6100 EF3C                  		bsr.w	PalLoad1
000033C4 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load "SONIC TEAM PRESENTS"	object
000033CA 4EB9 0000 0000             		jsr	ObjectsLoad
000033D0 4EB9 0000 0000             		jsr	BuildSprites
000033D6 6100 EBD2                  		bsr.w	Pal_FadeTo
000033DA 46FC 2700                  		move	#$2700,sr
000033DE 23FC 4000 0001 00C0 0004   		move.l	#$40000001,($C00004).l
000033E8 41F9 0000 0000             		lea	(Nem_TitleFg).l,a0 ; load title	screen patterns
000033EE 6100 E286                  		bsr.w	NemDec
000033F2 23FC 6000 0001 00C0 0004   		move.l	#$60000001,($C00004).l
000033FC 41F9 0000 0000             		lea	(Nem_TitleSonic).l,a0 ;	load Sonic title screen	patterns
00003402 6100 E272                  		bsr.w	NemDec
00003406 23FC 6200 0002 00C0 0004   		move.l	#$62000002,($C00004).l
00003410 41F9 0000 0000             		lea	(Nem_TitleTM).l,a0 ; load "TM" patterns
00003416 6100 E25E                  		bsr.w	NemDec
0000341A 4DF9 00C0 0000             		lea	($C00000).l,a6
00003420 2D7C 5000 0003 0004        		move.l	#$50000003,4(a6)
00003428 4BF9 0000 0606             		lea	(Art_Text).l,a5
0000342E 323C 0BC4                  		move.w	#(Art_Text_end-Art_Text/4)-1,d1
00003432                            
00003432                            Title_LoadText:
00003432 2C9D                       		move.l	(a5)+,(a6)
00003434 51C9 FFFC                  		dbf	d1,Title_LoadText ; load uncompressed text patterns
00003438                            
00003438 11FC 0000 FE30             		move.b	#0,($FFFFFE30).w ; clear lamppost counter
0000343E 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w ; disable debug item placement	mode
00003444 31FC 0000 FFF0             		move.w	#0,($FFFFFFF0).w ; disable debug mode
0000344A 31FC 0000 FFEA             		move.w	#0,($FFFFFFEA).w
00003450 31FC 0000 FE10             		move.w	#0,($FFFFFE10).w ; set level to	GHZ (00)
00003456 31FC 0000 F634             		move.w	#0,($FFFFF634).w ; disable pallet cycling
0000345C 6100 0000                  		bsr.w	LevelSizeLoad
00003460 6100 0000                  		bsr.w	DeformBgLayer
00003464                            
00003464 43F8 B000                  		lea	($FFFFB000).w,a1
00003468 41F9 0000 0000             		lea	(Blk16_GHZ).l,a0 ; load	GHZ 16x16 mappings
0000346E 303C 0000                  		move.w	#0,d0
00003472 6100 E4E0                  		bsr.w	EniDec
00003476 41F9 0000 0000             		lea	(Blk256_GHZ).l,a0 ; load GHZ 256x256 mappings
0000347C 43F9 00FF 0000             		lea	($FF0000).l,a1
00003482 6100 E64E                  		bsr.w	KosDec
00003486 6100 0000                  		bsr.w	LevelLayoutLoad
0000348A                            
0000348A 46FC 2700                  		move	#$2700,sr
0000348E 6100 E06A                  		bsr.w	ClearScreen
00003492 4BF9 00C0 0004             		lea	($C00004).l,a5
00003498 4DF9 00C0 0000             		lea	($C00000).l,a6
0000349E 47F8 F708                  		lea	($FFFFF708).w,a3
000034A2 49F8 A440                  		lea	($FFFFA440).w,a4
000034A6 343C 6000                  		move.w	#$6000,d2
000034AA 6100 0000                  		bsr.w	LoadTilesFromStart2
000034AE 43F9 00FF 0000             		lea	($FF0000).l,a1
000034B4 41F9 0000 0000             		lea	(Eni_Title).l,a0 ; load	title screen mappings
000034BA 303C 0000                  		move.w	#0,d0
000034BE 6100 E494                  		bsr.w	EniDec
000034C2 43F9 00FF 0000             		lea	($FF0000).l,a1
000034C8 203C 4206 0003             		move.l	#$42060003,d0
000034CE 7221                       		moveq	#$21,d1
000034D0 7415                       		moveq	#$15,d2
000034D2 6100 E182                  		bsr.w	ShowVDPGraphics
000034D6 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
000034E0 41F9 0000 0000             		lea	(Nem_GHZ_1st).l,a0 ; load GHZ patterns
000034E6 6100 E18E                  		bsr.w	NemDec
000034EA 7001                       		moveq	#1,d0		; load title screen pallet
000034EC 6100 EE10                  		bsr.w	PalLoad1
000034F0 103C 008A                  		move.b	#$8A,d0		; play title screen music
000034F4 6100 E0DC                  		bsr.w	PlaySound_Special
000034F8 11FC 0000 FFFA             		move.b	#0,($FFFFFFFA).w ; disable debug mode
000034FE 31FC 0178 F614             		move.w	#$178,($FFFFF614).w ; run title	screen for $178	frames
00003504 43F8 D080                  		lea	($FFFFD080).w,a1
00003508 7000                       		moveq	#0,d0
0000350A 323C 000F                  		move.w	#$F,d1
0000350E                            
0000350E                            Title_ClrObjRam2:
0000350E 22C0                       		move.l	d0,(a1)+
00003510 51C9 FFFC                  		dbf	d1,Title_ClrObjRam2
00003514                            
00003514 11FC 000E D040             		move.b	#$E,($FFFFD040).w ; load big Sonic object
0000351A 11FC 000F D080             		move.b	#$F,($FFFFD080).w ; load "PRESS	START BUTTON" object
00003520 11FC 000F D0C0             		move.b	#$F,($FFFFD0C0).w ; load "TM" object
00003526 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
0000352C 11FC 000F D100             		move.b	#$F,($FFFFD100).w
00003532 11FC 0002 D11A             		move.b	#2,($FFFFD11A).w
00003538 4EB9 0000 0000             		jsr	ObjectsLoad
0000353E 6100 0000                  		bsr.w	DeformBgLayer
00003542 4EB9 0000 0000             		jsr	BuildSprites
00003548 7000                       		moveq	#0,d0
0000354A 6100 E29C                  		bsr.w	LoadPLC2
0000354E 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
00003554 31FC 0000 FFE6             		move.w	#0,($FFFFFFE6).w
0000355A 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000355E 0000 0040                  		ori.b	#$40,d0
00003562 33C0 00C0 0004             		move.w	d0,($C00004).l
00003568 6100 EA40                  		bsr.w	Pal_FadeTo
0000356C                            
0000356C                            loc_317C:
0000356C 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00003572 6100 F7C6                  		bsr.w	DelayProgram
00003576 4EB9 0000 0000             		jsr	ObjectsLoad
0000357C 6100 0000                  		bsr.w	DeformBgLayer
00003580 4EB9 0000 0000             		jsr	BuildSprites
00003586 6100 E60C                  		bsr.w	PalCycle_Title
0000358A 6100 E296                  		bsr.w	RunPLC_RAM
0000358E 3038 D008                  		move.w	($FFFFD008).w,d0
00003592 5440                       		addq.w	#2,d0
00003594 31C0 D008                  		move.w	d0,($FFFFD008).w ; move	Sonic to the right
00003598 0C40 1C00                  		cmpi.w	#$1C00,d0	; has Sonic object passed x-position $1C00?
0000359C 6500                       		bcs.s	Title_ChkRegion	; if not, branch
0000359E 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
000035A4 4E75                       		rts	
000035A6                            ; ===========================================================================
000035A6                            
000035A6                            Title_ChkRegion:
000035A6 4A38 FFF8                  		tst.b	($FFFFFFF8).w	; check	if the machine is US or	Japanese
000035AA 6A00                       		bpl.s	Title_RegionJ	; if Japanese, branch
000035AC 41F9 0000 0000             		lea	(LevelSelectCode_US).l,a0 ; load US code
000035B2 6000                       		bra.s	Title_EnterCheat
000035B4                            ; ===========================================================================
000035B4                            
000035B4                            Title_RegionJ:				; XREF: Title_ChkRegion
000035B4 41F9 0000 0000             		lea	(LevelSelectCode_J).l,a0 ; load	J code
000035BA                            
000035BA                            Title_EnterCheat:			; XREF: Title_ChkRegion
000035BA 3038 FFE4                  		move.w	($FFFFFFE4).w,d0
000035BE D0C0                       		adda.w	d0,a0
000035C0 1038 F605                  		move.b	($FFFFF605).w,d0 ; get button press
000035C4 0200 000F                  		andi.b	#$F,d0		; read only up/down/left/right buttons
000035C8 B010                       		cmp.b	(a0),d0		; does button press match the cheat code?
000035CA 6600                       		bne.s	loc_3210	; if not, branch
000035CC 5278 FFE4                  		addq.w	#1,($FFFFFFE4).w ; next	button press
000035D0 4A00                       		tst.b	d0
000035D2 6600                       		bne.s	Title_CountC
000035D4 41F8 FFE0                  		lea	($FFFFFFE0).w,a0
000035D8 3238 FFE6                  		move.w	($FFFFFFE6).w,d1
000035DC E249                       		lsr.w	#1,d1
000035DE 0241 0003                  		andi.w	#3,d1
000035E2 6700                       		beq.s	Title_PlayRing
000035E4 4A38 FFF8                  		tst.b	($FFFFFFF8).w
000035E8 6A00                       		bpl.s	Title_PlayRing
000035EA 7201                       		moveq	#1,d1
000035EC 1181 1001                  		move.b	d1,1(a0,d1.w)
000035F0                            
000035F0                            Title_PlayRing:
000035F0 11BC 0001 1000             		move.b	#1,(a0,d1.w)	; activate cheat
000035F6 103C 00B5                  		move.b	#$B5,d0		; play ring sound when code is entered
000035FA 6100 DFD6                  		bsr.w	PlaySound_Special
000035FE 6000                       		bra.s	Title_CountC
00003600                            ; ===========================================================================
00003600                            
00003600                            loc_3210:				; XREF: Title_EnterCheat
00003600 4A00                       		tst.b	d0
00003602 6700                       		beq.s	Title_CountC
00003604 0C78 0009 FFE4             		cmpi.w	#9,($FFFFFFE4).w
0000360A 6700                       		beq.s	Title_CountC
0000360C 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
00003612                            
00003612                            Title_CountC:
00003612 1038 F605                  		move.b	($FFFFF605).w,d0
00003616 0200 0020                  		andi.b	#$20,d0		; is C button pressed?
0000361A 6700                       		beq.s	loc_3230	; if not, branch
0000361C 5278 FFE6                  		addq.w	#1,($FFFFFFE6).w ; increment C button counter
00003620                            
00003620                            loc_3230:
00003620 4A78 F614                  		tst.w	($FFFFF614).w
00003624 6700 0000                  		beq.w	Demo
00003628                            		; (temporary until we have an actual options screen)
00003628 0838 0005 F605             		btst	#5,	($FFFFF605).w ; check if c pressed
0000362E 6700                       		beq.s	@notc
00003630                            
00003630 5238 FFE8                  		add.b	#1,(v_character).w ; sonic/gronic 
00003634 0C38 0003 FFE8             		cmpi.b	#3,(v_character).w
0000363A 6D00                       		blt.s	@notoverflow
0000363C 11FC 0000 FFE8             		move.b	#0,(v_character).w
00003642                            	@notoverflow:
00003642 103C 00B5                  		move.b	#$B5,d0		; play ring sound when code is entered
00003646 6100 DF8A                  		bsr.w	PlaySound_Special
0000364A                            	@notc:
0000364A 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; check if Start is pressed
00003650 6700 FF1A                  		beq.w	loc_317C	; if not, branch
00003654                            
00003654                            Title_ChkLevSel:
00003654 0838 0006 F604             		btst	#6,($FFFFF604).w ; check if A is pressed
0000365A 6700 0000                  		beq.w	PlayLevel	; if not, play level
0000365E                            		
0000365E                            		
0000365E 7002                       		moveq	#2,d0
00003660 6100 ECB8                  		bsr.w	PalLoad2	; load level select pallet
00003664 43F8 CC00                  		lea	($FFFFCC00).w,a1
00003668 7000                       		moveq	#0,d0
0000366A 323C 00DF                  		move.w	#$DF,d1
0000366E                            
0000366E                            Title_ClrScroll:
0000366E 22C0                       		move.l	d0,(a1)+
00003670 51C9 FFFC                  		dbf	d1,Title_ClrScroll ; fill scroll data with 0
00003674                            
00003674 21C0 F616                  		move.l	d0,($FFFFF616).w
00003678 46FC 2700                  		move	#$2700,sr
0000367C 4DF9 00C0 0000             		lea	($C00000).l,a6
00003682 23FC 6000 0003 00C0 0004   		move.l	#$60000003,($C00004).l
0000368C 323C 03FF                  		move.w	#$3FF,d1
00003690                            
00003690                            Title_ClrVram:
00003690 2C80                       		move.l	d0,(a6)
00003692 51C9 FFFC                  		dbf	d1,Title_ClrVram ; fill	VRAM with 0
00003696                            
00003696 4A38 FFE0                  		tst.b	($FFFFFFE0).w	; check	if level select	code is	on
0000369A 6700 0000                  		beq.w	GotoOptions	; if not, play level
0000369E                            
0000369E 6100 0000                  		bsr.w	LevSelTextLoad
000036A2                            		
000036A2                            		; sound test fix
000036A2 3C38 FF82                  		move.w	($FFFFFF82).w,d6
000036A6 31FC 0014 FF82             		move.w	#$14,($FFFFFF82).w
000036AC                            		
000036AC 363C C65F                  		move.w	#$C680-$21,d3 ; selected
000036B0 0C46 0014                  		cmpi.w	#$14,d6
000036B4 6700                       		beq.s	@issndtst
000036B6 363C E65F                  		move.w	#$E680-$21,d3 ; not selected
000036BA                            	@issndtst:
000036BA 6100 0000                  		bsr.w	LevSelSndTest	; refresh text
000036BE 31C6 FF82                  		move.w	d6,($FFFFFF82).w
000036C2                            		
000036C2 363C C65F                  		move.w	#$C680-$21,d3	; VRAM setting
000036C6 2D7C 6D02 0003 0004        		move.l	#lsctrlpos,4(a6)
000036CE                            		
000036CE 0C78 0014 FF82             		cmpi.w	#$14,($FFFFFF82).w
000036D4 6700                       		beq.s	@issndtst2
000036D6                            		
000036D6 43F9 0000 0000             		lea	(Controls_Normal).l,a1 ; control help
000036DC 6100 0000                  		bsr.w	CStringSlop
000036E0 6000                       		bra.s	LevelSelect
000036E2                            	@issndtst2:
000036E2 43F9 0000 0000             		lea	(Controls_SND).l,a1
000036E8 6100 0000                  		bsr.w	CStringSlop
000036EC                            		
000036EC                            ; ---------------------------------------------------------------------------
000036EC                            ; Level	Select
000036EC                            ; ---------------------------------------------------------------------------
000036EC                            LevelSelect:
000036EC 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
000036F2 6100 F646                  		bsr.w	DelayProgram
000036F6 6100 0000                  		bsr.w	LevSelControls
000036FA 6100 E126                  		bsr.w	RunPLC_RAM
000036FE 4AB8 F680                  		tst.l	($FFFFF680).w
00003702 66E8                       		bne.s	LevelSelect
00003704 0238 00F0 F605             		andi.b	#$F0,($FFFFF605).w ; is	A, B, C, or Start pressed?
0000370A 67E0                       		beq.s	LevelSelect	; if not, branch
0000370C 3038 FF82                  		move.w	($FFFFFF82).w,d0
00003710 0C40 0000                  		cmpi.w	#lswifi,d0		; have you selected item $15 (free wifi)?
00003714 6600                       		bne.s	@dont	; if not, dont blow this place up
00003716                            			
00003716 11FC 00E5 F00B             		move.b	#$E5,($FFFFF00B).w ; YOU ARE AN IDIOT BOOM
0000371C 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00003722 6100 F616                  		bsr.w	DelayProgram
00003726                            	@dont:
00003726 0C40 0000                  		cmpi.w	#lssndtest,d0		; have you selected item $14 (sound test)?
0000372A 6600                       		bne.s	LevSel_Level_SS	; if not, go to	Level/SS subroutine
0000372C                            		
0000372C 0238 00A0 F605             		andi.b	#$A0,($FFFFF605).w ; is C or Start pressed?
00003732 67B8                       		beq.s	LevelSelect	; if not, branch
00003734                            		
00003734 0838 0007 F605             		btst	#7,($FFFFF605).w ; was it start?
0000373A 6600                       		bne.s	LevSel_SEGA ; then go to sega screen
0000373C                            		
0000373C 1038 FF84                  		move.b	($FFFFFF84).w,d0
00003740 11C0 F00B                  		move.b	d0,($FFFFF00B).w ; PlaySound_Special but faster
00003744                            		
00003744 4EB9 0000 0000             		jsr		ShowNow_Playing
0000374A 60A0                       		bra.s	LevelSelect
0000374C                            ; ===========================================================================
0000374C                            
0000374C                            LevSel_SEGA:				; XREF: LevelSelect
0000374C 11FC 0000 F600             		move.b	#$0,($FFFFF600).w ; set screen	mode to	$0 SEGA
00003752 4E75                       		rts	
00003754                            ; ===========================================================================
00003754                            
00003754                            LevSel_Ending:				; XREF: LevelSelect
00003754 11FC 0018 F600             		move.b	#$18,($FFFFF600).w ; set screen	mode to	$18 (Ending)
0000375A 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	to 0600	(Ending)
00003760 4E75                       		rts	
00003762                            ; ===========================================================================
00003762                            
00003762                            LevSel_Credits:				; XREF: LevelSelect
00003762 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set screen	mode to	$1C (Credits)
00003768 103C 0091                  		move.b	#$91,d0
0000376C 6100 DE64                  		bsr.w	PlaySound_Special ; play credits music
00003770 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w
00003776 4E75                       		rts	
00003778                            ; ===========================================================================
00003778                            
00003778                            LevSel_Level_SS:			; XREF: LevelSelect
00003778 D040                       		add.w	d0,d0
0000377A 303B 0000                  		move.w	LSelectPointers(pc,d0.w),d0 ; load level number
0000377E 6B00 FF6C                  		bmi.w	LevelSelect
00003782 0C40 0700                  		cmpi.w	#$700,d0	; check	if level is 0700 (Special Stage)
00003786 6600                       		bne.s	LevSel_Level	; if not, branch
00003788 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
0000378E 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level
00003792 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
00003798 7000                       		moveq	#0,d0
0000379A 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
0000379E 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
000037A2 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
000037A6 4E75                       		rts	
000037A8                            ; ===========================================================================
000037A8                            
000037A8                            LevSel_Level:				; XREF: LevSel_Level_SS
000037A8 0240 3FFF                  		andi.w	#$3FFF,d0
000037AC 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
000037B0                            
000037B0                            PlayLevel:				; XREF: ROM:00003246j ...
000037B0 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
000037B6 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
000037BC 7000                       		moveq	#0,d0
000037BE 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
000037C2 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
000037C6 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
000037CA 11C0 FE16                  		move.b	d0,($FFFFFE16).w ; clear special stage number
000037CE 11C0 FE57                  		move.b	d0,($FFFFFE57).w ; clear emeralds
000037D2 21C0 FE58                  		move.l	d0,($FFFFFE58).w ; clear emeralds
000037D6 21C0 FE5C                  		move.l	d0,($FFFFFE5C).w ; clear emeralds
000037DA 11C0 FE18                  		move.b	d0,($FFFFFE18).w ; clear continues
000037DE 103C 00E0                  		move.b	#$E0,d0
000037E2 6100 DDEE                  		bsr.w	PlaySound_Special ; fade out music
000037E6 4E75                       		rts	
000037E8                            ; ===========================================================================
000037E8                            ; ---------------------------------------------------------------------------
000037E8                            ; Level	select - level pointers
000037E8                            ; ---------------------------------------------------------------------------
000037E8                            LSelectPointers:
000037E8                            		incbin	misc\ls_point.bin
00003812                            		even
00003812                            ; ---------------------------------------------------------------------------
00003812                            ; Level	select codes
00003812                            ; ---------------------------------------------------------------------------
00003812                            LevelSelectCode_J:
00003812                            		incbin	misc\ls_jcode.bin
00003818                            		even
00003818                            
00003818                            LevelSelectCode_US:
00003818                            		incbin	misc\ls_ucode.bin
0000381E                            		even
0000381E                            ; ===========================================================================
0000381E                            
0000381E                            ; ---------------------------------------------------------------------------
0000381E                            ; Demo mode
0000381E                            ; ---------------------------------------------------------------------------
0000381E                            
0000381E                            Demo:					; XREF: TitleScreen
0000381E 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
00003824                            
00003824                            loc_33B6:				; XREF: loc_33E4
00003824 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
0000382A 6100 F50E                  		bsr.w	DelayProgram
0000382E 6100 0000                  		bsr.w	DeformBgLayer
00003832 6100 E33E                  		bsr.w	PalCycle_Load
00003836 6100 DFEA                  		bsr.w	RunPLC_RAM
0000383A 3038 D008                  		move.w	($FFFFD008).w,d0
0000383E 5440                       		addq.w	#2,d0
00003840 31C0 D008                  		move.w	d0,($FFFFD008).w
00003844 0C40 1C00                  		cmpi.w	#$1C00,d0
00003848 6500                       		bcs.s	loc_33E4
0000384A 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set screen mode to 00 (level)
00003850 4E75                       		rts	
00003852                            ; ===========================================================================
00003852                            
00003852                            loc_33E4:				; XREF: Demo
00003852 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
00003858 6600 FDFA                  		bne.w	Title_ChkLevSel	; if yes, branch
0000385C 4A78 F614                  		tst.w	($FFFFF614).w
00003860 6600 FFC2                  		bne.w	loc_33B6
00003864 103C 00E0                  		move.b	#$E0,d0
00003868 6100 DD68                  		bsr.w	PlaySound_Special ; fade out music
0000386C 3038 FFF2                  		move.w	($FFFFFFF2).w,d0 ; load	demo number
00003870 0240 0007                  		andi.w	#7,d0
00003874 D040                       		add.w	d0,d0
00003876 303B 0000                  		move.w	Demo_Levels(pc,d0.w),d0	; load level number for	demo
0000387A 31C0 FE10                  		move.w	d0,($FFFFFE10).w
0000387E 5278 FFF2                  		addq.w	#1,($FFFFFFF2).w ; add 1 to demo number
00003882 0C78 0004 FFF2             		cmpi.w	#4,($FFFFFFF2).w ; is demo number less than 4?
00003888 6500                       		bcs.s	loc_3422	; if yes, branch
0000388A 31FC 0000 FFF2             		move.w	#0,($FFFFFFF2).w ; reset demo number to	0
00003890                            
00003890                            loc_3422:
00003890 31FC 0001 FFF0             		move.w	#1,($FFFFFFF0).w ; turn	demo mode on
00003896 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set screen mode to 08 (demo)
0000389C 0C40 0600                  		cmpi.w	#$600,d0	; is level number 0600 (special	stage)?
000038A0 6600                       		bne.s	Demo_Level	; if not, branch
000038A2 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
000038A8 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level number
000038AC 4238 FE16                  		clr.b	($FFFFFE16).w	; clear	special	stage number
000038B0                            
000038B0                            Demo_Level:
000038B0 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
000038B6 7000                       		moveq	#0,d0
000038B8 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
000038BC 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
000038C0 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
000038C4 4E75                       		rts	
000038C6                            ; ===========================================================================
000038C6                            ; ---------------------------------------------------------------------------
000038C6                            ; Levels used in demos
000038C6                            ; ---------------------------------------------------------------------------
000038C6                            Demo_Levels:	incbin	misc\dm_ord1.bin
000038CE                            		even
000038CE                            
000038CE                            ; ---------------------------------------------------------------------------
000038CE                            ; Subroutine to	change what you're selecting in the level select
000038CE                            ; ---------------------------------------------------------------------------
000038CE                            
000038CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000038CE                            
000038CE                            
000038CE                            LevSelControls:				; XREF: LevelSelect
000038CE 1238 F605                  		move.b	($FFFFF605).w,d1
000038D2 0201 0003                  		andi.b	#3,d1		; is up/down pressed and held?
000038D6 6600                       		bne.s	LevSel_UpDown	; if yes, branch
000038D8 5378 FF80                  		subq.w	#1,($FFFFFF80).w ; subtract 1 from time	to next	move
000038DC 6A00 0000                  		bpl.w	LevSel_SndTest	; if time remains, branch
000038E0                            
000038E0                            LevSel_UpDown:
000038E0 31FC 000B FF80             		move.w	#$B,($FFFFFF80).w ; reset time delay
000038E6 1238 F604                  		move.b	($FFFFF604).w,d1
000038EA 0201 0003                  		andi.b	#3,d1		; is up/down pressed?
000038EE 6700 0000                  		beq.w	LevSel_SndTest	; if not, branch
000038F2 3C38 FF82                  		move.w	($FFFFFF82).w,d6
000038F6 0801 0000                  		btst	#0,d1		; is up	pressed?
000038FA 6700                       		beq.s	LevSel_Down	; if not, branch
000038FC 5346                       		subq.w	#1,d6		; move up 1 selection
000038FE 6400                       		bcc.s	LevSel_Down
00003900 7C00                       		moveq	#lsselectable,d6		; if selection moves below 0, jump to last selection
00003902                            
00003902                            LevSel_Down:
00003902 0801 0001                  		btst	#1,d1		; is down pressed?
00003906 6700                       		beq.s	LevSel_Refresh	; if not, branch
00003908 5246                       		addq.w	#1,d6		; move down 1 selection
0000390A 0C46 0000                  		cmpi.w	#lsselectable+1,d6
0000390E 6500                       		bcs.s	LevSel_Refresh
00003910 7C00                       		moveq	#0,d6		; if selection moves above last selectable,	jump to	selection 0
00003912 6000                       		bra.s	LevSel_Refresh
00003914                            		
00003914                            LevSel_LR:
00003914 0801 0002                  		btst	#2,d1		; is left pressed?
00003918 6700                       		beq.s	LevSel_Right	; if not, branch
0000391A 0446 0000                  		sub.w	#lsrow2size,d6
0000391E 64E2                       		bcc.s	LevSel_Down
00003920 0646 0000                  		add.w	#lsrow2size,d6	; don't jump
00003924                            LevSel_Right:
00003924 0801 0003                  		btst	#3,d1		; is right pressed?
00003928 6700                       		beq.s	LevSel_Refresh	; if not, branch
0000392A 0646 0000                  		add.w	#lsrow1size,d6
0000392E 0C46 0000                  		cmpi.w	#lsselectable+1,d6
00003932 6500                       		bcs.s	LevSel_Refresh
00003934 0446 0000                  		sub.w	#lsrow1size,d6	; don't jump
00003938                            ; ===========================================================================
00003938                            LevSel_Refresh:
00003938                            		
00003938 363C E65F                  		move.w	#$E680-$21,d3	; VRAM setting
0000393C 6100 0000                  		bsr.w	LevSelHighlightCode	; refresh text
00003940                            		
00003940 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w
00003946 6600                       		bne.s	@exitsndtest
00003948                            		
00003948 363C C65F                  		move.w	#$C680-$21,d3	; VRAM setting
0000394C 43F9 0000 0000             		lea	(Controls_Normal).l,a1
00003952 2D7C 6D02 0003 0004        		move.l	#lsctrlpos,4(a6)
0000395A 6100 0000                  		bsr.w	CStringSlop
0000395E                            	@exitsndtest:
0000395E                            	
0000395E 363C C65F                  		move.w	#$C680-$21,d3
00003962 31C6 FF82                  		move.w	d6,($FFFFFF82).w ; set new selection
00003966 6100 0000                  		bsr.w	LevSelHighlightCode	; refresh text
0000396A                            		
0000396A 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w 
00003970 6600                       		bne.s	@entersndtest
00003972                            		
00003972 363C C65F                  		move.w	#$C680-$21,d3
00003976 43F9 0000 0000             		lea	(Controls_SND).l,a1
0000397C 2D7C 6D02 0003 0004        		move.l	#lsctrlpos,4(a6)
00003984 6100 0000                  		bsr.w	CStringSlop
00003988                            	@entersndtest:
00003988 4E75                       		rts	
0000398A                            		
0000398A                            LevSel_SndTest:				; XREF: LevSelControls
0000398A 1238 F605                  		move.b	($FFFFF605).w,d1
0000398E 0201 005C                  		andi.b	#$5C,d1		; is left/right/a/b	pressed?
00003992 6700                       		beq.s	LevSel_NoMove	; if not, branch
00003994 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w ; is item $14 selected?
0000399A 6600 FF78                  		bne.w	LevSel_LR	; if not, branch
0000399E                            		
0000399E 1038 FF84                  		move.b	($FFFFFF84).w,d0
000039A2 0801 0002                  		btst	#2,d1		; is left pressed?
000039A6 6700                       		beq.s	SndTest_Right	; if not, branch
000039A8 5300                       		subq.b	#1,d0		; subtract 1 from sound	test
000039AA                            		; no need the fact it's a byte does the trick
000039AA                            
000039AA                            SndTest_Right:
000039AA 0801 0003                  		btst	#3,d1		; is right pressed?
000039AE 6700                       		beq.s	SndTest_A	; if not, branch
000039B0 5200                       		addq.b	#1,d0		; add 1	to sound test
000039B2                            		; same here
000039B2                            		
000039B2                            SndTest_A:
000039B2 0801 0006                  		btst	#6,d1		; is A pressed?
000039B6 6700                       		beq.s	SndTest_B	; if not, branch
000039B8 5100                       		subq.b	#8,d0		; subtract $10 to sound test
000039BA 5100                       		subq.b	#8,d0
000039BC                            		
000039BC                            SndTest_B:
000039BC 0801 0004                  		btst	#4,d1		; is B pressed?
000039C0 6700                       		beq.s	SndTest_Refresh	; if not, branch
000039C2 5000                       		addq.b	#8,d0		; add $10 to sound test
000039C4 5000                       		addq.b	#8,d0
000039C6                            
000039C6                            SndTest_Refresh:
000039C6 363C C65F                  		move.w	#$C680-$21,d3
000039CA 11C0 FF84                  		move.b	d0,($FFFFFF84).w ; set sound test number
000039CE 6000 0000                  		bra.w	LevSelSndTest	; refresh text
000039D2                            
000039D2                            LevSel_NoMove:
000039D2 4E75                       		rts	
000039D4                            ; End of function LevSelControls
000039D4                            
000039D4                            ; ---------------------------------------------------------------------------
000039D4                            ; Subroutine to load level select text
000039D4                            ; ---------------------------------------------------------------------------
000039D4                            
000039D4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000039D4                            
000039D4                            LevSelTextLoad_loop:
000039D4 2D44 0004                  		move.l	d4,4(a6)
000039D8 6100 0000                  		bsr.w	LevSel_ChgLine
000039DC 0684 0080 0000             		addi.l	#$800000,d4
000039E2 51C9 FFF0                  		dbf.w	d1,LevSelTextLoad_loop
000039E6 4E75                       		rts
000039E8                            LevSelTextLoad:				; XREF: TitleScreen
000039E8 43F9 0000 0000             		lea	(LevelMenuText).l,a1
000039EE 4DF9 00C0 0000             		lea	($C00000).l,a6
000039F4 363C E65F                  		move.w	#$E680-$21,d3	; VRAM setting
000039F8 283C 6086 0003             		move.l	#lsscrpos,d4	; screen position (text)
000039FE                            		
000039FE 323C 0000                  		move.w	#lsrow1size-1,d1		; number of lines of text (first row)
00003A02 61D0                       		bsr.s	LevSelTextLoad_loop
00003A04                            		
00003A04                            		
00003A04 283C 60AA 0003             		move.l	#lsscrpos+lsoff,d4
00003A0A 323C 0000                  		move.w	#lsrow2size-1,d1		; number of lines of text (second row)
00003A0E 61C4                       		bsr.s	LevSelTextLoad_loop
00003A10 363C C65F                  		move.w	#$C680-$21,d3
00003A14                            		
00003A14                            LevSelHighlightCode:
00003A14 4DF9 00C0 0000             		lea	($C00000).l,a6
00003A1A 7000                       		moveq	#0,d0
00003A1C 3038 FF82                  		move.w	($FFFFFF82).w,d0
00003A20 3200                       		move.w	d0,d1
00003A22 283C 6086 0003             		move.l	#lsscrpos,d4
00003A28                            		
00003A28 0C40 0000                  		cmpi.w	#lsrow1size,d0
00003A2C 6D00                       		blt.s	@notsecond
00003A2E                            		
00003A2E 0440 0000                  		sub.w	#lsrow1size,d0
00003A32 0684 0024 0000             		addi.l	#lsoff,d4
00003A38                            	@notsecond:
00003A38 EF48                       		lsl.w	#7,d0
00003A3A 4840                       		swap	d0
00003A3C D880                       		add.l	d0,d4
00003A3E 43F9 0000 0000             		lea	(LevelMenuText).l,a1
00003A44 E749                       		lsl.w	#3,d1
00003A46 D241                       		add.w	d1,d1
00003A48 D2C1                       		adda.w	d1,a1
00003A4A 2D44 0004                  		move.l	d4,4(a6)
00003A4E 6100 0000                  		bsr.w	LevSel_ChgLine
00003A52 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w
00003A58 6700                       		beq.s	LevSelSndTest
00003A5A 4E75                       		rts
00003A5C                            
00003A5C                            LevSelSndTest:
00003A5C 0643 0030                  		add.w	#$30,d3
00003A60 23FC 64C2 0003 00C0 0004   		move.l	#lsstpos,($C00004).l ; screen	position (sound	test)
00003A6A 1038 FF84                  		move.b	($FFFFFF84).w,d0
00003A6E 1400                       		move.b	d0,d2
00003A70 E808                       		lsr.b	#4,d0
00003A72 6100 0000                  		bsr.w	LevSel_ChgSnd
00003A76 1002                       		move.b	d2,d0
00003A78 6100 0000                  		bsr.w	LevSel_ChgSnd
00003A7C 4E75                       		rts	
00003A7E                            ; End of function LevSelTextLoad
00003A7E                            
00003A7E                            
00003A7E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003A7E                            
00003A7E                            
00003A7E                            LevSel_ChgSnd:				; XREF: LevSelTextLoad
00003A7E 0240 000F                  		andi.w	#$F,d0
00003A82 0C00 000A                  		cmpi.b	#$A,d0
00003A86 6500                       		bcs.s	loc_3580
00003A88 5E00                       		addi.b	#7,d0
00003A8A                            
00003A8A                            loc_3580:
00003A8A D043                       		add.w	d3,d0
00003A8C 3C80                       		move.w	d0,(a6)
00003A8E 4E75                       		rts	
00003A90                            ; End of function LevSel_ChgSnd
00003A90                            
00003A90                            
00003A90                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003A90                            
00003A90                            
00003A90                            LevSel_ChgLine:				; XREF: LevSelTextLoad
00003A90 740F                       		moveq	#$10-1,d2		; number of characters per line
00003A92                            
00003A92                            @loop:
00003A92 7000                       		moveq	#0,d0
00003A94 1019                       		move.b	(a1)+,d0
00003A96 0C00 0020                  		cmpi.b	#$20,d0
00003A9A 6E00                       		bgt.s	@draw
00003A9C 3CBC 0000                  		move.w	#0,(a6)
00003AA0 51CA FFF0                  		dbf	d2,@loop
00003AA4 4E75                       		rts	
00003AA6                            ; ===========================================================================
00003AA6                            
00003AA6                            @draw:				; XREF: LevSel_ChgLine
00003AA6 D043                       		add.w	d3,d0
00003AA8 3C80                       		move.w	d0,(a6)
00003AAA 51CA FFE6                  		dbf	d2,@loop
00003AAE 4E75                       		rts	
00003AB0                            ; End of function LevSel_ChgLine
00003AB0                            		
00003AB0                            CStringSlop_draw:
00003AB0 D043                       		add.w	d3,d0
00003AB2 3C80                       		move.w	d0,(a6)
00003AB4                            CStringSlop:				; XREF: LevSelTextLoad
00003AB4 7000                       		moveq	#0,d0
00003AB6 1019                       		move.b	(a1)+,d0
00003AB8 0C00 0020                  		cmpi.b	#$20,d0
00003ABC 6EF2                       		bgt.s	CStringSlop_draw
00003ABE                            		
00003ABE 0C00 0001                  		cmpi.b	#1,d0
00003AC2 6700                       		beq.s	@InsertSpaces
00003AC4 6500                       		blo.s	@end
00003AC6                            		
00003AC6 3CBC 0000                  		move.w	#0,(a6)
00003ACA 60E8                       		bra.s	CStringSlop
00003ACC                            	@end:
00003ACC 4E75                       		rts
00003ACE                            	@InsertSpaces:
00003ACE 7000                       		moveq	#0,d0
00003AD0 1019                       		move.b	(a1)+,d0
00003AD2                            		
00003AD2                            	@insert:
00003AD2 3CBC 0000                  		move.w	#0,(a6)
00003AD6 51C8 FFFA                  		dbf.w	d0,@insert
00003ADA 60D8                       		bra.s	CStringSlop
00003ADC                            ; End of function LevSel_ChgLine
00003ADC                            
00003ADC                            ; ===========================================================================
00003ADC                            ; ---------------------------------------------------------------------------
00003ADC                            ; Level	select menu text ( this stupid level select code was brought to you by the meltdown guy )
00003ADC                            ; ---------------------------------------------------------------------------
00003ADC                            LevelMenuText:	
00003ADC 4352 554E 4348 5920 524F+  		dc.b    "CRUNCHY ROLL   1"
00003AEC 2020 2020 2020 2020 2020+          dc.b    "               2"
00003AFC 2020 2020 2020 2020 2020+          dc.b    "               3"
00003B0C 4920 4C49 4B45 2046 494C+          dc.b    "I LIKE FILE    1"
00003B1C 2045 5850 4C4F 5245 5220+          dc.b    " EXPLORER      2"
00003B2C 2020 2020 2020 2020 2020+          dc.b    "               3"
00003B3C 4D41 5242 4C20 2020 2020+          dc.b    "MARBL          1"
00003B4C 2020 2020 2020 2020 2020+          dc.b    "               2"
00003B5C 2020 2020 2020 2020 2020+          dc.b    "               3"
00003B6C 444F 4E54 4745 5452 4944+          dc.b    "DONTGETRIDOTHIS1"
00003B7C 2020 2020 2020 2020 2020+          dc.b    "               2"
00003B8C 2020 2020 2020 2020 2020+          dc.b    "               3"
00003B9C                            LMTSecondRow:
00003B9C 5448 4520 5049 4720 4652+          dc.b    "THE PIG FROM   1"
00003BAC 2042 4152 4E59 4152 4420+          dc.b    " BARNYARD      2"
00003BBC 2020 2020 2020 2020 2020+          dc.b    "               3"
00003BCC 5A20 5A20 5A20 5A20 2020+          dc.b    "Z Z Z Z        1"
00003BDC 2020 2020 2020 2020 2020+          dc.b    "               2"
00003BEC 2020 2020 2020 2020 2020+          dc.b    "               3"
00003BFC 4649 4E41 4C20 5A4F 4E45+          dc.b    "FINAL ZONE      "
00003C0C 5350 4543 4941 4C20 5354+          dc.b    "SPECIAL STAGE   "
00003C1C 534F 554E 4420 5445 5354+          dc.b    "SOUND TEST $    "
00003C2C 4652 4545 2057 4946 4920+  		dc.b	"FREE WIFI       "
00003C3C 4F50 5449 4F4E 5320 4C41+  		dc.b	"OPTIONS LATER   "
00003C4C                            LMTSelectableEnd:
00003C4C 4341 4E54 2054 4F55 4348+  		dc.b	"CANT TOUCH ME XD"
00003C5C                            LMTEnd:
00003C5C                            
00003C5C                            Now_Playing:
00003C5C 3E3E 3E4E 4F57 2050 4C41+  		dc.b	">>>NOW PLAYING ",0
00003C6C                            		even
00003C6C                            NP_Track:
00003C6C 5452 4143 4B20 2400        		dc.b	"TRACK $",0
00003C74                            		even
00003C74                            NP_SFX:
00003C74 534F 554E 4420 2400        		dc.b	"SOUND $",0
00003C7C                            		even
00003C7C                            
00003C7C                            ShowNow_Playing:
00003C7C 1C00                       		move.b	d0,d6
00003C7E 363C C65F                  		move.w	#$C680-$21,d3	; VRAM setting
00003C82 43FA FFD8                  		lea	Now_Playing(pc),a1
00003C86 4DF9 00C0 0000             		lea		($C00000).l,a6
00003C8C 2D7C 6C82 0003 0004        		move.l	#lsnppos,4(a6)
00003C94 6100 FE1E                  		bsr.w	CStringSlop
00003C98                            		
00003C98 43FA FFD2                  		lea	NP_Track(pc),a1
00003C9C 0C06 00A0                  		cmpi.b	#$A0,d6
00003CA0 6D00                       		blt.s	@track
00003CA2                            		
00003CA2 43FA FFD0                  		lea	NP_SFX(pc),a1
00003CA6                            	@track:
00003CA6 6100 FE0C                  		bsr.w	CStringSlop
00003CAA                            		
00003CAA 0643 0030                  		add.w	#$30,d3
00003CAE 1006                       		move.b	d6,d0
00003CB0 1400                       		move.b	d0,d2
00003CB2 E808                       		lsr.b	#4,d0
00003CB4 6100 FDC8                  		bsr.w	LevSel_ChgSnd
00003CB8 1002                       		move.b	d2,d0
00003CBA 6100 FDC2                  		bsr.w	LevSel_ChgSnd
00003CBE 4E75                       		rts	
00003CC0                            
00003CC0                            ; 1 is insert spaces btw
00003CC0                            Controls_Normal:
00003CC0 414E 593A 2050 4C41 5901+  		dc.b	"ANY: PLAY",1,27,0
00003CCC                            		even		
00003CCC                            Controls_SND:
00003CCC 413A 202D 3130 2020 423A+  		dc.b	"A: -10  B: +10  C: PLAY  START: QUIT",0
00003CF2 00                         		even
00003CF2                            		
00003CF2                            OptionMenuText:	
00003CF2 504C 4159 2054 4845 2047+  		dc.b    "PLAY THE GAME!!!"
00003D02 4348 4152 4143 5445 5220+          dc.b    "CHARACTER       "
00003D12                            OMTEnd:
00003D12                            		
00003D12                            ; ---------------------------------------------------------------------------
00003D12                            ; Level	Select
00003D12                            ; ---------------------------------------------------------------------------
00003D12                            GotoOptions:
00003D12 43F9 0000 3CF2             		lea	(OptionMenuText).l,a1
00003D18 4DF9 00C0 0000             		lea	($C00000).l,a6
00003D1E 363C E65F                  		move.w	#$E680-$21,d3	; VRAM setting
00003D22 283C 6086 0003             		move.l	#lsscrpos,d4	; screen position (text)
00003D28                            		
00003D28 323C 0000                  		move.w	#optamm-1,d1		; number of lines of text (first row)
00003D2C 6100 FCA6                  		bsr.w	LevSelTextLoad_loop
00003D30                            
00003D30                            OptionsMenu:
00003D30 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00003D36 6100 F002                  		bsr.w	DelayProgram
00003D3A 6100 0000                  		bsr.w	OptControls
00003D3E 6100 DAE2                  		bsr.w	RunPLC_RAM
00003D42 4AB8 F680                  		tst.l	($FFFFF680).w
00003D46 66E8                       		bne.s	OptionsMenu
00003D48 0238 00F0 F605             		andi.b	#$F0,($FFFFF605).w ; is	A, B, C, or Start pressed?
00003D4E 67E0                       		beq.s	OptionsMenu	; if not, branch
00003D50 4E71                       		nop
00003D52 60DC                       		bra.s	OptionsMenu
00003D54                            		
00003D54                            OptReturn:
00003D54 4E75                       		rts
00003D56                            OptControls:				; XREF: LevelSelect
00003D56 1238 F605                  		move.b	($FFFFF605).w,d1
00003D5A 0201 0003                  		andi.b	#3,d1		; is up/down pressed and held?
00003D5E 6600                       		bne.s	Opt_UpDown	; if yes, branch
00003D60 5378 FF80                  		subq.w	#1,($FFFFFF80).w ; subtract 1 from time	to next	move
00003D64 6AEE                       		bpl.s	OptReturn	; if time remains, branch
00003D66                            Opt_UpDown:
00003D66 31FC 000B FF80             		move.w	#$B,($FFFFFF80).w ; reset time delay
00003D6C 1238 F604                  		move.b	($FFFFF604).w,d1
00003D70 3C38 FF82                  		move.w	($FFFFFF82).w,d6
00003D74 0801 0000                  		btst	#0,d1		; is up	pressed?
00003D78 6700                       		beq.s	Opt_Down	; if not, branch
00003D7A 5346                       		subq.w	#1,d6		; move up 1 selection
00003D7C 6400                       		bcc.s	Opt_Down
00003D7E 7C00                       		moveq	#lsselectable,d6		; if selection moves below 0, jump to last selection
00003D80                            
00003D80                            Opt_Down:
00003D80 0801 0001                  		btst	#1,d1		; is down pressed?
00003D84 6700                       		beq.s	Opt_Refresh	; if not, branch
00003D86 5246                       		addq.w	#1,d6		; move down 1 selection
00003D88 0C46 0000                  		cmpi.w	#lsselectable+1,d6
00003D8C 6500                       		bcs.s	Opt_Refresh
00003D8E 7C00                       		moveq	#0,d6		; if selection moves above last selectable,	jump to	selection 0
00003D90                            Opt_Refresh:
00003D90                            		
00003D90                            ; ---------------------------------------------------------------------------
00003D90                            ; Music	playlist
00003D90                            ; ---------------------------------------------------------------------------
00003D90                            MusicList1:	incbin	misc\muslist1.bin
00003D98                            		even
00003D98                            MusicList2:	incbin	misc\muslist2.bin
00003DA0                            		even
00003DA0                            MusicList3:	incbin	misc\muslist3.bin
00003DA6                            		even
00003DA6                            MusicList4:	incbin	misc\muslist4.bin
00003DAC                            		even
00003DAC                            ; ===========================================================================
00003DAC                            
00003DAC                            ; ---------------------------------------------------------------------------
00003DAC                            ; Level
00003DAC                            ; ---------------------------------------------------------------------------
00003DAC                            
00003DAC                            Level:					; XREF: GameModeArray
00003DAC 08F8 0007 F600             		bset	#7,($FFFFF600).w ; add $80 to screen mode (for pre level sequence)
00003DB2 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003DB6 6B00                       		bmi.s	loc_37B6
00003DB8 103C 00E0                  		move.b	#$E0,d0
00003DBC 6100 D814                  		bsr.w	PlaySound_Special ; fade out music
00003DC0                            
00003DC0                            loc_37B6:
00003DC0 6100 DA52                  		bsr.w	ClearPLC
00003DC4 6100 E28E                  		bsr.w	Pal_FadeFrom
00003DC8 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003DCC 6B00                       		bmi.s	Level_ClrRam
00003DCE 46FC 2700                  		move	#$2700,sr
00003DD2 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00003DDC 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00003DE2 6100 D892                  		bsr.w	NemDec
00003DE6 46FC 2300                  		move	#$2300,sr
00003DEA 7000                       		moveq	#0,d0
00003DEC 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003DF0 E948                       		lsl.w	#4,d0
00003DF2 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
00003DF8 45F2 0000                  		lea	(a2,d0.w),a2
00003DFC 7000                       		moveq	#0,d0
00003DFE 1012                       		move.b	(a2),d0
00003E00 6700                       		beq.s	loc_37FC
00003E02 6100 D9B2                  		bsr.w	LoadPLC		; load level patterns
00003E06                            
00003E06                            loc_37FC:
00003E06 7001                       		moveq	#1,d0
00003E08 6100 D9AC                  		bsr.w	LoadPLC		; load standard	patterns
00003E0C                            
00003E0C                            Level_ClrRam:
00003E0C 43F8 D000                  		lea	($FFFFD000).w,a1
00003E10 7000                       		moveq	#0,d0
00003E12 323C 07FF                  		move.w	#$7FF,d1
00003E16                            
00003E16                            Level_ClrObjRam:
00003E16 22C0                       		move.l	d0,(a1)+
00003E18 51C9 FFFC                  		dbf	d1,Level_ClrObjRam ; clear object RAM
00003E1C                            
00003E1C 43F8 F628                  		lea	($FFFFF628).w,a1
00003E20 7000                       		moveq	#0,d0
00003E22 323C 0015                  		move.w	#$15,d1
00003E26                            
00003E26                            Level_ClrVars:
00003E26 22C0                       		move.l	d0,(a1)+
00003E28 51C9 FFFC                  		dbf	d1,Level_ClrVars ; clear misc variables
00003E2C                            
00003E2C 43F8 F700                  		lea	($FFFFF700).w,a1
00003E30 7000                       		moveq	#0,d0
00003E32 323C 003F                  		move.w	#$3F,d1
00003E36                            
00003E36                            Level_ClrVars2:
00003E36 22C0                       		move.l	d0,(a1)+
00003E38 51C9 FFFC                  		dbf	d1,Level_ClrVars2 ; clear misc variables
00003E3C                            
00003E3C 43F8 FE60                  		lea	($FFFFFE60).w,a1
00003E40 7000                       		moveq	#0,d0
00003E42 323C 0047                  		move.w	#$47,d1
00003E46                            
00003E46                            Level_ClrVars3:
00003E46 22C0                       		move.l	d0,(a1)+
00003E48 51C9 FFFC                  		dbf	d1,Level_ClrVars3 ; clear object variables
00003E4C                            
00003E4C 46FC 2700                  		move	#$2700,sr
00003E50 6100 D6A8                  		bsr.w	ClearScreen
00003E54 4DF9 00C0 0004             		lea	($C00004).l,a6
00003E5A 3CBC 8B03                  		move.w	#$8B03,(a6)
00003E5E 3CBC 8230                  		move.w	#$8230,(a6)
00003E62 3CBC 8407                  		move.w	#$8407,(a6)
00003E66 3CBC 857C                  		move.w	#$857C,(a6)
00003E6A 3CBC 9001                  		move.w	#$9001,(a6)
00003E6E 3CBC 8004                  		move.w	#$8004,(a6)
00003E72 3CBC 8720                  		move.w	#$8720,(a6)
00003E76 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00003E7C 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
00003E80 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00003E86 6600                       		bne.s	Level_LoadPal	; if not, branch
00003E88 3CBC 8014                  		move.w	#$8014,(a6)
00003E8C 7000                       		moveq	#0,d0
00003E8E 1038 FE11                  		move.b	($FFFFFE11).w,d0
00003E92 D040                       		add.w	d0,d0
00003E94 43F9 0000 0000             		lea	(WaterHeight).l,a1 ; load water	height array
00003E9A 3031 0000                  		move.w	(a1,d0.w),d0
00003E9E 31C0 F646                  		move.w	d0,($FFFFF646).w ; set water heights
00003EA2 31C0 F648                  		move.w	d0,($FFFFF648).w
00003EA6 31C0 F64A                  		move.w	d0,($FFFFF64A).w
00003EAA 4238 F64D                  		clr.b	($FFFFF64D).w	; clear	water routine counter
00003EAE 4238 F64E                  		clr.b	($FFFFF64E).w	; clear	water movement
00003EB2 11FC 0001 F64C             		move.b	#1,($FFFFF64C).w ; enable water
00003EB8 6000 0000                  		bra.w	Level_LoadPal
00003EBC                            Player_Palette:
00003EBC                            		; normal, lz, sbz, blank
00003EBC 0003 000F 0010 0000        		dc.w	3,$F,$10,0 ; Sonic 
00003EC4                            		
00003EC4 0016 0017 0018 0000        		dc.w	22,23,24,0 ; Pal_Gronic 
00003ECC 0019 0017 0018 0000        		dc.w	25,23,24,0 ; Pal_Anakama 
00003ED4 0003 000F 0010 0000                dc.w	3,$F,$10,0 ; LimitedSonic 
00003EDC                            
00003EDC                            		; add more player palettes
00003EDC                            Level_LoadPal:
00003EDC 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00003EE2 46FC 2300                  		move	#$2300,sr
00003EE6                            
00003EE6 7200                       		moveq	#0,d1
00003EE8 1238 FFE8                  		move.b	(v_character),d1
00003EEC D241                       		add.w	d1,d1
00003EEE D241                       		add.w	d1,d1
00003EF0 D241                       		add.w	d1,d1
00003EF2 303B 10C8                  		move.w	Player_Palette(pc,d1.w),d0	; load palette
00003EF6                            		
00003EF6 6100 E422                  		bsr.w	PalLoad2	; load Sonic's pallet line
00003EFA 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00003F00 6600                       		bne.s	Level_GetBgm	; if not, branch
00003F02 303B 10BA                  		move.w	Player_Palette+2(pc,d1.w),d0	; load palette
00003F06 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is act number 3?
00003F0C 6600                       		bne.s	Level_WaterPal	; if not, branch
00003F0E 303B 10B0                  		move.w	Player_Palette+4(pc,d1.w),d0	; load palette
00003F12                            
00003F12                            Level_WaterPal:
00003F12 6100 E41E                  		bsr.w	PalLoad3_Water	; load underwater pallet (see d0)
00003F16 4A38 FE30                  		tst.b	($FFFFFE30).w
00003F1A 6700                       		beq.s	Level_GetBgm
00003F1C 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
00003F22                            
00003F22                            ; NineKode begins here - How to play different songs on different acts
00003F22                             
00003F22                            Level_GetBgm:
00003F22 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003F26 6B00 0000                  		bmi.w	loc_3946	; change from bmi.s to bmi.w or you'll get an error
00003F2A 7000                       		moveq	#0,d0
00003F2C 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003F30                             
00003F30 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
00003F36 6600                       		bne.s	Level_GetBgm2	; if not, branch
00003F38 43F9 0000 3D90             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
00003F3E 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00003F40                             
00003F40                            Level_GetBgm2:
00003F40 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
00003F46 6600                       		bne.s	Level_GetBgm3	; if not, branch
00003F48 43F9 0000 3D98             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
00003F4E 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00003F50                             
00003F50                            Level_GetBgm3:
00003F50 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
00003F56 6600                       		bne.s	Level_GetBgm4	; if not, branch
00003F58 43F9 0000 3DA0             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 3
00003F5E 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00003F60                             
00003F60                            Level_GetBgm4:
00003F60 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
00003F66 6600                       		bne.s	Level_PlayBgm	; if not, branch
00003F68 43F9 0000 3DA6             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
00003F6E                             
00003F6E                            Level_PlayBgm:
00003F6E 1031 0000                  		move.b	(a1,d0.w),d0	; get d0-th entry from the playlist
00003F72 6100 D658                  		bsr.w	PlaySound	; play music
00003F76 11FC 0034 D080             		move.b	#$34,($FFFFD080).w ; load title	card object
00003F7C                             
00003F7C                            ; NineKode ends here
00003F7C                            
00003F7C                            Level_TtlCard:
00003F7C 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
00003F82 6100 EDB6                  		bsr.w	DelayProgram
00003F86 4EB9 0000 0000             		jsr	ObjectsLoad
00003F8C 4EB9 0000 0000             		jsr	BuildSprites
00003F92 6100 D88E                  		bsr.w	RunPLC_RAM
00003F96 3038 D108                  		move.w	($FFFFD108).w,d0
00003F9A B078 D130                  		cmp.w	($FFFFD130).w,d0 ; has title card sequence finished?
00003F9E 66DC                       		bne.s	Level_TtlCard	; if not, branch
00003FA0 4AB8 F680                  		tst.l	($FFFFF680).w	; are there any	items in the pattern load cue?
00003FA4 66D6                       		bne.s	Level_TtlCard	; if yes, branch
00003FA6 4EB9 0000 0000             		jsr	Hud_Base
00003FAC                            
00003FAC                            loc_3946:
00003FAC 7003                       		moveq	#3,d0
00003FAE 6100 E34E                  		bsr.w	PalLoad1	; load Sonic's pallet line
00003FB2 6100 0000                  		bsr.w	LevelSizeLoad
00003FB6 6100 0000                  		bsr.w	DeformBgLayer
00003FBA 08F8 0002 F754             		bset	#2,($FFFFF754).w
00003FC0 6100 0000                  		bsr.w	MainLoadBlockLoad ; load block mappings	and pallets
00003FC4 6100 0000                  		bsr.w	LoadTilesFromStart
00003FC8 4EB9 0000 0000             		jsr	FloorLog_Unk
00003FCE 6100 0000                  		bsr.w	ColIndexLoad
00003FD2 6100 0000                  		bsr.w	LZWaterEffects
00003FD6 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
00003FDC 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003FE0 6B00                       		bmi.s	Level_ChkDebug
00003FE2 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
00003FE8                            
00003FE8                            Level_ChkDebug:
00003FE8 4A38 FFE2                  		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
00003FEC 6700                       		beq.s	Level_ChkWater	; if not, branch
00003FEE 0838 0006 F604             		btst	#6,($FFFFF604).w ; is A	button pressed?
00003FF4 6700                       		beq.s	Level_ChkWater	; if not, branch
00003FF6 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00003FFC                            
00003FFC                            Level_ChkWater:
00003FFC 31FC 0000 F602             		move.w	#0,($FFFFF602).w
00004002 31FC 0000 F604             		move.w	#0,($FFFFF604).w
00004008 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
0000400E 6600                       		bne.s	Level_LoadObj	; if not, branch
00004010 11FC 001B D780             		move.b	#$1B,($FFFFD780).w ; load water	surface	object
00004016 31FC 0060 D788             		move.w	#$60,($FFFFD788).w
0000401C 11FC 001B D7C0             		move.b	#$1B,($FFFFD7C0).w
00004022 31FC 0120 D7C8             		move.w	#$120,($FFFFD7C8).w
00004028                            
00004028                            Level_LoadObj:
00004028 4EB9 0000 0000             		jsr	ObjPosLoad
0000402E 4EB9 0000 0000             		jsr	ObjectsLoad
00004034 4EB9 0000 0000             		jsr	BuildSprites
0000403A 7000                       		moveq	#0,d0
0000403C 4A38 FE30                  		tst.b	($FFFFFE30).w	; are you starting from	a lamppost?
00004040 6600                       		bne.s	loc_39E8	; if yes, branch
00004042 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00004046 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
0000404A 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w ; clear lives counter
0000404E                            
0000404E                            loc_39E8:
0000404E 11C0 FE1A                  		move.b	d0,($FFFFFE1A).w
00004052 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w ; clear shield
00004056 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w ; clear invincibility
0000405A 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w ; clear speed shoes
0000405E                            		; move.b	d0,($FFFFFE2F).w
0000405E 0238 0001 FE2F             		andi.b	#%00000001,($FFFFFE2F).w	; GMZ: Clear every flag in FE2F aside from reversed controls
00004064 31C0 FE08                  		move.w	d0,($FFFFFE08).w
00004068 31C0 FE02                  		move.w	d0,($FFFFFE02).w
0000406C 31C0 FE04                  		move.w	d0,($FFFFFE04).w
00004070 6100 0000                  		bsr.w	OscillateNumInit
00004074 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
0000407A 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w ; update rings	counter
00004080 11FC 0001 FE1E             		move.b	#1,($FFFFFE1E).w ; update time counter
00004086 31FC 0000 F790             		move.w	#0,($FFFFF790).w
0000408C 43F9 0000 0000             		lea	(Demo_Index).l,a1 ; load demo data
00004092 7000                       		moveq	#0,d0
00004094 1038 FE10                  		move.b	($FFFFFE10).w,d0
00004098 E548                       		lsl.w	#2,d0
0000409A 2271 0000                  		movea.l	(a1,d0.w),a1
0000409E 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
000040A2 6A00                       		bpl.s	Level_Demo	; if yes, branch
000040A4 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1 ; load ending demo	data
000040AA 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
000040AE 5340                       		subq.w	#1,d0
000040B0 E548                       		lsl.w	#2,d0
000040B2 2271 0000                  		movea.l	(a1,d0.w),a1
000040B6                            
000040B6                            Level_Demo:
000040B6 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w ; load key press duration
000040BC 5338 F792                  		subq.b	#1,($FFFFF792).w ; subtract 1 from duration
000040C0 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
000040C6 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000040CA 6A00                       		bpl.s	Level_ChkWaterPal
000040CC 31FC 021C F614             		move.w	#540,($FFFFF614).w
000040D2 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w
000040D8 6600                       		bne.s	Level_ChkWaterPal
000040DA 31FC 01FE F614             		move.w	#510,($FFFFF614).w
000040E0                            
000040E0                            Level_ChkWaterPal:
000040E0 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ/SBZ3?
000040E6 6600                       		bne.s	Level_Delay	; if not, branch
000040E8 700B                       		moveq	#$B,d0		; pallet $0B (LZ underwater)
000040EA 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is level SBZ3?
000040F0 6600                       		bne.s	Level_WaterPal2	; if not, branch
000040F2 700D                       		moveq	#$D,d0		; pallet $0D (SBZ3 underwater)
000040F4                            
000040F4                            Level_WaterPal2:
000040F4 6100 E258                  		bsr.w	PalLoad4_Water
000040F8                            
000040F8                            Level_Delay:
000040F8 323C 0003                  		move.w	#3,d1
000040FC                            
000040FC                            Level_DelayLoop:
000040FC 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00004102 6100 EC36                  		bsr.w	DelayProgram
00004106 51C9 FFF4                  		dbf	d1,Level_DelayLoop
0000410A                            
0000410A 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
00004110 6100 DE9E                  		bsr.w	Pal_FadeTo2
00004114 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00004118 6B00                       		bmi.s	Level_ClrCardArt
0000411A 5438 D0A4                  		addq.b	#2,($FFFFD0A4).w ; make	title card move
0000411E 5838 D0E4                  		addq.b	#4,($FFFFD0E4).w
00004122 5838 D124                  		addq.b	#4,($FFFFD124).w
00004126 5838 D164                  		addq.b	#4,($FFFFD164).w
0000412A 6000                       		bra.s	Level_StartGame
0000412C                            ; ===========================================================================
0000412C                            
0000412C                            Level_ClrCardArt:
0000412C 7002                       		moveq	#2,d0
0000412E 4EB9 0000 17B6             		jsr	(LoadPLC).l	; load explosion patterns
00004134 7000                       		moveq	#0,d0
00004136 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000413A 0640 0015                  		addi.w	#$15,d0
0000413E 4EB9 0000 17B6             		jsr	(LoadPLC).l	; load animal patterns (level no. + $15)
00004144                            
00004144                            Level_StartGame:
00004144 08B8 0007 F600             		bclr	#7,($FFFFF600).w ; subtract 80 from screen mode
0000414A                            
0000414A                            ; ---------------------------------------------------------------------------
0000414A                            ; Main level loop (when	all title card and loading sequences are finished)
0000414A                            ; ---------------------------------------------------------------------------
0000414A                            
0000414A                            Level_MainLoop:
0000414A 6100 D492                  		bsr.w	PauseGame
0000414E 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00004154 6100 EBE4                  		bsr.w	DelayProgram
00004158 5278 FE04                  		addq.w	#1,($FFFFFE04).w ; add 1 to level timer
0000415C 6100 0000                  		bsr.w	MoveSonicInDemo
00004160 6100 0000                  		bsr.w	LZWaterEffects
00004164 4EB9 0000 0000             		jsr	ObjectsLoad
0000416A 4A78 FE08                  		tst.w	($FFFFFE08).w
0000416E 6600                       		bne.s	loc_3B10
00004170 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00004176 6400                       		bcc.s	loc_3B14
00004178                            
00004178                            loc_3B10:
00004178 6100 0000                  		bsr.w	DeformBgLayer
0000417C                            
0000417C                            loc_3B14:
0000417C 4EB9 0000 0000             		jsr	BuildSprites
00004182 4EB9 0000 0000             		jsr	ObjPosLoad
00004188 6100 D9E8                  		bsr.w	PalCycle_Load
0000418C 6100 D694                  		bsr.w	RunPLC_RAM
00004190 6100 0000                  		bsr.w	OscillateNumDo
00004194 6100 0000                  		bsr.w	ChangeRingFrame
00004198 6100 0000                  		bsr.w	SignpostArtLoad
0000419C 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
000041A2 6700                       		beq.s	Level_ChkDemo	; if screen mode is 08 (demo), branch
000041A4 4A78 FE02                  		tst.w	($FFFFFE02).w	; is the level set to restart?
000041A8 6600 FC02                  		bne.w	Level		; if yes, branch
000041AC 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
000041B2 6700 FF96                  		beq.w	Level_MainLoop	; if screen mode is $0C	(level), branch
000041B6 4E75                       		rts	
000041B8                            ; ===========================================================================
000041B8                            
000041B8                            Level_ChkDemo:				; XREF: Level_MainLoop
000041B8 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
000041BC 6600                       		bne.s	Level_EndDemo	; if yes, branch
000041BE 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
000041C2 6700                       		beq.s	Level_EndDemo	; if not, branch
000041C4 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
000041CA 6700 FF7E                  		beq.w	Level_MainLoop	; if screen mode is 08 (demo), branch
000041CE 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
000041D4 4E75                       		rts	
000041D6                            ; ===========================================================================
000041D6                            
000041D6                            Level_EndDemo:				; XREF: Level_ChkDemo
000041D6 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w ; is screen mode 08 (demo)?
000041DC 6600                       		bne.s	loc_3B88	; if not, branch
000041DE 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
000041E4 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
000041E8 6A00                       		bpl.s	loc_3B88	; if yes, branch
000041EA 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; go	to credits
000041F0                            
000041F0                            loc_3B88:
000041F0 31FC 003C F614             		move.w	#$3C,($FFFFF614).w
000041F6 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000041FC 4278 F794                  		clr.w	($FFFFF794).w
00004200                            
00004200                            loc_3B98:
00004200 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00004206 6100 EB32                  		bsr.w	DelayProgram
0000420A 6100 0000                  		bsr.w	MoveSonicInDemo
0000420E 4EB9 0000 0000             		jsr	ObjectsLoad
00004214 4EB9 0000 0000             		jsr	BuildSprites
0000421A 4EB9 0000 0000             		jsr	ObjPosLoad
00004220 5378 F794                  		subq.w	#1,($FFFFF794).w
00004224 6A00                       		bpl.s	loc_3BC8
00004226 31FC 0002 F794             		move.w	#2,($FFFFF794).w
0000422C 6100 DE46                  		bsr.w	Pal_FadeOut
00004230                            
00004230                            loc_3BC8:
00004230 4A78 F614                  		tst.w	($FFFFF614).w
00004234 66CA                       		bne.s	loc_3B98
00004236 4E75                       		rts	
00004238                            ; ===========================================================================
00004238                            ; ---------------------------------------------------------------------------
00004238                            ; Subroutine to	do special water effects in Labyrinth Zone
00004238                            ; ---------------------------------------------------------------------------
00004238                            
00004238                            LZWaterEffects:				; XREF: Level
00004238 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
0000423E 6600                       		bne.s	locret_3C28	; if not, branch
00004240 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00004246 6400                       		bcc.s	LZMoveWater
00004248 6100 0000                  		bsr.w	LZWindTunnels
0000424C 6100 0000                  		bsr.w	LZWaterSlides
00004250 6100 0000                  		bsr.w	LZDynamicWater
00004254                            
00004254                            LZMoveWater:
00004254 4238 F64E                  		clr.b	($FFFFF64E).w
00004258 7000                       		moveq	#0,d0
0000425A 1038 FE60                  		move.b	($FFFFFE60).w,d0
0000425E E248                       		lsr.w	#1,d0
00004260 D078 F648                  		add.w	($FFFFF648).w,d0
00004264 31C0 F646                  		move.w	d0,($FFFFF646).w
00004268 3038 F646                  		move.w	($FFFFF646).w,d0
0000426C 9078 F704                  		sub.w	($FFFFF704).w,d0
00004270 6400                       		bcc.s	loc_3C1A
00004272 4A40                       		tst.w	d0
00004274 6A00                       		bpl.s	loc_3C1A
00004276 11FC 00DF F625             		move.b	#-$21,($FFFFF625).w
0000427C 11FC 0001 F64E             		move.b	#1,($FFFFF64E).w
00004282                            
00004282                            loc_3C1A:
00004282 0C40 00DF                  		cmpi.w	#$DF,d0
00004286 6500                       		bcs.s	loc_3C24
00004288 303C 00DF                  		move.w	#$DF,d0
0000428C                            
0000428C                            loc_3C24:
0000428C 11C0 F625                  		move.b	d0,($FFFFF625).w
00004290                            
00004290                            locret_3C28:
00004290 4E75                       		rts	
00004292                            ; ===========================================================================
00004292                            ; ---------------------------------------------------------------------------
00004292                            ; Labyrinth default water heights
00004292                            ; ---------------------------------------------------------------------------
00004292                            WaterHeight:	incbin	misc\lz_heigh.bin
0000429A                            		even
0000429A                            ; ===========================================================================
0000429A                            
0000429A                            ; ---------------------------------------------------------------------------
0000429A                            ; Labyrinth dynamic water routines
0000429A                            ; ---------------------------------------------------------------------------
0000429A                            
0000429A                            LZDynamicWater:				; XREF: LZWaterEffects
0000429A 7000                       		moveq	#0,d0
0000429C 1038 FE11                  		move.b	($FFFFFE11).w,d0
000042A0 D040                       		add.w	d0,d0
000042A2 303B 0000                  		move.w	DynWater_Index(pc,d0.w),d0
000042A6 4EBB 0000                  		jsr	DynWater_Index(pc,d0.w)
000042AA 7200                       		moveq	#0,d1
000042AC 1238 F64C                  		move.b	($FFFFF64C).w,d1
000042B0 3038 F64A                  		move.w	($FFFFF64A).w,d0
000042B4 9078 F648                  		sub.w	($FFFFF648).w,d0
000042B8 6700                       		beq.s	locret_3C5A
000042BA 6400                       		bcc.s	loc_3C56
000042BC 4441                       		neg.w	d1
000042BE                            
000042BE                            loc_3C56:
000042BE D378 F648                  		add.w	d1,($FFFFF648).w
000042C2                            
000042C2                            locret_3C5A:
000042C2 4E75                       		rts	
000042C4                            ; ===========================================================================
000042C4 0000                       DynWater_Index:	dc.w DynWater_LZ1-DynWater_Index
000042C6 0000                       		dc.w DynWater_LZ2-DynWater_Index
000042C8 0000                       		dc.w DynWater_LZ3-DynWater_Index
000042CA 0000                       		dc.w DynWater_SBZ3-DynWater_Index
000042CC                            ; ===========================================================================
000042CC                            
000042CC                            DynWater_LZ1:				; XREF: DynWater_Index
000042CC 3038 F700                  		move.w	($FFFFF700).w,d0
000042D0 1438 F64D                  		move.b	($FFFFF64D).w,d2
000042D4 6600                       		bne.s	loc_3CD0
000042D6 323C 00B8                  		move.w	#$B8,d1
000042DA 0C40 0600                  		cmpi.w	#$600,d0
000042DE 6500                       		bcs.s	loc_3CB4
000042E0 323C 0108                  		move.w	#$108,d1
000042E4 0C78 0200 D00C             		cmpi.w	#$200,($FFFFD00C).w
000042EA 6500                       		bcs.s	loc_3CBA
000042EC 0C40 0C00                  		cmpi.w	#$C00,d0
000042F0 6500                       		bcs.s	loc_3CB4
000042F2 323C 0318                  		move.w	#$318,d1
000042F6 0C40 1080                  		cmpi.w	#$1080,d0
000042FA 6500                       		bcs.s	loc_3CB4
000042FC 11FC 0080 F7E5             		move.b	#-$80,($FFFFF7E5).w
00004302 323C 05C8                  		move.w	#$5C8,d1
00004306 0C40 1380                  		cmpi.w	#$1380,d0
0000430A 6500                       		bcs.s	loc_3CB4
0000430C 323C 03A8                  		move.w	#$3A8,d1
00004310 B278 F648                  		cmp.w	($FFFFF648).w,d1
00004314 6600                       		bne.s	loc_3CB4
00004316 11FC 0001 F64D             		move.b	#1,($FFFFF64D).w
0000431C                            
0000431C                            loc_3CB4:
0000431C 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004320 4E75                       		rts	
00004322                            ; ===========================================================================
00004322                            
00004322                            loc_3CBA:				; XREF: DynWater_LZ1
00004322 0C40 0C80                  		cmpi.w	#$C80,d0
00004326 65F4                       		bcs.s	loc_3CB4
00004328 323C 00E8                  		move.w	#$E8,d1
0000432C 0C40 1500                  		cmpi.w	#$1500,d0
00004330 65EA                       		bcs.s	loc_3CB4
00004332 323C 0108                  		move.w	#$108,d1
00004336 60E4                       		bra.s	loc_3CB4
00004338                            ; ===========================================================================
00004338                            
00004338                            loc_3CD0:				; XREF: DynWater_LZ1
00004338 5302                       		subq.b	#1,d2
0000433A 6600                       		bne.s	locret_3CF4
0000433C 0C78 02E0 D00C             		cmpi.w	#$2E0,($FFFFD00C).w
00004342 6400                       		bcc.s	locret_3CF4
00004344 323C 03A8                  		move.w	#$3A8,d1
00004348 0C40 1300                  		cmpi.w	#$1300,d0
0000434C 6500                       		bcs.s	loc_3CF0
0000434E 323C 0108                  		move.w	#$108,d1
00004352 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
00004358                            
00004358                            loc_3CF0:
00004358 31C1 F64A                  		move.w	d1,($FFFFF64A).w
0000435C                            
0000435C                            locret_3CF4:
0000435C 4E75                       		rts	
0000435E                            ; ===========================================================================
0000435E                            
0000435E                            DynWater_LZ2:				; XREF: DynWater_Index
0000435E 3038 F700                  		move.w	($FFFFF700).w,d0
00004362 323C 0328                  		move.w	#$328,d1
00004366 0C40 0500                  		cmpi.w	#$500,d0
0000436A 6500                       		bcs.s	loc_3D12
0000436C 323C 03C8                  		move.w	#$3C8,d1
00004370 0C40 0B00                  		cmpi.w	#$B00,d0
00004374 6500                       		bcs.s	loc_3D12
00004376 323C 0428                  		move.w	#$428,d1
0000437A                            
0000437A                            loc_3D12:
0000437A 31C1 F64A                  		move.w	d1,($FFFFF64A).w
0000437E 4E75                       		rts	
00004380                            ; ===========================================================================
00004380                            
00004380                            DynWater_LZ3:				; XREF: DynWater_Index
00004380 3038 F700                  		move.w	($FFFFF700).w,d0
00004384 1438 F64D                  		move.b	($FFFFF64D).w,d2
00004388 6600                       		bne.s	loc_3D5E
0000438A 323C 0500                  		move.w	#$500,d1
0000438E 0C40 0600                  		cmpi.w	#$600,d0
00004392 6500                       		bcs.s	loc_3D54
00004394 0C40 1B00                  		cmpi.w	#$1B00,d0
00004398 6500                       		bcs.s	loc_3D54
0000439A 323C 0850                  		move.w	#$850,d1
0000439E                            
0000439E                            loc_3D54:
0000439E 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000043A2 31C1 F648                  		move.w	d1,($FFFFF648).w
000043A6 4E75                       		rts	
000043A8                            ; ===========================================================================
000043A8                            
000043A8                            loc_3D5E:				; XREF: DynWater_LZ3
000043A8 5302                       		subq.b	#1,d2
000043AA 6600                       		bne.s	loc_3DA8
000043AC 323C 04C8                  		move.w	#$4C8,d1
000043B0 0C40 0770                  		cmpi.w	#$770,d0
000043B4 6500                       		bcs.s	loc_3DA2
000043B6 323C 0308                  		move.w	#$308,d1
000043BA 0C40 1400                  		cmpi.w	#$1400,d0
000043BE 6500                       		bcs.s	loc_3DA2
000043C0 0C78 0508 F64A             		cmpi.w	#$508,($FFFFF64A).w
000043C6 6700                       		beq.s	loc_3D8E
000043C8 0C78 0600 D00C             		cmpi.w	#$600,($FFFFD00C).w
000043CE 6400                       		bcc.s	loc_3D8E
000043D0 0C78 0280 D00C             		cmpi.w	#$280,($FFFFD00C).w
000043D6 6400                       		bcc.s	loc_3DA2
000043D8                            
000043D8                            loc_3D8E:
000043D8 323C 0508                  		move.w	#$508,d1
000043DC 31C1 F648                  		move.w	d1,($FFFFF648).w
000043E0 0C40 1770                  		cmpi.w	#$1770,d0
000043E4 6500                       		bcs.s	loc_3DA2
000043E6 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
000043EC                            
000043EC                            loc_3DA2:
000043EC 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000043F0 4E75                       		rts	
000043F2                            ; ===========================================================================
000043F2                            
000043F2                            loc_3DA8:
000043F2 5302                       		subq.b	#1,d2
000043F4 6600                       		bne.s	loc_3DD2
000043F6 323C 0508                  		move.w	#$508,d1
000043FA 0C40 1860                  		cmpi.w	#$1860,d0
000043FE 6500                       		bcs.s	loc_3DCC
00004400 323C 0188                  		move.w	#$188,d1
00004404 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00004408 6400                       		bcc.s	loc_3DC6
0000440A B278 F648                  		cmp.w	($FFFFF648).w,d1
0000440E 6600                       		bne.s	loc_3DCC
00004410                            
00004410                            loc_3DC6:
00004410 11FC 0003 F64D             		move.b	#3,($FFFFF64D).w
00004416                            
00004416                            loc_3DCC:
00004416 31C1 F64A                  		move.w	d1,($FFFFF64A).w
0000441A 4E75                       		rts	
0000441C                            ; ===========================================================================
0000441C                            
0000441C                            loc_3DD2:
0000441C 5302                       		subq.b	#1,d2
0000441E 6600                       		bne.s	loc_3E0E
00004420 323C 0188                  		move.w	#$188,d1
00004424 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00004428 6500                       		bcs.s	loc_3E04
0000442A 323C 0900                  		move.w	#$900,d1
0000442E 0C40 1BC0                  		cmpi.w	#$1BC0,d0
00004432 6500                       		bcs.s	loc_3E04
00004434 11FC 0004 F64D             		move.b	#4,($FFFFF64D).w
0000443A 31FC 0608 F64A             		move.w	#$608,($FFFFF64A).w
00004440 31FC 07C0 F648             		move.w	#$7C0,($FFFFF648).w
00004446 11FC 0001 F7E8             		move.b	#1,($FFFFF7E8).w
0000444C 4E75                       		rts	
0000444E                            ; ===========================================================================
0000444E                            
0000444E                            loc_3E04:
0000444E 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004452 31C1 F648                  		move.w	d1,($FFFFF648).w
00004456 4E75                       		rts	
00004458                            ; ===========================================================================
00004458                            
00004458                            loc_3E0E:
00004458 0C40 1E00                  		cmpi.w	#$1E00,d0
0000445C 6500                       		bcs.s	locret_3E1A
0000445E 31FC 0128 F64A             		move.w	#$128,($FFFFF64A).w
00004464                            
00004464                            locret_3E1A:
00004464 4E75                       		rts	
00004466                            ; ===========================================================================
00004466                            
00004466                            DynWater_SBZ3:				; XREF: DynWater_Index
00004466 323C 0228                  		move.w	#$228,d1
0000446A 0C78 0F00 F700             		cmpi.w	#$F00,($FFFFF700).w
00004470 6500                       		bcs.s	loc_3E2C
00004472 323C 04C8                  		move.w	#$4C8,d1
00004476                            
00004476                            loc_3E2C:
00004476 31C1 F64A                  		move.w	d1,($FFFFF64A).w
0000447A 4E75                       		rts
0000447C                            
0000447C                            ; ---------------------------------------------------------------------------
0000447C                            ; Labyrinth Zone "wind tunnels"	subroutine
0000447C                            ; ---------------------------------------------------------------------------
0000447C                            
0000447C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000447C                            
0000447C                            
0000447C                            LZWindTunnels:				; XREF: LZWaterEffects
0000447C 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00004480 6600 0000                  		bne.w	locret_3F0A	; if yes, branch
00004484 45F9 0000 0000             		lea	(LZWind_Data).l,a2
0000448A 7000                       		moveq	#0,d0
0000448C 1038 FE11                  		move.b	($FFFFFE11).w,d0
00004490 E748                       		lsl.w	#3,d0
00004492 D4C0                       		adda.w	d0,a2
00004494 7200                       		moveq	#0,d1
00004496 4A38 FE11                  		tst.b	($FFFFFE11).w
0000449A 6600                       		bne.s	loc_3E56
0000449C 7201                       		moveq	#1,d1
0000449E 514A                       		subq.w	#8,a2
000044A0                            
000044A0                            loc_3E56:
000044A0 43F8 D000                  		lea	($FFFFD000).w,a1
000044A4                            
000044A4                            LZWind_Loop:
000044A4 3029 0008                  		move.w	8(a1),d0
000044A8 B052                       		cmp.w	(a2),d0
000044AA 6500 0000                  		bcs.w	loc_3EF4
000044AE B06A 0004                  		cmp.w	4(a2),d0
000044B2 6400 0000                  		bcc.w	loc_3EF4
000044B6 3429 000C                  		move.w	$C(a1),d2
000044BA B46A 0002                  		cmp.w	2(a2),d2
000044BE 6500                       		bcs.s	loc_3EF4
000044C0 B46A 0006                  		cmp.w	6(a2),d2
000044C4 6400                       		bcc.s	loc_3EF4
000044C6 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000044CA 0200 003F                  		andi.b	#$3F,d0
000044CE 6600                       		bne.s	loc_3E90
000044D0 303C 00D0                  		move.w	#$D0,d0
000044D4 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play rushing water sound
000044DA                            
000044DA                            loc_3E90:
000044DA 4A38 F7C9                  		tst.b	($FFFFF7C9).w
000044DE 6600 0000                  		bne.w	locret_3F0A
000044E2 0C29 0004 0024             		cmpi.b	#4,$24(a1)
000044E8 6400                       		bcc.s	loc_3F06
000044EA 11FC 0001 F7C7             		move.b	#1,($FFFFF7C7).w
000044F0 0440 0080                  		subi.w	#$80,d0
000044F4 B052                       		cmp.w	(a2),d0
000044F6 6400                       		bcc.s	LZWind_Move
000044F8 7002                       		moveq	#2,d0
000044FA 0C38 0001 FE11             		cmpi.b	#1,($FFFFFE11).w
00004500 6600                       		bne.s	loc_3EBA
00004502 4440                       		neg.w	d0
00004504                            
00004504                            loc_3EBA:
00004504 D169 000C                  		add.w	d0,$C(a1)
00004508                            
00004508                            LZWind_Move:
00004508 5869 0008                  		addq.w	#4,8(a1)
0000450C 337C 0400 0010             		move.w	#$400,$10(a1)	; move Sonic horizontally
00004512 337C 0000 0012             		move.w	#0,$12(a1)
00004518 137C 000F 001C             		move.b	#$F,$1C(a1)	; use floating animation
0000451E 08E9 0001 0022             		bset	#1,$22(a1)
00004524 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up pressed?
0000452A 6700                       		beq.s	LZWind_MoveDown	; if not, branch
0000452C 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
00004530                            
00004530                            LZWind_MoveDown:
00004530 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00004536 6700                       		beq.s	locret_3EF2	; if not, branch
00004538 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
0000453C                            
0000453C                            locret_3EF2:
0000453C 4E75                       		rts	
0000453E                            ; ===========================================================================
0000453E                            
0000453E                            loc_3EF4:				; XREF: LZWindTunnels
0000453E 504A                       		addq.w	#8,a2
00004540 51C9 FF62                  		dbf	d1,LZWind_Loop
00004544 4A38 F7C7                  		tst.b	($FFFFF7C7).w
00004548 6700                       		beq.s	locret_3F0A
0000454A 137C 0000 001C             		move.b	#0,$1C(a1)
00004550                            
00004550                            loc_3F06:
00004550 4238 F7C7                  		clr.b	($FFFFF7C7).w
00004554                            
00004554                            locret_3F0A:
00004554 4E75                       		rts	
00004556                            ; End of function LZWindTunnels
00004556                            
00004556                            ; ===========================================================================
00004556 0A80 0300 0C10 0380        		dc.w $A80, $300, $C10, $380
0000455E 0F80 0100 1410 0180 0460+  LZWind_Data:	dc.w $F80, $100, $1410,	$180, $460, $400, $710,	$480, $A20
00004570 0600 1610 06E0 0C80 0600+  		dc.w $600, $1610, $6E0,	$C80, $600, $13D0, $680
0000457E                            					; XREF: LZWindTunnels
0000457E                            		even
0000457E                            
0000457E                            ; ---------------------------------------------------------------------------
0000457E                            ; Labyrinth Zone water slide subroutine
0000457E                            ; ---------------------------------------------------------------------------
0000457E                            
0000457E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000457E                            
0000457E                            
0000457E                            LZWaterSlides:				; XREF: LZWaterEffects
0000457E 43F8 D000                  		lea	($FFFFD000).w,a1
00004582 0829 0001 0022             		btst	#1,$22(a1)
00004588 6600                       		bne.s	loc_3F6A
0000458A 3029 000C                  		move.w	$C(a1),d0
0000458E E248                       		lsr.w	#1,d0
00004590 0240 0380                  		andi.w	#$380,d0
00004594 1229 0008                  		move.b	8(a1),d1
00004598 0241 007F                  		andi.w	#$7F,d1
0000459C D041                       		add.w	d1,d0
0000459E 45F8 A400                  		lea	($FFFFA400).w,a2
000045A2 1032 0000                  		move.b	(a2,d0.w),d0
000045A6 45FA 0000                  		lea	byte_3FCF(pc),a2
000045AA 7206                       		moveq	#6,d1
000045AC                            
000045AC                            loc_3F62:
000045AC B022                       		cmp.b	-(a2),d0
000045AE 57C9 FFFC                  		dbeq	d1,loc_3F62
000045B2 6700                       		beq.s	LZSlide_Move
000045B4                            
000045B4                            loc_3F6A:
000045B4 4A38 F7CA                  		tst.b	($FFFFF7CA).w
000045B8 6700                       		beq.s	locret_3F7A
000045BA 337C 0005 003E             		move.w	#5,$3E(a1)
000045C0 4238 F7CA                  		clr.b	($FFFFF7CA).w
000045C4                            
000045C4                            locret_3F7A:
000045C4 4E75                       		rts	
000045C6                            ; ===========================================================================
000045C6                            
000045C6                            LZSlide_Move:				; XREF: LZWaterSlides
000045C6 0C41 0003                  		cmpi.w	#3,d1
000045CA 6400                       		bcc.s	loc_3F84
000045CC 4E71                       		nop	
000045CE                            
000045CE                            loc_3F84:
000045CE 08A9 0000 0022             		bclr	#0,$22(a1)
000045D4 103B 1000                  		move.b	byte_3FC0(pc,d1.w),d0
000045D8 1340 0014                  		move.b	d0,$14(a1)
000045DC 6A00                       		bpl.s	loc_3F9A
000045DE 08E9 0000 0022             		bset	#0,$22(a1)
000045E4                            
000045E4                            loc_3F9A:
000045E4 4229 0015                  		clr.b	$15(a1)
000045E8 137C 001B 001C             		move.b	#$1B,$1C(a1)	; use Sonic's "sliding" animation
000045EE 11FC 0001 F7CA             		move.b	#1,($FFFFF7CA).w ; lock	controls (except jumping)
000045F4 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000045F8 0200 001F                  		andi.b	#$1F,d0
000045FC 6600                       		bne.s	locret_3FBE
000045FE 303C 00D0                  		move.w	#$D0,d0
00004602 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play water sound
00004608                            
00004608                            locret_3FBE:
00004608 4E75                       		rts	
0000460A                            ; End of function LZWaterSlides
0000460A                            
0000460A                            ; ===========================================================================
0000460A 0AF5 0AF6 F5F4 0B00 0207+  byte_3FC0:	dc.b $A, $F5, $A, $F6, $F5, $F4, $B, 0,	2, 7, 3, $4C, $4B, 8, 4
00004619 00                         byte_3FCF:	dc.b 0			; XREF: LZWaterSlides
0000461A                            		even
0000461A                            
0000461A                            ; ---------------------------------------------------------------------------
0000461A                            ; Subroutine to	move Sonic in demo mode
0000461A                            ; ---------------------------------------------------------------------------
0000461A                            
0000461A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000461A                            
0000461A                            
0000461A                            MoveSonicInDemo:			; XREF: Level_MainLoop; et al
0000461A 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
0000461E 6600                       		bne.s	MoveDemo_On	; if yes, branch
00004620 4E75                       		rts	
00004622                            ; ===========================================================================
00004622                            
00004622                            ; This is an unused subroutine for recording a demo
00004622                            
00004622                            MoveDemo_Record:
00004622 43F9 0008 0000             		lea	($80000).l,a1
00004628 3038 F790                  		move.w	($FFFFF790).w,d0
0000462C D2C0                       		adda.w	d0,a1
0000462E 1038 F604                  		move.b	($FFFFF604).w,d0
00004632 B011                       		cmp.b	(a1),d0
00004634 6600                       		bne.s	loc_3FFA
00004636 5229 0001                  		addq.b	#1,1(a1)
0000463A 0C29 00FF 0001             		cmpi.b	#$FF,1(a1)
00004640 6700                       		beq.s	loc_3FFA
00004642 4E75                       		rts	
00004644                            ; ===========================================================================
00004644                            
00004644                            loc_3FFA:				; XREF: MoveDemo_Record
00004644 1340 0002                  		move.b	d0,2(a1)
00004648 137C 0000 0003             		move.b	#0,3(a1)
0000464E 5478 F790                  		addq.w	#2,($FFFFF790).w
00004652 0278 03FF F790             		andi.w	#$3FF,($FFFFF790).w
00004658 4E75                       		rts	
0000465A                            ; ===========================================================================
0000465A                            
0000465A                            MoveDemo_On:				; XREF: MoveSonicInDemo
0000465A 4A38 F604                  		tst.b	($FFFFF604).w
0000465E 6A00                       		bpl.s	loc_4022
00004660 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00004664 6B00                       		bmi.s	loc_4022
00004666 11FC 0004 F600             		move.b	#4,($FFFFF600).w
0000466C                            
0000466C                            loc_4022:
0000466C 43F9 0000 0000             		lea	(Demo_Index).l,a1
00004672 7000                       		moveq	#0,d0
00004674 1038 FE10                  		move.b	($FFFFFE10).w,d0
00004678 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
0000467E 6600                       		bne.s	loc_4038
00004680 7006                       		moveq	#6,d0
00004682                            
00004682                            loc_4038:
00004682 E548                       		lsl.w	#2,d0
00004684 2271 0000                  		movea.l	(a1,d0.w),a1
00004688 4A78 FFF0                  		tst.w	($FFFFFFF0).w
0000468C 6A00                       		bpl.s	loc_4056
0000468E 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1
00004694 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00004698 5340                       		subq.w	#1,d0
0000469A E548                       		lsl.w	#2,d0
0000469C 2271 0000                  		movea.l	(a1,d0.w),a1
000046A0                            
000046A0                            loc_4056:
000046A0 3038 F790                  		move.w	($FFFFF790).w,d0
000046A4 D2C0                       		adda.w	d0,a1
000046A6 1011                       		move.b	(a1),d0
000046A8 41F8 F604                  		lea	($FFFFF604).w,a0
000046AC 1200                       		move.b	d0,d1
000046AE 1410                       		move.b	(a0),d2
000046B0 B500                       		eor.b	d2,d0
000046B2 10C1                       		move.b	d1,(a0)+
000046B4 C001                       		and.b	d1,d0
000046B6 10C0                       		move.b	d0,(a0)+
000046B8 5338 F792                  		subq.b	#1,($FFFFF792).w
000046BC 6400                       		bcc.s	locret_407E
000046BE 11E9 0003 F792             		move.b	3(a1),($FFFFF792).w
000046C4 5478 F790                  		addq.w	#2,($FFFFF790).w
000046C8                            
000046C8                            locret_407E:
000046C8 4E75                       		rts	
000046CA                            ; End of function MoveSonicInDemo
000046CA                            
000046CA                            ; ===========================================================================
000046CA                            ; ---------------------------------------------------------------------------
000046CA                            ; Demo sequence	pointers
000046CA                            ; ---------------------------------------------------------------------------
000046CA                            Demo_Index:
000046CA                            	include "_inc\Demo pointers for intro.asm"
000046CA                            ; ---------------------------------------------------------------------------
000046CA                            ; Demo sequence	pointers
000046CA                            ; ---------------------------------------------------------------------------
000046CA 0000 0000                  	dc.l Demo_GHZ
000046CE 0000 0000                  	dc.l Demo_GHZ
000046D2 0000 0000                  	dc.l Demo_MZ
000046D6 0000 0000                  	dc.l Demo_MZ
000046DA 0000 0000                  	dc.l Demo_SYZ
000046DE 0000 0000                  	dc.l Demo_SYZ
000046E2 0000 0000                  	dc.l Demo_SS
000046E6 0000 0000                  	dc.l Demo_SS
000046E6 0000 0000                  	dc.l Demo_SS
000046EA                            
000046EA                            Demo_EndIndex:
000046EA                            	include "_inc\Demo pointers for ending.asm"
000046EA                            ; ---------------------------------------------------------------------------
000046EA                            ; Demo (ending) sequence pointers
000046EA                            ; ---------------------------------------------------------------------------
000046EA 0000 0000                  	dc.l Demo_EndGHZ1
000046EE 0000 0000                  	dc.l Demo_EndMZ
000046F2 0000 0000                  	dc.l Demo_EndSYZ
000046F6 0000 0000                  	dc.l Demo_EndLZ
000046FA 0000 0000                  	dc.l Demo_EndSLZ
000046FE 0000 0000                  	dc.l Demo_EndSBZ1
00004702 0000 0000                  	dc.l Demo_EndSBZ2
00004706 0000 0000                  	dc.l Demo_EndGHZ2
00004706 0000 0000                  	dc.l Demo_EndGHZ2
0000470A                            
0000470A 008B 0837 0042 085C 006A+  		dc.b 0,	$8B, 8,	$37, 0,	$42, 8,	$5C, 0,	$6A, 8,	$5F, 0,	$2F, 8,	$2C
0000471A 0021 0803 2830 0808 002E+  		dc.b 0,	$21, 8,	3, $28,	$30, 8,	8, 0, $2E, 8, $15, 0, $F, 8, $46
0000472A 001A 08FF 08CA 0000 0000+  		dc.b 0,	$1A, 8,	$FF, 8,	$CA, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0
0000473A                            		even
0000473A                            
0000473A                            ; ---------------------------------------------------------------------------
0000473A                            ; Collision index loading subroutine
0000473A                            ; ---------------------------------------------------------------------------
0000473A                            
0000473A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000473A                            
0000473A                            
0000473A                            ColIndexLoad:				; XREF: Level
0000473A 7000                       		moveq	#0,d0
0000473C 1038 FE10                  		move.b	($FFFFFE10).w,d0
00004740 E548                       		lsl.w	#2,d0
00004742 21FB 0000 F796             		move.l	ColPointers(pc,d0.w),($FFFFF796).w
00004748 4E75                       		rts	
0000474A                            ; End of function ColIndexLoad
0000474A                            
0000474A                            ; ===========================================================================
0000474A                            ; ---------------------------------------------------------------------------
0000474A                            ; Collision index pointers
0000474A                            ; ---------------------------------------------------------------------------
0000474A                            ColPointers:
0000474A                            	include "_inc\Collision index pointers.asm"
0000474A                            ; ---------------------------------------------------------------------------
0000474A                            ; Collision index pointers
0000474A                            ; ---------------------------------------------------------------------------
0000474A 0000 0000                  	dc.l Col_GHZ
0000474E 0000 0000                  	dc.l Col_LZ
00004752 0000 0000                  	dc.l Col_MZ
00004756 0000 0000                  	dc.l Col_SLZ
0000475A 0000 0000                  	dc.l Col_SYZ
0000475E 0000 0000                  	dc.l Col_SBZ
00004762 0000 0000                  	dc.l Col_GHZ ; this is the ending just so it does not fuck up
00004766 0000 0000                  	dc.l Col_BHZ
00004766 0000 0000                  	dc.l Col_BHZ
0000476A                            
0000476A                            ; ---------------------------------------------------------------------------
0000476A                            ; Oscillating number subroutine
0000476A                            ; ---------------------------------------------------------------------------
0000476A                            
0000476A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000476A                            
0000476A                            
0000476A                            OscillateNumInit:			; XREF: Level
0000476A 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
0000476E 45F9 0000 0000             		lea	(Osc_Data).l,a2
00004774 7220                       		moveq	#$20,d1
00004776                            
00004776                            Osc_Loop:
00004776 32DA                       		move.w	(a2)+,(a1)+
00004778 51C9 FFFC                  		dbf	d1,Osc_Loop
0000477C 4E75                       		rts	
0000477E                            ; End of function OscillateNumInit
0000477E                            
0000477E                            ; ===========================================================================
0000477E 007C 0080                  Osc_Data:	dc.w $7C, $80		; baseline values
00004782 0000 0080                  		dc.w 0,	$80
00004786 0000 0080                  		dc.w 0,	$80
0000478A 0000 0080                  		dc.w 0,	$80
0000478E 0000 0080                  		dc.w 0,	$80
00004792 0000 0080                  		dc.w 0,	$80
00004796 0000 0080                  		dc.w 0,	$80
0000479A 0000 0080                  		dc.w 0,	$80
0000479E 0000 0080                  		dc.w 0,	$80
000047A2 0000 50F0                  		dc.w 0,	$50F0
000047A6 011E 2080                  		dc.w $11E, $2080
000047AA 00B4 3080                  		dc.w $B4, $3080
000047AE 010E 5080                  		dc.w $10E, $5080
000047B2 01C2 7080                  		dc.w $1C2, $7080
000047B6 0276 0080                  		dc.w $276, $80
000047BA 0000 0080                  		dc.w 0,	$80
000047BE 0000                       		dc.w 0
000047C0                            		even
000047C0                            
000047C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000047C0                            
000047C0                            
000047C0                            OscillateNumDo:				; XREF: Level
000047C0 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000047C6 6400                       		bcc.s	locret_41C4
000047C8 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
000047CC 45F9 0000 0000             		lea	(Osc_Data2).l,a2
000047D2 3619                       		move.w	(a1)+,d3
000047D4 720F                       		moveq	#$F,d1
000047D6                            
000047D6                            loc_4184:
000047D6 341A                       		move.w	(a2)+,d2
000047D8 381A                       		move.w	(a2)+,d4
000047DA 0303                       		btst	d1,d3
000047DC 6600                       		bne.s	loc_41A4
000047DE 3029 0002                  		move.w	2(a1),d0
000047E2 D042                       		add.w	d2,d0
000047E4 3340 0002                  		move.w	d0,2(a1)
000047E8 D151                       		add.w	d0,0(a1)
000047EA B811                       		cmp.b	0(a1),d4
000047EC 6200                       		bhi.s	loc_41BA
000047EE 03C3                       		bset	d1,d3
000047F0 6000                       		bra.s	loc_41BA
000047F2                            ; ===========================================================================
000047F2                            
000047F2                            loc_41A4:				; XREF: OscillateNumDo
000047F2 3029 0002                  		move.w	2(a1),d0
000047F6 9042                       		sub.w	d2,d0
000047F8 3340 0002                  		move.w	d0,2(a1)
000047FC D151                       		add.w	d0,0(a1)
000047FE B811                       		cmp.b	0(a1),d4
00004800 6300                       		bls.s	loc_41BA
00004802 0383                       		bclr	d1,d3
00004804                            
00004804                            loc_41BA:
00004804 5849                       		addq.w	#4,a1
00004806 51C9 FFCE                  		dbf	d1,loc_4184
0000480A 31C3 FE5E                  		move.w	d3,($FFFFFE5E).w
0000480E                            
0000480E                            locret_41C4:
0000480E 4E75                       		rts	
00004810                            ; End of function OscillateNumDo
00004810                            
00004810                            ; ===========================================================================
00004810 0002 0010                  Osc_Data2:	dc.w 2,	$10		; XREF: OscillateNumDo
00004814 0002 0018                  		dc.w 2,	$18
00004818 0002 0020                  		dc.w 2,	$20
0000481C 0002 0030                  		dc.w 2,	$30
00004820 0004 0020                  		dc.w 4,	$20
00004824 0008 0008                  		dc.w 8,	8
00004828 0008 0040                  		dc.w 8,	$40
0000482C 0004 0040                  		dc.w 4,	$40
00004830 0002 0050                  		dc.w 2,	$50
00004834 0002 0050                  		dc.w 2,	$50
00004838 0002 0020                  		dc.w 2,	$20
0000483C 0003 0030                  		dc.w 3,	$30
00004840 0005 0050                  		dc.w 5,	$50
00004844 0007 0070                  		dc.w 7,	$70
00004848 0002 0010                  		dc.w 2,	$10
0000484C 0002 0010                  		dc.w 2,	$10
00004850                            		even
00004850                            
00004850                            ; ---------------------------------------------------------------------------
00004850                            ; Subroutine to	change object animation	variables (rings, giant	rings)
00004850                            ; ---------------------------------------------------------------------------
00004850                            
00004850                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004850                            
00004850                            
00004850                            ChangeRingFrame:			; XREF: Level
00004850 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
00004854 6A00                       		bpl.s	loc_421C
00004856 11FC 000B FEC0             		move.b	#$B,($FFFFFEC0).w
0000485C 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
00004860 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
00004866                            
00004866                            loc_421C:
00004866 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
0000486A 6A00                       		bpl.s	loc_4232
0000486C 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
00004872 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
00004876 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
0000487C                            
0000487C                            loc_4232:
0000487C 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
00004880 6A00                       		bpl.s	loc_4250
00004882 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
00004888 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
0000488C 0C38 0006 FEC5             		cmpi.b	#6,($FFFFFEC5).w
00004892 6500                       		bcs.s	loc_4250
00004894 11FC 0000 FEC5             		move.b	#0,($FFFFFEC5).w
0000489A                            
0000489A                            loc_4250:
0000489A 4A38 FEC6                  		tst.b	($FFFFFEC6).w
0000489E 6700                       		beq.s	locret_4272
000048A0 7000                       		moveq	#0,d0
000048A2 1038 FEC6                  		move.b	($FFFFFEC6).w,d0
000048A6 D078 FEC8                  		add.w	($FFFFFEC8).w,d0
000048AA 31C0 FEC8                  		move.w	d0,($FFFFFEC8).w
000048AE EF58                       		rol.w	#7,d0
000048B0 0240 0003                  		andi.w	#3,d0
000048B4 11C0 FEC7                  		move.b	d0,($FFFFFEC7).w
000048B8 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
000048BC                            
000048BC                            locret_4272:
000048BC 4E75                       		rts	
000048BE                            ; End of function ChangeRingFrame
000048BE                            
000048BE                            ; ---------------------------------------------------------------------------
000048BE                            ; End-of-act signpost pattern loading subroutine
000048BE                            ; ---------------------------------------------------------------------------
000048BE                            
000048BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000048BE                            
000048BE                            
000048BE                            SignpostArtLoad:			; XREF: Level
000048BE 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
000048C2 6600 0000                  		bne.w	Signpost_Exit	; if yes, branch
000048C6 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; is act number 02 (act 3)?
000048CC 6700                       		beq.s	Signpost_Exit	; if yes, branch
000048CE 3038 F700                  		move.w	($FFFFF700).w,d0
000048D2 3238 F72A                  		move.w	($FFFFF72A).w,d1
000048D6 0441 0100                  		subi.w	#$100,d1
000048DA B041                       		cmp.w	d1,d0		; has Sonic reached the	edge of	the level?
000048DC 6D00                       		blt.s	Signpost_Exit	; if not, branch
000048DE 4A38 FE1E                  		tst.b	($FFFFFE1E).w
000048E2 6700                       		beq.s	Signpost_Exit
000048E4 B278 F728                  		cmp.w	($FFFFF728).w,d1
000048E8 6700                       		beq.s	Signpost_Exit
000048EA 31C1 F728                  		move.w	d1,($FFFFF728).w ; move	left boundary to current screen	position
000048EE 7012                       		moveq	#$12,d0
000048F0 6000 CEF6                  		bra.w	LoadPLC2	; load signpost	patterns
000048F4                            ; ===========================================================================
000048F4                            
000048F4                            Signpost_Exit:
000048F4 4E75                       		rts	
000048F6                            ; End of function SignpostArtLoad
000048F6                            
000048F6                            ; ===========================================================================
000048F6                            Demo_GHZ:	incbin	demodata\i_ghz.bin
00004976                            Demo_MZ:	incbin	demodata\i_mz.bin
00004AA6                            Demo_SYZ:	incbin	demodata\i_syz.bin
00004B26                            Demo_SS:	incbin	demodata\i_ss.bin
00004C26                            ; ===========================================================================
00004C26                            
00004C26                            ; ---------------------------------------------------------------------------
00004C26                            ; Special Stage
00004C26                            ; ---------------------------------------------------------------------------
00004C26                            
00004C26                            SpecialStage:				; XREF: GameModeArray
00004C26 303C 00CA                  		move.w	#$CA,d0
00004C2A 6100 C9A6                  		bsr.w	PlaySound_Special ; play special stage entry sound
00004C2E 6100 D54E                  		bsr.w	Pal_MakeFlash
00004C32 46FC 2700                  		move	#$2700,sr
00004C36 4DF9 00C0 0004             		lea	($C00004).l,a6
00004C3C 3CBC 8B03                  		move.w	#$8B03,(a6)
00004C40 3CBC 8004                  		move.w	#$8004,(a6)
00004C44 31FC 8AAF F624             		move.w	#$8AAF,($FFFFF624).w
00004C4A 3CBC 9011                  		move.w	#$9011,(a6)
00004C4E 3038 F60C                  		move.w	($FFFFF60C).w,d0
00004C52 0200 00BF                  		andi.b	#$BF,d0
00004C56 33C0 00C0 0004             		move.w	d0,($C00004).l
00004C5C 6100 C89C                  		bsr.w	ClearScreen
00004C60 46FC 2300                  		move	#$2300,sr
00004C64 4BF9 00C0 0004             		lea	($C00004).l,a5
00004C6A 3ABC 8F01                  		move.w	#$8F01,(a5)
00004C6E 2ABC 946F 93FF             		move.l	#$946F93FF,(a5)
00004C74 3ABC 9780                  		move.w	#$9780,(a5)
00004C78 2ABC 5000 0081             		move.l	#$50000081,(a5)
00004C7E 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00004C86                            
00004C86                            loc_463C:
00004C86 3215                       		move.w	(a5),d1
00004C88 0801 0001                  		btst	#1,d1
00004C8C 66F8                       		bne.s	loc_463C
00004C8E 3ABC 8F02                  		move.w	#$8F02,(a5)
00004C92 6100 0000                  		bsr.w	SS_BGLoad
00004C96 7014                       		moveq	#$14,d0
00004C98 6100 CC88                  		bsr.w	RunPLC_ROM	; load special stage patterns
00004C9C 43F8 D000                  		lea	($FFFFD000).w,a1
00004CA0 7000                       		moveq	#0,d0
00004CA2 323C 07FF                  		move.w	#$7FF,d1
00004CA6                            
00004CA6                            SS_ClrObjRam:
00004CA6 22C0                       		move.l	d0,(a1)+
00004CA8 51C9 FFFC                  		dbf	d1,SS_ClrObjRam	; clear	the object RAM
00004CAC                            
00004CAC 43F8 F700                  		lea	($FFFFF700).w,a1
00004CB0 7000                       		moveq	#0,d0
00004CB2 323C 003F                  		move.w	#$3F,d1
00004CB6                            
00004CB6                            SS_ClrRam:
00004CB6 22C0                       		move.l	d0,(a1)+
00004CB8 51C9 FFFC                  		dbf	d1,SS_ClrRam	; clear	variables
00004CBC                            
00004CBC 43F8 FE60                  		lea	($FFFFFE60).w,a1
00004CC0 7000                       		moveq	#0,d0
00004CC2 323C 0027                  		move.w	#$27,d1
00004CC6                            
00004CC6                            SS_ClrRam2:
00004CC6 22C0                       		move.l	d0,(a1)+
00004CC8 51C9 FFFC                  		dbf	d1,SS_ClrRam2	; clear	variables
00004CCC                            
00004CCC 43F8 AA00                  		lea	($FFFFAA00).w,a1
00004CD0 7000                       		moveq	#0,d0
00004CD2 323C 007F                  		move.w	#$7F,d1
00004CD6                            
00004CD6                            SS_ClrNemRam:
00004CD6 22C0                       		move.l	d0,(a1)+
00004CD8 51C9 FFFC                  		dbf	d1,SS_ClrNemRam	; clear	Nemesis	buffer
00004CDC                            
00004CDC 4238 F64E                  		clr.b	($FFFFF64E).w
00004CE0 4278 FE02                  		clr.w	($FFFFFE02).w
00004CE4 700A                       		moveq	#$A,d0
00004CE6 6100 D616                  		bsr.w	PalLoad1	; load special stage pallet
00004CEA 4EB9 0000 0000             		jsr	SS_Load
00004CF0 21FC 0000 0000 F700        		move.l	#0,($FFFFF700).w
00004CF8 21FC 0000 0000 F704        		move.l	#0,($FFFFF704).w
00004D00 11FC 0009 D000             		move.b	#9,($FFFFD000).w ; load	special	stage Sonic object
00004D06 6100 0000                  		bsr.w	PalCycle_SS
00004D0A 4278 F780                  		clr.w	($FFFFF780).w	; set stage angle to "upright"
00004D0E 4278 F784                  		clr.w	($FFFFF784).w	; set stage angle to "upright"
00004D12 31FC 0002 F786             		move.w	#2,($FFFFF786).w ; set stage rotation speed
00004D18 303C 0089                  		move.w	#$89,d0
00004D1C 6100 C8AE                  		bsr.w	PlaySound	; play special stage BG	music
00004D20 31FC 0000 F790             		move.w	#0,($FFFFF790).w
00004D26 43F9 0000 46CA             		lea	(Demo_Index).l,a1
00004D2C 7006                       		moveq	#6,d0
00004D2E E548                       		lsl.w	#2,d0
00004D30 2271 0000                  		movea.l	(a1,d0.w),a1
00004D34 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w
00004D3A 5338 F792                  		subq.b	#1,($FFFFF792).w
00004D3E 4278 FE20                  		clr.w	($FFFFFE20).w
00004D42 4238 FE1B                  		clr.b	($FFFFFE1B).w
00004D46 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w
00004D4C 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
00004D52                            ;		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
00004D52                            ;		beq.s	SS_NoDebug	; if not, branch
00004D52                            ;		btst	#6,($FFFFF604).w ; is A	button pressed?
00004D52                            ;		beq.s	SS_NoDebug	; if not, branch
00004D52                            ;		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00004D52                            
00004D52                            SS_NoDebug:
00004D52 3038 F60C                  		move.w	($FFFFF60C).w,d0
00004D56 0000 0040                  		ori.b	#$40,d0
00004D5A 33C0 00C0 0004             		move.w	d0,($C00004).l
00004D60 6100 D370                  		bsr.w	Pal_MakeWhite
00004D64                            
00004D64                            ; ---------------------------------------------------------------------------
00004D64                            ; Main Special Stage loop
00004D64                            ; ---------------------------------------------------------------------------
00004D64                            
00004D64                            SS_MainLoop:
00004D64 6100 C878                  		bsr.w	PauseGame
00004D68 11FC 000A F62A             		move.b	#$A,($FFFFF62A).w
00004D6E 6100 DFCA                  		bsr.w	DelayProgram
00004D72 4A78 F784                          tst.w   ($FFFFF784).w
00004D76 6700                               beq.s   SS_NotReversed
00004D78 5378 F784                          subi.w  #1,($FFFFF784).w
00004D7C                            
00004D7C                            SS_NotReversed:
00004D7C 6100 F89C                  		bsr.w	MoveSonicInDemo
00004D80 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
00004D86 4EB9 0000 0000             		jsr	ObjectsLoad
00004D8C 4EB9 0000 0000             		jsr	BuildSprites
00004D92 4EB9 0000 0000             		jsr	SS_ShowLayout
00004D98 6100 0000                  		bsr.w	SS_BGAnimate
00004D9C 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004DA0 6700                       		beq.s	SS_ChkEnd	; if not, branch
00004DA2 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00004DA6 6700 0000                  		beq.w	SS_ToSegaScreen	; if not, branch
00004DAA                            
00004DAA                            SS_ChkEnd:
00004DAA 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode $10 (special stage)?
00004DB0 6700 FFB2                  		beq.w	SS_MainLoop	; if yes, branch
00004DB4                            
00004DB4 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004DB8 6600 0000                  		bne.w	SS_ToSegaScreen	; if yes, branch
00004DBC 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00004DC2 0C78 0503 FE10             		cmpi.w	#$503,($FFFFFE10).w ; is level number higher than FZ?
00004DC8 6500                       		bcs.s	SS_End		; if not, branch
00004DCA 4278 FE10                  		clr.w	($FFFFFE10).w	; set to GHZ1
00004DCE                            
00004DCE                            SS_End:
00004DCE 31FC 003C F614             		move.w	#60,($FFFFF614).w ; set	delay time to 1	second
00004DD4 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00004DDA 4278 F794                  		clr.w	($FFFFF794).w
00004DDE                            
00004DDE                            SS_EndLoop:
00004DDE 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
00004DE4 6100 DF54                  		bsr.w	DelayProgram
00004DE8 6100 F830                  		bsr.w	MoveSonicInDemo
00004DEC 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
00004DF2 4EB9 0000 0000             		jsr	ObjectsLoad
00004DF8 4EB9 0000 0000             		jsr	BuildSprites
00004DFE 4EB9 0000 0000             		jsr	SS_ShowLayout
00004E04 6100 0000                  		bsr.w	SS_BGAnimate
00004E08 5378 F794                  		subq.w	#1,($FFFFF794).w
00004E0C 6A00                       		bpl.s	loc_47D4
00004E0E 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00004E14 6100 D388                  		bsr.w	Pal_ToWhite
00004E18                            
00004E18                            loc_47D4:
00004E18 4A78 F614                  		tst.w	($FFFFF614).w
00004E1C 66C0                       		bne.s	SS_EndLoop
00004E1E                            
00004E1E 46FC 2700                  		move	#$2700,sr
00004E22 4DF9 00C0 0004             		lea	($C00004).l,a6
00004E28 3CBC 8230                  		move.w	#$8230,(a6)
00004E2C 3CBC 8407                  		move.w	#$8407,(a6)
00004E30 3CBC 9001                  		move.w	#$9001,(a6)
00004E34 6100 C6C4                  		bsr.w	ClearScreen
00004E38 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00004E42 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00004E48 6100 C82C                  		bsr.w	NemDec
00004E4C 4EB9 0000 0000             		jsr	Hud_Base
00004E52 46FC 2300                  		move	#$2300,sr
00004E56 7011                       		moveq	#$11,d0
00004E58 6100 D4C0                  		bsr.w	PalLoad2	; load results screen pallet
00004E5C 7000                       		moveq	#0,d0
00004E5E 6100 C988                  		bsr.w	LoadPLC2
00004E62 701B                       		moveq	#$1B,d0
00004E64 6100 C950                  		bsr.w	LoadPLC		; load results screen patterns
00004E68 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
00004E6E 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; update ring bonus counter
00004E74 3038 FE20                  		move.w	($FFFFFE20).w,d0
00004E78 C0FC 000A                  		mulu.w	#10,d0		; multiply rings by 10
00004E7C 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set rings bonus
00004E80 303C 008E                  		move.w	#$8E,d0
00004E84 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play end-of-level music
00004E8A 43F8 D000                  		lea	($FFFFD000).w,a1
00004E8E 7000                       		moveq	#0,d0
00004E90 323C 07FF                  		move.w	#$7FF,d1
00004E94                            
00004E94                            SS_EndClrObjRam:
00004E94 22C0                       		move.l	d0,(a1)+
00004E96 51C9 FFFC                  		dbf	d1,SS_EndClrObjRam ; clear object RAM
00004E9A                            
00004E9A 11FC 007E D5C0             		move.b	#$7E,($FFFFD5C0).w ; load results screen object
00004EA0                            
00004EA0                            SS_NormalExit:
00004EA0 6100 C73C                  		bsr.w	PauseGame
00004EA4 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
00004EAA 6100 DE8E                  		bsr.w	DelayProgram
00004EAE 4EB9 0000 0000             		jsr	ObjectsLoad
00004EB4 4EB9 0000 0000             		jsr	BuildSprites
00004EBA 6100 C966                  		bsr.w	RunPLC_RAM
00004EBE 4A78 FE02                  		tst.w	($FFFFFE02).w
00004EC2 67DC                       		beq.s	SS_NormalExit
00004EC4 4AB8 F680                  		tst.l	($FFFFF680).w
00004EC8 66D6                       		bne.s	SS_NormalExit
00004ECA 303C 00CA                  		move.w	#$CA,d0
00004ECE 6100 C702                  		bsr.w	PlaySound_Special ; play special stage exit sound
00004ED2 6100 D2AA                  		bsr.w	Pal_MakeFlash
00004ED6 4E75                       		rts	
00004ED8                            ; ===========================================================================
00004ED8                            
00004ED8                            SS_ToSegaScreen:
00004ED8 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set screen mode to 00 (Sega screen)
00004EDE 4E75                       		rts
00004EE0                            
00004EE0                            ; ---------------------------------------------------------------------------
00004EE0                            ; Special stage	background loading subroutine
00004EE0                            ; ---------------------------------------------------------------------------
00004EE0                            
00004EE0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004EE0                            
00004EE0                            
00004EE0                            SS_BGLoad:				; XREF: SpecialStage
00004EE0 43F9 00FF 0000             		lea	($FF0000).l,a1
00004EE6 41F9 0000 0000             		lea	(Eni_SSBg1).l,a0 ; load	mappings for the birds and fish
00004EEC 303C 4051                  		move.w	#$4051,d0
00004EF0 6100 CA62                  		bsr.w	EniDec
00004EF4 263C 5000 0001             		move.l	#$50000001,d3
00004EFA 45F9 00FF 0080             		lea	($FF0080).l,a2
00004F00 7E06                       		moveq	#6,d7
00004F02                            
00004F02                            loc_48BE:
00004F02 2003                       		move.l	d3,d0
00004F04 7C03                       		moveq	#3,d6
00004F06 7800                       		moveq	#0,d4
00004F08 0C47 0003                  		cmpi.w	#3,d7
00004F0C 6400                       		bcc.s	loc_48CC
00004F0E 7801                       		moveq	#1,d4
00004F10                            
00004F10                            loc_48CC:
00004F10 7A07                       		moveq	#7,d5
00004F12                            
00004F12                            loc_48CE:
00004F12 224A                       		movea.l	a2,a1
00004F14 0A04 0001                  		eori.b	#1,d4
00004F18 6600                       		bne.s	loc_48E2
00004F1A 0C47 0006                  		cmpi.w	#6,d7
00004F1E 6600                       		bne.s	loc_48F2
00004F20 43F9 00FF 0000             		lea	($FF0000).l,a1
00004F26                            
00004F26                            loc_48E2:
00004F26 48E7 F800                  		movem.l	d0-d4,-(sp)
00004F2A 7207                       		moveq	#7,d1
00004F2C 7407                       		moveq	#7,d2
00004F2E 6100 C726                  		bsr.w	ShowVDPGraphics
00004F32 4CDF 001F                  		movem.l	(sp)+,d0-d4
00004F36                            
00004F36                            loc_48F2:
00004F36 0680 0010 0000             		addi.l	#$100000,d0
00004F3C 51CD FFD4                  		dbf	d5,loc_48CE
00004F40 0680 0380 0000             		addi.l	#$3800000,d0
00004F46 0A04 0001                  		eori.b	#1,d4
00004F4A 51CE FFC4                  		dbf	d6,loc_48CC
00004F4E 0683 1000 0000             		addi.l	#$10000000,d3
00004F54 6A00                       		bpl.s	loc_491C
00004F56 4843                       		swap	d3
00004F58 0683 0000 C000             		addi.l	#$C000,d3
00004F5E 4843                       		swap	d3
00004F60                            
00004F60                            loc_491C:
00004F60 D4FC 0080                  		adda.w	#$80,a2
00004F64 51CF FF9C                  		dbf	d7,loc_48BE
00004F68 43F9 00FF 0000             		lea	($FF0000).l,a1
00004F6E 41F9 0000 0000             		lea	(Eni_SSBg2).l,a0 ; load	mappings for the clouds
00004F74 303C 4000                  		move.w	#$4000,d0
00004F78 6100 C9DA                  		bsr.w	EniDec
00004F7C 43F9 00FF 0000             		lea	($FF0000).l,a1
00004F82 203C 4000 0003             		move.l	#$40000003,d0
00004F88 723F                       		moveq	#$3F,d1
00004F8A 741F                       		moveq	#$1F,d2
00004F8C 6100 C6C8                  		bsr.w	ShowVDPGraphics
00004F90 43F9 00FF 0000             		lea	($FF0000).l,a1
00004F96 203C 5000 0003             		move.l	#$50000003,d0
00004F9C 723F                       		moveq	#$3F,d1
00004F9E 743F                       		moveq	#$3F,d2
00004FA0 6100 C6B4                  		bsr.w	ShowVDPGraphics
00004FA4 4E75                       		rts	
00004FA6                            ; End of function SS_BGLoad
00004FA6                            
00004FA6                            ; ---------------------------------------------------------------------------
00004FA6                            ; Pallet cycling routine - special stage
00004FA6                            ; ---------------------------------------------------------------------------
00004FA6                            
00004FA6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004FA6                            
00004FA6                            
00004FA6                            PalCycle_SS:				; XREF: loc_DA6; SpecialStage
00004FA6 4A78 F63A                  		tst.w	($FFFFF63A).w
00004FAA 6600                       		bne.s	locret_49E6
00004FAC 5378 F79C                  		subq.w	#1,($FFFFF79C).w
00004FB0 6A00                       		bpl.s	locret_49E6
00004FB2 4DF9 00C0 0004             		lea	($C00004).l,a6
00004FB8 3038 F79A                  		move.w	($FFFFF79A).w,d0
00004FBC 5278 F79A                  		addq.w	#1,($FFFFF79A).w
00004FC0 0240 001F                  		andi.w	#$1F,d0
00004FC4 E548                       		lsl.w	#2,d0
00004FC6 41F9 0000 0000             		lea	(byte_4A3C).l,a0
00004FCC D0C0                       		adda.w	d0,a0
00004FCE 1018                       		move.b	(a0)+,d0
00004FD0 6A00                       		bpl.s	loc_4992
00004FD2 303C 01FF                  		move.w	#$1FF,d0
00004FD6                            
00004FD6                            loc_4992:
00004FD6 31C0 F79C                  		move.w	d0,($FFFFF79C).w
00004FDA 7000                       		moveq	#0,d0
00004FDC 1018                       		move.b	(a0)+,d0
00004FDE 31C0 F7A0                  		move.w	d0,($FFFFF7A0).w
00004FE2 43F9 0000 0000             		lea	(byte_4ABC).l,a1
00004FE8 43F1 0000                  		lea	(a1,d0.w),a1
00004FEC 303C 8200                  		move.w	#-$7E00,d0
00004FF0 1019                       		move.b	(a1)+,d0
00004FF2 3C80                       		move.w	d0,(a6)
00004FF4 11D1 F616                  		move.b	(a1),($FFFFF616).w
00004FF8 303C 8400                  		move.w	#-$7C00,d0
00004FFC 1018                       		move.b	(a0)+,d0
00004FFE 3C80                       		move.w	d0,(a6)
00005000 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
0000500A 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
00005012 7000                       		moveq	#0,d0
00005014 1018                       		move.b	(a0)+,d0
00005016 6B00                       		bmi.s	loc_49E8
00005018 43F9 0000 0000             		lea	(Pal_SSCyc1).l,a1
0000501E D2C0                       		adda.w	d0,a1
00005020 45F8 FB4E                  		lea	($FFFFFB4E).w,a2
00005024 24D9                       		move.l	(a1)+,(a2)+
00005026 24D9                       		move.l	(a1)+,(a2)+
00005028 24D9                       		move.l	(a1)+,(a2)+
0000502A                            
0000502A                            locret_49E6:
0000502A 4E75                       		rts	
0000502C                            ; ===========================================================================
0000502C                            
0000502C                            loc_49E8:				; XREF: PalCycle_SS
0000502C 3238 F79E                  		move.w	($FFFFF79E).w,d1
00005030 0C40 008A                  		cmpi.w	#$8A,d0
00005034 6500                       		bcs.s	loc_49F4
00005036 5241                       		addq.w	#1,d1
00005038                            
00005038                            loc_49F4:
00005038 C2FC 002A                  		mulu.w	#$2A,d1
0000503C 43F9 0000 0000             		lea	(Pal_SSCyc2).l,a1
00005042 D2C1                       		adda.w	d1,a1
00005044 0240 007F                  		andi.w	#$7F,d0
00005048 0880 0000                  		bclr	#0,d0
0000504C 6700                       		beq.s	loc_4A18
0000504E 45F8 FB6E                  		lea	($FFFFFB6E).w,a2
00005052 24D1                       		move.l	(a1),(a2)+
00005054 24E9 0004                  		move.l	4(a1),(a2)+
00005058 24E9 0008                  		move.l	8(a1),(a2)+
0000505C                            
0000505C                            loc_4A18:
0000505C D2FC 000C                  		adda.w	#$C,a1
00005060 45F8 FB5A                  		lea	($FFFFFB5A).w,a2
00005064 0C40 000A                  		cmpi.w	#$A,d0
00005068 6500                       		bcs.s	loc_4A2E
0000506A 0440 000A                  		subi.w	#$A,d0
0000506E 45F8 FB7A                  		lea	($FFFFFB7A).w,a2
00005072                            
00005072                            loc_4A2E:
00005072 3200                       		move.w	d0,d1
00005074 D040                       		add.w	d0,d0
00005076 D041                       		add.w	d1,d0
00005078 D2C0                       		adda.w	d0,a1
0000507A 24D9                       		move.l	(a1)+,(a2)+
0000507C 34D9                       		move.w	(a1)+,(a2)+
0000507E 4E75                       		rts	
00005080                            ; End of function PalCycle_SS
00005080                            
00005080                            ; ===========================================================================
00005080 0300 0792 0300 0790 0300+  byte_4A3C:	dc.b 3,	0, 7, $92, 3, 0, 7, $90, 3, 0, 7, $8E, 3, 0, 7,	$8C
00005090                            					; XREF: PalCycle_SS
00005090 0300 078B 0300 0780 0300+  		dc.b 3,	0, 7, $8B, 3, 0, 7, $80, 3, 0, 7, $82, 3, 0, 7,	$84
000050A0 0300 0786 0300 0788 0708+  		dc.b 3,	0, 7, $86, 3, 0, 7, $88, 7, 8, 7, 0, 7,	$A, 7, $C
000050B0 FF0C 0718 FF0C 0718 070A+  		dc.b $FF, $C, 7, $18, $FF, $C, 7, $18, 7, $A, 7, $C, 7,	8, 7, 0
000050C0 0300 0688 0300 0686 0300+  		dc.b 3,	0, 6, $88, 3, 0, 6, $86, 3, 0, 6, $84, 3, 0, 6,	$82
000050D0 0300 0681 0300 068A 0300+  		dc.b 3,	0, 6, $81, 3, 0, 6, $8A, 3, 0, 6, $8C, 3, 0, 6,	$8E
000050E0 0300 0690 0300 0692 0702+  		dc.b 3,	0, 6, $90, 3, 0, 6, $92, 7, 2, 6, $24, 7, 4, 6,	$30
000050F0 FF06 063C FF06 063C 0704+  		dc.b $FF, 6, 6,	$3C, $FF, 6, 6,	$3C, 7,	4, 6, $30, 7, 2, 6, $24
00005100                            		even
00005100 1001 1800 1801 2000 2001+  byte_4ABC:	dc.b $10, 1, $18, 0, $18, 1, $20, 0, $20, 1, $28, 0, $28, 1
0000510E                            					; XREF: PalCycle_SS
0000510E                            		even
0000510E                            
0000510E                            Pal_SSCyc1:	incbin	pallet\c_ss_1.bin
00005156                            		even
00005156                            Pal_SSCyc2:	incbin	pallet\c_ss_2.bin
00005228                            		even
00005228                            
00005228                            ; ---------------------------------------------------------------------------
00005228                            ; Subroutine to	make the special stage background animated
00005228                            ; ---------------------------------------------------------------------------
00005228                            
00005228                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005228                            
00005228                            
00005228                            SS_BGAnimate:				; XREF: SpecialStage
00005228 3038 F7A0                  		move.w	($FFFFF7A0).w,d0
0000522C 6600                       		bne.s	loc_4BF6
0000522E 31FC 0000 F70C             		move.w	#0,($FFFFF70C).w
00005234 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
0000523A                            
0000523A                            loc_4BF6:
0000523A 0C40 0008                  		cmpi.w	#8,d0
0000523E 6400                       		bcc.s	loc_4C4E
00005240 0C40 0006                  		cmpi.w	#6,d0
00005244 6600                       		bne.s	loc_4C10
00005246 5278 F718                  		addq.w	#1,($FFFFF718).w
0000524A 5278 F70C                  		addq.w	#1,($FFFFF70C).w
0000524E 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00005254                            
00005254                            loc_4C10:
00005254 7000                       		moveq	#0,d0
00005256 3038 F708                  		move.w	($FFFFF708).w,d0
0000525A 4440                       		neg.w	d0
0000525C 4840                       		swap	d0
0000525E 43F9 0000 0000             		lea	(byte_4CCC).l,a1
00005264 47F8 AA00                  		lea	($FFFFAA00).w,a3
00005268 7609                       		moveq	#9,d3
0000526A                            
0000526A                            loc_4C26:
0000526A 302B 0002                  		move.w	2(a3),d0
0000526E 6100 DAFC                  		bsr.w	CalcSine
00005272 7400                       		moveq	#0,d2
00005274 1419                       		move.b	(a1)+,d2
00005276 C1C2                       		muls.w	d2,d0
00005278 E080                       		asr.l	#8,d0
0000527A 36C0                       		move.w	d0,(a3)+
0000527C 1419                       		move.b	(a1)+,d2
0000527E 4882                       		ext.w	d2
00005280 D55B                       		add.w	d2,(a3)+
00005282 51CB FFE6                  		dbf	d3,loc_4C26
00005286 47F8 AA00                  		lea	($FFFFAA00).w,a3
0000528A 45F9 0000 0000             		lea	(byte_4CB8).l,a2
00005290 6000                       		bra.s	loc_4C7E
00005292                            ; ===========================================================================
00005292                            
00005292                            loc_4C4E:				; XREF: SS_BGAnimate
00005292 0C40 000C                  		cmpi.w	#$C,d0
00005296 6600                       		bne.s	loc_4C74
00005298 5378 F718                  		subq.w	#1,($FFFFF718).w
0000529C 47F8 AB00                  		lea	($FFFFAB00).w,a3
000052A0 243C 0001 8000             		move.l	#$18000,d2
000052A6 7206                       		moveq	#6,d1
000052A8                            
000052A8                            loc_4C64:
000052A8 2013                       		move.l	(a3),d0
000052AA 9082                       		sub.l	d2,d0
000052AC 26C0                       		move.l	d0,(a3)+
000052AE 0482 0000 2000             		subi.l	#$2000,d2
000052B4 51C9 FFF2                  		dbf	d1,loc_4C64
000052B8                            
000052B8                            loc_4C74:
000052B8 47F8 AB00                  		lea	($FFFFAB00).w,a3
000052BC 45F9 0000 0000             		lea	(byte_4CC4).l,a2
000052C2                            
000052C2                            loc_4C7E:
000052C2 43F8 CC00                  		lea	($FFFFCC00).w,a1
000052C6 3038 F718                  		move.w	($FFFFF718).w,d0
000052CA 4440                       		neg.w	d0
000052CC 4840                       		swap	d0
000052CE 7600                       		moveq	#0,d3
000052D0 161A                       		move.b	(a2)+,d3
000052D2 3438 F70C                  		move.w	($FFFFF70C).w,d2
000052D6 4442                       		neg.w	d2
000052D8 0242 00FF                  		andi.w	#$FF,d2
000052DC E54A                       		lsl.w	#2,d2
000052DE                            
000052DE                            loc_4C9A:
000052DE 301B                       		move.w	(a3)+,d0
000052E0 544B                       		addq.w	#2,a3
000052E2 7200                       		moveq	#0,d1
000052E4 121A                       		move.b	(a2)+,d1
000052E6 5341                       		subq.w	#1,d1
000052E8                            
000052E8                            loc_4CA4:
000052E8 2380 2000                  		move.l	d0,(a1,d2.w)
000052EC 5842                       		addq.w	#4,d2
000052EE 0242 03FC                  		andi.w	#$3FC,d2
000052F2 51C9 FFF4                  		dbf	d1,loc_4CA4
000052F6 51CB FFE6                  		dbf	d3,loc_4C9A
000052FA 4E75                       		rts	
000052FC                            ; End of function SS_BGAnimate
000052FC                            
000052FC                            ; ===========================================================================
000052FC 0928 1810 2818 1030 1808+  byte_4CB8:	dc.b 9,	$28, $18, $10, $28, $18, $10, $30, $18,	8, $10,	0
00005308                            		even
00005308 0630 3030 2818 1818        byte_4CC4:	dc.b 6,	$30, $30, $30, $28, $18, $18, $18
00005310                            		even
00005310 0802 04FF 0203 08FF 0402+  byte_4CCC:	dc.b 8,	2, 4, $FF, 2, 3, 8, $FF, 4, 2, 2, 3, 8,	$FD, 4,	2, 2, 3, 2, $FF
00005324                            		even
00005324                            					; XREF: SS_BGAnimate
00005324                            ; ===========================================================================
00005324                            
00005324                            ; ---------------------------------------------------------------------------
00005324                            ; Continue screen
00005324                            ; ---------------------------------------------------------------------------
00005324                            
00005324                            ContinueScreen:				; XREF: GameModeArray
00005324 6100 CD2E                  		bsr.w	Pal_FadeFrom
00005328 46FC 2700                  		move	#$2700,sr
0000532C 3038 F60C                  		move.w	($FFFFF60C).w,d0
00005330 0200 00BF                  		andi.b	#$BF,d0
00005334 33C0 00C0 0004             		move.w	d0,($C00004).l
0000533A 4DF9 00C0 0004             		lea	($C00004).l,a6
00005340 3CBC 8004                  		move.w	#$8004,(a6)
00005344 3CBC 8700                  		move.w	#$8700,(a6)
00005348 6100 C1B0                  		bsr.w	ClearScreen
0000534C 43F8 D000                  		lea	($FFFFD000).w,a1
00005350 7000                       		moveq	#0,d0
00005352 323C 07FF                  		move.w	#$7FF,d1
00005356                            
00005356                            Cont_ClrObjRam:
00005356 22C0                       		move.l	d0,(a1)+
00005358 51C9 FFFC                  		dbf	d1,Cont_ClrObjRam ; clear object RAM
0000535C                            
0000535C 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00005366 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
0000536C 6100 C308                  		bsr.w	NemDec
00005370 23FC 6000 0002 00C0 0004   		move.l	#$60000002,($C00004).l
0000537A 41F9 0000 0000             		lea	(Nem_ContSonic).l,a0 ; load Sonic patterns
00005380 6100 C2F4                  		bsr.w	NemDec
00005384 23FC 6A20 0002 00C0 0004   		move.l	#$6A200002,($C00004).l
0000538E 41F9 0000 0000             		lea	(Nem_MiniSonic).l,a0 ; load continue screen patterns
00005394 6100 C2E0                  		bsr.w	NemDec
00005398 720A                       		moveq	#10,d1
0000539A 4EB9 0000 0000             		jsr	ContScrCounter	; run countdown	(start from 10)
000053A0 7012                       		moveq	#$12,d0
000053A2 6100 CF5A                  		bsr.w	PalLoad1	; load continue	screen pallet
000053A6 103C 0090                  		move.b	#$90,d0
000053AA 6100 C220                  		bsr.w	PlaySound	; play continue	music
000053AE 31FC 0293 F614             		move.w	#659,($FFFFF614).w ; set time delay to 11 seconds
000053B4 42B8 F700                  		clr.l	($FFFFF700).w
000053B8 21FC 0100 0000 F704        		move.l	#$1000000,($FFFFF704).w
000053C0 11FC 0081 D000             		move.b	#$81,($FFFFD000).w ; load Sonic	object
000053C6 11FC 0080 D040             		move.b	#$80,($FFFFD040).w ; load continue screen objects
000053CC 11FC 0080 D080             		move.b	#$80,($FFFFD080).w
000053D2 11FC 0003 D098             		move.b	#3,($FFFFD098).w
000053D8 11FC 0004 D09A             		move.b	#4,($FFFFD09A).w
000053DE 11FC 0080 D0C0             		move.b	#$80,($FFFFD0C0).w
000053E4 11FC 0004 D0E4             		move.b	#4,($FFFFD0E4).w
000053EA 4EB9 0000 0000             		jsr	ObjectsLoad
000053F0 4EB9 0000 0000             		jsr	BuildSprites
000053F6 3038 F60C                  		move.w	($FFFFF60C).w,d0
000053FA 0000 0040                  		ori.b	#$40,d0
000053FE 33C0 00C0 0004             		move.w	d0,($C00004).l
00005404 6100 CBA4                  		bsr.w	Pal_FadeTo
00005408                            
00005408                            ; ---------------------------------------------------------------------------
00005408                            ; Continue screen main loop
00005408                            ; ---------------------------------------------------------------------------
00005408                            
00005408                            Cont_MainLoop:
00005408 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
0000540E 6100 D92A                  		bsr.w	DelayProgram
00005412 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00005418 6400                       		bcc.s	loc_4DF2
0000541A 46FC 2700                  		move	#$2700,sr
0000541E 3238 F614                  		move.w	($FFFFF614).w,d1
00005422 82FC 003C                  		divu.w	#$3C,d1
00005426 0281 0000 000F             		andi.l	#$F,d1
0000542C 4EB9 0000 0000             		jsr	ContScrCounter
00005432 46FC 2300                  		move	#$2300,sr
00005436                            
00005436                            loc_4DF2:
00005436 4EB9 0000 0000             		jsr	ObjectsLoad
0000543C 4EB9 0000 0000             		jsr	BuildSprites
00005442 0C78 0180 D008             		cmpi.w	#$180,($FFFFD008).w ; has Sonic	run off	screen?
00005448 6400                       		bcc.s	Cont_GotoLevel	; if yes, branch
0000544A 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00005450 64B6                       		bcc.s	Cont_MainLoop
00005452 4A78 F614                  		tst.w	($FFFFF614).w
00005456 6600 FFB0                  		bne.w	Cont_MainLoop
0000545A 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00005460 4E75                       		rts	
00005462                            ; ===========================================================================
00005462                            
00005462                            Cont_GotoLevel:				; XREF: Cont_MainLoop
00005462 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00005468 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
0000546E 7000                       		moveq	#0,d0
00005470 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00005474 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00005478 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
0000547C 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost count
00005480 5338 FE18                  		subq.b	#1,($FFFFFE18).w ; subtract 1 from continues
00005484 4E75                       		rts	
00005486                            ; ===========================================================================
00005486                            
00005486                            ; ---------------------------------------------------------------------------
00005486                            ; Object 80 - Continue screen elements
00005486                            ; ---------------------------------------------------------------------------
00005486                            
00005486                            Obj80:					; XREF: Obj_Index
00005486 7000                       		moveq	#0,d0
00005488 1028 0024                  		move.b	$24(a0),d0
0000548C 323B 0000                  		move.w	Obj80_Index(pc,d0.w),d1
00005490 4EFB 1000                  		jmp	Obj80_Index(pc,d1.w)
00005494                            ; ===========================================================================
00005494 0000                       Obj80_Index:	dc.w Obj80_Main-Obj80_Index
00005496 0000                       		dc.w Obj80_Display-Obj80_Index
00005498 0000                       		dc.w Obj80_MakeMiniSonic-Obj80_Index
0000549A 0000                       		dc.w Obj80_ChkType-Obj80_Index
0000549C                            ; ===========================================================================
0000549C                            
0000549C                            Obj80_Main:				; XREF: Obj80_Index
0000549C 5428 0024                  		addq.b	#2,$24(a0)
000054A0 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
000054A8 317C 8500 0002             		move.w	#$8500,2(a0)
000054AE 117C 0000 0001             		move.b	#0,1(a0)
000054B4 117C 003C 0019             		move.b	#$3C,$19(a0)
000054BA 317C 0120 0008             		move.w	#$120,8(a0)
000054C0 317C 00C0 000A             		move.w	#$C0,$A(a0)
000054C6 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; clear rings
000054CC                            
000054CC                            Obj80_Display:				; XREF: Obj80_Index
000054CC 4EF9 0000 0000             		jmp	DisplaySprite
000054D2                            ; ===========================================================================
000054D2                            Obj80_MiniSonicPos:
000054D2 0116 012A 0102 013E 00EE+  		dc.w $116, $12A, $102, $13E, $EE, $152, $DA, $166, $C6
000054E4 017A 00B2 018E 009E 01A2+  		dc.w $17A, $B2,	$18E, $9E, $1A2, $8A
000054F0                            ; ===========================================================================
000054F0                            
000054F0                            Obj80_MakeMiniSonic:			; XREF: Obj80_Index
000054F0 2248                       		movea.l	a0,a1
000054F2 45F9 0000 54D2             		lea	(Obj80_MiniSonicPos).l,a2
000054F8 7200                       		moveq	#0,d1
000054FA 1238 FE18                  		move.b	($FFFFFE18).w,d1
000054FE 5501                       		subq.b	#2,d1
00005500 6400                       		bcc.s	loc_4EC4
00005502 4EF9 0000 0000             		jmp	DeleteObject
00005508                            ; ===========================================================================
00005508                            
00005508                            loc_4EC4:				; XREF: Obj80_MakeMiniSonic
00005508 7601                       		moveq	#1,d3
0000550A 0C01 000E                  		cmpi.b	#$E,d1
0000550E 6500                       		bcs.s	loc_4ED0
00005510 7600                       		moveq	#0,d3
00005512 720E                       		moveq	#$E,d1
00005514                            
00005514                            loc_4ED0:
00005514 1401                       		move.b	d1,d2
00005516 0202 0001                  		andi.b	#1,d2
0000551A                            
0000551A                            Obj80_MiniSonLoop:
0000551A 12BC 0080                  		move.b	#$80,0(a1)	; load mini Sonic object
0000551E 335A 0008                  		move.w	(a2)+,8(a1)
00005522 4A02                       		tst.b	d2
00005524 6700                       		beq.s	loc_4EEA
00005526 0469 000A 0008             		subi.w	#$A,8(a1)
0000552C                            
0000552C                            loc_4EEA:
0000552C 337C 00D0 000A             		move.w	#$D0,$A(a1)
00005532 137C 0006 001A             		move.b	#6,$1A(a1)
00005538 137C 0006 0024             		move.b	#6,$24(a1)
0000553E 237C 0000 0000 0004        		move.l	#Map_obj80,4(a1)
00005546 337C 8551 0002             		move.w	#$8551,2(a1)
0000554C 137C 0000 0001             		move.b	#0,1(a1)
00005552 43E9 0040                  		lea	$40(a1),a1
00005556 51C9 FFC2                  		dbf	d1,Obj80_MiniSonLoop ; repeat for number of continues
0000555A 43E9 FFC0                  		lea	-$40(a1),a1
0000555E 1343 0028                  		move.b	d3,$28(a1)
00005562                            
00005562                            Obj80_ChkType:				; XREF: Obj80_Index
00005562 4A28 0028                  		tst.b	$28(a0)
00005566 6700                       		beq.s	loc_4F40
00005568 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000556E 6500                       		bcs.s	loc_4F40
00005570 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00005574 0200 0001                  		andi.b	#1,d0
00005578 6600                       		bne.s	loc_4F40
0000557A 4A78 D010                  		tst.w	($FFFFD010).w
0000557E 6600                       		bne.s	Obj80_Delete
00005580 4E75                       		rts	
00005582                            ; ===========================================================================
00005582                            
00005582                            loc_4F40:				; XREF: Obj80_ChkType
00005582 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00005586 0200 000F                  		andi.b	#$F,d0
0000558A 6600                       		bne.s	Obj80_Display2
0000558C 0868 0000 001A             		bchg	#0,$1A(a0)
00005592                            
00005592                            Obj80_Display2:
00005592 4EF9 0000 0000             		jmp	DisplaySprite
00005598                            ; ===========================================================================
00005598                            
00005598                            Obj80_Delete:				; XREF: Obj80_ChkType
00005598 4EF9 0000 0000             		jmp	DeleteObject
0000559E                            ; ===========================================================================
0000559E                            
0000559E                            ; ---------------------------------------------------------------------------
0000559E                            ; Object 81 - Sonic on the continue screen
0000559E                            ; ---------------------------------------------------------------------------
0000559E                            
0000559E                            Obj81:					; XREF: Obj_Index
0000559E 7000                       		moveq	#0,d0
000055A0 1028 0024                  		move.b	$24(a0),d0
000055A4 323B 0000                  		move.w	Obj81_Index(pc,d0.w),d1
000055A8 4EBB 1000                  		jsr	Obj81_Index(pc,d1.w)
000055AC 4EF9 0000 0000             		jmp	DisplaySprite
000055B2                            ; ===========================================================================
000055B2 0000                       Obj81_Index:	dc.w Obj81_Main-Obj81_Index
000055B4 0000                       		dc.w Obj81_ChkLand-Obj81_Index
000055B6 0000                       		dc.w Obj81_Animate-Obj81_Index
000055B8 0000                       		dc.w Obj81_Run-Obj81_Index
000055BA                            ; ===========================================================================
000055BA                            
000055BA                            Obj81_Main:				; XREF: Obj81_Index
000055BA 5428 0024                  		addq.b	#2,$24(a0)
000055BE 317C 00A0 0008             		move.w	#$A0,8(a0)
000055C4 317C 00C0 000C             		move.w	#$C0,$C(a0)
000055CA 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
000055D2 317C 0780 0002             		move.w	#$780,2(a0)
000055D8 117C 0004 0001             		move.b	#4,1(a0)
000055DE 117C 0002 0018             		move.b	#2,$18(a0)
000055E4 117C 001D 001C             		move.b	#$1D,$1C(a0)	; use "floating" animation
000055EA 317C 0400 0012             		move.w	#$400,$12(a0)	; make Sonic fall from above
000055F0                            
000055F0                            Obj81_ChkLand:				; XREF: Obj81_Index
000055F0 0C68 01A0 000C             		cmpi.w	#$1A0,$C(a0)	; has Sonic landed yet?
000055F6 6600                       		bne.s	Obj81_ShowFall	; if not, branch
000055F8 5428 0024                  		addq.b	#2,$24(a0)
000055FC 4268 0012                  		clr.w	$12(a0)		; stop Sonic falling
00005600 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
00005608 317C 8500 0002             		move.w	#$8500,2(a0)
0000560E 117C 0000 001C             		move.b	#0,$1C(a0)
00005614 6000                       		bra.s	Obj81_Animate
00005616                            ; ===========================================================================
00005616                            
00005616                            Obj81_ShowFall:				; XREF: Obj81_ChkLand
00005616 4EB9 0000 0000             		jsr	SpeedToPos
0000561C 4EB9 0000 0000             		jsr	Sonic_Animate
00005622 4EF9 0000 0000             		jmp	LoadSonicDynPLC
00005628                            ; ===========================================================================
00005628                            
00005628                            Obj81_Animate:				; XREF: Obj81_Index
00005628 4A38 F605                  		tst.b	($FFFFF605).w	; is any button	pressed?
0000562C 6B00                       		bmi.s	Obj81_GetUp	; if yes, branch
0000562E 43F9 0000 0000             		lea	(Ani_obj81).l,a1
00005634 4EF9 0000 0000             		jmp	AnimateSprite
0000563A                            ; ===========================================================================
0000563A                            
0000563A                            Obj81_GetUp:				; XREF: Obj81_Animate
0000563A 5428 0024                  		addq.b	#2,$24(a0)
0000563E 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
00005646 317C 0780 0002             		move.w	#$780,2(a0)
0000564C 117C 001E 001C             		move.b	#$1E,$1C(a0)	; use "getting up" animation
00005652 4268 0014                  		clr.w	$14(a0)
00005656 5168 000C                  		subq.w	#8,$C(a0)
0000565A 103C 00E0                  		move.b	#$E0,d0
0000565E 6100 BF72                  		bsr.w	PlaySound_Special ; fade out music
00005662                            
00005662                            Obj81_Run:				; XREF: Obj81_Index
00005662 0C68 0800 0014             		cmpi.w	#$800,$14(a0)	; check	Sonic's "run speed" (not moving)
00005668 6600                       		bne.s	Obj81_AddSpeed	; if too low, branch
0000566A 317C 1000 0010             		move.w	#$1000,$10(a0)	; move Sonic to	the right
00005670 6000                       		bra.s	Obj81_ShowRun
00005672                            ; ===========================================================================
00005672                            
00005672                            Obj81_AddSpeed:				; XREF: Obj81_Run
00005672 0668 0020 0014             		addi.w	#$20,$14(a0)	; increase "run	speed"
00005678                            
00005678                            Obj81_ShowRun:				; XREF: Obj81_Run
00005678 4EB9 0000 0000             		jsr	SpeedToPos
0000567E 4EB9 0000 0000             		jsr	Sonic_Animate
00005684 4EF9 0000 0000             		jmp	LoadSonicDynPLC
0000568A                            ; ===========================================================================
0000568A                            Ani_obj81:
0000568A                            	include "_anim\obj81.asm"
0000568A                            ; ---------------------------------------------------------------------------
0000568A                            ; Animation script - Sonic on the continue screen
0000568A                            ; ---------------------------------------------------------------------------
0000568A 0000                       		dc.w byte_504A-Ani_obj81
0000568C 0401 0101 0102 0202 0303+  byte_504A:	dc.b 4,	1, 1, 1, 1, 2, 2, 2, 3,	3, $FF
00005698 00                         		even
00005698 00                         		even
00005698                            
00005698                            ; ---------------------------------------------------------------------------
00005698                            ; Sprite mappings - Continue screen
00005698                            ; ---------------------------------------------------------------------------
00005698                            Map_obj80:
00005698                            	include "_maps\obj80.asm"
00005698                            ; ---------------------------------------------------------------------------
00005698                            ; Sprite mappings - Continue screen
00005698                            ; ---------------------------------------------------------------------------
00005698 0000 0000                  		dc.w byte_5066-Map_obj80, byte_509E-Map_obj80
0000569C 0000 0000                  		dc.w byte_50AE-Map_obj80, byte_50BE-Map_obj80
000056A0 0000 0000                  		dc.w byte_50CE-Map_obj80, byte_50D9-Map_obj80
000056A4 0000 0000                  		dc.w byte_50D9-Map_obj80, byte_50DF-Map_obj80
000056A8 0B                         byte_5066:	dc.b $B
000056A9 F805 0088 C4               		dc.b $F8, 5, 0,	$88, $C4 ; "CONTINUE", stars and countdown
000056AE F805 00B2 D4               		dc.b $F8, 5, 0,	$B2, $D4
000056B3 F805 00AE E4               		dc.b $F8, 5, 0,	$AE, $E4
000056B8 F805 00C2 F4               		dc.b $F8, 5, 0,	$C2, $F4
000056BD F801 00A0 04               		dc.b $F8, 1, 0,	$A0, 4
000056C2 F805 00AE 0C               		dc.b $F8, 5, 0,	$AE, $C
000056C7 F805 00C6 1C               		dc.b $F8, 5, 0,	$C6, $1C
000056CC F805 0090 2C               		dc.b $F8, 5, 0,	$90, $2C
000056D1 3805 2021 E8               		dc.b $38, 5, $20, $21, $E8
000056D6 3805 2021 08               		dc.b $38, 5, $20, $21, 8
000056DB 3605 01FC F8               		dc.b $36, 5, 1,	$FC, $F8
000056E0 03                         byte_509E:	dc.b 3
000056E1 0405 0015 FC               		dc.b 4,	5, 0, $15, $FC	; Sonic	on floor
000056E6 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
000056EB F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
000056F0 03                         byte_50AE:	dc.b 3
000056F1 0405 0019 FC               		dc.b 4,	5, 0, $19, $FC	; Sonic	on floor #2
000056F6 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
000056FB F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
00005700 03                         byte_50BE:	dc.b 3
00005701 0405 001D FC               		dc.b 4,	5, 0, $1D, $FC	; Sonic	on floor #3
00005706 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
0000570B F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
00005710 02                         byte_50CE:	dc.b 2
00005711 6009 2000 E8               		dc.b $60, 9, $20, 0, $E8 ; circle on the floor
00005716 6009 2800 00               		dc.b $60, 9, $28, 0, 0
0000571B 01                         byte_50D9:	dc.b 1
0000571C 0006 0012 00               		dc.b 0,	6, 0, $12, 0	; mini Sonic
00005721 01                         byte_50DF:	dc.b 1
00005722 0006 0018 00               		dc.b 0,	6, 0, $18, 0	; mini Sonic #2
00005728 00                         		even
00005728 00                         		even
00005728                            
00005728                            ; ===========================================================================
00005728                            ; ---------------------------------------------------------------------------
00005728                            ; Ending sequence in Green Hill	Zone
00005728                            ; ---------------------------------------------------------------------------
00005728                            
00005728                            EndingSequence:				; XREF: GameModeArray
00005728 103C 00E4                  		move.b	#$E4,d0
0000572C 6100 BEA4                  		bsr.w	PlaySound_Special ; stop music
00005730 6100 C922                  		bsr.w	Pal_FadeFrom
00005734 43F8 D000                  		lea	($FFFFD000).w,a1
00005738 7000                       		moveq	#0,d0
0000573A 323C 07FF                  		move.w	#$7FF,d1
0000573E                            
0000573E                            End_ClrObjRam:
0000573E 22C0                       		move.l	d0,(a1)+
00005740 51C9 FFFC                  		dbf	d1,End_ClrObjRam ; clear object	RAM
00005744                            
00005744 43F8 F628                  		lea	($FFFFF628).w,a1
00005748 7000                       		moveq	#0,d0
0000574A 323C 0015                  		move.w	#$15,d1
0000574E                            
0000574E                            End_ClrRam:
0000574E 22C0                       		move.l	d0,(a1)+
00005750 51C9 FFFC                  		dbf	d1,End_ClrRam	; clear	variables
00005754                            
00005754 43F8 F700                  		lea	($FFFFF700).w,a1
00005758 7000                       		moveq	#0,d0
0000575A 323C 003F                  		move.w	#$3F,d1
0000575E                            
0000575E                            End_ClrRam2:
0000575E 22C0                       		move.l	d0,(a1)+
00005760 51C9 FFFC                  		dbf	d1,End_ClrRam2	; clear	variables
00005764                            
00005764 43F8 FE60                  		lea	($FFFFFE60).w,a1
00005768 7000                       		moveq	#0,d0
0000576A 323C 0047                  		move.w	#$47,d1
0000576E                            
0000576E                            End_ClrRam3:
0000576E 22C0                       		move.l	d0,(a1)+
00005770 51C9 FFFC                  		dbf	d1,End_ClrRam3	; clear	variables
00005774                            
00005774 46FC 2700                  		move	#$2700,sr
00005778 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000577C 0200 00BF                  		andi.b	#$BF,d0
00005780 33C0 00C0 0004             		move.w	d0,($C00004).l
00005786 6100 BD72                  		bsr.w	ClearScreen
0000578A 4DF9 00C0 0004             		lea	($C00004).l,a6
00005790 3CBC 8B03                  		move.w	#$8B03,(a6)
00005794 3CBC 8230                  		move.w	#$8230,(a6)
00005798 3CBC 8407                  		move.w	#$8407,(a6)
0000579C 3CBC 857C                  		move.w	#$857C,(a6)
000057A0 3CBC 9001                  		move.w	#$9001,(a6)
000057A4 3CBC 8004                  		move.w	#$8004,(a6)
000057A8 3CBC 8720                  		move.w	#$8720,(a6)
000057AC 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
000057B2 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
000057B6 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
000057BC 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	number to 0600 (extra flowers)
000057C2 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
000057C8 6700                       		beq.s	End_LoadData	; if yes, branch
000057CA 31FC 0601 FE10             		move.w	#$601,($FFFFFE10).w ; set level	number to 0601 (no flowers)
000057D0                            
000057D0                            End_LoadData:
000057D0 701C                       		moveq	#$1C,d0
000057D2 6100 C14E                  		bsr.w	RunPLC_ROM	; load ending sequence patterns
000057D6 4EB9 0000 0000             		jsr	Hud_Base
000057DC 6100 0000                  		bsr.w	LevelSizeLoad
000057E0 6100 0000                  		bsr.w	DeformBgLayer
000057E4 08F8 0002 F754             		bset	#2,($FFFFF754).w
000057EA 6100 0000                  		bsr.w	MainLoadBlockLoad
000057EE 6100 0000                  		bsr.w	LoadTilesFromStart
000057F2 21FC 0000 0000 F796        		move.l	#Col_GHZ,($FFFFF796).w ; load collision	index
000057FA 46FC 2300                  		move	#$2300,sr
000057FE 41F9 0000 0000             		lea	(Kos_EndFlowers).l,a0 ;	load extra flower patterns
00005804 43F8 9400                  		lea	($FFFF9400).w,a1 ; RAM address to buffer the patterns
00005808 6100 C2C8                  		bsr.w	KosDec
0000580C 7003                       		moveq	#3,d0
0000580E 6100 CAEE                  		bsr.w	PalLoad1	; load Sonic's pallet
00005812 303C 008B                  		move.w	#$8B,d0
00005816 6100 BDB4                  		bsr.w	PlaySound	; play ending sequence music
0000581A 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
00005820 6700                       		beq.s	End_LoadSonic	; if not, branch
00005822 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00005828                            
00005828                            End_LoadSonic:
00005828 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
0000582E 08F8 0000 D022             		bset	#0,($FFFFD022).w ; make	Sonic face left
00005834 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0000583A 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; move Sonic to the	left
00005840 31FC F800 D014             		move.w	#$F800,($FFFFD014).w ; set Sonic's speed
00005846 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
0000584C 4EB9 0000 0000             		jsr	ObjPosLoad
00005852 4EB9 0000 0000             		jsr	ObjectsLoad
00005858 4EB9 0000 0000             		jsr	BuildSprites
0000585E 7000                       		moveq	#0,d0
00005860 31C0 FE20                  		move.w	d0,($FFFFFE20).w
00005864 21C0 FE22                  		move.l	d0,($FFFFFE22).w
00005868 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w
0000586C 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w
00005870 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w
00005874 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w
00005878 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
0000587C 31C0 FE08                  		move.w	d0,($FFFFFE08).w
00005880 31C0 FE02                  		move.w	d0,($FFFFFE02).w
00005884 31C0 FE04                  		move.w	d0,($FFFFFE04).w
00005888 6100 EEE0                  		bsr.w	OscillateNumInit
0000588C 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w
00005892 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w
00005898 11FC 0000 FE1E             		move.b	#0,($FFFFFE1E).w
0000589E 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
000058A4 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
000058AA 6100 D48E                  		bsr.w	DelayProgram
000058AE 3038 F60C                  		move.w	($FFFFF60C).w,d0
000058B2 0000 0040                  		ori.b	#$40,d0
000058B6 33C0 00C0 0004             		move.w	d0,($C00004).l
000058BC 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000058C2 6100 C6E6                  		bsr.w	Pal_FadeTo
000058C6                            
000058C6                            ; ---------------------------------------------------------------------------
000058C6                            ; Main ending sequence loop
000058C6                            ; ---------------------------------------------------------------------------
000058C6                            
000058C6                            End_MainLoop:
000058C6 6100 BD16                  		bsr.w	PauseGame
000058CA 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
000058D0 6100 D468                  		bsr.w	DelayProgram
000058D4 5278 FE04                  		addq.w	#1,($FFFFFE04).w
000058D8 6100 0000                  		bsr.w	End_MoveSonic
000058DC 4EB9 0000 0000             		jsr	ObjectsLoad
000058E2 6100 0000                  		bsr.w	DeformBgLayer
000058E6 4EB9 0000 0000             		jsr	BuildSprites
000058EC 4EB9 0000 0000             		jsr	ObjPosLoad
000058F2 6100 C27E                  		bsr.w	PalCycle_Load
000058F6 6100 EEC8                  		bsr.w	OscillateNumDo
000058FA 6100 EF54                  		bsr.w	ChangeRingFrame
000058FE 0C38 0018 F600             		cmpi.b	#$18,($FFFFF600).w ; is	scene number $18 (ending)?
00005904 6700                       		beq.s	loc_52DA	; if yes, branch
00005906 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set scene to $1C (credits)
0000590C 103C 0091                  		move.b	#$91,d0
00005910 6100 BCC0                  		bsr.w	PlaySound_Special ; play credits music
00005914 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w ; set credits index number to 0
0000591A 4E75                       		rts	
0000591C                            ; ===========================================================================
0000591C                            
0000591C                            loc_52DA:
0000591C 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
00005920 6700 FFA4                  		beq.w	End_MainLoop	; if not, branch
00005924                            
00005924 4278 FE02                  		clr.w	($FFFFFE02).w
00005928 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
0000592E 4278 F794                  		clr.w	($FFFFF794).w
00005932                            
00005932                            End_AllEmlds:				; XREF: loc_5334
00005932 6100 BCAA                  		bsr.w	PauseGame
00005936 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
0000593C 6100 D3FC                  		bsr.w	DelayProgram
00005940 5278 FE04                  		addq.w	#1,($FFFFFE04).w
00005944 6100 0000                  		bsr.w	End_MoveSonic
00005948 4EB9 0000 0000             		jsr	ObjectsLoad
0000594E 6100 0000                  		bsr.w	DeformBgLayer
00005952 4EB9 0000 0000             		jsr	BuildSprites
00005958 4EB9 0000 0000             		jsr	ObjPosLoad
0000595E 6100 EE60                  		bsr.w	OscillateNumDo
00005962 6100 EEEC                  		bsr.w	ChangeRingFrame
00005966 5378 F794                  		subq.w	#1,($FFFFF794).w
0000596A 6A00                       		bpl.s	loc_5334
0000596C 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00005972 6100 C82A                  		bsr.w	Pal_ToWhite
00005976                            
00005976                            loc_5334:
00005976 4A78 FE02                  		tst.w	($FFFFFE02).w
0000597A 6700 FFB6                  		beq.w	End_AllEmlds
0000597E 4278 FE02                  		clr.w	($FFFFFE02).w
00005982 31FC 2E2F A480             		move.w	#$2E2F,($FFFFA480).w ; modify level layout
00005988 4BF9 00C0 0004             		lea	($C00004).l,a5
0000598E 4DF9 00C0 0000             		lea	($C00000).l,a6
00005994 47F8 F700                  		lea	($FFFFF700).w,a3
00005998 49F8 A400                  		lea	($FFFFA400).w,a4
0000599C 343C 4000                  		move.w	#$4000,d2
000059A0 6100 0000                  		bsr.w	LoadTilesFromStart2
000059A4 7013                       		moveq	#$13,d0
000059A6 6100 C956                  		bsr.w	PalLoad1	; load ending pallet
000059AA 6100 C726                  		bsr.w	Pal_MakeWhite
000059AE 6000 FF16                  		bra.w	End_MainLoop
000059B2                            
000059B2                            ; ---------------------------------------------------------------------------
000059B2                            ; Subroutine controlling Sonic on the ending sequence
000059B2                            ; ---------------------------------------------------------------------------
000059B2                            
000059B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000059B2                            
000059B2                            
000059B2                            End_MoveSonic:				; XREF: End_MainLoop
000059B2 1038 F7D7                  		move.b	($FFFFF7D7).w,d0
000059B6 6600                       		bne.s	End_MoveSonic2
000059B8 0C78 0090 D008             		cmpi.w	#$90,($FFFFD008).w ; has Sonic passed $90 on y-axis?
000059BE 6400                       		bcc.s	End_MoveSonExit	; if not, branch
000059C0 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
000059C4 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	player's controls
000059CA 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; move Sonic to the	right
000059D0 4E75                       		rts	
000059D2                            ; ===========================================================================
000059D2                            
000059D2                            End_MoveSonic2:				; XREF: End_MoveSonic
000059D2 5500                       		subq.b	#2,d0
000059D4 6600                       		bne.s	End_MoveSonic3
000059D6 0C78 00A0 D008             		cmpi.w	#$A0,($FFFFD008).w ; has Sonic passed $A0 on y-axis?
000059DC 6500                       		bcs.s	End_MoveSonExit	; if not, branch
000059DE 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
000059E2 7000                       		moveq	#0,d0
000059E4 11C0 F7CC                  		move.b	d0,($FFFFF7CC).w
000059E8 31C0 F602                  		move.w	d0,($FFFFF602).w ; stop	Sonic moving
000059EC 31C0 D014                  		move.w	d0,($FFFFD014).w
000059F0 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w
000059F6 11FC 0003 D01A             		move.b	#3,($FFFFD01A).w
000059FC 31FC 0505 D01C             		move.w	#$505,($FFFFD01C).w ; use "standing" animation
00005A02 11FC 0003 D01E             		move.b	#3,($FFFFD01E).w
00005A08 4E75                       		rts	
00005A0A                            ; ===========================================================================
00005A0A                            
00005A0A                            End_MoveSonic3:				; XREF: End_MoveSonic
00005A0A 5500                       		subq.b	#2,d0
00005A0C 6600                       		bne.s	End_MoveSonExit
00005A0E 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
00005A12 31FC 00A0 D008             		move.w	#$A0,($FFFFD008).w
00005A18 11FC 0087 D000             		move.b	#$87,($FFFFD000).w ; load Sonic	ending sequence	object
00005A1E 4278 D024                  		clr.w	($FFFFD024).w
00005A22                            
00005A22                            End_MoveSonExit:
00005A22 4E75                       		rts	
00005A24                            ; End of function End_MoveSonic
00005A24                            
00005A24                            ; ===========================================================================
00005A24                            ; ---------------------------------------------------------------------------
00005A24                            ; Object 87 - Sonic on ending sequence
00005A24                            ; ---------------------------------------------------------------------------
00005A24                            
00005A24                            Obj87:					; XREF: Obj_Index
00005A24 7000                       		moveq	#0,d0
00005A26 1028 0025                  		move.b	$25(a0),d0
00005A2A 323B 0000                  		move.w	Obj87_Index(pc,d0.w),d1
00005A2E 4EBB 1000                  		jsr	Obj87_Index(pc,d1.w)
00005A32 4EF9 0000 0000             		jmp	DisplaySprite
00005A38                            ; ===========================================================================
00005A38 0000 0000                  Obj87_Index:	dc.w Obj87_Main-Obj87_Index, Obj87_MakeEmlds-Obj87_Index
00005A3C 0000 0000                  		dc.w Obj87_Animate-Obj87_Index,	Obj87_LookUp-Obj87_Index
00005A40 0000 0000                  		dc.w Obj87_ClrObjRam-Obj87_Index, Obj87_Animate-Obj87_Index
00005A44 0000 0000                  		dc.w Obj87_MakeLogo-Obj87_Index, Obj87_Animate-Obj87_Index
00005A48 0000 0000                  		dc.w Obj87_Leap-Obj87_Index, Obj87_Animate-Obj87_Index
00005A4C                            ; ===========================================================================
00005A4C                            
00005A4C                            Obj87_Main:				; XREF: Obj87_Index
00005A4C 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00005A52 6700                       		beq.s	Obj87_Main2	; if yes, branch
00005A54 0628 0010 0025             		addi.b	#$10,$25(a0)	; else,	skip emerald sequence
00005A5A 317C 00D8 0030             		move.w	#$D8,$30(a0)
00005A60 4E75                       		rts	
00005A62                            ; ===========================================================================
00005A62                            
00005A62                            Obj87_Main2:				; XREF: Obj87_Main
00005A62 5428 0025                  		addq.b	#2,$25(a0)
00005A66 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
00005A6E 317C 03E1 0002             		move.w	#$3E1,2(a0)
00005A74 117C 0004 0001             		move.b	#4,1(a0)
00005A7A 4228 0022                  		clr.b	$22(a0)
00005A7E 117C 0002 0018             		move.b	#2,$18(a0)
00005A84 117C 0000 001A             		move.b	#0,$1A(a0)
00005A8A 317C 0050 0030             		move.w	#$50,$30(a0)	; set duration for Sonic to pause
00005A90                            
00005A90                            Obj87_MakeEmlds:			; XREF: Obj87_Index
00005A90 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
00005A94 6600                       		bne.s	Obj87_Wait
00005A96 5428 0025                  		addq.b	#2,$25(a0)
00005A9A 317C 0001 001C             		move.w	#1,$1C(a0)
00005AA0 11FC 0088 D400             		move.b	#$88,($FFFFD400).w ; load chaos	emeralds objects
00005AA6                            
00005AA6                            Obj87_Wait:
00005AA6 4E75                       		rts	
00005AA8                            ; ===========================================================================
00005AA8                            
00005AA8                            Obj87_LookUp:				; XREF: Obj87_Index
00005AA8 0C79 2000 00FF D43C        		cmpi.w	#$2000,($FFD43C).l
00005AB0 6600                       		bne.s	locret_5480
00005AB2 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; set level to	restart	(causes	flash)
00005AB8 317C 005A 0030             		move.w	#$5A,$30(a0)
00005ABE 5428 0025                  		addq.b	#2,$25(a0)
00005AC2                            
00005AC2                            locret_5480:
00005AC2 4E75                       		rts	
00005AC4                            ; ===========================================================================
00005AC4                            
00005AC4                            Obj87_ClrObjRam:			; XREF: Obj87_Index
00005AC4 5368 0030                  		subq.w	#1,$30(a0)
00005AC8 6600                       		bne.s	Obj87_Wait2
00005ACA 43F8 D400                  		lea	($FFFFD400).w,a1
00005ACE 323C 00FF                  		move.w	#$FF,d1
00005AD2                            
00005AD2                            Obj87_ClrLoop:
00005AD2 4299                       		clr.l	(a1)+
00005AD4 51C9 FFFC                  		dbf	d1,Obj87_ClrLoop ; clear the object RAM
00005AD8 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w
00005ADE 5428 0025                  		addq.b	#2,$25(a0)
00005AE2 117C 0001 001C             		move.b	#1,$1C(a0)
00005AE8 317C 003C 0030             		move.w	#$3C,$30(a0)
00005AEE                            
00005AEE                            Obj87_Wait2:
00005AEE 4E75                       		rts	
00005AF0                            ; ===========================================================================
00005AF0                            
00005AF0                            Obj87_MakeLogo:				; XREF: Obj87_Index
00005AF0 5368 0030                  		subq.w	#1,$30(a0)
00005AF4 6600                       		bne.s	Obj87_Wait3
00005AF6 5428 0025                  		addq.b	#2,$25(a0)
00005AFA 317C 00B4 0030             		move.w	#$B4,$30(a0)
00005B00 117C 0002 001C             		move.b	#2,$1C(a0)
00005B06 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
00005B0C                            
00005B0C                            Obj87_Wait3:
00005B0C 4E75                       		rts	
00005B0E                            ; ===========================================================================
00005B0E                            
00005B0E                            Obj87_Animate:				; XREF: Obj87_Index
00005B0E 43F9 0000 0000             		lea	(Ani_obj87).l,a1
00005B14 4EF9 0000 0000             		jmp	AnimateSprite
00005B1A                            ; ===========================================================================
00005B1A                            
00005B1A                            Obj87_Leap:				; XREF: Obj87_Index
00005B1A 5368 0030                  		subq.w	#1,$30(a0)
00005B1E 6600                       		bne.s	Obj87_Wait4
00005B20 5428 0025                  		addq.b	#2,$25(a0)
00005B24 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
00005B2C 317C 03E1 0002             		move.w	#$3E1,2(a0)
00005B32 117C 0004 0001             		move.b	#4,1(a0)
00005B38 4228 0022                  		clr.b	$22(a0)
00005B3C 117C 0002 0018             		move.b	#2,$18(a0)
00005B42 117C 0005 001A             		move.b	#5,$1A(a0)
00005B48 117C 0002 001C             		move.b	#2,$1C(a0)	; use "leaping"	animation
00005B4E 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
00005B54 60B8                       		bra.s	Obj87_Animate
00005B56                            ; ===========================================================================
00005B56                            
00005B56                            Obj87_Wait4:				; XREF: Obj87_Leap
00005B56 4E75                       		rts	
00005B58                            ; ===========================================================================
00005B58                            Ani_obj87:
00005B58                            	include "_anim\obj87.asm"
00005B58                            ; ---------------------------------------------------------------------------
00005B58                            ; Animation script - Sonic on the ending sequence
00005B58                            ; ---------------------------------------------------------------------------
00005B58 0000                       		dc.w byte_551C-Ani_obj87
00005B5A 0000                       		dc.w byte_552A-Ani_obj87
00005B5C 0000                       		dc.w byte_5534-Ani_obj87
00005B5E 0301 0001 0001 0001 0001+  byte_551C:	dc.b 3,	1, 0, 1, 0, 1, 0, 1, 0,	1, 0, 1, 2, $FA
00005B6C 0503 0403 0403 0403 FA00   byte_552A:	dc.b 5,	3, 4, 3, 4, 3, 4, 3, $FA, 0
00005B76 0305 0505 0607 FE01        byte_5534:	dc.b 3,	5, 5, 5, 6, 7, $FE, 1
00005B7E                            		even
00005B7E                            		even
00005B7E                            
00005B7E                            ; ===========================================================================
00005B7E                            ; ---------------------------------------------------------------------------
00005B7E                            ; Object 88 - chaos emeralds on	the ending sequence
00005B7E                            ; ---------------------------------------------------------------------------
00005B7E                            
00005B7E                            Obj88:					; XREF: Obj_Index
00005B7E 7000                       		moveq	#0,d0
00005B80 1028 0024                  		move.b	$24(a0),d0
00005B84 323B 0000                  		move.w	Obj88_Index(pc,d0.w),d1
00005B88 4EBB 1000                  		jsr	Obj88_Index(pc,d1.w)
00005B8C 4EF9 0000 0000             		jmp	DisplaySprite
00005B92                            ; ===========================================================================
00005B92 0000                       Obj88_Index:	dc.w Obj88_Main-Obj88_Index
00005B94 0000                       		dc.w Obj88_Move-Obj88_Index
00005B96                            ; ===========================================================================
00005B96                            
00005B96                            Obj88_Main:				; XREF: Obj88_Index
00005B96 0C38 0002 D01A             		cmpi.b	#2,($FFFFD01A).w
00005B9C 6700                       		beq.s	Obj88_Main2
00005B9E 588F                       		addq.l	#4,sp
00005BA0 4E75                       		rts	
00005BA2                            ; ===========================================================================
00005BA2                            
00005BA2                            Obj88_Main2:				; XREF: Obj88_Main
00005BA2 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; match X position with Sonic
00005BA8 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0) ; match Y position	with Sonic
00005BAE 2248                       		movea.l	a0,a1
00005BB0 7600                       		moveq	#0,d3
00005BB2 7401                       		moveq	#1,d2
00005BB4 7205                       		moveq	#5,d1
00005BB6                            
00005BB6                            Obj88_MainLoop:
00005BB6 12BC 0088                  		move.b	#$88,(a1)	; load chaos emerald object
00005BBA 5429 0024                  		addq.b	#2,$24(a1)
00005BBE 237C 0000 0000 0004        		move.l	#Map_obj88,4(a1)
00005BC6 337C 03C5 0002             		move.w	#$3C5,2(a1)
00005BCC 137C 0004 0001             		move.b	#4,1(a1)
00005BD2 137C 0001 0018             		move.b	#1,$18(a1)
00005BD8 3368 0008 0038             		move.w	8(a0),$38(a1)
00005BDE 3368 000C 003A             		move.w	$C(a0),$3A(a1)
00005BE4 1342 001C                  		move.b	d2,$1C(a1)
00005BE8 1342 001A                  		move.b	d2,$1A(a1)
00005BEC 5202                       		addq.b	#1,d2
00005BEE 1343 0026                  		move.b	d3,$26(a1)
00005BF2 0603 002A                  		addi.b	#$2A,d3
00005BF6 43E9 0040                  		lea	$40(a1),a1
00005BFA 51C9 FFBA                  		dbf	d1,Obj88_MainLoop ; repeat 5 more times
00005BFE                            
00005BFE                            Obj88_Move:				; XREF: Obj88_Index
00005BFE 3028 003E                  		move.w	$3E(a0),d0
00005C02 D168 0026                  		add.w	d0,$26(a0)
00005C06 1028 0026                  		move.b	$26(a0),d0
00005C0A 4EB9 0000 2D6C             		jsr	(CalcSine).l
00005C10 7800                       		moveq	#0,d4
00005C12 1828 003C                  		move.b	$3C(a0),d4
00005C16 C3C4                       		muls.w	d4,d1
00005C18 E081                       		asr.l	#8,d1
00005C1A C1C4                       		muls.w	d4,d0
00005C1C E080                       		asr.l	#8,d0
00005C1E D268 0038                  		add.w	$38(a0),d1
00005C22 D068 003A                  		add.w	$3A(a0),d0
00005C26 3141 0008                  		move.w	d1,8(a0)
00005C2A 3140 000C                  		move.w	d0,$C(a0)
00005C2E 0C68 2000 003C             		cmpi.w	#$2000,$3C(a0)
00005C34 6700                       		beq.s	loc_55FA
00005C36 0668 0020 003C             		addi.w	#$20,$3C(a0)
00005C3C                            
00005C3C                            loc_55FA:
00005C3C 0C68 2000 003E             		cmpi.w	#$2000,$3E(a0)
00005C42 6700                       		beq.s	loc_5608
00005C44 0668 0020 003E             		addi.w	#$20,$3E(a0)
00005C4A                            
00005C4A                            loc_5608:
00005C4A 0C68 0140 003A             		cmpi.w	#$140,$3A(a0)
00005C50 6700                       		beq.s	locret_5614
00005C52 5368 003A                  		subq.w	#1,$3A(a0)
00005C56                            
00005C56                            locret_5614:
00005C56 4E75                       		rts	
00005C58                            ; ===========================================================================
00005C58                            ; ---------------------------------------------------------------------------
00005C58                            ; Object 89 - "SONIC THE HEDGEHOG" text	on the ending sequence
00005C58                            ; ---------------------------------------------------------------------------
00005C58                            
00005C58                            Obj89:					; XREF: Obj_Index
00005C58 7000                       		moveq	#0,d0
00005C5A 1028 0024                  		move.b	$24(a0),d0
00005C5E 323B 0000                  		move.w	Obj89_Index(pc,d0.w),d1
00005C62 4EFB 1000                  		jmp	Obj89_Index(pc,d1.w)
00005C66                            ; ===========================================================================
00005C66 0000                       Obj89_Index:	dc.w Obj89_Main-Obj89_Index
00005C68 0000                       		dc.w Obj89_Move-Obj89_Index
00005C6A 0000                       		dc.w Obj89_GotoCredits-Obj89_Index
00005C6C                            ; ===========================================================================
00005C6C                            
00005C6C                            Obj89_Main:				; XREF: Obj89_Index
00005C6C 5428 0024                  		addq.b	#2,$24(a0)
00005C70 317C FFE0 0008             		move.w	#-$20,8(a0)	; object starts	outside	the level boundary
00005C76 317C 00D8 000A             		move.w	#$D8,$A(a0)
00005C7C 217C 0000 0000 0004        		move.l	#Map_obj89,4(a0)
00005C84 317C 05C5 0002             		move.w	#$5C5,2(a0)
00005C8A 117C 0000 0001             		move.b	#0,1(a0)
00005C90 117C 0000 0018             		move.b	#0,$18(a0)
00005C96                            
00005C96                            Obj89_Move:				; XREF: Obj89_Index
00005C96 0C68 00C0 0008             		cmpi.w	#$C0,8(a0)	; has object reached $C0?
00005C9C 6700                       		beq.s	Obj89_Delay	; if yes, branch
00005C9E 0668 0010 0008             		addi.w	#$10,8(a0)	; move object to the right
00005CA4 4EB9 0000 0000             		jsr	DisplaySprite
00005CAA                            ; ===========================================================================
00005CAA                            
00005CAA                            Obj89_Delay:				; XREF: Obj89_Move
00005CAA 5428 0024                  		addq.b	#2,$24(a0)
00005CAE 317C 0078 0030             		move.w	#120,$30(a0)	; set duration for delay (2 seconds)
00005CB4                            
00005CB4                            Obj89_GotoCredits:			; XREF: Obj89_Index
00005CB4 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
00005CB8 6A00                       		bpl.s	Obj89_Display
00005CBA 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; exit to credits
00005CC0                            
00005CC0                            Obj89_Display:
00005CC0 4EB9 0000 0000             		jsr	DisplaySprite
00005CC6                            ; ===========================================================================
00005CC6                            ; ---------------------------------------------------------------------------
00005CC6                            ; Sprite mappings - Sonic on the ending	sequence
00005CC6                            ; ---------------------------------------------------------------------------
00005CC6                            Map_obj87:
00005CC6                            	include "_maps\obj87.asm"
00005CC6                            ; ---------------------------------------------------------------------------
00005CC6                            ; Sprite mappings - Sonic on the ending	sequence
00005CC6                            ; ---------------------------------------------------------------------------
00005CC6 0000 0000                  		dc.w byte_5690-Map_obj87, byte_569B-Map_obj87
00005CCA 0000 0000                  		dc.w byte_56AB-Map_obj87, byte_56B6-Map_obj87
00005CCE 0000 0000                  		dc.w byte_56C1-Map_obj87, byte_56CC-Map_obj87
00005CD2 0000 0000                  		dc.w byte_56DC-Map_obj87, byte_5700-Map_obj87
00005CD6 02                         byte_5690:	dc.b 2
00005CD7 EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8	; holding emeralds
00005CDC 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
00005CE1 03                         byte_569B:	dc.b 3
00005CE2 FC0D 0010 F0               		dc.b $FC, $D, 0, $10, $F0 ; holding emeralds (glowing)
00005CE7 EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8
00005CEC 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
00005CF1 02                         byte_56AB:	dc.b 2
00005CF2 EC09 0018 F8               		dc.b $EC, 9, 0,	$18, $F8 ; looking up
00005CF7 FC0E 001E F0               		dc.b $FC, $E, 0, $1E, $F0
00005CFC 02                         byte_56B6:	dc.b 2
00005CFD EC09 002A F8               		dc.b $EC, 9, 0,	$2A, $F8 ; confused
00005D02 FC0E 0030 F0               		dc.b $FC, $E, 0, $30, $F0
00005D07 02                         byte_56C1:	dc.b 2
00005D08 EC09 082A F0               		dc.b $EC, 9, 8,	$2A, $F0 ; confused #2
00005D0D FC0E 0830 F0               		dc.b $FC, $E, 8, $30, $F0
00005D12 03                         byte_56CC:	dc.b 3
00005D13 EC06 003C F0               		dc.b $EC, 6, 0,	$3C, $F0 ; leaping
00005D18 EC06 083C 00               		dc.b $EC, 6, 8,	$3C, 0
00005D1D 040D 0042 F0               		dc.b 4,	$D, 0, $42, $F0
00005D22 07                         byte_56DC:	dc.b 7
00005D23 B20C 004A F8               		dc.b $B2, $C, 0, $4A, $F8 ; leaping #2
00005D28 BA0F 004E F0               		dc.b $BA, $F, 0, $4E, $F0
00005D2D BA05 005E 10               		dc.b $BA, 5, 0,	$5E, $10
00005D32 CA02 0062 10               		dc.b $CA, 2, 0,	$62, $10
00005D37 DA0C 0065 F0               		dc.b $DA, $C, 0, $65, $F0
00005D3C E208 0069 F8               		dc.b $E2, 8, 0,	$69, $F8
00005D41 EA05 006C F8               		dc.b $EA, 5, 0,	$6C, $F8
00005D46 18                         byte_5700:	dc.b $18
00005D47 800F 0070 F8               		dc.b $80, $F, 0, $70, $F8 ; leaping #3
00005D4C 900B 0080 E0               		dc.b $90, $B, 0, $80, $E0
00005D51 900B 008C 18               		dc.b $90, $B, 0, $8C, $18
00005D56 980B 0098 30               		dc.b $98, $B, 0, $98, $30
00005D5B A00F 00A4 58               		dc.b $A0, $F, 0, $A4, $58
00005D60 8800 00B4 F0               		dc.b $88, 0, 0,	$B4, $F0
00005D65 8005 00B5 18               		dc.b $80, 5, 0,	$B5, $18
00005D6A A00F 00B9 F8               		dc.b $A0, $F, 0, $B9, $F8
00005D6F B00B 00C9 E0               		dc.b $B0, $B, 0, $C9, $E0
00005D74 B80F 00D5 38               		dc.b $B8, $F, 0, $D5, $38
00005D79 A805 00E5 48               		dc.b $A8, 5, 0,	$E5, $48
00005D7E C002 00E9 58               		dc.b $C0, 2, 0,	$E9, $58
00005D83 C00F 00EC F8               		dc.b $C0, $F, 0, $EC, $F8
00005D88 B80F 00FC 18               		dc.b $B8, $F, 0, $FC, $18
00005D8D B008 010C 18               		dc.b $B0, 8, 1,	$C, $18
00005D92 D80D 010F 30               		dc.b $D8, $D, 1, $F, $30
00005D97 D808 0117 18               		dc.b $D8, 8, 1,	$17, $18
00005D9C D80F 011A D8               		dc.b $D8, $F, 1, $1A, $D8
00005DA1 E00D 012A F8               		dc.b $E0, $D, 1, $2A, $F8
00005DA6 E000 0132 28               		dc.b $E0, 0, 1,	$32, $28
00005DAB D004 0133 E0               		dc.b $D0, 4, 1,	$33, $E0
00005DB0 E805 0135 C8               		dc.b $E8, 5, 1,	$35, $C8
00005DB5 F80C 0139 C8               		dc.b $F8, $C, 1, $39, $C8
00005DBA F006 013D F8               		dc.b $F0, 6, 1,	$3D, $F8
00005DC0 00                         		even
00005DC0 00                         		even
00005DC0                            
00005DC0                            ; ---------------------------------------------------------------------------
00005DC0                            ; Sprite mappings - chaos emeralds on the ending sequence
00005DC0                            ; ---------------------------------------------------------------------------
00005DC0                            Map_obj88:
00005DC0                            	include "_maps\obj88.asm"
00005DC0                            ; ---------------------------------------------------------------------------
00005DC0                            ; Sprite mappings - chaos emeralds on the ending sequence
00005DC0                            ; ---------------------------------------------------------------------------
00005DC0 0000 0000                  		dc.w byte_5788-Map_obj88, byte_578E-Map_obj88
00005DC4 0000 0000                  		dc.w byte_5794-Map_obj88, byte_579A-Map_obj88
00005DC8 0000 0000                  		dc.w byte_57A0-Map_obj88, byte_57A6-Map_obj88
00005DCC 0000                       		dc.w byte_57AC-Map_obj88
00005DCE 01                         byte_5788:	dc.b 1
00005DCF F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00005DD4 01                         byte_578E:	dc.b 1
00005DD5 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
00005DDA 01                         byte_5794:	dc.b 1
00005DDB F805 4010 F8               		dc.b $F8, 5, $40, $10, $F8
00005DE0 01                         byte_579A:	dc.b 1
00005DE1 F805 2018 F8               		dc.b $F8, 5, $20, $18, $F8
00005DE6 01                         byte_57A0:	dc.b 1
00005DE7 F805 4014 F8               		dc.b $F8, 5, $40, $14, $F8
00005DEC 01                         byte_57A6:	dc.b 1
00005DED F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
00005DF2 01                         byte_57AC:	dc.b 1
00005DF3 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
00005DF8                            		even
00005DF8                            		even
00005DF8                            
00005DF8                            ; ---------------------------------------------------------------------------
00005DF8                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
00005DF8                            ; ---------------------------------------------------------------------------
00005DF8                            Map_obj89:
00005DF8                            	include "_maps\obj89.asm"
00005DF8                            ; ---------------------------------------------------------------------------
00005DF8                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
00005DF8                            ; ---------------------------------------------------------------------------
00005DF8 0000                       		dc.w byte_57B4-Map_obj89
00005DFA 03                         byte_57B4:	dc.b 3
00005DFB F00F 0000 D0               		dc.b $F0, $F, 0, 0, $D0
00005E00 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
00005E05 F00F 0020 10               		dc.b $F0, $F, 0, $20, $10
00005E0A                            		even
00005E0A                            		even
00005E0A                            
00005E0A                            ; ===========================================================================
00005E0A                            ; ---------------------------------------------------------------------------
00005E0A                            ; Credits ending sequence
00005E0A                            ; ---------------------------------------------------------------------------
00005E0A                            
00005E0A                            Credits:				; XREF: GameModeArray
00005E0A 6100 BA08                  		bsr.w	ClearPLC
00005E0E 6100 C244                  		bsr.w	Pal_FadeFrom
00005E12 4DF9 00C0 0004             		lea	($C00004).l,a6
00005E18 3CBC 8004                  		move.w	#$8004,(a6)
00005E1C 3CBC 8230                  		move.w	#$8230,(a6)
00005E20 3CBC 8407                  		move.w	#$8407,(a6)
00005E24 3CBC 9001                  		move.w	#$9001,(a6)
00005E28 3CBC 9200                  		move.w	#$9200,(a6)
00005E2C 3CBC 8B03                  		move.w	#$8B03,(a6)
00005E30 3CBC 8720                  		move.w	#$8720,(a6)
00005E34 4238 F64E                  		clr.b	($FFFFF64E).w
00005E38 6100 B6C0                  		bsr.w	ClearScreen
00005E3C 43F8 D000                  		lea	($FFFFD000).w,a1
00005E40 7000                       		moveq	#0,d0
00005E42 323C 07FF                  		move.w	#$7FF,d1
00005E46                            
00005E46                            Cred_ClrObjRam:
00005E46 22C0                       		move.l	d0,(a1)+
00005E48 51C9 FFFC                  		dbf	d1,Cred_ClrObjRam ; clear object RAM
00005E4C                            
00005E4C 23FC 7400 0002 00C0 0004   		move.l	#$74000002,($C00004).l
00005E56 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load credits alphabet patterns
00005E5C 6100 B818                  		bsr.w	NemDec
00005E60 43F8 FB80                  		lea	($FFFFFB80).w,a1
00005E64 7000                       		moveq	#0,d0
00005E66 323C 001F                  		move.w	#$1F,d1
00005E6A                            
00005E6A                            Cred_ClrPallet:
00005E6A 22C0                       		move.l	d0,(a1)+
00005E6C 51C9 FFFC                  		dbf	d1,Cred_ClrPallet ; fill pallet	with black ($0000)
00005E70                            
00005E70 7003                       		moveq	#3,d0
00005E72 6100 C48A                  		bsr.w	PalLoad1	; load Sonic's pallet
00005E76 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load credits object
00005E7C 4EB9 0000 0000             		jsr	ObjectsLoad
00005E82 4EB9 0000 0000             		jsr	BuildSprites
00005E88 6100 0000                  		bsr.w	EndingDemoLoad
00005E8C 7000                       		moveq	#0,d0
00005E8E 1038 FE10                  		move.b	($FFFFFE10).w,d0
00005E92 E948                       		lsl.w	#4,d0
00005E94 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2 ;	load block mappings etc
00005E9A 45F2 0000                  		lea	(a2,d0.w),a2
00005E9E 7000                       		moveq	#0,d0
00005EA0 1012                       		move.b	(a2),d0
00005EA2 6700                       		beq.s	loc_5862
00005EA4 6100 B910                  		bsr.w	LoadPLC		; load level patterns
00005EA8                            
00005EA8                            loc_5862:
00005EA8 7001                       		moveq	#1,d0
00005EAA 6100 B90A                  		bsr.w	LoadPLC		; load standard	level patterns
00005EAE 31FC 0078 F614             		move.w	#120,($FFFFF614).w ; display a credit for 2 seconds
00005EB4 6100 C0F4                  		bsr.w	Pal_FadeTo
00005EB8                            
00005EB8                            Cred_WaitLoop:
00005EB8 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00005EBE 6100 CE7A                  		bsr.w	DelayProgram
00005EC2 6100 B95E                  		bsr.w	RunPLC_RAM
00005EC6 4A78 F614                  		tst.w	($FFFFF614).w	; have 2 seconds elapsed?
00005ECA 66EC                       		bne.s	Cred_WaitLoop	; if not, branch
00005ECC 4AB8 F680                  		tst.l	($FFFFF680).w	; have level gfx finished decompressing?
00005ED0 66E6                       		bne.s	Cred_WaitLoop	; if not, branch
00005ED2 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	the credits finished?
00005ED8 6700 0000                  		beq.w	TryAgainEnd	; if yes, branch
00005EDC 4E75                       		rts	
00005EDE                            
00005EDE                            ; ---------------------------------------------------------------------------
00005EDE                            ; Ending sequence demo loading subroutine
00005EDE                            ; ---------------------------------------------------------------------------
00005EDE                            
00005EDE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005EDE                            
00005EDE                            
00005EDE                            EndingDemoLoad:				; XREF: Credits
00005EDE 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00005EE2 0240 000F                  		andi.w	#$F,d0
00005EE6 D040                       		add.w	d0,d0
00005EE8 303B 0000                  		move.w	EndDemo_Levels(pc,d0.w),d0 ; load level	array
00005EEC 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level from level	array
00005EF0 5278 FFF4                  		addq.w	#1,($FFFFFFF4).w
00005EF4 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	credits	finished?
00005EFA 6400                       		bcc.s	EndDemo_Exit	; if yes, branch
00005EFC 31FC 8001 FFF0             		move.w	#$8001,($FFFFFFF0).w ; force demo mode
00005F02 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set game mode to 08 (demo)
00005F08 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
00005F0E 7000                       		moveq	#0,d0
00005F10 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00005F14 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00005F18 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00005F1C 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost counter
00005F20 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w ; is SLZ demo running?
00005F26 6600                       		bne.s	EndDemo_Exit	; if not, branch
00005F28 43F9 0000 0000             		lea	(EndDemo_LampVar).l,a1 ; load lamppost variables
00005F2E 45F8 FE30                  		lea	($FFFFFE30).w,a2
00005F32 303C 0008                  		move.w	#8,d0
00005F36                            
00005F36                            EndDemo_LampLoad:
00005F36 24D9                       		move.l	(a1)+,(a2)+
00005F38 51C8 FFFC                  		dbf	d0,EndDemo_LampLoad
00005F3C                            
00005F3C                            EndDemo_Exit:
00005F3C 4E75                       		rts	
00005F3E                            ; End of function EndingDemoLoad
00005F3E                            
00005F3E                            ; ===========================================================================
00005F3E                            ; ---------------------------------------------------------------------------
00005F3E                            ; Levels used in the end sequence demos
00005F3E                            ; ---------------------------------------------------------------------------
00005F3E                            EndDemo_Levels:	incbin	misc\dm_ord2.bin
00005F4E                            
00005F4E                            ; ---------------------------------------------------------------------------
00005F4E                            ; Lamppost variables in the end sequence demo (Star Light Zone)
00005F4E                            ; ---------------------------------------------------------------------------
00005F4E                            EndDemo_LampVar:
00005F4E 0101                       		dc.b 1,	1		; XREF: EndingDemoLoad
00005F50 0A00 062C 000D             		dc.w $A00, $62C, $D
00005F56 0000 0000                  		dc.l 0
00005F5A 0000                       		dc.b 0,	0
00005F5C 0800 0957 05CC 04AB 03A6+  		dc.w $800, $957, $5CC, $4AB, $3A6, 0, $28C, 0, 0, $308
00005F70 0101                       		dc.b 1,	1
00005F72                            ; ===========================================================================
00005F72                            ; ---------------------------------------------------------------------------
00005F72                            ; "TRY AGAIN" and "END"	screens
00005F72                            ; ---------------------------------------------------------------------------
00005F72                            
00005F72                            TryAgainEnd:				; XREF: Credits
00005F72 6100 B8A0                  		bsr.w	ClearPLC
00005F76 6100 C0DC                  		bsr.w	Pal_FadeFrom
00005F7A 4DF9 00C0 0004             		lea	($C00004).l,a6
00005F80 3CBC 8004                  		move.w	#$8004,(a6)
00005F84 3CBC 8230                  		move.w	#$8230,(a6)
00005F88 3CBC 8407                  		move.w	#$8407,(a6)
00005F8C 3CBC 9001                  		move.w	#$9001,(a6)
00005F90 3CBC 9200                  		move.w	#$9200,(a6)
00005F94 3CBC 8B03                  		move.w	#$8B03,(a6)
00005F98 3CBC 8720                  		move.w	#$8720,(a6)
00005F9C 4238 F64E                  		clr.b	($FFFFF64E).w
00005FA0 6100 B558                  		bsr.w	ClearScreen
00005FA4 43F8 D000                  		lea	($FFFFD000).w,a1
00005FA8 7000                       		moveq	#0,d0
00005FAA 323C 07FF                  		move.w	#$7FF,d1
00005FAE                            
00005FAE                            TryAg_ClrObjRam:
00005FAE 22C0                       		move.l	d0,(a1)+
00005FB0 51C9 FFFC                  		dbf	d1,TryAg_ClrObjRam ; clear object RAM
00005FB4                            
00005FB4 701D                       		moveq	#$1D,d0
00005FB6 6100 B96A                  		bsr.w	RunPLC_ROM	; load "TRY AGAIN" or "END" patterns
00005FBA 43F8 FB80                  		lea	($FFFFFB80).w,a1
00005FBE 7000                       		moveq	#0,d0
00005FC0 323C 001F                  		move.w	#$1F,d1
00005FC4                            
00005FC4                            TryAg_ClrPallet:
00005FC4 22C0                       		move.l	d0,(a1)+
00005FC6 51C9 FFFC                  		dbf	d1,TryAg_ClrPallet ; fill pallet with black ($0000)
00005FCA                            
00005FCA 7013                       		moveq	#$13,d0
00005FCC 6100 C330                  		bsr.w	PalLoad1	; load ending pallet
00005FD0 4278 FBC0                  		clr.w	($FFFFFBC0).w
00005FD4 11FC 008B D080             		move.b	#$8B,($FFFFD080).w ; load Eggman object
00005FDA 4EB9 0000 0000             		jsr	ObjectsLoad
00005FE0 4EB9 0000 0000             		jsr	BuildSprites
00005FE6 31FC 0708 F614             		move.w	#1800,($FFFFF614).w ; show screen for 30 seconds
00005FEC 6100 BFBC                  		bsr.w	Pal_FadeTo
00005FF0                            
00005FF0                            ; ---------------------------------------------------------------------------
00005FF0                            ; "TRY AGAIN" and "END"	screen main loop
00005FF0                            ; ---------------------------------------------------------------------------
00005FF0                            TryAg_MainLoop:
00005FF0 6100 B5EC                  		bsr.w	PauseGame
00005FF4 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00005FFA 6100 CD3E                  		bsr.w	DelayProgram
00005FFE 4EB9 0000 0000             		jsr	ObjectsLoad
00006004 4EB9 0000 0000             		jsr	BuildSprites
0000600A 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
00006010 6600                       		bne.s	TryAg_Exit	; if yes, branch
00006012 4A78 F614                  		tst.w	($FFFFF614).w	; has 30 seconds elapsed?
00006016 6700                       		beq.s	TryAg_Exit	; if yes, branch
00006018 0C38 001C F600             		cmpi.b	#$1C,($FFFFF600).w
0000601E 67D0                       		beq.s	TryAg_MainLoop
00006020                            
00006020                            TryAg_Exit:
00006020 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00006026 4E75                       		rts	
00006028                            
00006028                            ; ===========================================================================
00006028                            ; ---------------------------------------------------------------------------
00006028                            ; Object 8B - Eggman on "TRY AGAIN" and "END"	screens
00006028                            ; ---------------------------------------------------------------------------
00006028                            
00006028                            Obj8B:					; XREF: Obj_Index
00006028 7000                       		moveq	#0,d0
0000602A 1028 0024                  		move.b	$24(a0),d0
0000602E 323B 0000                  		move.w	Obj8B_Index(pc,d0.w),d1
00006032 4EBB 1000                  		jsr	Obj8B_Index(pc,d1.w)
00006036 4EF9 0000 0000             		jmp	DisplaySprite
0000603C                            ; ===========================================================================
0000603C 0000                       Obj8B_Index:	dc.w Obj8B_Main-Obj8B_Index
0000603E 0000                       		dc.w Obj8B_Animate-Obj8B_Index
00006040 0000                       		dc.w Obj8B_Juggle-Obj8B_Index
00006042 0000                       		dc.w loc_5A8E-Obj8B_Index
00006044                            ; ===========================================================================
00006044                            
00006044                            Obj8B_Main:				; XREF: Obj8B_Index
00006044 5428 0024                  		addq.b	#2,$24(a0)
00006048 317C 0120 0008             		move.w	#$120,8(a0)
0000604E 317C 00F4 000A             		move.w	#$F4,$A(a0)
00006054 217C 0000 0000 0004        		move.l	#Map_obj8B,4(a0)
0000605C 317C 03E1 0002             		move.w	#$3E1,2(a0)
00006062 117C 0000 0001             		move.b	#0,1(a0)
00006068 117C 0002 0018             		move.b	#2,$18(a0)
0000606E 117C 0002 001C             		move.b	#2,$1C(a0)	; use "END" animation
00006074 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
0000607A 6700                       		beq.s	Obj8B_Animate	; if yes, branch
0000607C 11FC 008A D0C0             		move.b	#$8A,($FFFFD0C0).w ; load credits object
00006082 31FC 0009 FFF4             		move.w	#9,($FFFFFFF4).w ; use "TRY AGAIN" text
00006088 11FC 008C D800             		move.b	#$8C,($FFFFD800).w ; load emeralds object on "TRY AGAIN" screen
0000608E 117C 0000 001C             		move.b	#0,$1C(a0)	; use "TRY AGAIN" animation
00006094                            
00006094                            Obj8B_Animate:				; XREF: Obj8B_Index
00006094 43F9 0000 0000             		lea	(Ani_obj8B).l,a1
0000609A 4EF9 0000 0000             		jmp	AnimateSprite
000060A0                            ; ===========================================================================
000060A0                            
000060A0                            Obj8B_Juggle:				; XREF: Obj8B_Index
000060A0 5428 0024                  		addq.b	#2,$24(a0)
000060A4 7002                       		moveq	#2,d0
000060A6 0828 0000 001C             		btst	#0,$1C(a0)
000060AC 6700                       		beq.s	loc_5A6A
000060AE 4440                       		neg.w	d0
000060B0                            
000060B0                            loc_5A6A:
000060B0 43F8 D800                  		lea	($FFFFD800).w,a1
000060B4 7205                       		moveq	#5,d1
000060B6                            
000060B6                            loc_5A70:
000060B6 1340 003E                  		move.b	d0,$3E(a1)
000060BA 3400                       		move.w	d0,d2
000060BC E742                       		asl.w	#3,d2
000060BE D529 0026                  		add.b	d2,$26(a1)
000060C2 43E9 0040                  		lea	$40(a1),a1
000060C6 51C9 FFEE                  		dbf	d1,loc_5A70
000060CA 5228 001A                  		addq.b	#1,$1A(a0)
000060CE 317C 0070 0030             		move.w	#112,$30(a0)
000060D4                            
000060D4                            loc_5A8E:				; XREF: Obj8B_Index
000060D4 5368 0030                  		subq.w	#1,$30(a0)
000060D8 6A00                       		bpl.s	locret_5AA0
000060DA 0868 0000 001C             		bchg	#0,$1C(a0)
000060E0 117C 0002 0024             		move.b	#2,$24(a0)
000060E6                            
000060E6                            locret_5AA0:
000060E6 4E75                       		rts	
000060E8                            ; ===========================================================================
000060E8                            Ani_obj8B:
000060E8                            	include "_anim\obj8B.asm"
000060E8                            ; ---------------------------------------------------------------------------
000060E8                            ; Animation script - Eggman on the "TRY AGAIN" and "END" screens
000060E8                            ; ---------------------------------------------------------------------------
000060E8 0000                       		dc.w byte_5AA8-Ani_obj8B
000060EA 0000                       		dc.w byte_5AAC-Ani_obj8B
000060EC 0000                       		dc.w byte_5AB0-Ani_obj8B
000060EE 0500 FC01                  byte_5AA8:	dc.b 5,	0, $FC,	1
000060F2 0502 FC03                  byte_5AAC:	dc.b 5,	2, $FC,	3
000060F6 0704 0506 0504 0506 0504+  byte_5AB0:	dc.b 7,	4, 5, 6, 5, 4, 5, 6, 5,	4, 5, 6, 5, 7, 5, 6, 5,	$FF
00006108                            		even
00006108                            		even
00006108                            
00006108                            ; ===========================================================================
00006108                            ; ---------------------------------------------------------------------------
00006108                            ; Object 8C - chaos emeralds on	the "TRY AGAIN"	screen
00006108                            ; ---------------------------------------------------------------------------
00006108                            
00006108                            Obj8C:					; XREF: Obj_Index
00006108 7000                       		moveq	#0,d0
0000610A 1028 0024                  		move.b	$24(a0),d0
0000610E 323B 0000                  		move.w	Obj8C_Index(pc,d0.w),d1
00006112 4EBB 1000                  		jsr	Obj8C_Index(pc,d1.w)
00006116 4EF9 0000 0000             		jmp	DisplaySprite
0000611C                            ; ===========================================================================
0000611C 0000                       Obj8C_Index:	dc.w Obj8C_Main-Obj8C_Index
0000611E 0000                       		dc.w Obj8C_Move-Obj8C_Index
00006120                            ; ===========================================================================
00006120                            
00006120                            Obj8C_Main:				; XREF: Obj8C_Index
00006120 2248                       		movea.l	a0,a1
00006122 7400                       		moveq	#0,d2
00006124 7600                       		moveq	#0,d3
00006126 7205                       		moveq	#5,d1
00006128 9238 FE57                  		sub.b	($FFFFFE57).w,d1
0000612C                            
0000612C                            Obj8C_MakeEms:				; XREF: loc_5B42
0000612C 12BC 008C                  		move.b	#$8C,(a1)	; load emerald object
00006130 5429 0024                  		addq.b	#2,$24(a1)
00006134 237C 0000 5DC0 0004        		move.l	#Map_obj88,4(a1)
0000613C 337C 03C5 0002             		move.w	#$3C5,2(a1)
00006142 137C 0000 0001             		move.b	#0,1(a1)
00006148 137C 0001 0018             		move.b	#1,$18(a1)
0000614E 337C 0104 0008             		move.w	#$104,8(a1)
00006154 337C 0120 0038             		move.w	#$120,$38(a1)
0000615A 337C 00EC 000A             		move.w	#$EC,$A(a1)
00006160 3369 000A 003A             		move.w	$A(a1),$3A(a1)
00006166 137C 001C 003C             		move.b	#$1C,$3C(a1)
0000616C 47F8 FE58                  		lea	($FFFFFE58).w,a3
00006170                            
00006170                            Obj8C_ChkEms:
00006170 7000                       		moveq	#0,d0
00006172 1038 FE57                  		move.b	($FFFFFE57).w,d0
00006176 5340                       		subq.w	#1,d0
00006178 6500                       		bcs.s	loc_5B42
0000617A                            
0000617A                            Obj8C_ChkEmLoop:
0000617A B433 0000                  		cmp.b	(a3,d0.w),d2
0000617E 6600                       		bne.s	loc_5B3E
00006180 5202                       		addq.b	#1,d2
00006182 60EC                       		bra.s	Obj8C_ChkEms
00006184                            ; ===========================================================================
00006184                            
00006184                            loc_5B3E:
00006184 51C8 FFF4                  		dbf	d0,Obj8C_ChkEmLoop ; checks which emeralds you have
00006188                            
00006188                            loc_5B42:
00006188 1342 001A                  		move.b	d2,$1A(a1)
0000618C 5229 001A                  		addq.b	#1,$1A(a1)
00006190 5202                       		addq.b	#1,d2
00006192 137C 0080 0026             		move.b	#$80,$26(a1)
00006198 1343 001E                  		move.b	d3,$1E(a1)
0000619C 1343 001F                  		move.b	d3,$1F(a1)
000061A0 0643 000A                  		addi.w	#$A,d3
000061A4 43E9 0040                  		lea	$40(a1),a1
000061A8 51C9 FF82                  		dbf	d1,Obj8C_MakeEms
000061AC                            
000061AC                            Obj8C_Move:				; XREF: Obj8C_Index
000061AC 4A68 003E                  		tst.w	$3E(a0)
000061B0 6700                       		beq.s	locret_5BBA
000061B2 4A28 001E                  		tst.b	$1E(a0)
000061B6 6700                       		beq.s	loc_5B78
000061B8 5328 001E                  		subq.b	#1,$1E(a0)
000061BC 6600                       		bne.s	loc_5B80
000061BE                            
000061BE                            loc_5B78:
000061BE 3028 003E                  		move.w	$3E(a0),d0
000061C2 D168 0026                  		add.w	d0,$26(a0)
000061C6                            
000061C6                            loc_5B80:
000061C6 1028 0026                  		move.b	$26(a0),d0
000061CA 6700                       		beq.s	loc_5B8C
000061CC 0C00 0080                  		cmpi.b	#$80,d0
000061D0 6600                       		bne.s	loc_5B96
000061D2                            
000061D2                            loc_5B8C:
000061D2 4268 003E                  		clr.w	$3E(a0)
000061D6 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
000061DC                            
000061DC                            loc_5B96:
000061DC 4EB9 0000 2D6C             		jsr	(CalcSine).l
000061E2 7800                       		moveq	#0,d4
000061E4 1828 003C                  		move.b	$3C(a0),d4
000061E8 C3C4                       		muls.w	d4,d1
000061EA E081                       		asr.l	#8,d1
000061EC C1C4                       		muls.w	d4,d0
000061EE E080                       		asr.l	#8,d0
000061F0 D268 0038                  		add.w	$38(a0),d1
000061F4 D068 003A                  		add.w	$3A(a0),d0
000061F8 3141 0008                  		move.w	d1,8(a0)
000061FC 3140 000A                  		move.w	d0,$A(a0)
00006200                            
00006200                            locret_5BBA:
00006200 4E75                       		rts	
00006202                            ; ===========================================================================
00006202                            ; ---------------------------------------------------------------------------
00006202                            ; Sprite mappings - Eggman on	the "TRY AGAIN"	and "END" screens
00006202                            ; ---------------------------------------------------------------------------
00006202                            Map_obj8B:
00006202                            	include "_maps\obj8B.asm"
00006202                            ; ---------------------------------------------------------------------------
00006202                            ; Sprite mappings - Robotnik on	the "TRY AGAIN"	and "END" screens
00006202                            ; ---------------------------------------------------------------------------
00006202 0000 0000                  		dc.w byte_5BCC-Map_obj8B, byte_5BF5-Map_obj8B
00006206 0000 0000                  		dc.w byte_5C1E-Map_obj8B, byte_5C47-Map_obj8B
0000620A 0000 0000                  		dc.w byte_5C70-Map_obj8B, byte_5CAD-Map_obj8B
0000620E 0000 0000                  		dc.w byte_5CE0-Map_obj8B, byte_5D13-Map_obj8B
00006212 08                         byte_5BCC:	dc.b 8
00006213 E905 0000 F0               		dc.b $E9, 5, 0,	0, $F0
00006218 F90C 0004 E0               		dc.b $F9, $C, 0, 4, $E0
0000621D E904 0008 00               		dc.b $E9, 4, 0,	8, 0
00006222 F10D 000A 00               		dc.b $F1, $D, 0, $A, 0
00006227 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
0000622C 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00006231 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006236 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
0000623B 08                         byte_5BF5:	dc.b 8
0000623C E80D 0012 E0               		dc.b $E8, $D, 0, $12, $E0
00006241 F808 001A E8               		dc.b $F8, 8, 0,	$1A, $E8
00006246 E805 0800 00               		dc.b $E8, 5, 8,	0, 0
0000624B F80C 0804 00               		dc.b $F8, $C, 8, 4, 0
00006250 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
00006255 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
0000625A 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
0000625F 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006264 08                         byte_5C1E:	dc.b 8
00006265 E904 0808 F0               		dc.b $E9, 4, 8,	8, $F0
0000626A F10D 080A E0               		dc.b $F1, $D, 8, $A, $E0
0000626F E905 0800 00               		dc.b $E9, 5, 8,	0, 0
00006274 F90C 0804 00               		dc.b $F9, $C, 8, 4, 0
00006279 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
0000627E 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00006283 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006288 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
0000628D 08                         byte_5C47:	dc.b 8
0000628E E805 0000 F0               		dc.b $E8, 5, 0,	0, $F0
00006293 F80C 0004 E0               		dc.b $F8, $C, 0, 4, $E0
00006298 E80D 0812 00               		dc.b $E8, $D, 8, $12, 0
0000629D F808 081A 00               		dc.b $F8, 8, 8,	$1A, 0
000062A2 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
000062A7 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
000062AC 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
000062B1 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
000062B6 0C                         byte_5C70:	dc.b $C
000062B7 ED0A 002B E8               		dc.b $ED, $A, 0, $2B, $E8
000062BC F500 0034 E0               		dc.b $F5, 0, 0,	$34, $E0
000062C1 0504 0035 F0               		dc.b 5,	4, 0, $35, $F0
000062C6 0D08 0037 E8               		dc.b $D, 8, 0, $37, $E8
000062CB ED0A 082B 00               		dc.b $ED, $A, 8, $2B, 0
000062D0 F500 0834 18               		dc.b $F5, 0, 8,	$34, $18
000062D5 0504 0835 00               		dc.b 5,	4, 8, $35, 0
000062DA 0D08 0837 00               		dc.b $D, 8, 8, $37, 0
000062DF 100D 0073 E0               		dc.b $10, $D, 0, $73, $E0
000062E4 100D 007B 00               		dc.b $10, $D, 0, $7B, 0
000062E9 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
000062EE 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
000062F3 0A                         byte_5CAD:	dc.b $A
000062F4 D207 003A F0               		dc.b $D2, 7, 0,	$3A, $F0
000062F9 DA00 0042 E8               		dc.b $DA, 0, 0,	$42, $E8
000062FE F207 0043 F0               		dc.b $F2, 7, 0,	$43, $F0
00006303 D207 083A 00               		dc.b $D2, 7, 8,	$3A, 0
00006308 DA00 0842 10               		dc.b $DA, 0, 8,	$42, $10
0000630D F207 0843 00               		dc.b $F2, 7, 8,	$43, 0
00006312 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00006317 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
0000631C 1C0C 005F E0               		dc.b $1C, $C, 0, $5F, $E0
00006321 1C0C 085F 00               		dc.b $1C, $C, 8, $5F, 0
00006326 0A                         byte_5CE0:	dc.b $A
00006327 C40B 004B E8               		dc.b $C4, $B, 0, $4B, $E8
0000632C E408 0057 E8               		dc.b $E4, 8, 0,	$57, $E8
00006331 EC00 005A F0               		dc.b $EC, 0, 0,	$5A, $F0
00006336 C40B 084B 00               		dc.b $C4, $B, 8, $4B, 0
0000633B E408 0857 00               		dc.b $E4, 8, 8,	$57, 0
00006340 EC00 085A 08               		dc.b $EC, 0, 8,	$5A, 8
00006345 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
0000634A 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
0000634F 1C0C 0063 E0               		dc.b $1C, $C, 0, $63, $E0
00006354 1C0C 0863 00               		dc.b $1C, $C, 8, $63, 0
00006359 0C                         byte_5D13:	dc.b $C
0000635A F40A 002B E8               		dc.b $F4, $A, 0, $2B, $E8
0000635F FC00 0034 E0               		dc.b $FC, 0, 0,	$34, $E0
00006364 0C04 0035 F0               		dc.b $C, 4, 0, $35, $F0
00006369 1408 0037 E8               		dc.b $14, 8, 0,	$37, $E8
0000636E F40A 082B 00               		dc.b $F4, $A, 8, $2B, 0
00006373 FC00 0834 18               		dc.b $FC, 0, 8,	$34, $18
00006378 0C04 0835 00               		dc.b $C, 4, 8, $35, 0
0000637D 1408 0837 00               		dc.b $14, 8, 8,	$37, 0
00006382 180C 0083 E0               		dc.b $18, $C, 0, $83, $E0
00006387 180C 0087 00               		dc.b $18, $C, 0, $87, 0
0000638C 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
00006391 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
00006396                            		even
00006396                            		even
00006396                            
00006396                            ; ---------------------------------------------------------------------------
00006396                            ; Ending sequence demos
00006396                            ; ---------------------------------------------------------------------------
00006396                            Demo_EndGHZ1:	incbin	demodata\e_ghz1.bin
000063C4                            		even
000063C4                            Demo_EndMZ:	incbin	demodata\e_mz.bin
00006404                            		even
00006404                            Demo_EndSYZ:	incbin	demodata\e_syz.bin
00006434                            		even
00006434                            Demo_EndLZ:	incbin	demodata\e_lz.bin
00006464                            		even
00006464                            Demo_EndSLZ:	incbin	demodata\e_slz.bin
00006484                            		even
00006484                            Demo_EndSBZ1:	incbin	demodata\e_sbz1.bin
000064A4                            		even
000064A4                            Demo_EndSBZ2:	incbin	demodata\e_sbz2.bin
000064D4                            		even
000064D4                            Demo_EndGHZ2:	incbin	demodata\e_ghz2.bin
00006504                            		even
00006504                            
00006504                            ; ---------------------------------------------------------------------------
00006504                            ; Subroutine to	load level boundaries and start	locations
00006504                            ; ---------------------------------------------------------------------------
00006504                            
00006504                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006504                            
00006504                            
00006504                            LevelSizeLoad:				; XREF: TitleScreen; Level; EndingSequence
00006504 7000                       		moveq	#0,d0
00006506 11C0 F740                  		move.b	d0,($FFFFF740).w
0000650A 11C0 F741                  		move.b	d0,($FFFFF741).w
0000650E 11C0 F746                  		move.b	d0,($FFFFF746).w
00006512 11C0 F748                  		move.b	d0,($FFFFF748).w
00006516 11C0 F742                  		move.b	d0,($FFFFF742).w
0000651A 3038 FE10                  		move.w	($FFFFFE10).w,d0
0000651E ED08                       		lsl.b	#6,d0
00006520 E848                       		lsr.w	#4,d0
00006522 3200                       		move.w	d0,d1
00006524 D040                       		add.w	d0,d0
00006526 D041                       		add.w	d1,d0
00006528 41FB 0000                  		lea	LevelSizeArray(pc,d0.w),a0 ; load level	boundaries
0000652C 3018                       		move.w	(a0)+,d0
0000652E 31C0 F730                  		move.w	d0,($FFFFF730).w
00006532 2018                       		move.l	(a0)+,d0
00006534 21C0 F728                  		move.l	d0,($FFFFF728).w
00006538 21C0 F720                  		move.l	d0,($FFFFF720).w
0000653C 2018                       		move.l	(a0)+,d0
0000653E 21C0 F72C                  		move.l	d0,($FFFFF72C).w
00006542 21C0 F724                  		move.l	d0,($FFFFF724).w
00006546 3038 F728                  		move.w	($FFFFF728).w,d0
0000654A 0640 0240                  		addi.w	#$240,d0
0000654E 31C0 F732                  		move.w	d0,($FFFFF732).w
00006552 31FC 1010 F74A             		move.w	#$1010,($FFFFF74A).w
00006558 3018                       		move.w	(a0)+,d0
0000655A 31C0 F73E                  		move.w	d0,($FFFFF73E).w
0000655E 6000 0000                  		bra.w	LevSz_ChkLamp
00006562                            ; ===========================================================================
00006562                            ; ---------------------------------------------------------------------------
00006562                            ; Level size array and ending start location array
00006562                            ; ---------------------------------------------------------------------------
00006562                            LevelSizeArray:        ; GHZ
00006562 0004 0000 24BF 0000 0300+          dc.w $0004, $0000, $24BF, $0000, $0300, $0060 ; Act 1
0000656E 0004 0000 1EBF 0000 0300+          dc.w $0004, $0000, $1EBF, $0000, $0300, $0060 ; Act 2
0000657A 0004 0000 2960 0000 0300+          dc.w $0004, $0000, $2960, $0000, $0300, $0060 ; Act 3
00006586 0004 0000 2ABF 0000 0300+          dc.w $0004, $0000, $2ABF, $0000, $0300, $0060 ; Act 4 (Unused)
00006592                                    ; LZ
00006592 0004 0000 19BF 0000 0530+          dc.w $0004, $0000, $19BF, $0000, $0530, $0060 ; Act 1
0000659E 0004 0000 10AF 0000 0720+          dc.w $0004, $0000, $10AF, $0000, $0720, $0060 ; Act 2
000065AA 0004 0000 1D00 FF00 0800+          dc.w $0004, $0000, $1D00, $FF00, $0800, $0060 ; Act 3
000065B6 0004 0000 20BF 0000 0720+          dc.w $0004, $0000, $20BF, $0000, $0720, $0060 ; Act 4 (Scrap Brain Act 3)
000065C2                                    ; MZ
000065C2 0004 0000 17BF 0000 01D0+          dc.w $0004, $0000, $17BF, $0000, $01D0, $0060 ; Act 1
000065CE 0004 0000 17BF 0000 0520+          dc.w $0004, $0000, $17BF, $0000, $0520, $0060 ; Act 2
000065DA 0004 0000 1800 0000 0720+          dc.w $0004, $0000, $1800, $0000, $0720, $0060 ; Act 3
000065E6 0004 0000 16BF 0000 0720+          dc.w $0004, $0000, $16BF, $0000, $0720, $0060 ; Act 4 (Unused)
000065F2                                    ; SLZ
000065F2 0004 0000 1FBF 0000 0640+          dc.w $0004, $0000, $1FBF, $0000, $0640, $0060 ; Act 1
000065FE 0004 0000 1FBF 0000 0640+          dc.w $0004, $0000, $1FBF, $0000, $0640, $0060 ; Act 2
0000660A 0004 0000 2000 0000 06C0+          dc.w $0004, $0000, $2000, $0000, $06C0, $0060 ; Act 3
00006616 0004 0000 3EC0 0000 0720+          dc.w $0004, $0000, $3EC0, $0000, $0720, $0060 ; Act 4 (Unused)
00006622                                    ; SYZ
00006622 0004 0000 22C0 0000 0420+          dc.w $0004, $0000, $22C0, $0000, $0420, $0060 ; Act 1
0000662E 0004 0000 28C0 0000 0520+          dc.w $0004, $0000, $28C0, $0000, $0520, $0060 ; Act 2
0000663A 0004 0000 2C00 0000 0620+          dc.w $0004, $0000, $2C00, $0000, $0620, $0060 ; Act 3
00006646 0004 0000 2EC0 0000 0620+          dc.w $0004, $0000, $2EC0, $0000, $0620, $0060 ; Act 4 (Unused)
00006652                                    ; SBZ
00006652 0004 0000 21C0 0000 0720+          dc.w $0004, $0000, $21C0, $0000, $0720, $0060 ; Act 1
0000665E 0004 0000 1E40 FF00 0800+          dc.w $0004, $0000, $1E40, $FF00, $0800, $0060 ; Act 2
0000666A 0004 2080 2460 0510 0510+          dc.w $0004, $2080, $2460, $0510, $0510, $0060 ; Act 3 (Final Zone)
00006676 0004 0000 3EC0 0000 0720+          dc.w $0004, $0000, $3EC0, $0000, $0720, $0060 ; Act 4 (Unused)
00006682                                    ; Ending
00006682 0004 0000 0500 0110 0110+          dc.w $0004, $0000, $0500, $0110, $0110, $0060 ; Act 1 (Good Ending)
0000668E 0004 0000 0DC0 0110 0110+          dc.w $0004, $0000, $0DC0, $0110, $0110, $0060 ; Act 2 (Bad Ending)
0000669A 0004 0000 2FFF 0000 0320+          dc.w $0004, $0000, $2FFF, $0000, $0320, $0060 ; Act 3 (Unused)
000066A6 0004 0000 2FFF 0000 0320+          dc.w $0004, $0000, $2FFF, $0000, $0320, $0060 ; Act 4 (Unused)
000066B2                                    ; BHZ
000066B2 0004 0000 24BF 0000 0300+          dc.w $0004, $0000, $24BF, $0000, $0300, $0060 ; Act 1
000066BE 0004 0000 1EBF 0000 0300+          dc.w $0004, $0000, $1EBF, $0000, $0300, $0060 ; Act 2
000066CA 0004 0000 2960 0000 0300+          dc.w $0004, $0000, $2960, $0000, $0300, $0060 ; Act 3
000066D6 0004 0000 2ABF 0000 0300+          dc.w $0004, $0000, $2ABF, $0000, $0300, $0060 ; Act 4 (Unused)
000066E2                                    even
000066E2                            
000066E2                            ; ===========================================================================
000066E2                            
000066E2                            LevSz_ChkLamp:				; XREF: LevelSizeLoad
000066E2 4A38 FE30                  		tst.b	($FFFFFE30).w	; have any lampposts been hit?
000066E6 6700                       		beq.s	LevSz_StartLoc	; if not, branch
000066E8 4EB9 0000 0000             		jsr	Obj79_LoadInfo
000066EE 3238 D008                  		move.w	($FFFFD008).w,d1
000066F2 3038 D00C                  		move.w	($FFFFD00C).w,d0
000066F6 6000 0000                  		bra.w	loc_60D0
000066FA                            ; ===========================================================================
000066FA                            
000066FA                            
000066FA                            LevSz_StartLoc:				; XREF: LevelSizeLoad
000066FA 3038 FE10                  		move.w	($FFFFFE10).w,d0
000066FE ED08                       		lsl.b	#6,d0
00006700 E848                       		lsr.w	#4,d0
00006702 43FB 0000                  		lea	StartLocArray(pc,d0.w),a1 ; load Sonic's start location
00006706 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
0000670A 6A00 0000                  		bpl.w	LevSz_SonicPos	; if not, branch
0000670E 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00006712 5340                       		subq.w	#1,d0
00006714 E548                       		lsl.w	#2,d0
00006716 43FB 0000                  		lea	EndingStLocArray(pc,d0.w),a1 ; load Sonic's start location
0000671A 6000 0000                  		bra.w	LevSz_SonicPos
0000671E                            
0000671E                            EndingStLocArray:
0000671E                            		incbin	misc\sloc_end.bin
0000673E                            		even
0000673E                            		
0000673E                            ; ===========================================================================
0000673E                            ; ---------------------------------------------------------------------------
0000673E                            ; Sonic	start location array
0000673E                            ; ---------------------------------------------------------------------------
0000673E                            StartLocArray:	incbin	misc\sloc_lev.bin
000067BE                            		even
000067BE                            
000067BE                            LevSz_SonicPos:
000067BE 7200                       		moveq	#0,d1
000067C0 3219                       		move.w	(a1)+,d1
000067C2 31C1 D008                  		move.w	d1,($FFFFD008).w ; set Sonic's position on x-axis
000067C6 7000                       		moveq	#0,d0
000067C8 3011                       		move.w	(a1),d0
000067CA 31C0 D00C                  		move.w	d0,($FFFFD00C).w ; set Sonic's position on y-axis
000067CE                            
000067CE                            loc_60D0:				; XREF: LevSz_ChkLamp
000067CE 0441 00A0                  		subi.w	#$A0,d1
000067D2 6400                       		bcc.s	loc_60D8
000067D4 7200                       		moveq	#0,d1
000067D6                            
000067D6                            loc_60D8:
000067D6 3438 F72A                  		move.w	($FFFFF72A).w,d2
000067DA B242                       		cmp.w	d2,d1
000067DC 6500                       		bcs.s	loc_60E2
000067DE 3202                       		move.w	d2,d1
000067E0                            
000067E0                            loc_60E2:
000067E0 31C1 F700                  		move.w	d1,($FFFFF700).w
000067E4 0440 0060                  		subi.w	#$60,d0
000067E8 6400                       		bcc.s	loc_60EE
000067EA 7000                       		moveq	#0,d0
000067EC                            
000067EC                            loc_60EE:
000067EC B078 F72E                  		cmp.w	($FFFFF72E).w,d0
000067F0 6D00                       		blt.s	loc_60F8
000067F2 3038 F72E                  		move.w	($FFFFF72E).w,d0
000067F6                            
000067F6                            loc_60F8:
000067F6 31C0 F704                  		move.w	d0,($FFFFF704).w
000067FA 6100 0000                  		bsr.w	BgScrollSpeed
000067FE 7000                       		moveq	#0,d0
00006800 1038 FE10                  		move.b	($FFFFFE10).w,d0
00006804 E508                       		lsl.b	#2,d0
00006806 21FB 0000 F7AC             		move.l	LoopTileNums(pc,d0.w),($FFFFF7AC).w
0000680C 6000 0000                  		bra.w	LevSz_Unk
00006810                            
00006810                            ; ---------------------------------------------------------------------------
00006810                            ; Which	256x256	tiles contain loops or roll-tunnels
00006810                            ; ---------------------------------------------------------------------------
00006810                            ; Format - 4 bytes per zone, referring to which 256x256 evoke special events:
00006810                            ; loop,	loop, tunnel, tunnel
00006810                            ; ---------------------------------------------------------------------------
00006810                            LoopTileNums:	incbin	misc\loopnums.bin
00006830                            		even
00006830                            ; this is from the cwa source code i will share kaito x gakupo mpreg if this does not work i swear t ogod if this does not
00006830                            ; ITS GONJE HELP
00006830                            ; ===========================================================================
00006830                            
00006830                            LevSz_Unk:				; XREF: LevelSizeLoad
00006830 7000                       		moveq	#0,d0
00006832 1038 FE10                  		move.b	($FFFFFE10).w,d0
00006836 E748                       		lsl.w	#3,d0
00006838 43FB 0000                  		lea	dword_61B4(pc,d0.w),a1
0000683C 45F8 F7F0                  		lea	($FFFFF7F0).w,a2
00006840 24D9                       		move.l	(a1)+,(a2)+
00006842 24D9                       		move.l	(a1)+,(a2)+
00006844 4E75                       		rts	
00006846                            ; End of function LevelSizeLoad
00006846                            
00006846                            ; ===========================================================================
00006846 0070 0100 0100 0100        dword_61B4:	dc.l $700100, $1000100
0000684E 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006856 0800 0100 0100 0000        		dc.l $8000100, $1000000
0000685E 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006866 0800 0100 0100 0000        		dc.l $8000100, $1000000
0000686E 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006876 0070 0100 0100 0100        		dc.l $700100, $1000100
0000687E                            
0000687E                            ; ---------------------------------------------------------------------------
0000687E                            ; Subroutine to	set scroll speed of some backgrounds
0000687E                            ; ---------------------------------------------------------------------------
0000687E                            
0000687E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000687E                            
0000687E                            
0000687E                            BgScrollSpeed:				; XREF: LevelSizeLoad
0000687E 4A38 FE30                  		tst.b	($FFFFFE30).w
00006882 6600                       		bne.s	loc_6206
00006884 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006888 31C0 F714                  		move.w	d0,($FFFFF714).w
0000688C 31C1 F708                  		move.w	d1,($FFFFF708).w
00006890 31C1 F710                  		move.w	d1,($FFFFF710).w
00006894 31C1 F718                  		move.w	d1,($FFFFF718).w
00006898                            
00006898                            loc_6206:
00006898 7400                       		moveq	#0,d2
0000689A 1438 FE10                  		move.b	($FFFFFE10).w,d2
0000689E D442                       		add.w	d2,d2
000068A0 343B 2000                  		move.w	BgScroll_Index(pc,d2.w),d2
000068A4 4EFB 2000                  		jmp	BgScroll_Index(pc,d2.w)
000068A8                            ; End of function BgScrollSpeed
000068A8                            
000068A8                            ; ===========================================================================
000068A8 0000 0000                  BgScroll_Index:	dc.w BgScroll_GHZ-BgScroll_Index, BgScroll_LZ-BgScroll_Index
000068AC 0000 0000                  		dc.w BgScroll_MZ-BgScroll_Index, BgScroll_SLZ-BgScroll_Index
000068B0 0000 0000                  		dc.w BgScroll_SYZ-BgScroll_Index, BgScroll_SBZ-BgScroll_Index
000068B4 0000 0000                  		dc.w BgScroll_End-BgScroll_Index, BgScroll_GHZ-BgScroll_Index
000068B8                            ; ===========================================================================
000068B8                            
000068B8                            BgScroll_GHZ:				; XREF: BgScroll_Index
000068B8 6000 0000                  		bra.w	Deform_GHZ
000068BC                            ; ===========================================================================
000068BC                            
000068BC                            BgScroll_LZ:				; XREF: BgScroll_Index
000068BC E280                       		asr.l	#1,d0
000068BE 31C0 F70C                  		move.w	d0,($FFFFF70C).w
000068C2 4E75                       		rts	
000068C4                            ; ===========================================================================
000068C4                            
000068C4                            BgScroll_MZ:				; XREF: BgScroll_Index
000068C4 4E75                       		rts	
000068C6                            ; ===========================================================================
000068C6                            
000068C6                            BgScroll_SLZ:				; XREF: BgScroll_Index
000068C6 E280                       		asr.l	#1,d0
000068C8 0640 00C0                  		addi.w	#$C0,d0
000068CC 31C0 F70C                  		move.w	d0,($FFFFF70C).w
000068D0 4E75                       		rts	
000068D2                            ; ===========================================================================
000068D2                            
000068D2                            BgScroll_SYZ:				; XREF: BgScroll_Index
000068D2 E980                       		asl.l	#4,d0
000068D4 2400                       		move.l	d0,d2
000068D6 E380                       		asl.l	#1,d0
000068D8 D082                       		add.l	d2,d0
000068DA E080                       		asr.l	#8,d0
000068DC 31C0 F70C                  		move.w	d0,($FFFFF70C).w
000068E0 31C0 F714                  		move.w	d0,($FFFFF714).w
000068E4 4E75                       		rts	
000068E6                            ; ===========================================================================
000068E6                            
000068E6                            BgScroll_SBZ:				; XREF: BgScroll_Index
000068E6 E980                       		asl.l	#4,d0
000068E8 E380                       		asl.l	#1,d0
000068EA E080                       		asr.l	#8,d0
000068EC 31C0 F70C                  		move.w	d0,($FFFFF70C).w
000068F0 4E75                       		rts	
000068F2                            ; ===========================================================================
000068F2                            
000068F2                            BgScroll_End:				; XREF: BgScroll_Index
000068F2 31FC 001E F70C             		move.w	#$1E,($FFFFF70C).w
000068F8 31FC 001E F714             		move.w	#$1E,($FFFFF714).w
000068FE 4E75                       		rts	
00006900                            ; ===========================================================================
00006900 31FC 00A8 F708             		move.w	#$A8,($FFFFF708).w
00006906 31FC 001E F70C             		move.w	#$1E,($FFFFF70C).w
0000690C 31FC FFC0 F710             		move.w	#-$40,($FFFFF710).w
00006912 31FC 001E F714             		move.w	#$1E,($FFFFF714).w
00006918 4E75                       		rts
0000691A                            
0000691A                            ; ---------------------------------------------------------------------------
0000691A                            ; Background layer deformation subroutines
0000691A                            ; ---------------------------------------------------------------------------
0000691A                            
0000691A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000691A                            
0000691A                            
0000691A                            DeformBgLayer:				; XREF: TitleScreen; Level; EndingSequence
0000691A 4A38 F744                  		tst.b	($FFFFF744).w
0000691E 6700                       		beq.s	loc_628E
00006920 4E75                       		rts	
00006922                            ; ===========================================================================
00006922                            
00006922                            loc_628E:
00006922 4278 F754                  		clr.w	($FFFFF754).w
00006926 4278 F756                  		clr.w	($FFFFF756).w
0000692A 4278 F758                  		clr.w	($FFFFF758).w
0000692E 4278 F75A                  		clr.w	($FFFFF75A).w
00006932 6100 0000                  		bsr.w	ScrollHoriz
00006936 6100 0000                  		bsr.w	ScrollVertical
0000693A 6100 0000                  		bsr.w	DynScrResizeLoad
0000693E 31F8 F700 F61A             		move.w	($FFFFF700).w,($FFFFF61A).w
00006944 31F8 F704 F616             		move.w	($FFFFF704).w,($FFFFF616).w
0000694A 31F8 F708 F61C             		move.w	($FFFFF708).w,($FFFFF61C).w
00006950 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006956 31F8 F718 F620             		move.w	($FFFFF718).w,($FFFFF620).w
0000695C 31F8 F71C F61E             		move.w	($FFFFF71C).w,($FFFFF61E).w
00006962 7000                       		moveq	#0,d0
00006964 1038 FE10                  		move.b	($FFFFFE10).w,d0
00006968 D040                       		add.w	d0,d0
0000696A 303B 0000                  		move.w	Deform_Index(pc,d0.w),d0
0000696E 4EFB 0000                  		jmp	Deform_Index(pc,d0.w)
00006972                            ; End of function DeformBgLayer
00006972                            
00006972                            ; ===========================================================================
00006972                            ; ---------------------------------------------------------------------------
00006972                            ; Offset index for background layer deformation	code
00006972                            ; ---------------------------------------------------------------------------
00006972 0000 0000                  Deform_Index:	dc.w Deform_GHZ-Deform_Index, Deform_LZ-Deform_Index
00006976 0000 0000                  		dc.w Deform_MZ-Deform_Index, Deform_SLZ-Deform_Index
0000697A 0000 0000                  		dc.w Deform_SYZ-Deform_Index, Deform_SBZ-Deform_Index
0000697E 0000 0000                  		dc.w Deform_GHZ-Deform_Index, Deform_GHZ-Deform_Index
00006982                            ; ---------------------------------------------------------------------------
00006982                            ; Green	Hill Zone background layer deformation code
00006982                            ; ---------------------------------------------------------------------------
00006982                            
00006982                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006982                            
00006982                            
00006982                            Deform_GHZ:				; XREF: Deform_Index
00006982 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006986 48C4                       		ext.l	d4
00006988 EB84                       		asl.l	#5,d4
0000698A 2204                       		move.l	d4,d1
0000698C E384                       		asl.l	#1,d4
0000698E D881                       		add.l	d1,d4
00006990 7A00                       		moveq	#0,d5
00006992 6100 0000                  		bsr.w	ScrollBlock1
00006996 6100 0000                  		bsr.w	ScrollBlock4
0000699A 43F8 CC00                  		lea	($FFFFCC00).w,a1
0000699E 3038 F704                  		move.w	($FFFFF704).w,d0
000069A2 0240 07FF                  		andi.w	#$7FF,d0
000069A6 EA48                       		lsr.w	#5,d0
000069A8 4440                       		neg.w	d0
000069AA 0640 0026                  		addi.w	#$26,d0
000069AE 31C0 F714                  		move.w	d0,($FFFFF714).w
000069B2 3800                       		move.w	d0,d4
000069B4 6100 0000                  		bsr.w	ScrollBlock3
000069B8 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
000069BE 323C 006F                  		move.w	#$6F,d1
000069C2 9244                       		sub.w	d4,d1
000069C4 3038 F700                  		move.w	($FFFFF700).w,d0
000069C8 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w
000069CE 6600                       		bne.s	loc_633C
000069D0 7000                       		moveq	#0,d0
000069D2                            
000069D2                            loc_633C:
000069D2 4440                       		neg.w	d0
000069D4 4840                       		swap	d0
000069D6 3038 F708                  		move.w	($FFFFF708).w,d0
000069DA 4440                       		neg.w	d0
000069DC                            
000069DC                            loc_6346:
000069DC 22C0                       		move.l	d0,(a1)+
000069DE 51C9 FFFC                  		dbf	d1,loc_6346
000069E2 323C 0027                  		move.w	#$27,d1
000069E6 3038 F710                  		move.w	($FFFFF710).w,d0
000069EA 4440                       		neg.w	d0
000069EC                            
000069EC                            loc_6356:
000069EC 22C0                       		move.l	d0,(a1)+
000069EE 51C9 FFFC                  		dbf	d1,loc_6356
000069F2 3038 F710                  		move.w	($FFFFF710).w,d0
000069F6 0640 0000                  		addi.w	#0,d0
000069FA 3438 F700                  		move.w	($FFFFF700).w,d2
000069FE 0642 FE00                  		addi.w	#-$200,d2
00006A02 9440                       		sub.w	d0,d2
00006A04 48C2                       		ext.l	d2
00006A06 E182                       		asl.l	#8,d2
00006A08 85FC 0068                  		divs.w	#$68,d2
00006A0C 48C2                       		ext.l	d2
00006A0E E182                       		asl.l	#8,d2
00006A10 7600                       		moveq	#0,d3
00006A12 3600                       		move.w	d0,d3
00006A14 323C 0047                  		move.w	#$47,d1
00006A18 D244                       		add.w	d4,d1
00006A1A                            
00006A1A                            loc_6384:
00006A1A 3003                       		move.w	d3,d0
00006A1C 4440                       		neg.w	d0
00006A1E 22C0                       		move.l	d0,(a1)+
00006A20 4843                       		swap	d3
00006A22 D682                       		add.l	d2,d3
00006A24 4843                       		swap	d3
00006A26 51C9 FFF2                  		dbf	d1,loc_6384
00006A2A 4E75                       		rts	
00006A2C                            ; End of function Deform_GHZ
00006A2C                            
00006A2C                            ; ---------------------------------------------------------------------------
00006A2C                            ; Labyrinth Zone background layer deformation code
00006A2C                            ; ---------------------------------------------------------------------------
00006A2C                            
00006A2C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006A2C                            
00006A2C                            
00006A2C                            Deform_LZ:				; XREF: Deform_Index
00006A2C 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006A30 48C4                       		ext.l	d4
00006A32 EF84                       		asl.l	#7,d4
00006A34 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00006A38 48C5                       		ext.l	d5
00006A3A EF85                       		asl.l	#7,d5
00006A3C 6100 0000                  		bsr.w	ScrollBlock1
00006A40 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006A46 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006A4A 323C 00DF                  		move.w	#$DF,d1
00006A4E 3038 F700                  		move.w	($FFFFF700).w,d0
00006A52 4440                       		neg.w	d0
00006A54 4840                       		swap	d0
00006A56 3038 F708                  		move.w	($FFFFF708).w,d0
00006A5A 4440                       		neg.w	d0
00006A5C                            
00006A5C                            loc_63C6:
00006A5C 22C0                       		move.l	d0,(a1)+
00006A5E 51C9 FFFC                  		dbf	d1,loc_63C6
00006A62 3038 F646                  		move.w	($FFFFF646).w,d0
00006A66 9078 F704                  		sub.w	($FFFFF704).w,d0
00006A6A 4E75                       		rts	
00006A6C                            ; End of function Deform_LZ
00006A6C                            
00006A6C                            ; ---------------------------------------------------------------------------
00006A6C                            ; Marble Zone background layer deformation code
00006A6C                            ; ---------------------------------------------------------------------------
00006A6C                            
00006A6C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006A6C                            
00006A6C                            
00006A6C                            Deform_MZ:				; XREF: Deform_Index
00006A6C 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006A70 48C4                       		ext.l	d4
00006A72 ED84                       		asl.l	#6,d4
00006A74 2204                       		move.l	d4,d1
00006A76 E384                       		asl.l	#1,d4
00006A78 D881                       		add.l	d1,d4
00006A7A 7A00                       		moveq	#0,d5
00006A7C 6100 0000                  		bsr.w	ScrollBlock1
00006A80 303C 0200                  		move.w	#$200,d0
00006A84 3238 F704                  		move.w	($FFFFF704).w,d1
00006A88 0441 01C8                  		subi.w	#$1C8,d1
00006A8C 6500                       		bcs.s	loc_6402
00006A8E 3401                       		move.w	d1,d2
00006A90 D241                       		add.w	d1,d1
00006A92 D242                       		add.w	d2,d1
00006A94 E441                       		asr.w	#2,d1
00006A96 D041                       		add.w	d1,d0
00006A98                            
00006A98                            loc_6402:
00006A98 31C0 F714                  		move.w	d0,($FFFFF714).w
00006A9C 6100 0000                  		bsr.w	ScrollBlock3
00006AA0 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006AA6 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006AAA 323C 00DF                  		move.w	#$DF,d1
00006AAE 3038 F700                  		move.w	($FFFFF700).w,d0
00006AB2 4440                       		neg.w	d0
00006AB4 4840                       		swap	d0
00006AB6 3038 F708                  		move.w	($FFFFF708).w,d0
00006ABA 4440                       		neg.w	d0
00006ABC                            
00006ABC                            loc_6426:
00006ABC 22C0                       		move.l	d0,(a1)+
00006ABE 51C9 FFFC                  		dbf	d1,loc_6426
00006AC2 4E75                       		rts	
00006AC4                            ; End of function Deform_MZ
00006AC4                            
00006AC4                            ; ---------------------------------------------------------------------------
00006AC4                            ; Star Light Zone background layer deformation code
00006AC4                            ; ---------------------------------------------------------------------------
00006AC4                            
00006AC4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006AC4                            
00006AC4                            
00006AC4                            Deform_SLZ:				; XREF: Deform_Index
00006AC4 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006AC8 48C4                       		ext.l	d4
00006ACA EB84                       		asl.l	#5,d4
00006ACC 2204                       		move.l	d4,d1
00006ACE E384                       		asl.l	#1,d4
00006AD0 D881                       		add.l	d1,d4
00006AD2 7A00                       		moveq	#0,d5
00006AD4 6100 0000                  		bsr.w	ScrollBlock1
00006AD8 6100 0000                  		bsr.w	ScrollBlock3
00006ADC 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006AE0                            	;	move.w	($FFFFF704).w,d0
00006AE0                            	;	andi.w	#$7FF,d0
00006AE0 EA48                       		lsr.w	#5,d0
00006AE2 4440                       		neg.w	d0
00006AE4 0640 0026                  		addi.w	#$26,d0
00006AE8 31C0 F714                  		move.w	d0,($FFFFF714).w
00006AEC 3800                       		move.w	d0,d4
00006AEE                            	;	bsr.w	ScrollBlock3
00006AEE 31FC FFFA F70C                     move.w #-$6,($FFFFF70C).w ; lock the background vertically in place
00006AF4 43F8 CC00                  		lea	($FFFFCC00).w,a1	; load beginning address of horizontal scroll buffer to a1
00006AF8                            
00006AF8 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006AFC 4440                       		neg.w	d0			; negate (positive to negative)
00006AFE 4840                       		swap	d0			; send to the left side of d0
00006B00 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006B04 45F8 A800                  		lea	($FFFFA800).w,a2
00006B08 069A 0000 5000             		addi.l	#$5000,(a2)+
00006B0E 069A 0000 C000             		addi.l	#$C000,(a2)+
00006B14 3038 A800                  		move.w	($FFFFA800).w,d0
00006B18 4440                       		neg.w	d0			; negate (positive to negative)
00006B1A E240                       		asr.w	#1,d0			; divide by 2 (Slow down the scroll position)
00006B1C 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006B20                            slz_DeformLoop_1:
00006B20 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006B22 51C9 FFFC                  		dbf	d1,slz_DeformLoop_1	; repeat d1 number of scanlines
00006B26                            
00006B26 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006B2A 4440                       		neg.w	d0			; negate (positive to negative)
00006B2C 4840                       		swap	d0			; send to the left side of d0
00006B2E 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006B32 45F8 A800                  		lea	($FFFFA800).w,a2
00006B36 069A 0000 5000             		addi.l	#$5000,(a2)+
00006B3C 069A 0000 C000             		addi.l	#$C000,(a2)+
00006B42 3038 A800                  		move.w	($FFFFA800).w,d0
00006B46 4440                       		neg.w	d0			; negate (positive to negative)
00006B48 E440                       		asr.w	#2,d0			; divide by 4 (Slow down the scroll position)
00006B4A 323C 001A                  		move.w	#27-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006B4E                            slz_DeformLoop_2:
00006B4E 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006B50 51C9 FFFC                  		dbf	d1,slz_DeformLoop_2	; repeat d1 number of scanlines
00006B54                            
00006B54 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006B58 4440                       		neg.w	d0			; negate (positive to negative)
00006B5A 4840                       		swap	d0			; send to the left side of d0
00006B5C 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006B60 45F8 A800                  		lea	($FFFFA800).w,a2
00006B64 069A 0000 5000             		addi.l	#$5000,(a2)+
00006B6A 069A 0000 C000             		addi.l	#$C000,(a2)+
00006B70 3038 A800                  		move.w	($FFFFA800).w,d0
00006B74 4440                       		neg.w	d0			; negate (positive to negative)
00006B76 E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
00006B78 323C 0011                  		move.w	#18-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006B7C                            slz_DeformLoop_3:
00006B7C 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006B7E 51C9 FFFC                  		dbf	d1,slz_DeformLoop_3	; repeat d1 number of scanlines
00006B82                            
00006B82 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006B86 4440                       		neg.w	d0			; negate (positive to negative)
00006B88 4840                       		swap	d0			; send to the left side of d0
00006B8A 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006B8E 45F8 A800                  		lea	($FFFFA800).w,a2
00006B92 069A 0000 5000             		addi.l	#$5000,(a2)+
00006B98 069A 0000 C000             		addi.l	#$C000,(a2)+
00006B9E 3038 A800                  		move.w	($FFFFA800).w,d0
00006BA2 4440                       		neg.w	d0			; negate (positive to negative)
00006BA4 E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
00006BA6 323C 0009                  		move.w	#10-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006BAA                            slz_DeformLoop_4:
00006BAA 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006BAC 51C9 FFFC                  		dbf	d1,slz_DeformLoop_4	; repeat d1 number of scanlines
00006BB0                            
00006BB0 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006BB4 4440                       		neg.w	d0			; negate (positive to negative)
00006BB6 4840                       		swap	d0			; send to the left side of d0
00006BB8 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006BBC 45F8 A800                  		lea	($FFFFA800).w,a2
00006BC0 069A 0000 5000             		addi.l	#$5000,(a2)+
00006BC6 069A 0000 C000             		addi.l	#$C000,(a2)+
00006BCC 3038 A800                  		move.w	($FFFFA800).w,d0
00006BD0 4440                       		neg.w	d0			; negate (positive to negative)
00006BD2 E840                       		asr.w	#4,d0			; divide by 16 (Slow down the scroll position)
00006BD4 323C 000F                  		move.w	#16-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006BD8                            slz_DeformLoop_5:
00006BD8 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006BDA 51C9 FFFC                  		dbf	d1,slz_DeformLoop_5	; repeat d1 number of scanlines
00006BDE                            
00006BDE 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006BE2 4440                       		neg.w	d0			; negate (positive to negative)
00006BE4 4840                       		swap	d0			; send to the left side of d0
00006BE6 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006BEA 4440                       		neg.w	d0			; negate (positive to negative)
00006BEC EA40                       		asr.w	#5,d0			; divide by 32 (Slow down the scroll position)
00006BEE 323C 001C                  		move.w	#29-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006BF2                            slz_DeformLoop_6:
00006BF2 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006BF4 51C9 FFFC                  		dbf	d1,slz_DeformLoop_6	; repeat d1 number of scanlines
00006BF8                            
00006BF8 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006BFC 4440                       		neg.w	d0			; negate (positive to negative)
00006BFE 4840                       		swap	d0			; send to the left side of d0
00006C00 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006C04 4440                       		neg.w	d0			; negate (positive to negative)
00006C06 EE40                       		asr.w	#7,d0			; divide by 128 (Slow down the scroll position)
00006C08 323C 0005                  		move.w	#6-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006C0C                            slz_DeformLoop_7:
00006C0C 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006C0E 51C9 FFFC                  		dbf	d1,slz_DeformLoop_7	; repeat d1 number of scanlines
00006C12                            
00006C12 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006C16 4440                       		neg.w	d0			; negate (positive to negative)
00006C18 4840                       		swap	d0			; send to the left side of d0
00006C1A 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006C1E 4440                       		neg.w	d0			; negate (positive to negative)
00006C20 EC40                       		asr.w	#6,d0			; divide by 64 (Slow down the scroll position)
00006C22 323C 0004                  		move.w	#5-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006C26                            slz_DeformLoop_8:
00006C26 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006C28 51C9 FFFC                  		dbf	d1,slz_DeformLoop_8	; repeat d1 number of scanlines
00006C2C                            
00006C2C 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006C30 4440                       		neg.w	d0			; negate (positive to negative)
00006C32 4840                       		swap	d0			; send to the left side of d0
00006C34 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006C38 4440                       		neg.w	d0			; negate (positive to negative)
00006C3A EA40                       		asr.w	#5,d0			; divide by 32 (Slow down the scroll position)
00006C3C 323C 0007                  		move.w	#8-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006C40                            slz_DeformLoop_9:
00006C40 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006C42 51C9 FFFC                  		dbf	d1,slz_DeformLoop_9	; repeat d1 number of scanlines
00006C46                            
00006C46 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006C4A 4440                       		neg.w	d0			; negate (positive to negative)
00006C4C 4840                       		swap	d0			; send to the left side of d0
00006C4E 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006C52 4440                       		neg.w	d0			; negate (positive to negative)
00006C54 E840                       		asr.w	#4,d0			; divide by 16 (Slow down the scroll position)
00006C56 323C 0006                  		move.w	#7-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006C5A                            slz_DeformLoop_10:
00006C5A 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006C5C 51C9 FFFC                  		dbf	d1,slz_DeformLoop_10	; repeat d1 number of scanlines
00006C60                            
00006C60 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006C64 4440                       		neg.w	d0			; negate (positive to negative)
00006C66 4840                       		swap	d0			; send to the left side of d0
00006C68 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006C6C 4440                       		neg.w	d0			; negate (positive to negative)
00006C6E E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
00006C70 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006C74                            slz_DeformLoop_11:
00006C74 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006C76 51C9 FFFC                  		dbf	d1,slz_DeformLoop_11	; repeat d1 number of scanlines
00006C7A                            
00006C7A 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006C7E 4440                       		neg.w	d0			; negate (positive to negative)
00006C80 4840                       		swap	d0			; send to the left side of d0
00006C82 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006C86 4440                       		neg.w	d0			; negate (positive to negative)
00006C88 E440                       		asr.w	#2,d0			; divide by 4 (Slow down the scroll position)
00006C8A 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006C8E                            slz_DeformLoop_12:
00006C8E 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006C90 51C9 FFFC                  		dbf	d1,slz_DeformLoop_12	; repeat d1 number of scanlines
00006C94                            
00006C94 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006C98 4440                       		neg.w	d0			; negate (positive to negative)
00006C9A 4840                       		swap	d0			; send to the left side of d0
00006C9C 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006CA0 4440                       		neg.w	d0			; negate (positive to negative)
00006CA2 E240                       		asr.w	#1,d0			; divide by 2 (Slow down the scroll position)
00006CA4 323C 0031                  		move.w	#50-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006CA8                            slz_DeformLoop_13:
00006CA8 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006CAA 51C9 FFFC                  		dbf	d1,slz_DeformLoop_13	; repeat d1 number of scanlines
00006CAE 4E75                       		rts	
00006CB0                            ; End of function Deform_SLZ
00006CB0 4E75                       		rts	
00006CB2                            ; End of function Deform_SLZ_2
00006CB2                            
00006CB2                            ; ---------------------------------------------------------------------------
00006CB2                            ; Spring Yard Zone background layer deformation	code
00006CB2                            ; ---------------------------------------------------------------------------
00006CB2                            
00006CB2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006CB2                            
00006CB2                            
00006CB2                            Deform_SYZ:				; XREF: Deform_Index
00006CB2 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006CB6 48C4                       		ext.l	d4
00006CB8 ED84                       		asl.l	#6,d4
00006CBA 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00006CBE 48C5                       		ext.l	d5
00006CC0 E985                       		asl.l	#4,d5
00006CC2 2205                       		move.l	d5,d1
00006CC4 E385                       		asl.l	#1,d5
00006CC6 DA81                       		add.l	d1,d5
00006CC8 6100 0000                  		bsr.w	ScrollBlock1
00006CCC 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006CD2 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006CD6 323C 00DF                  		move.w	#$DF,d1
00006CDA 3038 F700                  		move.w	($FFFFF700).w,d0
00006CDE 4440                       		neg.w	d0
00006CE0 4840                       		swap	d0
00006CE2 3038 F708                  		move.w	($FFFFF708).w,d0
00006CE6 4440                       		neg.w	d0
00006CE8                            
00006CE8                            loc_653C:
00006CE8 22C0                       		move.l	d0,(a1)+
00006CEA 51C9 FFFC                  		dbf	d1,loc_653C
00006CEE 4E75                       		rts	
00006CF0                            ; End of function Deform_SYZ
00006CF0                            
00006CF0                            ; ---------------------------------------------------------------------------
00006CF0                            ; Scrap	Brain Zone background layer deformation	code
00006CF0                            ; ---------------------------------------------------------------------------
00006CF0                            
00006CF0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006CF0                            
00006CF0                            
00006CF0                            Deform_SBZ:				; XREF: Deform_Index
00006CF0 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006CF4 48C4                       		ext.l	d4
00006CF6 ED84                       		asl.l	#6,d4
00006CF8 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00006CFC 48C5                       		ext.l	d5
00006CFE E985                       		asl.l	#4,d5
00006D00 E385                       		asl.l	#1,d5
00006D02 6100 0000                  		bsr.w	ScrollBlock1
00006D06 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006D0C 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006D10 323C 00DF                  		move.w	#$DF,d1
00006D14 3038 F700                  		move.w	($FFFFF700).w,d0
00006D18 4440                       		neg.w	d0
00006D1A 4840                       		swap	d0
00006D1C 3038 F708                  		move.w	($FFFFF708).w,d0
00006D20 4440                       		neg.w	d0
00006D22                            
00006D22                            loc_6576:
00006D22 22C0                       		move.l	d0,(a1)+
00006D24 51C9 FFFC                  		dbf	d1,loc_6576
00006D28 4E75                       		rts	
00006D2A                            ; End of function Deform_SBZ
00006D2A                            
00006D2A                            ; ---------------------------------------------------------------------------
00006D2A                            ; Subroutine to	scroll the level horizontally as Sonic moves
00006D2A                            ; ---------------------------------------------------------------------------
00006D2A                            
00006D2A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006D2A                            
00006D2A                            
00006D2A                            ScrollHoriz:				; XREF: DeformBgLayer
00006D2A 3838 F700                  		move.w	($FFFFF700).w,d4
00006D2E 6100                       		bsr.s	ScrollHoriz2
00006D30 3038 F700                  		move.w	($FFFFF700).w,d0
00006D34 0240 0010                  		andi.w	#$10,d0
00006D38 1238 F74A                  		move.b	($FFFFF74A).w,d1
00006D3C B300                       		eor.b	d1,d0
00006D3E 6600                       		bne.s	locret_65B0
00006D40 0A38 0010 F74A             		eori.b	#$10,($FFFFF74A).w
00006D46 3038 F700                  		move.w	($FFFFF700).w,d0
00006D4A 9044                       		sub.w	d4,d0
00006D4C 6A00                       		bpl.s	loc_65AA
00006D4E 08F8 0002 F754             		bset	#2,($FFFFF754).w
00006D54 4E75                       		rts	
00006D56                            ; ===========================================================================
00006D56                            
00006D56                            loc_65AA:
00006D56 08F8 0003 F754             		bset	#3,($FFFFF754).w
00006D5C                            
00006D5C                            locret_65B0:
00006D5C 4E75                       		rts	
00006D5E                            ; End of function ScrollHoriz
00006D5E                            
00006D5E                            
00006D5E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006D5E                            
00006D5E                            
00006D5E                            ScrollHoriz2:				; XREF: ScrollHoriz
00006D5E 3038 D008                  		move.w	($FFFFD008).w,d0
00006D62 9078 F700                  		sub.w	($FFFFF700).w,d0
00006D66 0440 0090                  		subi.w	#$90,d0
00006D6A 6500                       		bcs.s	loc_65F6
00006D6C 0440 0010                  		subi.w	#$10,d0
00006D70 6400                       		bcc.s	loc_65CC
00006D72 4278 F73A                  		clr.w	($FFFFF73A).w
00006D76 4E75                       		rts	
00006D78                            ; ===========================================================================
00006D78                            
00006D78                            loc_65CC:
00006D78 0C40 0010                  		cmpi.w	#$10,d0
00006D7C 6500                       		bcs.s	loc_65D6
00006D7E 303C 0010                  		move.w	#$10,d0
00006D82                            
00006D82                            loc_65D6:
00006D82 D078 F700                  		add.w	($FFFFF700).w,d0
00006D86 B078 F72A                  		cmp.w	($FFFFF72A).w,d0
00006D8A 6D00                       		blt.s	loc_65E4
00006D8C 3038 F72A                  		move.w	($FFFFF72A).w,d0
00006D90                            
00006D90                            loc_65E4:
00006D90 3200                       		move.w	d0,d1
00006D92 9278 F700                  		sub.w	($FFFFF700).w,d1
00006D96 E141                       		asl.w	#8,d1
00006D98 31C0 F700                  		move.w	d0,($FFFFF700).w
00006D9C 31C1 F73A                  		move.w	d1,($FFFFF73A).w
00006DA0 4E75                       		rts	
00006DA2                            ; ===========================================================================
00006DA2                            
00006DA2                            loc_65F6:				; XREF: ScrollHoriz2
00006DA2 D078 F700                  		add.w	($FFFFF700).w,d0
00006DA6 B078 F728                  		cmp.w	($FFFFF728).w,d0
00006DAA 6EE4                       		bgt.s	loc_65E4
00006DAC 3038 F728                  		move.w	($FFFFF728).w,d0
00006DB0 60DE                       		bra.s	loc_65E4
00006DB2                            ; End of function ScrollHoriz2
00006DB2                            
00006DB2                            ; ===========================================================================
00006DB2 4A40                       		tst.w	d0
00006DB4 6A00                       		bpl.s	loc_6610
00006DB6 303C FFFE                  		move.w	#-2,d0
00006DBA 60E6                       		bra.s	loc_65F6
00006DBC                            ; ===========================================================================
00006DBC                            
00006DBC                            loc_6610:
00006DBC 303C 0002                  		move.w	#2,d0
00006DC0 60B6                       		bra.s	loc_65CC
00006DC2                            
00006DC2                            ; ---------------------------------------------------------------------------
00006DC2                            ; Subroutine to	scroll the level vertically as Sonic moves
00006DC2                            ; ---------------------------------------------------------------------------
00006DC2                            
00006DC2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006DC2                            
00006DC2                            
00006DC2                            ScrollVertical:				; XREF: DeformBgLayer
00006DC2 7200                       		moveq	#0,d1
00006DC4 3038 D00C                  		move.w	($FFFFD00C).w,d0
00006DC8 9078 F704                  		sub.w	($FFFFF704).w,d0
00006DCC 0838 0002 D022             		btst	#2,($FFFFD022).w
00006DD2 6700                       		beq.s	loc_662A
00006DD4 5B40                       		subq.w	#5,d0
00006DD6                            
00006DD6                            loc_662A:
00006DD6 0838 0001 D022             		btst	#1,($FFFFD022).w
00006DDC 6700                       		beq.s	loc_664A
00006DDE 0640 0020                  		addi.w	#$20,d0
00006DE2 9078 F73E                  		sub.w	($FFFFF73E).w,d0
00006DE6 6500                       		bcs.s	loc_6696
00006DE8 0440 0040                  		subi.w	#$40,d0
00006DEC 6400                       		bcc.s	loc_6696
00006DEE 4A38 F75C                  		tst.b	($FFFFF75C).w
00006DF2 6600                       		bne.s	loc_66A8
00006DF4 6000                       		bra.s	loc_6656
00006DF6                            ; ===========================================================================
00006DF6                            
00006DF6                            loc_664A:
00006DF6 9078 F73E                  		sub.w	($FFFFF73E).w,d0
00006DFA 6600                       		bne.s	loc_665C
00006DFC 4A38 F75C                  		tst.b	($FFFFF75C).w
00006E00 6600                       		bne.s	loc_66A8
00006E02                            
00006E02                            loc_6656:
00006E02 4278 F73C                  		clr.w	($FFFFF73C).w
00006E06 4E75                       		rts	
00006E08                            ; ===========================================================================
00006E08                            
00006E08                            loc_665C:
00006E08 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w
00006E0E 6600                       		bne.s	loc_6684
00006E10 3238 D014                  		move.w	($FFFFD014).w,d1
00006E14 6A00                       		bpl.s	loc_666C
00006E16 4441                       		neg.w	d1
00006E18                            
00006E18                            loc_666C:
00006E18 0C41 0800                  		cmpi.w	#$800,d1
00006E1C 6400                       		bcc.s	loc_6696
00006E1E 323C 0600                  		move.w	#$600,d1
00006E22 0C40 0006                  		cmpi.w	#6,d0
00006E26 6E00                       		bgt.s	loc_66F6
00006E28 0C40 FFFA                  		cmpi.w	#-6,d0
00006E2C 6D00                       		blt.s	loc_66C0
00006E2E 6000                       		bra.s	loc_66AE
00006E30                            ; ===========================================================================
00006E30                            
00006E30                            loc_6684:
00006E30 323C 0200                  		move.w	#$200,d1
00006E34 0C40 0002                  		cmpi.w	#2,d0
00006E38 6E00                       		bgt.s	loc_66F6
00006E3A 0C40 FFFE                  		cmpi.w	#-2,d0
00006E3E 6D00                       		blt.s	loc_66C0
00006E40 6000                       		bra.s	loc_66AE
00006E42                            ; ===========================================================================
00006E42                            
00006E42                            loc_6696:
00006E42 323C 1000                  		move.w	#$1000,d1
00006E46 0C40 0010                  		cmpi.w	#$10,d0
00006E4A 6E00                       		bgt.s	loc_66F6
00006E4C 0C40 FFF0                  		cmpi.w	#-$10,d0
00006E50 6D00                       		blt.s	loc_66C0
00006E52 6000                       		bra.s	loc_66AE
00006E54                            ; ===========================================================================
00006E54                            
00006E54                            loc_66A8:
00006E54 7000                       		moveq	#0,d0
00006E56 11C0 F75C                  		move.b	d0,($FFFFF75C).w
00006E5A                            
00006E5A                            loc_66AE:
00006E5A 7200                       		moveq	#0,d1
00006E5C 3200                       		move.w	d0,d1
00006E5E D278 F704                  		add.w	($FFFFF704).w,d1
00006E62 4A40                       		tst.w	d0
00006E64 6A00 0000                  		bpl.w	loc_6700
00006E68 6000 0000                  		bra.w	loc_66CC
00006E6C                            ; ===========================================================================
00006E6C                            
00006E6C                            loc_66C0:
00006E6C 4441                       		neg.w	d1
00006E6E 48C1                       		ext.l	d1
00006E70 E181                       		asl.l	#8,d1
00006E72 D2B8 F704                  		add.l	($FFFFF704).w,d1
00006E76 4841                       		swap	d1
00006E78                            
00006E78                            loc_66CC:
00006E78 B278 F72C                  		cmp.w	($FFFFF72C).w,d1
00006E7C 6E00                       		bgt.s	loc_6724
00006E7E 0C41 FF00                  		cmpi.w	#-$100,d1
00006E82 6E00                       		bgt.s	loc_66F0
00006E84 0241 07FF                  		andi.w	#$7FF,d1
00006E88 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
00006E8E 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
00006E94 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
00006E9A 6000                       		bra.s	loc_6724
00006E9C                            ; ===========================================================================
00006E9C                            
00006E9C                            loc_66F0:
00006E9C 3238 F72C                  		move.w	($FFFFF72C).w,d1
00006EA0 6000                       		bra.s	loc_6724
00006EA2                            ; ===========================================================================
00006EA2                            
00006EA2                            loc_66F6:
00006EA2 48C1                       		ext.l	d1
00006EA4 E181                       		asl.l	#8,d1
00006EA6 D2B8 F704                  		add.l	($FFFFF704).w,d1
00006EAA 4841                       		swap	d1
00006EAC                            
00006EAC                            loc_6700:
00006EAC B278 F72E                  		cmp.w	($FFFFF72E).w,d1
00006EB0 6D00                       		blt.s	loc_6724
00006EB2 0441 0800                  		subi.w	#$800,d1
00006EB6 6500                       		bcs.s	loc_6720
00006EB8 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
00006EBE 0478 0800 F704             		subi.w	#$800,($FFFFF704).w
00006EC4 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
00006ECA 6000                       		bra.s	loc_6724
00006ECC                            ; ===========================================================================
00006ECC                            
00006ECC                            loc_6720:
00006ECC 3238 F72E                  		move.w	($FFFFF72E).w,d1
00006ED0                            
00006ED0                            loc_6724:
00006ED0 3838 F704                  		move.w	($FFFFF704).w,d4
00006ED4 4841                       		swap	d1
00006ED6 2601                       		move.l	d1,d3
00006ED8 96B8 F704                  		sub.l	($FFFFF704).w,d3
00006EDC E09B                       		ror.l	#8,d3
00006EDE 31C3 F73C                  		move.w	d3,($FFFFF73C).w
00006EE2 21C1 F704                  		move.l	d1,($FFFFF704).w
00006EE6 3038 F704                  		move.w	($FFFFF704).w,d0
00006EEA 0240 0010                  		andi.w	#$10,d0
00006EEE 1238 F74B                  		move.b	($FFFFF74B).w,d1
00006EF2 B300                       		eor.b	d1,d0
00006EF4 6600                       		bne.s	locret_6766
00006EF6 0A38 0010 F74B             		eori.b	#$10,($FFFFF74B).w
00006EFC 3038 F704                  		move.w	($FFFFF704).w,d0
00006F00 9044                       		sub.w	d4,d0
00006F02 6A00                       		bpl.s	loc_6760
00006F04 08F8 0000 F754             		bset	#0,($FFFFF754).w
00006F0A 4E75                       		rts	
00006F0C                            ; ===========================================================================
00006F0C                            
00006F0C                            loc_6760:
00006F0C 08F8 0001 F754             		bset	#1,($FFFFF754).w
00006F12                            
00006F12                            locret_6766:
00006F12 4E75                       		rts	
00006F14                            ; End of function ScrollVertical
00006F14                            
00006F14                            
00006F14                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006F14                            
00006F14                            
00006F14                            ScrollBlock1:				; XREF: Deform_GHZ; et al
00006F14 2438 F708                  		move.l	($FFFFF708).w,d2
00006F18 2002                       		move.l	d2,d0
00006F1A D084                       		add.l	d4,d0
00006F1C 21C0 F708                  		move.l	d0,($FFFFF708).w
00006F20 2200                       		move.l	d0,d1
00006F22 4841                       		swap	d1
00006F24 0241 0010                  		andi.w	#$10,d1
00006F28 1638 F74C                  		move.b	($FFFFF74C).w,d3
00006F2C B701                       		eor.b	d3,d1
00006F2E 6600                       		bne.s	loc_679C
00006F30 0A38 0010 F74C             		eori.b	#$10,($FFFFF74C).w
00006F36 9082                       		sub.l	d2,d0
00006F38 6A00                       		bpl.s	loc_6796
00006F3A 08F8 0002 F756             		bset	#2,($FFFFF756).w
00006F40 6000                       		bra.s	loc_679C
00006F42                            ; ===========================================================================
00006F42                            
00006F42                            loc_6796:
00006F42 08F8 0003 F756             		bset	#3,($FFFFF756).w
00006F48                            
00006F48                            loc_679C:
00006F48 2638 F70C                  		move.l	($FFFFF70C).w,d3
00006F4C 2003                       		move.l	d3,d0
00006F4E D085                       		add.l	d5,d0
00006F50 21C0 F70C                  		move.l	d0,($FFFFF70C).w
00006F54 2200                       		move.l	d0,d1
00006F56 4841                       		swap	d1
00006F58 0241 0010                  		andi.w	#$10,d1
00006F5C 1438 F74D                  		move.b	($FFFFF74D).w,d2
00006F60 B501                       		eor.b	d2,d1
00006F62 6600                       		bne.s	locret_67D0
00006F64 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00006F6A 9083                       		sub.l	d3,d0
00006F6C 6A00                       		bpl.s	loc_67CA
00006F6E 08F8 0000 F756             		bset	#0,($FFFFF756).w
00006F74 4E75                       		rts	
00006F76                            ; ===========================================================================
00006F76                            
00006F76                            loc_67CA:
00006F76 08F8 0001 F756             		bset	#1,($FFFFF756).w
00006F7C                            
00006F7C                            locret_67D0:
00006F7C 4E75                       		rts	
00006F7E                            ; End of function ScrollBlock1
00006F7E                            
00006F7E                            
00006F7E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006F7E                            
00006F7E                            
00006F7E                            ScrollBlock2:				; XREF: Deform_SLZ
00006F7E 2438 F708                  		move.l	($FFFFF708).w,d2
00006F82 2002                       		move.l	d2,d0
00006F84 D084                       		add.l	d4,d0
00006F86 21C0 F708                  		move.l	d0,($FFFFF708).w
00006F8A 2638 F70C                  		move.l	($FFFFF70C).w,d3
00006F8E 2003                       		move.l	d3,d0
00006F90 D085                       		add.l	d5,d0
00006F92 21C0 F70C                  		move.l	d0,($FFFFF70C).w
00006F96 2200                       		move.l	d0,d1
00006F98 4841                       		swap	d1
00006F9A 0241 0010                  		andi.w	#$10,d1
00006F9E 1438 F74D                  		move.b	($FFFFF74D).w,d2
00006FA2 B501                       		eor.b	d2,d1
00006FA4 6600                       		bne.s	locret_6812
00006FA6 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00006FAC 9083                       		sub.l	d3,d0
00006FAE 6A00                       		bpl.s	loc_680C
00006FB0 08F8 0000 F756             		bset	#0,($FFFFF756).w
00006FB6 4E75                       		rts	
00006FB8                            ; ===========================================================================
00006FB8                            
00006FB8                            loc_680C:
00006FB8 08F8 0001 F756             		bset	#1,($FFFFF756).w
00006FBE                            
00006FBE                            locret_6812:
00006FBE 4E75                       		rts	
00006FC0                            ; End of function ScrollBlock2
00006FC0                            
00006FC0                            
00006FC0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006FC0                            
00006FC0                            
00006FC0                            ScrollBlock3:				; XREF: Deform_GHZ; et al
00006FC0 3638 F70C                  		move.w	($FFFFF70C).w,d3
00006FC4 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006FC8 3200                       		move.w	d0,d1
00006FCA 0241 0010                  		andi.w	#$10,d1
00006FCE 1438 F74D                  		move.b	($FFFFF74D).w,d2
00006FD2 B501                       		eor.b	d2,d1
00006FD4 6600                       		bne.s	locret_6842
00006FD6 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00006FDC 9043                       		sub.w	d3,d0
00006FDE 6A00                       		bpl.s	loc_683C
00006FE0 08F8 0000 F756             		bset	#0,($FFFFF756).w
00006FE6 4E75                       		rts	
00006FE8                            ; ===========================================================================
00006FE8                            
00006FE8                            loc_683C:
00006FE8 08F8 0001 F756             		bset	#1,($FFFFF756).w
00006FEE                            
00006FEE                            locret_6842:
00006FEE 4E75                       		rts	
00006FF0                            ; End of function ScrollBlock3
00006FF0                            
00006FF0                            
00006FF0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006FF0                            
00006FF0                            
00006FF0                            ScrollBlock4:				; XREF: Deform_GHZ
00006FF0 3438 F710                  		move.w	($FFFFF710).w,d2
00006FF4 3638 F714                  		move.w	($FFFFF714).w,d3
00006FF8 3038 F73A                  		move.w	($FFFFF73A).w,d0
00006FFC 48C0                       		ext.l	d0
00006FFE EF80                       		asl.l	#7,d0
00007000 D1B8 F710                  		add.l	d0,($FFFFF710).w
00007004 3038 F710                  		move.w	($FFFFF710).w,d0
00007008 0240 0010                  		andi.w	#$10,d0
0000700C 1238 F74E                  		move.b	($FFFFF74E).w,d1
00007010 B300                       		eor.b	d1,d0
00007012 6600                       		bne.s	locret_6884
00007014 0A38 0010 F74E             		eori.b	#$10,($FFFFF74E).w
0000701A 3038 F710                  		move.w	($FFFFF710).w,d0
0000701E 9042                       		sub.w	d2,d0
00007020 6A00                       		bpl.s	loc_687E
00007022 08F8 0002 F758             		bset	#2,($FFFFF758).w
00007028 6000                       		bra.s	locret_6884
0000702A                            ; ===========================================================================
0000702A                            
0000702A                            loc_687E:
0000702A 08F8 0003 F758             		bset	#3,($FFFFF758).w
00007030                            
00007030                            locret_6884:
00007030 4E75                       		rts	
00007032                            ; End of function ScrollBlock4
00007032                            
00007032                            
00007032                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007032                            
00007032                            
00007032                            sub_6886:				; XREF: loc_C44
00007032 4BF9 00C0 0004             		lea	($C00004).l,a5
00007038 4DF9 00C0 0000             		lea	($C00000).l,a6
0000703E 45F8 F756                  		lea	($FFFFF756).w,a2
00007042 47F8 F708                  		lea	($FFFFF708).w,a3
00007046 49F8 A440                  		lea	($FFFFA440).w,a4
0000704A 343C 6000                  		move.w	#$6000,d2
0000704E 6100 0000                  		bsr.w	sub_6954
00007052 45F8 F758                  		lea	($FFFFF758).w,a2
00007056 47F8 F710                  		lea	($FFFFF710).w,a3
0000705A 6000 0000                  		bra.w	sub_69F4
0000705E                            ; End of function sub_6886
0000705E                            
0000705E                            ; ---------------------------------------------------------------------------
0000705E                            ; Subroutine to	display	correct	tiles as you move
0000705E                            ; ---------------------------------------------------------------------------
0000705E                            
0000705E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000705E                            
0000705E                            
0000705E                            LoadTilesAsYouMove:			; XREF: Demo_Time
0000705E 4BF9 00C0 0004             		lea	($C00004).l,a5
00007064 4DF9 00C0 0000             		lea	($C00000).l,a6
0000706A 45F8 FF32                  		lea	($FFFFFF32).w,a2
0000706E 47F8 FF18                  		lea	($FFFFFF18).w,a3
00007072 49F8 A440                  		lea	($FFFFA440).w,a4
00007076 343C 6000                  		move.w	#$6000,d2
0000707A 6100 0000                  		bsr.w	sub_6954
0000707E 45F8 FF34                  		lea	($FFFFFF34).w,a2
00007082 47F8 FF20                  		lea	($FFFFFF20).w,a3
00007086 6100 0000                  		bsr.w	sub_69F4
0000708A 45F8 FF30                  		lea	($FFFFFF30).w,a2
0000708E 47F8 FF10                  		lea	($FFFFFF10).w,a3
00007092 49F8 A400                  		lea	($FFFFA400).w,a4
00007096 343C 4000                  		move.w	#$4000,d2
0000709A 4A12                       		tst.b	(a2)
0000709C 6700                       		beq.s	locret_6952
0000709E 0892 0000                  		bclr	#0,(a2)
000070A2 6700                       		beq.s	loc_6908
000070A4 78F0                       		moveq	#-$10,d4
000070A6 7AF0                       		moveq	#-$10,d5
000070A8 6100 0000                  		bsr.w	sub_6C20
000070AC 78F0                       		moveq	#-$10,d4
000070AE 7AF0                       		moveq	#-$10,d5
000070B0 6100 0000                  		bsr.w	sub_6AD8
000070B4                            
000070B4                            loc_6908:
000070B4 0892 0001                  		bclr	#1,(a2)
000070B8 6700                       		beq.s	loc_6922
000070BA 383C 00E0                  		move.w	#$E0,d4
000070BE 7AF0                       		moveq	#-$10,d5
000070C0 6100 0000                  		bsr.w	sub_6C20
000070C4 383C 00E0                  		move.w	#$E0,d4
000070C8 7AF0                       		moveq	#-$10,d5
000070CA 6100 0000                  		bsr.w	sub_6AD8
000070CE                            
000070CE                            loc_6922:
000070CE 0892 0002                  		bclr	#2,(a2)
000070D2 6700                       		beq.s	loc_6938
000070D4 78F0                       		moveq	#-$10,d4
000070D6 7AF0                       		moveq	#-$10,d5
000070D8 6100 0000                  		bsr.w	sub_6C20
000070DC 78F0                       		moveq	#-$10,d4
000070DE 7AF0                       		moveq	#-$10,d5
000070E0 6100 0000                  		bsr.w	sub_6B04
000070E4                            
000070E4                            loc_6938:
000070E4 0892 0003                  		bclr	#3,(a2)
000070E8 6700                       		beq.s	locret_6952
000070EA 78F0                       		moveq	#-$10,d4
000070EC 3A3C 0140                  		move.w	#$140,d5
000070F0 6100 0000                  		bsr.w	sub_6C20
000070F4 78F0                       		moveq	#-$10,d4
000070F6 3A3C 0140                  		move.w	#$140,d5
000070FA 6100 0000                  		bsr.w	sub_6B04
000070FE                            
000070FE                            locret_6952:
000070FE 4E75                       		rts	
00007100                            ; End of function LoadTilesAsYouMove
00007100                            
00007100                            
00007100                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007100                            
00007100                            
00007100                            sub_6954:				; XREF: sub_6886; LoadTilesAsYouMove
00007100 4A12                       		tst.b	(a2)
00007102 6700 0000                  		beq.w	locret_69F2
00007106 0892 0000                  		bclr	#0,(a2)
0000710A 6700                       		beq.s	loc_6972
0000710C 78F0                       		moveq	#-$10,d4
0000710E 7AF0                       		moveq	#-$10,d5
00007110 6100 0000                  		bsr.w	sub_6C20
00007114 78F0                       		moveq	#-$10,d4
00007116 7AF0                       		moveq	#-$10,d5
00007118 7C1F                       		moveq	#$1F,d6
0000711A 6100 0000                  		bsr.w	sub_6ADA
0000711E                            
0000711E                            loc_6972:
0000711E 0892 0001                  		bclr	#1,(a2)
00007122 6700                       		beq.s	loc_698E
00007124 383C 00E0                  		move.w	#$E0,d4
00007128 7AF0                       		moveq	#-$10,d5
0000712A 6100 0000                  		bsr.w	sub_6C20
0000712E 383C 00E0                  		move.w	#$E0,d4
00007132 7AF0                       		moveq	#-$10,d5
00007134 7C1F                       		moveq	#$1F,d6
00007136 6100 0000                  		bsr.w	sub_6ADA
0000713A                            
0000713A                            loc_698E:
0000713A 0892 0002                  		bclr	#2,(a2)
0000713E 6700                       		beq.s	loc_69BE
00007140 78F0                       		moveq	#-$10,d4
00007142 7AF0                       		moveq	#-$10,d5
00007144 6100 0000                  		bsr.w	sub_6C20
00007148 78F0                       		moveq	#-$10,d4
0000714A 7AF0                       		moveq	#-$10,d5
0000714C 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00007150 322B 0004                  		move.w	4(a3),d1
00007154 0241 FFF0                  		andi.w	#-$10,d1
00007158 9C41                       		sub.w	d1,d6
0000715A 6D00                       		blt.s	loc_69BE
0000715C E84E                       		lsr.w	#4,d6
0000715E 0C46 000F                  		cmpi.w	#$F,d6
00007162 6500                       		bcs.s	loc_69BA
00007164 7C0F                       		moveq	#$F,d6
00007166                            
00007166                            loc_69BA:
00007166 6100 0000                  		bsr.w	sub_6B06
0000716A                            
0000716A                            loc_69BE:
0000716A 0892 0003                  		bclr	#3,(a2)
0000716E 6700                       		beq.s	locret_69F2
00007170 78F0                       		moveq	#-$10,d4
00007172 3A3C 0140                  		move.w	#$140,d5
00007176 6100 0000                  		bsr.w	sub_6C20
0000717A 78F0                       		moveq	#-$10,d4
0000717C 3A3C 0140                  		move.w	#$140,d5
00007180 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00007184 322B 0004                  		move.w	4(a3),d1
00007188 0241 FFF0                  		andi.w	#-$10,d1
0000718C 9C41                       		sub.w	d1,d6
0000718E 6D00                       		blt.s	locret_69F2
00007190 E84E                       		lsr.w	#4,d6
00007192 0C46 000F                  		cmpi.w	#$F,d6
00007196 6500                       		bcs.s	loc_69EE
00007198 7C0F                       		moveq	#$F,d6
0000719A                            
0000719A                            loc_69EE:
0000719A 6100 0000                  		bsr.w	sub_6B06
0000719E                            
0000719E                            locret_69F2:
0000719E 4E75                       		rts	
000071A0                            ; End of function sub_6954
000071A0                            
000071A0                            
000071A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000071A0                            
000071A0                            
000071A0                            sub_69F4:				; XREF: sub_6886; LoadTilesAsYouMove
000071A0 4A12                       		tst.b	(a2)
000071A2 6700 0000                  		beq.w	locret_6A80
000071A6 0892 0002                  		bclr	#2,(a2)
000071AA 6700                       		beq.s	loc_6A3E
000071AC 0C53 0010                  		cmpi.w	#$10,(a3)
000071B0 6500                       		bcs.s	loc_6A3E
000071B2 3838 F7F0                  		move.w	($FFFFF7F0).w,d4
000071B6 322B 0004                  		move.w	4(a3),d1
000071BA 0241 FFF0                  		andi.w	#-$10,d1
000071BE 9841                       		sub.w	d1,d4
000071C0 3F04                       		move.w	d4,-(sp)
000071C2 7AF0                       		moveq	#-$10,d5
000071C4 6100 0000                  		bsr.w	sub_6C20
000071C8 381F                       		move.w	(sp)+,d4
000071CA 7AF0                       		moveq	#-$10,d5
000071CC 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
000071D0 322B 0004                  		move.w	4(a3),d1
000071D4 0241 FFF0                  		andi.w	#-$10,d1
000071D8 9C41                       		sub.w	d1,d6
000071DA 6D00                       		blt.s	loc_6A3E
000071DC E84E                       		lsr.w	#4,d6
000071DE 0446 000E                  		subi.w	#$E,d6
000071E2 6400                       		bcc.s	loc_6A3E
000071E4 4446                       		neg.w	d6
000071E6 6100 0000                  		bsr.w	sub_6B06
000071EA                            
000071EA                            loc_6A3E:
000071EA 0892 0003                  		bclr	#3,(a2)
000071EE 6700                       		beq.s	locret_6A80
000071F0 3838 F7F0                  		move.w	($FFFFF7F0).w,d4
000071F4 322B 0004                  		move.w	4(a3),d1
000071F8 0241 FFF0                  		andi.w	#-$10,d1
000071FC 9841                       		sub.w	d1,d4
000071FE 3F04                       		move.w	d4,-(sp)
00007200 3A3C 0140                  		move.w	#$140,d5
00007204 6100 0000                  		bsr.w	sub_6C20
00007208 381F                       		move.w	(sp)+,d4
0000720A 3A3C 0140                  		move.w	#$140,d5
0000720E 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00007212 322B 0004                  		move.w	4(a3),d1
00007216 0241 FFF0                  		andi.w	#-$10,d1
0000721A 9C41                       		sub.w	d1,d6
0000721C 6D00                       		blt.s	locret_6A80
0000721E E84E                       		lsr.w	#4,d6
00007220 0446 000E                  		subi.w	#$E,d6
00007224 6400                       		bcc.s	locret_6A80
00007226 4446                       		neg.w	d6
00007228 6100 0000                  		bsr.w	sub_6B06
0000722C                            
0000722C                            locret_6A80:
0000722C 4E75                       		rts	
0000722E                            ; End of function sub_69F4
0000722E                            
0000722E                            ; ===========================================================================
0000722E 4A12                       		tst.b	(a2)
00007230 6700                       		beq.s	locret_6AD6
00007232 0892 0002                  		bclr	#2,(a2)
00007236 6700                       		beq.s	loc_6AAC
00007238 383C 00D0                  		move.w	#$D0,d4
0000723C 322B 0004                  		move.w	4(a3),d1
00007240 0241 FFF0                  		andi.w	#-$10,d1
00007244 9841                       		sub.w	d1,d4
00007246 3F04                       		move.w	d4,-(sp)
00007248 7AF0                       		moveq	#-$10,d5
0000724A 6100 0000                  		bsr.w	sub_6C3C
0000724E 381F                       		move.w	(sp)+,d4
00007250 7AF0                       		moveq	#-$10,d5
00007252 7C02                       		moveq	#2,d6
00007254 6100 0000                  		bsr.w	sub_6B06
00007258                            
00007258                            loc_6AAC:
00007258 0892 0003                  		bclr	#3,(a2)
0000725C 6700                       		beq.s	locret_6AD6
0000725E 383C 00D0                  		move.w	#$D0,d4
00007262 322B 0004                  		move.w	4(a3),d1
00007266 0241 FFF0                  		andi.w	#-$10,d1
0000726A 9841                       		sub.w	d1,d4
0000726C 3F04                       		move.w	d4,-(sp)
0000726E 3A3C 0140                  		move.w	#$140,d5
00007272 6100 0000                  		bsr.w	sub_6C3C
00007276 381F                       		move.w	(sp)+,d4
00007278 3A3C 0140                  		move.w	#$140,d5
0000727C 7C02                       		moveq	#2,d6
0000727E 6100 0000                  		bsr.w	sub_6B06
00007282                            
00007282                            locret_6AD6:
00007282 4E75                       		rts	
00007284                            
00007284                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007284                            
00007284                            
00007284                            sub_6AD8:				; XREF: LoadTilesAsYouMove
00007284 7C15                       		moveq	#$15,d6
00007286                            ; End of function sub_6AD8
00007286                            
00007286                            
00007286                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007286                            
00007286                            
00007286                            sub_6ADA:				; XREF: sub_6954; LoadTilesFromStart2
00007286 2E3C 0080 0000             		move.l	#$800000,d7
0000728C 2200                       		move.l	d0,d1
0000728E                            
0000728E                            loc_6AE2:
0000728E 48E7 0C00                  		movem.l	d4-d5,-(sp)
00007292 6100 0000                  		bsr.w	sub_6BD6
00007296 2001                       		move.l	d1,d0
00007298 6100 0000                  		bsr.w	sub_6B32
0000729C 5801                       		addq.b	#4,d1
0000729E 0201 007F                  		andi.b	#$7F,d1
000072A2 4CDF 0030                  		movem.l	(sp)+,d4-d5
000072A6 0645 0010                  		addi.w	#$10,d5
000072AA 51CE FFE2                  		dbf	d6,loc_6AE2
000072AE 4E75                       		rts	
000072B0                            ; End of function sub_6ADA
000072B0                            
000072B0                            
000072B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000072B0                            
000072B0                            
000072B0                            sub_6B04:				; XREF: LoadTilesAsYouMove
000072B0 7C0F                       		moveq	#$F,d6
000072B2                            ; End of function sub_6B04
000072B2                            
000072B2                            
000072B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000072B2                            
000072B2                            
000072B2                            sub_6B06:				; XREF: sub_6954
000072B2 2E3C 0080 0000             		move.l	#$800000,d7
000072B8 2200                       		move.l	d0,d1
000072BA                            
000072BA                            loc_6B0E:
000072BA 48E7 0C00                  		movem.l	d4-d5,-(sp)
000072BE 6100 0000                  		bsr.w	sub_6BD6
000072C2 2001                       		move.l	d1,d0
000072C4 6100 0000                  		bsr.w	sub_6B32
000072C8 0641 0100                  		addi.w	#$100,d1
000072CC 0241 0FFF                  		andi.w	#$FFF,d1
000072D0 4CDF 0030                  		movem.l	(sp)+,d4-d5
000072D4 0644 0010                  		addi.w	#$10,d4
000072D8 51CE FFE0                  		dbf	d6,loc_6B0E
000072DC 4E75                       		rts	
000072DE                            ; End of function sub_6B06
000072DE                            
000072DE                            
000072DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000072DE                            
000072DE                            
000072DE                            sub_6B32:				; XREF: sub_6ADA; sub_6B06
000072DE 8042                       		or.w	d2,d0
000072E0 4840                       		swap	d0
000072E2 0810 0004                  		btst	#4,(a0)
000072E6 6600                       		bne.s	loc_6B6E
000072E8 0810 0003                  		btst	#3,(a0)
000072EC 6600                       		bne.s	loc_6B4E
000072EE 2A80                       		move.l	d0,(a5)
000072F0 2C99                       		move.l	(a1)+,(a6)
000072F2 D087                       		add.l	d7,d0
000072F4 2A80                       		move.l	d0,(a5)
000072F6 2C99                       		move.l	(a1)+,(a6)
000072F8 4E75                       		rts	
000072FA                            ; ===========================================================================
000072FA                            
000072FA                            loc_6B4E:
000072FA 2A80                       		move.l	d0,(a5)
000072FC 2819                       		move.l	(a1)+,d4
000072FE 0A84 0800 0800             		eori.l	#$8000800,d4
00007304 4844                       		swap	d4
00007306 2C84                       		move.l	d4,(a6)
00007308 D087                       		add.l	d7,d0
0000730A 2A80                       		move.l	d0,(a5)
0000730C 2819                       		move.l	(a1)+,d4
0000730E 0A84 0800 0800             		eori.l	#$8000800,d4
00007314 4844                       		swap	d4
00007316 2C84                       		move.l	d4,(a6)
00007318 4E75                       		rts	
0000731A                            ; ===========================================================================
0000731A                            
0000731A                            loc_6B6E:
0000731A 0810 0003                  		btst	#3,(a0)
0000731E 6600                       		bne.s	loc_6B90
00007320 2A80                       		move.l	d0,(a5)
00007322 2A19                       		move.l	(a1)+,d5
00007324 2819                       		move.l	(a1)+,d4
00007326 0A84 1000 1000             		eori.l	#$10001000,d4
0000732C 2C84                       		move.l	d4,(a6)
0000732E D087                       		add.l	d7,d0
00007330 2A80                       		move.l	d0,(a5)
00007332 0A85 1000 1000             		eori.l	#$10001000,d5
00007338 2C85                       		move.l	d5,(a6)
0000733A 4E75                       		rts	
0000733C                            ; ===========================================================================
0000733C                            
0000733C                            loc_6B90:
0000733C 2A80                       		move.l	d0,(a5)
0000733E 2A19                       		move.l	(a1)+,d5
00007340 2819                       		move.l	(a1)+,d4
00007342 0A84 1800 1800             		eori.l	#$18001800,d4
00007348 4844                       		swap	d4
0000734A 2C84                       		move.l	d4,(a6)
0000734C D087                       		add.l	d7,d0
0000734E 2A80                       		move.l	d0,(a5)
00007350 0A85 1800 1800             		eori.l	#$18001800,d5
00007356 4845                       		swap	d5
00007358 2C85                       		move.l	d5,(a6)
0000735A 4E75                       		rts	
0000735C                            ; End of function sub_6B32
0000735C                            
0000735C                            ; ===========================================================================
0000735C 4E75                       		rts	
0000735E                            ; ===========================================================================
0000735E 2A80                       		move.l	d0,(a5)
00007360 3A3C 2000                  		move.w	#$2000,d5
00007364 3819                       		move.w	(a1)+,d4
00007366 D845                       		add.w	d5,d4
00007368 3C84                       		move.w	d4,(a6)
0000736A 3819                       		move.w	(a1)+,d4
0000736C D845                       		add.w	d5,d4
0000736E 3C84                       		move.w	d4,(a6)
00007370 D087                       		add.l	d7,d0
00007372 2A80                       		move.l	d0,(a5)
00007374 3819                       		move.w	(a1)+,d4
00007376 D845                       		add.w	d5,d4
00007378 3C84                       		move.w	d4,(a6)
0000737A 3819                       		move.w	(a1)+,d4
0000737C D845                       		add.w	d5,d4
0000737E 3C84                       		move.w	d4,(a6)
00007380 4E75                       		rts	
00007382                            
00007382                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007382                            
00007382                            
00007382                            sub_6BD6:				; XREF: sub_6ADA; sub_6B06
00007382 43F8 B000                  		lea	($FFFFB000).w,a1
00007386 D86B 0004                  		add.w	4(a3),d4
0000738A DA53                       		add.w	(a3),d5
0000738C 3604                       		move.w	d4,d3
0000738E E24B                       		lsr.w	#1,d3
00007390 0243 0380                  		andi.w	#$380,d3
00007394 E64D                       		lsr.w	#3,d5
00007396 3005                       		move.w	d5,d0
00007398 EA48                       		lsr.w	#5,d0
0000739A 0240 007F                  		andi.w	#$7F,d0
0000739E D043                       		add.w	d3,d0
000073A0 76FF                       		moveq	#-1,d3
000073A2 1634 0000                  		move.b	(a4,d0.w),d3
000073A6 6700                       		beq.s	locret_6C1E
000073A8 5303                       		subq.b	#1,d3
000073AA 0243 007F                  		andi.w	#$7F,d3
000073AE EE5B                       		ror.w	#7,d3
000073B0 D844                       		add.w	d4,d4
000073B2 0244 01E0                  		andi.w	#$1E0,d4
000073B6 0245 001E                  		andi.w	#$1E,d5
000073BA D644                       		add.w	d4,d3
000073BC D645                       		add.w	d5,d3
000073BE 2043                       		movea.l	d3,a0
000073C0 3610                       		move.w	(a0),d3
000073C2 0243 03FF                  		andi.w	#$3FF,d3
000073C6 E74B                       		lsl.w	#3,d3
000073C8 D2C3                       		adda.w	d3,a1
000073CA                            
000073CA                            locret_6C1E:
000073CA 4E75                       		rts	
000073CC                            ; End of function sub_6BD6
000073CC                            
000073CC                            
000073CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000073CC                            
000073CC                            
000073CC                            sub_6C20:				; XREF: LoadTilesAsYouMove; et al
000073CC D86B 0004                  		add.w	4(a3),d4
000073D0 DA53                       		add.w	(a3),d5
000073D2 0244 00F0                  		andi.w	#$F0,d4
000073D6 0245 01F0                  		andi.w	#$1F0,d5
000073DA E94C                       		lsl.w	#4,d4
000073DC E44D                       		lsr.w	#2,d5
000073DE D845                       		add.w	d5,d4
000073E0 7003                       		moveq	#3,d0
000073E2 4840                       		swap	d0
000073E4 3004                       		move.w	d4,d0
000073E6 4E75                       		rts	
000073E8                            ; End of function sub_6C20
000073E8                            
000073E8                            
000073E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000073E8                            ; not used
000073E8                            
000073E8                            
000073E8                            sub_6C3C:
000073E8 D86B 0004                  		add.w	4(a3),d4
000073EC DA53                       		add.w	(a3),d5
000073EE 0244 00F0                  		andi.w	#$F0,d4
000073F2 0245 01F0                  		andi.w	#$1F0,d5
000073F6 E94C                       		lsl.w	#4,d4
000073F8 E44D                       		lsr.w	#2,d5
000073FA D845                       		add.w	d5,d4
000073FC 7002                       		moveq	#2,d0
000073FE 4840                       		swap	d0
00007400 3004                       		move.w	d4,d0
00007402 4E75                       		rts	
00007404                            ; End of function sub_6C3C
00007404                            
00007404                            ; ---------------------------------------------------------------------------
00007404                            ; Subroutine to	load tiles as soon as the level	appears
00007404                            ; ---------------------------------------------------------------------------
00007404                            
00007404                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007404                            
00007404                            
00007404                            LoadTilesFromStart:			; XREF: Level; EndingSequence
00007404 4BF9 00C0 0004             		lea	($C00004).l,a5
0000740A 4DF9 00C0 0000             		lea	($C00000).l,a6
00007410 47F8 F700                  		lea	($FFFFF700).w,a3
00007414 49F8 A400                  		lea	($FFFFA400).w,a4
00007418 343C 4000                  		move.w	#$4000,d2
0000741C 6100                       		bsr.s	LoadTilesFromStart2
0000741E 47F8 F708                  		lea	($FFFFF708).w,a3
00007422 49F8 A440                  		lea	($FFFFA440).w,a4
00007426 343C 6000                  		move.w	#$6000,d2
0000742A                            ; End of function LoadTilesFromStart
0000742A                            
0000742A                            
0000742A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000742A                            
0000742A                            
0000742A                            LoadTilesFromStart2:			; XREF: LoadTilesFromStart
0000742A 78F0                       		moveq	#-$10,d4
0000742C 7C0F                       		moveq	#$F,d6
0000742E                            
0000742E                            loc_6C82:
0000742E 48E7 0E00                  		movem.l	d4-d6,-(sp)
00007432 7A00                       		moveq	#0,d5
00007434 3204                       		move.w	d4,d1
00007436 6100 FF94                  		bsr.w	sub_6C20
0000743A 3801                       		move.w	d1,d4
0000743C 7A00                       		moveq	#0,d5
0000743E 7C1F                       		moveq	#$1F,d6
00007440 6100 FE44                  		bsr.w	sub_6ADA
00007444 4CDF 0070                  		movem.l	(sp)+,d4-d6
00007448 0644 0010                  		addi.w	#$10,d4
0000744C 51CE FFE0                  		dbf	d6,loc_6C82
00007450 4E75                       		rts	
00007452                            ; End of function LoadTilesFromStart2
00007452                            
00007452                            ; ---------------------------------------------------------------------------
00007452                            ; Main Load Block loading subroutine
00007452                            ; ---------------------------------------------------------------------------
00007452                            
00007452                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007452                            
00007452                            
00007452                            MainLoadBlockLoad:			; XREF: Level; EndingSequence
00007452 7000                       		moveq	#0,d0
00007454 1038 FE10                  		move.b	($FFFFFE10).w,d0
00007458 E948                       		lsl.w	#4,d0
0000745A 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
00007460 45F2 0000                  		lea	(a2,d0.w),a2
00007464 2F0A                       		move.l	a2,-(sp)
00007466 588A                       		addq.l	#4,a2
00007468 205A                       		movea.l	(a2)+,a0
0000746A 43F8 B000                  		lea	($FFFFB000).w,a1 ; RAM address for 16x16 mappings
0000746E 303C 0000                  		move.w	#0,d0
00007472 6100 A4E0                  		bsr.w	EniDec
00007476 205A                       		movea.l	(a2)+,a0
00007478 43F9 00FF 0000             		lea	($FF0000).l,a1	; RAM address for 256x256 mappings
0000747E 6100 A652                  		bsr.w	KosDec
00007482 6100 0000                  		bsr.w	LevelLayoutLoad
00007486 301A                       		move.w	(a2)+,d0
00007488 3012                       		move.w	(a2),d0
0000748A 0240 00FF                  		andi.w	#$FF,d0
0000748E 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; is level SBZ3 (LZ4) ?
00007494 6600                       		bne.s	MLB_ChkSBZPal	; if not, branch
00007496 700C                       		moveq	#$C,d0		; use SB3 pallet
00007498                            
00007498                            MLB_ChkSBZPal:
00007498 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2?
0000749E 6700                       		beq.s	MLB_UsePal0E	; if yes, branch
000074A0 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; is level FZ?
000074A6 6600                       		bne.s	MLB_NormalPal	; if not, branch
000074A8                            
000074A8                            MLB_UsePal0E:
000074A8 700E                       		moveq	#$E,d0		; use SBZ2/FZ pallet
000074AA                            
000074AA                            MLB_NormalPal:
000074AA 6100 AE52                  		bsr.w	PalLoad1	; load pallet (based on	d0)
000074AE 245F                       		movea.l	(sp)+,a2
000074B0 584A                       		addq.w	#4,a2
000074B2 7000                       		moveq	#0,d0
000074B4 1012                       		move.b	(a2),d0
000074B6 6700                       		beq.s	locret_6D10
000074B8 6100 A2FC                  		bsr.w	LoadPLC		; load pattern load cues
000074BC                            
000074BC                            locret_6D10:
000074BC 4E75                       		rts	
000074BE                            ; End of function MainLoadBlockLoad
000074BE                            
000074BE                            ; ---------------------------------------------------------------------------
000074BE                            ; Level	layout loading subroutine
000074BE                            ; ---------------------------------------------------------------------------
000074BE                            
000074BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000074BE                            
000074BE                            
000074BE                            LevelLayoutLoad:			; XREF: TitleScreen; MainLoadBlockLoad
000074BE 47F8 A400                  		lea	($FFFFA400).w,a3
000074C2 323C 01FF                  		move.w	#$1FF,d1
000074C6 7000                       		moveq	#0,d0
000074C8                            
000074C8                            LevLoad_ClrRam:
000074C8 26C0                       		move.l	d0,(a3)+
000074CA 51C9 FFFC                  		dbf	d1,LevLoad_ClrRam ; clear the RAM ($FFFFA400-A7FF)
000074CE                            
000074CE 47F8 A400                  		lea	($FFFFA400).w,a3 ; RAM address for level layout
000074D2 7200                       		moveq	#0,d1
000074D4 6100 0000                  		bsr.w	LevelLayoutLoad2 ; load	level layout into RAM
000074D8 47F8 A440                  		lea	($FFFFA440).w,a3 ; RAM address for background layout
000074DC 7202                       		moveq	#2,d1
000074DE                            ; End of function LevelLayoutLoad
000074DE                            
000074DE                            ; "LevelLayoutLoad2" is	run twice - for	the level and the background
000074DE                            
000074DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000074DE                            
000074DE                            
000074DE                            LevelLayoutLoad2:			; XREF: LevelLayoutLoad
000074DE 3038 FE10                  		move.w	($FFFFFE10).w,d0
000074E2 ED08                       		lsl.b	#6,d0
000074E4 EA48                       		lsr.w	#5,d0
000074E6 3400                       		move.w	d0,d2
000074E8 D040                       		add.w	d0,d0
000074EA D042                       		add.w	d2,d0
000074EC D041                       		add.w	d1,d0
000074EE 43F9 0000 0000             		lea	(Level_Index).l,a1
000074F4 3031 0000                  		move.w	(a1,d0.w),d0
000074F8 43F1 0000                  		lea	(a1,d0.w),a1
000074FC 7200                       		moveq	#0,d1
000074FE 3401                       		move.w	d1,d2
00007500 1219                       		move.b	(a1)+,d1	; load level width (in tiles)
00007502 1419                       		move.b	(a1)+,d2	; load level height (in	tiles)
00007504                            
00007504                            LevLoad_NumRows:
00007504 3001                       		move.w	d1,d0
00007506 204B                       		movea.l	a3,a0
00007508                            
00007508                            LevLoad_Row:
00007508 10D9                       		move.b	(a1)+,(a0)+
0000750A 51C8 FFFC                  		dbf	d0,LevLoad_Row	; load 1 row
0000750E 47EB 0080                  		lea	$80(a3),a3	; do next row
00007512 51CA FFF0                  		dbf	d2,LevLoad_NumRows ; repeat for	number of rows
00007516 4E75                       		rts	
00007518                            ; End of function LevelLayoutLoad2
00007518                            
00007518                            ; ---------------------------------------------------------------------------
00007518                            ; Dynamic screen resize	loading	subroutine
00007518                            ; ---------------------------------------------------------------------------
00007518                            
00007518                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007518                            
00007518                            
00007518                            DynScrResizeLoad:			; XREF: DeformBgLayer
00007518 7000                       		moveq	#0,d0
0000751A 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000751E D040                       		add.w	d0,d0
00007520 303B 0000                  		move.w	Resize_Index(pc,d0.w),d0
00007524 4EBB 0000                  		jsr	Resize_Index(pc,d0.w)
00007528 7202                       		moveq	#2,d1
0000752A 3038 F726                  		move.w	($FFFFF726).w,d0
0000752E 9078 F72E                  		sub.w	($FFFFF72E).w,d0
00007532 6700                       		beq.s	locret_6DAA
00007534 6400                       		bcc.s	loc_6DAC
00007536 4441                       		neg.w	d1
00007538 3038 F704                  		move.w	($FFFFF704).w,d0
0000753C B078 F726                  		cmp.w	($FFFFF726).w,d0
00007540 6300                       		bls.s	loc_6DA0
00007542 31C0 F72E                  		move.w	d0,($FFFFF72E).w
00007546 0278 FFFE F72E             		andi.w	#-2,($FFFFF72E).w
0000754C                            
0000754C                            loc_6DA0:
0000754C D378 F72E                  		add.w	d1,($FFFFF72E).w
00007550 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
00007556                            
00007556                            locret_6DAA:
00007556 4E75                       		rts	
00007558                            ; ===========================================================================
00007558                            
00007558                            loc_6DAC:				; XREF: DynScrResizeLoad
00007558 3038 F704                  		move.w	($FFFFF704).w,d0
0000755C 5040                       		addq.w	#8,d0
0000755E B078 F72E                  		cmp.w	($FFFFF72E).w,d0
00007562 6500                       		bcs.s	loc_6DC4
00007564 0838 0001 D022             		btst	#1,($FFFFD022).w
0000756A 6700                       		beq.s	loc_6DC4
0000756C D241                       		add.w	d1,d1
0000756E D241                       		add.w	d1,d1
00007570                            
00007570                            loc_6DC4:
00007570 D378 F72E                  		add.w	d1,($FFFFF72E).w
00007574 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
0000757A 4E75                       		rts	
0000757C                            ; End of function DynScrResizeLoad
0000757C                            
0000757C                            ; ===========================================================================
0000757C                            ; ---------------------------------------------------------------------------
0000757C                            ; Offset index for dynamic screen resizing
0000757C                            ; ---------------------------------------------------------------------------
0000757C 0000 0000                  Resize_Index:	dc.w Resize_GHZ-Resize_Index, Resize_LZ-Resize_Index
00007580 0000 0000                  		dc.w Resize_MZ-Resize_Index, Resize_SLZ-Resize_Index
00007584 0000 0000                  		dc.w Resize_SYZ-Resize_Index, Resize_SBZ-Resize_Index
00007588 0000 0000                  		dc.w Resize_Ending-Resize_Index, Resize_GHZ-Resize_Index
0000758C                            ; ===========================================================================
0000758C                            ; ---------------------------------------------------------------------------
0000758C                            ; Green	Hill Zone dynamic screen resizing
0000758C                            ; ---------------------------------------------------------------------------
0000758C                            
0000758C                            Resize_GHZ:				; XREF: Resize_Index
0000758C 7000                       		moveq	#0,d0
0000758E 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007592 D040                       		add.w	d0,d0
00007594 303B 0000                  		move.w	Resize_GHZx(pc,d0.w),d0
00007598 4EFB 0000                  		jmp	Resize_GHZx(pc,d0.w)
0000759C                            ; ===========================================================================
0000759C 0000                       Resize_GHZx:	dc.w Resize_GHZ1-Resize_GHZx
0000759E 0000                       		dc.w Resize_GHZ2-Resize_GHZx
000075A0 0000                       		dc.w Resize_GHZ3-Resize_GHZx
000075A2                            ; ===========================================================================
000075A2                            
000075A2                            Resize_GHZ1:
000075A2 31FC 0300 F726             		move.w	#$300,($FFFFF726).w ; set lower	y-boundary
000075A8 0C78 1780 F700             		cmpi.w	#$1780,($FFFFF700).w ; has the camera reached $1780 on x-axis?
000075AE 6500                       		bcs.s	locret_6E08	; if not, branch
000075B0 31FC 0400 F726             		move.w	#$400,($FFFFF726).w ; set lower	y-boundary
000075B6                            
000075B6                            locret_6E08:
000075B6 4E75                       		rts	
000075B8                            ; ===========================================================================
000075B8                            
000075B8                            Resize_GHZ2:
000075B8 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
000075BE 0C78 0ED0 F700             		cmpi.w	#$ED0,($FFFFF700).w
000075C4 6500                       		bcs.s	locret_6E3A
000075C6 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
000075CC 0C78 1600 F700             		cmpi.w	#$1600,($FFFFF700).w
000075D2 6500                       		bcs.s	locret_6E3A
000075D4 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
000075DA 0C78 1C00 F700             		cmpi.w	#$1C00,($FFFFF700).w
000075E0 6500                       		bcs.s	locret_6E3A
000075E2 31FC 0100 F726             		move.w	#$100,($FFFFF726).w
000075E8 0C78 1D00 F700             		cmpi.w	#$1D00,($FFFFF700).w
000075EE 6500                       		bcs.s	locret_6E3A
000075F0 31FC 0020 F726             		move.w	#$20,($FFFFF726).w
000075F6                            		
000075F6                            locret_6E3A:
000075F6 4E75                       		rts	
000075F8                            ; ===========================================================================
000075F8                            
000075F8                            Resize_GHZ3:
000075F8 7000                       		moveq	#0,d0
000075FA 1038 F742                  		move.b	($FFFFF742).w,d0
000075FE 303B 0000                  		move.w	off_6E4A(pc,d0.w),d0
00007602 4EFB 0000                  		jmp	off_6E4A(pc,d0.w)
00007606                            ; ===========================================================================
00007606 0000                       off_6E4A:	dc.w Resize_GHZ3main-off_6E4A
00007608 0000                       		dc.w Resize_GHZ3boss-off_6E4A
0000760A 0000                       		dc.w Resize_GHZ3end-off_6E4A
0000760C                            ; ===========================================================================
0000760C                            
0000760C                            Resize_GHZ3main:
0000760C 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00007612 0C78 0380 F700             		cmpi.w	#$380,($FFFFF700).w
00007618 6500                       		bcs.s	locret_6E96
0000761A 31FC 0310 F726             		move.w	#$310,($FFFFF726).w
00007620 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
00007626 6500                       		bcs.s	locret_6E96
00007628 0C78 0280 F704             		cmpi.w	#$280,($FFFFF704).w
0000762E 6500                       		bcs.s	loc_6E98
00007630 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
00007636 0C78 1380 F700             		cmpi.w	#$1380,($FFFFF700).w
0000763C 6400                       		bcc.s	loc_6E8E
0000763E 31FC 04C0 F726             		move.w	#$4C0,($FFFFF726).w
00007644 31FC 04C0 F72E             		move.w	#$4C0,($FFFFF72E).w
0000764A                            
0000764A                            loc_6E8E:
0000764A 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
00007650 6400                       		bcc.s	loc_6E98
00007652                            
00007652                            locret_6E96:
00007652 4E75                       		rts	
00007654                            ; ===========================================================================
00007654                            
00007654                            loc_6E98:
00007654 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
0000765A 5438 F742                  		addq.b	#2,($FFFFF742).w
0000765E 4E75                       		rts	
00007660                            ; ===========================================================================
00007660                            
00007660                            Resize_GHZ3boss:
00007660 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
00007666 6400                       		bcc.s	loc_6EB0
00007668 5538 F742                  		subq.b	#2,($FFFFF742).w
0000766C                            
0000766C                            loc_6EB0:
0000766C 0C78 2960 F700             		cmpi.w	#$2960,($FFFFF700).w
00007672 6500                       		bcs.s	locret_6EE8
00007674 6100 0000                  		bsr.w	SingleObjLoad
00007678 6600                       		bne.s	loc_6ED0
0000767A 12BC 003D                  		move.b	#$3D,0(a1)	; load GHZ boss	object
0000767E 337C 2A60 0008             		move.w	#$2A60,8(a1)
00007684 337C 0280 000C             		move.w	#$280,$C(a1)
0000768A                            
0000768A                            loc_6ED0:
0000768A 303C 008C                  		move.w	#$8C,d0
0000768E 6100 9F3C                  		bsr.w	PlaySound	; play boss music
00007692 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007698 5438 F742                  		addq.b	#2,($FFFFF742).w
0000769C 7011                       		moveq	#$11,d0
0000769E 6000 A116                  		bra.w	LoadPLC		; load boss patterns
000076A2                            ; ===========================================================================
000076A2                            
000076A2                            locret_6EE8:
000076A2 4E75                       		rts	
000076A4                            ; ===========================================================================
000076A4                            
000076A4                            Resize_GHZ3end:
000076A4 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
000076AA 4E75                       		rts	
000076AC                            ; ===========================================================================
000076AC                            ; ---------------------------------------------------------------------------
000076AC                            ; Labyrinth Zone dynamic screen	resizing
000076AC                            ; ---------------------------------------------------------------------------
000076AC                            
000076AC                            Resize_LZ:				; XREF: Resize_Index
000076AC 7000                       		moveq	#0,d0
000076AE 1038 FE11                  		move.b	($FFFFFE11).w,d0
000076B2 D040                       		add.w	d0,d0
000076B4 303B 0000                  		move.w	Resize_LZx(pc,d0.w),d0
000076B8 4EFB 0000                  		jmp	Resize_LZx(pc,d0.w)
000076BC                            ; ===========================================================================
000076BC 0000                       Resize_LZx:	dc.w Resize_LZ12-Resize_LZx
000076BE 0000                       		dc.w Resize_LZ12-Resize_LZx
000076C0 0000                       		dc.w Resize_LZ3-Resize_LZx
000076C2 0000                       		dc.w Resize_SBZ3-Resize_LZx
000076C4                            ; ===========================================================================
000076C4                            
000076C4                            Resize_LZ12:
000076C4 4E75                       		rts	
000076C6                            ; ===========================================================================
000076C6                            
000076C6                            Resize_LZ3:
000076C6 7000                       		moveq	#0,d0
000076C8 1038 F742                  		move.b	($FFFFF742).w,d0
000076CC 303B 0000                  		move.w	off_6E4A2(pc,d0.w),d0
000076D0 4EFB 0000                  		jmp	off_6E4A2(pc,d0.w)
000076D4                            ; ===========================================================================
000076D4                            off_6E4A2:	
000076D4 0000                       		dc.w Resize_LZ3boss-off_6E4A2
000076D6 0000                       		dc.w Resize_LZ3end-off_6E4A2
000076D8                            ; ===========================================================================
000076D8                            Resize_LZ3boss:
000076D8 4A38 F742                  		tst.b	($FFFFF742).w
000076DC 6600                       		bne.s	locret_6F62
000076DE 0C78 1CA0 F700             		cmpi.w	#$1CA0,($FFFFF700).w
000076E4 6500                       		bcs.s	locret_6F62
000076E6 31FC 0640 F726             		move.w	#$640,($FFFFF726).w ; set lower	y-boundary
000076EC 31FC 0000 F634             		move.w	#0,($FFFFF634).w ; disable pallet cycling
000076F2                            
000076F2 6100 0000                  		bsr.w	SingleObjLoad
000076F6 6600                       		bne.s	loc_6F4A
000076F8 12BC 0077                  		move.b	#$77,0(a1)	; load LZ boss object
000076FC 337C 1EA0 0008             		move.w	#$1EA0,8(a1)
00007702 337C 06E0 000C             		move.w	#$6E0,$C(a1)
00007708                            loc_6F4A:
00007708 303C 008C                  		move.w	#$8C,d0
0000770C 6100 9EBE                  		bsr.w	PlaySound	; play boss music
00007710 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007716 5438 F742                  		addq.b	#2,($FFFFF742).w
0000771A 7020                       		moveq	#$20,d0
0000771C 6000 A098                  		bra.w	LoadPLC		; load boss patterns
00007720                            ; ===========================================================================
00007720                            
00007720                            locret_6F62:
00007720 4E75                       		rts	
00007722                            ; ===========================================================================
00007722                            
00007722                            Resize_LZ3end:
00007722 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007728 4E75                       		rts	
0000772A                            ; ===========================================================================
0000772A                            
0000772A                            Resize_SBZ3:
0000772A 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
00007730 6500                       		bcs.s	locret_6F8C
00007732 0C78 0018 D00C             		cmpi.w	#$18,($FFFFD00C).w ; has Sonic reached the top of the level?
00007738 6400                       		bcc.s	locret_6F8C	; if not, branch
0000773A 4238 FE30                  		clr.b	($FFFFFE30).w
0000773E 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
00007744 31FC 0502 FE10             		move.w	#$502,($FFFFFE10).w ; set level	number to 0502 (FZ)
0000774A 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; freeze Sonic
00007750                            
00007750                            locret_6F8C:
00007750 4E75                       		rts	
00007752                            ; ===========================================================================
00007752                            ; ---------------------------------------------------------------------------
00007752                            ; Marble Zone dynamic screen resizing
00007752                            ; ---------------------------------------------------------------------------
00007752                            
00007752                            Resize_MZ:				; XREF: Resize_Index
00007752 7000                       		moveq	#0,d0
00007754 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007758 D040                       		add.w	d0,d0
0000775A 303B 0000                  		move.w	Resize_MZx(pc,d0.w),d0
0000775E 4EFB 0000                  		jmp	Resize_MZx(pc,d0.w)
00007762                            ; ===========================================================================
00007762 0000                       Resize_MZx:	dc.w Resize_MZ1-Resize_MZx
00007764 0000                       		dc.w Resize_MZ2-Resize_MZx
00007766 0000                       		dc.w Resize_MZ3-Resize_MZx
00007768                            ; ===========================================================================
00007768                            
00007768                            Resize_MZ1:
00007768 7000                       		moveq	#0,d0
0000776A 1038 F742                  		move.b	($FFFFF742).w,d0
0000776E 303B 0000                  		move.w	off_6FB2(pc,d0.w),d0
00007772 4EFB 0000                  		jmp	off_6FB2(pc,d0.w)
00007776                            ; ===========================================================================
00007776 0000                       off_6FB2:	dc.w loc_6FBA-off_6FB2
00007778 0000                       		dc.w loc_6FEA-off_6FB2
0000777A 0000                       		dc.w loc_702E-off_6FB2
0000777C 0000                       		dc.w loc_7050-off_6FB2
0000777E                            ; ===========================================================================
0000777E                            
0000777E                            loc_6FBA:
0000777E 31FC 01D0 F726             		move.w	#$1D0,($FFFFF726).w
00007784 0C78 0700 F700             		cmpi.w	#$700,($FFFFF700).w
0000778A 6500                       		bcs.s	locret_6FE8
0000778C 31FC 0220 F726             		move.w	#$220,($FFFFF726).w
00007792 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
00007798 6500                       		bcs.s	locret_6FE8
0000779A 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
000077A0 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
000077A6 6500                       		bcs.s	locret_6FE8
000077A8 5438 F742                  		addq.b	#2,($FFFFF742).w
000077AC                            
000077AC                            locret_6FE8:
000077AC 4E75                       		rts	
000077AE                            ; ===========================================================================
000077AE                            
000077AE                            loc_6FEA:
000077AE 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
000077B4 6400                       		bcc.s	loc_6FF8
000077B6 5538 F742                  		subq.b	#2,($FFFFF742).w
000077BA 4E75                       		rts	
000077BC                            ; ===========================================================================
000077BC                            
000077BC                            loc_6FF8:
000077BC 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
000077C2 0C78 0E00 F700             		cmpi.w	#$E00,($FFFFF700).w
000077C8 6400                       		bcc.s	locret_702C
000077CA 31FC 0340 F72C             		move.w	#$340,($FFFFF72C).w
000077D0 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
000077D6 0C78 0A90 F700             		cmpi.w	#$A90,($FFFFF700).w
000077DC 6400                       		bcc.s	locret_702C
000077DE 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
000077E4 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
000077EA 6500                       		bcs.s	locret_702C
000077EC 5438 F742                  		addq.b	#2,($FFFFF742).w
000077F0                            
000077F0                            locret_702C:
000077F0 4E75                       		rts	
000077F2                            ; ===========================================================================
000077F2                            
000077F2                            loc_702E:
000077F2 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
000077F8 6400                       		bcc.s	loc_703C
000077FA 5538 F742                  		subq.b	#2,($FFFFF742).w
000077FE 4E75                       		rts	
00007800                            ; ===========================================================================
00007800                            
00007800                            loc_703C:
00007800 0C78 0500 F704             		cmpi.w	#$500,($FFFFF704).w
00007806 6500                       		bcs.s	locret_704E
00007808 31FC 0500 F72C             		move.w	#$500,($FFFFF72C).w
0000780E 5438 F742                  		addq.b	#2,($FFFFF742).w
00007812                            
00007812                            locret_704E:
00007812 4E75                       		rts	
00007814                            ; ===========================================================================
00007814                            
00007814                            loc_7050:
00007814 0C78 0E70 F700             		cmpi.w	#$E70,($FFFFF700).w
0000781A 6500                       		bcs.s	locret_7072
0000781C 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
00007822 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
00007828 0C78 1430 F700             		cmpi.w	#$1430,($FFFFF700).w
0000782E 6500                       		bcs.s	locret_7072
00007830 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
00007836                            
00007836                            locret_7072:
00007836 4E75                       		rts	
00007838                            ; ===========================================================================
00007838                            
00007838                            Resize_MZ2:
00007838 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
0000783E 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
00007844 6500                       		bcs.s	locret_7088
00007846 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
0000784C                            
0000784C                            locret_7088:
0000784C 4E75                       		rts	
0000784E                            ; ===========================================================================
0000784E                            
0000784E                            Resize_MZ3:
0000784E 7000                       		moveq	#0,d0
00007850 1038 F742                  		move.b	($FFFFF742).w,d0
00007854 303B 0000                  		move.w	off_7098(pc,d0.w),d0
00007858 4EFB 0000                  		jmp	off_7098(pc,d0.w)
0000785C                            ; ===========================================================================
0000785C 0000                       off_7098:	dc.w Resize_MZ3boss-off_7098
0000785E 0000                       		dc.w Resize_MZ3end-off_7098
00007860                            ; ===========================================================================
00007860                            
00007860                            Resize_MZ3boss:
00007860 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
00007866 0C78 1560 F700             		cmpi.w	#$1560,($FFFFF700).w
0000786C 6500                       		bcs.s	locret_70E8
0000786E 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
00007874 0C78 17F0 F700             		cmpi.w	#$17F0,($FFFFF700).w
0000787A 6500                       		bcs.s	locret_70E8
0000787C 6100 0000                  		bsr.w	SingleObjLoad
00007880 6600                       		bne.s	loc_70D0
00007882 12BC 0073                  		move.b	#$73,0(a1)	; load MZ boss object
00007886 337C 19F0 0008             		move.w	#$19F0,8(a1)
0000788C 337C 022C 000C             		move.w	#$22C,$C(a1)
00007892                            
00007892                            loc_70D0:
00007892 303C 008C                  		move.w	#$8C,d0
00007896 6100 9D34                  		bsr.w	PlaySound	; play boss music
0000789A 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000078A0 5438 F742                  		addq.b	#2,($FFFFF742).w
000078A4 7011                       		moveq	#$11,d0
000078A6 6000 9F0E                  		bra.w	LoadPLC		; load boss patterns
000078AA                            ; ===========================================================================
000078AA                            
000078AA                            locret_70E8:
000078AA 4E75                       		rts	
000078AC                            ; ===========================================================================
000078AC                            
000078AC                            Resize_MZ3end:
000078AC 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
000078B2 4E75                       		rts	
000078B4                            ; ===========================================================================
000078B4                            ; ---------------------------------------------------------------------------
000078B4                            ; Star Light Zone dynamic screen resizing
000078B4                            ; ---------------------------------------------------------------------------
000078B4                            
000078B4                            Resize_SLZ:				; XREF: Resize_Index
000078B4 7000                       		moveq	#0,d0
000078B6 1038 FE11                  		move.b	($FFFFFE11).w,d0
000078BA D040                       		add.w	d0,d0
000078BC 303B 0000                  		move.w	Resize_SLZx(pc,d0.w),d0
000078C0 4EFB 0000                  		jmp	Resize_SLZx(pc,d0.w)
000078C4                            ; ===========================================================================
000078C4 0000                       Resize_SLZx:	dc.w Resize_SLZ1-Resize_SLZx
000078C6 0000                       		dc.w Resize_SLZ2-Resize_SLZx
000078C8 0000                       		dc.w Resize_SLZ3-Resize_SLZx
000078CA                            ; ===========================================================================
000078CA                            
000078CA                            Resize_SLZ1:
000078CA 31FC 0100 F726             		move.w	#$100,($FFFFF726).w ; set lower	y-boundary
000078D0 4E75                       		rts	
000078D2                            
000078D2                            Resize_SLZ2:
000078D2 4E75                       		rts	
000078D4                            ; ===========================================================================
000078D4                            
000078D4                            Resize_SLZ3:
000078D4 7000                       		moveq	#0,d0
000078D6 1038 F742                  		move.b	($FFFFF742).w,d0
000078DA 303B 0000                  		move.w	off_7118(pc,d0.w),d0
000078DE 4EFB 0000                  		jmp	off_7118(pc,d0.w)
000078E2                            ; ===========================================================================
000078E2 0000                       off_7118:	dc.w Resize_SLZ3main-off_7118
000078E4 0000                       		dc.w Resize_SLZ3boss-off_7118
000078E6 0000                       		dc.w Resize_SLZ3end-off_7118
000078E8                            ; ===========================================================================
000078E8                            
000078E8                            Resize_SLZ3main:
000078E8 0C78 1E70 F700             		cmpi.w	#$1E70,($FFFFF700).w
000078EE 6500                       		bcs.s	locret_7130
000078F0 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
000078F6 5438 F742                  		addq.b	#2,($FFFFF742).w
000078FA                            
000078FA                            locret_7130:
000078FA 4E75                       		rts	
000078FC                            ; ===========================================================================
000078FC                            
000078FC                            Resize_SLZ3boss:
000078FC 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
00007902 6500                       		bcs.s	locret_715C
00007904 6100 0000                  		bsr.w	SingleObjLoad
00007908 6600                       		bne.s	loc_7144
0000790A 12BC 007A                  		move.b	#$7A,(a1)	; load SLZ boss	object
0000790E                            
0000790E                            loc_7144:
0000790E 303C 008C                  		move.w	#$8C,d0
00007912 6100 9CB8                  		bsr.w	PlaySound	; play boss music
00007916 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
0000791C 5438 F742                  		addq.b	#2,($FFFFF742).w
00007920 7011                       		moveq	#$11,d0
00007922 6000 9E92                  		bra.w	LoadPLC		; load boss patterns
00007926                            ; ===========================================================================
00007926                            
00007926                            locret_715C:
00007926 4E75                       		rts	
00007928                            ; ===========================================================================
00007928                            
00007928                            Resize_SLZ3end:
00007928 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
0000792E 4E75                       		rts
00007930 4E75                       		rts
00007932                            ; ===========================================================================
00007932                            ; ---------------------------------------------------------------------------
00007932                            ; Spring Yard Zone dynamic screen resizing
00007932                            ; ---------------------------------------------------------------------------
00007932                            
00007932                            Resize_SYZ:				; XREF: Resize_Index
00007932 7000                       		moveq	#0,d0
00007934 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007938 D040                       		add.w	d0,d0
0000793A 303B 0000                  		move.w	Resize_SYZx(pc,d0.w),d0
0000793E 4EFB 0000                  		jmp	Resize_SYZx(pc,d0.w)
00007942                            ; ===========================================================================
00007942 0000                       Resize_SYZx:	dc.w Resize_SYZ1-Resize_SYZx
00007944 0000                       		dc.w Resize_SYZ2-Resize_SYZx
00007946 0000                       		dc.w Resize_SYZ3-Resize_SYZx
00007948                            ; ===========================================================================
00007948                            
00007948                            Resize_SYZ1:
00007948 4E75                       		rts	
0000794A                            ; ===========================================================================
0000794A                            
0000794A                            Resize_SYZ2:
0000794A 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
00007950 0C78 25A0 F700             		cmpi.w	#$25A0,($FFFFF700).w
00007956 6500                       		bcs.s	locret_71A2
00007958 31FC 0420 F726             		move.w	#$420,($FFFFF726).w
0000795E 0C78 04D0 D00C             		cmpi.w	#$4D0,($FFFFD00C).w
00007964 6500                       		bcs.s	locret_71A2
00007966 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
0000796C                            
0000796C                            locret_71A2:
0000796C 4E75                       		rts	
0000796E                            ; ===========================================================================
0000796E                            
0000796E                            Resize_SYZ3:
0000796E 7000                       		moveq	#0,d0
00007970 1038 F742                  		move.b	($FFFFF742).w,d0
00007974 303B 0000                  		move.w	off_71B2(pc,d0.w),d0
00007978 4EFB 0000                  		jmp	off_71B2(pc,d0.w)
0000797C                            ; ===========================================================================
0000797C 0000                       off_71B2:	dc.w Resize_SYZ3main-off_71B2
0000797E 0000                       		dc.w Resize_SYZ3boss-off_71B2
00007980 0000                       		dc.w Resize_SYZ3end-off_71B2
00007982                            ; ===========================================================================
00007982                            
00007982                            Resize_SYZ3main:
00007982 0C78 2AC0 F700             		cmpi.w	#$2AC0,($FFFFF700).w
00007988 6500                       		bcs.s	locret_71CE
0000798A 6100 0000                  		bsr.w	SingleObjLoad
0000798E 6600                       		bne.s	locret_71CE
00007990 12BC 0076                  		move.b	#$76,(a1)	; load blocks that boss	picks up
00007994 5438 F742                  		addq.b	#2,($FFFFF742).w
00007998                            
00007998                            locret_71CE:
00007998 4E75                       		rts	
0000799A                            ; ===========================================================================
0000799A                            
0000799A                            Resize_SYZ3boss:
0000799A 0C78 2C00 F700             		cmpi.w	#$2C00,($FFFFF700).w
000079A0 6500                       		bcs.s	locret_7200
000079A2 31FC 04CC F726             		move.w	#$4CC,($FFFFF726).w
000079A8 6100 0000                  		bsr.w	SingleObjLoad
000079AC 6600                       		bne.s	loc_71EC
000079AE 12BC 0075                  		move.b	#$75,(a1)	; load SYZ boss	object
000079B2 5438 F742                  		addq.b	#2,($FFFFF742).w
000079B6                            
000079B6                            loc_71EC:
000079B6 303C 008C                  		move.w	#$8C,d0
000079BA 6100 9C10                  		bsr.w	PlaySound	; play boss music
000079BE 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000079C4 7011                       		moveq	#$11,d0
000079C6 6000 9DEE                  		bra.w	LoadPLC		; load boss patterns
000079CA                            ; ===========================================================================
000079CA                            
000079CA                            locret_7200:
000079CA 4E75                       		rts	
000079CC                            ; ===========================================================================
000079CC                            
000079CC                            Resize_SYZ3end:
000079CC 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
000079D2 4E75                       		rts	
000079D4                            ; ===========================================================================
000079D4                            ; ---------------------------------------------------------------------------
000079D4                            ; Scrap	Brain Zone dynamic screen resizing
000079D4                            ; ---------------------------------------------------------------------------
000079D4                            
000079D4                            Resize_SBZ:				; XREF: Resize_Index
000079D4 7000                       		moveq	#0,d0
000079D6 1038 FE11                  		move.b	($FFFFFE11).w,d0
000079DA D040                       		add.w	d0,d0
000079DC 303B 0000                  		move.w	Resize_SBZx(pc,d0.w),d0
000079E0 4EFB 0000                  		jmp	Resize_SBZx(pc,d0.w)
000079E4                            ; ===========================================================================
000079E4 0000                       Resize_SBZx:	dc.w Resize_SBZ1-Resize_SBZx
000079E6 0000                       		dc.w Resize_SBZ2-Resize_SBZx
000079E8 0000                       		dc.w Resize_FZ-Resize_SBZx
000079EA                            ; ===========================================================================
000079EA                            
000079EA                            Resize_SBZ1:
000079EA 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
000079F0 0C78 1880 F700             		cmpi.w	#$1880,($FFFFF700).w
000079F6 6500                       		bcs.s	locret_7242
000079F8 31FC 0620 F726             		move.w	#$620,($FFFFF726).w
000079FE 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
00007A04 6500                       		bcs.s	locret_7242
00007A06 31FC 02A0 F726             		move.w	#$2A0,($FFFFF726).w
00007A0C                            
00007A0C                            locret_7242:
00007A0C 4E75                       		rts	
00007A0E                            ; ===========================================================================
00007A0E                            
00007A0E                            Resize_SBZ2:
00007A0E 7000                       		moveq	#0,d0
00007A10 1038 F742                  		move.b	($FFFFF742).w,d0
00007A14 303B 0000                  		move.w	off_7252(pc,d0.w),d0
00007A18 4EFB 0000                  		jmp	off_7252(pc,d0.w)
00007A1C                            ; ===========================================================================
00007A1C 0000                       off_7252:	dc.w Resize_SBZ2main-off_7252
00007A1E 0000                       		dc.w Resize_SBZ2boss-off_7252
00007A20 0000                       		dc.w Resize_SBZ2boss2-off_7252
00007A22 0000                       		dc.w Resize_SBZ2end-off_7252
00007A24                            ; ===========================================================================
00007A24                            
00007A24                            Resize_SBZ2main:
00007A24 31FC 0800 F726             		move.w	#$800,($FFFFF726).w
00007A2A 0C78 1800 F700             		cmpi.w	#$1800,($FFFFF700).w
00007A30 6500                       		bcs.s	locret_727A
00007A32 31FC 0510 F726             		move.w	#$510,($FFFFF726).w
00007A38 0C78 1E00 F700             		cmpi.w	#$1E00,($FFFFF700).w
00007A3E 6500                       		bcs.s	locret_727A
00007A40 5438 F742                  		addq.b	#2,($FFFFF742).w
00007A44                            
00007A44                            locret_727A:
00007A44 4E75                       		rts	
00007A46                            ; ===========================================================================
00007A46                            
00007A46                            Resize_SBZ2boss:
00007A46 0C78 1EB0 F700             		cmpi.w	#$1EB0,($FFFFF700).w
00007A4C 6500                       		bcs.s	locret_7298
00007A4E 6100 0000                  		bsr.w	SingleObjLoad
00007A52 6600                       		bne.s	locret_7298
00007A54 12BC 0083                  		move.b	#$83,(a1)	; load collapsing block	object
00007A58 5438 F742                  		addq.b	#2,($FFFFF742).w
00007A5C 701E                       		moveq	#$1E,d0
00007A5E 6000 9D56                  		bra.w	LoadPLC		; load SBZ2 Eggman patterns
00007A62                            ; ===========================================================================
00007A62                            
00007A62                            locret_7298:
00007A62 4E75                       		rts	
00007A64                            ; ===========================================================================
00007A64                            
00007A64                            Resize_SBZ2boss2:
00007A64 0C78 1F60 F700             		cmpi.w	#$1F60,($FFFFF700).w
00007A6A 6500                       		bcs.s	loc_72B6
00007A6C 6100 0000                  		bsr.w	SingleObjLoad
00007A70 6600                       		bne.s	loc_72B0
00007A72 12BC 0082                  		move.b	#$82,(a1)	; load SBZ2 Eggman object
00007A76 5438 F742                  		addq.b	#2,($FFFFF742).w
00007A7A                            
00007A7A                            loc_72B0:
00007A7A 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007A80                            
00007A80                            loc_72B6:
00007A80 6000                       		bra.s	loc_72C2
00007A82                            ; ===========================================================================
00007A82                            
00007A82                            Resize_SBZ2end:
00007A82 0C78 2050 F700             		cmpi.w	#$2050,($FFFFF700).w
00007A88 6500                       		bcs.s	loc_72C2
00007A8A 4E75                       		rts	
00007A8C                            ; ===========================================================================
00007A8C                            
00007A8C                            loc_72C2:
00007A8C 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007A92 4E75                       		rts	
00007A94                            ; ===========================================================================
00007A94                            
00007A94                            Resize_FZ:
00007A94 7000                       		moveq	#0,d0
00007A96 1038 F742                  		move.b	($FFFFF742).w,d0
00007A9A 303B 0000                  		move.w	off_72D8(pc,d0.w),d0
00007A9E 4EFB 0000                  		jmp	off_72D8(pc,d0.w)
00007AA2                            ; ===========================================================================
00007AA2 0000 0000                  off_72D8:	dc.w Resize_FZmain-off_72D8, Resize_FZboss-off_72D8
00007AA6 0000 0000                  		dc.w Resize_FZend-off_72D8, locret_7322-off_72D8
00007AAA 0000                       		dc.w Resize_FZend2-off_72D8
00007AAC                            ; ===========================================================================
00007AAC                            
00007AAC                            Resize_FZmain:
00007AAC 0C78 2148 F700             		cmpi.w	#$2148,($FFFFF700).w
00007AB2 6500                       		bcs.s	loc_72F4
00007AB4 5438 F742                  		addq.b	#2,($FFFFF742).w
00007AB8 701F                       		moveq	#$1F,d0
00007ABA 6100 9CFA                  		bsr.w	LoadPLC		; load FZ boss patterns
00007ABE                            
00007ABE                            loc_72F4:
00007ABE 60CC                       		bra.s	loc_72C2
00007AC0                            ; ===========================================================================
00007AC0                            
00007AC0                            Resize_FZboss:
00007AC0 0C78 2300 F700             		cmpi.w	#$2300,($FFFFF700).w
00007AC6 6500                       		bcs.s	loc_7312
00007AC8 6100 0000                  		bsr.w	SingleObjLoad
00007ACC 6600                       		bne.s	loc_7312
00007ACE 12BC 0085                  		move.b	#$85,(a1)	; load FZ boss object
00007AD2 5438 F742                  		addq.b	#2,($FFFFF742).w
00007AD6 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007ADC                            
00007ADC                            loc_7312:
00007ADC 60AE                       		bra.s	loc_72C2
00007ADE                            ; ===========================================================================
00007ADE                            
00007ADE                            Resize_FZend:
00007ADE 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
00007AE4 6500                       		bcs.s	loc_7320
00007AE6 5438 F742                  		addq.b	#2,($FFFFF742).w
00007AEA                            
00007AEA                            loc_7320:
00007AEA 60A0                       		bra.s	loc_72C2
00007AEC                            ; ===========================================================================
00007AEC                            
00007AEC                            locret_7322:
00007AEC 4E75                       		rts	
00007AEE                            ; ===========================================================================
00007AEE                            
00007AEE                            Resize_FZend2:
00007AEE 609C                       		bra.s	loc_72C2
00007AF0                            ; ===========================================================================
00007AF0                            ; ---------------------------------------------------------------------------
00007AF0                            ; Ending sequence dynamic screen resizing (empty)
00007AF0                            ; ---------------------------------------------------------------------------
00007AF0                            
00007AF0                            Resize_Ending:				; XREF: Resize_Index
00007AF0 4E75                       		rts	
00007AF2                            ; ===========================================================================
00007AF2                            ; ---------------------------------------------------------------------------
00007AF2                            ; Object 11 - GHZ bridge
00007AF2                            ; ---------------------------------------------------------------------------
00007AF2                            
00007AF2                            Obj11:					; XREF: Obj_Index
00007AF2 7000                       		moveq	#0,d0
00007AF4 1028 0024                  		move.b	$24(a0),d0
00007AF8 323B 0000                  		move.w	Obj11_Index(pc,d0.w),d1
00007AFC 4EFB 1000                  		jmp	Obj11_Index(pc,d1.w)
00007B00                            ; ===========================================================================
00007B00 0000 0000                  Obj11_Index:	dc.w Obj11_Main-Obj11_Index, Obj11_Action-Obj11_Index
00007B04 0000 0000                  		dc.w Obj11_Action2-Obj11_Index,	Obj11_Delete2-Obj11_Index
00007B08 0000 0000                  		dc.w Obj11_Delete2-Obj11_Index,	Obj11_Display2-Obj11_Index
00007B0C                            ; ===========================================================================
00007B0C                            
00007B0C                            Obj11_Main:				; XREF: Obj11_Index
00007B0C 5428 0024                  		addq.b	#2,$24(a0)
00007B10 217C 0000 0000 0004        		move.l	#Map_obj11,4(a0)
00007B18 317C 438E 0002             		move.w	#$438E,2(a0)
00007B1E 117C 0004 0001             		move.b	#4,1(a0)
00007B24 117C 0003 0018             		move.b	#3,$18(a0)
00007B2A 117C 0080 0019             		move.b	#$80,$19(a0)
00007B30 3428 000C                  		move.w	$C(a0),d2
00007B34 3628 0008                  		move.w	8(a0),d3
00007B38 1810                       		move.b	0(a0),d4	; copy object number ($11) to d4
00007B3A 45E8 0028                  		lea	$28(a0),a2	; copy bridge subtype to a2
00007B3E 7200                       		moveq	#0,d1
00007B40 1212                       		move.b	(a2),d1		; copy a2 to d1
00007B42 14FC 0000                  		move.b	#0,(a2)+
00007B46 3001                       		move.w	d1,d0
00007B48 E248                       		lsr.w	#1,d0
00007B4A E948                       		lsl.w	#4,d0
00007B4C 9640                       		sub.w	d0,d3
00007B4E 5501                       		subq.b	#2,d1
00007B50 6500                       		bcs.s	Obj11_Action
00007B52                            
00007B52                            Obj11_MakeBdg:
00007B52 6100 0000                  		bsr.w	SingleObjLoad
00007B56 6600                       		bne.s	Obj11_Action
00007B58 5228 0028                  		addq.b	#1,$28(a0)
00007B5C B668 0008                  		cmp.w	8(a0),d3
00007B60 6600                       		bne.s	loc_73B8
00007B62 0643 0010                  		addi.w	#$10,d3
00007B66 3142 000C                  		move.w	d2,$C(a0)
00007B6A 3142 003C                  		move.w	d2,$3C(a0)
00007B6E 3A08                       		move.w	a0,d5
00007B70 0445 D000                  		subi.w	#-$3000,d5
00007B74 EC4D                       		lsr.w	#6,d5
00007B76 0245 007F                  		andi.w	#$7F,d5
00007B7A 14C5                       		move.b	d5,(a2)+
00007B7C 5228 0028                  		addq.b	#1,$28(a0)
00007B80                            
00007B80                            loc_73B8:				; XREF: ROM:00007398j
00007B80 3A09                       		move.w	a1,d5
00007B82 0445 D000                  		subi.w	#-$3000,d5
00007B86 EC4D                       		lsr.w	#6,d5
00007B88 0245 007F                  		andi.w	#$7F,d5
00007B8C 14C5                       		move.b	d5,(a2)+
00007B8E 137C 000A 0024             		move.b	#$A,$24(a1)
00007B94 1284                       		move.b	d4,0(a1)	; load bridge object (d4 = $11)
00007B96 3342 000C                  		move.w	d2,$C(a1)
00007B9A 3342 003C                  		move.w	d2,$3C(a1)
00007B9E 3343 0008                  		move.w	d3,8(a1)
00007BA2 237C 0000 0000 0004        		move.l	#Map_obj11,4(a1)
00007BAA 337C 438E 0002             		move.w	#$438E,2(a1)
00007BB0 137C 0004 0001             		move.b	#4,1(a1)
00007BB6 137C 0003 0018             		move.b	#3,$18(a1)
00007BBC 137C 0008 0019             		move.b	#8,$19(a1)
00007BC2 0643 0010                  		addi.w	#$10,d3
00007BC6 51C9 FF8A                  		dbf	d1,Obj11_MakeBdg ; repeat d1 times (length of bridge)
00007BCA                            
00007BCA                            Obj11_Action:				; XREF: Obj11_Index
00007BCA 6100                       		bsr.s	Obj11_Solid
00007BCC 4A28 003E                  		tst.b	$3E(a0)
00007BD0 6700                       		beq.s	Obj11_Display
00007BD2 5928 003E                  		subq.b	#4,$3E(a0)
00007BD6 6100 0000                  		bsr.w	Obj11_Bend
00007BDA                            
00007BDA                            Obj11_Display:
00007BDA 6100 0000                  		bsr.w	DisplaySprite
00007BDE 6000 0000                  		bra.w	Obj11_ChkDel
00007BE2                            
00007BE2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007BE2                            
00007BE2                            
00007BE2                            Obj11_Solid:				; XREF: Obj11_Action
00007BE2 7200                       		moveq	#0,d1
00007BE4 1228 0028                  		move.b	$28(a0),d1
00007BE8 E749                       		lsl.w	#3,d1
00007BEA 3401                       		move.w	d1,d2
00007BEC 5041                       		addq.w	#8,d1
00007BEE D442                       		add.w	d2,d2
00007BF0 43F8 D000                  		lea	($FFFFD000).w,a1
00007BF4 4A69 0012                  		tst.w	$12(a1)
00007BF8 6B00 0000                  		bmi.w	locret_751E
00007BFC 3029 0008                  		move.w	8(a1),d0
00007C00 9068 0008                  		sub.w	8(a0),d0
00007C04 D041                       		add.w	d1,d0
00007C06 6B00 0000                  		bmi.w	locret_751E
00007C0A B042                       		cmp.w	d2,d0
00007C0C 6400 0000                  		bcc.w	locret_751E
00007C10 6000                       		bra.s	Platform2
00007C12                            ; End of function Obj11_Solid
00007C12                            
00007C12                            ; ---------------------------------------------------------------------------
00007C12                            ; Platform subroutine
00007C12                            ; ---------------------------------------------------------------------------
00007C12                            
00007C12                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007C12                            
00007C12                            
00007C12                            PlatformObject:
00007C12 43F8 D000                  		lea	($FFFFD000).w,a1
00007C16 4A69 0012                  		tst.w	$12(a1)
00007C1A 6B00 0000                  		bmi.w	locret_751E
00007C1E 3029 0008                  		move.w	8(a1),d0
00007C22 9068 0008                  		sub.w	8(a0),d0
00007C26 D041                       		add.w	d1,d0
00007C28 6B00 0000                  		bmi.w	locret_751E
00007C2C D241                       		add.w	d1,d1
00007C2E B041                       		cmp.w	d1,d0
00007C30 6400 0000                  		bcc.w	locret_751E
00007C34                            
00007C34                            Platform2:
00007C34 3028 000C                  		move.w	$C(a0),d0
00007C38 5140                       		subq.w	#8,d0
00007C3A                            
00007C3A                            Platform3:
00007C3A 3429 000C                  		move.w	$C(a1),d2
00007C3E 1229 0016                  		move.b	$16(a1),d1
00007C42 4881                       		ext.w	d1
00007C44 D242                       		add.w	d2,d1
00007C46 5841                       		addq.w	#4,d1
00007C48 9041                       		sub.w	d1,d0
00007C4A 6200 0000                  		bhi.w	locret_751E
00007C4E 0C40 FFF0                  		cmpi.w	#-$10,d0
00007C52 6500 0000                  		bcs.w	locret_751E
00007C56 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00007C5A 6B00 0000                  		bmi.w	locret_751E
00007C5E 0C29 0006 0024             		cmpi.b	#6,$24(a1)
00007C64 6400 0000                  		bcc.w	locret_751E
00007C68 D440                       		add.w	d0,d2
00007C6A 5642                       		addq.w	#3,d2
00007C6C 3342 000C                  		move.w	d2,$C(a1)
00007C70 5428 0024                  		addq.b	#2,$24(a0)
00007C74                            
00007C74                            loc_74AE:
00007C74 0829 0003 0022             		btst	#3,$22(a1)
00007C7A 6700                       		beq.s	loc_74DC
00007C7C 7000                       		moveq	#0,d0
00007C7E 1029 003D                  		move.b	$3D(a1),d0
00007C82 ED48                       		lsl.w	#6,d0
00007C84 0680 00FF D000             		addi.l	#$FFD000,d0
00007C8A 2440                       		movea.l	d0,a2
00007C8C 08AA 0003 0022             		bclr	#3,$22(a2)
00007C92 422A 0025                  		clr.b	$25(a2)
00007C96 0C2A 0004 0024             		cmpi.b	#4,$24(a2)
00007C9C 6600                       		bne.s	loc_74DC
00007C9E 552A 0024                  		subq.b	#2,$24(a2)
00007CA2                            
00007CA2                            loc_74DC:
00007CA2 3008                       		move.w	a0,d0
00007CA4 0440 D000                  		subi.w	#-$3000,d0
00007CA8 EC48                       		lsr.w	#6,d0
00007CAA 0240 007F                  		andi.w	#$7F,d0
00007CAE 1340 003D                  		move.b	d0,$3D(a1)
00007CB2 137C 0000 0026             		move.b	#0,$26(a1)
00007CB8 337C 0000 0012             		move.w	#0,$12(a1)
00007CBE 3369 0010 0014             		move.w	$10(a1),$14(a1)
00007CC4 0829 0001 0022             		btst	#1,$22(a1)
00007CCA 6700                       		beq.s	loc_7512
00007CCC 2F08                       		move.l	a0,-(sp)
00007CCE 2049                       		movea.l	a1,a0
00007CD0 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
00007CD6 205F                       		movea.l	(sp)+,a0
00007CD8                            
00007CD8                            loc_7512:
00007CD8 08E9 0003 0022             		bset	#3,$22(a1)
00007CDE 08E8 0003 0022             		bset	#3,$22(a0)
00007CE4                            
00007CE4                            locret_751E:
00007CE4 4E75                       		rts	
00007CE6                            ; End of function PlatformObject
00007CE6                            
00007CE6                            ; ---------------------------------------------------------------------------
00007CE6                            ; Sloped platform subroutine (GHZ collapsing ledges and	SLZ seesaws)
00007CE6                            ; ---------------------------------------------------------------------------
00007CE6                            
00007CE6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007CE6                            
00007CE6                            
00007CE6                            SlopeObject:				; XREF: Obj1A_Slope; Obj5E_Slope
00007CE6 43F8 D000                  		lea	($FFFFD000).w,a1
00007CEA 4A69 0012                  		tst.w	$12(a1)
00007CEE 6B00 FFF4                  		bmi.w	locret_751E
00007CF2 3029 0008                  		move.w	8(a1),d0
00007CF6 9068 0008                  		sub.w	8(a0),d0
00007CFA D041                       		add.w	d1,d0
00007CFC 6BE6                       		bmi.s	locret_751E
00007CFE D241                       		add.w	d1,d1
00007D00 B041                       		cmp.w	d1,d0
00007D02 64E0                       		bcc.s	locret_751E
00007D04 0828 0000 0001             		btst	#0,1(a0)
00007D0A 6700                       		beq.s	loc_754A
00007D0C 4640                       		not.w	d0
00007D0E D041                       		add.w	d1,d0
00007D10                            
00007D10                            loc_754A:
00007D10 E248                       		lsr.w	#1,d0
00007D12 7600                       		moveq	#0,d3
00007D14 1632 0000                  		move.b	(a2,d0.w),d3
00007D18 3028 000C                  		move.w	$C(a0),d0
00007D1C 9043                       		sub.w	d3,d0
00007D1E 6000 FF1A                  		bra.w	Platform3
00007D22                            ; End of function SlopeObject
00007D22                            
00007D22                            
00007D22                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007D22                            
00007D22                            
00007D22                            Obj15_Solid:				; XREF: Obj15_SetSolid
00007D22 43F8 D000                  		lea	($FFFFD000).w,a1
00007D26 4A69 0012                  		tst.w	$12(a1)
00007D2A 6B00 FFB8                  		bmi.w	locret_751E
00007D2E 3029 0008                  		move.w	8(a1),d0
00007D32 9068 0008                  		sub.w	8(a0),d0
00007D36 D041                       		add.w	d1,d0
00007D38 6B00 FFAA                  		bmi.w	locret_751E
00007D3C D241                       		add.w	d1,d1
00007D3E B041                       		cmp.w	d1,d0
00007D40 6400 FFA2                  		bcc.w	locret_751E
00007D44 3028 000C                  		move.w	$C(a0),d0
00007D48 9043                       		sub.w	d3,d0
00007D4A 6000 FEEE                  		bra.w	Platform3
00007D4E                            ; End of function Obj15_Solid
00007D4E                            
00007D4E                            ; ===========================================================================
00007D4E                            
00007D4E                            Obj11_Action2:				; XREF: Obj11_Index
00007D4E 6100                       		bsr.s	Obj11_WalkOff
00007D50 6100 0000                  		bsr.w	DisplaySprite
00007D54 6000 0000                  		bra.w	Obj11_ChkDel
00007D58                            
00007D58                            ; ---------------------------------------------------------------------------
00007D58                            ; Subroutine allowing Sonic to walk off a bridge
00007D58                            ; ---------------------------------------------------------------------------
00007D58                            
00007D58                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007D58                            
00007D58                            
00007D58                            Obj11_WalkOff:				; XREF: Obj11_Action2
00007D58 7200                       		moveq	#0,d1
00007D5A 1228 0028                  		move.b	$28(a0),d1
00007D5E E749                       		lsl.w	#3,d1
00007D60 3401                       		move.w	d1,d2
00007D62 5041                       		addq.w	#8,d1
00007D64 6100                       		bsr.s	ExitPlatform2
00007D66 6400                       		bcc.s	locret_75BE
00007D68 E848                       		lsr.w	#4,d0
00007D6A 1140 003F                  		move.b	d0,$3F(a0)
00007D6E 1028 003E                  		move.b	$3E(a0),d0
00007D72 0C00 0040                  		cmpi.b	#$40,d0
00007D76 6700                       		beq.s	loc_75B6
00007D78 5828 003E                  		addq.b	#4,$3E(a0)
00007D7C                            
00007D7C                            loc_75B6:
00007D7C 6100 0000                  		bsr.w	Obj11_Bend
00007D80 6100 0000                  		bsr.w	Obj11_MoveSonic
00007D84                            
00007D84                            locret_75BE:
00007D84 4E75                       		rts	
00007D86                            ; End of function Obj11_WalkOff
00007D86                            
00007D86                            ; ---------------------------------------------------------------------------
00007D86                            ; Subroutine allowing Sonic to walk or jump off	a platform
00007D86                            ; ---------------------------------------------------------------------------
00007D86                            
00007D86                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007D86                            
00007D86                            
00007D86                            ExitPlatform:
00007D86 3401                       		move.w	d1,d2
00007D88                            
00007D88                            ExitPlatform2:
00007D88 D442                       		add.w	d2,d2
00007D8A 43F8 D000                  		lea	($FFFFD000).w,a1
00007D8E 0829 0001 0022             		btst	#1,$22(a1)
00007D94 6600                       		bne.s	loc_75E0
00007D96 3029 0008                  		move.w	8(a1),d0
00007D9A 9068 0008                  		sub.w	8(a0),d0
00007D9E D041                       		add.w	d1,d0
00007DA0 6B00                       		bmi.s	loc_75E0
00007DA2 B042                       		cmp.w	d2,d0
00007DA4 6500                       		bcs.s	locret_75F2
00007DA6                            
00007DA6                            loc_75E0:
00007DA6 08A9 0003 0022             		bclr	#3,$22(a1)
00007DAC 117C 0002 0024             		move.b	#2,$24(a0)
00007DB2 08A8 0003 0022             		bclr	#3,$22(a0)
00007DB8                            
00007DB8                            locret_75F2:
00007DB8 4E75                       		rts	
00007DBA                            ; End of function ExitPlatform
00007DBA                            
00007DBA                            
00007DBA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007DBA                            
00007DBA                            
00007DBA                            Obj11_MoveSonic:			; XREF: Obj11_WalkOff
00007DBA 7000                       		moveq	#0,d0
00007DBC 1028 003F                  		move.b	$3F(a0),d0
00007DC0 1030 0029                  		move.b	$29(a0,d0.w),d0
00007DC4 ED48                       		lsl.w	#6,d0
00007DC6 0680 00FF D000             		addi.l	#$FFD000,d0
00007DCC 2440                       		movea.l	d0,a2
00007DCE 43F8 D000                  		lea	($FFFFD000).w,a1
00007DD2 302A 000C                  		move.w	$C(a2),d0
00007DD6 5140                       		subq.w	#8,d0
00007DD8 7200                       		moveq	#0,d1
00007DDA 1229 0016                  		move.b	$16(a1),d1
00007DDE 9041                       		sub.w	d1,d0
00007DE0 3340 000C                  		move.w	d0,$C(a1)	; change Sonic's position on y-axis
00007DE4 4E75                       		rts	
00007DE6                            ; End of function Obj11_MoveSonic
00007DE6                            
00007DE6                            
00007DE6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007DE6                            
00007DE6                            
00007DE6                            Obj11_Bend:				; XREF: Obj11_Action; Obj11_WalkOff
00007DE6 1028 003E                  		move.b	$3E(a0),d0
00007DEA 6100 AF80                  		bsr.w	CalcSine
00007DEE 3800                       		move.w	d0,d4
00007DF0 49F9 0000 0000             		lea	(Obj11_BendData2).l,a4
00007DF6 7000                       		moveq	#0,d0
00007DF8 1028 0028                  		move.b	$28(a0),d0
00007DFC E948                       		lsl.w	#4,d0
00007DFE 7600                       		moveq	#0,d3
00007E00 1628 003F                  		move.b	$3F(a0),d3
00007E04 3403                       		move.w	d3,d2
00007E06 D640                       		add.w	d0,d3
00007E08 7A00                       		moveq	#0,d5
00007E0A 4BF9 0000 0000             		lea	(Obj11_BendData).l,a5
00007E10 1A35 3000                  		move.b	(a5,d3.w),d5
00007E14 0243 000F                  		andi.w	#$F,d3
00007E18 E94B                       		lsl.w	#4,d3
00007E1A 47F4 3000                  		lea	(a4,d3.w),a3
00007E1E 45E8 0029                  		lea	$29(a0),a2
00007E22                            
00007E22                            loc_765C:
00007E22 7000                       		moveq	#0,d0
00007E24 101A                       		move.b	(a2)+,d0
00007E26 ED48                       		lsl.w	#6,d0
00007E28 0680 00FF D000             		addi.l	#$FFD000,d0
00007E2E 2240                       		movea.l	d0,a1
00007E30 7000                       		moveq	#0,d0
00007E32 101B                       		move.b	(a3)+,d0
00007E34 5240                       		addq.w	#1,d0
00007E36 C0C5                       		mulu.w	d5,d0
00007E38 C0C4                       		mulu.w	d4,d0
00007E3A 4840                       		swap	d0
00007E3C D069 003C                  		add.w	$3C(a1),d0
00007E40 3340 000C                  		move.w	d0,$C(a1)
00007E44 51CA FFDC                  		dbf	d2,loc_765C
00007E48 7000                       		moveq	#0,d0
00007E4A 1028 0028                  		move.b	$28(a0),d0
00007E4E 7600                       		moveq	#0,d3
00007E50 1628 003F                  		move.b	$3F(a0),d3
00007E54 5203                       		addq.b	#1,d3
00007E56 9600                       		sub.b	d0,d3
00007E58 4403                       		neg.b	d3
00007E5A 6B00                       		bmi.s	locret_76CA
00007E5C 3403                       		move.w	d3,d2
00007E5E E94B                       		lsl.w	#4,d3
00007E60 47F4 3000                  		lea	(a4,d3.w),a3
00007E64 D6C2                       		adda.w	d2,a3
00007E66 5342                       		subq.w	#1,d2
00007E68 6500                       		bcs.s	locret_76CA
00007E6A                            
00007E6A                            loc_76A4:
00007E6A 7000                       		moveq	#0,d0
00007E6C 101A                       		move.b	(a2)+,d0
00007E6E ED48                       		lsl.w	#6,d0
00007E70 0680 00FF D000             		addi.l	#$FFD000,d0
00007E76 2240                       		movea.l	d0,a1
00007E78 7000                       		moveq	#0,d0
00007E7A 1023                       		move.b	-(a3),d0
00007E7C 5240                       		addq.w	#1,d0
00007E7E C0C5                       		mulu.w	d5,d0
00007E80 C0C4                       		mulu.w	d4,d0
00007E82 4840                       		swap	d0
00007E84 D069 003C                  		add.w	$3C(a1),d0
00007E88 3340 000C                  		move.w	d0,$C(a1)
00007E8C 51CA FFDC                  		dbf	d2,loc_76A4
00007E90                            
00007E90                            locret_76CA:
00007E90 4E75                       		rts	
00007E92                            ; End of function Obj11_Bend
00007E92                            
00007E92                            ; ===========================================================================
00007E92                            ; ---------------------------------------------------------------------------
00007E92                            ; GHZ bridge-bending data
00007E92                            ; (Defines how the bridge bends	when Sonic walks across	it)
00007E92                            ; ---------------------------------------------------------------------------
00007E92                            Obj11_BendData:	incbin	misc\ghzbend1.bin
00007FA2                            		even
00007FA2                            Obj11_BendData2:incbin	misc\ghzbend2.bin
000080A2                            		even
000080A2                            
000080A2                            ; ===========================================================================
000080A2                            
000080A2                            Obj11_ChkDel:				; XREF: Obj11_Display; Obj11_Action2
000080A2 3028 0008                  		move.w	8(a0),d0
000080A6 0240 FF80                  		andi.w	#$FF80,d0
000080AA 3238 F700                  		move.w	($FFFFF700).w,d1
000080AE 0441 0080                  		subi.w	#$80,d1
000080B2 0241 FF80                  		andi.w	#$FF80,d1
000080B6 9041                       		sub.w	d1,d0
000080B8 0C40 0280                  		cmpi.w	#$280,d0
000080BC 6200 0000                  		bhi.w	Obj11_DelAll
000080C0 4E75                       		rts	
000080C2                            ; ===========================================================================
000080C2                            
000080C2                            Obj11_DelAll:				; XREF: Obj11_ChkDel
000080C2 7400                       		moveq	#0,d2
000080C4 45E8 0028                  		lea	$28(a0),a2	; load bridge length
000080C8 141A                       		move.b	(a2)+,d2	; move bridge length to	d2
000080CA 5302                       		subq.b	#1,d2		; subtract 1
000080CC 6500                       		bcs.s	Obj11_Delete
000080CE                            
000080CE                            Obj11_DelLoop:
000080CE 7000                       		moveq	#0,d0
000080D0 101A                       		move.b	(a2)+,d0
000080D2 ED48                       		lsl.w	#6,d0
000080D4 0680 00FF D000             		addi.l	#$FFD000,d0
000080DA 2240                       		movea.l	d0,a1
000080DC B048                       		cmp.w	a0,d0
000080DE 6700                       		beq.s	loc_791E
000080E0 6100 0000                  		bsr.w	DeleteObject2
000080E4                            
000080E4                            loc_791E:
000080E4 51CA FFE8                  		dbf	d2,Obj11_DelLoop ; repeat d2 times (bridge length)
000080E8                            
000080E8                            Obj11_Delete:
000080E8 6100 0000                  		bsr.w	DeleteObject
000080EC 4E75                       		rts	
000080EE                            ; ===========================================================================
000080EE                            
000080EE                            Obj11_Delete2:				; XREF: Obj11_Index
000080EE 6100 0000                  		bsr.w	DeleteObject
000080F2 4E75                       		rts	
000080F4                            ; ===========================================================================
000080F4                            
000080F4                            Obj11_Display2:				; XREF: Obj11_Index
000080F4 6100 0000                  		bsr.w	DisplaySprite
000080F8 4E75                       		rts	
000080FA                            ; ===========================================================================
000080FA                            ; ---------------------------------------------------------------------------
000080FA                            ; Sprite mappings - GHZ	bridge
000080FA                            ; ---------------------------------------------------------------------------
000080FA                            Map_obj11:
000080FA                            	include "_maps\obj11.asm"
000080FA                            ; ---------------------------------------------------------------------------
000080FA                            ; Sprite mappings - GHZ	bridge
000080FA                            ; ---------------------------------------------------------------------------
000080FA 0000 0000                  		dc.w byte_793A-Map_obj11, byte_7940-Map_obj11
000080FE 0000                       		dc.w byte_794B-Map_obj11
00008100 01                         byte_793A:	dc.b 1
00008101 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00008106 02                         byte_7940:	dc.b 2
00008107 F804 0004 F0               		dc.b $F8, 4, 0,	4, $F0
0000810C 000C 0006 F0               		dc.b 0,	$C, 0, 6, $F0
00008111 01                         byte_794B:	dc.b 1
00008112 FC04 0008 F8               		dc.b $FC, 4, 0,	8, $F8
00008118 00                         		even
00008118 00                         		even
00008118                            
00008118                            ; ===========================================================================
00008118                            ; ---------------------------------------------------------------------------
00008118                            ; Object 15 - swinging platforms (GHZ, MZ, SLZ)
00008118                            ;	    - spiked ball on a chain (SBZ)
00008118                            ; ---------------------------------------------------------------------------
00008118                            
00008118                            Obj15:					; XREF: Obj_Index
00008118 7000                       		moveq	#0,d0
0000811A 1028 0024                  		move.b	$24(a0),d0
0000811E 323B 0000                  		move.w	Obj15_Index(pc,d0.w),d1
00008122 4EFB 1000                  		jmp	Obj15_Index(pc,d1.w)
00008126                            ; ===========================================================================
00008126 0000 0000                  Obj15_Index:	dc.w Obj15_Main-Obj15_Index, Obj15_SetSolid-Obj15_Index
0000812A 0000 0000                  		dc.w Obj15_Action2-Obj15_Index,	Obj15_Delete-Obj15_Index
0000812E 0000 0000                  		dc.w Obj15_Delete-Obj15_Index, Obj15_Display-Obj15_Index
00008132 0000                       		dc.w Obj15_Action-Obj15_Index
00008134                            ; ===========================================================================
00008134                            
00008134                            Obj15_Main:				; XREF: Obj15_Index
00008134 5428 0024                  		addq.b	#2,$24(a0)
00008138 217C 0000 0000 0004        		move.l	#Map_obj15,4(a0) ; GHZ and MZ specific code
00008140 317C 4380 0002             		move.w	#$4380,2(a0)
00008146 117C 0004 0001             		move.b	#4,1(a0)
0000814C 117C 0003 0018             		move.b	#3,$18(a0)
00008152 117C 0018 0019             		move.b	#$18,$19(a0)
00008158 117C 0008 0016             		move.b	#8,$16(a0)
0000815E 3168 000C 0038             		move.w	$C(a0),$38(a0)
00008164 3168 0008 003A             		move.w	8(a0),$3A(a0)
0000816A 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00008170 6600                       		bne.s	Obj15_NotSLZ
00008172 217C 0000 0000 0004        		move.l	#Map_obj15a,4(a0) ; SLZ	specific code
0000817A 317C 43DC 0002             		move.w	#$43DC,2(a0)
00008180 117C 0020 0019             		move.b	#$20,$19(a0)
00008186 117C 0010 0016             		move.b	#$10,$16(a0)
0000818C 117C 0099 0020             		move.b	#$99,$20(a0)
00008192                            
00008192                            Obj15_NotSLZ:
00008192 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00008198 6600                       		bne.s	Obj15_SetLength
0000819A 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0) ; SBZ	specific code
000081A2 317C 0391 0002             		move.w	#$391,2(a0)
000081A8 117C 0018 0019             		move.b	#$18,$19(a0)
000081AE 117C 0018 0016             		move.b	#$18,$16(a0)
000081B4 117C 0086 0020             		move.b	#$86,$20(a0)
000081BA 117C 000C 0024             		move.b	#$C,$24(a0)
000081C0                            
000081C0                            Obj15_SetLength:
000081C0 1810                       		move.b	0(a0),d4
000081C2 7200                       		moveq	#0,d1
000081C4 45E8 0028                  		lea	$28(a0),a2	; move chain length to a2
000081C8 1212                       		move.b	(a2),d1		; move a2 to d1
000081CA 3F01                       		move.w	d1,-(sp)
000081CC 0241 000F                  		andi.w	#$F,d1
000081D0 14FC 0000                  		move.b	#0,(a2)+
000081D4 3601                       		move.w	d1,d3
000081D6 E94B                       		lsl.w	#4,d3
000081D8 5003                       		addq.b	#8,d3
000081DA 1143 003C                  		move.b	d3,$3C(a0)
000081DE 5103                       		subq.b	#8,d3
000081E0 4A28 001A                  		tst.b	$1A(a0)
000081E4 6700                       		beq.s	Obj15_MakeChain
000081E6 5003                       		addq.b	#8,d3
000081E8 5341                       		subq.w	#1,d1
000081EA                            
000081EA                            Obj15_MakeChain:
000081EA 6100 0000                  		bsr.w	SingleObjLoad
000081EE 6600                       		bne.s	loc_7A92
000081F0 5228 0028                  		addq.b	#1,$28(a0)
000081F4 3A09                       		move.w	a1,d5
000081F6 0445 D000                  		subi.w	#-$3000,d5
000081FA EC4D                       		lsr.w	#6,d5
000081FC 0245 007F                  		andi.w	#$7F,d5
00008200 14C5                       		move.b	d5,(a2)+
00008202 137C 000A 0024             		move.b	#$A,$24(a1)
00008208 1284                       		move.b	d4,0(a1)	; load swinging	object
0000820A 2368 0004 0004             		move.l	4(a0),4(a1)
00008210 3368 0002 0002             		move.w	2(a0),2(a1)
00008216 08A9 0006 0002             		bclr	#6,2(a1)
0000821C 137C 0004 0001             		move.b	#4,1(a1)
00008222 137C 0004 0018             		move.b	#4,$18(a1)
00008228 137C 0008 0019             		move.b	#8,$19(a1)
0000822E 137C 0001 001A             		move.b	#1,$1A(a1)
00008234 1343 003C                  		move.b	d3,$3C(a1)
00008238 0403 0010                  		subi.b	#$10,d3
0000823C 6400                       		bcc.s	loc_7A8E
0000823E 137C 0002 001A             		move.b	#2,$1A(a1)
00008244 137C 0003 0018             		move.b	#3,$18(a1)
0000824A 08E9 0006 0002             		bset	#6,2(a1)
00008250                            
00008250                            loc_7A8E:
00008250 51C9 FF98                  		dbf	d1,Obj15_MakeChain ; repeat d1 times (chain length)
00008254                            
00008254                            loc_7A92:
00008254 3A08                       		move.w	a0,d5
00008256 0445 D000                  		subi.w	#-$3000,d5
0000825A EC4D                       		lsr.w	#6,d5
0000825C 0245 007F                  		andi.w	#$7F,d5
00008260 14C5                       		move.b	d5,(a2)+
00008262 317C 4080 0026             		move.w	#$4080,$26(a0)
00008268 317C FE00 003E             		move.w	#-$200,$3E(a0)
0000826E 321F                       		move.w	(sp)+,d1
00008270 0801 0004                  		btst	#4,d1		; is object type $8X ?
00008274 6700                       		beq.s	loc_7AD4	; if not, branch
00008276 217C 0000 0000 0004        		move.l	#Map_obj48,4(a0) ; use GHZ ball	mappings
0000827E 317C 43AA 0002             		move.w	#$43AA,2(a0)
00008284 117C 0001 001A             		move.b	#1,$1A(a0)
0000828A 117C 0002 0018             		move.b	#2,$18(a0)
00008290 117C 0081 0020             		move.b	#$81,$20(a0)	; make object hurt when	touched
00008296                            
00008296                            loc_7AD4:
00008296 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; is zone SBZ?
0000829C 6700                       		beq.s	Obj15_Action	; if yes, branch
0000829E                            
0000829E                            Obj15_SetSolid:				; XREF: Obj15_Index
0000829E 7200                       		moveq	#0,d1
000082A0 1228 0019                  		move.b	$19(a0),d1
000082A4 7600                       		moveq	#0,d3
000082A6 1628 0016                  		move.b	$16(a0),d3
000082AA 6100 FA76                  		bsr.w	Obj15_Solid
000082AE                            
000082AE                            Obj15_Action:				; XREF: Obj15_Index
000082AE 6100 0000                  		bsr.w	Obj15_Move
000082B2 6100 0000                  		bsr.w	DisplaySprite
000082B6 6000 0000                  		bra.w	Obj15_ChkDel
000082BA                            ; ===========================================================================
000082BA                            
000082BA                            Obj15_Action2:				; XREF: Obj15_Index
000082BA 7200                       		moveq	#0,d1
000082BC 1228 0019                  		move.b	$19(a0),d1
000082C0 6100 FAC4                  		bsr.w	ExitPlatform
000082C4 3F28 0008                  		move.w	8(a0),-(sp)
000082C8 6100 0000                  		bsr.w	Obj15_Move
000082CC 341F                       		move.w	(sp)+,d2
000082CE 7600                       		moveq	#0,d3
000082D0 1628 0016                  		move.b	$16(a0),d3
000082D4 5203                       		addq.b	#1,d3
000082D6 6100 0000                  		bsr.w	MvSonicOnPtfm
000082DA 6100 0000                  		bsr.w	DisplaySprite
000082DE 6000 0000                  		bra.w	Obj15_ChkDel
000082E2                            
000082E2 4E75                       		rts
000082E4                            
000082E4                            ; ---------------------------------------------------------------------------
000082E4                            ; Subroutine to	change Sonic's position with a platform
000082E4                            ; ---------------------------------------------------------------------------
000082E4                            
000082E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000082E4                            
000082E4                            
000082E4                            MvSonicOnPtfm:
000082E4 43F8 D000                  		lea	($FFFFD000).w,a1
000082E8 3028 000C                  		move.w	$C(a0),d0
000082EC 9043                       		sub.w	d3,d0
000082EE 6000                       		bra.s	MvSonic2
000082F0                            ; End of function MvSonicOnPtfm
000082F0                            
000082F0                            ; ---------------------------------------------------------------------------
000082F0                            ; Subroutine to	change Sonic's position with a platform
000082F0                            ; ---------------------------------------------------------------------------
000082F0                            
000082F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000082F0                            
000082F0                            
000082F0                            MvSonicOnPtfm2:
000082F0 43F8 D000                  		lea	($FFFFD000).w,a1
000082F4 3028 000C                  		move.w	$C(a0),d0
000082F8 0440 0009                  		subi.w	#9,d0
000082FC                            
000082FC                            MvSonic2:
000082FC 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00008300 6B00                       		bmi.s	locret_7B62
00008302 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00008308 6400                       		bcc.s	locret_7B62
0000830A 4A78 FE08                  		tst.w	($FFFFFE08).w
0000830E 6600                       		bne.s	locret_7B62
00008310 7200                       		moveq	#0,d1
00008312 1229 0016                  		move.b	$16(a1),d1
00008316 9041                       		sub.w	d1,d0
00008318 3340 000C                  		move.w	d0,$C(a1)
0000831C 9468 0008                  		sub.w	8(a0),d2
00008320 9569 0008                  		sub.w	d2,8(a1)
00008324                            
00008324                            locret_7B62:
00008324 4E75                       		rts	
00008326                            ; End of function MvSonicOnPtfm2
00008326                            
00008326                            
00008326                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008326                            
00008326                            
00008326                            Obj15_Move:				; XREF: Obj15_Action; Obj15_Action2
00008326 1038 FE78                  		move.b	($FFFFFE78).w,d0
0000832A 323C 0080                  		move.w	#$80,d1
0000832E 0828 0000 0022             		btst	#0,$22(a0)
00008334 6700                       		beq.s	loc_7B78
00008336 4440                       		neg.w	d0
00008338 D041                       		add.w	d1,d0
0000833A                            
0000833A                            loc_7B78:
0000833A 6000                       		bra.s	Obj15_Move2
0000833C                            ; End of function Obj15_Move
0000833C                            
0000833C                            
0000833C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000833C                            
0000833C                            
0000833C                            Obj48_Move:				; XREF: Obj48_Display2
0000833C 4A28 003D                  		tst.b	$3D(a0)
00008340 6600                       		bne.s	loc_7B9C
00008342 3028 003E                  		move.w	$3E(a0),d0
00008346 5040                       		addq.w	#8,d0
00008348 3140 003E                  		move.w	d0,$3E(a0)
0000834C D168 0026                  		add.w	d0,$26(a0)
00008350 0C40 0200                  		cmpi.w	#$200,d0
00008354 6600                       		bne.s	loc_7BB6
00008356 117C 0001 003D             		move.b	#1,$3D(a0)
0000835C 6000                       		bra.s	loc_7BB6
0000835E                            ; ===========================================================================
0000835E                            
0000835E                            loc_7B9C:
0000835E 3028 003E                  		move.w	$3E(a0),d0
00008362 5140                       		subq.w	#8,d0
00008364 3140 003E                  		move.w	d0,$3E(a0)
00008368 D168 0026                  		add.w	d0,$26(a0)
0000836C 0C40 FE00                  		cmpi.w	#-$200,d0
00008370 6600                       		bne.s	loc_7BB6
00008372 117C 0000 003D             		move.b	#0,$3D(a0)
00008378                            
00008378                            loc_7BB6:
00008378 1028 0026                  		move.b	$26(a0),d0
0000837C                            ; End of function Obj48_Move
0000837C                            
0000837C                            
0000837C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000837C                            
0000837C                            
0000837C                            Obj15_Move2:				; XREF: Obj15_Move; Obj48_Display
0000837C 6100 A9EE                  		bsr.w	CalcSine
00008380 3428 0038                  		move.w	$38(a0),d2
00008384 3628 003A                  		move.w	$3A(a0),d3
00008388 45E8 0028                  		lea	$28(a0),a2
0000838C 7C00                       		moveq	#0,d6
0000838E 1C1A                       		move.b	(a2)+,d6
00008390                            
00008390                            loc_7BCE:
00008390 7800                       		moveq	#0,d4
00008392 181A                       		move.b	(a2)+,d4
00008394 ED4C                       		lsl.w	#6,d4
00008396 0684 00FF D000             		addi.l	#$FFD000,d4
0000839C 2244                       		movea.l	d4,a1
0000839E 7800                       		moveq	#0,d4
000083A0 1829 003C                  		move.b	$3C(a1),d4
000083A4 2A04                       		move.l	d4,d5
000083A6 C9C0                       		muls.w	d0,d4
000083A8 E084                       		asr.l	#8,d4
000083AA CBC1                       		muls.w	d1,d5
000083AC E085                       		asr.l	#8,d5
000083AE D842                       		add.w	d2,d4
000083B0 DA43                       		add.w	d3,d5
000083B2 3344 000C                  		move.w	d4,$C(a1)
000083B6 3345 0008                  		move.w	d5,8(a1)
000083BA 51CE FFD4                  		dbf	d6,loc_7BCE
000083BE 4E75                       		rts	
000083C0                            ; End of function Obj15_Move2
000083C0                            
000083C0                            ; ===========================================================================
000083C0                            
000083C0                            Obj15_ChkDel:				; XREF: Obj15_Action; Obj15_Action2
000083C0 3028 003A                  		move.w	$3A(a0),d0
000083C4 0240 FF80                  		andi.w	#$FF80,d0
000083C8 3238 F700                  		move.w	($FFFFF700).w,d1
000083CC 0441 0080                  		subi.w	#$80,d1
000083D0 0241 FF80                  		andi.w	#$FF80,d1
000083D4 9041                       		sub.w	d1,d0
000083D6 0C40 0280                  		cmpi.w	#$280,d0
000083DA 6200 0000                  		bhi.w	Obj15_DelAll
000083DE 4E75                       		rts	
000083E0                            ; ===========================================================================
000083E0                            
000083E0                            Obj15_DelAll:				; XREF: Obj15_ChkDel
000083E0 7400                       		moveq	#0,d2
000083E2 45E8 0028                  		lea	$28(a0),a2
000083E6 141A                       		move.b	(a2)+,d2
000083E8                            
000083E8                            Obj15_DelLoop:
000083E8 7000                       		moveq	#0,d0
000083EA 101A                       		move.b	(a2)+,d0
000083EC ED48                       		lsl.w	#6,d0
000083EE 0680 00FF D000             		addi.l	#$FFD000,d0
000083F4 2240                       		movea.l	d0,a1
000083F6 6100 0000                  		bsr.w	DeleteObject2
000083FA 51CA FFEC                  		dbf	d2,Obj15_DelLoop ; repeat for length of	chain
000083FE 4E75                       		rts	
00008400                            ; ===========================================================================
00008400                            
00008400                            Obj15_Delete:				; XREF: Obj15_Index
00008400 6100 0000                  		bsr.w	DeleteObject
00008404 4E75                       		rts	
00008406                            ; ===========================================================================
00008406                            
00008406                            Obj15_Display:				; XREF: Obj15_Index
00008406 6000 0000                  		bra.w	DisplaySprite
0000840A                            ; ===========================================================================
0000840A                            ; ---------------------------------------------------------------------------
0000840A                            ; Sprite mappings - GHZ	and MZ swinging	platforms
0000840A                            ; ---------------------------------------------------------------------------
0000840A                            Map_obj15:
0000840A                            	include "_maps\obj15ghz.asm"
0000840A                            ; ---------------------------------------------------------------------------
0000840A                            ; Sprite mappings - GHZ	and MZ swinging	platforms
0000840A                            ; ---------------------------------------------------------------------------
0000840A 0000                       		dc.w byte_7C4E-Map_obj15
0000840C 0000                       		dc.w byte_7C59-Map_obj15
0000840E 0000                       		dc.w byte_7C5F-Map_obj15
00008410 02                         byte_7C4E:	dc.b 2
00008411 F809 0004 E8               		dc.b $F8, 9, 0,	4, $E8
00008416 F809 0004 00               		dc.b $F8, 9, 0,	4, 0
0000841B 01                         byte_7C59:	dc.b 1
0000841C F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00008421 01                         byte_7C5F:	dc.b 1
00008422 F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
00008428 00                         		even
00008428 00                         		even
00008428                            
00008428                            ; ---------------------------------------------------------------------------
00008428                            ; Sprite mappings - SLZ	swinging platforms
00008428                            ; ---------------------------------------------------------------------------
00008428                            Map_obj15a:
00008428                            	include "_maps\obj15slz.asm"
00008428                            ; ---------------------------------------------------------------------------
00008428                            ; Sprite mappings - SLZ	swinging platforms
00008428                            ; ---------------------------------------------------------------------------
00008428 0000                       		dc.w byte_7C6C-Map_obj15a
0000842A 0000                       		dc.w byte_7C95-Map_obj15a
0000842C 0000                       		dc.w byte_7C9B-Map_obj15a
0000842E 08                         byte_7C6C:	dc.b 8
0000842F F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
00008434 F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
00008439 F005 0014 D0               		dc.b $F0, 5, 0,	$14, $D0
0000843E F005 0814 20               		dc.b $F0, 5, 8,	$14, $20
00008443 1004 0018 E0               		dc.b $10, 4, 0,	$18, $E0
00008448 1004 0818 10               		dc.b $10, 4, 8,	$18, $10
0000844D 1001 001A F8               		dc.b $10, 1, 0,	$1A, $F8
00008452 1001 081A 00               		dc.b $10, 1, 8,	$1A, 0
00008457 01                         byte_7C95:	dc.b 1
00008458 F805 4000 F8               		dc.b $F8, 5, $40, 0, $F8
0000845D 01                         byte_7C9B:	dc.b 1
0000845E F805 001C F8               		dc.b $F8, 5, 0,	$1C, $F8
00008464 00                         		even
00008464 00                         		even
00008464                            
00008464                            ; ===========================================================================
00008464                            ; ---------------------------------------------------------------------------
00008464                            ; Object 17 - helix of spikes on a pole	(GHZ)
00008464                            ; ---------------------------------------------------------------------------
00008464                            
00008464                            Obj17:					; XREF: Obj_Index
00008464 7000                       		moveq	#0,d0
00008466 1028 0024                  		move.b	$24(a0),d0
0000846A 323B 0000                  		move.w	Obj17_Index(pc,d0.w),d1
0000846E 4EFB 1000                  		jmp	Obj17_Index(pc,d1.w)
00008472                            ; ===========================================================================
00008472 0000                       Obj17_Index:	dc.w Obj17_Main-Obj17_Index
00008474 0000                       		dc.w Obj17_Action-Obj17_Index
00008476 0000                       		dc.w Obj17_Action-Obj17_Index
00008478 0000                       		dc.w Obj17_Delete-Obj17_Index
0000847A 0000                       		dc.w Obj17_Display-Obj17_Index
0000847C                            ; ===========================================================================
0000847C                            
0000847C                            Obj17_Main:				; XREF: Obj17_Index
0000847C 5428 0024                  		addq.b	#2,$24(a0)
00008480 217C 0000 0000 0004        		move.l	#Map_obj17,4(a0)
00008488 317C 4398 0002             		move.w	#$4398,2(a0)
0000848E 117C 0007 0022             		move.b	#7,$22(a0)
00008494 117C 0004 0001             		move.b	#4,1(a0)
0000849A 117C 0003 0018             		move.b	#3,$18(a0)
000084A0 117C 0008 0019             		move.b	#8,$19(a0)
000084A6 3428 000C                  		move.w	$C(a0),d2
000084AA 3628 0008                  		move.w	8(a0),d3
000084AE 1810                       		move.b	0(a0),d4
000084B0 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
000084B4 7200                       		moveq	#0,d1
000084B6 1212                       		move.b	(a2),d1		; move a2 to d1
000084B8 14FC 0000                  		move.b	#0,(a2)+
000084BC 3001                       		move.w	d1,d0
000084BE E248                       		lsr.w	#1,d0
000084C0 E948                       		lsl.w	#4,d0
000084C2 9640                       		sub.w	d0,d3
000084C4 5501                       		subq.b	#2,d1
000084C6 6500                       		bcs.s	Obj17_Action
000084C8 7C00                       		moveq	#0,d6
000084CA                            
000084CA                            Obj17_MakeHelix:
000084CA 6100 0000                  		bsr.w	SingleObjLoad
000084CE 6600                       		bne.s	Obj17_Action
000084D0 5228 0028                  		addq.b	#1,$28(a0)
000084D4 3A09                       		move.w	a1,d5
000084D6 0445 D000                  		subi.w	#$D000,d5
000084DA EC4D                       		lsr.w	#6,d5
000084DC 0245 007F                  		andi.w	#$7F,d5
000084E0 14C5                       		move.b	d5,(a2)+
000084E2 137C 0008 0024             		move.b	#8,$24(a1)
000084E8 1284                       		move.b	d4,0(a1)
000084EA 3342 000C                  		move.w	d2,$C(a1)
000084EE 3343 0008                  		move.w	d3,8(a1)
000084F2 2368 0004 0004             		move.l	4(a0),4(a1)
000084F8 337C 4398 0002             		move.w	#$4398,2(a1)
000084FE 137C 0004 0001             		move.b	#4,1(a1)
00008504 137C 0003 0018             		move.b	#3,$18(a1)
0000850A 137C 0008 0019             		move.b	#8,$19(a1)
00008510 1346 003E                  		move.b	d6,$3E(a1)
00008514 5206                       		addq.b	#1,d6
00008516 0206 0007                  		andi.b	#7,d6
0000851A 0643 0010                  		addi.w	#$10,d3
0000851E B668 0008                  		cmp.w	8(a0),d3
00008522 6600                       		bne.s	loc_7D78
00008524 1146 003E                  		move.b	d6,$3E(a0)
00008528 5206                       		addq.b	#1,d6
0000852A 0206 0007                  		andi.b	#7,d6
0000852E 0643 0010                  		addi.w	#$10,d3
00008532 5228 0028                  		addq.b	#1,$28(a0)
00008536                            
00008536                            loc_7D78:
00008536 51C9 FF92                  		dbf	d1,Obj17_MakeHelix ; repeat d1 times (helix length)
0000853A                            
0000853A                            Obj17_Action:				; XREF: Obj17_Index
0000853A 6100 0000                  		bsr.w	Obj17_RotateSpikes
0000853E 6100 0000                  		bsr.w	DisplaySprite
00008542 6000 0000                  		bra.w	Obj17_ChkDel
00008546                            
00008546                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008546                            
00008546                            
00008546                            Obj17_RotateSpikes:			; XREF: Obj17_Action; Obj17_Display
00008546 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
0000854A 117C 0000 0020             		move.b	#0,$20(a0)	; make object harmless
00008550 D028 003E                  		add.b	$3E(a0),d0
00008554 0200 0007                  		andi.b	#7,d0
00008558 1140 001A                  		move.b	d0,$1A(a0)	; change current frame
0000855C 6600                       		bne.s	locret_7DA6
0000855E 117C 0084 0020             		move.b	#$84,$20(a0)	; make object harmful
00008564                            
00008564                            locret_7DA6:
00008564 4E75                       		rts	
00008566                            ; End of function Obj17_RotateSpikes
00008566                            
00008566                            ; ===========================================================================
00008566                            
00008566                            Obj17_ChkDel:				; XREF: Obj17_Action
00008566 3028 0008                  		move.w	8(a0),d0
0000856A 0240 FF80                  		andi.w	#$FF80,d0
0000856E 3238 F700                  		move.w	($FFFFF700).w,d1
00008572 0441 0080                  		subi.w	#$80,d1
00008576 0241 FF80                  		andi.w	#$FF80,d1
0000857A 9041                       		sub.w	d1,d0
0000857C 0C40 0280                  		cmpi.w	#$280,d0
00008580 6200 0000                  		bhi.w	Obj17_DelAll
00008584 4E75                       		rts	
00008586                            ; ===========================================================================
00008586                            
00008586                            Obj17_DelAll:				; XREF: Obj17_ChkDel
00008586 7400                       		moveq	#0,d2
00008588 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
0000858C 141A                       		move.b	(a2)+,d2	; move a2 to d2
0000858E 5502                       		subq.b	#2,d2
00008590 6500                       		bcs.s	Obj17_Delete
00008592                            
00008592                            Obj17_DelLoop:
00008592 7000                       		moveq	#0,d0
00008594 101A                       		move.b	(a2)+,d0
00008596 ED48                       		lsl.w	#6,d0
00008598 0680 00FF D000             		addi.l	#$FFD000,d0
0000859E 2240                       		movea.l	d0,a1
000085A0 6100 0000                  		bsr.w	DeleteObject2	; delete object
000085A4 51CA FFEC                  		dbf	d2,Obj17_DelLoop ; repeat d2 times (helix length)
000085A8                            
000085A8                            Obj17_Delete:				; XREF: Obj17_Index
000085A8 6100 0000                  		bsr.w	DeleteObject
000085AC 4E75                       		rts	
000085AE                            ; ===========================================================================
000085AE                            
000085AE                            Obj17_Display:				; XREF: Obj17_Index
000085AE 6100 FF96                  		bsr.w	Obj17_RotateSpikes
000085B2 6000 0000                  		bra.w	DisplaySprite
000085B6                            ; ===========================================================================
000085B6                            ; ---------------------------------------------------------------------------
000085B6                            ; Sprite mappings - helix of spikes on a pole (GHZ)
000085B6                            ; ---------------------------------------------------------------------------
000085B6                            Map_obj17:
000085B6                            	include "_maps\obj17.asm"
000085B6                            ; ---------------------------------------------------------------------------
000085B6                            ; Sprite mappings - helix of spikes on a pole (GHZ)
000085B6                            ; ---------------------------------------------------------------------------
000085B6 0000 0000                  		dc.w byte_7E08-Map_obj17, byte_7E0E-Map_obj17
000085BA 0000 0000                  		dc.w byte_7E14-Map_obj17, byte_7E1A-Map_obj17
000085BE 0000 0000                  		dc.w byte_7E20-Map_obj17, byte_7E26-Map_obj17
000085C2 0000 0000                  		dc.w byte_7E2D+1-Map_obj17, byte_7E2C-Map_obj17
000085C6 01                         byte_7E08:	dc.b 1
000085C7 F001 0000 FC               		dc.b $F0, 1, 0,	0, $FC
000085CC 01                         byte_7E0E:	dc.b 1
000085CD F505 0002 F8               		dc.b $F5, 5, 0,	2, $F8
000085D2 01                         byte_7E14:	dc.b 1
000085D3 F805 0006 F8               		dc.b $F8, 5, 0,	6, $F8
000085D8 01                         byte_7E1A:	dc.b 1
000085D9 FB05 000A F8               		dc.b $FB, 5, 0,	$A, $F8
000085DE 01                         byte_7E20:	dc.b 1
000085DF 0001 000E FC               		dc.b 0,	1, 0, $E, $FC
000085E4 01                         byte_7E26:	dc.b 1
000085E5 0400 0010 FD               		dc.b 4,	0, 0, $10, $FD
000085EA 01                         byte_7E2C:	dc.b 1
000085EB F400 0011 FD               byte_7E2D:	dc.b $F4, 0, 0,	$11, $FD
000085F0                            		even
000085F0                            		even
000085F0                            
000085F0                            ; ===========================================================================
000085F0                            ; ---------------------------------------------------------------------------
000085F0                            ; Object 18 - platforms	(GHZ, SYZ, SLZ)
000085F0                            ; ---------------------------------------------------------------------------
000085F0                            
000085F0                            Obj18:					; XREF: Obj_Index
000085F0 7000                       		moveq	#0,d0
000085F2 1028 0024                  		move.b	$24(a0),d0
000085F6 323B 0000                  		move.w	Obj18_Index(pc,d0.w),d1
000085FA 4EFB 1000                  		jmp	Obj18_Index(pc,d1.w)
000085FE                            ; ===========================================================================
000085FE 0000                       Obj18_Index:	dc.w Obj18_Main-Obj18_Index
00008600 0000                       		dc.w Obj18_Solid-Obj18_Index
00008602 0000                       		dc.w Obj18_Action2-Obj18_Index
00008604 0000                       		dc.w Obj18_Delete-Obj18_Index
00008606 0000                       		dc.w Obj18_Action-Obj18_Index
00008608                            ; ===========================================================================
00008608                            
00008608                            Obj18_Main:				; XREF: Obj18_Index
00008608 5428 0024                  		addq.b	#2,$24(a0)
0000860C 317C 4000 0002             		move.w	#$4000,2(a0)
00008612 217C 0000 0000 0004        		move.l	#Map_obj18,4(a0)
0000861A 117C 0020 0019             		move.b	#$20,$19(a0)
00008620 0C38 0004 FE10             		cmpi.b	#4,($FFFFFE10).w ; check if level is SYZ
00008626 6600                       		bne.s	Obj18_NotSYZ
00008628 217C 0000 0000 0004        		move.l	#Map_obj18a,4(a0) ; SYZ	specific code
00008630 117C 0020 0019             		move.b	#$20,$19(a0)
00008636                            
00008636                            Obj18_NotSYZ:
00008636 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
0000863C 6600                       		bne.s	Obj18_NotSLZ
0000863E 217C 0000 0000 0004        		move.l	#Map_obj18b,4(a0) ; SLZ	specific code
00008646 117C 0020 0019             		move.b	#$20,$19(a0)
0000864C 317C 4000 0002             		move.w	#$4000,2(a0)
00008652 117C 0003 0028             		move.b	#3,$28(a0)
00008658                            
00008658                            Obj18_NotSLZ:
00008658 117C 0004 0001             		move.b	#4,1(a0)
0000865E 117C 0004 0018             		move.b	#4,$18(a0)
00008664 3168 000C 002C             		move.w	$C(a0),$2C(a0)
0000866A 3168 000C 0034             		move.w	$C(a0),$34(a0)
00008670 3168 0008 0032             		move.w	8(a0),$32(a0)
00008676 317C 0080 0026             		move.w	#$80,$26(a0)
0000867C 7200                       		moveq	#0,d1
0000867E 1028 0028                  		move.b	$28(a0),d0
00008682 0C00 000A                  		cmpi.b	#$A,d0		; is object type $A (large platform)?
00008686 6600                       		bne.s	Obj18_SetFrame	; if not, branch
00008688 5201                       		addq.b	#1,d1		; use frame #1
0000868A 117C 0020 0019             		move.b	#$20,$19(a0)	; set width
00008690                            
00008690                            Obj18_SetFrame:
00008690 1141 001A                  		move.b	d1,$1A(a0)	; set frame to d1
00008694                            
00008694                            Obj18_Solid:				; XREF: Obj18_Index
00008694 4A28 0038                  		tst.b	$38(a0)
00008698 6700                       		beq.s	loc_7EE0
0000869A 5928 0038                  		subq.b	#4,$38(a0)
0000869E                            
0000869E                            loc_7EE0:
0000869E 7200                       		moveq	#0,d1
000086A0 1228 0019                  		move.b	$19(a0),d1
000086A4 6100 F56C                  		bsr.w	PlatformObject
000086A8                            
000086A8                            Obj18_Action:				; XREF: Obj18_Index
000086A8 6100 0000                  		bsr.w	Obj18_Move
000086AC 6100 0000                  		bsr.w	Obj18_Nudge
000086B0 6100 0000                  		bsr.w	DisplaySprite
000086B4 6000 0000                  		bra.w	Obj18_ChkDel
000086B8                            ; ===========================================================================
000086B8                            
000086B8                            Obj18_Action2:				; XREF: Obj18_Index
000086B8 0C28 0040 0038             		cmpi.b	#$40,$38(a0)
000086BE 6700                       		beq.s	loc_7F06
000086C0 5828 0038                  		addq.b	#4,$38(a0)
000086C4                            
000086C4                            loc_7F06:
000086C4 7200                       		moveq	#0,d1
000086C6 1228 0019                  		move.b	$19(a0),d1
000086CA 6100 F6BA                  		bsr.w	ExitPlatform
000086CE 3F28 0008                  		move.w	8(a0),-(sp)
000086D2 6100 0000                  		bsr.w	Obj18_Move
000086D6 6100 0000                  		bsr.w	Obj18_Nudge
000086DA 341F                       		move.w	(sp)+,d2
000086DC 6100 FC12                  		bsr.w	MvSonicOnPtfm2
000086E0 6100 0000                  		bsr.w	DisplaySprite
000086E4 6000 0000                  		bra.w	Obj18_ChkDel
000086E8                            
000086E8 4E75                       		rts
000086EA                            
000086EA                            ; ---------------------------------------------------------------------------
000086EA                            ; Subroutine to	move platform slightly when you	stand on it
000086EA                            ; ---------------------------------------------------------------------------
000086EA                            
000086EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000086EA                            
000086EA                            
000086EA                            Obj18_Nudge:				; XREF: Obj18_Action; Obj18_Action2
000086EA 1028 0038                  		move.b	$38(a0),d0
000086EE 6100 A67C                  		bsr.w	CalcSine
000086F2 323C 0400                  		move.w	#$400,d1
000086F6 C1C1                       		muls.w	d1,d0
000086F8 4840                       		swap	d0
000086FA D068 002C                  		add.w	$2C(a0),d0
000086FE 3140 000C                  		move.w	d0,$C(a0)
00008702 4E75                       		rts	
00008704                            ; End of function Obj18_Nudge
00008704                            
00008704                            ; ---------------------------------------------------------------------------
00008704                            ; Subroutine to	move platforms
00008704                            ; ---------------------------------------------------------------------------
00008704                            
00008704                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008704                            
00008704                            
00008704                            Obj18_Move:				; XREF: Obj18_Action; Obj18_Action2
00008704 7000                       		moveq	#0,d0
00008706 1028 0028                  		move.b	$28(a0),d0
0000870A 0240 000F                  		andi.w	#$F,d0
0000870E D040                       		add.w	d0,d0
00008710 323B 0000                  		move.w	Obj18_TypeIndex(pc,d0.w),d1
00008714 4EFB 1000                  		jmp	Obj18_TypeIndex(pc,d1.w)
00008718                            ; End of function Obj18_Move
00008718                            
00008718                            ; ===========================================================================
00008718 0000 0000                  Obj18_TypeIndex:dc.w Obj18_Type00-Obj18_TypeIndex, Obj18_Type01-Obj18_TypeIndex
0000871C 0000 0000                  		dc.w Obj18_Type02-Obj18_TypeIndex, Obj18_Type03-Obj18_TypeIndex
00008720 0000 0000                  		dc.w Obj18_Type04-Obj18_TypeIndex, Obj18_Type05-Obj18_TypeIndex
00008724 0000 0000                  		dc.w Obj18_Type06-Obj18_TypeIndex, Obj18_Type07-Obj18_TypeIndex
00008728 0000 0000                  		dc.w Obj18_Type08-Obj18_TypeIndex, Obj18_Type00-Obj18_TypeIndex
0000872C 0000 0000                  		dc.w Obj18_Type0A-Obj18_TypeIndex, Obj18_Type0B-Obj18_TypeIndex
00008730 0000                       		dc.w Obj18_Type0C-Obj18_TypeIndex
00008732                            ; ===========================================================================
00008732                            
00008732                            Obj18_Type00:
00008732 4E75                       		rts			; platform 00 doesn't move
00008734                            ; ===========================================================================
00008734                            
00008734                            Obj18_Type05:
00008734 3028 0032                  		move.w	$32(a0),d0
00008738 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
0000873C 4401                       		neg.b	d1		; reverse platform-motion
0000873E 0601 0040                  		addi.b	#$40,d1
00008742 6000                       		bra.s	Obj18_01_Move
00008744                            ; ===========================================================================
00008744                            
00008744                            Obj18_Type01:
00008744 3028 0032                  		move.w	$32(a0),d0
00008748 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
0000874C 0401 0040                  		subi.b	#$40,d1
00008750                            
00008750                            Obj18_01_Move:
00008750 4881                       		ext.w	d1
00008752 D041                       		add.w	d1,d0
00008754 3140 0008                  		move.w	d0,8(a0)	; change position on x-axis
00008758 6000 0000                  		bra.w	Obj18_ChgMotion
0000875C                            ; ===========================================================================
0000875C                            
0000875C                            Obj18_Type0C:
0000875C 3028 0034                  		move.w	$34(a0),d0
00008760 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
00008764 4401                       		neg.b	d1		; reverse platform-motion
00008766 0601 0030                  		addi.b	#$30,d1
0000876A 6000                       		bra.s	Obj18_02_Move
0000876C                            ; ===========================================================================
0000876C                            
0000876C                            Obj18_Type0B:
0000876C 3028 0034                  		move.w	$34(a0),d0
00008770 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
00008774 0401 0030                  		subi.b	#$30,d1
00008778 6000                       		bra.s	Obj18_02_Move
0000877A                            ; ===========================================================================
0000877A                            
0000877A                            Obj18_Type06:
0000877A 3028 0034                  		move.w	$34(a0),d0
0000877E 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00008782 4401                       		neg.b	d1		; reverse platform-motion
00008784 0601 0040                  		addi.b	#$40,d1
00008788 6000                       		bra.s	Obj18_02_Move
0000878A                            ; ===========================================================================
0000878A                            
0000878A                            Obj18_Type02:
0000878A 3028 0034                  		move.w	$34(a0),d0
0000878E 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00008792 0401 0040                  		subi.b	#$40,d1
00008796                            
00008796                            Obj18_02_Move:
00008796 4881                       		ext.w	d1
00008798 D041                       		add.w	d1,d0
0000879A 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
0000879E 6000 0000                  		bra.w	Obj18_ChgMotion
000087A2                            ; ===========================================================================
000087A2                            
000087A2                            Obj18_Type03:
000087A2 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
000087A6 6600                       		bne.s	Obj18_03_Wait	; if yes, branch
000087A8 0828 0003 0022             		btst	#3,$22(a0)	; is Sonic standing on the platform?
000087AE 6700                       		beq.s	Obj18_03_NoMove	; if not, branch
000087B0 317C 001E 003A             		move.w	#30,$3A(a0)	; set time delay to 0.5	seconds
000087B6                            
000087B6                            Obj18_03_NoMove:
000087B6 4E75                       		rts	
000087B8                            ; ===========================================================================
000087B8                            
000087B8                            Obj18_03_Wait:
000087B8 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time
000087BC 66F8                       		bne.s	Obj18_03_NoMove	; if time is > 0, branch
000087BE 317C 0020 003A             		move.w	#32,$3A(a0)
000087C4 5228 0028                  		addq.b	#1,$28(a0)	; change to type 04 (falling)
000087C8 4E75                       		rts	
000087CA                            ; ===========================================================================
000087CA                            
000087CA                            Obj18_Type04:
000087CA 4A68 003A                  		tst.w	$3A(a0)
000087CE 6700                       		beq.s	loc_8048
000087D0 5368 003A                  		subq.w	#1,$3A(a0)
000087D4 6600                       		bne.s	loc_8048
000087D6 0828 0003 0022             		btst	#3,$22(a0)
000087DC 6700                       		beq.s	loc_8042
000087DE 08E9 0001 0022             		bset	#1,$22(a1)
000087E4 08A9 0003 0022             		bclr	#3,$22(a1)
000087EA 137C 0002 0024             		move.b	#2,$24(a1)
000087F0 08A8 0003 0022             		bclr	#3,$22(a0)
000087F6 4228 0025                  		clr.b	$25(a0)
000087FA 3368 0012 0012             		move.w	$12(a0),$12(a1)
00008800                            
00008800                            loc_8042:
00008800 117C 0008 0024             		move.b	#8,$24(a0)
00008806                            
00008806                            loc_8048:
00008806 2628 002C                  		move.l	$2C(a0),d3
0000880A 3028 0012                  		move.w	$12(a0),d0
0000880E 48C0                       		ext.l	d0
00008810 E180                       		asl.l	#8,d0
00008812 D680                       		add.l	d0,d3
00008814 2143 002C                  		move.l	d3,$2C(a0)
00008818 0668 0038 0012             		addi.w	#$38,$12(a0)
0000881E 3038 F72E                  		move.w	($FFFFF72E).w,d0
00008822 0640 00E0                  		addi.w	#$E0,d0
00008826 B068 002C                  		cmp.w	$2C(a0),d0
0000882A 6400                       		bcc.s	locret_8074
0000882C 117C 0006 0024             		move.b	#6,$24(a0)
00008832                            
00008832                            locret_8074:
00008832 4E75                       		rts	
00008834                            ; ===========================================================================
00008834                            
00008834                            Obj18_Type07:
00008834 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
00008838 6600                       		bne.s	Obj18_07_Wait	; if yes, branch
0000883A 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
0000883E 7000                       		moveq	#0,d0
00008840 1028 0028                  		move.b	$28(a0),d0	; move object type ($x7) to d0
00008844 E848                       		lsr.w	#4,d0		; divide d0 by 8, round	down
00008846 4A32 0000                  		tst.b	(a2,d0.w)	; has switch no. d0 been pressed?
0000884A 6700                       		beq.s	Obj18_07_NoMove	; if not, branch
0000884C 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
00008852                            
00008852                            Obj18_07_NoMove:
00008852 4E75                       		rts	
00008854                            ; ===========================================================================
00008854                            
00008854                            Obj18_07_Wait:
00008854 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
00008858 66F8                       		bne.s	Obj18_07_NoMove	; if time is > 0, branch
0000885A 5228 0028                  		addq.b	#1,$28(a0)	; change to type 08
0000885E 4E75                       		rts	
00008860                            ; ===========================================================================
00008860                            
00008860                            Obj18_Type08:
00008860 5568 002C                  		subq.w	#2,$2C(a0)	; move platform	up
00008864 3028 0034                  		move.w	$34(a0),d0
00008868 0440 0200                  		subi.w	#$200,d0
0000886C B068 002C                  		cmp.w	$2C(a0),d0	; has platform moved $200 pixels?
00008870 6600                       		bne.s	Obj18_08_NoStop	; if not, branch
00008872 4228 0028                  		clr.b	$28(a0)		; change to type 00 (stop moving)
00008876                            
00008876                            Obj18_08_NoStop:
00008876 4E75                       		rts	
00008878                            ; ===========================================================================
00008878                            
00008878                            Obj18_Type0A:
00008878 3028 0034                  		move.w	$34(a0),d0
0000887C 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00008880 0401 0040                  		subi.b	#$40,d1
00008884 4881                       		ext.w	d1
00008886 E241                       		asr.w	#1,d1
00008888 D041                       		add.w	d1,d0
0000888A 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
0000888E                            
0000888E                            Obj18_ChgMotion:
0000888E 1178 FE78 0026             		move.b	($FFFFFE78).w,$26(a0) ;	update platform-movement variable
00008894 4E75                       		rts	
00008896                            ; ===========================================================================
00008896                            
00008896                            Obj18_ChkDel:				; XREF: Obj18_Action; Obj18_Action2
00008896 3028 0032                  		move.w	$32(a0),d0
0000889A 0240 FF80                  		andi.w	#$FF80,d0
0000889E 3238 F700                  		move.w	($FFFFF700).w,d1
000088A2 0441 0080                  		subi.w	#$80,d1
000088A6 0241 FF80                  		andi.w	#$FF80,d1
000088AA 9041                       		sub.w	d1,d0
000088AC 0C40 0280                  		cmpi.w	#$280,d0
000088B0 6200                       		bhi.s	Obj18_Delete
000088B2 4E75                       		rts	
000088B4                            ; ===========================================================================
000088B4                            
000088B4                            Obj18_Delete:				; XREF: Obj18_Index
000088B4 6000 0000                  		bra.w	DeleteObject
000088B8                            ; ===========================================================================
000088B8                            ; ---------------------------------------------------------------------------
000088B8                            ; Sprite mappings - unused
000088B8                            ; ---------------------------------------------------------------------------
000088B8                            Map_obj18x:
000088B8                            	include "_maps\obj18x.asm"
000088B8                            ; ---------------------------------------------------------------------------
000088B8                            ; Sprite mappings - unused
000088B8                            ; ---------------------------------------------------------------------------
000088B8 0000                       		dc.w byte_80FE-Map_obj18x
000088BA 0000                       		dc.w byte_8109-Map_obj18x
000088BC 02                         byte_80FE:	dc.b 2
000088BD F40B 003C E8               		dc.b $F4, $B, 0, $3C, $E8
000088C2 F40B 0048 00               		dc.b $F4, $B, 0, $48, 0
000088C7 0A                         byte_8109:	dc.b $A
000088C8 F40F 00CA E0               		dc.b $F4, $F, 0, $CA, $E0
000088CD 040F 00DA E0               		dc.b 4,	$F, 0, $DA, $E0
000088D2 240F 00DA E0               		dc.b $24, $F, 0, $DA, $E0
000088D7 440F 00DA E0               		dc.b $44, $F, 0, $DA, $E0
000088DC 640F 00DA E0               		dc.b $64, $F, 0, $DA, $E0
000088E1 F40F 08CA 00               		dc.b $F4, $F, 8, $CA, 0
000088E6 040F 08DA 00               		dc.b 4,	$F, 8, $DA, 0
000088EB 240F 08DA 00               		dc.b $24, $F, 8, $DA, 0
000088F0 440F 08DA 00               		dc.b $44, $F, 8, $DA, 0
000088F5 640F 08DA 00               		dc.b $64, $F, 8, $DA, 0
000088FA                            		even
000088FA                            		even
000088FA                            
000088FA                            ; ---------------------------------------------------------------------------
000088FA                            ; Sprite mappings - GHZ	platforms
000088FA                            ; ---------------------------------------------------------------------------
000088FA                            Map_obj18:
000088FA                            	include "_maps\obj18ghz.asm"
000088FA                            ; ---------------------------------------------------------------------------
000088FA                            ; Sprite mappings - GHZ	platforms
000088FA                            ; ---------------------------------------------------------------------------
000088FA 0000                       		dc.w byte_8140-Map_obj18
000088FC 0000                       		dc.w byte_8155-Map_obj18
000088FE 04                         byte_8140:	dc.b 4
000088FF F40B 003B E0               		dc.b $F4, $B, 0, $3B, $E0 ; small platform
00008904 F407 003F F8               		dc.b $F4, 7, 0,	$3F, $F8
00008909 F407 003F 08               		dc.b $F4, 7, 0,	$3F, 8
0000890E F403 0047 18               		dc.b $F4, 3, 0,	$47, $18
00008913 0A                         byte_8155:	dc.b $A
00008914 F40F 00C5 E0               		dc.b $F4, $F, 0, $C5, $E0 ; large column platform
00008919 040F 00D5 E0               		dc.b 4,	$F, 0, $D5, $E0
0000891E 240F 00D5 E0               		dc.b $24, $F, 0, $D5, $E0
00008923 440F 00D5 E0               		dc.b $44, $F, 0, $D5, $E0
00008928 640F 00D5 E0               		dc.b $64, $F, 0, $D5, $E0
0000892D F40F 08C5 00               		dc.b $F4, $F, 8, $C5, 0
00008932 040F 08D5 00               		dc.b 4,	$F, 8, $D5, 0
00008937 240F 08D5 00               		dc.b $24, $F, 8, $D5, 0
0000893C 440F 08D5 00               		dc.b $44, $F, 8, $D5, 0
00008941 640F 08D5 00               		dc.b $64, $F, 8, $D5, 0
00008946                            		even
00008946                            		even
00008946                            
00008946                            ; ---------------------------------------------------------------------------
00008946                            ; Sprite mappings - SYZ	platforms
00008946                            ; ---------------------------------------------------------------------------
00008946                            Map_obj18a:
00008946                            	include "_maps\obj18syz.asm"
00008946                            ; ---------------------------------------------------------------------------
00008946                            ; Sprite mappings - SYZ	platforms
00008946                            ; ---------------------------------------------------------------------------
00008946 0000                       		dc.w byte_818A-Map_obj18a
00008948 03                         byte_818A:	dc.b 3
00008949 F60B 0049 E0               		dc.b $F6, $B, 0, $49, $E0
0000894E F607 0051 F8               		dc.b $F6, 7, 0,	$51, $F8
00008953 F60B 0055 08               		dc.b $F6, $B, 0, $55, 8
00008958                            		even
00008958                            		even
00008958                            
00008958                            ; ---------------------------------------------------------------------------
00008958                            ; Sprite mappings - SLZ	platforms
00008958                            ; ---------------------------------------------------------------------------
00008958                            Map_obj18b:
00008958                            	include "_maps\obj18slz.asm"
00008958                            ; ---------------------------------------------------------------------------
00008958                            ; Sprite mappings - SLZ	platforms
00008958                            ; ---------------------------------------------------------------------------
00008958 0000                       		dc.w byte_819C-Map_obj18b
0000895A 02                         byte_819C:	dc.b 2
0000895B F80F 0021 E0               		dc.b $F8, $F, 0, $21, $E0
00008960 F80F 0021 00               		dc.b $F8, $F, 0, $21, 0
00008966 00                         		even
00008966 00                         		even
00008966                            
00008966                            ; ===========================================================================
00008966                            ; ---------------------------------------------------------------------------
00008966                            ; Object 19 - Pearto bombs
00008966                            ; ---------------------------------------------------------------------------
00008966                            Obj19:					; XREF: Obj_Index
00008966 7000                       		moveq	#0,d0
00008968 1028 0024                  		move.b	$24(a0),d0
0000896C 323B 0000                  		move.w	off_7070(pc,d0.w),d1
00008970 4EFB 1000                  		jmp	off_7070(pc,d1.w)
00008974                            ; ---------------------------------------------------------------------------
00008974                            
00008974 0000 0000 0000             off_7070:	dc.w loc_7076-off_7070, loc_70A6-off_7070, loc_70EE-off_7070
0000897A                            ; ---------------------------------------------------------------------------
0000897A                            
0000897A                            loc_7076:
0000897A 5428 0024                  		addq.b	#2,$24(a0)
0000897E 217C 0000 0000 0004        		move.l	#Map_obj19,4(a0)
00008986 317C 0480 0002             		move.w	#($9000/$20),2(a0)
0000898C 117C 0004 0001             		move.b	#4,1(a0)
00008992 117C 0003 0019             		move.b	#3,$19(a0)
00008998 117C 0087 0020             		move.b	#$87,$20(a0)
0000899E 117C 0008 0018             		move.b	#8,$18(a0)
000089A4 317C 0018 0030             		move.w	#$18,$30(a0)
000089AA                            
000089AA                            loc_70A6:
000089AA 0828 0007 0022             		btst	#7,$22(a0)
000089B0 6600                       		bne.s	loc_70C2
000089B2 4A68 0030                  		tst.w	$30(a0)
000089B6 6600                       		bne.s	loc_70D2
000089B8 4EB9 0000 0000             		jsr	ObjHitFloor
000089BE 4A41                       		tst.w	d1
000089C0 6A00                       		bpl.s	loc_70D6
000089C2 D368 000C                  		add.w	d1,$C(a0)
000089C6                            
000089C6                            loc_70C2:
000089C6 10BC 0027                  		move.b	#$27,0(a0); change object to explosion (why was this even here with the 3F branch)
000089CA 117C 0000 0024             		move.b	#0,$24(a0)
000089D0                            ; ---------------------------------------------------------------------------
000089D0                            
000089D0                            loc_70D2:
000089D0 5368 0030                  		subq.w	#1,$30(a0)
000089D4                            
000089D4                            loc_70D6:
000089D4 6100 0000                  		bsr.w	ObjectFall
000089D8 6100 0000                  		bsr.w	DisplaySprite
000089DC 3038 F72E                  		move.w	($FFFFF72E).w,d0
000089E0 0640 00E0                  		addi.w	#$E0,d0
000089E4 B068 000C                  		cmp.w	$C(a0),d0
000089E8 6500                       		bcs.s	loc_70EE
000089EA 4E75                       		rts
000089EC                            ; ---------------------------------------------------------------------------
000089EC                            
000089EC                            loc_70EE:
000089EC 6100 0000                  		bsr.w	DeleteObject
000089F0 4E75                       		rts
000089F2                            		
000089F2                            Map_obj19:
000089F2                            	include "_maps\obj19.asm"
000089F2                            Map_02b4:
000089F2 0000                       Map_02b4_0: 	dc.w Map_02b4_2-Map_02b4
000089F4 01                         Map_02b4_2: 	dc.b $1
000089F5 F706 2000 F8               	dc.b $F7, $6, $20, $0, $F8
000089FA                            	even
000089FA                            	even
000089FA                            ; ===========================================================================
000089FA                            ; ---------------------------------------------------------------------------
000089FA                            ; Sprite mappings - swinging ball on a chain from GHZ boss
000089FA                            ; ---------------------------------------------------------------------------
000089FA                            Map_obj48:
000089FA                            	include "_maps\obj48.asm"
000089FA                            ; ---------------------------------------------------------------------------
000089FA                            ; Sprite mappings - swinging ball on a chain from GHZ boss
000089FA                            ; ---------------------------------------------------------------------------
000089FA 0000 0000                  		dc.w byte_81B2-Map_obj48, byte_81D1-Map_obj48
000089FE 0000 0000                  		dc.w byte_81E6-Map_obj48, byte_81FB-Map_obj48
00008A02 06                         byte_81B2:	dc.b 6
00008A03 F004 0024 F0               		dc.b $F0, 4, 0,	$24, $F0
00008A08 F804 1024 F0               		dc.b $F8, 4, $10, $24, $F0
00008A0D E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00008A12 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00008A17 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
00008A1C 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00008A21 04                         byte_81D1:	dc.b 4
00008A22 E80A 0009 E8               		dc.b $E8, $A, 0, 9, $E8
00008A27 E80A 0809 00               		dc.b $E8, $A, 8, 9, 0
00008A2C 000A 1009 E8               		dc.b 0,	$A, $10, 9, $E8
00008A31 000A 1809 00               		dc.b 0,	$A, $18, 9, 0
00008A36 04                         byte_81E6:	dc.b 4
00008A37 E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
00008A3C E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
00008A41 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
00008A46 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
00008A4B 04                         byte_81FB:	dc.b 4
00008A4C E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
00008A51 E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
00008A56 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
00008A5B 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
00008A60                            		even
00008A60                            		even
00008A60                            
00008A60                            ; ===========================================================================
00008A60                            ; ---------------------------------------------------------------------------
00008A60                            ; Object 1A - GHZ collapsing ledge
00008A60                            ; ---------------------------------------------------------------------------
00008A60                            
00008A60                            Obj1A:					; XREF: Obj_Index
00008A60 7000                       		moveq	#0,d0
00008A62 1028 0024                  		move.b	$24(a0),d0
00008A66 323B 0000                  		move.w	Obj1A_Index(pc,d0.w),d1
00008A6A 4EFB 1000                  		jmp	Obj1A_Index(pc,d1.w)
00008A6E                            ; ===========================================================================
00008A6E 0000 0000                  Obj1A_Index:	dc.w Obj1A_Main-Obj1A_Index, Obj1A_ChkTouch-Obj1A_Index
00008A72 0000 0000                  		dc.w Obj1A_Touch-Obj1A_Index, Obj1A_Display-Obj1A_Index
00008A76 0000 0000                  		dc.w Obj1A_Delete-Obj1A_Index, Obj1A_WalkOff-Obj1A_Index
00008A7A                            ; ===========================================================================
00008A7A                            
00008A7A                            Obj1A_Main:				; XREF: Obj1A_Index
00008A7A 5428 0024                  		addq.b	#2,$24(a0)
00008A7E 217C 0000 0000 0004        		move.l	#Map_obj1A,4(a0)
00008A86 317C 4000 0002             		move.w	#$4000,2(a0)
00008A8C 0028 0004 0001             		ori.b	#4,1(a0)
00008A92 117C 0004 0018             		move.b	#4,$18(a0)
00008A98 117C 0007 0038             		move.b	#7,$38(a0)	; set time delay for collapse
00008A9E 117C 0064 0019             		move.b	#$64,$19(a0)
00008AA4 1168 0028 001A             		move.b	$28(a0),$1A(a0)
00008AAA 117C 0038 0016             		move.b	#$38,$16(a0)
00008AB0 08E8 0004 0001             		bset	#4,1(a0)
00008AB6                            
00008AB6                            Obj1A_ChkTouch:				; XREF: Obj1A_Index
00008AB6 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	platform?
00008ABA 6700                       		beq.s	Obj1A_Slope	; if not, branch
00008ABC 4A28 0038                  		tst.b	$38(a0)		; has time reached zero?
00008AC0 6700 0000                  		beq.w	Obj1A_Collapse	; if yes, branch
00008AC4 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008AC8                            
00008AC8                            Obj1A_Slope:
00008AC8 323C 0030                  		move.w	#$30,d1
00008ACC 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
00008AD2 6100 F212                  		bsr.w	SlopeObject
00008AD6 6000 0000                  		bra.w	MarkObjGone
00008ADA                            ; ===========================================================================
00008ADA                            
00008ADA                            Obj1A_Touch:				; XREF: Obj1A_Index
00008ADA 4A28 0038                  		tst.b	$38(a0)
00008ADE 6700 0000                  		beq.w	loc_847A
00008AE2 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
00008AE8 5328 0038                  		subq.b	#1,$38(a0)
00008AEC                            
00008AEC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008AEC                            
00008AEC                            
00008AEC                            Obj1A_WalkOff:				; XREF: Obj1A_Index
00008AEC 323C 0030                  		move.w	#$30,d1
00008AF0 6100 F294                  		bsr.w	ExitPlatform
00008AF4 323C 0030                  		move.w	#$30,d1
00008AF8 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
00008AFE 3428 0008                  		move.w	8(a0),d2
00008B02 6100 0000                  		bsr.w	SlopeObject2
00008B06 6000 0000                  		bra.w	MarkObjGone
00008B0A                            ; End of function Obj1A_WalkOff
00008B0A                            
00008B0A                            ; ===========================================================================
00008B0A                            
00008B0A                            Obj1A_Display:				; XREF: Obj1A_Index
00008B0A 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00008B0E 6700                       		beq.s	Obj1A_TimeZero	; if yes, branch
00008B10 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00008B14 6600 0000                  		bne.w	loc_82D0	; if yes, branch
00008B18 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008B1C 6000 0000                  		bra.w	DisplaySprite
00008B20                            ; ===========================================================================
00008B20                            
00008B20                            loc_82D0:				; XREF: Obj1A_Display
00008B20 5328 0038                  		subq.b	#1,$38(a0)
00008B24 6100 FFC6                  		bsr.w	Obj1A_WalkOff
00008B28 43F8 D000                  		lea	($FFFFD000).w,a1
00008B2C 0829 0003 0022             		btst	#3,$22(a1)
00008B32 6700                       		beq.s	loc_82FC
00008B34 4A28 0038                  		tst.b	$38(a0)
00008B38 6600                       		bne.s	locret_8308
00008B3A 08A9 0003 0022             		bclr	#3,$22(a1)
00008B40 08A9 0005 0022             		bclr	#5,$22(a1)
00008B46 137C 0001 001D             		move.b	#1,$1D(a1)
00008B4C                            
00008B4C                            loc_82FC:
00008B4C 117C 0000 003A             		move.b	#0,$3A(a0)
00008B52 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj1A_Display" routine
00008B58                            
00008B58                            locret_8308:
00008B58 4E75                       		rts	
00008B5A                            ; ===========================================================================
00008B5A                            
00008B5A                            Obj1A_TimeZero:				; XREF: Obj1A_Display
00008B5A 6100 0000                  		bsr.w	ObjectFall
00008B5E 6100 0000                  		bsr.w	DisplaySprite
00008B62 4A28 0001                  		tst.b	1(a0)
00008B66 6A00                       		bpl.s	Obj1A_Delete
00008B68 4E75                       		rts	
00008B6A                            ; ===========================================================================
00008B6A                            
00008B6A                            Obj1A_Delete:				; XREF: Obj1A_Index
00008B6A 6100 0000                  		bsr.w	DeleteObject
00008B6E 4E75                       		rts	
00008B70                            ; ===========================================================================
00008B70                            ; ---------------------------------------------------------------------------
00008B70                            ; Object 53 - collapsing floors	(MZ, SLZ, SBZ)
00008B70                            ; ---------------------------------------------------------------------------
00008B70                            
00008B70                            Obj53:					; XREF: Obj_Index
00008B70 7000                       		moveq	#0,d0
00008B72 1028 0024                  		move.b	$24(a0),d0
00008B76 323B 0000                  		move.w	Obj53_Index(pc,d0.w),d1
00008B7A 4EFB 1000                  		jmp	Obj53_Index(pc,d1.w)
00008B7E                            ; ===========================================================================
00008B7E 0000 0000                  Obj53_Index:	dc.w Obj53_Main-Obj53_Index, Obj53_ChkTouch-Obj53_Index
00008B82 0000 0000                  		dc.w Obj53_Touch-Obj53_Index, Obj53_Display-Obj53_Index
00008B86 0000 0000                  		dc.w Obj53_Delete-Obj53_Index, Obj53_WalkOff-Obj53_Index
00008B8A                            ; ===========================================================================
00008B8A                            
00008B8A                            Obj53_Main:				; XREF: Obj53_Index
00008B8A 5428 0024                  		addq.b	#2,$24(a0)
00008B8E 217C 0000 0000 0004        		move.l	#Map_obj53,4(a0)
00008B96 317C 42B8 0002             		move.w	#$42B8,2(a0)
00008B9C 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00008BA2 6600                       		bne.s	Obj53_NotSLZ
00008BA4 317C 44E0 0002             		move.w	#$44E0,2(a0)	; SLZ specific code
00008BAA 5428 001A                  		addq.b	#2,$1A(a0)
00008BAE                            
00008BAE                            Obj53_NotSLZ:
00008BAE 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00008BB4 6600                       		bne.s	Obj53_NotSBZ
00008BB6 317C 43F5 0002             		move.w	#$43F5,2(a0)	; SBZ specific code
00008BBC                            
00008BBC                            Obj53_NotSBZ:
00008BBC 0028 0004 0001             		ori.b	#4,1(a0)
00008BC2 117C 0004 0018             		move.b	#4,$18(a0)
00008BC8 117C 0007 0038             		move.b	#7,$38(a0)
00008BCE 117C 0044 0019             		move.b	#$44,$19(a0)
00008BD4                            
00008BD4                            Obj53_ChkTouch:				; XREF: Obj53_Index
00008BD4 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00008BD8 6700                       		beq.s	Obj53_Solid	; if not, branch
00008BDA 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00008BDE 6700 0000                  		beq.w	Obj53_Collapse	; if yes, branch
00008BE2 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008BE6                            
00008BE6                            Obj53_Solid:
00008BE6 323C 0020                  		move.w	#$20,d1
00008BEA 6100 F026                  		bsr.w	PlatformObject
00008BEE 4A28 0028                  		tst.b	$28(a0)
00008BF2 6A00                       		bpl.s	Obj53_MarkAsGone
00008BF4 0829 0003 0022             		btst	#3,$22(a1)
00008BFA 6700                       		beq.s	Obj53_MarkAsGone
00008BFC 08A8 0000 0001             		bclr	#0,1(a0)
00008C02 3029 0008                  		move.w	8(a1),d0
00008C06 9068 0008                  		sub.w	8(a0),d0
00008C0A 6400                       		bcc.s	Obj53_MarkAsGone
00008C0C 08E8 0000 0001             		bset	#0,1(a0)
00008C12                            
00008C12                            Obj53_MarkAsGone:
00008C12 6000 0000                  		bra.w	MarkObjGone
00008C16                            ; ===========================================================================
00008C16                            
00008C16                            Obj53_Touch:				; XREF: Obj53_Index
00008C16 4A28 0038                  		tst.b	$38(a0)
00008C1A 6700 0000                  		beq.w	loc_8458
00008C1E 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
00008C24 5328 0038                  		subq.b	#1,$38(a0)
00008C28                            
00008C28                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008C28                            
00008C28                            
00008C28                            Obj53_WalkOff:				; XREF: Obj53_Index
00008C28 323C 0020                  		move.w	#$20,d1
00008C2C 6100 F158                  		bsr.w	ExitPlatform
00008C30 3428 0008                  		move.w	8(a0),d2
00008C34 6100 F6BA                  		bsr.w	MvSonicOnPtfm2
00008C38 6000 0000                  		bra.w	MarkObjGone
00008C3C                            ; End of function Obj53_WalkOff
00008C3C                            
00008C3C                            ; ===========================================================================
00008C3C                            
00008C3C                            Obj53_Display:				; XREF: Obj53_Index
00008C3C 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00008C40 6700                       		beq.s	Obj53_TimeZero	; if yes, branch
00008C42 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00008C46 6600 0000                  		bne.w	loc_8402	; if yes, branch
00008C4A 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008C4E 6000 0000                  		bra.w	DisplaySprite
00008C52                            ; ===========================================================================
00008C52                            
00008C52                            loc_8402:
00008C52 5328 0038                  		subq.b	#1,$38(a0)
00008C56 6100 FFD0                  		bsr.w	Obj53_WalkOff
00008C5A 43F8 D000                  		lea	($FFFFD000).w,a1
00008C5E 0829 0003 0022             		btst	#3,$22(a1)
00008C64 6700                       		beq.s	loc_842E
00008C66 4A28 0038                  		tst.b	$38(a0)
00008C6A 6600                       		bne.s	locret_843A
00008C6C 08A9 0003 0022             		bclr	#3,$22(a1)
00008C72 08A9 0005 0022             		bclr	#5,$22(a1)
00008C78 137C 0001 001D             		move.b	#1,$1D(a1)
00008C7E                            
00008C7E                            loc_842E:
00008C7E 117C 0000 003A             		move.b	#0,$3A(a0)
00008C84 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj53_Display" routine
00008C8A                            
00008C8A                            locret_843A:
00008C8A 4E75                       		rts	
00008C8C                            ; ===========================================================================
00008C8C                            
00008C8C                            Obj53_TimeZero:				; XREF: Obj53_Display
00008C8C 6100 0000                  		bsr.w	ObjectFall
00008C90 6100 0000                  		bsr.w	DisplaySprite
00008C94 4A28 0001                  		tst.b	1(a0)
00008C98 6A00                       		bpl.s	Obj53_Delete
00008C9A 4E75                       		rts	
00008C9C                            ; ===========================================================================
00008C9C                            
00008C9C                            Obj53_Delete:				; XREF: Obj53_Index
00008C9C 6100 0000                  		bsr.w	DeleteObject
00008CA0 4E75                       		rts	
00008CA2                            ; ===========================================================================
00008CA2                            
00008CA2                            Obj53_Collapse:				; XREF: Obj53_ChkTouch
00008CA2 117C 0000 003A             		move.b	#0,$3A(a0)
00008CA8                            
00008CA8                            loc_8458:				; XREF: Obj53_Touch
00008CA8 49F9 0000 0000             		lea	(Obj53_Data2).l,a4
00008CAE 0828 0000 0028             		btst	#0,$28(a0)
00008CB4 6700                       		beq.s	loc_846C
00008CB6 49F9 0000 0000             		lea	(Obj53_Data3).l,a4
00008CBC                            
00008CBC                            loc_846C:
00008CBC 7207                       		moveq	#7,d1
00008CBE 5228 001A                  		addq.b	#1,$1A(a0)
00008CC2 6000                       		bra.s	loc_8486
00008CC4                            ; ===========================================================================
00008CC4                            
00008CC4                            Obj1A_Collapse:				; XREF: Obj1A_ChkTouch
00008CC4 117C 0000 003A             		move.b	#0,$3A(a0)
00008CCA                            
00008CCA                            loc_847A:				; XREF: Obj1A_Touch
00008CCA 49F9 0000 0000             		lea	(Obj53_Data1).l,a4
00008CD0 7218                       		moveq	#$18,d1
00008CD2 5428 001A                  		addq.b	#2,$1A(a0)
00008CD6                            
00008CD6                            loc_8486:				; XREF: Obj53_Collapse
00008CD6 7000                       		moveq	#0,d0
00008CD8 1028 001A                  		move.b	$1A(a0),d0
00008CDC D040                       		add.w	d0,d0
00008CDE 2668 0004                  		movea.l	4(a0),a3
00008CE2 D6F3 0000                  		adda.w	(a3,d0.w),a3
00008CE6 524B                       		addq.w	#1,a3
00008CE8 08E8 0005 0001             		bset	#5,1(a0)
00008CEE 1810                       		move.b	0(a0),d4
00008CF0 1A28 0001                  		move.b	1(a0),d5
00008CF4 2248                       		movea.l	a0,a1
00008CF6 6000                       		bra.s	loc_84B2
00008CF8                            ; ===========================================================================
00008CF8                            
00008CF8                            loc_84AA:
00008CF8 6100 0000                  		bsr.w	SingleObjLoad
00008CFC 6600                       		bne.s	loc_84F2
00008CFE 5A4B                       		addq.w	#5,a3
00008D00                            
00008D00                            loc_84B2:
00008D00 137C 0006 0024             		move.b	#6,$24(a1)
00008D06 1284                       		move.b	d4,0(a1)
00008D08 234B 0004                  		move.l	a3,4(a1)
00008D0C 1345 0001                  		move.b	d5,1(a1)
00008D10 3368 0008 0008             		move.w	8(a0),8(a1)
00008D16 3368 000C 000C             		move.w	$C(a0),$C(a1)
00008D1C 3368 0002 0002             		move.w	2(a0),2(a1)
00008D22 1368 0018 0018             		move.b	$18(a0),$18(a1)
00008D28 1368 0019 0019             		move.b	$19(a0),$19(a1)
00008D2E 135C 0038                  		move.b	(a4)+,$38(a1)
00008D32 B3C8                       		cmpa.l	a0,a1
00008D34 6400                       		bcc.s	loc_84EE
00008D36 6100 0000                  		bsr.w	DisplaySprite2
00008D3A                            
00008D3A                            loc_84EE:
00008D3A 51C9 FFBC                  		dbf	d1,loc_84AA
00008D3E                            
00008D3E                            loc_84F2:
00008D3E 6100 0000                  		bsr.w	DisplaySprite
00008D42 303C 00B9                  		move.w	#$B9,d0
00008D46 4EF9 0000 15D2             		jmp	(PlaySound_Special).l ;	play collapsing	sound
00008D4C                            ; ===========================================================================
00008D4C                            ; ---------------------------------------------------------------------------
00008D4C                            ; Disintegration data for collapsing ledges (MZ, SLZ, SBZ)
00008D4C                            ; ---------------------------------------------------------------------------
00008D4C 1C18 1410 1A16 120E 0A06+  Obj53_Data1:	dc.b $1C, $18, $14, $10, $1A, $16, $12,	$E, $A,	6, $18,	$14, $10, $C, 8, 4
00008D5C 1612 0E0A 0602 1410 0C00   		dc.b $16, $12, $E, $A, 6, 2, $14, $10, $C, 0
00008D66 1E16 0E06 1A12 0A02        Obj53_Data2:	dc.b $1E, $16, $E, 6, $1A, $12,	$A, 2
00008D6E 161E 1A12 060E 0A02        Obj53_Data3:	dc.b $16, $1E, $1A, $12, 6, $E,	$A, 2
00008D76                            
00008D76                            ; ---------------------------------------------------------------------------
00008D76                            ; Sloped platform subroutine (GHZ collapsing ledges and	MZ platforms)
00008D76                            ; ---------------------------------------------------------------------------
00008D76                            
00008D76                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008D76                            
00008D76                            
00008D76                            SlopeObject2:				; XREF: Obj1A_WalkOff; et al
00008D76 43F8 D000                  		lea	($FFFFD000).w,a1
00008D7A 0829 0003 0022             		btst	#3,$22(a1)
00008D80 6700                       		beq.s	locret_856E
00008D82 3029 0008                  		move.w	8(a1),d0
00008D86 9068 0008                  		sub.w	8(a0),d0
00008D8A D041                       		add.w	d1,d0
00008D8C E248                       		lsr.w	#1,d0
00008D8E 0828 0000 0001             		btst	#0,1(a0)
00008D94 6700                       		beq.s	loc_854E
00008D96 4640                       		not.w	d0
00008D98 D041                       		add.w	d1,d0
00008D9A                            
00008D9A                            loc_854E:
00008D9A 7200                       		moveq	#0,d1
00008D9C 1232 0000                  		move.b	(a2,d0.w),d1
00008DA0 3028 000C                  		move.w	$C(a0),d0
00008DA4 9041                       		sub.w	d1,d0
00008DA6 7200                       		moveq	#0,d1
00008DA8 1229 0016                  		move.b	$16(a1),d1
00008DAC 9041                       		sub.w	d1,d0
00008DAE 3340 000C                  		move.w	d0,$C(a1)
00008DB2 9468 0008                  		sub.w	8(a0),d2
00008DB6 9569 0008                  		sub.w	d2,8(a1)
00008DBA                            
00008DBA                            locret_856E:
00008DBA 4E75                       		rts	
00008DBC                            ; End of function SlopeObject2
00008DBC                            
00008DBC                            ; ===========================================================================
00008DBC                            ; ---------------------------------------------------------------------------
00008DBC                            ; Collision data for GHZ collapsing ledge
00008DBC                            ; ---------------------------------------------------------------------------
00008DBC                            Obj1A_SlopeData:
00008DBC                            		incbin	misc\ghzledge.bin
00008DEC                            		even
00008DEC                            
00008DEC                            ; ---------------------------------------------------------------------------
00008DEC                            ; Sprite mappings - GHZ	collapsing ledge
00008DEC                            ; ---------------------------------------------------------------------------
00008DEC                            Map_obj1A:
00008DEC                            	include "_maps\obj1A.asm"
00008DEC                            ; ---------------------------------------------------------------------------
00008DEC                            ; Sprite mappings - GHZ	collapsing ledge
00008DEC                            ; ---------------------------------------------------------------------------
00008DEC 0000 0000                  		dc.w byte_85A8-Map_obj1A, byte_85F9-Map_obj1A
00008DF0 0000 0000                  		dc.w byte_864A-Map_obj1A, byte_86C8-Map_obj1A
00008DF4 10                         byte_85A8:	dc.b $10
00008DF5 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing left
00008DFA D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
00008DFF E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
00008E04 E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
00008E09 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008E0E D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
00008E13 F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
00008E18 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
00008E1D F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008E22 F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
00008E27 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
00008E2C 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008E31 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
00008E36 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
00008E3B 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
00008E40 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008E45 10                         byte_85F9:	dc.b $10
00008E46 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing right
00008E4B D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
00008E50 E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
00008E55 E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
00008E5A D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008E5F D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
00008E64 F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
00008E69 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
00008E6E F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008E73 F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
00008E78 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
00008E7D 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008E82 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
00008E87 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
00008E8C 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
00008E91 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008E96 19                         byte_864A:	dc.b $19
00008E97 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	left in	pieces
00008E9C C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
00008EA1 D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
00008EA6 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
00008EAB E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
00008EB0 E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
00008EB5 E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
00008EBA E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
00008EBF D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008EC4 D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
00008EC9 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
00008ECE F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
00008ED3 F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
00008ED8 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
00008EDD F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008EE2 F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
00008EE7 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
00008EEC 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
00008EF1 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008EF6 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
00008EFB 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
00008F00 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
00008F05 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
00008F0A 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
00008F0F 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008F14 19                         byte_86C8:	dc.b $19
00008F15 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	right in pieces
00008F1A C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
00008F1F D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
00008F24 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
00008F29 E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
00008F2E E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
00008F33 E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
00008F38 E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
00008F3D D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008F42 D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
00008F47 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
00008F4C F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
00008F51 F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
00008F56 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
00008F5B F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008F60 F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
00008F65 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
00008F6A 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
00008F6F 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008F74 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
00008F79 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
00008F7E 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
00008F83 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
00008F88 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
00008F8D 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008F92                            		even
00008F92                            		even
00008F92                            
00008F92                            ; ---------------------------------------------------------------------------
00008F92                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
00008F92                            ; ---------------------------------------------------------------------------
00008F92                            Map_obj53:
00008F92                            	include "_maps\obj53.asm"
00008F92                            ; ---------------------------------------------------------------------------
00008F92                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
00008F92                            ; ---------------------------------------------------------------------------
00008F92 0000 0000                  		dc.w byte_874E-Map_obj53, byte_8763-Map_obj53
00008F96 0000 0000                  		dc.w byte_878C-Map_obj53, byte_87A1-Map_obj53
00008F9A 04                         byte_874E:	dc.b 4
00008F9B F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; MZ and SBZ blocks
00008FA0 080D 0000 E0               		dc.b 8,	$D, 0, 0, $E0
00008FA5 F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
00008FAA 080D 0000 00               		dc.b 8,	$D, 0, 0, 0
00008FAF 08                         byte_8763:	dc.b 8
00008FB0 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
00008FB5 F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
00008FBA F805 0000 00               		dc.b $F8, 5, 0,	0, 0
00008FBF F805 0000 10               		dc.b $F8, 5, 0,	0, $10
00008FC4 0805 0000 E0               		dc.b 8,	5, 0, 0, $E0
00008FC9 0805 0000 F0               		dc.b 8,	5, 0, 0, $F0
00008FCE 0805 0000 00               		dc.b 8,	5, 0, 0, 0
00008FD3 0805 0000 10               		dc.b 8,	5, 0, 0, $10
00008FD8 04                         byte_878C:	dc.b 4
00008FD9 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; SLZ blocks
00008FDE 080D 0008 E0               		dc.b 8,	$D, 0, 8, $E0
00008FE3 F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
00008FE8 080D 0008 00               		dc.b 8,	$D, 0, 8, 0
00008FED 08                         byte_87A1:	dc.b 8
00008FEE F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
00008FF3 F805 0004 F0               		dc.b $F8, 5, 0,	4, $F0
00008FF8 F805 0000 00               		dc.b $F8, 5, 0,	0, 0
00008FFD F805 0004 10               		dc.b $F8, 5, 0,	4, $10
00009002 0805 0008 E0               		dc.b 8,	5, 0, 8, $E0
00009007 0805 000C F0               		dc.b 8,	5, 0, $C, $F0
0000900C 0805 0008 00               		dc.b 8,	5, 0, 8, 0
00009011 0805 000C 10               		dc.b 8,	5, 0, $C, $10
00009016                            		even
00009016                            		even
00009016                            
00009016                            ; ===========================================================================
00009016                            ; ---------------------------------------------------------------------------
00009016                            ; Object 1C - scenery (GHZ bridge stump, SLZ lava thrower)
00009016                            ; ---------------------------------------------------------------------------
00009016                            
00009016                            Obj1C:					; XREF: Obj_Index
00009016 7000                       		moveq	#0,d0
00009018 1028 0024                  		move.b	$24(a0),d0
0000901C 323B 0000                  		move.w	Obj1C_Index(pc,d0.w),d1
00009020 4EFB 1000                  		jmp	Obj1C_Index(pc,d1.w)
00009024                            ; ===========================================================================
00009024 0000                       Obj1C_Index:	dc.w Obj1C_Main-Obj1C_Index
00009026 0000                       		dc.w Obj1C_ChkDel-Obj1C_Index
00009028                            ; ===========================================================================
00009028                            
00009028                            Obj1C_Main:				; XREF: Obj1C_Index
00009028 5428 0024                  		addq.b	#2,$24(a0)
0000902C 7000                       		moveq	#0,d0
0000902E 1028 0028                  		move.b	$28(a0),d0	; copy object type to d0
00009032 C0FC 000A                  		mulu.w	#$A,d0		; multiply by $A
00009036 43FB 0000                  		lea	Obj1C_Var(pc,d0.w),a1
0000903A 2159 0004                  		move.l	(a1)+,4(a0)
0000903E 3159 0002                  		move.w	(a1)+,2(a0)
00009042 0028 0004 0001             		ori.b	#4,1(a0)
00009048 1159 001A                  		move.b	(a1)+,$1A(a0)
0000904C 1159 0019                  		move.b	(a1)+,$19(a0)
00009050 1159 0018                  		move.b	(a1)+,$18(a0)
00009054 1159 0020                  		move.b	(a1)+,$20(a0)
00009058                            
00009058                            Obj1C_ChkDel:				; XREF: Obj1C_Index
00009058 3028 0008                  		move.w	8(a0),d0
0000905C 0240 FF80                  		andi.w	#$FF80,d0
00009060 3238 F700                  		move.w	($FFFFF700).w,d1
00009064 0441 0080                  		subi.w	#$80,d1
00009068 0241 FF80                  		andi.w	#$FF80,d1
0000906C 9041                       		sub.w	d1,d0
0000906E 0C40 0280                  		cmpi.w	#$280,d0
00009072 6200 0000                  		bhi.w	DeleteObject
00009076 6000 0000                  		bra.w	DisplaySprite
0000907A                            ; ===========================================================================
0000907A                            ; ---------------------------------------------------------------------------
0000907A                            ; Variables for	object $1C are stored in an array
0000907A                            ; ---------------------------------------------------------------------------
0000907A 0000 0000                  Obj1C_Var:	dc.l Map_obj1C		; mappings address
0000907E 44D8                       		dc.w $44D8		; VRAM setting
00009080 0008 0200                  		dc.b 0,	8, 2, 0		; frame, width,	priority, collision response
00009084 0000 0000                  		dc.l Map_obj1C
00009088 44D8                       		dc.w $44D8
0000908A 0008 0200                  		dc.b 0,	8, 2, 0
0000908E 0000 0000                  		dc.l Map_obj1C
00009092 44D8                       		dc.w $44D8
00009094 0008 0200                  		dc.b 0,	8, 2, 0
00009098 0000 80FA                  		dc.l Map_obj11
0000909C 438E                       		dc.w $438E
0000909E 0110 0100                  		dc.b 1,	$10, 1,	0
000090A2                            ; ---------------------------------------------------------------------------
000090A2                            ; Sprite mappings - SLZ	lava thrower
000090A2                            ; ---------------------------------------------------------------------------
000090A2                            Map_obj1C:
000090A2                            	include "_maps\obj1C.asm"
000090A2                            ; ---------------------------------------------------------------------------
000090A2                            ; Sprite mappings - SLZ	lava thrower
000090A2                            ; ---------------------------------------------------------------------------
000090A2 0000                       		dc.w byte_8858-Map_obj1C
000090A4 01                         byte_8858:	dc.b 1
000090A5 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
000090AA                            		even
000090AA                            		even
000090AA                            
000090AA                            ; ===========================================================================
000090AA                            ; ---------------------------------------------------------------------------
000090AA                            ; Object 1D - switch that activates when Sonic touches it
000090AA                            ; (this	is not used anywhere in	the game)
000090AA                            ; ---------------------------------------------------------------------------
000090AA                            
000090AA                            Obj1D:					; XREF: Obj_Index
000090AA 7000                       		moveq	#0,d0
000090AC 1028 0024                  		move.b	$24(a0),d0
000090B0 323B 0000                  		move.w	Obj1D_Index(pc,d0.w),d1
000090B4 4EFB 1000                  		jmp	Obj1D_Index(pc,d1.w)
000090B8                            ; ===========================================================================
000090B8 0000                       Obj1D_Index:	dc.w Obj1D_Main-Obj1D_Index
000090BA 0000                       		dc.w Obj1D_Action-Obj1D_Index
000090BC 0000                       		dc.w Obj1D_Delete-Obj1D_Index
000090BE                            ; ===========================================================================
000090BE                            
000090BE                            Obj1D_Main:				; XREF: Obj1D_Index
000090BE 5428 0024                  		addq.b	#2,$24(a0)
000090C2 217C 0000 0000 0004        		move.l	#Map_obj1D,4(a0)
000090CA 317C 4000 0002             		move.w	#$4000,2(a0)
000090D0 117C 0004 0001             		move.b	#4,1(a0)
000090D6 3168 000C 0030             		move.w	$C(a0),$30(a0)	; save position	on y-axis
000090DC 117C 0010 0019             		move.b	#$10,$19(a0)
000090E2 117C 0005 0018             		move.b	#5,$18(a0)
000090E8                            
000090E8                            Obj1D_Action:				; XREF: Obj1D_Index
000090E8 3168 0030 000C             		move.w	$30(a0),$C(a0)	; restore position on y-axis
000090EE 323C 0010                  		move.w	#$10,d1
000090F2 6100 0000                  		bsr.w	Obj1D_ChkTouch
000090F6 6700                       		beq.s	Obj1D_ChkDel
000090F8 5468 000C                  		addq.w	#2,$C(a0)	; move object 2	pixels
000090FC 7001                       		moveq	#1,d0
000090FE 31C0 F7E0                  		move.w	d0,($FFFFF7E0).w ; set switch 0	as "pressed"
00009102                            
00009102                            Obj1D_ChkDel:
00009102 6100 0000                  		bsr.w	DisplaySprite
00009106 3028 0008                  		move.w	8(a0),d0
0000910A 0240 FF80                  		andi.w	#$FF80,d0
0000910E 3238 F700                  		move.w	($FFFFF700).w,d1
00009112 0441 0080                  		subi.w	#$80,d1
00009116 0241 FF80                  		andi.w	#$FF80,d1
0000911A 9041                       		sub.w	d1,d0
0000911C 0C40 0280                  		cmpi.w	#$280,d0
00009120 6200 0000                  		bhi.w	Obj1D_Delete
00009124 4E75                       		rts	
00009126                            ; ===========================================================================
00009126                            
00009126                            Obj1D_Delete:				; XREF: Obj1D_Index
00009126 6100 0000                  		bsr.w	DeleteObject
0000912A 4E75                       		rts	
0000912C                            ; ---------------------------------------------------------------------------
0000912C                            ; Subroutine to	check if Sonic touches the object
0000912C                            ; ---------------------------------------------------------------------------
0000912C                            
0000912C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000912C                            
0000912C                            
0000912C                            Obj1D_ChkTouch:				; XREF: Obj1D_Action
0000912C 43F8 D000                  		lea	($FFFFD000).w,a1
00009130 3029 0008                  		move.w	8(a1),d0
00009134 9068 0008                  		sub.w	8(a0),d0
00009138 D041                       		add.w	d1,d0
0000913A 6B00                       		bmi.s	loc_8918
0000913C D241                       		add.w	d1,d1
0000913E B041                       		cmp.w	d1,d0
00009140 6400                       		bcc.s	loc_8918
00009142 3429 000C                  		move.w	$C(a1),d2
00009146 1229 0016                  		move.b	$16(a1),d1
0000914A 4881                       		ext.w	d1
0000914C D242                       		add.w	d2,d1
0000914E 3028 000C                  		move.w	$C(a0),d0
00009152 0440 0010                  		subi.w	#$10,d0
00009156 9041                       		sub.w	d1,d0
00009158 6200                       		bhi.s	loc_8918
0000915A 0C40 FFF0                  		cmpi.w	#-$10,d0
0000915E 6500                       		bcs.s	loc_8918
00009160 70FF                       		moveq	#-1,d0
00009162 4E75                       		rts	
00009164                            ; ===========================================================================
00009164                            
00009164                            loc_8918:
00009164 7000                       		moveq	#0,d0
00009166 4E75                       		rts	
00009168                            ; End of function Obj1D_ChkTouch
00009168                            
00009168                            ; ===========================================================================
00009168                            ; ---------------------------------------------------------------------------
00009168                            ; Sprite mappings - object 1D
00009168                            ; ---------------------------------------------------------------------------
00009168                            Map_obj1D:
00009168                            	include "_maps\obj1D.asm"
00009168                            ; ---------------------------------------------------------------------------
00009168                            ; Sprite mappings - object 1D
00009168                            ; ---------------------------------------------------------------------------
00009168 0000                       		dc.w byte_891E-Map_obj1D
0000916A 04                         byte_891E:	dc.b 4
0000916B E807 0054 F0               		dc.b $E8, 7, 0,	$54, $F0
00009170 0805 005C F0               		dc.b 8,	5, 0, $5C, $F0
00009175 E807 0054 00               		dc.b $E8, 7, 0,	$54, 0
0000917A 0805 005C 00               		dc.b 8,	5, 0, $5C, 0
00009180 00                         		even
00009180 00                         		even
00009180                            
00009180                            ; ===========================================================================
00009180                            ; ---------------------------------------------------------------------------
00009180                            ; Object 2A - doors (SBZ)
00009180                            ; ---------------------------------------------------------------------------
00009180                            
00009180                            Obj2A:					; XREF: Obj_Index
00009180 7000                       		moveq	#0,d0
00009182 1028 0024                  		move.b	$24(a0),d0
00009186 323B 0000                  		move.w	Obj2A_Index(pc,d0.w),d1
0000918A 4EFB 1000                  		jmp	Obj2A_Index(pc,d1.w)
0000918E                            ; ===========================================================================
0000918E 0000                       Obj2A_Index:	dc.w Obj2A_Main-Obj2A_Index
00009190 0000                       		dc.w Obj2A_OpenShut-Obj2A_Index
00009192                            ; ===========================================================================
00009192                            
00009192                            Obj2A_Main:				; XREF: Obj2A_Index
00009192 5428 0024                  		addq.b	#2,$24(a0)
00009196 217C 0000 0000 0004        		move.l	#Map_obj2A,4(a0)
0000919E 317C 42E8 0002             		move.w	#$42E8,2(a0)
000091A4 0028 0004 0001             		ori.b	#4,1(a0)
000091AA 117C 0008 0019             		move.b	#8,$19(a0)
000091B0 117C 0004 0018             		move.b	#4,$18(a0)
000091B6                            
000091B6                            Obj2A_OpenShut:				; XREF: Obj2A_Index
000091B6 323C 0040                  		move.w	#$40,d1
000091BA 4228 001C                  		clr.b	$1C(a0)		; use "closing"	animation
000091BE 3038 D008                  		move.w	($FFFFD008).w,d0
000091C2 D041                       		add.w	d1,d0
000091C4 B068 0008                  		cmp.w	8(a0),d0
000091C8 6500                       		bcs.s	Obj2A_Animate
000091CA 9041                       		sub.w	d1,d0
000091CC 9041                       		sub.w	d1,d0
000091CE B068 0008                  		cmp.w	8(a0),d0
000091D2 6400                       		bcc.s	Obj2A_Animate
000091D4 D041                       		add.w	d1,d0
000091D6 B068 0008                  		cmp.w	8(a0),d0
000091DA 6400                       		bcc.s	loc_899A
000091DC 0828 0000 0022             		btst	#0,$22(a0)
000091E2 6600                       		bne.s	Obj2A_Animate
000091E4 6000                       		bra.s	Obj2A_Open
000091E6                            ; ===========================================================================
000091E6                            
000091E6                            loc_899A:				; XREF: Obj2A_OpenShut
000091E6 0828 0000 0022             		btst	#0,$22(a0)
000091EC 6700                       		beq.s	Obj2A_Animate
000091EE                            
000091EE                            Obj2A_Open:				; XREF: Obj2A_OpenShut
000091EE 117C 0001 001C             		move.b	#1,$1C(a0)	; use "opening"	animation
000091F4                            
000091F4                            Obj2A_Animate:				; XREF: Obj2A_OpenShut; loc_899A
000091F4 43F9 0000 0000             		lea	(Ani_obj2A).l,a1
000091FA 6100 0000                  		bsr.w	AnimateSprite
000091FE 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
00009202 6600                       		bne.s	Obj2A_MarkAsUsed ; if yes, branch
00009204 323C 0011                  		move.w	#$11,d1
00009208 343C 0020                  		move.w	#$20,d2
0000920C 3602                       		move.w	d2,d3
0000920E 5243                       		addq.w	#1,d3
00009210 3828 0008                  		move.w	8(a0),d4
00009214 6100 0000                  		bsr.w	SolidObject
00009218                            
00009218                            Obj2A_MarkAsUsed:
00009218 6000 0000                  		bra.w	MarkObjGone
0000921C                            ; ===========================================================================
0000921C                            Ani_obj2A:
0000921C                            	include "_anim\obj2A.asm"
0000921C                            ; ---------------------------------------------------------------------------
0000921C                            ; Animation script - doors (SBZ)
0000921C                            ; ---------------------------------------------------------------------------
0000921C 0000                       		dc.w Ani_obj2A_Shut-Ani_obj2A
0000921E 0000                       		dc.w Ani_obj2A_Open-Ani_obj2A
00009220 0008 0706 0504 0302 0100+  Ani_obj2A_Shut:	dc.b 0,	8, 7, 6, 5, 4, 3, 2, 1,	0, $FE,	1
0000922C 0000 0102 0304 0506 0708+  Ani_obj2A_Open:	dc.b 0,	0, 1, 2, 3, 4, 5, 6, 7,	8, $FE,	1
00009238                            		even
00009238                            		even
00009238                            
00009238                            ; ---------------------------------------------------------------------------
00009238                            ; Sprite mappings - doors (SBZ)
00009238                            ; ---------------------------------------------------------------------------
00009238                            Map_obj2A:
00009238                            	include "_maps\obj2A.asm"
00009238                            ; ---------------------------------------------------------------------------
00009238                            ; Sprite mappings - doors (SBZ)
00009238                            ; ---------------------------------------------------------------------------
00009238 0000 0000                  		dc.w byte_89FE-Map_obj2A, byte_8A09-Map_obj2A
0000923C 0000 0000                  		dc.w byte_8A14-Map_obj2A, byte_8A1F-Map_obj2A
00009240 0000 0000                  		dc.w byte_8A2A-Map_obj2A, byte_8A35-Map_obj2A
00009244 0000 0000                  		dc.w byte_8A40-Map_obj2A, byte_8A4B-Map_obj2A
00009248 0000                       		dc.w byte_8A56-Map_obj2A
0000924A 02                         byte_89FE:	dc.b 2
0000924B E007 0800 F8               		dc.b $E0, 7, 8,	0, $F8	; door closed
00009250 0007 0800 F8               		dc.b 0,	7, 8, 0, $F8
00009255 02                         byte_8A09:	dc.b 2
00009256 DC07 0800 F8               		dc.b $DC, 7, 8,	0, $F8
0000925B 0407 0800 F8               		dc.b 4,	7, 8, 0, $F8
00009260 02                         byte_8A14:	dc.b 2
00009261 D807 0800 F8               		dc.b $D8, 7, 8,	0, $F8
00009266 0807 0800 F8               		dc.b 8,	7, 8, 0, $F8
0000926B 02                         byte_8A1F:	dc.b 2
0000926C D407 0800 F8               		dc.b $D4, 7, 8,	0, $F8
00009271 0C07 0800 F8               		dc.b $C, 7, 8, 0, $F8
00009276 02                         byte_8A2A:	dc.b 2
00009277 D007 0800 F8               		dc.b $D0, 7, 8,	0, $F8
0000927C 1007 0800 F8               		dc.b $10, 7, 8,	0, $F8
00009281 02                         byte_8A35:	dc.b 2
00009282 CC07 0800 F8               		dc.b $CC, 7, 8,	0, $F8
00009287 1407 0800 F8               		dc.b $14, 7, 8,	0, $F8
0000928C 02                         byte_8A40:	dc.b 2
0000928D C807 0800 F8               		dc.b $C8, 7, 8,	0, $F8
00009292 1807 0800 F8               		dc.b $18, 7, 8,	0, $F8
00009297 02                         byte_8A4B:	dc.b 2
00009298 C407 0800 F8               		dc.b $C4, 7, 8,	0, $F8
0000929D 1C07 0800 F8               		dc.b $1C, 7, 8,	0, $F8
000092A2 02                         byte_8A56:	dc.b 2
000092A3 C007 0800 F8               		dc.b $C0, 7, 8,	0, $F8	; door fully open
000092A8 2007 0800 F8               		dc.b $20, 7, 8,	0, $F8
000092AE 00                         		even
000092AE 00                         		even
000092AE                            
000092AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000092AE                            
000092AE                            
000092AE                            Obj44_SolidWall:			; XREF: Obj44_Solid
000092AE 6100 0000                  		bsr.w	Obj44_SolidWall2
000092B2 6700                       		beq.s	loc_8AA8
000092B4 6B00 0000                  		bmi.w	loc_8AC4
000092B8 4A40                       		tst.w	d0
000092BA 6700 0000                  		beq.w	loc_8A92
000092BE 6B00                       		bmi.s	loc_8A7C
000092C0 4A69 0010                  		tst.w	$10(a1)
000092C4 6B00                       		bmi.s	loc_8A92
000092C6 6000                       		bra.s	loc_8A82
000092C8                            ; ===========================================================================
000092C8                            
000092C8                            loc_8A7C:
000092C8 4A69 0010                  		tst.w	$10(a1)
000092CC 6A00                       		bpl.s	loc_8A92
000092CE                            
000092CE                            loc_8A82:
000092CE 9169 0008                  		sub.w	d0,8(a1)
000092D2 337C 0000 0014             		move.w	#0,$14(a1)
000092D8 337C 0000 0010             		move.w	#0,$10(a1)
000092DE                            
000092DE                            loc_8A92:
000092DE 0829 0001 0022             		btst	#1,$22(a1)
000092E4 6600                       		bne.s	loc_8AB6
000092E6 08E9 0005 0022             		bset	#5,$22(a1)
000092EC 08E8 0005 0022             		bset	#5,$22(a0)
000092F2 4E75                       		rts	
000092F4                            ; ===========================================================================
000092F4                            
000092F4                            loc_8AA8:
000092F4 0828 0005 0022             		btst	#5,$22(a0)
000092FA 6700                       		beq.s	locret_8AC2
000092FC 337C 0001 001C             		move.w	#1,$1C(a1)
00009302                            
00009302                            loc_8AB6:
00009302 08A8 0005 0022             		bclr	#5,$22(a0)
00009308 08A9 0005 0022             		bclr	#5,$22(a1)
0000930E                            
0000930E                            locret_8AC2:
0000930E 4E75                       		rts	
00009310                            ; ===========================================================================
00009310                            
00009310                            loc_8AC4:
00009310 4A69 0012                  		tst.w	$12(a1)
00009314 6A00                       		bpl.s	locret_8AD8
00009316 4A43                       		tst.w	d3
00009318 6A00                       		bpl.s	locret_8AD8
0000931A 9769 000C                  		sub.w	d3,$C(a1)
0000931E 337C 0000 0012             		move.w	#0,$12(a1)
00009324                            
00009324                            locret_8AD8:
00009324 4E75                       		rts	
00009326                            ; End of function Obj44_SolidWall
00009326                            
00009326                            
00009326                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009326                            
00009326                            
00009326                            Obj44_SolidWall2:			; XREF: Obj44_SolidWall
00009326 43F8 D000                  		lea	($FFFFD000).w,a1
0000932A 3029 0008                  		move.w	8(a1),d0
0000932E 9068 0008                  		sub.w	8(a0),d0
00009332 D041                       		add.w	d1,d0
00009334 6B00                       		bmi.s	loc_8B48
00009336 3601                       		move.w	d1,d3
00009338 D643                       		add.w	d3,d3
0000933A B043                       		cmp.w	d3,d0
0000933C 6200                       		bhi.s	loc_8B48
0000933E 1629 0016                  		move.b	$16(a1),d3
00009342 4883                       		ext.w	d3
00009344 D443                       		add.w	d3,d2
00009346 3629 000C                  		move.w	$C(a1),d3
0000934A 9668 000C                  		sub.w	$C(a0),d3
0000934E D642                       		add.w	d2,d3
00009350 6B00                       		bmi.s	loc_8B48
00009352 3802                       		move.w	d2,d4
00009354 D844                       		add.w	d4,d4
00009356 B644                       		cmp.w	d4,d3
00009358 6400                       		bcc.s	loc_8B48
0000935A 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0000935E 6B00                       		bmi.s	loc_8B48
00009360 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00009366 6400                       		bcc.s	loc_8B48
00009368 4A78 FE08                  		tst.w	($FFFFFE08).w
0000936C 6600                       		bne.s	loc_8B48
0000936E 3A00                       		move.w	d0,d5
00009370 B240                       		cmp.w	d0,d1
00009372 6400                       		bcc.s	loc_8B30
00009374 D241                       		add.w	d1,d1
00009376 9041                       		sub.w	d1,d0
00009378 3A00                       		move.w	d0,d5
0000937A 4445                       		neg.w	d5
0000937C                            
0000937C                            loc_8B30:
0000937C 3203                       		move.w	d3,d1
0000937E B443                       		cmp.w	d3,d2
00009380 6400                       		bcc.s	loc_8B3C
00009382 9644                       		sub.w	d4,d3
00009384 3203                       		move.w	d3,d1
00009386 4441                       		neg.w	d1
00009388                            
00009388                            loc_8B3C:
00009388 BA41                       		cmp.w	d1,d5
0000938A 6200                       		bhi.s	loc_8B44
0000938C 7801                       		moveq	#1,d4
0000938E 4E75                       		rts	
00009390                            ; ===========================================================================
00009390                            
00009390                            loc_8B44:
00009390 78FF                       		moveq	#-1,d4
00009392 4E75                       		rts	
00009394                            ; ===========================================================================
00009394                            
00009394                            loc_8B48:
00009394 7800                       		moveq	#0,d4
00009396 4E75                       		rts	
00009398                            ; End of function Obj44_SolidWall2
00009398                            
00009398                            ; ===========================================================================
00009398                            ; ---------------------------------------------------------------------------
00009398                            ; Object 1E - Ball Hog enemy (SBZ)
00009398                            ; ---------------------------------------------------------------------------
00009398                            
00009398                            Obj1E:					; XREF: Obj_Index
00009398 7000                       		moveq	#0,d0
0000939A 1028 0024                  		move.b	$24(a0),d0
0000939E 323B 0000                  		move.w	Obj1E_Index(pc,d0.w),d1
000093A2 4EFB 1000                  		jmp	Obj1E_Index(pc,d1.w)
000093A6                            ; ===========================================================================
000093A6 0000                       Obj1E_Index:	dc.w Obj1E_Main-Obj1E_Index
000093A8 0000                       		dc.w Obj1E_Action-Obj1E_Index
000093AA                            ; ===========================================================================
000093AA                            
000093AA                            Obj1E_Main:				; XREF: Obj1E_Index
000093AA 117C 0013 0016             		move.b	#$13,$16(a0)
000093B0 117C 0008 0017             		move.b	#8,$17(a0)
000093B6 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
000093BE 317C 2302 0002             		move.w	#$2302,2(a0)
000093C4 117C 0004 0001             		move.b	#4,1(a0)
000093CA 117C 0004 0018             		move.b	#4,$18(a0)
000093D0 117C 0005 0020             		move.b	#5,$20(a0)
000093D6 117C 000C 0019             		move.b	#$C,$19(a0)
000093DC 6100 0000                  		bsr.w	ObjectFall
000093E0 4EB9 0000 0000             		jsr	ObjHitFloor
000093E6 4A41                       		tst.w	d1
000093E8 6A00                       		bpl.s	locret_8BAC
000093EA D368 000C                  		add.w	d1,$C(a0)
000093EE 317C 0000 0012             		move.w	#0,$12(a0)
000093F4 5428 0024                  		addq.b	#2,$24(a0)
000093F8                            
000093F8                            locret_8BAC:
000093F8 4E75                       		rts	
000093FA                            ; ===========================================================================
000093FA                            
000093FA                            Obj1E_Action:				; XREF: Obj1E_Index
000093FA 43F9 0000 0000             		lea	(Ani_obj1E).l,a1
00009400 6100 0000                  		bsr.w	AnimateSprite
00009404 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is final frame (01) displayed?
0000940A 6600                       		bne.s	Obj1E_SetBall	; if not, branch
0000940C 4A28 0032                  		tst.b	$32(a0)		; is it	set to launch cannonball?
00009410 6700                       		beq.s	Obj1E_MakeBall	; if yes, branch
00009412 6000                       		bra.s	Obj1E_MarkAsGone
00009414                            ; ===========================================================================
00009414                            
00009414                            Obj1E_SetBall:				; XREF: Obj1E_Action
00009414 4228 0032                  		clr.b	$32(a0)		; set to launch	cannonball
00009418                            
00009418                            Obj1E_MarkAsGone:			; XREF: Obj1E_Action
00009418 6000 0000                  		bra.w	MarkObjGone
0000941C                            ; ===========================================================================
0000941C                            
0000941C                            Obj1E_MakeBall:				; XREF: Obj1E_Action
0000941C 117C 0001 0032             		move.b	#1,$32(a0)
00009422 6100 0000                  		bsr.w	SingleObjLoad
00009426 6600                       		bne.s	loc_8C1A
00009428 12BC 0020                  		move.b	#$20,0(a1)	; load cannonball object ($20)
0000942C 3368 0008 0008             		move.w	8(a0),8(a1)
00009432 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009438 337C FF00 0010             		move.w	#-$100,$10(a1)	; cannonball bounces to	the left
0000943E 337C 0000 0012             		move.w	#0,$12(a1)
00009444 70FC                       		moveq	#-4,d0
00009446 0828 0000 0022             		btst	#0,$22(a0)	; is Ball Hog facing right?
0000944C 6700                       		beq.s	loc_8C0A	; if not, branch
0000944E 4440                       		neg.w	d0
00009450 4469 0010                  		neg.w	$10(a1)		; cannonball bounces to	the right
00009454                            
00009454                            loc_8C0A:
00009454 D169 0008                  		add.w	d0,8(a1)
00009458 0669 000C 000C             		addi.w	#$C,$C(a1)
0000945E 1368 0028 0028             		move.b	$28(a0),$28(a1)	; copy object type from	Ball Hog
00009464                            
00009464                            loc_8C1A:
00009464 60B2                       		bra.s	Obj1E_MarkAsGone
00009466                            ; ===========================================================================
00009466                            ; ---------------------------------------------------------------------------
00009466                            ; Object 20 - cannonball that Ball Hog throws (SBZ)
00009466                            ; ---------------------------------------------------------------------------
00009466                            
00009466                            Obj20:					; XREF: Obj_Index
00009466 7000                       		moveq	#0,d0
00009468 1028 0024                  		move.b	$24(a0),d0
0000946C 323B 0000                  		move.w	Obj20_Index(pc,d0.w),d1
00009470 4EFB 1000                  		jmp	Obj20_Index(pc,d1.w)
00009474                            ; ===========================================================================
00009474 0000                       Obj20_Index:	dc.w Obj20_Main-Obj20_Index
00009476 0000                       		dc.w Obj20_Bounce-Obj20_Index
00009478                            ; ===========================================================================
00009478                            
00009478                            Obj20_Main:				; XREF: Obj20_Index
00009478 5428 0024                  		addq.b	#2,$24(a0)
0000947C 117C 0007 0016             		move.b	#7,$16(a0)
00009482 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
0000948A 317C 2302 0002             		move.w	#$2302,2(a0)
00009490 117C 0004 0001             		move.b	#4,1(a0)
00009496 117C 0003 0018             		move.b	#3,$18(a0)
0000949C 117C 0087 0020             		move.b	#$87,$20(a0)
000094A2 117C 0008 0019             		move.b	#8,$19(a0)
000094A8 7000                       		moveq	#0,d0
000094AA 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
000094AE C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 frames	(1 second)
000094B2 3140 0030                  		move.w	d0,$30(a0)	; set explosion	time
000094B6 117C 0004 001A             		move.b	#4,$1A(a0)
000094BC                            
000094BC                            Obj20_Bounce:				; XREF: Obj20_Index
000094BC 4EB9 0000 0000             		jsr	ObjectFall
000094C2 4A68 0012                  		tst.w	$12(a0)
000094C6 6B00                       		bmi.s	Obj20_ChkExplode
000094C8 4EB9 0000 0000             		jsr	ObjHitFloor
000094CE 4A41                       		tst.w	d1
000094D0 6A00                       		bpl.s	Obj20_ChkExplode
000094D2 D368 000C                  		add.w	d1,$C(a0)
000094D6 317C FD00 0012             		move.w	#-$300,$12(a0)
000094DC 4A03                       		tst.b	d3
000094DE 6700                       		beq.s	Obj20_ChkExplode
000094E0 6B00                       		bmi.s	loc_8CA4
000094E2 4A68 0010                  		tst.w	$10(a0)
000094E6 6A00                       		bpl.s	Obj20_ChkExplode
000094E8 4468 0010                  		neg.w	$10(a0)
000094EC 6000                       		bra.s	Obj20_ChkExplode
000094EE                            ; ===========================================================================
000094EE                            
000094EE                            loc_8CA4:				; XREF: Obj20_Bounce
000094EE 4A68 0010                  		tst.w	$10(a0)
000094F2 6B00                       		bmi.s	Obj20_ChkExplode
000094F4 4468 0010                  		neg.w	$10(a0)
000094F8                            
000094F8                            Obj20_ChkExplode:			; XREF: Obj20_Bounce
000094F8 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from explosion time
000094FC 6A00                       		bpl.s	Obj20_Animate	; if time is > 0, branch
000094FE 10BC 0024                  		move.b	#$24,0(a0)
00009502 10BC 003F                  		move.b	#$3F,0(a0)	; change object	to an explosion	($3F)
00009506 117C 0000 0024             		move.b	#0,$24(a0)	; reset	routine	counter
0000950C 6000 0000                  		bra.w	Obj3F		; jump to explosion code
00009510                            ; ===========================================================================
00009510                            
00009510                            Obj20_Animate:				; XREF: Obj20_ChkExplode
00009510 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00009514 6A00                       		bpl.s	Obj20_Display
00009516 117C 0005 001E             		move.b	#5,$1E(a0)	; set frame duration to	5 frames
0000951C 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
00009522                            
00009522                            Obj20_Display:
00009522 6100 0000                  		bsr.w	DisplaySprite
00009526 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000952A 0640 00E0                  		addi.w	#$E0,d0
0000952E B068 000C                  		cmp.w	$C(a0),d0	; has object fallen off	the level?
00009532 6500 0000                  		bcs.w	DeleteObject	; if yes, branch
00009536 4E75                       		rts	
00009538                            ; ===========================================================================
00009538                            ; ---------------------------------------------------------------------------
00009538                            ; Object 24 - explosion	from a destroyed monitor
00009538                            ; ---------------------------------------------------------------------------
00009538                            
00009538                            Obj24:					; XREF: Obj_Index
00009538 7000                       		moveq	#0,d0
0000953A 1028 0024                  		move.b	$24(a0),d0
0000953E 323B 0000                  		move.w	Obj24_Index(pc,d0.w),d1
00009542 4EFB 1000                  		jmp	Obj24_Index(pc,d1.w)
00009546                            ; ===========================================================================
00009546 0000                       Obj24_Index:	dc.w Obj24_Main-Obj24_Index
00009548 0000                       		dc.w Obj24_Animate-Obj24_Index
0000954A                            ; ===========================================================================
0000954A                            
0000954A                            Obj24_Main:				; XREF: Obj24_Index
0000954A 5428 0024                  		addq.b	#2,$24(a0)
0000954E 217C 0000 0000 0004        		move.l	#Map_obj24,4(a0)
00009556 317C 041C 0002             		move.w	#$41C,2(a0)
0000955C 117C 0004 0001             		move.b	#4,1(a0)
00009562 117C 0001 0018             		move.b	#1,$18(a0)
00009568 117C 0000 0020             		move.b	#0,$20(a0)
0000956E 117C 000C 0019             		move.b	#$C,$19(a0)
00009574 117C 0009 001E             		move.b	#9,$1E(a0)
0000957A 117C 0000 001A             		move.b	#0,$1A(a0)
00009580 303C 00A5                  		move.w	#$A5,d0
00009584 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play explosion sound
0000958A                            
0000958A                            Obj24_Animate:				; XREF: Obj24_Index
0000958A 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000958E 6A00                       		bpl.s	Obj24_Display
00009590 117C 0009 001E             		move.b	#9,$1E(a0)	; set frame duration to	9 frames
00009596 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
0000959A 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is the final frame (04) displayed?
000095A0 6700 0000                  		beq.w	DeleteObject	; if yes, branch
000095A4                            
000095A4                            Obj24_Display:
000095A4 6000 0000                  		bra.w	DisplaySprite
000095A8                            ; ===========================================================================
000095A8                            ; ---------------------------------------------------------------------------
000095A8                            ; Object 27 - explosion	from a destroyed enemy
000095A8                            ; ---------------------------------------------------------------------------
000095A8                            
000095A8                            Obj27:					; XREF: Obj_Index
000095A8 7000                       		moveq	#0,d0
000095AA 1028 0024                  		move.b	$24(a0),d0
000095AE 323B 0000                  		move.w	Obj27_Index(pc,d0.w),d1
000095B2 4EFB 1000                  		jmp	Obj27_Index(pc,d1.w)
000095B6                            ; ===========================================================================
000095B6 0000                       Obj27_Index:	dc.w Obj27_LoadAnimal-Obj27_Index
000095B8 0000                       		dc.w Obj27_Main-Obj27_Index
000095BA 0000                       		dc.w Obj27_Animate-Obj27_Index
000095BC                            ; ===========================================================================
000095BC                            
000095BC                            Obj27_LoadAnimal:			; XREF: Obj27_Index
000095BC 5428 0024                  		addq.b	#2,$24(a0)
000095C0 6100 0000                  		bsr.w	SingleObjLoad
000095C4 6600                       		bne.s	Obj27_Main
000095C6 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
000095CA 3368 0008 0008             		move.w	8(a0),8(a1)
000095D0 3368 000C 000C             		move.w	$C(a0),$C(a1)
000095D6 3368 003E 003E             		move.w	$3E(a0),$3E(a1)
000095DC                            
000095DC                            Obj27_Main:				; XREF: Obj27_Index
000095DC 5428 0024                  		addq.b	#2,$24(a0)
000095E0 217C 0000 0000 0004        		move.l	#Map_obj27,4(a0)
000095E8 317C 05A0 0002             		move.w	#$5A0,2(a0)
000095EE 117C 0004 0001             		move.b	#4,1(a0)
000095F4 117C 0001 0018             		move.b	#1,$18(a0)
000095FA 117C 0000 0020             		move.b	#0,$20(a0)
00009600 117C 000C 0019             		move.b	#$C,$19(a0)
00009606                            		; move.b	#7,$1E(a0)	; set frame duration to	7 frames
00009606 117C 000E 001E             		move.b	#$E,$1E(a0)	; GMZ
0000960C 117C 0000 001A             		move.b	#0,$1A(a0)
00009612 303C 00C1                  		move.w	#$C1,d0
00009616 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play breaking enemy sound
0000961C                            
0000961C 45F9 0000 0000             		lea	(Obj27_ExplosionXYSpd).l,a2	; GMZ: Get Explosion X/Y Speeds according to subtype
00009622 1028 0028                  		move.b	$28(a0),d0
00009626 3172 0000 0010             		move.w	(a2,d0.w),$10(a0)
0000962C 3172 0002 0012             		move.w	2(a2,d0.w),$12(a0)
00009632                            
00009632                            Obj27_Animate:				; XREF: Obj27_Index
00009632 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00009636 6A00                       		bpl.s	Obj27_Display
00009638                            		; move.b	#7,$1E(a0)	; set frame duration to	7 frames
00009638 117C 000E 001E             		move.b	#$E,$1E(a0)	; GMZ
0000963E 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
00009642 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is the final frame (05) displayed?
00009648 6700 0000                  		beq.w	DeleteObject	; if yes, branch
0000964C                            
0000964C                            Obj27_Display:
0000964C 4EB9 0000 0000             		jsr	SpeedToPos	; GMZ
00009652 0668 0038 0012             		addi.w	#$38,$12(a0)	; GMZ: Explosion Gravity
00009658 6000 0000                  		bra.w	DisplaySprite
0000965C                            ; ===========================================================================
0000965C                            ; ---------------------------------------------------------------------------
0000965C                            Obj27_ExplosionXYSpd:
0000965C                            		; dc.w	-$350, -$300	; Left
0000965C                            		; dc.w	-$200, -$450	; Near middle (left)
0000965C                            		; dc.w	0, -$500	; Middle
0000965C                            		; dc.w	$200, -$450	; Near middle (right)
0000965C                            		; dc.w	$350, -$300	; Right
0000965C                            
0000965C FEB0 FC00                  		dc.w	-$150, -$400	; Left
00009660 FF00 FAB0                  		dc.w	-$100, -$550	; Near middle (left)
00009664 0000 FA00                  		dc.w	0, -$600	; Middle
00009668 0100 FAB0                  		dc.w	$100, -$550	; Near middle (right)
0000966C 0150 FC00                  		dc.w	$150, -$400	; Right
00009670                            
00009670 6869 2068 656C 6C6F 2068+  		dc.b	"hi hello hru -garblemarden"
0000968A                            ; ---------------------------------------------------------------------------
0000968A                            ; Object 3F - explosion	from a destroyed boss, bomb or cannonball
0000968A                            ; ---------------------------------------------------------------------------
0000968A                            
0000968A                            Obj3F:					; XREF: Obj_Index
0000968A 7000                       		moveq	#0,d0
0000968C 1028 0024                  		move.b	$24(a0),d0
00009690 323B 0000                  		move.w	Obj3F_Index(pc,d0.w),d1
00009694 4EFB 1000                  		jmp	Obj3F_Index(pc,d1.w)
00009698                            ; ===========================================================================
00009698 0000                       Obj3F_Index:	dc.w Obj3F_Main-Obj3F_Index
0000969A FF9A                       		dc.w Obj27_Animate-Obj3F_Index
0000969C                            ; ===========================================================================
0000969C                            
0000969C                            Obj3F_Main:				; XREF: Obj3F_Index
0000969C 5428 0024                  		addq.b	#2,$24(a0)
000096A0 217C 0000 0000 0004        		move.l	#Map_obj3F,4(a0)
000096A8 317C 05A0 0002             		move.w	#$5A0,2(a0)
000096AE 117C 0004 0001             		move.b	#4,1(a0)
000096B4 117C 0001 0018             		move.b	#1,$18(a0)
000096BA 117C 0000 0020             		move.b	#0,$20(a0)
000096C0 117C 000C 0019             		move.b	#$C,$19(a0)
000096C6 117C 0007 001E             		move.b	#7,$1E(a0)
000096CC 117C 0000 001A             		move.b	#0,$1A(a0)
000096D2 303C 00C4                  		move.w	#$C4,d0
000096D6 4EF9 0000 15D2             		jmp	(PlaySound_Special).l ;	play exploding bomb sound
000096DC                            ; ===========================================================================
000096DC                            Ani_obj1E:
000096DC                            	include "_anim\obj1E.asm"
000096DC                            ; ---------------------------------------------------------------------------
000096DC                            ; Animation script - doors (SBZ)
000096DC                            ; ---------------------------------------------------------------------------
000096DC 0000                       		dc.w byte_8E4A-Ani_obj1E
000096DE 0900 0002 0203 0200 0002+  byte_8E4A:	dc.b 9,	0, 0, 2, 2, 3, 2, 0, 0,	2, 2, 3, 2, 0, 0, 2, 2, 3, 2, 0, 0, 1, $FF
000096F6 00                         		even
000096F6 00                         		even
000096F6                            
000096F6                            ; ---------------------------------------------------------------------------
000096F6                            ; Sprite mappings - Ball Hog enemy (SBZ)
000096F6                            ; ---------------------------------------------------------------------------
000096F6                            Map_obj1E:
000096F6                            	include "_maps\obj1E.asm"
000096F6                            Map_a7ad:
000096F6 0000                       Map_a7ad_0: 	dc.w Map_a7ad_C-Map_a7ad
000096F8 0000                       Map_a7ad_2: 	dc.w Map_a7ad_17-Map_a7ad
000096FA 0000                       Map_a7ad_4: 	dc.w Map_a7ad_22-Map_a7ad
000096FC 0000                       Map_a7ad_6: 	dc.w Map_a7ad_2D-Map_a7ad
000096FE 0000                       Map_a7ad_8: 	dc.w Map_a7ad_38-Map_a7ad
00009700 0000                       Map_a7ad_A: 	dc.w Map_a7ad_43-Map_a7ad
00009702 02                         Map_a7ad_C: 	dc.b $2
00009703 EF09 0000 F4               	dc.b $EF, $9, $0, $0, $F4
00009708 FF0A 0006 F4               	dc.b $FF, $A, $0, $6, $F4
0000970D 02                         Map_a7ad_17: 	dc.b $2
0000970E EF09 0000 F4               	dc.b $EF, $9, $0, $0, $F4
00009713 FF0A 0006 F4               	dc.b $FF, $A, $0, $6, $F4
00009718 02                         Map_a7ad_22: 	dc.b $2
00009719 F409 0000 F4               	dc.b $F4, $9, $0, $0, $F4
0000971E 0409 0018 F4               	dc.b $4, $9, $0, $18, $F4
00009723 02                         Map_a7ad_2D: 	dc.b $2
00009724 E409 0000 F4               	dc.b $E4, $9, $0, $0, $F4
00009729 F40A 001E F4               	dc.b $F4, $A, $0, $1E, $F4
0000972E 02                         Map_a7ad_38: 	dc.b $2
0000972F F805 0027 F8               	dc.b $F8, $5, $0, $27, $F8
00009734 E805 000F F8               	dc.b $E8, $5, $0, $F, $F8
00009739 02                         Map_a7ad_43: 	dc.b $2
0000973A F805 002B F8               	dc.b $F8, $5, $0, $2B, $F8
0000973F E805 0013 F8               	dc.b $E8, $5, $0, $13, $F8
00009744                            	even
00009744                            	even
00009744                            
00009744                            ; ---------------------------------------------------------------------------
00009744                            ; Sprite mappings - explosion
00009744                            ; ---------------------------------------------------------------------------
00009744                            Map_obj24:
00009744                            	include "_maps\obj24.asm"
00009744                            ; ---------------------------------------------------------------------------
00009744                            ; Sprite mappings - explosion
00009744                            ; ---------------------------------------------------------------------------
00009744 0000 0000                  		dc.w byte_8EAE-Map_obj24, byte_8EB4-Map_obj24
00009748 0000 0000                  		dc.w byte_8EBA-Map_obj24, byte_8EC0-Map_obj24
0000974C 01                         byte_8EAE:	dc.b 1
0000974D F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00009752 01                         byte_8EB4:	dc.b 1
00009753 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
00009758 01                         byte_8EBA:	dc.b 1
00009759 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0000975E 01                         byte_8EC0:	dc.b 1
0000975F F40A 001B F4               		dc.b $F4, $A, 0, $1B, $F4
00009764                            		even
00009764                            		even
00009764                            
00009764                            ; ---------------------------------------------------------------------------
00009764                            ; Sprite mappings - explosion
00009764                            ; ---------------------------------------------------------------------------
00009764 0000 0000                  Map_obj27:	dc.w byte_8ED0-Map_obj27, byte_8ED6-Map_obj27
00009768 0000 0000                  		dc.w byte_8EDC-Map_obj27, byte_8EE2-Map_obj27
0000976C 0000                       		dc.w byte_8EF7-Map_obj27
0000976E 01                         byte_8ED0:	dc.b 1
0000976F F809 0000 F4               		dc.b $F8, 9, 0,	0, $F4
00009774 01                         byte_8ED6:	dc.b 1
00009775 F00F 0006 F0               		dc.b $F0, $F, 0, 6, $F0
0000977A 01                         byte_8EDC:	dc.b 1
0000977B F00F 0016 F0               		dc.b $F0, $F, 0, $16, $F0
00009780 04                         byte_8EE2:	dc.b 4
00009781 EC0A 0026 EC               		dc.b $EC, $A, 0, $26, $EC
00009786 EC05 002F 04               		dc.b $EC, 5, 0,	$2F, 4
0000978B 0405 182F EC               		dc.b 4,	5, $18,	$2F, $EC
00009790 FC0A 1826 FC               		dc.b $FC, $A, $18, $26,	$FC
00009795 04                         byte_8EF7:	dc.b 4
00009796 EC0A 0033 EC               		dc.b $EC, $A, 0, $33, $EC
0000979B EC05 003C 04               		dc.b $EC, 5, 0,	$3C, 4
000097A0 0405 183C EC               		dc.b 4,	5, $18,	$3C, $EC
000097A5 FC0A 1833 FC               		dc.b $FC, $A, $18, $33,	$FC
000097AA                            		even
000097AA                            ; ---------------------------------------------------------------------------
000097AA                            ; Sprite mappings - explosion from when	a boss is destroyed
000097AA                            ; ---------------------------------------------------------------------------
000097AA FFC4                       Map_obj3F:	dc.w byte_8ED0-Map_obj3F
000097AC 0000                       		dc.w byte_8F16-Map_obj3F
000097AE 0000                       		dc.w byte_8F1C-Map_obj3F
000097B0 FFD6                       		dc.w byte_8EE2-Map_obj3F
000097B2 FFEB                       		dc.w byte_8EF7-Map_obj3F
000097B4 01                         byte_8F16:	dc.b 1
000097B5 F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
000097BA 01                         byte_8F1C:	dc.b 1
000097BB F00F 0050 F0               		dc.b $F0, $F, 0, $50, $F0
000097C0                            		even
000097C0                            ; ===========================================================================
000097C0                            ; ---------------------------------------------------------------------------
000097C0                            ; Object 28 - animals
000097C0                            ; ---------------------------------------------------------------------------
000097C0                            
000097C0                            Obj28:					; XREF: Obj_Index
000097C0 7000                       		moveq	#0,d0
000097C2 1028 0024                  		move.b	$24(a0),d0
000097C6 323B 0000                  		move.w	Obj28_Index(pc,d0.w),d1
000097CA 4EFB 1000                  		jmp	Obj28_Index(pc,d1.w)
000097CE                            ; ===========================================================================
000097CE 0000 0000                  Obj28_Index:	dc.w Obj28_Ending-Obj28_Index, loc_912A-Obj28_Index
000097D2 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
000097D6 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9184-Obj28_Index
000097DA 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
000097DE 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9240-Obj28_Index
000097E2 0000 0000                  		dc.w loc_9260-Obj28_Index, loc_9260-Obj28_Index
000097E6 0000 0000                  		dc.w loc_9280-Obj28_Index, loc_92BA-Obj28_Index
000097EA 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
000097EE 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
000097F2 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9370-Obj28_Index
000097F6 0000                       		dc.w loc_92D6-Obj28_Index
000097F8                            
000097F8 0005 0203 0603 0405 0401+  Obj28_VarIndex:	dc.b 0,	5, 2, 3, 6, 3, 4, 5, 4,	1, 0, 1, 0,	5, 0,	5
00009808                            
00009808 FE00 FC00                  Obj28_Variables:dc.w $FE00, $FC00
0000980C 0000 0000                  		dc.l Map_obj28
00009810 FE00 FD00                  		dc.w $FE00, $FD00	; horizontal speed, vertical speed
00009814 0000 0000                  		dc.l Map_obj28a		; mappings address
00009818 FE80 FD00                  		dc.w $FE80, $FD00
0000981C 0000 0000                  		dc.l Map_obj28
00009820 FEC0 FE80                  		dc.w $FEC0, $FE80
00009824 0000 0000                  		dc.l Map_obj28a
00009828 FE40 FD00                  		dc.w $FE40, $FD00
0000982C 0000 0000                  		dc.l Map_obj28b
00009830 FD00 FC00                  		dc.w $FD00, $FC00
00009834 0000 0000                  		dc.l Map_obj28a
00009838 FD80 FC80                  		dc.w $FD80, $FC80
0000983C 0000 0000                  		dc.l Map_obj28b
00009840                            
00009840 FBC0 FC00 FBC0 FC00 FBC0+  Obj28_EndSpeed:	dc.w $FBC0, $FC00, $FBC0, $FC00, $FBC0,	$FC00, $FD00, $FC00
00009850 FD00 FC00 FE80 FD00 FE80+  		dc.w $FD00, $FC00, $FE80, $FD00, $FE80,	$FD00, $FEC0, $FE80
00009860 FE40 FD00 FE00 FD00 FD80+  		dc.w $FE40, $FD00, $FE00, $FD00, $FD80,	$FC80
0000986C                            
0000986C 0000 0000 0000 0000 0000+  Obj28_EndMap:	dc.l Map_obj28a, Map_obj28a, Map_obj28a, Map_obj28, Map_obj28
00009880 0000 0000 0000 0000 0000+  		dc.l Map_obj28,	Map_obj28, Map_obj28a, Map_obj28b, Map_obj28a
00009894 0000 0000                  		dc.l Map_obj28b
00009898                            
00009898 05A5 05A5 05A5 0553 0553+  Obj28_EndVram:	dc.w $5A5, $5A5, $5A5, $553, $553, $573, $573, $585, $593
000098AA 0565 05B3                  		dc.w $565, $5B3
000098AE                            ; ===========================================================================
000098AE                            
000098AE                            Obj28_Ending:				; XREF: Obj28_Index
000098AE 4A28 0028                  		tst.b	$28(a0)		; did animal come from a destroyed enemy?
000098B2 6700 0000                  		beq.w	Obj28_FromEnemy	; if yes, branch
000098B6 7000                       		moveq	#0,d0
000098B8 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
000098BC D040                       		add.w	d0,d0		; multiply d0 by 2
000098BE 1140 0024                  		move.b	d0,$24(a0)	; move d0 to routine counter
000098C2 0440 0014                  		subi.w	#$14,d0
000098C6 317B 00D0 0002             		move.w	Obj28_EndVram(pc,d0.w),2(a0)
000098CC D040                       		add.w	d0,d0
000098CE 217B 009C 0004             		move.l	Obj28_EndMap(pc,d0.w),4(a0)
000098D4 43FA FF6A                  		lea	Obj28_EndSpeed(pc),a1
000098D8 3171 0000 0032             		move.w	(a1,d0.w),$32(a0) ; load horizontal speed
000098DE 3171 0000 0010             		move.w	(a1,d0.w),$10(a0)
000098E4 3171 0002 0034             		move.w	2(a1,d0.w),$34(a0) ; load vertical speed
000098EA 3171 0002 0012             		move.w	2(a1,d0.w),$12(a0)
000098F0 117C 000C 0016             		move.b	#$C,$16(a0)
000098F6 117C 0004 0001             		move.b	#4,1(a0)
000098FC 08E8 0000 0001             		bset	#0,1(a0)
00009902 117C 0006 0018             		move.b	#6,$18(a0)
00009908 117C 0008 0019             		move.b	#8,$19(a0)
0000990E 117C 0007 001E             		move.b	#7,$1E(a0)
00009914 6000 0000                  		bra.w	DisplaySprite
00009918                            ; ===========================================================================
00009918                            
00009918                            Obj28_FromEnemy:			; XREF: Obj28_Ending
00009918 5428 0024                  		addq.b	#2,$24(a0)
0000991C 6100 9428                  		bsr.w	RandomNumber
00009920 0240 0001                  		andi.w	#1,d0
00009924 7200                       		moveq	#0,d1
00009926 1238 FE10                  		move.b	($FFFFFE10).w,d1
0000992A D241                       		add.w	d1,d1
0000992C D240                       		add.w	d0,d1
0000992E 43FA FEC8                  		lea	Obj28_VarIndex(pc),a1
00009932 1031 1000                  		move.b	(a1,d1.w),d0
00009936 1140 0030                  		move.b	d0,$30(a0)
0000993A E748                       		lsl.w	#3,d0
0000993C 43FA FECA                  		lea	Obj28_Variables(pc),a1
00009940 D2C0                       		adda.w	d0,a1
00009942 3159 0032                  		move.w	(a1)+,$32(a0)	; load horizontal speed
00009946 3159 0034                  		move.w	(a1)+,$34(a0)	; load vertical	speed
0000994A 2159 0004                  		move.l	(a1)+,4(a0)	; load mappings
0000994E 317C 0580 0002             		move.w	#$580,2(a0)	; VRAM setting for 1st animal
00009954 0828 0000 0030             		btst	#0,$30(a0)	; is 1st animal	used?
0000995A 6700                       		beq.s	loc_90C0	; if yes, branch
0000995C 317C 0592 0002             		move.w	#$592,2(a0)	; VRAM setting for 2nd animal
00009962                            
00009962                            loc_90C0:
00009962 117C 000C 0016             		move.b	#$C,$16(a0)
00009968 117C 0004 0001             		move.b	#4,1(a0)
0000996E 08E8 0000 0001             		bset	#0,1(a0)
00009974 117C 0006 0018             		move.b	#6,$18(a0)
0000997A 117C 0008 0019             		move.b	#8,$19(a0)
00009980 117C 0007 001E             		move.b	#7,$1E(a0)
00009986 117C 0002 001A             		move.b	#2,$1A(a0)
0000998C 317C FC00 0012             		move.w	#-$400,$12(a0)
00009992 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00009996 6600                       		bne.s	loc_911C
00009998 6100 0000                  		bsr.w	SingleObjLoad
0000999C 6600                       		bne.s	Obj28_Display
0000999E 12BC 0029                  		move.b	#$29,0(a1)	; load points object
000099A2 3368 0008 0008             		move.w	8(a0),8(a1)
000099A8 3368 000C 000C             		move.w	$C(a0),$C(a1)
000099AE 3028 003E                  		move.w	$3E(a0),d0
000099B2 E248                       		lsr.w	#1,d0
000099B4 1340 001A                  		move.b	d0,$1A(a1)
000099B8                            
000099B8                            Obj28_Display:
000099B8 6000 0000                  		bra.w	DisplaySprite
000099BC                            ; ===========================================================================
000099BC                            
000099BC                            loc_911C:
000099BC 117C 0012 0024             		move.b	#$12,$24(a0)
000099C2 4268 0010                  		clr.w	$10(a0)
000099C6 6000 0000                  		bra.w	DisplaySprite
000099CA                            ; ===========================================================================
000099CA                            
000099CA                            loc_912A:				; XREF: Obj28_Index
000099CA 4A28 0001                  		tst.b	1(a0)
000099CE 6A00 0000                  		bpl.w	DeleteObject
000099D2 6100 0000                  		bsr.w	ObjectFall
000099D6 4A68 0012                  		tst.w	$12(a0)
000099DA 6B00                       		bmi.s	loc_9180
000099DC 4EB9 0000 0000             		jsr	ObjHitFloor
000099E2 4A41                       		tst.w	d1
000099E4 6A00                       		bpl.s	loc_9180
000099E6 D368 000C                  		add.w	d1,$C(a0)
000099EA 3168 0032 0010             		move.w	$32(a0),$10(a0)
000099F0 3168 0034 0012             		move.w	$34(a0),$12(a0)
000099F6 117C 0001 001A             		move.b	#1,$1A(a0)
000099FC 1028 0030                  		move.b	$30(a0),d0
00009A00 D000                       		add.b	d0,d0
00009A02 5800                       		addq.b	#4,d0
00009A04 1140 0024                  		move.b	d0,$24(a0)
00009A08 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00009A0C 6700                       		beq.s	loc_9180
00009A0E 0838 0004 FE0F             		btst	#4,($FFFFFE0F).w
00009A14 6700                       		beq.s	loc_9180
00009A16 4468 0010                  		neg.w	$10(a0)
00009A1A 0868 0000 0001             		bchg	#0,1(a0)
00009A20                            
00009A20                            loc_9180:
00009A20 6000 0000                  		bra.w	DisplaySprite
00009A24                            ; ===========================================================================
00009A24                            
00009A24                            loc_9184:				; XREF: Obj28_Index
00009A24 6100 0000                  		bsr.w	ObjectFall
00009A28 117C 0001 001A             		move.b	#1,$1A(a0)
00009A2E 4A68 0012                  		tst.w	$12(a0)
00009A32 6B00                       		bmi.s	loc_91AE
00009A34 117C 0000 001A             		move.b	#0,$1A(a0)
00009A3A 4EB9 0000 0000             		jsr	ObjHitFloor
00009A40 4A41                       		tst.w	d1
00009A42 6A00                       		bpl.s	loc_91AE
00009A44 D368 000C                  		add.w	d1,$C(a0)
00009A48 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009A4E                            
00009A4E                            loc_91AE:
00009A4E 4A28 0028                  		tst.b	$28(a0)
00009A52 6600                       		bne.s	loc_9224
00009A54 4A28 0001                  		tst.b	1(a0)
00009A58 6A00 0000                  		bpl.w	DeleteObject
00009A5C 6000 0000                  		bra.w	DisplaySprite
00009A60                            ; ===========================================================================
00009A60                            
00009A60                            loc_91C0:				; XREF: Obj28_Index
00009A60 6100 0000                  		bsr.w	SpeedToPos
00009A64 0668 0018 0012             		addi.w	#$18,$12(a0)
00009A6A 4A68 0012                  		tst.w	$12(a0)
00009A6E 6B00                       		bmi.s	loc_91FC
00009A70 4EB9 0000 0000             		jsr	ObjHitFloor
00009A76 4A41                       		tst.w	d1
00009A78 6A00                       		bpl.s	loc_91FC
00009A7A D368 000C                  		add.w	d1,$C(a0)
00009A7E 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009A84 4A28 0028                  		tst.b	$28(a0)
00009A88 6700                       		beq.s	loc_91FC
00009A8A 0C28 000A 0028             		cmpi.b	#$A,$28(a0)
00009A90 6700                       		beq.s	loc_91FC
00009A92 4468 0010                  		neg.w	$10(a0)
00009A96 0868 0000 0001             		bchg	#0,1(a0)
00009A9C                            
00009A9C                            loc_91FC:
00009A9C 5328 001E                  		subq.b	#1,$1E(a0)
00009AA0 6A00                       		bpl.s	loc_9212
00009AA2 117C 0001 001E             		move.b	#1,$1E(a0)
00009AA8 5228 001A                  		addq.b	#1,$1A(a0)
00009AAC 0228 0001 001A             		andi.b	#1,$1A(a0)
00009AB2                            
00009AB2                            loc_9212:
00009AB2 4A28 0028                  		tst.b	$28(a0)
00009AB6 6600                       		bne.s	loc_9224
00009AB8 4A28 0001                  		tst.b	1(a0)
00009ABC 6A00 0000                  		bpl.w	DeleteObject
00009AC0 6000 0000                  		bra.w	DisplaySprite
00009AC4                            ; ===========================================================================
00009AC4                            
00009AC4                            loc_9224:				; XREF: Obj28_Index
00009AC4 3028 0008                  		move.w	8(a0),d0
00009AC8 9078 D008                  		sub.w	($FFFFD008).w,d0
00009ACC 6500                       		bcs.s	loc_923C
00009ACE 0440 0180                  		subi.w	#$180,d0
00009AD2 6A00                       		bpl.s	loc_923C
00009AD4 4A28 0001                  		tst.b	1(a0)
00009AD8 6A00 0000                  		bpl.w	DeleteObject
00009ADC                            
00009ADC                            loc_923C:
00009ADC 6000 0000                  		bra.w	DisplaySprite
00009AE0                            ; ===========================================================================
00009AE0                            
00009AE0                            loc_9240:				; XREF: Obj28_Index
00009AE0 4A28 0001                  		tst.b	1(a0)
00009AE4 6A00 0000                  		bpl.w	DeleteObject
00009AE8 5368 0036                  		subq.w	#1,$36(a0)
00009AEC 6600 0000                  		bne.w	loc_925C
00009AF0 117C 0002 0024             		move.b	#2,$24(a0)
00009AF6 117C 0003 0018             		move.b	#3,$18(a0)
00009AFC                            
00009AFC                            loc_925C:
00009AFC 6000 0000                  		bra.w	DisplaySprite
00009B00                            ; ===========================================================================
00009B00                            
00009B00                            loc_9260:				; XREF: Obj28_Index
00009B00 6100 0000                  		bsr.w	sub_9404
00009B04 6400                       		bcc.s	loc_927C
00009B06 3168 0032 0010             		move.w	$32(a0),$10(a0)
00009B0C 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009B12 117C 000E 0024             		move.b	#$E,$24(a0)
00009B18 6000 FF46                  		bra.w	loc_91C0
00009B1C                            ; ===========================================================================
00009B1C                            
00009B1C                            loc_927C:
00009B1C 6000 FFA6                  		bra.w	loc_9224
00009B20                            ; ===========================================================================
00009B20                            
00009B20                            loc_9280:				; XREF: Obj28_Index
00009B20 6100 0000                  		bsr.w	sub_9404
00009B24 6A00                       		bpl.s	loc_92B6
00009B26 4268 0010                  		clr.w	$10(a0)
00009B2A 4268 0032                  		clr.w	$32(a0)
00009B2E 6100 0000                  		bsr.w	SpeedToPos
00009B32 0668 0018 0012             		addi.w	#$18,$12(a0)
00009B38 6100 0000                  		bsr.w	loc_93C4
00009B3C 6100 0000                  		bsr.w	loc_93EC
00009B40 5328 001E                  		subq.b	#1,$1E(a0)
00009B44 6A00                       		bpl.s	loc_92B6
00009B46 117C 0001 001E             		move.b	#1,$1E(a0)
00009B4C 5228 001A                  		addq.b	#1,$1A(a0)
00009B50 0228 0001 001A             		andi.b	#1,$1A(a0)
00009B56                            
00009B56                            loc_92B6:
00009B56 6000 FF6C                  		bra.w	loc_9224
00009B5A                            ; ===========================================================================
00009B5A                            
00009B5A                            loc_92BA:				; XREF: Obj28_Index
00009B5A 6100 0000                  		bsr.w	sub_9404
00009B5E 6A00                       		bpl.s	loc_9310
00009B60 3168 0032 0010             		move.w	$32(a0),$10(a0)
00009B66 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009B6C 117C 0004 0024             		move.b	#4,$24(a0)
00009B72 6000 FEB0                  		bra.w	loc_9184
00009B76                            ; ===========================================================================
00009B76                            
00009B76                            loc_92D6:				; XREF: Obj28_Index
00009B76 6100 0000                  		bsr.w	ObjectFall
00009B7A 117C 0001 001A             		move.b	#1,$1A(a0)
00009B80 4A68 0012                  		tst.w	$12(a0)
00009B84 6B00                       		bmi.s	loc_9310
00009B86 117C 0000 001A             		move.b	#0,$1A(a0)
00009B8C 4EB9 0000 0000             		jsr	ObjHitFloor
00009B92 4A41                       		tst.w	d1
00009B94 6A00                       		bpl.s	loc_9310
00009B96 4628 0029                  		not.b	$29(a0)
00009B9A 6600                       		bne.s	loc_9306
00009B9C 4468 0010                  		neg.w	$10(a0)
00009BA0 0868 0000 0001             		bchg	#0,1(a0)
00009BA6                            
00009BA6                            loc_9306:
00009BA6 D368 000C                  		add.w	d1,$C(a0)
00009BAA 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009BB0                            
00009BB0                            loc_9310:
00009BB0 6000 FF12                  		bra.w	loc_9224
00009BB4                            ; ===========================================================================
00009BB4                            
00009BB4                            loc_9314:				; XREF: Obj28_Index
00009BB4 6100 0000                  		bsr.w	sub_9404
00009BB8 6A00                       		bpl.s	loc_932E
00009BBA 4268 0010                  		clr.w	$10(a0)
00009BBE 4268 0032                  		clr.w	$32(a0)
00009BC2 6100 0000                  		bsr.w	ObjectFall
00009BC6 6100 0000                  		bsr.w	loc_93C4
00009BCA 6100 0000                  		bsr.w	loc_93EC
00009BCE                            
00009BCE                            loc_932E:
00009BCE 6000 FEF4                  		bra.w	loc_9224
00009BD2                            ; ===========================================================================
00009BD2                            
00009BD2                            loc_9332:				; XREF: Obj28_Index
00009BD2 6100 0000                  		bsr.w	sub_9404
00009BD6 6A00                       		bpl.s	loc_936C
00009BD8 6100 0000                  		bsr.w	ObjectFall
00009BDC 117C 0001 001A             		move.b	#1,$1A(a0)
00009BE2 4A68 0012                  		tst.w	$12(a0)
00009BE6 6B00                       		bmi.s	loc_936C
00009BE8 117C 0000 001A             		move.b	#0,$1A(a0)
00009BEE 4EB9 0000 0000             		jsr	ObjHitFloor
00009BF4 4A41                       		tst.w	d1
00009BF6 6A00                       		bpl.s	loc_936C
00009BF8 4468 0010                  		neg.w	$10(a0)
00009BFC 0868 0000 0001             		bchg	#0,1(a0)
00009C02 D368 000C                  		add.w	d1,$C(a0)
00009C06 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009C0C                            
00009C0C                            loc_936C:
00009C0C 6000 FEB6                  		bra.w	loc_9224
00009C10                            ; ===========================================================================
00009C10                            
00009C10                            loc_9370:				; XREF: Obj28_Index
00009C10 6100 0000                  		bsr.w	sub_9404
00009C14 6A00                       		bpl.s	loc_93C0
00009C16 6100 0000                  		bsr.w	SpeedToPos
00009C1A 0668 0018 0012             		addi.w	#$18,$12(a0)
00009C20 4A68 0012                  		tst.w	$12(a0)
00009C24 6B00                       		bmi.s	loc_93AA
00009C26 4EB9 0000 0000             		jsr	ObjHitFloor
00009C2C 4A41                       		tst.w	d1
00009C2E 6A00                       		bpl.s	loc_93AA
00009C30 4628 0029                  		not.b	$29(a0)
00009C34 6600                       		bne.s	loc_93A0
00009C36 4468 0010                  		neg.w	$10(a0)
00009C3A 0868 0000 0001             		bchg	#0,1(a0)
00009C40                            
00009C40                            loc_93A0:
00009C40 D368 000C                  		add.w	d1,$C(a0)
00009C44 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009C4A                            
00009C4A                            loc_93AA:
00009C4A 5328 001E                  		subq.b	#1,$1E(a0)
00009C4E 6A00                       		bpl.s	loc_93C0
00009C50 117C 0001 001E             		move.b	#1,$1E(a0)
00009C56 5228 001A                  		addq.b	#1,$1A(a0)
00009C5A 0228 0001 001A             		andi.b	#1,$1A(a0)
00009C60                            
00009C60                            loc_93C0:
00009C60 6000 FE62                  		bra.w	loc_9224
00009C64                            ; ===========================================================================
00009C64                            
00009C64                            loc_93C4:
00009C64 117C 0001 001A             		move.b	#1,$1A(a0)
00009C6A 4A68 0012                  		tst.w	$12(a0)
00009C6E 6B00                       		bmi.s	locret_93EA
00009C70 117C 0000 001A             		move.b	#0,$1A(a0)
00009C76 4EB9 0000 0000             		jsr	ObjHitFloor
00009C7C 4A41                       		tst.w	d1
00009C7E 6A00                       		bpl.s	locret_93EA
00009C80 D368 000C                  		add.w	d1,$C(a0)
00009C84 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009C8A                            
00009C8A                            locret_93EA:
00009C8A 4E75                       		rts	
00009C8C                            ; ===========================================================================
00009C8C                            
00009C8C                            loc_93EC:
00009C8C 08E8 0000 0001             		bset	#0,1(a0)
00009C92 3028 0008                  		move.w	8(a0),d0
00009C96 9078 D008                  		sub.w	($FFFFD008).w,d0
00009C9A 6400                       		bcc.s	locret_9402
00009C9C 08A8 0000 0001             		bclr	#0,1(a0)
00009CA2                            
00009CA2                            locret_9402:
00009CA2 4E75                       		rts	
00009CA4                            
00009CA4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009CA4                            
00009CA4                            
00009CA4                            sub_9404:
00009CA4 3038 D008                  		move.w	($FFFFD008).w,d0
00009CA8 9068 0008                  		sub.w	8(a0),d0
00009CAC 0440 00B8                  		subi.w	#$B8,d0
00009CB0 4E75                       		rts	
00009CB2                            ; End of function sub_9404
00009CB2                            
00009CB2                            ; ===========================================================================
00009CB2                            ; ---------------------------------------------------------------------------
00009CB2                            ; Object 29 - points that appear when you destroy something
00009CB2                            ; ---------------------------------------------------------------------------
00009CB2                            
00009CB2                            Obj29:					; XREF: Obj_Index
00009CB2 7000                       		moveq	#0,d0
00009CB4 1028 0024                  		move.b	$24(a0),d0
00009CB8 323B 0000                  		move.w	Obj29_Index(pc,d0.w),d1
00009CBC 4EBB 1000                  		jsr	Obj29_Index(pc,d1.w)
00009CC0 6000 0000                  		bra.w	DisplaySprite
00009CC4                            ; ===========================================================================
00009CC4 0000                       Obj29_Index:	dc.w Obj29_Main-Obj29_Index
00009CC6 0000                       		dc.w Obj29_Slower-Obj29_Index
00009CC8                            ; ===========================================================================
00009CC8                            
00009CC8                            Obj29_Main:				; XREF: Obj29_Index
00009CC8 5428 0024                  		addq.b	#2,$24(a0)
00009CCC 217C 0000 0000 0004        		move.l	#Map_obj29,4(a0)
00009CD4 317C 2797 0002             		move.w	#$2797,2(a0)
00009CDA 117C 0004 0001             		move.b	#4,1(a0)
00009CE0 117C 0001 0018             		move.b	#1,$18(a0)
00009CE6 117C 0008 0019             		move.b	#8,$19(a0)
00009CEC 317C FD00 0012             		move.w	#-$300,$12(a0)	; move object upwards
00009CF2                            
00009CF2                            Obj29_Slower:				; XREF: Obj29_Index
00009CF2 4A68 0012                  		tst.w	$12(a0)		; is object moving?
00009CF6 6A00 0000                  		bpl.w	DeleteObject	; if not, branch
00009CFA 6100 0000                  		bsr.w	SpeedToPos
00009CFE 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
00009D04 4E75                       		rts	
00009D06                            ; ===========================================================================
00009D06                            ; ---------------------------------------------------------------------------
00009D06                            ; Sprite mappings - animals
00009D06                            ; ---------------------------------------------------------------------------
00009D06                            Map_obj28:
00009D06                            	include "_maps\obj28.asm"
00009D06                            ; ---------------------------------------------------------------------------
00009D06                            ; Sprite mappings - animals
00009D06                            ; ---------------------------------------------------------------------------
00009D06 0000                       		dc.w byte_9472-Map_obj28
00009D08 0000                       		dc.w byte_9478-Map_obj28
00009D0A 0000                       		dc.w byte_946C-Map_obj28
00009D0C 01                         byte_946C:	dc.b 1
00009D0D F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00009D12 01                         byte_9472:	dc.b 1
00009D13 F406 0006 F8               		dc.b $F4, 6, 0,	6, $F8
00009D18 01                         byte_9478:	dc.b 1
00009D19 F406 000C F8               		dc.b $F4, 6, 0,	$C, $F8
00009D1E                            		even
00009D1E                            		even
00009D1E                            
00009D1E                            Map_obj28a:
00009D1E                            	include "_maps\obj28a.asm"
00009D1E                            ; ---------------------------------------------------------------------------
00009D1E                            ; Sprite mappings - animals
00009D1E                            ; ---------------------------------------------------------------------------
00009D1E 0000                       		dc.w byte_948A-Map_obj28a
00009D20 0000                       		dc.w byte_9490-Map_obj28a
00009D22 0000                       		dc.w byte_9484-Map_obj28a
00009D24 01                         byte_9484:	dc.b 1
00009D25 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00009D2A 01                         byte_948A:	dc.b 1
00009D2B FC05 0006 F8               		dc.b $FC, 5, 0,	6, $F8
00009D30 01                         byte_9490:	dc.b 1
00009D31 FC05 000A F8               		dc.b $FC, 5, 0,	$A, $F8
00009D36                            		even
00009D36                            		even
00009D36                            
00009D36                            Map_obj28b:
00009D36                            	include "_maps\obj28b.asm"
00009D36                            ; ---------------------------------------------------------------------------
00009D36                            ; Sprite mappings - animals
00009D36                            ; ---------------------------------------------------------------------------
00009D36 0000                       		dc.w byte_94A2-Map_obj28b
00009D38 0000                       		dc.w byte_94A8-Map_obj28b
00009D3A 0000                       		dc.w byte_949C-Map_obj28b
00009D3C 01                         byte_949C:	dc.b 1
00009D3D F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00009D42 01                         byte_94A2:	dc.b 1
00009D43 FC09 0006 F4               		dc.b $FC, 9, 0,	6, $F4
00009D48 01                         byte_94A8:	dc.b 1
00009D49 FC09 000C F4               		dc.b $FC, 9, 0,	$C, $F4
00009D4E                            		even
00009D4E                            		even
00009D4E                            
00009D4E                            ; ---------------------------------------------------------------------------
00009D4E                            ; Sprite mappings - points that	appear when you	destroy	something
00009D4E                            ; ---------------------------------------------------------------------------
00009D4E                            Map_obj29:
00009D4E                            	include "_maps\obj29.asm"
00009D4E                            ; ---------------------------------------------------------------------------
00009D4E                            ; Sprite mappings - points that	appear when you	destroy	something
00009D4E                            ; ---------------------------------------------------------------------------
00009D4E 0000 0000                  		dc.w byte_94BC-Map_obj29, byte_94C2-Map_obj29
00009D52 0000 0000                  		dc.w byte_94C8-Map_obj29, byte_94CE-Map_obj29
00009D56 0000 0000                  		dc.w byte_94D4-Map_obj29, byte_94DA-Map_obj29
00009D5A 0000                       		dc.w byte_94E5-Map_obj29
00009D5C 01                         byte_94BC:	dc.b 1
00009D5D FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8	; 100 points
00009D62 01                         byte_94C2:	dc.b 1
00009D63 FC04 0002 F8               		dc.b $FC, 4, 0,	2, $F8	; 200 points
00009D68 01                         byte_94C8:	dc.b 1
00009D69 FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8	; 500 points
00009D6E 01                         byte_94CE:	dc.b 1
00009D6F FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8	; 1000 points
00009D74 01                         byte_94D4:	dc.b 1
00009D75 FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC	; 10 points
00009D7A 02                         byte_94DA:	dc.b 2
00009D7B FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 10,000 points
00009D80 FC04 0007 01               		dc.b $FC, 4, 0,	7, 1
00009D85 02                         byte_94E5:	dc.b 2
00009D86 FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 100,000 points
00009D8B FC04 0007 06               		dc.b $FC, 4, 0,	7, 6
00009D90                            		even
00009D90                            		even
00009D90                            
00009D90                            ; ===========================================================================
00009D90                            ; ---------------------------------------------------------------------------
00009D90                            ; Object 1F - Crabmeat enemy (GHZ, SYZ)
00009D90                            ; ---------------------------------------------------------------------------
00009D90                            
00009D90                            Obj1F:					; XREF: Obj_Index
00009D90 7000                       		moveq	#0,d0
00009D92 1028 0024                  		move.b	$24(a0),d0
00009D96 323B 0000                  		move.w	Obj1F_Index(pc,d0.w),d1
00009D9A 4EFB 1000                  		jmp	Obj1F_Index(pc,d1.w)
00009D9E                            ; ===========================================================================
00009D9E 0000                       Obj1F_Index:	dc.w Obj1F_Main-Obj1F_Index
00009DA0 0000                       		dc.w Obj1F_Action-Obj1F_Index
00009DA2 0000                       		dc.w Obj1F_Delete-Obj1F_Index
00009DA4 0000                       		dc.w Obj1F_BallMain-Obj1F_Index
00009DA6 0000                       		dc.w Obj1F_BallMove-Obj1F_Index
00009DA8                            ; ===========================================================================
00009DA8                            
00009DA8                            Obj1F_Main:				; XREF: Obj1F_Index
00009DA8 117C 0010 0016             		move.b	#$10,$16(a0)
00009DAE 117C 0008 0017             		move.b	#8,$17(a0)
00009DB4 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
00009DBC 317C 0400 0002             		move.w	#$400,2(a0)
00009DC2 117C 0004 0001             		move.b	#4,1(a0)
00009DC8 117C 0003 0018             		move.b	#3,$18(a0)
00009DCE 117C 0006 0020             		move.b	#6,$20(a0)
00009DD4 117C 0015 0019             		move.b	#$15,$19(a0)
00009DDA 6100 0000                  		bsr.w	ObjectFall
00009DDE 4EB9 0000 0000             		jsr	ObjHitFloor
00009DE4 4A41                       		tst.w	d1
00009DE6 6A00                       		bpl.s	locret_955A
00009DE8 D368 000C                  		add.w	d1,$C(a0)
00009DEC 1143 0026                  		move.b	d3,$26(a0)
00009DF0 317C 0000 0012             		move.w	#0,$12(a0)
00009DF6 5428 0024                  		addq.b	#2,$24(a0)
00009DFA                            
00009DFA                            locret_955A:
00009DFA 4E75                       		rts	
00009DFC                            ; ===========================================================================
00009DFC                            
00009DFC                            Obj1F_Action:				; XREF: Obj1F_Index
00009DFC 7000                       		moveq	#0,d0
00009DFE 1028 0025                  		move.b	$25(a0),d0
00009E02 323B 0000                  		move.w	Obj1F_Index2(pc,d0.w),d1
00009E06 4EBB 1000                  		jsr	Obj1F_Index2(pc,d1.w)
00009E0A 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
00009E10 6100 0000                  		bsr.w	AnimateSprite
00009E14 6000 0000                  		bra.w	MarkObjGone
00009E18                            ; ===========================================================================
00009E18 0000                       Obj1F_Index2:	dc.w Obj1F_WaitFire-Obj1F_Index2
00009E1A 0000                       		dc.w Obj1F_WalkOnFloor-Obj1F_Index2
00009E1C                            ; ===========================================================================
00009E1C                            
00009E1C                            Obj1F_WaitFire:				; XREF: Obj1F_Index2
00009E1C 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00009E20 6A00                       		bpl.s	locret_95B6
00009E22 4A28 0001                  		tst.b	1(a0)
00009E26 6A00                       		bpl.s	Obj1F_Move
00009E28 0868 0001 0032             		bchg	#1,$32(a0)
00009E2E 6600                       		bne.s	Obj1F_MakeFire
00009E30                            
00009E30                            Obj1F_Move:
00009E30 5428 0025                  		addq.b	#2,$25(a0)
00009E34 317C 007F 0030             		move.w	#127,$30(a0)	; set time delay to approx 2 seconds
00009E3A 317C 0080 0010             		move.w	#$80,$10(a0)	; move Crabmeat	to the right
00009E40 6100 0000                  		bsr.w	Obj1F_SetAni
00009E44 5600                       		addq.b	#3,d0
00009E46 1140 001C                  		move.b	d0,$1C(a0)
00009E4A 0868 0000 0022             		bchg	#0,$22(a0)
00009E50 6600                       		bne.s	locret_95B6
00009E52 4468 0010                  		neg.w	$10(a0)		; change direction
00009E56                            
00009E56                            locret_95B6:
00009E56 4E75                       		rts	
00009E58                            ; ===========================================================================
00009E58                            
00009E58                            Obj1F_MakeFire:				; XREF: Obj1F_WaitFire
00009E58 317C 003B 0030             		move.w	#$3B,$30(a0)
00009E5E 117C 0006 001C             		move.b	#6,$1C(a0)	; use firing animation
00009E64 6100 0000                  		bsr.w	SingleObjLoad
00009E68 6600                       		bne.s	Obj1F_MakeFire2
00009E6A 12BC 001F                  		move.b	#$1F,0(a1)	; load left fireball
00009E6E 137C 0006 0024             		move.b	#6,$24(a1)
00009E74 3368 0008 0008             		move.w	8(a0),8(a1)
00009E7A 0469 0010 0008             		subi.w	#$10,8(a1)
00009E80 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009E86 337C FF00 0010             		move.w	#-$100,$10(a1)
00009E8C                            
00009E8C                            Obj1F_MakeFire2:
00009E8C 6100 0000                  		bsr.w	SingleObjLoad
00009E90 6600                       		bne.s	locret_9618
00009E92 12BC 001F                  		move.b	#$1F,0(a1)	; load right fireball
00009E96 137C 0006 0024             		move.b	#6,$24(a1)
00009E9C 3368 0008 0008             		move.w	8(a0),8(a1)
00009EA2 0669 0010 0008             		addi.w	#$10,8(a1)
00009EA8 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009EAE 337C 0100 0010             		move.w	#$100,$10(a1)
00009EB4                            
00009EB4                            locret_9618:
00009EB4 4E75                       		rts	
00009EB6                            ; ===========================================================================
00009EB6                            
00009EB6                            Obj1F_WalkOnFloor:			; XREF: Obj1F_Index2
00009EB6 5368 0030                  		subq.w	#1,$30(a0)
00009EBA 6B00                       		bmi.s	loc_966E
00009EBC 6100 0000                  		bsr.w	SpeedToPos
00009EC0 0868 0000 0032             		bchg	#0,$32(a0)
00009EC6 6600                       		bne.s	loc_9654
00009EC8 3628 0008                  		move.w	8(a0),d3
00009ECC 0643 0010                  		addi.w	#$10,d3
00009ED0 0828 0000 0022             		btst	#0,$22(a0)
00009ED6 6700                       		beq.s	loc_9640
00009ED8 0443 0020                  		subi.w	#$20,d3
00009EDC                            
00009EDC                            loc_9640:
00009EDC 4EB9 0000 0000             		jsr	ObjHitFloor2
00009EE2 0C41 FFF8                  		cmpi.w	#-8,d1
00009EE6 6D00                       		blt.s	loc_966E
00009EE8 0C41 000C                  		cmpi.w	#$C,d1
00009EEC 6C00                       		bge.s	loc_966E
00009EEE 4E75                       		rts	
00009EF0                            ; ===========================================================================
00009EF0                            
00009EF0                            loc_9654:				; XREF: Obj1F_WalkOnFloor
00009EF0 4EB9 0000 0000             		jsr	ObjHitFloor
00009EF6 D368 000C                  		add.w	d1,$C(a0)
00009EFA 1143 0026                  		move.b	d3,$26(a0)
00009EFE 6100 0000                  		bsr.w	Obj1F_SetAni
00009F02 5600                       		addq.b	#3,d0
00009F04 1140 001C                  		move.b	d0,$1C(a0)
00009F08 4E75                       		rts	
00009F0A                            ; ===========================================================================
00009F0A                            
00009F0A                            loc_966E:				; XREF: Obj1F_WalkOnFloor
00009F0A 5528 0025                  		subq.b	#2,$25(a0)
00009F0E 317C 003B 0030             		move.w	#59,$30(a0)
00009F14 317C 0000 0010             		move.w	#0,$10(a0)
00009F1A 6100 0000                  		bsr.w	Obj1F_SetAni
00009F1E 1140 001C                  		move.b	d0,$1C(a0)
00009F22 4E75                       		rts	
00009F24                            ; ---------------------------------------------------------------------------
00009F24                            ; Subroutine to	set the	correct	animation for a	Crabmeat
00009F24                            ; ---------------------------------------------------------------------------
00009F24                            
00009F24                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009F24                            
00009F24                            
00009F24                            Obj1F_SetAni:				; XREF: loc_966E
00009F24 7000                       		moveq	#0,d0
00009F26 1628 0026                  		move.b	$26(a0),d3
00009F2A 6B00                       		bmi.s	loc_96A4
00009F2C 0C03 0006                  		cmpi.b	#6,d3
00009F30 6500                       		bcs.s	locret_96A2
00009F32 7001                       		moveq	#1,d0
00009F34 0828 0000 0022             		btst	#0,$22(a0)
00009F3A 6600                       		bne.s	locret_96A2
00009F3C 7002                       		moveq	#2,d0
00009F3E                            
00009F3E                            locret_96A2:
00009F3E 4E75                       		rts	
00009F40                            ; ===========================================================================
00009F40                            
00009F40                            loc_96A4:				; XREF: Obj1F_SetAni
00009F40 0C03 00FA                  		cmpi.b	#-6,d3
00009F44 6200                       		bhi.s	locret_96B6
00009F46 7002                       		moveq	#2,d0
00009F48 0828 0000 0022             		btst	#0,$22(a0)
00009F4E 6600                       		bne.s	locret_96B6
00009F50 7001                       		moveq	#1,d0
00009F52                            
00009F52                            locret_96B6:
00009F52 4E75                       		rts	
00009F54                            ; End of function Obj1F_SetAni
00009F54                            
00009F54                            ; ===========================================================================
00009F54                            
00009F54                            Obj1F_Delete:				; XREF: Obj1F_Index
00009F54 6100 0000                  		bsr.w	DeleteObject
00009F58 4E75                       		rts	
00009F5A                            ; ===========================================================================
00009F5A                            ; ---------------------------------------------------------------------------
00009F5A                            ; Sub-object - missile that the	Crabmeat throws
00009F5A                            ; ---------------------------------------------------------------------------
00009F5A                            
00009F5A                            Obj1F_BallMain:				; XREF: Obj1F_Index
00009F5A 5428 0024                  		addq.b	#2,$24(a0)
00009F5E 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
00009F66 317C 0400 0002             		move.w	#$400,2(a0)
00009F6C 117C 0004 0001             		move.b	#4,1(a0)
00009F72 117C 0003 0018             		move.b	#3,$18(a0)
00009F78 117C 0087 0020             		move.b	#$87,$20(a0)
00009F7E 117C 0008 0019             		move.b	#8,$19(a0)
00009F84 317C FC00 0012             		move.w	#-$400,$12(a0)
00009F8A 117C 0007 001C             		move.b	#7,$1C(a0)
00009F90                            
00009F90                            Obj1F_BallMove:				; XREF: Obj1F_Index
00009F90 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
00009F96 6100 0000                  		bsr.w	AnimateSprite
00009F9A 6100 0000                  		bsr.w	ObjectFall
00009F9E 6100 0000                  		bsr.w	DisplaySprite
00009FA2 3038 F72E                  		move.w	($FFFFF72E).w,d0
00009FA6 0640 00E0                  		addi.w	#$E0,d0
00009FAA B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
00009FAE 6500                       		bcs.s	Obj1F_Delete2	; if yes, branch
00009FB0 4E75                       		rts	
00009FB2                            ; ===========================================================================
00009FB2                            
00009FB2                            Obj1F_Delete2:
00009FB2 6000 0000                  		bra.w	DeleteObject
00009FB6                            ; ===========================================================================
00009FB6                            Ani_obj1F:
00009FB6                            	include "_anim\obj1F.asm"
00009FB6                            ; ---------------------------------------------------------------------------
00009FB6                            ; Animation script - Crabmeat enemy
00009FB6                            ; ---------------------------------------------------------------------------
00009FB6 0000 0000 0000             		dc.w byte_972A-Ani_obj1F, byte_972E-Ani_obj1F, byte_9732-Ani_obj1F
00009FBC 0000 0000 0000             		dc.w byte_9736-Ani_obj1F, byte_973C-Ani_obj1F, byte_9742-Ani_obj1F
00009FC2 0000 0000                  		dc.w byte_9748-Ani_obj1F, byte_974C-Ani_obj1F
00009FC6 0F00 FF00                  byte_972A:	dc.b $F, 0, $FF, 0
00009FCA 0F02 FF00                  byte_972E:	dc.b $F, 2, $FF, 0
00009FCE 0F22 FF00                  byte_9732:	dc.b $F, $22, $FF, 0
00009FD2 0F01 2100 FF00             byte_9736:	dc.b $F, 1, $21, 0, $FF, 0
00009FD8 0F21 0302 FF00             byte_973C:	dc.b $F, $21, 3, 2, $FF, 0
00009FDE 0F01 2322 FF00             byte_9742:	dc.b $F, 1, $23, $22, $FF, 0
00009FE4 0F04 FF00                  byte_9748:	dc.b $F, 4, $FF, 0
00009FE8 0105 06FF                  byte_974C:	dc.b 1,	5, 6, $FF
00009FEC                            		even
00009FEC                            		even
00009FEC                            
00009FEC                            ; ---------------------------------------------------------------------------
00009FEC                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
00009FEC                            ; ---------------------------------------------------------------------------
00009FEC                            Map_obj1F:
00009FEC                            	include "_maps\obj1F.asm"
00009FEC                            Map_1514:
00009FEC 0000                       Map_1514_0: 	dc.w Map_1514_E-Map_1514
00009FEE 0000                       Map_1514_2: 	dc.w Map_1514_1E-Map_1514
00009FF0 0000                       Map_1514_4: 	dc.w Map_1514_2E-Map_1514
00009FF2 0000                       Map_1514_6: 	dc.w Map_1514_3E-Map_1514
00009FF4 0000                       Map_1514_8: 	dc.w Map_1514_4E-Map_1514
00009FF6 0000                       Map_1514_A: 	dc.w Map_1514_5E-Map_1514
00009FF8 0000                       Map_1514_C: 	dc.w Map_1514_64-Map_1514
00009FFA 03                         Map_1514_E: 	dc.b $3
00009FFB F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
0000A000 F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
0000A005 F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
0000A00A 03                         Map_1514_1E: 	dc.b $3
0000A00B F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
0000A010 F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
0000A015 F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
0000A01A 03                         Map_1514_2E: 	dc.b $3
0000A01B F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
0000A020 F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
0000A025 F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
0000A02A 03                         Map_1514_3E: 	dc.b $3
0000A02B F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
0000A030 F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
0000A035 F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
0000A03A 03                         Map_1514_4E: 	dc.b $3
0000A03B F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
0000A040 F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
0000A045 F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
0000A04A 01                         Map_1514_5E: 	dc.b $1
0000A04B F805 0017 F8               	dc.b $F8, $5, $0, $17, $F8
0000A050 01                         Map_1514_64: 	dc.b $1
0000A051 F805 2017 F8               	dc.b $F8, $5, $20, $17, $F8
0000A056                            	even
0000A056                            	even
0000A056                            
0000A056                            ; ===========================================================================
0000A056                            ; ---------------------------------------------------------------------------
0000A056                            ; Object 22 - Buzz Bomber enemy	(GHZ, MZ, SYZ)
0000A056                            ; ---------------------------------------------------------------------------
0000A056                            
0000A056                            Obj22:					; XREF: Obj_Index
0000A056 7000                       		moveq	#0,d0
0000A058 1028 0024                  		move.b	$24(a0),d0
0000A05C 323B 0000                  		move.w	Obj22_Index(pc,d0.w),d1
0000A060 4EFB 1000                  		jmp	Obj22_Index(pc,d1.w)
0000A064                            ; ===========================================================================
0000A064 0000                       Obj22_Index:	dc.w Obj22_Main-Obj22_Index
0000A066 0000                       		dc.w Obj22_Action-Obj22_Index
0000A068 0000                       		dc.w Obj22_Delete-Obj22_Index
0000A06A                            ; ===========================================================================
0000A06A                            
0000A06A                            Obj22_Main:				; XREF: Obj22_Index
0000A06A 5428 0024                  		addq.b	#2,$24(a0)
0000A06E 217C 0000 0000 0004        		move.l	#Map_obj22,4(a0)
0000A076 317C 0444 0002             		move.w	#$444,2(a0)
0000A07C 117C 0004 0001             		move.b	#4,1(a0)
0000A082 117C 0003 0018             		move.b	#3,$18(a0)
0000A088 117C 0008 0020             		move.b	#8,$20(a0)
0000A08E 117C 0018 0019             		move.b	#$18,$19(a0)
0000A094                            
0000A094                            Obj22_Action:				; XREF: Obj22_Index
0000A094 7000                       		moveq	#0,d0
0000A096 1028 0025                  		move.b	$25(a0),d0
0000A09A 323B 0000                  		move.w	Obj22_Index2(pc,d0.w),d1
0000A09E 4EBB 1000                  		jsr	Obj22_Index2(pc,d1.w)
0000A0A2 43F9 0000 0000             		lea	(Ani_obj22).l,a1
0000A0A8 6100 0000                  		bsr.w	AnimateSprite
0000A0AC 6000 0000                  		bra.w	MarkObjGone
0000A0B0                            ; ===========================================================================
0000A0B0 0000                       Obj22_Index2:	dc.w Obj22_Move-Obj22_Index2
0000A0B2 0000                       		dc.w Obj22_ChkNrSonic-Obj22_Index2
0000A0B4                            ; ===========================================================================
0000A0B4                            
0000A0B4                            Obj22_Move:				; XREF: Obj22_Index2
0000A0B4 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000A0B8 6A00                       		bpl.s	locret_986C	; if time remains, branch
0000A0BA 0828 0001 0034             		btst	#1,$34(a0)	; is Buzz Bomber near Sonic?
0000A0C0 6600                       		bne.s	Obj22_Fire	; if yes, branch
0000A0C2 5428 0025                  		addq.b	#2,$25(a0)
0000A0C6 317C 007F 0032             		move.w	#127,$32(a0)	; set time delay to just over 2	seconds
0000A0CC 317C 0400 0010             		move.w	#$400,$10(a0)	; move Buzz Bomber to the right
0000A0D2 117C 0001 001C             		move.b	#1,$1C(a0)	; use "flying" animation
0000A0D8 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
0000A0DE 6600                       		bne.s	locret_986C	; if not, branch
0000A0E0 4468 0010                  		neg.w	$10(a0)		; move Buzz Bomber to the left
0000A0E4                            
0000A0E4                            locret_986C:
0000A0E4 4E75                       		rts	
0000A0E6                            ; ===========================================================================
0000A0E6                            
0000A0E6                            Obj22_Fire:				; XREF: Obj22_Move
0000A0E6 6100 0000                  		bsr.w	SingleObjLoad
0000A0EA 6600                       		bne.s	locret_98D0
0000A0EC 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
0000A0F0 3368 0008 0008             		move.w	8(a0),8(a1)
0000A0F6 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A0FC 0669 001C 000C             		addi.w	#$1C,$C(a1)
0000A102 337C 0200 0012             		move.w	#$200,$12(a1)	; move missile downwards
0000A108 337C 0200 0010             		move.w	#$200,$10(a1)	; move missile to the right
0000A10E 303C 0018                  		move.w	#$18,d0
0000A112 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
0000A118 6600                       		bne.s	loc_98AA	; if not, branch
0000A11A 4440                       		neg.w	d0
0000A11C 4469 0010                  		neg.w	$10(a1)		; move missile to the left
0000A120                            
0000A120                            loc_98AA:
0000A120 D169 0008                  		add.w	d0,8(a1)
0000A124 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000A12A 337C 000E 0032             		move.w	#$E,$32(a1)
0000A130 2348 003C                  		move.l	a0,$3C(a1)
0000A134 117C 0001 0034             		move.b	#1,$34(a0)	; set to "already fired" to prevent refiring
0000A13A 317C 003B 0032             		move.w	#$3B,$32(a0)
0000A140 117C 0002 001C             		move.b	#2,$1C(a0)	; use "firing" animation
0000A146                            
0000A146                            locret_98D0:
0000A146 4E75                       		rts	
0000A148                            ; ===========================================================================
0000A148                            
0000A148                            Obj22_ChkNrSonic:			; XREF: Obj22_Index2
0000A148 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000A14C 6B00                       		bmi.s	Obj22_ChgDir
0000A14E 6100 0000                  		bsr.w	SpeedToPos
0000A152 4A28 0034                  		tst.b	$34(a0)
0000A156 6600                       		bne.s	locret_992A
0000A158 3038 D008                  		move.w	($FFFFD008).w,d0
0000A15C 9068 0008                  		sub.w	8(a0),d0
0000A160 6A00                       		bpl.s	Obj22_SetNrSonic
0000A162 4440                       		neg.w	d0
0000A164                            
0000A164                            Obj22_SetNrSonic:
0000A164 0C40 0060                  		cmpi.w	#$60,d0		; is Buzz Bomber within	$60 pixels of Sonic?
0000A168 6400                       		bcc.s	locret_992A	; if not, branch
0000A16A 4A28 0001                  		tst.b	1(a0)
0000A16E 6A00                       		bpl.s	locret_992A
0000A170 117C 0002 0034             		move.b	#2,$34(a0)	; set Buzz Bomber to "near Sonic"
0000A176 317C 001D 0032             		move.w	#29,$32(a0)	; set time delay to half a second
0000A17C 6000                       		bra.s	Obj22_Stop
0000A17E                            ; ===========================================================================
0000A17E                            
0000A17E                            Obj22_ChgDir:				; XREF: Obj22_ChkNrSonic
0000A17E 117C 0000 0034             		move.b	#0,$34(a0)	; set Buzz Bomber to "normal"
0000A184 0868 0000 0022             		bchg	#0,$22(a0)	; change direction
0000A18A 317C 003B 0032             		move.w	#59,$32(a0)
0000A190                            
0000A190                            Obj22_Stop:				; XREF: Obj22_SetNrSonic
0000A190 5528 0025                  		subq.b	#2,$25(a0)	; run "Obj22_Fire" routine
0000A194 317C 0000 0010             		move.w	#0,$10(a0)	; stop Buzz Bomber moving
0000A19A 117C 0000 001C             		move.b	#0,$1C(a0)	; use "hovering" animation
0000A1A0                            
0000A1A0                            locret_992A:
0000A1A0 4E75                       		rts	
0000A1A2                            ; ===========================================================================
0000A1A2                            
0000A1A2                            Obj22_Delete:				; XREF: Obj22_Index
0000A1A2 6100 0000                  		bsr.w	DeleteObject
0000A1A6 4E75                       		rts	
0000A1A8                            ; ===========================================================================
0000A1A8                            ; ---------------------------------------------------------------------------
0000A1A8                            ; Object 23 - missile that Buzz	Bomber throws
0000A1A8                            ; ---------------------------------------------------------------------------
0000A1A8                            
0000A1A8                            Obj23:					; XREF: Obj_Index
0000A1A8 7000                       		moveq	#0,d0
0000A1AA 1028 0024                  		move.b	$24(a0),d0
0000A1AE 323B 0000                  		move.w	Obj23_Index(pc,d0.w),d1
0000A1B2 4EFB 1000                  		jmp	Obj23_Index(pc,d1.w)
0000A1B6                            ; ===========================================================================
0000A1B6 0000                       Obj23_Index:	dc.w Obj23_Main-Obj23_Index
0000A1B8 0000                       		dc.w Obj23_Animate-Obj23_Index
0000A1BA 0000                       		dc.w Obj23_FromBuzz-Obj23_Index
0000A1BC 0000                       		dc.w Obj23_Delete-Obj23_Index
0000A1BE 0000                       		dc.w Obj23_FromNewt-Obj23_Index
0000A1C0                            ; ===========================================================================
0000A1C0                            
0000A1C0                            Obj23_Main:				; XREF: Obj23_Index
0000A1C0 5368 0032                  		subq.w	#1,$32(a0)
0000A1C4 6A00                       		bpl.s	Obj23_ChkCancel
0000A1C6 5428 0024                  		addq.b	#2,$24(a0)
0000A1CA 217C 0000 0000 0004        		move.l	#Map_obj23,4(a0)
0000A1D2 317C 2444 0002             		move.w	#$2444,2(a0)
0000A1D8 117C 0004 0001             		move.b	#4,1(a0)
0000A1DE 117C 0003 0018             		move.b	#3,$18(a0)
0000A1E4 117C 0008 0019             		move.b	#8,$19(a0)
0000A1EA 0228 0003 0022             		andi.b	#3,$22(a0)
0000A1F0 4A28 0028                  		tst.b	$28(a0)		; was object created by	a Newtron?
0000A1F4 6700                       		beq.s	Obj23_Animate	; if not, branch
0000A1F6 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj23_FromNewt" routine
0000A1FC 117C 0087 0020             		move.b	#$87,$20(a0)
0000A202 117C 0001 001C             		move.b	#1,$1C(a0)
0000A208 6000                       		bra.s	Obj23_Animate2
0000A20A                            ; ===========================================================================
0000A20A                            
0000A20A                            Obj23_Animate:				; XREF: Obj23_Index
0000A20A 6100                       		bsr.s	Obj23_ChkCancel
0000A20C 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000A212 6100 0000                  		bsr.w	AnimateSprite
0000A216 6000 0000                  		bra.w	DisplaySprite
0000A21A                            ; ---------------------------------------------------------------------------
0000A21A                            ; Subroutine to	check if the Buzz Bomber which fired the missile has been
0000A21A                            ; destroyed, and if it has, then cancel	the missile
0000A21A                            ; ---------------------------------------------------------------------------
0000A21A                            
0000A21A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A21A                            
0000A21A                            
0000A21A                            Obj23_ChkCancel:			; XREF: Obj23_Main
0000A21A 2268 003C                  		movea.l	$3C(a0),a1
0000A21E 0C11 0027                  		cmpi.b	#$27,0(a1)	; has Buzz Bomber been destroyed?
0000A222 6700                       		beq.s	Obj23_Delete	; if yes, branch
0000A224 4E75                       		rts	
0000A226                            ; End of function Obj23_ChkCancel
0000A226                            
0000A226                            ; ===========================================================================
0000A226                            
0000A226                            Obj23_FromBuzz:				; XREF: Obj23_Index
0000A226 0828 0007 0022             		btst	#7,$22(a0)
0000A22C 6600                       		bne.s	Obj23_Explode
0000A22E 117C 0087 0020             		move.b	#$87,$20(a0)
0000A234 117C 0001 001C             		move.b	#1,$1C(a0)
0000A23A 6100 0000                  		bsr.w	SpeedToPos
0000A23E 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000A244 6100 0000                  		bsr.w	AnimateSprite
0000A248 6100 0000                  		bsr.w	DisplaySprite
0000A24C 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000A250 0640 00E0                  		addi.w	#$E0,d0
0000A254 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
0000A258 6500                       		bcs.s	Obj23_Delete	; if yes, branch
0000A25A 4E75                       		rts	
0000A25C                            ; ===========================================================================
0000A25C                            
0000A25C                            Obj23_Explode:				; XREF: Obj23_FromBuzz
0000A25C 10BC 0024                  		move.b	#$24,0(a0)	; change object	to an explosion	(Obj24)
0000A260 117C 0000 0024             		move.b	#0,$24(a0)
0000A266 6000 F2D0                  		bra.w	Obj24
0000A26A                            ; ===========================================================================
0000A26A                            
0000A26A                            Obj23_Delete:				; XREF: Obj23_Index
0000A26A 6100 0000                  		bsr.w	DeleteObject
0000A26E 4E75                       		rts	
0000A270                            ; ===========================================================================
0000A270                            
0000A270                            Obj23_FromNewt:				; XREF: Obj23_Index
0000A270 4A28 0001                  		tst.b	1(a0)
0000A274 6AF4                       		bpl.s	Obj23_Delete
0000A276 6100 0000                  		bsr.w	SpeedToPos
0000A27A                            
0000A27A                            Obj23_Animate2:				; XREF: Obj23_Main
0000A27A 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000A280 6100 0000                  		bsr.w	AnimateSprite
0000A284 6100 0000                  		bsr.w	DisplaySprite
0000A288 4E75                       		rts	
0000A28A                            ; ===========================================================================
0000A28A                            Ani_obj22:
0000A28A                            	include "_anim\obj22.asm"
0000A28A                            ; ---------------------------------------------------------------------------
0000A28A                            ; Animation script - Buzz Bomber enemy
0000A28A                            ; ---------------------------------------------------------------------------
0000A28A 0000                       		dc.w byte_9A1E-Ani_obj22
0000A28C 0000                       		dc.w byte_9A22-Ani_obj22
0000A28E 0000                       		dc.w byte_9A26-Ani_obj22
0000A290 0100 01FF                  byte_9A1E:	dc.b 1,	0, 1, $FF
0000A294 0102 03FF                  byte_9A22:	dc.b 1,	2, 3, $FF
0000A298 0104 05FF                  byte_9A26:	dc.b 1,	4, 5, $FF
0000A29C                            		even
0000A29C                            		even
0000A29C                            
0000A29C                            Ani_obj23:
0000A29C                            	include "_anim\obj23.asm"
0000A29C                            ; ---------------------------------------------------------------------------
0000A29C                            ; Animation script - missile that Buzz Bomber throws
0000A29C                            ; ---------------------------------------------------------------------------
0000A29C 0000                       		dc.w byte_9A2E-Ani_obj23
0000A29E 0000                       		dc.w byte_9A32-Ani_obj23
0000A2A0 0700 01FC                  byte_9A2E:	dc.b 7,	0, 1, $FC
0000A2A4 0102 03FF                  byte_9A32:	dc.b 1,	2, 3, $FF
0000A2A8                            		even
0000A2A8                            		even
0000A2A8                            
0000A2A8                            ; ---------------------------------------------------------------------------
0000A2A8                            ; Sprite mappings - Buzz Bomber	enemy
0000A2A8                            ; ---------------------------------------------------------------------------
0000A2A8                            Map_obj22:
0000A2A8                            	include "_maps\obj22.asm"
0000A2A8                            Map_e97a:
0000A2A8 0000                       Map_e97a_0: 	dc.w Map_e97a_C-Map_e97a
0000A2AA 0000                       Map_e97a_2: 	dc.w Map_e97a_2B-Map_e97a
0000A2AC 0000                       Map_e97a_4: 	dc.w Map_e97a_4A-Map_e97a
0000A2AE 0000                       Map_e97a_6: 	dc.w Map_e97a_6E-Map_e97a
0000A2B0 0000                       Map_e97a_8: 	dc.w Map_e97a_92-Map_e97a
0000A2B2 0000                       Map_e97a_A: 	dc.w Map_e97a_B1-Map_e97a
0000A2B4 06                         Map_e97a_C: 	dc.b $6
0000A2B5 F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
0000A2BA F409 000F 00               	dc.b $F4, $9, $0, $F, $0
0000A2BF 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
0000A2C4 0404 0018 00               	dc.b $4, $4, $0, $18, $0
0000A2C9 F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
0000A2CE F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
0000A2D3 06                         Map_e97a_2B: 	dc.b $6
0000A2D4 F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
0000A2D9 F409 000F 00               	dc.b $F4, $9, $0, $F, $0
0000A2DE 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
0000A2E3 0404 0018 00               	dc.b $4, $4, $0, $18, $0
0000A2E8 F408 001F EC               	dc.b $F4, $8, $0, $1F, $EC
0000A2ED F404 0022 04               	dc.b $F4, $4, $0, $22, $4
0000A2F2 07                         Map_e97a_4A: 	dc.b $7
0000A2F3 0400 0030 0C               	dc.b $4, $0, $0, $30, $C
0000A2F8 F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
0000A2FD F409 000F 00               	dc.b $F4, $9, $0, $F, $0
0000A302 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
0000A307 0404 0018 00               	dc.b $4, $4, $0, $18, $0
0000A30C F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
0000A311 F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
0000A316 07                         Map_e97a_6E: 	dc.b $7
0000A317 0404 0031 0C               	dc.b $4, $4, $0, $31, $C
0000A31C F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
0000A321 F409 000F 00               	dc.b $F4, $9, $0, $F, $0
0000A326 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
0000A32B 0404 0018 00               	dc.b $4, $4, $0, $18, $0
0000A330 F408 001F EC               	dc.b $F4, $8, $0, $1F, $EC
0000A335 F404 0022 04               	dc.b $F4, $4, $0, $22, $4
0000A33A 06                         Map_e97a_92: 	dc.b $6
0000A33B F40D 0000 EC               	dc.b $F4, $D, $0, $0, $EC
0000A340 040C 0008 EC               	dc.b $4, $C, $0, $8, $EC
0000A345 0400 000C 0C               	dc.b $4, $0, $0, $C, $C
0000A34A 0C04 000D F4               	dc.b $C, $4, $0, $D, $F4
0000A34F F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
0000A354 F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
0000A359 04                         Map_e97a_B1: 	dc.b $4
0000A35A F40D 0000 EC               	dc.b $F4, $D, $0, $0, $EC
0000A35F 040C 0008 EC               	dc.b $4, $C, $0, $8, $EC
0000A364 0400 000C 0C               	dc.b $4, $0, $0, $C, $C
0000A369 0C04 000D F4               	dc.b $C, $4, $0, $D, $F4
0000A36E                            	even
0000A36E                            	even
0000A36E                            
0000A36E                            ; ---------------------------------------------------------------------------
0000A36E                            ; Sprite mappings - missile that Buzz Bomber throws
0000A36E                            ; ---------------------------------------------------------------------------
0000A36E                            Map_obj23:
0000A36E                            	include "_maps\obj23.asm"
0000A36E                            ; ---------------------------------------------------------------------------
0000A36E                            ; Sprite mappings - missile that Buzz Bomber throws
0000A36E                            ; ---------------------------------------------------------------------------
0000A36E 0000 0000                  		dc.w byte_9B0E-Map_obj23, byte_9B14-Map_obj23
0000A372 0000 0000                  		dc.w byte_9B1A-Map_obj23, byte_9B20-Map_obj23
0000A376 01                         byte_9B0E:	dc.b 1
0000A377 F805 0024 F8               		dc.b $F8, 5, 0,	$24, $F8
0000A37C 01                         byte_9B14:	dc.b 1
0000A37D F805 0028 F8               		dc.b $F8, 5, 0,	$28, $F8
0000A382 01                         byte_9B1A:	dc.b 1
0000A383 F805 002C F8               		dc.b $F8, 5, 0,	$2C, $F8
0000A388 01                         byte_9B20:	dc.b 1
0000A389 F805 0033 F8               		dc.b $F8, 5, 0,	$33, $F8
0000A38E                            		even
0000A38E                            		even
0000A38E                            
0000A38E                            ; ===========================================================================
0000A38E                            ; ---------------------------------------------------------------------------
0000A38E                            ; Object 25 - rings
0000A38E                            ; ---------------------------------------------------------------------------
0000A38E                            
0000A38E                            Obj25:					; XREF: Obj_Index
0000A38E 7000                       		moveq	#0,d0
0000A390 1028 0024                  		move.b	$24(a0),d0
0000A394 323B 0000                  		move.w	Obj25_Index(pc,d0.w),d1
0000A398 4EFB 1000                  		jmp	Obj25_Index(pc,d1.w)
0000A39C                            ; ===========================================================================
0000A39C 0000                       Obj25_Index:	dc.w Obj25_Main-Obj25_Index
0000A39E 0000                       		dc.w Obj25_Animate-Obj25_Index
0000A3A0 0000                       		dc.w Obj25_Collect-Obj25_Index
0000A3A2 0000                       		dc.w Obj25_Sparkle-Obj25_Index
0000A3A4 0000                       		dc.w Obj25_Delete-Obj25_Index
0000A3A6                            ; ---------------------------------------------------------------------------
0000A3A6                            ; Distances between rings (format: horizontal, vertical)
0000A3A6                            ; ---------------------------------------------------------------------------
0000A3A6 1000                       Obj25_PosData:	dc.b $10, 0		; horizontal tight
0000A3A8 1800                       		dc.b $18, 0		; horizontal normal
0000A3AA 2000                       		dc.b $20, 0		; horizontal wide
0000A3AC 0010                       		dc.b 0,	$10		; vertical tight
0000A3AE 0018                       		dc.b 0,	$18		; vertical normal
0000A3B0 0020                       		dc.b 0,	$20		; vertical wide
0000A3B2 1010                       		dc.b $10, $10		; diagonal
0000A3B4 1818                       		dc.b $18, $18
0000A3B6 2020                       		dc.b $20, $20
0000A3B8 F010                       		dc.b $F0, $10
0000A3BA E818                       		dc.b $E8, $18
0000A3BC E020                       		dc.b $E0, $20
0000A3BE 1008                       		dc.b $10, 8
0000A3C0 1810                       		dc.b $18, $10
0000A3C2 F008                       		dc.b $F0, 8
0000A3C4 E810                       		dc.b $E8, $10
0000A3C6                            ; ===========================================================================
0000A3C6                            
0000A3C6                            Obj25_Main:				; XREF: Obj25_Index
0000A3C6 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A3CA 7000                       		moveq	#0,d0
0000A3CC 1028 0023                  		move.b	$23(a0),d0
0000A3D0 45F2 0002                  		lea	2(a2,d0.w),a2
0000A3D4 1812                       		move.b	(a2),d4
0000A3D6 1228 0028                  		move.b	$28(a0),d1
0000A3DA 1001                       		move.b	d1,d0
0000A3DC 0241 0007                  		andi.w	#7,d1
0000A3E0 0C41 0007                  		cmpi.w	#7,d1
0000A3E4 6600                       		bne.s	loc_9B80
0000A3E6 7206                       		moveq	#6,d1
0000A3E8                            
0000A3E8                            loc_9B80:
0000A3E8 4841                       		swap	d1
0000A3EA 323C 0000                  		move.w	#0,d1
0000A3EE E808                       		lsr.b	#4,d0
0000A3F0 D040                       		add.w	d0,d0
0000A3F2 1A3B 00B2                  		move.b	Obj25_PosData(pc,d0.w),d5 ; load ring spacing data
0000A3F6 4885                       		ext.w	d5
0000A3F8 1C3B 00AD                  		move.b	Obj25_PosData+1(pc,d0.w),d6
0000A3FC 4886                       		ext.w	d6
0000A3FE 2248                       		movea.l	a0,a1
0000A400 3428 0008                  		move.w	8(a0),d2
0000A404 3628 000C                  		move.w	$C(a0),d3
0000A408 E20C                       		lsr.b	#1,d4
0000A40A 6500                       		bcs.s	loc_9C02
0000A40C 0892 0007                  		bclr	#7,(a2)
0000A410 6000                       		bra.s	loc_9BBA
0000A412                            ; ===========================================================================
0000A412                            
0000A412                            Obj25_MakeRings:
0000A412 4841                       		swap	d1
0000A414 E20C                       		lsr.b	#1,d4
0000A416 6500                       		bcs.s	loc_9C02
0000A418 0892 0007                  		bclr	#7,(a2)
0000A41C 6100 0000                  		bsr.w	SingleObjLoad
0000A420 6600                       		bne.s	loc_9C0E
0000A422                            
0000A422                            loc_9BBA:				; XREF: Obj25_Main
0000A422 12BC 0025                  		move.b	#$25,0(a1)	; load ring object
0000A426 5429 0024                  		addq.b	#2,$24(a1)
0000A42A 3342 0008                  		move.w	d2,8(a1)	; set x-axis position based on d2
0000A42E 3368 0008 0032             		move.w	8(a0),$32(a1)
0000A434 3343 000C                  		move.w	d3,$C(a1)	; set y-axis position based on d3
0000A438 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
0000A440 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000A446 137C 0004 0001             		move.b	#4,1(a1)
0000A44C 137C 0002 0018             		move.b	#2,$18(a1)
0000A452 137C 0047 0020             		move.b	#$47,$20(a1)
0000A458 137C 0008 0019             		move.b	#8,$19(a1)
0000A45E 1368 0023 0023             		move.b	$23(a0),$23(a1)
0000A464 1341 0034                  		move.b	d1,$34(a1)
0000A468                            
0000A468                            loc_9C02:
0000A468 5241                       		addq.w	#1,d1
0000A46A D445                       		add.w	d5,d2		; add ring spacing value to d2
0000A46C D646                       		add.w	d6,d3		; add ring spacing value to d3
0000A46E 4841                       		swap	d1
0000A470 51C9 FFA0                  		dbf	d1,Obj25_MakeRings ; repeat for	number of rings
0000A474                            
0000A474                            loc_9C0E:
0000A474 0812 0000                  		btst	#0,(a2)
0000A478 6600 0000                  		bne.w	DeleteObject
0000A47C                            
0000A47C                            Obj25_Animate:				; XREF: Obj25_Index
0000A47C 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0) ;	set frame
0000A482 6100 0000                  		bsr.w	DisplaySprite
0000A486 3028 0032                  		move.w	$32(a0),d0
0000A48A 0240 FF80                  		andi.w	#$FF80,d0
0000A48E 3238 F700                  		move.w	($FFFFF700).w,d1
0000A492 0441 0080                  		subi.w	#$80,d1
0000A496 0241 FF80                  		andi.w	#$FF80,d1
0000A49A 9041                       		sub.w	d1,d0
0000A49C 0C40 0280                  		cmpi.w	#$280,d0
0000A4A0 6200                       		bhi.s	Obj25_Delete
0000A4A2 4E75                       		rts	
0000A4A4                            ; ===========================================================================
0000A4A4                            
0000A4A4                            Obj25_Collect:				; XREF: Obj25_Index
0000A4A4 5428 0024                  		addq.b	#2,$24(a0)
0000A4A8 117C 0000 0020             		move.b	#0,$20(a0)
0000A4AE 117C 0001 0018             		move.b	#1,$18(a0)
0000A4B4 6100 0000                  		bsr.w	CollectRing
0000A4B8 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A4BC 7000                       		moveq	#0,d0
0000A4BE 1028 0023                  		move.b	$23(a0),d0
0000A4C2 1228 0034                  		move.b	$34(a0),d1
0000A4C6 03F2 0002                  		bset	d1,2(a2,d0.w)
0000A4CA                            
0000A4CA                            Obj25_Sparkle:				; XREF: Obj25_Index
0000A4CA 43F9 0000 0000             		lea	(Ani_obj25).l,a1
0000A4D0 6100 0000                  		bsr.w	AnimateSprite
0000A4D4 6000 0000                  		bra.w	DisplaySprite
0000A4D8                            ; ===========================================================================
0000A4D8                            
0000A4D8                            Obj25_Delete:				; XREF: Obj25_Index
0000A4D8 6000 0000                  		bra.w	DeleteObject
0000A4DC                            
0000A4DC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A4DC                            
0000A4DC                            
0000A4DC                            CollectRing:				; XREF: Obj25_Collect
0000A4DC 5278 FE20                  		addq.w	#1,($FFFFFE20).w ; add 1 to rings
0000A4E0 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the rings counter
0000A4E6 303C 00B5                  		move.w	#$B5,d0		; play ring sound
0000A4EA 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; do	you have < 100 rings?
0000A4F0 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
0000A4F2 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w ; update lives	counter
0000A4F8 6700                       		beq.s	loc_9CA4
0000A4FA 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; do	you have < 200 rings?
0000A500 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
0000A502 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w ; update lives	counter
0000A508 6600                       		bne.s	Obj25_PlaySnd
0000A50A                            
0000A50A                            loc_9CA4:
0000A50A 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000A50E 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000A512 303C 0088                  		move.w	#$88,d0		; play extra life music
0000A516                            
0000A516                            Obj25_PlaySnd:
0000A516 4EF9 0000 15D2             		jmp	(PlaySound_Special).l
0000A51C                            ; End of function CollectRing
0000A51C                            
0000A51C                            ; ===========================================================================
0000A51C                            ; ---------------------------------------------------------------------------
0000A51C                            ; Object 37 - rings flying out of Sonic	when he's hit
0000A51C                            ; ---------------------------------------------------------------------------
0000A51C                            
0000A51C                            Obj37:					; XREF: Obj_Index
0000A51C 7000                       		moveq	#0,d0
0000A51E 1028 0024                  		move.b	$24(a0),d0
0000A522 323B 0000                  		move.w	Obj37_Index(pc,d0.w),d1
0000A526 4EFB 1000                  		jmp	Obj37_Index(pc,d1.w)
0000A52A                            ; ===========================================================================
0000A52A 0000                       Obj37_Index:	dc.w Obj37_CountRings-Obj37_Index
0000A52C 0000                       		dc.w Obj37_Bounce-Obj37_Index
0000A52E 0000                       		dc.w Obj37_Collect-Obj37_Index
0000A530 0000                       		dc.w Obj37_Sparkle-Obj37_Index
0000A532 0000                       		dc.w Obj37_Delete-Obj37_Index
0000A534                            ; ===========================================================================
0000A534                            
0000A534                            Obj37_CountRings:			; XREF: Obj37_Index
0000A534 2248                       		movea.l	a0,a1
0000A536 7A00                       		moveq	#0,d5
0000A538 3A38 FE20                  		move.w	($FFFFFE20).w,d5 ; check number	of rings you have
0000A53C 7020                       		moveq	#32,d0
0000A53E BA40                       		cmp.w	d0,d5		; do you have 32 or more?
0000A540 6500                       		bcs.s	loc_9CDE	; if not, branch
0000A542 3A00                       		move.w	d0,d5		; if yes, set d5 to 32
0000A544                            
0000A544                            loc_9CDE:
0000A544 5345                       		subq.w	#1,d5
0000A546 383C 0288                  		move.w	#$288,d4
0000A54A 6000                       		bra.s	Obj37_MakeRings
0000A54C                            ; ===========================================================================
0000A54C                            
0000A54C                            Obj37_Loop:
0000A54C 6100 0000                  		bsr.w	SingleObjLoad
0000A550 6600 0000                  		bne.w	Obj37_ResetCounter
0000A554                            
0000A554                            Obj37_MakeRings:			; XREF: Obj37_CountRings
0000A554 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	ring object
0000A558 5429 0024                  		addq.b	#2,$24(a1)
0000A55C 137C 0008 0016             		move.b	#8,$16(a1)
0000A562 137C 0008 0017             		move.b	#8,$17(a1)
0000A568 3368 0008 0008             		move.w	8(a0),8(a1)
0000A56E 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A574 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
0000A57C 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000A582 137C 0004 0001             		move.b	#4,1(a1)
0000A588 137C 0003 0018             		move.b	#3,$18(a1)
0000A58E 137C 0047 0020             		move.b	#$47,$20(a1)
0000A594 137C 0008 0019             		move.b	#8,$19(a1)
0000A59A 11FC 00FF FEC6             		move.b	#-1,($FFFFFEC6).w
0000A5A0 4A44                       		tst.w	d4
0000A5A2 6B00                       		bmi.s	loc_9D62
0000A5A4 3004                       		move.w	d4,d0
0000A5A6 6100 87C4                  		bsr.w	CalcSine
0000A5AA 3404                       		move.w	d4,d2
0000A5AC E04A                       		lsr.w	#8,d2
0000A5AE E560                       		asl.w	d2,d0
0000A5B0 E561                       		asl.w	d2,d1
0000A5B2 3400                       		move.w	d0,d2
0000A5B4 3601                       		move.w	d1,d3
0000A5B6 0604 0010                  		addi.b	#$10,d4
0000A5BA 6400                       		bcc.s	loc_9D62
0000A5BC 0444 0080                  		subi.w	#$80,d4
0000A5C0 6400                       		bcc.s	loc_9D62
0000A5C2 383C 0288                  		move.w	#$288,d4
0000A5C6                            
0000A5C6                            loc_9D62:
0000A5C6 3342 0010                  		move.w	d2,$10(a1)
0000A5CA 3343 0012                  		move.w	d3,$12(a1)
0000A5CE 4442                       		neg.w	d2
0000A5D0 4444                       		neg.w	d4
0000A5D2 51CD FF78                  		dbf	d5,Obj37_Loop	; repeat for number of rings (max 31)
0000A5D6                            
0000A5D6                            Obj37_ResetCounter:			; XREF: Obj37_Loop
0000A5D6 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; reset number	of rings to zero
0000A5DC 11FC 0080 FE1D             		move.b	#$80,($FFFFFE1D).w ; update ring counter
0000A5E2 11FC 0000 FE1B             		move.b	#0,($FFFFFE1B).w
0000A5E8 303C 00C6                  		move.w	#$C6,d0
0000A5EC 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play ring loss sound
0000A5F2                            
0000A5F2                            Obj37_Bounce:				; XREF: Obj37_Index
0000A5F2 1178 FEC7 001A             		move.b	($FFFFFEC7).w,$1A(a0)
0000A5F8 6100 0000                  		bsr.w	SpeedToPos
0000A5FC 0668 0018 0012             		addi.w	#$18,$12(a0)
0000A602 6B00                       		bmi.s	Obj37_ChkDel
0000A604 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000A608 D007                       		add.b	d7,d0
0000A60A 0200 0003                  		andi.b	#3,d0
0000A60E 6600                       		bne.s	Obj37_ChkDel
0000A610 4EB9 0000 0000             		jsr	ObjHitFloor
0000A616 4A41                       		tst.w	d1
0000A618 6A00                       		bpl.s	Obj37_ChkDel
0000A61A D368 000C                  		add.w	d1,$C(a0)
0000A61E 3028 0012                  		move.w	$12(a0),d0
0000A622 E440                       		asr.w	#2,d0
0000A624 9168 0012                  		sub.w	d0,$12(a0)
0000A628 4468 0012                  		neg.w	$12(a0)
0000A62C                            
0000A62C                            Obj37_ChkDel:				; XREF: Obj37_Bounce
0000A62C 4A38 FEC6                  		tst.b	($FFFFFEC6).w
0000A630 6700                       		beq.s	Obj37_Delete
0000A632 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000A636 0640 00E0                  		addi.w	#$E0,d0
0000A63A B068 000C                  		cmp.w	$C(a0),d0	; has object moved below level boundary?
0000A63E 6500                       		bcs.s	Obj37_Delete	; if yes, branch
0000A640 6000 0000                  		bra.w	DisplaySprite
0000A644                            ; ===========================================================================
0000A644                            
0000A644                            Obj37_Collect:				; XREF: Obj37_Index
0000A644 5428 0024                  		addq.b	#2,$24(a0)
0000A648 117C 0000 0020             		move.b	#0,$20(a0)
0000A64E 117C 0001 0018             		move.b	#1,$18(a0)
0000A654 6100 FE86                  		bsr.w	CollectRing
0000A658                            
0000A658                            Obj37_Sparkle:				; XREF: Obj37_Index
0000A658 43F9 0000 0000             		lea	(Ani_obj25).l,a1
0000A65E 6100 0000                  		bsr.w	AnimateSprite
0000A662 6000 0000                  		bra.w	DisplaySprite
0000A666                            ; ===========================================================================
0000A666                            
0000A666                            Obj37_Delete:				; XREF: Obj37_Index
0000A666 6000 0000                  		bra.w	DeleteObject
0000A66A                            ; ===========================================================================
0000A66A                            ; ---------------------------------------------------------------------------
0000A66A                            ; Object 4B - giant ring for entry to special stage
0000A66A                            ; ---------------------------------------------------------------------------
0000A66A                            
0000A66A                            Obj4B:					; XREF: Obj_Index
0000A66A 7000                       		moveq	#0,d0
0000A66C 1028 0024                  		move.b	$24(a0),d0
0000A670 323B 0000                  		move.w	Obj4B_Index(pc,d0.w),d1
0000A674 4EFB 1000                  		jmp	Obj4B_Index(pc,d1.w)
0000A678                            ; ===========================================================================
0000A678 0000                       Obj4B_Index:	dc.w Obj4B_Main-Obj4B_Index
0000A67A 0000                       		dc.w Obj4B_Animate-Obj4B_Index
0000A67C 0000                       		dc.w Obj4B_Collect-Obj4B_Index
0000A67E 0000                       		dc.w Obj4B_Delete-Obj4B_Index
0000A680                            ; ===========================================================================
0000A680                            
0000A680                            Obj4B_Main:				; XREF: Obj4B_Index
0000A680 217C 0000 0000 0004        		move.l	#Map_obj4B,4(a0)
0000A688 317C 2400 0002             		move.w	#$2400,2(a0)
0000A68E 0028 0004 0001             		ori.b	#4,1(a0)
0000A694 117C 0040 0019             		move.b	#$40,$19(a0)
0000A69A 4A28 0001                  		tst.b	1(a0)
0000A69E 6A00                       		bpl.s	Obj4B_Animate
0000A6A0 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have 6 emeralds?
0000A6A6 6700 0000                  		beq.w	Obj4B_Delete	; if yes, branch
0000A6AA 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000A6B0 6400                       		bcc.s	Obj4B_Okay	; if yes, branch
0000A6B2 4E75                       		rts	
0000A6B4                            ; ===========================================================================
0000A6B4                            
0000A6B4                            Obj4B_Okay:				; XREF: Obj4B_Main
0000A6B4 5428 0024                  		addq.b	#2,$24(a0)
0000A6B8 117C 0002 0018             		move.b	#2,$18(a0)
0000A6BE 117C 0052 0020             		move.b	#$52,$20(a0)
0000A6C4 31FC 0C40 F7BE             		move.w	#$C40,($FFFFF7BE).w
0000A6CA                            
0000A6CA                            Obj4B_Animate:				; XREF: Obj4B_Index
0000A6CA 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0)
0000A6D0 3028 0008                  		move.w	8(a0),d0
0000A6D4 0240 FF80                  		andi.w	#$FF80,d0
0000A6D8 3238 F700                  		move.w	($FFFFF700).w,d1
0000A6DC 0441 0080                  		subi.w	#$80,d1
0000A6E0 0241 FF80                  		andi.w	#$FF80,d1
0000A6E4 9041                       		sub.w	d1,d0
0000A6E6 0C40 0280                  		cmpi.w	#$280,d0
0000A6EA 6200 0000                  		bhi.w	DeleteObject
0000A6EE 6000 0000                  		bra.w	DisplaySprite
0000A6F2                            ; ===========================================================================
0000A6F2                            
0000A6F2                            Obj4B_Collect:				; XREF: Obj4B_Index
0000A6F2 5528 0024                  		subq.b	#2,$24(a0)
0000A6F6 117C 0000 0020             		move.b	#0,$20(a0)
0000A6FC 6100 0000                  		bsr.w	SingleObjLoad
0000A700 6600 0000                  		bne.w	Obj4B_PlaySnd
0000A704 12BC 007C                  		move.b	#$7C,0(a1)	; load giant ring flash	object
0000A708 3368 0008 0008             		move.w	8(a0),8(a1)
0000A70E 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A714 2348 003C                  		move.l	a0,$3C(a1)
0000A718 3038 D008                  		move.w	($FFFFD008).w,d0
0000A71C B068 0008                  		cmp.w	8(a0),d0	; has Sonic come from the left?
0000A720 6500                       		bcs.s	Obj4B_PlaySnd	; if yes, branch
0000A722 08E9 0000 0001             		bset	#0,1(a1)	; reverse flash	object
0000A728                            
0000A728                            Obj4B_PlaySnd:
0000A728 303C 00C3                  		move.w	#$C3,d0
0000A72C 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play giant ring	sound
0000A732 6096                       		bra.s	Obj4B_Animate
0000A734                            ; ===========================================================================
0000A734                            
0000A734                            Obj4B_Delete:				; XREF: Obj4B_Index
0000A734 6000 0000                  		bra.w	DeleteObject
0000A738                            ; ===========================================================================
0000A738                            ; ---------------------------------------------------------------------------
0000A738                            ; Object 7C - flash effect when	you collect the	giant ring
0000A738                            ; ---------------------------------------------------------------------------
0000A738                            
0000A738                            Obj7C:					; XREF: Obj_Index
0000A738 7000                       		moveq	#0,d0
0000A73A 1028 0024                  		move.b	$24(a0),d0
0000A73E 323B 0000                  		move.w	Obj7C_Index(pc,d0.w),d1
0000A742 4EFB 1000                  		jmp	Obj7C_Index(pc,d1.w)
0000A746                            ; ===========================================================================
0000A746 0000                       Obj7C_Index:	dc.w Obj7C_Main-Obj7C_Index
0000A748 0000                       		dc.w Obj7C_ChkDel-Obj7C_Index
0000A74A 0000                       		dc.w Obj7C_Delete-Obj7C_Index
0000A74C                            ; ===========================================================================
0000A74C                            
0000A74C                            Obj7C_Main:				; XREF: Obj7C_Index
0000A74C 5428 0024                  		addq.b	#2,$24(a0)
0000A750 217C 0000 0000 0004        		move.l	#Map_obj7C,4(a0)
0000A758 317C 2462 0002             		move.w	#$2462,2(a0)
0000A75E 0028 0004 0001             		ori.b	#4,1(a0)
0000A764 117C 0000 0018             		move.b	#0,$18(a0)
0000A76A 117C 0020 0019             		move.b	#$20,$19(a0)
0000A770 117C 00FF 001A             		move.b	#$FF,$1A(a0)
0000A776                            
0000A776                            Obj7C_ChkDel:				; XREF: Obj7C_Index
0000A776 6100                       		bsr.s	Obj7C_Collect
0000A778 3028 0008                  		move.w	8(a0),d0
0000A77C 0240 FF80                  		andi.w	#$FF80,d0
0000A780 3238 F700                  		move.w	($FFFFF700).w,d1
0000A784 0441 0080                  		subi.w	#$80,d1
0000A788 0241 FF80                  		andi.w	#$FF80,d1
0000A78C 9041                       		sub.w	d1,d0
0000A78E 0C40 0280                  		cmpi.w	#$280,d0
0000A792 6200 0000                  		bhi.w	DeleteObject
0000A796 6000 0000                  		bra.w	DisplaySprite
0000A79A                            
0000A79A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A79A                            
0000A79A                            
0000A79A                            Obj7C_Collect:				; XREF: Obj7C_ChkDel
0000A79A 5328 001E                  		subq.b	#1,$1E(a0)
0000A79E 6A00                       		bpl.s	locret_9F76
0000A7A0 117C 0001 001E             		move.b	#1,$1E(a0)
0000A7A6 5228 001A                  		addq.b	#1,$1A(a0)
0000A7AA 0C28 0008 001A             		cmpi.b	#8,$1A(a0)	; has animation	finished?
0000A7B0 6400                       		bcc.s	Obj7C_End	; if yes, branch
0000A7B2 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is 3rd frame displayed?
0000A7B8 6600                       		bne.s	locret_9F76	; if not, branch
0000A7BA 2268 003C                  		movea.l	$3C(a0),a1
0000A7BE 137C 0006 0024             		move.b	#6,$24(a1)	; delete giant ring object (Obj4B)
0000A7C4 11FC 001C D01C             		move.b	#$1C,($FFFFD01C).w ; make Sonic	invisible
0000A7CA 11FC 0001 F7CD             		move.b	#1,($FFFFF7CD).w ; stop	Sonic getting bonuses
0000A7D0 4238 FE2D                  		clr.b	($FFFFFE2D).w	; remove invincibility
0000A7D4 4238 FE2C                  		clr.b	($FFFFFE2C).w	; remove shield
0000A7D8                            
0000A7D8                            locret_9F76:
0000A7D8 4E75                       		rts	
0000A7DA                            ; ===========================================================================
0000A7DA                            
0000A7DA                            Obj7C_End:				; XREF: Obj7C_Collect
0000A7DA 5428 0024                  		addq.b	#2,$24(a0)
0000A7DE 31FC 0000 D000             		move.w	#0,($FFFFD000).w ; remove Sonic	object
0000A7E4 588F                       		addq.l	#4,sp
0000A7E6 4E75                       		rts	
0000A7E8                            ; End of function Obj7C_Collect
0000A7E8                            
0000A7E8                            ; ===========================================================================
0000A7E8                            
0000A7E8                            Obj7C_Delete:				; XREF: Obj7C_Index
0000A7E8 6000 0000                  		bra.w	DeleteObject
0000A7EC                            ; ===========================================================================
0000A7EC                            Ani_obj25:
0000A7EC                            	include "_anim\obj25.asm"
0000A7EC                            ; ---------------------------------------------------------------------------
0000A7EC                            ; Animation script - ring
0000A7EC                            ; ---------------------------------------------------------------------------
0000A7EC 0000                       		dc.w byte_9F8C-Ani_obj25
0000A7EE 0504 0506 07FC             byte_9F8C:	dc.b 5,	4, 5, 6, 7, $FC
0000A7F4                            		even
0000A7F4                            		even
0000A7F4                            
0000A7F4                            ; ---------------------------------------------------------------------------
0000A7F4                            ; Sprite mappings - rings
0000A7F4                            ; ---------------------------------------------------------------------------
0000A7F4                            Map_obj25:
0000A7F4                            	include "_maps\obj25.asm"
0000A7F4                            ; ---------------------------------------------------------------------------
0000A7F4                            ; Sprite mappings - rings
0000A7F4                            ; ---------------------------------------------------------------------------
0000A7F4 0000 0000                  		dc.w byte_9FA2-Map_obj25, byte_9FA8-Map_obj25
0000A7F8 0000 0000                  		dc.w byte_9FAE-Map_obj25, byte_9FB4-Map_obj25
0000A7FC 0000 0000                  		dc.w byte_9FBA-Map_obj25, byte_9FC0-Map_obj25
0000A800 0000 0000                  		dc.w byte_9FC6-Map_obj25, byte_9FCC-Map_obj25
0000A804 01                         byte_9FA2:	dc.b 1
0000A805 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000A80A 01                         byte_9FA8:	dc.b 1
0000A80B F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0000A810 01                         byte_9FAE:	dc.b 1
0000A811 F801 0008 FC               		dc.b $F8, 1, 0,	8, $FC
0000A816 01                         byte_9FB4:	dc.b 1
0000A817 F805 0804 F8               		dc.b $F8, 5, 8,	4, $F8
0000A81C 01                         byte_9FBA:	dc.b 1
0000A81D F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
0000A822 01                         byte_9FC0:	dc.b 1
0000A823 F805 180A F8               		dc.b $F8, 5, $18, $A, $F8
0000A828 01                         byte_9FC6:	dc.b 1
0000A829 F805 080A F8               		dc.b $F8, 5, 8,	$A, $F8
0000A82E 01                         byte_9FCC:	dc.b 1
0000A82F F805 100A F8               		dc.b $F8, 5, $10, $A, $F8
0000A834                            		even
0000A834                            		even
0000A834                            
0000A834                            ; ---------------------------------------------------------------------------
0000A834                            ; Sprite mappings - giant ring
0000A834                            ; ---------------------------------------------------------------------------
0000A834                            Map_obj4B:
0000A834                            	include "_maps\obj4B.asm"
0000A834                            ; ---------------------------------------------------------------------------
0000A834                            ; Sprite mappings - giant ring
0000A834                            ; ---------------------------------------------------------------------------
0000A834 0000 0000                  		dc.w byte_9FDA-Map_obj4B, byte_A00D-Map_obj4B
0000A838 0000 0000                  		dc.w byte_A036-Map_obj4B, byte_A04B-Map_obj4B
0000A83C 0A                         byte_9FDA:	dc.b $A
0000A83D E008 0000 E8               		dc.b $E0, 8, 0,	0, $E8
0000A842 E008 0003 00               		dc.b $E0, 8, 0,	3, 0
0000A847 E80C 0006 E0               		dc.b $E8, $C, 0, 6, $E0
0000A84C E80C 000A 00               		dc.b $E8, $C, 0, $A, 0
0000A851 F007 000E E0               		dc.b $F0, 7, 0,	$E, $E0
0000A856 F007 0016 10               		dc.b $F0, 7, 0,	$16, $10
0000A85B 100C 001E E0               		dc.b $10, $C, 0, $1E, $E0
0000A860 100C 0022 00               		dc.b $10, $C, 0, $22, 0
0000A865 1808 0026 E8               		dc.b $18, 8, 0,	$26, $E8
0000A86A 1808 0029 00               		dc.b $18, 8, 0,	$29, 0
0000A86F 08                         byte_A00D:	dc.b 8
0000A870 E00C 002C F0               		dc.b $E0, $C, 0, $2C, $F0
0000A875 E808 0030 E8               		dc.b $E8, 8, 0,	$30, $E8
0000A87A E809 0033 00               		dc.b $E8, 9, 0,	$33, 0
0000A87F F007 0039 E8               		dc.b $F0, 7, 0,	$39, $E8
0000A884 F805 0041 08               		dc.b $F8, 5, 0,	$41, 8
0000A889 0809 0045 00               		dc.b 8,	9, 0, $45, 0
0000A88E 1008 004B E8               		dc.b $10, 8, 0,	$4B, $E8
0000A893 180C 004E F0               		dc.b $18, $C, 0, $4E, $F0
0000A898 04                         byte_A036:	dc.b 4
0000A899 E007 0052 F4               		dc.b $E0, 7, 0,	$52, $F4
0000A89E E003 0852 04               		dc.b $E0, 3, 8,	$52, 4
0000A8A3 0007 005A F4               		dc.b 0,	7, 0, $5A, $F4
0000A8A8 0003 085A 04               		dc.b 0,	3, 8, $5A, 4
0000A8AD 08                         byte_A04B:	dc.b 8
0000A8AE E00C 082C F0               		dc.b $E0, $C, 8, $2C, $F0
0000A8B3 E808 0830 00               		dc.b $E8, 8, 8,	$30, 0
0000A8B8 E809 0833 E8               		dc.b $E8, 9, 8,	$33, $E8
0000A8BD F007 0839 08               		dc.b $F0, 7, 8,	$39, 8
0000A8C2 F805 0841 E8               		dc.b $F8, 5, 8,	$41, $E8
0000A8C7 0809 0845 E8               		dc.b 8,	9, 8, $45, $E8
0000A8CC 1008 084B 00               		dc.b $10, 8, 8,	$4B, 0
0000A8D1 180C 084E F0               		dc.b $18, $C, 8, $4E, $F0
0000A8D6                            		even
0000A8D6                            		even
0000A8D6                            
0000A8D6                            ; ---------------------------------------------------------------------------
0000A8D6                            ; Sprite mappings - flash effect when you collect the giant ring
0000A8D6                            ; ---------------------------------------------------------------------------
0000A8D6                            Map_obj7C:
0000A8D6                            	include "_maps\obj7C.asm"
0000A8D6                            ; ---------------------------------------------------------------------------
0000A8D6                            ; Sprite mappings - flash effect when you collect the giant ring
0000A8D6                            ; ---------------------------------------------------------------------------
0000A8D6 0000 0000                  		dc.w byte_A084-Map_obj7C, byte_A08F-Map_obj7C
0000A8DA 0000 0000                  		dc.w byte_A0A4-Map_obj7C, byte_A0B9-Map_obj7C
0000A8DE 0000 0000                  		dc.w byte_A0CE-Map_obj7C, byte_A0E3-Map_obj7C
0000A8E2 0000 0000                  		dc.w byte_A0F8-Map_obj7C, byte_A103-Map_obj7C
0000A8E6 02                         byte_A084:	dc.b 2
0000A8E7 E00F 0000 00               		dc.b $E0, $F, 0, 0, 0
0000A8EC 000F 1000 00               		dc.b 0,	$F, $10, 0, 0
0000A8F1 04                         byte_A08F:	dc.b 4
0000A8F2 E00F 0010 F0               		dc.b $E0, $F, 0, $10, $F0
0000A8F7 E007 0020 10               		dc.b $E0, 7, 0,	$20, $10
0000A8FC 000F 1010 F0               		dc.b 0,	$F, $10, $10, $F0
0000A901 0007 1020 10               		dc.b 0,	7, $10,	$20, $10
0000A906 04                         byte_A0A4:	dc.b 4
0000A907 E00F 0028 E8               		dc.b $E0, $F, 0, $28, $E8
0000A90C E00B 0038 08               		dc.b $E0, $B, 0, $38, 8
0000A911 000F 1028 E8               		dc.b 0,	$F, $10, $28, $E8
0000A916 000B 1038 08               		dc.b 0,	$B, $10, $38, 8
0000A91B 04                         byte_A0B9:	dc.b 4
0000A91C E00F 0834 E0               		dc.b $E0, $F, 8, $34, $E0
0000A921 E00F 0034 00               		dc.b $E0, $F, 0, $34, 0
0000A926 000F 1834 E0               		dc.b 0,	$F, $18, $34, $E0
0000A92B 000F 1034 00               		dc.b 0,	$F, $10, $34, 0
0000A930 04                         byte_A0CE:	dc.b 4
0000A931 E00B 0838 E0               		dc.b $E0, $B, 8, $38, $E0
0000A936 E00F 0828 F8               		dc.b $E0, $F, 8, $28, $F8
0000A93B 000B 1838 E0               		dc.b 0,	$B, $18, $38, $E0
0000A940 000F 1828 F8               		dc.b 0,	$F, $18, $28, $F8
0000A945 04                         byte_A0E3:	dc.b 4
0000A946 E007 0820 E0               		dc.b $E0, 7, 8,	$20, $E0
0000A94B E00F 0810 F0               		dc.b $E0, $F, 8, $10, $F0
0000A950 0007 1820 E0               		dc.b 0,	7, $18,	$20, $E0
0000A955 000F 1810 F0               		dc.b 0,	$F, $18, $10, $F0
0000A95A 02                         byte_A0F8:	dc.b 2
0000A95B E00F 0800 E0               		dc.b $E0, $F, 8, 0, $E0
0000A960 000F 1800 E0               		dc.b 0,	$F, $18, 0, $E0
0000A965 04                         byte_A103:	dc.b 4
0000A966 E00F 0044 E0               		dc.b $E0, $F, 0, $44, $E0
0000A96B E00F 0844 00               		dc.b $E0, $F, 8, $44, 0
0000A970 000F 1044 E0               		dc.b 0,	$F, $10, $44, $E0
0000A975 000F 1844 00               		dc.b 0,	$F, $18, $44, 0
0000A97A                            		even
0000A97A                            		even
0000A97A                            
0000A97A                            ; ===========================================================================
0000A97A                            ; ---------------------------------------------------------------------------
0000A97A                            ; Object 26 - monitors
0000A97A                            ; ---------------------------------------------------------------------------
0000A97A                            
0000A97A                            Obj26:					; XREF: Obj_Index
0000A97A 7000                       		moveq	#0,d0
0000A97C 1028 0024                  		move.b	$24(a0),d0
0000A980 323B 0000                  		move.w	Obj26_Index(pc,d0.w),d1
0000A984 4EFB 1000                  		jmp	Obj26_Index(pc,d1.w)
0000A988                            ; ===========================================================================
0000A988 0000                       Obj26_Index:	dc.w Obj26_Main-Obj26_Index
0000A98A 0000                       		dc.w Obj26_Solid-Obj26_Index
0000A98C 0000                       		dc.w Obj26_BreakOpen-Obj26_Index
0000A98E 0000                       		dc.w Obj26_Animate-Obj26_Index
0000A990 0000                       		dc.w Obj26_Display-Obj26_Index
0000A992                            ; ===========================================================================
0000A992                            
0000A992                            Obj26_Main:				; XREF: Obj26_Index
0000A992 5428 0024                  		addq.b	#2,$24(a0)
0000A996 117C 000E 0016             		move.b	#$E,$16(a0)
0000A99C 117C 000E 0017             		move.b	#$E,$17(a0)
0000A9A2 217C 0000 0000 0004        		move.l	#Map_obj26,4(a0)
0000A9AA 317C 0680 0002             		move.w	#$680,2(a0)
0000A9B0 117C 0004 0001             		move.b	#4,1(a0)
0000A9B6 117C 0003 0018             		move.b	#3,$18(a0)
0000A9BC 117C 000F 0019             		move.b	#$F,$19(a0)
0000A9C2 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A9C6 7000                       		moveq	#0,d0
0000A9C8 1028 0023                  		move.b	$23(a0),d0
0000A9CC 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000A9D2 0832 0000 0002             		btst	#0,2(a2,d0.w)	; has monitor been broken?
0000A9D8 6700                       		beq.s	Obj26_NotBroken	; if not, branch
0000A9DA 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj26_Display" routine
0000A9E0 117C 000B 001A             		move.b	#$B,$1A(a0)	; use broken monitor frame
0000A9E6 4E75                       		rts	
0000A9E8                            ; ===========================================================================
0000A9E8                            
0000A9E8                            Obj26_NotBroken:			; XREF: Obj26_Main
0000A9E8 117C 0046 0020             		move.b	#$46,$20(a0)
0000A9EE 1168 0028 001C             		move.b	$28(a0),$1C(a0)
0000A9F4                            
0000A9F4                            Obj26_Solid:				; XREF: Obj26_Index
0000A9F4 1028 0025                  		move.b	$25(a0),d0	; is monitor set to fall?
0000A9F8 6700                       		beq.s	loc_A1EC	; if not, branch
0000A9FA 5500                       		subq.b	#2,d0
0000A9FC 6600                       		bne.s	Obj26_Fall
0000A9FE 7200                       		moveq	#0,d1
0000AA00 1228 0019                  		move.b	$19(a0),d1
0000AA04 0641 000B                  		addi.w	#$B,d1
0000AA08 6100 D37C                  		bsr.w	ExitPlatform
0000AA0C 0829 0003 0022             		btst	#3,$22(a1)
0000AA12 6600 0000                  		bne.w	loc_A1BC
0000AA16 4228 0025                  		clr.b	$25(a0)
0000AA1A 6000 0000                  		bra.w	Obj26_Animate
0000AA1E                            ; ===========================================================================
0000AA1E                            
0000AA1E                            loc_A1BC:				; XREF: Obj26_Solid
0000AA1E 363C 0010                  		move.w	#$10,d3
0000AA22 3428 0008                  		move.w	8(a0),d2
0000AA26 6100 D8BC                  		bsr.w	MvSonicOnPtfm
0000AA2A 6000 0000                  		bra.w	Obj26_Animate
0000AA2E                            ; ===========================================================================
0000AA2E                            
0000AA2E                            Obj26_Fall:				; XREF: Obj26_Solid
0000AA2E 6100 0000                  		bsr.w	ObjectFall
0000AA32 4EB9 0000 0000             		jsr	ObjHitFloor
0000AA38 4A41                       		tst.w	d1
0000AA3A 6A00 0000                  		bpl.w	Obj26_Animate
0000AA3E D368 000C                  		add.w	d1,$C(a0)
0000AA42 4268 0012                  		clr.w	$12(a0)
0000AA46 4228 0025                  		clr.b	$25(a0)
0000AA4A 6000 0000                  		bra.w	Obj26_Animate
0000AA4E                            ; ===========================================================================
0000AA4E                            
0000AA4E                            loc_A1EC:				; XREF: Obj26_Solid
0000AA4E 323C 001A                  		move.w	#$1A,d1
0000AA52 343C 000F                  		move.w	#$F,d2
0000AA56 6100 0000                  		bsr.w	Obj26_SolidSides
0000AA5A 6700 0000                  		beq.w	loc_A25C
0000AA5E 4A69 0012                  		tst.w	$12(a1)
0000AA62 6B00                       		bmi.s	loc_A20A
0000AA64 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000AA6A 6700                       		beq.s	loc_A25C	; if yes, branch
0000AA6C                            
0000AA6C                            loc_A20A:
0000AA6C 4A41                       		tst.w	d1
0000AA6E 6A00                       		bpl.s	loc_A220
0000AA70 9769 000C                  		sub.w	d3,$C(a1)
0000AA74 6100 D1FE                  		bsr.w	loc_74AE
0000AA78 117C 0002 0025             		move.b	#2,$25(a0)
0000AA7E 6000 0000                  		bra.w	Obj26_Animate
0000AA82                            ; ===========================================================================
0000AA82                            
0000AA82                            loc_A220:
0000AA82 4A40                       		tst.w	d0
0000AA84 6700 0000                  		beq.w	loc_A246
0000AA88 6B00                       		bmi.s	loc_A230
0000AA8A 4A69 0010                  		tst.w	$10(a1)
0000AA8E 6B00                       		bmi.s	loc_A246
0000AA90 6000                       		bra.s	loc_A236
0000AA92                            ; ===========================================================================
0000AA92                            
0000AA92                            loc_A230:
0000AA92 4A69 0010                  		tst.w	$10(a1)
0000AA96 6A00                       		bpl.s	loc_A246
0000AA98                            
0000AA98                            loc_A236:
0000AA98 9169 0008                  		sub.w	d0,8(a1)
0000AA9C 337C 0000 0014             		move.w	#0,$14(a1)
0000AAA2 337C 0000 0010             		move.w	#0,$10(a1)
0000AAA8                            
0000AAA8                            loc_A246:
0000AAA8 0829 0001 0022             		btst	#1,$22(a1)
0000AAAE 6600                       		bne.s	loc_A26A
0000AAB0 08E9 0005 0022             		bset	#5,$22(a1)
0000AAB6 08E8 0005 0022             		bset	#5,$22(a0)
0000AABC 6000                       		bra.s	Obj26_Animate
0000AABE                            ; ===========================================================================
0000AABE                            
0000AABE                            loc_A25C:
0000AABE 0828 0005 0022             		btst	#5,$22(a0)
0000AAC4 6700                       		beq.s	Obj26_Animate
0000AAC6 337C 0001 001C             		move.w	#1,$1C(a1)
0000AACC                            
0000AACC                            loc_A26A:
0000AACC 08A8 0005 0022             		bclr	#5,$22(a0)
0000AAD2 08A9 0005 0022             		bclr	#5,$22(a1)
0000AAD8                            
0000AAD8                            Obj26_Animate:				; XREF: Obj26_Index
0000AAD8 43F9 0000 0000             		lea	(Ani_obj26).l,a1
0000AADE 6100 0000                  		bsr.w	AnimateSprite
0000AAE2                            
0000AAE2                            Obj26_Display:				; XREF: Obj26_Index
0000AAE2 6100 0000                  		bsr.w	DisplaySprite
0000AAE6 3028 0008                  		move.w	8(a0),d0
0000AAEA 0240 FF80                  		andi.w	#$FF80,d0
0000AAEE 3238 F700                  		move.w	($FFFFF700).w,d1
0000AAF2 0441 0080                  		subi.w	#$80,d1
0000AAF6 0241 FF80                  		andi.w	#$FF80,d1
0000AAFA 9041                       		sub.w	d1,d0
0000AAFC 0C40 0280                  		cmpi.w	#$280,d0
0000AB00 6200 0000                  		bhi.w	DeleteObject
0000AB04 4E75                       		rts	
0000AB06                            ; ===========================================================================
0000AB06                            
0000AB06                            Obj26_BreakOpen:			; XREF: Obj26_Index
0000AB06 5428 0024                  		addq.b	#2,$24(a0)
0000AB0A 117C 0000 0020             		move.b	#0,$20(a0)
0000AB10 6100 0000                  		bsr.w	SingleObjLoad
0000AB14 6600                       		bne.s	Obj26_Explode
0000AB16 12BC 002E                  		move.b	#$2E,0(a1)	; load monitor contents	object
0000AB1A 3368 0008 0008             		move.w	8(a0),8(a1)
0000AB20 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000AB26 1368 001C 001C             		move.b	$1C(a0),$1C(a1)
0000AB2C 7400                       		moveq	#0,d2	; GMZ
0000AB2E 7205                       		moveq	#5,d1	; GMZ: Amount of explosion objects
0000AB30                            
0000AB30                            Obj26_Explode:
0000AB30 6100 0000                  		bsr.w	SingleObjLoad
0000AB34 6600                       		bne.s	Obj26_SetBroken
0000AB36 12BC 0027                  		move.b	#$27,0(a1)	; GMZ: Load explosion object
0000AB3A 5429 0024                  		addq.b	#2,$24(a1)
0000AB3E 1342 0028                  		move.b	d2,$28(a1)	; GMZ: Set subtype
0000AB42 3368 0008 0008             		move.w	8(a0),8(a1)
0000AB48 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000AB4E                            
0000AB4E                            Obj26_NextExplosion:
0000AB4E 5802                       		addq.b	#4,d2
0000AB50 51C9 FFDE                  		dbf	d1,Obj26_Explode
0000AB54                            
0000AB54                            Obj26_SetBroken:
0000AB54 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000AB58 7000                       		moveq	#0,d0
0000AB5A 1028 0023                  		move.b	$23(a0),d0
0000AB5E 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000AB64 117C 0009 001C             		move.b	#9,$1C(a0)	; set monitor type to broken
0000AB6A 6000 0000                  		bra.w	DisplaySprite
0000AB6E                            ; ===========================================================================
0000AB6E                            ; ---------------------------------------------------------------------------
0000AB6E                            ; Object 2E - contents of monitors
0000AB6E                            ; ---------------------------------------------------------------------------
0000AB6E                            
0000AB6E                            Obj2E:					; XREF: Obj_Index
0000AB6E 7000                       		moveq	#0,d0
0000AB70 1028 0024                  		move.b	$24(a0),d0
0000AB74 323B 0000                  		move.w	Obj2E_Index(pc,d0.w),d1
0000AB78 4EBB 1000                  		jsr	Obj2E_Index(pc,d1.w)
0000AB7C 6000 0000                  		bra.w	DisplaySprite
0000AB80                            ; ===========================================================================
0000AB80 0000                       Obj2E_Index:	dc.w Obj2E_Main-Obj2E_Index
0000AB82 0000                       		dc.w Obj2E_Move-Obj2E_Index
0000AB84 0000                       		dc.w Obj2E_Delete-Obj2E_Index
0000AB86                            ; ===========================================================================
0000AB86                            
0000AB86                            Obj2E_Main:				; XREF: Obj2E_Index
0000AB86 5428 0024                  		addq.b	#2,$24(a0)
0000AB8A 317C 0680 0002             		move.w	#$680,2(a0)
0000AB90 117C 0024 0001             		move.b	#$24,1(a0)
0000AB96 117C 0003 0018             		move.b	#3,$18(a0)
0000AB9C 117C 0008 0019             		move.b	#8,$19(a0)
0000ABA2 317C FD00 0012             		move.w	#-$300,$12(a0)
0000ABA8 7000                       		moveq	#0,d0
0000ABAA 1028 001C                  		move.b	$1C(a0),d0
0000ABAE 5400                       		addq.b	#2,d0
0000ABB0 1140 001A                  		move.b	d0,$1A(a0)
0000ABB4 227C 0000 0000             		movea.l	#Map_obj26,a1
0000ABBA D000                       		add.b	d0,d0
0000ABBC D2F1 0000                  		adda.w	(a1,d0.w),a1
0000ABC0 5249                       		addq.w	#1,a1
0000ABC2 2149 0004                  		move.l	a1,4(a0)
0000ABC6                            
0000ABC6                            Obj2E_Move:				; XREF: Obj2E_Index
0000ABC6 4A68 0012                  		tst.w	$12(a0)		; is object moving?
0000ABCA 6A00 0000                  		bpl.w	Obj2E_ChkEggman	; if not, branch
0000ABCE 6100 0000                  		bsr.w	SpeedToPos
0000ABD2 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
0000ABD8 4E75                       		rts	
0000ABDA                            ; ===========================================================================
0000ABDA                            
0000ABDA                            Obj2E_ChkEggman:			; XREF: Obj2E_Move
0000ABDA 5428 0024                  		addq.b	#2,$24(a0)
0000ABDE 317C 001D 001E             		move.w	#29,$1E(a0)
0000ABE4 1028 001C                  		move.b	$1C(a0),d0
0000ABE8 0C00 0001                  		cmpi.b	#1,d0		; does monitor contain Eggman?
0000ABEC 6600                       		bne.s	Obj2E_ChkSonic
0000ABEE 4E75                       		rts			; Eggman monitor does nothing
0000ABF0                            ; ===========================================================================
0000ABF0                            
0000ABF0                            Obj2E_ChkSonic:
0000ABF0 0C00 0002                  		cmpi.b	#2,d0		; does monitor contain Sonic?
0000ABF4 6600                       		bne.s	Obj2E_ChkShoes
0000ABF6                            
0000ABF6                            ExtraLife:
0000ABF6 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000ABFA 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000ABFE 303C 0088                  		move.w	#$88,d0
0000AC02 4EF9 0000 15CC             		jmp	(PlaySound).l	; play extra life music
0000AC08                            ; ===========================================================================
0000AC08                            
0000AC08                            Obj2E_ChkShoes:
0000AC08 0C00 0003                  		cmpi.b	#3,d0		; does monitor contain speed shoes?
0000AC0C 6600                       		bne.s	Obj2E_ChkShield
0000AC0E 11FC 0001 FE2E             		move.b	#1,($FFFFFE2E).w ; speed up the	BG music
0000AC14 31FC 04B0 D034             		move.w	#$4B0,($FFFFD034).w ; time limit for the power-up
0000AC1A 31FC 0C00 F760             		move.w	#$C00,($FFFFF760).w ; change Sonic's top speed
0000AC20 31FC 0018 F762             		move.w	#$18,($FFFFF762).w
0000AC26 31FC 0080 F764             		move.w	#$80,($FFFFF764).w
0000AC2C 303C 00E2                  		move.w	#$E2,d0
0000AC30 4EF9 0000 15CC             		jmp	(PlaySound).l	; Speed	up the music
0000AC36                            ; ===========================================================================
0000AC36                            
0000AC36                            Obj2E_ChkShield:
0000AC36 0C00 0004                  		cmpi.b	#4,d0		; does monitor contain a shield?
0000AC3A 6600                       		bne.s	Obj2E_ChkInvinc
0000AC3C 11FC 0001 FE2C             		move.b	#1,($FFFFFE2C).w ; give	Sonic a	shield
0000AC42 11FC 0038 D180             		move.b	#$38,($FFFFD180).w ; load shield object	($38)
0000AC48 303C 00AF                  		move.w	#$AF,d0
0000AC4C 4EF9 0000 15CC             		jmp	(PlaySound).l	; play shield sound
0000AC52                            ; ===========================================================================
0000AC52                            
0000AC52                            Obj2E_ChkInvinc:
0000AC52 0C00 0005                  		cmpi.b	#5,d0		; does monitor contain invincibility?
0000AC56 6600                       		bne.s	Obj2E_ChkRings
0000AC58 11FC 0001 FE2D             		move.b	#1,($FFFFFE2D).w ; make	Sonic invincible
0000AC5E 31FC 04B0 D032             		move.w	#$4B0,($FFFFD032).w ; time limit for the power-up
0000AC64 11FC 0038 D200             		move.b	#$38,($FFFFD200).w ; load stars	object ($3801)
0000AC6A 11FC 0001 D21C             		move.b	#1,($FFFFD21C).w
0000AC70 11FC 0038 D240             		move.b	#$38,($FFFFD240).w ; load stars	object ($3802)
0000AC76 11FC 0002 D25C             		move.b	#2,($FFFFD25C).w
0000AC7C 11FC 0038 D280             		move.b	#$38,($FFFFD280).w ; load stars	object ($3803)
0000AC82 11FC 0003 D29C             		move.b	#3,($FFFFD29C).w
0000AC88 11FC 0038 D2C0             		move.b	#$38,($FFFFD2C0).w ; load stars	object ($3804)
0000AC8E 11FC 0004 D2DC             		move.b	#4,($FFFFD2DC).w
0000AC94 4A38 F7AA                  		tst.b	($FFFFF7AA).w	; is boss mode on?
0000AC98 6600                       		bne.s	Obj2E_NoMusic	; if yes, branch
0000AC9A 303C 0087                  		move.w	#$87,d0
0000AC9E 4EF9 0000 15CC             		jmp	(PlaySound).l	; play invincibility music
0000ACA4                            ; ===========================================================================
0000ACA4                            
0000ACA4                            Obj2E_NoMusic:
0000ACA4 4E75                       		rts	
0000ACA6                            ; ===========================================================================
0000ACA6                            
0000ACA6                            Obj2E_ChkRings:
0000ACA6 0C00 0006                  		cmpi.b	#6,d0		; does monitor contain 10 rings?
0000ACAA 6600                       		bne.s	Obj2E_ChkS
0000ACAC 0678 000A FE20             		addi.w	#$A,($FFFFFE20).w ; add	10 rings to the	number of rings	you have
0000ACB2 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the ring counter
0000ACB8 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; check if you have 100 rings
0000ACBE 6500                       		bcs.s	Obj2E_RingSound
0000ACC0 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w
0000ACC6 6700 FF2E                  		beq.w	ExtraLife
0000ACCA 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; check if you have 200 rings
0000ACD0 6500                       		bcs.s	Obj2E_RingSound
0000ACD2 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w
0000ACD8 6700 FF1C                  		beq.w	ExtraLife
0000ACDC                            
0000ACDC                            Obj2E_RingSound:
0000ACDC 303C 00B5                  		move.w	#$B5,d0
0000ACE0 4EF9 0000 15CC             		jmp	(PlaySound).l	; play ring sound
0000ACE6                            ; ===========================================================================
0000ACE6                            
0000ACE6                            Obj2E_ChkS:
0000ACE6 0C00 0007                  		cmpi.b	#7,d0		; does monitor contain 'S'
0000ACEA 6600                       		bne.s	Obj2E_ChkEnd
0000ACEC                            		; nop	
0000ACEC 7201                       		moveq	#1,d1
0000ACEE B338 FE2F                  		eor.b	d1,($FFFFFE2F).w	; GMZ: Set reverse controls flag when broken, revert when another monitor of same type is broken again
0000ACF2                            
0000ACF2                            Obj2E_ChkEnd:
0000ACF2 4E75                       		rts			; 'S' and goggles monitors do nothing
0000ACF4                            ; ===========================================================================
0000ACF4                            
0000ACF4                            Obj2E_Delete:				; XREF: Obj2E_Index
0000ACF4 5368 001E                  		subq.w	#1,$1E(a0)
0000ACF8 6B00 0000                  		bmi.w	DeleteObject
0000ACFC 4E75                       		rts	
0000ACFE                            ; ---------------------------------------------------------------------------
0000ACFE                            ; Subroutine to	make the sides of a monitor solid
0000ACFE                            ; ---------------------------------------------------------------------------
0000ACFE                            
0000ACFE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000ACFE                            
0000ACFE                            
0000ACFE                            Obj26_SolidSides:			; XREF: loc_A1EC
0000ACFE 43F8 D000                  		lea	($FFFFD000).w,a1
0000AD02 3029 0008                  		move.w	8(a1),d0
0000AD06 9068 0008                  		sub.w	8(a0),d0
0000AD0A D041                       		add.w	d1,d0
0000AD0C 6B00                       		bmi.s	loc_A4E6
0000AD0E 3601                       		move.w	d1,d3
0000AD10 D643                       		add.w	d3,d3
0000AD12 B043                       		cmp.w	d3,d0
0000AD14 6200                       		bhi.s	loc_A4E6
0000AD16 1629 0016                  		move.b	$16(a1),d3
0000AD1A 4883                       		ext.w	d3
0000AD1C D443                       		add.w	d3,d2
0000AD1E 3629 000C                  		move.w	$C(a1),d3
0000AD22 9668 000C                  		sub.w	$C(a0),d3
0000AD26 D642                       		add.w	d2,d3
0000AD28 6B00                       		bmi.s	loc_A4E6
0000AD2A D442                       		add.w	d2,d2
0000AD2C B642                       		cmp.w	d2,d3
0000AD2E 6400                       		bcc.s	loc_A4E6
0000AD30 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0000AD34 6B00                       		bmi.s	loc_A4E6
0000AD36 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000AD3C 6400                       		bcc.s	loc_A4E6
0000AD3E 4A78 FE08                  		tst.w	($FFFFFE08).w
0000AD42 6600                       		bne.s	loc_A4E6
0000AD44 B240                       		cmp.w	d0,d1
0000AD46 6400                       		bcc.s	loc_A4DC
0000AD48 D241                       		add.w	d1,d1
0000AD4A 9041                       		sub.w	d1,d0
0000AD4C                            
0000AD4C                            loc_A4DC:
0000AD4C 0C43 0010                  		cmpi.w	#$10,d3
0000AD50 6500                       		bcs.s	loc_A4EA
0000AD52                            
0000AD52                            loc_A4E2:
0000AD52 7201                       		moveq	#1,d1
0000AD54 4E75                       		rts	
0000AD56                            ; ===========================================================================
0000AD56                            
0000AD56                            loc_A4E6:
0000AD56 7200                       		moveq	#0,d1
0000AD58 4E75                       		rts	
0000AD5A                            ; ===========================================================================
0000AD5A                            
0000AD5A                            loc_A4EA:
0000AD5A 7200                       		moveq	#0,d1
0000AD5C 1228 0019                  		move.b	$19(a0),d1
0000AD60 5841                       		addq.w	#4,d1
0000AD62 3401                       		move.w	d1,d2
0000AD64 D442                       		add.w	d2,d2
0000AD66 D269 0008                  		add.w	8(a1),d1
0000AD6A 9268 0008                  		sub.w	8(a0),d1
0000AD6E 6BE2                       		bmi.s	loc_A4E2
0000AD70 B242                       		cmp.w	d2,d1
0000AD72 64DE                       		bcc.s	loc_A4E2
0000AD74 72FF                       		moveq	#-1,d1
0000AD76 4E75                       		rts	
0000AD78                            ; End of function Obj26_SolidSides
0000AD78                            
0000AD78                            ; ===========================================================================
0000AD78                            Ani_obj26:
0000AD78                            	include "_anim\obj26.asm"
0000AD78                            ; ---------------------------------------------------------------------------
0000AD78                            ; Animation script - monitors
0000AD78                            ; ---------------------------------------------------------------------------
0000AD78 0000 0000 0000             		dc.w byte_A51C-Ani_obj26, byte_A522-Ani_obj26, byte_A52E-Ani_obj26
0000AD7E 0000 0000 0000             		dc.w byte_A53A-Ani_obj26, byte_A546-Ani_obj26, byte_A552-Ani_obj26
0000AD84 0000 0000 0000             		dc.w byte_A55E-Ani_obj26, byte_A56A-Ani_obj26, byte_A576-Ani_obj26
0000AD8A 0000                       		dc.w byte_A582-Ani_obj26
0000AD8C 0100 0102 FF00             byte_A51C:	dc.b 1,	0, 1, 2, $FF, 0
0000AD92 0100 0303 0103 0302 0303+  byte_A522:	dc.b 1,	0, 3, 3, 1, 3, 3, 2, 3,	3, $FF,	0
0000AD9E 0100 0404 0104 0402 0404+  byte_A52E:	dc.b 1,	0, 4, 4, 1, 4, 4, 2, 4,	4, $FF,	0
0000ADAA 0100 0505 0105 0502 0505+  byte_A53A:	dc.b 1,	0, 5, 5, 1, 5, 5, 2, 5,	5, $FF,	0
0000ADB6 0100 0606 0106 0602 0606+  byte_A546:	dc.b 1,	0, 6, 6, 1, 6, 6, 2, 6,	6, $FF,	0
0000ADC2 0100 0707 0107 0702 0707+  byte_A552:	dc.b 1,	0, 7, 7, 1, 7, 7, 2, 7,	7, $FF,	0
0000ADCE 0100 0808 0108 0802 0808+  byte_A55E:	dc.b 1,	0, 8, 8, 1, 8, 8, 2, 8,	8, $FF,	0
0000ADDA 0100 0909 0109 0902 0909+  byte_A56A:	dc.b 1,	0, 9, 9, 1, 9, 9, 2, 9,	9, $FF,	0
0000ADE6 0100 0A0A 010A 0A02 0A0A+  byte_A576:	dc.b 1,	0, $A, $A, 1, $A, $A, 2, $A, $A, $FF, 0
0000ADF2 0200 0102 0BFE 0100        byte_A582:	dc.b 2,	0, 1, 2, $B, $FE, 1, 0
0000ADFA                            		even
0000ADFA                            		even
0000ADFA                            
0000ADFA                            ; ---------------------------------------------------------------------------
0000ADFA                            ; Sprite mappings - monitors
0000ADFA                            ; ---------------------------------------------------------------------------
0000ADFA                            Map_obj26:
0000ADFA                            	include "_maps\obj26.asm"
0000ADFA                            ; ================================================================================
0000ADFA                            ; Sprite Mappings - generated by Flex 2 Sat Mar 22 2025 11:29:00 GMT-0500 (Central Daylight Time)
0000ADFA                            ; ================================================================================
0000ADFA                            
0000ADFA                            DATAY1U343IF3L:
0000ADFA 0000 0000                  	dc.w DATAY1U343IF3L_0-DATAY1U343IF3L, DATAY1U343IF3L_1-DATAY1U343IF3L
0000ADFE 0000 0000                  	dc.w DATAY1U343IF3L_2-DATAY1U343IF3L, DATAY1U343IF3L_3-DATAY1U343IF3L
0000AE02 0000 0000                  	dc.w DATAY1U343IF3L_4-DATAY1U343IF3L, DATAY1U343IF3L_5-DATAY1U343IF3L
0000AE06 0000 0000                  	dc.w DATAY1U343IF3L_6-DATAY1U343IF3L, DATAY1U343IF3L_7-DATAY1U343IF3L
0000AE0A 0000 0000                  	dc.w DATAY1U343IF3L_8-DATAY1U343IF3L, DATAY1U343IF3L_9-DATAY1U343IF3L
0000AE0E 0000 0000                  	dc.w DATAY1U343IF3L_A-DATAY1U343IF3L, DATAY1U343IF3L_B-DATAY1U343IF3L
0000AE12 05                         DATAY1U343IF3L_0: dc.b $5
0000AE13 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AE18 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AE1D E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AE22 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AE27 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AE2C 06                         DATAY1U343IF3L_1: dc.b $6
0000AE2D F205 0023 F8               	dc.b $F2, $5, $0, $23, $F8
0000AE32 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AE37 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AE3C E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AE41 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AE46 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AE4B 05                         DATAY1U343IF3L_2: dc.b $5
0000AE4C E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AE51 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AE56 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AE5B 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AE60 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AE65 05                         DATAY1U343IF3L_3: dc.b $5
0000AE66 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AE6B 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AE70 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AE75 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AE7A 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AE7F 06                         DATAY1U343IF3L_4: dc.b $6
0000AE80 F205 0027 F8               	dc.b $F2, $5, $0, $27, $F8
0000AE85 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AE8A 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AE8F E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AE94 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AE99 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AE9E 06                         DATAY1U343IF3L_5: dc.b $6
0000AE9F F205 002B F8               	dc.b $F2, $5, $0, $2B, $F8
0000AEA4 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AEA9 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AEAE E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AEB3 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AEB8 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AEBD 06                         DATAY1U343IF3L_6: dc.b $6
0000AEBE F205 002F F8               	dc.b $F2, $5, $0, $2F, $F8
0000AEC3 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AEC8 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AECD E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AED2 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AED7 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AEDC 06                         DATAY1U343IF3L_7: dc.b $6
0000AEDD F205 0033 F8               	dc.b $F2, $5, $0, $33, $F8
0000AEE2 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AEE7 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AEEC E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AEF1 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AEF6 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AEFB 06                         DATAY1U343IF3L_8: dc.b $6
0000AEFC F205 0037 F8               	dc.b $F2, $5, $0, $37, $F8
0000AF01 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AF06 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AF0B E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AF10 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AF15 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AF1A 06                         DATAY1U343IF3L_9: dc.b $6
0000AF1B F205 003B F8               	dc.b $F2, $5, $0, $3B, $F8
0000AF20 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AF25 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AF2A E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AF2F 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AF34 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AF39 05                         DATAY1U343IF3L_A: dc.b $5
0000AF3A E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AF3F 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AF44 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AF49 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AF4E 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AF53 01                         DATAY1U343IF3L_B: dc.b $1
0000AF54 FF0D 003F F0               	dc.b $FF, $D, $0, $3F, $F0
0000AF5A 00                         	even
0000AF5A 00                         	even
0000AF5A                            
0000AF5A                            ; ===========================================================================
0000AF5A                            ; ---------------------------------------------------------------------------
0000AF5A                            ; Object 0E - Sonic on the title screen
0000AF5A                            ; ---------------------------------------------------------------------------
0000AF5A                            
0000AF5A                            Obj0E:					; XREF: Obj_Index
0000AF5A 7000                       		moveq	#0,d0
0000AF5C 1028 0024                  		move.b	$24(a0),d0
0000AF60 323B 0000                  		move.w	Obj0E_Index(pc,d0.w),d1
0000AF64 4EFB 1000                  		jmp	Obj0E_Index(pc,d1.w)
0000AF68                            ; ===========================================================================
0000AF68 0000                       Obj0E_Index:	dc.w Obj0E_Main-Obj0E_Index
0000AF6A 0000                       		dc.w Obj0E_Delay-Obj0E_Index
0000AF6C 0000                       		dc.w Obj0E_Move-Obj0E_Index
0000AF6E 0000                       		dc.w Obj0E_Animate-Obj0E_Index
0000AF70                            ; ===========================================================================
0000AF70                            
0000AF70                            Obj0E_Main:				; XREF: Obj0E_Index
0000AF70 5428 0024                  		addq.b	#2,$24(a0)
0000AF74 317C 00F0 0008             		move.w	#$F0,8(a0)
0000AF7A 317C 00DE 000A             		move.w	#$DE,$A(a0)
0000AF80 217C 0000 0000 0004        		move.l	#Map_obj0E,4(a0)
0000AF88 317C 2300 0002             		move.w	#$2300,2(a0)
0000AF8E 117C 0001 0018             		move.b	#1,$18(a0)
0000AF94 117C 001D 001F             		move.b	#29,$1F(a0)	; set time delay to 0.5	seconds
0000AF9A 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000AFA0 6100 0000                  		bsr.w	AnimateSprite
0000AFA4                            
0000AFA4                            Obj0E_Delay:				; XREF: Obj0E_Index
0000AFA4 5328 001F                  		subq.b	#1,$1F(a0)	; subtract 1 from time delay
0000AFA8 6A00                       		bpl.s	Obj0E_Wait	; if time remains, branch
0000AFAA 5428 0024                  		addq.b	#2,$24(a0)	; go to	next routine
0000AFAE 6000 0000                  		bra.w	DisplaySprite
0000AFB2                            ; ===========================================================================
0000AFB2                            
0000AFB2                            Obj0E_Wait:				; XREF: Obj0E_Delay
0000AFB2 4E75                       		rts	
0000AFB4                            ; ===========================================================================
0000AFB4                            
0000AFB4                            Obj0E_Move:				; XREF: Obj0E_Index
0000AFB4 5168 000A                  		subq.w	#8,$A(a0)
0000AFB8 0C68 0096 000A             		cmpi.w	#$96,$A(a0)
0000AFBE 6600                       		bne.s	Obj0E_Display
0000AFC0 5428 0024                  		addq.b	#2,$24(a0)
0000AFC4                            
0000AFC4                            Obj0E_Display:
0000AFC4 6000 0000                  		bra.w	DisplaySprite
0000AFC8                            ; ===========================================================================
0000AFC8 4E75                       		rts	
0000AFCA                            ; ===========================================================================
0000AFCA                            
0000AFCA                            Obj0E_Animate:				; XREF: Obj0E_Index
0000AFCA 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000AFD0 6100 0000                  		bsr.w	AnimateSprite
0000AFD4 6000 0000                  		bra.w	DisplaySprite
0000AFD8                            ; ===========================================================================
0000AFD8 4E75                       		rts	
0000AFDA                            ; ===========================================================================
0000AFDA                            ; ---------------------------------------------------------------------------
0000AFDA                            ; Object 0F - "PRESS START BUTTON" and "TM" from title screen
0000AFDA                            ; ---------------------------------------------------------------------------
0000AFDA                            
0000AFDA                            Obj0F:					; XREF: Obj_Index
0000AFDA 7000                       		moveq	#0,d0
0000AFDC 1028 0024                  		move.b	$24(a0),d0
0000AFE0 323B 0000                  		move.w	Obj0F_Index(pc,d0.w),d1
0000AFE4 4EBB 1000                  		jsr	Obj0F_Index(pc,d1.w)
0000AFE8 6000 0000                  		bra.w	DisplaySprite
0000AFEC                            ; ===========================================================================
0000AFEC 0000                       Obj0F_Index:	dc.w Obj0F_Main-Obj0F_Index
0000AFEE 0000                       		dc.w Obj0F_PrsStart-Obj0F_Index
0000AFF0 0000                       		dc.w locret_A6F8-Obj0F_Index
0000AFF2                            ; ===========================================================================
0000AFF2                            
0000AFF2                            Obj0F_Main:				; XREF: Obj0F_Index
0000AFF2 5428 0024                  		addq.b	#2,$24(a0)
0000AFF6 317C 00D0 0008             		move.w	#$D0,8(a0)
0000AFFC 317C 0130 000A             		move.w	#$130,$A(a0)
0000B002 217C 0000 0000 0004        		move.l	#Map_obj0F,4(a0)
0000B00A 317C 0200 0002             		move.w	#$200,2(a0)
0000B010 0C28 0002 001A             		cmpi.b	#2,$1A(a0)	; is object "PRESS START"?
0000B016 6500                       		bcs.s	Obj0F_PrsStart	; if yes, branch
0000B018 5428 0024                  		addq.b	#2,$24(a0)
0000B01C 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is the object	"TM"?
0000B022 6600                       		bne.s	locret_A6F8	; if not, branch
0000B024 317C 2510 0002             		move.w	#$2510,2(a0)	; "TM" specific	code
0000B02A 317C 0170 0008             		move.w	#$170,8(a0)
0000B030 317C 00F8 000A             		move.w	#$F8,$A(a0)
0000B036                            
0000B036                            locret_A6F8:				; XREF: Obj0F_Index
0000B036 4E75                       		rts	
0000B038                            ; ===========================================================================
0000B038                            
0000B038                            Obj0F_PrsStart:				; XREF: Obj0F_Index
0000B038 43F9 0000 0000             		lea	(Ani_obj0F).l,a1
0000B03E 6000 0000                  		bra.w	AnimateSprite
0000B042                            ; ===========================================================================
0000B042                            Ani_obj0E:
0000B042                            	include "_anim\obj0E.asm"
0000B042                            ; ---------------------------------------------------------------------------
0000B042                            ; Animation script - Sonic on the title screen
0000B042                            ; ---------------------------------------------------------------------------
0000B042 0000                       		dc.w byte_A706-Ani_obj0E
0000B044 0700 0102 0304 0506 07FE+  byte_A706:	dc.b 7,	0, 1, 2, 3, 4, 5, 6, 7,	$FE, 2,	0
0000B050                            		even
0000B050                            		even
0000B050                            
0000B050                            Ani_obj0F:
0000B050                            	include "_anim\obj0F.asm"
0000B050                            ; ---------------------------------------------------------------------------
0000B050                            ; Animation script - "TM" and "PRESS START BUTTON" on the title screen
0000B050                            ; ---------------------------------------------------------------------------
0000B050 0000                       		dc.w byte_A714-Ani_obj0F
0000B052 1F00 01FF                  byte_A714:	dc.b $1F, 0, 1,	$FF
0000B056                            		even
0000B056                            		even
0000B056                            
0000B056                            ; ---------------------------------------------------------------------------
0000B056                            ; Subroutine to	animate	a sprite using an animation script
0000B056                            ; ---------------------------------------------------------------------------
0000B056                            
0000B056                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B056                            
0000B056                            
0000B056                            AnimateSprite:
0000B056 7000                       		moveq	#0,d0
0000B058 1028 001C                  		move.b	$1C(a0),d0	; move animation number	to d0
0000B05C B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
0000B060 6700                       		beq.s	Anim_Run	; if not, branch
0000B062 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
0000B066 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000B06C 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
0000B072                            
0000B072                            Anim_Run:
0000B072 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000B076 6A00                       		bpl.s	Anim_Wait	; if time remains, branch
0000B078 D040                       		add.w	d0,d0
0000B07A D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
0000B07E 1151 001E                  		move.b	(a1),$1E(a0)	; load frame duration
0000B082 7200                       		moveq	#0,d1
0000B084 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
0000B088 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
0000B08C 6B00                       		bmi.s	Anim_End_FF	; if animation is complete, branch
0000B08E                            
0000B08E                            Anim_Next:
0000B08E 1200                       		move.b	d0,d1
0000B090 0200 001F                  		andi.b	#$1F,d0
0000B094 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
0000B098 1028 0022                  		move.b	$22(a0),d0
0000B09C E719                       		rol.b	#3,d1
0000B09E B101                       		eor.b	d0,d1
0000B0A0 0201 0003                  		andi.b	#3,d1
0000B0A4 0228 00FC 0001             		andi.b	#$FC,1(a0)
0000B0AA 8328 0001                  		or.b	d1,1(a0)
0000B0AE 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
0000B0B2                            
0000B0B2                            Anim_Wait:
0000B0B2 4E75                       		rts	
0000B0B4                            ; ===========================================================================
0000B0B4                            
0000B0B4                            Anim_End_FF:
0000B0B4 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
0000B0B6 6600                       		bne.s	Anim_End_FE	; if not, branch
0000B0B8 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
0000B0BE 1029 0001                  		move.b	1(a1),d0	; read sprite number
0000B0C2 60CA                       		bra.s	Anim_Next
0000B0C4                            ; ===========================================================================
0000B0C4                            
0000B0C4                            Anim_End_FE:
0000B0C4 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
0000B0C6 6600                       		bne.s	Anim_End_FD	; if not, branch
0000B0C8 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
0000B0CC 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
0000B0D0 9200                       		sub.b	d0,d1
0000B0D2 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
0000B0D6 60B6                       		bra.s	Anim_Next
0000B0D8                            ; ===========================================================================
0000B0D8                            
0000B0D8                            Anim_End_FD:
0000B0D8 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
0000B0DA 6600                       		bne.s	Anim_End_FC	; if not, branch
0000B0DC 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
0000B0E2                            
0000B0E2                            Anim_End_FC:
0000B0E2 5200                       		addq.b	#1,d0		; is the end flag = $FC	?
0000B0E4 6600                       		bne.s	Anim_End_FB	; if not, branch
0000B0E6 5428 0024                  		addq.b	#2,$24(a0)	; jump to next routine
0000B0EA                            
0000B0EA                            Anim_End_FB:
0000B0EA 5200                       		addq.b	#1,d0		; is the end flag = $FB	?
0000B0EC 6600                       		bne.s	Anim_End_FA	; if not, branch
0000B0EE 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000B0F4 4228 0025                  		clr.b	$25(a0)		; reset	2nd routine counter
0000B0F8                            
0000B0F8                            Anim_End_FA:
0000B0F8 5200                       		addq.b	#1,d0		; is the end flag = $FA	?
0000B0FA 6600                       		bne.s	Anim_End	; if not, branch
0000B0FC 5428 0025                  		addq.b	#2,$25(a0)	; jump to next routine
0000B100                            
0000B100                            Anim_End:
0000B100 4E75                       		rts	
0000B102                            ; End of function AnimateSprite
0000B102                            
0000B102                            ; ===========================================================================
0000B102                            ; ---------------------------------------------------------------------------
0000B102                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000B102                            ; ---------------------------------------------------------------------------
0000B102                            Map_obj0F:
0000B102                            	include "_maps\obj0F.asm"
0000B102                            ; ---------------------------------------------------------------------------
0000B102                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000B102                            ; ---------------------------------------------------------------------------
0000B102 0000                       		dc.w byte_A7CD-Map_obj0F
0000B104 0000                       		dc.w byte_A7CC-Map_obj0F
0000B106 0000                       		dc.w byte_A7EB-Map_obj0F
0000B108 0000                       		dc.w byte_A882-Map_obj0F
0000B10A 06                         byte_A7CC:	dc.b 6			; "PRESS START BUTTON"
0000B10B 000C 00F0 00               byte_A7CD:	dc.b 0,	$C, 0, $F0, 0
0000B110 0000 00F3 20               		dc.b 0,	0, 0, $F3, $20
0000B115 0000 00F3 30               		dc.b 0,	0, 0, $F3, $30
0000B11A 000C 00F4 38               		dc.b 0,	$C, 0, $F4, $38
0000B11F 0008 00F8 60               		dc.b 0,	8, 0, $F8, $60
0000B124 0008 00FB 78               		dc.b 0,	8, 0, $FB, $78
0000B129 1E                         byte_A7EB:	dc.b $1E		; sprite list filler
0000B12A B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B12F B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B134 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B139 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B13E B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B143 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B148 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B14D B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B152 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B157 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B15C D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B161 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B166 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B16B D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B170 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B175 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B17A D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B17F D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B184 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B189 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B18E F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B193 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B198 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B19D F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B1A2 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B1A7 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B1AC F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B1B1 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B1B6 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B1BB F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B1C0 01                         byte_A882:	dc.b 1			; "TM"
0000B1C1 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
0000B1C6                            		even
0000B1C6                            		even
0000B1C6                            
0000B1C6                            ; ---------------------------------------------------------------------------
0000B1C6                            ; Sprite mappings - Sonic on the title screen
0000B1C6                            ; ---------------------------------------------------------------------------
0000B1C6                            Map_obj0E:
0000B1C6                            	include "_maps\obj0E.asm"
0000B1C6                            ; ================================================================================
0000B1C6                            ; Sprite Mappings - generated by Flex 2 Sun Mar 23 2025 15:32:50 GMT-0500 (Central Daylight Time)
0000B1C6                            ; ================================================================================
0000B1C6                            
0000B1C6                            DATAGKI0HYDQBXP:
0000B1C6 0000 0000                  	dc.w DATAGKI0HYDQBXP_0-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_1-DATAGKI0HYDQBXP
0000B1CA 0000 0000                  	dc.w DATAGKI0HYDQBXP_2-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_3-DATAGKI0HYDQBXP
0000B1CE 0000 0000                  	dc.w DATAGKI0HYDQBXP_4-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_5-DATAGKI0HYDQBXP
0000B1D2 0000 0000                  	dc.w DATAGKI0HYDQBXP_6-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_7-DATAGKI0HYDQBXP
0000B1D6 08                         DATAGKI0HYDQBXP_0: dc.b $8
0000B1D7 0C0F 0126 08               	dc.b $C, $F, $1, $26, $8
0000B1DC 2C0F 0136 08               	dc.b $2C, $F, $1, $36, $8
0000B1E1 4C0D 0146 08               	dc.b $4C, $D, $1, $46, $8
0000B1E6 0408 014E 20               	dc.b $4, $8, $1, $4E, $20
0000B1EB 0C0B 0151 28               	dc.b $C, $B, $1, $51, $28
0000B1F0 2C0B 015D 28               	dc.b $2C, $B, $1, $5D, $28
0000B1F5 4C05 0169 28               	dc.b $4C, $5, $1, $69, $28
0000B1FA 1407 016D 40               	dc.b $14, $7, $1, $6D, $40
0000B1FF 0B                         DATAGKI0HYDQBXP_1: dc.b $B
0000B200 060F 0175 01               	dc.b $6, $F, $1, $75, $1
0000B205 060F 0185 21               	dc.b $6, $F, $1, $85, $21
0000B20A 0607 0195 41               	dc.b $6, $7, $1, $95, $41
0000B20F 260F 019D 01               	dc.b $26, $F, $1, $9D, $1
0000B214 260F 01AD 21               	dc.b $26, $F, $1, $AD, $21
0000B219 2607 01BD 41               	dc.b $26, $7, $1, $BD, $41
0000B21E 460C 01C5 01               	dc.b $46, $C, $1, $C5, $1
0000B223 460E 01C9 21               	dc.b $46, $E, $1, $C9, $21
0000B228 4606 01D5 41               	dc.b $46, $6, $1, $D5, $41
0000B22D 4E08 01DB 09               	dc.b $4E, $8, $1, $DB, $9
0000B232 5604 01DE 11               	dc.b $56, $4, $1, $DE, $11
0000B237 0B                         DATAGKI0HYDQBXP_2: dc.b $B
0000B238 F20F 0175 01               	dc.b $F2, $F, $1, $75, $1
0000B23D F20F 0185 21               	dc.b $F2, $F, $1, $85, $21
0000B242 F207 0195 41               	dc.b $F2, $7, $1, $95, $41
0000B247 120F 019D 01               	dc.b $12, $F, $1, $9D, $1
0000B24C 120F 01AD 21               	dc.b $12, $F, $1, $AD, $21
0000B251 1207 01BD 41               	dc.b $12, $7, $1, $BD, $41
0000B256 320C 01C5 01               	dc.b $32, $C, $1, $C5, $1
0000B25B 320E 01C9 21               	dc.b $32, $E, $1, $C9, $21
0000B260 3206 01D5 41               	dc.b $32, $6, $1, $D5, $41
0000B265 3A08 01DB 09               	dc.b $3A, $8, $1, $DB, $9
0000B26A 4204 01DE 11               	dc.b $42, $4, $1, $DE, $11
0000B26F 0A                         DATAGKI0HYDQBXP_3: dc.b $A
0000B270 FC0F 0000 08               	dc.b $FC, $F, $0, $0, $8
0000B275 F408 0010 28               	dc.b $F4, $8, $0, $10, $28
0000B27A FC0F 0013 28               	dc.b $FC, $F, $0, $13, $28
0000B27F 0400 0023 48               	dc.b $4, $0, $0, $23, $48
0000B284 0C06 0024 48               	dc.b $C, $6, $0, $24, $48
0000B289 2400 002A 48               	dc.b $24, $0, $0, $2A, $48
0000B28E 1C0D 002B 08               	dc.b $1C, $D, $0, $2B, $8
0000B293 1C0E 0033 28               	dc.b $1C, $E, $0, $33, $28
0000B298 2C0B 003F 10               	dc.b $2C, $B, $0, $3F, $10
0000B29D 3408 004B 28               	dc.b $34, $8, $0, $4B, $28
0000B2A2 10                         DATAGKI0HYDQBXP_4: dc.b $10
0000B2A3 F80F 01E0 09               	dc.b $F8, $F, $1, $E0, $9
0000B2A8 F807 01F0 29               	dc.b $F8, $7, $1, $F0, $29
0000B2AD 0003 01F8 01               	dc.b $0, $3, $1, $F8, $1
0000B2B2 0003 01FC 39               	dc.b $0, $3, $1, $FC, $39
0000B2B7 1001 0200 F9               	dc.b $10, $1, $2, $0, $F9
0000B2BC 180D 0202 09               	dc.b $18, $D, $2, $2, $9
0000B2C1 1807 020A 29               	dc.b $18, $7, $2, $A, $29
0000B2C6 1803 0212 41               	dc.b $18, $3, $2, $12, $41
0000B2CB 2001 0216 01               	dc.b $20, $1, $2, $16, $1
0000B2D0 2003 0218 39               	dc.b $20, $3, $2, $18, $39
0000B2D5 2808 021C 11               	dc.b $28, $8, $2, $1C, $11
0000B2DA 3007 021F 19               	dc.b $30, $7, $2, $1F, $19
0000B2DF 3801 0227 11               	dc.b $38, $1, $2, $27, $11
0000B2E4 3806 0229 29               	dc.b $38, $6, $2, $29, $29
0000B2E9 3801 022F 41               	dc.b $38, $1, $2, $2F, $41
0000B2EE 4001 0231 39               	dc.b $40, $1, $2, $31, $39
0000B2F3 0B                         DATAGKI0HYDQBXP_5: dc.b $B
0000B2F4 2C0F 006E E2               	dc.b $2C, $F, $0, $6E, $E2
0000B2F9 EC0F 007E 02               	dc.b $EC, $F, $0, $7E, $2
0000B2FE 0C0F 008E 02               	dc.b $C, $F, $0, $8E, $2
0000B303 2C0F 009E 02               	dc.b $2C, $F, $0, $9E, $2
0000B308 EC0F 00AE 22               	dc.b $EC, $F, $0, $AE, $22
0000B30D 0C0F 00BE 22               	dc.b $C, $F, $0, $BE, $22
0000B312 2C0F 00CE 22               	dc.b $2C, $F, $0, $CE, $22
0000B317 EC0F 00DE 42               	dc.b $EC, $F, $0, $DE, $42
0000B31C 0C0F 00EE 42               	dc.b $C, $F, $0, $EE, $42
0000B321 2C0F 00FE 42               	dc.b $2C, $F, $0, $FE, $42
0000B326 0C07 0116 62               	dc.b $C, $7, $1, $16, $62
0000B32B 0F                         DATAGKI0HYDQBXP_6: dc.b $F
0000B32C EC0F 004E E2               	dc.b $EC, $F, $0, $4E, $E2
0000B331 0C0F 005E E2               	dc.b $C, $F, $0, $5E, $E2
0000B336 2C0F 006E E2               	dc.b $2C, $F, $0, $6E, $E2
0000B33B EC0F 007E 02               	dc.b $EC, $F, $0, $7E, $2
0000B340 0C0F 008E 02               	dc.b $C, $F, $0, $8E, $2
0000B345 2C0F 009E 02               	dc.b $2C, $F, $0, $9E, $2
0000B34A EC0F 00AE 22               	dc.b $EC, $F, $0, $AE, $22
0000B34F 0C0F 00BE 22               	dc.b $C, $F, $0, $BE, $22
0000B354 2C0F 00CE 22               	dc.b $2C, $F, $0, $CE, $22
0000B359 EC0F 00DE 42               	dc.b $EC, $F, $0, $DE, $42
0000B35E 0C0F 00EE 42               	dc.b $C, $F, $0, $EE, $42
0000B363 2C0F 00FE 42               	dc.b $2C, $F, $0, $FE, $42
0000B368 EC07 010E 62               	dc.b $EC, $7, $1, $E, $62
0000B36D 0C07 0116 62               	dc.b $C, $7, $1, $16, $62
0000B372 2C07 011E 62               	dc.b $2C, $7, $1, $1E, $62
0000B377 0F                         DATAGKI0HYDQBXP_7: dc.b $F
0000B378 EC0F 0233 E2               	dc.b $EC, $F, $2, $33, $E2
0000B37D 0C0F 0243 E2               	dc.b $C, $F, $2, $43, $E2
0000B382 2C0F 0253 E2               	dc.b $2C, $F, $2, $53, $E2
0000B387 EC0F 0263 02               	dc.b $EC, $F, $2, $63, $2
0000B38C 0C0F 0273 02               	dc.b $C, $F, $2, $73, $2
0000B391 2C0F 0283 02               	dc.b $2C, $F, $2, $83, $2
0000B396 EC0F 0293 22               	dc.b $EC, $F, $2, $93, $22
0000B39B 0C0F 02A3 22               	dc.b $C, $F, $2, $A3, $22
0000B3A0 2C0F 02B3 22               	dc.b $2C, $F, $2, $B3, $22
0000B3A5 EC0F 02C3 42               	dc.b $EC, $F, $2, $C3, $42
0000B3AA 0C0F 02D3 42               	dc.b $C, $F, $2, $D3, $42
0000B3AF 2C0F 02E3 42               	dc.b $2C, $F, $2, $E3, $42
0000B3B4 EC07 02F3 62               	dc.b $EC, $7, $2, $F3, $62
0000B3B9 0C07 02FB 62               	dc.b $C, $7, $2, $FB, $62
0000B3BE 2C07 0303 62               	dc.b $2C, $7, $3, $3, $62
0000B3C4 00                         	even
0000B3C4 00                         	even
0000B3C4                            
0000B3C4                            ; ===========================================================================
0000B3C4                            ; ---------------------------------------------------------------------------
0000B3C4                            ; Object 2B - Chopper enemy (GHZ)
0000B3C4                            ; ---------------------------------------------------------------------------
0000B3C4                            
0000B3C4                            Obj2B:					; XREF: Obj_Index
0000B3C4 7000                       		moveq	#0,d0
0000B3C6 1028 0024                  		move.b	$24(a0),d0
0000B3CA 323B 0000                  		move.w	Obj2B_Index(pc,d0.w),d1
0000B3CE 4EBB 1000                  		jsr	Obj2B_Index(pc,d1.w)
0000B3D2 6000 0000                  		bra.w	MarkObjGone
0000B3D6                            ; ===========================================================================
0000B3D6 0000                       Obj2B_Index:	dc.w Obj2B_Main-Obj2B_Index
0000B3D8 0000                       		dc.w Obj2B_ChgSpeed-Obj2B_Index
0000B3DA                            ; ===========================================================================
0000B3DA                            
0000B3DA                            Obj2B_Main:				; XREF: Obj2B_Index
0000B3DA 5428 0024                  		addq.b	#2,$24(a0)
0000B3DE 217C 0000 0000 0004        		move.l	#Map_obj2B,4(a0)
0000B3E6 317C 047B 0002             		move.w	#$47B,2(a0)
0000B3EC 117C 0004 0001             		move.b	#4,1(a0)
0000B3F2 117C 0004 0018             		move.b	#4,$18(a0)
0000B3F8 117C 0009 0020             		move.b	#9,$20(a0)
0000B3FE 117C 0010 0019             		move.b	#$10,$19(a0)
0000B404 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000B40A 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000B410                            
0000B410                            Obj2B_ChgSpeed:				; XREF: Obj2B_Index
0000B410 43F9 0000 0000             		lea	(Ani_obj2B).l,a1
0000B416 6100 FC3E                  		bsr.w	AnimateSprite
0000B41A 6100 0000                  		bsr.w	SpeedToPos
0000B41E 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce speed
0000B424 3028 0030                  		move.w	$30(a0),d0
0000B428 B068 000C                  		cmp.w	$C(a0),d0
0000B42C 6400                       		bcc.s	Obj2B_ChgAni
0000B42E 3140 000C                  		move.w	d0,$C(a0)
0000B432 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000B438                            
0000B438                            Obj2B_ChgAni:
0000B438 117C 0001 001C             		move.b	#1,$1C(a0)	; use fast animation
0000B43E 0440 00C0                  		subi.w	#$C0,d0
0000B442 B068 000C                  		cmp.w	$C(a0),d0
0000B446 6400                       		bcc.s	locret_ABB6
0000B448 117C 0000 001C             		move.b	#0,$1C(a0)	; use slow animation
0000B44E 4A68 0012                  		tst.w	$12(a0)		; is Chopper at	its highest point?
0000B452 6B00                       		bmi.s	locret_ABB6	; if not, branch
0000B454 117C 0002 001C             		move.b	#2,$1C(a0)	; use stationary animation
0000B45A                            
0000B45A                            locret_ABB6:
0000B45A 4E75                       		rts	
0000B45C                            ; ===========================================================================
0000B45C                            Ani_obj2B:
0000B45C                            	include "_anim\obj2B.asm"
0000B45C                            ; ---------------------------------------------------------------------------
0000B45C                            ; Animation script - Chopper enemy
0000B45C                            ; ---------------------------------------------------------------------------
0000B45C 0000                       		dc.w byte_ABBE-Ani_obj2B
0000B45E 0000                       		dc.w byte_ABC2-Ani_obj2B
0000B460 0000                       		dc.w byte_ABC6-Ani_obj2B
0000B462 0700 01FF                  byte_ABBE:	dc.b 7,	0, 1, $FF
0000B466 0300 01FF                  byte_ABC2:	dc.b 3,	0, 1, $FF
0000B46A 0700 FF                    byte_ABC6:	dc.b 7,	0, $FF
0000B46E 00                         		even
0000B46E 00                         		even
0000B46E                            
0000B46E                            ; ---------------------------------------------------------------------------
0000B46E                            ; Sprite mappings - Chopper enemy (GHZ)
0000B46E                            ; ---------------------------------------------------------------------------
0000B46E                            Map_obj2B:
0000B46E                            	include "_maps\obj2B.asm"
0000B46E                            Map_1ff1:
0000B46E 0000                       Map_1ff1_0: 	dc.w Map_1ff1_4-Map_1ff1
0000B470 0000                       Map_1ff1_2: 	dc.w Map_1ff1_F-Map_1ff1
0000B472 02                         Map_1ff1_4: 	dc.b $2
0000B473 E80B 0000 F4               	dc.b $E8, $B, $0, $0, $F4
0000B478 0809 000C F4               	dc.b $8, $9, $0, $C, $F4
0000B47D 02                         Map_1ff1_F: 	dc.b $2
0000B47E E80B 0012 F4               	dc.b $E8, $B, $0, $12, $F4
0000B483 0809 000C F4               	dc.b $8, $9, $0, $C, $F4
0000B488                            	even
0000B488                            	even
0000B488                            
0000B488                            ; ===========================================================================
0000B488                            ; ---------------------------------------------------------------------------
0000B488                            ; Object 2C - Jaws enemy (LZ)
0000B488                            ; ---------------------------------------------------------------------------
0000B488                            
0000B488                            Obj2C:					; XREF: Obj_Index
0000B488 7000                       		moveq	#0,d0
0000B48A 1028 0024                  		move.b	$24(a0),d0
0000B48E 323B 0000                  		move.w	Obj2C_Index(pc,d0.w),d1
0000B492 4EFB 1000                  		jmp	Obj2C_Index(pc,d1.w)
0000B496                            ; ===========================================================================
0000B496 0000                       Obj2C_Index:	dc.w Obj2C_Main-Obj2C_Index
0000B498 0000                       		dc.w Obj2C_Turn-Obj2C_Index
0000B49A                            ; ===========================================================================
0000B49A                            
0000B49A                            Obj2C_Main:				; XREF: Obj2C_Index
0000B49A 5428 0024                  		addq.b	#2,$24(a0)
0000B49E 217C 0000 0000 0004        		move.l	#Map_obj2C,4(a0)
0000B4A6 317C 2486 0002             		move.w	#$2486,2(a0)
0000B4AC 0028 0004 0001             		ori.b	#4,1(a0)
0000B4B2 117C 000A 0020             		move.b	#$A,$20(a0)
0000B4B8 117C 0004 0018             		move.b	#4,$18(a0)
0000B4BE 117C 0010 0019             		move.b	#$10,$19(a0)
0000B4C4 7000                       		moveq	#0,d0
0000B4C6 1028 0028                  		move.b	$28(a0),d0	; load object subtype number
0000B4CA ED48                       		lsl.w	#6,d0		; multiply d0 by 64
0000B4CC 5340                       		subq.w	#1,d0
0000B4CE 3140 0030                  		move.w	d0,$30(a0)	; set turn delay time
0000B4D2 3140 0032                  		move.w	d0,$32(a0)
0000B4D6 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move Jaws to the left
0000B4DC 0828 0000 0022             		btst	#0,$22(a0)	; is Jaws facing left?
0000B4E2 6700                       		beq.s	Obj2C_Turn	; if yes, branch
0000B4E4 4468 0010                  		neg.w	$10(a0)		; move Jaws to the right
0000B4E8                            
0000B4E8                            Obj2C_Turn:				; XREF: Obj2C_Index
0000B4E8 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from turn delay time
0000B4EC 6A00                       		bpl.s	Obj2C_Animate	; if time remains, branch
0000B4EE 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	turn delay time
0000B4F4 4468 0010                  		neg.w	$10(a0)		; change speed direction
0000B4F8 0868 0000 0022             		bchg	#0,$22(a0)	; change Jaws facing direction
0000B4FE 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000B504                            
0000B504                            Obj2C_Animate:
0000B504 43F9 0000 0000             		lea	(Ani_obj2C).l,a1
0000B50A 6100 FB4A                  		bsr.w	AnimateSprite
0000B50E 6100 0000                  		bsr.w	SpeedToPos
0000B512 6000 0000                  		bra.w	MarkObjGone
0000B516                            ; ===========================================================================
0000B516                            Ani_obj2C:
0000B516                            	include "_anim\obj2C.asm"
0000B516                            ; ---------------------------------------------------------------------------
0000B516                            ; Animation script - Jaws enemy
0000B516                            ; ---------------------------------------------------------------------------
0000B516 0000                       		dc.w byte_AC6A-Ani_obj2C
0000B518 0700 0102 03FF             byte_AC6A:	dc.b 7,	0, 1, 2, 3, $FF
0000B51E                            		even
0000B51E                            		even
0000B51E                            
0000B51E                            ; ---------------------------------------------------------------------------
0000B51E                            ; Sprite mappings - Jaws enemy (LZ)
0000B51E                            ; ---------------------------------------------------------------------------
0000B51E                            Map_obj2C:
0000B51E                            	include "_maps\obj2C.asm"
0000B51E                            ; ---------------------------------------------------------------------------
0000B51E                            ; Sprite mappings - Jaws enemy (LZ)
0000B51E                            ; ---------------------------------------------------------------------------
0000B51E 0000                       		dc.w byte_AC78-Map_obj2C
0000B520 0000                       		dc.w byte_AC83-Map_obj2C
0000B522 0000                       		dc.w byte_AC8E-Map_obj2C
0000B524 0000                       		dc.w byte_AC99-Map_obj2C
0000B526 02                         byte_AC78:	dc.b 2
0000B527 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0000B52C F505 0018 10               		dc.b $F5, 5, 0,	$18, $10
0000B531 02                         byte_AC83:	dc.b 2
0000B532 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0000B537 F505 001C 10               		dc.b $F5, 5, 0,	$1C, $10
0000B53C 02                         byte_AC8E:	dc.b 2
0000B53D F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0000B542 F505 1018 10               		dc.b $F5, 5, $10, $18, $10
0000B547 02                         byte_AC99:	dc.b 2
0000B548 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0000B54D F505 101C 10               		dc.b $F5, 5, $10, $1C, $10
0000B552                            		even
0000B552                            		even
0000B552                            
0000B552                            ; ===========================================================================
0000B552                            ; ---------------------------------------------------------------------------
0000B552                            ; Object 2D - Burrobot enemy (LZ)
0000B552                            ; ---------------------------------------------------------------------------
0000B552                            
0000B552                            Obj2D:					; XREF: Obj_Index
0000B552 7000                       		moveq	#0,d0
0000B554 1028 0024                  		move.b	$24(a0),d0
0000B558 323B 0000                  		move.w	Obj2D_Index(pc,d0.w),d1
0000B55C 4EFB 1000                  		jmp	Obj2D_Index(pc,d1.w)
0000B560                            ; ===========================================================================
0000B560 0000                       Obj2D_Index:	dc.w Obj2D_Main-Obj2D_Index
0000B562 0000                       		dc.w Obj2D_Action-Obj2D_Index
0000B564                            ; ===========================================================================
0000B564                            
0000B564                            Obj2D_Main:				; XREF: Obj2D_Index
0000B564 5428 0024                  		addq.b	#2,$24(a0)
0000B568 117C 0013 0016             		move.b	#$13,$16(a0)
0000B56E 117C 0008 0017             		move.b	#8,$17(a0)
0000B574 217C 0000 0000 0004        		move.l	#Map_obj2D,4(a0)
0000B57C 317C 04A6 0002             		move.w	#$4A6,2(a0)
0000B582 0028 0004 0001             		ori.b	#4,1(a0)
0000B588 117C 0004 0018             		move.b	#4,$18(a0)
0000B58E 117C 0005 0020             		move.b	#5,$20(a0)
0000B594 117C 000C 0019             		move.b	#$C,$19(a0)
0000B59A 5C28 0025                  		addq.b	#6,$25(a0)	; run "Obj2D_ChkSonic" routine
0000B59E 117C 0002 001C             		move.b	#2,$1C(a0)
0000B5A4                            
0000B5A4                            Obj2D_Action:				; XREF: Obj2D_Index
0000B5A4 7000                       		moveq	#0,d0
0000B5A6 1028 0025                  		move.b	$25(a0),d0
0000B5AA 323B 0000                  		move.w	Obj2D_Index2(pc,d0.w),d1
0000B5AE 4EBB 1000                  		jsr	Obj2D_Index2(pc,d1.w)
0000B5B2 43F9 0000 0000             		lea	(Ani_obj2D).l,a1
0000B5B8 6100 FA9C                  		bsr.w	AnimateSprite
0000B5BC 6000 0000                  		bra.w	MarkObjGone
0000B5C0                            ; ===========================================================================
0000B5C0 0000                       Obj2D_Index2:	dc.w Obj2D_ChgDir-Obj2D_Index2
0000B5C2 0000                       		dc.w Obj2D_Move-Obj2D_Index2
0000B5C4 0000                       		dc.w Obj2D_Jump-Obj2D_Index2
0000B5C6 0000                       		dc.w Obj2D_ChkSonic-Obj2D_Index2
0000B5C8                            ; ===========================================================================
0000B5C8                            
0000B5C8                            Obj2D_ChgDir:				; XREF: Obj2D_Index2
0000B5C8 5368 0030                  		subq.w	#1,$30(a0)
0000B5CC 6A00                       		bpl.s	locret_AD42
0000B5CE 5428 0025                  		addq.b	#2,$25(a0)
0000B5D2 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000B5D8 317C 0080 0010             		move.w	#$80,$10(a0)
0000B5DE 117C 0001 001C             		move.b	#1,$1C(a0)
0000B5E4 0868 0000 0022             		bchg	#0,$22(a0)	; change direction the Burrobot	is facing
0000B5EA 6700                       		beq.s	locret_AD42
0000B5EC 4468 0010                  		neg.w	$10(a0)		; change direction the Burrobot	is moving
0000B5F0                            
0000B5F0                            locret_AD42:
0000B5F0 4E75                       		rts	
0000B5F2                            ; ===========================================================================
0000B5F2                            
0000B5F2                            Obj2D_Move:				; XREF: Obj2D_Index2
0000B5F2 5368 0030                  		subq.w	#1,$30(a0)
0000B5F6 6B00                       		bmi.s	loc_AD84
0000B5F8 6100 0000                  		bsr.w	SpeedToPos
0000B5FC 0868 0000 0032             		bchg	#0,$32(a0)
0000B602 6600                       		bne.s	loc_AD78
0000B604 3628 0008                  		move.w	8(a0),d3
0000B608 0643 000C                  		addi.w	#$C,d3
0000B60C 0828 0000 0022             		btst	#0,$22(a0)
0000B612 6600                       		bne.s	loc_AD6A
0000B614 0443 0018                  		subi.w	#$18,d3
0000B618                            
0000B618                            loc_AD6A:
0000B618 4EB9 0000 0000             		jsr	ObjHitFloor2
0000B61E 0C41 000C                  		cmpi.w	#$C,d1
0000B622 6C00                       		bge.s	loc_AD84
0000B624 4E75                       		rts	
0000B626                            ; ===========================================================================
0000B626                            
0000B626                            loc_AD78:				; XREF: Obj2D_Move
0000B626 4EB9 0000 0000             		jsr	ObjHitFloor
0000B62C D368 000C                  		add.w	d1,$C(a0)
0000B630 4E75                       		rts	
0000B632                            ; ===========================================================================
0000B632                            
0000B632                            loc_AD84:				; XREF: Obj2D_Move
0000B632 0838 0002 FE0F             		btst	#2,($FFFFFE0F).w
0000B638 6700                       		beq.s	loc_ADA4
0000B63A 5528 0025                  		subq.b	#2,$25(a0)
0000B63E 317C 003B 0030             		move.w	#$3B,$30(a0)
0000B644 317C 0000 0010             		move.w	#0,$10(a0)
0000B64A 117C 0000 001C             		move.b	#0,$1C(a0)
0000B650 4E75                       		rts	
0000B652                            ; ===========================================================================
0000B652                            
0000B652                            loc_ADA4:
0000B652 5428 0025                  		addq.b	#2,$25(a0)
0000B656 317C FC00 0012             		move.w	#-$400,$12(a0)
0000B65C 117C 0002 001C             		move.b	#2,$1C(a0)
0000B662 4E75                       		rts	
0000B664                            ; ===========================================================================
0000B664                            
0000B664                            Obj2D_Jump:				; XREF: Obj2D_Index2
0000B664 6100 0000                  		bsr.w	SpeedToPos
0000B668 0668 0018 0012             		addi.w	#$18,$12(a0)
0000B66E 6B00                       		bmi.s	locret_ADF0
0000B670 117C 0003 001C             		move.b	#3,$1C(a0)
0000B676 4EB9 0000 0000             		jsr	ObjHitFloor
0000B67C 4A41                       		tst.w	d1
0000B67E 6A00                       		bpl.s	locret_ADF0
0000B680 D368 000C                  		add.w	d1,$C(a0)
0000B684 317C 0000 0012             		move.w	#0,$12(a0)
0000B68A 117C 0001 001C             		move.b	#1,$1C(a0)
0000B690 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000B696 5528 0025                  		subq.b	#2,$25(a0)
0000B69A 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000B69E                            
0000B69E                            locret_ADF0:
0000B69E 4E75                       		rts	
0000B6A0                            ; ===========================================================================
0000B6A0                            
0000B6A0                            Obj2D_ChkSonic:				; XREF: Obj2D_Index2
0000B6A0 343C 0060                  		move.w	#$60,d2
0000B6A4 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000B6A8 6400                       		bcc.s	locret_AE20
0000B6AA 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000B6AE 9068 000C                  		sub.w	$C(a0),d0
0000B6B2 6400                       		bcc.s	locret_AE20
0000B6B4 0C40 FF80                  		cmpi.w	#-$80,d0
0000B6B8 6500                       		bcs.s	locret_AE20
0000B6BA 4A78 FE08                  		tst.w	($FFFFFE08).w
0000B6BE 6600                       		bne.s	locret_AE20
0000B6C0 5528 0025                  		subq.b	#2,$25(a0)
0000B6C4 3141 0010                  		move.w	d1,$10(a0)
0000B6C8 317C FC00 0012             		move.w	#-$400,$12(a0)
0000B6CE                            
0000B6CE                            locret_AE20:
0000B6CE 4E75                       		rts	
0000B6D0                            
0000B6D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B6D0                            
0000B6D0                            
0000B6D0                            Obj2D_ChkSonic2:			; XREF: Obj2D_ChkSonic
0000B6D0 323C 0080                  		move.w	#$80,d1
0000B6D4 08E8 0000 0022             		bset	#0,$22(a0)
0000B6DA 3038 D008                  		move.w	($FFFFD008).w,d0
0000B6DE 9068 0008                  		sub.w	8(a0),d0
0000B6E2 6400                       		bcc.s	loc_AE40
0000B6E4 4440                       		neg.w	d0
0000B6E6 4441                       		neg.w	d1
0000B6E8 08A8 0000 0022             		bclr	#0,$22(a0)
0000B6EE                            
0000B6EE                            loc_AE40:
0000B6EE B042                       		cmp.w	d2,d0
0000B6F0 4E75                       		rts	
0000B6F2                            ; End of function Obj2D_ChkSonic2
0000B6F2                            
0000B6F2                            ; ===========================================================================
0000B6F2                            Ani_obj2D:
0000B6F2                            	include "_anim\obj2D.asm"
0000B6F2                            ; ---------------------------------------------------------------------------
0000B6F2                            ; Animation script - Burrobot enemy but craig
0000B6F2                            ; ---------------------------------------------------------------------------
0000B6F2 0000                       		dc.w byte_AE4C-Ani_obj2D
0000B6F4 0000                       		dc.w byte_AE50-Ani_obj2D
0000B6F6 0000                       		dc.w byte_AE54-Ani_obj2D
0000B6F8 0000                       		dc.w byte_AE58-Ani_obj2D
0000B6FA 0300 FF                    byte_AE4C:	dc.b 3,	0, $FF ; wait
0000B6FD 0300 01FF                  byte_AE50:	dc.b 3,	0, 1, $FF ; waddle
0000B701 0100 0102 0304 0506 0708+  byte_AE54:	dc.b 1,	0, 1, 2, 3, 4, 5, 6, 7, 8, 3, 9, $A, $FF ; speen
0000B70F 0304 FF                    byte_AE58:	dc.b 3,	4, $FF
0000B712                            		even
0000B712                            		even
0000B712                            
0000B712                            ; ---------------------------------------------------------------------------
0000B712                            ; Sprite mappings - Burrobot enemy (LZ)
0000B712                            ; ---------------------------------------------------------------------------
0000B712                            Map_obj2D:
0000B712                            	include "_maps\obj2D.asm"
0000B712                            Map_e3a3:
0000B712 0000                       Map_e3a3_0: 	dc.w Map_e3a3_16-Map_e3a3
0000B714 0000                       Map_e3a3_2: 	dc.w Map_e3a3_21-Map_e3a3
0000B716 0000                       Map_e3a3_4: 	dc.w Map_e3a3_2C-Map_e3a3
0000B718 0000                       Map_e3a3_6: 	dc.w Map_e3a3_37-Map_e3a3
0000B71A 0000                       Map_e3a3_8: 	dc.w Map_e3a3_42-Map_e3a3
0000B71C 0000                       Map_e3a3_A: 	dc.w Map_e3a3_4D-Map_e3a3
0000B71E 0000                       Map_e3a3_C: 	dc.w Map_e3a3_58-Map_e3a3
0000B720 0000                       Map_e3a3_E: 	dc.w Map_e3a3_63-Map_e3a3
0000B722 0000                       Map_e3a3_10: 	dc.w Map_e3a3_6E-Map_e3a3
0000B724 0000                       Map_e3a3_12: 	dc.w Map_e3a3_79-Map_e3a3
0000B726 0000                       Map_e3a3_14: 	dc.w Map_e3a3_84-Map_e3a3
0000B728 02                         Map_e3a3_16: 	dc.b $2
0000B729 EC0B 0800 F4               	dc.b $EC, $B, $8, $0, $F4
0000B72E 0C08 080C F4               	dc.b $C, $8, $8, $C, $F4
0000B733 02                         Map_e3a3_21: 	dc.b $2
0000B734 EC07 080F F8               	dc.b $EC, $7, $8, $F, $F8
0000B739 0C04 0817 F8               	dc.b $C, $4, $8, $17, $F8
0000B73E 02                         Map_e3a3_2C: 	dc.b $2
0000B73F EC07 0819 F8               	dc.b $EC, $7, $8, $19, $F8
0000B744 0C04 0821 F8               	dc.b $C, $4, $8, $21, $F8
0000B749 02                         Map_e3a3_37: 	dc.b $2
0000B74A EC02 0823 FC               	dc.b $EC, $2, $8, $23, $FC
0000B74F FC02 1823 FC               	dc.b $FC, $2, $18, $23, $FC
0000B754 02                         Map_e3a3_42: 	dc.b $2
0000B755 EC06 0826 F8               	dc.b $EC, $6, $8, $26, $F8
0000B75A FC06 1826 F8               	dc.b $FC, $6, $18, $26, $F8
0000B75F 02                         Map_e3a3_4D: 	dc.b $2
0000B760 EC06 082C F8               	dc.b $EC, $6, $8, $2C, $F8
0000B765 FC06 182C F8               	dc.b $FC, $6, $18, $2C, $F8
0000B76A 02                         Map_e3a3_58: 	dc.b $2
0000B76B EC0A 0832 F4               	dc.b $EC, $A, $8, $32, $F4
0000B770 FC0A 1832 F4               	dc.b $FC, $A, $18, $32, $F4
0000B775 02                         Map_e3a3_63: 	dc.b $2
0000B776 EC06 002C F8               	dc.b $EC, $6, $0, $2C, $F8
0000B77B FC06 102C F8               	dc.b $FC, $6, $10, $2C, $F8
0000B780 02                         Map_e3a3_6E: 	dc.b $2
0000B781 EC06 0026 F8               	dc.b $EC, $6, $0, $26, $F8
0000B786 FC06 1026 F8               	dc.b $FC, $6, $10, $26, $F8
0000B78B 02                         Map_e3a3_79: 	dc.b $2
0000B78C EC07 0019 F8               	dc.b $EC, $7, $0, $19, $F8
0000B791 0C04 0021 F8               	dc.b $C, $4, $0, $21, $F8
0000B796 02                         Map_e3a3_84: 	dc.b $2
0000B797 EC07 000F F8               	dc.b $EC, $7, $0, $F, $F8
0000B79C 0C04 0017 F8               	dc.b $C, $4, $0, $17, $F8
0000B7A2 00                         	even
0000B7A2 00                         	even
0000B7A2                            
0000B7A2                            ; ===========================================================================
0000B7A2                            ; ---------------------------------------------------------------------------
0000B7A2                            ; Object 2F - large moving platforms (MZ)
0000B7A2                            ; ---------------------------------------------------------------------------
0000B7A2                            
0000B7A2                            Obj2F:					; XREF: Obj_Index
0000B7A2 7000                       		moveq	#0,d0
0000B7A4 1028 0024                  		move.b	$24(a0),d0
0000B7A8 323B 0000                  		move.w	Obj2F_Index(pc,d0.w),d1
0000B7AC 4EFB 1000                  		jmp	Obj2F_Index(pc,d1.w)
0000B7B0                            ; ===========================================================================
0000B7B0 0000                       Obj2F_Index:	dc.w Obj2F_Main-Obj2F_Index
0000B7B2 0000                       		dc.w Obj2F_Action-Obj2F_Index
0000B7B4                            
0000B7B4 0000                       Obj2F_Data:	dc.w Obj2F_Data1-Obj2F_Data 	; collision angle data
0000B7B6 0040                       		dc.b 0,	$40			; frame	number,	platform width
0000B7B8 0000                       		dc.w Obj2F_Data3-Obj2F_Data
0000B7BA 0140                       		dc.b 1,	$40
0000B7BC 0000                       		dc.w Obj2F_Data2-Obj2F_Data
0000B7BE 0220                       		dc.b 2,	$20
0000B7C0                            ; ===========================================================================
0000B7C0                            
0000B7C0                            Obj2F_Main:				; XREF: Obj2F_Index
0000B7C0 5428 0024                  		addq.b	#2,$24(a0)
0000B7C4 217C 0000 0000 0004        		move.l	#Map_obj2F,4(a0)
0000B7CC 317C C000 0002             		move.w	#$C000,2(a0)
0000B7D2 117C 0004 0001             		move.b	#4,1(a0)
0000B7D8 117C 0005 0018             		move.b	#5,$18(a0)
0000B7DE 3168 000C 002C             		move.w	$C(a0),$2C(a0)
0000B7E4 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000B7EA 7000                       		moveq	#0,d0
0000B7EC 1028 0028                  		move.b	$28(a0),d0
0000B7F0 E448                       		lsr.w	#2,d0
0000B7F2 0240 001C                  		andi.w	#$1C,d0
0000B7F6 43FB 00BC                  		lea	Obj2F_Data(pc,d0.w),a1
0000B7FA 3019                       		move.w	(a1)+,d0
0000B7FC 45FB 00B6                  		lea	Obj2F_Data(pc,d0.w),a2
0000B800 214A 0030                  		move.l	a2,$30(a0)
0000B804 1159 001A                  		move.b	(a1)+,$1A(a0)
0000B808 1151 0019                  		move.b	(a1),$19(a0)
0000B80C 0228 000F 0028             		andi.b	#$F,$28(a0)
0000B812 117C 0040 0016             		move.b	#$40,$16(a0)
0000B818 08E8 0004 0001             		bset	#4,1(a0)
0000B81E                            
0000B81E                            Obj2F_Action:				; XREF: Obj2F_Index
0000B81E 6100 0000                  		bsr.w	Obj2F_Types
0000B822 4A28 0025                  		tst.b	$25(a0)
0000B826 6700                       		beq.s	Obj2F_Solid
0000B828 7200                       		moveq	#0,d1
0000B82A 1228 0019                  		move.b	$19(a0),d1
0000B82E 0641 000B                  		addi.w	#$B,d1
0000B832 6100 C552                  		bsr.w	ExitPlatform
0000B836 0829 0003 0022             		btst	#3,$22(a1)
0000B83C 6600 0000                  		bne.w	Obj2F_Slope
0000B840 4228 0025                  		clr.b	$25(a0)
0000B844 6000                       		bra.s	Obj2F_Display
0000B846                            ; ===========================================================================
0000B846                            
0000B846                            Obj2F_Slope:				; XREF: Obj2F_Action
0000B846 7200                       		moveq	#0,d1
0000B848 1228 0019                  		move.b	$19(a0),d1
0000B84C 0641 000B                  		addi.w	#$B,d1
0000B850 2468 0030                  		movea.l	$30(a0),a2
0000B854 3428 0008                  		move.w	8(a0),d2
0000B858 6100 D51C                  		bsr.w	SlopeObject2
0000B85C 6000                       		bra.s	Obj2F_Display
0000B85E                            ; ===========================================================================
0000B85E                            
0000B85E                            Obj2F_Solid:				; XREF: Obj2F_Action
0000B85E 7200                       		moveq	#0,d1
0000B860 1228 0019                  		move.b	$19(a0),d1
0000B864 0641 000B                  		addi.w	#$B,d1
0000B868 343C 0020                  		move.w	#$20,d2
0000B86C 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000B872 6600                       		bne.s	loc_AF8E
0000B874 343C 0030                  		move.w	#$30,d2
0000B878                            
0000B878                            loc_AF8E:
0000B878 2468 0030                  		movea.l	$30(a0),a2
0000B87C 6100 0000                  		bsr.w	SolidObject2F
0000B880                            
0000B880                            Obj2F_Display:				; XREF: Obj2F_Action
0000B880 6100 0000                  		bsr.w	DisplaySprite
0000B884 6000 0000                  		bra.w	Obj2F_ChkDel
0000B888                            
0000B888                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B888                            
0000B888                            
0000B888                            Obj2F_Types:				; XREF: Obj2F_Action
0000B888 7000                       		moveq	#0,d0
0000B88A 1028 0028                  		move.b	$28(a0),d0
0000B88E 0240 0007                  		andi.w	#7,d0
0000B892 D040                       		add.w	d0,d0
0000B894 323B 0000                  		move.w	Obj2F_TypeIndex(pc,d0.w),d1
0000B898 4EFB 1000                  		jmp	Obj2F_TypeIndex(pc,d1.w)
0000B89C                            ; End of function Obj2F_Types
0000B89C                            
0000B89C                            ; ===========================================================================
0000B89C 0000                       Obj2F_TypeIndex:dc.w Obj2F_Type00-Obj2F_TypeIndex
0000B89E 0000                       		dc.w Obj2F_Type01-Obj2F_TypeIndex
0000B8A0 0000                       		dc.w Obj2F_Type02-Obj2F_TypeIndex
0000B8A2 0000                       		dc.w Obj2F_Type03-Obj2F_TypeIndex
0000B8A4 0000                       		dc.w Obj2F_Type04-Obj2F_TypeIndex
0000B8A6 0000                       		dc.w Obj2F_Type05-Obj2F_TypeIndex
0000B8A8                            ; ===========================================================================
0000B8A8                            
0000B8A8                            Obj2F_Type00:				; XREF: Obj2F_TypeIndex
0000B8A8 4E75                       		rts			; type 00 platform doesn't move
0000B8AA                            ; ===========================================================================
0000B8AA                            
0000B8AA                            Obj2F_Type01:				; XREF: Obj2F_TypeIndex
0000B8AA 1038 FE60                  		move.b	($FFFFFE60).w,d0
0000B8AE 323C 0020                  		move.w	#$20,d1
0000B8B2 6000                       		bra.s	Obj2F_Move
0000B8B4                            ; ===========================================================================
0000B8B4                            
0000B8B4                            Obj2F_Type02:				; XREF: Obj2F_TypeIndex
0000B8B4 1038 FE64                  		move.b	($FFFFFE64).w,d0
0000B8B8 323C 0030                  		move.w	#$30,d1
0000B8BC 6000                       		bra.s	Obj2F_Move
0000B8BE                            ; ===========================================================================
0000B8BE                            
0000B8BE                            Obj2F_Type03:				; XREF: Obj2F_TypeIndex
0000B8BE 1038 FE68                  		move.b	($FFFFFE68).w,d0
0000B8C2 323C 0040                  		move.w	#$40,d1
0000B8C6 6000                       		bra.s	Obj2F_Move
0000B8C8                            ; ===========================================================================
0000B8C8                            
0000B8C8                            Obj2F_Type04:				; XREF: Obj2F_TypeIndex
0000B8C8 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0000B8CC 323C 0060                  		move.w	#$60,d1
0000B8D0                            
0000B8D0                            Obj2F_Move:
0000B8D0 0828 0003 0028             		btst	#3,$28(a0)
0000B8D6 6700                       		beq.s	loc_AFF2
0000B8D8 4440                       		neg.w	d0
0000B8DA D041                       		add.w	d1,d0
0000B8DC                            
0000B8DC                            loc_AFF2:
0000B8DC 3228 002C                  		move.w	$2C(a0),d1
0000B8E0 9240                       		sub.w	d0,d1
0000B8E2 3141 000C                  		move.w	d1,$C(a0)	; update position on y-axis
0000B8E6 4E75                       		rts	
0000B8E8                            ; ===========================================================================
0000B8E8                            
0000B8E8                            Obj2F_Type05:				; XREF: Obj2F_TypeIndex
0000B8E8 1028 0034                  		move.b	$34(a0),d0
0000B8EC 4A28 0025                  		tst.b	$25(a0)
0000B8F0 6600                       		bne.s	loc_B010
0000B8F2 5500                       		subq.b	#2,d0
0000B8F4 6400                       		bcc.s	loc_B01C
0000B8F6 7000                       		moveq	#0,d0
0000B8F8 6000                       		bra.s	loc_B01C
0000B8FA                            ; ===========================================================================
0000B8FA                            
0000B8FA                            loc_B010:
0000B8FA 5800                       		addq.b	#4,d0
0000B8FC 0C00 0040                  		cmpi.b	#$40,d0
0000B900 6500                       		bcs.s	loc_B01C
0000B902 103C 0040                  		move.b	#$40,d0
0000B906                            
0000B906                            loc_B01C:
0000B906 1140 0034                  		move.b	d0,$34(a0)
0000B90A 4EB9 0000 2D6C             		jsr	(CalcSine).l
0000B910 E848                       		lsr.w	#4,d0
0000B912 3200                       		move.w	d0,d1
0000B914 D068 002C                  		add.w	$2C(a0),d0
0000B918 3140 000C                  		move.w	d0,$C(a0)
0000B91C 0C28 0020 0034             		cmpi.b	#$20,$34(a0)
0000B922 6600                       		bne.s	loc_B07A
0000B924 4A28 0035                  		tst.b	$35(a0)
0000B928 6600                       		bne.s	loc_B07A
0000B92A 117C 0001 0035             		move.b	#1,$35(a0)
0000B930 6100 0000                  		bsr.w	SingleObjLoad2
0000B934 6600                       		bne.s	loc_B07A
0000B936 12BC 0035                  		move.b	#$35,0(a1)	; load sitting flame object
0000B93A 3368 0008 0008             		move.w	8(a0),8(a1)
0000B940 3368 002C 002C             		move.w	$2C(a0),$2C(a1)
0000B946 5069 002C                  		addq.w	#8,$2C(a1)
0000B94A 5769 002C                  		subq.w	#3,$2C(a1)
0000B94E 0469 0040 0008             		subi.w	#$40,8(a1)
0000B954 2368 0030 0030             		move.l	$30(a0),$30(a1)
0000B95A 2348 0038                  		move.l	a0,$38(a1)
0000B95E 2448                       		movea.l	a0,a2
0000B960 6100                       		bsr.s	sub_B09C
0000B962                            
0000B962                            loc_B07A:
0000B962 7400                       		moveq	#0,d2
0000B964 45E8 0036                  		lea	$36(a0),a2
0000B968 141A                       		move.b	(a2)+,d2
0000B96A 5302                       		subq.b	#1,d2
0000B96C 6500                       		bcs.s	locret_B09A
0000B96E                            
0000B96E                            loc_B086:
0000B96E 7000                       		moveq	#0,d0
0000B970 101A                       		move.b	(a2)+,d0
0000B972 ED48                       		lsl.w	#6,d0
0000B974 0640 D000                  		addi.w	#-$3000,d0
0000B978 3240                       		movea.w	d0,a1
0000B97A 3341 003C                  		move.w	d1,$3C(a1)
0000B97E 51CA FFEE                  		dbf	d2,loc_B086
0000B982                            
0000B982                            locret_B09A:
0000B982 4E75                       		rts	
0000B984                            
0000B984                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B984                            
0000B984                            
0000B984                            sub_B09C:
0000B984 45EA 0036                  		lea	$36(a2),a2
0000B988 7000                       		moveq	#0,d0
0000B98A 1012                       		move.b	(a2),d0
0000B98C 5212                       		addq.b	#1,(a2)
0000B98E 45F2 0001                  		lea	1(a2,d0.w),a2
0000B992 3009                       		move.w	a1,d0
0000B994 0440 D000                  		subi.w	#-$3000,d0
0000B998 EC48                       		lsr.w	#6,d0
0000B99A 0240 007F                  		andi.w	#$7F,d0
0000B99E 1480                       		move.b	d0,(a2)
0000B9A0 4E75                       		rts	
0000B9A2                            ; End of function sub_B09C
0000B9A2                            
0000B9A2                            ; ===========================================================================
0000B9A2                            
0000B9A2                            Obj2F_ChkDel:				; XREF: Obj2F_Display
0000B9A2 4A28 0035                  		tst.b	$35(a0)
0000B9A6 6700                       		beq.s	loc_B0C6
0000B9A8 4A28 0001                  		tst.b	1(a0)
0000B9AC 6A00                       		bpl.s	Obj2F_DelFlames
0000B9AE                            
0000B9AE                            loc_B0C6:
0000B9AE 3028 002A                  		move.w	$2A(a0),d0
0000B9B2 0240 FF80                  		andi.w	#$FF80,d0
0000B9B6 3238 F700                  		move.w	($FFFFF700).w,d1
0000B9BA 0441 0080                  		subi.w	#$80,d1
0000B9BE 0241 FF80                  		andi.w	#$FF80,d1
0000B9C2 9041                       		sub.w	d1,d0
0000B9C4 0C40 0280                  		cmpi.w	#$280,d0
0000B9C8 6200 0000                  		bhi.w	DeleteObject
0000B9CC 4E75                       		rts	
0000B9CE                            ; ===========================================================================
0000B9CE                            
0000B9CE                            Obj2F_DelFlames:			; XREF: Obj2F_ChkDel
0000B9CE 7400                       		moveq	#0,d2
0000B9D0                            
0000B9D0                            loc_B0E8:
0000B9D0 45E8 0036                  		lea	$36(a0),a2
0000B9D4 1412                       		move.b	(a2),d2
0000B9D6 421A                       		clr.b	(a2)+
0000B9D8 5302                       		subq.b	#1,d2
0000B9DA 6500                       		bcs.s	locret_B116
0000B9DC                            
0000B9DC                            loc_B0F4:
0000B9DC 7000                       		moveq	#0,d0
0000B9DE 1012                       		move.b	(a2),d0
0000B9E0 421A                       		clr.b	(a2)+
0000B9E2 ED48                       		lsl.w	#6,d0
0000B9E4 0640 D000                  		addi.w	#-$3000,d0
0000B9E8 3240                       		movea.w	d0,a1
0000B9EA 6100 0000                  		bsr.w	DeleteObject2
0000B9EE 51CA FFEC                  		dbf	d2,loc_B0F4
0000B9F2 117C 0000 0035             		move.b	#0,$35(a0)
0000B9F8 117C 0000 0034             		move.b	#0,$34(a0)
0000B9FE                            
0000B9FE                            locret_B116:
0000B9FE 4E75                       		rts	
0000BA00                            ; ===========================================================================
0000BA00                            ; ---------------------------------------------------------------------------
0000BA00                            ; Collision data for large moving platforms (MZ)
0000BA00                            ; ---------------------------------------------------------------------------
0000BA00                            Obj2F_Data1:	incbin	misc\mz_pfm1.bin
0000BA4C                            		even
0000BA4C                            Obj2F_Data2:	incbin	misc\mz_pfm2.bin
0000BA78                            		even
0000BA78                            Obj2F_Data3:	incbin	misc\mz_pfm3.bin
0000BAC4                            		even
0000BAC4                            ; ===========================================================================
0000BAC4                            ; ---------------------------------------------------------------------------
0000BAC4                            ; Object 35 - fireball that sits on the	floor (MZ)
0000BAC4                            ; (appears when	you walk on sinking platforms)
0000BAC4                            ; ---------------------------------------------------------------------------
0000BAC4                            
0000BAC4                            Obj35:					; XREF: Obj_Index
0000BAC4 7000                       		moveq	#0,d0
0000BAC6 1028 0024                  		move.b	$24(a0),d0
0000BACA 323B 0000                  		move.w	Obj35_Index(pc,d0.w),d1
0000BACE 4EFB 1000                  		jmp	Obj35_Index(pc,d1.w)
0000BAD2                            ; ===========================================================================
0000BAD2 0000                       Obj35_Index:	dc.w Obj35_Main-Obj35_Index
0000BAD4 0000                       		dc.w loc_B238-Obj35_Index
0000BAD6 0000                       		dc.w Obj35_Move-Obj35_Index
0000BAD8                            ; ===========================================================================
0000BAD8                            
0000BAD8                            Obj35_Main:				; XREF: Obj35_Index
0000BAD8 5428 0024                  		addq.b	#2,$24(a0)
0000BADC 217C 0000 0000 0004        		move.l	#Map_obj14,4(a0)
0000BAE4 317C 0345 0002             		move.w	#$345,2(a0)
0000BAEA 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000BAF0 117C 0004 0001             		move.b	#4,1(a0)
0000BAF6 117C 0001 0018             		move.b	#1,$18(a0)
0000BAFC 117C 008B 0020             		move.b	#$8B,$20(a0)
0000BB02 117C 0008 0019             		move.b	#8,$19(a0)
0000BB08 303C 00C8                  		move.w	#$C8,d0
0000BB0C 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play flame sound
0000BB12 4A28 0028                  		tst.b	$28(a0)
0000BB16 6700                       		beq.s	loc_B238
0000BB18 5428 0024                  		addq.b	#2,$24(a0)
0000BB1C 6000 0000                  		bra.w	Obj35_Move
0000BB20                            ; ===========================================================================
0000BB20                            
0000BB20                            loc_B238:				; XREF: Obj35_Index
0000BB20 2268 0030                  		movea.l	$30(a0),a1
0000BB24 3228 0008                  		move.w	8(a0),d1
0000BB28 9268 002A                  		sub.w	$2A(a0),d1
0000BB2C 0641 000C                  		addi.w	#$C,d1
0000BB30 3001                       		move.w	d1,d0
0000BB32 E248                       		lsr.w	#1,d0
0000BB34 1031 0000                  		move.b	(a1,d0.w),d0
0000BB38 4440                       		neg.w	d0
0000BB3A D068 002C                  		add.w	$2C(a0),d0
0000BB3E 3400                       		move.w	d0,d2
0000BB40 D068 003C                  		add.w	$3C(a0),d0
0000BB44 3140 000C                  		move.w	d0,$C(a0)
0000BB48 0C41 0084                  		cmpi.w	#$84,d1
0000BB4C 6400                       		bcc.s	loc_B2B0
0000BB4E 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000BB56 0C41 0080                  		cmpi.w	#$80,d1
0000BB5A 6400                       		bcc.s	loc_B2B0
0000BB5C 2028 0008                  		move.l	8(a0),d0
0000BB60 0680 0008 0000             		addi.l	#$80000,d0
0000BB66 0280 000F FFFF             		andi.l	#$FFFFF,d0
0000BB6C 6600                       		bne.s	loc_B2B0
0000BB6E 6100 0000                  		bsr.w	SingleObjLoad2
0000BB72 6600                       		bne.s	loc_B2B0
0000BB74 12BC 0035                  		move.b	#$35,0(a1)
0000BB78 3368 0008 0008             		move.w	8(a0),8(a1)
0000BB7E 3342 002C                  		move.w	d2,$2C(a1)
0000BB82 3368 003C 003C             		move.w	$3C(a0),$3C(a1)
0000BB88 137C 0001 0028             		move.b	#1,$28(a1)
0000BB8E 2468 0038                  		movea.l	$38(a0),a2
0000BB92 6100 FDF0                  		bsr.w	sub_B09C
0000BB96                            
0000BB96                            loc_B2B0:
0000BB96 6000                       		bra.s	Obj35_Animate
0000BB98                            ; ===========================================================================
0000BB98                            
0000BB98                            Obj35_Move:				; XREF: Obj35_Index
0000BB98 3028 002C                  		move.w	$2C(a0),d0
0000BB9C D068 003C                  		add.w	$3C(a0),d0
0000BBA0 3140 000C                  		move.w	d0,$C(a0)
0000BBA4                            
0000BBA4                            Obj35_Animate:				; XREF: loc_B238
0000BBA4 43F9 0000 0000             		lea	(Ani_obj35).l,a1
0000BBAA 6100 F4AA                  		bsr.w	AnimateSprite
0000BBAE 6000 0000                  		bra.w	DisplaySprite
0000BBB2                            ; ===========================================================================
0000BBB2                            Ani_obj35:
0000BBB2                            	include "_anim\obj35.asm"
0000BBB2                            ; ---------------------------------------------------------------------------
0000BBB2                            ; Animation script - fireball that sits on the	floor (MZ)
0000BBB2                            ; ---------------------------------------------------------------------------
0000BBB2 0000                       		dc.w byte_B2CE-Ani_obj35
0000BBB4 0500 2001 21FF             byte_B2CE:	dc.b 5,	0, $20,	1, $21,	$FF
0000BBBA                            		even
0000BBBA                            		even
0000BBBA                            
0000BBBA                            ; ---------------------------------------------------------------------------
0000BBBA                            ; Sprite mappings - large moving platforms (MZ)
0000BBBA                            ; ---------------------------------------------------------------------------
0000BBBA                            Map_obj2F:
0000BBBA                            	include "_maps\obj2F.asm"
0000BBBA                            ; ---------------------------------------------------------------------------
0000BBBA                            ; Sprite mappings - large moving platforms (MZ)
0000BBBA                            ; ---------------------------------------------------------------------------
0000BBBA 0000                       		dc.w byte_B2DA-Map_obj2F
0000BBBC 0000                       		dc.w byte_B31C-Map_obj2F
0000BBBE 0000                       		dc.w byte_B34F-Map_obj2F
0000BBC0 0D                         byte_B2DA:	dc.b $D
0000BBC1 D806 0057 C0               		dc.b $D8, 6, 0,	$57, $C0
0000BBC6 F005 0053 C0               		dc.b $F0, 5, 0,	$53, $C0
0000BBCB 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000BBD0 D00F 0027 D0               		dc.b $D0, $F, 0, $27, $D0
0000BBD5 F00D 0037 D0               		dc.b $F0, $D, 0, $37, $D0
0000BBDA F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000BBDF D00F 0011 F0               		dc.b $D0, $F, 0, $11, $F0
0000BBE4 D00F 003F 10               		dc.b $D0, $F, 0, $3F, $10
0000BBE9 F00D 004F 10               		dc.b $F0, $D, 0, $4F, $10
0000BBEE F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000BBF3 000F 0001 20               		dc.b 0,	$F, 0, 1, $20
0000BBF8 D806 0057 30               		dc.b $D8, 6, 0,	$57, $30
0000BBFD F005 0053 30               		dc.b $F0, 5, 0,	$53, $30
0000BC02 0A                         byte_B31C:	dc.b $A
0000BC03 D00F 0027 C0               		dc.b $D0, $F, 0, $27, $C0
0000BC08 F00D 0037 C0               		dc.b $F0, $D, 0, $37, $C0
0000BC0D 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000BC12 C00F 0027 E0               		dc.b $C0, $F, 0, $27, $E0
0000BC17 E00D 0037 E0               		dc.b $E0, $D, 0, $37, $E0
0000BC1C F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000BC21 C00F 0011 00               		dc.b $C0, $F, 0, $11, 0
0000BC26 E00F 0001 00               		dc.b $E0, $F, 0, 1, 0
0000BC2B C00F 003F 20               		dc.b $C0, $F, 0, $3F, $20
0000BC30 E00D 004F 20               		dc.b $E0, $D, 0, $4F, $20
0000BC35 06                         byte_B34F:	dc.b 6
0000BC36 D00F 0011 E0               		dc.b $D0, $F, 0, $11, $E0
0000BC3B F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000BC40 100F 0001 E0               		dc.b $10, $F, 0, 1, $E0
0000BC45 D00F 0011 00               		dc.b $D0, $F, 0, $11, 0
0000BC4A F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000BC4F 100F 0001 00               		dc.b $10, $F, 0, 1, 0
0000BC54                            		even
0000BC54                            		even
0000BC54                            
0000BC54                            ; ---------------------------------------------------------------------------
0000BC54                            ; Sprite mappings - lava balls (MZ, SLZ)
0000BC54                            ; ---------------------------------------------------------------------------
0000BC54                            Map_obj14:
0000BC54                            	include "_maps\obj14.asm"
0000BC54                            ; --------------------------------------------------------------------------------
0000BC54                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000BC54                            ; --------------------------------------------------------------------------------
0000BC54                            
0000BC54                            SME_C6wT7:	
0000BC54 0000 0000                  		dc.w SME_C6wT7_C-SME_C6wT7, SME_C6wT7_12-SME_C6wT7	
0000BC58 0000 0000                  		dc.w SME_C6wT7_18-SME_C6wT7, SME_C6wT7_23-SME_C6wT7	
0000BC5C 0000 0000                  		dc.w SME_C6wT7_29-SME_C6wT7, SME_C6wT7_2F-SME_C6wT7	
0000BC60 01                         SME_C6wT7_C:	dc.b 1	
0000BC61 E80F 0000 F8               		dc.b $E8, $F, 0, 0, $F8	
0000BC66 01                         SME_C6wT7_12:	dc.b 1	
0000BC67 E80F 0000 F8               		dc.b $E8, $F, 0, 0, $F8	
0000BC6C 02                         SME_C6wT7_18:	dc.b 2	
0000BC6D EF06 0010 F8               		dc.b $EF, 6, 0, $10, $F8	
0000BC72 E707 0016 08               		dc.b $E7, 7, 0, $16, 8	
0000BC77 01                         SME_C6wT7_23:	dc.b 1	
0000BC78 F00F 0000 E8               		dc.b $F0, $F, 0, 0, $E8	
0000BC7D 01                         SME_C6wT7_29:	dc.b 1	
0000BC7E F00F 0000 E8               		dc.b $F0, $F, 0, 0, $E8	
0000BC83 01                         SME_C6wT7_2F:	dc.b 1	
0000BC84 F00B 001E E8               		dc.b $F0, $B, 0, $1E, $E8	
0000BC8A 00                         		even
0000BC8A 00                         		even
0000BC8A                            
0000BC8A                            ; ===========================================================================
0000BC8A                            ; ---------------------------------------------------------------------------
0000BC8A                            ; Object 30 - large green glassy blocks	(MZ)
0000BC8A                            ; ---------------------------------------------------------------------------
0000BC8A                            
0000BC8A                            Obj30:					; XREF: Obj_Index
0000BC8A 7000                       		moveq	#0,d0
0000BC8C 1028 0024                  		move.b	$24(a0),d0
0000BC90 323B 0000                  		move.w	Obj30_Index(pc,d0.w),d1
0000BC94 4EBB 1000                  		jsr	Obj30_Index(pc,d1.w)
0000BC98 3028 0008                  		move.w	8(a0),d0
0000BC9C 0240 FF80                  		andi.w	#$FF80,d0
0000BCA0 3238 F700                  		move.w	($FFFFF700).w,d1
0000BCA4 0441 0080                  		subi.w	#$80,d1
0000BCA8 0241 FF80                  		andi.w	#$FF80,d1
0000BCAC 9041                       		sub.w	d1,d0
0000BCAE 0C40 0280                  		cmpi.w	#$280,d0
0000BCB2 6200 0000                  		bhi.w	Obj30_Delete
0000BCB6 6000 0000                  		bra.w	DisplaySprite
0000BCBA                            ; ===========================================================================
0000BCBA                            
0000BCBA                            Obj30_Delete:
0000BCBA 6000 0000                  		bra.w	DeleteObject
0000BCBE                            ; ===========================================================================
0000BCBE 0000                       Obj30_Index:	dc.w Obj30_Main-Obj30_Index
0000BCC0 0000                       		dc.w Obj30_Block012-Obj30_Index
0000BCC2 0000                       		dc.w Obj30_Reflect012-Obj30_Index
0000BCC4 0000                       		dc.w Obj30_Block34-Obj30_Index
0000BCC6 0000                       		dc.w Obj30_Reflect34-Obj30_Index
0000BCC8                            
0000BCC8 0200 00                    Obj30_Vars1:	dc.b 2,	0, 0	; routine num, y-axis dist from	origin,	frame num
0000BCCB 0400 01                    		dc.b 4,	0, 1
0000BCCE 0600 02                    Obj30_Vars2:	dc.b 6,	0, 2
0000BCD1 0800 01                    		dc.b 8,	0, 1
0000BCD4                            ; ===========================================================================
0000BCD4                            
0000BCD4                            Obj30_Main:				; XREF: Obj30_Index
0000BCD4 45F9 0000 BCC8             		lea	(Obj30_Vars1).l,a2
0000BCDA 7201                       		moveq	#1,d1
0000BCDC 117C 0048 0016             		move.b	#$48,$16(a0)
0000BCE2 0C28 0003 0028             		cmpi.b	#3,$28(a0)	; is object type 0/1/2 ?
0000BCE8 6500                       		bcs.s	loc_B40C	; if yes, branch
0000BCEA 45F9 0000 BCCE             		lea	(Obj30_Vars2).l,a2
0000BCF0 7201                       		moveq	#1,d1
0000BCF2 117C 0038 0016             		move.b	#$38,$16(a0)
0000BCF8                            
0000BCF8                            loc_B40C:
0000BCF8 2248                       		movea.l	a0,a1
0000BCFA 6000                       		bra.s	Obj30_Load	; load main object
0000BCFC                            ; ===========================================================================
0000BCFC                            
0000BCFC                            Obj30_Loop:
0000BCFC 6100 0000                  		bsr.w	SingleObjLoad2
0000BD00 6600                       		bne.s	loc_B480
0000BD02                            
0000BD02                            Obj30_Load:				; XREF: Obj30_Main
0000BD02 135A 0024                  		move.b	(a2)+,$24(a1)
0000BD06 12BC 0030                  		move.b	#$30,0(a1)
0000BD0A 3368 0008 0008             		move.w	8(a0),8(a1)
0000BD10 101A                       		move.b	(a2)+,d0
0000BD12 4880                       		ext.w	d0
0000BD14 D068 000C                  		add.w	$C(a0),d0
0000BD18 3340 000C                  		move.w	d0,$C(a1)
0000BD1C 237C 0000 0000 0004        		move.l	#Map_obj30,4(a1)
0000BD24 337C C38E 0002             		move.w	#$C38E,2(a1)
0000BD2A 137C 0004 0001             		move.b	#4,1(a1)
0000BD30 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000BD36 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000BD3C 137C 0020 0019             		move.b	#$20,$19(a1)
0000BD42 137C 0004 0018             		move.b	#4,$18(a1)
0000BD48 135A 001A                  		move.b	(a2)+,$1A(a1)
0000BD4C 2348 003C                  		move.l	a0,$3C(a1)
0000BD50 51C9 FFAA                  		dbf	d1,Obj30_Loop	; repeat once to load "reflection object"
0000BD54                            
0000BD54 137C 0010 0019             		move.b	#$10,$19(a1)
0000BD5A 137C 0003 0018             		move.b	#3,$18(a1)
0000BD60 5029 0028                  		addq.b	#8,$28(a1)
0000BD64 0229 000F 0028             		andi.b	#$F,$28(a1)
0000BD6A                            
0000BD6A                            loc_B480:
0000BD6A 317C 0090 0032             		move.w	#$90,$32(a0)
0000BD70 08E8 0004 0001             		bset	#4,1(a0)
0000BD76                            
0000BD76                            Obj30_Block012:				; XREF: Obj30_Index
0000BD76 6100 0000                  		bsr.w	Obj30_Types
0000BD7A 323C 002B                  		move.w	#$2B,d1
0000BD7E 343C 0048                  		move.w	#$48,d2
0000BD82 363C 0049                  		move.w	#$49,d3
0000BD86 3828 0008                  		move.w	8(a0),d4
0000BD8A 6000 0000                  		bra.w	SolidObject
0000BD8E                            ; ===========================================================================
0000BD8E                            
0000BD8E                            Obj30_Reflect012:			; XREF: Obj30_Index
0000BD8E 2268 003C                  		movea.l	$3C(a0),a1
0000BD92 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000BD98 6000 0000                  		bra.w	Obj30_Types
0000BD9C                            ; ===========================================================================
0000BD9C                            
0000BD9C                            Obj30_Block34:				; XREF: Obj30_Index
0000BD9C 6100 0000                  		bsr.w	Obj30_Types
0000BDA0 323C 002B                  		move.w	#$2B,d1
0000BDA4 343C 0038                  		move.w	#$38,d2
0000BDA8 363C 0039                  		move.w	#$39,d3
0000BDAC 3828 0008                  		move.w	8(a0),d4
0000BDB0 6000 0000                  		bra.w	SolidObject
0000BDB4                            ; ===========================================================================
0000BDB4                            
0000BDB4                            Obj30_Reflect34:			; XREF: Obj30_Index
0000BDB4 2268 003C                  		movea.l	$3C(a0),a1
0000BDB8 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000BDBE 3169 000C 0030             		move.w	$C(a1),$30(a0)
0000BDC4 6000 0002                  		bra.w	*+4
0000BDC8                            
0000BDC8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000BDC8                            
0000BDC8                            
0000BDC8                            Obj30_Types:				; XREF: Obj30_Block012; et al
0000BDC8 7000                       		moveq	#0,d0
0000BDCA 1028 0028                  		move.b	$28(a0),d0
0000BDCE 0240 0007                  		andi.w	#7,d0
0000BDD2 D040                       		add.w	d0,d0
0000BDD4 323B 0000                  		move.w	Obj30_TypeIndex(pc,d0.w),d1
0000BDD8 4EFB 1000                  		jmp	Obj30_TypeIndex(pc,d1.w)
0000BDDC                            ; End of function Obj30_Types
0000BDDC                            
0000BDDC                            ; ===========================================================================
0000BDDC 0000                       Obj30_TypeIndex:dc.w Obj30_Type00-Obj30_TypeIndex
0000BDDE 0000                       		dc.w Obj30_Type01-Obj30_TypeIndex
0000BDE0 0000                       		dc.w Obj30_Type02-Obj30_TypeIndex
0000BDE2 0000                       		dc.w Obj30_Type03-Obj30_TypeIndex
0000BDE4 0000                       		dc.w Obj30_Type04-Obj30_TypeIndex
0000BDE6                            ; ===========================================================================
0000BDE6                            
0000BDE6                            Obj30_Type00:				; XREF: Obj30_TypeIndex
0000BDE6 4E75                       		rts	
0000BDE8                            ; ===========================================================================
0000BDE8                            
0000BDE8                            Obj30_Type01:				; XREF: Obj30_TypeIndex
0000BDE8 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000BDEC 323C 0040                  		move.w	#$40,d1
0000BDF0 6000                       		bra.s	loc_B514
0000BDF2                            ; ===========================================================================
0000BDF2                            
0000BDF2                            Obj30_Type02:				; XREF: Obj30_TypeIndex
0000BDF2 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000BDF6 323C 0040                  		move.w	#$40,d1
0000BDFA 4440                       		neg.w	d0
0000BDFC D041                       		add.w	d1,d0
0000BDFE                            
0000BDFE                            loc_B514:				; XREF: Obj30_Type01
0000BDFE 0828 0003 0028             		btst	#3,$28(a0)
0000BE04 6700                       		beq.s	loc_B526
0000BE06 4440                       		neg.w	d0
0000BE08 D041                       		add.w	d1,d0
0000BE0A E208                       		lsr.b	#1,d0
0000BE0C 0640 0020                  		addi.w	#$20,d0
0000BE10                            
0000BE10                            loc_B526:
0000BE10 6000 0000                  		bra.w	loc_B5EE
0000BE14                            ; ===========================================================================
0000BE14                            
0000BE14                            Obj30_Type03:				; XREF: Obj30_TypeIndex
0000BE14 0828 0003 0028             		btst	#3,$28(a0)
0000BE1A 6700                       		beq.s	loc_B53E
0000BE1C 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000BE20 0440 0010                  		subi.w	#$10,d0
0000BE24 6000 0000                  		bra.w	loc_B5EE
0000BE28                            ; ===========================================================================
0000BE28                            
0000BE28                            loc_B53E:
0000BE28 0828 0003 0022             		btst	#3,$22(a0)
0000BE2E 6600                       		bne.s	loc_B54E
0000BE30 08A8 0000 0034             		bclr	#0,$34(a0)
0000BE36 6000                       		bra.s	loc_B582
0000BE38                            ; ===========================================================================
0000BE38                            
0000BE38                            loc_B54E:
0000BE38 4A28 0034                  		tst.b	$34(a0)
0000BE3C 6600                       		bne.s	loc_B582
0000BE3E 117C 0001 0034             		move.b	#1,$34(a0)
0000BE44 08E8 0000 0035             		bset	#0,$35(a0)
0000BE4A 6700                       		beq.s	loc_B582
0000BE4C 08E8 0007 0034             		bset	#7,$34(a0)
0000BE52 317C 0010 0036             		move.w	#$10,$36(a0)
0000BE58 117C 000A 0038             		move.b	#$A,$38(a0)
0000BE5E 0C68 0040 0032             		cmpi.w	#$40,$32(a0)
0000BE64 6600                       		bne.s	loc_B582
0000BE66 317C 0040 0036             		move.w	#$40,$36(a0)
0000BE6C                            
0000BE6C                            loc_B582:
0000BE6C 4A28 0034                  		tst.b	$34(a0)
0000BE70 6A00                       		bpl.s	loc_B5AA
0000BE72 4A28 0038                  		tst.b	$38(a0)
0000BE76 6700                       		beq.s	loc_B594
0000BE78 5328 0038                  		subq.b	#1,$38(a0)
0000BE7C 6600                       		bne.s	loc_B5AA
0000BE7E                            
0000BE7E                            loc_B594:
0000BE7E 4A68 0032                  		tst.w	$32(a0)
0000BE82 6700                       		beq.s	loc_B5A4
0000BE84 5368 0032                  		subq.w	#1,$32(a0)
0000BE88 5368 0036                  		subq.w	#1,$36(a0)
0000BE8C 6600                       		bne.s	loc_B5AA
0000BE8E                            
0000BE8E                            loc_B5A4:
0000BE8E 08A8 0007 0034             		bclr	#7,$34(a0)
0000BE94                            
0000BE94                            loc_B5AA:
0000BE94 3028 0032                  		move.w	$32(a0),d0
0000BE98 6000                       		bra.s	loc_B5EE
0000BE9A                            ; ===========================================================================
0000BE9A                            
0000BE9A                            Obj30_Type04:				; XREF: Obj30_TypeIndex
0000BE9A 0828 0003 0028             		btst	#3,$28(a0)
0000BEA0 6700                       		beq.s	Obj30_ChkSwitch
0000BEA2 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000BEA6 0440 0010                  		subi.w	#$10,d0
0000BEAA 6000                       		bra.s	loc_B5EE
0000BEAC                            ; ===========================================================================
0000BEAC                            
0000BEAC                            Obj30_ChkSwitch:			; XREF: Obj30_Type04
0000BEAC 4A28 0034                  		tst.b	$34(a0)
0000BEB0 6600                       		bne.s	loc_B5E0
0000BEB2 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0000BEB6 7000                       		moveq	#0,d0
0000BEB8 1028 0028                  		move.b	$28(a0),d0	; load object type number
0000BEBC E848                       		lsr.w	#4,d0		; read only the	first nybble
0000BEBE 4A32 0000                  		tst.b	(a2,d0.w)	; has switch number d0 been pressed?
0000BEC2 6700                       		beq.s	loc_B5EA	; if not, branch
0000BEC4 117C 0001 0034             		move.b	#1,$34(a0)
0000BECA                            
0000BECA                            loc_B5E0:
0000BECA 4A68 0032                  		tst.w	$32(a0)
0000BECE 6700                       		beq.s	loc_B5EA
0000BED0 5568 0032                  		subq.w	#2,$32(a0)
0000BED4                            
0000BED4                            loc_B5EA:
0000BED4 3028 0032                  		move.w	$32(a0),d0
0000BED8                            
0000BED8                            loc_B5EE:
0000BED8 3228 0030                  		move.w	$30(a0),d1
0000BEDC 9240                       		sub.w	d0,d1
0000BEDE 3141 000C                  		move.w	d1,$C(a0)
0000BEE2 4E75                       		rts	
0000BEE4                            ; ===========================================================================
0000BEE4                            ; ---------------------------------------------------------------------------
0000BEE4                            ; Sprite mappings - large green	glassy blocks (MZ)
0000BEE4                            ; ---------------------------------------------------------------------------
0000BEE4                            Map_obj30:
0000BEE4                            	include "_maps\obj30.asm"
0000BEE4                            ; ---------------------------------------------------------------------------
0000BEE4                            ; Sprite mappings - large green	glassy blocks (MZ)
0000BEE4                            ; ---------------------------------------------------------------------------
0000BEE4 0000                       		dc.w byte_B600-Map_obj30
0000BEE6 0000                       		dc.w byte_B63D-Map_obj30
0000BEE8 0000                       		dc.w byte_B648-Map_obj30
0000BEEA 0C                         byte_B600:	dc.b $C
0000BEEB B80C 0000 E0               		dc.b $B8, $C, 0, 0, $E0
0000BEF0 B80C 0800 00               		dc.b $B8, $C, 8, 0, 0
0000BEF5 C00F 0004 E0               		dc.b $C0, $F, 0, 4, $E0
0000BEFA C00F 0804 00               		dc.b $C0, $F, 8, 4, 0
0000BEFF E00F 0004 E0               		dc.b $E0, $F, 0, 4, $E0
0000BF04 E00F 0804 00               		dc.b $E0, $F, 8, 4, 0
0000BF09 000F 0004 E0               		dc.b 0,	$F, 0, 4, $E0
0000BF0E 000F 0804 00               		dc.b 0,	$F, 8, 4, 0
0000BF13 200F 0004 E0               		dc.b $20, $F, 0, 4, $E0
0000BF18 200F 0804 00               		dc.b $20, $F, 8, 4, 0
0000BF1D 400C 1000 E0               		dc.b $40, $C, $10, 0, $E0
0000BF22 400C 1800 00               		dc.b $40, $C, $18, 0, 0
0000BF27 02                         byte_B63D:	dc.b 2
0000BF28 0806 0014 F0               		dc.b 8,	6, 0, $14, $F0
0000BF2D 0006 0014 00               		dc.b 0,	6, 0, $14, 0
0000BF32 0A                         byte_B648:	dc.b $A
0000BF33 C80C 0000 E0               		dc.b $C8, $C, 0, 0, $E0
0000BF38 C80C 0800 00               		dc.b $C8, $C, 8, 0, 0
0000BF3D D00F 0004 E0               		dc.b $D0, $F, 0, 4, $E0
0000BF42 D00F 0804 00               		dc.b $D0, $F, 8, 4, 0
0000BF47 F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
0000BF4C F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
0000BF51 100F 0004 E0               		dc.b $10, $F, 0, 4, $E0
0000BF56 100F 0804 00               		dc.b $10, $F, 8, 4, 0
0000BF5B 300C 1000 E0               		dc.b $30, $C, $10, 0, $E0
0000BF60 300C 1800 00               		dc.b $30, $C, $18, 0, 0
0000BF66 00                         		even
0000BF66 00                         		even
0000BF66                            
0000BF66                            ; ===========================================================================
0000BF66                            ; ---------------------------------------------------------------------------
0000BF66                            ; Object 31 - stomping metal blocks on chains (MZ)
0000BF66                            ; ---------------------------------------------------------------------------
0000BF66                            
0000BF66                            Obj31:					; XREF: Obj_Index
0000BF66 7000                       		moveq	#0,d0
0000BF68 1028 0024                  		move.b	$24(a0),d0
0000BF6C 323B 0000                  		move.w	Obj31_Index(pc,d0.w),d1
0000BF70 4EFB 1000                  		jmp	Obj31_Index(pc,d1.w)
0000BF74                            ; ===========================================================================
0000BF74 0000                       Obj31_Index:	dc.w Obj31_Main-Obj31_Index
0000BF76 0000                       		dc.w loc_B798-Obj31_Index
0000BF78 0000                       		dc.w loc_B7FE-Obj31_Index
0000BF7A 0000                       		dc.w Obj31_Display2-Obj31_Index
0000BF7C 0000                       		dc.w loc_B7E2-Obj31_Index
0000BF7E                            
0000BF7E 0000                       Obj31_SwchNums:	dc.b 0,	0		; switch number, obj number
0000BF80 0100                       		dc.b 1,	0
0000BF82                            
0000BF82 0200 00                    Obj31_Var:	dc.b 2,	0, 0		; XREF: ROM:0000B6E0o
0000BF85 041C 01                    		dc.b 4,	$1C, 1		; routine number, y-position, frame number
0000BF88 08CC 03                    		dc.b 8,	$CC, 3
0000BF8B 06F0 02                    		dc.b 6,	$F0, 2
0000BF8E                            
0000BF8E 7000 A000                  word_B6A4:	dc.w $7000, $A000
0000BF92 5000 7800                  		dc.w $5000, $7800
0000BF96 3800 5800                  		dc.w $3800, $5800
0000BF9A B800                       		dc.w $B800
0000BF9C                            ; ===========================================================================
0000BF9C                            
0000BF9C                            Obj31_Main:				; XREF: Obj31_Index
0000BF9C 7000                       		moveq	#0,d0
0000BF9E 1028 0028                  		move.b	$28(a0),d0
0000BFA2 6A00                       		bpl.s	loc_B6CE
0000BFA4 0240 007F                  		andi.w	#$7F,d0
0000BFA8 D040                       		add.w	d0,d0
0000BFAA 45FB 00D2                  		lea	Obj31_SwchNums(pc,d0.w),a2
0000BFAE 115A 003A                  		move.b	(a2)+,$3A(a0)
0000BFB2 101A                       		move.b	(a2)+,d0
0000BFB4 1140 0028                  		move.b	d0,$28(a0)
0000BFB8                            
0000BFB8                            loc_B6CE:
0000BFB8 0200 000F                  		andi.b	#$F,d0
0000BFBC D040                       		add.w	d0,d0
0000BFBE 343B 00CE                  		move.w	word_B6A4(pc,d0.w),d2
0000BFC2 4A40                       		tst.w	d0
0000BFC4 6600                       		bne.s	loc_B6E0
0000BFC6 3142 0032                  		move.w	d2,$32(a0)
0000BFCA                            
0000BFCA                            loc_B6E0:
0000BFCA 45F9 0000 BF82             		lea	(Obj31_Var).l,a2
0000BFD0 2248                       		movea.l	a0,a1
0000BFD2 7203                       		moveq	#3,d1
0000BFD4 6000                       		bra.s	Obj31_MakeStomper
0000BFD6                            ; ===========================================================================
0000BFD6                            
0000BFD6                            Obj31_Loop:
0000BFD6 6100 0000                  		bsr.w	SingleObjLoad2
0000BFDA 6600 0000                  		bne.w	Obj31_SetSize
0000BFDE                            
0000BFDE                            Obj31_MakeStomper:			; XREF: Obj31_Main
0000BFDE 135A 0024                  		move.b	(a2)+,$24(a1)
0000BFE2 12BC 0031                  		move.b	#$31,0(a1)
0000BFE6 3368 0008 0008             		move.w	8(a0),8(a1)
0000BFEC 101A                       		move.b	(a2)+,d0
0000BFEE 4880                       		ext.w	d0
0000BFF0 D068 000C                  		add.w	$C(a0),d0
0000BFF4 3340 000C                  		move.w	d0,$C(a1)
0000BFF8 237C 0000 0000 0004        		move.l	#Map_obj31,4(a1)
0000C000 337C 0300 0002             		move.w	#$300,2(a1)
0000C006 137C 0004 0001             		move.b	#4,1(a1)
0000C00C 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000C012 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000C018 137C 0010 0019             		move.b	#$10,$19(a1)
0000C01E 3342 0034                  		move.w	d2,$34(a1)
0000C022 137C 0004 0018             		move.b	#4,$18(a1)
0000C028 135A 001A                  		move.b	(a2)+,$1A(a1)
0000C02C 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
0000C032 6600                       		bne.s	loc_B76A
0000C034 5341                       		subq.w	#1,d1
0000C036 1028 0028                  		move.b	$28(a0),d0
0000C03A 0240 00F0                  		andi.w	#$F0,d0
0000C03E 0C40 0020                  		cmpi.w	#$20,d0
0000C042 679A                       		beq.s	Obj31_MakeStomper
0000C044 137C 0038 0019             		move.b	#$38,$19(a1)
0000C04A 137C 0090 0020             		move.b	#$90,$20(a1)
0000C050 5241                       		addq.w	#1,d1
0000C052                            
0000C052                            loc_B76A:
0000C052 2348 003C                  		move.l	a0,$3C(a1)
0000C056 51C9 FF7E                  		dbf	d1,Obj31_Loop
0000C05A                            
0000C05A 137C 0003 0018             		move.b	#3,$18(a1)
0000C060                            
0000C060                            Obj31_SetSize:
0000C060 7000                       		moveq	#0,d0
0000C062 1028 0028                  		move.b	$28(a0),d0
0000C066 E648                       		lsr.w	#3,d0
0000C068 0200 000E                  		andi.b	#$E,d0
0000C06C 45FB 0000                  		lea	Obj31_Var2(pc,d0.w),a2
0000C070 115A 0019                  		move.b	(a2)+,$19(a0)
0000C074 115A 001A                  		move.b	(a2)+,$1A(a0)
0000C078 6000                       		bra.s	loc_B798
0000C07A                            ; ===========================================================================
0000C07A 3800                       Obj31_Var2:	dc.b $38, 0		; width, frame number
0000C07C 3009                       		dc.b $30, 9
0000C07E 100A                       		dc.b $10, $A
0000C080                            ; ===========================================================================
0000C080                            
0000C080                            loc_B798:				; XREF: Obj31_Index
0000C080 6100 0000                  		bsr.w	Obj31_Types
0000C084 31E8 000C F7A4             		move.w	$C(a0),($FFFFF7A4).w
0000C08A 7200                       		moveq	#0,d1
0000C08C 1228 0019                  		move.b	$19(a0),d1
0000C090 0641 000B                  		addi.w	#$B,d1
0000C094 343C 000C                  		move.w	#$C,d2
0000C098 363C 000D                  		move.w	#$D,d3
0000C09C 3828 0008                  		move.w	8(a0),d4
0000C0A0 6100 0000                  		bsr.w	SolidObject
0000C0A4 0828 0003 0022             		btst	#3,$22(a0)
0000C0AA 6700                       		beq.s	Obj31_Display
0000C0AC 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000C0B2 6400                       		bcc.s	Obj31_Display
0000C0B4 2448                       		movea.l	a0,a2
0000C0B6 41F8 D000                  		lea	($FFFFD000).w,a0
0000C0BA 4EB9 0000 0000             		jsr	KillSonic
0000C0C0 204A                       		movea.l	a2,a0
0000C0C2                            
0000C0C2                            Obj31_Display:
0000C0C2 6100 0000                  		bsr.w	DisplaySprite
0000C0C6 6000 0000                  		bra.w	Obj31_ChkDel
0000C0CA                            ; ===========================================================================
0000C0CA                            
0000C0CA                            loc_B7E2:				; XREF: Obj31_Index
0000C0CA 117C 0080 0016             		move.b	#$80,$16(a0)
0000C0D0 08E8 0004 0001             		bset	#4,1(a0)
0000C0D6 2268 003C                  		movea.l	$3C(a0),a1
0000C0DA 1029 0032                  		move.b	$32(a1),d0
0000C0DE EA08                       		lsr.b	#5,d0
0000C0E0 5600                       		addq.b	#3,d0
0000C0E2 1140 001A                  		move.b	d0,$1A(a0)
0000C0E6                            
0000C0E6                            loc_B7FE:				; XREF: Obj31_Index
0000C0E6 2268 003C                  		movea.l	$3C(a0),a1
0000C0EA 7000                       		moveq	#0,d0
0000C0EC 1029 0032                  		move.b	$32(a1),d0
0000C0F0 D068 0030                  		add.w	$30(a0),d0
0000C0F4 3140 000C                  		move.w	d0,$C(a0)
0000C0F8                            
0000C0F8                            Obj31_Display2:				; XREF: Obj31_Index
0000C0F8 6100 0000                  		bsr.w	DisplaySprite
0000C0FC                            
0000C0FC                            Obj31_ChkDel:				; XREF: Obj31_Display
0000C0FC 3028 0008                  		move.w	8(a0),d0
0000C100 0240 FF80                  		andi.w	#$FF80,d0
0000C104 3238 F700                  		move.w	($FFFFF700).w,d1
0000C108 0441 0080                  		subi.w	#$80,d1
0000C10C 0241 FF80                  		andi.w	#$FF80,d1
0000C110 9041                       		sub.w	d1,d0
0000C112 0C40 0280                  		cmpi.w	#$280,d0
0000C116 6200 0000                  		bhi.w	DeleteObject
0000C11A 4E75                       		rts	
0000C11C                            ; ===========================================================================
0000C11C                            
0000C11C                            Obj31_Types:				; XREF: loc_B798
0000C11C 1028 0028                  		move.b	$28(a0),d0
0000C120 0240 000F                  		andi.w	#$F,d0
0000C124 D040                       		add.w	d0,d0
0000C126 323B 0000                  		move.w	Obj31_TypeIndex(pc,d0.w),d1
0000C12A 4EFB 1000                  		jmp	Obj31_TypeIndex(pc,d1.w)
0000C12E                            ; ===========================================================================
0000C12E 0000                       Obj31_TypeIndex:dc.w Obj31_Type00-Obj31_TypeIndex
0000C130 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000C132 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000C134 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000C136 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000C138 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000C13A 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000C13C                            ; ===========================================================================
0000C13C                            
0000C13C                            Obj31_Type00:				; XREF: Obj31_TypeIndex
0000C13C 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
0000C140 7000                       		moveq	#0,d0
0000C142 1028 003A                  		move.b	$3A(a0),d0	; move number 0	or 1 to	d0
0000C146 4A32 0000                  		tst.b	(a2,d0.w)	; has switch (d0) been pressed?
0000C14A 6700                       		beq.s	loc_B8A8	; if not, branch
0000C14C 4A78 F7A4                  		tst.w	($FFFFF7A4).w
0000C150 6A00                       		bpl.s	loc_B872
0000C152 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000C158 6700                       		beq.s	loc_B8A0
0000C15A                            
0000C15A                            loc_B872:
0000C15A 4A68 0032                  		tst.w	$32(a0)
0000C15E 6700                       		beq.s	loc_B8A0
0000C160 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000C164 0200 000F                  		andi.b	#$F,d0
0000C168 6600                       		bne.s	loc_B892
0000C16A 4A28 0001                  		tst.b	1(a0)
0000C16E 6A00                       		bpl.s	loc_B892
0000C170 303C 00C7                  		move.w	#$C7,d0
0000C174 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000C17A                            
0000C17A                            loc_B892:
0000C17A 0468 0080 0032             		subi.w	#$80,$32(a0)
0000C180 6400                       		bcc.s	Obj31_Restart
0000C182 317C 0000 0032             		move.w	#0,$32(a0)
0000C188                            
0000C188                            loc_B8A0:
0000C188 317C 0000 0012             		move.w	#0,$12(a0)
0000C18E 6000                       		bra.s	Obj31_Restart
0000C190                            ; ===========================================================================
0000C190                            
0000C190                            loc_B8A8:				; XREF: Obj31_Type00
0000C190 3228 0034                  		move.w	$34(a0),d1
0000C194 B268 0032                  		cmp.w	$32(a0),d1
0000C198 6700                       		beq.s	Obj31_Restart
0000C19A 3028 0012                  		move.w	$12(a0),d0
0000C19E 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000C1A4 D168 0032                  		add.w	d0,$32(a0)
0000C1A8 B268 0032                  		cmp.w	$32(a0),d1
0000C1AC 6200                       		bhi.s	Obj31_Restart
0000C1AE 3141 0032                  		move.w	d1,$32(a0)
0000C1B2 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000C1B8 4A28 0001                  		tst.b	1(a0)
0000C1BC 6A00                       		bpl.s	Obj31_Restart
0000C1BE 303C 00BD                  		move.w	#$BD,d0
0000C1C2 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play stomping sound
0000C1C8                            
0000C1C8                            Obj31_Restart:
0000C1C8 7000                       		moveq	#0,d0
0000C1CA 1028 0032                  		move.b	$32(a0),d0
0000C1CE D068 0030                  		add.w	$30(a0),d0
0000C1D2 3140 000C                  		move.w	d0,$C(a0)
0000C1D6 4E75                       		rts	
0000C1D8                            ; ===========================================================================
0000C1D8                            
0000C1D8                            Obj31_Type01:				; XREF: Obj31_TypeIndex
0000C1D8 4A68 0036                  		tst.w	$36(a0)
0000C1DC 6700                       		beq.s	loc_B938
0000C1DE 4A68 0038                  		tst.w	$38(a0)
0000C1E2 6700                       		beq.s	loc_B902
0000C1E4 5368 0038                  		subq.w	#1,$38(a0)
0000C1E8 6000                       		bra.s	loc_B97C
0000C1EA                            ; ===========================================================================
0000C1EA                            
0000C1EA                            loc_B902:
0000C1EA 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000C1EE 0200 000F                  		andi.b	#$F,d0
0000C1F2 6600                       		bne.s	loc_B91C
0000C1F4 4A28 0001                  		tst.b	1(a0)
0000C1F8 6A00                       		bpl.s	loc_B91C
0000C1FA 303C 00C7                  		move.w	#$C7,d0
0000C1FE 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000C204                            
0000C204                            loc_B91C:
0000C204 0468 0080 0032             		subi.w	#$80,$32(a0)
0000C20A 6400                       		bcc.s	loc_B97C
0000C20C 317C 0000 0032             		move.w	#0,$32(a0)
0000C212 317C 0000 0012             		move.w	#0,$12(a0)
0000C218 317C 0000 0036             		move.w	#0,$36(a0)
0000C21E 6000                       		bra.s	loc_B97C
0000C220                            ; ===========================================================================
0000C220                            
0000C220                            loc_B938:				; XREF: Obj31_Type01
0000C220 3228 0034                  		move.w	$34(a0),d1
0000C224 B268 0032                  		cmp.w	$32(a0),d1
0000C228 6700                       		beq.s	loc_B97C
0000C22A 3028 0012                  		move.w	$12(a0),d0
0000C22E 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000C234 D168 0032                  		add.w	d0,$32(a0)
0000C238 B268 0032                  		cmp.w	$32(a0),d1
0000C23C 6200                       		bhi.s	loc_B97C
0000C23E 3141 0032                  		move.w	d1,$32(a0)
0000C242 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000C248 317C 0001 0036             		move.w	#1,$36(a0)
0000C24E 317C 003C 0038             		move.w	#$3C,$38(a0)
0000C254 4A28 0001                  		tst.b	1(a0)
0000C258 6A00                       		bpl.s	loc_B97C
0000C25A 303C 00BD                  		move.w	#$BD,d0
0000C25E 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play stomping sound
0000C264                            
0000C264                            loc_B97C:
0000C264 6000 FF62                  		bra.w	Obj31_Restart
0000C268                            ; ===========================================================================
0000C268                            
0000C268                            Obj31_Type03:				; XREF: Obj31_TypeIndex
0000C268 3038 D008                  		move.w	($FFFFD008).w,d0
0000C26C 9068 0008                  		sub.w	8(a0),d0
0000C270 6400                       		bcc.s	loc_B98C
0000C272 4440                       		neg.w	d0
0000C274                            
0000C274                            loc_B98C:
0000C274 0C40 0090                  		cmpi.w	#$90,d0
0000C278 6400                       		bcc.s	loc_B996
0000C27A 5228 0028                  		addq.b	#1,$28(a0)
0000C27E                            
0000C27E                            loc_B996:
0000C27E 6000 FF48                  		bra.w	Obj31_Restart
0000C282                            ; ===========================================================================
0000C282                            ; ---------------------------------------------------------------------------
0000C282                            ; Object 45 - spiked metal block from beta version (MZ)
0000C282                            ; ---------------------------------------------------------------------------
0000C282                            
0000C282                            Obj45:					; XREF: Obj_Index
0000C282 7000                       		moveq	#0,d0
0000C284 1028 0024                  		move.b	$24(a0),d0
0000C288 323B 0000                  		move.w	Obj45_Index(pc,d0.w),d1
0000C28C 4EFB 1000                  		jmp	Obj45_Index(pc,d1.w)
0000C290                            ; ===========================================================================
0000C290 0000                       Obj45_Index:	dc.w Obj45_Main-Obj45_Index
0000C292 0000                       		dc.w Obj45_Solid-Obj45_Index
0000C294 0000                       		dc.w loc_BA8E-Obj45_Index
0000C296 0000                       		dc.w Obj45_Display-Obj45_Index
0000C298 0000                       		dc.w loc_BA7A-Obj45_Index
0000C29A                            
0000C29A 0204 00                    Obj45_Var:	dc.b	2,   4,	  0	; routine number, x-position, frame number
0000C29D 04E4 01                    		dc.b	4, $E4,	  1
0000C2A0 0834 03                    		dc.b	8, $34,	  3
0000C2A3 0628 02                    		dc.b	6, $28,	  2
0000C2A6                            
0000C2A6 3800                       word_B9BE:	dc.w $3800
0000C2A8 A000                       		dc.w -$6000
0000C2AA 5000                       		dc.w $5000
0000C2AC                            ; ===========================================================================
0000C2AC                            
0000C2AC                            Obj45_Main:				; XREF: Obj45_Index
0000C2AC 7000                       		moveq	#0,d0
0000C2AE 1028 0028                  		move.b	$28(a0),d0
0000C2B2 D040                       		add.w	d0,d0
0000C2B4 343B 00F0                  		move.w	word_B9BE(pc,d0.w),d2
0000C2B8 45F9 0000 C29A             		lea	(Obj45_Var).l,a2
0000C2BE 2248                       		movea.l	a0,a1
0000C2C0 7203                       		moveq	#3,d1
0000C2C2 6000                       		bra.s	Obj45_Load
0000C2C4                            ; ===========================================================================
0000C2C4                            
0000C2C4                            Obj45_Loop:
0000C2C4 6100 0000                  		bsr.w	SingleObjLoad2
0000C2C8 6600                       		bne.s	loc_BA52
0000C2CA                            
0000C2CA                            Obj45_Load:				; XREF: Obj45_Main
0000C2CA 135A 0024                  		move.b	(a2)+,$24(a1)
0000C2CE 12BC 0045                  		move.b	#$45,0(a1)
0000C2D2 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000C2D8 101A                       		move.b	(a2)+,d0
0000C2DA 4880                       		ext.w	d0
0000C2DC D068 0008                  		add.w	8(a0),d0
0000C2E0 3340 0008                  		move.w	d0,8(a1)
0000C2E4 237C 0000 0000 0004        		move.l	#Map_obj45,4(a1)
0000C2EC 337C 0300 0002             		move.w	#$300,2(a1)
0000C2F2 137C 0004 0001             		move.b	#4,1(a1)
0000C2F8 3369 0008 0030             		move.w	8(a1),$30(a1)
0000C2FE 3368 0008 003A             		move.w	8(a0),$3A(a1)
0000C304 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000C30A 137C 0020 0019             		move.b	#$20,$19(a1)
0000C310 3342 0034                  		move.w	d2,$34(a1)
0000C314 137C 0004 0018             		move.b	#4,$18(a1)
0000C31A 0C12 0001                  		cmpi.b	#1,(a2)
0000C31E 6600                       		bne.s	loc_BA40
0000C320 137C 0091 0020             		move.b	#$91,$20(a1)
0000C326                            
0000C326                            loc_BA40:
0000C326 135A 001A                  		move.b	(a2)+,$1A(a1)
0000C32A 2348 003C                  		move.l	a0,$3C(a1)
0000C32E 51C9 FF94                  		dbf	d1,Obj45_Loop	; repeat 3 times
0000C332                            
0000C332 137C 0003 0018             		move.b	#3,$18(a1)
0000C338                            
0000C338                            loc_BA52:
0000C338 117C 0010 0019             		move.b	#$10,$19(a0)
0000C33E                            
0000C33E                            Obj45_Solid:				; XREF: Obj45_Index
0000C33E 3F28 0008                  		move.w	8(a0),-(sp)
0000C342 6100 0000                  		bsr.w	Obj45_Move
0000C346 323C 0017                  		move.w	#$17,d1
0000C34A 343C 0020                  		move.w	#$20,d2
0000C34E 363C 0020                  		move.w	#$20,d3
0000C352 381F                       		move.w	(sp)+,d4
0000C354 6100 0000                  		bsr.w	SolidObject
0000C358 6100 0000                  		bsr.w	DisplaySprite
0000C35C 6000 0000                  		bra.w	Obj45_ChkDel
0000C360                            ; ===========================================================================
0000C360                            
0000C360                            loc_BA7A:				; XREF: Obj45_Index
0000C360 2268 003C                  		movea.l	$3C(a0),a1
0000C364 1029 0032                  		move.b	$32(a1),d0
0000C368 0600 0010                  		addi.b	#$10,d0
0000C36C EA08                       		lsr.b	#5,d0
0000C36E 5600                       		addq.b	#3,d0
0000C370 1140 001A                  		move.b	d0,$1A(a0)
0000C374                            
0000C374                            loc_BA8E:				; XREF: Obj45_Index
0000C374 2268 003C                  		movea.l	$3C(a0),a1
0000C378 7000                       		moveq	#0,d0
0000C37A 1029 0032                  		move.b	$32(a1),d0
0000C37E 4440                       		neg.w	d0
0000C380 D068 0030                  		add.w	$30(a0),d0
0000C384 3140 0008                  		move.w	d0,8(a0)
0000C388                            
0000C388                            Obj45_Display:				; XREF: Obj45_Index
0000C388 6100 0000                  		bsr.w	DisplaySprite
0000C38C                            
0000C38C                            Obj45_ChkDel:				; XREF: Obj45_Solid
0000C38C 3028 003A                  		move.w	$3A(a0),d0
0000C390 0240 FF80                  		andi.w	#$FF80,d0
0000C394 3238 F700                  		move.w	($FFFFF700).w,d1
0000C398 0441 0080                  		subi.w	#$80,d1
0000C39C 0241 FF80                  		andi.w	#$FF80,d1
0000C3A0 9041                       		sub.w	d1,d0
0000C3A2 0C40 0280                  		cmpi.w	#$280,d0
0000C3A6 6200 0000                  		bhi.w	DeleteObject
0000C3AA 4E75                       		rts	
0000C3AC                            
0000C3AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C3AC                            
0000C3AC                            
0000C3AC                            Obj45_Move:				; XREF: Obj45_Solid
0000C3AC 7000                       		moveq	#0,d0
0000C3AE 1028 0028                  		move.b	$28(a0),d0
0000C3B2 D040                       		add.w	d0,d0
0000C3B4 323B 0000                  		move.w	off_BAD6(pc,d0.w),d1
0000C3B8 4EFB 1000                  		jmp	off_BAD6(pc,d1.w)
0000C3BC                            ; End of function Obj45_Move
0000C3BC                            
0000C3BC                            ; ===========================================================================
0000C3BC 0000                       off_BAD6:	dc.w loc_BADA-off_BAD6
0000C3BE 0000                       		dc.w loc_BADA-off_BAD6
0000C3C0                            ; ===========================================================================
0000C3C0                            
0000C3C0                            loc_BADA:				; XREF: off_BAD6
0000C3C0 4A68 0036                  		tst.w	$36(a0)
0000C3C4 6700                       		beq.s	loc_BB08
0000C3C6 4A68 0038                  		tst.w	$38(a0)
0000C3CA 6700                       		beq.s	loc_BAEC
0000C3CC 5368 0038                  		subq.w	#1,$38(a0)
0000C3D0 6000                       		bra.s	loc_BB3C
0000C3D2                            ; ===========================================================================
0000C3D2                            
0000C3D2                            loc_BAEC:
0000C3D2 0468 0080 0032             		subi.w	#$80,$32(a0)
0000C3D8 6400                       		bcc.s	loc_BB3C
0000C3DA 317C 0000 0032             		move.w	#0,$32(a0)
0000C3E0 317C 0000 0010             		move.w	#0,$10(a0)
0000C3E6 317C 0000 0036             		move.w	#0,$36(a0)
0000C3EC 6000                       		bra.s	loc_BB3C
0000C3EE                            ; ===========================================================================
0000C3EE                            
0000C3EE                            loc_BB08:				; XREF: loc_BADA
0000C3EE 3228 0034                  		move.w	$34(a0),d1
0000C3F2 B268 0032                  		cmp.w	$32(a0),d1
0000C3F6 6700                       		beq.s	loc_BB3C
0000C3F8 3028 0010                  		move.w	$10(a0),d0
0000C3FC 0668 0070 0010             		addi.w	#$70,$10(a0)
0000C402 D168 0032                  		add.w	d0,$32(a0)
0000C406 B268 0032                  		cmp.w	$32(a0),d1
0000C40A 6200                       		bhi.s	loc_BB3C
0000C40C 3141 0032                  		move.w	d1,$32(a0)
0000C410 317C 0000 0010             		move.w	#0,$10(a0)
0000C416 317C 0001 0036             		move.w	#1,$36(a0)
0000C41C 317C 003C 0038             		move.w	#$3C,$38(a0)
0000C422                            
0000C422                            loc_BB3C:
0000C422 7000                       		moveq	#0,d0
0000C424 1028 0032                  		move.b	$32(a0),d0
0000C428 4440                       		neg.w	d0
0000C42A D068 0030                  		add.w	$30(a0),d0
0000C42E 3140 0008                  		move.w	d0,8(a0)
0000C432 4E75                       		rts	
0000C434                            ; ===========================================================================
0000C434                            ; ---------------------------------------------------------------------------
0000C434                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000C434                            ; ---------------------------------------------------------------------------
0000C434                            Map_obj31:
0000C434                            	include "_maps\obj31.asm"
0000C434                            ; ---------------------------------------------------------------------------
0000C434                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000C434                            ; ---------------------------------------------------------------------------
0000C434 0000                       		dc.w byte_BB64-Map_obj31
0000C436 0000                       		dc.w byte_BB7E-Map_obj31
0000C438 0000                       		dc.w byte_BB98-Map_obj31
0000C43A 0000                       		dc.w byte_BB9E-Map_obj31
0000C43C 0000                       		dc.w byte_BBA9-Map_obj31
0000C43E 0000                       		dc.w byte_BBBE-Map_obj31
0000C440 0000                       		dc.w byte_BBDD-Map_obj31
0000C442 0000                       		dc.w byte_BC06-Map_obj31
0000C444 0000                       		dc.w byte_BC06-Map_obj31
0000C446 0000                       		dc.w byte_BC39-Map_obj31
0000C448 0000                       		dc.w byte_BC53-Map_obj31
0000C44A 05                         byte_BB64:	dc.b 5
0000C44B F406 0000 C8               		dc.b $F4, 6, 0,	0, $C8
0000C450 F40A 0006 D8               		dc.b $F4, $A, 0, 6, $D8
0000C455 EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000C45A F40A 0806 10               		dc.b $F4, $A, 8, 6, $10
0000C45F F406 0800 28               		dc.b $F4, 6, 8,	0, $28
0000C464 05                         byte_BB7E:	dc.b 5
0000C465 F003 121F D4               		dc.b $F0, 3, $12, $1F, $D4
0000C46A F003 121F E8               		dc.b $F0, 3, $12, $1F, $E8
0000C46F F003 121F FC               		dc.b $F0, 3, $12, $1F, $FC
0000C474 F003 121F 10               		dc.b $F0, 3, $12, $1F, $10
0000C479 F003 121F 24               		dc.b $F0, 3, $12, $1F, $24
0000C47E 01                         byte_BB98:	dc.b 1
0000C47F DC0F 100F F0               		dc.b $DC, $F, $10, $F, $F0
0000C484 02                         byte_BB9E:	dc.b 2
0000C485 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C48A 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C48F 04                         byte_BBA9:	dc.b 4
0000C490 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C495 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C49A 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C49F 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C4A4 06                         byte_BBBE:	dc.b 6
0000C4A5 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000C4AA D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000C4AF E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C4B4 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C4B9 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C4BE 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C4C3 08                         byte_BBDD:	dc.b 8
0000C4C4 A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000C4C9 B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000C4CE C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000C4D3 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000C4D8 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C4DD F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C4E2 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C4E7 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C4EC 0A                         byte_BC06:	dc.b $A
0000C4ED 8001 003F FC               		dc.b $80, 1, 0,	$3F, $FC
0000C4F2 9001 003F FC               		dc.b $90, 1, 0,	$3F, $FC
0000C4F7 A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000C4FC B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000C501 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000C506 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000C50B E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C510 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C515 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C51A 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C51F 05                         byte_BC39:	dc.b 5
0000C520 F406 0000 D0               		dc.b $F4, 6, 0,	0, $D0
0000C525 F40A 0006 E0               		dc.b $F4, $A, 0, 6, $E0
0000C52A F40A 0806 08               		dc.b $F4, $A, 8, 6, 8
0000C52F F406 0800 20               		dc.b $F4, 6, 8,	0, $20
0000C534 EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000C539 01                         byte_BC53:	dc.b 1
0000C53A EC0F 002F F0               		dc.b $EC, $F, 0, $2F, $F0
0000C540 00                         		even
0000C540 00                         		even
0000C540                            
0000C540                            ; ---------------------------------------------------------------------------
0000C540                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000C540                            ; ---------------------------------------------------------------------------
0000C540                            Map_obj45:
0000C540                            	include "_maps\obj45.asm"
0000C540                            ; ---------------------------------------------------------------------------
0000C540                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000C540                            ; ---------------------------------------------------------------------------
0000C540 0000                       		dc.w byte_BC6C-Map_obj45
0000C542 0000                       		dc.w byte_BC7C-Map_obj45
0000C544 0000                       		dc.w byte_BC8C-Map_obj45
0000C546 0000                       		dc.w byte_BC92-Map_obj45
0000C548 0000                       		dc.w byte_BC9D-Map_obj45
0000C54A 0000                       		dc.w byte_BCB2-Map_obj45
0000C54C 0000                       		dc.w byte_BCD1-Map_obj45
0000C54E 0000                       		dc.w byte_BCFA-Map_obj45
0000C550 0000                       		dc.w byte_BCFA-Map_obj45
0000C552 03                         byte_BC6C:	dc.b 3
0000C553 E00B 001F F4               		dc.b $E0, $B, 0, $1F, $F4
0000C558 000B 101F F4               		dc.b 0,	$B, $10, $1F, $F4
0000C55D F003 002B 0C               		dc.b $F0, 3, 0,	$2B, $C
0000C562 03                         byte_BC7C:	dc.b 3
0000C563 E80C 121B F0               		dc.b $E8, $C, $12, $1B,	$F0
0000C568 FC0C 121B F0               		dc.b $FC, $C, $12, $1B,	$F0
0000C56D 100C 121B F0               		dc.b $10, $C, $12, $1B,	$F0
0000C572 01                         byte_BC8C:	dc.b 1
0000C573 F003 082B FC               		dc.b $F0, 3, 8,	$2B, $FC
0000C578 02                         byte_BC92:	dc.b 2
0000C579 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C57E F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C583 04                         byte_BC9D:	dc.b 4
0000C584 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C589 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C58E F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C593 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C598 06                         byte_BCB2:	dc.b 6
0000C599 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C59E F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C5A3 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C5A8 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C5AD F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C5B2 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C5B7 08                         byte_BCD1:	dc.b 8
0000C5B8 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C5BD F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C5C2 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C5C7 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C5CC F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C5D1 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C5D6 F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000C5DB F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000C5E0 08                         byte_BCFA:	dc.b 8
0000C5E1 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C5E6 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C5EB F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C5F0 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C5F5 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C5FA F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C5FF F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000C604 F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000C609 F805 0041 60               		dc.b $F8, 5, 0,	$41, $60
0000C60E F805 0041 70               		dc.b $F8, 5, 0,	$41, $70
0000C614 00                         		even
0000C614 00                         		even
0000C614                            
0000C614                            ; ===========================================================================
0000C614                            ; ---------------------------------------------------------------------------
0000C614                            ; Object 32 - switches (MZ, SYZ, LZ, SBZ)
0000C614                            ; ---------------------------------------------------------------------------
0000C614                            
0000C614                            Obj32:					; XREF: Obj_Index
0000C614 7000                       		moveq	#0,d0
0000C616 1028 0024                  		move.b	$24(a0),d0
0000C61A 323B 0000                  		move.w	Obj32_Index(pc,d0.w),d1
0000C61E 4EFB 1000                  		jmp	Obj32_Index(pc,d1.w)
0000C622                            ; ===========================================================================
0000C622 0000                       Obj32_Index:	dc.w Obj32_Main-Obj32_Index
0000C624 0000                       		dc.w Obj32_Pressed-Obj32_Index
0000C626                            ; ===========================================================================
0000C626                            
0000C626                            Obj32_Main:				; XREF: Obj32_Index
0000C626 5428 0024                  		addq.b	#2,$24(a0)
0000C62A 217C 0000 0000 0004        		move.l	#Map_obj32,4(a0)
0000C632 317C 4513 0002             		move.w	#$4513,2(a0)	; MZ specific code
0000C638 0C38 0002 FE10             		cmpi.b	#2,($FFFFFE10).w
0000C63E 6700                       		beq.s	loc_BD60
0000C640 317C 0513 0002             		move.w	#$513,2(a0)	; SYZ, LZ and SBZ specific code
0000C646                            
0000C646                            loc_BD60:
0000C646 117C 0004 0001             		move.b	#4,1(a0)
0000C64C 117C 0010 0019             		move.b	#$10,$19(a0)
0000C652 117C 0004 0018             		move.b	#4,$18(a0)
0000C658 5668 000C                  		addq.w	#3,$C(a0)
0000C65C                            
0000C65C                            Obj32_Pressed:				; XREF: Obj32_Index
0000C65C 4A28 0001                  		tst.b	1(a0)
0000C660 6A00                       		bpl.s	Obj32_Display
0000C662 323C 001B                  		move.w	#$1B,d1
0000C666 343C 0005                  		move.w	#5,d2
0000C66A 363C 0005                  		move.w	#5,d3
0000C66E 3828 0008                  		move.w	8(a0),d4
0000C672 6100 0000                  		bsr.w	SolidObject
0000C676 08A8 0000 001A             		bclr	#0,$1A(a0)	; use "unpressed" frame
0000C67C 1028 0028                  		move.b	$28(a0),d0
0000C680 0240 000F                  		andi.w	#$F,d0
0000C684 47F8 F7E0                  		lea	($FFFFF7E0).w,a3
0000C688 47F3 0000                  		lea	(a3,d0.w),a3
0000C68C 7600                       		moveq	#0,d3
0000C68E 0828 0006 0028             		btst	#6,$28(a0)
0000C694 6700                       		beq.s	loc_BDB2
0000C696 7607                       		moveq	#7,d3
0000C698                            
0000C698                            loc_BDB2:
0000C698 4A28 0028                  		tst.b	$28(a0)
0000C69C 6A00                       		bpl.s	loc_BDBE
0000C69E 6100 0000                  		bsr.w	Obj32_MZBlock
0000C6A2 6600                       		bne.s	loc_BDC8
0000C6A4                            
0000C6A4                            loc_BDBE:
0000C6A4 4A28 0025                  		tst.b	$25(a0)
0000C6A8 6600                       		bne.s	loc_BDC8
0000C6AA 0793                       		bclr	d3,(a3)
0000C6AC 6000                       		bra.s	loc_BDDE
0000C6AE                            ; ===========================================================================
0000C6AE                            
0000C6AE                            loc_BDC8:
0000C6AE 4A13                       		tst.b	(a3)
0000C6B0 6600                       		bne.s	loc_BDD6
0000C6B2 303C 00CD                  		move.w	#$CD,d0
0000C6B6 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play switch sound
0000C6BC                            
0000C6BC                            loc_BDD6:
0000C6BC 07D3                       		bset	d3,(a3)
0000C6BE 08E8 0000 001A             		bset	#0,$1A(a0)	; use "pressed"	frame
0000C6C4                            
0000C6C4                            loc_BDDE:
0000C6C4 0828 0005 0028             		btst	#5,$28(a0)
0000C6CA 6700                       		beq.s	Obj32_Display
0000C6CC 5328 001E                  		subq.b	#1,$1E(a0)
0000C6D0 6A00                       		bpl.s	Obj32_Display
0000C6D2 117C 0007 001E             		move.b	#7,$1E(a0)
0000C6D8 0868 0001 001A             		bchg	#1,$1A(a0)
0000C6DE                            
0000C6DE                            Obj32_Display:
0000C6DE 6100 0000                  		bsr.w	DisplaySprite
0000C6E2 3028 0008                  		move.w	8(a0),d0
0000C6E6 0240 FF80                  		andi.w	#$FF80,d0
0000C6EA 3238 F700                  		move.w	($FFFFF700).w,d1
0000C6EE 0441 0080                  		subi.w	#$80,d1
0000C6F2 0241 FF80                  		andi.w	#$FF80,d1
0000C6F6 9041                       		sub.w	d1,d0
0000C6F8 0C40 0280                  		cmpi.w	#$280,d0
0000C6FC 6200 0000                  		bhi.w	Obj32_Delete
0000C700 4E75                       		rts	
0000C702                            ; ===========================================================================
0000C702                            
0000C702                            Obj32_Delete:
0000C702 6100 0000                  		bsr.w	DeleteObject
0000C706 4E75                       		rts	
0000C708                            
0000C708                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C708                            
0000C708                            
0000C708                            Obj32_MZBlock:				; XREF: Obj32_Pressed
0000C708 3F03                       		move.w	d3,-(sp)
0000C70A 3428 0008                  		move.w	8(a0),d2
0000C70E 3628 000C                  		move.w	$C(a0),d3
0000C712 0442 0010                  		subi.w	#$10,d2
0000C716 5143                       		subq.w	#8,d3
0000C718 383C 0020                  		move.w	#$20,d4
0000C71C 3A3C 0010                  		move.w	#$10,d5
0000C720 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking object RAM
0000C724 3C3C 005F                  		move.w	#$5F,d6
0000C728                            
0000C728                            Obj32_MZLoop:
0000C728 4A29 0001                  		tst.b	1(a1)
0000C72C 6A00                       		bpl.s	loc_BE4E
0000C72E 0C11 0033                  		cmpi.b	#$33,(a1)	; is the object	a green	MZ block?
0000C732 6700                       		beq.s	loc_BE5E	; if yes, branch
0000C734                            
0000C734                            loc_BE4E:
0000C734 43E9 0040                  		lea	$40(a1),a1	; check	next object
0000C738 51CE FFEE                  		dbf	d6,Obj32_MZLoop	; repeat $5F times
0000C73C                            
0000C73C 361F                       		move.w	(sp)+,d3
0000C73E 7000                       		moveq	#0,d0
0000C740                            
0000C740                            locret_BE5A:
0000C740 4E75                       		rts	
0000C742                            ; ===========================================================================
0000C742 1010                       Obj32_MZData:	dc.b $10, $10
0000C744                            ; ===========================================================================
0000C744                            
0000C744                            loc_BE5E:				; XREF: Obj32_MZBlock
0000C744 7001                       		moveq	#1,d0
0000C746 0240 003F                  		andi.w	#$3F,d0
0000C74A D040                       		add.w	d0,d0
0000C74C 45FB 00F2                  		lea	Obj32_MZData-2(pc,d0.w),a2
0000C750 121A                       		move.b	(a2)+,d1
0000C752 4881                       		ext.w	d1
0000C754 3029 0008                  		move.w	8(a1),d0
0000C758 9041                       		sub.w	d1,d0
0000C75A 9042                       		sub.w	d2,d0
0000C75C 6400                       		bcc.s	loc_BE80
0000C75E D241                       		add.w	d1,d1
0000C760 D041                       		add.w	d1,d0
0000C762 6500                       		bcs.s	loc_BE84
0000C764 60CE                       		bra.s	loc_BE4E
0000C766                            ; ===========================================================================
0000C766                            
0000C766                            loc_BE80:
0000C766 B044                       		cmp.w	d4,d0
0000C768 62CA                       		bhi.s	loc_BE4E
0000C76A                            
0000C76A                            loc_BE84:
0000C76A 121A                       		move.b	(a2)+,d1
0000C76C 4881                       		ext.w	d1
0000C76E 3029 000C                  		move.w	$C(a1),d0
0000C772 9041                       		sub.w	d1,d0
0000C774 9043                       		sub.w	d3,d0
0000C776 6400                       		bcc.s	loc_BE9A
0000C778 D241                       		add.w	d1,d1
0000C77A D041                       		add.w	d1,d0
0000C77C 6500                       		bcs.s	loc_BE9E
0000C77E 60B4                       		bra.s	loc_BE4E
0000C780                            ; ===========================================================================
0000C780                            
0000C780                            loc_BE9A:
0000C780 B045                       		cmp.w	d5,d0
0000C782 62B0                       		bhi.s	loc_BE4E
0000C784                            
0000C784                            loc_BE9E:
0000C784 361F                       		move.w	(sp)+,d3
0000C786 7001                       		moveq	#1,d0
0000C788 4E75                       		rts	
0000C78A                            ; End of function Obj32_MZBlock
0000C78A                            
0000C78A                            ; ===========================================================================
0000C78A                            ; ---------------------------------------------------------------------------
0000C78A                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000C78A                            ; ---------------------------------------------------------------------------
0000C78A                            Map_obj32:
0000C78A                            	include "_maps\obj32.asm"
0000C78A                            ; ---------------------------------------------------------------------------
0000C78A                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000C78A                            ; ---------------------------------------------------------------------------
0000C78A 0000                       		dc.w byte_BEAC-Map_obj32
0000C78C 0000                       		dc.w byte_BEB7-Map_obj32
0000C78E 0000                       		dc.w byte_BEC2-Map_obj32
0000C790 0000                       		dc.w byte_BEB7-Map_obj32
0000C792 02                         byte_BEAC:	dc.b 2
0000C793 F505 0000 F0               		dc.b $F5, 5, 0,	0, $F0
0000C798 F505 0800 00               		dc.b $F5, 5, 8,	0, 0
0000C79D 02                         byte_BEB7:	dc.b 2
0000C79E F505 0004 F0               		dc.b $F5, 5, 0,	4, $F0
0000C7A3 F505 0804 00               		dc.b $F5, 5, 8,	4, 0
0000C7A8 02                         byte_BEC2:	dc.b 2
0000C7A9 F505 FFFC F0               		dc.b $F5, 5, $FF, $FC, $F0
0000C7AE F505 07FC 00               		dc.b $F5, 5, 7,	$FC, 0
0000C7B3 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000C7B8                            		even
0000C7B8                            		even
0000C7B8                            
0000C7B8                            ; ===========================================================================
0000C7B8                            ; ---------------------------------------------------------------------------
0000C7B8                            ; Object 33 - pushable blocks (MZ, LZ)
0000C7B8                            ; ---------------------------------------------------------------------------
0000C7B8                            
0000C7B8                            Obj33:					; XREF: Obj_Index
0000C7B8 7000                       		moveq	#0,d0
0000C7BA 1028 0024                  		move.b	$24(a0),d0
0000C7BE 323B 0000                  		move.w	Obj33_Index(pc,d0.w),d1
0000C7C2 4EFB 1000                  		jmp	Obj33_Index(pc,d1.w)
0000C7C6                            ; ===========================================================================
0000C7C6 0000                       Obj33_Index:	dc.w Obj33_Main-Obj33_Index
0000C7C8 0000                       		dc.w loc_BF6E-Obj33_Index
0000C7CA 0000                       		dc.w loc_C02C-Obj33_Index
0000C7CC                            
0000C7CC 1000                       Obj33_Var:	dc.b $10, 0	; object width,	frame number
0000C7CE 4001                       		dc.b $40, 1
0000C7D0                            ; ===========================================================================
0000C7D0                            
0000C7D0                            Obj33_Main:				; XREF: Obj33_Index
0000C7D0 5428 0024                  		addq.b	#2,$24(a0)
0000C7D4 117C 000F 0016             		move.b	#$F,$16(a0)
0000C7DA 117C 000F 0017             		move.b	#$F,$17(a0)
0000C7E0 217C 0000 0000 0004        		move.l	#Map_obj33,4(a0)
0000C7E8 317C 42B8 0002             		move.w	#$42B8,2(a0)	; MZ specific code
0000C7EE 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
0000C7F4 6600                       		bne.s	loc_BF16
0000C7F6 317C 43DE 0002             		move.w	#$43DE,2(a0)	; LZ specific code
0000C7FC                            
0000C7FC                            loc_BF16:
0000C7FC 117C 0004 0001             		move.b	#4,1(a0)
0000C802 117C 0003 0018             		move.b	#3,$18(a0)
0000C808 3168 0008 0034             		move.w	8(a0),$34(a0)
0000C80E 3168 000C 0036             		move.w	$C(a0),$36(a0)
0000C814 7000                       		moveq	#0,d0
0000C816 1028 0028                  		move.b	$28(a0),d0
0000C81A D040                       		add.w	d0,d0
0000C81C 0240 000E                  		andi.w	#$E,d0
0000C820 45FB 00AA                  		lea	Obj33_Var(pc,d0.w),a2
0000C824 115A 0019                  		move.b	(a2)+,$19(a0)
0000C828 115A 001A                  		move.b	(a2)+,$1A(a0)
0000C82C 4A28 0028                  		tst.b	$28(a0)
0000C830 6700                       		beq.s	Obj33_ChkGone
0000C832 317C C2B8 0002             		move.w	#$C2B8,2(a0)
0000C838                            
0000C838                            Obj33_ChkGone:
0000C838 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000C83C 7000                       		moveq	#0,d0
0000C83E 1028 0023                  		move.b	$23(a0),d0
0000C842 6700                       		beq.s	loc_BF6E
0000C844 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000C84A 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000C850 6600 0000                  		bne.w	DeleteObject
0000C854                            
0000C854                            loc_BF6E:				; XREF: Obj33_Index
0000C854 4A28 0032                  		tst.b	$32(a0)
0000C858 6600 0000                  		bne.w	loc_C046
0000C85C 7200                       		moveq	#0,d1
0000C85E 1228 0019                  		move.b	$19(a0),d1
0000C862 0641 000B                  		addi.w	#$B,d1
0000C866 343C 0010                  		move.w	#$10,d2
0000C86A 363C 0011                  		move.w	#$11,d3
0000C86E 3828 0008                  		move.w	8(a0),d4
0000C872 6100 0000                  		bsr.w	loc_C186
0000C876 0C78 0200 FE10             		cmpi.w	#$200,($FFFFFE10).w ; is the level MZ act 1?
0000C87C 6600                       		bne.s	loc_BFC6	; if not, branch
0000C87E 08A8 0007 0028             		bclr	#7,$28(a0)
0000C884 3028 0008                  		move.w	8(a0),d0
0000C888 0C40 0A20                  		cmpi.w	#$A20,d0
0000C88C 6500                       		bcs.s	loc_BFC6
0000C88E 0C40 0AA1                  		cmpi.w	#$AA1,d0
0000C892 6400                       		bcc.s	loc_BFC6
0000C894 3038 F7A4                  		move.w	($FFFFF7A4).w,d0
0000C898 0440 001C                  		subi.w	#$1C,d0
0000C89C 3140 000C                  		move.w	d0,$C(a0)
0000C8A0 08F8 0007 F7A4             		bset	#7,($FFFFF7A4).w
0000C8A6 08E8 0007 0028             		bset	#7,$28(a0)
0000C8AC                            
0000C8AC                            loc_BFC6:
0000C8AC 3028 0008                  		move.w	8(a0),d0
0000C8B0 0240 FF80                  		andi.w	#$FF80,d0
0000C8B4 3238 F700                  		move.w	($FFFFF700).w,d1
0000C8B8 0441 0080                  		subi.w	#$80,d1
0000C8BC 0241 FF80                  		andi.w	#$FF80,d1
0000C8C0 9041                       		sub.w	d1,d0
0000C8C2 0C40 0280                  		cmpi.w	#$280,d0
0000C8C6 6200                       		bhi.s	loc_BFE6
0000C8C8 6000 0000                  		bra.w	DisplaySprite
0000C8CC                            ; ===========================================================================
0000C8CC                            
0000C8CC                            loc_BFE6:
0000C8CC 3028 0034                  		move.w	$34(a0),d0
0000C8D0 0240 FF80                  		andi.w	#$FF80,d0
0000C8D4 3238 F700                  		move.w	($FFFFF700).w,d1
0000C8D8 0441 0080                  		subi.w	#$80,d1
0000C8DC 0241 FF80                  		andi.w	#$FF80,d1
0000C8E0 9041                       		sub.w	d1,d0
0000C8E2 0C40 0280                  		cmpi.w	#$280,d0
0000C8E6 6200                       		bhi.s	loc_C016
0000C8E8 3168 0034 0008             		move.w	$34(a0),8(a0)
0000C8EE 3168 0036 000C             		move.w	$36(a0),$C(a0)
0000C8F4 117C 0004 0024             		move.b	#4,$24(a0)
0000C8FA 6000                       		bra.s	loc_C02C
0000C8FC                            ; ===========================================================================
0000C8FC                            
0000C8FC                            loc_C016:
0000C8FC 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000C900 7000                       		moveq	#0,d0
0000C902 1028 0023                  		move.b	$23(a0),d0
0000C906 6700                       		beq.s	loc_C028
0000C908 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
0000C90E                            
0000C90E                            loc_C028:
0000C90E 6000 0000                  		bra.w	DeleteObject
0000C912                            ; ===========================================================================
0000C912                            
0000C912                            loc_C02C:				; XREF: Obj33_Index
0000C912 6100 0000                  		bsr.w	ChkObjOnScreen2
0000C916 6700                       		beq.s	locret_C044
0000C918 117C 0002 0024             		move.b	#2,$24(a0)
0000C91E 4228 0032                  		clr.b	$32(a0)
0000C922 4268 0010                  		clr.w	$10(a0)
0000C926 4268 0012                  		clr.w	$12(a0)
0000C92A                            
0000C92A                            locret_C044:
0000C92A 4E75                       		rts	
0000C92C                            ; ===========================================================================
0000C92C                            
0000C92C                            loc_C046:				; XREF: loc_BF6E
0000C92C 3F28 0008                  		move.w	8(a0),-(sp)
0000C930 0C28 0004 0025             		cmpi.b	#4,$25(a0)
0000C936 6400                       		bcc.s	loc_C056
0000C938 6100 0000                  		bsr.w	SpeedToPos
0000C93C                            
0000C93C                            loc_C056:
0000C93C 0828 0001 0022             		btst	#1,$22(a0)
0000C942 6700                       		beq.s	loc_C0A0
0000C944 0668 0018 0012             		addi.w	#$18,$12(a0)
0000C94A 4EB9 0000 0000             		jsr	ObjHitFloor
0000C950 4A41                       		tst.w	d1
0000C952 6A00 0000                  		bpl.w	loc_C09E
0000C956 D368 000C                  		add.w	d1,$C(a0)
0000C95A 4268 0012                  		clr.w	$12(a0)
0000C95E 08A8 0001 0022             		bclr	#1,$22(a0)
0000C964 3011                       		move.w	(a1),d0
0000C966 0240 03FF                  		andi.w	#$3FF,d0
0000C96A 0C40 016A                  		cmpi.w	#$16A,d0
0000C96E 6500                       		bcs.s	loc_C09E
0000C970 3028 0030                  		move.w	$30(a0),d0
0000C974 E640                       		asr.w	#3,d0
0000C976 3140 0010                  		move.w	d0,$10(a0)
0000C97A 117C 0001 0032             		move.b	#1,$32(a0)
0000C980 4268 000E                  		clr.w	$E(a0)
0000C984                            
0000C984                            loc_C09E:
0000C984 6000                       		bra.s	loc_C0E6
0000C986                            ; ===========================================================================
0000C986                            
0000C986                            loc_C0A0:
0000C986 4A68 0010                  		tst.w	$10(a0)
0000C98A 6700 0000                  		beq.w	loc_C0D6
0000C98E 6B00                       		bmi.s	loc_C0BC
0000C990 7600                       		moveq	#0,d3
0000C992 1628 0019                  		move.b	$19(a0),d3
0000C996 4EB9 0000 0000             		jsr	ObjHitWallRight
0000C99C 4A41                       		tst.w	d1		; has block touched a wall?
0000C99E 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000C9A0 6000                       		bra.s	loc_C0E6
0000C9A2                            ; ===========================================================================
0000C9A2                            
0000C9A2                            loc_C0BC:
0000C9A2 7600                       		moveq	#0,d3
0000C9A4 1628 0019                  		move.b	$19(a0),d3
0000C9A8 4643                       		not.w	d3
0000C9AA 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000C9B0 4A41                       		tst.w	d1		; has block touched a wall?
0000C9B2 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000C9B4 6000                       		bra.s	loc_C0E6
0000C9B6                            ; ===========================================================================
0000C9B6                            
0000C9B6                            Obj33_StopPush:
0000C9B6 4268 0010                  		clr.w	$10(a0)		; stop block moving
0000C9BA 6000                       		bra.s	loc_C0E6
0000C9BC                            ; ===========================================================================
0000C9BC                            
0000C9BC                            loc_C0D6:
0000C9BC 06A8 0000 2001 000C        		addi.l	#$2001,$C(a0)
0000C9C4 0C28 00A0 000F             		cmpi.b	#-$60,$F(a0)
0000C9CA 6400                       		bcc.s	loc_C104
0000C9CC                            
0000C9CC                            loc_C0E6:
0000C9CC 7200                       		moveq	#0,d1
0000C9CE 1228 0019                  		move.b	$19(a0),d1
0000C9D2 0641 000B                  		addi.w	#$B,d1
0000C9D6 343C 0010                  		move.w	#$10,d2
0000C9DA 363C 0011                  		move.w	#$11,d3
0000C9DE 381F                       		move.w	(sp)+,d4
0000C9E0 6100 0000                  		bsr.w	loc_C186
0000C9E4 6100                       		bsr.s	Obj33_ChkLava
0000C9E6 6000 FEC4                  		bra.w	loc_BFC6
0000C9EA                            ; ===========================================================================
0000C9EA                            
0000C9EA                            loc_C104:
0000C9EA 381F                       		move.w	(sp)+,d4
0000C9EC 43F8 D000                  		lea	($FFFFD000).w,a1
0000C9F0 08A9 0003 0022             		bclr	#3,$22(a1)
0000C9F6 08A8 0003 0022             		bclr	#3,$22(a0)
0000C9FC 6000 FECE                  		bra.w	loc_BFE6
0000CA00                            ; ===========================================================================
0000CA00                            
0000CA00                            Obj33_ChkLava:
0000CA00 0C78 0201 FE10             		cmpi.w	#$201,($FFFFFE10).w ; is the level MZ act 2?
0000CA06 6600                       		bne.s	Obj33_ChkLava2	; if not, branch
0000CA08 343C FFE0                  		move.w	#-$20,d2
0000CA0C 0C68 0DD0 0008             		cmpi.w	#$DD0,8(a0)
0000CA12 6700                       		beq.s	Obj33_LoadLava
0000CA14 0C68 0CC0 0008             		cmpi.w	#$CC0,8(a0)
0000CA1A 6700                       		beq.s	Obj33_LoadLava
0000CA1C 0C68 0BA0 0008             		cmpi.w	#$BA0,8(a0)
0000CA22 6700                       		beq.s	Obj33_LoadLava
0000CA24 4E75                       		rts	
0000CA26                            ; ===========================================================================
0000CA26                            
0000CA26                            Obj33_ChkLava2:
0000CA26 0C78 0202 FE10             		cmpi.w	#$202,($FFFFFE10).w ; is the level MZ act 3?
0000CA2C 6600                       		bne.s	Obj33_NoLava	; if not, branch
0000CA2E 343C 0020                  		move.w	#$20,d2
0000CA32 0C68 0560 0008             		cmpi.w	#$560,8(a0)
0000CA38 6700                       		beq.s	Obj33_LoadLava
0000CA3A 0C68 05C0 0008             		cmpi.w	#$5C0,8(a0)
0000CA40 6700                       		beq.s	Obj33_LoadLava
0000CA42                            
0000CA42                            Obj33_NoLava:
0000CA42 4E75                       		rts	
0000CA44                            ; ===========================================================================
0000CA44                            
0000CA44                            Obj33_LoadLava:
0000CA44 6100 0000                  		bsr.w	SingleObjLoad
0000CA48 6600                       		bne.s	locret_C184
0000CA4A 12BC 004C                  		move.b	#$4C,0(a1)	; load lava geyser object
0000CA4E 3368 0008 0008             		move.w	8(a0),8(a1)
0000CA54 D569 0008                  		add.w	d2,8(a1)
0000CA58 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000CA5E 0669 0010 000C             		addi.w	#$10,$C(a1)
0000CA64 2348 003C                  		move.l	a0,$3C(a1)
0000CA68                            
0000CA68                            locret_C184:
0000CA68 4E75                       		rts	
0000CA6A                            ; ===========================================================================
0000CA6A                            
0000CA6A                            loc_C186:				; XREF: loc_BF6E
0000CA6A 1028 0025                  		move.b	$25(a0),d0
0000CA6E 6700 0000                  		beq.w	loc_C218
0000CA72 5500                       		subq.b	#2,d0
0000CA74 6600                       		bne.s	loc_C1AA
0000CA76 6100 B30E                  		bsr.w	ExitPlatform
0000CA7A 0829 0003 0022             		btst	#3,$22(a1)
0000CA80 6600                       		bne.s	loc_C1A4
0000CA82 4228 0025                  		clr.b	$25(a0)
0000CA86 4E75                       		rts	
0000CA88                            ; ===========================================================================
0000CA88                            
0000CA88                            loc_C1A4:
0000CA88 3404                       		move.w	d4,d2
0000CA8A 6000 B858                  		bra.w	MvSonicOnPtfm
0000CA8E                            ; ===========================================================================
0000CA8E                            
0000CA8E                            loc_C1AA:
0000CA8E 5500                       		subq.b	#2,d0
0000CA90 6600                       		bne.s	loc_C1F2
0000CA92 6100 0000                  		bsr.w	SpeedToPos
0000CA96 0668 0018 0012             		addi.w	#$18,$12(a0)
0000CA9C 4EB9 0000 0000             		jsr	ObjHitFloor
0000CAA2 4A41                       		tst.w	d1
0000CAA4 6A00 0000                  		bpl.w	locret_C1F0
0000CAA8 D368 000C                  		add.w	d1,$C(a0)
0000CAAC 4268 0012                  		clr.w	$12(a0)
0000CAB0 4228 0025                  		clr.b	$25(a0)
0000CAB4 3011                       		move.w	(a1),d0
0000CAB6 0240 03FF                  		andi.w	#$3FF,d0
0000CABA 0C40 016A                  		cmpi.w	#$16A,d0
0000CABE 6500                       		bcs.s	locret_C1F0
0000CAC0 3028 0030                  		move.w	$30(a0),d0
0000CAC4 E640                       		asr.w	#3,d0
0000CAC6 3140 0010                  		move.w	d0,$10(a0)
0000CACA 117C 0001 0032             		move.b	#1,$32(a0)
0000CAD0 4268 000E                  		clr.w	$E(a0)
0000CAD4                            
0000CAD4                            locret_C1F0:
0000CAD4 4E75                       		rts	
0000CAD6                            ; ===========================================================================
0000CAD6                            
0000CAD6                            loc_C1F2:
0000CAD6 6100 0000                  		bsr.w	SpeedToPos
0000CADA 3028 0008                  		move.w	8(a0),d0
0000CADE 0240 000C                  		andi.w	#$C,d0
0000CAE2 6600 0000                  		bne.w	locret_C2E4
0000CAE6 0268 FFF0 0008             		andi.w	#-$10,8(a0)
0000CAEC 3168 0010 0030             		move.w	$10(a0),$30(a0)
0000CAF2 4268 0010                  		clr.w	$10(a0)
0000CAF6 5528 0025                  		subq.b	#2,$25(a0)
0000CAFA 4E75                       		rts	
0000CAFC                            ; ===========================================================================
0000CAFC                            
0000CAFC                            loc_C218:
0000CAFC 6100 0000                  		bsr.w	loc_FAC8
0000CB00 4A44                       		tst.w	d4
0000CB02 6700 0000                  		beq.w	locret_C2E4
0000CB06 6B00 0000                  		bmi.w	locret_C2E4
0000CB0A 4A28 0032                  		tst.b	$32(a0)
0000CB0E 6700                       		beq.s	loc_C230
0000CB10 6000 0000                  		bra.w	locret_C2E4
0000CB14                            ; ===========================================================================
0000CB14                            
0000CB14                            loc_C230:
0000CB14 4A40                       		tst.w	d0
0000CB16 6700 0000                  		beq.w	locret_C2E4
0000CB1A 6B00                       		bmi.s	loc_C268
0000CB1C 0829 0000 0022             		btst	#0,$22(a1)
0000CB22 6600 0000                  		bne.w	locret_C2E4
0000CB26 3F00                       		move.w	d0,-(sp)
0000CB28 7600                       		moveq	#0,d3
0000CB2A 1628 0019                  		move.b	$19(a0),d3
0000CB2E 4EB9 0000 0000             		jsr	ObjHitWallRight
0000CB34 301F                       		move.w	(sp)+,d0
0000CB36 4A41                       		tst.w	d1
0000CB38 6B00 0000                  		bmi.w	locret_C2E4
0000CB3C 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000CB44 7001                       		moveq	#1,d0
0000CB46 323C 0040                  		move.w	#$40,d1
0000CB4A 6000                       		bra.s	loc_C294
0000CB4C                            ; ===========================================================================
0000CB4C                            
0000CB4C                            loc_C268:
0000CB4C 0829 0000 0022             		btst	#0,$22(a1)
0000CB52 6700                       		beq.s	locret_C2E4
0000CB54 3F00                       		move.w	d0,-(sp)
0000CB56 7600                       		moveq	#0,d3
0000CB58 1628 0019                  		move.b	$19(a0),d3
0000CB5C 4643                       		not.w	d3
0000CB5E 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000CB64 301F                       		move.w	(sp)+,d0
0000CB66 4A41                       		tst.w	d1
0000CB68 6B00                       		bmi.s	locret_C2E4
0000CB6A 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
0000CB72 70FF                       		moveq	#-1,d0
0000CB74 323C FFC0                  		move.w	#-$40,d1
0000CB78                            
0000CB78                            loc_C294:
0000CB78 43F8 D000                  		lea	($FFFFD000).w,a1
0000CB7C D169 0008                  		add.w	d0,8(a1)
0000CB80 3341 0014                  		move.w	d1,$14(a1)
0000CB84 337C 0000 0010             		move.w	#0,$10(a1)
0000CB8A 3F00                       		move.w	d0,-(sp)
0000CB8C 303C 00A7                  		move.w	#$A7,d0
0000CB90 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play pushing sound
0000CB96 301F                       		move.w	(sp)+,d0
0000CB98 4A28 0028                  		tst.b	$28(a0)
0000CB9C 6B00                       		bmi.s	locret_C2E4
0000CB9E 3F00                       		move.w	d0,-(sp)
0000CBA0 4EB9 0000 0000             		jsr	ObjHitFloor
0000CBA6 301F                       		move.w	(sp)+,d0
0000CBA8 0C41 0004                  		cmpi.w	#4,d1
0000CBAC 6F00                       		ble.s	loc_C2E0
0000CBAE 317C 0400 0010             		move.w	#$400,$10(a0)
0000CBB4 4A40                       		tst.w	d0
0000CBB6 6A00                       		bpl.s	loc_C2D8
0000CBB8 4468 0010                  		neg.w	$10(a0)
0000CBBC                            
0000CBBC                            loc_C2D8:
0000CBBC 117C 0006 0025             		move.b	#6,$25(a0)
0000CBC2 6000                       		bra.s	locret_C2E4
0000CBC4                            ; ===========================================================================
0000CBC4                            
0000CBC4                            loc_C2E0:
0000CBC4 D368 000C                  		add.w	d1,$C(a0)
0000CBC8                            
0000CBC8                            locret_C2E4:
0000CBC8 4E75                       		rts	
0000CBCA                            ; ===========================================================================
0000CBCA                            ; ---------------------------------------------------------------------------
0000CBCA                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000CBCA                            ; ---------------------------------------------------------------------------
0000CBCA                            Map_obj33:
0000CBCA                            	include "_maps\obj33.asm"
0000CBCA                            ; ---------------------------------------------------------------------------
0000CBCA                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000CBCA                            ; ---------------------------------------------------------------------------
0000CBCA 0000                       		dc.w byte_C2EA-Map_obj33
0000CBCC 0000                       		dc.w byte_C2F0-Map_obj33
0000CBCE 01                         byte_C2EA:	dc.b 1
0000CBCF F00F 0008 F0               		dc.b $F0, $F, 0, 8, $F0	; single block
0000CBD4 04                         byte_C2F0:	dc.b 4
0000CBD5 F00F 0008 C0               		dc.b $F0, $F, 0, 8, $C0	; row of 4 blocks
0000CBDA F00F 0008 E0               		dc.b $F0, $F, 0, 8, $E0
0000CBDF F00F 0008 00               		dc.b $F0, $F, 0, 8, 0
0000CBE4 F00F 0008 20               		dc.b $F0, $F, 0, 8, $20
0000CBEA 00                         		even
0000CBEA 00                         		even
0000CBEA                            
0000CBEA                            ; ===========================================================================
0000CBEA                            ; ---------------------------------------------------------------------------
0000CBEA                            ; Object 34 - zone title cards
0000CBEA                            ; ---------------------------------------------------------------------------
0000CBEA                            Obj34:					; XREF: Obj_Index
0000CBEA 7000                       		moveq	#0,d0
0000CBEC 1028 0024                  		move.b	$24(a0),d0
0000CBF0 323B 0000                  		move.w	Obj34_Index(pc,d0.w),d1
0000CBF4 4EFB 1000                  		jmp	Obj34_Index(pc,d1.w)
0000CBF8                            ; ===========================================================================
0000CBF8 0000                       Obj34_Index:	dc.w Obj34_CheckSBZ3-Obj34_Index
0000CBFA 0000                       		dc.w Obj34_ChkPos-Obj34_Index
0000CBFC 0000                       		dc.w Obj34_Wait-Obj34_Index
0000CBFE 0000                       		dc.w Obj34_Wait-Obj34_Index
0000CC00                            ; ===========================================================================
0000CC00                            
0000CC00                            Obj34_CheckSBZ3:			; XREF: Obj34_Index
0000CC00 2248                       		movea.l	a0,a1
0000CC02 7000                       		moveq	#0,d0
0000CC04 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000CC08 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; check if level is	SBZ 3
0000CC0E 6600                       		bne.s	Obj34_CheckFZ
0000CC10 7005                       		moveq	#5,d0		; load title card number 5 (SBZ)
0000CC12                            
0000CC12                            Obj34_CheckFZ:
0000CC12 3400                       		move.w	d0,d2
0000CC14 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; check if level is	FZ
0000CC1A 6600                       		bne.s	Obj34_LoadConfig
0000CC1C 7006                       		moveq	#6,d0		; load title card number 6 (FZ)
0000CC1E 740B                       		moveq	#$B,d2		; use "FINAL" mappings
0000CC20                            
0000CC20                            Obj34_LoadConfig:
0000CC20 47F9 0000 0000             		lea	(Obj34_ConData).l,a3
0000CC26 E948                       		lsl.w	#4,d0
0000CC28 D6C0                       		adda.w	d0,a3
0000CC2A 45F9 0000 0000             		lea	(Obj34_ItemData).l,a2
0000CC30 7203                       		moveq	#3,d1
0000CC32                            
0000CC32                            Obj34_Loop:
0000CC32 12BC 0034                  		move.b	#$34,0(a1)
0000CC36 3353 0008                  		move.w	(a3),8(a1)	; load start x-position
0000CC3A 335B 0032                  		move.w	(a3)+,$32(a1)	; load finish x-position (same as start)
0000CC3E 335B 0030                  		move.w	(a3)+,$30(a1)	; load main x-position
0000CC42 335A 000A                  		move.w	(a2)+,$A(a1)
0000CC46 135A 0024                  		move.b	(a2)+,$24(a1)
0000CC4A 101A                       		move.b	(a2)+,d0
0000CC4C 6600                       		bne.s	Obj34_ActNumber
0000CC4E 1002                       		move.b	d2,d0
0000CC50                            
0000CC50                            Obj34_ActNumber:
0000CC50 0C00 0007                  		cmpi.b	#7,d0
0000CC54 6600                       		bne.s	Obj34_MakeSprite
0000CC56 D038 FE11                  		add.b	($FFFFFE11).w,d0
0000CC5A 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w
0000CC60 6600                       		bne.s	Obj34_MakeSprite
0000CC62 5300                       		subq.b	#1,d0
0000CC64                            
0000CC64                            Obj34_MakeSprite:
0000CC64 1340 001A                  		move.b	d0,$1A(a1)	; display frame	number d0
0000CC68 237C 0000 0000 0004        		move.l	#Map_obj34,4(a1)
0000CC70 337C 8580 0002             		move.w	#$8580,2(a1)
0000CC76 137C 0078 0019             		move.b	#$78,$19(a1)
0000CC7C 137C 0000 0001             		move.b	#0,1(a1)
0000CC82 137C 0000 0018             		move.b	#0,$18(a1)
0000CC88 337C 003C 001E             		move.w	#60,$1E(a1)	; set time delay to 1 second
0000CC8E 43E9 0040                  		lea	$40(a1),a1	; next object
0000CC92 51C9 FF9E                  		dbf	d1,Obj34_Loop	; repeat sequence another 3 times
0000CC96                            
0000CC96                            Obj34_ChkPos:				; XREF: Obj34_Index
0000CC96 7210                       		moveq	#$10,d1		; set horizontal speed
0000CC98 3028 0030                  		move.w	$30(a0),d0
0000CC9C B068 0008                  		cmp.w	8(a0),d0	; has item reached the target position?
0000CCA0 6700                       		beq.s	loc_C3C8	; if yes, branch
0000CCA2 6C00                       		bge.s	Obj34_Move
0000CCA4 4441                       		neg.w	d1
0000CCA6                            
0000CCA6                            Obj34_Move:
0000CCA6 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CCAA                            
0000CCAA                            loc_C3C8:
0000CCAA 3028 0008                  		move.w	8(a0),d0
0000CCAE 6B00                       		bmi.s	locret_C3D8
0000CCB0 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CCB4 6400                       		bcc.s	locret_C3D8	; if yes, branch
0000CCB6 6000 0000                  		bra.w	DisplaySprite
0000CCBA                            ; ===========================================================================
0000CCBA                            
0000CCBA                            locret_C3D8:
0000CCBA 4E75                       		rts	
0000CCBC                            ; ===========================================================================
0000CCBC                            
0000CCBC                            Obj34_Wait:				; XREF: Obj34_Index
0000CCBC 4A68 001E                  		tst.w	$1E(a0)		; is time remaining zero?
0000CCC0 6700                       		beq.s	Obj34_ChkPos2	; if yes, branch
0000CCC2 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time
0000CCC6 6000 0000                  		bra.w	DisplaySprite
0000CCCA                            ; ===========================================================================
0000CCCA                            
0000CCCA                            Obj34_ChkPos2:				; XREF: Obj34_Wait
0000CCCA 4A28 0001                  		tst.b	1(a0)
0000CCCE 6A00                       		bpl.s	Obj34_ChangeArt
0000CCD0 7220                       		moveq	#$20,d1
0000CCD2 3028 0032                  		move.w	$32(a0),d0
0000CCD6 B068 0008                  		cmp.w	8(a0),d0	; has item reached the finish position?
0000CCDA 6700                       		beq.s	Obj34_ChangeArt	; if yes, branch
0000CCDC 6C00                       		bge.s	Obj34_Move2
0000CCDE 4441                       		neg.w	d1
0000CCE0                            
0000CCE0                            Obj34_Move2:
0000CCE0 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CCE4 3028 0008                  		move.w	8(a0),d0
0000CCE8 6B00                       		bmi.s	locret_C412
0000CCEA 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CCEE 6400                       		bcc.s	locret_C412	; if yes, branch
0000CCF0 6000 0000                  		bra.w	DisplaySprite
0000CCF4                            ; ===========================================================================
0000CCF4                            
0000CCF4                            locret_C412:
0000CCF4 4E75                       		rts	
0000CCF6                            ; ===========================================================================
0000CCF6                            
0000CCF6                            Obj34_ChangeArt:			; XREF: Obj34_ChkPos2
0000CCF6 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000CCFC 6600                       		bne.s	Obj34_Delete
0000CCFE 7002                       		moveq	#2,d0
0000CD00 4EB9 0000 17B6             		jsr	(LoadPLC).l	; load explosion patterns
0000CD06 7000                       		moveq	#0,d0
0000CD08 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000CD0C 0640 0015                  		addi.w	#$15,d0
0000CD10 4EB9 0000 17B6             		jsr	(LoadPLC).l	; load animal patterns
0000CD16                            
0000CD16                            Obj34_Delete:
0000CD16 6000 0000                  		bra.w	DeleteObject
0000CD1A                            ; ===========================================================================
0000CD1A 00D0                       Obj34_ItemData:	dc.w $D0	; y-axis position
0000CD1C 0200                       		dc.b 2,	0	; routine number, frame	number (changes)
0000CD1E 00E4                       		dc.w $E4
0000CD20 0206                       		dc.b 2,	6
0000CD22 00EA                       		dc.w $EA
0000CD24 0207                       		dc.b 2,	7
0000CD26 00E0                       		dc.w $E0
0000CD28 020A                       		dc.b 2,	$A
0000CD2A                            ; ---------------------------------------------------------------------------
0000CD2A                            ; Title	card configuration data
0000CD2A                            ; Format:
0000CD2A                            ; 4 bytes per item (YYYY XXXX)
0000CD2A                            ; 4 items per level (GREEN HILL, ZONE, ACT X, oval)
0000CD2A                            ; ---------------------------------------------------------------------------
0000CD2A 0000 0120 FEFC 013C 0414+  Obj34_ConData:	dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; GHZ
0000CD3A 0000 0120 FEF4 0134 040C+  		dc.w 0,	$120, $FEF4, $134, $40C, $14C, $20C, $14C ; LZ
0000CD4A 0000 0120 FEE0 0120 03F8+  		dc.w 0,	$120, $FEE0, $120, $3F8, $138, $1F8, $138 ; MZ
0000CD5A 0000 0120 FEFC 013C 0414+  		dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; SLZ
0000CD6A 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SYZ
0000CD7A 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SBZ
0000CD8A 0000 0120 FEE4 0124 03EC+  		dc.w 0,	$120, $FEE4, $124, $3EC, $3EC, $1EC, $12C ; FZ
0000CD9A 0000 0120 FEFC 013C 0414+  		dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; GHZ
0000CDAA 0000 0120 FEFC 013C 0414+  		dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; GHZ
0000CDBA                            ; ===========================================================================
0000CDBA                            ; ---------------------------------------------------------------------------
0000CDBA                            ; Object 39 - "GAME OVER" and "TIME OVER"
0000CDBA                            ; ---------------------------------------------------------------------------
0000CDBA                            
0000CDBA                            Obj39:					; XREF: Obj_Index
0000CDBA 7000                       		moveq	#0,d0
0000CDBC 1028 0024                  		move.b	$24(a0),d0
0000CDC0 323B 0000                  		move.w	Obj39_Index(pc,d0.w),d1
0000CDC4 4EFB 1000                  		jmp	Obj39_Index(pc,d1.w)
0000CDC8                            ; ===========================================================================
0000CDC8 0000                       Obj39_Index:	dc.w Obj39_ChkPLC-Obj39_Index
0000CDCA 0000                       		dc.w loc_C50C-Obj39_Index
0000CDCC 0000                       		dc.w Obj39_Wait-Obj39_Index
0000CDCE                            ; ===========================================================================
0000CDCE                            
0000CDCE                            Obj39_ChkPLC:				; XREF: Obj39_Index
0000CDCE 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000CDD2 6700                       		beq.s	Obj39_Main	; if yes, branch
0000CDD4 4E75                       		rts	
0000CDD6                            ; ===========================================================================
0000CDD6                            
0000CDD6                            Obj39_Main:
0000CDD6 5428 0024                  		addq.b	#2,$24(a0)
0000CDDA 317C 0050 0008             		move.w	#$50,8(a0)	; set x-position
0000CDE0 0828 0000 001A             		btst	#0,$1A(a0)	; is the object	"OVER"?
0000CDE6 6700                       		beq.s	loc_C4EC	; if not, branch
0000CDE8 317C 01F0 0008             		move.w	#$1F0,8(a0)	; set x-position for "OVER"
0000CDEE                            
0000CDEE                            loc_C4EC:
0000CDEE 317C 00F0 000A             		move.w	#$F0,$A(a0)
0000CDF4 217C 0000 0000 0004        		move.l	#Map_obj39,4(a0)
0000CDFC 317C 855E 0002             		move.w	#$855E,2(a0)
0000CE02 117C 0000 0001             		move.b	#0,1(a0)
0000CE08 117C 0000 0018             		move.b	#0,$18(a0)
0000CE0E                            
0000CE0E                            loc_C50C:				; XREF: Obj39_Index
0000CE0E 7210                       		moveq	#$10,d1		; set horizontal speed
0000CE10 0C68 0120 0008             		cmpi.w	#$120,8(a0)	; has item reached its target position?
0000CE16 6700                       		beq.s	Obj39_SetWait	; if yes, branch
0000CE18 6500                       		bcs.s	Obj39_Move
0000CE1A 4441                       		neg.w	d1
0000CE1C                            
0000CE1C                            Obj39_Move:
0000CE1C D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CE20 6000 0000                  		bra.w	DisplaySprite
0000CE24                            ; ===========================================================================
0000CE24                            
0000CE24                            Obj39_SetWait:				; XREF: Obj39_Main
0000CE24 317C 02D0 001E             		move.w	#720,$1E(a0)	; set time delay to 12 seconds
0000CE2A 5428 0024                  		addq.b	#2,$24(a0)
0000CE2E 4E75                       		rts	
0000CE30                            ; ===========================================================================
0000CE30                            
0000CE30                            Obj39_Wait:				; XREF: Obj39_Index
0000CE30 1038 F605                  		move.b	($FFFFF605).w,d0
0000CE34 0200 0070                  		andi.b	#$70,d0		; is button A, B or C pressed?
0000CE38 6600                       		bne.s	Obj39_ChgMode	; if yes, branch
0000CE3A 0828 0000 001A             		btst	#0,$1A(a0)
0000CE40 6600                       		bne.s	Obj39_Display
0000CE42 4A68 001E                  		tst.w	$1E(a0)		; has time delay reached zero?
0000CE46 6700                       		beq.s	Obj39_ChgMode	; if yes, branch
0000CE48 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000CE4C 6000 0000                  		bra.w	DisplaySprite
0000CE50                            ; ===========================================================================
0000CE50                            
0000CE50                            Obj39_ChgMode:				; XREF: Obj39_Wait
0000CE50 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is time over flag set?
0000CE54 6600                       		bne.s	Obj39_ResetLvl	; if yes, branch
0000CE56 11FC 0014 F600             		move.b	#$14,($FFFFF600).w ; set mode to $14 (continue screen)
0000CE5C 4A38 FE18                  		tst.b	($FFFFFE18).w	; do you have any continues?
0000CE60 6600                       		bne.s	Obj39_Display	; if yes, branch
0000CE62 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set mode to 0 (Sega screen)
0000CE68 6000                       		bra.s	Obj39_Display
0000CE6A                            ; ===========================================================================
0000CE6A                            
0000CE6A                            Obj39_ResetLvl:				; XREF: Obj39_ChgMode
0000CE6A 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000CE70                            
0000CE70                            Obj39_Display:				; XREF: Obj39_ChgMode
0000CE70 6000 0000                  		bra.w	DisplaySprite
0000CE74                            ; ===========================================================================
0000CE74                            ; ---------------------------------------------------------------------------
0000CE74                            ; Object 3A - "SONIC GOT THROUGH" title	card
0000CE74                            ; ---------------------------------------------------------------------------
0000CE74                            
0000CE74                            Obj3A:					; XREF: Obj_Index
0000CE74 7000                       		moveq	#0,d0
0000CE76 1028 0024                  		move.b	$24(a0),d0
0000CE7A 323B 0000                  		move.w	Obj3A_Index(pc,d0.w),d1
0000CE7E 4EFB 1000                  		jmp	Obj3A_Index(pc,d1.w)
0000CE82                            ; ===========================================================================
0000CE82 0000                       Obj3A_Index:	dc.w Obj3A_ChkPLC-Obj3A_Index
0000CE84 0000                       		dc.w Obj3A_ChkPos-Obj3A_Index
0000CE86 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000CE88 0000                       		dc.w Obj3A_TimeBonus-Obj3A_Index
0000CE8A 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000CE8C 0000                       		dc.w Obj3A_NextLevel-Obj3A_Index
0000CE8E 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000CE90 0000                       		dc.w Obj3A_ChkPos2-Obj3A_Index
0000CE92 0000                       		dc.w loc_C766-Obj3A_Index
0000CE94                            ; ===========================================================================
0000CE94                            
0000CE94                            Obj3A_ChkPLC:				; XREF: Obj3A_Index
0000CE94 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000CE98 6700                       		beq.s	Obj3A_Main	; if yes, branch
0000CE9A 4E75                       		rts	
0000CE9C                            ; ===========================================================================
0000CE9C                            
0000CE9C                            Obj3A_Main:
0000CE9C 2248                       		movea.l	a0,a1
0000CE9E 45F9 0000 0000             		lea	(Obj3A_Config).l,a2
0000CEA4 7206                       		moveq	#6,d1
0000CEA6                            
0000CEA6                            Obj3A_Loop:
0000CEA6 12BC 003A                  		move.b	#$3A,0(a1)
0000CEAA 3352 0008                  		move.w	(a2),8(a1)	; load start x-position
0000CEAE 335A 0032                  		move.w	(a2)+,$32(a1)	; load finish x-position (same as start)
0000CEB2 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000CEB6 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000CEBA 135A 0024                  		move.b	(a2)+,$24(a1)
0000CEBE 101A                       		move.b	(a2)+,d0
0000CEC0 0C00 0006                  		cmpi.b	#6,d0
0000CEC4 6600                       		bne.s	loc_C5CA
0000CEC6 D038 FE11                  		add.b	($FFFFFE11).w,d0 ; add act number to frame number
0000CECA                            
0000CECA                            loc_C5CA:
0000CECA 1340 001A                  		move.b	d0,$1A(a1)
0000CECE 237C 0000 0000 0004        		move.l	#Map_obj3A,4(a1)
0000CED6 337C 8580 0002             		move.w	#$8580,2(a1)
0000CEDC 137C 0000 0001             		move.b	#0,1(a1)
0000CEE2 43E9 0040                  		lea	$40(a1),a1
0000CEE6 51C9 FFBE                  		dbf	d1,Obj3A_Loop	; repeat 6 times
0000CEEA                            
0000CEEA                            Obj3A_ChkPos:				; XREF: Obj3A_Index
0000CEEA 7210                       		moveq	#$10,d1		; set horizontal speed
0000CEEC 3028 0030                  		move.w	$30(a0),d0
0000CEF0 B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000CEF4 6700                       		beq.s	loc_C61A	; if yes, branch
0000CEF6 6C00                       		bge.s	Obj3A_Move
0000CEF8 4441                       		neg.w	d1
0000CEFA                            
0000CEFA                            Obj3A_Move:
0000CEFA D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CEFE                            
0000CEFE                            loc_C5FE:				; XREF: loc_C61A
0000CEFE 3028 0008                  		move.w	8(a0),d0
0000CF02 6B00                       		bmi.s	locret_C60E
0000CF04 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CF08 6400                       		bcc.s	locret_C60E	; if yes, branch
0000CF0A 6000 0000                  		bra.w	DisplaySprite
0000CF0E                            ; ===========================================================================
0000CF0E                            
0000CF0E                            locret_C60E:
0000CF0E 4E75                       		rts	
0000CF10                            ; ===========================================================================
0000CF10                            
0000CF10                            loc_C610:				; XREF: loc_C61A
0000CF10 117C 000E 0024             		move.b	#$E,$24(a0)
0000CF16 6000 0000                  		bra.w	Obj3A_ChkPos2
0000CF1A                            ; ===========================================================================
0000CF1A                            
0000CF1A                            loc_C61A:				; XREF: Obj3A_ChkPos
0000CF1A 0C38 000E D724             		cmpi.b	#$E,($FFFFD724).w
0000CF20 67EE                       		beq.s	loc_C610
0000CF22 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000CF28 66D4                       		bne.s	loc_C5FE
0000CF2A 5428 0024                  		addq.b	#2,$24(a0)
0000CF2E 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000CF34                            
0000CF34                            Obj3A_Wait:				; XREF: Obj3A_Index
0000CF34 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000CF38 6600                       		bne.s	Obj3A_Display
0000CF3A 5428 0024                  		addq.b	#2,$24(a0)
0000CF3E                            
0000CF3E                            Obj3A_Display:
0000CF3E 6000 0000                  		bra.w	DisplaySprite
0000CF42                            ; ===========================================================================
0000CF42                            
0000CF42                            Obj3A_TimeBonus:			; XREF: Obj3A_Index
0000CF42 6100 0000                  		bsr.w	DisplaySprite
0000CF46 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set time/ring bonus update flag
0000CF4C 7000                       		moveq	#0,d0
0000CF4E 4A78 F7D2                  		tst.w	($FFFFF7D2).w	; is time bonus	= zero?
0000CF52 6700                       		beq.s	Obj3A_RingBonus	; if yes, branch
0000CF54 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000CF58 0478 000A F7D2             		subi.w	#10,($FFFFF7D2).w ; subtract 10	from time bonus
0000CF5E                            
0000CF5E                            Obj3A_RingBonus:
0000CF5E 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000CF62 6700                       		beq.s	Obj3A_ChkBonus	; if yes, branch
0000CF64 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000CF68 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000CF6E                            
0000CF6E                            Obj3A_ChkBonus:
0000CF6E 4A40                       		tst.w	d0		; is there any bonus?
0000CF70 6600                       		bne.s	Obj3A_AddBonus	; if yes, branch
0000CF72 303C 00C5                  		move.w	#$C5,d0
0000CF76 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000CF7C 5428 0024                  		addq.b	#2,$24(a0)
0000CF80 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w
0000CF86 6600                       		bne.s	Obj3A_SetDelay
0000CF88 5828 0024                  		addq.b	#4,$24(a0)
0000CF8C                            
0000CF8C                            Obj3A_SetDelay:
0000CF8C 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000CF92                            
0000CF92                            locret_C692:
0000CF92 4E75                       		rts	
0000CF94                            ; ===========================================================================
0000CF94                            
0000CF94                            Obj3A_AddBonus:				; XREF: Obj3A_ChkBonus
0000CF94 4EB9 0000 0000             		jsr	AddPoints
0000CF9A 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000CF9E 0200 0003                  		andi.b	#3,d0
0000CFA2 66EE                       		bne.s	locret_C692
0000CFA4 303C 00CD                  		move.w	#$CD,d0
0000CFA8 4EF9 0000 15D2             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000CFAE                            ; ===========================================================================
0000CFAE                            
0000CFAE                            Obj3A_NextLevel:			; XREF: Obj3A_Index
0000CFAE 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000CFB2 0240 0007                  		andi.w	#7,d0
0000CFB6 E748                       		lsl.w	#3,d0
0000CFB8 1238 FE11                  		move.b	($FFFFFE11).w,d1
0000CFBC 0241 0003                  		andi.w	#3,d1
0000CFC0 D241                       		add.w	d1,d1
0000CFC2 D041                       		add.w	d1,d0
0000CFC4 303B 0000                  		move.w	LevelOrder(pc,d0.w),d0 ; load level from level order array
0000CFC8 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
0000CFCC 4A40                       		tst.w	d0
0000CFCE 6600                       		bne.s	Obj3A_ChkSS
0000CFD0 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set game mode to level (00)
0000CFD6 6000                       		bra.s	Obj3A_Display2
0000CFD8                            ; ===========================================================================
0000CFD8                            
0000CFD8                            Obj3A_ChkSS:				; XREF: Obj3A_NextLevel
0000CFD8 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
0000CFDC 4A38 F7CD                  		tst.b	($FFFFF7CD).w	; has Sonic jumped into	a giant	ring?
0000CFE0 6700                       		beq.s	loc_C6EA	; if not, branch
0000CFE2 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set game mode to Special Stage (10)
0000CFE8 6000                       		bra.s	Obj3A_Display2
0000CFEA                            ; ===========================================================================
0000CFEA                            
0000CFEA                            loc_C6EA:				; XREF: Obj3A_ChkSS
0000CFEA 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000CFF0                            
0000CFF0                            Obj3A_Display2:				; XREF: Obj3A_NextLevel, Obj3A_ChkSS
0000CFF0 6000 0000                  		bra.w	DisplaySprite
0000CFF4                            ; ===========================================================================
0000CFF4                            ; ---------------------------------------------------------------------------
0000CFF4                            ; Level	order array
0000CFF4                            ; ---------------------------------------------------------------------------
0000CFF4                            LevelOrder:	incbin	misc\lvl_ord.bin
0000D02C                            		even
0000D02C                            ; ===========================================================================
0000D02C                            
0000D02C                            Obj3A_ChkPos2:				; XREF: Obj3A_Index
0000D02C 7220                       		moveq	#$20,d1		; set horizontal speed
0000D02E 3028 0032                  		move.w	$32(a0),d0
0000D032 B068 0008                  		cmp.w	8(a0),d0	; has item reached its finish position?
0000D036 6700                       		beq.s	Obj3A_SBZ2	; if yes, branch
0000D038 6C00                       		bge.s	Obj3A_Move2
0000D03A 4441                       		neg.w	d1
0000D03C                            
0000D03C                            Obj3A_Move2:
0000D03C D368 0008                  		add.w	d1,8(a0)	; change item's position
0000D040 3028 0008                  		move.w	8(a0),d0
0000D044 6B00                       		bmi.s	locret_C748
0000D046 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000D04A 6400                       		bcc.s	locret_C748	; if yes, branch
0000D04C 6000 0000                  		bra.w	DisplaySprite
0000D050                            ; ===========================================================================
0000D050                            
0000D050                            locret_C748:
0000D050 4E75                       		rts	
0000D052                            ; ===========================================================================
0000D052                            
0000D052                            Obj3A_SBZ2:				; XREF: Obj3A_ChkPos2
0000D052 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000D058 6600 0000                  		bne.w	DeleteObject
0000D05C 5428 0024                  		addq.b	#2,$24(a0)
0000D060 4238 F7CC                  		clr.b	($FFFFF7CC).w	; unlock controls
0000D064 303C 008D                  		move.w	#$8D,d0
0000D068 4EF9 0000 15CC             		jmp	(PlaySound).l	; play FZ music
0000D06E                            ; ===========================================================================
0000D06E                            
0000D06E                            loc_C766:				; XREF: Obj3A_Index
0000D06E 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0000D072 0C78 2100 F72A             		cmpi.w	#$2100,($FFFFF72A).w
0000D078 6700 0000                  		beq.w	DeleteObject
0000D07C 4E75                       		rts	
0000D07E                            ; ===========================================================================
0000D07E 0004 0124 00BC             Obj3A_Config:	dc.w 4,	$124, $BC	; x-start, x-main, y-main
0000D084 0200                       		dc.b 2,	0		; routine number, frame	number (changes)
0000D086 FEE0 0120 00D0             		dc.w $FEE0, $120, $D0
0000D08C 0201                       		dc.b 2,	1
0000D08E 040C 014C 00D6             		dc.w $40C, $14C, $D6
0000D094 0206                       		dc.b 2,	6
0000D096 0520 0120 00EC             		dc.w $520, $120, $EC
0000D09C 0202                       		dc.b 2,	2
0000D09E 0540 0120 00FC             		dc.w $540, $120, $FC
0000D0A4 0203                       		dc.b 2,	3
0000D0A6 0560 0120 010C             		dc.w $560, $120, $10C
0000D0AC 0204                       		dc.b 2,	4
0000D0AE 020C 014C 00CC             		dc.w $20C, $14C, $CC
0000D0B4 0205                       		dc.b 2,	5
0000D0B6                            ; ===========================================================================
0000D0B6                            ; ---------------------------------------------------------------------------
0000D0B6                            ; Object 7E - special stage results screen
0000D0B6                            ; ---------------------------------------------------------------------------
0000D0B6                            
0000D0B6                            Obj7E:					; XREF: Obj_Index
0000D0B6 7000                       		moveq	#0,d0
0000D0B8 1028 0024                  		move.b	$24(a0),d0
0000D0BC 323B 0000                  		move.w	Obj7E_Index(pc,d0.w),d1
0000D0C0 4EFB 1000                  		jmp	Obj7E_Index(pc,d1.w)
0000D0C4                            ; ===========================================================================
0000D0C4 0000                       Obj7E_Index:	dc.w Obj7E_ChkPLC-Obj7E_Index
0000D0C6 0000                       		dc.w Obj7E_ChkPos-Obj7E_Index
0000D0C8 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000D0CA 0000                       		dc.w Obj7E_RingBonus-Obj7E_Index
0000D0CC 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000D0CE 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000D0D0 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000D0D2 0000                       		dc.w Obj7E_Continue-Obj7E_Index
0000D0D4 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000D0D6 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000D0D8 0000                       		dc.w loc_C91A-Obj7E_Index
0000D0DA                            ; ===========================================================================
0000D0DA                            
0000D0DA                            Obj7E_ChkPLC:				; XREF: Obj7E_Index
0000D0DA 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000D0DE 6700                       		beq.s	Obj7E_Main	; if yes, branch
0000D0E0 4E75                       		rts	
0000D0E2                            ; ===========================================================================
0000D0E2                            
0000D0E2                            Obj7E_Main:
0000D0E2 2248                       		movea.l	a0,a1
0000D0E4 45F9 0000 0000             		lea	(Obj7E_Config).l,a2
0000D0EA 7203                       		moveq	#3,d1
0000D0EC 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	50 or more rings?
0000D0F2 6500                       		bcs.s	Obj7E_Loop	; if no, branch
0000D0F4 5241                       		addq.w	#1,d1		; if yes, add 1	to d1 (number of sprites)
0000D0F6                            
0000D0F6                            Obj7E_Loop:
0000D0F6 12BC 007E                  		move.b	#$7E,0(a1)
0000D0FA 335A 0008                  		move.w	(a2)+,8(a1)	; load start x-position
0000D0FE 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000D102 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000D106 135A 0024                  		move.b	(a2)+,$24(a1)
0000D10A 135A 001A                  		move.b	(a2)+,$1A(a1)
0000D10E 237C 0000 0000 0004        		move.l	#Map_obj7E,4(a1)
0000D116 337C 8580 0002             		move.w	#$8580,2(a1)
0000D11C 137C 0000 0001             		move.b	#0,1(a1)
0000D122 43E9 0040                  		lea	$40(a1),a1
0000D126 51C9 FFCE                  		dbf	d1,Obj7E_Loop	; repeat sequence 3 or 4 times
0000D12A                            
0000D12A 7007                       		moveq	#7,d0
0000D12C 1238 FE57                  		move.b	($FFFFFE57).w,d1
0000D130 6700                       		beq.s	loc_C842
0000D132 7000                       		moveq	#0,d0
0000D134 0C01 0006                  		cmpi.b	#6,d1		; do you have all chaos	emeralds?
0000D138 6600                       		bne.s	loc_C842	; if not, branch
0000D13A 7008                       		moveq	#8,d0		; load "Sonic got them all" text
0000D13C 317C 0018 0008             		move.w	#$18,8(a0)
0000D142 317C 0118 0030             		move.w	#$118,$30(a0)	; change position of text
0000D148                            
0000D148                            loc_C842:
0000D148 1140 001A                  		move.b	d0,$1A(a0)
0000D14C                            
0000D14C                            Obj7E_ChkPos:				; XREF: Obj7E_Index
0000D14C 7210                       		moveq	#$10,d1		; set horizontal speed
0000D14E 3028 0030                  		move.w	$30(a0),d0
0000D152 B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000D156 6700                       		beq.s	loc_C86C	; if yes, branch
0000D158 6C00                       		bge.s	Obj7E_Move
0000D15A 4441                       		neg.w	d1
0000D15C                            
0000D15C                            Obj7E_Move:
0000D15C D368 0008                  		add.w	d1,8(a0)	; change item's position
0000D160                            
0000D160                            loc_C85A:				; XREF: loc_C86C
0000D160 3028 0008                  		move.w	8(a0),d0
0000D164 6B00                       		bmi.s	locret_C86A
0000D166 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000D16A 6400                       		bcc.s	locret_C86A	; if yes, branch
0000D16C 6000 0000                  		bra.w	DisplaySprite
0000D170                            ; ===========================================================================
0000D170                            
0000D170                            locret_C86A:
0000D170 4E75                       		rts	
0000D172                            ; ===========================================================================
0000D172                            
0000D172                            loc_C86C:				; XREF: Obj7E_ChkPos
0000D172 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000D178 66E6                       		bne.s	loc_C85A
0000D17A 5428 0024                  		addq.b	#2,$24(a0)
0000D17E 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000D184 11FC 007F D800             		move.b	#$7F,($FFFFD800).w ; load chaos	emerald	object
0000D18A                            
0000D18A                            Obj7E_Wait:				; XREF: Obj7E_Index
0000D18A 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000D18E 6600                       		bne.s	Obj7E_Display
0000D190 5428 0024                  		addq.b	#2,$24(a0)
0000D194                            
0000D194                            Obj7E_Display:
0000D194 6000 0000                  		bra.w	DisplaySprite
0000D198                            ; ===========================================================================
0000D198                            
0000D198                            Obj7E_RingBonus:			; XREF: Obj7E_Index
0000D198 6100 0000                  		bsr.w	DisplaySprite
0000D19C 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set ring bonus update flag
0000D1A2 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000D1A6 6700                       		beq.s	loc_C8C4	; if yes, branch
0000D1A8 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000D1AE 700A                       		moveq	#10,d0		; add 10 to score
0000D1B0 4EB9 0000 0000             		jsr	AddPoints
0000D1B6 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000D1BA 0200 0003                  		andi.b	#3,d0
0000D1BE 6600                       		bne.s	locret_C8EA
0000D1C0 303C 00CD                  		move.w	#$CD,d0
0000D1C4 4EF9 0000 15D2             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000D1CA                            ; ===========================================================================
0000D1CA                            
0000D1CA                            loc_C8C4:				; XREF: Obj7E_RingBonus
0000D1CA 303C 00C5                  		move.w	#$C5,d0
0000D1CE 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000D1D4 5428 0024                  		addq.b	#2,$24(a0)
0000D1D8 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000D1DE 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000D1E4 6500                       		bcs.s	locret_C8EA	; if not, branch
0000D1E6 317C 003C 001E             		move.w	#60,$1E(a0)	; set time delay to 1 second
0000D1EC 5828 0024                  		addq.b	#4,$24(a0)	; goto "Obj7E_Continue"	routine
0000D1F0                            
0000D1F0                            locret_C8EA:
0000D1F0 4E75                       		rts	
0000D1F2                            ; ===========================================================================
0000D1F2                            
0000D1F2                            Obj7E_Exit:				; XREF: Obj7E_Index
0000D1F2 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000D1F8 6000 0000                  		bra.w	DisplaySprite
0000D1FC                            ; ===========================================================================
0000D1FC                            
0000D1FC                            Obj7E_Continue:				; XREF: Obj7E_Index
0000D1FC 11FC 0004 D6DA             		move.b	#4,($FFFFD6DA).w
0000D202 11FC 0014 D6E4             		move.b	#$14,($FFFFD6E4).w
0000D208 303C 00BF                  		move.w	#$BF,d0
0000D20C 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play continues music
0000D212 5428 0024                  		addq.b	#2,$24(a0)
0000D216 317C 0168 001E             		move.w	#360,$1E(a0)	; set time delay to 6 seconds
0000D21C 6000 0000                  		bra.w	DisplaySprite
0000D220                            ; ===========================================================================
0000D220                            
0000D220                            loc_C91A:				; XREF: Obj7E_Index
0000D220 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000D224 0200 000F                  		andi.b	#$F,d0
0000D228 6600                       		bne.s	Obj7E_Display2
0000D22A 0868 0000 001A             		bchg	#0,$1A(a0)
0000D230                            
0000D230                            Obj7E_Display2:
0000D230 6000 0000                  		bra.w	DisplaySprite
0000D234                            ; ===========================================================================
0000D234 0020 0120 00C4             Obj7E_Config:	dc.w $20, $120,	$C4	; start	x-pos, main x-pos, y-pos
0000D23A 0200                       		dc.b 2,	0		; rountine number, frame number
0000D23C 0320 0120 0118             		dc.w $320, $120, $118
0000D242 0201                       		dc.b 2,	1
0000D244 0360 0120 0128             		dc.w $360, $120, $128
0000D24A 0202                       		dc.b 2,	2
0000D24C 01EC 011C 00C4             		dc.w $1EC, $11C, $C4
0000D252 0203                       		dc.b 2,	3
0000D254 03A0 0120 0138             		dc.w $3A0, $120, $138
0000D25A 0206                       		dc.b 2,	6
0000D25C                            ; ===========================================================================
0000D25C                            ; ---------------------------------------------------------------------------
0000D25C                            ; Object 7F - chaos emeralds from the special stage results screen
0000D25C                            ; ---------------------------------------------------------------------------
0000D25C                            
0000D25C                            Obj7F:					; XREF: Obj_Index
0000D25C 7000                       		moveq	#0,d0
0000D25E 1028 0024                  		move.b	$24(a0),d0
0000D262 323B 0000                  		move.w	Obj7F_Index(pc,d0.w),d1
0000D266 4EFB 1000                  		jmp	Obj7F_Index(pc,d1.w)
0000D26A                            ; ===========================================================================
0000D26A 0000                       Obj7F_Index:	dc.w Obj7F_Main-Obj7F_Index
0000D26C 0000                       		dc.w Obj7F_Flash-Obj7F_Index
0000D26E                            
0000D26E                            ; ---------------------------------------------------------------------------
0000D26E                            ; X-axis positions for chaos emeralds
0000D26E                            ; ---------------------------------------------------------------------------
0000D26E 0110 0128 00F8 0140 00E0+  Obj7F_PosData:	dc.w $110, $128, $F8, $140, $E0, $158
0000D27A                            ; ===========================================================================
0000D27A                            
0000D27A                            Obj7F_Main:				; XREF: Obj7F_Index
0000D27A 2248                       		movea.l	a0,a1
0000D27C 45F9 0000 D26E             		lea	(Obj7F_PosData).l,a2
0000D282 7400                       		moveq	#0,d2
0000D284 7200                       		moveq	#0,d1
0000D286 1238 FE57                  		move.b	($FFFFFE57).w,d1 ; d1 is number	of emeralds
0000D28A 5301                       		subq.b	#1,d1		; subtract 1 from d1
0000D28C 6500 0000                  		bcs.w	DeleteObject	; if you have 0	emeralds, branch
0000D290                            
0000D290                            Obj7F_Loop:
0000D290 12BC 007F                  		move.b	#$7F,0(a1)
0000D294 335A 0008                  		move.w	(a2)+,8(a1)	; set x-position
0000D298 337C 00F0 000A             		move.w	#$F0,$A(a1)	; set y-position
0000D29E 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0000D2A2 1633 2000                  		move.b	(a3,d2.w),d3
0000D2A6 1343 001A                  		move.b	d3,$1A(a1)
0000D2AA 1343 001C                  		move.b	d3,$1C(a1)
0000D2AE 5202                       		addq.b	#1,d2
0000D2B0 5429 0024                  		addq.b	#2,$24(a1)
0000D2B4 237C 0000 0000 0004        		move.l	#Map_obj7F,4(a1)
0000D2BC 337C 8541 0002             		move.w	#$8541,2(a1)
0000D2C2 137C 0000 0001             		move.b	#0,1(a1)
0000D2C8 43E9 0040                  		lea	$40(a1),a1	; next object
0000D2CC 51C9 FFC2                  		dbf	d1,Obj7F_Loop	; loop for d1 number of	emeralds
0000D2D0                            
0000D2D0                            Obj7F_Flash:				; XREF: Obj7F_Index
0000D2D0 1028 001A                  		move.b	$1A(a0),d0
0000D2D4 117C 0006 001A             		move.b	#6,$1A(a0)	; load 6th frame (blank)
0000D2DA 0C00 0006                  		cmpi.b	#6,d0
0000D2DE 6600                       		bne.s	Obj7F_Display
0000D2E0 1168 001C 001A             		move.b	$1C(a0),$1A(a0)	; load visible frame
0000D2E6                            
0000D2E6                            Obj7F_Display:
0000D2E6 6000 0000                  		bra.w	DisplaySprite
0000D2EA                            ; ===========================================================================
0000D2EA                            ; ---------------------------------------------------------------------------
0000D2EA                            ; Sprite mappings - zone title cards
0000D2EA                            ; ---------------------------------------------------------------------------
0000D2EA                            Map_obj34:
0000D2EA                                    include "_maps\obj34.asm"
0000D2EA                            Map_c5df:
0000D2EA 0000                       Map_c5df_0: 	dc.w Map_c5df_18-Map_c5df
0000D2EC 0000                       Map_c5df_2: 	dc.w Map_c5df_55-Map_c5df
0000D2EE 0000                       Map_c5df_4: 	dc.w Map_c5df_C4-Map_c5df
0000D2F0 0000                       Map_c5df_6: 	dc.w Map_c5df_DE-Map_c5df
0000D2F2 0000                       Map_c5df_8: 	dc.w Map_c5df_134-Map_c5df
0000D2F4 0000                       Map_c5df_A: 	dc.w Map_c5df_19E-Map_c5df
0000D2F6 0000                       Map_c5df_C: 	dc.w Map_c5df_1C2-Map_c5df
0000D2F8 0000                       Map_c5df_E: 	dc.w Map_c5df_1D7-Map_c5df
0000D2FA 0000                       Map_c5df_10: 	dc.w Map_c5df_1E2-Map_c5df
0000D2FC 0000                       Map_c5df_12: 	dc.w Map_c5df_1ED-Map_c5df
0000D2FE 0000                       Map_c5df_14: 	dc.w Map_c5df_1F8-Map_c5df
0000D300 0000                       Map_c5df_16: 	dc.w Map_c5df_23A-Map_c5df
0000D302 0C                         Map_c5df_18: 	dc.b $C
0000D303 F805 0008 80               	dc.b $F8, $5, $0, $8, $80
0000D308 F805 003A 90               	dc.b $F8, $5, $0, $3A, $90
0000D30D F805 0046 A0               	dc.b $F8, $5, $0, $46, $A0
0000D312 F805 002E B0               	dc.b $F8, $5, $0, $2E, $B0
0000D317 F805 0008 C0               	dc.b $F8, $5, $0, $8, $C0
0000D31C F805 001C D0               	dc.b $F8, $5, $0, $1C, $D0
0000D321 F805 004A E0               	dc.b $F8, $5, $0, $4A, $E0
0000D326 F800 0056 F0               	dc.b $F8, $0, $0, $56, $F0
0000D32B F805 003A 00               	dc.b $F8, $5, $0, $3A, $0
0000D330 F805 0032 10               	dc.b $F8, $5, $0, $32, $10
0000D335 F805 0026 20               	dc.b $F8, $5, $0, $26, $20
0000D33A F805 0026 30               	dc.b $F8, $5, $0, $26, $30
0000D33F 16                         Map_c5df_55: 	dc.b $16
0000D340 F801 0020 80               	dc.b $F8, $1, $0, $20, $80
0000D345 F800 0056 88               	dc.b $F8, $0, $0, $56, $88
0000D34A F805 0026 98               	dc.b $F8, $5, $0, $26, $98
0000D34F F801 0020 A8               	dc.b $F8, $1, $0, $20, $A8
0000D354 F805 0022 B0               	dc.b $F8, $5, $0, $22, $B0
0000D359 F805 0010 C0               	dc.b $F8, $5, $0, $10, $C0
0000D35E F800 0056 D0               	dc.b $F8, $0, $0, $56, $D0
0000D363 F805 0014 E0               	dc.b $F8, $5, $0, $14, $E0
0000D368 F801 0020 F0               	dc.b $F8, $1, $0, $20, $F0
0000D36D F805 0026 F8               	dc.b $F8, $5, $0, $26, $F8
0000D372 F805 0010 08               	dc.b $F8, $5, $0, $10, $8
0000D377 F800 0056 18               	dc.b $F8, $0, $0, $56, $18
0000D37C F805 0010 28               	dc.b $F8, $5, $0, $10, $28
0000D381 F805 0018 38               	dc.b $F8, $5, $0, $18, $38
0000D386 F805 0018 48               	dc.b $F8, $5, $0, $18, $48
0000D38B F805 003E 58               	dc.b $F8, $5, $0, $3E, $58
0000D390 F805 0036 68               	dc.b $F8, $5, $0, $36, $68
0000D395 F805 0026 78               	dc.b $F8, $5, $0, $26, $78
0000D39A F805 0032 88               	dc.b $F8, $5, $0, $32, $88
0000D39F F805 003A 98               	dc.b $F8, $5, $0, $3A, $98
0000D3A4 F805 0010 A8               	dc.b $F8, $5, $0, $10, $A8
0000D3A9 F805 003A B8               	dc.b $F8, $5, $0, $3A, $B8
0000D3AE 05                         Map_c5df_C4: 	dc.b $5
0000D3AF F805 002A 80               	dc.b $F8, $5, $0, $2A, $80
0000D3B4 F805 0000 90               	dc.b $F8, $5, $0, $0, $90
0000D3B9 F805 003A A0               	dc.b $F8, $5, $0, $3A, $A0
0000D3BE F805 0004 B0               	dc.b $F8, $5, $0, $4, $B0
0000D3C3 F805 0026 C0               	dc.b $F8, $5, $0, $26, $C0
0000D3C8 11                         Map_c5df_DE: 	dc.b $11
0000D3C9 F805 000C 80               	dc.b $F8, $5, $0, $C, $80
0000D3CE F805 0032 90               	dc.b $F8, $5, $0, $32, $90
0000D3D3 F805 002E A0               	dc.b $F8, $5, $0, $2E, $A0
0000D3D8 F805 0042 B0               	dc.b $F8, $5, $0, $42, $B0
0000D3DD F800 0056 C0               	dc.b $F8, $0, $0, $56, $C0
0000D3E2 F805 0018 D0               	dc.b $F8, $5, $0, $18, $D0
0000D3E7 F805 0010 E0               	dc.b $F8, $5, $0, $10, $E0
0000D3EC F805 0042 F0               	dc.b $F8, $5, $0, $42, $F0
0000D3F1 F800 0056 00               	dc.b $F8, $0, $0, $56, $0
0000D3F6 F805 003A 10               	dc.b $F8, $5, $0, $3A, $10
0000D3FB F801 0020 20               	dc.b $F8, $1, $0, $20, $20
0000D400 F805 000C 28               	dc.b $F8, $5, $0, $C, $28
0000D405 F805 0032 38               	dc.b $F8, $5, $0, $32, $38
0000D40A F805 0042 48               	dc.b $F8, $5, $0, $42, $48
0000D40F F805 001C 58               	dc.b $F8, $5, $0, $1C, $58
0000D414 F801 0020 68               	dc.b $F8, $1, $0, $20, $68
0000D419 F805 003E 70               	dc.b $F8, $5, $0, $3E, $70
0000D41E 15                         Map_c5df_134: 	dc.b $15
0000D41F F805 0042 80               	dc.b $F8, $5, $0, $42, $80
0000D424 F805 001C 90               	dc.b $F8, $5, $0, $1C, $90
0000D429 F805 0010 A0               	dc.b $F8, $5, $0, $10, $A0
0000D42E F800 0056 B0               	dc.b $F8, $0, $0, $56, $B0
0000D433 F805 0036 C0               	dc.b $F8, $5, $0, $36, $C0
0000D438 F801 0020 D0               	dc.b $F8, $1, $0, $20, $D0
0000D43D F805 0018 D8               	dc.b $F8, $5, $0, $18, $D8
0000D442 F800 0056 E8               	dc.b $F8, $0, $0, $56, $E8
0000D447 F805 0014 F8               	dc.b $F8, $5, $0, $14, $F8
0000D44C F805 003A 08               	dc.b $F8, $5, $0, $3A, $8
0000D451 F805 0032 18               	dc.b $F8, $5, $0, $32, $18
0000D456 F805 002A 28               	dc.b $F8, $5, $0, $2A, $28
0000D45B F800 0056 38               	dc.b $F8, $0, $0, $56, $38
0000D460 F805 0004 48               	dc.b $F8, $5, $0, $4, $48
0000D465 F805 0000 58               	dc.b $F8, $5, $0, $0, $58
0000D46A F805 003A 68               	dc.b $F8, $5, $0, $3A, $68
0000D46F F805 002E 78               	dc.b $F8, $5, $0, $2E, $78
0000D474 F805 004A 88               	dc.b $F8, $5, $0, $4A, $88
0000D479 F805 0000 98               	dc.b $F8, $5, $0, $0, $98
0000D47E F805 003A A8               	dc.b $F8, $5, $0, $3A, $A8
0000D483 F805 000C B8               	dc.b $F8, $5, $0, $C, $B8
0000D488 07                         Map_c5df_19E: 	dc.b $7
0000D489 F805 004E 80               	dc.b $F8, $5, $0, $4E, $80
0000D48E F800 0056 90               	dc.b $F8, $0, $0, $56, $90
0000D493 F805 004E A0               	dc.b $F8, $5, $0, $4E, $A0
0000D498 F800 0056 B0               	dc.b $F8, $0, $0, $56, $B0
0000D49D F805 004E C0               	dc.b $F8, $5, $0, $4E, $C0
0000D4A2 F800 0056 D0               	dc.b $F8, $0, $0, $56, $D0
0000D4A7 F805 004E E0               	dc.b $F8, $5, $0, $4E, $E0
0000D4AC 04                         Map_c5df_1C2: 	dc.b $4
0000D4AD F805 004E E0               	dc.b $F8, $5, $0, $4E, $E0
0000D4B2 F805 0032 F0               	dc.b $F8, $5, $0, $32, $F0
0000D4B7 F805 002E 00               	dc.b $F8, $5, $0, $2E, $0
0000D4BC F805 0010 10               	dc.b $F8, $5, $0, $10, $10
0000D4C1 02                         Map_c5df_1D7: 	dc.b $2
0000D4C2 040C 0053 EC               	dc.b $4, $C, $0, $53, $EC
0000D4C7 F402 0057 0C               	dc.b $F4, $2, $0, $57, $C
0000D4CC 02                         Map_c5df_1E2: 	dc.b $2
0000D4CD 040C 0053 EC               	dc.b $4, $C, $0, $53, $EC
0000D4D2 F406 005A 08               	dc.b $F4, $6, $0, $5A, $8
0000D4D7 02                         Map_c5df_1ED: 	dc.b $2
0000D4D8 040C 0053 EC               	dc.b $4, $C, $0, $53, $EC
0000D4DD F406 0060 08               	dc.b $F4, $6, $0, $60, $8
0000D4E2 0D                         Map_c5df_1F8: 	dc.b $D
0000D4E3 E40C 0070 F4               	dc.b $E4, $C, $0, $70, $F4
0000D4E8 E402 0074 14               	dc.b $E4, $2, $0, $74, $14
0000D4ED EC04 0077 EC               	dc.b $EC, $4, $0, $77, $EC
0000D4F2 F405 0079 E4               	dc.b $F4, $5, $0, $79, $E4
0000D4F7 140C 1870 EC               	dc.b $14, $C, $18, $70, $EC
0000D4FC 0402 1874 E4               	dc.b $4, $2, $18, $74, $E4
0000D501 0C04 1877 04               	dc.b $C, $4, $18, $77, $4
0000D506 FC05 1879 0C               	dc.b $FC, $5, $18, $79, $C
0000D50B EC08 007D FC               	dc.b $EC, $8, $0, $7D, $FC
0000D510 F40C 007C F4               	dc.b $F4, $C, $0, $7C, $F4
0000D515 FC08 007C F4               	dc.b $FC, $8, $0, $7C, $F4
0000D51A 040C 007C EC               	dc.b $4, $C, $0, $7C, $EC
0000D51F 0C08 007C EC               	dc.b $C, $8, $0, $7C, $EC
0000D524 05                         Map_c5df_23A: 	dc.b $5
0000D525 F805 0014 DC               	dc.b $F8, $5, $0, $14, $DC
0000D52A F801 0020 EC               	dc.b $F8, $1, $0, $20, $EC
0000D52F F805 002E F4               	dc.b $F8, $5, $0, $2E, $F4
0000D534 F805 0000 04               	dc.b $F8, $5, $0, $0, $4
0000D539 F805 0026 14               	dc.b $F8, $5, $0, $26, $14
0000D53E                            	even
0000D53E                            	even
0000D53E                            ; ---------------------------------------------------------------------------
0000D53E                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000D53E                            ; ---------------------------------------------------------------------------
0000D53E                            Map_obj39:
0000D53E                            	include "_maps\obj39.asm"
0000D53E                            ; ---------------------------------------------------------------------------
0000D53E                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000D53E                            ; ---------------------------------------------------------------------------
0000D53E 0000                       		dc.w byte_CBAC-Map_obj39
0000D540 0000                       		dc.w byte_CBB7-Map_obj39
0000D542 0000                       		dc.w byte_CBC2-Map_obj39
0000D544 0000                       		dc.w byte_CBCD-Map_obj39
0000D546 02                         byte_CBAC:	dc.b 2
0000D547 F80D 0000 B8               		dc.b $F8, $D, 0, 0, $B8
0000D54C F80D 0008 D8               		dc.b $F8, $D, 0, 8, $D8
0000D551 02                         byte_CBB7:	dc.b 2
0000D552 F80D 0014 08               		dc.b $F8, $D, 0, $14, 8
0000D557 F80D 000C 28               		dc.b $F8, $D, 0, $C, $28
0000D55C 02                         byte_CBC2:	dc.b 2
0000D55D F809 001C C4               		dc.b $F8, 9, 0,	$1C, $C4
0000D562 F80D 0008 DC               		dc.b $F8, $D, 0, 8, $DC
0000D567 02                         byte_CBCD:	dc.b 2
0000D568 F80D 0014 0C               		dc.b $F8, $D, 0, $14, $C
0000D56D F80D 000C 2C               		dc.b $F8, $D, 0, $C, $2C
0000D572                            		even
0000D572                            		even
0000D572                            
0000D572                            ; ---------------------------------------------------------------------------
0000D572                            ; Sprite mappings - "SONIC HAS PASSED" title card
0000D572                            ; ---------------------------------------------------------------------------
0000D572 0000                       Map_obj3A:	dc.w byte_CBEA-Map_obj3A
0000D574 0000                       		dc.w byte_CC13-Map_obj3A
0000D576 0000                       		dc.w byte_CC32-Map_obj3A
0000D578 0000                       		dc.w byte_CC51-Map_obj3A
0000D57A 0000                       		dc.w byte_CC75-Map_obj3A
0000D57C                            		;dc.w byte_CB47-Map_obj3A
0000D57C                            		;dc.w byte_CB26-Map_obj3A
0000D57C                            		;dc.w byte_CB31-Map_obj3A
0000D57C                            		;dc.w byte_CB3C-Map_obj3A
0000D57C 0F                         byte_CBEA:	dc.b $F	;  SONIC HAS | CADNIUM SULFIDE
0000D57D F805 0008 7C               		dc.b $F8, 5, 0, 8, $7C		; C
0000D582 F805 0000 8C               		dc.b $F8, 5, 0, 0, $8C		; A
0000D587 F805 000C 9C               		dc.b $F8, 5, 0, $0C, $9C	; D
0000D58C F805 002E AC               		dc.b $F8, 5, 0, $2E, $AC	; N
0000D591 F801 0020 BC               		dc.b $F8, 1, 0, $20, $BC	; I
0000D596 F805 0046 C4               		dc.b $F8, 5, 0, $46, $C4	; U
0000D59B F805 002A D4               		dc.b $F8, 5, 0, $2A, $D4	; M
0000D5A0 F800 0056 E4               		dc.b $F8, 0, 0, $56, $E4	; Space
0000D5A5 F805 003E F4               		dc.b $F8, 5, 0, $3E, $F4	; S
0000D5AA F805 0046 04               		dc.b $F8, 5, 0, $46, $4	; U
0000D5AF F805 0026 14               		dc.b $F8, 5, 0, $26, $14	; L
0000D5B4 F805 0014 24               		dc.b $F8, 5, 0, $14, $24	; F
0000D5B9 F801 0020 34               		dc.b $F8, 1, 0, $20, $34	; I
0000D5BE F805 000C 3C               		dc.b $F8, 5, 0, $0C, $3C	; D
0000D5C3 F805 0010 4C               		dc.b $F8, 5, 0, $10, $4C	; E
0000D5C8 06                         byte_CC13:	dc.b 6			; PASSED
0000D5C9 F805 0036 D0               		dc.b $F8, 5, 0,	$36, $D0
0000D5CE F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000D5D3 F805 003E F0               		dc.b $F8, 5, 0,	$3E, $F0
0000D5D8 F805 003E 00               		dc.b $F8, 5, 0,	$3E, 0
0000D5DD F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000D5E2 F805 000C 20               		dc.b $F8, 5, 0,	$C, $20
0000D5E7 06                         byte_CC32:	dc.b 6			; SCORE
0000D5E8 F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000D5ED F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000D5F2 F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000D5F7 F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000D5FC F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000D601 FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000D606 07                         byte_CC51:	dc.b 7			; TIME BONUS
0000D607 F80D 015A B0               		dc.b $F8, $D, 1, $5A, $B0
0000D60C F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D611 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D616 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D61B FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D620 F80D FFF0 28               		dc.b $F8, $D, $FF, $F0,	$28
0000D625 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D62A 07                         byte_CC75:	dc.b 7			; RING BONUS
0000D62B F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000D630 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D635 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D63A F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D63F FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D644 F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000D649 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D64E                            		even
0000D64E                            ; ---------------------------------------------------------------------------
0000D64E                            ; Sprite mappings - special stage results screen
0000D64E                            ; ---------------------------------------------------------------------------
0000D64E 0000                       Map_obj7E:	dc.w byte_CCAC-Map_obj7E
0000D650 0000                       		dc.w byte_CCEE-Map_obj7E
0000D652 0000                       		dc.w byte_CD0D-Map_obj7E
0000D654                            		;dc.w byte_CB47-Map_obj7E
0000D654 0000                       		dc.w byte_CD31-Map_obj7E
0000D656 0000                       		dc.w byte_CD46-Map_obj7E
0000D658 0000                       		dc.w byte_CD5B-Map_obj7E
0000D65A 0000                       		dc.w byte_CD6B-Map_obj7E
0000D65C 0000                       		dc.w byte_CDA8-Map_obj7E
0000D65E 0D                         byte_CCAC:	dc.b $D			; "CHAOS EMERALDS"
0000D65F F805 0008 90               		dc.b $F8, 5, 0,	8, $90
0000D664 F805 001C A0               		dc.b $F8, 5, 0,	$1C, $A0
0000D669 F805 0000 B0               		dc.b $F8, 5, 0,	0, $B0
0000D66E F805 0032 C0               		dc.b $F8, 5, 0,	$32, $C0
0000D673 F805 003E D0               		dc.b $F8, 5, 0,	$3E, $D0
0000D678 F805 0010 F0               		dc.b $F8, 5, 0,	$10, $F0
0000D67D F805 002A 00               		dc.b $F8, 5, 0,	$2A, 0
0000D682 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000D687 F805 003A 20               		dc.b $F8, 5, 0,	$3A, $20
0000D68C F805 0000 30               		dc.b $F8, 5, 0,	0, $30
0000D691 F805 0026 40               		dc.b $F8, 5, 0,	$26, $40
0000D696 F805 000C 50               		dc.b $F8, 5, 0,	$C, $50
0000D69B F805 003E 60               		dc.b $F8, 5, 0,	$3E, $60
0000D6A0 06                         byte_CCEE:	dc.b 6			; "SCORE"
0000D6A1 F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000D6A6 F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000D6AB F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000D6B0 F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000D6B5 F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000D6BA FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000D6BF 07                         byte_CD0D:	dc.b 7
0000D6C0 F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000D6C5 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D6CA F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D6CF F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D6D4 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D6D9 F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000D6DE F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D6E3 04                         byte_CD31:	dc.b 4
0000D6E4 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D6E9 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D6EE F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D6F3 F806 1FE3 40               		dc.b $F8, 6, $1F, $E3, $40
0000D6F8 04                         byte_CD46:	dc.b 4
0000D6F9 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D6FE F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D703 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D708 F806 1FE9 40               		dc.b $F8, 6, $1F, $E9, $40
0000D70D 03                         byte_CD5B:	dc.b 3
0000D70E F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D713 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D718 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D71D 0C                         byte_CD6B:	dc.b $C			; "SPECIAL STAGE"
0000D71E F805 003E 9C               		dc.b $F8, 5, 0,	$3E, $9C
0000D723 F805 0036 AC               		dc.b $F8, 5, 0,	$36, $AC
0000D728 F805 0010 BC               		dc.b $F8, 5, 0,	$10, $BC
0000D72D F805 0008 CC               		dc.b $F8, 5, 0,	8, $CC
0000D732 F801 0020 DC               		dc.b $F8, 1, 0,	$20, $DC
0000D737 F805 0000 E4               		dc.b $F8, 5, 0,	0, $E4
0000D73C F805 0026 F4               		dc.b $F8, 5, 0,	$26, $F4
0000D741 F805 003E 14               		dc.b $F8, 5, 0,	$3E, $14
0000D746 F805 0042 24               		dc.b $F8, 5, 0,	$42, $24
0000D74B F805 0000 34               		dc.b $F8, 5, 0,	0, $34
0000D750 F805 0018 44               		dc.b $F8, 5, 0,	$18, $44
0000D755 F805 0010 54               		dc.b $F8, 5, 0,	$10, $54
0000D75A 0F                         byte_CDA8:	dc.b $F			; "SONIC GOT THEM ALL"
0000D75B F805 003E 88               		dc.b $F8, 5, 0,	$3E, $88
0000D760 F805 0032 98               		dc.b $F8, 5, 0,	$32, $98
0000D765 F805 002E A8               		dc.b $F8, 5, 0,	$2E, $A8
0000D76A F801 0020 B8               		dc.b $F8, 1, 0,	$20, $B8
0000D76F F805 0008 C0               		dc.b $F8, 5, 0,	8, $C0
0000D774 F805 0018 D8               		dc.b $F8, 5, 0,	$18, $D8
0000D779 F805 0032 E8               		dc.b $F8, 5, 0,	$32, $E8
0000D77E F805 0042 F8               		dc.b $F8, 5, 0,	$42, $F8
0000D783 F805 0042 10               		dc.b $F8, 5, 0,	$42, $10
0000D788 F805 001C 20               		dc.b $F8, 5, 0,	$1C, $20
0000D78D F805 0010 30               		dc.b $F8, 5, 0,	$10, $30
0000D792 F805 002A 40               		dc.b $F8, 5, 0,	$2A, $40
0000D797 F805 0000 58               		dc.b $F8, 5, 0,	0, $58
0000D79C F805 0026 68               		dc.b $F8, 5, 0,	$26, $68
0000D7A1 F805 0026 78               		dc.b $F8, 5, 0,	$26, $78
0000D7A6                            		even
0000D7A6                            ; ---------------------------------------------------------------------------
0000D7A6                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000D7A6                            ; ---------------------------------------------------------------------------
0000D7A6                            Map_obj7F:
0000D7A6                            	include "_maps\obj7F.asm"
0000D7A6                            ; ---------------------------------------------------------------------------
0000D7A6                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000D7A6                            ; ---------------------------------------------------------------------------
0000D7A6 0000                       		dc.w byte_CE02-Map_obj7F
0000D7A8 0000                       		dc.w byte_CE08-Map_obj7F
0000D7AA 0000                       		dc.w byte_CE0E-Map_obj7F
0000D7AC 0000                       		dc.w byte_CE14-Map_obj7F
0000D7AE 0000                       		dc.w byte_CE1A-Map_obj7F
0000D7B0 0000                       		dc.w byte_CE20-Map_obj7F
0000D7B2 0000                       		dc.w byte_CE26-Map_obj7F
0000D7B4 01                         byte_CE02:	dc.b 1
0000D7B5 F805 2004 F8               		dc.b $F8, 5, $20, 4, $F8
0000D7BA 01                         byte_CE08:	dc.b 1
0000D7BB F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000D7C0 01                         byte_CE0E:	dc.b 1
0000D7C1 F805 4004 F8               		dc.b $F8, 5, $40, 4, $F8
0000D7C6 01                         byte_CE14:	dc.b 1
0000D7C7 F805 6004 F8               		dc.b $F8, 5, $60, 4, $F8
0000D7CC 01                         byte_CE1A:	dc.b 1
0000D7CD F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8
0000D7D2 01                         byte_CE20:	dc.b 1
0000D7D3 F805 200C F8               		dc.b $F8, 5, $20, $C, $F8
0000D7D8 00                         byte_CE26:	dc.b 0			; Blank frame
0000D7DA 00                         		even
0000D7DA 00                         		even
0000D7DA                            
0000D7DA                            ; ===========================================================================
0000D7DA                            ; ---------------------------------------------------------------------------
0000D7DA                            ; Object 36 - spikes
0000D7DA                            ; ---------------------------------------------------------------------------
0000D7DA                            
0000D7DA                            Obj36:					; XREF: Obj_Index
0000D7DA 7000                       		moveq	#0,d0
0000D7DC 1028 0024                  		move.b	$24(a0),d0
0000D7E0 323B 0000                  		move.w	Obj36_Index(pc,d0.w),d1
0000D7E4 4EFB 1000                  		jmp	Obj36_Index(pc,d1.w)
0000D7E8                            ; ===========================================================================
0000D7E8 0000                       Obj36_Index:	dc.w Obj36_Main-Obj36_Index
0000D7EA 0000                       		dc.w Obj36_Solid-Obj36_Index
0000D7EC                            
0000D7EC 0014                       Obj36_Var:	dc.b 0,	$14		; frame	number,	object width
0000D7EE 0110                       		dc.b 1,	$10
0000D7F0 0204                       		dc.b 2,	4
0000D7F2 031C                       		dc.b 3,	$1C
0000D7F4 0440                       		dc.b 4,	$40
0000D7F6 0510                       		dc.b 5,	$10
0000D7F8                            ; ===========================================================================
0000D7F8                            
0000D7F8                            Obj36_Main:				; XREF: Obj36_Index
0000D7F8 5428 0024                  		addq.b	#2,$24(a0)
0000D7FC 217C 0000 0000 0004        		move.l	#Map_obj36,4(a0)
0000D804 317C 051B 0002             		move.w	#$51B,2(a0)
0000D80A 0028 0004 0001             		ori.b	#4,1(a0)
0000D810 117C 0004 0018             		move.b	#4,$18(a0)
0000D816 1028 0028                  		move.b	$28(a0),d0
0000D81A 0228 000F 0028             		andi.b	#$F,$28(a0)
0000D820 0240 00F0                  		andi.w	#$F0,d0
0000D824 43F9 0000 D7EC             		lea	(Obj36_Var).l,a1
0000D82A E648                       		lsr.w	#3,d0
0000D82C D2C0                       		adda.w	d0,a1
0000D82E 1159 001A                  		move.b	(a1)+,$1A(a0)
0000D832 1159 0019                  		move.b	(a1)+,$19(a0)
0000D836 3168 0008 0030             		move.w	8(a0),$30(a0)
0000D83C 3168 000C 0032             		move.w	$C(a0),$32(a0)
0000D842                            
0000D842                            Obj36_Solid:				; XREF: Obj36_Index
0000D842 6100 0000                  		bsr.w	Obj36_Type0x	; make the object move
0000D846 343C 0004                  		move.w	#4,d2
0000D84A 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is object type $5x ?
0000D850 6700                       		beq.s	Obj36_SideWays	; if yes, branch
0000D852 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is object type $1x ?
0000D858 6600                       		bne.s	Obj36_Upright	; if not, branch
0000D85A 343C 0014                  		move.w	#$14,d2
0000D85E                            
0000D85E                            ; Spikes types $1x and $5x face	sideways
0000D85E                            
0000D85E                            Obj36_SideWays:				; XREF: Obj36_Solid
0000D85E 323C 001B                  		move.w	#$1B,d1
0000D862 3602                       		move.w	d2,d3
0000D864 5243                       		addq.w	#1,d3
0000D866 3828 0008                  		move.w	8(a0),d4
0000D86A 6100 0000                  		bsr.w	SolidObject
0000D86E 0828 0003 0022             		btst	#3,$22(a0)
0000D874 6600                       		bne.s	Obj36_Display
0000D876 0C44 0001                  		cmpi.w	#1,d4
0000D87A 6700                       		beq.s	Obj36_Hurt
0000D87C 6000                       		bra.s	Obj36_Display
0000D87E                            ; ===========================================================================
0000D87E                            
0000D87E                            ; Spikes types $0x, $2x, $3x and $4x face up or	down
0000D87E                            
0000D87E                            Obj36_Upright:				; XREF: Obj36_Solid
0000D87E 7200                       		moveq	#0,d1
0000D880 1228 0019                  		move.b	$19(a0),d1
0000D884 0641 000B                  		addi.w	#$B,d1
0000D888 343C 0010                  		move.w	#$10,d2
0000D88C 363C 0011                  		move.w	#$11,d3
0000D890 3828 0008                  		move.w	8(a0),d4
0000D894 6100 0000                  		bsr.w	SolidObject
0000D898 0828 0003 0022             		btst	#3,$22(a0)
0000D89E 6600                       		bne.s	Obj36_Hurt
0000D8A0 4A44                       		tst.w	d4
0000D8A2 6A00                       		bpl.s	Obj36_Display
0000D8A4                            
0000D8A4                            Obj36_Hurt:				; XREF: Obj36_SideWays; Obj36_Upright
0000D8A4 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0000D8A8 6600                       		bne.s	Obj36_Display	; if yes, branch
0000D8AA 2F08                       		move.l	a0,-(sp)
0000D8AC 2448                       		movea.l	a0,a2
0000D8AE 41F8 D000                  		lea	($FFFFD000).w,a0
0000D8B2 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000D8B8 6400                       		bcc.s	loc_CF20
0000D8BA 2628 000C                  		move.l	$C(a0),d3
0000D8BE 3028 0012                  		move.w	$12(a0),d0
0000D8C2 48C0                       		ext.l	d0
0000D8C4 E180                       		asl.l	#8,d0
0000D8C6 9680                       		sub.l	d0,d3
0000D8C8 2143 000C                  		move.l	d3,$C(a0)
0000D8CC 4EB9 0000 0000             		jsr	HurtSonic
0000D8D2                            
0000D8D2                            loc_CF20:
0000D8D2 205F                       		movea.l	(sp)+,a0
0000D8D4                            
0000D8D4                            Obj36_Display:
0000D8D4 6100 0000                  		bsr.w	DisplaySprite
0000D8D8 3028 0030                  		move.w	$30(a0),d0
0000D8DC 0240 FF80                  		andi.w	#$FF80,d0
0000D8E0 3238 F700                  		move.w	($FFFFF700).w,d1
0000D8E4 0441 0080                  		subi.w	#$80,d1
0000D8E8 0241 FF80                  		andi.w	#$FF80,d1
0000D8EC 9041                       		sub.w	d1,d0
0000D8EE 0C40 0280                  		cmpi.w	#$280,d0
0000D8F2 6200 0000                  		bhi.w	DeleteObject
0000D8F6 4E75                       		rts	
0000D8F8                            ; ===========================================================================
0000D8F8                            
0000D8F8                            Obj36_Type0x:				; XREF: Obj36_Solid
0000D8F8 7000                       		moveq	#0,d0
0000D8FA 1028 0028                  		move.b	$28(a0),d0
0000D8FE D040                       		add.w	d0,d0
0000D900 323B 0000                  		move.w	Obj36_TypeIndex(pc,d0.w),d1
0000D904 4EFB 1000                  		jmp	Obj36_TypeIndex(pc,d1.w)
0000D908                            ; ===========================================================================
0000D908 0000                       Obj36_TypeIndex:dc.w Obj36_Type00-Obj36_TypeIndex
0000D90A 0000                       		dc.w Obj36_Type01-Obj36_TypeIndex
0000D90C 0000                       		dc.w Obj36_Type02-Obj36_TypeIndex
0000D90E                            ; ===========================================================================
0000D90E                            
0000D90E                            Obj36_Type00:				; XREF: Obj36_TypeIndex
0000D90E 4E75                       		rts			; don't move the object
0000D910                            ; ===========================================================================
0000D910                            
0000D910                            Obj36_Type01:				; XREF: Obj36_TypeIndex
0000D910 6100 0000                  		bsr.w	Obj36_Wait
0000D914 7000                       		moveq	#0,d0
0000D916 1028 0034                  		move.b	$34(a0),d0
0000D91A D068 0032                  		add.w	$32(a0),d0
0000D91E 3140 000C                  		move.w	d0,$C(a0)	; move the object vertically
0000D922 4E75                       		rts	
0000D924                            ; ===========================================================================
0000D924                            
0000D924                            Obj36_Type02:				; XREF: Obj36_TypeIndex
0000D924 6100 0000                  		bsr.w	Obj36_Wait
0000D928 7000                       		moveq	#0,d0
0000D92A 1028 0034                  		move.b	$34(a0),d0
0000D92E D068 0030                  		add.w	$30(a0),d0
0000D932 3140 0008                  		move.w	d0,8(a0)	; move the object horizontally
0000D936 4E75                       		rts	
0000D938                            ; ===========================================================================
0000D938                            
0000D938                            Obj36_Wait:
0000D938 4A68 0038                  		tst.w	$38(a0)		; is time delay	= zero?
0000D93C 6700                       		beq.s	loc_CFA4	; if yes, branch
0000D93E 5368 0038                  		subq.w	#1,$38(a0)	; subtract 1 from time delay
0000D942 6600                       		bne.s	locret_CFE6
0000D944 4A28 0001                  		tst.b	1(a0)
0000D948 6A00                       		bpl.s	locret_CFE6
0000D94A 303C 00B6                  		move.w	#$B6,d0
0000D94E 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play "spikes moving" sound
0000D954 6000                       		bra.s	locret_CFE6
0000D956                            ; ===========================================================================
0000D956                            
0000D956                            loc_CFA4:
0000D956 4A68 0036                  		tst.w	$36(a0)
0000D95A 6700                       		beq.s	loc_CFC6
0000D95C 0468 0800 0034             		subi.w	#$800,$34(a0)
0000D962 6400                       		bcc.s	locret_CFE6
0000D964 317C 0000 0034             		move.w	#0,$34(a0)
0000D96A 317C 0000 0036             		move.w	#0,$36(a0)
0000D970 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000D976 6000                       		bra.s	locret_CFE6
0000D978                            ; ===========================================================================
0000D978                            
0000D978                            loc_CFC6:
0000D978 0668 0800 0034             		addi.w	#$800,$34(a0)
0000D97E 0C68 2000 0034             		cmpi.w	#$2000,$34(a0)
0000D984 6500                       		bcs.s	locret_CFE6
0000D986 317C 2000 0034             		move.w	#$2000,$34(a0)
0000D98C 317C 0001 0036             		move.w	#1,$36(a0)
0000D992 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000D998                            
0000D998                            locret_CFE6:
0000D998 4E75                       		rts	
0000D99A                            ; ===========================================================================
0000D99A                            ; ---------------------------------------------------------------------------
0000D99A                            ; Sprite mappings - spikes
0000D99A                            ; ---------------------------------------------------------------------------
0000D99A                            Map_obj36:
0000D99A                            	include "_maps\obj36.asm"
0000D99A                            Map_obj36_inner:
0000D99A 0000                       Map_obj36_inner_0: 	dc.w Map_obj36_inner_C-Map_obj36_inner
0000D99C 0000                       Map_obj36_inner_2: 	dc.w Map_obj36_inner_1C-Map_obj36_inner
0000D99E 0000                       Map_obj36_inner_4: 	dc.w Map_obj36_inner_2C-Map_obj36_inner
0000D9A0 0000                       Map_obj36_inner_6: 	dc.w Map_obj36_inner_32-Map_obj36_inner
0000D9A2 0000                       Map_obj36_inner_8: 	dc.w Map_obj36_inner_42-Map_obj36_inner
0000D9A4 0000                       Map_obj36_inner_A: 	dc.w Map_obj36_inner_61-Map_obj36_inner
0000D9A6 03                         Map_obj36_inner_C: 	dc.b $3
0000D9A7 F003 0004 EC               	dc.b $F0, $3, $0, $4, $EC
0000D9AC F003 0004 FC               	dc.b $F0, $3, $0, $4, $FC
0000D9B1 F003 0004 0C               	dc.b $F0, $3, $0, $4, $C
0000D9B6 03                         Map_obj36_inner_1C: 	dc.b $3
0000D9B7 EC0C 0000 F0               	dc.b $EC, $C, $0, $0, $F0
0000D9BC FC0C 0000 F0               	dc.b $FC, $C, $0, $0, $F0
0000D9C1 0C0C 0000 F0               	dc.b $C, $C, $0, $0, $F0
0000D9C6 01                         Map_obj36_inner_2C: 	dc.b $1
0000D9C7 F003 0004 FC               	dc.b $F0, $3, $0, $4, $FC
0000D9CC 03                         Map_obj36_inner_32: 	dc.b $3
0000D9CD F003 0004 E4               	dc.b $F0, $3, $0, $4, $E4
0000D9D2 F003 0004 FC               	dc.b $F0, $3, $0, $4, $FC
0000D9D7 F003 0004 14               	dc.b $F0, $3, $0, $4, $14
0000D9DC 06                         Map_obj36_inner_42: 	dc.b $6
0000D9DD F003 0004 C0               	dc.b $F0, $3, $0, $4, $C0
0000D9E2 F003 0004 D8               	dc.b $F0, $3, $0, $4, $D8
0000D9E7 F003 0004 F0               	dc.b $F0, $3, $0, $4, $F0
0000D9EC F003 0004 08               	dc.b $F0, $3, $0, $4, $8
0000D9F1 F003 0004 20               	dc.b $F0, $3, $0, $4, $20
0000D9F6 F003 0004 38               	dc.b $F0, $3, $0, $4, $38
0000D9FB 01                         Map_obj36_inner_61: 	dc.b $1
0000D9FC FC0C 0000 F0               	dc.b $FC, $C, $0, $0, $F0
0000DA02 00                         	even
0000DA02 00                         	even
0000DA02                            
0000DA02                            ; ===========================================================================
0000DA02                            ; ---------------------------------------------------------------------------
0000DA02                            ; Object 3B - purple rock (GHZ)
0000DA02                            ; ---------------------------------------------------------------------------
0000DA02                            
0000DA02                            Obj3B:					; XREF: Obj_Index
0000DA02 7000                       		moveq	#0,d0
0000DA04 1028 0024                  		move.b	$24(a0),d0
0000DA08 323B 0000                  		move.w	Obj3B_Index(pc,d0.w),d1
0000DA0C 4EFB 1000                  		jmp	Obj3B_Index(pc,d1.w)
0000DA10                            ; ===========================================================================
0000DA10 0000                       Obj3B_Index:	dc.w Obj3B_Main-Obj3B_Index
0000DA12 0000                       		dc.w Obj3B_Solid-Obj3B_Index
0000DA14                            ; ===========================================================================
0000DA14                            
0000DA14                            Obj3B_Main:				; XREF: Obj3B_Index
0000DA14 5428 0024                  		addq.b	#2,$24(a0)
0000DA18 217C 0000 0000 0004        		move.l	#Map_obj3B,4(a0)
0000DA20 317C 63D0 0002             		move.w	#$63D0,2(a0)
0000DA26 117C 0004 0001             		move.b	#4,1(a0)
0000DA2C 117C 0013 0019             		move.b	#$13,$19(a0)
0000DA32 117C 0004 0018             		move.b	#4,$18(a0)
0000DA38                            
0000DA38                            Obj3B_Solid:				; XREF: Obj3B_Index
0000DA38 323C 001B                  		move.w	#$1B,d1
0000DA3C 343C 0010                  		move.w	#$10,d2
0000DA40 363C 0010                  		move.w	#$10,d3
0000DA44 3828 0008                  		move.w	8(a0),d4
0000DA48 6100 0000                  		bsr.w	SolidObject
0000DA4C 6100 0000                  		bsr.w	DisplaySprite
0000DA50 3028 0008                  		move.w	8(a0),d0
0000DA54 0240 FF80                  		andi.w	#$FF80,d0
0000DA58 3238 F700                  		move.w	($FFFFF700).w,d1
0000DA5C 0441 0080                  		subi.w	#$80,d1
0000DA60 0241 FF80                  		andi.w	#$FF80,d1
0000DA64 9041                       		sub.w	d1,d0
0000DA66 0C40 0280                  		cmpi.w	#$280,d0
0000DA6A 6200 0000                  		bhi.w	DeleteObject
0000DA6E 4E75                       		rts	
0000DA70                            ; ===========================================================================
0000DA70                            ; ---------------------------------------------------------------------------
0000DA70                            ; Object 49 - waterfall	sound effect (GHZ)
0000DA70                            ; ---------------------------------------------------------------------------
0000DA70                            
0000DA70                            Obj49:					; XREF: Obj_Index
0000DA70 7000                       		moveq	#0,d0
0000DA72 1028 0024                  		move.b	$24(a0),d0
0000DA76 323B 0000                  		move.w	Obj49_Index(pc,d0.w),d1
0000DA7A 4EFB 1000                  		jmp	Obj49_Index(pc,d1.w)
0000DA7E                            ; ===========================================================================
0000DA7E 0000                       Obj49_Index:	dc.w Obj49_Main-Obj49_Index
0000DA80 0000                       		dc.w Obj49_PlaySnd-Obj49_Index
0000DA82                            ; ===========================================================================
0000DA82                            
0000DA82                            Obj49_Main:				; XREF: Obj49_Index
0000DA82 5428 0024                  		addq.b	#2,$24(a0)
0000DA86 117C 0004 0001             		move.b	#4,1(a0)
0000DA8C                            
0000DA8C                            Obj49_PlaySnd:				; XREF: Obj49_Index
0000DA8C 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000DA90 0200 003F                  		andi.b	#$3F,d0
0000DA94 6600                       		bne.s	Obj49_ChkDel
0000DA96 303C 00D0                  		move.w	#$D0,d0
0000DA9A 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play waterfall sound
0000DAA0                            
0000DAA0                            Obj49_ChkDel:
0000DAA0 3028 0008                  		move.w	8(a0),d0
0000DAA4 0240 FF80                  		andi.w	#$FF80,d0
0000DAA8 3238 F700                  		move.w	($FFFFF700).w,d1
0000DAAC 0441 0080                  		subi.w	#$80,d1
0000DAB0 0241 FF80                  		andi.w	#$FF80,d1
0000DAB4 9041                       		sub.w	d1,d0
0000DAB6 0C40 0280                  		cmpi.w	#$280,d0
0000DABA 6200 0000                  		bhi.w	DeleteObject
0000DABE 4E75                       		rts	
0000DAC0                            ; ===========================================================================
0000DAC0                            ; ---------------------------------------------------------------------------
0000DAC0                            ; Sprite mappings - purple rock	(GHZ)
0000DAC0                            ; ---------------------------------------------------------------------------
0000DAC0                            Map_obj3B:
0000DAC0                            	include "_maps\obj3B.asm"
0000DAC0                            ; ---------------------------------------------------------------------------
0000DAC0                            ; Sprite mappings - purple rock	(GHZ)
0000DAC0                            ; ---------------------------------------------------------------------------
0000DAC0 0000                       		dc.w byte_D110-Map_obj3B
0000DAC2 02                         byte_D110:	dc.b 2
0000DAC3 F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000DAC8 F00B 000C 00               		dc.b $F0, $B, 0, $C, 0
0000DACE 00                         		even
0000DACE 00                         		even
0000DACE                            
0000DACE                            ; ===========================================================================
0000DACE                            ; ---------------------------------------------------------------------------
0000DACE                            ; Object 3C - smashable	wall (GHZ, SLZ)
0000DACE                            ; ---------------------------------------------------------------------------
0000DACE                            
0000DACE                            Obj3C:					; XREF: Obj_Index
0000DACE 7000                       		moveq	#0,d0
0000DAD0 1028 0024                  		move.b	$24(a0),d0
0000DAD4 323B 0000                  		move.w	Obj3C_Index(pc,d0.w),d1
0000DAD8 4EBB 1000                  		jsr	Obj3C_Index(pc,d1.w)
0000DADC 6000 0000                  		bra.w	MarkObjGone
0000DAE0                            ; ===========================================================================
0000DAE0 0000                       Obj3C_Index:	dc.w Obj3C_Main-Obj3C_Index
0000DAE2 0000                       		dc.w Obj3C_Solid-Obj3C_Index
0000DAE4 0000                       		dc.w Obj3C_FragMove-Obj3C_Index
0000DAE6                            ; ===========================================================================
0000DAE6                            
0000DAE6                            Obj3C_Main:				; XREF: Obj3C_Index
0000DAE6 5428 0024                  		addq.b	#2,$24(a0)
0000DAEA 217C 0000 0000 0004        		move.l	#Map_obj3C,4(a0)
0000DAF2 317C 450F 0002             		move.w	#$450F,2(a0)
0000DAF8 117C 0004 0001             		move.b	#4,1(a0)
0000DAFE 117C 0010 0019             		move.b	#$10,$19(a0)
0000DB04 117C 0004 0018             		move.b	#4,$18(a0)
0000DB0A 1168 0028 001A             		move.b	$28(a0),$1A(a0)
0000DB10                            
0000DB10                            Obj3C_Solid:				; XREF: Obj3C_Index
0000DB10 3178 D010 0030             		move.w	($FFFFD010).w,$30(a0) ;	load Sonic's horizontal speed
0000DB16 323C 001B                  		move.w	#$1B,d1
0000DB1A 343C 0020                  		move.w	#$20,d2
0000DB1E 363C 0020                  		move.w	#$20,d3
0000DB22 3828 0008                  		move.w	8(a0),d4
0000DB26 6100 0000                  		bsr.w	SolidObject
0000DB2A 0828 0005 0022             		btst	#5,$22(a0)
0000DB30 6600                       		bne.s	Obj3C_ChkRoll
0000DB32                            
0000DB32                            locret_D180:
0000DB32 4E75                       		rts	
0000DB34                            ; ===========================================================================
0000DB34                            
0000DB34                            Obj3C_ChkRoll:				; XREF: Obj3C_Solid
0000DB34 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000DB3A 66F6                       		bne.s	locret_D180	; if not, branch
0000DB3C 3028 0030                  		move.w	$30(a0),d0
0000DB40 6A00                       		bpl.s	Obj3C_ChkSpeed
0000DB42 4440                       		neg.w	d0
0000DB44                            
0000DB44                            Obj3C_ChkSpeed:
0000DB44 0C40 0480                  		cmpi.w	#$480,d0	; is Sonic's speed $480 or higher?
0000DB48 65E8                       		bcs.s	locret_D180	; if not, branch
0000DB4A 3368 0030 0010             		move.w	$30(a0),$10(a1)
0000DB50 5869 0008                  		addq.w	#4,8(a1)
0000DB54 49F9 0000 0000             		lea	(Obj3C_FragSpd1).l,a4 ;	use fragments that move	right
0000DB5A 3028 0008                  		move.w	8(a0),d0
0000DB5E B069 0008                  		cmp.w	8(a1),d0	; is Sonic to the right	of the block?
0000DB62 6500                       		bcs.s	Obj3C_Smash	; if yes, branch
0000DB64 5169 0008                  		subq.w	#8,8(a1)
0000DB68 49F9 0000 0000             		lea	(Obj3C_FragSpd2).l,a4 ;	use fragments that move	left
0000DB6E                            
0000DB6E                            Obj3C_Smash:
0000DB6E 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000DB74 08A8 0005 0022             		bclr	#5,$22(a0)
0000DB7A 08A9 0005 0022             		bclr	#5,$22(a1)
0000DB80 7207                       		moveq	#7,d1		; load 8 fragments
0000DB82 343C 0070                  		move.w	#$70,d2
0000DB86 6100                       		bsr.s	SmashObject
0000DB88                            
0000DB88                            Obj3C_FragMove:				; XREF: Obj3C_Index
0000DB88 6100 0000                  		bsr.w	SpeedToPos
0000DB8C 0668 0070 0012             		addi.w	#$70,$12(a0)	; make fragment	fall faster
0000DB92 6100 0000                  		bsr.w	DisplaySprite
0000DB96 4A28 0001                  		tst.b	1(a0)
0000DB9A 6A00 0000                  		bpl.w	DeleteObject
0000DB9E 4E75                       		rts	
0000DBA0                            
0000DBA0                            ; ---------------------------------------------------------------------------
0000DBA0                            ; Subroutine to	smash a	block (GHZ walls and MZ	blocks)
0000DBA0                            ; ---------------------------------------------------------------------------
0000DBA0                            
0000DBA0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DBA0                            
0000DBA0                            
0000DBA0                            SmashObject:				; XREF: Obj3C_Smash
0000DBA0 7000                       		moveq	#0,d0
0000DBA2 1028 001A                  		move.b	$1A(a0),d0
0000DBA6 D040                       		add.w	d0,d0
0000DBA8 2668 0004                  		movea.l	4(a0),a3
0000DBAC D6F3 0000                  		adda.w	(a3,d0.w),a3
0000DBB0 524B                       		addq.w	#1,a3
0000DBB2 08E8 0005 0001             		bset	#5,1(a0)
0000DBB8 1810                       		move.b	0(a0),d4
0000DBBA 1A28 0001                  		move.b	1(a0),d5
0000DBBE 2248                       		movea.l	a0,a1
0000DBC0 6000                       		bra.s	Smash_LoadFrag
0000DBC2                            ; ===========================================================================
0000DBC2                            
0000DBC2                            Smash_Loop:
0000DBC2 6100 0000                  		bsr.w	SingleObjLoad
0000DBC6 6600                       		bne.s	Smash_PlaySnd
0000DBC8 5A4B                       		addq.w	#5,a3
0000DBCA                            
0000DBCA                            Smash_LoadFrag:				; XREF: SmashObject
0000DBCA 137C 0004 0024             		move.b	#4,$24(a1)
0000DBD0 1284                       		move.b	d4,0(a1)
0000DBD2 234B 0004                  		move.l	a3,4(a1)
0000DBD6 1345 0001                  		move.b	d5,1(a1)
0000DBDA 3368 0008 0008             		move.w	8(a0),8(a1)
0000DBE0 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000DBE6 3368 0002 0002             		move.w	2(a0),2(a1)
0000DBEC 1368 0018 0018             		move.b	$18(a0),$18(a1)
0000DBF2 1368 0019 0019             		move.b	$19(a0),$19(a1)
0000DBF8 335C 0010                  		move.w	(a4)+,$10(a1)
0000DBFC 335C 0012                  		move.w	(a4)+,$12(a1)
0000DC00 B3C8                       		cmpa.l	a0,a1
0000DC02 6400                       		bcc.s	loc_D268
0000DC04 2F08                       		move.l	a0,-(sp)
0000DC06 2049                       		movea.l	a1,a0
0000DC08 6100 0000                  		bsr.w	SpeedToPos
0000DC0C D568 0012                  		add.w	d2,$12(a0)
0000DC10 205F                       		movea.l	(sp)+,a0
0000DC12 6100 0000                  		bsr.w	DisplaySprite2
0000DC16                            
0000DC16                            loc_D268:
0000DC16 51C9 FFAA                  		dbf	d1,Smash_Loop
0000DC1A                            
0000DC1A                            Smash_PlaySnd:
0000DC1A 303C 00CB                  		move.w	#$CB,d0
0000DC1E 4EF9 0000 15D2             		jmp	(PlaySound_Special).l ;	play smashing sound
0000DC24                            ; End of function SmashObject
0000DC24                            
0000DC24                            ; ===========================================================================
0000DC24                            ; Smashed block	fragment speeds
0000DC24                            ;
0000DC24 0400 FB00                  Obj3C_FragSpd1:	dc.w $400, $FB00	; x-move speed,	y-move speed
0000DC28 0600 FF00                  		dc.w $600, $FF00
0000DC2C 0600 0100                  		dc.w $600, $100
0000DC30 0400 0500                  		dc.w $400, $500
0000DC34 0600 FA00                  		dc.w $600, $FA00
0000DC38 0800 FE00                  		dc.w $800, $FE00
0000DC3C 0800 0200                  		dc.w $800, $200
0000DC40 0600 0600                  		dc.w $600, $600
0000DC44                            
0000DC44 FA00 FA00                  Obj3C_FragSpd2:	dc.w $FA00, $FA00
0000DC48 F800 FE00                  		dc.w $F800, $FE00
0000DC4C F800 0200                  		dc.w $F800, $200
0000DC50 FA00 0600                  		dc.w $FA00, $600
0000DC54 FC00 FB00                  		dc.w $FC00, $FB00
0000DC58 FA00 FF00                  		dc.w $FA00, $FF00
0000DC5C FA00 0100                  		dc.w $FA00, $100
0000DC60 FC00 0500                  		dc.w $FC00, $500
0000DC64                            ; ---------------------------------------------------------------------------
0000DC64                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000DC64                            ; ---------------------------------------------------------------------------
0000DC64                            Map_obj3C:
0000DC64                            	include "_maps\obj3C.asm"
0000DC64                            ; ---------------------------------------------------------------------------
0000DC64                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000DC64                            ; ---------------------------------------------------------------------------
0000DC64 0000                       		dc.w byte_D2BC-Map_obj3C
0000DC66 0000                       		dc.w byte_D2E5-Map_obj3C
0000DC68 0000                       		dc.w byte_D30E-Map_obj3C
0000DC6A 08                         byte_D2BC:	dc.b 8
0000DC6B E005 0000 F0               		dc.b $E0, 5, 0,	0, $F0
0000DC70 F005 0000 F0               		dc.b $F0, 5, 0,	0, $F0
0000DC75 0005 0000 F0               		dc.b 0,	5, 0, 0, $F0
0000DC7A 1005 0000 F0               		dc.b $10, 5, 0,	0, $F0
0000DC7F E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000DC84 F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000DC89 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000DC8E 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000DC93 08                         byte_D2E5:	dc.b 8
0000DC94 E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000DC99 F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000DC9E 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000DCA3 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000DCA8 E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000DCAD F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000DCB2 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000DCB7 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000DCBC 08                         byte_D30E:	dc.b 8
0000DCBD E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000DCC2 F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000DCC7 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000DCCC 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000DCD1 E005 0008 00               		dc.b $E0, 5, 0,	8, 0
0000DCD6 F005 0008 00               		dc.b $F0, 5, 0,	8, 0
0000DCDB 0005 0008 00               		dc.b 0,	5, 0, 8, 0
0000DCE0 1005 0008 00               		dc.b $10, 5, 0,	8, 0
0000DCE6 00                         		even
0000DCE6 00                         		even
0000DCE6                            
0000DCE6                            ; ---------------------------------------------------------------------------
0000DCE6                            ; Object code loading subroutine
0000DCE6                            ; ---------------------------------------------------------------------------
0000DCE6                            
0000DCE6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DCE6                            
0000DCE6                            
0000DCE6                            ObjectsLoad:				; XREF: TitleScreen; et al
0000DCE6 41F8 D000                  		lea	($FFFFD000).w,a0 ; set address for object RAM
0000DCEA 7E7F                       		moveq	#$7F,d7
0000DCEC 7000                       		moveq	#0,d0
0000DCEE 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000DCF4 6400                       		bcc.s	loc_D362
0000DCF6                            
0000DCF6                            loc_D348:
0000DCF6 1010                       		move.b	(a0),d0		; load object number from RAM
0000DCF8 6700                       		beq.s	loc_D358
0000DCFA D040                       		add.w	d0,d0
0000DCFC D040                       		add.w	d0,d0
0000DCFE 227B 0000                  		movea.l	Obj_Index-4(pc,d0.w),a1
0000DD02 4E91                       		jsr	(a1)		; run the object's code
0000DD04 7000                       		moveq	#0,d0
0000DD06                            
0000DD06                            loc_D358:
0000DD06 41E8 0040                  		lea	$40(a0),a0	; next object
0000DD0A 51CF FFEA                  		dbf	d7,loc_D348
0000DD0E 4E75                       		rts	
0000DD10                            ; ===========================================================================
0000DD10                            
0000DD10                            loc_D362:
0000DD10 7E1F                       		moveq	#$1F,d7
0000DD12 61E2                       		bsr.s	loc_D348
0000DD14 7E5F                       		moveq	#$5F,d7
0000DD16                            
0000DD16                            loc_D368:
0000DD16 7000                       		moveq	#0,d0
0000DD18 1010                       		move.b	(a0),d0
0000DD1A 6700                       		beq.s	loc_D378
0000DD1C 4A28 0001                  		tst.b	1(a0)
0000DD20 6A00                       		bpl.s	loc_D378
0000DD22 6100 0000                  		bsr.w	DisplaySprite
0000DD26                            
0000DD26                            loc_D378:
0000DD26 41E8 0040                  		lea	$40(a0),a0
0000DD2A                            
0000DD2A                            loc_D37C:
0000DD2A 51CF FFEA                  		dbf	d7,loc_D368
0000DD2E 4E75                       		rts	
0000DD30                            ; End of function ObjectsLoad
0000DD30                            
0000DD30                            ; ===========================================================================
0000DD30                            ; ---------------------------------------------------------------------------
0000DD30                            ; Object pointers
0000DD30                            ; ---------------------------------------------------------------------------
0000DD30                            Obj_Index:
0000DD30                            	include "_inc\Object pointers.asm"
0000DD30                            ; ---------------------------------------------------------------------------
0000DD30                            ; Object pointers
0000DD30                            ; ---------------------------------------------------------------------------
0000DD30 0000 0000 0000 0000 0000+  	dc.l Obj01, ObjectFall,	ObjectFall, ObjectFall
0000DD40 0000 0000 0000 0000 0000+  	dc.l ObjectFall, ObjectFall, ObjectFall, Obj08
0000DD50 0000 0000 0000 0000 0000+  	dc.l Obj09, Obj0A, Obj0B, Obj0C
0000DD60 0000 0000 0000 AF5A 0000+  	dc.l Obj0D, Obj0E, Obj0F, Obj10
0000DD70 0000 7AF2 0000 0000 0000+  	dc.l Obj11, Obj12, Obj13, Obj14
0000DD80 0000 8118 0000 0000 0000+  	dc.l Obj15, Obj16, Obj17, Obj18
0000DD90 0000 8966 0000 8A60 0000+  	dc.l Obj19, Obj1A, Obj1B, Obj1C
0000DDA0 0000 90AA 0000 9398 0000+  	dc.l Obj1D, Obj1E, Obj1F, Obj20
0000DDB0 0000 0000 0000 A056 0000+  	dc.l Obj21, Obj22, Obj23, Obj24
0000DDC0 0000 A38E 0000 A97A 0000+  	dc.l Obj25, Obj26, Obj27, Obj28
0000DDD0 0000 9CB2 0000 9180 0000+  	dc.l Obj29, Obj2A, Obj2B, Obj2C
0000DDE0 0000 B552 0000 AB6E 0000+  	dc.l Obj2D, Obj2E, Obj2F, Obj30
0000DDF0 0000 BF66 0000 C614 0000+  	dc.l Obj31, Obj32, Obj33, Obj34
0000DE00 0000 BAC4 0000 D7DA 0000+  	dc.l Obj35, Obj36, Obj37, Obj38
0000DE10 0000 CDBA 0000 CE74 0000+  	dc.l Obj39, Obj3A, Obj3B, Obj3C
0000DE20 0000 0000 0000 0000 0000+  	dc.l Obj3D, Obj3E, Obj3F, Obj40
0000DE30 0000 0000 0000 0000 0000+  	dc.l Obj41, Obj42, Obj43, Obj44
0000DE40 0000 C282 0000 0000 0000+  	dc.l Obj45, Obj46, Obj47, Obj48
0000DE50 0000 DA70 0000 0000 0000+  	dc.l Obj49, Obj4A, Obj4B, Obj4C
0000DE60 0000 0000 0000 0000 0000+  	dc.l Obj4D, Obj4E, Obj4F, Obj50
0000DE70 0000 0000 0000 0000 0000+  	dc.l Obj51, Obj52, Obj53, Obj54
0000DE80 0000 0000 0000 0000 0000+  	dc.l Obj55, Obj56, Obj57, Obj58
0000DE90 0000 0000 0000 0000 0000+  	dc.l Obj59, Obj5A, Obj5B, Obj5C
0000DEA0 0000 0000 0000 0000 0000+  	dc.l Obj5D, Obj5E, Obj5F, Obj60
0000DEB0 0000 0000 0000 0000 0000+  	dc.l Obj61, Obj62, Obj63, Obj64
0000DEC0 0000 0000 0000 0000 0000+  	dc.l Obj65, Obj66, Obj67, Obj68
0000DED0 0000 0000 0000 0000 0000+  	dc.l Obj69, Obj6A, Obj6B, Obj6C
0000DEE0 0000 0000 0000 0000 0000+  	dc.l Obj6D, Obj6E, Obj6F, Obj70
0000DEF0 0000 0000 0000 0000 0000+  	dc.l Obj71, Obj72, Obj73, Obj74
0000DF00 0000 0000 0000 0000 0000+  	dc.l Obj75, Obj76, Obj77, Obj78
0000DF10 0000 0000 0000 0000 0000+  	dc.l Obj79, Obj7A, Obj7B, Obj7C
0000DF20 0000 0000 0000 D0B6 0000+  	dc.l Obj7D, Obj7E, Obj7F, Obj80
0000DF30 0000 559E 0000 0000 0000+  	dc.l Obj81, Obj82, Obj83, Obj84
0000DF40 0000 0000 0000 0000 0000+  	dc.l Obj85, Obj86, Obj87, Obj88
0000DF50 0000 5C58 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000DF50 0000 5C58 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000DF60                            
0000DF60                            ; ---------------------------------------------------------------------------
0000DF60                            ; Subroutine to	make an	object fall downwards, increasingly fast
0000DF60                            ; ---------------------------------------------------------------------------
0000DF60                            
0000DF60                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DF60                            
0000DF60                            
0000DF60                            ObjectFall:
0000DF60 2428 0008                  		move.l	8(a0),d2
0000DF64 2628 000C                  		move.l	$C(a0),d3
0000DF68 3028 0010                  		move.w	$10(a0),d0
0000DF6C 48C0                       		ext.l	d0
0000DF6E E180                       		asl.l	#8,d0
0000DF70 D480                       		add.l	d0,d2
0000DF72 3028 0012                  		move.w	$12(a0),d0
0000DF76 0668 0038 0012             		addi.w	#$38,$12(a0)	; increase vertical speed
0000DF7C 48C0                       		ext.l	d0
0000DF7E E180                       		asl.l	#8,d0
0000DF80 D680                       		add.l	d0,d3
0000DF82 2142 0008                  		move.l	d2,8(a0)
0000DF86 2143 000C                  		move.l	d3,$C(a0)
0000DF8A 4E75                       		rts	
0000DF8C                            ; End of function ObjectFall
0000DF8C                            
0000DF8C                            ; ---------------------------------------------------------------------------
0000DF8C                            ; Subroutine to	make an	object fall downwards, increasingly fast
0000DF8C                            ; ---------------------------------------------------------------------------
0000DF8C                            
0000DF8C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DF8C                            
0000DF8C                            
0000DF8C                            ObjectFallNoJump:
0000DF8C 2428 0008                  		move.l	8(a0),d2
0000DF90 2628 000C                  		move.l	$C(a0),d3
0000DF94 3028 0010                  		move.w	$10(a0),d0
0000DF98 48C0                       		ext.l	d0
0000DF9A E180                       		asl.l	#8,d0
0000DF9C D480                       		add.l	d0,d2
0000DF9E                            ;		cmpi.b	#1,obID(a0)
0000DF9E                            ;		beq.s	ObjectFallSonic
0000DF9E 3028 000C                  		move.w	$C(a0),d0
0000DFA2 5868 000C                  		addi.w	#4,$C(a0)	; increase vertical speed
0000DFA6                            ;		ext.l	d0
0000DFA6                            ;		asl.l	#8,d0
0000DFA6                            ;		add.l	d0,d3
0000DFA6 2142 0008                  		move.l	d2,$8(a0)
0000DFAA                            ;		move.l	d3,obY(a0)
0000DFAA 4E75                       		rts	
0000DFAC                            
0000DFAC                            ; End of function ObjectFall
0000DFAC                            
0000DFAC                            JumpFallSonic:
0000DFAC 4CA8 0003 0010                     movem.w    $10(a0),d0-d1        ; Get speed
0000DFB2                                    
0000DFB2 E180                               asl.l    #8,d0                ; Apply X speed
0000DFB4 D1A8 0008                          add.l    d0,$8(a0)
0000DFB8                                    
0000DFB8 303C 0300                          move.w    #$300,d0            ; Y movement speed
0000DFBC 4A41                               tst.w    d1                ; Are we falling?
0000DFBE 6A00                               bpl.s    .SetYSpeed            ; If so, branch
0000DFC0 4440                               neg.w    d0                ; Make Y movement go up
0000DFC2                                    
0000DFC2                            .SetYSpeed:
0000DFC2 48C0                               ext.l    d0                ; Apply Y speed
0000DFC4 E180                               asl.l    #8,d0
0000DFC6 D1A8 000C                          add.l    d0,$C(a0)
0000DFCA 0668 0038 0012                     addi.w    #$38,$12(a0)            ; Apply gravity
0000DFD0 4E75                               rts
0000DFD2                            
0000DFD2                            ; ---------------------------------------------------------------------------
0000DFD2                            ; Subroutine translating object	speed to update	object position
0000DFD2                            ; ---------------------------------------------------------------------------
0000DFD2                            
0000DFD2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DFD2                            
0000DFD2                            
0000DFD2                            SpeedToPos:
0000DFD2 2428 0008                  		move.l	8(a0),d2
0000DFD6 2628 000C                  		move.l	$C(a0),d3
0000DFDA 3028 0010                  		move.w	$10(a0),d0	; load horizontal speed
0000DFDE 48C0                       		ext.l	d0
0000DFE0 E180                       		asl.l	#8,d0		; multiply speed by $100
0000DFE2 D480                       		add.l	d0,d2		; add to x-axis	position
0000DFE4 3028 0012                  		move.w	$12(a0),d0	; load vertical	speed
0000DFE8 48C0                       		ext.l	d0
0000DFEA E180                       		asl.l	#8,d0		; multiply by $100
0000DFEC D680                       		add.l	d0,d3		; add to y-axis	position
0000DFEE 2142 0008                  		move.l	d2,8(a0)	; update x-axis	position
0000DFF2 2143 000C                  		move.l	d3,$C(a0)	; update y-axis	position
0000DFF6 4E75                       		rts	
0000DFF8                            ; End of function SpeedToPos
0000DFF8                            
0000DFF8                            ; ---------------------------------------------------------------------------
0000DFF8                            ; Subroutine to	display	a sprite/object, when a0 is the	object RAM
0000DFF8                            ; ---------------------------------------------------------------------------
0000DFF8                            
0000DFF8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DFF8                            
0000DFF8                            
0000DFF8                            DisplaySprite:
0000DFF8 43F8 AC00                  		lea	($FFFFAC00).w,a1
0000DFFC 3028 0018                  		move.w	$18(a0),d0
0000E000 E248                       		lsr.w	#1,d0
0000E002 0240 0380                  		andi.w	#$380,d0
0000E006 D2C0                       		adda.w	d0,a1
0000E008 0C51 007E                  		cmpi.w	#$7E,(a1)
0000E00C 6400                       		bcc.s	locret_D620
0000E00E 5451                       		addq.w	#2,(a1)
0000E010 D2D1                       		adda.w	(a1),a1
0000E012 3288                       		move.w	a0,(a1)
0000E014                            
0000E014                            locret_D620:
0000E014 4E75                       		rts	
0000E016                            ; End of function DisplaySprite
0000E016                            
0000E016                            ; ---------------------------------------------------------------------------
0000E016                            ; Subroutine to	display	a 2nd sprite/object, when a1 is	the object RAM
0000E016                            ; ---------------------------------------------------------------------------
0000E016                            
0000E016                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E016                            
0000E016                            
0000E016                            DisplaySprite2:
0000E016 45F8 AC00                  		lea	($FFFFAC00).w,a2
0000E01A 3029 0018                  		move.w	$18(a1),d0
0000E01E E248                       		lsr.w	#1,d0
0000E020 0240 0380                  		andi.w	#$380,d0
0000E024 D4C0                       		adda.w	d0,a2
0000E026 0C52 007E                  		cmpi.w	#$7E,(a2)
0000E02A 6400                       		bcc.s	locret_D63E
0000E02C 5452                       		addq.w	#2,(a2)
0000E02E D4D2                       		adda.w	(a2),a2
0000E030 3489                       		move.w	a1,(a2)
0000E032                            
0000E032                            locret_D63E:
0000E032 4E75                       		rts	
0000E034                            ; End of function DisplaySprite2
0000E034                            
0000E034                            ; ---------------------------------------------------------------------------
0000E034                            ; Subroutine to	delete an object
0000E034                            ; ---------------------------------------------------------------------------
0000E034                            
0000E034                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E034                            
0000E034                            
0000E034                            DeleteObject:
0000E034 2248                       		movea.l	a0,a1
0000E036                            
0000E036                            DeleteObject2:
0000E036 7200                       		moveq	#0,d1
0000E038 700F                       		moveq	#$F,d0
0000E03A                            
0000E03A                            loc_D646:
0000E03A 22C1                       		move.l	d1,(a1)+	; clear	the object RAM
0000E03C 51C8 FFFC                  		dbf	d0,loc_D646	; repeat $F times (length of object RAM)
0000E040 4E75                       		rts	
0000E042                            ; End of function DeleteObject
0000E042                            
0000E042                            ; ===========================================================================
0000E042 0000 0000                  BldSpr_ScrPos:	dc.l 0			; blank
0000E046 00FF F700                  		dc.l $FFF700		; main screen x-position
0000E04A 00FF F708                  		dc.l $FFF708		; background x-position	1
0000E04E 00FF F718                  		dc.l $FFF718		; background x-position	2
0000E052                            ; ---------------------------------------------------------------------------
0000E052                            ; Subroutine to	convert	mappings (etc) to proper Megadrive sprites
0000E052                            ; ---------------------------------------------------------------------------
0000E052                            
0000E052                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E052                            
0000E052                            
0000E052                            BuildSprites:				; XREF: TitleScreen; et al
0000E052 45F8 F800                  		lea	($FFFFF800).w,a2 ; set address for sprite table
0000E056 7A00                       		moveq	#0,d5
0000E058 49F8 AC00                  		lea	($FFFFAC00).w,a4
0000E05C 7E07                       		moveq	#7,d7
0000E05E                            
0000E05E                            loc_D66A:
0000E05E 4A54                       		tst.w	(a4)
0000E060 6700 0000                  		beq.w	loc_D72E
0000E064 7C02                       		moveq	#2,d6
0000E066                            
0000E066                            loc_D672:
0000E066 3074 6000                  		movea.w	(a4,d6.w),a0
0000E06A 4A10                       		tst.b	(a0)
0000E06C 6700 0000                  		beq.w	loc_D726
0000E070 08A8 0007 0001             		bclr	#7,1(a0)
0000E076 1028 0001                  		move.b	1(a0),d0
0000E07A 1800                       		move.b	d0,d4
0000E07C 0240 000C                  		andi.w	#$C,d0
0000E080 6700                       		beq.s	loc_D6DE
0000E082 227B 00BE                  		movea.l	BldSpr_ScrPos(pc,d0.w),a1
0000E086 7000                       		moveq	#0,d0
0000E088 1028 0019                  		move.b	$19(a0),d0
0000E08C 3628 0008                  		move.w	8(a0),d3
0000E090 9651                       		sub.w	(a1),d3
0000E092 3203                       		move.w	d3,d1
0000E094 D240                       		add.w	d0,d1
0000E096 6B00 0000                  		bmi.w	loc_D726
0000E09A 3203                       		move.w	d3,d1
0000E09C 9240                       		sub.w	d0,d1
0000E09E 0C41 0140                  		cmpi.w	#$140,d1
0000E0A2 6C00                       		bge.s	loc_D726
0000E0A4 0643 0080                  		addi.w	#$80,d3
0000E0A8 0804 0004                  		btst	#4,d4
0000E0AC 6700                       		beq.s	loc_D6E8
0000E0AE 7000                       		moveq	#0,d0
0000E0B0 1028 0016                  		move.b	$16(a0),d0
0000E0B4 3428 000C                  		move.w	$C(a0),d2
0000E0B8 9469 0004                  		sub.w	4(a1),d2
0000E0BC 3202                       		move.w	d2,d1
0000E0BE D240                       		add.w	d0,d1
0000E0C0 6B00                       		bmi.s	loc_D726
0000E0C2 3202                       		move.w	d2,d1
0000E0C4 9240                       		sub.w	d0,d1
0000E0C6 0C41 00E0                  		cmpi.w	#$E0,d1
0000E0CA 6C00                       		bge.s	loc_D726
0000E0CC 0642 0080                  		addi.w	#$80,d2
0000E0D0 6000                       		bra.s	loc_D700
0000E0D2                            ; ===========================================================================
0000E0D2                            
0000E0D2                            loc_D6DE:
0000E0D2 3428 000A                  		move.w	$A(a0),d2
0000E0D6 3628 0008                  		move.w	8(a0),d3
0000E0DA 6000                       		bra.s	loc_D700
0000E0DC                            ; ===========================================================================
0000E0DC                            
0000E0DC                            loc_D6E8:
0000E0DC 3428 000C                  		move.w	$C(a0),d2
0000E0E0 9469 0004                  		sub.w	4(a1),d2
0000E0E4 0642 0080                  		addi.w	#$80,d2
0000E0E8 0C42 0060                  		cmpi.w	#$60,d2
0000E0EC 6500                       		bcs.s	loc_D726
0000E0EE 0C42 0180                  		cmpi.w	#$180,d2
0000E0F2 6400                       		bcc.s	loc_D726
0000E0F4                            
0000E0F4                            loc_D700:
0000E0F4 2268 0004                  		movea.l	4(a0),a1
0000E0F8 7200                       		moveq	#0,d1
0000E0FA 0804 0005                  		btst	#5,d4
0000E0FE 6600                       		bne.s	loc_D71C
0000E100 1228 001A                  		move.b	$1A(a0),d1
0000E104 D201                       		add.b	d1,d1
0000E106 D2F1 1000                  		adda.w	(a1,d1.w),a1
0000E10A 1219                       		move.b	(a1)+,d1
0000E10C 5301                       		subq.b	#1,d1
0000E10E 6B00                       		bmi.s	loc_D720
0000E110                            
0000E110                            loc_D71C:
0000E110 6100 0000                  		bsr.w	sub_D750
0000E114                            
0000E114                            loc_D720:
0000E114 08E8 0007 0001             		bset	#7,1(a0)
0000E11A                            
0000E11A                            loc_D726:
0000E11A 5446                       		addq.w	#2,d6
0000E11C 5554                       		subq.w	#2,(a4)
0000E11E 6600 FF46                  		bne.w	loc_D672
0000E122                            
0000E122                            loc_D72E:
0000E122 49EC 0080                  		lea	$80(a4),a4
0000E126 51CF FF36                  		dbf	d7,loc_D66A
0000E12A 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0000E12E 0C05 0050                  		cmpi.b	#$50,d5
0000E132 6700                       		beq.s	loc_D748
0000E134 24BC 0000 0000             		move.l	#0,(a2)
0000E13A 4E75                       		rts	
0000E13C                            ; ===========================================================================
0000E13C                            
0000E13C                            loc_D748:
0000E13C 157C 0000 FFFB             		move.b	#0,-5(a2)
0000E142 4E75                       		rts	
0000E144                            ; End of function BuildSprites
0000E144                            
0000E144                            
0000E144                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E144                            
0000E144                            
0000E144                            sub_D750:				; XREF: BuildSprites
0000E144 3668 0002                  		movea.w	2(a0),a3
0000E148 0804 0000                  		btst	#0,d4
0000E14C 6600                       		bne.s	loc_D796
0000E14E 0804 0001                  		btst	#1,d4
0000E152 6600 0000                  		bne.w	loc_D7E4
0000E156                            ; End of function sub_D750
0000E156                            
0000E156                            
0000E156                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E156                            
0000E156                            
0000E156                            sub_D762:				; XREF: sub_D762; SS_ShowLayout
0000E156 0C05 0050                  		cmpi.b	#$50,d5
0000E15A 6700                       		beq.s	locret_D794
0000E15C 1019                       		move.b	(a1)+,d0
0000E15E 4880                       		ext.w	d0
0000E160 D042                       		add.w	d2,d0
0000E162 34C0                       		move.w	d0,(a2)+
0000E164 14D9                       		move.b	(a1)+,(a2)+
0000E166 5205                       		addq.b	#1,d5
0000E168 14C5                       		move.b	d5,(a2)+
0000E16A 1019                       		move.b	(a1)+,d0
0000E16C E148                       		lsl.w	#8,d0
0000E16E 1019                       		move.b	(a1)+,d0
0000E170 D04B                       		add.w	a3,d0
0000E172 34C0                       		move.w	d0,(a2)+
0000E174 1019                       		move.b	(a1)+,d0
0000E176 4880                       		ext.w	d0
0000E178 D043                       		add.w	d3,d0
0000E17A 0240 01FF                  		andi.w	#$1FF,d0
0000E17E 6600                       		bne.s	loc_D78E
0000E180 5240                       		addq.w	#1,d0
0000E182                            
0000E182                            loc_D78E:
0000E182 34C0                       		move.w	d0,(a2)+
0000E184 51C9 FFD0                  		dbf	d1,sub_D762
0000E188                            
0000E188                            locret_D794:
0000E188 4E75                       		rts	
0000E18A                            ; End of function sub_D762
0000E18A                            
0000E18A                            ; ===========================================================================
0000E18A                            
0000E18A                            loc_D796:
0000E18A 0804 0001                  		btst	#1,d4
0000E18E 6600 0000                  		bne.w	loc_D82A
0000E192                            
0000E192                            loc_D79E:
0000E192 0C05 0050                  		cmpi.b	#$50,d5
0000E196 6700                       		beq.s	locret_D7E2
0000E198 1019                       		move.b	(a1)+,d0
0000E19A 4880                       		ext.w	d0
0000E19C D042                       		add.w	d2,d0
0000E19E 34C0                       		move.w	d0,(a2)+
0000E1A0 1819                       		move.b	(a1)+,d4
0000E1A2 14C4                       		move.b	d4,(a2)+
0000E1A4 5205                       		addq.b	#1,d5
0000E1A6 14C5                       		move.b	d5,(a2)+
0000E1A8 1019                       		move.b	(a1)+,d0
0000E1AA E148                       		lsl.w	#8,d0
0000E1AC 1019                       		move.b	(a1)+,d0
0000E1AE D04B                       		add.w	a3,d0
0000E1B0 0A40 0800                  		eori.w	#$800,d0
0000E1B4 34C0                       		move.w	d0,(a2)+
0000E1B6 1019                       		move.b	(a1)+,d0
0000E1B8 4880                       		ext.w	d0
0000E1BA 4440                       		neg.w	d0
0000E1BC D804                       		add.b	d4,d4
0000E1BE 0244 0018                  		andi.w	#$18,d4
0000E1C2 5044                       		addq.w	#8,d4
0000E1C4 9044                       		sub.w	d4,d0
0000E1C6 D043                       		add.w	d3,d0
0000E1C8 0240 01FF                  		andi.w	#$1FF,d0
0000E1CC 6600                       		bne.s	loc_D7DC
0000E1CE 5240                       		addq.w	#1,d0
0000E1D0                            
0000E1D0                            loc_D7DC:
0000E1D0 34C0                       		move.w	d0,(a2)+
0000E1D2 51C9 FFBE                  		dbf	d1,loc_D79E
0000E1D6                            
0000E1D6                            locret_D7E2:
0000E1D6 4E75                       		rts	
0000E1D8                            ; ===========================================================================
0000E1D8                            
0000E1D8                            loc_D7E4:				; XREF: sub_D750
0000E1D8 0C05 0050                  		cmpi.b	#$50,d5
0000E1DC 6700                       		beq.s	locret_D828
0000E1DE 1019                       		move.b	(a1)+,d0
0000E1E0 1811                       		move.b	(a1),d4
0000E1E2 4880                       		ext.w	d0
0000E1E4 4440                       		neg.w	d0
0000E1E6 E70C                       		lsl.b	#3,d4
0000E1E8 0244 0018                  		andi.w	#$18,d4
0000E1EC 5044                       		addq.w	#8,d4
0000E1EE 9044                       		sub.w	d4,d0
0000E1F0 D042                       		add.w	d2,d0
0000E1F2 34C0                       		move.w	d0,(a2)+
0000E1F4 14D9                       		move.b	(a1)+,(a2)+
0000E1F6 5205                       		addq.b	#1,d5
0000E1F8 14C5                       		move.b	d5,(a2)+
0000E1FA 1019                       		move.b	(a1)+,d0
0000E1FC E148                       		lsl.w	#8,d0
0000E1FE 1019                       		move.b	(a1)+,d0
0000E200 D04B                       		add.w	a3,d0
0000E202 0A40 1000                  		eori.w	#$1000,d0
0000E206 34C0                       		move.w	d0,(a2)+
0000E208 1019                       		move.b	(a1)+,d0
0000E20A 4880                       		ext.w	d0
0000E20C D043                       		add.w	d3,d0
0000E20E 0240 01FF                  		andi.w	#$1FF,d0
0000E212 6600                       		bne.s	loc_D822
0000E214 5240                       		addq.w	#1,d0
0000E216                            
0000E216                            loc_D822:
0000E216 34C0                       		move.w	d0,(a2)+
0000E218 51C9 FFBE                  		dbf	d1,loc_D7E4
0000E21C                            
0000E21C                            locret_D828:
0000E21C 4E75                       		rts	
0000E21E                            ; ===========================================================================
0000E21E                            
0000E21E                            loc_D82A:
0000E21E 0C05 0050                  		cmpi.b	#$50,d5
0000E222 6700                       		beq.s	locret_D87C
0000E224 1019                       		move.b	(a1)+,d0
0000E226 1811                       		move.b	(a1),d4
0000E228 4880                       		ext.w	d0
0000E22A 4440                       		neg.w	d0
0000E22C E70C                       		lsl.b	#3,d4
0000E22E 0244 0018                  		andi.w	#$18,d4
0000E232 5044                       		addq.w	#8,d4
0000E234 9044                       		sub.w	d4,d0
0000E236 D042                       		add.w	d2,d0
0000E238 34C0                       		move.w	d0,(a2)+
0000E23A 1819                       		move.b	(a1)+,d4
0000E23C 14C4                       		move.b	d4,(a2)+
0000E23E 5205                       		addq.b	#1,d5
0000E240 14C5                       		move.b	d5,(a2)+
0000E242 1019                       		move.b	(a1)+,d0
0000E244 E148                       		lsl.w	#8,d0
0000E246 1019                       		move.b	(a1)+,d0
0000E248 D04B                       		add.w	a3,d0
0000E24A 0A40 1800                  		eori.w	#$1800,d0
0000E24E 34C0                       		move.w	d0,(a2)+
0000E250 1019                       		move.b	(a1)+,d0
0000E252 4880                       		ext.w	d0
0000E254 4440                       		neg.w	d0
0000E256 D804                       		add.b	d4,d4
0000E258 0244 0018                  		andi.w	#$18,d4
0000E25C 5044                       		addq.w	#8,d4
0000E25E 9044                       		sub.w	d4,d0
0000E260 D043                       		add.w	d3,d0
0000E262 0240 01FF                  		andi.w	#$1FF,d0
0000E266 6600                       		bne.s	loc_D876
0000E268 5240                       		addq.w	#1,d0
0000E26A                            
0000E26A                            loc_D876:
0000E26A 34C0                       		move.w	d0,(a2)+
0000E26C 51C9 FFB0                  		dbf	d1,loc_D82A
0000E270                            
0000E270                            locret_D87C:
0000E270 4E75                       		rts	
0000E272                            ; ---------------------------------------------------------------------------
0000E272                            ; Subroutine to	check if an object is on the screen
0000E272                            ; ---------------------------------------------------------------------------
0000E272                            
0000E272                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E272                            
0000E272                            
0000E272                            ChkObjOnScreen:
0000E272 3028 0008                  		move.w	8(a0),d0	; get object x-position
0000E276 9078 F700                  		sub.w	($FFFFF700).w,d0 ; subtract screen x-position
0000E27A 6B00                       		bmi.s	NotOnScreen
0000E27C 0C40 0140                  		cmpi.w	#320,d0		; is object on the screen?
0000E280 6C00                       		bge.s	NotOnScreen	; if not, branch
0000E282                            
0000E282 3228 000C                  		move.w	$C(a0),d1	; get object y-position
0000E286 9278 F704                  		sub.w	($FFFFF704).w,d1 ; subtract screen y-position
0000E28A 6B00                       		bmi.s	NotOnScreen
0000E28C 0C41 00E0                  		cmpi.w	#224,d1		; is object on the screen?
0000E290 6C00                       		bge.s	NotOnScreen	; if not, branch
0000E292                            
0000E292 7000                       		moveq	#0,d0		; set flag to 0
0000E294 4E75                       		rts	
0000E296                            ; ===========================================================================
0000E296                            
0000E296                            NotOnScreen:				; XREF: ChkObjOnScreen
0000E296 7001                       		moveq	#1,d0		; set flag to 1
0000E298 4E75                       		rts	
0000E29A                            ; End of function ChkObjOnScreen
0000E29A                            
0000E29A                            
0000E29A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E29A                            
0000E29A                            
0000E29A                            ChkObjOnScreen2:
0000E29A 7200                       		moveq	#0,d1
0000E29C 1228 0019                  		move.b	$19(a0),d1
0000E2A0 3028 0008                  		move.w	8(a0),d0
0000E2A4 9078 F700                  		sub.w	($FFFFF700).w,d0
0000E2A8 D041                       		add.w	d1,d0
0000E2AA 6B00                       		bmi.s	NotOnScreen2
0000E2AC D241                       		add.w	d1,d1
0000E2AE 9041                       		sub.w	d1,d0
0000E2B0 0C40 0140                  		cmpi.w	#320,d0
0000E2B4 6C00                       		bge.s	NotOnScreen2
0000E2B6                            
0000E2B6 3228 000C                  		move.w	$C(a0),d1
0000E2BA 9278 F704                  		sub.w	($FFFFF704).w,d1
0000E2BE 6B00                       		bmi.s	NotOnScreen2
0000E2C0 0C41 00E0                  		cmpi.w	#224,d1
0000E2C4 6C00                       		bge.s	NotOnScreen2
0000E2C6                            
0000E2C6 7000                       		moveq	#0,d0
0000E2C8 4E75                       		rts	
0000E2CA                            ; ===========================================================================
0000E2CA                            
0000E2CA                            NotOnScreen2:				; XREF: ChkObjOnScreen2
0000E2CA 7001                       		moveq	#1,d0
0000E2CC 4E75                       		rts	
0000E2CE                            ; End of function ChkObjOnScreen2
0000E2CE                            
0000E2CE                            ; ---------------------------------------------------------------------------
0000E2CE                            ; Subroutine to	load a level's objects
0000E2CE                            ; ---------------------------------------------------------------------------
0000E2CE                            
0000E2CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E2CE                            
0000E2CE                            
0000E2CE                            ObjPosLoad:				; XREF: Level; et al
0000E2CE 7000                       		moveq	#0,d0
0000E2D0 1038 F76C                  		move.b	($FFFFF76C).w,d0
0000E2D4 303B 0000                  		move.w	OPL_Index(pc,d0.w),d0
0000E2D8 4EFB 0000                  		jmp	OPL_Index(pc,d0.w)
0000E2DC                            ; End of function ObjPosLoad
0000E2DC                            
0000E2DC                            ; ===========================================================================
0000E2DC 0000                       OPL_Index:	dc.w OPL_Main-OPL_Index
0000E2DE 0000                       		dc.w OPL_Next-OPL_Index
0000E2E0                            ; ===========================================================================
0000E2E0                            
0000E2E0                            OPL_Main:				; XREF: OPL_Index
0000E2E0 5438 F76C                  		addq.b	#2,($FFFFF76C).w
0000E2E4 3038 FE10                  		move.w	($FFFFFE10).w,d0
0000E2E8 ED08                       		lsl.b	#6,d0
0000E2EA E848                       		lsr.w	#4,d0
0000E2EC 41F9 0000 0000             		lea	(ObjPos_Index).l,a0
0000E2F2 2248                       		movea.l	a0,a1
0000E2F4 D0F0 0000                  		adda.w	(a0,d0.w),a0
0000E2F8 21C8 F770                  		move.l	a0,($FFFFF770).w
0000E2FC 21C8 F774                  		move.l	a0,($FFFFF774).w
0000E300 D2F1 0002                  		adda.w	2(a1,d0.w),a1
0000E304 21C9 F778                  		move.l	a1,($FFFFF778).w
0000E308 21C9 F77C                  		move.l	a1,($FFFFF77C).w
0000E30C 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E310 34FC 0101                  		move.w	#$101,(a2)+
0000E314 303C 005E                  		move.w	#$5E,d0
0000E318                            
0000E318                            OPL_ClrList:
0000E318 429A                       		clr.l	(a2)+
0000E31A 51C8 FFFC                  		dbf	d0,OPL_ClrList	; clear	pre-destroyed object list
0000E31E                            
0000E31E 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E322 7400                       		moveq	#0,d2
0000E324 3C38 F700                  		move.w	($FFFFF700).w,d6
0000E328 0446 0080                  		subi.w	#$80,d6
0000E32C 6400                       		bcc.s	loc_D93C
0000E32E 7C00                       		moveq	#0,d6
0000E330                            
0000E330                            loc_D93C:
0000E330 0246 FF80                  		andi.w	#$FF80,d6
0000E334 2078 F770                  		movea.l	($FFFFF770).w,a0
0000E338                            
0000E338                            loc_D944:
0000E338 BC50                       		cmp.w	(a0),d6
0000E33A 6300                       		bls.s	loc_D956
0000E33C 4A28 0004                  		tst.b	4(a0)
0000E340 6A00                       		bpl.s	loc_D952
0000E342 1412                       		move.b	(a2),d2
0000E344 5212                       		addq.b	#1,(a2)
0000E346                            
0000E346                            loc_D952:
0000E346 5C48                       		addq.w	#6,a0
0000E348 60EE                       		bra.s	loc_D944
0000E34A                            ; ===========================================================================
0000E34A                            
0000E34A                            loc_D956:
0000E34A 21C8 F770                  		move.l	a0,($FFFFF770).w
0000E34E 2078 F774                  		movea.l	($FFFFF774).w,a0
0000E352 0446 0080                  		subi.w	#$80,d6
0000E356 6500                       		bcs.s	loc_D976
0000E358                            
0000E358                            loc_D964:
0000E358 BC50                       		cmp.w	(a0),d6
0000E35A 6300                       		bls.s	loc_D976
0000E35C 4A28 0004                  		tst.b	4(a0)
0000E360 6A00                       		bpl.s	loc_D972
0000E362 522A 0001                  		addq.b	#1,1(a2)
0000E366                            
0000E366                            loc_D972:
0000E366 5C48                       		addq.w	#6,a0
0000E368 60EE                       		bra.s	loc_D964
0000E36A                            ; ===========================================================================
0000E36A                            
0000E36A                            loc_D976:
0000E36A 21C8 F774                  		move.l	a0,($FFFFF774).w
0000E36E 31FC FFFF F76E             		move.w	#-1,($FFFFF76E).w
0000E374                            
0000E374                            OPL_Next:				; XREF: OPL_Index
0000E374 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E378 7400                       		moveq	#0,d2
0000E37A 3C38 F700                  		move.w	($FFFFF700).w,d6
0000E37E 0246 FF80                  		andi.w	#$FF80,d6
0000E382 BC78 F76E                  		cmp.w	($FFFFF76E).w,d6
0000E386 6700 0000                  		beq.w	locret_DA3A
0000E38A 6C00                       		bge.s	loc_D9F6
0000E38C 31C6 F76E                  		move.w	d6,($FFFFF76E).w
0000E390 2078 F774                  		movea.l	($FFFFF774).w,a0
0000E394 0446 0080                  		subi.w	#$80,d6
0000E398 6500                       		bcs.s	loc_D9D2
0000E39A                            
0000E39A                            loc_D9A6:
0000E39A BC68 FFFA                  		cmp.w	-6(a0),d6
0000E39E 6C00                       		bge.s	loc_D9D2
0000E3A0 5D48                       		subq.w	#6,a0
0000E3A2 4A28 0004                  		tst.b	4(a0)
0000E3A6 6A00                       		bpl.s	loc_D9BC
0000E3A8 532A 0001                  		subq.b	#1,1(a2)
0000E3AC 142A 0001                  		move.b	1(a2),d2
0000E3B0                            
0000E3B0                            loc_D9BC:
0000E3B0 6100 0000                  		bsr.w	loc_DA3C
0000E3B4 6600                       		bne.s	loc_D9C6
0000E3B6 5D48                       		subq.w	#6,a0
0000E3B8 60E0                       		bra.s	loc_D9A6
0000E3BA                            ; ===========================================================================
0000E3BA                            
0000E3BA                            loc_D9C6:
0000E3BA 4A28 0004                  		tst.b	4(a0)
0000E3BE 6A00                       		bpl.s	loc_D9D0
0000E3C0 522A 0001                  		addq.b	#1,1(a2)
0000E3C4                            
0000E3C4                            loc_D9D0:
0000E3C4 5C48                       		addq.w	#6,a0
0000E3C6                            
0000E3C6                            loc_D9D2:
0000E3C6 21C8 F774                  		move.l	a0,($FFFFF774).w
0000E3CA 2078 F770                  		movea.l	($FFFFF770).w,a0
0000E3CE 0646 0300                  		addi.w	#$300,d6
0000E3D2                            
0000E3D2                            loc_D9DE:
0000E3D2 BC68 FFFA                  		cmp.w	-6(a0),d6
0000E3D6 6E00                       		bgt.s	loc_D9F0
0000E3D8 4A28 FFFE                  		tst.b	-2(a0)
0000E3DC 6A00                       		bpl.s	loc_D9EC
0000E3DE 5312                       		subq.b	#1,(a2)
0000E3E0                            
0000E3E0                            loc_D9EC:
0000E3E0 5D48                       		subq.w	#6,a0
0000E3E2 60EE                       		bra.s	loc_D9DE
0000E3E4                            ; ===========================================================================
0000E3E4                            
0000E3E4                            loc_D9F0:
0000E3E4 21C8 F770                  		move.l	a0,($FFFFF770).w
0000E3E8 4E75                       		rts	
0000E3EA                            ; ===========================================================================
0000E3EA                            
0000E3EA                            loc_D9F6:
0000E3EA 31C6 F76E                  		move.w	d6,($FFFFF76E).w
0000E3EE 2078 F770                  		movea.l	($FFFFF770).w,a0
0000E3F2 0646 0280                  		addi.w	#$280,d6
0000E3F6                            
0000E3F6                            loc_DA02:
0000E3F6 BC50                       		cmp.w	(a0),d6
0000E3F8 6300                       		bls.s	loc_DA16
0000E3FA 4A28 0004                  		tst.b	4(a0)
0000E3FE 6A00                       		bpl.s	loc_DA10
0000E400 1412                       		move.b	(a2),d2
0000E402 5212                       		addq.b	#1,(a2)
0000E404                            
0000E404                            loc_DA10:
0000E404 6100 0000                  		bsr.w	loc_DA3C
0000E408 67EC                       		beq.s	loc_DA02
0000E40A                            
0000E40A                            loc_DA16:
0000E40A 21C8 F770                  		move.l	a0,($FFFFF770).w
0000E40E 2078 F774                  		movea.l	($FFFFF774).w,a0
0000E412 0446 0300                  		subi.w	#$300,d6
0000E416 6500                       		bcs.s	loc_DA36
0000E418                            
0000E418                            loc_DA24:
0000E418 BC50                       		cmp.w	(a0),d6
0000E41A 6300                       		bls.s	loc_DA36
0000E41C 4A28 0004                  		tst.b	4(a0)
0000E420 6A00                       		bpl.s	loc_DA32
0000E422 522A 0001                  		addq.b	#1,1(a2)
0000E426                            
0000E426                            loc_DA32:
0000E426 5C48                       		addq.w	#6,a0
0000E428 60EE                       		bra.s	loc_DA24
0000E42A                            ; ===========================================================================
0000E42A                            
0000E42A                            loc_DA36:
0000E42A 21C8 F774                  		move.l	a0,($FFFFF774).w
0000E42E                            
0000E42E                            locret_DA3A:
0000E42E 4E75                       		rts	
0000E430                            ; ===========================================================================
0000E430                            
0000E430                            loc_DA3C:
0000E430 4A28 0004                  		tst.b	4(a0)
0000E434 6A00                       		bpl.s	OPL_MakeItem
0000E436 08F2 0007 2002             		bset	#7,2(a2,d2.w)
0000E43C 6700                       		beq.s	OPL_MakeItem
0000E43E 5C48                       		addq.w	#6,a0
0000E440 7000                       		moveq	#0,d0
0000E442 4E75                       		rts	
0000E444                            ; ===========================================================================
0000E444                            
0000E444                            OPL_MakeItem:
0000E444 6100 0000                  		bsr.w	SingleObjLoad
0000E448 6600                       		bne.s	locret_DA8A
0000E44A 3358 0008                  		move.w	(a0)+,8(a1)
0000E44E 3018                       		move.w	(a0)+,d0
0000E450 3200                       		move.w	d0,d1
0000E452 0240 0FFF                  		andi.w	#$FFF,d0
0000E456 3340 000C                  		move.w	d0,$C(a1)
0000E45A E559                       		rol.w	#2,d1
0000E45C 0201 0003                  		andi.b	#3,d1
0000E460 1341 0001                  		move.b	d1,1(a1)
0000E464 1341 0022                  		move.b	d1,$22(a1)
0000E468 1018                       		move.b	(a0)+,d0
0000E46A 6A00                       		bpl.s	loc_DA80
0000E46C 0200 007F                  		andi.b	#$7F,d0
0000E470 1342 0023                  		move.b	d2,$23(a1)
0000E474                            
0000E474                            loc_DA80:
0000E474 1280                       		move.b	d0,0(a1)
0000E476 1358 0028                  		move.b	(a0)+,$28(a1)
0000E47A 7000                       		moveq	#0,d0
0000E47C                            
0000E47C                            locret_DA8A:
0000E47C 4E75                       		rts	
0000E47E                            ; ---------------------------------------------------------------------------
0000E47E                            ; Single object	loading	subroutine
0000E47E                            ; ---------------------------------------------------------------------------
0000E47E                            
0000E47E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E47E                            
0000E47E                            
0000E47E                            SingleObjLoad:
0000E47E 43F8 D800                  		lea	($FFFFD800).w,a1 ; start address for object RAM
0000E482 303C 005F                  		move.w	#$5F,d0
0000E486                            
0000E486                            loc_DA94:
0000E486 4A11                       		tst.b	(a1)		; is object RAM	slot empty?
0000E488 6700                       		beq.s	locret_DAA0	; if yes, branch
0000E48A 43E9 0040                  		lea	$40(a1),a1	; goto next object RAM slot
0000E48E 51C8 FFF6                  		dbf	d0,loc_DA94	; repeat $5F times
0000E492                            
0000E492                            locret_DAA0:
0000E492 4E75                       		rts	
0000E494                            ; End of function SingleObjLoad
0000E494                            
0000E494                            
0000E494                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E494                            
0000E494                            
0000E494                            SingleObjLoad2:
0000E494 2248                       		movea.l	a0,a1
0000E496 303C F000                  		move.w	#-$1000,d0
0000E49A 9048                       		sub.w	a0,d0
0000E49C EC48                       		lsr.w	#6,d0
0000E49E 5340                       		subq.w	#1,d0
0000E4A0 6500                       		bcs.s	locret_DABC
0000E4A2                            
0000E4A2                            loc_DAB0:
0000E4A2 4A11                       		tst.b	(a1)
0000E4A4 6700                       		beq.s	locret_DABC
0000E4A6 43E9 0040                  		lea	$40(a1),a1
0000E4AA 51C8 FFF6                  		dbf	d0,loc_DAB0
0000E4AE                            
0000E4AE                            locret_DABC:
0000E4AE 4E75                       		rts	
0000E4B0                            ; End of function SingleObjLoad2
0000E4B0                            
0000E4B0                            ; ===========================================================================
0000E4B0                            ; ---------------------------------------------------------------------------
0000E4B0                            ; Object 41 - springs
0000E4B0                            ; ---------------------------------------------------------------------------
0000E4B0                            
0000E4B0                            Obj41:					; XREF: Obj_Index
0000E4B0 7000                       		moveq	#0,d0
0000E4B2 1028 0024                  		move.b	$24(a0),d0
0000E4B6 323B 0000                  		move.w	Obj41_Index(pc,d0.w),d1
0000E4BA 4EBB 1000                  		jsr	Obj41_Index(pc,d1.w)
0000E4BE 6100 FB38                  		bsr.w	DisplaySprite
0000E4C2 3028 0008                  		move.w	8(a0),d0
0000E4C6 0240 FF80                  		andi.w	#$FF80,d0
0000E4CA 3238 F700                  		move.w	($FFFFF700).w,d1
0000E4CE 0441 0080                  		subi.w	#$80,d1
0000E4D2 0241 FF80                  		andi.w	#$FF80,d1
0000E4D6 9041                       		sub.w	d1,d0
0000E4D8 0C40 0280                  		cmpi.w	#$280,d0
0000E4DC 6200 FB56                  		bhi.w	DeleteObject
0000E4E0 4E75                       		rts	
0000E4E2                            ; ===========================================================================
0000E4E2 0000                       Obj41_Index:	dc.w Obj41_Main-Obj41_Index
0000E4E4 0000                       		dc.w Obj41_Up-Obj41_Index
0000E4E6 0000                       		dc.w Obj41_AniUp-Obj41_Index
0000E4E8 0000                       		dc.w Obj41_ResetUp-Obj41_Index
0000E4EA 0000                       		dc.w Obj41_LR-Obj41_Index
0000E4EC 0000                       		dc.w Obj41_AniLR-Obj41_Index
0000E4EE 0000                       		dc.w Obj41_ResetLR-Obj41_Index
0000E4F0 0000                       		dc.w Obj41_Dwn-Obj41_Index
0000E4F2 0000                       		dc.w Obj41_AniDwn-Obj41_Index
0000E4F4 0000                       		dc.w Obj41_ResetDwn-Obj41_Index
0000E4F6                            
0000E4F6 F000                       Obj41_Powers:	dc.w -$1000		; power	of red spring
0000E4F8 F600                       		dc.w -$A00		; power	of yellow spring
0000E4FA                            ; ===========================================================================
0000E4FA                            
0000E4FA                            Obj41_Main:				; XREF: Obj41_Index
0000E4FA 5428 0024                  		addq.b	#2,$24(a0)
0000E4FE 217C 0000 0000 0004        		move.l	#Map_obj41,4(a0)
0000E506 317C 0523 0002             		move.w	#$523,2(a0)
0000E50C 0028 0004 0001             		ori.b	#4,1(a0)
0000E512 117C 0010 0019             		move.b	#$10,$19(a0)
0000E518 117C 0004 0018             		move.b	#4,$18(a0)
0000E51E 1028 0028                  		move.b	$28(a0),d0
0000E522 0800 0004                  		btst	#4,d0		; does the spring face left/right?
0000E526 6700                       		beq.s	loc_DB54	; if not, branch
0000E528 117C 0008 0024             		move.b	#8,$24(a0)	; use "Obj41_LR" routine
0000E52E 117C 0001 001C             		move.b	#1,$1C(a0)
0000E534 117C 0003 001A             		move.b	#3,$1A(a0)
0000E53A 317C 0533 0002             		move.w	#$533,2(a0)
0000E540 117C 0008 0019             		move.b	#8,$19(a0)
0000E546                            
0000E546                            loc_DB54:
0000E546 0800 0005                  		btst	#5,d0		; does the spring face downwards?
0000E54A 6700                       		beq.s	loc_DB66	; if not, branch
0000E54C 117C 000E 0024             		move.b	#$E,$24(a0)	; use "Obj41_Dwn" routine
0000E552 08E8 0001 0022             		bset	#1,$22(a0)
0000E558                            
0000E558                            loc_DB66:
0000E558 0800 0001                  		btst	#1,d0
0000E55C 6700                       		beq.s	loc_DB72
0000E55E 08E8 0005 0002             		bset	#5,2(a0)
0000E564                            
0000E564                            loc_DB72:
0000E564 0240 000F                  		andi.w	#$F,d0
0000E568 317B 008C 0030             		move.w	Obj41_Powers(pc,d0.w),$30(a0)
0000E56E 4E75                       		rts	
0000E570                            ; ===========================================================================
0000E570                            
0000E570                            Obj41_Up:				; XREF: Obj41_Index
0000E570 323C 001B                  		move.w	#$1B,d1
0000E574 343C 0008                  		move.w	#8,d2
0000E578 363C 0010                  		move.w	#$10,d3
0000E57C 3828 0008                  		move.w	8(a0),d4
0000E580 6100 0000                  		bsr.w	SolidObject
0000E584 4A28 0025                  		tst.b	$25(a0)		; is Sonic on top of the spring?
0000E588 6600                       		bne.s	Obj41_BounceUp	; if yes, branch
0000E58A 4E75                       		rts	
0000E58C                            ; ===========================================================================
0000E58C                            
0000E58C                            Obj41_BounceUp:				; XREF: Obj41_Up
0000E58C 5428 0024                  		addq.b	#2,$24(a0)
0000E590 5069 000C                  		addq.w	#8,$C(a1)
0000E594 3368 0030 0012             		move.w	$30(a0),$12(a1)	; move Sonic upwards
0000E59A 08E9 0001 0022             		bset	#1,$22(a1)
0000E5A0 08A9 0003 0022             		bclr	#3,$22(a1)
0000E5A6 137C 0010 001C             		move.b	#$10,$1C(a1)	; use "bouncing" animation
0000E5AC 137C 0002 0024             		move.b	#2,$24(a1)
0000E5B2 08A8 0003 0022             		bclr	#3,$22(a0)
0000E5B8 4228 0025                  		clr.b	$25(a0)
0000E5BC 303C 00CC                  		move.w	#$CC,d0
0000E5C0 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play spring sound
0000E5C6                            
0000E5C6                            Obj41_AniUp:				; XREF: Obj41_Index
0000E5C6 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000E5CC 6000 CA88                  		bra.w	AnimateSprite
0000E5D0                            ; ===========================================================================
0000E5D0                            
0000E5D0                            Obj41_ResetUp:				; XREF: Obj41_Index
0000E5D0 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000E5D6 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Up" routine
0000E5DA 4E75                       		rts	
0000E5DC                            ; ===========================================================================
0000E5DC                            
0000E5DC                            Obj41_LR:				; XREF: Obj41_Index
0000E5DC 323C 0013                  		move.w	#$13,d1
0000E5E0 343C 000E                  		move.w	#$E,d2
0000E5E4 363C 000F                  		move.w	#$F,d3
0000E5E8 3828 0008                  		move.w	8(a0),d4
0000E5EC 6100 0000                  		bsr.w	SolidObject
0000E5F0 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000E5F6 6600                       		bne.s	loc_DC0C
0000E5F8 117C 0008 0024             		move.b	#8,$24(a0)
0000E5FE                            
0000E5FE                            loc_DC0C:
0000E5FE 0828 0005 0022             		btst	#5,$22(a0)
0000E604 6600                       		bne.s	Obj41_BounceLR
0000E606 4E75                       		rts	
0000E608                            ; ===========================================================================
0000E608                            
0000E608                            Obj41_BounceLR:				; XREF: Obj41_LR
0000E608 5428 0024                  		addq.b	#2,$24(a0)
0000E60C 3368 0030 0010             		move.w	$30(a0),$10(a1)	; move Sonic to	the left
0000E612 5069 0008                  		addq.w	#8,8(a1)
0000E616 0828 0000 0022             		btst	#0,$22(a0)	; is object flipped?
0000E61C 6600                       		bne.s	loc_DC36	; if yes, branch
0000E61E 0469 0010 0008             		subi.w	#$10,8(a1)
0000E624 4469 0010                  		neg.w	$10(a1)		; move Sonic to	the right
0000E628                            
0000E628                            loc_DC36:
0000E628 337C 000F 003E             		move.w	#$F,$3E(a1)
0000E62E 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000E634 0869 0000 0022             		bchg	#0,$22(a1)
0000E63A 0829 0002 0022             		btst	#2,$22(a1)
0000E640 6600                       		bne.s	loc_DC56
0000E642 137C 0000 001C             		move.b	#0,$1C(a1)	; use running animation
0000E648                            
0000E648                            loc_DC56:
0000E648 08A8 0005 0022             		bclr	#5,$22(a0)
0000E64E 08A9 0005 0022             		bclr	#5,$22(a1)
0000E654 303C 00CC                  		move.w	#$CC,d0
0000E658 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play spring sound
0000E65E                            
0000E65E                            Obj41_AniLR:				; XREF: Obj41_Index
0000E65E 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000E664 6000 C9F0                  		bra.w	AnimateSprite
0000E668                            ; ===========================================================================
0000E668                            
0000E668                            Obj41_ResetLR:				; XREF: Obj41_Index
0000E668 117C 0002 001D             		move.b	#2,$1D(a0)	; reset	animation
0000E66E 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_LR" routine
0000E672 4E75                       		rts	
0000E674                            ; ===========================================================================
0000E674                            
0000E674                            Obj41_Dwn:				; XREF: Obj41_Index
0000E674 323C 001B                  		move.w	#$1B,d1
0000E678 343C 0008                  		move.w	#8,d2
0000E67C 363C 0010                  		move.w	#$10,d3
0000E680 3828 0008                  		move.w	8(a0),d4
0000E684 6100 0000                  		bsr.w	SolidObject
0000E688 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000E68E 6600                       		bne.s	loc_DCA4
0000E690 117C 000E 0024             		move.b	#$E,$24(a0)
0000E696                            
0000E696                            loc_DCA4:
0000E696 4A28 0025                  		tst.b	$25(a0)
0000E69A 6600                       		bne.s	locret_DCAE
0000E69C 4A44                       		tst.w	d4
0000E69E 6B00                       		bmi.s	Obj41_BounceDwn
0000E6A0                            
0000E6A0                            locret_DCAE:
0000E6A0 4E75                       		rts	
0000E6A2                            ; ===========================================================================
0000E6A2                            
0000E6A2                            Obj41_BounceDwn:			; XREF: Obj41_Dwn
0000E6A2 5428 0024                  		addq.b	#2,$24(a0)
0000E6A6 5169 000C                  		subq.w	#8,$C(a1)
0000E6AA 3368 0030 0012             		move.w	$30(a0),$12(a1)
0000E6B0 4469 0012                  		neg.w	$12(a1)		; move Sonic downwards
0000E6B4 08E9 0001 0022             		bset	#1,$22(a1)
0000E6BA 08A9 0003 0022             		bclr	#3,$22(a1)
0000E6C0 137C 0002 0024             		move.b	#2,$24(a1)
0000E6C6 08A8 0003 0022             		bclr	#3,$22(a0)
0000E6CC 4228 0025                  		clr.b	$25(a0)
0000E6D0 303C 00CC                  		move.w	#$CC,d0
0000E6D4 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play spring sound
0000E6DA                            
0000E6DA                            Obj41_AniDwn:				; XREF: Obj41_Index
0000E6DA 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000E6E0 6000 C974                  		bra.w	AnimateSprite
0000E6E4                            ; ===========================================================================
0000E6E4                            
0000E6E4                            Obj41_ResetDwn:				; XREF: Obj41_Index
0000E6E4 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000E6EA 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Dwn" routine
0000E6EE 4E75                       		rts	
0000E6F0                            ; ===========================================================================
0000E6F0                            Ani_obj41:
0000E6F0                            	include "_anim\obj41.asm"
0000E6F0                            ; ---------------------------------------------------------------------------
0000E6F0                            ; Animation script - springs
0000E6F0                            ; ---------------------------------------------------------------------------
0000E6F0 0000                       		dc.w byte_DD02-Ani_obj41
0000E6F2 0000                       		dc.w byte_DD0E-Ani_obj41
0000E6F4 0001 0000 0202 0202 0202+  byte_DD02:	dc.b 0,	1, 0, 0, 2, 2, 2, 2, 2,	2, 0, $FC
0000E700 0004 0303 0505 0505 0505+  byte_DD0E:	dc.b 0,	4, 3, 3, 5, 5, 5, 5, 5,	5, 3, $FC
0000E70C                            		even
0000E70C                            		even
0000E70C                            
0000E70C                            ; ---------------------------------------------------------------------------
0000E70C                            ; Sprite mappings - springs
0000E70C                            ; ---------------------------------------------------------------------------
0000E70C                            Map_obj41:
0000E70C                            	include "_maps\obj41.asm"
0000E70C                            ; ---------------------------------------------------------------------------
0000E70C                            ; Sprite mappings - springs
0000E70C                            ; ---------------------------------------------------------------------------
0000E70C 0000                       		dc.w byte_DD26-Map_obj41
0000E70E 0000                       		dc.w byte_DD31-Map_obj41
0000E710 0000                       		dc.w byte_DD37-Map_obj41
0000E712 0000                       		dc.w byte_DD47-Map_obj41
0000E714 0000                       		dc.w byte_DD4D-Map_obj41
0000E716 0000                       		dc.w byte_DD53-Map_obj41
0000E718 02                         byte_DD26:	dc.b 2
0000E719 F80C 0000 F0               		dc.b $F8, $C, 0, 0, $F0
0000E71E 000C 0004 F0               		dc.b 0,	$C, 0, 4, $F0
0000E723 01                         byte_DD31:	dc.b 1
0000E724 000C 0000 F0               		dc.b 0,	$C, 0, 0, $F0
0000E729 03                         byte_DD37:	dc.b 3
0000E72A E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0
0000E72F F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000E734 000C 000C F0               		dc.b 0,	$C, 0, $C, $F0
0000E739 01                         byte_DD47:	dc.b 1
0000E73A F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
0000E73F 01                         byte_DD4D:	dc.b 1
0000E740 F003 0004 F8               		dc.b $F0, 3, 0,	4, $F8
0000E745 04                         byte_DD53:	dc.b 4
0000E746 F003 0004 10               		dc.b $F0, 3, 0,	4, $10
0000E74B F809 0008 F8               		dc.b $F8, 9, 0,	8, $F8
0000E750 F000 0000 F8               		dc.b $F0, 0, 0,	0, $F8
0000E755 0800 0003 F8               		dc.b 8,	0, 0, 3, $F8
0000E75A                            		even
0000E75A                            		even
0000E75A                            
0000E75A                            ; ===========================================================================
0000E75A                            ; ---------------------------------------------------------------------------
0000E75A                            ; Object 42 - Newtron enemy (GHZ)
0000E75A                            ; ---------------------------------------------------------------------------
0000E75A                            
0000E75A                            Obj42:					; XREF: Obj_Index
0000E75A 7000                       		moveq	#0,d0
0000E75C 1028 0024                  		move.b	$24(a0),d0
0000E760 323B 0000                  		move.w	Obj42_Index(pc,d0.w),d1
0000E764 4EFB 1000                  		jmp	Obj42_Index(pc,d1.w)
0000E768                            ; ===========================================================================
0000E768 0000                       Obj42_Index:	dc.w Obj42_Main-Obj42_Index
0000E76A 0000                       		dc.w Obj42_Action-Obj42_Index
0000E76C 0000                       		dc.w Obj42_Delete-Obj42_Index
0000E76E                            ; ===========================================================================
0000E76E                            
0000E76E                            Obj42_Main:				; XREF: Obj42_Index
0000E76E 5428 0024                  		addq.b	#2,$24(a0)
0000E772 217C 0000 0000 0004        		move.l	#Map_obj42,4(a0)
0000E77A 317C 049B 0002             		move.w	#$49B,2(a0)
0000E780 117C 0004 0001             		move.b	#4,1(a0)
0000E786 117C 0004 0018             		move.b	#4,$18(a0)
0000E78C 117C 0014 0019             		move.b	#$14,$19(a0)
0000E792 117C 0010 0016             		move.b	#$10,$16(a0)
0000E798 117C 0008 0017             		move.b	#8,$17(a0)
0000E79E                            
0000E79E                            Obj42_Action:				; XREF: Obj42_Index
0000E79E 7000                       		moveq	#0,d0
0000E7A0 1028 0025                  		move.b	$25(a0),d0
0000E7A4 323B 0000                  		move.w	Obj42_Index2(pc,d0.w),d1
0000E7A8 4EBB 1000                  		jsr	Obj42_Index2(pc,d1.w)
0000E7AC 43F9 0000 0000             		lea	(Ani_obj42).l,a1
0000E7B2 6100 C8A2                  		bsr.w	AnimateSprite
0000E7B6 6000 0000                  		bra.w	MarkObjGone
0000E7BA                            ; ===========================================================================
0000E7BA 0000                       Obj42_Index2:	dc.w Obj42_ChkDist-Obj42_Index2
0000E7BC 0000                       		dc.w Obj42_Type00-Obj42_Index2
0000E7BE 0000                       		dc.w Obj42_MatchFloor-Obj42_Index2
0000E7C0 0000                       		dc.w Obj42_Speed-Obj42_Index2
0000E7C2 0000                       		dc.w Obj42_Type01-Obj42_Index2
0000E7C4                            ; ===========================================================================
0000E7C4                            
0000E7C4                            Obj42_ChkDist:				; XREF: Obj42_Index2
0000E7C4 08E8 0000 0022             		bset	#0,$22(a0)
0000E7CA 3038 D008                  		move.w	($FFFFD008).w,d0
0000E7CE 9068 0008                  		sub.w	8(a0),d0
0000E7D2 6400                       		bcc.s	loc_DDEA
0000E7D4 4440                       		neg.w	d0
0000E7D6 08A8 0000 0022             		bclr	#0,$22(a0)
0000E7DC                            
0000E7DC                            loc_DDEA:
0000E7DC 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	the newtron?
0000E7E0 6400                       		bcc.s	locret_DE12	; if not, branch
0000E7E2 5428 0025                  		addq.b	#2,$25(a0)
0000E7E6 117C 0001 001C             		move.b	#1,$1C(a0)
0000E7EC 4A28 0028                  		tst.b	$28(a0)		; check	object type
0000E7F0 6700                       		beq.s	locret_DE12	; if type is 00, branch
0000E7F2 317C 249B 0002             		move.w	#$249B,2(a0)
0000E7F8 117C 0008 0025             		move.b	#8,$25(a0)	; run type 01 newtron subroutine
0000E7FE 117C 0004 001C             		move.b	#4,$1C(a0)	; use different	animation
0000E804                            
0000E804                            locret_DE12:
0000E804 4E75                       		rts	
0000E806                            ; ===========================================================================
0000E806                            
0000E806                            Obj42_Type00:				; XREF: Obj42_Index2
0000E806 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; has "appearing" animation finished?
0000E80C 6400                       		bcc.s	Obj42_Fall	; is yes, branch
0000E80E 08E8 0000 0022             		bset	#0,$22(a0)
0000E814 3038 D008                  		move.w	($FFFFD008).w,d0
0000E818 9068 0008                  		sub.w	8(a0),d0
0000E81C 6400                       		bcc.s	locret_DE32
0000E81E 08A8 0000 0022             		bclr	#0,$22(a0)
0000E824                            
0000E824                            locret_DE32:
0000E824 4E75                       		rts	
0000E826                            ; ===========================================================================
0000E826                            
0000E826                            Obj42_Fall:				; XREF: Obj42_Type00
0000E826 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000E82C 6600                       		bne.s	loc_DE42
0000E82E 117C 000C 0020             		move.b	#$C,$20(a0)
0000E834                            
0000E834                            loc_DE42:
0000E834 6100 F72A                  		bsr.w	ObjectFall
0000E838 6100 0000                  		bsr.w	ObjHitFloor
0000E83C 4A41                       		tst.w	d1		; has newtron hit the floor?
0000E83E 6A00                       		bpl.s	locret_DE86	; if not, branch
0000E840 D368 000C                  		add.w	d1,$C(a0)
0000E844 317C 0000 0012             		move.w	#0,$12(a0)	; stop newtron falling
0000E84A 5428 0025                  		addq.b	#2,$25(a0)
0000E84E 117C 0002 001C             		move.b	#2,$1C(a0)
0000E854 0828 0005 0002             		btst	#5,2(a0)
0000E85A 6700                       		beq.s	Obj42_Move
0000E85C 5228 001C                  		addq.b	#1,$1C(a0)
0000E860                            
0000E860                            Obj42_Move:
0000E860 117C 000D 0020             		move.b	#$D,$20(a0)
0000E866 317C 0200 0010             		move.w	#$200,$10(a0)	; move newtron horizontally
0000E86C 0828 0000 0022             		btst	#0,$22(a0)
0000E872 6600                       		bne.s	locret_DE86
0000E874 4468 0010                  		neg.w	$10(a0)
0000E878                            
0000E878                            locret_DE86:
0000E878 4E75                       		rts	
0000E87A                            ; ===========================================================================
0000E87A                            
0000E87A                            Obj42_MatchFloor:			; XREF: Obj42_Index2
0000E87A 6100 F756                  		bsr.w	SpeedToPos
0000E87E 6100 0000                  		bsr.w	ObjHitFloor
0000E882 0C41 FFF8                  		cmpi.w	#-8,d1
0000E886 6D00                       		blt.s	loc_DEA2
0000E888 0C41 000C                  		cmpi.w	#$C,d1
0000E88C 6C00                       		bge.s	loc_DEA2
0000E88E D368 000C                  		add.w	d1,$C(a0)	; match	newtron's position with floor
0000E892 4E75                       		rts	
0000E894                            ; ===========================================================================
0000E894                            
0000E894                            loc_DEA2:
0000E894 5428 0025                  		addq.b	#2,$25(a0)
0000E898 4E75                       		rts	
0000E89A                            ; ===========================================================================
0000E89A                            
0000E89A                            Obj42_Speed:				; XREF: Obj42_Index2
0000E89A 6100 F736                  		bsr.w	SpeedToPos
0000E89E 4E75                       		rts	
0000E8A0                            ; ===========================================================================
0000E8A0                            
0000E8A0                            Obj42_Type01:				; XREF: Obj42_Index2
0000E8A0 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000E8A6 6600                       		bne.s	Obj42_FireMissile
0000E8A8 117C 000C 0020             		move.b	#$C,$20(a0)
0000E8AE                            
0000E8AE                            Obj42_FireMissile:
0000E8AE 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000E8B4 6600                       		bne.s	locret_DF14
0000E8B6 4A28 0032                  		tst.b	$32(a0)
0000E8BA 6600                       		bne.s	locret_DF14
0000E8BC 117C 0001 0032             		move.b	#1,$32(a0)
0000E8C2 6100 FBBA                  		bsr.w	SingleObjLoad
0000E8C6 6600                       		bne.s	locret_DF14
0000E8C8 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
0000E8CC 3368 0008 0008             		move.w	8(a0),8(a1)
0000E8D2 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000E8D8 5169 000C                  		subq.w	#8,$C(a1)
0000E8DC 337C 0200 0010             		move.w	#$200,$10(a1)
0000E8E2 303C 0014                  		move.w	#$14,d0
0000E8E6 0828 0000 0022             		btst	#0,$22(a0)
0000E8EC 6600                       		bne.s	loc_DF04
0000E8EE 4440                       		neg.w	d0
0000E8F0 4469 0010                  		neg.w	$10(a1)
0000E8F4                            
0000E8F4                            loc_DF04:
0000E8F4 D169 0008                  		add.w	d0,8(a1)
0000E8F8 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000E8FE 137C 0001 0028             		move.b	#1,$28(a1)
0000E904                            
0000E904                            locret_DF14:
0000E904 4E75                       		rts	
0000E906                            ; ===========================================================================
0000E906                            
0000E906                            Obj42_Delete:				; XREF: Obj42_Index
0000E906 6000 F72C                  		bra.w	DeleteObject
0000E90A                            ; ===========================================================================
0000E90A                            Ani_obj42:
0000E90A                            	include "_anim\obj42.asm"
0000E90A                            ; ---------------------------------------------------------------------------
0000E90A                            ; Animation script - Newtron enemy
0000E90A                            ; ---------------------------------------------------------------------------
0000E90A 0000                       		dc.w byte_DF24-Ani_obj42
0000E90C 0000                       		dc.w byte_DF28-Ani_obj42
0000E90E 0000                       		dc.w byte_DF30-Ani_obj42
0000E910 0000                       		dc.w byte_DF34-Ani_obj42
0000E912 0000                       		dc.w byte_DF38-Ani_obj42
0000E914 0F0A FF00                  byte_DF24:	dc.b $F, $A, $FF, 0
0000E918 1300 0103 0405 FE01        byte_DF28:	dc.b $13, 0, 1,	3, 4, 5, $FE, 1
0000E920 0206 07FF                  byte_DF30:	dc.b 2,	6, 7, $FF
0000E924 0208 09FF                  byte_DF34:	dc.b 2,	8, 9, $FF
0000E928 1300 0101 0201 0100 FC00   byte_DF38:	dc.b $13, 0, 1,	1, 2, 1, 1, 0, $FC, 0
0000E932                            		even
0000E932                            		even
0000E932                            
0000E932                            ; ---------------------------------------------------------------------------
0000E932                            ; Sprite mappings - Newtron enemy (GHZ)
0000E932                            ; ---------------------------------------------------------------------------
0000E932                            Map_obj42:
0000E932                            	include "_maps\obj42.asm"
0000E932                            ; ---------------------------------------------------------------------------
0000E932                            ; Sprite mappings - Newtron enemy (GHZ)
0000E932                            ; ---------------------------------------------------------------------------
0000E932 0000 0000                  		dc.w byte_DF58-Map_obj42, byte_DF68-Map_obj42
0000E936 0000 0000                  		dc.w byte_DF78-Map_obj42, byte_DF88-Map_obj42
0000E93A 0000 0000                  		dc.w byte_DF9D-Map_obj42, byte_DFAD-Map_obj42
0000E93E 0000 0000                  		dc.w byte_DFB8-Map_obj42, byte_DFC8-Map_obj42
0000E942 0000 0000                  		dc.w byte_DFD8-Map_obj42, byte_DFE8-Map_obj42
0000E946 0000                       		dc.w byte_DFF8-Map_obj42
0000E948 03                         byte_DF58:	dc.b 3
0000E949 EC0D 0000 EC               		dc.b $EC, $D, 0, 0, $EC
0000E94E F400 0008 0C               		dc.b $F4, 0, 0,	8, $C
0000E953 FC0E 0009 F4               		dc.b $FC, $E, 0, 9, $F4
0000E958 03                         byte_DF68:	dc.b 3
0000E959 EC06 0015 EC               		dc.b $EC, 6, 0,	$15, $EC
0000E95E EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000E963 FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000E968 03                         byte_DF78:	dc.b 3
0000E969 EC06 002A EC               		dc.b $EC, 6, 0,	$2A, $EC
0000E96E EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000E973 FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000E978 04                         byte_DF88:	dc.b 4
0000E979 EC06 0030 EC               		dc.b $EC, 6, 0,	$30, $EC
0000E97E EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000E983 FC09 0036 FC               		dc.b $FC, 9, 0,	$36, $FC
0000E988 0C00 003C 0C               		dc.b $C, 0, 0, $3C, $C
0000E98D 03                         byte_DF9D:	dc.b 3
0000E98E F40D 003D EC               		dc.b $F4, $D, 0, $3D, $EC
0000E993 FC00 0020 0C               		dc.b $FC, 0, 0,	$20, $C
0000E998 0408 0045 FC               		dc.b 4,	8, 0, $45, $FC
0000E99D 02                         byte_DFAD:	dc.b 2
0000E99E F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E9A3 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E9A8 03                         byte_DFB8:	dc.b 3
0000E9A9 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E9AE F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E9B3 FE00 0052 14               		dc.b $FE, 0, 0,	$52, $14
0000E9B8 03                         byte_DFC8:	dc.b 3
0000E9B9 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E9BE F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E9C3 FE04 0053 14               		dc.b $FE, 4, 0,	$53, $14
0000E9C8 03                         byte_DFD8:	dc.b 3
0000E9C9 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E9CE F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E9D3 FE00 E052 14               		dc.b $FE, 0, $E0, $52, $14
0000E9D8 03                         byte_DFE8:	dc.b 3
0000E9D9 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E9DE F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E9E3 FE04 E053 14               		dc.b $FE, 4, $E0, $53, $14
0000E9E8 00                         byte_DFF8:	dc.b 0
0000E9EA 00                         		even
0000E9EA 00                         		even
0000E9EA                            
0000E9EA                            ; ===========================================================================
0000E9EA                            ; ---------------------------------------------------------------------------
0000E9EA                            ; Object 43 - Roller enemy (SYZ)
0000E9EA                            ; ---------------------------------------------------------------------------
0000E9EA                            
0000E9EA                            Obj43:					; XREF: Obj_Index
0000E9EA 7000                       		moveq	#0,d0
0000E9EC 1028 0024                  		move.b	$24(a0),d0
0000E9F0 323B 0000                  		move.w	Obj43_Index(pc,d0.w),d1
0000E9F4 4EFB 1000                  		jmp	Obj43_Index(pc,d1.w)
0000E9F8                            ; ===========================================================================
0000E9F8 0000                       Obj43_Index:	dc.w Obj43_Main-Obj43_Index
0000E9FA 0000                       		dc.w Obj43_Action-Obj43_Index
0000E9FC                            ; ===========================================================================
0000E9FC                            
0000E9FC                            Obj43_Main:				; XREF: Obj43_Index
0000E9FC 117C 000E 0016             		move.b	#$E,$16(a0)
0000EA02 117C 0008 0017             		move.b	#8,$17(a0)
0000EA08 6100 F556                  		bsr.w	ObjectFall
0000EA0C 6100 0000                  		bsr.w	ObjHitFloor
0000EA10 4A41                       		tst.w	d1
0000EA12 6A00                       		bpl.s	locret_E052
0000EA14 D368 000C                  		add.w	d1,$C(a0)	; match	roller's position with the floor
0000EA18 317C 0000 0012             		move.w	#0,$12(a0)
0000EA1E 5428 0024                  		addq.b	#2,$24(a0)
0000EA22 217C 0000 0000 0004        		move.l	#Map_obj43,4(a0)
0000EA2A 317C 04B8 0002             		move.w	#$4B8,2(a0)
0000EA30 117C 0004 0001             		move.b	#4,1(a0)
0000EA36 117C 0004 0018             		move.b	#4,$18(a0)
0000EA3C 117C 0010 0019             		move.b	#$10,$19(a0)
0000EA42                            
0000EA42                            locret_E052:
0000EA42 4E75                       		rts	
0000EA44                            ; ===========================================================================
0000EA44                            
0000EA44                            Obj43_Action:				; XREF: Obj43_Index
0000EA44 7000                       		moveq	#0,d0
0000EA46 1028 0025                  		move.b	$25(a0),d0
0000EA4A 323B 0000                  		move.w	Obj43_Index2(pc,d0.w),d1
0000EA4E 4EBB 1000                  		jsr	Obj43_Index2(pc,d1.w)
0000EA52 43F9 0000 0000             		lea	(Ani_obj43).l,a1
0000EA58 6100 C5FC                  		bsr.w	AnimateSprite
0000EA5C 3028 0008                  		move.w	8(a0),d0
0000EA60 0240 FF80                  		andi.w	#$FF80,d0
0000EA64 3238 F700                  		move.w	($FFFFF700).w,d1
0000EA68 0441 0080                  		subi.w	#$80,d1
0000EA6C 0241 FF80                  		andi.w	#$FF80,d1
0000EA70 9041                       		sub.w	d1,d0
0000EA72 0C40 0280                  		cmpi.w	#$280,d0
0000EA76 6E00 0000                  		bgt.w	Obj43_ChkGone
0000EA7A 6000 F57C                  		bra.w	DisplaySprite
0000EA7E                            ; ===========================================================================
0000EA7E                            
0000EA7E                            Obj43_ChkGone:				; XREF: Obj43_Action
0000EA7E 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000EA82 7000                       		moveq	#0,d0
0000EA84 1028 0023                  		move.b	$23(a0),d0
0000EA88 6700                       		beq.s	Obj43_Delete
0000EA8A 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000EA90                            
0000EA90                            Obj43_Delete:
0000EA90 6000 F5A2                  		bra.w	DeleteObject
0000EA94                            ; ===========================================================================
0000EA94 0000                       Obj43_Index2:	dc.w Obj43_RollChk-Obj43_Index2
0000EA96 0000                       		dc.w Obj43_RollNoChk-Obj43_Index2
0000EA98 0000                       		dc.w Obj43_ChkJump-Obj43_Index2
0000EA9A 0000                       		dc.w Obj43_MatchFloor-Obj43_Index2
0000EA9C                            ; ===========================================================================
0000EA9C                            
0000EA9C                            Obj43_RollChk:				; XREF: Obj43_Index2
0000EA9C 3038 D008                  		move.w	($FFFFD008).w,d0
0000EAA0 0440 0100                  		subi.w	#$100,d0
0000EAA4 6500                       		bcs.s	loc_E0D2
0000EAA6 9068 0008                  		sub.w	8(a0),d0	; check	distance between Roller	and Sonic
0000EAAA 6500                       		bcs.s	loc_E0D2
0000EAAC 5828 0025                  		addq.b	#4,$25(a0)
0000EAB0 117C 0002 001C             		move.b	#2,$1C(a0)
0000EAB6 317C 0700 0010             		move.w	#$700,$10(a0)	; move Roller horizontally
0000EABC 117C 008E 0020             		move.b	#$8E,$20(a0)	; make Roller invincible
0000EAC2                            
0000EAC2                            loc_E0D2:
0000EAC2 588F                       		addq.l	#4,sp
0000EAC4 4E75                       		rts	
0000EAC6                            ; ===========================================================================
0000EAC6                            
0000EAC6                            Obj43_RollNoChk:			; XREF: Obj43_Index2
0000EAC6 0C28 0002 001C             		cmpi.b	#2,$1C(a0)
0000EACC 6700                       		beq.s	loc_E0F8
0000EACE 5368 0030                  		subq.w	#1,$30(a0)
0000EAD2 6A00                       		bpl.s	locret_E0F6
0000EAD4 117C 0001 001C             		move.b	#1,$1C(a0)
0000EADA 317C 0700 0010             		move.w	#$700,$10(a0)
0000EAE0 117C 008E 0020             		move.b	#$8E,$20(a0)
0000EAE6                            
0000EAE6                            locret_E0F6:
0000EAE6 4E75                       		rts	
0000EAE8                            ; ===========================================================================
0000EAE8                            
0000EAE8                            loc_E0F8:
0000EAE8 5428 0025                  		addq.b	#2,$25(a0)
0000EAEC 4E75                       		rts	
0000EAEE                            ; ===========================================================================
0000EAEE                            
0000EAEE                            Obj43_ChkJump:				; XREF: Obj43_Index2
0000EAEE 6100 0000                  		bsr.w	Obj43_Stop
0000EAF2 6100 F4DE                  		bsr.w	SpeedToPos
0000EAF6 6100 0000                  		bsr.w	ObjHitFloor
0000EAFA 0C41 FFF8                  		cmpi.w	#-8,d1
0000EAFE 6D00                       		blt.s	Obj43_Jump
0000EB00 0C41 000C                  		cmpi.w	#$C,d1
0000EB04 6C00                       		bge.s	Obj43_Jump
0000EB06 D368 000C                  		add.w	d1,$C(a0)
0000EB0A 4E75                       		rts	
0000EB0C                            ; ===========================================================================
0000EB0C                            
0000EB0C                            Obj43_Jump:
0000EB0C 5428 0025                  		addq.b	#2,$25(a0)
0000EB10 08E8 0000 0032             		bset	#0,$32(a0)
0000EB16 6700                       		beq.s	locret_E12E
0000EB18 317C FA00 0012             		move.w	#-$600,$12(a0)	; move Roller vertically
0000EB1E                            
0000EB1E                            locret_E12E:
0000EB1E 4E75                       		rts	
0000EB20                            ; ===========================================================================
0000EB20                            
0000EB20                            Obj43_MatchFloor:			; XREF: Obj43_Index2
0000EB20 6100 F43E                  		bsr.w	ObjectFall
0000EB24 4A68 0012                  		tst.w	$12(a0)
0000EB28 6B00                       		bmi.s	locret_E150
0000EB2A 6100 0000                  		bsr.w	ObjHitFloor
0000EB2E 4A41                       		tst.w	d1
0000EB30 6A00                       		bpl.s	locret_E150
0000EB32 D368 000C                  		add.w	d1,$C(a0)	; match	Roller's position with the floor
0000EB36 5528 0025                  		subq.b	#2,$25(a0)
0000EB3A 317C 0000 0012             		move.w	#0,$12(a0)
0000EB40                            
0000EB40                            locret_E150:
0000EB40 4E75                       		rts	
0000EB42                            
0000EB42                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000EB42                            
0000EB42                            
0000EB42                            Obj43_Stop:				; XREF: Obj43_ChkJump
0000EB42 4A28 0032                  		tst.b	$32(a0)
0000EB46 6B00                       		bmi.s	locret_E188
0000EB48 3038 D008                  		move.w	($FFFFD008).w,d0
0000EB4C 0440 0030                  		subi.w	#$30,d0
0000EB50 9068 0008                  		sub.w	8(a0),d0
0000EB54 6400                       		bcc.s	locret_E188
0000EB56 117C 0000 001C             		move.b	#0,$1C(a0)
0000EB5C 117C 000E 0020             		move.b	#$E,$20(a0)
0000EB62 4268 0010                  		clr.w	$10(a0)
0000EB66 317C 0078 0030             		move.w	#120,$30(a0)	; set waiting time to 2	seconds
0000EB6C 117C 0002 0025             		move.b	#2,$25(a0)
0000EB72 08E8 0007 0032             		bset	#7,$32(a0)
0000EB78                            
0000EB78                            locret_E188:
0000EB78 4E75                       		rts	
0000EB7A                            ; End of function Obj43_Stop
0000EB7A                            
0000EB7A                            ; ===========================================================================
0000EB7A                            Ani_obj43:
0000EB7A                            	include "_anim\obj43.asm"
0000EB7A                            ; ---------------------------------------------------------------------------
0000EB7A                            ; Animation script - Roller enemy
0000EB7A                            ; ---------------------------------------------------------------------------
0000EB7A 0000                       		dc.w byte_E190-Ani_obj43
0000EB7C 0000                       		dc.w byte_E196-Ani_obj43
0000EB7E 0000                       		dc.w byte_E19C-Ani_obj43
0000EB80 0F02 0100 FE01             byte_E190:	dc.b $F, 2, 1, 0, $FE, 1
0000EB86 0F01 02FD 0200             byte_E196:	dc.b $F, 1, 2, $FD, 2, 0
0000EB8C 0303 0402 FF               byte_E19C:	dc.b 3,	3, 4, 2, $FF
0000EB92 00                         		even
0000EB92 00                         		even
0000EB92                            
0000EB92                            ; ---------------------------------------------------------------------------
0000EB92                            ; Sprite mappings - Roller enemy (SYZ)
0000EB92                            ; ---------------------------------------------------------------------------
0000EB92                            Map_obj43:
0000EB92                            	include "_maps\obj43.asm"
0000EB92                            Map_61da:
0000EB92 0000                       Map_61da_0: 	dc.w Map_61da_A-Map_61da
0000EB94 0000                       Map_61da_2: 	dc.w Map_61da_15-Map_61da
0000EB96 0000                       Map_61da_4: 	dc.w Map_61da_20-Map_61da
0000EB98 0000                       Map_61da_6: 	dc.w Map_61da_26-Map_61da
0000EB9A 0000                       Map_61da_8: 	dc.w Map_61da_2C-Map_61da
0000EB9C 02                         Map_61da_A: 	dc.b $2
0000EB9D DE0E 0000 F0               	dc.b $DE, $E, $0, $0, $F0
0000EBA2 F60E 000C F0               	dc.b $F6, $E, $0, $C, $F0
0000EBA7 02                         Map_61da_15: 	dc.b $2
0000EBA8 E60E 0000 F0               	dc.b $E6, $E, $0, $0, $F0
0000EBAD FE0D 0018 F0               	dc.b $FE, $D, $0, $18, $F0
0000EBB2 01                         Map_61da_20: 	dc.b $1
0000EBB3 F00F 0020 F0               	dc.b $F0, $F, $0, $20, $F0
0000EBB8 01                         Map_61da_26: 	dc.b $1
0000EBB9 F00F 0030 F0               	dc.b $F0, $F, $0, $30, $F0
0000EBBE 01                         Map_61da_2C: 	dc.b $1
0000EBBF F00F 0040 F0               	dc.b $F0, $F, $0, $40, $F0
0000EBC4                            	even
0000EBC4                            	even
0000EBC4                            
0000EBC4                            ; ===========================================================================
0000EBC4                            ; ---------------------------------------------------------------------------
0000EBC4                            ; Object 44 - walls (GHZ)
0000EBC4                            ; ---------------------------------------------------------------------------
0000EBC4                            
0000EBC4                            Obj44:					; XREF: Obj_Index
0000EBC4 7000                       		moveq	#0,d0
0000EBC6 1028 0024                  		move.b	$24(a0),d0
0000EBCA 323B 0000                  		move.w	Obj44_Index(pc,d0.w),d1
0000EBCE 4EFB 1000                  		jmp	Obj44_Index(pc,d1.w)
0000EBD2                            ; ===========================================================================
0000EBD2 0000                       Obj44_Index:	dc.w Obj44_Main-Obj44_Index
0000EBD4 0000                       		dc.w Obj44_Solid-Obj44_Index
0000EBD6 0000                       		dc.w Obj44_Display-Obj44_Index
0000EBD8                            ; ===========================================================================
0000EBD8                            
0000EBD8                            Obj44_Main:				; XREF: Obj44_Index
0000EBD8 5428 0024                  		addq.b	#2,$24(a0)
0000EBDC 217C 0000 0000 0004        		move.l	#Map_obj44,4(a0)
0000EBE4 317C 434C 0002             		move.w	#$434C,2(a0)
0000EBEA 0028 0004 0001             		ori.b	#4,1(a0)
0000EBF0 117C 0008 0019             		move.b	#8,$19(a0)
0000EBF6 117C 0006 0018             		move.b	#6,$18(a0)
0000EBFC 1168 0028 001A             		move.b	$28(a0),$1A(a0)	; copy object type number to frame number
0000EC02 08A8 0004 001A             		bclr	#4,$1A(a0)	; clear	4th bit	(deduct	$10)
0000EC08 6700                       		beq.s	Obj44_Solid	; make object solid if 4th bit = 0
0000EC0A 5428 0024                  		addq.b	#2,$24(a0)
0000EC0E 6000                       		bra.s	Obj44_Display	; don't make it solid if 4th bit = 1
0000EC10                            ; ===========================================================================
0000EC10                            
0000EC10                            Obj44_Solid:				; XREF: Obj44_Index
0000EC10 323C 0013                  		move.w	#$13,d1
0000EC14 343C 0028                  		move.w	#$28,d2
0000EC18 6100 A694                  		bsr.w	Obj44_SolidWall
0000EC1C                            
0000EC1C                            Obj44_Display:				; XREF: Obj44_Index
0000EC1C 6100 F3DA                  		bsr.w	DisplaySprite
0000EC20 3028 0008                  		move.w	8(a0),d0
0000EC24 0240 FF80                  		andi.w	#$FF80,d0
0000EC28 3238 F700                  		move.w	($FFFFF700).w,d1
0000EC2C 0441 0080                  		subi.w	#$80,d1
0000EC30 0241 FF80                  		andi.w	#$FF80,d1
0000EC34 9041                       		sub.w	d1,d0
0000EC36 0C40 0280                  		cmpi.w	#$280,d0
0000EC3A 6200 F3F8                  		bhi.w	DeleteObject
0000EC3E 4E75                       		rts	
0000EC40                            ; ===========================================================================
0000EC40                            ; ---------------------------------------------------------------------------
0000EC40                            ; Sprite mappings - walls (GHZ)
0000EC40                            ; ---------------------------------------------------------------------------
0000EC40                            Map_obj44:
0000EC40                            	include "_maps\obj44.asm"
0000EC40                            ; ---------------------------------------------------------------------------
0000EC40                            ; Sprite mappings - walls (GHZ)
0000EC40                            ; ---------------------------------------------------------------------------
0000EC40 0000                       		dc.w byte_E256-Map_obj44
0000EC42 0000                       		dc.w byte_E26B-Map_obj44
0000EC44 0000                       		dc.w byte_E280-Map_obj44
0000EC46 04                         byte_E256:	dc.b 4
0000EC47 E005 0004 F8               		dc.b $E0, 5, 0,	4, $F8
0000EC4C F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000EC51 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000EC56 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000EC5B 04                         byte_E26B:	dc.b 4
0000EC5C E005 0008 F8               		dc.b $E0, 5, 0,	8, $F8
0000EC61 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000EC66 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000EC6B 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000EC70 04                         byte_E280:	dc.b 4
0000EC71 E005 0000 F8               		dc.b $E0, 5, 0,	0, $F8
0000EC76 F005 0000 F8               		dc.b $F0, 5, 0,	0, $F8
0000EC7B 0005 0000 F8               		dc.b 0,	5, 0, 0, $F8
0000EC80 1005 0000 F8               		dc.b $10, 5, 0,	0, $F8
0000EC86 00                         		even
0000EC86 00                         		even
0000EC86                            
0000EC86                            ; ===========================================================================
0000EC86                            ; ---------------------------------------------------------------------------
0000EC86                            ; Object 13 - lava ball	producer (MZ, SLZ)
0000EC86                            ; ---------------------------------------------------------------------------
0000EC86                            
0000EC86                            Obj13:					; XREF: Obj_Index
0000EC86 7000                       		moveq	#0,d0
0000EC88 1028 0024                  		move.b	$24(a0),d0
0000EC8C 323B 0000                  		move.w	Obj13_Index(pc,d0.w),d1
0000EC90 4EBB 1000                  		jsr	Obj13_Index(pc,d1.w)
0000EC94 6000 0000                  		bra.w	Obj14_ChkDel
0000EC98                            ; ===========================================================================
0000EC98 0000                       Obj13_Index:	dc.w Obj13_Main-Obj13_Index
0000EC9A 0000                       		dc.w Obj13_MakeLava-Obj13_Index
0000EC9C                            ; ---------------------------------------------------------------------------
0000EC9C                            ;
0000EC9C                            ; Lava ball production rates
0000EC9C                            ;
0000EC9C 1E3C 5A78 96B4             Obj13_Rates:	dc.b 30, 60, 90, 120, 150, 180
0000ECA2                            ; ===========================================================================
0000ECA2                            
0000ECA2                            Obj13_Main:				; XREF: Obj13_Index
0000ECA2 5428 0024                  		addq.b	#2,$24(a0)
0000ECA6 1028 0028                  		move.b	$28(a0),d0
0000ECAA E848                       		lsr.w	#4,d0
0000ECAC 0240 000F                  		andi.w	#$F,d0
0000ECB0 117B 00EA 001F             		move.b	Obj13_Rates(pc,d0.w),$1F(a0)
0000ECB6 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; set time delay for lava balls
0000ECBC 0228 000F 0028             		andi.b	#$F,$28(a0)
0000ECC2                            
0000ECC2                            Obj13_MakeLava:				; XREF: Obj13_Index
0000ECC2 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from time delay
0000ECC6 6600                       		bne.s	locret_E302	; if time still	remains, branch
0000ECC8 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; reset	time delay
0000ECCE 6100 F5A2                  		bsr.w	ChkObjOnScreen
0000ECD2 6600                       		bne.s	locret_E302
0000ECD4 6100 F7A8                  		bsr.w	SingleObjLoad
0000ECD8 6600                       		bne.s	locret_E302
0000ECDA 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
0000ECDE 3368 0008 0008             		move.w	8(a0),8(a1)
0000ECE4 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000ECEA 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000ECF0                            
0000ECF0                            locret_E302:
0000ECF0 4E75                       		rts	
0000ECF2                            ; ===========================================================================
0000ECF2                            ; ---------------------------------------------------------------------------
0000ECF2                            ; Object 14 - lava balls (MZ, SLZ)
0000ECF2                            ; ---------------------------------------------------------------------------
0000ECF2                            
0000ECF2                            Obj14:					; XREF: Obj_Index
0000ECF2 7000                       		moveq	#0,d0
0000ECF4 1028 0024                  		move.b	$24(a0),d0
0000ECF8 323B 0000                  		move.w	Obj14_Index(pc,d0.w),d1
0000ECFC 4EBB 1000                  		jsr	Obj14_Index(pc,d1.w)
0000ED00 6000 F2F6                  		bra.w	DisplaySprite
0000ED04                            ; ===========================================================================
0000ED04 0000                       Obj14_Index:	dc.w Obj14_Main-Obj14_Index
0000ED06 0000                       		dc.w Obj14_Action-Obj14_Index
0000ED08 0000                       		dc.w Obj14_Delete-Obj14_Index
0000ED0A                            
0000ED0A FC00 FB00 FA00 F900 FE00   Obj14_Speeds:	dc.w $FC00, $FB00, $FA00, $F900, $FE00
0000ED14 0200 FE00 0200 0000        		dc.w $200, $FE00, $200,	0
0000ED1C                            ; ===========================================================================
0000ED1C                            
0000ED1C                            Obj14_Main:				; XREF: Obj14_Index
0000ED1C 5428 0024                  		addq.b	#2,$24(a0)
0000ED20 117C 0008 0016             		move.b	#8,$16(a0)
0000ED26 117C 0008 0017             		move.b	#8,$17(a0)
0000ED2C 217C 0000 BC54 0004        		move.l	#Map_obj14,4(a0)
0000ED34 317C 0345 0002             		move.w	#$345,2(a0)
0000ED3A 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
0000ED40 6600                       		bne.s	loc_E35A
0000ED42 317C 0480 0002             		move.w	#$480,2(a0)	; SLZ specific code
0000ED48                            
0000ED48                            loc_E35A:
0000ED48 117C 0004 0001             		move.b	#4,1(a0)
0000ED4E 117C 0003 0018             		move.b	#3,$18(a0)
0000ED54 117C 008B 0020             		move.b	#$8B,$20(a0)
0000ED5A 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000ED60 4A28 0029                  		tst.b	$29(a0)
0000ED64 6700                       		beq.s	Obj14_SetSpeed
0000ED66 5428 0018                  		addq.b	#2,$18(a0)
0000ED6A                            
0000ED6A                            Obj14_SetSpeed:
0000ED6A 7000                       		moveq	#0,d0
0000ED6C 1028 0028                  		move.b	$28(a0),d0
0000ED70 D040                       		add.w	d0,d0
0000ED72 317B 0096 0012             		move.w	Obj14_Speeds(pc,d0.w),$12(a0) ;	load object speed (vertical)
0000ED78 117C 0008 0019             		move.b	#8,$19(a0)
0000ED7E 0C28 0006 0028             		cmpi.b	#6,$28(a0)	; is object type below $6 ?
0000ED84 6500                       		bcs.s	Obj14_PlaySnd	; if yes, branch
0000ED86 117C 0010 0019             		move.b	#$10,$19(a0)
0000ED8C 117C 0002 001C             		move.b	#2,$1C(a0)	; use horizontal animation
0000ED92 3168 0012 0010             		move.w	$12(a0),$10(a0)	; set horizontal speed
0000ED98 317C 0000 0012             		move.w	#0,$12(a0)	; delete vertical speed
0000ED9E                            
0000ED9E                            Obj14_PlaySnd:
0000ED9E 303C 00AE                  		move.w	#$AE,d0
0000EDA2 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play lava ball sound
0000EDA8                            
0000EDA8                            Obj14_Action:				; XREF: Obj14_Index
0000EDA8 7000                       		moveq	#0,d0
0000EDAA 1028 0028                  		move.b	$28(a0),d0
0000EDAE D040                       		add.w	d0,d0
0000EDB0 323B 0000                  		move.w	Obj14_TypeIndex(pc,d0.w),d1
0000EDB4 4EBB 1000                  		jsr	Obj14_TypeIndex(pc,d1.w)
0000EDB8 6100 F218                  		bsr.w	SpeedToPos
0000EDBC 43F9 0000 0000             		lea	(Ani_obj14).l,a1
0000EDC2 6100 C292                  		bsr.w	AnimateSprite
0000EDC6                            
0000EDC6                            Obj14_ChkDel:				; XREF: Obj13
0000EDC6 3028 0008                  		move.w	8(a0),d0
0000EDCA 0240 FF80                  		andi.w	#$FF80,d0
0000EDCE 3238 F700                  		move.w	($FFFFF700).w,d1
0000EDD2 0441 0080                  		subi.w	#$80,d1
0000EDD6 0241 FF80                  		andi.w	#$FF80,d1
0000EDDA 9041                       		sub.w	d1,d0
0000EDDC 0C40 0280                  		cmpi.w	#$280,d0
0000EDE0 6200 F252                  		bhi.w	DeleteObject
0000EDE4 4E75                       		rts	
0000EDE6                            ; ===========================================================================
0000EDE6 0000 0000                  Obj14_TypeIndex:dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000EDEA 0000 0000                  		dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000EDEE 0000 0000                  		dc.w Obj14_Type04-Obj14_TypeIndex, Obj14_Type05-Obj14_TypeIndex
0000EDF2 0000 0000                  		dc.w Obj14_Type06-Obj14_TypeIndex, Obj14_Type07-Obj14_TypeIndex
0000EDF6 0000                       		dc.w Obj14_Type08-Obj14_TypeIndex
0000EDF8                            ; ===========================================================================
0000EDF8                            ; lavaball types 00-03 fly up and fall back down
0000EDF8                            
0000EDF8                            Obj14_Type00:				; XREF: Obj14_TypeIndex
0000EDF8 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's downward speed
0000EDFE 3028 0030                  		move.w	$30(a0),d0
0000EE02 B068 000C                  		cmp.w	$C(a0),d0	; has object fallen back to its	original position?
0000EE06 6400                       		bcc.s	loc_E41E	; if not, branch
0000EE08 5428 0024                  		addq.b	#2,$24(a0)	; goto "Obj14_Delete" routine
0000EE0C                            
0000EE0C                            loc_E41E:
0000EE0C 08A8 0001 0022             		bclr	#1,$22(a0)
0000EE12 4A68 0012                  		tst.w	$12(a0)
0000EE16 6A00                       		bpl.s	locret_E430
0000EE18 08E8 0001 0022             		bset	#1,$22(a0)
0000EE1E                            
0000EE1E                            locret_E430:
0000EE1E 4E75                       		rts	
0000EE20                            ; ===========================================================================
0000EE20                            ; lavaball type	04 flies up until it hits the ceiling
0000EE20                            
0000EE20                            Obj14_Type04:				; XREF: Obj14_TypeIndex
0000EE20 08E8 0001 0022             		bset	#1,$22(a0)
0000EE26 6100 0000                  		bsr.w	ObjHitCeiling
0000EE2A 4A41                       		tst.w	d1
0000EE2C 6A00                       		bpl.s	locret_E452
0000EE2E 117C 0008 0028             		move.b	#8,$28(a0)
0000EE34 117C 0001 001C             		move.b	#1,$1C(a0)
0000EE3A 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the ceiling
0000EE40                            
0000EE40                            locret_E452:
0000EE40 4E75                       		rts	
0000EE42                            ; ===========================================================================
0000EE42                            ; lavaball type	05 falls down until it hits the	floor
0000EE42                            
0000EE42                            Obj14_Type05:				; XREF: Obj14_TypeIndex
0000EE42 08A8 0001 0022             		bclr	#1,$22(a0)
0000EE48 6100 0000                  		bsr.w	ObjHitFloor
0000EE4C 4A41                       		tst.w	d1
0000EE4E 6A00                       		bpl.s	locret_E474
0000EE50 117C 0008 0028             		move.b	#8,$28(a0)
0000EE56 117C 0001 001C             		move.b	#1,$1C(a0)
0000EE5C 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the floor
0000EE62                            
0000EE62                            locret_E474:
0000EE62 4E75                       		rts	
0000EE64                            ; ===========================================================================
0000EE64                            ; lavaball types 06-07 move sideways
0000EE64                            
0000EE64                            Obj14_Type06:				; XREF: Obj14_TypeIndex
0000EE64 08E8 0000 0022             		bset	#0,$22(a0)
0000EE6A 76F8                       		moveq	#-8,d3
0000EE6C 6100 0000                  		bsr.w	ObjHitWallLeft
0000EE70 4A41                       		tst.w	d1
0000EE72 6A00                       		bpl.s	locret_E498
0000EE74 117C 0008 0028             		move.b	#8,$28(a0)
0000EE7A 117C 0003 001C             		move.b	#3,$1C(a0)
0000EE80 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000EE86                            
0000EE86                            locret_E498:
0000EE86 4E75                       		rts	
0000EE88                            ; ===========================================================================
0000EE88                            
0000EE88                            Obj14_Type07:				; XREF: Obj14_TypeIndex
0000EE88 08A8 0000 0022             		bclr	#0,$22(a0)
0000EE8E 7608                       		moveq	#8,d3
0000EE90 6100 0000                  		bsr.w	ObjHitWallRight
0000EE94 4A41                       		tst.w	d1
0000EE96 6A00                       		bpl.s	locret_E4BC
0000EE98 117C 0008 0028             		move.b	#8,$28(a0)
0000EE9E 117C 0003 001C             		move.b	#3,$1C(a0)
0000EEA4 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000EEAA                            
0000EEAA                            locret_E4BC:
0000EEAA 4E75                       		rts	
0000EEAC                            ; ===========================================================================
0000EEAC                            
0000EEAC                            Obj14_Type08:				; XREF: Obj14_TypeIndex
0000EEAC 4E75                       		rts	
0000EEAE                            ; ===========================================================================
0000EEAE                            
0000EEAE                            Obj14_Delete:				; XREF: Obj14_Index
0000EEAE 6000 F184                  		bra.w	DeleteObject
0000EEB2                            ; ===========================================================================
0000EEB2                            Ani_obj14:
0000EEB2                            	include "_anim\obj14.asm"
0000EEB2                            ; ---------------------------------------------------------------------------
0000EEB2                            ; Animation script - lava balls
0000EEB2                            ; ---------------------------------------------------------------------------
0000EEB2 0000                       		dc.w byte_E4CC-Ani_obj14
0000EEB4 0000                       		dc.w byte_E4D2-Ani_obj14
0000EEB6 0000                       		dc.w byte_E4D6-Ani_obj14
0000EEB8 0000                       		dc.w byte_E4DC-Ani_obj14
0000EEBA 0500 2001 21FF             byte_E4CC:	dc.b 5,	0, $20,	1, $21,	$FF
0000EEC0 0502 FC00                  byte_E4D2:	dc.b 5,	2, $FC,	0
0000EEC4 0503 4304 44FF             byte_E4D6:	dc.b 5,	3, $43,	4, $44,	$FF
0000EECA 0505 FC00                  byte_E4DC:	dc.b 5,	5, $FC,	0
0000EECE                            		even
0000EECE                            		even
0000EECE                            
0000EECE                            ; ===========================================================================
0000EECE                            ; ---------------------------------------------------------------------------
0000EECE                            ; Object 6D - flame thrower (SBZ)
0000EECE                            ; ---------------------------------------------------------------------------
0000EECE                            
0000EECE                            Obj6D:					; XREF: Obj_Index
0000EECE 7000                       		moveq	#0,d0
0000EED0 1028 0024                  		move.b	$24(a0),d0
0000EED4 323B 0000                  		move.w	Obj6D_Index(pc,d0.w),d1
0000EED8 4EFB 1000                  		jmp	Obj6D_Index(pc,d1.w)
0000EEDC                            ; ===========================================================================
0000EEDC 0000                       Obj6D_Index:	dc.w Obj6D_Main-Obj6D_Index
0000EEDE 0000                       		dc.w Obj6D_Action-Obj6D_Index
0000EEE0                            ; ===========================================================================
0000EEE0                            
0000EEE0                            Obj6D_Main:				; XREF: Obj6D_Index
0000EEE0 5428 0024                  		addq.b	#2,$24(a0)
0000EEE4 217C 0000 0000 0004        		move.l	#Map_obj6D,4(a0)
0000EEEC 317C 83D9 0002             		move.w	#$83D9,2(a0)
0000EEF2 0028 0004 0001             		ori.b	#4,1(a0)
0000EEF8 117C 0001 0018             		move.b	#1,$18(a0)
0000EEFE 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000EF04 117C 000C 0019             		move.b	#$C,$19(a0)
0000EF0A 1028 0028                  		move.b	$28(a0),d0
0000EF0E 0240 00F0                  		andi.w	#$F0,d0		; read 1st digit of object type
0000EF12 D040                       		add.w	d0,d0		; multiply by 2
0000EF14 3140 0030                  		move.w	d0,$30(a0)
0000EF18 3140 0032                  		move.w	d0,$32(a0)	; set flaming time
0000EF1C 1028 0028                  		move.b	$28(a0),d0
0000EF20 0240 000F                  		andi.w	#$F,d0		; read 2nd digit of object type
0000EF24 EB48                       		lsl.w	#5,d0		; multiply by $20
0000EF26 3140 0034                  		move.w	d0,$34(a0)	; set pause time
0000EF2A 117C 000A 0036             		move.b	#$A,$36(a0)
0000EF30 0828 0001 0022             		btst	#1,$22(a0)
0000EF36 6700                       		beq.s	Obj6D_Action
0000EF38 117C 0002 001C             		move.b	#2,$1C(a0)
0000EF3E 117C 0015 0036             		move.b	#$15,$36(a0)
0000EF44                            
0000EF44                            Obj6D_Action:				; XREF: Obj6D_Index
0000EF44 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
0000EF48 6A00                       		bpl.s	loc_E57A	; if time remains, branch
0000EF4A 3168 0034 0030             		move.w	$34(a0),$30(a0)	; begin	pause time
0000EF50 0868 0000 001C             		bchg	#0,$1C(a0)
0000EF56 6700                       		beq.s	loc_E57A
0000EF58 3168 0032 0030             		move.w	$32(a0),$30(a0)	; begin	flaming	time
0000EF5E 303C 00B3                  		move.w	#$B3,d0
0000EF62 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play flame sound
0000EF68                            
0000EF68                            loc_E57A:
0000EF68 43F9 0000 0000             		lea	(Ani_obj6D).l,a1
0000EF6E 6100 C0E6                  		bsr.w	AnimateSprite
0000EF72 117C 0000 0020             		move.b	#0,$20(a0)
0000EF78 1028 0036                  		move.b	$36(a0),d0
0000EF7C B028 001A                  		cmp.b	$1A(a0),d0
0000EF80 6600                       		bne.s	Obj6D_ChkDel
0000EF82 117C 00A3 0020             		move.b	#$A3,$20(a0)
0000EF88                            
0000EF88                            Obj6D_ChkDel:
0000EF88 3028 0008                  		move.w	8(a0),d0
0000EF8C 0240 FF80                  		andi.w	#$FF80,d0
0000EF90 3238 F700                  		move.w	($FFFFF700).w,d1
0000EF94 0441 0080                  		subi.w	#$80,d1
0000EF98 0241 FF80                  		andi.w	#$FF80,d1
0000EF9C 9041                       		sub.w	d1,d0
0000EF9E 0C40 0280                  		cmpi.w	#$280,d0
0000EFA2 6200 F090                  		bhi.w	DeleteObject
0000EFA6 6000 F050                  		bra.w	DisplaySprite
0000EFAA                            ; ===========================================================================
0000EFAA                            Ani_obj6D:
0000EFAA                            	include "_anim\obj6D.asm"
0000EFAA                            ; ---------------------------------------------------------------------------
0000EFAA                            ; Animation script - flamethrower (SBZ)
0000EFAA                            ; ---------------------------------------------------------------------------
0000EFAA 0000                       		dc.w byte_E5C4-Ani_obj6D
0000EFAC 0000                       		dc.w byte_E5D2-Ani_obj6D
0000EFAE 0000                       		dc.w byte_E5DC-Ani_obj6D
0000EFB0 0000                       		dc.w byte_E5EA-Ani_obj6D
0000EFB2 0300 0102 0304 0506 0708+  byte_E5C4:	dc.b 3,	0, 1, 2, 3, 4, 5, 6, 7,	8, 9, $A, $FE, 2
0000EFC0 0009 0705 0301 00FE 0100   byte_E5D2:	dc.b 0,	9, 7, 5, 3, 1, 0, $FE, 1, 0
0000EFCA 030B 0C0D 0E0F 1011 1213+  byte_E5DC:	dc.b 3,	$B, $C,	$D, $E,	$F, $10, $11, $12, $13,	$14, $15, $FE, 2
0000EFD8 0014 1211 0F0D 0BFE 0100   byte_E5EA:	dc.b 0,	$14, $12, $11, $F, $D, $B, $FE,	1, 0
0000EFE2                            		even
0000EFE2                            		even
0000EFE2                            
0000EFE2                            ; ---------------------------------------------------------------------------
0000EFE2                            ; Sprite mappings - flame thrower (SBZ)
0000EFE2                            ; ---------------------------------------------------------------------------
0000EFE2                            Map_obj6D:
0000EFE2                            	include "_maps\obj6D.asm"
0000EFE2                            ; ---------------------------------------------------------------------------
0000EFE2                            ; Sprite mappings - flame thrower (SBZ)
0000EFE2                            ; ---------------------------------------------------------------------------
0000EFE2 0000 0000                  		dc.w byte_E620-Map_obj6D, byte_E626-Map_obj6D
0000EFE6 0000 0000                  		dc.w byte_E631-Map_obj6D, byte_E63C-Map_obj6D
0000EFEA 0000 0000                  		dc.w byte_E64C-Map_obj6D, byte_E65C-Map_obj6D
0000EFEE 0000 0000                  		dc.w byte_E671-Map_obj6D, byte_E686-Map_obj6D
0000EFF2 0000 0000                  		dc.w byte_E6A0-Map_obj6D, byte_E6BA-Map_obj6D
0000EFF6 0000 0000                  		dc.w byte_E6D9-Map_obj6D, byte_E6F8-Map_obj6D
0000EFFA 0000 0000                  		dc.w byte_E6FE-Map_obj6D, byte_E709-Map_obj6D
0000EFFE 0000 0000                  		dc.w byte_E714-Map_obj6D, byte_E724-Map_obj6D
0000F002 0000 0000                  		dc.w byte_E734-Map_obj6D, byte_E749-Map_obj6D
0000F006 0000 0000                  		dc.w byte_E75E-Map_obj6D, byte_E778-Map_obj6D
0000F00A 0000 0000                  		dc.w byte_E792-Map_obj6D, byte_E7B1-Map_obj6D
0000F00E 01                         byte_E620:	dc.b 1
0000F00F 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F014 02                         byte_E626:	dc.b 2
0000F015 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F01A 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F01F 02                         byte_E631:	dc.b 2
0000F020 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F025 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F02A 03                         byte_E63C:	dc.b 3
0000F02B 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000F030 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F035 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F03A 03                         byte_E64C:	dc.b 3
0000F03B 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F040 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F045 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F04A 04                         byte_E65C:	dc.b 4
0000F04B 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000F050 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000F055 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F05A 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F05F 04                         byte_E671:	dc.b 4
0000F060 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000F065 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F06A 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F06F 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F074 05                         byte_E686:	dc.b 5
0000F075 F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0000F07A 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000F07F 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000F084 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F089 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F08E 05                         byte_E6A0:	dc.b 5
0000F08F F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000F094 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000F099 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F09E 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F0A3 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F0A8 06                         byte_E6BA:	dc.b 6
0000F0A9 E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0000F0AE F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0000F0B3 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000F0B8 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0000F0BD 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F0C2 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F0C7 06                         byte_E6D9:	dc.b 6
0000F0C8 E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0000F0CD F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000F0D2 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0000F0D7 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F0DC 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F0E1 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F0E6 01                         byte_E6F8:	dc.b 1
0000F0E7 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F0EC 02                         byte_E6FE:	dc.b 2
0000F0ED 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F0F2 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F0F7 02                         byte_E709:	dc.b 2
0000F0F8 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F0FD 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F102 03                         byte_E714:	dc.b 3
0000F103 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000F108 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F10D 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F112 03                         byte_E724:	dc.b 3
0000F113 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F118 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F11D 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F122 04                         byte_E734:	dc.b 4
0000F123 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000F128 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000F12D 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F132 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F137 04                         byte_E749:	dc.b 4
0000F138 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000F13D 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F142 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F147 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F14C 05                         byte_E75E:	dc.b 5
0000F14D F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0000F152 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000F157 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000F15C 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F161 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F166 05                         byte_E778:	dc.b 5
0000F167 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000F16C 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000F171 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F176 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F17B 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F180 06                         byte_E792:	dc.b 6
0000F181 E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0000F186 F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0000F18B 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000F190 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0000F195 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F19A 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F19F 06                         byte_E7B1:	dc.b 6
0000F1A0 E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0000F1A5 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000F1AA 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0000F1AF 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F1B4 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F1B9 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F1BE                            		even
0000F1BE                            		even
0000F1BE                            
0000F1BE                            ; ===========================================================================
0000F1BE                            ; ---------------------------------------------------------------------------
0000F1BE                            ; Object 46 - solid blocks and blocks that fall	from the ceiling (MZ)
0000F1BE                            ; ---------------------------------------------------------------------------
0000F1BE                            
0000F1BE                            Obj46:					; XREF: Obj_Index
0000F1BE 7000                       		moveq	#0,d0
0000F1C0 1028 0024                  		move.b	$24(a0),d0
0000F1C4 323B 0000                  		move.w	Obj46_Index(pc,d0.w),d1
0000F1C8 4EFB 1000                  		jmp	Obj46_Index(pc,d1.w)
0000F1CC                            ; ===========================================================================
0000F1CC 0000                       Obj46_Index:	dc.w Obj46_Main-Obj46_Index
0000F1CE 0000                       		dc.w Obj46_Action-Obj46_Index
0000F1D0                            ; ===========================================================================
0000F1D0                            
0000F1D0                            Obj46_Main:				; XREF: Obj46_Index
0000F1D0 5428 0024                  		addq.b	#2,$24(a0)
0000F1D4 117C 000F 0016             		move.b	#$F,$16(a0)
0000F1DA 117C 000F 0017             		move.b	#$F,$17(a0)
0000F1E0 217C 0000 0000 0004        		move.l	#Map_obj46,4(a0)
0000F1E8 317C 4000 0002             		move.w	#$4000,2(a0)
0000F1EE 117C 0004 0001             		move.b	#4,1(a0)
0000F1F4 117C 0003 0018             		move.b	#3,$18(a0)
0000F1FA 117C 0010 0019             		move.b	#$10,$19(a0)
0000F200 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000F206 317C 05C0 0032             		move.w	#$5C0,$32(a0)
0000F20C                            
0000F20C                            Obj46_Action:				; XREF: Obj46_Index
0000F20C 4A28 0001                  		tst.b	1(a0)
0000F210 6A00                       		bpl.s	Obj46_ChkDel
0000F212 7000                       		moveq	#0,d0
0000F214 1028 0028                  		move.b	$28(a0),d0	; get object type
0000F218 0240 0007                  		andi.w	#7,d0		; read only the	1st digit
0000F21C D040                       		add.w	d0,d0
0000F21E 323B 0000                  		move.w	Obj46_TypeIndex(pc,d0.w),d1
0000F222 4EBB 1000                  		jsr	Obj46_TypeIndex(pc,d1.w)
0000F226 323C 001B                  		move.w	#$1B,d1
0000F22A 343C 0010                  		move.w	#$10,d2
0000F22E 363C 0011                  		move.w	#$11,d3
0000F232 3828 0008                  		move.w	8(a0),d4
0000F236 6100 0000                  		bsr.w	SolidObject
0000F23A                            
0000F23A                            Obj46_ChkDel:
0000F23A 6100 EDBC                  		bsr.w	DisplaySprite
0000F23E 3028 0008                  		move.w	8(a0),d0
0000F242 0240 FF80                  		andi.w	#$FF80,d0
0000F246 3238 F700                  		move.w	($FFFFF700).w,d1
0000F24A 0441 0080                  		subi.w	#$80,d1
0000F24E 0241 FF80                  		andi.w	#$FF80,d1
0000F252 9041                       		sub.w	d1,d0
0000F254 0C40 0280                  		cmpi.w	#$280,d0
0000F258 6200 EDDA                  		bhi.w	DeleteObject
0000F25C 4E75                       		rts	
0000F25E                            ; ===========================================================================
0000F25E 0000                       Obj46_TypeIndex:dc.w Obj46_Type00-Obj46_TypeIndex
0000F260 0000                       		dc.w Obj46_Type01-Obj46_TypeIndex
0000F262 0000                       		dc.w Obj46_Type02-Obj46_TypeIndex
0000F264 0000                       		dc.w Obj46_Type03-Obj46_TypeIndex
0000F266 0000                       		dc.w Obj46_Type04-Obj46_TypeIndex
0000F268                            ; ===========================================================================
0000F268                            
0000F268                            Obj46_Type00:				; XREF: Obj46_TypeIndex
0000F268 4E75                       		rts	
0000F26A                            ; ===========================================================================
0000F26A                            
0000F26A                            Obj46_Type02:				; XREF: Obj46_TypeIndex
0000F26A 3038 D008                  		move.w	($FFFFD008).w,d0
0000F26E 9068 0008                  		sub.w	8(a0),d0
0000F272 6400                       		bcc.s	loc_E888
0000F274 4440                       		neg.w	d0
0000F276                            
0000F276                            loc_E888:
0000F276 0C40 0090                  		cmpi.w	#$90,d0		; is Sonic within $90 pixels of	the block?
0000F27A 6400                       		bcc.s	Obj46_Type01	; if not, resume wobbling
0000F27C 117C 0003 0028             		move.b	#3,$28(a0)	; if yes, make the block fall
0000F282                            
0000F282                            Obj46_Type01:				; XREF: Obj46_TypeIndex
0000F282 7000                       		moveq	#0,d0
0000F284 1038 FE74                  		move.b	($FFFFFE74).w,d0
0000F288 0828 0003 0028             		btst	#3,$28(a0)
0000F28E 6700                       		beq.s	loc_E8A8
0000F290 4440                       		neg.w	d0
0000F292 0640 0010                  		addi.w	#$10,d0
0000F296                            
0000F296                            loc_E8A8:
0000F296 3228 0030                  		move.w	$30(a0),d1
0000F29A 9240                       		sub.w	d0,d1
0000F29C 3141 000C                  		move.w	d1,$C(a0)	; update the block's position to make it wobble
0000F2A0 4E75                       		rts	
0000F2A2                            ; ===========================================================================
0000F2A2                            
0000F2A2                            Obj46_Type03:				; XREF: Obj46_TypeIndex
0000F2A2 6100 ED2E                  		bsr.w	SpeedToPos
0000F2A6 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase falling speed
0000F2AC 6100 0000                  		bsr.w	ObjHitFloor
0000F2B0 4A41                       		tst.w	d1		; has the block	hit the	floor?
0000F2B2 6A00 0000                  		bpl.w	locret_E8EE	; if not, branch
0000F2B6 D368 000C                  		add.w	d1,$C(a0)
0000F2BA 4268 0012                  		clr.w	$12(a0)		; stop the block falling
0000F2BE 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000F2C4 117C 0004 0028             		move.b	#4,$28(a0)
0000F2CA 3011                       		move.w	(a1),d0
0000F2CC 0240 03FF                  		andi.w	#$3FF,d0
0000F2D0 0C40 02E8                  		cmpi.w	#$2E8,d0
0000F2D4 6400                       		bcc.s	locret_E8EE
0000F2D6 117C 0000 0028             		move.b	#0,$28(a0)
0000F2DC                            
0000F2DC                            locret_E8EE:
0000F2DC 4E75                       		rts	
0000F2DE                            ; ===========================================================================
0000F2DE                            
0000F2DE                            Obj46_Type04:				; XREF: Obj46_TypeIndex
0000F2DE 7000                       		moveq	#0,d0
0000F2E0 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000F2E4 E648                       		lsr.w	#3,d0
0000F2E6 3228 0030                  		move.w	$30(a0),d1
0000F2EA 9240                       		sub.w	d0,d1
0000F2EC 3141 000C                  		move.w	d1,$C(a0)	; make the block wobble
0000F2F0 4E75                       		rts	
0000F2F2                            ; ===========================================================================
0000F2F2                            ; ---------------------------------------------------------------------------
0000F2F2                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0000F2F2                            ; ---------------------------------------------------------------------------
0000F2F2                            Map_obj46:
0000F2F2                            	include "_maps\obj46.asm"
0000F2F2                            ; ---------------------------------------------------------------------------
0000F2F2                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0000F2F2                            ; ---------------------------------------------------------------------------
0000F2F2 0000                       		dc.w byte_E906-Map_obj46
0000F2F4 01                         byte_E906:	dc.b 1
0000F2F5 F00F 0001 F0               		dc.b $F0, $F, 0, 1, $F0
0000F2FA                            		even
0000F2FA                            		even
0000F2FA                            
0000F2FA                            ; ===========================================================================
0000F2FA                            ; ---------------------------------------------------------------------------
0000F2FA                            ; Object 12 - lamp (SYZ)
0000F2FA                            ; ---------------------------------------------------------------------------
0000F2FA                            
0000F2FA                            Obj12:					; XREF: Obj_Index
0000F2FA 7000                       		moveq	#0,d0
0000F2FC 1028 0024                  		move.b	$24(a0),d0
0000F300 323B 0000                  		move.w	Obj12_Index(pc,d0.w),d1
0000F304 4EFB 1000                  		jmp	Obj12_Index(pc,d1.w)
0000F308                            ; ===========================================================================
0000F308 0000                       Obj12_Index:	dc.w Obj12_Main-Obj12_Index
0000F30A 0000                       		dc.w Obj12_Animate-Obj12_Index
0000F30C                            ; ===========================================================================
0000F30C                            
0000F30C                            Obj12_Main:				; XREF: Obj12_Index
0000F30C 5428 0024                  		addq.b	#2,$24(a0)
0000F310 217C 0000 0000 0004        		move.l	#Map_obj12,4(a0)
0000F318 317C 0000 0002             		move.w	#0,2(a0)
0000F31E 117C 0004 0001             		move.b	#4,1(a0)
0000F324 117C 0010 0019             		move.b	#$10,$19(a0)
0000F32A 117C 0006 0018             		move.b	#6,$18(a0)
0000F330                            
0000F330                            Obj12_Animate:				; XREF: Obj12_Index
0000F330 5328 001E                  		subq.b	#1,$1E(a0)
0000F334 6A00                       		bpl.s	Obj12_ChkDel
0000F336 117C 0007 001E             		move.b	#7,$1E(a0)
0000F33C 5228 001A                  		addq.b	#1,$1A(a0)
0000F340 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
0000F346 6500                       		bcs.s	Obj12_ChkDel
0000F348 117C 0000 001A             		move.b	#0,$1A(a0)
0000F34E                            
0000F34E                            Obj12_ChkDel:
0000F34E 3028 0008                  		move.w	8(a0),d0
0000F352 0240 FF80                  		andi.w	#$FF80,d0
0000F356 3238 F700                  		move.w	($FFFFF700).w,d1
0000F35A 0441 0080                  		subi.w	#$80,d1
0000F35E 0241 FF80                  		andi.w	#$FF80,d1
0000F362 9041                       		sub.w	d1,d0
0000F364 0C40 0280                  		cmpi.w	#$280,d0
0000F368 6200 ECCA                  		bhi.w	DeleteObject
0000F36C 6000 EC8A                  		bra.w	DisplaySprite
0000F370                            ; ===========================================================================
0000F370                            ; ---------------------------------------------------------------------------
0000F370                            ; Sprite mappings - lamp (SYZ)
0000F370                            ; ---------------------------------------------------------------------------
0000F370                            Map_obj12:
0000F370                            	include "_maps\obj12.asm"
0000F370                            ; ---------------------------------------------------------------------------
0000F370                            ; Sprite mappings - lamp (SYZ)
0000F370                            ; ---------------------------------------------------------------------------
0000F370 0000 0000                  		dc.w byte_E98E-Map_obj12, byte_E999-Map_obj12
0000F374 0000 0000                  		dc.w byte_E9A4-Map_obj12, byte_E9AF-Map_obj12
0000F378 0000 0000                  		dc.w byte_E9BA-Map_obj12, byte_E9C5-Map_obj12
0000F37C 02                         byte_E98E:	dc.b 2
0000F37D F80C 0031 F0               		dc.b $F8, $C, 0, $31, $F0
0000F382 000C 1031 F0               		dc.b 0,	$C, $10, $31, $F0
0000F387 02                         byte_E999:	dc.b 2
0000F388 F80C 0035 F0               		dc.b $F8, $C, 0, $35, $F0
0000F38D 000C 1035 F0               		dc.b 0,	$C, $10, $35, $F0
0000F392 02                         byte_E9A4:	dc.b 2
0000F393 F80C 0039 F0               		dc.b $F8, $C, 0, $39, $F0
0000F398 000C 1039 F0               		dc.b 0,	$C, $10, $39, $F0
0000F39D 02                         byte_E9AF:	dc.b 2
0000F39E F80C 003D F0               		dc.b $F8, $C, 0, $3D, $F0
0000F3A3 000C 103D F0               		dc.b 0,	$C, $10, $3D, $F0
0000F3A8 02                         byte_E9BA:	dc.b 2
0000F3A9 F80C 0041 F0               		dc.b $F8, $C, 0, $41, $F0
0000F3AE 000C 1041 F0               		dc.b 0,	$C, $10, $41, $F0
0000F3B3 02                         byte_E9C5:	dc.b 2
0000F3B4 F80C 0045 F0               		dc.b $F8, $C, 0, $45, $F0
0000F3B9 000C 1045 F0               		dc.b 0,	$C, $10, $45, $F0
0000F3BE                            		even
0000F3BE                            		even
0000F3BE                            
0000F3BE                            ; ===========================================================================
0000F3BE                            ; ---------------------------------------------------------------------------
0000F3BE                            ; Object 47 - pinball bumper (SYZ)
0000F3BE                            ; ---------------------------------------------------------------------------
0000F3BE                            
0000F3BE                            Obj47:					; XREF: Obj_Index
0000F3BE 7000                       		moveq	#0,d0
0000F3C0 1028 0024                  		move.b	$24(a0),d0
0000F3C4 323B 0000                  		move.w	Obj47_Index(pc,d0.w),d1
0000F3C8 4EFB 1000                  		jmp	Obj47_Index(pc,d1.w)
0000F3CC                            ; ===========================================================================
0000F3CC 0000                       Obj47_Index:	dc.w Obj47_Main-Obj47_Index
0000F3CE 0000                       		dc.w Obj47_Hit-Obj47_Index
0000F3D0                            ; ===========================================================================
0000F3D0                            
0000F3D0                            Obj47_Main:				; XREF: Obj47_Index
0000F3D0 5428 0024                  		addq.b	#2,$24(a0)
0000F3D4 217C 0000 0000 0004        		move.l	#Map_obj47,4(a0)
0000F3DC 317C 0380 0002             		move.w	#$380,2(a0)
0000F3E2 117C 0004 0001             		move.b	#4,1(a0)
0000F3E8 117C 0010 0019             		move.b	#$10,$19(a0)
0000F3EE 117C 0001 0018             		move.b	#1,$18(a0)
0000F3F4 117C 00D7 0020             		move.b	#$D7,$20(a0)
0000F3FA                            
0000F3FA                            Obj47_Hit:				; XREF: Obj47_Index
0000F3FA 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	bumper?
0000F3FE 6700 0000                  		beq.w	Obj47_Display	; if not, branch
0000F402 4228 0021                  		clr.b	$21(a0)
0000F406 43F8 D000                  		lea	($FFFFD000).w,a1
0000F40A 3228 0008                  		move.w	8(a0),d1
0000F40E 3428 000C                  		move.w	$C(a0),d2
0000F412 9269 0008                  		sub.w	8(a1),d1
0000F416 9469 000C                  		sub.w	$C(a1),d2
0000F41A 4EB9 0000 303A             		jsr	(CalcAngle).l
0000F420 4EB9 0000 2D6C             		jsr	(CalcSine).l
0000F426 C3FC F900                  		muls.w	#-$700,d1
0000F42A E081                       		asr.l	#8,d1
0000F42C 3341 0010                  		move.w	d1,$10(a1)	; bounce Sonic away
0000F430 C1FC F900                  		muls.w	#-$700,d0
0000F434 E080                       		asr.l	#8,d0
0000F436 3340 0012                  		move.w	d0,$12(a1)	; bounce Sonic away
0000F43A 08E9 0001 0022             		bset	#1,$22(a1)
0000F440 08A9 0004 0022             		bclr	#4,$22(a1)
0000F446 08A9 0005 0022             		bclr	#5,$22(a1)
0000F44C 4229 003C                  		clr.b	$3C(a1)
0000F450 117C 0001 001C             		move.b	#1,$1C(a0)
0000F456 303C 00B4                  		move.w	#$B4,d0
0000F45A 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play bumper sound
0000F460 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F464 7000                       		moveq	#0,d0
0000F466 1028 0023                  		move.b	$23(a0),d0
0000F46A 6700                       		beq.s	Obj47_Score
0000F46C 0C32 008A 0002             		cmpi.b	#$8A,2(a2,d0.w)	; has bumper been hit $8A times?
0000F472 6400                       		bcc.s	Obj47_Display	; if yes, Sonic	gets no	points
0000F474 5232 0002                  		addq.b	#1,2(a2,d0.w)
0000F478                            
0000F478                            Obj47_Score:
0000F478 7001                       		moveq	#1,d0
0000F47A 4EB9 0000 0000             		jsr	AddPoints	; add 10 to score
0000F480 6100 EFFC                  		bsr.w	SingleObjLoad
0000F484 6600                       		bne.s	Obj47_Display
0000F486 12BC 0029                  		move.b	#$29,0(a1)	; load points object
0000F48A 3368 0008 0008             		move.w	8(a0),8(a1)
0000F490 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F496 137C 0004 001A             		move.b	#4,$1A(a1)
0000F49C                            
0000F49C                            Obj47_Display:
0000F49C 43F9 0000 0000             		lea	(Ani_obj47).l,a1
0000F4A2 6100 BBB2                  		bsr.w	AnimateSprite
0000F4A6 3028 0008                  		move.w	8(a0),d0
0000F4AA 0240 FF80                  		andi.w	#$FF80,d0
0000F4AE 3238 F700                  		move.w	($FFFFF700).w,d1
0000F4B2 0441 0080                  		subi.w	#$80,d1
0000F4B6 0241 FF80                  		andi.w	#$FF80,d1
0000F4BA 9041                       		sub.w	d1,d0
0000F4BC 0C40 0280                  		cmpi.w	#$280,d0
0000F4C0 6200                       		bhi.s	Obj47_ChkHit
0000F4C2 6000 EB34                  		bra.w	DisplaySprite
0000F4C6                            ; ===========================================================================
0000F4C6                            
0000F4C6                            Obj47_ChkHit:				; XREF: Obj47_Display
0000F4C6 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F4CA 7000                       		moveq	#0,d0
0000F4CC 1028 0023                  		move.b	$23(a0),d0
0000F4D0 6700                       		beq.s	Obj47_Delete
0000F4D2 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000F4D8                            
0000F4D8                            Obj47_Delete:
0000F4D8 6000 EB5A                  		bra.w	DeleteObject
0000F4DC                            ; ===========================================================================
0000F4DC                            Ani_obj47:
0000F4DC                            	include "_anim\obj47.asm"
0000F4DC                            ; ---------------------------------------------------------------------------
0000F4DC                            ; Animation script - flamethrower (SBZ)
0000F4DC                            ; ---------------------------------------------------------------------------
0000F4DC 0000                       		dc.w byte_EAF4-Ani_obj47
0000F4DE 0000                       		dc.w byte_EAF8-Ani_obj47
0000F4E0 0F00 FF00                  byte_EAF4:	dc.b $F, 0, $FF, 0
0000F4E4 0301 0201 02FD 0000        byte_EAF8:	dc.b 3,	1, 2, 1, 2, $FD, 0, 0
0000F4EC                            		even
0000F4EC                            		even
0000F4EC                            
0000F4EC                            ; ---------------------------------------------------------------------------
0000F4EC                            ; Sprite mappings - pinball bumper (SYZ)
0000F4EC                            ; ---------------------------------------------------------------------------
0000F4EC                            Map_obj47:
0000F4EC                            	include "_maps\obj47.asm"
0000F4EC                            ; ---------------------------------------------------------------------------
0000F4EC                            ; Sprite mappings - pinball bumper (SYZ)
0000F4EC                            ; ---------------------------------------------------------------------------
0000F4EC 0000                       		dc.w byte_EB06-Map_obj47
0000F4EE 0000                       		dc.w byte_EB11-Map_obj47
0000F4F0 0000                       		dc.w byte_EB1C-Map_obj47
0000F4F2 02                         byte_EB06:	dc.b 2
0000F4F3 F007 0000 F0               		dc.b $F0, 7, 0,	0, $F0
0000F4F8 F007 0800 00               		dc.b $F0, 7, 8,	0, 0
0000F4FD 02                         byte_EB11:	dc.b 2
0000F4FE F406 0008 F4               		dc.b $F4, 6, 0,	8, $F4
0000F503 F402 0808 04               		dc.b $F4, 2, 8,	8, 4
0000F508 02                         byte_EB1C:	dc.b 2
0000F509 F007 000E F0               		dc.b $F0, 7, 0,	$E, $F0
0000F50E F007 080E 00               		dc.b $F0, 7, 8,	$E, 0
0000F514 00                         		even
0000F514 00                         		even
0000F514                            
0000F514                            ; ===========================================================================
0000F514                            ; ---------------------------------------------------------------------------
0000F514                            ; Object 0D - signpost at the end of a level
0000F514                            ; ---------------------------------------------------------------------------
0000F514                            
0000F514                            Obj0D:					; XREF: Obj_Index
0000F514 7000                       		moveq	#0,d0
0000F516 1028 0024                  		move.b	$24(a0),d0
0000F51A 323B 0000                  		move.w	Obj0D_Index(pc,d0.w),d1
0000F51E 4EBB 1000                  		jsr	Obj0D_Index(pc,d1.w)
0000F522 43F9 0000 0000             		lea	(Ani_obj0D).l,a1
0000F528 6100 BB2C                  		bsr.w	AnimateSprite
0000F52C 6100 EACA                  		bsr.w	DisplaySprite
0000F530 3028 0008                  		move.w	8(a0),d0
0000F534 0240 FF80                  		andi.w	#$FF80,d0
0000F538 3238 F700                  		move.w	($FFFFF700).w,d1
0000F53C 0441 0080                  		subi.w	#$80,d1
0000F540 0241 FF80                  		andi.w	#$FF80,d1
0000F544 9041                       		sub.w	d1,d0
0000F546 0C40 0280                  		cmpi.w	#$280,d0
0000F54A 6200 EAE8                  		bhi.w	DeleteObject
0000F54E 4E75                       		rts	
0000F550                            ; ===========================================================================
0000F550 0000                       Obj0D_Index:	dc.w Obj0D_Main-Obj0D_Index
0000F552 0000                       		dc.w Obj0D_Touch-Obj0D_Index
0000F554 0000                       		dc.w Obj0D_Spin-Obj0D_Index
0000F556 0000                       		dc.w Obj0D_SonicRun-Obj0D_Index
0000F558 0000                       		dc.w locret_ED1A-Obj0D_Index
0000F55A                            ; ===========================================================================
0000F55A                            
0000F55A                            Obj0D_Main:				; XREF: Obj0D_Index
0000F55A 5428 0024                  		addq.b	#2,$24(a0)
0000F55E 217C 0000 0000 0004        		move.l	#Map_obj0D,4(a0)
0000F566 317C 0680 0002             		move.w	#$680,2(a0)
0000F56C 117C 0004 0001             		move.b	#4,1(a0)
0000F572 117C 0018 0019             		move.b	#$18,$19(a0)
0000F578 117C 0004 0018             		move.b	#4,$18(a0)
0000F57E                            
0000F57E                            Obj0D_Touch:				; XREF: Obj0D_Index
0000F57E 3038 D008                  		move.w	($FFFFD008).w,d0
0000F582 9068 0008                  		sub.w	8(a0),d0
0000F586 6500                       		bcs.s	locret_EBBA
0000F588 0C40 0020                  		cmpi.w	#$20,d0		; is Sonic within $20 pixels of	the signpost?
0000F58C 6400                       		bcc.s	locret_EBBA	; if not, branch
0000F58E 303C 00CF                  		move.w	#$CF,d0
0000F592 4EB9 0000 15CC             		jsr	(PlaySound).l	; play signpost	sound
0000F598 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0000F59C 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w ; lock screen position
0000F5A2 5428 0024                  		addq.b	#2,$24(a0)
0000F5A6                            
0000F5A6                            locret_EBBA:
0000F5A6 4E75                       		rts	
0000F5A8                            ; ===========================================================================
0000F5A8                            
0000F5A8                            Obj0D_Spin:				; XREF: Obj0D_Index
0000F5A8 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from spin time
0000F5AC 6A00                       		bpl.s	Obj0D_Sparkle	; if time remains, branch
0000F5AE 317C 003C 0030             		move.w	#60,$30(a0)	; set spin cycle time to 1 second
0000F5B4 5228 001C                  		addq.b	#1,$1C(a0)	; next spin cycle
0000F5B8 0C28 0003 001C             		cmpi.b	#3,$1C(a0)	; have 3 spin cycles completed?
0000F5BE 6600                       		bne.s	Obj0D_Sparkle	; if not, branch
0000F5C0 5428 0024                  		addq.b	#2,$24(a0)
0000F5C4                            
0000F5C4                            Obj0D_Sparkle:
0000F5C4 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000F5C8 6A00                       		bpl.s	locret_EC42	; if time remains, branch
0000F5CA 317C 000B 0032             		move.w	#$B,$32(a0)	; set time between sparkles to $B frames
0000F5D0 7000                       		moveq	#0,d0
0000F5D2 1028 0034                  		move.b	$34(a0),d0
0000F5D6 5428 0034                  		addq.b	#2,$34(a0)
0000F5DA 0228 000E 0034             		andi.b	#$E,$34(a0)
0000F5E0 45FB 0000                  		lea	Obj0D_SparkPos(pc,d0.w),a2 ; load sparkle position data
0000F5E4 6100 EE98                  		bsr.w	SingleObjLoad
0000F5E8 6600                       		bne.s	locret_EC42
0000F5EA 12BC 0025                  		move.b	#$25,0(a1)	; load rings object
0000F5EE 137C 0006 0024             		move.b	#6,$24(a1)	; jump to ring sparkle subroutine
0000F5F4 101A                       		move.b	(a2)+,d0
0000F5F6 4880                       		ext.w	d0
0000F5F8 D068 0008                  		add.w	8(a0),d0
0000F5FC 3340 0008                  		move.w	d0,8(a1)
0000F600 101A                       		move.b	(a2)+,d0
0000F602 4880                       		ext.w	d0
0000F604 D068 000C                  		add.w	$C(a0),d0
0000F608 3340 000C                  		move.w	d0,$C(a1)
0000F60C 237C 0000 A7F4 0004        		move.l	#Map_obj25,4(a1)
0000F614 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000F61A 137C 0004 0001             		move.b	#4,1(a1)
0000F620 137C 0002 0018             		move.b	#2,$18(a1)
0000F626 137C 0008 0019             		move.b	#8,$19(a1)
0000F62C                            
0000F62C                            locret_EC42:
0000F62C 4E75                       		rts	
0000F62E                            ; ===========================================================================
0000F62E E8F0                       Obj0D_SparkPos:	dc.b -$18,-$10		; x-position, y-position
0000F630 0808                       		dc.b	8,   8
0000F632 F000                       		dc.b -$10,   0
0000F634 18F8                       		dc.b  $18,  -8
0000F636 00F8                       		dc.b	0,  -8
0000F638 1000                       		dc.b  $10,   0
0000F63A E808                       		dc.b -$18,   8
0000F63C 1810                       		dc.b  $18, $10
0000F63E                            ; ===========================================================================
0000F63E                            
0000F63E                            Obj0D_SonicRun:				; XREF: Obj0D_Index
0000F63E 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
0000F642 6600 0000                  		bne.w	locret_ECEE	; if yes, branch
0000F646 0838 0001 D022             		btst	#1,($FFFFD022).w
0000F64C 6600                       		bne.s	loc_EC70
0000F64E 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0000F654 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0000F65A 6700                       		beq.s	Obj0D_MoveLeft	; GMZ: If not, branch
0000F65C 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; make Sonic run to	the right
0000F662 6000                       		bra.s	loc_EC70
0000F664                            
0000F664                            Obj0D_MoveLeft:
0000F664 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0000F66A                            
0000F66A                            loc_EC70:
0000F66A 4A38 D000                  		tst.b	($FFFFD000).w
0000F66E 6700                       		beq.s	loc_EC86
0000F670 3038 D008                  		move.w	($FFFFD008).w,d0
0000F674 3238 F72A                  		move.w	($FFFFF72A).w,d1
0000F678 0641 0128                  		addi.w	#$128,d1
0000F67C B041                       		cmp.w	d1,d0
0000F67E 6500                       		bcs.s	locret_ECEE
0000F680                            
0000F680                            loc_EC86:
0000F680 5428 0024                  		addq.b	#2,$24(a0)
0000F684                            
0000F684                            ; ---------------------------------------------------------------------------
0000F684                            ; Subroutine to	set up bonuses at the end of an	act
0000F684                            ; ---------------------------------------------------------------------------
0000F684                            
0000F684                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F684                            
0000F684                            
0000F684                            GotThroughAct:				; XREF: Obj3E_EndAct
0000F684 4A38 D5C0                  		tst.b	($FFFFD5C0).w
0000F688 6600                       		bne.s	locret_ECEE
0000F68A 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w
0000F690 4238 FE2D                  		clr.b	($FFFFFE2D).w	; disable invincibility
0000F694 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0000F698 11FC 003A D5C0             		move.b	#$3A,($FFFFD5C0).w
0000F69E 7010                       		moveq	#$10,d0
0000F6A0 4EB9 0000 17E8             		jsr	(LoadPLC2).l	; load title card patterns
0000F6A6 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w
0000F6AC 7000                       		moveq	#0,d0
0000F6AE 1038 FE23                  		move.b	($FFFFFE23).w,d0
0000F6B2 C0FC 003C                  		mulu.w	#60,d0		; convert minutes to seconds
0000F6B6 7200                       		moveq	#0,d1
0000F6B8 1238 FE24                  		move.b	($FFFFFE24).w,d1
0000F6BC D041                       		add.w	d1,d0		; add up your time
0000F6BE 80FC 000F                  		divu.w	#15,d0		; divide by 15
0000F6C2 7214                       		moveq	#$14,d1
0000F6C4 B041                       		cmp.w	d1,d0		; is time 5 minutes or higher?
0000F6C6 6500                       		bcs.s	loc_ECD0	; if not, branch
0000F6C8 3001                       		move.w	d1,d0		; use minimum time bonus (0)
0000F6CA                            
0000F6CA                            loc_ECD0:
0000F6CA D040                       		add.w	d0,d0
0000F6CC 31FB 0000 F7D2             		move.w	TimeBonuses(pc,d0.w),($FFFFF7D2).w ; set time bonus
0000F6D2 3038 FE20                  		move.w	($FFFFFE20).w,d0 ; load	number of rings
0000F6D6 C0FC 000A                  		mulu.w	#10,d0		; multiply by 10
0000F6DA 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set ring bonus
0000F6DE 303C 008E                  		move.w	#$8E,d0
0000F6E2 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play "Sonic got	through" music
0000F6E8                            
0000F6E8                            locret_ECEE:
0000F6E8 4E75                       		rts	
0000F6EA                            ; End of function GotThroughAct
0000F6EA                            
0000F6EA                            ; ===========================================================================
0000F6EA 1388 1388 03E8 01F4 0190+  TimeBonuses:	dc.w 5000, 5000, 1000, 500, 400, 400, 300, 300,	200, 200
0000F6FE 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
0000F714                            ; ===========================================================================
0000F714                            
0000F714                            locret_ED1A:				; XREF: Obj0D_Index
0000F714 4E75                       		rts	
0000F716                            ; ===========================================================================
0000F716                            Ani_obj0D:
0000F716                            	include "_anim\obj0D.asm"
0000F716                            ; ---------------------------------------------------------------------------
0000F716                            ; Animation script - signpost
0000F716                            ; ---------------------------------------------------------------------------
0000F716 0000                       		dc.w byte_ED24-Ani_obj0D
0000F718 0000                       		dc.w byte_ED28-Ani_obj0D
0000F71A 0000                       		dc.w byte_ED2E-Ani_obj0D
0000F71C 0000                       		dc.w byte_ED34-Ani_obj0D
0000F71E 0F00 FF00                  byte_ED24:	dc.b $F, 0, $FF, 0
0000F722 0100 0102 03FF             byte_ED28:	dc.b 1,	0, 1, 2, 3, $FF
0000F728 0104 0102 03FF             byte_ED2E:	dc.b 1,	4, 1, 2, 3, $FF
0000F72E 0F04 FF                    byte_ED34:	dc.b $F, 4, $FF
0000F732 00                         		even
0000F732 00                         		even
0000F732                            
0000F732                            ; ---------------------------------------------------------------------------
0000F732                            ; Sprite mappings - signpost
0000F732                            ; ---------------------------------------------------------------------------
0000F732                            Map_obj0D:
0000F732                            	include "_maps\obj0D.asm"
0000F732                            ; ---------------------------------------------------------------------------
0000F732                            ; Sprite mappings - signpost
0000F732                            ; ---------------------------------------------------------------------------
0000F732 0000 0000                  		dc.w byte_ED42-Map_obj0D, byte_ED52-Map_obj0D
0000F736 0000 0000                  		dc.w byte_ED5D-Map_obj0D, byte_ED68-Map_obj0D
0000F73A 0000                       		dc.w byte_ED73-Map_obj0D
0000F73C 03                         byte_ED42:	dc.b 3
0000F73D F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000F742 F00B 0800 00               		dc.b $F0, $B, 8, 0, 0
0000F747 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F74C 02                         byte_ED52:	dc.b 2
0000F74D F00F 000C F0               		dc.b $F0, $F, 0, $C, $F0
0000F752 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F757 02                         byte_ED5D:	dc.b 2
0000F758 F003 001C FC               		dc.b $F0, 3, 0,	$1C, $FC
0000F75D 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
0000F762 02                         byte_ED68:	dc.b 2
0000F763 F00F 080C F0               		dc.b $F0, $F, 8, $C, $F0
0000F768 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
0000F76D 03                         byte_ED73:	dc.b 3
0000F76E F00B 0020 E8               		dc.b $F0, $B, 0, $20, $E8
0000F773 F00B 002C 00               		dc.b $F0, $B, 0, $2C, 0
0000F778 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F77E 00                         		even
0000F77E 00                         		even
0000F77E                            
0000F77E                            ; ===========================================================================
0000F77E                            ; ---------------------------------------------------------------------------
0000F77E                            ; Object 4C - lava geyser / lavafall producer (MZ)
0000F77E                            ; ---------------------------------------------------------------------------
0000F77E                            
0000F77E                            Obj4C:					; XREF: Obj_Index
0000F77E 7000                       		moveq	#0,d0
0000F780 1028 0024                  		move.b	$24(a0),d0
0000F784 323B 0000                  		move.w	Obj4C_Index(pc,d0.w),d1
0000F788 4EBB 1000                  		jsr	Obj4C_Index(pc,d1.w)
0000F78C 6000 0000                  		bra.w	Obj4D_ChkDel
0000F790                            ; ===========================================================================
0000F790 0000                       Obj4C_Index:	dc.w Obj4C_Main-Obj4C_Index
0000F792 0000                       		dc.w loc_EDCC-Obj4C_Index
0000F794 0000                       		dc.w loc_EE3E-Obj4C_Index
0000F796 0000                       		dc.w Obj4C_MakeLava-Obj4C_Index
0000F798 0000                       		dc.w Obj4C_Display-Obj4C_Index
0000F79A 0000                       		dc.w Obj4C_Delete-Obj4C_Index
0000F79C                            ; ===========================================================================
0000F79C                            
0000F79C                            Obj4C_Main:				; XREF: Obj4C_Index
0000F79C 5428 0024                  		addq.b	#2,$24(a0)
0000F7A0 217C 0000 0000 0004        		move.l	#Map_obj4C,4(a0)
0000F7A8 317C E3A8 0002             		move.w	#$E3A8,2(a0)
0000F7AE 117C 0004 0001             		move.b	#4,1(a0)
0000F7B4 117C 0001 0018             		move.b	#1,$18(a0)
0000F7BA 117C 0038 0019             		move.b	#$38,$19(a0)
0000F7C0 317C 0078 0034             		move.w	#120,$34(a0)	; set time delay to 2 seconds
0000F7C6                            
0000F7C6                            loc_EDCC:				; XREF: Obj4C_Index
0000F7C6 5368 0032                  		subq.w	#1,$32(a0)
0000F7CA 6A00                       		bpl.s	locret_EDF0
0000F7CC 3168 0034 0032             		move.w	$34(a0),$32(a0)
0000F7D2 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000F7D6 3228 000C                  		move.w	$C(a0),d1
0000F7DA B041                       		cmp.w	d1,d0
0000F7DC 6400                       		bcc.s	locret_EDF0
0000F7DE 0441 0170                  		subi.w	#$170,d1
0000F7E2 B041                       		cmp.w	d1,d0
0000F7E4 6500                       		bcs.s	locret_EDF0
0000F7E6 5428 0024                  		addq.b	#2,$24(a0)
0000F7EA                            
0000F7EA                            locret_EDF0:
0000F7EA 4E75                       		rts	
0000F7EC                            ; ===========================================================================
0000F7EC                            
0000F7EC                            Obj4C_MakeLava:				; XREF: Obj4C_Index
0000F7EC 5428 0024                  		addq.b	#2,$24(a0)
0000F7F0 6100 ECA2                  		bsr.w	SingleObjLoad2
0000F7F4 6600                       		bne.s	loc_EE18
0000F7F6 12BC 004D                  		move.b	#$4D,0(a1)	; load lavafall	object
0000F7FA 3368 0008 0008             		move.w	8(a0),8(a1)
0000F800 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F806 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000F80C 2348 003C                  		move.l	a0,$3C(a1)
0000F810                            
0000F810                            loc_EE18:
0000F810 117C 0001 001C             		move.b	#1,$1C(a0)
0000F816 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
0000F81A 6700                       		beq.s	Obj4C_Type00	; if yes, branch
0000F81C 117C 0004 001C             		move.b	#4,$1C(a0)
0000F822 6000                       		bra.s	Obj4C_Display
0000F824                            ; ===========================================================================
0000F824                            
0000F824                            Obj4C_Type00:				; XREF: Obj4C_MakeLava
0000F824 2268 003C                  		movea.l	$3C(a0),a1	; load geyser object
0000F828 08E9 0001 0022             		bset	#1,$22(a1)
0000F82E 337C FA80 0012             		move.w	#-$580,$12(a1)
0000F834 6000                       		bra.s	Obj4C_Display
0000F836                            ; ===========================================================================
0000F836                            
0000F836                            loc_EE3E:				; XREF: Obj4C_Index
0000F836 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
0000F83A 6700                       		beq.s	Obj4C_Display	; if yes, branch
0000F83C 5428 0024                  		addq.b	#2,$24(a0)
0000F840 4E75                       		rts	
0000F842                            ; ===========================================================================
0000F842                            
0000F842                            Obj4C_Display:				; XREF: Obj4C_Index
0000F842 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
0000F848 6100 B80C                  		bsr.w	AnimateSprite
0000F84C 6100 E7AA                  		bsr.w	DisplaySprite
0000F850 4E75                       		rts	
0000F852                            ; ===========================================================================
0000F852                            
0000F852                            Obj4C_Delete:				; XREF: Obj4C_Index
0000F852 117C 0000 001C             		move.b	#0,$1C(a0)
0000F858 117C 0002 0024             		move.b	#2,$24(a0)
0000F85E 4A28 0028                  		tst.b	$28(a0)
0000F862 6700 E7D0                  		beq.w	DeleteObject
0000F866 4E75                       		rts	
0000F868                            ; ===========================================================================
0000F868                            ; ---------------------------------------------------------------------------
0000F868                            ; Object 4D - lava geyser / lavafall (MZ)
0000F868                            ; ---------------------------------------------------------------------------
0000F868                            
0000F868                            Obj4D:					; XREF: Obj_Index
0000F868 7000                       		moveq	#0,d0
0000F86A 1028 0024                  		move.b	$24(a0),d0
0000F86E 323B 0000                  		move.w	Obj4D_Index(pc,d0.w),d1
0000F872 4EBB 1000                  		jsr	Obj4D_Index(pc,d1.w)
0000F876 6000 E780                  		bra.w	DisplaySprite
0000F87A                            ; ===========================================================================
0000F87A 0000                       Obj4D_Index:	dc.w Obj4D_Main-Obj4D_Index
0000F87C 0000                       		dc.w Obj4D_Action-Obj4D_Index
0000F87E 0000                       		dc.w loc_EFFC-Obj4D_Index
0000F880 0000                       		dc.w Obj4D_Delete-Obj4D_Index
0000F882                            
0000F882 FB00 0000                  Obj4D_Speeds:	dc.w $FB00, 0
0000F886                            ; ===========================================================================
0000F886                            
0000F886                            Obj4D_Main:				; XREF: Obj4D_Index
0000F886 5428 0024                  		addq.b	#2,$24(a0)
0000F88A 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000F890 4A28 0028                  		tst.b	$28(a0)
0000F894 6700                       		beq.s	loc_EEA4
0000F896 0468 0250 000C             		subi.w	#$250,$C(a0)
0000F89C                            
0000F89C                            loc_EEA4:
0000F89C 7000                       		moveq	#0,d0
0000F89E 1028 0028                  		move.b	$28(a0),d0
0000F8A2 D040                       		add.w	d0,d0
0000F8A4 317B 00DC 0012             		move.w	Obj4D_Speeds(pc,d0.w),$12(a0)
0000F8AA 2248                       		movea.l	a0,a1
0000F8AC 7201                       		moveq	#1,d1
0000F8AE 6100                       		bsr.s	Obj4D_MakeLava
0000F8B0 6000                       		bra.s	loc_EF10
0000F8B2                            ; ===========================================================================
0000F8B2                            
0000F8B2                            Obj4D_Loop:
0000F8B2 6100 EBE0                  		bsr.w	SingleObjLoad2
0000F8B6 6600                       		bne.s	loc_EF0A
0000F8B8                            
0000F8B8                            Obj4D_MakeLava:				; XREF: Obj4D_Main
0000F8B8 12BC 004D                  		move.b	#$4D,0(a1)
0000F8BC 237C 0000 0000 0004        		move.l	#Map_obj4C,4(a1)
0000F8C4 337C 63A8 0002             		move.w	#$63A8,2(a1)
0000F8CA 137C 0004 0001             		move.b	#4,1(a1)
0000F8D0 137C 0020 0019             		move.b	#$20,$19(a1)
0000F8D6 3368 0008 0008             		move.w	8(a0),8(a1)
0000F8DC 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F8E2 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000F8E8 137C 0001 0018             		move.b	#1,$18(a1)
0000F8EE 137C 0005 001C             		move.b	#5,$1C(a1)
0000F8F4 4A28 0028                  		tst.b	$28(a0)
0000F8F8 6700                       		beq.s	loc_EF0A
0000F8FA 137C 0002 001C             		move.b	#2,$1C(a1)
0000F900                            
0000F900                            loc_EF0A:
0000F900 51C9 FFB0                  		dbf	d1,Obj4D_Loop
0000F904 4E75                       		rts	
0000F906                            ; ===========================================================================
0000F906                            
0000F906                            loc_EF10:				; XREF: Obj4D_Main
0000F906 0669 0060 000C             		addi.w	#$60,$C(a1)
0000F90C 3368 0030 0030             		move.w	$30(a0),$30(a1)
0000F912 0669 0060 0030             		addi.w	#$60,$30(a1)
0000F918 137C 0093 0020             		move.b	#$93,$20(a1)
0000F91E 137C 0080 0016             		move.b	#$80,$16(a1)
0000F924 08E9 0004 0001             		bset	#4,1(a1)
0000F92A 5829 0024                  		addq.b	#4,$24(a1)
0000F92E 2348 003C                  		move.l	a0,$3C(a1)
0000F932 4A28 0028                  		tst.b	$28(a0)
0000F936 6700                       		beq.s	Obj4D_PlaySnd
0000F938 7200                       		moveq	#0,d1
0000F93A 6100 FF76                  		bsr.w	Obj4D_Loop
0000F93E 5429 0024                  		addq.b	#2,$24(a1)
0000F942 08E9 0004 0002             		bset	#4,2(a1)
0000F948 0669 0100 000C             		addi.w	#$100,$C(a1)
0000F94E 137C 0000 0018             		move.b	#0,$18(a1)
0000F954 3368 0030 0030             		move.w	$30(a0),$30(a1)
0000F95A 2368 003C 003C             		move.l	$3C(a0),$3C(a1)
0000F960 117C 0000 0028             		move.b	#0,$28(a0)
0000F966                            
0000F966                            Obj4D_PlaySnd:
0000F966 303C 00C8                  		move.w	#$C8,d0
0000F96A 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play flame sound
0000F970                            
0000F970                            Obj4D_Action:				; XREF: Obj4D_Index
0000F970 7000                       		moveq	#0,d0
0000F972 1028 0028                  		move.b	$28(a0),d0
0000F976 D040                       		add.w	d0,d0
0000F978 323B 0000                  		move.w	Obj4D_TypeIndex(pc,d0.w),d1
0000F97C 4EBB 1000                  		jsr	Obj4D_TypeIndex(pc,d1.w)
0000F980 6100 E650                  		bsr.w	SpeedToPos
0000F984 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
0000F98A 6100 B6CA                  		bsr.w	AnimateSprite
0000F98E                            
0000F98E                            Obj4D_ChkDel:				; XREF: Obj4C
0000F98E 3028 0008                  		move.w	8(a0),d0
0000F992 0240 FF80                  		andi.w	#$FF80,d0
0000F996 3238 F700                  		move.w	($FFFFF700).w,d1
0000F99A 0441 0080                  		subi.w	#$80,d1
0000F99E 0241 FF80                  		andi.w	#$FF80,d1
0000F9A2 9041                       		sub.w	d1,d0
0000F9A4 0C40 0280                  		cmpi.w	#$280,d0
0000F9A8 6200 E68A                  		bhi.w	DeleteObject
0000F9AC 4E75                       		rts	
0000F9AE                            ; ===========================================================================
0000F9AE 0000                       Obj4D_TypeIndex:dc.w Obj4D_Type00-Obj4D_TypeIndex
0000F9B0 0000                       		dc.w Obj4D_Type01-Obj4D_TypeIndex
0000F9B2                            ; ===========================================================================
0000F9B2                            
0000F9B2                            Obj4D_Type00:				; XREF: Obj4D_TypeIndex
0000F9B2 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
0000F9B8 3028 0030                  		move.w	$30(a0),d0
0000F9BC B068 000C                  		cmp.w	$C(a0),d0
0000F9C0 6400                       		bcc.s	locret_EFDA
0000F9C2 5828 0024                  		addq.b	#4,$24(a0)
0000F9C6 2268 003C                  		movea.l	$3C(a0),a1
0000F9CA 137C 0003 001C             		move.b	#3,$1C(a1)
0000F9D0                            
0000F9D0                            locret_EFDA:
0000F9D0 4E75                       		rts	
0000F9D2                            ; ===========================================================================
0000F9D2                            
0000F9D2                            Obj4D_Type01:				; XREF: Obj4D_TypeIndex
0000F9D2 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
0000F9D8 3028 0030                  		move.w	$30(a0),d0
0000F9DC B068 000C                  		cmp.w	$C(a0),d0
0000F9E0 6400                       		bcc.s	locret_EFFA
0000F9E2 5828 0024                  		addq.b	#4,$24(a0)
0000F9E6 2268 003C                  		movea.l	$3C(a0),a1
0000F9EA 137C 0001 001C             		move.b	#1,$1C(a1)
0000F9F0                            
0000F9F0                            locret_EFFA:
0000F9F0 4E75                       		rts	
0000F9F2                            ; ===========================================================================
0000F9F2                            
0000F9F2                            loc_EFFC:				; XREF: Obj4D_Index
0000F9F2 2268 003C                  		movea.l	$3C(a0),a1
0000F9F6 0C29 0006 0024             		cmpi.b	#6,$24(a1)
0000F9FC 6700 0000                  		beq.w	Obj4D_Delete
0000FA00 3029 000C                  		move.w	$C(a1),d0
0000FA04 0640 0060                  		addi.w	#$60,d0
0000FA08 3140 000C                  		move.w	d0,$C(a0)
0000FA0C 9068 0030                  		sub.w	$30(a0),d0
0000FA10 4440                       		neg.w	d0
0000FA12 7208                       		moveq	#8,d1
0000FA14 0C40 0040                  		cmpi.w	#$40,d0
0000FA18 6C00                       		bge.s	loc_F026
0000FA1A 720B                       		moveq	#$B,d1
0000FA1C                            
0000FA1C                            loc_F026:
0000FA1C 0C40 0080                  		cmpi.w	#$80,d0
0000FA20 6F00                       		ble.s	loc_F02E
0000FA22 720E                       		moveq	#$E,d1
0000FA24                            
0000FA24                            loc_F02E:
0000FA24 5328 001E                  		subq.b	#1,$1E(a0)
0000FA28 6A00                       		bpl.s	loc_F04C
0000FA2A 117C 0007 001E             		move.b	#7,$1E(a0)
0000FA30 5228 001B                  		addq.b	#1,$1B(a0)
0000FA34 0C28 0002 001B             		cmpi.b	#2,$1B(a0)
0000FA3A 6500                       		bcs.s	loc_F04C
0000FA3C 117C 0000 001B             		move.b	#0,$1B(a0)
0000FA42                            
0000FA42                            loc_F04C:
0000FA42 1028 001B                  		move.b	$1B(a0),d0
0000FA46 D001                       		add.b	d1,d0
0000FA48 1140 001A                  		move.b	d0,$1A(a0)
0000FA4C 6000 FF40                  		bra.w	Obj4D_ChkDel
0000FA50                            ; ===========================================================================
0000FA50                            
0000FA50                            Obj4D_Delete:				; XREF: Obj4D_Index
0000FA50 6000 E5E2                  		bra.w	DeleteObject
0000FA54                            ; ===========================================================================
0000FA54                            ; ---------------------------------------------------------------------------
0000FA54                            ; Object 4E - advancing	wall of	lava (MZ)
0000FA54                            ; ---------------------------------------------------------------------------
0000FA54                            
0000FA54                            Obj4E:					; XREF: Obj_Index
0000FA54 7000                       		moveq	#0,d0
0000FA56 1028 0024                  		move.b	$24(a0),d0
0000FA5A 323B 0000                  		move.w	Obj4E_Index(pc,d0.w),d1
0000FA5E 4EFB 1000                  		jmp	Obj4E_Index(pc,d1.w)
0000FA62                            ; ===========================================================================
0000FA62 0000                       Obj4E_Index:	dc.w Obj4E_Main-Obj4E_Index
0000FA64 0000                       		dc.w Obj4E_Solid-Obj4E_Index
0000FA66 0000                       		dc.w Obj4E_Action-Obj4E_Index
0000FA68 0000                       		dc.w Obj4E_Move2-Obj4E_Index
0000FA6A 0000                       		dc.w Obj4E_Delete-Obj4E_Index
0000FA6C                            ; ===========================================================================
0000FA6C                            
0000FA6C                            Obj4E_Main:				; XREF: Obj4E_Index
0000FA6C 5828 0024                  		addq.b	#4,$24(a0)
0000FA70 2248                       		movea.l	a0,a1
0000FA72 7201                       		moveq	#1,d1
0000FA74 6000                       		bra.s	Obj4E_Main2
0000FA76                            ; ===========================================================================
0000FA76                            
0000FA76                            Obj4E_Loop:
0000FA76 6100 EA1C                  		bsr.w	SingleObjLoad2
0000FA7A 6600                       		bne.s	loc_F0C8
0000FA7C                            
0000FA7C                            Obj4E_Main2:				; XREF: Obj4E_Main
0000FA7C 12BC 004E                  		move.b	#$4E,0(a1)	; load object
0000FA80 237C 0000 0000 0004        		move.l	#Map_obj4E,4(a1)
0000FA88 337C 63A8 0002             		move.w	#$63A8,2(a1)
0000FA8E 137C 0004 0001             		move.b	#4,1(a1)
0000FA94 137C 0050 0019             		move.b	#$50,$19(a1)
0000FA9A 3368 0008 0008             		move.w	8(a0),8(a1)
0000FAA0 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000FAA6 137C 0001 0018             		move.b	#1,$18(a1)
0000FAAC 137C 0000 001C             		move.b	#0,$1C(a1)
0000FAB2 137C 0094 0020             		move.b	#$94,$20(a1)
0000FAB8 2348 003C                  		move.l	a0,$3C(a1)
0000FABC                            
0000FABC                            loc_F0C8:
0000FABC 51C9 FFB8                  		dbf	d1,Obj4E_Loop	; repeat sequence once
0000FAC0                            
0000FAC0 5C29 0024                  		addq.b	#6,$24(a1)
0000FAC4 137C 0004 001A             		move.b	#4,$1A(a1)
0000FACA                            
0000FACA                            Obj4E_Action:				; XREF: Obj4E_Index
0000FACA 3038 D008                  		move.w	($FFFFD008).w,d0
0000FACE 9068 0008                  		sub.w	8(a0),d0
0000FAD2 6400                       		bcc.s	Obj4E_ChkSonic
0000FAD4 4440                       		neg.w	d0
0000FAD6                            
0000FAD6                            Obj4E_ChkSonic:
0000FAD6 0C40 00C0                  		cmpi.w	#$C0,d0		; is Sonic within $C0 pixels (x-axis)?
0000FADA 6400                       		bcc.s	Obj4E_Move	; if not, branch
0000FADC 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000FAE0 9068 000C                  		sub.w	$C(a0),d0
0000FAE4 6400                       		bcc.s	loc_F0F4
0000FAE6 4440                       		neg.w	d0
0000FAE8                            
0000FAE8                            loc_F0F4:
0000FAE8 0C40 0060                  		cmpi.w	#$60,d0		; is Sonic within $60 pixels (y-axis)?
0000FAEC 6400                       		bcc.s	Obj4E_Move	; if not, branch
0000FAEE 117C 0001 0036             		move.b	#1,$36(a0)	; set object to	move
0000FAF4 6000                       		bra.s	Obj4E_Solid
0000FAF6                            ; ===========================================================================
0000FAF6                            
0000FAF6                            Obj4E_Move:				; XREF: Obj4E_ChkSonic
0000FAF6 4A28 0036                  		tst.b	$36(a0)		; is object set	to move?
0000FAFA 6700                       		beq.s	Obj4E_Solid	; if not, branch
0000FAFC 317C 0180 0010             		move.w	#$180,$10(a0)	; set object speed
0000FB02 5528 0024                  		subq.b	#2,$24(a0)
0000FB06                            
0000FB06                            Obj4E_Solid:				; XREF: Obj4E_Index
0000FB06 323C 002B                  		move.w	#$2B,d1
0000FB0A 343C 0018                  		move.w	#$18,d2
0000FB0E 3602                       		move.w	d2,d3
0000FB10 5243                       		addq.w	#1,d3
0000FB12 3828 0008                  		move.w	8(a0),d4
0000FB16 1028 0024                  		move.b	$24(a0),d0
0000FB1A 3F00                       		move.w	d0,-(sp)
0000FB1C 6100 0000                  		bsr.w	SolidObject
0000FB20 301F                       		move.w	(sp)+,d0
0000FB22 1140 0024                  		move.b	d0,$24(a0)
0000FB26 0C68 06A0 0008             		cmpi.w	#$6A0,8(a0)	; has object reached $6A0 on the x-axis?
0000FB2C 6600                       		bne.s	Obj4E_Animate	; if not, branch
0000FB2E 4268 0010                  		clr.w	$10(a0)		; stop object moving
0000FB32 4228 0036                  		clr.b	$36(a0)
0000FB36                            
0000FB36                            Obj4E_Animate:
0000FB36 43F9 0000 0000             		lea	(Ani_obj4E).l,a1
0000FB3C 6100 B518                  		bsr.w	AnimateSprite
0000FB40 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0000FB46 6400                       		bcc.s	Obj4E_ChkDel
0000FB48 6100 E488                  		bsr.w	SpeedToPos
0000FB4C                            
0000FB4C                            Obj4E_ChkDel:
0000FB4C 6100 E4AA                  		bsr.w	DisplaySprite
0000FB50 4A28 0036                  		tst.b	$36(a0)
0000FB54 6600                       		bne.s	locret_F17E
0000FB56 3028 0008                  		move.w	8(a0),d0
0000FB5A 0240 FF80                  		andi.w	#$FF80,d0
0000FB5E 3238 F700                  		move.w	($FFFFF700).w,d1
0000FB62 0441 0080                  		subi.w	#$80,d1
0000FB66 0241 FF80                  		andi.w	#$FF80,d1
0000FB6A 9041                       		sub.w	d1,d0
0000FB6C 0C40 0280                  		cmpi.w	#$280,d0
0000FB70 6200                       		bhi.s	Obj4E_ChkGone
0000FB72                            
0000FB72                            locret_F17E:
0000FB72 4E75                       		rts	
0000FB74                            ; ===========================================================================
0000FB74                            
0000FB74                            Obj4E_ChkGone:				; XREF: Obj4E_ChkDel
0000FB74 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000FB78 7000                       		moveq	#0,d0
0000FB7A 1028 0023                  		move.b	$23(a0),d0
0000FB7E 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000FB84 117C 0008 0024             		move.b	#8,$24(a0)
0000FB8A 4E75                       		rts	
0000FB8C                            ; ===========================================================================
0000FB8C                            
0000FB8C                            Obj4E_Move2:				; XREF: Obj4E_Index
0000FB8C 2268 003C                  		movea.l	$3C(a0),a1
0000FB90 0C29 0008 0024             		cmpi.b	#8,$24(a1)
0000FB96 6700                       		beq.s	Obj4E_Delete
0000FB98 3169 0008 0008             		move.w	8(a1),8(a0)	; move rest of lava wall
0000FB9E 0468 0080 0008             		subi.w	#$80,8(a0)
0000FBA4 6000 E452                  		bra.w	DisplaySprite
0000FBA8                            ; ===========================================================================
0000FBA8                            
0000FBA8                            Obj4E_Delete:				; XREF: Obj4E_Index
0000FBA8 6000 E48A                  		bra.w	DeleteObject
0000FBAC                            ; ===========================================================================
0000FBAC                            ; ---------------------------------------------------------------------------
0000FBAC                            ; Object 54 - invisible	lava tag (MZ)
0000FBAC                            ; ---------------------------------------------------------------------------
0000FBAC                            
0000FBAC                            Obj54:					; XREF: Obj_Index
0000FBAC 7000                       		moveq	#0,d0
0000FBAE 1028 0024                  		move.b	$24(a0),d0
0000FBB2 323B 0000                  		move.w	Obj54_Index(pc,d0.w),d1
0000FBB6 4EFB 1000                  		jmp	Obj54_Index(pc,d1.w)
0000FBBA                            ; ===========================================================================
0000FBBA 0000                       Obj54_Index:	dc.w Obj54_Main-Obj54_Index
0000FBBC 0000                       		dc.w Obj54_ChkDel-Obj54_Index
0000FBBE                            
0000FBBE 9694 9500                  Obj54_Sizes:	dc.b $96, $94, $95, 0
0000FBC2                            ; ===========================================================================
0000FBC2                            
0000FBC2                            Obj54_Main:				; XREF: Obj54_Index
0000FBC2 5428 0024                  		addq.b	#2,$24(a0)
0000FBC6 7000                       		moveq	#0,d0
0000FBC8 1028 0028                  		move.b	$28(a0),d0
0000FBCC 117B 00F0 0020             		move.b	Obj54_Sizes(pc,d0.w),$20(a0)
0000FBD2 217C 0000 0000 0004        		move.l	#Map_obj54,4(a0)
0000FBDA 117C 0084 0001             		move.b	#$84,1(a0)
0000FBE0                            
0000FBE0                            Obj54_ChkDel:				; XREF: Obj54_Index
0000FBE0 3028 0008                  		move.w	8(a0),d0
0000FBE4 0240 FF80                  		andi.w	#$FF80,d0
0000FBE8 3238 F700                  		move.w	($FFFFF700).w,d1
0000FBEC 0441 0080                  		subi.w	#$80,d1
0000FBF0 0241 FF80                  		andi.w	#$FF80,d1
0000FBF4 9041                       		sub.w	d1,d0
0000FBF6 6B00 E43C                  		bmi.w	DeleteObject
0000FBFA 0C40 0280                  		cmpi.w	#$280,d0
0000FBFE 6200 E434                  		bhi.w	DeleteObject
0000FC02 4E75                       		rts	
0000FC04                            ; ===========================================================================
0000FC04                            ; ---------------------------------------------------------------------------
0000FC04                            ; Sprite mappings - invisible lava tag (MZ)
0000FC04                            ; ---------------------------------------------------------------------------
0000FC04                            Map_obj54:
0000FC04                            	include "_maps\obj54.asm"
0000FC04                            ; ---------------------------------------------------------------------------
0000FC04                            ; Sprite mappings - invisible lava tag (MZ)
0000FC04                            ; ---------------------------------------------------------------------------
0000FC04 0000                       		dc.w byte_F212-Map_obj54
0000FC06 00                         byte_F212:	dc.b 0			; no sprite, because the tag is invisible!
0000FC08 00                         		even
0000FC08 00                         		even
0000FC08                            
0000FC08                            Ani_obj4C:
0000FC08                            	include "_anim\obj4C.asm"
0000FC08                            ; ---------------------------------------------------------------------------
0000FC08                            ; Animation script - geyser of lava (MZ)
0000FC08                            ; ---------------------------------------------------------------------------
0000FC08 0000                       		dc.w byte_F220-Ani_obj4C
0000FC0A 0000                       		dc.w byte_F22A-Ani_obj4C
0000FC0C 0000                       		dc.w byte_F22E-Ani_obj4C
0000FC0E 0000                       		dc.w byte_F232-Ani_obj4C
0000FC10 0000                       		dc.w byte_F23A-Ani_obj4C
0000FC12 0000                       		dc.w byte_F23E-Ani_obj4C
0000FC14 0200 0100 0104 0504 05FC   byte_F220:	dc.b 2,	0, 1, 0, 1, 4, 5, 4, 5,	$FC
0000FC1E 0202 03FF                  byte_F22A:	dc.b 2,	2, 3, $FF
0000FC22 0206 07FF                  byte_F22E:	dc.b 2,	6, 7, $FF
0000FC26 0202 0300 0100 01FC        byte_F232:	dc.b 2,	2, 3, 0, 1, 0, 1, $FC
0000FC2E 0F13 FF00                  byte_F23A:	dc.b $F, $13, $FF, 0
0000FC32 0211 12FF                  byte_F23E:	dc.b 2,	$11, $12, $FF
0000FC36                            		even
0000FC36                            		even
0000FC36                            
0000FC36                            Ani_obj4E:
0000FC36                            	include "_anim\obj4E.asm"
0000FC36                            ; ---------------------------------------------------------------------------
0000FC36                            ; Animation script - advancing wall of lava (MZ)
0000FC36                            ; ---------------------------------------------------------------------------
0000FC36 0000                       		dc.w byte_F244-Ani_obj4E
0000FC38 0900 0102 03FF             byte_F244:	dc.b 9,	0, 1, 2, 3, $FF
0000FC3E                            		even
0000FC3E                            		even
0000FC3E                            
0000FC3E                            ; ---------------------------------------------------------------------------
0000FC3E                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
0000FC3E                            ; ---------------------------------------------------------------------------
0000FC3E                            Map_obj4C:
0000FC3E                            	include "_maps\obj4C.asm"
0000FC3E                            ; ---------------------------------------------------------------------------
0000FC3E                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
0000FC3E                            ; ---------------------------------------------------------------------------
0000FC3E 0000 0000                  		dc.w byte_F272-Map_obj4C, byte_F27D-Map_obj4C
0000FC42 0000 0000                  		dc.w byte_F288-Map_obj4C, byte_F29D-Map_obj4C
0000FC46 0000 0000                  		dc.w byte_F2B2-Map_obj4C, byte_F2D1-Map_obj4C
0000FC4A 0000 0000                  		dc.w byte_F2F0-Map_obj4C, byte_F2FB-Map_obj4C
0000FC4E 0000 0000                  		dc.w byte_F306-Map_obj4C, byte_F339-Map_obj4C
0000FC52 0000 0000                  		dc.w byte_F36C-Map_obj4C, byte_F39F-Map_obj4C
0000FC56 0000 0000                  		dc.w byte_F3BE-Map_obj4C, byte_F3DD-Map_obj4C
0000FC5A 0000 0000                  		dc.w byte_F3FC-Map_obj4C, byte_F44D-Map_obj4C
0000FC5E 0000 0000                  		dc.w byte_F49E-Map_obj4C, byte_F4EF-Map_obj4C
0000FC62 0000 0000                  		dc.w byte_F50E-Map_obj4C, byte_F52D-Map_obj4C
0000FC66 02                         byte_F272:	dc.b 2
0000FC67 EC0B 0000 E8               		dc.b $EC, $B, 0, 0, $E8
0000FC6C EC0B 0800 00               		dc.b $EC, $B, 8, 0, 0
0000FC71 02                         byte_F27D:	dc.b 2
0000FC72 EC0B 0018 E8               		dc.b $EC, $B, 0, $18, $E8
0000FC77 EC0B 0818 00               		dc.b $EC, $B, 8, $18, 0
0000FC7C 04                         byte_F288:	dc.b 4
0000FC7D EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
0000FC82 F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
0000FC87 F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
0000FC8C EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
0000FC91 04                         byte_F29D:	dc.b 4
0000FC92 EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
0000FC97 F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
0000FC9C F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
0000FCA1 EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
0000FCA6 06                         byte_F2B2:	dc.b 6
0000FCA7 EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
0000FCAC F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
0000FCB1 F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
0000FCB6 EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
0000FCBB E80E 0090 E0               		dc.b $E8, $E, 0, $90, $E0
0000FCC0 E80E 0890 00               		dc.b $E8, $E, 8, $90, 0
0000FCC5 06                         byte_F2D1:	dc.b 6
0000FCC6 EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
0000FCCB F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
0000FCD0 F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
0000FCD5 EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
0000FCDA E80E 0890 E0               		dc.b $E8, $E, 8, $90, $E0
0000FCDF E80E 0090 00               		dc.b $E8, $E, 0, $90, 0
0000FCE4 02                         byte_F2F0:	dc.b 2
0000FCE5 E00F 0030 E0               		dc.b $E0, $F, 0, $30, $E0
0000FCEA E00F 0830 00               		dc.b $E0, $F, 8, $30, 0
0000FCEF 02                         byte_F2FB:	dc.b 2
0000FCF0 E00F 0830 E0               		dc.b $E0, $F, 8, $30, $E0
0000FCF5 E00F 0030 00               		dc.b $E0, $F, 0, $30, 0
0000FCFA 0A                         byte_F306:	dc.b $A
0000FCFB 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000FD00 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000FD05 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000FD0A B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000FD0F D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000FD14 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000FD19 F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
0000FD1E F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
0000FD23 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
0000FD28 100F 0840 00               		dc.b $10, $F, 8, $40, 0
0000FD2D 0A                         byte_F339:	dc.b $A
0000FD2E 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000FD33 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000FD38 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000FD3D B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000FD42 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000FD47 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000FD4C F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
0000FD51 F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
0000FD56 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
0000FD5B 100F 0850 00               		dc.b $10, $F, 8, $50, 0
0000FD60 0A                         byte_F36C:	dc.b $A
0000FD61 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000FD66 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000FD6B B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000FD70 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000FD75 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000FD7A D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000FD7F F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
0000FD84 F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
0000FD89 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
0000FD8E 100F 0860 00               		dc.b $10, $F, 8, $60, 0
0000FD93 06                         byte_F39F:	dc.b 6
0000FD94 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000FD99 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000FD9E B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000FDA3 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000FDA8 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000FDAD D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000FDB2 06                         byte_F3BE:	dc.b 6
0000FDB3 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000FDB8 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000FDBD B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000FDC2 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000FDC7 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000FDCC D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000FDD1 06                         byte_F3DD:	dc.b 6
0000FDD2 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000FDD7 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000FDDC B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000FDE1 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000FDE6 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000FDEB D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000FDF0 10                         byte_F3FC:	dc.b $10
0000FDF1 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000FDF6 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000FDFB B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000FE00 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000FE05 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000FE0A D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000FE0F F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
0000FE14 F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
0000FE19 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
0000FE1E 100F 0840 00               		dc.b $10, $F, 8, $40, 0
0000FE23 300F 0040 E0               		dc.b $30, $F, 0, $40, $E0
0000FE28 300F 0840 00               		dc.b $30, $F, 8, $40, 0
0000FE2D 500F 0040 E0               		dc.b $50, $F, 0, $40, $E0
0000FE32 500F 0840 00               		dc.b $50, $F, 8, $40, 0
0000FE37 700F 0040 E0               		dc.b $70, $F, 0, $40, $E0
0000FE3C 700F 0840 00               		dc.b $70, $F, 8, $40, 0
0000FE41 10                         byte_F44D:	dc.b $10
0000FE42 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000FE47 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000FE4C B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000FE51 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000FE56 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000FE5B D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000FE60 F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
0000FE65 F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
0000FE6A 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
0000FE6F 100F 0850 00               		dc.b $10, $F, 8, $50, 0
0000FE74 300F 0050 E0               		dc.b $30, $F, 0, $50, $E0
0000FE79 300F 0850 00               		dc.b $30, $F, 8, $50, 0
0000FE7E 500F 0050 E0               		dc.b $50, $F, 0, $50, $E0
0000FE83 500F 0850 00               		dc.b $50, $F, 8, $50, 0
0000FE88 700F 0050 E0               		dc.b $70, $F, 0, $50, $E0
0000FE8D 700F 0850 00               		dc.b $70, $F, 8, $50, 0
0000FE92 10                         byte_F49E:	dc.b $10
0000FE93 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000FE98 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000FE9D B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000FEA2 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000FEA7 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000FEAC D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000FEB1 F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
0000FEB6 F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
0000FEBB 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
0000FEC0 100F 0860 00               		dc.b $10, $F, 8, $60, 0
0000FEC5 300F 0060 E0               		dc.b $30, $F, 0, $60, $E0
0000FECA 300F 0860 00               		dc.b $30, $F, 8, $60, 0
0000FECF 500F 0060 E0               		dc.b $50, $F, 0, $60, $E0
0000FED4 500F 0860 00               		dc.b $50, $F, 8, $60, 0
0000FED9 700F 0060 E0               		dc.b $70, $F, 0, $60, $E0
0000FEDE 700F 0860 00               		dc.b $70, $F, 8, $60, 0
0000FEE3 06                         byte_F4EF:	dc.b 6
0000FEE4 E00B 0000 C8               		dc.b $E0, $B, 0, 0, $C8
0000FEE9 E80E 000C E0               		dc.b $E8, $E, 0, $C, $E0
0000FEEE E80E 080C 00               		dc.b $E8, $E, 8, $C, 0
0000FEF3 E00B 0800 20               		dc.b $E0, $B, 8, 0, $20
0000FEF8 D80E 0090 E0               		dc.b $D8, $E, 0, $90, $E0
0000FEFD D80E 0890 00               		dc.b $D8, $E, 8, $90, 0
0000FF02 06                         byte_F50E:	dc.b 6
0000FF03 E00B 0018 C8               		dc.b $E0, $B, 0, $18, $C8
0000FF08 E80E 0024 E0               		dc.b $E8, $E, 0, $24, $E0
0000FF0D E80E 0824 00               		dc.b $E8, $E, 8, $24, 0
0000FF12 E00B 0818 20               		dc.b $E0, $B, 8, $18, $20
0000FF17 D80E 0890 E0               		dc.b $D8, $E, 8, $90, $E0
0000FF1C D80E 0090 00               		dc.b $D8, $E, 0, $90, 0
0000FF21 00                         byte_F52D:	dc.b 0
0000FF22                            		even
0000FF22                            		even
0000FF22                            
0000FF22                            ; ---------------------------------------------------------------------------
0000FF22                            ; Sprite mappings - advancing wall of lava (MZ)
0000FF22                            ; ---------------------------------------------------------------------------
0000FF22                            Map_obj4E:
0000FF22                            	include "_maps\obj4E.asm"
0000FF22                            ; ---------------------------------------------------------------------------
0000FF22                            ; Sprite mappings - advancing wall of lava (MZ)
0000FF22                            ; ---------------------------------------------------------------------------
0000FF22 0000                       		dc.w byte_F538-Map_obj4E
0000FF24 0000                       		dc.w byte_F566-Map_obj4E
0000FF26 0000                       		dc.w byte_F594-Map_obj4E
0000FF28 0000                       		dc.w byte_F5C2-Map_obj4E
0000FF2A 0000                       		dc.w byte_F5F0-Map_obj4E
0000FF2C 09                         byte_F538:	dc.b 9
0000FF2D E00F 0060 20               		dc.b $E0, $F, 0, $60, $20
0000FF32 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
0000FF37 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FF3C E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FF41 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FF46 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FF4B 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FF50 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FF55 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FF5A 09                         byte_F566:	dc.b 9
0000FF5B E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
0000FF60 000F 0080 3C               		dc.b 0,	$F, 0, $80, $3C
0000FF65 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FF6A E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FF6F 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FF74 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FF79 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FF7E E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FF83 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FF88 09                         byte_F594:	dc.b 9
0000FF89 E00F 0080 20               		dc.b $E0, $F, 0, $80, $20
0000FF8E 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
0000FF93 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FF98 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FF9D 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FFA2 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FFA7 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FFAC E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FFB1 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FFB6 09                         byte_F5C2:	dc.b 9
0000FFB7 E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
0000FFBC 000F 0060 3C               		dc.b 0,	$F, 0, $60, $3C
0000FFC1 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FFC6 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FFCB 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FFD0 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FFD5 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FFDA E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FFDF 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FFE4 08                         byte_F5F0:	dc.b 8
0000FFE5 E00F FF2A 20               		dc.b $E0, $F, $FF, $2A,	$20
0000FFEA 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FFEF E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FFF4 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FFF9 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FFFE 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
00010003 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
00010008 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0001000E 00                         		even
0001000E 00                         		even
0001000E                            
0001000E                            ; ===========================================================================
0001000E                            ; ---------------------------------------------------------------------------
0001000E                            ; Object 40 - Moto Bug enemy (GHZ)
0001000E                            ; ---------------------------------------------------------------------------
0001000E                            
0001000E                            Obj40:					; XREF: Obj_Index
0001000E 7000                       		moveq	#0,d0
00010010 1028 0024                  		move.b	$24(a0),d0
00010014 323B 0000                  		move.w	Obj40_Index(pc,d0.w),d1
00010018 4EFB 1000                  		jmp	Obj40_Index(pc,d1.w)
0001001C                            ; ===========================================================================
0001001C 0000                       Obj40_Index:	dc.w Obj40_Main-Obj40_Index
0001001E 0000                       		dc.w Obj40_Action-Obj40_Index
00010020 0000                       		dc.w Obj40_Animate-Obj40_Index
00010022 0000                       		dc.w Obj40_Delete-Obj40_Index
00010024                            ; ===========================================================================
00010024                            
00010024                            Obj40_Main:				; XREF: Obj40_Index
00010024 217C 0000 0000 0004        		move.l	#Map_obj40,4(a0)
0001002C 317C 04F0 0002             		move.w	#$4F0,2(a0)
00010032 117C 0004 0001             		move.b	#4,1(a0)
00010038 117C 0004 0018             		move.b	#4,$18(a0)
0001003E 117C 0014 0019             		move.b	#$14,$19(a0)
00010044 4A28 001C                  		tst.b	$1C(a0)		; is object a smoke trail?
00010048 6600                       		bne.s	Obj40_SetSmoke	; if yes, branch
0001004A 117C 000E 0016             		move.b	#$E,$16(a0)
00010050 117C 0008 0017             		move.b	#8,$17(a0)
00010056 117C 000C 0020             		move.b	#$C,$20(a0)
0001005C 6100 DF02                  		bsr.w	ObjectFall
00010060 4EB9 0000 0000             		jsr	ObjHitFloor
00010066 4A41                       		tst.w	d1
00010068 6A00                       		bpl.s	locret_F68A
0001006A D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
0001006E 317C 0000 0012             		move.w	#0,$12(a0)
00010074 5428 0024                  		addq.b	#2,$24(a0)
00010078 0868 0000 0022             		bchg	#0,$22(a0)
0001007E                            
0001007E                            locret_F68A:
0001007E 4E75                       		rts	
00010080                            ; ===========================================================================
00010080                            
00010080                            Obj40_SetSmoke:				; XREF: Obj40_Main
00010080 5828 0024                  		addq.b	#4,$24(a0)
00010084 6000 0000                  		bra.w	Obj40_Animate
00010088                            ; ===========================================================================
00010088                            
00010088                            Obj40_Action:				; XREF: Obj40_Index
00010088 7000                       		moveq	#0,d0
0001008A 1028 0025                  		move.b	$25(a0),d0
0001008E 323B 0000                  		move.w	Obj40_Index2(pc,d0.w),d1
00010092 4EBB 1000                  		jsr	Obj40_Index2(pc,d1.w)
00010096 43F9 0000 0000             		lea	(Ani_obj40).l,a1
0001009C 6100 AFB8                  		bsr.w	AnimateSprite
000100A0                            
000100A0                            ; ---------------------------------------------------------------------------
000100A0                            ; Routine to mark an enemy/monitor/ring	as destroyed
000100A0                            ; ---------------------------------------------------------------------------
000100A0                            
000100A0                            MarkObjGone:
000100A0 3028 0008                  		move.w	8(a0),d0
000100A4 0240 FF80                  		andi.w	#$FF80,d0
000100A8 3238 F700                  		move.w	($FFFFF700).w,d1
000100AC 0441 0080                  		subi.w	#$80,d1
000100B0 0241 FF80                  		andi.w	#$FF80,d1
000100B4 9041                       		sub.w	d1,d0
000100B6 0C40 0280                  		cmpi.w	#$280,d0
000100BA 6200 0000                  		bhi.w	Mark_ChkGone
000100BE 6000 DF38                  		bra.w	DisplaySprite
000100C2                            ; ===========================================================================
000100C2                            
000100C2                            Mark_ChkGone:
000100C2 45F8 FC00                  		lea	($FFFFFC00).w,a2
000100C6 7000                       		moveq	#0,d0
000100C8 1028 0023                  		move.b	$23(a0),d0
000100CC 6700                       		beq.s	Mark_Delete
000100CE 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000100D4                            
000100D4                            Mark_Delete:
000100D4 6000 DF5E                  		bra.w	DeleteObject
000100D8                            
000100D8                            ; ===========================================================================
000100D8 0000                       Obj40_Index2:	dc.w Obj40_Move-Obj40_Index2
000100DA 0000                       		dc.w Obj40_FixToFloor-Obj40_Index2
000100DC                            ; ===========================================================================
000100DC                            
000100DC                            Obj40_Move:				; XREF: Obj40_Index2
000100DC 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
000100E0 6A00                       		bpl.s	locret_F70A	; if time remains, branch
000100E2 5428 0025                  		addq.b	#2,$25(a0)
000100E6 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object to the left
000100EC 117C 0001 001C             		move.b	#1,$1C(a0)
000100F2 0868 0000 0022             		bchg	#0,$22(a0)
000100F8 6600                       		bne.s	locret_F70A
000100FA 4468 0010                  		neg.w	$10(a0)		; change direction
000100FE                            
000100FE                            locret_F70A:
000100FE 4E75                       		rts	
00010100                            ; ===========================================================================
00010100                            
00010100                            Obj40_FixToFloor:			; XREF: Obj40_Index2
00010100 6100 DED0                  		bsr.w	SpeedToPos
00010104 4EB9 0000 0000             		jsr	ObjHitFloor
0001010A 0C41 FFF8                  		cmpi.w	#-8,d1
0001010E 6D00                       		blt.s	Obj40_Pause
00010110 0C41 000C                  		cmpi.w	#$C,d1
00010114 6C00                       		bge.s	Obj40_Pause
00010116 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
0001011A 5328 0033                  		subq.b	#1,$33(a0)
0001011E 6A00                       		bpl.s	locret_F756
00010120 117C 000F 0033             		move.b	#$F,$33(a0)
00010126 6100 E356                  		bsr.w	SingleObjLoad
0001012A 6600                       		bne.s	locret_F756
0001012C 12BC 0040                  		move.b	#$40,0(a1)	; load exhaust smoke object
00010130 3368 0008 0008             		move.w	8(a0),8(a1)
00010136 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001013C 1368 0022 0022             		move.b	$22(a0),$22(a1)
00010142 137C 0002 001C             		move.b	#2,$1C(a1)
00010148                            
00010148                            locret_F756:
00010148 4E75                       		rts	
0001014A                            ; ===========================================================================
0001014A                            
0001014A                            Obj40_Pause:				; XREF: Obj40_FixToFloor
0001014A 5528 0025                  		subq.b	#2,$25(a0)
0001014E 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
00010154 317C 0000 0010             		move.w	#0,$10(a0)	; stop the object moving
0001015A 117C 0000 001C             		move.b	#0,$1C(a0)
00010160 4E75                       		rts	
00010162                            ; ===========================================================================
00010162                            
00010162                            Obj40_Animate:				; XREF: Obj40_Index
00010162 43F9 0000 0000             		lea	(Ani_obj40).l,a1
00010168 6100 AEEC                  		bsr.w	AnimateSprite
0001016C 6000 DE8A                  		bra.w	DisplaySprite
00010170                            ; ===========================================================================
00010170                            
00010170                            Obj40_Delete:				; XREF: Obj40_Index
00010170 6000 DEC2                  		bra.w	DeleteObject
00010174                            ; ===========================================================================
00010174                            Ani_obj40:
00010174                            	include "_anim\obj40.asm"
00010174                            ; ---------------------------------------------------------------------------
00010174                            ; Animation script - Motobug enemy
00010174                            ; ---------------------------------------------------------------------------
00010174 0000                       		dc.w byte_F788-Ani_obj40
00010176 0000                       		dc.w byte_F78C-Ani_obj40
00010178 0000                       		dc.w byte_F792-Ani_obj40
0001017A 0F02 FF00                  byte_F788:	dc.b $F, 2, $FF, 0
0001017E 0700 0100 02FF             byte_F78C:	dc.b 7,	0, 1, 0, 2, $FF
00010184 0103 0603 0604 0604 0604+  byte_F792:	dc.b 1,	3, 6, 3, 6, 4, 6, 4, 6,	4, 6, 5, $FC, 0
00010192                            		even
00010192                            		even
00010192                            
00010192                            ; ---------------------------------------------------------------------------
00010192                            ; Sprite mappings - Moto Bug enemy (GHZ)
00010192                            ; ---------------------------------------------------------------------------
00010192                            Map_obj40:
00010192                            	include "_maps\obj40.asm"
00010192                            Map_cedc:
00010192 0000                       Map_cedc_0: 	dc.w Map_cedc_E-Map_cedc
00010194 0000                       Map_cedc_2: 	dc.w Map_cedc_23-Map_cedc
00010196 0000                       Map_cedc_4: 	dc.w Map_cedc_38-Map_cedc
00010198 0000                       Map_cedc_6: 	dc.w Map_cedc_52-Map_cedc
0001019A 0000                       Map_cedc_8: 	dc.w Map_cedc_58-Map_cedc
0001019C 0000                       Map_cedc_A: 	dc.w Map_cedc_5E-Map_cedc
0001019E 0000                       Map_cedc_C: 	dc.w Map_cedc_64-Map_cedc
000101A0 04                         Map_cedc_E: 	dc.b $4
000101A1 F00D 0000 EC               	dc.b $F0, $D, $0, $0, $EC
000101A6 000C 0008 EC               	dc.b $0, $C, $0, $8, $EC
000101AB F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
000101B0 0808 000E F4               	dc.b $8, $8, $0, $E, $F4
000101B5 04                         Map_cedc_23: 	dc.b $4
000101B6 F10D 0000 EC               	dc.b $F1, $D, $0, $0, $EC
000101BB 010C 0008 EC               	dc.b $1, $C, $0, $8, $EC
000101C0 F901 000C 0C               	dc.b $F9, $1, $0, $C, $C
000101C5 0908 0011 F4               	dc.b $9, $8, $0, $11, $F4
000101CA 05                         Map_cedc_38: 	dc.b $5
000101CB F00D 0000 EC               	dc.b $F0, $D, $0, $0, $EC
000101D0 000C 0014 EC               	dc.b $0, $C, $0, $14, $EC
000101D5 F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
000101DA 0804 0018 EC               	dc.b $8, $4, $0, $18, $EC
000101DF 0804 0012 FC               	dc.b $8, $4, $0, $12, $FC
000101E4 01                         Map_cedc_52: 	dc.b $1
000101E5 FA00 001A 10               	dc.b $FA, $0, $0, $1A, $10
000101EA 01                         Map_cedc_58: 	dc.b $1
000101EB FA00 001B 10               	dc.b $FA, $0, $0, $1B, $10
000101F0 01                         Map_cedc_5E: 	dc.b $1
000101F1 FA00 001C 10               	dc.b $FA, $0, $0, $1C, $10
000101F6 00                         Map_cedc_64: 	dc.b $0
000101F8 00                         	even
000101F8 00                         	even
000101F8                            
000101F8                            ; ===========================================================================
000101F8                            ; ---------------------------------------------------------------------------
000101F8                            ; Object 4F - blank
000101F8                            ; ---------------------------------------------------------------------------
000101F8                            
000101F8                            Obj4F:					; XREF: Obj_Index
000101F8 4E75                       		rts	
000101FA                            
000101FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000101FA                            
000101FA                            
000101FA                            Obj50_ChkWall:				; XREF: Obj50_FixToFloor
000101FA 3038 FE04                  		move.w	($FFFFFE04).w,d0
000101FE D047                       		add.w	d7,d0
00010200 0240 0003                  		andi.w	#3,d0
00010204 6600                       		bne.s	loc_F836
00010206 7600                       		moveq	#0,d3
00010208 1628 0019                  		move.b	$19(a0),d3
0001020C 4A68 0010                  		tst.w	$10(a0)
00010210 6B00                       		bmi.s	loc_F82C
00010212 6100 0000                  		bsr.w	ObjHitWallRight
00010216 4A41                       		tst.w	d1
00010218 6A00                       		bpl.s	loc_F836
0001021A                            
0001021A                            loc_F828:
0001021A 7001                       		moveq	#1,d0
0001021C 4E75                       		rts	
0001021E                            ; ===========================================================================
0001021E                            
0001021E                            loc_F82C:
0001021E 4643                       		not.w	d3
00010220 6100 0000                  		bsr.w	ObjHitWallLeft
00010224 4A41                       		tst.w	d1
00010226 6BF2                       		bmi.s	loc_F828
00010228                            
00010228                            loc_F836:
00010228 7000                       		moveq	#0,d0
0001022A 4E75                       		rts	
0001022C                            ; End of function Obj50_ChkWall
0001022C                            
0001022C                            ; ===========================================================================
0001022C                            ; ---------------------------------------------------------------------------
0001022C                            ; Object 50 - Yadrin enemy (SYZ)
0001022C                            ; ---------------------------------------------------------------------------
0001022C                            
0001022C                            Obj50:					; XREF: Obj_Index
0001022C 7000                       		moveq	#0,d0
0001022E 1028 0024                  		move.b	$24(a0),d0
00010232 323B 0000                  		move.w	Obj50_Index(pc,d0.w),d1
00010236 4EFB 1000                  		jmp	Obj50_Index(pc,d1.w)
0001023A                            ; ===========================================================================
0001023A 0000                       Obj50_Index:	dc.w Obj50_Main-Obj50_Index
0001023C 0000                       		dc.w Obj50_Action-Obj50_Index
0001023E                            ; ===========================================================================
0001023E                            
0001023E                            Obj50_Main:				; XREF: Obj50_Index
0001023E 217C 0000 0000 0004        		move.l	#Map_obj50,4(a0)
00010246 317C 247B 0002             		move.w	#$247B,2(a0)
0001024C 117C 0004 0001             		move.b	#4,1(a0)
00010252 117C 0004 0018             		move.b	#4,$18(a0)
00010258 117C 0014 0019             		move.b	#$14,$19(a0)
0001025E 117C 0011 0016             		move.b	#$11,$16(a0)
00010264 117C 0008 0017             		move.b	#8,$17(a0)
0001026A 117C 00CC 0020             		move.b	#$CC,$20(a0)
00010270 6100 DCEE                  		bsr.w	ObjectFall
00010274 6100 0000                  		bsr.w	ObjHitFloor
00010278 4A41                       		tst.w	d1
0001027A 6A00                       		bpl.s	locret_F89E
0001027C D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
00010280 317C 0000 0012             		move.w	#0,$12(a0)
00010286 5428 0024                  		addq.b	#2,$24(a0)
0001028A 0868 0000 0022             		bchg	#0,$22(a0)
00010290                            
00010290                            locret_F89E:
00010290 4E75                       		rts	
00010292                            ; ===========================================================================
00010292                            
00010292                            Obj50_Action:				; XREF: Obj50_Index
00010292 7000                       		moveq	#0,d0
00010294 1028 0025                  		move.b	$25(a0),d0
00010298 323B 0000                  		move.w	Obj50_Index2(pc,d0.w),d1
0001029C 4EBB 1000                  		jsr	Obj50_Index2(pc,d1.w)
000102A0 43F9 0000 0000             		lea	(Ani_obj50).l,a1
000102A6 6100 ADAE                  		bsr.w	AnimateSprite
000102AA 6000 FDF4                  		bra.w	MarkObjGone
000102AE                            ; ===========================================================================
000102AE 0000                       Obj50_Index2:	dc.w Obj50_Move-Obj50_Index2
000102B0 0000                       		dc.w Obj50_FixToFloor-Obj50_Index2
000102B2                            ; ===========================================================================
000102B2                            
000102B2                            Obj50_Move:				; XREF: Obj50_Index2
000102B2 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
000102B6 6A00                       		bpl.s	locret_F8E2	; if time remains, branch
000102B8 5428 0025                  		addq.b	#2,$25(a0)
000102BC 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object
000102C2 117C 0001 001C             		move.b	#1,$1C(a0)
000102C8 0868 0000 0022             		bchg	#0,$22(a0)
000102CE 6600                       		bne.s	locret_F8E2
000102D0 4468 0010                  		neg.w	$10(a0)		; change direction
000102D4                            
000102D4                            locret_F8E2:
000102D4 4E75                       		rts	
000102D6                            ; ===========================================================================
000102D6                            
000102D6                            Obj50_FixToFloor:			; XREF: Obj50_Index2
000102D6 6100 DCFA                  		bsr.w	SpeedToPos
000102DA 6100 0000                  		bsr.w	ObjHitFloor
000102DE 0C41 FFF8                  		cmpi.w	#-8,d1
000102E2 6D00                       		blt.s	Obj50_Pause
000102E4 0C41 000C                  		cmpi.w	#$C,d1
000102E8 6C00                       		bge.s	Obj50_Pause
000102EA D368 000C                  		add.w	d1,$C(a0)	; match	object's position to the floor
000102EE 6100 FF0A                  		bsr.w	Obj50_ChkWall
000102F2 6600                       		bne.s	Obj50_Pause
000102F4 4E75                       		rts	
000102F6                            ; ===========================================================================
000102F6                            
000102F6                            Obj50_Pause:				; XREF: Obj50_FixToFloor
000102F6 5528 0025                  		subq.b	#2,$25(a0)
000102FA 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
00010300 317C 0000 0010             		move.w	#0,$10(a0)
00010306 117C 0000 001C             		move.b	#0,$1C(a0)
0001030C 4E75                       		rts	
0001030E                            ; ===========================================================================
0001030E                            Ani_obj50:
0001030E                            	include "_anim\obj50.asm"
0001030E                            ; ---------------------------------------------------------------------------
0001030E                            ; Animation script - Yadrin enemy
0001030E                            ; ---------------------------------------------------------------------------
0001030E 0000                       		dc.w byte_F920-Ani_obj50
00010310 0000                       		dc.w byte_F924-Ani_obj50
00010312 0700 FF00                  byte_F920:	dc.b 7,	0, $FF,	0
00010316 0700 0301 0400 0302 05FF   byte_F924:	dc.b 7,	0, 3, 1, 4, 0, 3, 2, 5,	$FF
00010320                            		even
00010320                            		even
00010320                            
00010320                            ; ---------------------------------------------------------------------------
00010320                            ; Sprite mappings - Yadrin enemy (SYZ)
00010320                            ; ---------------------------------------------------------------------------
00010320                            Map_obj50:
00010320                            	include "_maps\obj50.asm"
00010320                            Map_ff24:
00010320 0000                       Map_ff24_0: 	dc.w Map_ff24_C-Map_ff24
00010322 0000                       Map_ff24_2: 	dc.w Map_ff24_26-Map_ff24
00010324 0000                       Map_ff24_4: 	dc.w Map_ff24_40-Map_ff24
00010326 0000                       Map_ff24_6: 	dc.w Map_ff24_5A-Map_ff24
00010328 0000                       Map_ff24_8: 	dc.w Map_ff24_74-Map_ff24
0001032A 0000                       Map_ff24_A: 	dc.w Map_ff24_8E-Map_ff24
0001032C 05                         Map_ff24_C: 	dc.b $5
0001032D F408 0000 F4               	dc.b $F4, $8, $0, $0, $F4
00010332 FC0E 0003 EC               	dc.b $FC, $E, $0, $3, $EC
00010337 EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
0001033C F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
00010341 0409 0031 FC               	dc.b $4, $9, $0, $31, $FC
00010346 05                         Map_ff24_26: 	dc.b $5
00010347 F408 0014 F4               	dc.b $F4, $8, $0, $14, $F4
0001034C FC0E 0017 EC               	dc.b $FC, $E, $0, $17, $EC
00010351 EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
00010356 F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
0001035B 0409 0031 FC               	dc.b $4, $9, $0, $31, $FC
00010360 05                         Map_ff24_40: 	dc.b $5
00010361 F409 0023 F4               	dc.b $F4, $9, $0, $23, $F4
00010366 040D 0029 EC               	dc.b $4, $D, $0, $29, $EC
0001036B EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
00010370 F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
00010375 0409 0031 FC               	dc.b $4, $9, $0, $31, $FC
0001037A 05                         Map_ff24_5A: 	dc.b $5
0001037B F408 0000 F4               	dc.b $F4, $8, $0, $0, $F4
00010380 FC0E 0003 EC               	dc.b $FC, $E, $0, $3, $EC
00010385 EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
0001038A F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
0001038F 0409 0037 FC               	dc.b $4, $9, $0, $37, $FC
00010394 05                         Map_ff24_74: 	dc.b $5
00010395 F408 0014 F4               	dc.b $F4, $8, $0, $14, $F4
0001039A FC0E 0017 EC               	dc.b $FC, $E, $0, $17, $EC
0001039F EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
000103A4 F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
000103A9 0409 0037 FC               	dc.b $4, $9, $0, $37, $FC
000103AE 05                         Map_ff24_8E: 	dc.b $5
000103AF F409 0023 F4               	dc.b $F4, $9, $0, $23, $F4
000103B4 040D 0029 EC               	dc.b $4, $D, $0, $29, $EC
000103B9 EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
000103BE F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
000103C3 0409 0037 FC               	dc.b $4, $9, $0, $37, $FC
000103C8                            	even
000103C8                            	even
000103C8                            
000103C8                            ; ---------------------------------------------------------------------------
000103C8                            ; Solid	object subroutine (includes spikes, blocks, rocks etc)
000103C8                            ;
000103C8                            ; variables:
000103C8                            ; d1 = width
000103C8                            ; d2 = height /	2 (when	jumping)
000103C8                            ; d3 = height /	2 (when	walking)
000103C8                            ; d4 = x-axis position
000103C8                            ; ---------------------------------------------------------------------------
000103C8                            
000103C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000103C8                            
000103C8                            
000103C8                            SolidObject:
000103C8 4A28 0025                  		tst.b	$25(a0)
000103CC 6700 0000                  		beq.w	loc_FAC8
000103D0 3401                       		move.w	d1,d2
000103D2 D442                       		add.w	d2,d2
000103D4 43F8 D000                  		lea	($FFFFD000).w,a1
000103D8 0829 0001 0022             		btst	#1,$22(a1)
000103DE 6600                       		bne.s	loc_F9FE
000103E0 3029 0008                  		move.w	8(a1),d0
000103E4 9068 0008                  		sub.w	8(a0),d0
000103E8 D041                       		add.w	d1,d0
000103EA 6B00                       		bmi.s	loc_F9FE
000103EC B042                       		cmp.w	d2,d0
000103EE 6500                       		bcs.s	loc_FA12
000103F0                            
000103F0                            loc_F9FE:
000103F0 08A9 0003 0022             		bclr	#3,$22(a1)
000103F6 08A8 0003 0022             		bclr	#3,$22(a0)
000103FC 4228 0025                  		clr.b	$25(a0)
00010400 7800                       		moveq	#0,d4
00010402 4E75                       		rts	
00010404                            ; ===========================================================================
00010404                            
00010404                            loc_FA12:
00010404 3404                       		move.w	d4,d2
00010406                            		;bsr.w	MvSonicOnPtfm Causes an error in building (Come back to this)
00010406 7800                       		moveq	#0,d4
00010408 4E75                       		rts	
0001040A                            ; ===========================================================================
0001040A                            
0001040A                            SolidObject71:				; XREF: Obj71_Solid
0001040A 4A28 0025                  		tst.b	$25(a0)
0001040E 6700 0000                  		beq.w	loc_FAD0
00010412 3401                       		move.w	d1,d2
00010414 D442                       		add.w	d2,d2
00010416 43F8 D000                  		lea	($FFFFD000).w,a1
0001041A 0829 0001 0022             		btst	#1,$22(a1)
00010420 6600                       		bne.s	loc_FA44
00010422 3029 0008                  		move.w	8(a1),d0
00010426 9068 0008                  		sub.w	8(a0),d0
0001042A D041                       		add.w	d1,d0
0001042C 6B00                       		bmi.s	loc_FA44
0001042E B042                       		cmp.w	d2,d0
00010430 6500                       		bcs.s	loc_FA58
00010432                            
00010432                            loc_FA44:
00010432 08A9 0003 0022             		bclr	#3,$22(a1)
00010438 08A8 0003 0022             		bclr	#3,$22(a0)
0001043E 4228 0025                  		clr.b	$25(a0)
00010442 7800                       		moveq	#0,d4
00010444 4E75                       		rts	
00010446                            ; ===========================================================================
00010446                            
00010446                            loc_FA58:
00010446 3404                       		move.w	d4,d2
00010448                            	;	bsr.w	MvSonicOnPtfm  Causes an error in building (Come back to this)
00010448 7800                       		moveq	#0,d4
0001044A 4E75                       		rts	
0001044C                            ; ===========================================================================
0001044C                            
0001044C                            SolidObject2F:				; XREF: Obj2F_Solid
0001044C 43F8 D000                  		lea	($FFFFD000).w,a1
00010450 4A28 0001                  		tst.b	1(a0)
00010454 6A00 0000                  		bpl.w	loc_FB92
00010458 3029 0008                  		move.w	8(a1),d0
0001045C 9068 0008                  		sub.w	8(a0),d0
00010460 D041                       		add.w	d1,d0
00010462 6B00 0000                  		bmi.w	loc_FB92
00010466 3601                       		move.w	d1,d3
00010468 D643                       		add.w	d3,d3
0001046A B043                       		cmp.w	d3,d0
0001046C 6200 0000                  		bhi.w	loc_FB92
00010470 3A00                       		move.w	d0,d5
00010472 0828 0000 0001             		btst	#0,1(a0)
00010478 6700                       		beq.s	loc_FA94
0001047A 4645                       		not.w	d5
0001047C DA43                       		add.w	d3,d5
0001047E                            
0001047E                            loc_FA94:
0001047E E24D                       		lsr.w	#1,d5
00010480 7600                       		moveq	#0,d3
00010482 1632 5000                  		move.b	(a2,d5.w),d3
00010486 9612                       		sub.b	(a2),d3
00010488 3A28 000C                  		move.w	$C(a0),d5
0001048C 9A43                       		sub.w	d3,d5
0001048E 1629 0016                  		move.b	$16(a1),d3
00010492 4883                       		ext.w	d3
00010494 D443                       		add.w	d3,d2
00010496 3629 000C                  		move.w	$C(a1),d3
0001049A 9645                       		sub.w	d5,d3
0001049C 5843                       		addq.w	#4,d3
0001049E D642                       		add.w	d2,d3
000104A0 6B00 0000                  		bmi.w	loc_FB92
000104A4 3802                       		move.w	d2,d4
000104A6 D844                       		add.w	d4,d4
000104A8 B644                       		cmp.w	d4,d3
000104AA 6400 0000                  		bcc.w	loc_FB92
000104AE 6000 0000                  		bra.w	loc_FB0E
000104B2                            ; ===========================================================================
000104B2                            
000104B2                            loc_FAC8:
000104B2 4A28 0001                  		tst.b	1(a0)
000104B6 6A00 0000                  		bpl.w	loc_FB92
000104BA                            
000104BA                            loc_FAD0:
000104BA 43F8 D000                  		lea	($FFFFD000).w,a1
000104BE 3029 0008                  		move.w	8(a1),d0
000104C2 9068 0008                  		sub.w	8(a0),d0
000104C6 D041                       		add.w	d1,d0
000104C8 6B00 0000                  		bmi.w	loc_FB92
000104CC 3601                       		move.w	d1,d3
000104CE D643                       		add.w	d3,d3
000104D0 B043                       		cmp.w	d3,d0
000104D2 6200 0000                  		bhi.w	loc_FB92
000104D6 1629 0016                  		move.b	$16(a1),d3
000104DA 4883                       		ext.w	d3
000104DC D443                       		add.w	d3,d2
000104DE 3629 000C                  		move.w	$C(a1),d3
000104E2 9668 000C                  		sub.w	$C(a0),d3
000104E6 5843                       		addq.w	#4,d3
000104E8 D642                       		add.w	d2,d3
000104EA 6B00 0000                  		bmi.w	loc_FB92
000104EE 3802                       		move.w	d2,d4
000104F0 D844                       		add.w	d4,d4
000104F2 B644                       		cmp.w	d4,d3
000104F4 6400 0000                  		bcc.w	loc_FB92
000104F8                            
000104F8                            loc_FB0E:
000104F8 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000104FC 6B00 0000                  		bmi.w	loc_FB92
00010500 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00010506 6400 0000                  		bcc.w	loc_FB92
0001050A 4A78 FE08                  		tst.w	($FFFFFE08).w
0001050E 6600 0000                  		bne.w	loc_FBAC
00010512 3A00                       		move.w	d0,d5
00010514 B240                       		cmp.w	d0,d1
00010516 6400                       		bcc.s	loc_FB36
00010518 D241                       		add.w	d1,d1
0001051A 9041                       		sub.w	d1,d0
0001051C 3A00                       		move.w	d0,d5
0001051E 4445                       		neg.w	d5
00010520                            
00010520                            loc_FB36:
00010520 3203                       		move.w	d3,d1
00010522 B443                       		cmp.w	d3,d2
00010524 6400                       		bcc.s	loc_FB44
00010526 5943                       		subq.w	#4,d3
00010528 9644                       		sub.w	d4,d3
0001052A 3203                       		move.w	d3,d1
0001052C 4441                       		neg.w	d1
0001052E                            
0001052E                            loc_FB44:
0001052E BA41                       		cmp.w	d1,d5
00010530 6200 0000                  		bhi.w	loc_FBB0
00010534 0C41 0004                  		cmpi.w	#4,d1
00010538 6300                       		bls.s	loc_FB8C
0001053A 4A40                       		tst.w	d0
0001053C 6700                       		beq.s	loc_FB70
0001053E 6B00                       		bmi.s	loc_FB5E
00010540 4A69 0010                  		tst.w	$10(a1)
00010544 6B00                       		bmi.s	loc_FB70
00010546 6000                       		bra.s	loc_FB64
00010548                            ; ===========================================================================
00010548                            
00010548                            loc_FB5E:
00010548 4A69 0010                  		tst.w	$10(a1)
0001054C 6A00                       		bpl.s	loc_FB70
0001054E                            
0001054E                            loc_FB64:
0001054E 337C 0000 0014             		move.w	#0,$14(a1)	; stop Sonic moving
00010554 337C 0000 0010             		move.w	#0,$10(a1)
0001055A                            
0001055A                            loc_FB70:
0001055A 9169 0008                  		sub.w	d0,8(a1)
0001055E 0829 0001 0022             		btst	#1,$22(a1)
00010564 6600                       		bne.s	loc_FB8C
00010566 08E9 0005 0022             		bset	#5,$22(a1)
0001056C 08E8 0005 0022             		bset	#5,$22(a0)
00010572 7801                       		moveq	#1,d4
00010574 4E75                       		rts	
00010576                            ; ===========================================================================
00010576                            
00010576                            loc_FB8C:
00010576 6100                       		bsr.s	loc_FBA0
00010578 7801                       		moveq	#1,d4
0001057A 4E75                       		rts	
0001057C                            ; ===========================================================================
0001057C                            
0001057C                            loc_FB92:
0001057C 0828 0005 0022             		btst	#5,$22(a0)
00010582 6700                       		beq.s	loc_FBAC
00010584 337C 0001 001C             		move.w	#1,$1C(a1)	; use walking animation
0001058A                            
0001058A                            loc_FBA0:
0001058A 08A8 0005 0022             		bclr	#5,$22(a0)
00010590 08A9 0005 0022             		bclr	#5,$22(a1)
00010596                            
00010596                            loc_FBAC:
00010596 7800                       		moveq	#0,d4
00010598 4E75                       		rts	
0001059A                            ; ===========================================================================
0001059A                            
0001059A                            loc_FBB0:
0001059A 4A43                       		tst.w	d3
0001059C 6B00                       		bmi.s	loc_FBBC
0001059E 0C43 0010                  		cmpi.w	#$10,d3
000105A2 6500                       		bcs.s	loc_FBEE
000105A4 60D6                       		bra.s	loc_FB92
000105A6                            ; ===========================================================================
000105A6                            
000105A6                            loc_FBBC:
000105A6 4A69 0012                  		tst.w	$12(a1)
000105AA 6700                       		beq.s	loc_FBD6
000105AC 6A00                       		bpl.s	loc_FBD2
000105AE 4A43                       		tst.w	d3
000105B0 6A00                       		bpl.s	loc_FBD2
000105B2 9769 000C                  		sub.w	d3,$C(a1)
000105B6 337C 0000 0012             		move.w	#0,$12(a1)	; stop Sonic moving
000105BC                            
000105BC                            loc_FBD2:
000105BC 78FF                       		moveq	#-1,d4
000105BE 4E75                       		rts	
000105C0                            ; ===========================================================================
000105C0                            
000105C0                            loc_FBD6:
000105C0 0829 0001 0022             		btst	#1,$22(a1)
000105C6 66F4                       		bne.s	loc_FBD2
000105C8 2F08                       		move.l	a0,-(sp)
000105CA 2049                       		movea.l	a1,a0
000105CC 4EB9 0000 0000             		jsr	KillSonic
000105D2 205F                       		movea.l	(sp)+,a0
000105D4 78FF                       		moveq	#-1,d4
000105D6 4E75                       		rts	
000105D8                            ; ===========================================================================
000105D8                            
000105D8                            loc_FBEE:
000105D8 5943                       		subq.w	#4,d3
000105DA 7200                       		moveq	#0,d1
000105DC 1228 0019                  		move.b	$19(a0),d1
000105E0 3401                       		move.w	d1,d2
000105E2 D442                       		add.w	d2,d2
000105E4 D269 0008                  		add.w	8(a1),d1
000105E8 9268 0008                  		sub.w	8(a0),d1
000105EC 6B00                       		bmi.s	loc_FC28
000105EE B242                       		cmp.w	d2,d1
000105F0 6400                       		bcc.s	loc_FC28
000105F2 4A69 0012                  		tst.w	$12(a1)
000105F6 6B00                       		bmi.s	loc_FC28
000105F8 9769 000C                  		sub.w	d3,$C(a1)
000105FC 5369 000C                  		subq.w	#1,$C(a1)
00010600 6100                       		bsr.s	sub_FC2C
00010602 117C 0002 0025             		move.b	#2,$25(a0)
00010608 08E8 0003 0022             		bset	#3,$22(a0)
0001060E 78FF                       		moveq	#-1,d4
00010610 4E75                       		rts	
00010612                            ; ===========================================================================
00010612                            
00010612                            loc_FC28:
00010612 7800                       		moveq	#0,d4
00010614 4E75                       		rts	
00010616                            ; End of function SolidObject
00010616                            
00010616                            
00010616                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00010616                            
00010616                            
00010616                            sub_FC2C:				; XREF: SolidObject
00010616 0829 0003 0022             		btst	#3,$22(a1)
0001061C 6700                       		beq.s	loc_FC4E
0001061E 7000                       		moveq	#0,d0
00010620 1029 003D                  		move.b	$3D(a1),d0
00010624 ED48                       		lsl.w	#6,d0
00010626 0680 00FF D000             		addi.l	#$FFD000,d0
0001062C 2440                       		movea.l	d0,a2
0001062E 08AA 0003 0022             		bclr	#3,$22(a2)
00010634 422A 0025                  		clr.b	$25(a2)
00010638                            
00010638                            loc_FC4E:
00010638 3008                       		move.w	a0,d0
0001063A 0440 D000                  		subi.w	#-$3000,d0
0001063E EC48                       		lsr.w	#6,d0
00010640 0240 007F                  		andi.w	#$7F,d0
00010644 1340 003D                  		move.b	d0,$3D(a1)
00010648 137C 0000 0026             		move.b	#0,$26(a1)
0001064E 337C 0000 0012             		move.w	#0,$12(a1)
00010654 3369 0010 0014             		move.w	$10(a1),$14(a1)
0001065A 0829 0001 0022             		btst	#1,$22(a1)
00010660 6700                       		beq.s	loc_FC84
00010662 2F08                       		move.l	a0,-(sp)
00010664 2049                       		movea.l	a1,a0
00010666 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
0001066C 205F                       		movea.l	(sp)+,a0
0001066E                            
0001066E                            loc_FC84:
0001066E 08E9 0003 0022             		bset	#3,$22(a1)
00010674 08E8 0003 0022             		bset	#3,$22(a0)
0001067A 4E75                       		rts	
0001067C                            ; End of function sub_FC2C
0001067C                            
0001067C                            ; ===========================================================================
0001067C                            ; ---------------------------------------------------------------------------
0001067C                            ; Object 51 - smashable	green block (MZ)
0001067C                            ; ---------------------------------------------------------------------------
0001067C                            
0001067C                            Obj51:					; XREF: Obj_Index
0001067C 7000                       		moveq	#0,d0
0001067E 1028 0024                  		move.b	$24(a0),d0
00010682 323B 0000                  		move.w	Obj51_Index(pc,d0.w),d1
00010686 4EBB 1000                  		jsr	Obj51_Index(pc,d1.w)
0001068A 6000 FA14                  		bra.w	MarkObjGone
0001068E                            ; ===========================================================================
0001068E 0000                       Obj51_Index:	dc.w Obj51_Main-Obj51_Index
00010690 0000                       		dc.w Obj51_Solid-Obj51_Index
00010692 0000                       		dc.w Obj51_Display-Obj51_Index
00010694                            ; ===========================================================================
00010694                            
00010694                            Obj51_Main:				; XREF: Obj51_Index
00010694 5428 0024                  		addq.b	#2,$24(a0)
00010698 217C 0000 0000 0004        		move.l	#Map_obj51,4(a0)
000106A0 317C 42B8 0002             		move.w	#$42B8,2(a0)
000106A6 117C 0004 0001             		move.b	#4,1(a0)
000106AC 117C 0010 0019             		move.b	#$10,$19(a0)
000106B2 117C 0004 0018             		move.b	#4,$18(a0)
000106B8 1168 0028 001A             		move.b	$28(a0),$1A(a0)
000106BE                            
000106BE                            Obj51_Solid:				; XREF: Obj51_Index
000106BE 3178 F7D0 0034             		move.w	($FFFFF7D0).w,$34(a0)
000106C4 1178 D01C 0032             		move.b	($FFFFD01C).w,$32(a0) ;	load Sonic's animation number
000106CA 323C 001B                  		move.w	#$1B,d1
000106CE 343C 0010                  		move.w	#$10,d2
000106D2 363C 0011                  		move.w	#$11,d3
000106D6 3828 0008                  		move.w	8(a0),d4
000106DA 6100 FCEC                  		bsr.w	SolidObject
000106DE 0828 0003 0022             		btst	#3,$22(a0)
000106E4 6600                       		bne.s	Obj51_Smash
000106E6                            
000106E6                            locret_FCFC:
000106E6 4E75                       		rts	
000106E8                            ; ===========================================================================
000106E8                            
000106E8                            Obj51_Smash:				; XREF: Obj51_Solid
000106E8 0C28 0002 0032             		cmpi.b	#2,$32(a0)	; is Sonic rolling/jumping?
000106EE 66F6                       		bne.s	locret_FCFC	; if not, branch
000106F0 31E8 0034 F7D0             		move.w	$34(a0),($FFFFF7D0).w
000106F6 08E9 0002 0022             		bset	#2,$22(a1)
000106FC 137C 000E 0016             		move.b	#$E,$16(a1)
00010702 137C 0007 0017             		move.b	#7,$17(a1)
00010708 137C 0002 001C             		move.b	#2,$1C(a1)
0001070E 337C FD00 0012             		move.w	#-$300,$12(a1)	; bounce Sonic upwards
00010714 08E9 0001 0022             		bset	#1,$22(a1)
0001071A 08A9 0003 0022             		bclr	#3,$22(a1)
00010720 137C 0002 0024             		move.b	#2,$24(a1)
00010726 08A8 0003 0022             		bclr	#3,$22(a0)
0001072C 4228 0025                  		clr.b	$25(a0)
00010730 117C 0001 001A             		move.b	#1,$1A(a0)
00010736 49F9 0000 0000             		lea	(Obj51_Speeds).l,a4 ; load broken	fragment speed data
0001073C 7203                       		moveq	#3,d1		; set number of	fragments to 4
0001073E 343C 0038                  		move.w	#$38,d2
00010742 6100 D45C                  		bsr.w	SmashObject
00010746 6100 DD36                  		bsr.w	SingleObjLoad
0001074A 6600                       		bne.s	Obj51_Display
0001074C 12BC 0029                  		move.b	#$29,0(a1)	; load points object
00010750 3368 0008 0008             		move.w	8(a0),8(a1)
00010756 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001075C 3438 F7D0                  		move.w	($FFFFF7D0).w,d2
00010760 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w
00010764 0C42 0006                  		cmpi.w	#6,d2
00010768 6500                       		bcs.s	Obj51_Bonus
0001076A 7406                       		moveq	#6,d2
0001076C                            
0001076C                            Obj51_Bonus:
0001076C 7000                       		moveq	#0,d0
0001076E 303B 2000                  		move.w	Obj51_Points(pc,d2.w),d0
00010772 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 blocks been smashed?
00010778 6500                       		bcs.s	loc_FD98	; if not, branch
0001077A 303C 03E8                  		move.w	#1000,d0	; give higher points for 16th block
0001077E 740A                       		moveq	#10,d2
00010780                            
00010780                            loc_FD98:
00010780 4EB9 0000 0000             		jsr	AddPoints
00010786 E24A                       		lsr.w	#1,d2
00010788 1342 001A                  		move.b	d2,$1A(a1)
0001078C                            
0001078C                            Obj51_Display:				; XREF: Obj51_Index
0001078C 6100 D844                  		bsr.w	SpeedToPos
00010790 0668 0038 0012             		addi.w	#$38,$12(a0)
00010796 6100 D860                  		bsr.w	DisplaySprite
0001079A 4A28 0001                  		tst.b	1(a0)
0001079E 6A00 D894                  		bpl.w	DeleteObject
000107A2 4E75                       		rts	
000107A4                            ; ===========================================================================
000107A4 FE00 FE00                  Obj51_Speeds:	dc.w $FE00, $FE00	; x-speed, y-speed
000107A8 FF00 FF00                  		dc.w $FF00, $FF00
000107AC 0200 FE00                  		dc.w $200, $FE00
000107B0 0100 FF00                  		dc.w $100, $FF00
000107B4                            
000107B4 000A 0014 0032 0064        Obj51_Points:	dc.w 10, 20, 50, 100
000107BC                            ; ---------------------------------------------------------------------------
000107BC                            ; Sprite mappings - smashable green block (MZ)
000107BC                            ; ---------------------------------------------------------------------------
000107BC                            Map_obj51:
000107BC                            	include "_maps\obj51.asm"
000107BC                            ; ---------------------------------------------------------------------------
000107BC                            ; Sprite mappings - smashable green block (MZ)
000107BC                            ; ---------------------------------------------------------------------------
000107BC 0000                       		dc.w byte_FDD8-Map_obj51
000107BE 0000                       		dc.w byte_FDE3-Map_obj51
000107C0 02                         byte_FDD8:	dc.b 2
000107C1 F00D 0000 F0               		dc.b $F0, $D, 0, 0, $F0
000107C6 000D 0000 F0               		dc.b 0,	$D, 0, 0, $F0
000107CB 04                         byte_FDE3:	dc.b 4
000107CC F005 8000 F0               		dc.b $F0, 5, $80, 0, $F0
000107D1 0005 8000 F0               		dc.b 0,	5, $80,	0, $F0
000107D6 F005 8000 00               		dc.b $F0, 5, $80, 0, 0
000107DB 0005 8000 00               		dc.b 0,	5, $80,	0, 0
000107E0                            		even
000107E0                            		even
000107E0                            
000107E0                            ; ===========================================================================
000107E0                            ; ---------------------------------------------------------------------------
000107E0                            ; Object 52 - moving platform blocks (MZ, LZ, SBZ)
000107E0                            ; ---------------------------------------------------------------------------
000107E0                            
000107E0                            Obj52:					; XREF: Obj_Index
000107E0 7000                       		moveq	#0,d0
000107E2 1028 0024                  		move.b	$24(a0),d0
000107E6 323B 0000                  		move.w	Obj52_Index(pc,d0.w),d1
000107EA 4EFB 1000                  		jmp	Obj52_Index(pc,d1.w)
000107EE                            ; ===========================================================================
000107EE 0000                       Obj52_Index:	dc.w Obj52_Main-Obj52_Index
000107F0 0000                       		dc.w Obj52_Platform-Obj52_Index
000107F2 0000                       		dc.w Obj52_StandOn-Obj52_Index
000107F4                            
000107F4 1000                       Obj52_Var:	dc.b $10, 0		; object width,	frame number
000107F6 2001                       		dc.b $20, 1
000107F8 2002                       		dc.b $20, 2
000107FA 4003                       		dc.b $40, 3
000107FC 3004                       		dc.b $30, 4
000107FE                            ; ===========================================================================
000107FE                            
000107FE                            Obj52_Main:				; XREF: Obj52_Index
000107FE 5428 0024                  		addq.b	#2,$24(a0)
00010802 217C 0000 0000 0004        		move.l	#Map_obj52,4(a0)
0001080A 317C 42B8 0002             		move.w	#$42B8,2(a0)
00010810 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010816 6600                       		bne.s	loc_FE44
00010818 217C 0000 0000 0004        		move.l	#Map_obj52a,4(a0) ; LZ specific	code
00010820 317C 43BC 0002             		move.w	#$43BC,2(a0)
00010826 117C 0007 0016             		move.b	#7,$16(a0)
0001082C                            
0001082C                            loc_FE44:
0001082C 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00010832 6600                       		bne.s	loc_FE60
00010834 317C 22C0 0002             		move.w	#$22C0,2(a0)	; SBZ specific code (object 5228)
0001083A 0C28 0028 0028             		cmpi.b	#$28,$28(a0)	; is object 5228 ?
00010840 6700                       		beq.s	loc_FE60	; if yes, branch
00010842 317C 4460 0002             		move.w	#$4460,2(a0)	; SBZ specific code (object 523x)
00010848                            
00010848                            loc_FE60:
00010848 117C 0004 0001             		move.b	#4,1(a0)
0001084E 7000                       		moveq	#0,d0
00010850 1028 0028                  		move.b	$28(a0),d0
00010854 E648                       		lsr.w	#3,d0
00010856 0240 001E                  		andi.w	#$1E,d0
0001085A 45FB 0098                  		lea	Obj52_Var(pc,d0.w),a2
0001085E 115A 0019                  		move.b	(a2)+,$19(a0)
00010862 115A 001A                  		move.b	(a2)+,$1A(a0)
00010866 117C 0004 0018             		move.b	#4,$18(a0)
0001086C 3168 0008 0030             		move.w	8(a0),$30(a0)
00010872 3168 000C 0032             		move.w	$C(a0),$32(a0)
00010878 0228 000F 0028             		andi.b	#$F,$28(a0)
0001087E                            
0001087E                            Obj52_Platform:				; XREF: Obj52_Index
0001087E 6100 0000                  		bsr.w	Obj52_Move
00010882 7200                       		moveq	#0,d1
00010884 1228 0019                  		move.b	$19(a0),d1
00010888 4EB9 0000 7C12             		jsr	(PlatformObject).l
0001088E 6000                       		bra.s	Obj52_ChkDel
00010890                            ; ===========================================================================
00010890                            
00010890                            Obj52_StandOn:				; XREF: Obj52_Index
00010890 7200                       		moveq	#0,d1
00010892 1228 0019                  		move.b	$19(a0),d1
00010896 4EB9 0000 7D86             		jsr	(ExitPlatform).l
0001089C 3F28 0008                  		move.w	8(a0),-(sp)
000108A0 6100 0000                  		bsr.w	Obj52_Move
000108A4 341F                       		move.w	(sp)+,d2
000108A6 4EB9 0000 82F0             		jsr	(MvSonicOnPtfm2).l
000108AC                            
000108AC                            Obj52_ChkDel:				; XREF: Obj52_Platform
000108AC 3028 0030                  		move.w	$30(a0),d0
000108B0 0240 FF80                  		andi.w	#$FF80,d0
000108B4 3238 F700                  		move.w	($FFFFF700).w,d1
000108B8 0441 0080                  		subi.w	#$80,d1
000108BC 0241 FF80                  		andi.w	#$FF80,d1
000108C0 9041                       		sub.w	d1,d0
000108C2 0C40 0280                  		cmpi.w	#$280,d0
000108C6 6200 D76C                  		bhi.w	DeleteObject
000108CA 6000 D72C                  		bra.w	DisplaySprite
000108CE                            ; ===========================================================================
000108CE                            
000108CE                            Obj52_Move:				; XREF: Obj52_Platform; Obj52_StandOn
000108CE 7000                       		moveq	#0,d0
000108D0 1028 0028                  		move.b	$28(a0),d0
000108D4 0240 000F                  		andi.w	#$F,d0
000108D8 D040                       		add.w	d0,d0
000108DA 323B 0000                  		move.w	Obj52_TypeIndex(pc,d0.w),d1
000108DE 4EFB 1000                  		jmp	Obj52_TypeIndex(pc,d1.w)
000108E2                            ; ===========================================================================
000108E2 0000 0000                  Obj52_TypeIndex:dc.w Obj52_Type00-Obj52_TypeIndex, Obj52_Type01-Obj52_TypeIndex
000108E6 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type03-Obj52_TypeIndex
000108EA 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type05-Obj52_TypeIndex
000108EE 0000 0000                  		dc.w Obj52_Type06-Obj52_TypeIndex, Obj52_Type07-Obj52_TypeIndex
000108F2 0000 0000                  		dc.w Obj52_Type08-Obj52_TypeIndex, Obj52_Type02-Obj52_TypeIndex
000108F6 0000                       		dc.w Obj52_Type0A-Obj52_TypeIndex
000108F8                            ; ===========================================================================
000108F8                            
000108F8                            Obj52_Type00:				; XREF: Obj52_TypeIndex
000108F8 4E75                       		rts	
000108FA                            ; ===========================================================================
000108FA                            
000108FA                            Obj52_Type01:				; XREF: Obj52_TypeIndex
000108FA 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
000108FE 323C 0060                  		move.w	#$60,d1
00010902 0828 0000 0022             		btst	#0,$22(a0)
00010908 6700                       		beq.s	loc_FF26
0001090A 4440                       		neg.w	d0
0001090C D041                       		add.w	d1,d0
0001090E                            
0001090E                            loc_FF26:
0001090E 3228 0030                  		move.w	$30(a0),d1
00010912 9240                       		sub.w	d0,d1
00010914 3141 0008                  		move.w	d1,8(a0)
00010918 4E75                       		rts	
0001091A                            ; ===========================================================================
0001091A                            
0001091A                            Obj52_Type02:				; XREF: Obj52_TypeIndex
0001091A 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; is Sonic standing on the platform?
00010920 6600                       		bne.s	Obj52_02_Wait
00010922 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
00010926                            
00010926                            Obj52_02_Wait:
00010926 4E75                       		rts	
00010928                            ; ===========================================================================
00010928                            
00010928                            Obj52_Type03:				; XREF: Obj52_TypeIndex
00010928 7600                       		moveq	#0,d3
0001092A 1628 0019                  		move.b	$19(a0),d3
0001092E 6100 0000                  		bsr.w	ObjHitWallRight
00010932 4A41                       		tst.w	d1		; has the platform hit a wall?
00010934 6B00                       		bmi.s	Obj52_03_End	; if yes, branch
00010936 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
0001093A 3168 0008 0030             		move.w	8(a0),$30(a0)
00010940 4E75                       		rts	
00010942                            ; ===========================================================================
00010942                            
00010942                            Obj52_03_End:
00010942 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving	type)
00010946 4E75                       		rts	
00010948                            ; ===========================================================================
00010948                            
00010948                            Obj52_Type05:				; XREF: Obj52_TypeIndex
00010948 7600                       		moveq	#0,d3
0001094A 1628 0019                  		move.b	$19(a0),d3
0001094E 6100 0000                  		bsr.w	ObjHitWallRight
00010952 4A41                       		tst.w	d1		; has the platform hit a wall?
00010954 6B00                       		bmi.s	Obj52_05_End	; if yes, branch
00010956 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
0001095A 3168 0008 0030             		move.w	8(a0),$30(a0)
00010960 4E75                       		rts	
00010962                            ; ===========================================================================
00010962                            
00010962                            Obj52_05_End:
00010962 5228 0028                  		addq.b	#1,$28(a0)	; change to type 06 (falling)
00010966 4E75                       		rts	
00010968                            ; ===========================================================================
00010968                            
00010968                            Obj52_Type06:				; XREF: Obj52_TypeIndex
00010968 6100 D668                  		bsr.w	SpeedToPos
0001096C 0668 0018 0012             		addi.w	#$18,$12(a0)	; make the platform fall
00010972 6100 0000                  		bsr.w	ObjHitFloor
00010976 4A41                       		tst.w	d1		; has platform hit the floor?
00010978 6A00 0000                  		bpl.w	locret_FFA0	; if not, branch
0001097C D368 000C                  		add.w	d1,$C(a0)
00010980 4268 0012                  		clr.w	$12(a0)		; stop platform	falling
00010984 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving)
00010988                            
00010988                            locret_FFA0:
00010988 4E75                       		rts	
0001098A                            ; ===========================================================================
0001098A                            
0001098A                            Obj52_Type07:				; XREF: Obj52_TypeIndex
0001098A 4A38 F7E2                  		tst.b	($FFFFF7E2).w	; has switch number 02 been pressed?
0001098E 6700                       		beq.s	Obj52_07_ChkDel
00010990 5728 0028                  		subq.b	#3,$28(a0)	; if yes, change object	type to	04
00010994                            
00010994                            Obj52_07_ChkDel:
00010994 588F                       		addq.l	#4,sp
00010996 3028 0030                  		move.w	$30(a0),d0
0001099A 0240 FF80                  		andi.w	#$FF80,d0
0001099E 3238 F700                  		move.w	($FFFFF700).w,d1
000109A2 0441 0080                  		subi.w	#$80,d1
000109A6 0241 FF80                  		andi.w	#$FF80,d1
000109AA 9041                       		sub.w	d1,d0
000109AC 0C40 0280                  		cmpi.w	#$280,d0
000109B0 6200 D682                  		bhi.w	DeleteObject
000109B4 4E75                       		rts	
000109B6                            ; ===========================================================================
000109B6                            
000109B6                            Obj52_Type08:				; XREF: Obj52_TypeIndex
000109B6 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
000109BA 323C 0080                  		move.w	#$80,d1
000109BE 0828 0000 0022             		btst	#0,$22(a0)
000109C4 6700                       		beq.s	loc_FFE2
000109C6 4440                       		neg.w	d0
000109C8 D041                       		add.w	d1,d0
000109CA                            
000109CA                            loc_FFE2:
000109CA 3228 0032                  		move.w	$32(a0),d1
000109CE 9240                       		sub.w	d0,d1
000109D0 3141 000C                  		move.w	d1,$C(a0)
000109D4 4E75                       		rts	
000109D6                            ; ===========================================================================
000109D6                            
000109D6                            Obj52_Type0A:				; XREF: Obj52_TypeIndex
000109D6 7600                       		moveq	#0,d3
000109D8 1628 0019                  		move.b	$19(a0),d3
000109DC D643                       		add.w	d3,d3
000109DE 7208                       		moveq	#8,d1
000109E0 0828 0000 0022             		btst	#0,$22(a0)
000109E6 6700                       		beq.s	loc_10004
000109E8 4441                       		neg.w	d1
000109EA 4443                       		neg.w	d3
000109EC                            
000109EC                            loc_10004:
000109EC 4A68 0036                  		tst.w	$36(a0)		; is platform set to move back?
000109F0 6600                       		bne.s	Obj52_0A_Back	; if yes, branch
000109F2 3028 0008                  		move.w	8(a0),d0
000109F6 9068 0030                  		sub.w	$30(a0),d0
000109FA B043                       		cmp.w	d3,d0
000109FC 6700                       		beq.s	Obj52_0A_Wait
000109FE D368 0008                  		add.w	d1,8(a0)	; move platform
00010A02 317C 012C 0034             		move.w	#300,$34(a0)	; set time delay to 5 seconds
00010A08 4E75                       		rts	
00010A0A                            ; ===========================================================================
00010A0A                            
00010A0A                            Obj52_0A_Wait:
00010A0A 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time delay
00010A0E 6600                       		bne.s	locret_1002E	; if time remains, branch
00010A10 317C 0001 0036             		move.w	#1,$36(a0)	; set platform to move back to its original position
00010A16                            
00010A16                            locret_1002E:
00010A16 4E75                       		rts	
00010A18                            ; ===========================================================================
00010A18                            
00010A18                            Obj52_0A_Back:
00010A18 3028 0008                  		move.w	8(a0),d0
00010A1C 9068 0030                  		sub.w	$30(a0),d0
00010A20 6700                       		beq.s	Obj52_0A_Reset
00010A22 9368 0008                  		sub.w	d1,8(a0)	; return platform to its original position
00010A26 4E75                       		rts	
00010A28                            ; ===========================================================================
00010A28                            
00010A28                            Obj52_0A_Reset:
00010A28 4268 0036                  		clr.w	$36(a0)
00010A2C 5328 0028                  		subq.b	#1,$28(a0)
00010A30 4E75                       		rts	
00010A32                            ; ===========================================================================
00010A32                            ; ---------------------------------------------------------------------------
00010A32                            ; Sprite mappings - moving blocks (MZ, SBZ)
00010A32                            ; ---------------------------------------------------------------------------
00010A32                            Map_obj52:
00010A32                            	include "_maps\obj52mz.asm"
00010A32                            ; ---------------------------------------------------------------------------
00010A32                            ; Sprite mappings - moving blocks (MZ, SBZ)
00010A32                            ; ---------------------------------------------------------------------------
00010A32 0000 0000                  		dc.w byte_10054-Map_obj52, byte_1005A-Map_obj52
00010A36 0000 0000                  		dc.w byte_10065-Map_obj52, byte_1007A-Map_obj52
00010A3A 0000                       		dc.w byte_1008F-Map_obj52
00010A3C 01                         byte_10054:	dc.b 1
00010A3D F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
00010A42 02                         byte_1005A:	dc.b 2
00010A43 F80F 0008 E0               		dc.b $F8, $F, 0, 8, $E0
00010A48 F80F 0008 00               		dc.b $F8, $F, 0, 8, 0
00010A4D 04                         byte_10065:	dc.b 4
00010A4E F80C 2000 E0               		dc.b $F8, $C, $20, 0, $E0
00010A53 000D 0004 E0               		dc.b 0,	$D, 0, 4, $E0
00010A58 F80C 2000 00               		dc.b $F8, $C, $20, 0, 0
00010A5D 000D 0004 00               		dc.b 0,	$D, 0, 4, 0
00010A62 04                         byte_1007A:	dc.b 4
00010A63 F80E 0000 C0               		dc.b $F8, $E, 0, 0, $C0
00010A68 F80E 0003 E0               		dc.b $F8, $E, 0, 3, $E0
00010A6D F80E 0003 00               		dc.b $F8, $E, 0, 3, 0
00010A72 F80E 0800 20               		dc.b $F8, $E, 8, 0, $20
00010A77 03                         byte_1008F:	dc.b 3
00010A78 F80F 0008 D0               		dc.b $F8, $F, 0, 8, $D0
00010A7D F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
00010A82 F80F 0008 10               		dc.b $F8, $F, 0, 8, $10
00010A88 00                         		even
00010A88 00                         		even
00010A88                            
00010A88                            ; ---------------------------------------------------------------------------
00010A88                            ; Sprite mappings - moving block (LZ)
00010A88                            ; ---------------------------------------------------------------------------
00010A88                            Map_obj52a:
00010A88                            	include "_maps\obj52lz.asm"
00010A88                            ; ---------------------------------------------------------------------------
00010A88                            ; Sprite mappings - moving block (LZ)
00010A88                            ; ---------------------------------------------------------------------------
00010A88 0000                       		dc.w byte_100A2-Map_obj52a
00010A8A 01                         byte_100A2:	dc.b 1
00010A8B F80D 0000 F0               		dc.b $F8, $D, 0, 0, $F0
00010A90                            		even
00010A90                            		even
00010A90                            
00010A90                            ; ===========================================================================
00010A90                            ; ---------------------------------------------------------------------------
00010A90                            ; Object 55 - Basaran enemy (MZ)
00010A90                            ; ---------------------------------------------------------------------------
00010A90                            
00010A90                            Obj55:					; XREF: Obj_Index
00010A90 7000                       		moveq	#0,d0
00010A92 1028 0024                  		move.b	$24(a0),d0
00010A96 323B 0000                  		move.w	Obj55_Index(pc,d0.w),d1
00010A9A 4EFB 1000                  		jmp	Obj55_Index(pc,d1.w)
00010A9E                            ; ===========================================================================
00010A9E 0000                       Obj55_Index:	dc.w Obj55_Main-Obj55_Index
00010AA0 0000                       		dc.w Obj55_Action-Obj55_Index
00010AA2                            ; ===========================================================================
00010AA2                            
00010AA2                            Obj55_Main:				; XREF: Obj55_Index
00010AA2 5428 0024                  		addq.b	#2,$24(a0)
00010AA6 217C 0000 0000 0004        		move.l	#Map_obj55,4(a0)
00010AAE 317C 84B8 0002             		move.w	#$84B8,2(a0)
00010AB4 117C 0004 0001             		move.b	#4,1(a0)
00010ABA 117C 000C 0016             		move.b	#$C,$16(a0)
00010AC0 117C 0002 0018             		move.b	#2,$18(a0)
00010AC6 117C 000B 0020             		move.b	#$B,$20(a0)
00010ACC 117C 0010 0019             		move.b	#$10,$19(a0)
00010AD2                            
00010AD2                            Obj55_Action:				; XREF: Obj55_Index
00010AD2 7000                       		moveq	#0,d0
00010AD4 1028 0025                  		move.b	$25(a0),d0
00010AD8 323B 0000                  		move.w	Obj55_Index2(pc,d0.w),d1
00010ADC 4EBB 1000                  		jsr	Obj55_Index2(pc,d1.w)
00010AE0 43F9 0000 0000             		lea	(Ani_obj55).l,a1
00010AE6 6100 A56E                  		bsr.w	AnimateSprite
00010AEA 6000 F5B4                  		bra.w	MarkObjGone
00010AEE                            ; ===========================================================================
00010AEE 0000                       Obj55_Index2:	dc.w Obj55_ChkDrop-Obj55_Index2
00010AF0 0000                       		dc.w Obj55_DropFly-Obj55_Index2
00010AF2 0000                       		dc.w Obj55_PlaySnd-Obj55_Index2
00010AF4 0000                       		dc.w Obj55_FlyUp-Obj55_Index2
00010AF6                            ; ===========================================================================
00010AF6                            
00010AF6                            Obj55_ChkDrop:				; XREF: Obj55_Index2
00010AF6 343C 0080                  		move.w	#$80,d2
00010AFA 6100 0000                  		bsr.w	Obj55_ChkSonic
00010AFE 6400                       		bcc.s	Obj55_NoDrop
00010B00 3038 D00C                  		move.w	($FFFFD00C).w,d0
00010B04 3140 0036                  		move.w	d0,$36(a0)
00010B08 9068 000C                  		sub.w	$C(a0),d0
00010B0C 6500                       		bcs.s	Obj55_NoDrop
00010B0E 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	basaran?
00010B12 6400                       		bcc.s	Obj55_NoDrop	; if not, branch
00010B14 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
00010B18 6600                       		bne.s	Obj55_NoDrop	; if yes, branch
00010B1A 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00010B1E D007                       		add.b	d7,d0
00010B20 0200 0007                  		andi.b	#7,d0
00010B24 6600                       		bne.s	Obj55_NoDrop
00010B26 117C 0001 001C             		move.b	#1,$1C(a0)
00010B2C 5428 0025                  		addq.b	#2,$25(a0)
00010B30                            
00010B30                            Obj55_NoDrop:
00010B30 4E75                       		rts	
00010B32                            ; ===========================================================================
00010B32                            
00010B32                            Obj55_DropFly:				; XREF: Obj55_Index2
00010B32 6100 D49E                  		bsr.w	SpeedToPos
00010B36 0668 0018 0012             		addi.w	#$18,$12(a0)	; make basaran fall
00010B3C 343C 0080                  		move.w	#$80,d2
00010B40 6100 0000                  		bsr.w	Obj55_ChkSonic
00010B44 3028 0036                  		move.w	$36(a0),d0
00010B48 9068 000C                  		sub.w	$C(a0),d0
00010B4C 6500                       		bcs.s	Obj55_ChkDel
00010B4E 0C40 0010                  		cmpi.w	#$10,d0
00010B52 6400                       		bcc.s	locret_10180
00010B54 3141 0010                  		move.w	d1,$10(a0)	; make basaran fly horizontally
00010B58 317C 0000 0012             		move.w	#0,$12(a0)	; stop basaran falling
00010B5E 117C 0002 001C             		move.b	#2,$1C(a0)
00010B64 5428 0025                  		addq.b	#2,$25(a0)
00010B68                            
00010B68                            locret_10180:
00010B68 4E75                       		rts	
00010B6A                            ; ===========================================================================
00010B6A                            
00010B6A                            Obj55_ChkDel:				; XREF: Obj55_DropFly
00010B6A 4A28 0001                  		tst.b	1(a0)
00010B6E 6A00 D4C4                  		bpl.w	DeleteObject
00010B72 4E75                       		rts	
00010B74                            ; ===========================================================================
00010B74                            
00010B74                            Obj55_PlaySnd:				; XREF: Obj55_Index2
00010B74 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00010B78 0200 000F                  		andi.b	#$F,d0
00010B7C 6600                       		bne.s	loc_101A0
00010B7E 303C 00C0                  		move.w	#$C0,d0
00010B82 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play flapping sound
00010B88                            
00010B88                            loc_101A0:
00010B88 6100 D448                  		bsr.w	SpeedToPos
00010B8C 3038 D008                  		move.w	($FFFFD008).w,d0
00010B90 9068 0008                  		sub.w	8(a0),d0
00010B94 6400                       		bcc.s	loc_101B0
00010B96 4440                       		neg.w	d0
00010B98                            
00010B98                            loc_101B0:
00010B98 0C40 0080                  		cmpi.w	#$80,d0
00010B9C 6500                       		bcs.s	locret_101C6
00010B9E 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00010BA2 D007                       		add.b	d7,d0
00010BA4 0200 0007                  		andi.b	#7,d0
00010BA8 6600                       		bne.s	locret_101C6
00010BAA 5428 0025                  		addq.b	#2,$25(a0)
00010BAE                            
00010BAE                            locret_101C6:
00010BAE 4E75                       		rts	
00010BB0                            ; ===========================================================================
00010BB0                            
00010BB0                            Obj55_FlyUp:				; XREF: Obj55_Index2
00010BB0 6100 D420                  		bsr.w	SpeedToPos
00010BB4 0468 0018 0012             		subi.w	#$18,$12(a0)	; make basaran fly upwards
00010BBA 6100 0000                  		bsr.w	ObjHitCeiling
00010BBE 4A41                       		tst.w	d1		; has basaran hit the ceiling?
00010BC0 6A00                       		bpl.s	locret_101F4	; if not, branch
00010BC2 9368 000C                  		sub.w	d1,$C(a0)
00010BC6 0268 FFF8 0008             		andi.w	#$FFF8,8(a0)
00010BCC 4268 0010                  		clr.w	$10(a0)		; stop basaran moving
00010BD0 4268 0012                  		clr.w	$12(a0)
00010BD4 4228 001C                  		clr.b	$1C(a0)
00010BD8 4228 0025                  		clr.b	$25(a0)
00010BDC                            
00010BDC                            locret_101F4:
00010BDC 4E75                       		rts	
00010BDE                            ; ===========================================================================
00010BDE                            
00010BDE                            Obj55_ChkSonic:				; XREF: Obj55_ChkDrop
00010BDE 323C 0100                  		move.w	#$100,d1
00010BE2 08E8 0000 0022             		bset	#0,$22(a0)
00010BE8 3038 D008                  		move.w	($FFFFD008).w,d0
00010BEC 9068 0008                  		sub.w	8(a0),d0
00010BF0 6400                       		bcc.s	loc_10214
00010BF2 4440                       		neg.w	d0
00010BF4 4441                       		neg.w	d1
00010BF6 08A8 0000 0022             		bclr	#0,$22(a0)
00010BFC                            
00010BFC                            loc_10214:
00010BFC B042                       		cmp.w	d2,d0
00010BFE 4E75                       		rts	
00010C00                            ; ===========================================================================
00010C00 6100 D3D0                  		bsr.w	SpeedToPos
00010C04 6100 D3F2                  		bsr.w	DisplaySprite
00010C08 4A28 0001                  		tst.b	1(a0)
00010C0C 6A00 D426                  		bpl.w	DeleteObject
00010C10 4E75                       		rts	
00010C12                            ; ===========================================================================
00010C12                            Ani_obj55:
00010C12                            	include "_anim\obj55.asm"
00010C12                            ; ---------------------------------------------------------------------------
00010C12                            ; Animation script - Basaran enemy
00010C12                            ; ---------------------------------------------------------------------------
00010C12 0000                       		dc.w byte_10230-Ani_obj55
00010C14 0000                       		dc.w byte_10234-Ani_obj55
00010C16 0000                       		dc.w byte_10238-Ani_obj55
00010C18 0F00 FF00                  byte_10230:	dc.b $F, 0, $FF, 0
00010C1C 0F01 FF00                  byte_10234:	dc.b $F, 1, $FF, 0
00010C20 0301 0203 02FF             byte_10238:	dc.b 3,	1, 2, 3, 2, $FF
00010C26                            		even
00010C26                            		even
00010C26                            
00010C26                            ; ---------------------------------------------------------------------------
00010C26                            ; Sprite mappings - Basaran enemy (MZ)
00010C26                            ; ---------------------------------------------------------------------------
00010C26                            Map_obj55:
00010C26                            	include "_maps\obj55.asm"
00010C26                            ; ---------------------------------------------------------------------------
00010C26                            ; Sprite mappings - Basaran enemy (MZ)
00010C26                            ; ---------------------------------------------------------------------------
00010C26 0000 0000                  		dc.w byte_10246-Map_obj55, byte_1024C-Map_obj55
00010C2A 0000 0000                  		dc.w byte_1025C-Map_obj55, byte_10271-Map_obj55
00010C2E 01                         byte_10246:	dc.b 1
00010C2F F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00010C34 03                         byte_1024C:	dc.b 3
00010C35 F20E 0006 F4               		dc.b $F2, $E, 0, 6, $F4
00010C3A 0A04 0012 FC               		dc.b $A, 4, 0, $12, $FC
00010C3F 0200 0027 0C               		dc.b 2,	0, 0, $27, $C
00010C44 04                         byte_1025C:	dc.b 4
00010C45 F804 0014 F8               		dc.b $F8, 4, 0,	$14, $F8
00010C4A 000C 0016 F0               		dc.b 0,	$C, 0, $16, $F0
00010C4F 0804 001A 00               		dc.b 8,	4, 0, $1A, 0
00010C54 0000 0028 0C               		dc.b 0,	0, 0, $28, $C
00010C59 04                         byte_10271:	dc.b 4
00010C5A F609 001C F5               		dc.b $F6, 9, 0,	$1C, $F5
00010C5F 0608 0022 F4               		dc.b 6,	8, 0, $22, $F4
00010C64 0E04 0025 F4               		dc.b $E, 4, 0, $25, $F4
00010C69 FE00 0027 0C               		dc.b $FE, 0, 0,	$27, $C
00010C6E                            		even
00010C6E                            		even
00010C6E                            
00010C6E                            ; ===========================================================================
00010C6E                            ; ---------------------------------------------------------------------------
00010C6E                            ; Object 56 - moving blocks (SYZ/SLZ), large doors (LZ)
00010C6E                            ; ---------------------------------------------------------------------------
00010C6E                            
00010C6E                            Obj56:					; XREF: Obj_Index
00010C6E 7000                       		moveq	#0,d0
00010C70 1028 0024                  		move.b	$24(a0),d0
00010C74 323B 0000                  		move.w	Obj56_Index(pc,d0.w),d1
00010C78 4EFB 1000                  		jmp	Obj56_Index(pc,d1.w)
00010C7C                            ; ===========================================================================
00010C7C 0000                       Obj56_Index:	dc.w Obj56_Main-Obj56_Index
00010C7E 0000                       		dc.w Obj56_Action-Obj56_Index
00010C80                            
00010C80 1010                       Obj56_Var:	dc.b  $10, $10		; width, height
00010C82 2020                       		dc.b  $20, $20
00010C84 1020                       		dc.b  $10, $20
00010C86 201A                       		dc.b  $20, $1A
00010C88 1027                       		dc.b  $10, $27
00010C8A 1010                       		dc.b  $10, $10
00010C8C 0820                       		dc.b	8, $20
00010C8E 4010                       		dc.b  $40, $10
00010C90                            ; ===========================================================================
00010C90                            
00010C90                            Obj56_Main:				; XREF: Obj56_Index
00010C90 5428 0024                  		addq.b	#2,$24(a0)
00010C94 217C 0000 0000 0004        		move.l	#Map_obj56,4(a0)
00010C9C 317C 4000 0002             		move.w	#$4000,2(a0)
00010CA2 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010CA8 6600                       		bne.s	loc_102C8
00010CAA 317C 43C4 0002             		move.w	#$43C4,2(a0)	; LZ specific code
00010CB0                            
00010CB0                            loc_102C8:
00010CB0 117C 0004 0001             		move.b	#4,1(a0)
00010CB6 117C 0003 0018             		move.b	#3,$18(a0)
00010CBC 7000                       		moveq	#0,d0
00010CBE 1028 0028                  		move.b	$28(a0),d0
00010CC2 E648                       		lsr.w	#3,d0
00010CC4 0240 000E                  		andi.w	#$E,d0
00010CC8 45FB 00B6                  		lea	Obj56_Var(pc,d0.w),a2
00010CCC 115A 0019                  		move.b	(a2)+,$19(a0)
00010CD0 1152 0016                  		move.b	(a2),$16(a0)
00010CD4 E248                       		lsr.w	#1,d0
00010CD6 1140 001A                  		move.b	d0,$1A(a0)
00010CDA 3168 0008 0034             		move.w	8(a0),$34(a0)
00010CE0 3168 000C 0030             		move.w	$C(a0),$30(a0)
00010CE6 7000                       		moveq	#0,d0
00010CE8 1012                       		move.b	(a2),d0
00010CEA D040                       		add.w	d0,d0
00010CEC 3140 003A                  		move.w	d0,$3A(a0)
00010CF0 7000                       		moveq	#0,d0
00010CF2 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010CF8 6700                       		beq.s	loc_10332
00010CFA 1028 0028                  		move.b	$28(a0),d0	; SYZ/SLZ specific code
00010CFE 0240 000F                  		andi.w	#$F,d0
00010D02 5140                       		subq.w	#8,d0
00010D04 6500                       		bcs.s	loc_10332
00010D06 E548                       		lsl.w	#2,d0
00010D08 45F8 FE8A                  		lea	($FFFFFE8A).w,a2
00010D0C 45F2 0000                  		lea	(a2,d0.w),a2
00010D10 4A52                       		tst.w	(a2)
00010D12 6A00                       		bpl.s	loc_10332
00010D14 0868 0000 0022             		bchg	#0,$22(a0)
00010D1A                            
00010D1A                            loc_10332:
00010D1A 1028 0028                  		move.b	$28(a0),d0
00010D1E 6A00                       		bpl.s	Obj56_Action
00010D20 0200 000F                  		andi.b	#$F,d0
00010D24 1140 003C                  		move.b	d0,$3C(a0)
00010D28 117C 0005 0028             		move.b	#5,$28(a0)
00010D2E 0C28 0007 001A             		cmpi.b	#7,$1A(a0)
00010D34 6600                       		bne.s	Obj56_ChkGone
00010D36 117C 000C 0028             		move.b	#$C,$28(a0)
00010D3C 317C 0080 003A             		move.w	#$80,$3A(a0)
00010D42                            
00010D42                            Obj56_ChkGone:
00010D42 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010D46 7000                       		moveq	#0,d0
00010D48 1028 0023                  		move.b	$23(a0),d0
00010D4C 6700                       		beq.s	Obj56_Action
00010D4E 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00010D54 0832 0000 0002             		btst	#0,2(a2,d0.w)
00010D5A 6700                       		beq.s	Obj56_Action
00010D5C 5228 0028                  		addq.b	#1,$28(a0)
00010D60 4268 003A                  		clr.w	$3A(a0)
00010D64                            
00010D64                            Obj56_Action:				; XREF: Obj56_Index
00010D64 3F28 0008                  		move.w	8(a0),-(sp)
00010D68 7000                       		moveq	#0,d0
00010D6A 1028 0028                  		move.b	$28(a0),d0	; get object type
00010D6E 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00010D72 D040                       		add.w	d0,d0
00010D74 323B 0000                  		move.w	Obj56_TypeIndex(pc,d0.w),d1
00010D78 4EBB 1000                  		jsr	Obj56_TypeIndex(pc,d1.w)
00010D7C 381F                       		move.w	(sp)+,d4
00010D7E 4A28 0001                  		tst.b	1(a0)
00010D82 6A00                       		bpl.s	Obj56_ChkDel
00010D84 7200                       		moveq	#0,d1
00010D86 1228 0019                  		move.b	$19(a0),d1
00010D8A 0641 000B                  		addi.w	#$B,d1
00010D8E 7400                       		moveq	#0,d2
00010D90 1428 0016                  		move.b	$16(a0),d2
00010D94 3602                       		move.w	d2,d3
00010D96 5243                       		addq.w	#1,d3
00010D98 6100 F62E                  		bsr.w	SolidObject
00010D9C                            
00010D9C                            Obj56_ChkDel:
00010D9C 3028 0034                  		move.w	$34(a0),d0
00010DA0 0240 FF80                  		andi.w	#$FF80,d0
00010DA4 3238 F700                  		move.w	($FFFFF700).w,d1
00010DA8 0441 0080                  		subi.w	#$80,d1
00010DAC 0241 FF80                  		andi.w	#$FF80,d1
00010DB0 9041                       		sub.w	d1,d0
00010DB2 0C40 0280                  		cmpi.w	#$280,d0
00010DB6 6200 D27C                  		bhi.w	DeleteObject
00010DBA 6000 D23C                  		bra.w	DisplaySprite
00010DBE                            ; ===========================================================================
00010DBE 0000 0000                  Obj56_TypeIndex:dc.w Obj56_Type00-Obj56_TypeIndex, Obj56_Type01-Obj56_TypeIndex
00010DC2 0000 0000                  		dc.w Obj56_Type02-Obj56_TypeIndex, Obj56_Type03-Obj56_TypeIndex
00010DC6 0000 0000                  		dc.w Obj56_Type04-Obj56_TypeIndex, Obj56_Type05-Obj56_TypeIndex
00010DCA 0000 0000                  		dc.w Obj56_Type06-Obj56_TypeIndex, Obj56_Type07-Obj56_TypeIndex
00010DCE 0000 0000                  		dc.w Obj56_Type08-Obj56_TypeIndex, Obj56_Type09-Obj56_TypeIndex
00010DD2 0000 0000                  		dc.w Obj56_Type0A-Obj56_TypeIndex, Obj56_Type0B-Obj56_TypeIndex
00010DD6 0000 0000                  		dc.w Obj56_Type0C-Obj56_TypeIndex, Obj56_Type0D-Obj56_TypeIndex
00010DDA                            ; ===========================================================================
00010DDA                            
00010DDA                            Obj56_Type00:				; XREF: Obj56_TypeIndex
00010DDA 4E75                       		rts	
00010DDC                            ; ===========================================================================
00010DDC                            
00010DDC                            Obj56_Type01:				; XREF: Obj56_TypeIndex
00010DDC 323C 0040                  		move.w	#$40,d1
00010DE0 7000                       		moveq	#0,d0
00010DE2 1038 FE68                  		move.b	($FFFFFE68).w,d0
00010DE6 6000                       		bra.s	Obj56_Move_LR
00010DE8                            ; ===========================================================================
00010DE8                            
00010DE8                            Obj56_Type02:				; XREF: Obj56_TypeIndex
00010DE8 323C 0080                  		move.w	#$80,d1
00010DEC 7000                       		moveq	#0,d0
00010DEE 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00010DF2                            
00010DF2                            Obj56_Move_LR:
00010DF2 0828 0000 0022             		btst	#0,$22(a0)
00010DF8 6700                       		beq.s	loc_10416
00010DFA 4440                       		neg.w	d0
00010DFC D041                       		add.w	d1,d0
00010DFE                            
00010DFE                            loc_10416:
00010DFE 3228 0034                  		move.w	$34(a0),d1
00010E02 9240                       		sub.w	d0,d1
00010E04 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
00010E08 4E75                       		rts	
00010E0A                            ; ===========================================================================
00010E0A                            
00010E0A                            Obj56_Type03:				; XREF: Obj56_TypeIndex
00010E0A 323C 0040                  		move.w	#$40,d1
00010E0E 7000                       		moveq	#0,d0
00010E10 1038 FE68                  		move.b	($FFFFFE68).w,d0
00010E14 6000                       		bra.s	Obj56_Move_UD
00010E16                            ; ===========================================================================
00010E16                            
00010E16                            Obj56_Type04:				; XREF: Obj56_TypeIndex
00010E16 323C 0080                  		move.w	#$80,d1
00010E1A 7000                       		moveq	#0,d0
00010E1C 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00010E20                            
00010E20                            Obj56_Move_UD:
00010E20 0828 0000 0022             		btst	#0,$22(a0)
00010E26 6700                       		beq.s	loc_10444
00010E28 4440                       		neg.w	d0
00010E2A D041                       		add.w	d1,d0
00010E2C                            
00010E2C                            loc_10444:
00010E2C 3228 0030                  		move.w	$30(a0),d1
00010E30 9240                       		sub.w	d0,d1
00010E32 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
00010E36 4E75                       		rts	
00010E38                            ; ===========================================================================
00010E38                            
00010E38                            Obj56_Type05:				; XREF: Obj56_TypeIndex
00010E38 4A28 0038                  		tst.b	$38(a0)
00010E3C 6600                       		bne.s	loc_104A4
00010E3E 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
00010E44 6600                       		bne.s	loc_1047A	; if not, branch
00010E46 0C28 0003 003C             		cmpi.b	#3,$3C(a0)
00010E4C 6600                       		bne.s	loc_1047A
00010E4E 4238 F7C9                  		clr.b	($FFFFF7C9).w
00010E52 3038 D008                  		move.w	($FFFFD008).w,d0
00010E56 B068 0008                  		cmp.w	8(a0),d0
00010E5A 6400                       		bcc.s	loc_1047A
00010E5C 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w
00010E62                            
00010E62                            loc_1047A:
00010E62 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010E66 7000                       		moveq	#0,d0
00010E68 1028 003C                  		move.b	$3C(a0),d0
00010E6C 0832 0000 0000             		btst	#0,(a2,d0.w)
00010E72 6700                       		beq.s	loc_104AE
00010E74 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
00010E7A 6600                       		bne.s	loc_1049E	; if not, branch
00010E7C 0C00 0003                  		cmpi.b	#3,d0
00010E80 6600                       		bne.s	loc_1049E
00010E82 4238 F7C9                  		clr.b	($FFFFF7C9).w
00010E86                            
00010E86                            loc_1049E:
00010E86 117C 0001 0038             		move.b	#1,$38(a0)
00010E8C                            
00010E8C                            loc_104A4:
00010E8C 4A68 003A                  		tst.w	$3A(a0)
00010E90 6700                       		beq.s	loc_104C8
00010E92 5568 003A                  		subq.w	#2,$3A(a0)
00010E96                            
00010E96                            loc_104AE:
00010E96 3028 003A                  		move.w	$3A(a0),d0
00010E9A 0828 0000 0022             		btst	#0,$22(a0)
00010EA0 6700                       		beq.s	loc_104BC
00010EA2 4440                       		neg.w	d0
00010EA4                            
00010EA4                            loc_104BC:
00010EA4 3228 0030                  		move.w	$30(a0),d1
00010EA8 D240                       		add.w	d0,d1
00010EAA 3141 000C                  		move.w	d1,$C(a0)
00010EAE 4E75                       		rts	
00010EB0                            ; ===========================================================================
00010EB0                            
00010EB0                            loc_104C8:
00010EB0 5228 0028                  		addq.b	#1,$28(a0)
00010EB4 4228 0038                  		clr.b	$38(a0)
00010EB8 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010EBC 7000                       		moveq	#0,d0
00010EBE 1028 0023                  		move.b	$23(a0),d0
00010EC2 67D2                       		beq.s	loc_104AE
00010EC4 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00010ECA 60CA                       		bra.s	loc_104AE
00010ECC                            ; ===========================================================================
00010ECC                            
00010ECC                            Obj56_Type06:				; XREF: Obj56_TypeIndex
00010ECC 4A28 0038                  		tst.b	$38(a0)
00010ED0 6600                       		bne.s	loc_10500
00010ED2 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010ED6 7000                       		moveq	#0,d0
00010ED8 1028 003C                  		move.b	$3C(a0),d0
00010EDC 4A32 0000                  		tst.b	(a2,d0.w)
00010EE0 6A00                       		bpl.s	loc_10512
00010EE2 117C 0001 0038             		move.b	#1,$38(a0)
00010EE8                            
00010EE8                            loc_10500:
00010EE8 7000                       		moveq	#0,d0
00010EEA 1028 0016                  		move.b	$16(a0),d0
00010EEE D040                       		add.w	d0,d0
00010EF0 B068 003A                  		cmp.w	$3A(a0),d0
00010EF4 6700                       		beq.s	loc_1052C
00010EF6 5468 003A                  		addq.w	#2,$3A(a0)
00010EFA                            
00010EFA                            loc_10512:
00010EFA 3028 003A                  		move.w	$3A(a0),d0
00010EFE 0828 0000 0022             		btst	#0,$22(a0)
00010F04 6700                       		beq.s	loc_10520
00010F06 4440                       		neg.w	d0
00010F08                            
00010F08                            loc_10520:
00010F08 3228 0030                  		move.w	$30(a0),d1
00010F0C D240                       		add.w	d0,d1
00010F0E 3141 000C                  		move.w	d1,$C(a0)
00010F12 4E75                       		rts	
00010F14                            ; ===========================================================================
00010F14                            
00010F14                            loc_1052C:
00010F14 5328 0028                  		subq.b	#1,$28(a0)
00010F18 4228 0038                  		clr.b	$38(a0)
00010F1C 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010F20 7000                       		moveq	#0,d0
00010F22 1028 0023                  		move.b	$23(a0),d0
00010F26 67D2                       		beq.s	loc_10512
00010F28 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00010F2E 60CA                       		bra.s	loc_10512
00010F30                            ; ===========================================================================
00010F30                            
00010F30                            Obj56_Type07:				; XREF: Obj56_TypeIndex
00010F30 4A28 0038                  		tst.b	$38(a0)
00010F34 6600                       		bne.s	loc_1055E
00010F36 4A38 F7EF                  		tst.b	($FFFFF7EF).w	; has switch number $F been pressed?
00010F3A 6700                       		beq.s	locret_10578
00010F3C 117C 0001 0038             		move.b	#1,$38(a0)
00010F42 4268 003A                  		clr.w	$3A(a0)
00010F46                            
00010F46                            loc_1055E:
00010F46 5268 0008                  		addq.w	#1,8(a0)
00010F4A 3168 0008 0034             		move.w	8(a0),$34(a0)
00010F50 5268 003A                  		addq.w	#1,$3A(a0)
00010F54 0C68 0380 003A             		cmpi.w	#$380,$3A(a0)
00010F5A 6600                       		bne.s	locret_10578
00010F5C 4228 0028                  		clr.b	$28(a0)
00010F60                            
00010F60                            locret_10578:
00010F60 4E75                       		rts	
00010F62                            ; ===========================================================================
00010F62                            
00010F62                            Obj56_Type0C:				; XREF: Obj56_TypeIndex
00010F62 4A28 0038                  		tst.b	$38(a0)
00010F66 6600                       		bne.s	loc_10598
00010F68 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010F6C 7000                       		moveq	#0,d0
00010F6E 1028 003C                  		move.b	$3C(a0),d0
00010F72 0832 0000 0000             		btst	#0,(a2,d0.w)
00010F78 6700                       		beq.s	loc_105A2
00010F7A 117C 0001 0038             		move.b	#1,$38(a0)
00010F80                            
00010F80                            loc_10598:
00010F80 4A68 003A                  		tst.w	$3A(a0)
00010F84 6700                       		beq.s	loc_105C0
00010F86 5568 003A                  		subq.w	#2,$3A(a0)
00010F8A                            
00010F8A                            loc_105A2:
00010F8A 3028 003A                  		move.w	$3A(a0),d0
00010F8E 0828 0000 0022             		btst	#0,$22(a0)
00010F94 6700                       		beq.s	loc_105B4
00010F96 4440                       		neg.w	d0
00010F98 0640 0080                  		addi.w	#$80,d0
00010F9C                            
00010F9C                            loc_105B4:
00010F9C 3228 0034                  		move.w	$34(a0),d1
00010FA0 D240                       		add.w	d0,d1
00010FA2 3141 0008                  		move.w	d1,8(a0)
00010FA6 4E75                       		rts	
00010FA8                            ; ===========================================================================
00010FA8                            
00010FA8                            loc_105C0:
00010FA8 5228 0028                  		addq.b	#1,$28(a0)
00010FAC 4228 0038                  		clr.b	$38(a0)
00010FB0 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010FB4 7000                       		moveq	#0,d0
00010FB6 1028 0023                  		move.b	$23(a0),d0
00010FBA 67CE                       		beq.s	loc_105A2
00010FBC 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00010FC2 60C6                       		bra.s	loc_105A2
00010FC4                            ; ===========================================================================
00010FC4                            
00010FC4                            Obj56_Type0D:				; XREF: Obj56_TypeIndex
00010FC4 4A28 0038                  		tst.b	$38(a0)
00010FC8 6600                       		bne.s	loc_105F8
00010FCA 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010FCE 7000                       		moveq	#0,d0
00010FD0 1028 003C                  		move.b	$3C(a0),d0
00010FD4 4A32 0000                  		tst.b	(a2,d0.w)
00010FD8 6A00                       		bpl.s	loc_10606
00010FDA 117C 0001 0038             		move.b	#1,$38(a0)
00010FE0                            
00010FE0                            loc_105F8:
00010FE0 303C 0080                  		move.w	#$80,d0
00010FE4 B068 003A                  		cmp.w	$3A(a0),d0
00010FE8 6700                       		beq.s	loc_10624
00010FEA 5468 003A                  		addq.w	#2,$3A(a0)
00010FEE                            
00010FEE                            loc_10606:
00010FEE 3028 003A                  		move.w	$3A(a0),d0
00010FF2 0828 0000 0022             		btst	#0,$22(a0)
00010FF8 6700                       		beq.s	loc_10618
00010FFA 4440                       		neg.w	d0
00010FFC 0640 0080                  		addi.w	#$80,d0
00011000                            
00011000                            loc_10618:
00011000 3228 0034                  		move.w	$34(a0),d1
00011004 D240                       		add.w	d0,d1
00011006 3141 0008                  		move.w	d1,8(a0)
0001100A 4E75                       		rts	
0001100C                            ; ===========================================================================
0001100C                            
0001100C                            loc_10624:
0001100C 5328 0028                  		subq.b	#1,$28(a0)
00011010 4228 0038                  		clr.b	$38(a0)
00011014 45F8 FC00                  		lea	($FFFFFC00).w,a2
00011018 7000                       		moveq	#0,d0
0001101A 1028 0023                  		move.b	$23(a0),d0
0001101E 67CE                       		beq.s	loc_10606
00011020 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00011026 60C6                       		bra.s	loc_10606
00011028                            ; ===========================================================================
00011028                            
00011028                            Obj56_Type08:				; XREF: Obj56_TypeIndex
00011028 323C 0010                  		move.w	#$10,d1
0001102C 7000                       		moveq	#0,d0
0001102E 1038 FE88                  		move.b	($FFFFFE88).w,d0
00011032 E248                       		lsr.w	#1,d0
00011034 3638 FE8A                  		move.w	($FFFFFE8A).w,d3
00011038 6000                       		bra.s	Obj56_Move_Sqr
0001103A                            ; ===========================================================================
0001103A                            
0001103A                            Obj56_Type09:				; XREF: Obj56_TypeIndex
0001103A 323C 0030                  		move.w	#$30,d1
0001103E 7000                       		moveq	#0,d0
00011040 1038 FE8C                  		move.b	($FFFFFE8C).w,d0
00011044 3638 FE8E                  		move.w	($FFFFFE8E).w,d3
00011048 6000                       		bra.s	Obj56_Move_Sqr
0001104A                            ; ===========================================================================
0001104A                            
0001104A                            Obj56_Type0A:				; XREF: Obj56_TypeIndex
0001104A 323C 0050                  		move.w	#$50,d1
0001104E 7000                       		moveq	#0,d0
00011050 1038 FE90                  		move.b	($FFFFFE90).w,d0
00011054 3638 FE92                  		move.w	($FFFFFE92).w,d3
00011058 6000                       		bra.s	Obj56_Move_Sqr
0001105A                            ; ===========================================================================
0001105A                            
0001105A                            Obj56_Type0B:				; XREF: Obj56_TypeIndex
0001105A 323C 0070                  		move.w	#$70,d1
0001105E 7000                       		moveq	#0,d0
00011060 1038 FE94                  		move.b	($FFFFFE94).w,d0
00011064 3638 FE96                  		move.w	($FFFFFE96).w,d3
00011068                            
00011068                            Obj56_Move_Sqr:
00011068 4A43                       		tst.w	d3
0001106A 6600                       		bne.s	loc_1068E
0001106C 5228 0022                  		addq.b	#1,$22(a0)
00011070 0228 0003 0022             		andi.b	#3,$22(a0)
00011076                            
00011076                            loc_1068E:
00011076 1428 0022                  		move.b	$22(a0),d2
0001107A 0202 0003                  		andi.b	#3,d2
0001107E 6600                       		bne.s	loc_106AE
00011080 9041                       		sub.w	d1,d0
00011082 D068 0034                  		add.w	$34(a0),d0
00011086 3140 0008                  		move.w	d0,8(a0)
0001108A 4441                       		neg.w	d1
0001108C D268 0030                  		add.w	$30(a0),d1
00011090 3141 000C                  		move.w	d1,$C(a0)
00011094 4E75                       		rts	
00011096                            ; ===========================================================================
00011096                            
00011096                            loc_106AE:
00011096 5302                       		subq.b	#1,d2
00011098 6600                       		bne.s	loc_106CC
0001109A 5341                       		subq.w	#1,d1
0001109C 9041                       		sub.w	d1,d0
0001109E 4440                       		neg.w	d0
000110A0 D068 0030                  		add.w	$30(a0),d0
000110A4 3140 000C                  		move.w	d0,$C(a0)
000110A8 5241                       		addq.w	#1,d1
000110AA D268 0034                  		add.w	$34(a0),d1
000110AE 3141 0008                  		move.w	d1,8(a0)
000110B2 4E75                       		rts	
000110B4                            ; ===========================================================================
000110B4                            
000110B4                            loc_106CC:
000110B4 5302                       		subq.b	#1,d2
000110B6 6600                       		bne.s	loc_106EA
000110B8 5341                       		subq.w	#1,d1
000110BA 9041                       		sub.w	d1,d0
000110BC 4440                       		neg.w	d0
000110BE D068 0034                  		add.w	$34(a0),d0
000110C2 3140 0008                  		move.w	d0,8(a0)
000110C6 5241                       		addq.w	#1,d1
000110C8 D268 0030                  		add.w	$30(a0),d1
000110CC 3141 000C                  		move.w	d1,$C(a0)
000110D0 4E75                       		rts	
000110D2                            ; ===========================================================================
000110D2                            
000110D2                            loc_106EA:
000110D2 9041                       		sub.w	d1,d0
000110D4 D068 0030                  		add.w	$30(a0),d0
000110D8 3140 000C                  		move.w	d0,$C(a0)
000110DC 4441                       		neg.w	d1
000110DE D268 0034                  		add.w	$34(a0),d1
000110E2 3141 0008                  		move.w	d1,8(a0)
000110E6 4E75                       		rts	
000110E8                            ; ===========================================================================
000110E8                            ; ---------------------------------------------------------------------------
000110E8                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
000110E8                            ; ---------------------------------------------------------------------------
000110E8                            Map_obj56:
000110E8                            	include "_maps\obj56.asm"
000110E8                            ; ---------------------------------------------------------------------------
000110E8                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
000110E8                            ; ---------------------------------------------------------------------------
000110E8 0000 0000                  		dc.w byte_10710-Map_obj56, byte_10716-Map_obj56
000110EC 0000 0000                  		dc.w byte_1072B-Map_obj56, byte_10736-Map_obj56
000110F0 0000 0000                  		dc.w byte_1074B-Map_obj56, byte_1075B-Map_obj56
000110F4 0000 0000                  		dc.w byte_10761-Map_obj56, byte_1076C-Map_obj56
000110F8 01                         byte_10710:	dc.b 1
000110F9 F00F 0061 F0               		dc.b $F0, $F, 0, $61, $F0
000110FE 04                         byte_10716:	dc.b 4
000110FF E00F 0061 E0               		dc.b $E0, $F, 0, $61, $E0
00011104 E00F 0061 00               		dc.b $E0, $F, 0, $61, 0
00011109 000F 0061 E0               		dc.b 0,	$F, 0, $61, $E0
0001110E 000F 0061 00               		dc.b 0,	$F, 0, $61, 0
00011113 02                         byte_1072B:	dc.b 2
00011114 E00F 0061 F0               		dc.b $E0, $F, 0, $61, $F0
00011119 000F 0061 F0               		dc.b 0,	$F, 0, $61, $F0
0001111E 04                         byte_10736:	dc.b 4
0001111F E60F 0081 E0               		dc.b $E6, $F, 0, $81, $E0
00011124 E60F 0081 00               		dc.b $E6, $F, 0, $81, 0
00011129 000F 0081 E0               		dc.b 0,	$F, 0, $81, $E0
0001112E 000F 0081 00               		dc.b 0,	$F, 0, $81, 0
00011133 03                         byte_1074B:	dc.b 3
00011134 D90F 0081 F0               		dc.b $D9, $F, 0, $81, $F0
00011139 F30F 0081 F0               		dc.b $F3, $F, 0, $81, $F0
0001113E 0D0F 0081 F0               		dc.b $D, $F, 0,	$81, $F0
00011143 01                         byte_1075B:	dc.b 1
00011144 F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
00011149 02                         byte_10761:	dc.b 2
0001114A E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
0001114F 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
00011154 04                         byte_1076C:	dc.b 4
00011155 F00F 0022 C0               		dc.b $F0, $F, 0, $22, $C0
0001115A F00F 0022 E0               		dc.b $F0, $F, 0, $22, $E0
0001115F F00F 0022 00               		dc.b $F0, $F, 0, $22, 0
00011164 F00F 0022 20               		dc.b $F0, $F, 0, $22, $20
0001116A 00                         		even
0001116A 00                         		even
0001116A                            
0001116A                            ; ===========================================================================
0001116A                            ; ---------------------------------------------------------------------------
0001116A                            ; Object 57 - spiked balls (SYZ, LZ)
0001116A                            ; ---------------------------------------------------------------------------
0001116A                            
0001116A                            Obj57:					; XREF: Obj_Index
0001116A 7000                       		moveq	#0,d0
0001116C 1028 0024                  		move.b	$24(a0),d0
00011170 323B 0000                  		move.w	Obj57_Index(pc,d0.w),d1
00011174 4EFB 1000                  		jmp	Obj57_Index(pc,d1.w)
00011178                            ; ===========================================================================
00011178 0000                       Obj57_Index:	dc.w Obj57_Main-Obj57_Index
0001117A 0000                       		dc.w Obj57_Move-Obj57_Index
0001117C 0000                       		dc.w Obj57_Display-Obj57_Index
0001117E                            ; ===========================================================================
0001117E                            
0001117E                            Obj57_Main:				; XREF: Obj57_Index
0001117E 5428 0024                  		addq.b	#2,$24(a0)
00011182 217C 0000 0000 0004        		move.l	#Map_obj57,4(a0)
0001118A 317C 03BA 0002             		move.w	#$3BA,2(a0)
00011190 117C 0004 0001             		move.b	#4,1(a0)
00011196 117C 0004 0018             		move.b	#4,$18(a0)
0001119C 117C 0008 0019             		move.b	#8,$19(a0)
000111A2 3168 0008 003A             		move.w	8(a0),$3A(a0)
000111A8 3168 000C 0038             		move.w	$C(a0),$38(a0)
000111AE 117C 0098 0020             		move.b	#$98,$20(a0)	; SYZ specific code (chain hurts Sonic)
000111B4 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
000111BA 6600                       		bne.s	loc_107E8
000111BC 117C 0000 0020             		move.b	#0,$20(a0)	; LZ specific code (chain doesn't hurt)
000111C2 317C 0310 0002             		move.w	#$310,2(a0)
000111C8 217C 0000 0000 0004        		move.l	#Map_obj57a,4(a0)
000111D0                            
000111D0                            loc_107E8:
000111D0 1228 0028                  		move.b	$28(a0),d1	; get object type
000111D4 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
000111D8 4881                       		ext.w	d1
000111DA E741                       		asl.w	#3,d1		; multiply by 8
000111DC 3141 003E                  		move.w	d1,$3E(a0)	; set object twirl speed
000111E0 1028 0022                  		move.b	$22(a0),d0
000111E4 E418                       		ror.b	#2,d0
000111E6 0200 00C0                  		andi.b	#-$40,d0
000111EA 1140 0026                  		move.b	d0,$26(a0)
000111EE 45E8 0029                  		lea	$29(a0),a2
000111F2 1228 0028                  		move.b	$28(a0),d1	; get object type
000111F6 0241 0007                  		andi.w	#7,d1		; read only the	2nd digit
000111FA 14FC 0000                  		move.b	#0,(a2)+
000111FE 3601                       		move.w	d1,d3
00011200 E94B                       		lsl.w	#4,d3
00011202 1143 003C                  		move.b	d3,$3C(a0)
00011206 5341                       		subq.w	#1,d1		; set chain length (type-1)
00011208 6500                       		bcs.s	loc_10894
0001120A 0828 0003 0028             		btst	#3,$28(a0)
00011210 6700                       		beq.s	Obj57_MakeChain
00011212 5341                       		subq.w	#1,d1
00011214 6500                       		bcs.s	loc_10894
00011216                            
00011216                            Obj57_MakeChain:
00011216 6100 D266                  		bsr.w	SingleObjLoad
0001121A 6600                       		bne.s	loc_10894
0001121C 5228 0029                  		addq.b	#1,$29(a0)
00011220 3A09                       		move.w	a1,d5
00011222 0445 D000                  		subi.w	#-$3000,d5
00011226 EC4D                       		lsr.w	#6,d5
00011228 0245 007F                  		andi.w	#$7F,d5
0001122C 14C5                       		move.b	d5,(a2)+
0001122E 137C 0004 0024             		move.b	#4,$24(a1)
00011234 1290                       		move.b	0(a0),0(a1)
00011236 2368 0004 0004             		move.l	4(a0),4(a1)
0001123C 3368 0002 0002             		move.w	2(a0),2(a1)
00011242 1368 0001 0001             		move.b	1(a0),1(a1)
00011248 1368 0018 0018             		move.b	$18(a0),$18(a1)
0001124E 1368 0019 0019             		move.b	$19(a0),$19(a1)
00011254 1368 0020 0020             		move.b	$20(a0),$20(a1)
0001125A 0403 0010                  		subi.b	#$10,d3
0001125E 1343 003C                  		move.b	d3,$3C(a1)
00011262 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00011268 6600                       		bne.s	loc_10890
0001126A 4A03                       		tst.b	d3
0001126C 6600                       		bne.s	loc_10890
0001126E 137C 0002 001A             		move.b	#2,$1A(a1)
00011274                            
00011274                            loc_10890:
00011274 51C9 FFA0                  		dbf	d1,Obj57_MakeChain ; repeat for	length of chain
00011278                            
00011278                            loc_10894:
00011278 3A08                       		move.w	a0,d5
0001127A 0445 D000                  		subi.w	#-$3000,d5
0001127E EC4D                       		lsr.w	#6,d5
00011280 0245 007F                  		andi.w	#$7F,d5
00011284 14C5                       		move.b	d5,(a2)+
00011286 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
0001128C 6600                       		bne.s	Obj57_Move
0001128E 117C 008B 0020             		move.b	#$8B,$20(a0)	; if yes, make last spikeball larger
00011294 117C 0001 001A             		move.b	#1,$1A(a0)	; use different	frame
0001129A                            
0001129A                            Obj57_Move:				; XREF: Obj57_Index
0001129A 6100 0000                  		bsr.w	Obj57_MoveSub
0001129E 6000 0000                  		bra.w	Obj57_ChkDel
000112A2                            ; ===========================================================================
000112A2                            
000112A2                            Obj57_MoveSub:				; XREF: Obj57_Move
000112A2 3028 003E                  		move.w	$3E(a0),d0
000112A6 D168 0026                  		add.w	d0,$26(a0)
000112AA 1028 0026                  		move.b	$26(a0),d0
000112AE 4EB9 0000 2D6C             		jsr	(CalcSine).l
000112B4 3428 0038                  		move.w	$38(a0),d2
000112B8 3628 003A                  		move.w	$3A(a0),d3
000112BC 45E8 0029                  		lea	$29(a0),a2
000112C0 7C00                       		moveq	#0,d6
000112C2 1C1A                       		move.b	(a2)+,d6
000112C4                            
000112C4                            Obj57_MoveLoop:
000112C4 7800                       		moveq	#0,d4
000112C6 181A                       		move.b	(a2)+,d4
000112C8 ED4C                       		lsl.w	#6,d4
000112CA 0684 00FF D000             		addi.l	#$FFD000,d4
000112D0 2244                       		movea.l	d4,a1
000112D2 7800                       		moveq	#0,d4
000112D4 1829 003C                  		move.b	$3C(a1),d4
000112D8 2A04                       		move.l	d4,d5
000112DA C9C0                       		muls.w	d0,d4
000112DC E084                       		asr.l	#8,d4
000112DE CBC1                       		muls.w	d1,d5
000112E0 E085                       		asr.l	#8,d5
000112E2 D842                       		add.w	d2,d4
000112E4 DA43                       		add.w	d3,d5
000112E6 3344 000C                  		move.w	d4,$C(a1)
000112EA 3345 0008                  		move.w	d5,8(a1)
000112EE 51CE FFD4                  		dbf	d6,Obj57_MoveLoop
000112F2 4E75                       		rts	
000112F4                            ; ===========================================================================
000112F4                            
000112F4                            Obj57_ChkDel:				; XREF: Obj57_Move
000112F4 3028 003A                  		move.w	$3A(a0),d0
000112F8 0240 FF80                  		andi.w	#$FF80,d0
000112FC 3238 F700                  		move.w	($FFFFF700).w,d1
00011300 0441 0080                  		subi.w	#$80,d1
00011304 0241 FF80                  		andi.w	#$FF80,d1
00011308 9041                       		sub.w	d1,d0
0001130A 0C40 0280                  		cmpi.w	#$280,d0
0001130E 6200 0000                  		bhi.w	Obj57_Delete
00011312 6000 CCE4                  		bra.w	DisplaySprite
00011316                            ; ===========================================================================
00011316                            
00011316                            Obj57_Delete:				; XREF: Obj57_ChkDel
00011316 7400                       		moveq	#0,d2
00011318 45E8 0029                  		lea	$29(a0),a2
0001131C 141A                       		move.b	(a2)+,d2
0001131E                            
0001131E                            Obj57_DelLoop:
0001131E 7000                       		moveq	#0,d0
00011320 101A                       		move.b	(a2)+,d0
00011322 ED48                       		lsl.w	#6,d0
00011324 0680 00FF D000             		addi.l	#$FFD000,d0
0001132A 2240                       		movea.l	d0,a1
0001132C 6100 CD08                  		bsr.w	DeleteObject2
00011330 51CA FFEC                  		dbf	d2,Obj57_DelLoop ; delete all pieces of	chain
00011334                            
00011334 4E75                       		rts	
00011336                            ; ===========================================================================
00011336                            
00011336                            Obj57_Display:				; XREF: Obj57_Index
00011336 6000 CCC0                  		bra.w	DisplaySprite
0001133A                            ; ===========================================================================
0001133A                            ; ---------------------------------------------------------------------------
0001133A                            ; Sprite mappings - chain of spiked balls (SYZ)
0001133A                            ; ---------------------------------------------------------------------------
0001133A                            Map_obj57:
0001133A                            	include "_maps\obj57syz.asm"
0001133A                            ; ---------------------------------------------------------------------------
0001133A                            ; Sprite mappings - chain of spiked balls (SYZ)
0001133A                            ; ---------------------------------------------------------------------------
0001133A 0000                       		dc.w byte_10958-Map_obj57
0001133C 01                         byte_10958:	dc.b 1
0001133D F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00011342                            		even
00011342                            		even
00011342                            
00011342                            ; ---------------------------------------------------------------------------
00011342                            ; Sprite mappings - spiked ball	on a chain (LZ)
00011342                            ; ---------------------------------------------------------------------------
00011342                            Map_obj57a:
00011342                            	include "_maps\obj57lz.asm"
00011342                            ; ---------------------------------------------------------------------------
00011342                            ; Sprite mappings - spiked ball	on a chain (LZ)
00011342                            ; ---------------------------------------------------------------------------
00011342 0000                       		dc.w byte_10964-Map_obj57a
00011344 0000                       		dc.w byte_1096A-Map_obj57a
00011346 0000                       		dc.w byte_10970-Map_obj57a
00011348 01                         byte_10964:	dc.b 1
00011349 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001134E 01                         byte_1096A:	dc.b 1
0001134F F00F 0004 F0               		dc.b $F0, $F, 0, 4, $F0
00011354 01                         byte_10970:	dc.b 1
00011355 F805 0014 F8               		dc.b $F8, 5, 0,	$14, $F8
0001135A                            		even
0001135A                            		even
0001135A                            
0001135A                            ; ===========================================================================
0001135A                            ; ---------------------------------------------------------------------------
0001135A                            ; Object 58 - giant spiked balls (SYZ)
0001135A                            ; ---------------------------------------------------------------------------
0001135A                            
0001135A                            Obj58:					; XREF: Obj_Index
0001135A 7000                       		moveq	#0,d0
0001135C 1028 0024                  		move.b	$24(a0),d0
00011360 323B 0000                  		move.w	Obj58_Index(pc,d0.w),d1
00011364 4EFB 1000                  		jmp	Obj58_Index(pc,d1.w)
00011368                            ; ===========================================================================
00011368 0000                       Obj58_Index:	dc.w Obj58_Main-Obj58_Index
0001136A 0000                       		dc.w Obj58_Move-Obj58_Index
0001136C                            ; ===========================================================================
0001136C                            
0001136C                            Obj58_Main:				; XREF: Obj58_Index
0001136C 5428 0024                  		addq.b	#2,$24(a0)
00011370 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0)
00011378 317C 0396 0002             		move.w	#$396,2(a0)
0001137E 117C 0004 0001             		move.b	#4,1(a0)
00011384 117C 0004 0018             		move.b	#4,$18(a0)
0001138A 117C 0018 0019             		move.b	#$18,$19(a0)
00011390 3168 0008 003A             		move.w	8(a0),$3A(a0)
00011396 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001139C 117C 0086 0020             		move.b	#$86,$20(a0)
000113A2 1228 0028                  		move.b	$28(a0),d1	; get object type
000113A6 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
000113AA 4881                       		ext.w	d1
000113AC E741                       		asl.w	#3,d1		; multiply by 8
000113AE 3141 003E                  		move.w	d1,$3E(a0)	; set object speed
000113B2 1028 0022                  		move.b	$22(a0),d0
000113B6 E418                       		ror.b	#2,d0
000113B8 0200 00C0                  		andi.b	#$C0,d0
000113BC 1140 0026                  		move.b	d0,$26(a0)
000113C0 117C 0050 003C             		move.b	#$50,$3C(a0)	; set diameter of circle of rotation
000113C6                            
000113C6                            Obj58_Move:				; XREF: Obj58_Index
000113C6 7000                       		moveq	#0,d0
000113C8 1028 0028                  		move.b	$28(a0),d0	; get object type
000113CC 0240 0007                  		andi.w	#7,d0		; read only the	2nd digit
000113D0 D040                       		add.w	d0,d0
000113D2 323B 0000                  		move.w	Obj58_TypeIndex(pc,d0.w),d1
000113D6 4EBB 1000                  		jsr	Obj58_TypeIndex(pc,d1.w)
000113DA 3028 003A                  		move.w	$3A(a0),d0
000113DE 0240 FF80                  		andi.w	#$FF80,d0
000113E2 3238 F700                  		move.w	($FFFFF700).w,d1
000113E6 0441 0080                  		subi.w	#$80,d1
000113EA 0241 FF80                  		andi.w	#$FF80,d1
000113EE 9041                       		sub.w	d1,d0
000113F0 0C40 0280                  		cmpi.w	#$280,d0
000113F4 6200 CC3E                  		bhi.w	DeleteObject
000113F8 6000 CBFE                  		bra.w	DisplaySprite
000113FC                            ; ===========================================================================
000113FC 0000                       Obj58_TypeIndex:dc.w Obj58_Type00-Obj58_TypeIndex
000113FE 0000                       		dc.w Obj58_Type01-Obj58_TypeIndex
00011400 0000                       		dc.w Obj58_Type02-Obj58_TypeIndex
00011402 0000                       		dc.w Obj58_Type03-Obj58_TypeIndex
00011404                            ; ===========================================================================
00011404                            
00011404                            Obj58_Type00:				; XREF: Obj58_TypeIndex
00011404 4E75                       		rts	
00011406                            ; ===========================================================================
00011406                            
00011406                            Obj58_Type01:				; XREF: Obj58_TypeIndex
00011406 323C 0060                  		move.w	#$60,d1
0001140A 7000                       		moveq	#0,d0
0001140C 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00011410 0828 0000 0022             		btst	#0,$22(a0)
00011416 6700                       		beq.s	loc_10A38
00011418 4440                       		neg.w	d0
0001141A D041                       		add.w	d1,d0
0001141C                            
0001141C                            loc_10A38:
0001141C 3228 003A                  		move.w	$3A(a0),d1
00011420 9240                       		sub.w	d0,d1
00011422 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
00011426 4E75                       		rts	
00011428                            ; ===========================================================================
00011428                            
00011428                            Obj58_Type02:				; XREF: Obj58_TypeIndex
00011428 323C 0060                  		move.w	#$60,d1
0001142C 7000                       		moveq	#0,d0
0001142E 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00011432 0828 0000 0022             		btst	#0,$22(a0)
00011438 6700                       		beq.s	loc_10A5C
0001143A 4440                       		neg.w	d0
0001143C 0640 0080                  		addi.w	#$80,d0
00011440                            
00011440                            loc_10A5C:
00011440 3228 0038                  		move.w	$38(a0),d1
00011444 9240                       		sub.w	d0,d1
00011446 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
0001144A 4E75                       		rts	
0001144C                            ; ===========================================================================
0001144C                            
0001144C                            Obj58_Type03:				; XREF: Obj58_TypeIndex
0001144C 3028 003E                  		move.w	$3E(a0),d0
00011450 D168 0026                  		add.w	d0,$26(a0)
00011454 1028 0026                  		move.b	$26(a0),d0
00011458 4EB9 0000 2D6C             		jsr	(CalcSine).l
0001145E 3428 0038                  		move.w	$38(a0),d2
00011462 3628 003A                  		move.w	$3A(a0),d3
00011466 7800                       		moveq	#0,d4
00011468 1828 003C                  		move.b	$3C(a0),d4
0001146C 2A04                       		move.l	d4,d5
0001146E C9C0                       		muls.w	d0,d4
00011470 E084                       		asr.l	#8,d4
00011472 CBC1                       		muls.w	d1,d5
00011474 E085                       		asr.l	#8,d5
00011476 D842                       		add.w	d2,d4
00011478 DA43                       		add.w	d3,d5
0001147A 3144 000C                  		move.w	d4,$C(a0)
0001147E 3145 0008                  		move.w	d5,8(a0)
00011482 4E75                       		rts	
00011484                            ; ===========================================================================
00011484                            ; ---------------------------------------------------------------------------
00011484                            ; Sprite mappings - SBZ	spiked ball on a chain
00011484                            ; ---------------------------------------------------------------------------
00011484                            Map_obj15b:
00011484                            	include "_maps\obj15sbz.asm"
00011484                            ; ---------------------------------------------------------------------------
00011484                            ; Sprite mappings - spiked ball on a chain (SBZ)
00011484                            ; ---------------------------------------------------------------------------
00011484 0000 0000                  		dc.w byte_10AA6-Map_obj15b, byte_10AC0-Map_obj15b
00011488 0000                       		dc.w byte_10AC6-Map_obj15b
0001148A 05                         byte_10AA6:	dc.b 5
0001148B E804 0000 F8               		dc.b $E8, 4, 0,	0, $F8
00011490 F00F 0002 F0               		dc.b $F0, $F, 0, 2, $F0
00011495 F801 0012 E8               		dc.b $F8, 1, 0,	$12, $E8
0001149A F801 0014 10               		dc.b $F8, 1, 0,	$14, $10
0001149F 1004 0016 F8               		dc.b $10, 4, 0,	$16, $F8
000114A4 01                         byte_10AC0:	dc.b 1
000114A5 F805 0020 F8               		dc.b $F8, 5, 0,	$20, $F8
000114AA 02                         byte_10AC6:	dc.b 2
000114AB F80D 0018 F0               		dc.b $F8, $D, 0, $18, $F0
000114B0 E80D 1018 F0               		dc.b $E8, $D, $10, $18,	$F0
000114B6 00                         		even
000114B6 00                         		even
000114B6                            
000114B6                            ; ===========================================================================
000114B6                            ; ---------------------------------------------------------------------------
000114B6                            ; Object 59 - platforms	that move when you stand on them (SLZ)
000114B6                            ; ---------------------------------------------------------------------------
000114B6                            
000114B6                            Obj59:					; XREF: Obj_Index
000114B6 7000                       		moveq	#0,d0
000114B8 1028 0024                  		move.b	$24(a0),d0
000114BC 323B 0000                  		move.w	Obj59_Index(pc,d0.w),d1
000114C0 4EBB 1000                  		jsr	Obj59_Index(pc,d1.w)
000114C4 3028 0032                  		move.w	$32(a0),d0
000114C8 0240 FF80                  		andi.w	#$FF80,d0
000114CC 3238 F700                  		move.w	($FFFFF700).w,d1
000114D0 0441 0080                  		subi.w	#$80,d1
000114D4 0241 FF80                  		andi.w	#$FF80,d1
000114D8 9041                       		sub.w	d1,d0
000114DA 0C40 0280                  		cmpi.w	#$280,d0
000114DE 6200 CB54                  		bhi.w	DeleteObject
000114E2 6000 CB14                  		bra.w	DisplaySprite
000114E6                            ; ===========================================================================
000114E6 0000                       Obj59_Index:	dc.w Obj59_Main-Obj59_Index
000114E8 0000                       		dc.w Obj59_Platform-Obj59_Index
000114EA 0000                       		dc.w Obj59_Action-Obj59_Index
000114EC 0000                       		dc.w Obj59_MakeMulti-Obj59_Index
000114EE                            
000114EE 2800                       Obj59_Var1:	dc.b $28, 0		; width, frame number
000114F0                            
000114F0 1001                       Obj59_Var2:	dc.b $10, 1		; width, action	type
000114F2 2001                       		dc.b $20, 1
000114F4 3401                       		dc.b $34, 1
000114F6 1003                       		dc.b $10, 3
000114F8 2003                       		dc.b $20, 3
000114FA 3403                       		dc.b $34, 3
000114FC 1401                       		dc.b $14, 1
000114FE 2401                       		dc.b $24, 1
00011500 2C01                       		dc.b $2C, 1
00011502 1403                       		dc.b $14, 3
00011504 2403                       		dc.b $24, 3
00011506 2C03                       		dc.b $2C, 3
00011508 2005                       		dc.b $20, 5
0001150A 2007                       		dc.b $20, 7
0001150C 3009                       		dc.b $30, 9
0001150E                            ; ===========================================================================
0001150E                            
0001150E                            Obj59_Main:				; XREF: Obj59_Index
0001150E 5428 0024                  		addq.b	#2,$24(a0)
00011512 7000                       		moveq	#0,d0
00011514 1028 0028                  		move.b	$28(a0),d0
00011518 6A00                       		bpl.s	Obj59_Main2
0001151A 5828 0024                  		addq.b	#4,$24(a0)
0001151E 0240 007F                  		andi.w	#$7F,d0
00011522 C0FC 0006                  		mulu.w	#6,d0
00011526 3140 003C                  		move.w	d0,$3C(a0)
0001152A 3140 003E                  		move.w	d0,$3E(a0)
0001152E 588F                       		addq.l	#4,sp
00011530 4E75                       		rts	
00011532                            ; ===========================================================================
00011532                            
00011532                            Obj59_Main2:
00011532 E648                       		lsr.w	#3,d0
00011534 0240 001E                  		andi.w	#$1E,d0
00011538 45FB 00B4                  		lea	Obj59_Var1(pc,d0.w),a2
0001153C 115A 0019                  		move.b	(a2)+,$19(a0)
00011540 115A 001A                  		move.b	(a2)+,$1A(a0)
00011544 7000                       		moveq	#0,d0
00011546 1028 0028                  		move.b	$28(a0),d0
0001154A D040                       		add.w	d0,d0
0001154C 0240 001E                  		andi.w	#$1E,d0
00011550 45FB 009E                  		lea	Obj59_Var2(pc,d0.w),a2
00011554 101A                       		move.b	(a2)+,d0
00011556 E548                       		lsl.w	#2,d0
00011558 3140 003C                  		move.w	d0,$3C(a0)
0001155C 115A 0028                  		move.b	(a2)+,$28(a0)
00011560 217C 0000 0000 0004        		move.l	#Map_obj59,4(a0)
00011568 317C 4000 0002             		move.w	#$4000,2(a0)
0001156E 117C 0004 0001             		move.b	#4,1(a0)
00011574 117C 0004 0018             		move.b	#4,$18(a0)
0001157A 3168 0008 0032             		move.w	8(a0),$32(a0)
00011580 3168 000C 0030             		move.w	$C(a0),$30(a0)
00011586                            
00011586                            Obj59_Platform:				; XREF: Obj59_Index
00011586 7200                       		moveq	#0,d1
00011588 1228 0019                  		move.b	$19(a0),d1
0001158C 4EB9 0000 7C12             		jsr	(PlatformObject).l
00011592 6000 0000                  		bra.w	Obj59_Types
00011596                            ; ===========================================================================
00011596                            
00011596                            Obj59_Action:				; XREF: Obj59_Index
00011596 7200                       		moveq	#0,d1
00011598 1228 0019                  		move.b	$19(a0),d1
0001159C 4EB9 0000 7D86             		jsr	(ExitPlatform).l
000115A2 3F28 0008                  		move.w	8(a0),-(sp)
000115A6 6100 0000                  		bsr.w	Obj59_Types
000115AA 341F                       		move.w	(sp)+,d2
000115AC 4A10                       		tst.b	0(a0)
000115AE 6700                       		beq.s	locret_10BD4
000115B0 4EF9 0000 82F0             		jmp	(MvSonicOnPtfm2).l
000115B6                            ; ===========================================================================
000115B6                            
000115B6                            locret_10BD4:
000115B6 4E75                       		rts	
000115B8                            ; ===========================================================================
000115B8                            
000115B8                            Obj59_Types:
000115B8 7000                       		moveq	#0,d0
000115BA 1028 0028                  		move.b	$28(a0),d0
000115BE 0240 000F                  		andi.w	#$F,d0
000115C2 D040                       		add.w	d0,d0
000115C4 323B 0000                  		move.w	Obj59_TypeIndex(pc,d0.w),d1
000115C8 4EFB 1000                  		jmp	Obj59_TypeIndex(pc,d1.w)
000115CC                            ; ===========================================================================
000115CC 0000 0000                  Obj59_TypeIndex:dc.w Obj59_Type00-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
000115D0 0000 0000                  		dc.w Obj59_Type02-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
000115D4 0000 0000                  		dc.w Obj59_Type04-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
000115D8 0000 0000                  		dc.w Obj59_Type06-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
000115DC 0000 0000                  		dc.w Obj59_Type08-Obj59_TypeIndex, Obj59_Type09-Obj59_TypeIndex
000115E0                            ; ===========================================================================
000115E0                            
000115E0                            Obj59_Type00:				; XREF: Obj59_TypeIndex
000115E0 4E75                       		rts	
000115E2                            ; ===========================================================================
000115E2                            
000115E2                            Obj59_Type01:				; XREF: Obj59_TypeIndex
000115E2 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; check	if Sonic is standing on	the object
000115E8 6600                       		bne.s	locret_10C0C
000115EA 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
000115EE                            
000115EE                            locret_10C0C:
000115EE 4E75                       		rts	
000115F0                            ; ===========================================================================
000115F0                            
000115F0                            Obj59_Type02:				; XREF: Obj59_TypeIndex
000115F0 6100 0000                  		bsr.w	Obj59_Move
000115F4 3028 0034                  		move.w	$34(a0),d0
000115F8 4440                       		neg.w	d0
000115FA D068 0030                  		add.w	$30(a0),d0
000115FE 3140 000C                  		move.w	d0,$C(a0)
00011602 4E75                       		rts	
00011604                            ; ===========================================================================
00011604                            
00011604                            Obj59_Type04:				; XREF: Obj59_TypeIndex
00011604 6100 0000                  		bsr.w	Obj59_Move
00011608 3028 0034                  		move.w	$34(a0),d0
0001160C D068 0030                  		add.w	$30(a0),d0
00011610 3140 000C                  		move.w	d0,$C(a0)
00011614 4E75                       		rts	
00011616                            ; ===========================================================================
00011616                            
00011616                            Obj59_Type06:				; XREF: Obj59_TypeIndex
00011616 6100 0000                  		bsr.w	Obj59_Move
0001161A 3028 0034                  		move.w	$34(a0),d0
0001161E E240                       		asr.w	#1,d0
00011620 4440                       		neg.w	d0
00011622 D068 0030                  		add.w	$30(a0),d0
00011626 3140 000C                  		move.w	d0,$C(a0)
0001162A 3028 0034                  		move.w	$34(a0),d0
0001162E D068 0032                  		add.w	$32(a0),d0
00011632 3140 0008                  		move.w	d0,8(a0)
00011636 4E75                       		rts	
00011638                            ; ===========================================================================
00011638                            
00011638                            Obj59_Type08:				; XREF: Obj59_TypeIndex
00011638 6100 0000                  		bsr.w	Obj59_Move
0001163C 3028 0034                  		move.w	$34(a0),d0
00011640 E240                       		asr.w	#1,d0
00011642 D068 0030                  		add.w	$30(a0),d0
00011646 3140 000C                  		move.w	d0,$C(a0)
0001164A 3028 0034                  		move.w	$34(a0),d0
0001164E 4440                       		neg.w	d0
00011650 D068 0032                  		add.w	$32(a0),d0
00011654 3140 0008                  		move.w	d0,8(a0)
00011658 4E75                       		rts	
0001165A                            ; ===========================================================================
0001165A                            
0001165A                            Obj59_Type09:				; XREF: Obj59_TypeIndex
0001165A 6100 0000                  		bsr.w	Obj59_Move
0001165E 3028 0034                  		move.w	$34(a0),d0
00011662 4440                       		neg.w	d0
00011664 D068 0030                  		add.w	$30(a0),d0
00011668 3140 000C                  		move.w	d0,$C(a0)
0001166C 4A28 0028                  		tst.b	$28(a0)
00011670 6700 0000                  		beq.w	loc_10C94
00011674 4E75                       		rts	
00011676                            ; ===========================================================================
00011676                            
00011676                            loc_10C94:
00011676 0828 0003 0022             		btst	#3,$22(a0)
0001167C 6700                       		beq.s	Obj59_Delete
0001167E 08E9 0001 0022             		bset	#1,$22(a1)
00011684 08A9 0003 0022             		bclr	#3,$22(a1)
0001168A 137C 0002 0024             		move.b	#2,$24(a1)
00011690                            
00011690                            Obj59_Delete:
00011690 6000 C9A2                  		bra.w	DeleteObject
00011694                            
00011694                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00011694                            
00011694                            
00011694                            Obj59_Move:				; XREF: Obj59_Type02; et al
00011694 3028 0038                  		move.w	$38(a0),d0
00011698 4A28 003A                  		tst.b	$3A(a0)
0001169C 6600                       		bne.s	loc_10CC8
0001169E 0C40 0800                  		cmpi.w	#$800,d0
000116A2 6400                       		bcc.s	loc_10CD0
000116A4 0640 0010                  		addi.w	#$10,d0
000116A8 6000                       		bra.s	loc_10CD0
000116AA                            ; ===========================================================================
000116AA                            
000116AA                            loc_10CC8:
000116AA 4A40                       		tst.w	d0
000116AC 6700                       		beq.s	loc_10CD0
000116AE 0440 0010                  		subi.w	#$10,d0
000116B2                            
000116B2                            loc_10CD0:
000116B2 3140 0038                  		move.w	d0,$38(a0)
000116B6 48C0                       		ext.l	d0
000116B8 E180                       		asl.l	#8,d0
000116BA D0A8 0034                  		add.l	$34(a0),d0
000116BE 2140 0034                  		move.l	d0,$34(a0)
000116C2 4840                       		swap	d0
000116C4 3428 003C                  		move.w	$3C(a0),d2
000116C8 B042                       		cmp.w	d2,d0
000116CA 6300                       		bls.s	loc_10CF0
000116CC 117C 0001 003A             		move.b	#1,$3A(a0)
000116D2                            
000116D2                            loc_10CF0:
000116D2 D442                       		add.w	d2,d2
000116D4 B042                       		cmp.w	d2,d0
000116D6 6600                       		bne.s	locret_10CFA
000116D8 4228 0028                  		clr.b	$28(a0)
000116DC                            
000116DC                            locret_10CFA:
000116DC 4E75                       		rts	
000116DE                            ; End of function Obj59_Move
000116DE                            
000116DE                            ; ===========================================================================
000116DE                            
000116DE                            Obj59_MakeMulti:			; XREF: Obj59_Index
000116DE 5368 003C                  		subq.w	#1,$3C(a0)
000116E2 6600                       		bne.s	Obj59_ChkDel
000116E4 3168 003E 003C             		move.w	$3E(a0),$3C(a0)
000116EA 6100 CD92                  		bsr.w	SingleObjLoad
000116EE 6600                       		bne.s	Obj59_ChkDel
000116F0 12BC 0059                  		move.b	#$59,0(a1)	; duplicate the	object
000116F4 3368 0008 0008             		move.w	8(a0),8(a1)
000116FA 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011700 137C 000E 0028             		move.b	#$E,$28(a1)
00011706                            
00011706                            Obj59_ChkDel:
00011706 588F                       		addq.l	#4,sp
00011708 3028 0008                  		move.w	8(a0),d0
0001170C 0240 FF80                  		andi.w	#$FF80,d0
00011710 3238 F700                  		move.w	($FFFFF700).w,d1
00011714 0441 0080                  		subi.w	#$80,d1
00011718 0241 FF80                  		andi.w	#$FF80,d1
0001171C 9041                       		sub.w	d1,d0
0001171E 0C40 0280                  		cmpi.w	#$280,d0
00011722 6200 C910                  		bhi.w	DeleteObject
00011726 4E75                       		rts	
00011728                            ; ===========================================================================
00011728                            ; ---------------------------------------------------------------------------
00011728                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
00011728                            ; ---------------------------------------------------------------------------
00011728                            Map_obj59:
00011728                            	include "_maps\obj59.asm"
00011728                            ; ---------------------------------------------------------------------------
00011728                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
00011728                            ; ---------------------------------------------------------------------------
00011728 0000                       		dc.w byte_10D4A-Map_obj59
0001172A 03                         byte_10D4A:	dc.b 3
0001172B F80F 0041 D8               		dc.b $F8, $F, 0, $41, $D8
00011730 F80F 0041 F8               		dc.b $F8, $F, 0, $41, $F8
00011735 F807 0041 18               		dc.b $F8, 7, 0,	$41, $18
0001173A                            		even
0001173A                            		even
0001173A                            
0001173A                            ; ===========================================================================
0001173A                            ; ---------------------------------------------------------------------------
0001173A                            ; Object 5A - platforms	moving in circles (SLZ)
0001173A                            ; ---------------------------------------------------------------------------
0001173A                            
0001173A                            Obj5A:					; XREF: Obj_Index
0001173A 7000                       		moveq	#0,d0
0001173C 1028 0024                  		move.b	$24(a0),d0
00011740 323B 0000                  		move.w	Obj5A_Index(pc,d0.w),d1
00011744 4EBB 1000                  		jsr	Obj5A_Index(pc,d1.w)
00011748 3028 0032                  		move.w	$32(a0),d0
0001174C 0240 FF80                  		andi.w	#$FF80,d0
00011750 3238 F700                  		move.w	($FFFFF700).w,d1
00011754 0441 0080                  		subi.w	#$80,d1
00011758 0241 FF80                  		andi.w	#$FF80,d1
0001175C 9041                       		sub.w	d1,d0
0001175E 0C40 0280                  		cmpi.w	#$280,d0
00011762 6200 C8D0                  		bhi.w	DeleteObject
00011766 6000 C890                  		bra.w	DisplaySprite
0001176A                            ; ===========================================================================
0001176A 0000                       Obj5A_Index:	dc.w Obj5A_Main-Obj5A_Index
0001176C 0000                       		dc.w Obj5A_Platform-Obj5A_Index
0001176E 0000                       		dc.w Obj5A_Action-Obj5A_Index
00011770                            ; ===========================================================================
00011770                            
00011770                            Obj5A_Main:				; XREF: Obj5A_Index
00011770 5428 0024                  		addq.b	#2,$24(a0)
00011774 217C 0000 0000 0004        		move.l	#Map_obj5A,4(a0)
0001177C 317C 4000 0002             		move.w	#$4000,2(a0)
00011782 117C 0004 0001             		move.b	#4,1(a0)
00011788 117C 0004 0018             		move.b	#4,$18(a0)
0001178E 117C 0018 0019             		move.b	#$18,$19(a0)
00011794 3168 0008 0032             		move.w	8(a0),$32(a0)
0001179A 3168 000C 0030             		move.w	$C(a0),$30(a0)
000117A0                            
000117A0                            Obj5A_Platform:				; XREF: Obj5A_Index
000117A0 7200                       		moveq	#0,d1
000117A2 1228 0019                  		move.b	$19(a0),d1
000117A6 4EB9 0000 7C12             		jsr	(PlatformObject).l
000117AC 6000 0000                  		bra.w	Obj5A_Types
000117B0                            ; ===========================================================================
000117B0                            
000117B0                            Obj5A_Action:				; XREF: Obj5A_Index
000117B0 7200                       		moveq	#0,d1
000117B2 1228 0019                  		move.b	$19(a0),d1
000117B6 4EB9 0000 7D86             		jsr	(ExitPlatform).l
000117BC 3F28 0008                  		move.w	8(a0),-(sp)
000117C0 6100 0000                  		bsr.w	Obj5A_Types
000117C4 341F                       		move.w	(sp)+,d2
000117C6 4EF9 0000 82F0             		jmp	(MvSonicOnPtfm2).l
000117CC                            ; ===========================================================================
000117CC                            
000117CC                            Obj5A_Types:
000117CC 7000                       		moveq	#0,d0
000117CE 1028 0028                  		move.b	$28(a0),d0
000117D2 0240 000C                  		andi.w	#$C,d0
000117D6 E248                       		lsr.w	#1,d0
000117D8 323B 0000                  		move.w	Obj5A_TypeIndex(pc,d0.w),d1
000117DC 4EFB 1000                  		jmp	Obj5A_TypeIndex(pc,d1.w)
000117E0                            ; ===========================================================================
000117E0 0000                       Obj5A_TypeIndex:dc.w Obj5A_Type00-Obj5A_TypeIndex
000117E2 0000                       		dc.w Obj5A_Type04-Obj5A_TypeIndex
000117E4                            ; ===========================================================================
000117E4                            
000117E4                            Obj5A_Type00:				; XREF: Obj5A_TypeIndex
000117E4 1238 FE80                  		move.b	($FFFFFE80).w,d1
000117E8 0401 0050                  		subi.b	#$50,d1
000117EC 4881                       		ext.w	d1
000117EE 1438 FE84                  		move.b	($FFFFFE84).w,d2
000117F2 0402 0050                  		subi.b	#$50,d2
000117F6 4882                       		ext.w	d2
000117F8 0828 0000 0028             		btst	#0,$28(a0)
000117FE 6700                       		beq.s	loc_10E24
00011800 4441                       		neg.w	d1
00011802 4442                       		neg.w	d2
00011804                            
00011804                            loc_10E24:
00011804 0828 0001 0028             		btst	#1,$28(a0)
0001180A 6700                       		beq.s	loc_10E30
0001180C 4441                       		neg.w	d1
0001180E C342                       		exg	d1,d2
00011810                            
00011810                            loc_10E30:
00011810 D268 0032                  		add.w	$32(a0),d1
00011814 3141 0008                  		move.w	d1,8(a0)
00011818 D468 0030                  		add.w	$30(a0),d2
0001181C 3142 000C                  		move.w	d2,$C(a0)
00011820 4E75                       		rts	
00011822                            ; ===========================================================================
00011822                            
00011822                            Obj5A_Type04:				; XREF: Obj5A_TypeIndex
00011822 1238 FE80                  		move.b	($FFFFFE80).w,d1
00011826 0401 0050                  		subi.b	#$50,d1
0001182A 4881                       		ext.w	d1
0001182C 1438 FE84                  		move.b	($FFFFFE84).w,d2
00011830 0402 0050                  		subi.b	#$50,d2
00011834 4882                       		ext.w	d2
00011836 0828 0000 0028             		btst	#0,$28(a0)
0001183C 6700                       		beq.s	loc_10E62
0001183E 4441                       		neg.w	d1
00011840 4442                       		neg.w	d2
00011842                            
00011842                            loc_10E62:
00011842 0828 0001 0028             		btst	#1,$28(a0)
00011848 6700                       		beq.s	loc_10E6E
0001184A 4441                       		neg.w	d1
0001184C C342                       		exg	d1,d2
0001184E                            
0001184E                            loc_10E6E:
0001184E 4441                       		neg.w	d1
00011850 D268 0032                  		add.w	$32(a0),d1
00011854 3141 0008                  		move.w	d1,8(a0)
00011858 D468 0030                  		add.w	$30(a0),d2
0001185C 3142 000C                  		move.w	d2,$C(a0)
00011860 4E75                       		rts	
00011862                            ; ===========================================================================
00011862                            ; ---------------------------------------------------------------------------
00011862                            ; Sprite mappings - platforms that move	in circles (SLZ)
00011862                            ; ---------------------------------------------------------------------------
00011862                            Map_obj5A:
00011862                            	include "_maps\obj5A.asm"
00011862                            ; ---------------------------------------------------------------------------
00011862                            ; Sprite mappings - platforms that move	in circles (SLZ)
00011862                            ; ---------------------------------------------------------------------------
00011862 0000                       		dc.w byte_10E84-Map_obj5A
00011864 02                         byte_10E84:	dc.b 2
00011865 F809 0051 E8               		dc.b $F8, 9, 0,	$51, $E8
0001186A F809 0851 00               		dc.b $F8, 9, 8,	$51, 0
00011870 00                         		even
00011870 00                         		even
00011870                            
00011870                            ; ===========================================================================
00011870                            ; ---------------------------------------------------------------------------
00011870                            ; Object 5B - blocks that form a staircase (SLZ)
00011870                            ; ---------------------------------------------------------------------------
00011870                            
00011870                            Obj5B:					; XREF: Obj_Index
00011870 7000                       		moveq	#0,d0
00011872 1028 0024                  		move.b	$24(a0),d0
00011876 323B 0000                  		move.w	Obj5B_Index(pc,d0.w),d1
0001187A 4EBB 1000                  		jsr	Obj5B_Index(pc,d1.w)
0001187E 3028 0030                  		move.w	$30(a0),d0
00011882 0240 FF80                  		andi.w	#$FF80,d0
00011886 3238 F700                  		move.w	($FFFFF700).w,d1
0001188A 0441 0080                  		subi.w	#$80,d1
0001188E 0241 FF80                  		andi.w	#$FF80,d1
00011892 9041                       		sub.w	d1,d0
00011894 0C40 0280                  		cmpi.w	#$280,d0
00011898 6200 C79A                  		bhi.w	DeleteObject
0001189C 6000 C75A                  		bra.w	DisplaySprite
000118A0                            ; ===========================================================================
000118A0 0000                       Obj5B_Index:	dc.w Obj5B_Main-Obj5B_Index
000118A2 0000                       		dc.w Obj5B_Move-Obj5B_Index
000118A4 0000                       		dc.w Obj5B_Solid-Obj5B_Index
000118A6                            ; ===========================================================================
000118A6                            
000118A6                            Obj5B_Main:				; XREF: Obj5B_Index
000118A6 5428 0024                  		addq.b	#2,$24(a0)
000118AA 7638                       		moveq	#$38,d3
000118AC 7801                       		moveq	#1,d4
000118AE 0828 0000 0022             		btst	#0,$22(a0)
000118B4 6700                       		beq.s	loc_10EDA
000118B6 763B                       		moveq	#$3B,d3
000118B8 78FF                       		moveq	#-1,d4
000118BA                            
000118BA                            loc_10EDA:
000118BA 3428 0008                  		move.w	8(a0),d2
000118BE 2248                       		movea.l	a0,a1
000118C0 7203                       		moveq	#3,d1
000118C2 6000                       		bra.s	Obj5B_MakeBlocks
000118C4                            ; ===========================================================================
000118C4                            
000118C4                            Obj5B_Loop:
000118C4 6100 CBCE                  		bsr.w	SingleObjLoad2
000118C8 6600 0000                  		bne.w	Obj5B_Move
000118CC 137C 0004 0024             		move.b	#4,$24(a1)
000118D2                            
000118D2                            Obj5B_MakeBlocks:			; XREF: Obj5B_Main
000118D2 12BC 005B                  		move.b	#$5B,0(a1)	; load another block object
000118D6 237C 0000 0000 0004        		move.l	#Map_obj5B,4(a1)
000118DE 337C 4000 0002             		move.w	#$4000,2(a1)
000118E4 137C 0004 0001             		move.b	#4,1(a1)
000118EA 137C 0003 0018             		move.b	#3,$18(a1)
000118F0 137C 0010 0019             		move.b	#$10,$19(a1)
000118F6 1368 0028 0028             		move.b	$28(a0),$28(a1)
000118FC 3342 0008                  		move.w	d2,8(a1)
00011900 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011906 3368 0008 0030             		move.w	8(a0),$30(a1)
0001190C 3369 000C 0032             		move.w	$C(a1),$32(a1)
00011912 0642 0020                  		addi.w	#$20,d2
00011916 1343 0037                  		move.b	d3,$37(a1)
0001191A 2348 003C                  		move.l	a0,$3C(a1)
0001191E D604                       		add.b	d4,d3
00011920 51C9 FFA2                  		dbf	d1,Obj5B_Loop	; repeat sequence 3 times
00011924                            
00011924                            Obj5B_Move:				; XREF: Obj5B_Index
00011924 7000                       		moveq	#0,d0
00011926 1028 0028                  		move.b	$28(a0),d0
0001192A 0240 0007                  		andi.w	#7,d0
0001192E D040                       		add.w	d0,d0
00011930 323B 0000                  		move.w	Obj5B_TypeIndex(pc,d0.w),d1
00011934 4EBB 1000                  		jsr	Obj5B_TypeIndex(pc,d1.w)
00011938                            
00011938                            Obj5B_Solid:				; XREF: Obj5B_Index
00011938 2468 003C                  		movea.l	$3C(a0),a2
0001193C 7000                       		moveq	#0,d0
0001193E 1028 0037                  		move.b	$37(a0),d0
00011942 1032 0000                  		move.b	(a2,d0.w),d0
00011946 D068 0032                  		add.w	$32(a0),d0
0001194A 3140 000C                  		move.w	d0,$C(a0)
0001194E 7200                       		moveq	#0,d1
00011950 1228 0019                  		move.b	$19(a0),d1
00011954 0641 000B                  		addi.w	#$B,d1
00011958 343C 0010                  		move.w	#$10,d2
0001195C 363C 0011                  		move.w	#$11,d3
00011960 3828 0008                  		move.w	8(a0),d4
00011964 6100 EA62                  		bsr.w	SolidObject
00011968 4A04                       		tst.b	d4
0001196A 6A00                       		bpl.s	loc_10F92
0001196C 1544 0036                  		move.b	d4,$36(a2)
00011970                            
00011970                            loc_10F92:
00011970 0828 0003 0022             		btst	#3,$22(a0)
00011976 6700                       		beq.s	locret_10FA0
00011978 157C 0001 0036             		move.b	#1,$36(a2)
0001197E                            
0001197E                            locret_10FA0:
0001197E 4E75                       		rts	
00011980                            ; ===========================================================================
00011980 0000                       Obj5B_TypeIndex:dc.w Obj5B_Type00-Obj5B_TypeIndex
00011982 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
00011984 0000                       		dc.w Obj5B_Type02-Obj5B_TypeIndex
00011986 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
00011988                            ; ===========================================================================
00011988                            
00011988                            Obj5B_Type00:				; XREF: Obj5B_TypeIndex
00011988 4A68 0034                  		tst.w	$34(a0)
0001198C 6600                       		bne.s	loc_10FC0
0001198E 0C28 0001 0036             		cmpi.b	#1,$36(a0)
00011994 6600                       		bne.s	locret_10FBE
00011996 317C 001E 0034             		move.w	#$1E,$34(a0)
0001199C                            
0001199C                            locret_10FBE:
0001199C 4E75                       		rts	
0001199E                            ; ===========================================================================
0001199E                            
0001199E                            loc_10FC0:
0001199E 5368 0034                  		subq.w	#1,$34(a0)
000119A2 66F8                       		bne.s	locret_10FBE
000119A4 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
000119A8 4E75                       		rts	
000119AA                            ; ===========================================================================
000119AA                            
000119AA                            Obj5B_Type02:				; XREF: Obj5B_TypeIndex
000119AA 4A68 0034                  		tst.w	$34(a0)
000119AE 6600                       		bne.s	loc_10FE0
000119B0 4A28 0036                  		tst.b	$36(a0)
000119B4 6A00                       		bpl.s	locret_10FDE
000119B6 317C 003C 0034             		move.w	#$3C,$34(a0)
000119BC                            
000119BC                            locret_10FDE:
000119BC 4E75                       		rts	
000119BE                            ; ===========================================================================
000119BE                            
000119BE                            loc_10FE0:
000119BE 5368 0034                  		subq.w	#1,$34(a0)
000119C2 6600                       		bne.s	loc_10FEC
000119C4 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
000119C8 4E75                       		rts	
000119CA                            ; ===========================================================================
000119CA                            
000119CA                            loc_10FEC:
000119CA 43E8 0038                  		lea	$38(a0),a1
000119CE 3028 0034                  		move.w	$34(a0),d0
000119D2 E408                       		lsr.b	#2,d0
000119D4 0200 0001                  		andi.b	#1,d0
000119D8 12C0                       		move.b	d0,(a1)+
000119DA 0A00 0001                  		eori.b	#1,d0
000119DE 12C0                       		move.b	d0,(a1)+
000119E0 0A00 0001                  		eori.b	#1,d0
000119E4 12C0                       		move.b	d0,(a1)+
000119E6 0A00 0001                  		eori.b	#1,d0
000119EA 12C0                       		move.b	d0,(a1)+
000119EC 4E75                       		rts	
000119EE                            ; ===========================================================================
000119EE                            
000119EE                            Obj5B_Type01:				; XREF: Obj5B_TypeIndex
000119EE 43E8 0038                  		lea	$38(a0),a1
000119F2 0C11 0080                  		cmpi.b	#$80,(a1)
000119F6 6700                       		beq.s	locret_11038
000119F8 5211                       		addq.b	#1,(a1)
000119FA 7200                       		moveq	#0,d1
000119FC 1219                       		move.b	(a1)+,d1
000119FE 4841                       		swap	d1
00011A00 E289                       		lsr.l	#1,d1
00011A02 2401                       		move.l	d1,d2
00011A04 E289                       		lsr.l	#1,d1
00011A06 2601                       		move.l	d1,d3
00011A08 D682                       		add.l	d2,d3
00011A0A 4841                       		swap	d1
00011A0C 4842                       		swap	d2
00011A0E 4843                       		swap	d3
00011A10 12C3                       		move.b	d3,(a1)+
00011A12 12C2                       		move.b	d2,(a1)+
00011A14 12C1                       		move.b	d1,(a1)+
00011A16                            
00011A16                            locret_11038:
00011A16 4E75                       		rts	
00011A18 4E75                       		rts	
00011A1A                            ; ===========================================================================
00011A1A                            ; ---------------------------------------------------------------------------
00011A1A                            ; Sprite mappings - blocks that	form a staircase (SLZ)
00011A1A                            ; ---------------------------------------------------------------------------
00011A1A                            Map_obj5B:
00011A1A                            	include "_maps\obj5B.asm"
00011A1A                            ; ---------------------------------------------------------------------------
00011A1A                            ; Sprite mappings - blocks that	form a staircase (SLZ)
00011A1A                            ; ---------------------------------------------------------------------------
00011A1A 0000                       		dc.w byte_1103E-Map_obj5B
00011A1C 01                         byte_1103E:	dc.b 1
00011A1D F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
00011A22                            		even
00011A22                            		even
00011A22                            
00011A22                            ; ===========================================================================
00011A22                            ; ---------------------------------------------------------------------------
00011A22                            ; Object 5C - metal girders in foreground (SLZ)
00011A22                            ; ---------------------------------------------------------------------------
00011A22                            
00011A22                            Obj5C:					; XREF: Obj_Index
00011A22 7000                       		moveq	#0,d0
00011A24 1028 0024                  		move.b	$24(a0),d0
00011A28 323B 0000                  		move.w	Obj5C_Index(pc,d0.w),d1
00011A2C 4EFB 1000                  		jmp	Obj5C_Index(pc,d1.w)
00011A30                            ; ===========================================================================
00011A30 0000                       Obj5C_Index:	dc.w Obj5C_Main-Obj5C_Index
00011A32 0000                       		dc.w Obj5C_Display-Obj5C_Index
00011A34                            ; ===========================================================================
00011A34                            
00011A34                            Obj5C_Main:				; XREF: Obj5C_Index
00011A34 5428 0024                  		addq.b	#2,$24(a0)
00011A38 217C 0000 0000 0004        		move.l	#Map_obj5C,4(a0)
00011A40 317C 83CC 0002             		move.w	#$83CC,2(a0)
00011A46 117C 0010 0019             		move.b	#$10,$19(a0)
00011A4C                            
00011A4C                            Obj5C_Display:				; XREF: Obj5C_Index
00011A4C 2238 F700                  		move.l	($FFFFF700).w,d1
00011A50 D281                       		add.l	d1,d1
00011A52 4841                       		swap	d1
00011A54 4441                       		neg.w	d1
00011A56 3141 0008                  		move.w	d1,8(a0)
00011A5A 2238 F704                  		move.l	($FFFFF704).w,d1
00011A5E D281                       		add.l	d1,d1
00011A60 4841                       		swap	d1
00011A62 0241 003F                  		andi.w	#$3F,d1
00011A66 4441                       		neg.w	d1
00011A68 0641 0100                  		addi.w	#$100,d1
00011A6C 3141 000A                  		move.w	d1,$A(a0)
00011A70 6000 C586                  		bra.w	DisplaySprite
00011A74                            ; ===========================================================================
00011A74                            ; ---------------------------------------------------------------------------
00011A74                            ; Sprite mappings - metal girders in foreground	(SLZ)
00011A74                            ; ---------------------------------------------------------------------------
00011A74                            Map_obj5C:
00011A74                            	include "_maps\obj5C.asm"
00011A74                            ; ---------------------------------------------------------------------------
00011A74                            ; Sprite mappings - metal girders in foreground	(SLZ)
00011A74                            ; ---------------------------------------------------------------------------
00011A74 0000                       		dc.w byte_11098-Map_obj5C
00011A76 09                         byte_11098:	dc.b 9
00011A77 800F 0000 F0               		dc.b $80, $F, 0, 0, $F0
00011A7C A00F 1000 F0               		dc.b $A0, $F, $10, 0, $F0
00011A81 C00F 0000 F0               		dc.b $C0, $F, 0, 0, $F0
00011A86 E00F 1000 F0               		dc.b $E0, $F, $10, 0, $F0
00011A8B 000F 0000 F0               		dc.b 0,	$F, 0, 0, $F0
00011A90 200F 1000 F0               		dc.b $20, $F, $10, 0, $F0
00011A95 400F 0000 F0               		dc.b $40, $F, 0, 0, $F0
00011A9A 600F 1000 F0               		dc.b $60, $F, $10, 0, $F0
00011A9F 7F0F 0000 F0               		dc.b $7F, $F, 0, 0, $F0
00011AA4                            		even
00011AA4                            		even
00011AA4                            
00011AA4                            ; ===========================================================================
00011AA4                            ; ---------------------------------------------------------------------------
00011AA4                            ; Object 1B - water surface (LZ)
00011AA4                            ; ---------------------------------------------------------------------------
00011AA4                            
00011AA4                            Obj1B:					; XREF: Obj_Index
00011AA4 7000                       		moveq	#0,d0
00011AA6 1028 0024                  		move.b	$24(a0),d0
00011AAA 323B 0000                  		move.w	Obj1B_Index(pc,d0.w),d1
00011AAE 4EFB 1000                  		jmp	Obj1B_Index(pc,d1.w)
00011AB2                            ; ===========================================================================
00011AB2 0000                       Obj1B_Index:	dc.w Obj1B_Main-Obj1B_Index
00011AB4 0000                       		dc.w Obj1B_Action-Obj1B_Index
00011AB6                            ; ===========================================================================
00011AB6                            
00011AB6                            Obj1B_Main:				; XREF: Obj1B_Index
00011AB6 5428 0024                  		addq.b	#2,$24(a0)
00011ABA 217C 0000 0000 0004        		move.l	#Map_obj1B,4(a0)
00011AC2 317C C300 0002             		move.w	#$C300,2(a0)
00011AC8 117C 0004 0001             		move.b	#4,1(a0)
00011ACE 117C 0080 0019             		move.b	#$80,$19(a0)
00011AD4 3168 0008 0030             		move.w	8(a0),$30(a0)
00011ADA                            
00011ADA                            Obj1B_Action:				; XREF: Obj1B_Index
00011ADA 3238 F700                  		move.w	($FFFFF700).w,d1
00011ADE 0241 FFE0                  		andi.w	#$FFE0,d1
00011AE2 D268 0030                  		add.w	$30(a0),d1
00011AE6 0838 0000 FE05             		btst	#0,($FFFFFE05).w
00011AEC 6700                       		beq.s	loc_11114
00011AEE 0641 0020                  		addi.w	#$20,d1
00011AF2                            
00011AF2                            loc_11114:
00011AF2 3141 0008                  		move.w	d1,8(a0)	; match	obj x-position to screen position
00011AF6 3238 F646                  		move.w	($FFFFF646).w,d1
00011AFA 3141 000C                  		move.w	d1,$C(a0)	; match	obj y-position to water	height
00011AFE 4A28 0032                  		tst.b	$32(a0)
00011B02 6600                       		bne.s	Obj1B_Animate
00011B04 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
00011B0A 6700                       		beq.s	loc_1114A	; if not, branch
00011B0C 5628 001A                  		addq.b	#3,$1A(a0)	; use different	frames
00011B10 117C 0001 0032             		move.b	#1,$32(a0)	; stop animation
00011B16 6000                       		bra.s	Obj1B_Display
00011B18                            ; ===========================================================================
00011B18                            
00011B18                            Obj1B_Animate:				; XREF: loc_11114
00011B18 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
00011B1C 6600                       		bne.s	Obj1B_Display	; if yes, branch
00011B1E 117C 0000 0032             		move.b	#0,$32(a0)	; resume animation
00011B24 5728 001A                  		subq.b	#3,$1A(a0)	; use normal frames
00011B28                            
00011B28                            loc_1114A:				; XREF: loc_11114
00011B28 5328 001E                  		subq.b	#1,$1E(a0)
00011B2C 6A00                       		bpl.s	Obj1B_Display
00011B2E 117C 0007 001E             		move.b	#7,$1E(a0)
00011B34 5228 001A                  		addq.b	#1,$1A(a0)
00011B38 0C28 0003 001A             		cmpi.b	#3,$1A(a0)
00011B3E 6500                       		bcs.s	Obj1B_Display
00011B40 117C 0000 001A             		move.b	#0,$1A(a0)
00011B46                            
00011B46                            Obj1B_Display:
00011B46 6000 C4B0                  		bra.w	DisplaySprite
00011B4A                            ; ===========================================================================
00011B4A                            ; ---------------------------------------------------------------------------
00011B4A                            ; Sprite mappings - water surface (LZ)
00011B4A                            ; ---------------------------------------------------------------------------
00011B4A                            Map_obj1B:
00011B4A                            	include "_maps\obj1B.asm"
00011B4A                            ; ---------------------------------------------------------------------------
00011B4A                            ; Sprite mappings - water surface (LZ)
00011B4A                            ; ---------------------------------------------------------------------------
00011B4A 0000 0000                  		dc.w byte_11178-Map_obj1B, byte_11188-Map_obj1B
00011B4E 0000 0000                  		dc.w byte_11198-Map_obj1B, byte_111A8-Map_obj1B
00011B52 0000 0000                  		dc.w byte_111C7-Map_obj1B, byte_111E6-Map_obj1B
00011B56 03                         byte_11178:	dc.b 3
00011B57 FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
00011B5C FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
00011B61 FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
00011B66 03                         byte_11188:	dc.b 3
00011B67 FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
00011B6C FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
00011B71 FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
00011B76 03                         byte_11198:	dc.b 3
00011B77 FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
00011B7C FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
00011B81 FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
00011B86 06                         byte_111A8:	dc.b 6
00011B87 FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
00011B8C FD0D 0000 C0               		dc.b $FD, $D, 0, 0, $C0
00011B91 FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
00011B96 FD0D 0000 00               		dc.b $FD, $D, 0, 0, 0
00011B9B FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
00011BA0 FD0D 0000 40               		dc.b $FD, $D, 0, 0, $40
00011BA5 06                         byte_111C7:	dc.b 6
00011BA6 FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
00011BAB FD0D 0008 C0               		dc.b $FD, $D, 0, 8, $C0
00011BB0 FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
00011BB5 FD0D 0008 00               		dc.b $FD, $D, 0, 8, 0
00011BBA FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
00011BBF FD0D 0008 40               		dc.b $FD, $D, 0, 8, $40
00011BC4 06                         byte_111E6:	dc.b 6
00011BC5 FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
00011BCA FD0D 0800 C0               		dc.b $FD, $D, 8, 0, $C0
00011BCF FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
00011BD4 FD0D 0800 00               		dc.b $FD, $D, 8, 0, 0
00011BD9 FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
00011BDE FD0D 0800 40               		dc.b $FD, $D, 8, 0, $40
00011BE4 00                         		even
00011BE4 00                         		even
00011BE4                            
00011BE4                            ; ===========================================================================
00011BE4                            ; ---------------------------------------------------------------------------
00011BE4                            ; Object 0B - pole that	breaks (LZ)
00011BE4                            ; ---------------------------------------------------------------------------
00011BE4                            
00011BE4                            Obj0B:					; XREF: Obj_Index
00011BE4 7000                       		moveq	#0,d0
00011BE6 1028 0024                  		move.b	$24(a0),d0
00011BEA 323B 0000                  		move.w	Obj0B_Index(pc,d0.w),d1
00011BEE 4EFB 1000                  		jmp	Obj0B_Index(pc,d1.w)
00011BF2                            ; ===========================================================================
00011BF2 0000                       Obj0B_Index:	dc.w Obj0B_Main-Obj0B_Index
00011BF4 0000                       		dc.w Obj0B_Action-Obj0B_Index
00011BF6 0000                       		dc.w Obj0B_Display-Obj0B_Index
00011BF8                            ; ===========================================================================
00011BF8                            
00011BF8                            Obj0B_Main:				; XREF: Obj0B_Index
00011BF8 5428 0024                  		addq.b	#2,$24(a0)
00011BFC 217C 0000 0000 0004        		move.l	#Map_obj0B,4(a0)
00011C04 317C 43DE 0002             		move.w	#$43DE,2(a0)
00011C0A 117C 0004 0001             		move.b	#4,1(a0)
00011C10 117C 0008 0019             		move.b	#8,$19(a0)
00011C16 117C 0004 0018             		move.b	#4,$18(a0)
00011C1C 117C 00E1 0020             		move.b	#$E1,$20(a0)
00011C22 7000                       		moveq	#0,d0
00011C24 1028 0028                  		move.b	$28(a0),d0	; get object type
00011C28 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
00011C2C 3140 0030                  		move.w	d0,$30(a0)	; set breakage time
00011C30                            
00011C30                            Obj0B_Action:				; XREF: Obj0B_Index
00011C30 4A28 0032                  		tst.b	$32(a0)
00011C34 6700                       		beq.s	Obj0B_Grab
00011C36 4A68 0030                  		tst.w	$30(a0)
00011C3A 6700                       		beq.s	Obj0B_MoveUp
00011C3C 5368 0030                  		subq.w	#1,$30(a0)
00011C40 6600                       		bne.s	Obj0B_MoveUp
00011C42 117C 0001 001A             		move.b	#1,$1A(a0)	; break	the pole
00011C48 6000                       		bra.s	Obj0B_Release
00011C4A                            ; ===========================================================================
00011C4A                            
00011C4A                            Obj0B_MoveUp:				; XREF: Obj0B_Action
00011C4A 43F8 D000                  		lea	($FFFFD000).w,a1
00011C4E 3028 000C                  		move.w	$C(a0),d0
00011C52 0440 0018                  		subi.w	#$18,d0
00011C56 0838 0000 F604             		btst	#0,($FFFFF604).w ; check if "up" is pressed
00011C5C 6700                       		beq.s	Obj0B_MoveDown
00011C5E 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
00011C62 B069 000C                  		cmp.w	$C(a1),d0
00011C66 6500                       		bcs.s	Obj0B_MoveDown
00011C68 3340 000C                  		move.w	d0,$C(a1)
00011C6C                            
00011C6C                            Obj0B_MoveDown:
00011C6C 0640 0024                  		addi.w	#$24,d0
00011C70 0838 0001 F604             		btst	#1,($FFFFF604).w ; check if "down" is pressed
00011C76 6700                       		beq.s	Obj0B_LetGo
00011C78 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
00011C7C B069 000C                  		cmp.w	$C(a1),d0
00011C80 6400                       		bcc.s	Obj0B_LetGo
00011C82 3340 000C                  		move.w	d0,$C(a1)
00011C86                            
00011C86                            Obj0B_LetGo:
00011C86 1038 F603                  		move.b	($FFFFF603).w,d0
00011C8A 0240 0070                  		andi.w	#$70,d0
00011C8E 6700                       		beq.s	Obj0B_Display
00011C90                            
00011C90                            Obj0B_Release:				; XREF: Obj0B_Action
00011C90 4228 0020                  		clr.b	$20(a0)
00011C94 5428 0024                  		addq.b	#2,$24(a0)
00011C98 4238 F7C8                  		clr.b	($FFFFF7C8).w
00011C9C 4238 F7C9                  		clr.b	($FFFFF7C9).w
00011CA0 4228 0032                  		clr.b	$32(a0)
00011CA4 6000                       		bra.s	Obj0B_Display
00011CA6                            ; ===========================================================================
00011CA6                            
00011CA6                            Obj0B_Grab:				; XREF: Obj0B_Action
00011CA6 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	pole?
00011CAA 6700                       		beq.s	Obj0B_Display	; if not, branch
00011CAC 43F8 D000                  		lea	($FFFFD000).w,a1
00011CB0 3028 0008                  		move.w	8(a0),d0
00011CB4 0640 0014                  		addi.w	#$14,d0
00011CB8 B069 0008                  		cmp.w	8(a1),d0
00011CBC 6400                       		bcc.s	Obj0B_Display
00011CBE 4228 0021                  		clr.b	$21(a0)
00011CC2 0C29 0004 0024             		cmpi.b	#4,$24(a1)
00011CC8 6400                       		bcc.s	Obj0B_Display
00011CCA 4269 0010                  		clr.w	$10(a1)		; stop Sonic moving
00011CCE 4269 0012                  		clr.w	$12(a1)		; stop Sonic moving
00011CD2 3028 0008                  		move.w	8(a0),d0
00011CD6 0640 0014                  		addi.w	#$14,d0
00011CDA 3340 0008                  		move.w	d0,8(a1)
00011CDE 08A9 0000 0022             		bclr	#0,$22(a1)
00011CE4 137C 0011 001C             		move.b	#$11,$1C(a1)	; set Sonic's animation to "hanging" ($11)
00011CEA 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
00011CF0 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
00011CF6 117C 0001 0032             		move.b	#1,$32(a0)	; begin	countdown to breakage
00011CFC                            
00011CFC                            Obj0B_Display:				; XREF: Obj0B_Index
00011CFC 6000 E3A2                  		bra.w	MarkObjGone
00011D00                            ; ===========================================================================
00011D00                            ; ---------------------------------------------------------------------------
00011D00                            ; Sprite mappings - pole that breaks (LZ)
00011D00                            ; ---------------------------------------------------------------------------
00011D00                            Map_obj0B:
00011D00                            	include "_maps\obj0B.asm"
00011D00                            ; ---------------------------------------------------------------------------
00011D00                            ; Sprite mappings - pole that breaks (LZ)
00011D00                            ; ---------------------------------------------------------------------------
00011D00 0000                       		dc.w byte_11326-Map_obj0B
00011D02 0000                       		dc.w byte_11331-Map_obj0B
00011D04 02                         byte_11326:	dc.b 2			; normal pole
00011D05 E003 0000 FC               		dc.b $E0, 3, 0,	0, $FC
00011D0A 0003 1000 FC               		dc.b 0,	3, $10,	0, $FC
00011D0F 04                         byte_11331:	dc.b 4			; broken pole
00011D10 E001 0000 FC               		dc.b $E0, 1, 0,	0, $FC
00011D15 F005 0004 FC               		dc.b $F0, 5, 0,	4, $FC
00011D1A 0005 1004 FC               		dc.b 0,	5, $10,	4, $FC
00011D1F 1001 1000 FC               		dc.b $10, 1, $10, 0, $FC
00011D24                            		even
00011D24                            		even
00011D24                            
00011D24                            ; ===========================================================================
00011D24                            ; ---------------------------------------------------------------------------
00011D24                            ; Object 0C - flapping door (LZ)
00011D24                            ; ---------------------------------------------------------------------------
00011D24                            
00011D24                            Obj0C:					; XREF: Obj_Index
00011D24 7000                       		moveq	#0,d0
00011D26 1028 0024                  		move.b	$24(a0),d0
00011D2A 323B 0000                  		move.w	Obj0C_Index(pc,d0.w),d1
00011D2E 4EFB 1000                  		jmp	Obj0C_Index(pc,d1.w)
00011D32                            ; ===========================================================================
00011D32 0000                       Obj0C_Index:	dc.w Obj0C_Main-Obj0C_Index
00011D34 0000                       		dc.w Obj0C_OpenClose-Obj0C_Index
00011D36                            ; ===========================================================================
00011D36                            
00011D36                            Obj0C_Main:				; XREF: Obj0C_Index
00011D36 5428 0024                  		addq.b	#2,$24(a0)
00011D3A 217C 0000 0000 0004        		move.l	#Map_obj0C,4(a0)
00011D42 317C 4328 0002             		move.w	#$4328,2(a0)
00011D48 0028 0004 0001             		ori.b	#4,1(a0)
00011D4E 117C 0028 0019             		move.b	#$28,$19(a0)
00011D54 7000                       		moveq	#0,d0
00011D56 1028 0028                  		move.b	$28(a0),d0	; get object type
00011D5A C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
00011D5E 3140 0032                  		move.w	d0,$32(a0)	; set flap delay time
00011D62                            
00011D62                            Obj0C_OpenClose:			; XREF: Obj0C_Index
00011D62 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00011D66 6A00                       		bpl.s	Obj0C_Solid	; if time remains, branch
00011D68 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	time delay
00011D6E 0868 0000 001C             		bchg	#0,$1C(a0)	; open/close door
00011D74 4A28 0001                  		tst.b	1(a0)
00011D78 6A00                       		bpl.s	Obj0C_Solid
00011D7A 303C 00BB                  		move.w	#$BB,d0
00011D7E 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play door sound
00011D84                            
00011D84                            Obj0C_Solid:
00011D84 43F9 0000 0000             		lea	(Ani_obj0C).l,a1
00011D8A 6100 92CA                  		bsr.w	AnimateSprite
00011D8E 4238 F7C9                  		clr.b	($FFFFF7C9).w	; enable wind tunnel
00011D92 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
00011D96 6600                       		bne.s	Obj0C_Display	; if yes, branch
00011D98 3038 D008                  		move.w	($FFFFD008).w,d0
00011D9C B068 0008                  		cmp.w	8(a0),d0	; is Sonic in front of the door?
00011DA0 6400                       		bcc.s	Obj0C_Display	; if yes, branch
00011DA2 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
00011DA8 323C 0013                  		move.w	#$13,d1
00011DAC 343C 0020                  		move.w	#$20,d2
00011DB0 3602                       		move.w	d2,d3
00011DB2 5243                       		addq.w	#1,d3
00011DB4 3828 0008                  		move.w	8(a0),d4
00011DB8 6100 E60E                  		bsr.w	SolidObject	; make the door	solid
00011DBC                            
00011DBC                            Obj0C_Display:
00011DBC 6000 E2E2                  		bra.w	MarkObjGone
00011DC0                            ; ===========================================================================
00011DC0                            Ani_obj0C:
00011DC0                            	include "_anim\obj0C.asm"
00011DC0                            ; ---------------------------------------------------------------------------
00011DC0                            ; Animation script - flapping door (LZ)
00011DC0                            ; ---------------------------------------------------------------------------
00011DC0 0000                       		dc.w byte_113E6-Ani_obj0C
00011DC2 0000                       		dc.w byte_113EC-Ani_obj0C
00011DC4 0300 0102 FE01             byte_113E6:	dc.b 3,	0, 1, 2, $FE, 1
00011DCA 0302 0100 FE01             byte_113EC:	dc.b 3,	2, 1, 0, $FE, 1
00011DD0                            		even
00011DD0                            		even
00011DD0                            
00011DD0                            ; ---------------------------------------------------------------------------
00011DD0                            ; Sprite mappings - flapping door (LZ)
00011DD0                            ; ---------------------------------------------------------------------------
00011DD0                            Map_obj0C:
00011DD0                            	include "_maps\obj0C.asm"
00011DD0                            ; ---------------------------------------------------------------------------
00011DD0                            ; Sprite mappings - flapping door (LZ)
00011DD0                            ; ---------------------------------------------------------------------------
00011DD0 0000                       		dc.w byte_113F8-Map_obj0C
00011DD2 0000                       		dc.w byte_11403-Map_obj0C
00011DD4 0000                       		dc.w byte_1140E-Map_obj0C
00011DD6 02                         byte_113F8:	dc.b 2
00011DD7 E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
00011DDC 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
00011DE1 02                         byte_11403:	dc.b 2
00011DE2 DA0F 0008 FB               		dc.b $DA, $F, 0, 8, $FB
00011DE7 060F 1008 FB               		dc.b 6,	$F, $10, 8, $FB
00011DEC 02                         byte_1140E:	dc.b 2
00011DED D80D 0018 00               		dc.b $D8, $D, 0, $18, 0
00011DF2 180D 1018 00               		dc.b $18, $D, $10, $18,	0
00011DF8 00                         		even
00011DF8 00                         		even
00011DF8                            
00011DF8                            ; ===========================================================================
00011DF8                            ; ---------------------------------------------------------------------------
00011DF8                            ; Object 71 - invisible	solid blocks
00011DF8                            ; ---------------------------------------------------------------------------
00011DF8                            
00011DF8                            Obj71:					; XREF: Obj_Index
00011DF8 7000                       		moveq	#0,d0
00011DFA 1028 0024                  		move.b	$24(a0),d0
00011DFE 323B 0000                  		move.w	Obj71_Index(pc,d0.w),d1
00011E02 4EFB 1000                  		jmp	Obj71_Index(pc,d1.w)
00011E06                            ; ===========================================================================
00011E06 0000                       Obj71_Index:	dc.w Obj71_Main-Obj71_Index
00011E08 0000                       		dc.w Obj71_Solid-Obj71_Index
00011E0A                            ; ===========================================================================
00011E0A                            
00011E0A                            Obj71_Main:				; XREF: Obj71_Index
00011E0A 5428 0024                  		addq.b	#2,$24(a0)
00011E0E 217C 0000 0000 0004        		move.l	#Map_obj71,4(a0)
00011E16 317C 8680 0002             		move.w	#$8680,2(a0)
00011E1C 0028 0004 0001             		ori.b	#4,1(a0)
00011E22 1028 0028                  		move.b	$28(a0),d0	; get object type
00011E26 1200                       		move.b	d0,d1
00011E28 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st byte
00011E2C 0640 0010                  		addi.w	#$10,d0
00011E30 E248                       		lsr.w	#1,d0
00011E32 1140 0019                  		move.b	d0,$19(a0)	; set object width
00011E36 0241 000F                  		andi.w	#$F,d1		; read only the	2nd byte
00011E3A 5241                       		addq.w	#1,d1
00011E3C E749                       		lsl.w	#3,d1
00011E3E 1141 0016                  		move.b	d1,$16(a0)	; set object height
00011E42                            
00011E42                            Obj71_Solid:				; XREF: Obj71_Index
00011E42 6100 C42E                  		bsr.w	ChkObjOnScreen
00011E46 6600                       		bne.s	Obj71_ChkDel
00011E48 7200                       		moveq	#0,d1
00011E4A 1228 0019                  		move.b	$19(a0),d1
00011E4E 0641 000B                  		addi.w	#$B,d1
00011E52 7400                       		moveq	#0,d2
00011E54 1428 0016                  		move.b	$16(a0),d2
00011E58 3602                       		move.w	d2,d3
00011E5A 5243                       		addq.w	#1,d3
00011E5C 3828 0008                  		move.w	8(a0),d4
00011E60 6100 E5A8                  		bsr.w	SolidObject71
00011E64                            
00011E64                            Obj71_ChkDel:
00011E64 3028 0008                  		move.w	8(a0),d0
00011E68 0240 FF80                  		andi.w	#$FF80,d0
00011E6C 3238 F700                  		move.w	($FFFFF700).w,d1
00011E70 0441 0080                  		subi.w	#$80,d1
00011E74 0241 FF80                  		andi.w	#$FF80,d1
00011E78 9041                       		sub.w	d1,d0
00011E7A 0C40 0280                  		cmpi.w	#$280,d0
00011E7E 6200                       		bhi.s	Obj71_Delete
00011E80 4A78 FE08                  		tst.w	($FFFFFE08).w	; are you using	debug mode?
00011E84 6700                       		beq.s	Obj71_NoDisplay	; if not, branch
00011E86 4EFA C170                  		jmp	DisplaySprite	; if yes, display the object
00011E8A                            ; ===========================================================================
00011E8A                            
00011E8A                            Obj71_NoDisplay:
00011E8A 4E75                       		rts	
00011E8C                            ; ===========================================================================
00011E8C                            
00011E8C                            Obj71_Delete:
00011E8C 4EFA C1A6                  		jmp	DeleteObject
00011E90                            ; ===========================================================================
00011E90                            ; ---------------------------------------------------------------------------
00011E90                            ; Sprite mappings - invisible solid blocks
00011E90                            ; ---------------------------------------------------------------------------
00011E90                            Map_obj71:
00011E90                            	include "_maps\obj71.asm"
00011E90                            ; ---------------------------------------------------------------------------
00011E90                            ; Sprite mappings - invisible solid blocks
00011E90                            ; ---------------------------------------------------------------------------
00011E90 0000                       		dc.w byte_114BC-Map_obj71
00011E92 0000                       		dc.w byte_114D1-Map_obj71
00011E94 0000                       		dc.w byte_114E6-Map_obj71
00011E96 04                         byte_114BC:	dc.b 4
00011E97 F005 0018 F0               		dc.b $F0, 5, 0,	$18, $F0
00011E9C F005 0018 00               		dc.b $F0, 5, 0,	$18, 0
00011EA1 0005 0018 F0               		dc.b 0,	5, 0, $18, $F0
00011EA6 0005 0018 00               		dc.b 0,	5, 0, $18, 0
00011EAB 04                         byte_114D1:	dc.b 4
00011EAC E005 0018 C0               		dc.b $E0, 5, 0,	$18, $C0
00011EB1 E005 0018 30               		dc.b $E0, 5, 0,	$18, $30
00011EB6 1005 0018 C0               		dc.b $10, 5, 0,	$18, $C0
00011EBB 1005 0018 30               		dc.b $10, 5, 0,	$18, $30
00011EC0 04                         byte_114E6:	dc.b 4
00011EC1 E005 0018 80               		dc.b $E0, 5, 0,	$18, $80
00011EC6 E005 0018 70               		dc.b $E0, 5, 0,	$18, $70
00011ECB 1005 0018 80               		dc.b $10, 5, 0,	$18, $80
00011ED0 1005 0018 70               		dc.b $10, 5, 0,	$18, $70
00011ED6 00                         		even
00011ED6 00                         		even
00011ED6                            
00011ED6                            ; ===========================================================================
00011ED6                            ; ---------------------------------------------------------------------------
00011ED6                            ; Object 5D - fans (SLZ)
00011ED6                            ; ---------------------------------------------------------------------------
00011ED6                            
00011ED6                            Obj5D:					; XREF: Obj_Index
00011ED6 7000                       		moveq	#0,d0
00011ED8 1028 0024                  		move.b	$24(a0),d0
00011EDC 323B 0000                  		move.w	Obj5D_Index(pc,d0.w),d1
00011EE0 4EFB 1000                  		jmp	Obj5D_Index(pc,d1.w)
00011EE4                            ; ===========================================================================
00011EE4 0000                       Obj5D_Index:	dc.w Obj5D_Main-Obj5D_Index
00011EE6 0000                       		dc.w Obj5D_Delay-Obj5D_Index
00011EE8                            ; ===========================================================================
00011EE8                            
00011EE8                            Obj5D_Main:				; XREF: Obj5D_Index
00011EE8 5428 0024                  		addq.b	#2,$24(a0)
00011EEC 217C 0000 0000 0004        		move.l	#Map_obj5D,4(a0)
00011EF4 317C 43A0 0002             		move.w	#$43A0,2(a0)
00011EFA 0028 0004 0001             		ori.b	#4,1(a0)
00011F00 117C 0010 0019             		move.b	#$10,$19(a0)
00011F06 117C 0004 0018             		move.b	#4,$18(a0)
00011F0C                            
00011F0C                            Obj5D_Delay:				; XREF: Obj5D_Index
00011F0C 0828 0001 0028             		btst	#1,$28(a0)	; is object type 02/03?
00011F12 6600                       		bne.s	Obj5D_Blow	; if yes, branch
00011F14 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00011F18 6A00                       		bpl.s	Obj5D_Blow	; if time remains, branch
00011F1A 317C 0078 0030             		move.w	#120,$30(a0)	; set delay to 2 seconds
00011F20 0868 0000 0032             		bchg	#0,$32(a0)	; switch fan on/off
00011F26 6700                       		beq.s	Obj5D_Blow	; if fan is off, branch
00011F28 317C 00B4 0030             		move.w	#180,$30(a0)	; set delay to 3 seconds
00011F2E                            
00011F2E                            Obj5D_Blow:
00011F2E 4A28 0032                  		tst.b	$32(a0)		; is fan switched on?
00011F32 6600 0000                  		bne.w	Obj5D_ChkDel	; if not, branch
00011F36 43F8 D000                  		lea	($FFFFD000).w,a1
00011F3A 3029 0008                  		move.w	8(a1),d0
00011F3E 9068 0008                  		sub.w	8(a0),d0
00011F42 0828 0000 0022             		btst	#0,$22(a0)
00011F48 6600                       		bne.s	Obj5D_ChkSonic
00011F4A 4440                       		neg.w	d0
00011F4C                            
00011F4C                            Obj5D_ChkSonic:
00011F4C 0640 0050                  		addi.w	#$50,d0
00011F50 0C40 00F0                  		cmpi.w	#$F0,d0		; is Sonic more	than $A0 pixels	from the fan?
00011F54 6400                       		bcc.s	Obj5D_Animate	; if yes, branch
00011F56 3229 000C                  		move.w	$C(a1),d1
00011F5A 0641 0060                  		addi.w	#$60,d1
00011F5E 9268 000C                  		sub.w	$C(a0),d1
00011F62 6500                       		bcs.s	Obj5D_Animate
00011F64 0C41 0070                  		cmpi.w	#$70,d1
00011F68 6400                       		bcc.s	Obj5D_Animate
00011F6A 0440 0050                  		subi.w	#$50,d0
00011F6E 6400                       		bcc.s	loc_1159A
00011F70 4640                       		not.w	d0
00011F72 D040                       		add.w	d0,d0
00011F74                            
00011F74                            loc_1159A:
00011F74 0640 0060                  		addi.w	#$60,d0
00011F78 0828 0000 0022             		btst	#0,$22(a0)
00011F7E 6600                       		bne.s	loc_115A8
00011F80 4440                       		neg.w	d0
00011F82                            
00011F82                            loc_115A8:
00011F82 4400                       		neg.b	d0
00011F84 E840                       		asr.w	#4,d0
00011F86 0828 0000 0028             		btst	#0,$28(a0)
00011F8C 6700                       		beq.s	Obj5D_MoveSonic
00011F8E 4440                       		neg.w	d0
00011F90                            
00011F90                            Obj5D_MoveSonic:
00011F90 D169 0008                  		add.w	d0,8(a1)	; push Sonic away from the fan
00011F94                            
00011F94                            Obj5D_Animate:				; XREF: Obj5D_ChkSonic
00011F94 5328 001E                  		subq.b	#1,$1E(a0)
00011F98 6A00                       		bpl.s	Obj5D_ChkDel
00011F9A 117C 0000 001E             		move.b	#0,$1E(a0)
00011FA0 5228 001B                  		addq.b	#1,$1B(a0)
00011FA4 0C28 0003 001B             		cmpi.b	#3,$1B(a0)
00011FAA 6500                       		bcs.s	loc_115D8
00011FAC 117C 0000 001B             		move.b	#0,$1B(a0)
00011FB2                            
00011FB2                            loc_115D8:
00011FB2 7000                       		moveq	#0,d0
00011FB4 0828 0000 0028             		btst	#0,$28(a0)
00011FBA 6700                       		beq.s	loc_115E4
00011FBC 7002                       		moveq	#2,d0
00011FBE                            
00011FBE                            loc_115E4:
00011FBE D028 001B                  		add.b	$1B(a0),d0
00011FC2 1140 001A                  		move.b	d0,$1A(a0)
00011FC6                            
00011FC6                            Obj5D_ChkDel:				; XREF: Obj5D_Animate
00011FC6 6100 C030                  		bsr.w	DisplaySprite
00011FCA 3028 0008                  		move.w	8(a0),d0
00011FCE 0240 FF80                  		andi.w	#$FF80,d0
00011FD2 3238 F700                  		move.w	($FFFFF700).w,d1
00011FD6 0441 0080                  		subi.w	#$80,d1
00011FDA 0241 FF80                  		andi.w	#$FF80,d1
00011FDE 9041                       		sub.w	d1,d0
00011FE0 0C40 0280                  		cmpi.w	#$280,d0
00011FE4 6200 C04E                  		bhi.w	DeleteObject
00011FE8 4E75                       		rts	
00011FEA                            ; ===========================================================================
00011FEA                            ; ---------------------------------------------------------------------------
00011FEA                            ; Sprite mappings - fans (SLZ)
00011FEA                            ; ---------------------------------------------------------------------------
00011FEA                            Map_obj5D:
00011FEA                            	include "_maps\obj5D.asm"
00011FEA                            ; ---------------------------------------------------------------------------
00011FEA                            ; Sprite mappings - fans (SLZ)
00011FEA                            ; ---------------------------------------------------------------------------
00011FEA 0000 0000                  		dc.w byte_1161A-Map_obj5D, byte_11625-Map_obj5D
00011FEE 0000 0000                  		dc.w byte_11630-Map_obj5D, byte_11625-Map_obj5D
00011FF2 0000                       		dc.w byte_1161A-Map_obj5D
00011FF4 02                         byte_1161A:	dc.b 2
00011FF5 F009 0000 F8               		dc.b $F0, 9, 0,	0, $F8
00011FFA 000D 0006 F0               		dc.b 0,	$D, 0, 6, $F0
00011FFF 02                         byte_11625:	dc.b 2
00012000 F00D 000E F0               		dc.b $F0, $D, 0, $E, $F0
00012005 000D 0016 F0               		dc.b 0,	$D, 0, $16, $F0
0001200A 02                         byte_11630:	dc.b 2
0001200B F00D 001E F0               		dc.b $F0, $D, 0, $1E, $F0
00012010 0009 0026 F8               		dc.b 0,	9, 0, $26, $F8
00012016 00                         		even
00012016 00                         		even
00012016                            
00012016                            ; ===========================================================================
00012016                            ; ---------------------------------------------------------------------------
00012016                            ; Object 5E - seesaws (SLZ)
00012016                            ; ---------------------------------------------------------------------------
00012016                            
00012016                            Obj5E:					; XREF: Obj_Index
00012016 7000                       		moveq	#0,d0
00012018 1028 0024                  		move.b	$24(a0),d0
0001201C 323B 0000                  		move.w	Obj5E_Index(pc,d0.w),d1
00012020 4EBB 1000                  		jsr	Obj5E_Index(pc,d1.w)
00012024 3028 0030                  		move.w	$30(a0),d0
00012028 0240 FF80                  		andi.w	#$FF80,d0
0001202C 3238 F700                  		move.w	($FFFFF700).w,d1
00012030 0441 0080                  		subi.w	#$80,d1
00012034 0241 FF80                  		andi.w	#$FF80,d1
00012038 9041                       		sub.w	d1,d0
0001203A 6B00 BFF8                  		bmi.w	DeleteObject
0001203E 0C40 0280                  		cmpi.w	#$280,d0
00012042 6200 BFF0                  		bhi.w	DeleteObject
00012046 6000 BFB0                  		bra.w	DisplaySprite
0001204A                            ; ===========================================================================
0001204A 0000                       Obj5E_Index:	dc.w Obj5E_Main-Obj5E_Index
0001204C 0000                       		dc.w Obj5E_Slope-Obj5E_Index
0001204E 0000                       		dc.w Obj5E_Slope2-Obj5E_Index
00012050 0000                       		dc.w Obj5E_Spikeball-Obj5E_Index
00012052 0000                       		dc.w Obj5E_MoveSpike-Obj5E_Index
00012054 0000                       		dc.w Obj5E_SpikeFall-Obj5E_Index
00012056                            ; ===========================================================================
00012056                            
00012056                            Obj5E_Main:				; XREF: Obj5E_Index
00012056 5428 0024                  		addq.b	#2,$24(a0)
0001205A 217C 0000 0000 0004        		move.l	#Map_obj5E,4(a0)
00012062 317C 0374 0002             		move.w	#$374,2(a0)
00012068 0028 0004 0001             		ori.b	#4,1(a0)
0001206E 117C 0004 0018             		move.b	#4,$18(a0)
00012074 117C 0030 0019             		move.b	#$30,$19(a0)
0001207A 3168 0008 0030             		move.w	8(a0),$30(a0)
00012080 4A28 0028                  		tst.b	$28(a0)		; is object type 00 ?
00012084 6600                       		bne.s	loc_116D2	; if not, branch
00012086 6100 C40C                  		bsr.w	SingleObjLoad2
0001208A 6600                       		bne.s	loc_116D2
0001208C 12BC 005E                  		move.b	#$5E,0(a1)	; load spikeball object
00012090 5C29 0024                  		addq.b	#6,$24(a1)
00012094 3368 0008 0008             		move.w	8(a0),8(a1)
0001209A 3368 000C 000C             		move.w	$C(a0),$C(a1)
000120A0 1368 0022 0022             		move.b	$22(a0),$22(a1)
000120A6 2348 003C                  		move.l	a0,$3C(a1)
000120AA                            
000120AA                            loc_116D2:
000120AA 0828 0000 0022             		btst	#0,$22(a0)
000120B0 6700                       		beq.s	loc_116E0
000120B2 117C 0002 001A             		move.b	#2,$1A(a0)
000120B8                            
000120B8                            loc_116E0:
000120B8 1168 001A 003A             		move.b	$1A(a0),$3A(a0)
000120BE                            
000120BE                            Obj5E_Slope:				; XREF: Obj5E_Index
000120BE 1228 003A                  		move.b	$3A(a0),d1
000120C2 6100 0000                  		bsr.w	loc_11766
000120C6 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
000120CC 0828 0000 001A             		btst	#0,$1A(a0)
000120D2 6700                       		beq.s	loc_11702
000120D4 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
000120DA                            
000120DA                            loc_11702:
000120DA 43F8 D000                  		lea	($FFFFD000).w,a1
000120DE 3169 0012 0038             		move.w	$12(a1),$38(a0)
000120E4 323C 0030                  		move.w	#$30,d1
000120E8 4EB9 0000 7CE6             		jsr	(SlopeObject).l
000120EE 4E75                       		rts	
000120F0                            ; ===========================================================================
000120F0                            
000120F0                            Obj5E_Slope2:				; XREF: Obj5E_Index
000120F0 6100 0000                  		bsr.w	loc_1174A
000120F4 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
000120FA 0828 0000 001A             		btst	#0,$1A(a0)
00012100 6700                       		beq.s	loc_11730
00012102 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
00012108                            
00012108                            loc_11730:
00012108 323C 0030                  		move.w	#$30,d1
0001210C 4EB9 0000 7D86             		jsr	(ExitPlatform).l
00012112 323C 0030                  		move.w	#$30,d1
00012116 3428 0008                  		move.w	8(a0),d2
0001211A 4EB9 0000 8D76             		jsr	SlopeObject2
00012120 4E75                       		rts	
00012122                            ; ===========================================================================
00012122                            
00012122                            loc_1174A:				; XREF: Obj5E_Slope2
00012122 7202                       		moveq	#2,d1
00012124 43F8 D000                  		lea	($FFFFD000).w,a1
00012128 3028 0008                  		move.w	8(a0),d0
0001212C 9069 0008                  		sub.w	8(a1),d0
00012130 6400                       		bcc.s	loc_1175E
00012132 4440                       		neg.w	d0
00012134 7200                       		moveq	#0,d1
00012136                            
00012136                            loc_1175E:
00012136 0C40 0008                  		cmpi.w	#8,d0
0001213A 6400                       		bcc.s	loc_11766
0001213C 7201                       		moveq	#1,d1
0001213E                            
0001213E                            loc_11766:
0001213E 1028 001A                  		move.b	$1A(a0),d0
00012142 B001                       		cmp.b	d1,d0
00012144 6700                       		beq.s	locret_11790
00012146 6400                       		bcc.s	loc_11772
00012148 5400                       		addq.b	#2,d0
0001214A                            
0001214A                            loc_11772:
0001214A 5300                       		subq.b	#1,d0
0001214C 1140 001A                  		move.b	d0,$1A(a0)
00012150 1141 003A                  		move.b	d1,$3A(a0)
00012154 08A8 0000 0001             		bclr	#0,1(a0)
0001215A 0828 0001 001A             		btst	#1,$1A(a0)
00012160 6700                       		beq.s	locret_11790
00012162 08E8 0000 0001             		bset	#0,1(a0)
00012168                            
00012168                            locret_11790:
00012168 4E75                       		rts	
0001216A                            ; ===========================================================================
0001216A                            
0001216A                            Obj5E_Spikeball:			; XREF: Obj5E_Index
0001216A 5428 0024                  		addq.b	#2,$24(a0)
0001216E 217C 0000 0000 0004        		move.l	#Map_obj5Ea,4(a0)
00012176 317C 04F0 0002             		move.w	#$4F0,2(a0)
0001217C 0028 0004 0001             		ori.b	#4,1(a0)
00012182 117C 0004 0018             		move.b	#4,$18(a0)
00012188 117C 008B 0020             		move.b	#$8B,$20(a0)
0001218E 117C 000C 0019             		move.b	#$C,$19(a0)
00012194 3168 0008 0030             		move.w	8(a0),$30(a0)
0001219A 0668 0028 0008             		addi.w	#$28,8(a0)
000121A0 3168 000C 0034             		move.w	$C(a0),$34(a0)
000121A6 117C 0001 001A             		move.b	#1,$1A(a0)
000121AC 0828 0000 0022             		btst	#0,$22(a0)
000121B2 6700                       		beq.s	Obj5E_MoveSpike
000121B4 0468 0050 0008             		subi.w	#$50,8(a0)
000121BA 117C 0002 003A             		move.b	#2,$3A(a0)
000121C0                            
000121C0                            Obj5E_MoveSpike:			; XREF: Obj5E_Index
000121C0 2268 003C                  		movea.l	$3C(a0),a1
000121C4 7000                       		moveq	#0,d0
000121C6 1028 003A                  		move.b	$3A(a0),d0
000121CA 9029 003A                  		sub.b	$3A(a1),d0
000121CE 6700                       		beq.s	loc_1183E
000121D0 6400                       		bcc.s	loc_117FC
000121D2 4400                       		neg.b	d0
000121D4                            
000121D4                            loc_117FC:
000121D4 323C F7E8                  		move.w	#-$818,d1
000121D8 343C FEEC                  		move.w	#-$114,d2
000121DC 0C00 0001                  		cmpi.b	#1,d0
000121E0 6700                       		beq.s	loc_11822
000121E2 323C F510                  		move.w	#-$AF0,d1
000121E6 343C FF34                  		move.w	#-$CC,d2
000121EA 0C69 0A00 0038             		cmpi.w	#$A00,$38(a1)
000121F0 6D00                       		blt.s	loc_11822
000121F2 323C F200                  		move.w	#-$E00,d1
000121F6 343C FF60                  		move.w	#-$A0,d2
000121FA                            
000121FA                            loc_11822:
000121FA 3141 0012                  		move.w	d1,$12(a0)
000121FE 3142 0010                  		move.w	d2,$10(a0)
00012202 3028 0008                  		move.w	8(a0),d0
00012206 9068 0030                  		sub.w	$30(a0),d0
0001220A 6400                       		bcc.s	loc_11838
0001220C 4468 0010                  		neg.w	$10(a0)
00012210                            
00012210                            loc_11838:
00012210 5428 0024                  		addq.b	#2,$24(a0)
00012214 6000                       		bra.s	Obj5E_SpikeFall
00012216                            ; ===========================================================================
00012216                            
00012216                            loc_1183E:				; XREF: Obj5E_MoveSpike
00012216 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
0001221C 7000                       		moveq	#0,d0
0001221E 1029 001A                  		move.b	$1A(a1),d0
00012222 343C 0028                  		move.w	#$28,d2
00012226 3228 0008                  		move.w	8(a0),d1
0001222A 9268 0030                  		sub.w	$30(a0),d1
0001222E 6400                       		bcc.s	loc_1185C
00012230 4442                       		neg.w	d2
00012232 5440                       		addq.w	#2,d0
00012234                            
00012234                            loc_1185C:
00012234 D040                       		add.w	d0,d0
00012236 3228 0034                  		move.w	$34(a0),d1
0001223A D272 0000                  		add.w	(a2,d0.w),d1
0001223E 3141 000C                  		move.w	d1,$C(a0)
00012242 D468 0030                  		add.w	$30(a0),d2
00012246 3142 0008                  		move.w	d2,8(a0)
0001224A 4268 000E                  		clr.w	$E(a0)
0001224E 4268 000A                  		clr.w	$A(a0)
00012252 4E75                       		rts	
00012254                            ; ===========================================================================
00012254                            
00012254                            Obj5E_SpikeFall:			; XREF: Obj5E_Index
00012254 4A68 0012                  		tst.w	$12(a0)
00012258 6A00                       		bpl.s	loc_1189A
0001225A 6100 BD04                  		bsr.w	ObjectFall
0001225E 3028 0034                  		move.w	$34(a0),d0
00012262 0440 002F                  		subi.w	#$2F,d0
00012266 B068 000C                  		cmp.w	$C(a0),d0
0001226A 6E00                       		bgt.s	locret_11898
0001226C 6100 BCF2                  		bsr.w	ObjectFall
00012270                            
00012270                            locret_11898:
00012270 4E75                       		rts	
00012272                            ; ===========================================================================
00012272                            
00012272                            loc_1189A:				; XREF: Obj5E_SpikeFall
00012272 6100 BCEC                  		bsr.w	ObjectFall
00012276 2268 003C                  		movea.l	$3C(a0),a1
0001227A 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
00012280 7000                       		moveq	#0,d0
00012282 1029 001A                  		move.b	$1A(a1),d0
00012286 3228 0008                  		move.w	8(a0),d1
0001228A 9268 0030                  		sub.w	$30(a0),d1
0001228E 6400                       		bcc.s	loc_118BA
00012290 5440                       		addq.w	#2,d0
00012292                            
00012292                            loc_118BA:
00012292 D040                       		add.w	d0,d0
00012294 3228 0034                  		move.w	$34(a0),d1
00012298 D272 0000                  		add.w	(a2,d0.w),d1
0001229C B268 000C                  		cmp.w	$C(a0),d1
000122A0 6E00                       		bgt.s	locret_11938
000122A2 2268 003C                  		movea.l	$3C(a0),a1
000122A6 7202                       		moveq	#2,d1
000122A8 4A68 0010                  		tst.w	$10(a0)
000122AC 6B00                       		bmi.s	Obj5E_Spring
000122AE 7200                       		moveq	#0,d1
000122B0                            
000122B0                            Obj5E_Spring:
000122B0 1341 003A                  		move.b	d1,$3A(a1)
000122B4 1141 003A                  		move.b	d1,$3A(a0)
000122B8 B229 001A                  		cmp.b	$1A(a1),d1
000122BC 6700                       		beq.s	loc_1192C
000122BE 08A9 0003 0022             		bclr	#3,$22(a1)
000122C4 6700                       		beq.s	loc_1192C
000122C6 4229 0025                  		clr.b	$25(a1)
000122CA 137C 0002 0024             		move.b	#2,$24(a1)
000122D0 45F8 D000                  		lea	($FFFFD000).w,a2
000122D4 3568 0012 0012             		move.w	$12(a0),$12(a2)
000122DA 446A 0012                  		neg.w	$12(a2)
000122DE 08EA 0001 0022             		bset	#1,$22(a2)
000122E4 08AA 0003 0022             		bclr	#3,$22(a2)
000122EA 422A 003C                  		clr.b	$3C(a2)
000122EE 157C 0010 001C             		move.b	#$10,$1C(a2)	; change Sonic's animation to "spring" ($10)
000122F4 157C 0002 0024             		move.b	#2,$24(a2)
000122FA 303C 00CC                  		move.w	#$CC,d0
000122FE 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play spring sound
00012304                            
00012304                            loc_1192C:
00012304 4268 0010                  		clr.w	$10(a0)
00012308 4268 0012                  		clr.w	$12(a0)
0001230C 5528 0024                  		subq.b	#2,$24(a0)
00012310                            
00012310                            locret_11938:
00012310 4E75                       		rts	
00012312                            ; ===========================================================================
00012312 FFF8 FFE4 FFD1 FFE4 FFF8   Obj5E_Speeds:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
0001231C                            
0001231C                            Obj5E_Data1:	incbin	misc\slzssaw1.bin
0001234C                            		even
0001234C                            Obj5E_Data2:	incbin	misc\slzssaw2.bin
0001237C                            		even
0001237C                            ; ---------------------------------------------------------------------------
0001237C                            ; Sprite mappings - seesaws (SLZ)
0001237C                            ; ---------------------------------------------------------------------------
0001237C                            Map_obj5E:
0001237C                            	include "_maps\obj5E.asm"
0001237C                            ; ---------------------------------------------------------------------------
0001237C                            ; Sprite mappings - seesaws (SLZ)
0001237C                            ; ---------------------------------------------------------------------------
0001237C 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
00012380 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
00012384 07                         byte_119AC:	dc.b 7
00012385 D406 0000 D3               		dc.b $D4, 6, 0,	0, $D3
0001238A DC06 0006 E3               		dc.b $DC, 6, 0,	6, $E3
0001238F E404 000C F3               		dc.b $E4, 4, 0,	$C, $F3
00012394 EC0D 000E F3               		dc.b $EC, $D, 0, $E, $F3
00012399 FC08 0016 FB               		dc.b $FC, 8, 0,	$16, $FB
0001239E F406 0006 13               		dc.b $F4, 6, 0,	6, $13
000123A3 FC05 0019 23               		dc.b $FC, 5, 0,	$19, $23
000123A8 04                         byte_119D0:	dc.b 4
000123A9 E60A 001D D0               		dc.b $E6, $A, 0, $1D, $D0
000123AE E60A 0023 E8               		dc.b $E6, $A, 0, $23, $E8
000123B3 E60A 0823 00               		dc.b $E6, $A, 8, $23, 0
000123B8 E60A 081D 18               		dc.b $E6, $A, 8, $1D, $18
000123BE 00                         		even
000123BE 00                         		even
000123BE                            
000123BE                            ; ---------------------------------------------------------------------------
000123BE                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
000123BE                            ; ---------------------------------------------------------------------------
000123BE                            Map_obj5Ea:
000123BE                            	include "_maps\obj5Eballs.asm"
000123BE                            ; ---------------------------------------------------------------------------
000123BE                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
000123BE                            ; ---------------------------------------------------------------------------
000123BE 0000                       		dc.w byte_119EA-Map_obj5Ea
000123C0 0000                       		dc.w byte_119F0-Map_obj5Ea
000123C2 01                         byte_119EA:	dc.b 1
000123C3 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
000123C8 01                         byte_119F0:	dc.b 1
000123C9 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
000123CE                            		even
000123CE                            		even
000123CE                            
000123CE                            ; ===========================================================================
000123CE                            ; ---------------------------------------------------------------------------
000123CE                            ; Object 5F - walking bomb enemy (SLZ, SBZ)
000123CE                            ; ---------------------------------------------------------------------------
000123CE                            
000123CE                            Obj5F:					; XREF: Obj_Index
000123CE 7000                       		moveq	#0,d0
000123D0 1028 0024                  		move.b	$24(a0),d0
000123D4 323B 0000                  		move.w	Obj5F_Index(pc,d0.w),d1
000123D8 4EFB 1000                  		jmp	Obj5F_Index(pc,d1.w)
000123DC                            ; ===========================================================================
000123DC 0000                       Obj5F_Index:	dc.w Obj5F_Main-Obj5F_Index
000123DE 0000                       		dc.w Obj5F_Action-Obj5F_Index
000123E0 0000                       		dc.w Obj5F_Display-Obj5F_Index
000123E2 0000                       		dc.w Obj5F_End-Obj5F_Index
000123E4                            ; ===========================================================================
000123E4                            
000123E4                            Obj5F_Main:				; XREF: Obj5F_Index
000123E4 5428 0024                  		addq.b	#2,$24(a0)
000123E8 217C 0000 0000 0004        		move.l	#Map_obj5F,4(a0)
000123F0 317C 0400 0002             		move.w	#$400,2(a0)
000123F6 0028 0004 0001             		ori.b	#4,1(a0)
000123FC 117C 0003 0018             		move.b	#3,$18(a0)
00012402 117C 000C 0019             		move.b	#$C,$19(a0)
00012408 1028 0028                  		move.b	$28(a0),d0
0001240C 6700                       		beq.s	loc_11A3C
0001240E 1140 0024                  		move.b	d0,$24(a0)
00012412 4E75                       		rts	
00012414                            ; ===========================================================================
00012414                            
00012414                            loc_11A3C:
00012414 117C 009A 0020             		move.b	#$9A,$20(a0)
0001241A 0868 0000 0022             		bchg	#0,$22(a0)
00012420                            
00012420                            Obj5F_Action:				; XREF: Obj5F_Index
00012420 7000                       		moveq	#0,d0
00012422 1028 0025                  		move.b	$25(a0),d0
00012426 323B 0000                  		move.w	Obj5F_Index2(pc,d0.w),d1
0001242A 4EBB 1000                  		jsr	Obj5F_Index2(pc,d1.w)
0001242E 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
00012434 6100 8C20                  		bsr.w	AnimateSprite
00012438 6000 DC66                  		bra.w	MarkObjGone
0001243C                            ; ===========================================================================
0001243C 0000                       Obj5F_Index2:	dc.w Obj5F_Walk-Obj5F_Index2
0001243E 0000                       		dc.w Obj5F_Wait-Obj5F_Index2
00012440 0000                       		dc.w Obj5F_Explode-Obj5F_Index2
00012442                            ; ===========================================================================
00012442                            
00012442                            Obj5F_Walk:				; XREF: Obj5F_Index2
00012442 6100 0000                  		bsr.w	Obj5F_ChkSonic
00012446 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
0001244A 6A00                       		bpl.s	locret_11A96	; if time remains, branch
0001244C 5428 0025                  		addq.b	#2,$25(a0)
00012450 317C 05FF 0030             		move.w	#1535,$30(a0)	; set time delay to 25 seconds
00012456 317C 0010 0010             		move.w	#$10,$10(a0)
0001245C 117C 0001 001C             		move.b	#1,$1C(a0)
00012462 0868 0000 0022             		bchg	#0,$22(a0)
00012468 6700                       		beq.s	locret_11A96
0001246A 4468 0010                  		neg.w	$10(a0)		; change direction
0001246E                            
0001246E                            locret_11A96:
0001246E 4E75                       		rts	
00012470                            ; ===========================================================================
00012470                            
00012470                            Obj5F_Wait:				; XREF: Obj5F_Index2
00012470 6100 0000                  		bsr.w	Obj5F_ChkSonic
00012474 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00012478 6B00                       		bmi.s	loc_11AA8
0001247A 6100 BB56                  		bsr.w	SpeedToPos
0001247E 4E75                       		rts	
00012480                            ; ===========================================================================
00012480                            
00012480                            loc_11AA8:
00012480 5528 0025                  		subq.b	#2,$25(a0)
00012484 317C 00B3 0030             		move.w	#179,$30(a0)	; set time delay to 3 seconds
0001248A 4268 0010                  		clr.w	$10(a0)		; stop walking
0001248E 117C 0000 001C             		move.b	#0,$1C(a0)	; stop animation
00012494 4E75                       		rts	
00012496                            ; ===========================================================================
00012496                            
00012496                            Obj5F_Explode:				; XREF: Obj5F_Index2
00012496 5368 0030                  		subq.w	#1,$30(a0)
0001249A 6A00                       		bpl.s	locret_11AD0
0001249C 10BC 003F                  		move.b	#$3F,0(a0)	; change bomb into an explosion
000124A0 117C 0000 0024             		move.b	#0,$24(a0)
000124A6                            
000124A6                            locret_11AD0:
000124A6 4E75                       		rts	
000124A8                            ; ===========================================================================
000124A8                            
000124A8                            Obj5F_ChkSonic:				; XREF: Obj5F_Walk; Obj5F_Wait
000124A8 3038 D008                  		move.w	($FFFFD008).w,d0
000124AC 9068 0008                  		sub.w	8(a0),d0
000124B0 6400                       		bcc.s	loc_11ADE
000124B2 4440                       		neg.w	d0
000124B4                            
000124B4                            loc_11ADE:
000124B4 0C40 0060                  		cmpi.w	#$60,d0
000124B8 6400                       		bcc.s	locret_11B5E
000124BA 3038 D00C                  		move.w	($FFFFD00C).w,d0
000124BE 9068 000C                  		sub.w	$C(a0),d0
000124C2 6400                       		bcc.s	Obj5F_MakeFuse
000124C4 4440                       		neg.w	d0
000124C6                            
000124C6                            Obj5F_MakeFuse:
000124C6 0C40 0060                  		cmpi.w	#$60,d0
000124CA 6400                       		bcc.s	locret_11B5E
000124CC 4A78 FE08                  		tst.w	($FFFFFE08).w
000124D0 6600                       		bne.s	locret_11B5E
000124D2 117C 0004 0025             		move.b	#4,$25(a0)
000124D8 317C 008F 0030             		move.w	#143,$30(a0)	; set fuse time
000124DE 4268 0010                  		clr.w	$10(a0)
000124E2 117C 0002 001C             		move.b	#2,$1C(a0)
000124E8 6100 BFAA                  		bsr.w	SingleObjLoad2
000124EC 6600                       		bne.s	locret_11B5E
000124EE 12BC 005F                  		move.b	#$5F,0(a1)	; load fuse object
000124F2 3368 0008 0008             		move.w	8(a0),8(a1)
000124F8 3368 000C 000C             		move.w	$C(a0),$C(a1)
000124FE 3368 000C 0034             		move.w	$C(a0),$34(a1)
00012504 1368 0022 0022             		move.b	$22(a0),$22(a1)
0001250A 137C 0004 0028             		move.b	#4,$28(a1)
00012510 137C 0003 001C             		move.b	#3,$1C(a1)
00012516 337C 0010 0012             		move.w	#$10,$12(a1)
0001251C 0828 0001 0022             		btst	#1,$22(a0)
00012522 6700                       		beq.s	loc_11B54
00012524 4469 0012                  		neg.w	$12(a1)
00012528                            
00012528                            loc_11B54:
00012528 337C 008F 0030             		move.w	#143,$30(a1)	; set fuse time
0001252E 2348 003C                  		move.l	a0,$3C(a1)
00012532                            
00012532                            locret_11B5E:
00012532 4E75                       		rts	
00012534                            ; ===========================================================================
00012534                            
00012534                            Obj5F_Display:				; XREF: Obj5F_Index
00012534 6100                       		bsr.s	loc_11B70
00012536 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
0001253C 6100 8B18                  		bsr.w	AnimateSprite
00012540 6000 DB5E                  		bra.w	MarkObjGone
00012544                            ; ===========================================================================
00012544                            
00012544                            loc_11B70:
00012544 5368 0030                  		subq.w	#1,$30(a0)
00012548 6B00                       		bmi.s	loc_11B7C
0001254A 6100 BA86                  		bsr.w	SpeedToPos
0001254E 4E75                       		rts	
00012550                            ; ===========================================================================
00012550                            
00012550                            loc_11B7C:
00012550 4268 0030                  		clr.w	$30(a0)
00012554 4228 0024                  		clr.b	$24(a0)
00012558 3168 0034 000C             		move.w	$34(a0),$C(a0)
0001255E 7203                       		moveq	#3,d1
00012560 2248                       		movea.l	a0,a1
00012562 45F9 0000 0000             		lea	(Obj5F_ShrSpeed).l,a2 ;	load shrapnel speed data
00012568 6000                       		bra.s	Obj5F_MakeShrap
0001256A                            ; ===========================================================================
0001256A                            
0001256A                            Obj5F_Loop:
0001256A 6100 BF28                  		bsr.w	SingleObjLoad2
0001256E 6600                       		bne.s	loc_11BCE
00012570                            
00012570                            Obj5F_MakeShrap:			; XREF: loc_11B7C
00012570 12BC 005F                  		move.b	#$5F,0(a1)	; load shrapnel	object
00012574 3368 0008 0008             		move.w	8(a0),8(a1)
0001257A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012580 137C 0006 0028             		move.b	#6,$28(a1)
00012586 137C 0004 001C             		move.b	#4,$1C(a1)
0001258C 335A 0010                  		move.w	(a2)+,$10(a1)
00012590 335A 0012                  		move.w	(a2)+,$12(a1)
00012594 137C 0098 0020             		move.b	#$98,$20(a1)
0001259A 08E9 0007 0001             		bset	#7,1(a1)
000125A0                            
000125A0                            loc_11BCE:
000125A0 51C9 FFC8                  		dbf	d1,Obj5F_Loop	; repeat 3 more	times
000125A4                            
000125A4 117C 0006 0024             		move.b	#6,$24(a0)
000125AA                            
000125AA                            Obj5F_End:				; XREF: Obj5F_Index
000125AA 6100 BA26                  		bsr.w	SpeedToPos
000125AE 0668 0018 0012             		addi.w	#$18,$12(a0)
000125B4 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
000125BA 6100 8A9A                  		bsr.w	AnimateSprite
000125BE 4A28 0001                  		tst.b	1(a0)
000125C2 6A00 BA70                  		bpl.w	DeleteObject
000125C6 6000 BA30                  		bra.w	DisplaySprite
000125CA                            ; ===========================================================================
000125CA FE00 FD00 FF00 FE00 0200+  Obj5F_ShrSpeed:	dc.w $FE00, $FD00, $FF00, $FE00, $200, $FD00, $100, $FE00
000125DA                            
000125DA                            Ani_obj5F:
000125DA                            	include "_anim\obj5F.asm"
000125DA                            ; ---------------------------------------------------------------------------
000125DA                            ; Animation script - Bomb enemy
000125DA                            ; ---------------------------------------------------------------------------
000125DA 0000                       		dc.w byte_11C12-Ani_obj5F
000125DC 0000                       		dc.w byte_11C16-Ani_obj5F
000125DE 0000                       		dc.w byte_11C1C-Ani_obj5F
000125E0 0000                       		dc.w byte_11C20-Ani_obj5F
000125E2 0000                       		dc.w byte_11C24-Ani_obj5F
000125E4 1301 00FF                  byte_11C12:	dc.b $13, 1, 0,	$FF
000125E8 1305 0403 02FF             byte_11C16:	dc.b $13, 5, 4,	3, 2, $FF
000125EE 1307 06FF                  byte_11C1C:	dc.b $13, 7, 6,	$FF
000125F2 0308 09FF                  byte_11C20:	dc.b 3,	8, 9, $FF
000125F6 030A 0BFF                  byte_11C24:	dc.b 3,	$A, $B,	$FF
000125FA                            		even
000125FA                            		even
000125FA                            
000125FA                            ; ---------------------------------------------------------------------------
000125FA                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
000125FA                            ; ---------------------------------------------------------------------------
000125FA                            Map_obj5F:
000125FA                            	include "_maps\obj5F.asm"
000125FA                            ; ---------------------------------------------------------------------------
000125FA                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
000125FA                            ; ---------------------------------------------------------------------------
000125FA 0000 0000                  		dc.w byte_11C40-Map_obj5F, byte_11C50-Map_obj5F
000125FE 0000 0000                  		dc.w byte_11C60-Map_obj5F, byte_11C70-Map_obj5F
00012602 0000 0000                  		dc.w byte_11C80-Map_obj5F, byte_11C90-Map_obj5F
00012606 0000 0000                  		dc.w byte_11CA0-Map_obj5F, byte_11CAB-Map_obj5F
0001260A 0000 0000                  		dc.w byte_11CB6-Map_obj5F, byte_11CBC-Map_obj5F
0001260E 0000 0000                  		dc.w byte_11CC2-Map_obj5F, byte_11CC8-Map_obj5F
00012612 03                         byte_11C40:	dc.b 3
00012613 F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
00012618 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
0001261D E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00012622 03                         byte_11C50:	dc.b 3
00012623 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00012628 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
0001262D E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00012632 03                         byte_11C60:	dc.b 3
00012633 F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
00012638 0808 0015 F4               		dc.b 8,	8, 0, $15, $F4
0001263D E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
00012642 03                         byte_11C70:	dc.b 3
00012643 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00012648 0908 0018 F4               		dc.b 9,	8, 0, $18, $F4
0001264D E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00012652 03                         byte_11C80:	dc.b 3
00012653 F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
00012658 0808 001B F4               		dc.b 8,	8, 0, $1B, $F4
0001265D E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
00012662 03                         byte_11C90:	dc.b 3
00012663 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00012668 0908 001E F4               		dc.b 9,	8, 0, $1E, $F4
0001266D E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00012672 02                         byte_11CA0:	dc.b 2
00012673 F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
00012678 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
0001267D 02                         byte_11CAB:	dc.b 2
0001267E F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00012683 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00012688 01                         byte_11CB6:	dc.b 1			; fuse	(just before it	explodes)
00012689 E701 0023 FC               		dc.b $E7, 1, 0,	$23, $FC
0001268E 01                         byte_11CBC:	dc.b 1			; fuse
0001268F E701 0025 FC               		dc.b $E7, 1, 0,	$25, $FC
00012694 01                         byte_11CC2:	dc.b 1			; fireball (after it exploded)
00012695 FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
0001269A 01                         byte_11CC8:	dc.b 1			; fireball
0001269B FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
000126A0                            		even
000126A0                            		even
000126A0                            
000126A0                            ; ===========================================================================
000126A0                            ; ---------------------------------------------------------------------------
000126A0                            ; Object 60 - Orbinaut enemy (LZ, SLZ, SBZ)
000126A0                            ; ---------------------------------------------------------------------------
000126A0                            
000126A0                            Obj60:					; XREF: Obj_Index
000126A0 7000                       		moveq	#0,d0
000126A2 1028 0024                  		move.b	$24(a0),d0
000126A6 323B 0000                  		move.w	Obj60_Index(pc,d0.w),d1
000126AA 4EFB 1000                  		jmp	Obj60_Index(pc,d1.w)
000126AE                            ; ===========================================================================
000126AE 0000                       Obj60_Index:	dc.w Obj60_Main-Obj60_Index
000126B0 0000                       		dc.w Obj60_ChkSonic-Obj60_Index
000126B2 0000                       		dc.w Obj60_Display-Obj60_Index
000126B4 0000                       		dc.w Obj60_MoveOrb-Obj60_Index
000126B6 0000                       		dc.w Obj60_ChkDel2-Obj60_Index
000126B8                            ; ===========================================================================
000126B8                            
000126B8                            Obj60_Main:				; XREF: Obj60_Index
000126B8 217C 0000 0000 0004        		move.l	#Map_obj60,4(a0)
000126C0 317C 0429 0002             		move.w	#$429,2(a0)	; SBZ specific code
000126C6 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
000126CC 6700                       		beq.s	loc_11D02
000126CE 317C 2429 0002             		move.w	#$2429,2(a0)	; SLZ specific code
000126D4                            
000126D4                            loc_11D02:
000126D4 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
000126DA 6600                       		bne.s	loc_11D10
000126DC 317C 0467 0002             		move.w	#$467,2(a0)	; LZ specific code
000126E2                            
000126E2                            loc_11D10:
000126E2 0028 0004 0001             		ori.b	#4,1(a0)
000126E8 117C 0004 0018             		move.b	#4,$18(a0)
000126EE 117C 000B 0020             		move.b	#$B,$20(a0)
000126F4 117C 000C 0019             		move.b	#$C,$19(a0)
000126FA 7400                       		moveq	#0,d2
000126FC 45E8 0037                  		lea	$37(a0),a2
00012700 264A                       		movea.l	a2,a3
00012702 524A                       		addq.w	#1,a2
00012704 7203                       		moveq	#3,d1
00012706                            
00012706                            Obj60_MakeOrbs:
00012706 6100 BD8C                  		bsr.w	SingleObjLoad2
0001270A 6600                       		bne.s	loc_11D90
0001270C 5213                       		addq.b	#1,(a3)
0001270E 3A09                       		move.w	a1,d5
00012710 0445 D000                  		subi.w	#-$3000,d5
00012714 EC4D                       		lsr.w	#6,d5
00012716 0245 007F                  		andi.w	#$7F,d5
0001271A 14C5                       		move.b	d5,(a2)+
0001271C 1290                       		move.b	0(a0),0(a1)	; load spiked orb object
0001271E 137C 0006 0024             		move.b	#6,$24(a1)
00012724 2368 0004 0004             		move.l	4(a0),4(a1)
0001272A 3368 0002 0002             		move.w	2(a0),2(a1)
00012730 0029 0004 0001             		ori.b	#4,1(a1)
00012736 137C 0004 0018             		move.b	#4,$18(a1)
0001273C 137C 0008 0019             		move.b	#8,$19(a1)
00012742 137C 0003 001A             		move.b	#3,$1A(a1)
00012748 137C 0098 0020             		move.b	#$98,$20(a1)
0001274E 1342 0026                  		move.b	d2,$26(a1)
00012752 0602 0040                  		addi.b	#$40,d2
00012756 2348 003C                  		move.l	a0,$3C(a1)
0001275A 51C9 FFAA                  		dbf	d1,Obj60_MakeOrbs ; repeat sequence 3 more times
0001275E                            
0001275E                            loc_11D90:
0001275E 7001                       		moveq	#1,d0
00012760 0828 0000 0022             		btst	#0,$22(a0)
00012766 6700                       		beq.s	Obj60_Move
00012768 4440                       		neg.w	d0
0001276A                            
0001276A                            Obj60_Move:
0001276A 1140 0036                  		move.b	d0,$36(a0)
0001276E 1168 0028 0024             		move.b	$28(a0),$24(a0)	; if type is 02, skip the firing rountine
00012774 5428 0024                  		addq.b	#2,$24(a0)
00012778 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move orbinaut	to the left
0001277E 0828 0000 0022             		btst	#0,$22(a0)	; is orbinaut reversed?
00012784 6700                       		beq.s	locret_11DBC	; if not, branch
00012786 4468 0010                  		neg.w	$10(a0)		; move orbinaut	to the right
0001278A                            
0001278A                            locret_11DBC:
0001278A 4E75                       		rts	
0001278C                            ; ===========================================================================
0001278C                            
0001278C                            Obj60_ChkSonic:				; XREF: Obj60_Index
0001278C 3038 D008                  		move.w	($FFFFD008).w,d0
00012790 9068 0008                  		sub.w	8(a0),d0
00012794 6400                       		bcc.s	loc_11DCA
00012796 4440                       		neg.w	d0
00012798                            
00012798                            loc_11DCA:
00012798 0C40 00A0                  		cmpi.w	#$A0,d0		; is Sonic within $A0 pixels of	orbinaut?
0001279C 6400                       		bcc.s	Obj60_Animate	; if not, branch
0001279E 3038 D00C                  		move.w	($FFFFD00C).w,d0
000127A2 9068 000C                  		sub.w	$C(a0),d0
000127A6 6400                       		bcc.s	loc_11DDC
000127A8 4440                       		neg.w	d0
000127AA                            
000127AA                            loc_11DDC:
000127AA 0C40 0050                  		cmpi.w	#$50,d0		; is Sonic within $50 pixels of	orbinaut?
000127AE 6400                       		bcc.s	Obj60_Animate	; if not, branch
000127B0 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
000127B4 6600                       		bne.s	Obj60_Animate	; if yes, branch
000127B6 117C 0001 001C             		move.b	#1,$1C(a0)	; use "angry" animation
000127BC                            
000127BC                            Obj60_Animate:
000127BC 43F9 0000 0000             		lea	(Ani_obj60).l,a1
000127C2 6100 8892                  		bsr.w	AnimateSprite
000127C6 6000 0000                  		bra.w	Obj60_ChkDel
000127CA                            ; ===========================================================================
000127CA                            
000127CA                            Obj60_Display:				; XREF: Obj60_Index
000127CA 6100 B806                  		bsr.w	SpeedToPos
000127CE                            
000127CE                            Obj60_ChkDel:				; XREF: Obj60_Animate
000127CE 3028 0008                  		move.w	8(a0),d0
000127D2 0240 FF80                  		andi.w	#$FF80,d0
000127D6 3238 F700                  		move.w	($FFFFF700).w,d1
000127DA 0441 0080                  		subi.w	#$80,d1
000127DE 0241 FF80                  		andi.w	#$FF80,d1
000127E2 9041                       		sub.w	d1,d0
000127E4 0C40 0280                  		cmpi.w	#$280,d0
000127E8 6200 0000                  		bhi.w	Obj60_ChkGone
000127EC 6000 B80A                  		bra.w	DisplaySprite
000127F0                            ; ===========================================================================
000127F0                            
000127F0                            Obj60_ChkGone:				; XREF: Obj60_ChkDel
000127F0 45F8 FC00                  		lea	($FFFFFC00).w,a2
000127F4 7000                       		moveq	#0,d0
000127F6 1028 0023                  		move.b	$23(a0),d0
000127FA 6700                       		beq.s	loc_11E34
000127FC 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00012802                            
00012802                            loc_11E34:
00012802 45E8 0037                  		lea	$37(a0),a2
00012806 7400                       		moveq	#0,d2
00012808 141A                       		move.b	(a2)+,d2
0001280A 5342                       		subq.w	#1,d2
0001280C 6500                       		bcs.s	Obj60_Delete
0001280E                            
0001280E                            loc_11E40:
0001280E 7000                       		moveq	#0,d0
00012810 101A                       		move.b	(a2)+,d0
00012812 ED48                       		lsl.w	#6,d0
00012814 0680 00FF D000             		addi.l	#$FFD000,d0
0001281A 2240                       		movea.l	d0,a1
0001281C 6100 B818                  		bsr.w	DeleteObject2
00012820 51CA FFEC                  		dbf	d2,loc_11E40
00012824                            
00012824                            Obj60_Delete:
00012824 6000 B80E                  		bra.w	DeleteObject
00012828                            ; ===========================================================================
00012828                            
00012828                            Obj60_MoveOrb:				; XREF: Obj60_Index
00012828 2268 003C                  		movea.l	$3C(a0),a1
0001282C 0C11 0060                  		cmpi.b	#$60,0(a1)
00012830 6600 B802                  		bne.w	DeleteObject
00012834 0C29 0002 001A             		cmpi.b	#2,$1A(a1)
0001283A 6600                       		bne.s	Obj60_Circle
0001283C 0C28 0040 0026             		cmpi.b	#$40,$26(a0)
00012842 6600                       		bne.s	Obj60_Circle
00012844 5428 0024                  		addq.b	#2,$24(a0)
00012848 5329 0037                  		subq.b	#1,$37(a1)
0001284C 6600                       		bne.s	Obj60_FireOrb
0001284E 5429 0024                  		addq.b	#2,$24(a1)
00012852                            
00012852                            Obj60_FireOrb:
00012852 317C FE00 0010             		move.w	#-$200,$10(a0)	; move orb to the left (quickly)
00012858 0829 0000 0022             		btst	#0,$22(a1)
0001285E 6700                       		beq.s	Obj60_Display2
00012860 4468 0010                  		neg.w	$10(a0)
00012864                            
00012864                            Obj60_Display2:
00012864 6000 B792                  		bra.w	DisplaySprite
00012868                            ; ===========================================================================
00012868                            
00012868                            Obj60_Circle:				; XREF: Obj60_MoveOrb
00012868 1028 0026                  		move.b	$26(a0),d0
0001286C 4EB9 0000 2D6C             		jsr	(CalcSine).l
00012872 E841                       		asr.w	#4,d1
00012874 D269 0008                  		add.w	8(a1),d1
00012878 3141 0008                  		move.w	d1,8(a0)
0001287C E840                       		asr.w	#4,d0
0001287E D069 000C                  		add.w	$C(a1),d0
00012882 3140 000C                  		move.w	d0,$C(a0)
00012886 1029 0036                  		move.b	$36(a1),d0
0001288A D128 0026                  		add.b	d0,$26(a0)
0001288E 6000 B768                  		bra.w	DisplaySprite
00012892                            ; ===========================================================================
00012892                            
00012892                            Obj60_ChkDel2:				; XREF: Obj60_Index
00012892 6100 B73E                  		bsr.w	SpeedToPos
00012896 4A28 0001                  		tst.b	1(a0)
0001289A 6A00 B798                  		bpl.w	DeleteObject
0001289E 6000 B758                  		bra.w	DisplaySprite
000128A2                            ; ===========================================================================
000128A2                            Ani_obj60:
000128A2                            	include "_anim\obj60.asm"
000128A2                            ; ---------------------------------------------------------------------------
000128A2                            ; Animation script - Orbinaut enemy
000128A2                            ; ---------------------------------------------------------------------------
000128A2 0000                       		dc.w byte_11EDA-Ani_obj60
000128A4 0000                       		dc.w byte_11EDE-Ani_obj60
000128A6 0F00 FF00                  byte_11EDA:	dc.b $F, 0, $FF, 0
000128AA 0F01 02FE 0100             byte_11EDE:	dc.b $F, 1, 2, $FE, 1, 0
000128B0                            		even
000128B0                            		even
000128B0                            
000128B0                            ; ---------------------------------------------------------------------------
000128B0                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
000128B0                            ; ---------------------------------------------------------------------------
000128B0                            Map_obj60:
000128B0                            	include "_maps\obj60.asm"
000128B0                            ; ---------------------------------------------------------------------------
000128B0                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
000128B0                            ; ---------------------------------------------------------------------------
000128B0 0000 0000                  		dc.w byte_11EEC-Map_obj60, byte_11EF2-Map_obj60
000128B4 0000 0000                  		dc.w byte_11EF8-Map_obj60, byte_11EFE-Map_obj60
000128B8 01                         byte_11EEC:	dc.b 1
000128B9 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
000128BE 01                         byte_11EF2:	dc.b 1
000128BF F40A 2009 F4               		dc.b $F4, $A, $20, 9, $F4
000128C4 01                         byte_11EF8:	dc.b 1
000128C5 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
000128CA 01                         byte_11EFE:	dc.b 1
000128CB F805 001B F8               		dc.b $F8, 5, 0,	$1B, $F8
000128D0                            		even
000128D0                            		even
000128D0                            
000128D0                            ; ===========================================================================
000128D0                            ; ---------------------------------------------------------------------------
000128D0                            ; Object 16 - harpoon (LZ)
000128D0                            ; ---------------------------------------------------------------------------
000128D0                            
000128D0                            Obj16:					; XREF: Obj_Index
000128D0 7000                       		moveq	#0,d0
000128D2 1028 0024                  		move.b	$24(a0),d0
000128D6 323B 0000                  		move.w	Obj16_Index(pc,d0.w),d1
000128DA 4EFB 1000                  		jmp	Obj16_Index(pc,d1.w)
000128DE                            ; ===========================================================================
000128DE 0000                       Obj16_Index:	dc.w Obj16_Main-Obj16_Index
000128E0 0000                       		dc.w Obj16_Move-Obj16_Index
000128E2 0000                       		dc.w Obj16_Wait-Obj16_Index
000128E4                            ; ===========================================================================
000128E4                            
000128E4                            Obj16_Main:				; XREF: Obj16_Index
000128E4 5428 0024                  		addq.b	#2,$24(a0)
000128E8 217C 0000 0000 0004        		move.l	#Map_obj16,4(a0)
000128F0 317C 03CC 0002             		move.w	#$3CC,2(a0)
000128F6 0028 0004 0001             		ori.b	#4,1(a0)
000128FC 117C 0004 0018             		move.b	#4,$18(a0)
00012902 1168 0028 001C             		move.b	$28(a0),$1C(a0)
00012908 117C 0014 0019             		move.b	#$14,$19(a0)
0001290E 317C 003C 0030             		move.w	#60,$30(a0)
00012914                            
00012914                            Obj16_Move:				; XREF: Obj16_Index
00012914 43F9 0000 0000             		lea	(Ani_obj16).l,a1
0001291A 6100 873A                  		bsr.w	AnimateSprite
0001291E 7000                       		moveq	#0,d0
00012920 1028 001A                  		move.b	$1A(a0),d0	; move frame number to d0
00012924 117B 0000 0020             		move.b	Obj16_Data(pc,d0.w),$20(a0) ; load collision response (based on	d0)
0001292A 6000 D774                  		bra.w	MarkObjGone
0001292E                            ; ===========================================================================
0001292E 9B9C 9D9E 9FA0             Obj16_Data:	dc.b $9B, $9C, $9D, $9E, $9F, $A0
00012934                            ; ===========================================================================
00012934                            
00012934                            Obj16_Wait:				; XREF: Obj16_Index
00012934 5368 0030                  		subq.w	#1,$30(a0)
00012938 6A00                       		bpl.s	Obj16_ChkDel
0001293A 317C 003C 0030             		move.w	#60,$30(a0)
00012940 5528 0024                  		subq.b	#2,$24(a0)	; run "Obj16_Move" subroutine
00012944 0868 0000 001C             		bchg	#0,$1C(a0)	; reverse animation
0001294A                            
0001294A                            Obj16_ChkDel:
0001294A 6000 D754                  		bra.w	MarkObjGone
0001294E                            ; ===========================================================================
0001294E                            Ani_obj16:
0001294E                            	include "_anim\obj16.asm"
0001294E                            ; ---------------------------------------------------------------------------
0001294E                            ; Animation script - harpoon (LZ)
0001294E                            ; ---------------------------------------------------------------------------
0001294E 0000                       		dc.w byte_11F8A-Ani_obj16
00012950 0000                       		dc.w byte_11F8E-Ani_obj16
00012952 0000                       		dc.w byte_11F92-Ani_obj16
00012954 0000                       		dc.w byte_11F96-Ani_obj16
00012956 0301 02FC                  byte_11F8A:	dc.b 3,	1, 2, $FC
0001295A 0301 00FC                  byte_11F8E:	dc.b 3,	1, 0, $FC
0001295E 0304 05FC                  byte_11F92:	dc.b 3,	4, 5, $FC
00012962 0304 03FC                  byte_11F96:	dc.b 3,	4, 3, $FC
00012966                            		even
00012966                            		even
00012966                            
00012966                            ; ---------------------------------------------------------------------------
00012966                            ; Sprite mappings - harpoon (LZ)
00012966                            ; ---------------------------------------------------------------------------
00012966                            Map_obj16:
00012966                            	include "_maps\obj16.asm"
00012966                            ; ---------------------------------------------------------------------------
00012966                            ; Sprite mappings - harpoon (LZ)
00012966                            ; ---------------------------------------------------------------------------
00012966 0000 0000                  		dc.w byte_11FA6-Map_obj16, byte_11FAC-Map_obj16
0001296A 0000 0000                  		dc.w byte_11FB2-Map_obj16, byte_11FBD-Map_obj16
0001296E 0000 0000                  		dc.w byte_11FC3-Map_obj16, byte_11FC9-Map_obj16
00012972 01                         byte_11FA6:	dc.b 1
00012973 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
00012978 01                         byte_11FAC:	dc.b 1
00012979 FC0C 0002 F8               		dc.b $FC, $C, 0, 2, $F8
0001297E 02                         byte_11FB2:	dc.b 2
0001297F FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8
00012984 FC08 0003 10               		dc.b $FC, 8, 0,	3, $10
00012989 01                         byte_11FBD:	dc.b 1
0001298A F801 0009 FC               		dc.b $F8, 1, 0,	9, $FC
0001298F 01                         byte_11FC3:	dc.b 1
00012990 E803 000B FC               		dc.b $E8, 3, 0,	$B, $FC
00012995 02                         byte_11FC9:	dc.b 2
00012996 D802 000B FC               		dc.b $D8, 2, 0,	$B, $FC
0001299B F002 000F FC               		dc.b $F0, 2, 0,	$F, $FC
000129A0                            		even
000129A0                            		even
000129A0                            
000129A0                            ; ===========================================================================
000129A0                            ; ---------------------------------------------------------------------------
000129A0                            ; Object 61 - blocks (LZ)
000129A0                            ; ---------------------------------------------------------------------------
000129A0                            
000129A0                            Obj61:					; XREF: Obj_Index
000129A0 7000                       		moveq	#0,d0
000129A2 1028 0024                  		move.b	$24(a0),d0
000129A6 323B 0000                  		move.w	Obj61_Index(pc,d0.w),d1
000129AA 4EFB 1000                  		jmp	Obj61_Index(pc,d1.w)
000129AE                            ; ===========================================================================
000129AE 0000                       Obj61_Index:	dc.w Obj61_Main-Obj61_Index
000129B0 0000                       		dc.w Obj61_Action-Obj61_Index
000129B2                            
000129B2 1010                       Obj61_Var:	dc.b $10, $10		; width, height
000129B4 200C                       		dc.b $20, $C
000129B6 1010                       		dc.b $10, $10
000129B8 1010                       		dc.b $10, $10
000129BA                            ; ===========================================================================
000129BA                            
000129BA                            Obj61_Main:				; XREF: Obj61_Index
000129BA 5428 0024                  		addq.b	#2,$24(a0)
000129BE 217C 0000 0000 0004        		move.l	#Map_obj61,4(a0)
000129C6 317C 43E6 0002             		move.w	#$43E6,2(a0)
000129CC 117C 0004 0001             		move.b	#4,1(a0)
000129D2 117C 0003 0018             		move.b	#3,$18(a0)
000129D8 7000                       		moveq	#0,d0
000129DA 1028 0028                  		move.b	$28(a0),d0
000129DE E648                       		lsr.w	#3,d0
000129E0 0240 000E                  		andi.w	#$E,d0
000129E4 45FB 00CC                  		lea	Obj61_Var(pc,d0.w),a2
000129E8 115A 0019                  		move.b	(a2)+,$19(a0)
000129EC 1152 0016                  		move.b	(a2),$16(a0)
000129F0 E248                       		lsr.w	#1,d0
000129F2 1140 001A                  		move.b	d0,$1A(a0)
000129F6 3168 0008 0034             		move.w	8(a0),$34(a0)
000129FC 3168 000C 0030             		move.w	$C(a0),$30(a0)
00012A02 1028 0028                  		move.b	$28(a0),d0
00012A06 0200 000F                  		andi.b	#$F,d0
00012A0A 6700                       		beq.s	Obj61_Action
00012A0C 0C00 0007                  		cmpi.b	#7,d0
00012A10 6700                       		beq.s	Obj61_Action
00012A12 117C 0001 0038             		move.b	#1,$38(a0)
00012A18                            
00012A18                            Obj61_Action:				; XREF: Obj61_Index
00012A18 3F28 0008                  		move.w	8(a0),-(sp)
00012A1C 7000                       		moveq	#0,d0
00012A1E 1028 0028                  		move.b	$28(a0),d0
00012A22 0240 000F                  		andi.w	#$F,d0
00012A26 D040                       		add.w	d0,d0
00012A28 323B 0000                  		move.w	Obj61_TypeIndex(pc,d0.w),d1
00012A2C 4EBB 1000                  		jsr	Obj61_TypeIndex(pc,d1.w)
00012A30 381F                       		move.w	(sp)+,d4
00012A32 4A28 0001                  		tst.b	1(a0)
00012A36 6A00                       		bpl.s	Obj61_ChkDel
00012A38 7200                       		moveq	#0,d1
00012A3A 1228 0019                  		move.b	$19(a0),d1
00012A3E 0641 000B                  		addi.w	#$B,d1
00012A42 7400                       		moveq	#0,d2
00012A44 1428 0016                  		move.b	$16(a0),d2
00012A48 3602                       		move.w	d2,d3
00012A4A 5243                       		addq.w	#1,d3
00012A4C 6100 D97A                  		bsr.w	SolidObject
00012A50 1144 003F                  		move.b	d4,$3F(a0)
00012A54 6100 0000                  		bsr.w	loc_12180
00012A58                            
00012A58                            Obj61_ChkDel:
00012A58 3028 0034                  		move.w	$34(a0),d0
00012A5C 0240 FF80                  		andi.w	#$FF80,d0
00012A60 3238 F700                  		move.w	($FFFFF700).w,d1
00012A64 0441 0080                  		subi.w	#$80,d1
00012A68 0241 FF80                  		andi.w	#$FF80,d1
00012A6C 9041                       		sub.w	d1,d0
00012A6E 0C40 0280                  		cmpi.w	#$280,d0
00012A72 6200 B5C0                  		bhi.w	DeleteObject
00012A76 6000 B580                  		bra.w	DisplaySprite
00012A7A                            ; ===========================================================================
00012A7A 0000 0000                  Obj61_TypeIndex:dc.w Obj61_Type00-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
00012A7E 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
00012A82 0000 0000                  		dc.w Obj61_Type04-Obj61_TypeIndex, Obj61_Type05-Obj61_TypeIndex
00012A86 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type07-Obj61_TypeIndex
00012A8A                            ; ===========================================================================
00012A8A                            
00012A8A                            Obj61_Type00:				; XREF: Obj61_TypeIndex
00012A8A 4E75                       		rts	
00012A8C                            ; ===========================================================================
00012A8C                            
00012A8C                            Obj61_Type01:				; XREF: Obj61_TypeIndex
00012A8C 4A68 0036                  		tst.w	$36(a0)		; is Sonic standing on the object?
00012A90 6600                       		bne.s	loc_120D6	; if yes, branch
00012A92 0828 0003 0022             		btst	#3,$22(a0)
00012A98 6700                       		beq.s	locret_120D4
00012A9A 317C 001E 0036             		move.w	#30,$36(a0)	; wait for ยซ second
00012AA0                            
00012AA0                            locret_120D4:
00012AA0 4E75                       		rts	
00012AA2                            ; ===========================================================================
00012AA2                            
00012AA2                            loc_120D6:
00012AA2 5368 0036                  		subq.w	#1,$36(a0)	; subtract 1 from waiting time
00012AA6 66F8                       		bne.s	locret_120D4	; if time remains, branch
00012AA8 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00012AAC 4228 0038                  		clr.b	$38(a0)
00012AB0 4E75                       		rts	
00012AB2                            ; ===========================================================================
00012AB2                            
00012AB2                            Obj61_Type02:				; XREF: Obj61_TypeIndex
00012AB2 6100 B51E                  		bsr.w	SpeedToPos
00012AB6 5068 0012                  		addq.w	#8,$12(a0)	; make object fall
00012ABA 6100 0000                  		bsr.w	ObjHitFloor
00012ABE 4A41                       		tst.w	d1
00012AC0 6A00 0000                  		bpl.w	locret_12106
00012AC4 5241                       		addq.w	#1,d1
00012AC6 D368 000C                  		add.w	d1,$C(a0)
00012ACA 4268 0012                  		clr.w	$12(a0)		; stop when it touches the floor
00012ACE 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
00012AD2                            
00012AD2                            locret_12106:
00012AD2 4E75                       		rts	
00012AD4                            ; ===========================================================================
00012AD4                            
00012AD4                            Obj61_Type04:				; XREF: Obj61_TypeIndex
00012AD4 6100 B4FC                  		bsr.w	SpeedToPos
00012AD8 5168 0012                  		subq.w	#8,$12(a0)	; make object rise
00012ADC 6100 0000                  		bsr.w	ObjHitCeiling
00012AE0 4A41                       		tst.w	d1
00012AE2 6A00 0000                  		bpl.w	locret_12126
00012AE6 9368 000C                  		sub.w	d1,$C(a0)
00012AEA 4268 0012                  		clr.w	$12(a0)		; stop when it touches the ceiling
00012AEE 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
00012AF2                            
00012AF2                            locret_12126:
00012AF2 4E75                       		rts	
00012AF4                            ; ===========================================================================
00012AF4                            
00012AF4                            Obj61_Type05:				; XREF: Obj61_TypeIndex
00012AF4 0C28 0001 003F             		cmpi.b	#1,$3F(a0)	; is Sonic touching the	object?
00012AFA 6600                       		bne.s	locret_12138	; if not, branch
00012AFC 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
00012B00 4228 0038                  		clr.b	$38(a0)
00012B04                            
00012B04                            locret_12138:
00012B04 4E75                       		rts	
00012B06                            ; ===========================================================================
00012B06                            
00012B06                            Obj61_Type07:				; XREF: Obj61_TypeIndex
00012B06 3038 F646                  		move.w	($FFFFF646).w,d0
00012B0A 9068 000C                  		sub.w	$C(a0),d0
00012B0E 6700                       		beq.s	locret_1217E
00012B10 6400                       		bcc.s	loc_12162
00012B12 0C40 FFFE                  		cmpi.w	#-2,d0
00012B16 6C00                       		bge.s	loc_1214E
00012B18 70FE                       		moveq	#-2,d0
00012B1A                            
00012B1A                            loc_1214E:
00012B1A D168 000C                  		add.w	d0,$C(a0)	; make the block rise with water level
00012B1E 6100 0000                  		bsr.w	ObjHitCeiling
00012B22 4A41                       		tst.w	d1
00012B24 6A00 0000                  		bpl.w	locret_12160
00012B28 9368 000C                  		sub.w	d1,$C(a0)
00012B2C                            
00012B2C                            locret_12160:
00012B2C 4E75                       		rts	
00012B2E                            ; ===========================================================================
00012B2E                            
00012B2E                            loc_12162:				; XREF: Obj61_Type07
00012B2E 0C40 0002                  		cmpi.w	#2,d0
00012B32 6F00                       		ble.s	loc_1216A
00012B34 7002                       		moveq	#2,d0
00012B36                            
00012B36                            loc_1216A:
00012B36 D168 000C                  		add.w	d0,$C(a0)	; make the block sink with water level
00012B3A 6100 0000                  		bsr.w	ObjHitFloor
00012B3E 4A41                       		tst.w	d1
00012B40 6A00 0000                  		bpl.w	locret_1217E
00012B44 5241                       		addq.w	#1,d1
00012B46 D368 000C                  		add.w	d1,$C(a0)
00012B4A                            
00012B4A                            locret_1217E:
00012B4A 4E75                       		rts	
00012B4C                            ; ===========================================================================
00012B4C                            
00012B4C                            loc_12180:				; XREF: Obj61_Action
00012B4C 4A28 0038                  		tst.b	$38(a0)
00012B50 6700                       		beq.s	locret_121C0
00012B52 0828 0003 0022             		btst	#3,$22(a0)
00012B58 6600                       		bne.s	loc_1219A
00012B5A 4A28 003E                  		tst.b	$3E(a0)
00012B5E 6700                       		beq.s	locret_121C0
00012B60 5928 003E                  		subq.b	#4,$3E(a0)
00012B64 6000                       		bra.s	loc_121A6
00012B66                            ; ===========================================================================
00012B66                            
00012B66                            loc_1219A:
00012B66 0C28 0040 003E             		cmpi.b	#$40,$3E(a0)
00012B6C 6700                       		beq.s	locret_121C0
00012B6E 5828 003E                  		addq.b	#4,$3E(a0)
00012B72                            
00012B72                            loc_121A6:
00012B72 1028 003E                  		move.b	$3E(a0),d0
00012B76 4EB9 0000 2D6C             		jsr	(CalcSine).l
00012B7C 323C 0400                  		move.w	#$400,d1
00012B80 C1C1                       		muls.w	d1,d0
00012B82 4840                       		swap	d0
00012B84 D068 0030                  		add.w	$30(a0),d0
00012B88 3140 000C                  		move.w	d0,$C(a0)
00012B8C                            
00012B8C                            locret_121C0:
00012B8C 4E75                       		rts	
00012B8E                            ; ===========================================================================
00012B8E                            ; ---------------------------------------------------------------------------
00012B8E                            ; Sprite mappings - blocks (LZ)
00012B8E                            ; ---------------------------------------------------------------------------
00012B8E                            Map_obj61:
00012B8E                            	include "_maps\obj61.asm"
00012B8E                            ; ---------------------------------------------------------------------------
00012B8E                            ; Sprite mappings - blocks (LZ)
00012B8E                            ; ---------------------------------------------------------------------------
00012B8E 0000 0000                  		dc.w byte_121CA-Map_obj61, byte_121D0-Map_obj61
00012B92 0000 0000                  		dc.w byte_121DB-Map_obj61, byte_121E1-Map_obj61
00012B96 01                         byte_121CA:	dc.b 1
00012B97 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00012B9C 02                         byte_121D0:	dc.b 2
00012B9D F40E 0069 E0               		dc.b $F4, $E, 0, $69, $E0
00012BA2 F40E 0075 00               		dc.b $F4, $E, 0, $75, 0
00012BA7 01                         byte_121DB:	dc.b 1
00012BA8 F00F 011A F0               		dc.b $F0, $F, 1, $1A, $F0
00012BAD 01                         byte_121E1:	dc.b 1
00012BAE F00F FDFA F0               		dc.b $F0, $F, $FD, $FA,	$F0
00012BB4 00                         		even
00012BB4 00                         		even
00012BB4                            
00012BB4                            ; ===========================================================================
00012BB4                            ; ---------------------------------------------------------------------------
00012BB4                            ; Object 62 - gargoyle head (LZ)
00012BB4                            ; ---------------------------------------------------------------------------
00012BB4                            
00012BB4                            Obj62:					; XREF: Obj_Index
00012BB4 7000                       		moveq	#0,d0
00012BB6 1028 0024                  		move.b	$24(a0),d0
00012BBA 323B 0000                  		move.w	Obj62_Index(pc,d0.w),d1
00012BBE 4EBB 1000                  		jsr	Obj62_Index(pc,d1.w)
00012BC2 6000 D4DC                  		bra.w	MarkObjGone
00012BC6                            ; ===========================================================================
00012BC6 0000                       Obj62_Index:	dc.w Obj62_Main-Obj62_Index
00012BC8 0000                       		dc.w Obj62_MakeFire-Obj62_Index
00012BCA 0000                       		dc.w Obj62_FireBall-Obj62_Index
00012BCC 0000                       		dc.w Obj62_AniFire-Obj62_Index
00012BCE                            
00012BCE 1E3C 5A78 96B4 D2F0        Obj62_SpitRate:	dc.b 30, 60, 90, 120, 150, 180,	210, 240
00012BD6                            ; ===========================================================================
00012BD6                            
00012BD6                            Obj62_Main:				; XREF: Obj62_Index
00012BD6 5428 0024                  		addq.b	#2,$24(a0)
00012BDA 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
00012BE2 317C 42E9 0002             		move.w	#$42E9,2(a0)
00012BE8 0028 0004 0001             		ori.b	#4,1(a0)
00012BEE 117C 0003 0018             		move.b	#3,$18(a0)
00012BF4 117C 0010 0019             		move.b	#$10,$19(a0)
00012BFA 1028 0028                  		move.b	$28(a0),d0	; get object type
00012BFE 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00012C02 117B 00CA 001F             		move.b	Obj62_SpitRate(pc,d0.w),$1F(a0)	; set fireball spit rate
00012C08 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00012C0E 0228 000F 0028             		andi.b	#$F,$28(a0)
00012C14                            
00012C14                            Obj62_MakeFire:				; XREF: Obj62_Index
00012C14 5328 001E                  		subq.b	#1,$1E(a0)
00012C18 6600                       		bne.s	Obj62_NoFire
00012C1A 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00012C20 6100 B650                  		bsr.w	ChkObjOnScreen
00012C24 6600                       		bne.s	Obj62_NoFire
00012C26 6100 B856                  		bsr.w	SingleObjLoad
00012C2A 6600                       		bne.s	Obj62_NoFire
00012C2C 12BC 0062                  		move.b	#$62,0(a1)	; load fireball	object
00012C30 5829 0024                  		addq.b	#4,$24(a1)
00012C34 3368 0008 0008             		move.w	8(a0),8(a1)
00012C3A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012C40 1368 0001 0001             		move.b	1(a0),1(a1)
00012C46 1368 0022 0022             		move.b	$22(a0),$22(a1)
00012C4C                            
00012C4C                            Obj62_NoFire:
00012C4C 4E75                       		rts	
00012C4E                            ; ===========================================================================
00012C4E                            
00012C4E                            Obj62_FireBall:				; XREF: Obj62_Index
00012C4E 5428 0024                  		addq.b	#2,$24(a0)
00012C52 117C 0008 0016             		move.b	#8,$16(a0)
00012C58 117C 0008 0017             		move.b	#8,$17(a0)
00012C5E 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
00012C66 317C 02E9 0002             		move.w	#$2E9,2(a0)
00012C6C 0028 0004 0001             		ori.b	#4,1(a0)
00012C72 117C 0004 0018             		move.b	#4,$18(a0)
00012C78 117C 0098 0020             		move.b	#$98,$20(a0)
00012C7E 117C 0008 0019             		move.b	#8,$19(a0)
00012C84 117C 0002 001A             		move.b	#2,$1A(a0)
00012C8A 5068 000C                  		addq.w	#8,$C(a0)
00012C8E 317C 0200 0010             		move.w	#$200,$10(a0)
00012C94 0828 0000 0022             		btst	#0,$22(a0)
00012C9A 6600                       		bne.s	Obj62_Sound
00012C9C 4468 0010                  		neg.w	$10(a0)
00012CA0                            
00012CA0                            Obj62_Sound:
00012CA0 303C 00AE                  		move.w	#$AE,d0
00012CA4 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play lava ball sound
00012CAA                            
00012CAA                            Obj62_AniFire:				; XREF: Obj62_Index
00012CAA 1038 FE05                  		move.b	($FFFFFE05).w,d0
00012CAE 0200 0007                  		andi.b	#7,d0
00012CB2 6600                       		bne.s	Obj62_StopFire
00012CB4 0868 0000 001A             		bchg	#0,$1A(a0)	; switch between frame 01 and 02
00012CBA                            
00012CBA                            Obj62_StopFire:
00012CBA 6100 B316                  		bsr.w	SpeedToPos
00012CBE 0828 0000 0022             		btst	#0,$22(a0)
00012CC4 6600                       		bne.s	Obj62_StopFire2
00012CC6 76F8                       		moveq	#-8,d3
00012CC8 6100 0000                  		bsr.w	ObjHitWallLeft
00012CCC 4A41                       		tst.w	d1
00012CCE 6B00 B364                  		bmi.w	DeleteObject	; delete if the	fireball hits a	wall
00012CD2 4E75                       		rts	
00012CD4                            ; ===========================================================================
00012CD4                            
00012CD4                            Obj62_StopFire2:
00012CD4 7608                       		moveq	#8,d3
00012CD6 6100 0000                  		bsr.w	ObjHitWallRight
00012CDA 4A41                       		tst.w	d1
00012CDC 6B00 B356                  		bmi.w	DeleteObject
00012CE0 4E75                       		rts	
00012CE2                            ; ===========================================================================
00012CE2                            ; ---------------------------------------------------------------------------
00012CE2                            ; Sprite mappings - gargoyle head (LZ)
00012CE2                            ; ---------------------------------------------------------------------------
00012CE2                            Map_obj62:
00012CE2                            	include "_maps\obj62.asm"
00012CE2                            ; ---------------------------------------------------------------------------
00012CE2                            ; Sprite mappings - gargoyle head (LZ)
00012CE2                            ; ---------------------------------------------------------------------------
00012CE2 0000 0000                  		dc.w byte_12320-Map_obj62, byte_12320-Map_obj62
00012CE6 0000 0000                  		dc.w byte_12330-Map_obj62, byte_12336-Map_obj62
00012CEA 03                         byte_12320:	dc.b 3
00012CEB F004 0000 00               		dc.b $F0, 4, 0,	0, 0
00012CF0 F80D 0002 F0               		dc.b $F8, $D, 0, 2, $F0
00012CF5 0808 000A F8               		dc.b 8,	8, 0, $A, $F8
00012CFA 01                         byte_12330:	dc.b 1
00012CFB FC04 000D F8               		dc.b $FC, 4, 0,	$D, $F8
00012D00 01                         byte_12336:	dc.b 1
00012D01 FC04 000F F8               		dc.b $FC, 4, 0,	$F, $F8
00012D06                            		even
00012D06                            		even
00012D06                            
00012D06                            ; ===========================================================================
00012D06                            ; ---------------------------------------------------------------------------
00012D06                            ; Object 63 - platforms	on a conveyor belt (LZ)
00012D06                            ; ---------------------------------------------------------------------------
00012D06                            
00012D06                            Obj63:					; XREF: Obj_Index
00012D06 7000                       		moveq	#0,d0
00012D08 1028 0024                  		move.b	$24(a0),d0
00012D0C 323B 0000                  		move.w	Obj63_Index(pc,d0.w),d1
00012D10 4EBB 1000                  		jsr	Obj63_Index(pc,d1.w)
00012D14 3028 0030                  		move.w	$30(a0),d0
00012D18 0240 FF80                  		andi.w	#$FF80,d0
00012D1C 3238 F700                  		move.w	($FFFFF700).w,d1
00012D20 0441 0080                  		subi.w	#$80,d1
00012D24 0241 FF80                  		andi.w	#$FF80,d1
00012D28 9041                       		sub.w	d1,d0
00012D2A 0C40 0280                  		cmpi.w	#$280,d0
00012D2E 6200                       		bhi.s	loc_1236A
00012D30                            
00012D30                            Obj63_Display:				; XREF: loc_1236A
00012D30 6000 B2C6                  		bra.w	DisplaySprite
00012D34                            ; ===========================================================================
00012D34                            
00012D34                            loc_1236A:				; XREF: Obj63
00012D34 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w
00012D3A 6600                       		bne.s	loc_12378
00012D3C 0C40 FF80                  		cmpi.w	#-$80,d0
00012D40 64EE                       		bcc.s	Obj63_Display
00012D42                            
00012D42                            loc_12378:
00012D42 1028 002F                  		move.b	$2F(a0),d0
00012D46 6A00 B2EC                  		bpl.w	DeleteObject
00012D4A 0240 007F                  		andi.w	#$7F,d0
00012D4E 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00012D52 08B2 0000 0000             		bclr	#0,(a2,d0.w)
00012D58 6000 B2DA                  		bra.w	DeleteObject
00012D5C                            ; ===========================================================================
00012D5C 0000                       Obj63_Index:	dc.w Obj63_Main-Obj63_Index
00012D5E 0000                       		dc.w loc_124B2-Obj63_Index
00012D60 0000                       		dc.w loc_124C2-Obj63_Index
00012D62 0000                       		dc.w loc_124DE-Obj63_Index
00012D64                            ; ===========================================================================
00012D64                            
00012D64                            Obj63_Main:				; XREF: Obj63_Index
00012D64 1028 0028                  		move.b	$28(a0),d0
00012D68 6B00 0000                  		bmi.w	loc_12460
00012D6C 5428 0024                  		addq.b	#2,$24(a0)
00012D70 217C 0000 0000 0004        		move.l	#Map_obj63,4(a0)
00012D78 317C 43F6 0002             		move.w	#$43F6,2(a0)
00012D7E 0028 0004 0001             		ori.b	#4,1(a0)
00012D84 117C 0010 0019             		move.b	#$10,$19(a0)
00012D8A 117C 0004 0018             		move.b	#4,$18(a0)
00012D90 0C28 007F 0028             		cmpi.b	#$7F,$28(a0)
00012D96 6600                       		bne.s	loc_123E2
00012D98 5828 0024                  		addq.b	#4,$24(a0)
00012D9C 317C 03F6 0002             		move.w	#$3F6,2(a0)
00012DA2 117C 0001 0018             		move.b	#1,$18(a0)
00012DA8 6000 0000                  		bra.w	loc_124DE
00012DAC                            ; ===========================================================================
00012DAC                            
00012DAC                            loc_123E2:
00012DAC 117C 0004 001A             		move.b	#4,$1A(a0)
00012DB2 7000                       		moveq	#0,d0
00012DB4 1028 0028                  		move.b	$28(a0),d0
00012DB8 3200                       		move.w	d0,d1
00012DBA E648                       		lsr.w	#3,d0
00012DBC 0240 001E                  		andi.w	#$1E,d0
00012DC0 45FA 0000                  		lea	Obj63_Data(pc),a2
00012DC4 D4F2 0000                  		adda.w	(a2,d0.w),a2
00012DC8 315A 0038                  		move.w	(a2)+,$38(a0)
00012DCC 315A 0030                  		move.w	(a2)+,$30(a0)
00012DD0 214A 003C                  		move.l	a2,$3C(a0)
00012DD4 0241 000F                  		andi.w	#$F,d1
00012DD8 E549                       		lsl.w	#2,d1
00012DDA 1141 0038                  		move.b	d1,$38(a0)
00012DDE 117C 0004 003A             		move.b	#4,$3A(a0)
00012DE4 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00012DE8 6700                       		beq.s	loc_1244C
00012DEA 117C 0001 003B             		move.b	#1,$3B(a0)
00012DF0 4428 003A                  		neg.b	$3A(a0)
00012DF4 7200                       		moveq	#0,d1
00012DF6 1228 0038                  		move.b	$38(a0),d1
00012DFA D228 003A                  		add.b	$3A(a0),d1
00012DFE B228 0039                  		cmp.b	$39(a0),d1
00012E02 6500                       		bcs.s	loc_12448
00012E04 1001                       		move.b	d1,d0
00012E06 7200                       		moveq	#0,d1
00012E08 4A00                       		tst.b	d0
00012E0A 6A00                       		bpl.s	loc_12448
00012E0C 1228 0039                  		move.b	$39(a0),d1
00012E10 5901                       		subq.b	#4,d1
00012E12                            
00012E12                            loc_12448:
00012E12 1141 0038                  		move.b	d1,$38(a0)
00012E16                            
00012E16                            loc_1244C:
00012E16 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
00012E1C 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
00012E22 6100 0000                  		bsr.w	Obj63_ChangeDir
00012E26 6000 0000                  		bra.w	loc_124B2
00012E2A                            ; ===========================================================================
00012E2A                            
00012E2A                            loc_12460:				; XREF: Obj63_Main
00012E2A 1140 002F                  		move.b	d0,$2F(a0)
00012E2E 0240 007F                  		andi.w	#$7F,d0
00012E32 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00012E36 08F2 0000 0000             		bset	#0,(a2,d0.w)
00012E3C 6600 B1F6                  		bne.w	DeleteObject
00012E40 D040                       		add.w	d0,d0
00012E42 0240 001E                  		andi.w	#$1E,d0
00012E46 0640 0070                  		addi.w	#$70,d0
00012E4A 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
00012E50 D4F2 0000                  		adda.w	(a2,d0.w),a2
00012E54 321A                       		move.w	(a2)+,d1
00012E56 2248                       		movea.l	a0,a1
00012E58 6000                       		bra.s	Obj63_MakePtfms
00012E5A                            ; ===========================================================================
00012E5A                            
00012E5A                            Obj63_Loop:
00012E5A 6100 B622                  		bsr.w	SingleObjLoad
00012E5E 6600                       		bne.s	loc_124AA
00012E60                            
00012E60                            Obj63_MakePtfms:			; XREF: loc_12460
00012E60 12BC 0063                  		move.b	#$63,0(a1)
00012E64 335A 0008                  		move.w	(a2)+,8(a1)
00012E68 335A 000C                  		move.w	(a2)+,$C(a1)
00012E6C 301A                       		move.w	(a2)+,d0
00012E6E 1340 0028                  		move.b	d0,$28(a1)
00012E72                            
00012E72                            loc_124AA:
00012E72 51C9 FFE6                  		dbf	d1,Obj63_Loop
00012E76                            
00012E76 588F                       		addq.l	#4,sp
00012E78 4E75                       		rts	
00012E7A                            ; ===========================================================================
00012E7A                            
00012E7A                            loc_124B2:				; XREF: Obj63_Index
00012E7A 7200                       		moveq	#0,d1
00012E7C 1228 0019                  		move.b	$19(a0),d1
00012E80 4EB9 0000 7C12             		jsr	(PlatformObject).l
00012E86 6000 0000                  		bra.w	sub_12502
00012E8A                            ; ===========================================================================
00012E8A                            
00012E8A                            loc_124C2:				; XREF: Obj63_Index
00012E8A 7200                       		moveq	#0,d1
00012E8C 1228 0019                  		move.b	$19(a0),d1
00012E90 4EB9 0000 7D86             		jsr	(ExitPlatform).l
00012E96 3F28 0008                  		move.w	8(a0),-(sp)
00012E9A 6100 0000                  		bsr.w	sub_12502
00012E9E 341F                       		move.w	(sp)+,d2
00012EA0 4EF9 0000 82F0             		jmp	(MvSonicOnPtfm2).l
00012EA6                            ; ===========================================================================
00012EA6                            
00012EA6                            loc_124DE:				; XREF: Obj63_Index
00012EA6 3038 FE04                  		move.w	($FFFFFE04).w,d0
00012EAA 0240 0003                  		andi.w	#3,d0
00012EAE 6600                       		bne.s	loc_124FC
00012EB0 7201                       		moveq	#1,d1
00012EB2 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00012EB6 6700                       		beq.s	loc_124F2
00012EB8 4401                       		neg.b	d1
00012EBA                            
00012EBA                            loc_124F2:
00012EBA D328 001A                  		add.b	d1,$1A(a0)
00012EBE 0228 0003 001A             		andi.b	#3,$1A(a0)
00012EC4                            
00012EC4                            loc_124FC:
00012EC4 588F                       		addq.l	#4,sp
00012EC6 6000 D1D8                  		bra.w	MarkObjGone
00012ECA                            
00012ECA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012ECA                            
00012ECA                            
00012ECA                            sub_12502:				; XREF: loc_124B2; loc_124C2
00012ECA 4A38 F7EE                  		tst.b	($FFFFF7EE).w
00012ECE 6700                       		beq.s	loc_12520
00012ED0 4A28 003B                  		tst.b	$3B(a0)
00012ED4 6600                       		bne.s	loc_12520
00012ED6 117C 0001 003B             		move.b	#1,$3B(a0)
00012EDC 11FC 0001 F7C0             		move.b	#1,($FFFFF7C0).w
00012EE2 4428 003A                  		neg.b	$3A(a0)
00012EE6 6000                       		bra.s	loc_12534
00012EE8                            ; ===========================================================================
00012EE8                            
00012EE8                            loc_12520:
00012EE8 3028 0008                  		move.w	8(a0),d0
00012EEC B068 0034                  		cmp.w	$34(a0),d0
00012EF0 6600                       		bne.s	loc_1256A
00012EF2 3028 000C                  		move.w	$C(a0),d0
00012EF6 B068 0036                  		cmp.w	$36(a0),d0
00012EFA 6600                       		bne.s	loc_1256A
00012EFC                            
00012EFC                            loc_12534:
00012EFC 7200                       		moveq	#0,d1
00012EFE 1228 0038                  		move.b	$38(a0),d1
00012F02 D228 003A                  		add.b	$3A(a0),d1
00012F06 B228 0039                  		cmp.b	$39(a0),d1
00012F0A 6500                       		bcs.s	loc_12552
00012F0C 1001                       		move.b	d1,d0
00012F0E 7200                       		moveq	#0,d1
00012F10 4A00                       		tst.b	d0
00012F12 6A00                       		bpl.s	loc_12552
00012F14 1228 0039                  		move.b	$39(a0),d1
00012F18 5901                       		subq.b	#4,d1
00012F1A                            
00012F1A                            loc_12552:
00012F1A 1141 0038                  		move.b	d1,$38(a0)
00012F1E 2268 003C                  		movea.l	$3C(a0),a1
00012F22 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
00012F28 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
00012F2E 6100 0000                  		bsr.w	Obj63_ChangeDir
00012F32                            
00012F32                            loc_1256A:
00012F32 6100 B09E                  		bsr.w	SpeedToPos
00012F36 4E75                       		rts	
00012F38                            ; End of function sub_12502
00012F38                            
00012F38                            
00012F38                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012F38                            
00012F38                            
00012F38                            Obj63_ChangeDir:			; XREF: loc_123E2; sub_12502
00012F38 7000                       		moveq	#0,d0
00012F3A 343C FF00                  		move.w	#-$100,d2
00012F3E 3028 0008                  		move.w	8(a0),d0
00012F42 9068 0034                  		sub.w	$34(a0),d0
00012F46 6400                       		bcc.s	loc_12584
00012F48 4440                       		neg.w	d0
00012F4A 4442                       		neg.w	d2
00012F4C                            
00012F4C                            loc_12584:
00012F4C 7200                       		moveq	#0,d1
00012F4E 363C FF00                  		move.w	#-$100,d3
00012F52 3228 000C                  		move.w	$C(a0),d1
00012F56 9268 0036                  		sub.w	$36(a0),d1
00012F5A 6400                       		bcc.s	loc_12598
00012F5C 4441                       		neg.w	d1
00012F5E 4443                       		neg.w	d3
00012F60                            
00012F60                            loc_12598:
00012F60 B240                       		cmp.w	d0,d1
00012F62 6500                       		bcs.s	loc_125C2
00012F64 3028 0008                  		move.w	8(a0),d0
00012F68 9068 0034                  		sub.w	$34(a0),d0
00012F6C 6700                       		beq.s	loc_125AE
00012F6E 48C0                       		ext.l	d0
00012F70 E180                       		asl.l	#8,d0
00012F72 81C1                       		divs.w	d1,d0
00012F74 4440                       		neg.w	d0
00012F76                            
00012F76                            loc_125AE:
00012F76 3140 0010                  		move.w	d0,$10(a0)
00012F7A 3143 0012                  		move.w	d3,$12(a0)
00012F7E 4840                       		swap	d0
00012F80 3140 000A                  		move.w	d0,$A(a0)
00012F84 4268 000E                  		clr.w	$E(a0)
00012F88 4E75                       		rts	
00012F8A                            ; ===========================================================================
00012F8A                            
00012F8A                            loc_125C2:				; XREF: Obj63_ChangeDir
00012F8A 3228 000C                  		move.w	$C(a0),d1
00012F8E 9268 0036                  		sub.w	$36(a0),d1
00012F92 6700                       		beq.s	loc_125D4
00012F94 48C1                       		ext.l	d1
00012F96 E181                       		asl.l	#8,d1
00012F98 83C0                       		divs.w	d0,d1
00012F9A 4441                       		neg.w	d1
00012F9C                            
00012F9C                            loc_125D4:
00012F9C 3141 0012                  		move.w	d1,$12(a0)
00012FA0 3142 0010                  		move.w	d2,$10(a0)
00012FA4 4841                       		swap	d1
00012FA6 3141 000E                  		move.w	d1,$E(a0)
00012FAA 4268 000A                  		clr.w	$A(a0)
00012FAE 4E75                       		rts	
00012FB0                            ; End of function Obj63_ChangeDir
00012FB0                            
00012FB0                            ; ===========================================================================
00012FB0 0000                       Obj63_Data:	dc.w word_125F4-Obj63_Data
00012FB2 0000                       		dc.w word_12610-Obj63_Data
00012FB4 0000                       		dc.w word_12628-Obj63_Data
00012FB6 0000                       		dc.w word_1263C-Obj63_Data
00012FB8 0000                       		dc.w word_12650-Obj63_Data
00012FBA 0000                       		dc.w word_12668-Obj63_Data
00012FBC 0018 1070 1078 021A 10BE+  word_125F4:	dc.w $18, $1070, $1078,	$21A, $10BE, $260, $10BE, $393
00012FCC 108C 03C5 1022 0390 1022+  		dc.w $108C, $3C5, $1022, $390, $1022, $244
00012FD8 0014 1280 127E 0280 12CE+  word_12610:	dc.w $14, $1280, $127E,	$280, $12CE, $2D0, $12CE, $46E
00012FE8 1232 0420 1232 02CC        		dc.w $1232, $420, $1232, $2CC
00012FF0 0010 0D68 0D22 0482 0D22+  word_12628:	dc.w $10, $D68,	$D22, $482, $D22, $5DE,	$DAE, $5DE, $DAE, $482
00013004 0010 0DA0 0D62 03A2 0DEE+  word_1263C:	dc.w $10, $DA0,	$D62, $3A2, $DEE, $3A2,	$DEE, $4DE, $D62, $4DE
00013018 0014 0D00 0CAC 0242 0DDE+  word_12650:	dc.w $14, $D00,	$CAC, $242, $DDE, $242,	$DDE, $3DE, $C52, $3DE,	$C52, $29C
00013030 0010 1300 1252 020A 13DE+  word_12668:	dc.w $10, $1300, $1252,	$20A, $13DE, $20A, $13DE, $2BE,	$1252, $2BE
00013044                            
00013044                            ; ---------------------------------------------------------------------------
00013044                            ; Sprite mappings - platforms on a conveyor belt (LZ)
00013044                            ; ---------------------------------------------------------------------------
00013044                            Map_obj63:
00013044                            	include "_maps\obj63.asm"
00013044                            ; ---------------------------------------------------------------------------
00013044                            ; Sprite mappings - platforms on a conveyor belt (LZ)
00013044                            ; ---------------------------------------------------------------------------
00013044 0000 0000                  		dc.w byte_12686-Map_obj63, byte_1268C-Map_obj63
00013048 0000 0000                  		dc.w byte_12692-Map_obj63, byte_12698-Map_obj63
0001304C 0000                       		dc.w byte_1269E-Map_obj63
0001304E 01                         byte_12686:	dc.b 1
0001304F F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00013054 01                         byte_1268C:	dc.b 1
00013055 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
0001305A 01                         byte_12692:	dc.b 1
0001305B F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
00013060 01                         byte_12698:	dc.b 1
00013061 F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
00013066 01                         byte_1269E:	dc.b 1
00013067 F80D 0040 F0               		dc.b $F8, $D, 0, $40, $F0
0001306C                            		even
0001306C                            		even
0001306C                            
0001306C                            ; ===========================================================================
0001306C                            ; ---------------------------------------------------------------------------
0001306C                            ; Object 64 - bubbles (LZ)
0001306C                            ; ---------------------------------------------------------------------------
0001306C                            
0001306C                            Obj64:					; XREF: Obj_Index
0001306C 7000                       		moveq	#0,d0
0001306E 1028 0024                  		move.b	$24(a0),d0
00013072 323B 0000                  		move.w	Obj64_Index(pc,d0.w),d1
00013076 4EFB 1000                  		jmp	Obj64_Index(pc,d1.w)
0001307A                            ; ===========================================================================
0001307A 0000                       Obj64_Index:	dc.w Obj64_Main-Obj64_Index
0001307C 0000                       		dc.w Obj64_Animate-Obj64_Index
0001307E 0000                       		dc.w Obj64_ChkWater-Obj64_Index
00013080 0000                       		dc.w Obj64_Display2-Obj64_Index
00013082 0000                       		dc.w Obj64_Delete3-Obj64_Index
00013084 0000                       		dc.w Obj64_BblMaker-Obj64_Index
00013086                            ; ===========================================================================
00013086                            
00013086                            Obj64_Main:				; XREF: Obj64_Index
00013086 5428 0024                  		addq.b	#2,$24(a0)
0001308A 217C 0000 0000 0004        		move.l	#Map_obj64,4(a0)
00013092 317C 8348 0002             		move.w	#$8348,2(a0)
00013098 117C 0084 0001             		move.b	#$84,1(a0)
0001309E 117C 0010 0019             		move.b	#$10,$19(a0)
000130A4 117C 0001 0018             		move.b	#1,$18(a0)
000130AA 1028 0028                  		move.b	$28(a0),d0	; get object type
000130AE 6A00                       		bpl.s	Obj64_Bubble	; if type is $0-$7F, branch
000130B0 5028 0024                  		addq.b	#8,$24(a0)
000130B4 0240 007F                  		andi.w	#$7F,d0		; read only last 7 bits	(deduct	$80)
000130B8 1140 0032                  		move.b	d0,$32(a0)
000130BC 1140 0033                  		move.b	d0,$33(a0)
000130C0 117C 0006 001C             		move.b	#6,$1C(a0)
000130C6 6000 0000                  		bra.w	Obj64_BblMaker
000130CA                            ; ===========================================================================
000130CA                            
000130CA                            Obj64_Bubble:				; XREF: Obj64_Main
000130CA 1140 001C                  		move.b	d0,$1C(a0)
000130CE 3168 0008 0030             		move.w	8(a0),$30(a0)
000130D4 317C FF78 0012             		move.w	#-$88,$12(a0)	; float	bubble upwards
000130DA 4EB9 0000 2D46             		jsr	(RandomNumber).l
000130E0 1140 0026                  		move.b	d0,$26(a0)
000130E4                            
000130E4                            Obj64_Animate:				; XREF: Obj64_Index
000130E4 43F9 0000 0000             		lea	(Ani_obj64).l,a1
000130EA 4EB9 0000 B056             		jsr	AnimateSprite
000130F0 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
000130F6 6600                       		bne.s	Obj64_ChkWater
000130F8 117C 0001 002E             		move.b	#1,$2E(a0)
000130FE                            
000130FE                            Obj64_ChkWater:				; XREF: Obj64_Index
000130FE 3038 F646                  		move.w	($FFFFF646).w,d0
00013102 B068 000C                  		cmp.w	$C(a0),d0	; is bubble underwater?
00013106 6500                       		bcs.s	Obj64_Wobble	; if yes, branch
00013108                            
00013108                            Obj64_Burst:				; XREF: Obj64_Wobble
00013108 117C 0006 0024             		move.b	#6,$24(a0)
0001310E 5628 001C                  		addq.b	#3,$1C(a0)	; run "bursting" animation
00013112 6000 0000                  		bra.w	Obj64_Display2
00013116                            ; ===========================================================================
00013116                            
00013116                            Obj64_Wobble:				; XREF: Obj64_ChkWater
00013116 1028 0026                  		move.b	$26(a0),d0
0001311A 5228 0026                  		addq.b	#1,$26(a0)
0001311E 0240 007F                  		andi.w	#$7F,d0
00013122 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
00013128 1031 0000                  		move.b	(a1,d0.w),d0
0001312C 4880                       		ext.w	d0
0001312E D068 0030                  		add.w	$30(a0),d0
00013132 3140 0008                  		move.w	d0,8(a0)	; change bubble's horizontal position
00013136 4A28 002E                  		tst.b	$2E(a0)
0001313A 6700                       		beq.s	Obj64_Display
0001313C 6100 0000                  		bsr.w	Obj64_ChkSonic	; has Sonic touched the	bubble?
00013140 6700                       		beq.s	Obj64_Display	; if not, branch
00013142                            
00013142 6100 0000                  		bsr.w	ResumeMusic	; cancel countdown music
00013146 303C 00AD                  		move.w	#$AD,d0
0001314A 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play collecting	bubble sound
00013150 43F8 D000                  		lea	($FFFFD000).w,a1
00013154 4269 0010                  		clr.w	$10(a1)
00013158 4269 0012                  		clr.w	$12(a1)
0001315C 4269 0014                  		clr.w	$14(a1)
00013160 137C 0015 001C             		move.b	#$15,$1C(a1)
00013166 337C 0023 003E             		move.w	#$23,$3E(a1)
0001316C 137C 0000 003C             		move.b	#0,$3C(a1)
00013172 08A9 0005 0022             		bclr	#5,$22(a1)
00013178 08A9 0004 0022             		bclr	#4,$22(a1)
0001317E 0829 0002 0022             		btst	#2,$22(a1)
00013184 6700 FF82                  		beq.w	Obj64_Burst
00013188 08A9 0002 0022             		bclr	#2,$22(a1)
0001318E 137C 0013 0016             		move.b	#$13,$16(a1)
00013194 137C 0009 0017             		move.b	#9,$17(a1)
0001319A 5B69 000C                  		subq.w	#5,$C(a1)
0001319E 6000 FF68                  		bra.w	Obj64_Burst
000131A2                            ; ===========================================================================
000131A2                            
000131A2                            Obj64_Display:				; XREF: Obj64_Wobble
000131A2 6100 AE2E                  		bsr.w	SpeedToPos
000131A6 4A28 0001                  		tst.b	1(a0)
000131AA 6A00                       		bpl.s	Obj64_Delete
000131AC 4EFA AE4A                  		jmp	DisplaySprite
000131B0                            ; ===========================================================================
000131B0                            
000131B0                            Obj64_Delete:
000131B0 4EFA AE82                  		jmp	DeleteObject
000131B4                            ; ===========================================================================
000131B4                            
000131B4                            Obj64_Display2:				; XREF: Obj64_Index
000131B4 43F9 0000 0000             		lea	(Ani_obj64).l,a1
000131BA 4EB9 0000 B056             		jsr	AnimateSprite
000131C0 4A28 0001                  		tst.b	1(a0)
000131C4 6A00                       		bpl.s	Obj64_Delete2
000131C6 4EFA AE30                  		jmp	DisplaySprite
000131CA                            ; ===========================================================================
000131CA                            
000131CA                            Obj64_Delete2:
000131CA 4EFA AE68                  		jmp	DeleteObject
000131CE                            ; ===========================================================================
000131CE                            
000131CE                            Obj64_Delete3:				; XREF: Obj64_Index
000131CE 6000 AE64                  		bra.w	DeleteObject
000131D2                            ; ===========================================================================
000131D2                            
000131D2                            Obj64_BblMaker:				; XREF: Obj64_Index
000131D2 4A68 0036                  		tst.w	$36(a0)
000131D6 6600                       		bne.s	loc_12874
000131D8 3038 F646                  		move.w	($FFFFF646).w,d0
000131DC B068 000C                  		cmp.w	$C(a0),d0	; is bubble maker underwater?
000131E0 6400 0000                  		bcc.w	Obj64_ChkDel	; if not, branch
000131E4 4A28 0001                  		tst.b	1(a0)
000131E8 6A00 0000                  		bpl.w	Obj64_ChkDel
000131EC 5368 0038                  		subq.w	#1,$38(a0)
000131F0 6A00 0000                  		bpl.w	loc_12914
000131F4 317C 0001 0036             		move.w	#1,$36(a0)
000131FA                            
000131FA                            loc_1283A:
000131FA 4EB9 0000 2D46             		jsr	(RandomNumber).l
00013200 3200                       		move.w	d0,d1
00013202 0240 0007                  		andi.w	#7,d0
00013206 0C40 0006                  		cmpi.w	#6,d0
0001320A 64EE                       		bcc.s	loc_1283A
0001320C                            
0001320C 1140 0034                  		move.b	d0,$34(a0)
00013210 0241 000C                  		andi.w	#$C,d1
00013214 43F9 0000 0000             		lea	(Obj64_BblTypes).l,a1
0001321A D2C1                       		adda.w	d1,a1
0001321C 2149 003C                  		move.l	a1,$3C(a0)
00013220 5328 0032                  		subq.b	#1,$32(a0)
00013224 6A00                       		bpl.s	loc_12872
00013226 1168 0033 0032             		move.b	$33(a0),$32(a0)
0001322C 08E8 0007 0036             		bset	#7,$36(a0)
00013232                            
00013232                            loc_12872:
00013232 6000                       		bra.s	loc_1287C
00013234                            ; ===========================================================================
00013234                            
00013234                            loc_12874:				; XREF: Obj64_BblMaker
00013234 5368 0038                  		subq.w	#1,$38(a0)
00013238 6A00 0000                  		bpl.w	loc_12914
0001323C                            
0001323C                            loc_1287C:
0001323C 4EB9 0000 2D46             		jsr	(RandomNumber).l
00013242 0240 001F                  		andi.w	#$1F,d0
00013246 3140 0038                  		move.w	d0,$38(a0)
0001324A 6100 B232                  		bsr.w	SingleObjLoad
0001324E 6600                       		bne.s	loc_128F8
00013250 12BC 0064                  		move.b	#$64,0(a1)	; load bubble object
00013254 3368 0008 0008             		move.w	8(a0),8(a1)
0001325A 4EB9 0000 2D46             		jsr	(RandomNumber).l
00013260 0240 000F                  		andi.w	#$F,d0
00013264 5140                       		subq.w	#8,d0
00013266 D169 0008                  		add.w	d0,8(a1)
0001326A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00013270 7000                       		moveq	#0,d0
00013272 1028 0034                  		move.b	$34(a0),d0
00013276 2468 003C                  		movea.l	$3C(a0),a2
0001327A 1372 0000 0028             		move.b	(a2,d0.w),$28(a1)
00013280 0828 0007 0036             		btst	#7,$36(a0)
00013286 6700                       		beq.s	loc_128F8
00013288 4EB9 0000 2D46             		jsr	(RandomNumber).l
0001328E 0240 0003                  		andi.w	#3,d0
00013292 6600                       		bne.s	loc_128E4
00013294 08E8 0006 0036             		bset	#6,$36(a0)
0001329A 6600                       		bne.s	loc_128F8
0001329C 137C 0002 0028             		move.b	#2,$28(a1)
000132A2                            
000132A2                            loc_128E4:
000132A2 4A28 0034                  		tst.b	$34(a0)
000132A6 6600                       		bne.s	loc_128F8
000132A8 08E8 0006 0036             		bset	#6,$36(a0)
000132AE 6600                       		bne.s	loc_128F8
000132B0 137C 0002 0028             		move.b	#2,$28(a1)
000132B6                            
000132B6                            loc_128F8:
000132B6 5328 0034                  		subq.b	#1,$34(a0)
000132BA 6A00                       		bpl.s	loc_12914
000132BC 4EB9 0000 2D46             		jsr	(RandomNumber).l
000132C2 0240 007F                  		andi.w	#$7F,d0
000132C6 0640 0080                  		addi.w	#$80,d0
000132CA D168 0038                  		add.w	d0,$38(a0)
000132CE 4268 0036                  		clr.w	$36(a0)
000132D2                            
000132D2                            loc_12914:
000132D2 43F9 0000 0000             		lea	(Ani_obj64).l,a1
000132D8 4EB9 0000 B056             		jsr	AnimateSprite
000132DE                            
000132DE                            Obj64_ChkDel:				; XREF: Obj64_BblMaker
000132DE 3028 0008                  		move.w	8(a0),d0
000132E2 0240 FF80                  		andi.w	#$FF80,d0
000132E6 3238 F700                  		move.w	($FFFFF700).w,d1
000132EA 0441 0080                  		subi.w	#$80,d1
000132EE 0241 FF80                  		andi.w	#$FF80,d1
000132F2 9041                       		sub.w	d1,d0
000132F4 0C40 0280                  		cmpi.w	#$280,d0
000132F8 6200 AD3A                  		bhi.w	DeleteObject
000132FC 3038 F646                  		move.w	($FFFFF646).w,d0
00013300 B068 000C                  		cmp.w	$C(a0),d0
00013304 6500 ACF2                  		bcs.w	DisplaySprite
00013308 4E75                       		rts	
0001330A                            ; ===========================================================================
0001330A                            ; bubble production sequence
0001330A                            
0001330A                            ; 0 = small bubble, 1 =	large bubble
0001330A                            
0001330A 0001 0000 0000 0100 0000+  Obj64_BblTypes:	dc.b 0,	1, 0, 0, 0, 0, 1, 0, 0,	0, 0, 1, 0, 1, 0, 0, 1,	0
0001331C                            
0001331C                            ; ===========================================================================
0001331C                            
0001331C                            Obj64_ChkSonic:				; XREF: Obj64_Wobble
0001331C 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00013320 6B00                       		bmi.s	loc_12998
00013322 43F8 D000                  		lea	($FFFFD000).w,a1
00013326 3029 0008                  		move.w	8(a1),d0
0001332A 3228 0008                  		move.w	8(a0),d1
0001332E 0441 0010                  		subi.w	#$10,d1
00013332 B240                       		cmp.w	d0,d1
00013334 6400                       		bcc.s	loc_12998
00013336 0641 0020                  		addi.w	#$20,d1
0001333A B240                       		cmp.w	d0,d1
0001333C 6500                       		bcs.s	loc_12998
0001333E 3029 000C                  		move.w	$C(a1),d0
00013342 3228 000C                  		move.w	$C(a0),d1
00013346 B240                       		cmp.w	d0,d1
00013348 6400                       		bcc.s	loc_12998
0001334A 0641 0010                  		addi.w	#$10,d1
0001334E B240                       		cmp.w	d0,d1
00013350 6500                       		bcs.s	loc_12998
00013352 7001                       		moveq	#1,d0
00013354 4E75                       		rts	
00013356                            ; ===========================================================================
00013356                            
00013356                            loc_12998:
00013356 7000                       		moveq	#0,d0
00013358 4E75                       		rts	
0001335A                            ; ===========================================================================
0001335A                            Ani_obj64:
0001335A                            	include "_anim\obj64.asm"
0001335A                            ; ---------------------------------------------------------------------------
0001335A                            ; Animation script - bubbles (LZ)
0001335A                            ; ---------------------------------------------------------------------------
0001335A 0000                       		dc.w byte_129AA-Ani_obj64
0001335C 0000                       		dc.w byte_129B0-Ani_obj64
0001335E 0000                       		dc.w byte_129B6-Ani_obj64
00013360 0000                       		dc.w byte_129BE-Ani_obj64
00013362 0000                       		dc.w byte_129BE-Ani_obj64
00013364 0000                       		dc.w byte_129C0-Ani_obj64
00013366 0000                       		dc.w byte_129C6-Ani_obj64
00013368 0E00 0102 FC00             byte_129AA:	dc.b $E, 0, 1, 2, $FC, 0
0001336E 0E01 0203 04FC             byte_129B0:	dc.b $E, 1, 2, 3, 4, $FC
00013374 0E02 0304 0506 FC00        byte_129B6:	dc.b $E, 2, 3, 4, 5, 6,	$FC, 0
0001337C 04FC                       byte_129BE:	dc.b 4,	$FC
0001337E 0406 0708 FC00             byte_129C0:	dc.b 4,	6, 7, 8, $FC, 0
00013384 0F13 1415 FF               byte_129C6:	dc.b $F, $13, $14, $15,	$FF
0001338A 00                         		even
0001338A 00                         		even
0001338A                            
0001338A                            ; ---------------------------------------------------------------------------
0001338A                            ; Sprite mappings - bubbles (LZ)
0001338A                            ; ---------------------------------------------------------------------------
0001338A                            Map_obj64:
0001338A                            	include "_maps\obj64.asm"
0001338A                            ; ---------------------------------------------------------------------------
0001338A                            ; Sprite mappings - bubbles (LZ)
0001338A                            ; ---------------------------------------------------------------------------
0001338A 0000 0000                  		dc.w byte_129FA-Map_obj64, byte_12A00-Map_obj64
0001338E 0000 0000                  		dc.w byte_12A06-Map_obj64, byte_12A0C-Map_obj64
00013392 0000 0000                  		dc.w byte_12A12-Map_obj64, byte_12A18-Map_obj64
00013396 0000 0000                  		dc.w byte_12A1E-Map_obj64, byte_12A24-Map_obj64
0001339A 0000 0000                  		dc.w byte_12A39-Map_obj64, byte_12A4E-Map_obj64
0001339E 0000 0000                  		dc.w byte_12A54-Map_obj64, byte_12A5A-Map_obj64
000133A2 0000 0000                  		dc.w byte_12A60-Map_obj64, byte_12A66-Map_obj64
000133A6 0000 0000                  		dc.w byte_12A6C-Map_obj64, byte_12A72-Map_obj64
000133AA 0000 0000                  		dc.w byte_12A78-Map_obj64, byte_12A7E-Map_obj64
000133AE 0000 0000                  		dc.w byte_12A84-Map_obj64, byte_12A8A-Map_obj64
000133B2 0000 0000                  		dc.w byte_12A90-Map_obj64, byte_12A96-Map_obj64
000133B6 0000                       		dc.w byte_12A9C-Map_obj64
000133B8 01                         byte_129FA:	dc.b 1
000133B9 FC00 0000 FC               		dc.b $FC, 0, 0,	0, $FC
000133BE 01                         byte_12A00:	dc.b 1
000133BF FC00 0001 FC               		dc.b $FC, 0, 0,	1, $FC
000133C4 01                         byte_12A06:	dc.b 1
000133C5 FC00 0002 FC               		dc.b $FC, 0, 0,	2, $FC
000133CA 01                         byte_12A0C:	dc.b 1
000133CB F805 0003 F8               		dc.b $F8, 5, 0,	3, $F8
000133D0 01                         byte_12A12:	dc.b 1
000133D1 F805 0007 F8               		dc.b $F8, 5, 0,	7, $F8
000133D6 01                         byte_12A18:	dc.b 1
000133D7 F40A 000B F4               		dc.b $F4, $A, 0, $B, $F4
000133DC 01                         byte_12A1E:	dc.b 1
000133DD F00F 0014 F0               		dc.b $F0, $F, 0, $14, $F0
000133E2 04                         byte_12A24:	dc.b 4
000133E3 F005 0024 F0               		dc.b $F0, 5, 0,	$24, $F0
000133E8 F005 0824 00               		dc.b $F0, 5, 8,	$24, 0
000133ED 0005 1024 F0               		dc.b 0,	5, $10,	$24, $F0
000133F2 0005 1824 00               		dc.b 0,	5, $18,	$24, 0
000133F7 04                         byte_12A39:	dc.b 4
000133F8 F005 0028 F0               		dc.b $F0, 5, 0,	$28, $F0
000133FD F005 0828 00               		dc.b $F0, 5, 8,	$28, 0
00013402 0005 1028 F0               		dc.b 0,	5, $10,	$28, $F0
00013407 0005 1828 00               		dc.b 0,	5, $18,	$28, 0
0001340C 01                         byte_12A4E:	dc.b 1
0001340D F406 002C F8               		dc.b $F4, 6, 0,	$2C, $F8
00013412 01                         byte_12A54:	dc.b 1
00013413 F406 0032 F8               		dc.b $F4, 6, 0,	$32, $F8
00013418 01                         byte_12A5A:	dc.b 1
00013419 F406 0038 F8               		dc.b $F4, 6, 0,	$38, $F8
0001341E 01                         byte_12A60:	dc.b 1
0001341F F406 003E F8               		dc.b $F4, 6, 0,	$3E, $F8
00013424 01                         byte_12A66:	dc.b 1
00013425 F406 2044 F8               		dc.b $F4, 6, $20, $44, $F8
0001342A 01                         byte_12A6C:	dc.b 1
0001342B F406 204A F8               		dc.b $F4, 6, $20, $4A, $F8
00013430 01                         byte_12A72:	dc.b 1
00013431 F406 2050 F8               		dc.b $F4, 6, $20, $50, $F8
00013436 01                         byte_12A78:	dc.b 1
00013437 F406 2056 F8               		dc.b $F4, 6, $20, $56, $F8
0001343C 01                         byte_12A7E:	dc.b 1
0001343D F406 205C F8               		dc.b $F4, 6, $20, $5C, $F8
00013442 01                         byte_12A84:	dc.b 1
00013443 F406 2062 F8               		dc.b $F4, 6, $20, $62, $F8
00013448 01                         byte_12A8A:	dc.b 1
00013449 F805 0068 F8               		dc.b $F8, 5, 0,	$68, $F8
0001344E 01                         byte_12A90:	dc.b 1
0001344F F805 006C F8               		dc.b $F8, 5, 0,	$6C, $F8
00013454 01                         byte_12A96:	dc.b 1
00013455 F805 0070 F8               		dc.b $F8, 5, 0,	$70, $F8
0001345A 00                         byte_12A9C:	dc.b 0
0001345C 00                         		even
0001345C 00                         		even
0001345C                            
0001345C                            ; ===========================================================================
0001345C                            ; ---------------------------------------------------------------------------
0001345C                            ; Object 65 - waterfalls (LZ)
0001345C                            ; ---------------------------------------------------------------------------
0001345C                            
0001345C                            Obj65:					; XREF: Obj_Index
0001345C 7000                       		moveq	#0,d0
0001345E 1028 0024                  		move.b	$24(a0),d0
00013462 323B 0000                  		move.w	Obj65_Index(pc,d0.w),d1
00013466 4EFB 1000                  		jmp	Obj65_Index(pc,d1.w)
0001346A                            ; ===========================================================================
0001346A 0000                       Obj65_Index:	dc.w Obj65_Main-Obj65_Index
0001346C 0000                       		dc.w Obj65_Animate-Obj65_Index
0001346E 0000                       		dc.w Obj65_ChkDel-Obj65_Index
00013470 0000                       		dc.w Obj65_FixHeight-Obj65_Index
00013472 0000                       		dc.w loc_12B36-Obj65_Index
00013474                            ; ===========================================================================
00013474                            
00013474                            Obj65_Main:				; XREF: Obj65_Index
00013474 5828 0024                  		addq.b	#4,$24(a0)
00013478 217C 0000 0000 0004        		move.l	#Map_obj65,4(a0)
00013480 317C 4259 0002             		move.w	#$4259,2(a0)
00013486 0028 0004 0001             		ori.b	#4,1(a0)
0001348C 117C 0018 0019             		move.b	#$18,$19(a0)
00013492 117C 0001 0018             		move.b	#1,$18(a0)
00013498 1028 0028                  		move.b	$28(a0),d0	; get object type
0001349C 6A00                       		bpl.s	loc_12AE6
0001349E 08E8 0007 0002             		bset	#7,2(a0)
000134A4                            
000134A4                            loc_12AE6:
000134A4 0200 000F                  		andi.b	#$F,d0		; read only the	2nd byte
000134A8 1140 001A                  		move.b	d0,$1A(a0)	; set frame number
000134AC 0C00 0009                  		cmpi.b	#9,d0		; is object type $x9 ?
000134B0 6600                       		bne.s	Obj65_ChkDel	; if not, branch
000134B2 4228 0018                  		clr.b	$18(a0)
000134B6 5528 0024                  		subq.b	#2,$24(a0)
000134BA 0828 0006 0028             		btst	#6,$28(a0)	; is object type $4x ?
000134C0 6700                       		beq.s	loc_12B0A	; if not, branch
000134C2 117C 0006 0024             		move.b	#6,$24(a0)
000134C8                            
000134C8                            loc_12B0A:
000134C8 0828 0005 0028             		btst	#5,$28(a0)	; is object type $Ax ?
000134CE 6700                       		beq.s	Obj65_Animate	; if not, branch
000134D0 117C 0008 0024             		move.b	#8,$24(a0)
000134D6                            
000134D6                            Obj65_Animate:				; XREF: Obj65_Index
000134D6 43F9 0000 0000             		lea	(Ani_obj65).l,a1
000134DC 4EB9 0000 B056             		jsr	AnimateSprite
000134E2                            
000134E2                            Obj65_ChkDel:				; XREF: Obj65_Index
000134E2 6000 CBBC                  		bra.w	MarkObjGone
000134E6                            ; ===========================================================================
000134E6                            
000134E6                            Obj65_FixHeight:			; XREF: Obj65_Index
000134E6 3038 F646                  		move.w	($FFFFF646).w,d0
000134EA 0440 0010                  		subi.w	#$10,d0
000134EE 3140 000C                  		move.w	d0,$C(a0)	; match	object position	to water height
000134F2 60E2                       		bra.s	Obj65_Animate
000134F4                            ; ===========================================================================
000134F4                            
000134F4                            loc_12B36:				; XREF: Obj65_Index
000134F4 08A8 0007 0002             		bclr	#7,2(a0)
000134FA 0C38 0007 A506             		cmpi.b	#7,($FFFFA506).w
00013500 6600                       		bne.s	Obj65_Animate2
00013502 08E8 0007 0002             		bset	#7,2(a0)
00013508                            
00013508                            Obj65_Animate2:
00013508 60CC                       		bra.s	Obj65_Animate
0001350A                            ; ===========================================================================
0001350A                            Ani_obj65:
0001350A                            	include "_anim\obj65.asm"
0001350A                            ; ---------------------------------------------------------------------------
0001350A                            ; Animation script - waterfall (LZ)
0001350A                            ; ---------------------------------------------------------------------------
0001350A 0000                       		dc.w byte_12B4E-Ani_obj65
0001350C 0509 0A0B FF               byte_12B4E:	dc.b 5,	9, $A, $B, $FF
00013512 00                         		even
00013512 00                         		even
00013512                            
00013512                            ; ---------------------------------------------------------------------------
00013512                            ; Sprite mappings - waterfalls (LZ)
00013512                            ; ---------------------------------------------------------------------------
00013512                            Map_obj65:
00013512                            	include "_maps\obj65.asm"
00013512                            ; ---------------------------------------------------------------------------
00013512                            ; Sprite mappings - waterfalls (LZ)
00013512                            ; ---------------------------------------------------------------------------
00013512 0000 0000                  		dc.w byte_12B6C-Map_obj65, byte_12B72-Map_obj65
00013516 0000 0000                  		dc.w byte_12B7D-Map_obj65, byte_12B88-Map_obj65
0001351A 0000 0000                  		dc.w byte_12B8E-Map_obj65, byte_12B99-Map_obj65
0001351E 0000 0000                  		dc.w byte_12B9F-Map_obj65, byte_12BA5-Map_obj65
00013522 0000 0000                  		dc.w byte_12BAB-Map_obj65, byte_12BB6-Map_obj65
00013526 0000 0000                  		dc.w byte_12BC1-Map_obj65, byte_12BCC-Map_obj65
0001352A 01                         byte_12B6C:	dc.b 1
0001352B F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
00013530 02                         byte_12B72:	dc.b 2
00013531 F804 0008 FC               		dc.b $F8, 4, 0,	8, $FC
00013536 0008 000A F4               		dc.b 0,	8, 0, $A, $F4
0001353B 02                         byte_12B7D:	dc.b 2
0001353C F800 0008 00               		dc.b $F8, 0, 0,	8, 0
00013541 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
00013546 01                         byte_12B88:	dc.b 1
00013547 F801 000F 00               		dc.b $F8, 1, 0,	$F, 0
0001354C 02                         byte_12B8E:	dc.b 2
0001354D F800 0008 00               		dc.b $F8, 0, 0,	8, 0
00013552 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
00013557 01                         byte_12B99:	dc.b 1
00013558 F801 0011 00               		dc.b $F8, 1, 0,	$11, 0
0001355D 01                         byte_12B9F:	dc.b 1
0001355E F801 0013 00               		dc.b $F8, 1, 0,	$13, 0
00013563 01                         byte_12BA5:	dc.b 1
00013564 F007 0015 F8               		dc.b $F0, 7, 0,	$15, $F8
00013569 02                         byte_12BAB:	dc.b 2
0001356A F80C 001D F6               		dc.b $F8, $C, 0, $1D, $F6
0001356F 000C 0021 E8               		dc.b 0,	$C, 0, $21, $E8
00013574 02                         byte_12BB6:	dc.b 2
00013575 F00B 0025 E8               		dc.b $F0, $B, 0, $25, $E8
0001357A F00B 0031 00               		dc.b $F0, $B, 0, $31, 0
0001357F 02                         byte_12BC1:	dc.b 2
00013580 F00B 003D E8               		dc.b $F0, $B, 0, $3D, $E8
00013585 F00B 0049 00               		dc.b $F0, $B, 0, $49, 0
0001358A 02                         byte_12BCC:	dc.b 2
0001358B F00B 0055 E8               		dc.b $F0, $B, 0, $55, $E8
00013590 F00B 0061 00               		dc.b $F0, $B, 0, $61, 0
00013596 00                         		even
00013596 00                         		even
00013596                            
00013596                            ; ===========================================================================
00013596                            ; ---------------------------------------------------------------------------
00013596                            ; Object 01 - Sonic
00013596                            ; ---------------------------------------------------------------------------
00013596                            
00013596                            Obj01:					; XREF: Obj_Index
00013596 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
0001359A 6700                       		beq.s	Obj01_Normal	; if not, branch
0001359C 4EF9 0000 0000             		jmp	DebugMode
000135A2                            ; ===========================================================================
000135A2                            
000135A2                            Obj01_Normal:
000135A2 7000                       		moveq	#0,d0
000135A4 1028 0024                  		move.b	$24(a0),d0
000135A8 323B 0000                  		move.w	Obj01_Index(pc,d0.w),d1
000135AC 4EFB 1000                  		jmp	Obj01_Index(pc,d1.w)
000135B0                            ; ===========================================================================
000135B0 0000                       Obj01_Index:	dc.w Obj01_Main-Obj01_Index
000135B2 0000                       		dc.w Obj01_Control-Obj01_Index
000135B4 0000                       		dc.w Obj01_Hurt-Obj01_Index
000135B6 0000                       		dc.w Obj01_Death-Obj01_Index
000135B8 0000                       		dc.w Obj01_ResetLevel-Obj01_Index
000135BA                            ; ===========================================================================
000135BA                            
000135BA                            Player_Maps:
000135BA 0000 0000                  	dc.l	Map_Sonic
000135BE 0000 0000                  	dc.l	Map_Sonic ; gronic
000135C2 0000 0000                  	dc.l	Map_Sonic ; anakama
000135C6 0000 0000                  	dc.l	Map_Sonic ; LimitedSonic
000135CA                            	; insert player mapping here
000135CA                            	
000135CA                            Obj01_Main:				; XREF: Obj01_Index
000135CA 5428 0024                  		addq.b	#2,$24(a0)
000135CE 117C 0013 0016             		move.b	#$13,$16(a0)
000135D4 117C 0009 0017             		move.b	#9,$17(a0)
000135DA                            		
000135DA 7000                       		moveq	#0,d0
000135DC 1038 FFE8                  		move.b	(v_character),d0
000135E0 E548                       		lsl.w	#2,d0
000135E2 43FA FFD6                  		lea 	Player_Maps(pc),a1
000135E6 2171 0000 0004             		move.l	(a1,d0.w),4(a0)	; load Map patterns
000135EC                            		
000135EC 317C 0780 0002             		move.w	#$780,2(a0)
000135F2 117C 0002 0018             		move.b	#2,$18(a0)
000135F8 117C 0018 0019             		move.b	#$18,$19(a0)
000135FE 117C 0004 0001             		move.b	#4,1(a0)
00013604 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; Sonic's top speed
0001360A 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; Sonic's acceleration
00013610 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; Sonic's deceleration
00013616                            
00013616                            Obj01_Control:				; XREF: Obj01_Index
00013616 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug cheat enabled?
0001361A 6700                       		beq.s	loc_12C58	; if not, branch
0001361C 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button C pressed?
00013622 6700                       		beq.s	loc_12C58	; if not, branch
00013624 31FC 0001 FE08             		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring/item
0001362A 4238 F7CC                  		clr.b	($FFFFF7CC).w
0001362E 4E75                       		rts	
00013630                            ; ===========================================================================
00013630                            
00013630                            loc_12C58:
00013630 4A38 F7CC                  		tst.b	($FFFFF7CC).w	; are controls locked?
00013634 6600                       		bne.s	loc_12C64	; if yes, branch
00013636 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w ; enable joypad control
0001363C                            
0001363C                            loc_12C64:
0001363C 0838 0000 F7C8             		btst	#0,($FFFFF7C8).w ; are controls	locked?
00013642 6600                       		bne.s	loc_12C7E	; if yes, branch
00013644 7000                       		moveq	#0,d0
00013646 1028 0022                  		move.b	$22(a0),d0
0001364A 0240 0006                  		andi.w	#6,d0
0001364E 323B 0000                  		move.w	Obj01_Modes(pc,d0.w),d1
00013652 4EBB 1000                  		jsr	Obj01_Modes(pc,d1.w)
00013656                            
00013656                            loc_12C7E:
00013656 6100                       		bsr.s	Sonic_Display
00013658 6100 0000                  		bsr.w	Sonic_RecordPos
0001365C 6100 0000                  		bsr.w	Sonic_Water
00013660 1178 F768 0036             		move.b	($FFFFF768).w,$36(a0)
00013666 1178 F76A 0037             		move.b	($FFFFF76A).w,$37(a0)
0001366C 4A38 F7C7                  		tst.b	($FFFFF7C7).w
00013670 6700                       		beq.s	loc_12CA6
00013672 4A28 001C                  		tst.b	$1C(a0)
00013676 6600                       		bne.s	loc_12CA6
00013678 1168 001D 001C             		move.b	$1D(a0),$1C(a0)
0001367E                            
0001367E                            loc_12CA6:
0001367E 6100 0000                  		bsr.w	Sonic_Animate
00013682 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00013686 6B00                       		bmi.s	loc_12CB6
00013688 4EB9 0000 0000             		jsr	TouchResponse
0001368E                            
0001368E                            loc_12CB6:
0001368E 6100 0000                  		bsr.w	Sonic_Loops
00013692 6100 0000                  		bsr.w	LoadSonicDynPLC
00013696 4E75                       		rts	
00013698                            ; ===========================================================================
00013698 0000                       Obj01_Modes:	dc.w Obj01_MdNormal-Obj01_Modes
0001369A 0000                       		dc.w Obj01_MdJump-Obj01_Modes
0001369C 0000                       		dc.w Obj01_MdRoll-Obj01_Modes
0001369E 0000                       		dc.w Obj01_MdJump2-Obj01_Modes
000136A0                            ; ---------------------------------------------------------------------------
000136A0                            ; Music	to play	after invincibility wears off
000136A0                            ; ---------------------------------------------------------------------------
000136A0                            ; ===========================================================================
000136A0                            
000136A0                            Sonic_Display:				; XREF: loc_12C7E
000136A0 3028 0030                  		move.w	$30(a0),d0
000136A4 6700                       		beq.s	Obj01_Display
000136A6 5368 0030                  		subq.w	#1,$30(a0)
000136AA E648                       		lsr.w	#3,d0
000136AC 6400                       		bcc.s	Obj01_ChkInvin
000136AE                            
000136AE                            Obj01_Display:
000136AE 4EBA A948                  		jsr	DisplaySprite
000136B2                            
000136B2                            ; Second part of the NineKode. Play different music on different acts - after invincibility wears off
000136B2                             
000136B2                            Obj01_ChkInvin:
000136B2 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
000136B6 6700 0000                  		beq.w	Obj01_ChkShoes	; if not, branch	; change to beq.w
000136BA 4A68 0032                  		tst.w	$32(a0)		; check	time remaining for invinciblity
000136BE 6700 0000                  		beq.w	Obj01_ChkShoes	; if no	time remains, branch	; change to beq.w
000136C2 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time
000136C6 6600 0000                  		bne.w	Obj01_ChkShoes	; change to bne.w
000136CA 4A38 F7AA                  		tst.b	($FFFFF7AA).w
000136CE 6600 0000                  		bne.w	Obj01_RmvInvin	; change to bne.w
000136D2 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
000136D8 6500 0000                  		bcs.w	Obj01_RmvInvin	; change to bcs.w
000136DC 7000                       		moveq	#0,d0
000136DE 1038 FE10                  		move.b	($FFFFFE10).w,d0
000136E2                             
000136E2 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
000136E8 6600                       		bne.s	Obj01_GetBgm2	; if not, branch
000136EA 43F9 0000 3D90             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
000136F0 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
000136F2                             
000136F2                            Obj01_GetBgm2:
000136F2 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
000136F8 6600                       		bne.s	Obj01_GetBgm3	; if not, branch
000136FA 43F9 0000 3D98             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
00013700 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
00013702                             
00013702                            Obj01_GetBgm3:
00013702 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
00013708 6600                       		bne.s	Obj01_GetBgm4	; if not, branch
0001370A 43F9 0000 3DA0             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 3
00013710 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
00013712                             
00013712                            Obj01_GetBgm4:
00013712 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
00013718 6600                       		bne.s	Obj01_PlayMusic	; if not, branch
0001371A 43F9 0000 3DA6             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
00013720                             
00013720                            Obj01_PlayMusic:
00013720 1031 0000                  		move.b	(a1,d0.w),d0
00013724 4EB9 0000 15CC             		jsr	(PlaySound).l	; play normal music
0001372A                             
0001372A                            ; NineKode ends here.
0001372A                            
0001372A                            Obj01_RmvInvin:
0001372A 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; cancel invincibility
00013730                            
00013730                            Obj01_ChkShoes:
00013730 4A38 FE2E                  		tst.b	($FFFFFE2E).w	; does Sonic have speed	shoes?
00013734 6700                       		beq.s	Obj01_ExitChk	; if not, branch
00013736 4A68 0034                  		tst.w	$34(a0)		; check	time remaining
0001373A 6700                       		beq.s	Obj01_ExitChk
0001373C 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time
00013740 6600                       		bne.s	Obj01_ExitChk
00013742 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
00013748 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
0001374E 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
00013754 11FC 0000 FE2E             		move.b	#0,($FFFFFE2E).w ; cancel speed	shoes
0001375A 303C 00E3                  		move.w	#$E3,d0
0001375E 4EF9 0000 15CC             		jmp	(PlaySound).l	; run music at normal speed
00013764                            ; ===========================================================================
00013764                            
00013764                            Obj01_ExitChk:
00013764 4E75                       		rts	
00013766                            
00013766                            ; ---------------------------------------------------------------------------
00013766                            ; Subroutine to	record Sonic's previous positions for invincibility stars
00013766                            ; ---------------------------------------------------------------------------
00013766                            
00013766                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013766                            
00013766                            
00013766                            Sonic_RecordPos:			; XREF: loc_12C7E; Obj01_Hurt; Obj01_Death
00013766 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
0001376A 43F8 CB00                  		lea	($FFFFCB00).w,a1
0001376E 43F1 0000                  		lea	(a1,d0.w),a1
00013772 32E8 0008                  		move.w	8(a0),(a1)+
00013776 32E8 000C                  		move.w	$C(a0),(a1)+
0001377A 5838 F7A9                  		addq.b	#4,($FFFFF7A9).w
0001377E 4E75                       		rts	
00013780                            ; End of function Sonic_RecordPos
00013780                            
00013780                            ; ---------------------------------------------------------------------------
00013780                            ; Subroutine for Sonic when he's underwater
00013780                            ; ---------------------------------------------------------------------------
00013780                            
00013780                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013780                            
00013780                            
00013780                            Sonic_Water:				; XREF: loc_12C7E
00013780 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00013786 6700                       		beq.s	Obj01_InWater	; if yes, branch
00013788                            
00013788                            locret_12D80:
00013788 4E75                       		rts	
0001378A                            ; ===========================================================================
0001378A                            
0001378A                            Obj01_InWater:
0001378A 3038 F646                  		move.w	($FFFFF646).w,d0
0001378E B068 000C                  		cmp.w	$C(a0),d0	; is Sonic above the water?
00013792 6C00                       		bge.s	Obj01_OutWater	; if yes, branch
00013794 08E8 0006 0022             		bset	#6,$22(a0)
0001379A 66EC                       		bne.s	locret_12D80
0001379C 6100 0000                  		bsr.w	ResumeMusic
000137A0 11FC 000A D340             		move.b	#$A,($FFFFD340).w ; load bubbles object	from Sonic's mouth
000137A6 11FC 0081 D368             		move.b	#$81,($FFFFD368).w
000137AC 31FC 0300 F760             		move.w	#$300,($FFFFF760).w ; change Sonic's top speed
000137B2 31FC 0006 F762             		move.w	#6,($FFFFF762).w ; change Sonic's acceleration
000137B8 31FC 0040 F764             		move.w	#$40,($FFFFF764).w ; change Sonic's deceleration
000137BE E0E8 0010                  		asr	$10(a0)
000137C2 E0E8 0012                  		asr	$12(a0)
000137C6 E0E8 0012                  		asr	$12(a0)
000137CA 67BC                       		beq.s	locret_12D80
000137CC 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
000137D2 303C 00AA                  		move.w	#$AA,d0
000137D6 4EF9 0000 15D2             		jmp	(PlaySound_Special).l ;	play splash sound
000137DC                            ; ===========================================================================
000137DC                            
000137DC                            Obj01_OutWater:
000137DC 08A8 0006 0022             		bclr	#6,$22(a0)
000137E2 67A4                       		beq.s	locret_12D80
000137E4 6100 0000                  		bsr.w	ResumeMusic
000137E8 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
000137EE 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
000137F4 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
000137FA E1E8 0012                  		asl	$12(a0)
000137FE 6700 FF88                  		beq.w	locret_12D80
00013802 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
00013808 0C68 F000 0012             		cmpi.w	#-$1000,$12(a0)
0001380E 6E00                       		bgt.s	loc_12E0E
00013810 317C F000 0012             		move.w	#-$1000,$12(a0)	; set maximum speed on leaving water
00013816                            
00013816                            loc_12E0E:
00013816 303C 00AA                  		move.w	#$AA,d0
0001381A 4EF9 0000 15D2             		jmp	(PlaySound_Special).l ;	play splash sound
00013820                            ; End of function Sonic_Water
00013820                            
00013820                            ; ===========================================================================
00013820                            ; ---------------------------------------------------------------------------
00013820                            ; Modes	for controlling	Sonic
00013820                            ; ---------------------------------------------------------------------------
00013820                            
00013820                            Obj01_MdNormal:				; XREF: Obj01_Modes
00013820 6100 0000                  		bsr.w	Sonic_Jump
00013824 6100 0000                  		bsr.w	Sonic_SlopeResist
00013828 6100 0000                  		bsr.w	Sonic_Move
0001382C 6100 0000                  		bsr.w	Sonic_Roll
00013830 6100 0000                  		bsr.w	Sonic_LevelBound
00013834 4EBA A79C                  		jsr	SpeedToPos
00013838 6100 0000                  		bsr.w	Sonic_AnglePos
0001383C 6100 0000                  		bsr.w	Sonic_SlopeRepel
00013840 4E75                       		rts	
00013842                            ; ===========================================================================
00013842                            
00013842                            Obj01_MdJump:				; XREF: Obj01_Modes
00013842 6100 0000                  		bsr.w	Sonic_JumpHeight
00013846 6100 0000                  		bsr.w	Sonic_ChgJumpDir
0001384A 6100 0000                  		bsr.w	Sonic_LevelBound
0001384E 4EBA A710                  		jsr	ObjectFall
00013852 0828 0006 0022             		btst	#6,$22(a0)
00013858 6700                       		beq.s	loc_12E5C
0001385A 0468 0028 0012             		subi.w	#$28,$12(a0)
00013860                            
00013860                            loc_12E5C:
00013860 6100 0000                  		bsr.w	Sonic_JumpAngle
00013864 6100 0000                  		bsr.w	Sonic_Floor
00013868 4E75                       		rts	
0001386A                            ; ===========================================================================
0001386A                            
0001386A                            Obj01_MdRoll:				; XREF: Obj01_Modes
0001386A 6100 0000                  		bsr.w	Sonic_Jump
0001386E 6100 0000                  		bsr.w	Sonic_RollRepel
00013872 6100 0000                  		bsr.w	Sonic_RollSpeed
00013876 6100 0000                  		bsr.w	Sonic_LevelBound
0001387A 4EBA A756                  		jsr	SpeedToPos
0001387E 6100 0000                  		bsr.w	Sonic_AnglePos
00013882 6100 0000                  		bsr.w	Sonic_SlopeRepel
00013886 4E75                       		rts	
00013888                            ; ===========================================================================
00013888                            
00013888                            Obj01_MdJump2:				; XREF: Obj01_Modes
00013888 6100 0000                  		bsr.w	Sonic_JumpHeight
0001388C 6100 0000                  		bsr.w	Sonic_ChgJumpDir
00013890 6100 0000                  		bsr.w	Sonic_LevelBound
00013894 6100 0000                  		bsr.w	Sonic_AirUnroll
00013898 4EBA A6C6                  		jsr	ObjectFall
0001389C 0828 0006 0022             		btst	#6,$22(a0)
000138A2 6700                       		beq.s	loc_12EA6
000138A4 0468 0028 0012             		subi.w	#$28,$12(a0)
000138AA                            
000138AA                            loc_12EA6:
000138AA 6100 0000                  		bsr.w	Sonic_JumpAngle
000138AE 6100 0000                  		bsr.w	Sonic_Floor
000138B2 4E75                       		rts	
000138B4                            ; ---------------------------------------------------------------------------
000138B4                            ; Subroutine to	make Sonic walk/run
000138B4                            ; ---------------------------------------------------------------------------
000138B4                            
000138B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000138B4                            
000138B4                            
000138B4                            Sonic_Move:				; XREF: Obj01_MdNormal
000138B4 3C38 F760                  		move.w	($FFFFF760).w,d6
000138B8 3A38 F762                  		move.w	($FFFFF762).w,d5
000138BC 3838 F764                  		move.w	($FFFFF764).w,d4
000138C0 4A38 F7CA                  		tst.b	($FFFFF7CA).w
000138C4 6600 0000                  		bne.w	loc_12FEE
000138C8 4A68 003E                  		tst.w	$3E(a0)
000138CC 6600 0000                  		bne.w	Obj01_ResetScr
000138D0 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
000138D6 6700                       		beq.s	Obj01_NotLeft	; if not, branch
000138D8 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
000138DE 6600                       		bne.s	Obj01_MoveRight	; GMZ: If yes, branch
000138E0 6100 0000                  		bsr.w	Sonic_MoveLeft
000138E4                            
000138E4                            Obj01_NotLeft:
000138E4 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
000138EA 6700                       		beq.s	Obj01_NotRight	; if not, branch
000138EC 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
000138F2 6700                       		beq.s	Obj01_MoveRight	; GMZ: If not, branch
000138F4 6100 0000                  		bsr.w	Sonic_MoveLeft
000138F8 6000                       		bra.s	Obj01_NotRight
000138FA                            
000138FA                            Obj01_MoveRight:
000138FA 6100 0000                  		bsr.w	Sonic_MoveRight
000138FE                            
000138FE                            Obj01_NotRight:
000138FE 1028 0026                  		move.b	$26(a0),d0
00013902 0600 0020                  		addi.b	#$20,d0
00013906 0200 00C0                  		andi.b	#$C0,d0		; is Sonic on a	slope?
0001390A 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
0001390E 4A68 0014                  		tst.w	$14(a0)		; is Sonic moving?
00013912 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
00013916 08A8 0005 0022             		bclr	#5,$22(a0)
0001391C 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
00013922 0828 0003 0022             		btst	#3,$22(a0)
00013928 6700                       		beq.s	Sonic_Balance
0001392A 7000                       		moveq	#0,d0
0001392C 1028 003D                  		move.b	$3D(a0),d0
00013930 ED48                       		lsl.w	#6,d0
00013932 43F8 D000                  		lea	($FFFFD000).w,a1
00013936 43F1 0000                  		lea	(a1,d0.w),a1
0001393A 4A29 0022                  		tst.b	$22(a1)
0001393E 6B00                       		bmi.s	Sonic_LookUp
00013940 7200                       		moveq	#0,d1
00013942 1229 0019                  		move.b	$19(a1),d1
00013946 3401                       		move.w	d1,d2
00013948 D442                       		add.w	d2,d2
0001394A 5942                       		subq.w	#4,d2
0001394C D268 0008                  		add.w	8(a0),d1
00013950 9269 0008                  		sub.w	8(a1),d1
00013954 0C41 0004                  		cmpi.w	#4,d1
00013958 6D00                       		blt.s	loc_12F6A
0001395A B242                       		cmp.w	d2,d1
0001395C 6C00                       		bge.s	loc_12F5A
0001395E 6000                       		bra.s	Sonic_LookUp
00013960                            ; ===========================================================================
00013960                            
00013960                            Sonic_Balance:
00013960 4EB9 0000 0000             		jsr	ObjHitFloor
00013966 0C41 000C                  		cmpi.w	#$C,d1
0001396A 6D00                       		blt.s	Sonic_LookUp
0001396C 0C28 0003 0036             		cmpi.b	#3,$36(a0)
00013972 6600                       		bne.s	loc_12F62
00013974                            
00013974                            loc_12F5A:
00013974 08A8 0000 0022             		bclr	#0,$22(a0)
0001397A 6000                       		bra.s	loc_12F70
0001397C                            ; ===========================================================================
0001397C                            
0001397C                            loc_12F62:
0001397C 0C28 0003 0037             		cmpi.b	#3,$37(a0)
00013982 6600                       		bne.s	Sonic_LookUp
00013984                            
00013984                            loc_12F6A:
00013984 08E8 0000 0022             		bset	#0,$22(a0)
0001398A                            
0001398A                            loc_12F70:
0001398A 117C 0006 001C             		move.b	#6,$1C(a0)	; use "balancing" animation
00013990 6000                       		bra.s	Obj01_ResetScr
00013992                            ; ===========================================================================
00013992                            
00013992                            Sonic_LookUp:
00013992 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up being pressed?
00013998 6700                       		beq.s	Sonic_Duck	; if not, branch
0001399A 117C 0007 001C             		move.b	#7,$1C(a0)	; use "looking up" animation
000139A0 0C78 00C8 F73E             		cmpi.w	#$C8,($FFFFF73E).w
000139A6 6700                       		beq.s	loc_12FC2
000139A8 5478 F73E                  		addq.w	#2,($FFFFF73E).w
000139AC 6000                       		bra.s	loc_12FC2
000139AE                            ; ===========================================================================
000139AE                            
000139AE                            Sonic_Duck:
000139AE 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
000139B4 6700                       		beq.s	Obj01_ResetScr	; if not, branch
000139B6 117C 0008 001C             		move.b	#8,$1C(a0)	; use "ducking"	animation
000139BC 0C78 0008 F73E             		cmpi.w	#8,($FFFFF73E).w
000139C2 6700                       		beq.s	loc_12FC2
000139C4 5578 F73E                  		subq.w	#2,($FFFFF73E).w
000139C8 6000                       		bra.s	loc_12FC2
000139CA                            ; ===========================================================================
000139CA                            
000139CA                            Obj01_ResetScr:
000139CA 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	screen in its default position?
000139D0 6700                       		beq.s	loc_12FC2	; if yes, branch
000139D2 6400                       		bcc.s	loc_12FBE
000139D4 5878 F73E                  		addq.w	#4,($FFFFF73E).w ; move	screen back to default
000139D8                            
000139D8                            loc_12FBE:
000139D8 5578 F73E                  		subq.w	#2,($FFFFF73E).w ; move	screen back to default
000139DC                            
000139DC                            loc_12FC2:
000139DC 1038 F602                  		move.b	($FFFFF602).w,d0
000139E0 0200 000C                  		andi.b	#$C,d0		; is left/right	pressed?
000139E4 6600                       		bne.s	loc_12FEE	; if yes, branch
000139E6 3028 0014                  		move.w	$14(a0),d0
000139EA 6700                       		beq.s	loc_12FEE
000139EC 6B00                       		bmi.s	loc_12FE2
000139EE 9045                       		sub.w	d5,d0
000139F0 6400                       		bcc.s	loc_12FDC
000139F2 303C 0000                  		move.w	#0,d0
000139F6                            
000139F6                            loc_12FDC:
000139F6 3140 0014                  		move.w	d0,$14(a0)
000139FA 6000                       		bra.s	loc_12FEE
000139FC                            ; ===========================================================================
000139FC                            
000139FC                            loc_12FE2:
000139FC D045                       		add.w	d5,d0
000139FE 6400                       		bcc.s	loc_12FEA
00013A00 303C 0000                  		move.w	#0,d0
00013A04                            
00013A04                            loc_12FEA:
00013A04 3140 0014                  		move.w	d0,$14(a0)
00013A08                            
00013A08                            loc_12FEE:
00013A08 1028 0026                  		move.b	$26(a0),d0
00013A0C 4EB9 0000 2D6C             		jsr	(CalcSine).l
00013A12 C3E8 0014                  		muls.w	$14(a0),d1
00013A16 E081                       		asr.l	#8,d1
00013A18 3141 0010                  		move.w	d1,$10(a0)
00013A1C C1E8 0014                  		muls.w	$14(a0),d0
00013A20 E080                       		asr.l	#8,d0
00013A22 3140 0012                  		move.w	d0,$12(a0)
00013A26                            
00013A26                            loc_1300C:
00013A26 1028 0026                  		move.b	$26(a0),d0
00013A2A 0600 0040                  		addi.b	#$40,d0
00013A2E 6B00                       		bmi.s	locret_1307C
00013A30 123C 0040                  		move.b	#$40,d1
00013A34 4A68 0014                  		tst.w	$14(a0)
00013A38 6700                       		beq.s	locret_1307C
00013A3A 6B00                       		bmi.s	loc_13024
00013A3C 4441                       		neg.w	d1
00013A3E                            
00013A3E                            loc_13024:
00013A3E 1028 0026                  		move.b	$26(a0),d0
00013A42 D001                       		add.b	d1,d0
00013A44 3F00                       		move.w	d0,-(sp)
00013A46 6100 0000                  		bsr.w	Sonic_WalkSpeed
00013A4A 301F                       		move.w	(sp)+,d0
00013A4C 4A41                       		tst.w	d1
00013A4E 6A00                       		bpl.s	locret_1307C
00013A50 E141                       		asl.w	#8,d1
00013A52 0600 0020                  		addi.b	#$20,d0
00013A56 0200 00C0                  		andi.b	#$C0,d0
00013A5A 6700                       		beq.s	loc_13078
00013A5C 0C00 0040                  		cmpi.b	#$40,d0
00013A60 6700                       		beq.s	loc_13066
00013A62 0C00 0080                  		cmpi.b	#$80,d0
00013A66 6700                       		beq.s	loc_13060
00013A68 D368 0010                  		add.w	d1,$10(a0)
00013A6C 08E8 0005 0022             		bset	#5,$22(a0)
00013A72 317C 0000 0014             		move.w	#0,$14(a0)
00013A78 4E75                       		rts	
00013A7A                            ; ===========================================================================
00013A7A                            
00013A7A                            loc_13060:
00013A7A 9368 0012                  		sub.w	d1,$12(a0)
00013A7E 4E75                       		rts	
00013A80                            ; ===========================================================================
00013A80                            
00013A80                            loc_13066:
00013A80 9368 0010                  		sub.w	d1,$10(a0)
00013A84 08E8 0005 0022             		bset	#5,$22(a0)
00013A8A 317C 0000 0014             		move.w	#0,$14(a0)
00013A90 4E75                       		rts	
00013A92                            ; ===========================================================================
00013A92                            
00013A92                            loc_13078:
00013A92 D368 0012                  		add.w	d1,$12(a0)
00013A96                            
00013A96                            locret_1307C:
00013A96 4E75                       		rts	
00013A98                            ; End of function Sonic_Move
00013A98                            
00013A98                            
00013A98                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013A98                            
00013A98                            
00013A98                            Sonic_MoveLeft:				; XREF: Sonic_Move
00013A98 3028 0014                  		move.w	$14(a0),d0
00013A9C 6700                       		beq.s	loc_13086
00013A9E 6A00                       		bpl.s	loc_130B2
00013AA0                            
00013AA0                            loc_13086:
00013AA0 08E8 0000 0022             		bset	#0,$22(a0)
00013AA6 6600                       		bne.s	loc_1309A
00013AA8 08A8 0005 0022             		bclr	#5,$22(a0)
00013AAE 117C 0001 001D             		move.b	#1,$1D(a0)
00013AB4                            
00013AB4                            loc_1309A:
00013AB4 9045                       		sub.w	d5,d0
00013AB6 3206                       		move.w	d6,d1
00013AB8 4441                       		neg.w	d1
00013ABA B041                       		cmp.w	d1,d0
00013ABC 6E00                       		bgt.s	loc_130A6
00013ABE 3001                       		move.w	d1,d0
00013AC0                            
00013AC0                            loc_130A6:
00013AC0 3140 0014                  		move.w	d0,$14(a0)
00013AC4 117C 0000 001C             		move.b	#0,$1C(a0)	; use walking animation
00013ACA 4E75                       		rts	
00013ACC                            ; ===========================================================================
00013ACC                            
00013ACC                            loc_130B2:				; XREF: Sonic_MoveLeft
00013ACC 9044                       		sub.w	d4,d0
00013ACE 6400                       		bcc.s	loc_130BA
00013AD0 303C FF80                  		move.w	#-$80,d0
00013AD4                            
00013AD4                            loc_130BA:
00013AD4 3140 0014                  		move.w	d0,$14(a0)
00013AD8 1028 0026                  		move.b	$26(a0),d0
00013ADC 0600 0020                  		addi.b	#$20,d0
00013AE0 0200 00C0                  		andi.b	#$C0,d0
00013AE4 6600                       		bne.s	locret_130E8
00013AE6 0C40 0400                  		cmpi.w	#$400,d0
00013AEA 6D00                       		blt.s	locret_130E8
00013AEC 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
00013AF2 08A8 0000 0022             		bclr	#0,$22(a0)
00013AF8 303C 00A4                  		move.w	#$A4,d0
00013AFC 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play stopping sound
00013B02                            
00013B02                            locret_130E8:
00013B02 4E75                       		rts	
00013B04                            ; End of function Sonic_MoveLeft
00013B04                            
00013B04                            
00013B04                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013B04                            
00013B04                            
00013B04                            Sonic_MoveRight:			; XREF: Sonic_Move
00013B04 3028 0014                  		move.w	$14(a0),d0
00013B08 6B00                       		bmi.s	loc_13118
00013B0A 08A8 0000 0022             		bclr	#0,$22(a0)
00013B10 6700                       		beq.s	loc_13104
00013B12 08A8 0005 0022             		bclr	#5,$22(a0)
00013B18 117C 0001 001D             		move.b	#1,$1D(a0)
00013B1E                            
00013B1E                            loc_13104:
00013B1E D045                       		add.w	d5,d0
00013B20 B046                       		cmp.w	d6,d0
00013B22 6D00                       		blt.s	loc_1310C
00013B24 3006                       		move.w	d6,d0
00013B26                            
00013B26                            loc_1310C:
00013B26 3140 0014                  		move.w	d0,$14(a0)
00013B2A 117C 0000 001C             		move.b	#0,$1C(a0)	; use walking animation
00013B30 4E75                       		rts	
00013B32                            ; ===========================================================================
00013B32                            
00013B32                            loc_13118:				; XREF: Sonic_MoveRight
00013B32 D044                       		add.w	d4,d0
00013B34 6400                       		bcc.s	loc_13120
00013B36 303C 0080                  		move.w	#$80,d0
00013B3A                            
00013B3A                            loc_13120:
00013B3A 3140 0014                  		move.w	d0,$14(a0)
00013B3E 1028 0026                  		move.b	$26(a0),d0
00013B42 0600 0020                  		addi.b	#$20,d0
00013B46 0200 00C0                  		andi.b	#$C0,d0
00013B4A 6600                       		bne.s	locret_1314E
00013B4C 0C40 FC00                  		cmpi.w	#-$400,d0
00013B50 6E00                       		bgt.s	locret_1314E
00013B52 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
00013B58 08E8 0000 0022             		bset	#0,$22(a0)
00013B5E 303C 00A4                  		move.w	#$A4,d0
00013B62 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play stopping sound
00013B68                            
00013B68                            locret_1314E:
00013B68 4E75                       		rts	
00013B6A                            ; End of function Sonic_MoveRight
00013B6A                            
00013B6A                            ; ---------------------------------------------------------------------------
00013B6A                            ; Subroutine to	change Sonic's speed as he rolls
00013B6A                            ; ---------------------------------------------------------------------------
00013B6A                            
00013B6A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013B6A                            
00013B6A                            
00013B6A                            Sonic_RollSpeed:			; XREF: Obj01_MdRoll
00013B6A 3C38 F760                  		move.w	($FFFFF760).w,d6
00013B6E E346                       		asl.w	#1,d6
00013B70 3A38 F762                  		move.w	($FFFFF762).w,d5
00013B74 E245                       		asr.w	#1,d5
00013B76 3838 F764                  		move.w	($FFFFF764).w,d4
00013B7A E444                       		asr.w	#2,d4
00013B7C 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00013B80 6600 0000                  		bne.w	loc_131CC
00013B84 4A68 003E                  		tst.w	$3E(a0)
00013B88 6600                       		bne.s	loc_13188
00013B8A 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
00013B90 6700                       		beq.s	loc_1317C	; if not, branch
00013B92 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013B98 6600                       		bne.s	SonicRS_RollRight	; GMZ: If yes, branch
00013B9A 6100 0000                  		bsr.w	Sonic_RollLeft
00013B9E                            
00013B9E                            loc_1317C:
00013B9E 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
00013BA4 6700                       		beq.s	loc_13188	; if not, branch
00013BA6 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013BAC 6700                       		beq.s	SonicRS_RollRight	; GMZ: If not, branch
00013BAE 6100 0000                  		bsr.w	Sonic_RollLeft
00013BB2 6000                       		bra.s	loc_13188
00013BB4                            
00013BB4                            SonicRS_RollRight:
00013BB4 6100 0000                  		bsr.w	Sonic_RollRight
00013BB8                            
00013BB8                            loc_13188:
00013BB8 3028 0014                  		move.w	$14(a0),d0
00013BBC 6700                       		beq.s	loc_131AA
00013BBE 6B00                       		bmi.s	loc_1319E
00013BC0 9045                       		sub.w	d5,d0
00013BC2 6400                       		bcc.s	loc_13198
00013BC4 303C 0000                  		move.w	#0,d0
00013BC8                            
00013BC8                            loc_13198:
00013BC8 3140 0014                  		move.w	d0,$14(a0)
00013BCC 6000                       		bra.s	loc_131AA
00013BCE                            ; ===========================================================================
00013BCE                            
00013BCE                            loc_1319E:				; XREF: Sonic_RollSpeed
00013BCE D045                       		add.w	d5,d0
00013BD0 6400                       		bcc.s	loc_131A6
00013BD2 303C 0000                  		move.w	#0,d0
00013BD6                            
00013BD6                            loc_131A6:
00013BD6 3140 0014                  		move.w	d0,$14(a0)
00013BDA                            
00013BDA                            loc_131AA:
00013BDA 4A68 0014                  		tst.w	$14(a0)		; is Sonic moving?
00013BDE 6600                       		bne.s	loc_131CC	; if yes, branch
00013BE0 08A8 0002 0022             		bclr	#2,$22(a0)
00013BE6 117C 0013 0016             		move.b	#$13,$16(a0)
00013BEC 117C 0009 0017             		move.b	#9,$17(a0)
00013BF2 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
00013BF8 5B68 000C                  		subq.w	#5,$C(a0)
00013BFC                            
00013BFC                            loc_131CC:
00013BFC 1028 0026                  		move.b	$26(a0),d0
00013C00 4EB9 0000 2D6C             		jsr	(CalcSine).l
00013C06 C1E8 0014                  		muls.w	$14(a0),d0
00013C0A E080                       		asr.l	#8,d0
00013C0C 3140 0012                  		move.w	d0,$12(a0)
00013C10 C3E8 0014                  		muls.w	$14(a0),d1
00013C14 E081                       		asr.l	#8,d1
00013C16 0C41 1000                  		cmpi.w	#$1000,d1
00013C1A 6F00                       		ble.s	loc_131F0
00013C1C 323C 1000                  		move.w	#$1000,d1
00013C20                            
00013C20                            loc_131F0:
00013C20 0C41 F000                  		cmpi.w	#-$1000,d1
00013C24 6C00                       		bge.s	loc_131FA
00013C26 323C F000                  		move.w	#-$1000,d1
00013C2A                            
00013C2A                            loc_131FA:
00013C2A 3141 0010                  		move.w	d1,$10(a0)
00013C2E 6000 FDF6                  		bra.w	loc_1300C
00013C32                            ; End of function Sonic_RollSpeed
00013C32                            
00013C32                            
00013C32                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013C32                            
00013C32                            
00013C32                            Sonic_RollLeft:				; XREF: Sonic_RollSpeed
00013C32 3028 0014                  		move.w	$14(a0),d0
00013C36 6700                       		beq.s	loc_1320A
00013C38 6A00                       		bpl.s	loc_13218
00013C3A                            
00013C3A                            loc_1320A:
00013C3A 08E8 0000 0022             		bset	#0,$22(a0)
00013C40 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00013C46 4E75                       		rts	
00013C48                            ; ===========================================================================
00013C48                            
00013C48                            loc_13218:
00013C48 9044                       		sub.w	d4,d0
00013C4A 6400                       		bcc.s	loc_13220
00013C4C 303C FF80                  		move.w	#-$80,d0
00013C50                            
00013C50                            loc_13220:
00013C50 3140 0014                  		move.w	d0,$14(a0)
00013C54 4E75                       		rts	
00013C56                            ; End of function Sonic_RollLeft
00013C56                            
00013C56                            
00013C56                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013C56                            
00013C56                            
00013C56                            Sonic_RollRight:			; XREF: Sonic_RollSpeed
00013C56 3028 0014                  		move.w	$14(a0),d0
00013C5A 6B00                       		bmi.s	loc_1323A
00013C5C 08A8 0000 0022             		bclr	#0,$22(a0)
00013C62 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00013C68 4E75                       		rts	
00013C6A                            ; ===========================================================================
00013C6A                            
00013C6A                            loc_1323A:
00013C6A D044                       		add.w	d4,d0
00013C6C 6400                       		bcc.s	loc_13242
00013C6E 303C 0080                  		move.w	#$80,d0
00013C72                            
00013C72                            loc_13242:
00013C72 3140 0014                  		move.w	d0,$14(a0)
00013C76 4E75                       		rts	
00013C78                            ; End of function Sonic_RollRight
00013C78                            
00013C78                            Sonic_AirUnroll:
00013C78                            		
00013C78 4A28 003A                  		tst.b	$3A(a0) ; check jump height control
00013C7C 6600                       		bne.s	@timer
00013C7E 1038 F605                  		move.b	($FFFFF605).w,d0
00013C82 0200 0070                  		andi.b	#$70,d0 ; is abc being pressed?
00013C86 6700                       		beq.s	@end	; if not, branch
00013C88 08A8 0002 0022             		bclr	#2,$22(a0)
00013C8E 117C 0013 0016             		move.b	#$13,$16(a0)
00013C94 117C 0009 0017             		move.b	#9,$17(a0)
00013C9A 117C 000E 001C             		move.b	#14,$1C(a0)	; use dunk animation
00013CA0 303C 00A5                  		move.w	#$A5,d0
00013CA4 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play fart sound
00013CAA 2028 0010                  		move.l	$10(a0),d0
00013CAE D080                       		add.l	d0,d0
00013CB0 2140 0010                  		move.l	d0,$10(a0)
00013CB4 5B68 000C                  		subq.w	#5,$C(a0)
00013CB8                            	@end:
00013CB8 4E75                       		rts
00013CBA                            	@timer:
00013CBA 5328 003A                  		subq.b	#1,$3A(a0)
00013CBE 4E75                       		rts
00013CC0                            
00013CC0                            ; ---------------------------------------------------------------------------
00013CC0                            ; Subroutine to	change Sonic's direction while jumping
00013CC0                            ; ---------------------------------------------------------------------------
00013CC0                            
00013CC0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013CC0                            
00013CC0                            
00013CC0                            Sonic_ChgJumpDir:			; XREF: Obj01_MdJump; Obj01_MdJump2
00013CC0 3C38 F760                  		move.w	($FFFFF760).w,d6
00013CC4 3A38 F762                  		move.w	($FFFFF762).w,d5
00013CC8 E345                       		asl.w	#1,d5
00013CCA 0828 0004 0022             		btst	#4,$22(a0)
00013CD0 6600                       		bne.s	Obj01_ResetScr2
00013CD2 3028 0010                  		move.w	$10(a0),d0
00013CD6 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
00013CDC 6700                       		beq.s	loc_13278	; if not, branch
00013CDE 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013CE4 6600                       		bne.s	SonicCJD_JumpRight	; GMZ: If yes, branch
00013CE6 6100 0000                  		bsr.w	SonicCJD_JumpLeft
00013CEA 6E00                       		bgt.s	loc_13278
00013CEC 3001                       		move.w	d1,d0
00013CEE                            
00013CEE                            loc_13278:
00013CEE 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
00013CF4 6700                       		beq.s	Obj01_JumpMove	; if not, branch
00013CF6 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013CFC 6700                       		beq.s	SonicCJD_JumpRight	; GMZ: If not, branch
00013CFE 6100 0000                  		bsr.w	SonicCJD_JumpLeft
00013D02 6E00                       		bgt.s	Obj01_JumpMove
00013D04 3001                       		move.w	d1,d0
00013D06 6000                       		bra.s	Obj01_JumpMove
00013D08                            
00013D08                            SonicCJD_JumpLeft:
00013D08 08E8 0000 0022             		bset	#0,$22(a0)
00013D0E 9045                       		sub.w	d5,d0
00013D10 3206                       		move.w	d6,d1
00013D12 4441                       		neg.w	d1
00013D14 B041                       		cmp.w	d1,d0
00013D16                            		; bgt.s	loc_13278
00013D16                            		; move.w	d1,d0
00013D16 4E75                       		rts
00013D18                            
00013D18                            SonicCJD_JumpRight:
00013D18 08A8 0000 0022             		bclr	#0,$22(a0)
00013D1E D045                       		add.w	d5,d0
00013D20 B046                       		cmp.w	d6,d0
00013D22 6D00                       		blt.s	Obj01_JumpMove
00013D24 3006                       		move.w	d6,d0
00013D26                            
00013D26                            Obj01_JumpMove:
00013D26 3140 0010                  		move.w	d0,$10(a0)	; change Sonic's horizontal speed
00013D2A                            
00013D2A                            Obj01_ResetScr2:
00013D2A 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	the screen in its default position?
00013D30 6700                       		beq.s	loc_132A4	; if yes, branch
00013D32 6400                       		bcc.s	loc_132A0
00013D34 5878 F73E                  		addq.w	#4,($FFFFF73E).w
00013D38                            
00013D38                            loc_132A0:
00013D38 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00013D3C                            
00013D3C                            loc_132A4:
00013D3C 0C68 FC00 0012             		cmpi.w	#-$400,$12(a0)	; is Sonic moving faster than -$400 upwards?
00013D42 6500                       		bcs.s	locret_132D2	; if yes, branch
00013D44 3028 0010                  		move.w	$10(a0),d0
00013D48 3200                       		move.w	d0,d1
00013D4A EA41                       		asr.w	#5,d1
00013D4C 6700                       		beq.s	locret_132D2
00013D4E 6B00                       		bmi.s	loc_132C6
00013D50 9041                       		sub.w	d1,d0
00013D52 6400                       		bcc.s	loc_132C0
00013D54 303C 0000                  		move.w	#0,d0
00013D58                            
00013D58                            loc_132C0:
00013D58 3140 0010                  		move.w	d0,$10(a0)
00013D5C 4E75                       		rts	
00013D5E                            ; ===========================================================================
00013D5E                            
00013D5E                            loc_132C6:
00013D5E 9041                       		sub.w	d1,d0
00013D60 6500                       		bcs.s	loc_132CE
00013D62 303C 0000                  		move.w	#0,d0
00013D66                            
00013D66                            loc_132CE:
00013D66 3140 0010                  		move.w	d0,$10(a0)
00013D6A                            
00013D6A                            locret_132D2:
00013D6A 4E75                       		rts	
00013D6C                            ; End of function Sonic_ChgJumpDir
00013D6C                            
00013D6C                            ; ===========================================================================
00013D6C                            ; ---------------------------------------------------------------------------
00013D6C                            ; Unused subroutine to squash Sonic
00013D6C                            ; ---------------------------------------------------------------------------
00013D6C 1028 0026                  		move.b	$26(a0),d0
00013D70 0600 0020                  		addi.b	#$20,d0
00013D74 0200 00C0                  		andi.b	#$C0,d0
00013D78 6600                       		bne.s	locret_13302
00013D7A 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00013D7E 4A41                       		tst.w	d1
00013D80 6A00                       		bpl.s	locret_13302
00013D82 317C 0000 0014             		move.w	#0,$14(a0)	; stop Sonic moving
00013D88 317C 0000 0010             		move.w	#0,$10(a0)
00013D8E 317C 0000 0012             		move.w	#0,$12(a0)
00013D94 117C 000B 001C             		move.b	#$B,$1C(a0)	; use "warping"	animation
00013D9A                            
00013D9A                            locret_13302:
00013D9A 4E75                       		rts	
00013D9C                            ; ---------------------------------------------------------------------------
00013D9C                            ; Subroutine to	prevent	Sonic leaving the boundaries of	a level
00013D9C                            ; ---------------------------------------------------------------------------
00013D9C                            
00013D9C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013D9C                            
00013D9C                            
00013D9C                            Sonic_LevelBound:			; XREF: Obj01_MdNormal; et al
00013D9C 2228 0008                  		move.l	8(a0),d1
00013DA0 3028 0010                  		move.w	$10(a0),d0
00013DA4 48C0                       		ext.l	d0
00013DA6 E180                       		asl.l	#8,d0
00013DA8 D280                       		add.l	d0,d1
00013DAA 4841                       		swap	d1
00013DAC 3038 F728                  		move.w	($FFFFF728).w,d0
00013DB0 0640 0010                  		addi.w	#$10,d0
00013DB4 B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00013DB6 6200                       		bhi.s	Boundary_Sides	; if yes, branch
00013DB8 3038 F72A                  		move.w	($FFFFF72A).w,d0
00013DBC 0640 0128                  		addi.w	#$128,d0
00013DC0 4A38 F7AA                  		tst.b	($FFFFF7AA).w
00013DC4 6600                       		bne.s	loc_13332
00013DC6 0640 0040                  		addi.w	#$40,d0
00013DCA                            
00013DCA                            loc_13332:
00013DCA B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00013DCC 6300                       		bls.s	Boundary_Sides	; if yes, branch
00013DCE                            
00013DCE                            loc_13336:
00013DCE 3038 F72E                  		move.w	($FFFFF72E).w,d0
00013DD2 0640 00E0                  		addi.w	#$E0,d0
00013DD6 B068 000C                  		cmp.w	$C(a0),d0	; has Sonic touched the	bottom boundary?
00013DDA 6D00                       		blt.s	Boundary_Bottom	; if yes, branch
00013DDC 4E75                       		rts	
00013DDE                            ; ===========================================================================
00013DDE                            
00013DDE                            Boundary_Bottom:
00013DDE 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2 ?
00013DE4 6600 0000                  		bne.w	KillSonic	; if not, kill Sonic
00013DE8 0C78 2000 D008             		cmpi.w	#$2000,($FFFFD008).w
00013DEE 6500 0000                  		bcs.w	KillSonic
00013DF2 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
00013DF6 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
00013DFC 31FC 0103 FE10             		move.w	#$103,($FFFFFE10).w ; set level	to SBZ3	(LZ4)
00013E02 4E75                       		rts	
00013E04                            ; ===========================================================================
00013E04                            
00013E04                            Boundary_Sides:
00013E04 3140 0008                  		move.w	d0,8(a0)
00013E08 317C 0000 000A             		move.w	#0,$A(a0)
00013E0E 317C 0000 0010             		move.w	#0,$10(a0)	; stop Sonic moving
00013E14 317C 0000 0014             		move.w	#0,$14(a0)
00013E1A 60B2                       		bra.s	loc_13336
00013E1C                            ; End of function Sonic_LevelBound
00013E1C                            
00013E1C                            ; ---------------------------------------------------------------------------
00013E1C                            ; Subroutine allowing Sonic to roll when he's moving
00013E1C                            ; ---------------------------------------------------------------------------
00013E1C                            
00013E1C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013E1C                            
00013E1C                            
00013E1C                            Sonic_Roll:				; XREF: Obj01_MdNormal
00013E1C 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00013E20 6600                       		bne.s	Obj01_NoRoll
00013E22 3028 0014                  		move.w	$14(a0),d0
00013E26 6A00                       		bpl.s	loc_13392
00013E28 4440                       		neg.w	d0
00013E2A                            
00013E2A                            loc_13392:
00013E2A 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic moving at $80 speed or faster?
00013E2E 6500                       		bcs.s	Obj01_NoRoll	; if not, branch
00013E30 1038 F602                  		move.b	($FFFFF602).w,d0
00013E34 0200 000C                  		andi.b	#$C,d0		; is left/right	being pressed?
00013E38 6600                       		bne.s	Obj01_NoRoll	; if yes, branch
00013E3A 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00013E40 6600                       		bne.s	Obj01_ChkRoll	; if yes, branch
00013E42                            
00013E42                            Obj01_NoRoll:
00013E42 4E75                       		rts	
00013E44                            ; ===========================================================================
00013E44                            
00013E44                            Obj01_ChkRoll:
00013E44 0828 0002 0022             		btst	#2,$22(a0)	; is Sonic already rolling?
00013E4A 6700                       		beq.s	Obj01_DoRoll	; if not, branch
00013E4C 4E75                       		rts	
00013E4E                            ; ===========================================================================
00013E4E                            
00013E4E                            Obj01_DoRoll:
00013E4E 08E8 0002 0022             		bset	#2,$22(a0)
00013E54 117C 000E 0016             		move.b	#$E,$16(a0)
00013E5A 117C 0007 0017             		move.b	#7,$17(a0)
00013E60 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00013E66 5A68 000C                  		addq.w	#5,$C(a0)
00013E6A 303C 00BE                  		move.w	#$BE,d0
00013E6E 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play rolling sound
00013E74 4A68 0014                  		tst.w	$14(a0)
00013E78 6600                       		bne.s	locret_133E8
00013E7A 317C 0200 0014             		move.w	#$200,$14(a0)
00013E80                            
00013E80                            locret_133E8:
00013E80 4E75                       		rts	
00013E82                            ; End of function Sonic_Roll
00013E82                            
00013E82                            ; ---------------------------------------------------------------------------
00013E82                            ; Subroutine allowing Sonic to jump
00013E82                            ; ---------------------------------------------------------------------------
00013E82                            
00013E82                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013E82                            
00013E82                            
00013E82                            Sonic_Jump:				; XREF: Obj01_MdNormal; Obj01_MdRoll
00013E82 1038 F603                  		move.b	($FFFFF603).w,d0
00013E86 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
00013E8A 6700 0000                  		beq.w	locret_1348E	; if not, branch
00013E8E 7000                       		moveq	#0,d0
00013E90 1028 0026                  		move.b	$26(a0),d0
00013E94 0600 0080                  		addi.b	#$80,d0
00013E98 6100 0000                  		bsr.w	sub_14D48
00013E9C 0C41 0006                  		cmpi.w	#6,d1
00013EA0 6D00 0000                  		blt.w	locret_1348E
00013EA4 343C 0680                  		move.w	#$680,d2
00013EA8 0828 0006 0022             		btst	#6,$22(a0)
00013EAE 6700                       		beq.s	loc_1341C
00013EB0 343C 0380                  		move.w	#$380,d2
00013EB4                            
00013EB4                            loc_1341C:
00013EB4 7000                       		moveq	#0,d0
00013EB6 1028 0026                  		move.b	$26(a0),d0
00013EBA 0400 0040                  		subi.b	#$40,d0
00013EBE 4EB9 0000 2D6C             		jsr	(CalcSine).l
00013EC4 C3C2                       		muls.w	d2,d1
00013EC6 E081                       		asr.l	#8,d1
00013EC8 D368 0010                  		add.w	d1,$10(a0)	; make Sonic jump
00013ECC C1C2                       		muls.w	d2,d0
00013ECE E080                       		asr.l	#8,d0
00013ED0 D168 0012                  		add.w	d0,$12(a0)	; make Sonic jump
00013ED4 08E8 0001 0022             		bset	#1,$22(a0)
00013EDA 08A8 0005 0022             		bclr	#5,$22(a0)
00013EE0 588F                       		addq.l	#4,sp
00013EE2 117C 0001 003C             		move.b	#1,$3C(a0)
00013EE8 4228 0038                  		clr.b	$38(a0)
00013EEC 303C 00A0                  		move.w	#$A0,d0
00013EF0 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play jumping sound
00013EF6 117C 0013 0016             		move.b	#$13,$16(a0)
00013EFC 117C 0009 0017             		move.b	#9,$17(a0)
00013F02 0828 0002 0022             		btst	#2,$22(a0)
00013F08 6600                       		bne.s	loc_13490
00013F0A 117C 000E 0016             		move.b	#$E,$16(a0)
00013F10 117C 0007 0017             		move.b	#7,$17(a0)
00013F16 117C 0002 001C             		move.b	#2,$1C(a0)	; use "jumping"	animation
00013F1C 08E8 0002 0022             		bset	#2,$22(a0)
00013F22 5A68 000C                  		addq.w	#5,$C(a0)
00013F26 117C 000A 003A             		move.b	#10,$3A(a0) ; timer
00013F2C                            
00013F2C                            locret_1348E:
00013F2C 4E75                       		rts	
00013F2E                            ; ===========================================================================
00013F2E                            
00013F2E                            loc_13490:
00013F2E 08E8 0004 0022             		bset	#4,$22(a0)
00013F34 4E75                       		rts	
00013F36                            ; End of function Sonic_Jump
00013F36                            
00013F36                            
00013F36                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013F36                            
00013F36                            
00013F36                            Sonic_JumpHeight:			; XREF: Obj01_MdJump; Obj01_MdJump2
00013F36 4A28 003C                  		tst.b	$3C(a0)
00013F3A 6700                       		beq.s	loc_134C4
00013F3C 323C FC00                  		move.w	#-$400,d1
00013F40 0828 0006 0022             		btst	#6,$22(a0)
00013F46 6700                       		beq.s	loc_134AE
00013F48 323C FE00                  		move.w	#-$200,d1
00013F4C                            
00013F4C                            loc_134AE:
00013F4C B268 0012                  		cmp.w	$12(a0),d1
00013F50 6F00                       		ble.s	locret_134C2
00013F52 1038 F602                  		move.b	($FFFFF602).w,d0
00013F56 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
00013F5A 6600                       		bne.s	locret_134C2	; if yes, branch
00013F5C 3141 0012                  		move.w	d1,$12(a0)
00013F60                            
00013F60                            locret_134C2:
00013F60 4E75                       		rts	
00013F62                            ; ===========================================================================
00013F62                            
00013F62                            loc_134C4:
00013F62 0C68 F040 0012             		cmpi.w	#-$FC0,$12(a0)
00013F68 6C00                       		bge.s	locret_134D2
00013F6A 317C F040 0012             		move.w	#-$FC0,$12(a0)
00013F70                            
00013F70                            locret_134D2:
00013F70 4E75                       		rts	
00013F72                            ; End of function Sonic_JumpHeight
00013F72                            
00013F72                            ; ---------------------------------------------------------------------------
00013F72                            ; Subroutine to	slow Sonic walking up a	slope
00013F72                            ; ---------------------------------------------------------------------------
00013F72                            
00013F72                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013F72                            
00013F72                            
00013F72                            Sonic_SlopeResist:			; XREF: Obj01_MdNormal
00013F72 1028 0026                  		move.b	$26(a0),d0
00013F76 0600 0060                  		addi.b	#$60,d0
00013F7A 0C00 00C0                  		cmpi.b	#$C0,d0
00013F7E 6400                       		bcc.s	locret_13508
00013F80 1028 0026                  		move.b	$26(a0),d0
00013F84 4EB9 0000 2D6C             		jsr	(CalcSine).l
00013F8A C1FC 0020                  		muls.w	#$20,d0
00013F8E E080                       		asr.l	#8,d0
00013F90 4A68 0014                  		tst.w	$14(a0)
00013F94 6700                       		beq.s	locret_13508
00013F96 6B00                       		bmi.s	loc_13504
00013F98 4A40                       		tst.w	d0
00013F9A 6700                       		beq.s	locret_13502
00013F9C D168 0014                  		add.w	d0,$14(a0)	; change Sonic's inertia
00013FA0                            
00013FA0                            locret_13502:
00013FA0 4E75                       		rts	
00013FA2                            ; ===========================================================================
00013FA2                            
00013FA2                            loc_13504:
00013FA2 D168 0014                  		add.w	d0,$14(a0)
00013FA6                            
00013FA6                            locret_13508:
00013FA6 4E75                       		rts	
00013FA8                            ; End of function Sonic_SlopeResist
00013FA8                            
00013FA8                            ; ---------------------------------------------------------------------------
00013FA8                            ; Subroutine to	push Sonic down	a slope	while he's rolling
00013FA8                            ; ---------------------------------------------------------------------------
00013FA8                            
00013FA8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013FA8                            
00013FA8                            
00013FA8                            Sonic_RollRepel:			; XREF: Obj01_MdRoll
00013FA8 1028 0026                  		move.b	$26(a0),d0
00013FAC 0600 0060                  		addi.b	#$60,d0
00013FB0 0C00 00C0                  		cmpi.b	#-$40,d0
00013FB4 6400                       		bcc.s	locret_13544
00013FB6 1028 0026                  		move.b	$26(a0),d0
00013FBA 4EB9 0000 2D6C             		jsr	(CalcSine).l
00013FC0 C1FC 0050                  		muls.w	#$50,d0
00013FC4 E080                       		asr.l	#8,d0
00013FC6 4A68 0014                  		tst.w	$14(a0)
00013FCA 6B00                       		bmi.s	loc_1353A
00013FCC 4A40                       		tst.w	d0
00013FCE 6A00                       		bpl.s	loc_13534
00013FD0 E480                       		asr.l	#2,d0
00013FD2                            
00013FD2                            loc_13534:
00013FD2 D168 0014                  		add.w	d0,$14(a0)
00013FD6 4E75                       		rts	
00013FD8                            ; ===========================================================================
00013FD8                            
00013FD8                            loc_1353A:
00013FD8 4A40                       		tst.w	d0
00013FDA 6B00                       		bmi.s	loc_13540
00013FDC E480                       		asr.l	#2,d0
00013FDE                            
00013FDE                            loc_13540:
00013FDE D168 0014                  		add.w	d0,$14(a0)
00013FE2                            
00013FE2                            locret_13544:
00013FE2 4E75                       		rts	
00013FE4                            ; End of function Sonic_RollRepel
00013FE4                            
00013FE4                            ; ---------------------------------------------------------------------------
00013FE4                            ; Subroutine to	push Sonic down	a slope
00013FE4                            ; ---------------------------------------------------------------------------
00013FE4                            
00013FE4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013FE4                            
00013FE4                            
00013FE4                            Sonic_SlopeRepel:			; XREF: Obj01_MdNormal; Obj01_MdRoll
00013FE4 4E71                       		nop	
00013FE6 4A28 0038                  		tst.b	$38(a0)
00013FEA 6600                       		bne.s	locret_13580
00013FEC 4A68 003E                  		tst.w	$3E(a0)
00013FF0 6600                       		bne.s	loc_13582
00013FF2 1028 0026                  		move.b	$26(a0),d0
00013FF6 0600 0020                  		addi.b	#$20,d0
00013FFA 0200 00C0                  		andi.b	#$C0,d0
00013FFE 6700                       		beq.s	locret_13580
00014000 3028 0014                  		move.w	$14(a0),d0
00014004 6A00                       		bpl.s	loc_1356A
00014006 4440                       		neg.w	d0
00014008                            
00014008                            loc_1356A:
00014008 0C40 0280                  		cmpi.w	#$280,d0
0001400C 6400                       		bcc.s	locret_13580
0001400E 4268 0014                  		clr.w	$14(a0)
00014012 08E8 0001 0022             		bset	#1,$22(a0)
00014018 317C 001E 003E             		move.w	#$1E,$3E(a0)
0001401E                            
0001401E                            locret_13580:
0001401E 4E75                       		rts	
00014020                            ; ===========================================================================
00014020                            
00014020                            loc_13582:
00014020 5368 003E                  		subq.w	#1,$3E(a0)
00014024 4E75                       		rts	
00014026                            ; End of function Sonic_SlopeRepel
00014026                            
00014026                            ; ---------------------------------------------------------------------------
00014026                            ; Subroutine to	return Sonic's angle to 0 as he jumps
00014026                            ; ---------------------------------------------------------------------------
00014026                            
00014026                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014026                            
00014026                            
00014026                            Sonic_JumpAngle:			; XREF: Obj01_MdJump; Obj01_MdJump2
00014026 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
0001402A 6700                       		beq.s	locret_135A2	; if already 0,	branch
0001402C 6A00                       		bpl.s	loc_13598	; if higher than 0, branch
0001402E                            
0001402E 5400                       		addq.b	#2,d0		; increase angle
00014030 6400                       		bcc.s	loc_13596
00014032 7000                       		moveq	#0,d0
00014034                            
00014034                            loc_13596:
00014034 6000                       		bra.s	loc_1359E
00014036                            ; ===========================================================================
00014036                            
00014036                            loc_13598:
00014036 5500                       		subq.b	#2,d0		; decrease angle
00014038 6400                       		bcc.s	loc_1359E
0001403A 7000                       		moveq	#0,d0
0001403C                            
0001403C                            loc_1359E:
0001403C 1140 0026                  		move.b	d0,$26(a0)
00014040                            
00014040                            locret_135A2:
00014040 4E75                       		rts	
00014042                            ; End of function Sonic_JumpAngle
00014042                            
00014042                            ; ---------------------------------------------------------------------------
00014042                            ; Subroutine for Sonic to interact with	the floor after	jumping/falling
00014042                            ; ---------------------------------------------------------------------------
00014042                            
00014042                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014042                            
00014042                            
00014042                            Sonic_Floor:				; XREF: Obj01_MdJump; Obj01_MdJump2
00014042 3228 0010                  		move.w	$10(a0),d1
00014046 3428 0012                  		move.w	$12(a0),d2
0001404A 4EB9 0000 303A             		jsr	(CalcAngle).l
00014050 11C0 FFEC                  		move.b	d0,($FFFFFFEC).w
00014054 0400 0020                  		subi.b	#$20,d0
00014058 11C0 FFED                  		move.b	d0,($FFFFFFED).w
0001405C 0200 00C0                  		andi.b	#$C0,d0
00014060 11C0 FFEE                  		move.b	d0,($FFFFFFEE).w
00014064 0C00 0040                  		cmpi.b	#$40,d0
00014068 6700 0000                  		beq.w	loc_13680
0001406C 0C00 0080                  		cmpi.b	#$80,d0
00014070 6700 0000                  		beq.w	loc_136E2
00014074 0C00 00C0                  		cmpi.b	#-$40,d0
00014078 6700 0000                  		beq.w	loc_1373E
0001407C 6100 0000                  		bsr.w	Sonic_HitWall
00014080 4A41                       		tst.w	d1
00014082 6A00                       		bpl.s	loc_135F0
00014084 9368 0008                  		sub.w	d1,8(a0)
00014088 317C 0000 0010             		move.w	#0,$10(a0)
0001408E                            
0001408E                            loc_135F0:
0001408E 6100 0000                  		bsr.w	sub_14EB4
00014092 4A41                       		tst.w	d1
00014094 6A00                       		bpl.s	loc_13602
00014096 D368 0008                  		add.w	d1,8(a0)
0001409A 317C 0000 0010             		move.w	#0,$10(a0)
000140A0                            
000140A0                            loc_13602:
000140A0 6100 0000                  		bsr.w	Sonic_HitFloor
000140A4 11C1 FFEF                  		move.b	d1,($FFFFFFEF).w
000140A8 4A41                       		tst.w	d1
000140AA 6A00                       		bpl.s	locret_1367E
000140AC 1428 0012                  		move.b	$12(a0),d2
000140B0 5002                       		addq.b	#8,d2
000140B2 4402                       		neg.b	d2
000140B4 B202                       		cmp.b	d2,d1
000140B6 6C00                       		bge.s	loc_1361E
000140B8 B002                       		cmp.b	d2,d0
000140BA 6D00                       		blt.s	locret_1367E
000140BC                            
000140BC                            loc_1361E:
000140BC D368 000C                  		add.w	d1,$C(a0)
000140C0 1143 0026                  		move.b	d3,$26(a0)
000140C4 6100 0000                  		bsr.w	Sonic_ResetOnFloor
000140C8 117C 0000 001C             		move.b	#0,$1C(a0)
000140CE 1003                       		move.b	d3,d0
000140D0 0600 0020                  		addi.b	#$20,d0
000140D4 0200 0040                  		andi.b	#$40,d0
000140D8 6600                       		bne.s	loc_1365C
000140DA 1003                       		move.b	d3,d0
000140DC 0600 0010                  		addi.b	#$10,d0
000140E0 0200 0020                  		andi.b	#$20,d0
000140E4 6700                       		beq.s	loc_1364E
000140E6 E0E8 0012                  		asr	$12(a0)
000140EA 6000                       		bra.s	loc_13670
000140EC                            ; ===========================================================================
000140EC                            
000140EC                            loc_1364E:
000140EC 317C 0000 0012             		move.w	#0,$12(a0)
000140F2 3168 0010 0014             		move.w	$10(a0),$14(a0)
000140F8 4E75                       		rts	
000140FA                            ; ===========================================================================
000140FA                            
000140FA                            loc_1365C:
000140FA 317C 0000 0010             		move.w	#0,$10(a0)
00014100 0C68 0FC0 0012             		cmpi.w	#$FC0,$12(a0)
00014106 6F00                       		ble.s	loc_13670
00014108 317C 0FC0 0012             		move.w	#$FC0,$12(a0)
0001410E                            
0001410E                            loc_13670:
0001410E 3168 0012 0014             		move.w	$12(a0),$14(a0)
00014114 4A03                       		tst.b	d3
00014116 6A00                       		bpl.s	locret_1367E
00014118 4468 0014                  		neg.w	$14(a0)
0001411C                            
0001411C                            locret_1367E:
0001411C 4E75                       		rts	
0001411E                            ; ===========================================================================
0001411E                            
0001411E                            loc_13680:
0001411E 6100 0000                  		bsr.w	Sonic_HitWall
00014122 4A41                       		tst.w	d1
00014124 6A00                       		bpl.s	loc_1369A
00014126 9368 0008                  		sub.w	d1,8(a0)
0001412A 317C 0000 0010             		move.w	#0,$10(a0)
00014130 3168 0012 0014             		move.w	$12(a0),$14(a0)
00014136 4E75                       		rts	
00014138                            ; ===========================================================================
00014138                            
00014138                            loc_1369A:
00014138 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
0001413C 4A41                       		tst.w	d1
0001413E 6A00                       		bpl.s	loc_136B4
00014140 9368 000C                  		sub.w	d1,$C(a0)
00014144 4A68 0012                  		tst.w	$12(a0)
00014148 6A00                       		bpl.s	locret_136B2
0001414A 317C 0000 0012             		move.w	#0,$12(a0)
00014150                            
00014150                            locret_136B2:
00014150 4E75                       		rts	
00014152                            ; ===========================================================================
00014152                            
00014152                            loc_136B4:
00014152 4A68 0012                  		tst.w	$12(a0)
00014156 6B00                       		bmi.s	locret_136E0
00014158 6100 0000                  		bsr.w	Sonic_HitFloor
0001415C 4A41                       		tst.w	d1
0001415E 6A00                       		bpl.s	locret_136E0
00014160 D368 000C                  		add.w	d1,$C(a0)
00014164 1143 0026                  		move.b	d3,$26(a0)
00014168 6100 0000                  		bsr.w	Sonic_ResetOnFloor
0001416C 117C 0000 001C             		move.b	#0,$1C(a0)
00014172 317C 0000 0012             		move.w	#0,$12(a0)
00014178 3168 0010 0014             		move.w	$10(a0),$14(a0)
0001417E                            
0001417E                            locret_136E0:
0001417E 4E75                       		rts	
00014180                            ; ===========================================================================
00014180                            
00014180                            loc_136E2:
00014180 6100 0000                  		bsr.w	Sonic_HitWall
00014184 4A41                       		tst.w	d1
00014186 6A00                       		bpl.s	loc_136F4
00014188 9368 0008                  		sub.w	d1,8(a0)
0001418C 317C 0000 0010             		move.w	#0,$10(a0)
00014192                            
00014192                            loc_136F4:
00014192 6100 0000                  		bsr.w	sub_14EB4
00014196 4A41                       		tst.w	d1
00014198 6A00                       		bpl.s	loc_13706
0001419A D368 0008                  		add.w	d1,8(a0)
0001419E 317C 0000 0010             		move.w	#0,$10(a0)
000141A4                            
000141A4                            loc_13706:
000141A4 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
000141A8 4A41                       		tst.w	d1
000141AA 6A00                       		bpl.s	locret_1373C
000141AC 9368 000C                  		sub.w	d1,$C(a0)
000141B0 1003                       		move.b	d3,d0
000141B2 0600 0020                  		addi.b	#$20,d0
000141B6 0200 0040                  		andi.b	#$40,d0
000141BA 6600                       		bne.s	loc_13726
000141BC 317C 0000 0012             		move.w	#0,$12(a0)
000141C2 4E75                       		rts	
000141C4                            ; ===========================================================================
000141C4                            
000141C4                            loc_13726:
000141C4 1143 0026                  		move.b	d3,$26(a0)
000141C8 6100 0000                  		bsr.w	Sonic_ResetOnFloor
000141CC 3168 0012 0014             		move.w	$12(a0),$14(a0)
000141D2 4A03                       		tst.b	d3
000141D4 6A00                       		bpl.s	locret_1373C
000141D6 4468 0014                  		neg.w	$14(a0)
000141DA                            
000141DA                            locret_1373C:
000141DA 4E75                       		rts	
000141DC                            ; ===========================================================================
000141DC                            
000141DC                            loc_1373E:
000141DC 6100 0000                  		bsr.w	sub_14EB4
000141E0 4A41                       		tst.w	d1
000141E2 6A00                       		bpl.s	loc_13758
000141E4 D368 0008                  		add.w	d1,8(a0)
000141E8 317C 0000 0010             		move.w	#0,$10(a0)
000141EE 3168 0012 0014             		move.w	$12(a0),$14(a0)
000141F4 4E75                       		rts	
000141F6                            ; ===========================================================================
000141F6                            
000141F6                            loc_13758:
000141F6 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
000141FA 4A41                       		tst.w	d1
000141FC 6A00                       		bpl.s	loc_13772
000141FE 9368 000C                  		sub.w	d1,$C(a0)
00014202 4A68 0012                  		tst.w	$12(a0)
00014206 6A00                       		bpl.s	locret_13770
00014208 317C 0000 0012             		move.w	#0,$12(a0)
0001420E                            
0001420E                            locret_13770:
0001420E 4E75                       		rts	
00014210                            ; ===========================================================================
00014210                            
00014210                            loc_13772:
00014210 4A68 0012                  		tst.w	$12(a0)
00014214 6B00                       		bmi.s	locret_1379E
00014216 6100 0000                  		bsr.w	Sonic_HitFloor
0001421A 4A41                       		tst.w	d1
0001421C 6A00                       		bpl.s	locret_1379E
0001421E D368 000C                  		add.w	d1,$C(a0)
00014222 1143 0026                  		move.b	d3,$26(a0)
00014226 6100 0000                  		bsr.w	Sonic_ResetOnFloor
0001422A 117C 0000 001C             		move.b	#0,$1C(a0)
00014230 317C 0000 0012             		move.w	#0,$12(a0)
00014236 3168 0010 0014             		move.w	$10(a0),$14(a0)
0001423C                            
0001423C                            locret_1379E:
0001423C 4E75                       		rts	
0001423E                            ; End of function Sonic_Floor
0001423E                            
0001423E                            ; ---------------------------------------------------------------------------
0001423E                            ; Subroutine to	reset Sonic's mode when he lands on the floor
0001423E                            ; ---------------------------------------------------------------------------
0001423E                            
0001423E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001423E                            
0001423E                            
0001423E                            Sonic_ResetOnFloor:			; XREF: PlatformObject; et al
0001423E 0828 0004 0022             		btst	#4,$22(a0)
00014244 6700                       		beq.s	loc_137AE
00014246 4E71                       		nop	
00014248 4E71                       		nop	
0001424A 4E71                       		nop	
0001424C                            
0001424C                            loc_137AE:
0001424C 08A8 0005 0022             		bclr	#5,$22(a0)
00014252 08A8 0001 0022             		bclr	#1,$22(a0)
00014258 08A8 0004 0022             		bclr	#4,$22(a0)
0001425E 0828 0002 0022             		btst	#2,$22(a0)
00014264 6700                       		beq.s	loc_137E4
00014266 08A8 0002 0022             		bclr	#2,$22(a0)
0001426C 117C 0013 0016             		move.b	#$13,$16(a0)
00014272 117C 0009 0017             		move.b	#9,$17(a0)
00014278 117C 0000 001C             		move.b	#0,$1C(a0)	; use running/walking animation
0001427E 5B68 000C                  		subq.w	#5,$C(a0)
00014282                            
00014282                            loc_137E4:
00014282 117C 0000 003C             		move.b	#0,$3C(a0)
00014288 31FC 0000 F7D0             		move.w	#0,($FFFFF7D0).w
0001428E 4E75                       		rts	
00014290                            ; End of function Sonic_ResetOnFloor
00014290                            
00014290                            ; ===========================================================================
00014290                            ; ---------------------------------------------------------------------------
00014290                            ; Sonic	when he	gets hurt
00014290                            ; ---------------------------------------------------------------------------
00014290                            
00014290                            Obj01_Hurt:				; XREF: Obj01_Index
00014290 4EBA 9D40                  		jsr	SpeedToPos
00014294 0668 0030 0012             		addi.w	#$30,$12(a0)
0001429A 0828 0006 0022             		btst	#6,$22(a0)
000142A0 6700                       		beq.s	loc_1380C
000142A2 0468 0020 0012             		subi.w	#$20,$12(a0)
000142A8                            
000142A8                            loc_1380C:
000142A8 6100 0000                  		bsr.w	Sonic_HurtStop
000142AC 6100 FAEE                  		bsr.w	Sonic_LevelBound
000142B0 6100 F4B4                  		bsr.w	Sonic_RecordPos
000142B4 6100 0000                  		bsr.w	Sonic_Animate
000142B8 6100 0000                  		bsr.w	LoadSonicDynPLC
000142BC 4EFA 9D3A                  		jmp	DisplaySprite
000142C0                            
000142C0                            ; ---------------------------------------------------------------------------
000142C0                            ; Subroutine to	stop Sonic falling after he's been hurt
000142C0                            ; ---------------------------------------------------------------------------
000142C0                            
000142C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000142C0                            
000142C0                            
000142C0                            Sonic_HurtStop:				; XREF: Obj01_Hurt
000142C0 3038 F72E                  		move.w	($FFFFF72E).w,d0
000142C4 0640 00E0                  		addi.w	#$E0,d0
000142C8 B068 000C                  		cmp.w	$C(a0),d0
000142CC 6500 0000                  		bcs.w	KillSonic
000142D0 6100 FD70                  		bsr.w	Sonic_Floor
000142D4 0828 0001 0022             		btst	#1,$22(a0)
000142DA 6600                       		bne.s	locret_13860
000142DC 7000                       		moveq	#0,d0
000142DE 3140 0012                  		move.w	d0,$12(a0)
000142E2 3140 0010                  		move.w	d0,$10(a0)
000142E6 3140 0014                  		move.w	d0,$14(a0)
000142EA 117C 0000 001C             		move.b	#0,$1C(a0)
000142F0 5528 0024                  		subq.b	#2,$24(a0)
000142F4 317C 0078 0030             		move.w	#$78,$30(a0)
000142FA                            
000142FA                            locret_13860:
000142FA 4E75                       		rts	
000142FC                            ; End of function Sonic_HurtStop
000142FC                            
000142FC                            ; ===========================================================================
000142FC                            ; ---------------------------------------------------------------------------
000142FC                            ; Sonic	when he	dies
000142FC                            ; ---------------------------------------------------------------------------
000142FC                            
000142FC                            Obj01_Death:				; XREF: Obj01_Index
000142FC 6100 0000                  		bsr.w	GameOver
00014300 4EBA 9C5E                  		jsr	ObjectFall
00014304 6100 F460                  		bsr.w	Sonic_RecordPos
00014308 6100 0000                  		bsr.w	Sonic_Animate
0001430C 6100 0000                  		bsr.w	LoadSonicDynPLC
00014310 4EFA 9CE6                  		jmp	DisplaySprite
00014314                            
00014314                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014314                            
00014314                            
00014314                            GameOver:				; XREF: Obj01_Death
00014314 3038 F72E                  		move.w	($FFFFF72E).w,d0
00014318 0640 0100                  		addi.w	#$100,d0
0001431C B068 000C                  		cmp.w	$C(a0),d0
00014320 6400 0000                  		bcc.w	locret_13900
00014324 317C FFC8 0012             		move.w	#-$38,$12(a0)
0001432A 5428 0024                  		addq.b	#2,$24(a0)
0001432E 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
00014332 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; update lives	counter
00014336 5338 FE12                  		subq.b	#1,($FFFFFE12).w ; subtract 1 from number of lives
0001433A 6600                       		bne.s	loc_138D4
0001433C 317C 0000 003A             		move.w	#0,$3A(a0)
00014342 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load GAME object
00014348 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
0001434E 11FC 0001 D0DA             		move.b	#1,($FFFFD0DA).w ; set OVER object to correct frame
00014354 4238 FE1A                  		clr.b	($FFFFFE1A).w
00014358                            
00014358                            loc_138C2:
00014358 303C 008F                  		move.w	#$8F,d0
0001435C 4EB9 0000 15CC             		jsr	(PlaySound).l	; play game over music
00014362 7003                       		moveq	#3,d0
00014364 4EF9 0000 17B6             		jmp	(LoadPLC).l	; load game over patterns
0001436A                            ; ===========================================================================
0001436A                            
0001436A                            loc_138D4:
0001436A 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
00014370 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is TIME OVER tag set?
00014374 6700                       		beq.s	locret_13900	; if not, branch
00014376 317C 0000 003A             		move.w	#0,$3A(a0)
0001437C 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load TIME object
00014382 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
00014388 11FC 0002 D09A             		move.b	#2,($FFFFD09A).w
0001438E 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
00014394 60C2                       		bra.s	loc_138C2
00014396                            ; ===========================================================================
00014396                            
00014396                            locret_13900:
00014396 4E75                       		rts	
00014398                            ; End of function GameOver
00014398                            
00014398                            ; ===========================================================================
00014398                            ; ---------------------------------------------------------------------------
00014398                            ; Sonic	when the level is restarted
00014398                            ; ---------------------------------------------------------------------------
00014398                            
00014398                            Obj01_ResetLevel:			; XREF: Obj01_Index
00014398 4A68 003A                  		tst.w	$3A(a0)
0001439C 6700                       		beq.s	locret_13914
0001439E 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
000143A2 6600                       		bne.s	locret_13914
000143A4 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
000143AA                            
000143AA                            locret_13914:
000143AA 4E75                       		rts	
000143AC                            
000143AC                            ; ---------------------------------------------------------------------------
000143AC                            ; Subroutine to	make Sonic run around loops (GHZ/SLZ)
000143AC                            ; ---------------------------------------------------------------------------
000143AC                            
000143AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000143AC                            
000143AC                            
000143AC                            Sonic_Loops:				; XREF: Obj01_Control
000143AC                            ;		cmpi.b	#3,($FFFFFE10).w ; is level SLZ	?
000143AC                            ;		beq.s	loc_13926	; if yes, branch
000143AC                            ;		tst.b	($FFFFFE10).w	; is level GHZ ?
000143AC                            ;		bne.w	locret_139C2	; if not, branch
000143AC                            ;		this is commented out, please do more plane messups id love that
000143AC                            ;loc_13926:
000143AC 3028 000C                  		move.w	$C(a0),d0
000143B0 E248                       		lsr.w	#1,d0
000143B2 0240 0380                  		andi.w	#$380,d0
000143B6 1228 0008                  		move.b	8(a0),d1
000143BA 0241 007F                  		andi.w	#$7F,d1
000143BE D041                       		add.w	d1,d0
000143C0 43F8 A400                  		lea	($FFFFA400).w,a1
000143C4 1231 0000                  		move.b	(a1,d0.w),d1	; d1 is	the 256x256 tile Sonic is currently on
000143C8 B238 F7AE                  		cmp.b	($FFFFF7AE).w,d1
000143CC 6700 FA76                  		beq.w	Obj01_ChkRoll
000143D0 B238 F7AF                  		cmp.b	($FFFFF7AF).w,d1
000143D4 6700 FA6E                  		beq.w	Obj01_ChkRoll
000143D8 B238 F7AC                  		cmp.b	($FFFFF7AC).w,d1
000143DC 6700                       		beq.s	loc_13976
000143DE B238 F7AD                  		cmp.b	($FFFFF7AD).w,d1
000143E2 6700                       		beq.s	loc_13966
000143E4 08A8 0006 0001             		bclr	#6,1(a0)
000143EA 4E75                       		rts	
000143EC                            ; ===========================================================================
000143EC                            
000143EC                            loc_13966:
000143EC 0828 0001 0022             		btst	#1,$22(a0)
000143F2 6700                       		beq.s	loc_13976
000143F4 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
000143FA 4E75                       		rts	
000143FC                            ; ===========================================================================
000143FC                            
000143FC                            loc_13976:
000143FC 3428 0008                  		move.w	8(a0),d2
00014400 0C02 002C                  		cmpi.b	#$2C,d2
00014404 6400                       		bcc.s	loc_13988
00014406 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
0001440C 4E75                       		rts	
0001440E                            ; ===========================================================================
0001440E                            
0001440E                            loc_13988:
0001440E 0C02 00E0                  		cmpi.b	#-$20,d2
00014412 6500                       		bcs.s	loc_13996
00014414 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
0001441A 4E75                       		rts	
0001441C                            ; ===========================================================================
0001441C                            
0001441C                            loc_13996:
0001441C 0828 0006 0001             		btst	#6,1(a0)
00014422 6600                       		bne.s	loc_139B2
00014424 1228 0026                  		move.b	$26(a0),d1
00014428 6700                       		beq.s	locret_139C2
0001442A 0C01 0080                  		cmpi.b	#-$80,d1
0001442E 6200                       		bhi.s	locret_139C2
00014430 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
00014436 4E75                       		rts	
00014438                            ; ===========================================================================
00014438                            
00014438                            loc_139B2:
00014438 1228 0026                  		move.b	$26(a0),d1
0001443C 0C01 0080                  		cmpi.b	#-$80,d1
00014440 6300                       		bls.s	locret_139C2
00014442 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
00014448                            
00014448                            locret_139C2:
00014448 4E75                       		rts	
0001444A                            ; End of function Sonic_Loops
0001444A                            
0001444A                            ; ---------------------------------------------------------------------------
0001444A                            ; Subroutine to	animate	Sonic's sprites
0001444A                            ; ---------------------------------------------------------------------------
0001444A                            
0001444A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001444A                            
0001444A                            Player_Anim:
0001444A 0000 0000                  	dc.l	SonicAniData
0001444E 0000 0000                  	dc.l	SonicAniData ; gronic
00014452 0000 0000                  	dc.l	SonicAniData ; anakama
00014456 0000 0000                  	dc.l	SonicAniData ; LimitedSonic
0001445A                            
0001445A                            	; Insert more animation data for other characters here
0001445A                            	
0001445A                            Sonic_Animate:				; XREF: Obj01_Control; et al
0001445A 7000                       			moveq	#0,d0
0001445C 1038 FFE8                  		move.b	(v_character),d0
00014460 E548                       		lsl.w	#2,d0
00014462 43FA FFE6                  		lea 	Player_Anim(pc),a1
00014466                            		
00014466 2271 0000                  		movea.l	(a1,d0.w),a1	; load Sonic dplc
0001446A                            	
0001446A 7000                       		moveq	#0,d0
0001446C 1028 001C                  		move.b	$1C(a0),d0
00014470 B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
00014474 6700                       		beq.s	SAnim_Do	; if not, branch
00014476 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
0001447A 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
00014480 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
00014486                            
00014486                            SAnim_Do:
00014486 D040                       		add.w	d0,d0
00014488 D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
0001448C 1011                       		move.b	(a1),d0
0001448E 6B00                       		bmi.s	SAnim_WalkRun	; if animation is walk/run/roll/jump, branch
00014490 1228 0022                  		move.b	$22(a0),d1
00014494 0201 0001                  		andi.b	#1,d1
00014498 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001449E 8328 0001                  		or.b	d1,1(a0)
000144A2 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
000144A6 6A00                       		bpl.s	SAnim_Delay	; if time remains, branch
000144A8 1140 001E                  		move.b	d0,$1E(a0)	; load frame duration
000144AC                            
000144AC                            SAnim_Do2:
000144AC 7200                       		moveq	#0,d1
000144AE 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
000144B2 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
000144B6 6B00                       		bmi.s	SAnim_End_FF	; if animation is complete, branch
000144B8                            
000144B8                            SAnim_Next:
000144B8 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
000144BC 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
000144C0                            
000144C0                            SAnim_Delay:
000144C0 4E75                       		rts	
000144C2                            ; ===========================================================================
000144C2                            
000144C2                            SAnim_End_FF:
000144C2 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
000144C4 6600                       		bne.s	SAnim_End_FE	; if not, branch
000144C6 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
000144CC 1029 0001                  		move.b	1(a1),d0	; read sprite number
000144D0 60E6                       		bra.s	SAnim_Next
000144D2                            ; ===========================================================================
000144D2                            
000144D2                            SAnim_End_FE:
000144D2 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
000144D4 6600                       		bne.s	SAnim_End_FD	; if not, branch
000144D6 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
000144DA 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
000144DE 9200                       		sub.b	d0,d1
000144E0 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
000144E4 60D2                       		bra.s	SAnim_Next
000144E6                            ; ===========================================================================
000144E6                            
000144E6                            SAnim_End_FD:
000144E6 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
000144E8 6600                       		bne.s	SAnim_End	; if not, branch
000144EA 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
000144F0                            
000144F0                            SAnim_End:
000144F0 4E75                       		rts	
000144F2                            ; ===========================================================================
000144F2                            
000144F2                            SAnim_WalkRun:				; XREF: SAnim_Do
000144F2 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
000144F6 6AC8                       		bpl.s	SAnim_Delay	; if time remains, branch
000144F8 5200                       		addq.b	#1,d0		; is animation walking/running?
000144FA 6600 0000                  		bne.w	SAnim_RollJump	; if not, branch
000144FE 7200                       		moveq	#0,d1
00014500 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
00014504 1428 0022                  		move.b	$22(a0),d2
00014508 0202 0001                  		andi.b	#1,d2		; is Sonic mirrored horizontally?
0001450C 6600                       		bne.s	loc_13A70	; if yes, branch
0001450E 4600                       		not.b	d0		; reverse angle
00014510                            
00014510                            loc_13A70:
00014510 0600 0010                  		addi.b	#$10,d0		; add $10 to angle
00014514 6A00                       		bpl.s	loc_13A78	; if angle is $0-$7F, branch
00014516 7203                       		moveq	#3,d1
00014518                            
00014518                            loc_13A78:
00014518 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001451E B302                       		eor.b	d1,d2
00014520 8528 0001                  		or.b	d2,1(a0)
00014524 0828 0005 0022             		btst	#5,$22(a0)
0001452A 6600 0000                  		bne.w	SAnim_Push
0001452E E808                       		lsr.b	#4,d0		; divide angle by $10
00014530 0200 0006                  		andi.b	#6,d0		; angle	must be	0, 2, 4	or 6
00014534 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
00014538 6A00                       		bpl.s	loc_13A9C
0001453A 4442                       		neg.w	d2
0001453C                            
0001453C                            loc_13A9C:
0001453C 43F9 0000 0000             		lea	(SonAni_Run).l,a1 ; use	running	animation
00014542 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic at running speed?
00014546 6400                       		bcc.s	loc_13AB4	; if yes, branch
00014548 43F9 0000 0000             		lea	(SonAni_Walk).l,a1 ; use walking animation
0001454E 1200                       		move.b	d0,d1
00014550 E209                       		lsr.b	#1,d1
00014552 D001                       		add.b	d1,d0
00014554                            
00014554                            loc_13AB4:
00014554 D000                       		add.b	d0,d0
00014556 1600                       		move.b	d0,d3
00014558 4442                       		neg.w	d2
0001455A 0642 0800                  		addi.w	#$800,d2
0001455E 6A00                       		bpl.s	loc_13AC2
00014560 7400                       		moveq	#0,d2
00014562                            
00014562                            loc_13AC2:
00014562 E04A                       		lsr.w	#8,d2
00014564 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
00014568 6100 FF42                  		bsr.w	SAnim_Do2
0001456C D728 001A                  		add.b	d3,$1A(a0)	; modify frame number
00014570 4E75                       		rts	
00014572                            ; ===========================================================================
00014572                            
00014572                            SAnim_RollJump:				; XREF: SAnim_WalkRun
00014572 5200                       		addq.b	#1,d0		; is animation rolling/jumping?
00014574 6600                       		bne.s	SAnim_Push	; if not, branch
00014576 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
0001457A 6A00                       		bpl.s	loc_13ADE
0001457C 4442                       		neg.w	d2
0001457E                            
0001457E                            loc_13ADE:
0001457E 43F9 0000 0000             		lea	(SonAni_Roll2).l,a1 ; use fast animation
00014584 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic moving fast?
00014588 6400                       		bcc.s	loc_13AF0	; if yes, branch
0001458A 43F9 0000 0000             		lea	(SonAni_Roll).l,a1 ; use slower	animation
00014590                            
00014590                            loc_13AF0:
00014590 4442                       		neg.w	d2
00014592 0642 0400                  		addi.w	#$400,d2
00014596 6A00                       		bpl.s	loc_13AFA
00014598 7400                       		moveq	#0,d2
0001459A                            
0001459A                            loc_13AFA:
0001459A E04A                       		lsr.w	#8,d2
0001459C 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
000145A0 1228 0022                  		move.b	$22(a0),d1
000145A4 0201 0001                  		andi.b	#1,d1
000145A8 0228 00FC 0001             		andi.b	#$FC,1(a0)
000145AE 8328 0001                  		or.b	d1,1(a0)
000145B2 6000 FEF8                  		bra.w	SAnim_Do2
000145B6                            ; ===========================================================================
000145B6                            
000145B6                            SAnim_Push:				; XREF: SAnim_RollJump
000145B6 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
000145BA 6B00                       		bmi.s	loc_13B1E
000145BC 4442                       		neg.w	d2
000145BE                            
000145BE                            loc_13B1E:
000145BE 0642 0800                  		addi.w	#$800,d2
000145C2 6A00                       		bpl.s	loc_13B26
000145C4 7400                       		moveq	#0,d2
000145C6                            
000145C6                            loc_13B26:
000145C6 EC4A                       		lsr.w	#6,d2
000145C8 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
000145CC 43F9 0000 0000             		lea	(SonAni_Push).l,a1
000145D2 1228 0022                  		move.b	$22(a0),d1
000145D6 0201 0001                  		andi.b	#1,d1
000145DA 0228 00FC 0001             		andi.b	#$FC,1(a0)
000145E0 8328 0001                  		or.b	d1,1(a0)
000145E4 6000 FEC6                  		bra.w	SAnim_Do2
000145E8                            ; End of function Sonic_Animate
000145E8                            
000145E8                            ; ===========================================================================
000145E8                            SonicAniData:
000145E8                            	include "_anim\Sonic.asm"
000145E8                            ; ---------------------------------------------------------------------------
000145E8                            ; Animation script - Sonic
000145E8                            ; ---------------------------------------------------------------------------
000145E8 0000                       		dc.w SonAni_Walk-SonicAniData
000145EA 0000                       		dc.w SonAni_Run-SonicAniData
000145EC 0000                       		dc.w SonAni_Roll-SonicAniData
000145EE 0000                       		dc.w SonAni_Roll2-SonicAniData
000145F0 0000                       		dc.w SonAni_Push-SonicAniData
000145F2 0000                       		dc.w SonAni_Wait-SonicAniData
000145F4 0000                       		dc.w SonAni_Balance-SonicAniData
000145F6 0000                       		dc.w SonAni_LookUp-SonicAniData
000145F8 0000                       		dc.w SonAni_Duck-SonicAniData
000145FA 0000                       		dc.w SonAni_Warp1-SonicAniData
000145FC 0000                       		dc.w SonAni_Warp2-SonicAniData
000145FE 0000                       		dc.w SonAni_Warp3-SonicAniData
00014600 0000                       		dc.w SonAni_Warp4-SonicAniData
00014602 0000                       		dc.w SonAni_Stop-SonicAniData
00014604 0000                       		dc.w SonAni_Float1-SonicAniData
00014606 0000                       		dc.w SonAni_Float2-SonicAniData
00014608 0000                       		dc.w SonAni_Spring-SonicAniData
0001460A 0000                       		dc.w SonAni_LZHang-SonicAniData
0001460C 0000                       		dc.w SonAni_Leap1-SonicAniData
0001460E 0000                       		dc.w SonAni_Leap2-SonicAniData
00014610 0000                       		dc.w SonAni_Surf-SonicAniData
00014612 0000                       		dc.w SonAni_Bubble-SonicAniData
00014614 0000                       		dc.w SonAni_Death1-SonicAniData
00014616 0000                       		dc.w SonAni_Drown-SonicAniData
00014618 0000                       		dc.w SonAni_Death2-SonicAniData
0001461A 0000                       		dc.w SonAni_Shrink-SonicAniData
0001461C 0000                       		dc.w SonAni_Hurt-SonicAniData
0001461E 0000                       		dc.w SonAni_LZSlide-SonicAniData
00014620 0000                       		dc.w SonAni_Blank-SonicAniData
00014622 0000                       		dc.w SonAni_Float3-SonicAniData
00014624 0000                       		dc.w SonAni_Float4-SonicAniData
00014626 FF08 095A 0A0B 0659 07FF   SonAni_Walk:	dc.b $FF, 8, 9, $5A, $A, $B, 6, $59, 7, $FF
00014630 FF1E 1F20 21FF FFFF        SonAni_Run:	dc.b $FF, $1E, $1F, $20, $21, $FF, $FF,	$FF
00014638 FE2E 2F30 3132 FFFF        SonAni_Roll:	dc.b $FE, $2E, $2F, $30, $31, $32, $FF,	$FF
00014640 FE2E 2F32 3031 32FF        SonAni_Roll2:	dc.b $FE, $2E, $2F, $32, $30, $31, $32,	$FF
00014648 FD45 4647 48FF FFFF        SonAni_Push:	dc.b $FD, $45, $46, $47, $48, $FF, $FF,	$FF
00014650 1701 0101 0101 0101 0101+  SonAni_Wait:	dc.b $17, 1, 1,	1, 1, 1, 1, 1, 1, 1, 1,	1, 1, 3, 2, 2, 2, 3, 4, $FE, 2, 0
00014666 1E3A 3BFF                  SonAni_Balance:	dc.b $1E, $3A, $3B, $FF
0001466A 3F05 FF00                  SonAni_LookUp:	dc.b $3F, 5, $FF, 0
0001466E 3F39 FF00                  SonAni_Duck:	dc.b $3F, $39, $FF, 0
00014672 3F33 FF00                  SonAni_Warp1:	dc.b $3F, $33, $FF, 0
00014676 3F34 FF00                  SonAni_Warp2:	dc.b $3F, $34, $FF, 0
0001467A 3F35 FF00                  SonAni_Warp3:	dc.b $3F, $35, $FF, 0
0001467E 3F36 FF00                  SonAni_Warp4:	dc.b $3F, $36, $FF, 0
00014682 0737 38FF                  SonAni_Stop:	dc.b 7,	$37, $38, $FF
00014686 073C 3FFF                  SonAni_Float1:	dc.b 7,	$3C, $3F, $FF
0001468A 073C 3D53 3E54 FF00        SonAni_Float2:	dc.b 7,	$3C, $3D, $53, $3E, $54, $FF, 0
00014692 2F40 FD00                  SonAni_Spring:	dc.b $2F, $40, $FD, 0
00014696 0441 42FF                  SonAni_LZHang:	dc.b 4,	$41, $42, $FF
0001469A 0F43 4343 FE01             SonAni_Leap1:	dc.b $F, $43, $43, $43,	$FE, 1
000146A0 0F43 44FE 0100             SonAni_Leap2:	dc.b $F, $43, $44, $FE,	1, 0
000146A6 3F49 FF00                  SonAni_Surf:	dc.b $3F, $49, $FF, 0
000146AA 0B56 560A 0BFD 0000        SonAni_Bubble:	dc.b $B, $56, $56, $A, $B, $FD,	0, 0
000146B2 204B FF00                  SonAni_Death1:	dc.b $20, $4B, $FF, 0
000146B6 2F4C FF00                  SonAni_Drown:	dc.b $2F, $4C, $FF, 0
000146BA 034D FF00                  SonAni_Death2:	dc.b 3,	$4D, $FF, 0
000146BE 034E 4F50 5152 00FE 0100   SonAni_Shrink:	dc.b 3,	$4E, $4F, $50, $51, $52, 0, $FE, 1, 0
000146C8 035B FF00                  SonAni_Hurt:	dc.b 3,	$5B, $FF, 0
000146CC 0755 57FF                  SonAni_LZSlide:	dc.b 7, $55, $57, $FF
000146D0 7700 FD00                  SonAni_Blank:	dc.b $77, 0, $FD, 0
000146D4 033C 3D53 3E54 FF00        SonAni_Float3:	dc.b 3,	$3C, $3D, $53, $3E, $54, $FF, 0
000146DC 033C FD00                  SonAni_Float4:	dc.b 3,	$3C, $FD, 0
000146E0                            		even
000146E0                            		even
000146E0                            
000146E0                            ; ---------------------------------------------------------------------------
000146E0                            ; Sonic	pattern	loading	subroutine
000146E0                            ; ---------------------------------------------------------------------------
000146E0                            
000146E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000146E0                            Player_DPLC:
000146E0 0000 0000                  	dc.l	SonicDynPLC
000146E4 0000 0000                  	dc.l	SonicDynPLC ; gronic
000146E8 0000 0000                  	dc.l	SonicDynPLC ; anakama
000146EC 0000 0000                  	dc.l	SonicDynPLC ; LimitedSonic
000146F0                            	; add pointers for player dplc here
000146F0                            Player_Art:
000146F0 0000 0000                  	dc.l	Art_Sonic
000146F4 0000 0000                  	dc.l	Art_Sonic ; gronic
000146F8 0000 0000                  	dc.l	Art_Sonic ; anakama
000146FC 0000 0000                  	dc.l	Art_Sonic ; LimitedSonic
00014700                            	; add pointers for player art here
00014700                            
00014700                            LoadSonicDynPLC:			; XREF: Obj01_Control; et al
00014700 7000                       		moveq	#0,d0
00014702 1028 001A                  		move.b	$1A(a0),d0	; load frame number
00014706 B038 F766                  		cmp.b	($FFFFF766).w,d0
0001470A 6700                       		beq.s	locret_13C96
0001470C 11C0 F766                  		move.b	d0,($FFFFF766).w
00014710                            		
00014710 323C 0000                  		move.w	#0,d1
00014714 1238 FFE8                  		move.b	(v_character),d1
00014718 E549                       		lsl.w	#2,d1
0001471A 45FA FFC4                  		lea 	Player_DPLC(pc),a2
0001471E                            
0001471E 2472 1000                  		movea.l	(a2,d1.w),a2	; load Sonic dplc
00014722                            		
00014722 D040                       		add.w	d0,d0
00014724 D4F2 0000                  		adda.w	(a2,d0.w),a2
00014728 7200                       		moveq	#0,d1
0001472A 121A                       		move.b	(a2)+,d1	; read "number of entries" value
0001472C 5301                       		subq.b	#1,d1
0001472E 6B00                       		bmi.s	locret_13C96
00014730 47F8 C800                  		lea	($FFFFC800).w,a3
00014734 11FC 0001 F767             		move.b	#1,($FFFFF767).w
0001473A                            
0001473A                            SPLC_ReadEntry:
0001473A 303C 0000                  		move.w	#0,d0
0001473E 1038 FFE8                  		move.b	(v_character),d0
00014742 E548                       		lsl.w	#2,d0
00014744 43FA FFAA                  		lea 	Player_Art(pc),a1
00014748                            
00014748 2271 0000                  		movea.l	(a1,d0.w),a1	; load Sonic art
0001474C                            
0001474C 7400                       		moveq	#0,d2
0001474E 141A                       		move.b	(a2)+,d2
00014750 3002                       		move.w	d2,d0
00014752 E808                       		lsr.b	#4,d0
00014754 E14A                       		lsl.w	#8,d2
00014756 141A                       		move.b	(a2)+,d2
00014758 EB4A                       		lsl.w	#5,d2
0001475A D3C2                       		adda.l	d2,a1
0001475C                            
0001475C                            SPLC_LoadTile:
0001475C 4CD9 707C                  		movem.l	(a1)+,d2-d6/a4-a6
00014760 48D3 707C                  		movem.l	d2-d6/a4-a6,(a3)
00014764 47EB 0020                  		lea	$20(a3),a3	; next tile
00014768 51C8 FFF2                  		dbf	d0,SPLC_LoadTile ; repeat for number of	tiles
0001476C                            
0001476C 51C9 FFCC                  		dbf	d1,SPLC_ReadEntry ; repeat for number of entries
00014770                            
00014770                            locret_13C96:
00014770 4E75                       		rts	
00014772                            ; End of function LoadSonicDynPLC
00014772                            
00014772                            ; ===========================================================================
00014772                            ; ---------------------------------------------------------------------------
00014772                            ; Object 0A - drowning countdown numbers and small bubbles (LZ)
00014772                            ; ---------------------------------------------------------------------------
00014772                            
00014772                            Obj0A:					; XREF: Obj_Index
00014772 7000                       		moveq	#0,d0
00014774 1028 0024                  		move.b	$24(a0),d0
00014778 323B 0000                  		move.w	Obj0A_Index(pc,d0.w),d1
0001477C 4EFB 1000                  		jmp	Obj0A_Index(pc,d1.w)
00014780                            ; ===========================================================================
00014780 0000 0000                  Obj0A_Index:	dc.w Obj0A_Main-Obj0A_Index, Obj0A_Animate-Obj0A_Index
00014784 0000 0000                  		dc.w Obj0A_ChkWater-Obj0A_Index, Obj0A_Display-Obj0A_Index
00014788 0000 0000                  		dc.w Obj0A_Delete2-Obj0A_Index,	Obj0A_Countdown-Obj0A_Index
0001478C 0000 0000                  		dc.w Obj0A_AirLeft-Obj0A_Index,	Obj0A_Display-Obj0A_Index
00014790 0000                       		dc.w Obj0A_Delete2-Obj0A_Index
00014792                            ; ===========================================================================
00014792                            
00014792                            Obj0A_Main:				; XREF: Obj0A_Index
00014792 5428 0024                  		addq.b	#2,$24(a0)
00014796 217C 0001 338A 0004        		move.l	#Map_obj64,4(a0)
0001479E 317C 8348 0002             		move.w	#$8348,2(a0)
000147A4 117C 0084 0001             		move.b	#$84,1(a0)
000147AA 117C 0010 0019             		move.b	#$10,$19(a0)
000147B0 117C 0001 0018             		move.b	#1,$18(a0)
000147B6 1028 0028                  		move.b	$28(a0),d0
000147BA 6A00                       		bpl.s	loc_13D00
000147BC 5028 0024                  		addq.b	#8,$24(a0)
000147C0 217C 0000 0000 0004        		move.l	#Map_obj0A,4(a0)
000147C8 317C 0440 0002             		move.w	#$440,2(a0)
000147CE 0240 007F                  		andi.w	#$7F,d0
000147D2 1140 0033                  		move.b	d0,$33(a0)
000147D6 6000 0000                  		bra.w	Obj0A_Countdown
000147DA                            ; ===========================================================================
000147DA                            
000147DA                            loc_13D00:
000147DA 1140 001C                  		move.b	d0,$1C(a0)
000147DE 3168 0008 0030             		move.w	8(a0),$30(a0)
000147E4 317C FF78 0012             		move.w	#-$88,$12(a0)
000147EA                            
000147EA                            Obj0A_Animate:				; XREF: Obj0A_Index
000147EA 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
000147F0 4EB9 0000 B056             		jsr	AnimateSprite
000147F6                            
000147F6                            Obj0A_ChkWater:				; XREF: Obj0A_Index
000147F6 3038 F646                  		move.w	($FFFFF646).w,d0
000147FA B068 000C                  		cmp.w	$C(a0),d0	; has bubble reached the water surface?
000147FE 6500                       		bcs.s	Obj0A_Wobble	; if not, branch
00014800 117C 0006 0024             		move.b	#6,$24(a0)
00014806 5E28 001C                  		addq.b	#7,$1C(a0)
0001480A 0C28 000D 001C             		cmpi.b	#$D,$1C(a0)
00014810 6700                       		beq.s	Obj0A_Display
00014812 6000                       		bra.s	Obj0A_Display
00014814                            ; ===========================================================================
00014814                            
00014814                            Obj0A_Wobble:
00014814 4A38 F7C7                  		tst.b	($FFFFF7C7).w
00014818 6700                       		beq.s	loc_13D44
0001481A 5868 0030                  		addq.w	#4,$30(a0)
0001481E                            
0001481E                            loc_13D44:
0001481E 1028 0026                  		move.b	$26(a0),d0
00014822 5228 0026                  		addq.b	#1,$26(a0)
00014826 0240 007F                  		andi.w	#$7F,d0
0001482A 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
00014830 1031 0000                  		move.b	(a1,d0.w),d0
00014834 4880                       		ext.w	d0
00014836 D068 0030                  		add.w	$30(a0),d0
0001483A 3140 0008                  		move.w	d0,8(a0)
0001483E 6100                       		bsr.s	Obj0A_ShowNumber
00014840 4EBA 9790                  		jsr	SpeedToPos
00014844 4A28 0001                  		tst.b	1(a0)
00014848 6A00                       		bpl.s	Obj0A_Delete
0001484A 4EFA 97AC                  		jmp	DisplaySprite
0001484E                            ; ===========================================================================
0001484E                            
0001484E                            Obj0A_Delete:
0001484E 4EFA 97E4                  		jmp	DeleteObject
00014852                            ; ===========================================================================
00014852                            
00014852                            Obj0A_Display:				; XREF: Obj0A_Index
00014852 6100                       		bsr.s	Obj0A_ShowNumber
00014854 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
0001485A 4EB9 0000 B056             		jsr	AnimateSprite
00014860 4EFA 9796                  		jmp	DisplaySprite
00014864                            ; ===========================================================================
00014864                            
00014864                            Obj0A_Delete2:				; XREF: Obj0A_Index
00014864 4EFA 97CE                  		jmp	DeleteObject
00014868                            ; ===========================================================================
00014868                            
00014868                            Obj0A_AirLeft:				; XREF: Obj0A_Index
00014868 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w ; check air remaining
0001486E 6200                       		bhi.s	Obj0A_Delete3	; if higher than $C, branch
00014870 5368 0038                  		subq.w	#1,$38(a0)
00014874 6600                       		bne.s	Obj0A_Display2
00014876 117C 000E 0024             		move.b	#$E,$24(a0)
0001487C 5E28 001C                  		addq.b	#7,$1C(a0)
00014880 60D0                       		bra.s	Obj0A_Display
00014882                            ; ===========================================================================
00014882                            
00014882                            Obj0A_Display2:
00014882 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
00014888 4EB9 0000 B056             		jsr	AnimateSprite
0001488E 4A28 0001                  		tst.b	1(a0)
00014892 6A00                       		bpl.s	Obj0A_Delete3
00014894 4EFA 9762                  		jmp	DisplaySprite
00014898                            ; ===========================================================================
00014898                            
00014898                            Obj0A_Delete3:
00014898 4EFA 979A                  		jmp	DeleteObject
0001489C                            ; ===========================================================================
0001489C                            
0001489C                            Obj0A_ShowNumber:			; XREF: Obj0A_Wobble; Obj0A_Display
0001489C 4A68 0038                  		tst.w	$38(a0)
000148A0 6700                       		beq.s	locret_13E1A
000148A2 5368 0038                  		subq.w	#1,$38(a0)
000148A6 6600                       		bne.s	locret_13E1A
000148A8 0C28 0007 001C             		cmpi.b	#7,$1C(a0)
000148AE 6400                       		bcc.s	locret_13E1A
000148B0 317C 000F 0038             		move.w	#$F,$38(a0)
000148B6 4268 0012                  		clr.w	$12(a0)
000148BA 117C 0080 0001             		move.b	#$80,1(a0)
000148C0 3028 0008                  		move.w	8(a0),d0
000148C4 9078 F700                  		sub.w	($FFFFF700).w,d0
000148C8 0640 0080                  		addi.w	#$80,d0
000148CC 3140 0008                  		move.w	d0,8(a0)
000148D0 3028 000C                  		move.w	$C(a0),d0
000148D4 9078 F704                  		sub.w	($FFFFF704).w,d0
000148D8 0640 0080                  		addi.w	#$80,d0
000148DC 3140 000A                  		move.w	d0,$A(a0)
000148E0 117C 000C 0024             		move.b	#$C,$24(a0)
000148E6                            
000148E6                            locret_13E1A:
000148E6 4E75                       		rts	
000148E8                            ; ===========================================================================
000148E8                            Obj0A_WobbleData:
000148E8 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 2
000148F9 0203 0303 0303 0303 0303+  		dc.b 2,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 3, 3, 4, 3
0001490A 0303 0303 0303 0303 0303+  		dc.b 3,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 2, 2, 2, 2
0001491B 0202 0201 0101 0101 0000+  		dc.b 2,	2, 2, 1, 1, 1, 1, 1, 0,	0, 0, 0, 0, 0, -1, -1
0001492B FFFF FFFE FEFE FEFE FDFD+  		dc.b -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
00014938 FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
00014945 FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
00014952 FCFC FCFC FCFD FDFD FDFD+  		dc.b -4, -4, -4, -4, -4, -3, -3, -3, -3, -3, -3, -3, -2
0001495F FEFE FEFE FFFF FFFF FF     		dc.b -2, -2, -2, -2, -1, -1, -1, -1, -1
00014968                            ; ===========================================================================
00014968                            
00014968                            Obj0A_Countdown:			; XREF: Obj0A_Index
00014968 4A68 002C                  		tst.w	$2C(a0)
0001496C 6600 0000                  		bne.w	loc_13F86
00014970 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00014976 6400 0000                  		bcc.w	locret_1408C
0001497A 0838 0006 D022             		btst	#6,($FFFFD022).w
00014980 6700 0000                  		beq.w	locret_1408C
00014984 5368 0038                  		subq.w	#1,$38(a0)
00014988 6A00 0000                  		bpl.w	loc_13FAC
0001498C 317C 003B 0038             		move.w	#59,$38(a0)
00014992 317C 0001 0036             		move.w	#1,$36(a0)
00014998 4EB9 0000 2D46             		jsr	(RandomNumber).l
0001499E 0240 0001                  		andi.w	#1,d0
000149A2 1140 0034                  		move.b	d0,$34(a0)
000149A6 3038 FE14                  		move.w	($FFFFFE14).w,d0 ; check air remaining
000149AA 0C40 0019                  		cmpi.w	#$19,d0
000149AE 6700                       		beq.s	Obj0A_WarnSound	; play sound if	air is $19
000149B0 0C40 0014                  		cmpi.w	#$14,d0
000149B4 6700                       		beq.s	Obj0A_WarnSound
000149B6 0C40 000F                  		cmpi.w	#$F,d0
000149BA 6700                       		beq.s	Obj0A_WarnSound
000149BC 0C40 000C                  		cmpi.w	#$C,d0
000149C0 6200                       		bhi.s	Obj0A_ReduceAir	; if air is above $C, branch
000149C2 6600                       		bne.s	loc_13F02
000149C4 303C 0092                  		move.w	#$92,d0
000149C8 4EB9 0000 15CC             		jsr	(PlaySound).l	; play countdown music
000149CE                            
000149CE                            loc_13F02:
000149CE 5328 0032                  		subq.b	#1,$32(a0)
000149D2 6A00                       		bpl.s	Obj0A_ReduceAir
000149D4 1168 0033 0032             		move.b	$33(a0),$32(a0)
000149DA 08E8 0007 0036             		bset	#7,$36(a0)
000149E0 6000                       		bra.s	Obj0A_ReduceAir
000149E2                            ; ===========================================================================
000149E2                            
000149E2                            Obj0A_WarnSound:			; XREF: Obj0A_Countdown
000149E2 303C 00C2                  		move.w	#$C2,d0
000149E6 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play "ding-ding" warning sound
000149EC                            
000149EC                            Obj0A_ReduceAir:
000149EC 5378 FE14                  		subq.w	#1,($FFFFFE14).w ; subtract 1 from air remaining
000149F0 6400 0000                  		bcc.w	Obj0A_GoMakeItem ; if air is above 0, branch
000149F4 6100 0000                  		bsr.w	ResumeMusic
000149F8 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
000149FE 303C 00B2                  		move.w	#$B2,d0
00014A02 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play drowning sound
00014A08 117C 000A 0034             		move.b	#$A,$34(a0)
00014A0E 317C 0001 0036             		move.w	#1,$36(a0)
00014A14 317C 0078 002C             		move.w	#$78,$2C(a0)
00014A1A 2F08                       		move.l	a0,-(sp)
00014A1C 41F8 D000                  		lea	($FFFFD000).w,a0
00014A20 6100 F81C                  		bsr.w	Sonic_ResetOnFloor
00014A24 117C 0017 001C             		move.b	#$17,$1C(a0)	; use Sonic's drowning animation
00014A2A 08E8 0001 0022             		bset	#1,$22(a0)
00014A30 08E8 0007 0002             		bset	#7,2(a0)
00014A36 317C 0000 0012             		move.w	#0,$12(a0)
00014A3C 317C 0000 0010             		move.w	#0,$10(a0)
00014A42 317C 0000 0014             		move.w	#0,$14(a0)
00014A48 11FC 0001 F744             		move.b	#1,($FFFFF744).w
00014A4E 205F                       		movea.l	(sp)+,a0
00014A50 4E75                       		rts	
00014A52                            ; ===========================================================================
00014A52                            
00014A52                            loc_13F86:
00014A52 5368 002C                  		subq.w	#1,$2C(a0)
00014A56 6600                       		bne.s	loc_13F94
00014A58 11FC 0006 D024             		move.b	#6,($FFFFD024).w
00014A5E 4E75                       		rts	
00014A60                            ; ===========================================================================
00014A60                            
00014A60                            loc_13F94:
00014A60 2F08                       		move.l	a0,-(sp)
00014A62 41F8 D000                  		lea	($FFFFD000).w,a0
00014A66 4EBA 956A                  		jsr	SpeedToPos
00014A6A 0668 0010 0012             		addi.w	#$10,$12(a0)
00014A70 205F                       		movea.l	(sp)+,a0
00014A72 6000                       		bra.s	loc_13FAC
00014A74                            ; ===========================================================================
00014A74                            
00014A74                            Obj0A_GoMakeItem:			; XREF: Obj0A_ReduceAir
00014A74 6000                       		bra.s	Obj0A_MakeItem
00014A76                            ; ===========================================================================
00014A76                            
00014A76                            loc_13FAC:
00014A76 4A68 0036                  		tst.w	$36(a0)
00014A7A 6700 0000                  		beq.w	locret_1408C
00014A7E 5368 003A                  		subq.w	#1,$3A(a0)
00014A82 6A00 0000                  		bpl.w	locret_1408C
00014A86                            
00014A86                            Obj0A_MakeItem:
00014A86 4EB9 0000 2D46             		jsr	(RandomNumber).l
00014A8C 0240 000F                  		andi.w	#$F,d0
00014A90 3140 003A                  		move.w	d0,$3A(a0)
00014A94 4EBA 99E8                  		jsr	SingleObjLoad
00014A98 6600 0000                  		bne.w	locret_1408C
00014A9C 12BC 000A                  		move.b	#$A,0(a1)	; load object
00014AA0 3378 D008 0008             		move.w	($FFFFD008).w,8(a1) ; match X position to Sonic
00014AA6 7006                       		moveq	#6,d0
00014AA8 0838 0000 D022             		btst	#0,($FFFFD022).w
00014AAE 6700                       		beq.s	loc_13FF2
00014AB0 4440                       		neg.w	d0
00014AB2 137C 0040 0026             		move.b	#$40,$26(a1)
00014AB8                            
00014AB8                            loc_13FF2:
00014AB8 D169 0008                  		add.w	d0,8(a1)
00014ABC 3378 D00C 000C             		move.w	($FFFFD00C).w,$C(a1)
00014AC2 137C 0006 0028             		move.b	#6,$28(a1)
00014AC8 4A68 002C                  		tst.w	$2C(a0)
00014ACC 6700 0000                  		beq.w	loc_1403E
00014AD0 0268 0007 003A             		andi.w	#7,$3A(a0)
00014AD6 0668 0000 003A             		addi.w	#0,$3A(a0)
00014ADC 3038 D00C                  		move.w	($FFFFD00C).w,d0
00014AE0 0440 000C                  		subi.w	#$C,d0
00014AE4 3340 000C                  		move.w	d0,$C(a1)
00014AE8 4EB9 0000 2D46             		jsr	(RandomNumber).l
00014AEE 1340 0026                  		move.b	d0,$26(a1)
00014AF2 3038 FE04                  		move.w	($FFFFFE04).w,d0
00014AF6 0200 0003                  		andi.b	#3,d0
00014AFA 6600                       		bne.s	loc_14082
00014AFC 137C 000E 0028             		move.b	#$E,$28(a1)
00014B02 6000                       		bra.s	loc_14082
00014B04                            ; ===========================================================================
00014B04                            
00014B04                            loc_1403E:
00014B04 0828 0007 0036             		btst	#7,$36(a0)
00014B0A 6700                       		beq.s	loc_14082
00014B0C 3438 FE14                  		move.w	($FFFFFE14).w,d2
00014B10 E24A                       		lsr.w	#1,d2
00014B12 4EB9 0000 2D46             		jsr	(RandomNumber).l
00014B18 0240 0003                  		andi.w	#3,d0
00014B1C 6600                       		bne.s	loc_1406A
00014B1E 08E8 0006 0036             		bset	#6,$36(a0)
00014B24 6600                       		bne.s	loc_14082
00014B26 1342 0028                  		move.b	d2,$28(a1)
00014B2A 337C 001C 0038             		move.w	#$1C,$38(a1)
00014B30                            
00014B30                            loc_1406A:
00014B30 4A28 0034                  		tst.b	$34(a0)
00014B34 6600                       		bne.s	loc_14082
00014B36 08E8 0006 0036             		bset	#6,$36(a0)
00014B3C 6600                       		bne.s	loc_14082
00014B3E 1342 0028                  		move.b	d2,$28(a1)
00014B42 337C 001C 0038             		move.w	#$1C,$38(a1)
00014B48                            
00014B48                            loc_14082:
00014B48 5328 0034                  		subq.b	#1,$34(a0)
00014B4C 6A00                       		bpl.s	locret_1408C
00014B4E 4268 0036                  		clr.w	$36(a0)
00014B52                            
00014B52                            locret_1408C:
00014B52 4E75                       		rts	
00014B54                            
00014B54                            ; ---------------------------------------------------------------------------
00014B54                            ; Subroutine to	play music for LZ/SBZ3 after a countdown
00014B54                            ; ---------------------------------------------------------------------------
00014B54                            
00014B54                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014B54                            
00014B54                            
00014B54                            ResumeMusic:				; XREF: Obj64_Wobble; Sonic_Water; Obj0A_ReduceAir
00014B54 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
00014B5A                             
00014B5A                            ; Third section of the NineKode - Play correct music after the countdown (if you breathe)
00014B5A                             
00014B5A 6200 0000                  		bhi.w	loc_140AC	; change to bhi.w!
00014B5E                             
00014B5E 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
00014B64 6600                       		bne.s	Air_GetBgm2	; if not, branch
00014B66 43F9 0000 3D90             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
00014B6C 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
00014B6E                             
00014B6E                            Air_GetBgm2:
00014B6E 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
00014B74 6600                       		bne.s	Air_GetBgm3	; if not, branch
00014B76 43F9 0000 3D98             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
00014B7C 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
00014B7E                             
00014B7E                            Air_GetBgm3:
00014B7E 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
00014B84 6600                       		bne.s	Air_GetBgm4	; if not, branch
00014B86 43F9 0000 3DA0             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 39
00014B8C 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
00014B8E                             
00014B8E                            Air_GetBgm4:
00014B8E 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
00014B94 6600                       		bne.s	Air_PlayMusic	; if not, branch
00014B96 43F9 0000 3DA6             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
00014B9C                             
00014B9C                            Air_PlayMusic:
00014B9C 1029 0001                  		move.b	1(a1),d0	; load entry $1 from the playlist
00014BA0                             
00014BA0                            loc_140A6:
00014BA0 4EB9 0000 15CC             		jsr	(PlaySound).l
00014BA6                             
00014BA6                            ; NineKode ends here
00014BA6                            
00014BA6                            loc_140AC:
00014BA6 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00014BAC 4238 D372                  		clr.b	($FFFFD372).w
00014BB0 4E75                       		rts	
00014BB2                            ; End of function ResumeMusic
00014BB2                            
00014BB2                            ; ===========================================================================
00014BB2                            Ani_obj0A:
00014BB2                            	include "_anim\obj0A.asm"
00014BB2                            ; ---------------------------------------------------------------------------
00014BB2                            ; Animation script - countdown numbers and bubbles (LZ)
00014BB2                            ; ---------------------------------------------------------------------------
00014BB2 0000                       		dc.w byte_140D6-Ani_obj0A
00014BB4 0000                       		dc.w byte_140E0-Ani_obj0A
00014BB6 0000                       		dc.w byte_140EA-Ani_obj0A
00014BB8 0000                       		dc.w byte_140F4-Ani_obj0A
00014BBA 0000                       		dc.w byte_140FE-Ani_obj0A
00014BBC 0000                       		dc.w byte_14108-Ani_obj0A
00014BBE 0000                       		dc.w byte_14112-Ani_obj0A
00014BC0 0000                       		dc.w byte_14118-Ani_obj0A
00014BC2 0000                       		dc.w byte_14120-Ani_obj0A
00014BC4 0000                       		dc.w byte_14128-Ani_obj0A
00014BC6 0000                       		dc.w byte_14130-Ani_obj0A
00014BC8 0000                       		dc.w byte_14138-Ani_obj0A
00014BCA 0000                       		dc.w byte_14140-Ani_obj0A
00014BCC 0000                       		dc.w byte_14148-Ani_obj0A
00014BCE 0000                       		dc.w byte_1414A-Ani_obj0A
00014BD0 0500 0102 0304 090D FC00   byte_140D6:	dc.b 5,	0, 1, 2, 3, 4, 9, $D, $FC, 0
00014BDA 0500 0102 0304 0C12 FC00   byte_140E0:	dc.b 5,	0, 1, 2, 3, 4, $C, $12,	$FC, 0
00014BE4 0500 0102 0304 0C11 FC00   byte_140EA:	dc.b 5,	0, 1, 2, 3, 4, $C, $11,	$FC, 0
00014BEE 0500 0102 0304 0B10 FC00   byte_140F4:	dc.b 5,	0, 1, 2, 3, 4, $B, $10,	$FC, 0
00014BF8 0500 0102 0304 090F FC00   byte_140FE:	dc.b 5,	0, 1, 2, 3, 4, 9, $F, $FC, 0
00014C02 0500 0102 0304 0A0E FC00   byte_14108:	dc.b 5,	0, 1, 2, 3, 4, $A, $E, $FC, 0
00014C0C 0E00 0102 FC00             byte_14112:	dc.b $E, 0, 1, 2, $FC, 0
00014C12 0716 0D16 0D16 0DFC        byte_14118:	dc.b 7,	$16, $D, $16, $D, $16, $D, $FC
00014C1A 0716 1216 1216 12FC        byte_14120:	dc.b 7,	$16, $12, $16, $12, $16, $12, $FC
00014C22 0716 1116 1116 11FC        byte_14128:	dc.b 7,	$16, $11, $16, $11, $16, $11, $FC
00014C2A 0716 1016 1016 10FC        byte_14130:	dc.b 7,	$16, $10, $16, $10, $16, $10, $FC
00014C32 0716 0F16 0F16 0FFC        byte_14138:	dc.b 7,	$16, $F, $16, $F, $16, $F, $FC
00014C3A 0716 0E16 0E16 0EFC        byte_14140:	dc.b 7,	$16, $E, $16, $E, $16, $E, $FC
00014C42 0EFC                       byte_14148:	dc.b $E, $FC
00014C44 0E01 0203 04FC             byte_1414A:	dc.b $E, 1, 2, 3, 4, $FC
00014C4A                            		even
00014C4A                            		even
00014C4A                            
00014C4A                            ; ---------------------------------------------------------------------------
00014C4A                            ; Sprite mappings - drowning countdown numbers (LZ)
00014C4A                            ; ---------------------------------------------------------------------------
00014C4A                            Map_obj0A:
00014C4A                            	include "_maps\obj0A.asm"
00014C4A                            ; ---------------------------------------------------------------------------
00014C4A                            ; Sprite mappings - drowning countdown numbers (LZ)
00014C4A                            ; ---------------------------------------------------------------------------
00014C4A 0000                       		dc.w byte_14152-Map_obj0A
00014C4C 01                         byte_14152:	dc.b 1
00014C4D E80E 0000 F2               		dc.b $E8, $E, 0, 0, $F2
00014C52                            		even
00014C52                            		even
00014C52                            
00014C52                            ; ===========================================================================
00014C52                            ; ---------------------------------------------------------------------------
00014C52                            ; Object 38 - shield and invincibility stars
00014C52                            ; ---------------------------------------------------------------------------
00014C52                            
00014C52                            Obj38:					; XREF: Obj_Index
00014C52 7000                       		moveq	#0,d0
00014C54 1028 0024                  		move.b	$24(a0),d0
00014C58 323B 0000                  		move.w	Obj38_Index(pc,d0.w),d1
00014C5C 4EFB 1000                  		jmp	Obj38_Index(pc,d1.w)
00014C60                            ; ===========================================================================
00014C60 0000                       Obj38_Index:	dc.w Obj38_Main-Obj38_Index
00014C62 0000                       		dc.w Obj38_Shield-Obj38_Index
00014C64 0000                       		dc.w Obj38_Stars-Obj38_Index
00014C66                            ; ===========================================================================
00014C66                            
00014C66                            Obj38_Main:				; XREF: Obj38_Index
00014C66 5428 0024                  		addq.b	#2,$24(a0)
00014C6A 217C 0000 0000 0004        		move.l	#Map_obj38,4(a0)
00014C72 117C 0004 0001             		move.b	#4,1(a0)
00014C78 117C 0001 0018             		move.b	#1,$18(a0)
00014C7E 117C 0010 0019             		move.b	#$10,$19(a0)
00014C84 4A28 001C                  		tst.b	$1C(a0)		; is object a shield?
00014C88 6600                       		bne.s	Obj38_DoStars	; if not, branch
00014C8A 317C 0541 0002             		move.w	#$541,2(a0)	; shield specific code
00014C90 4E75                       		rts	
00014C92                            ; ===========================================================================
00014C92                            
00014C92                            Obj38_DoStars:
00014C92 5428 0024                  		addq.b	#2,$24(a0)	; stars	specific code
00014C96 317C 055C 0002             		move.w	#$55C,2(a0)
00014C9C 4E75                       		rts	
00014C9E                            ; ===========================================================================
00014C9E                            
00014C9E                            Obj38_Shield:				; XREF: Obj38_Index
00014C9E 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
00014CA2 6600                       		bne.s	Obj38_RmvShield	; if yes, branch
00014CA4 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have shield?
00014CA8 6700                       		beq.s	Obj38_Delete	; if not, branch
00014CAA 3178 D008 0008             		move.w	($FFFFD008).w,8(a0)
00014CB0 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0)
00014CB6 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
00014CBC 43F9 0000 0000             		lea	(Ani_obj38).l,a1
00014CC2 4EB9 0000 B056             		jsr	AnimateSprite
00014CC8 4EFA 932E                  		jmp	DisplaySprite
00014CCC                            ; ===========================================================================
00014CCC                            
00014CCC                            Obj38_RmvShield:
00014CCC 4E75                       		rts	
00014CCE                            ; ===========================================================================
00014CCE                            
00014CCE                            Obj38_Delete:
00014CCE 4EFA 9364                  		jmp	DeleteObject
00014CD2                            ; ===========================================================================
00014CD2                            
00014CD2                            Obj38_Stars:				; XREF: Obj38_Index
00014CD2 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
00014CD6 6700                       		beq.s	Obj38_Delete2	; if not, branch
00014CD8 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
00014CDC 1228 001C                  		move.b	$1C(a0),d1
00014CE0 5301                       		subq.b	#1,d1
00014CE2 6000                       		bra.s	Obj38_StarTrail
00014CE4                            ; ===========================================================================
00014CE4 E909                       		lsl.b	#4,d1
00014CE6 5801                       		addq.b	#4,d1
00014CE8 9001                       		sub.b	d1,d0
00014CEA 1228 0030                  		move.b	$30(a0),d1
00014CEE 9001                       		sub.b	d1,d0
00014CF0 5801                       		addq.b	#4,d1
00014CF2 0201 000F                  		andi.b	#$F,d1
00014CF6 1141 0030                  		move.b	d1,$30(a0)
00014CFA 6000                       		bra.s	Obj38_StarTrail2a
00014CFC                            ; ===========================================================================
00014CFC                            
00014CFC                            Obj38_StarTrail:			; XREF: Obj38_Stars
00014CFC E709                       		lsl.b	#3,d1
00014CFE 1401                       		move.b	d1,d2
00014D00 D201                       		add.b	d1,d1
00014D02 D202                       		add.b	d2,d1
00014D04 5801                       		addq.b	#4,d1
00014D06 9001                       		sub.b	d1,d0
00014D08 1228 0030                  		move.b	$30(a0),d1
00014D0C 9001                       		sub.b	d1,d0
00014D0E 5801                       		addq.b	#4,d1
00014D10 0C01 0018                  		cmpi.b	#$18,d1
00014D14 6500                       		bcs.s	Obj38_StarTrail2
00014D16 7200                       		moveq	#0,d1
00014D18                            
00014D18                            Obj38_StarTrail2:
00014D18 1141 0030                  		move.b	d1,$30(a0)
00014D1C                            
00014D1C                            Obj38_StarTrail2a:
00014D1C 43F8 CB00                  		lea	($FFFFCB00).w,a1
00014D20 43F1 0000                  		lea	(a1,d0.w),a1
00014D24 3159 0008                  		move.w	(a1)+,8(a0)
00014D28 3159 000C                  		move.w	(a1)+,$C(a0)
00014D2C 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
00014D32 43F9 0000 0000             		lea	(Ani_obj38).l,a1
00014D38 4EB9 0000 B056             		jsr	AnimateSprite
00014D3E 4EFA 92B8                  		jmp	DisplaySprite
00014D42                            ; ===========================================================================
00014D42                            
00014D42                            Obj38_Delete2:				; XREF: Obj38_Stars
00014D42 4EFA 92F0                  		jmp	DeleteObject
00014D46                            ; ===========================================================================
00014D46                            ; ---------------------------------------------------------------------------
00014D46                            ; Object 4A - special stage entry from beta
00014D46                            ; ---------------------------------------------------------------------------
00014D46                            
00014D46                            Obj4A:					; XREF: Obj_Index
00014D46 7000                       		moveq	#0,d0
00014D48 1028 0024                  		move.b	$24(a0),d0
00014D4C 323B 0000                  		move.w	Obj4A_Index(pc,d0.w),d1
00014D50 4EFB 1000                  		jmp	Obj4A_Index(pc,d1.w)
00014D54                            ; ===========================================================================
00014D54 0000                       Obj4A_Index:	dc.w Obj4A_Main-Obj4A_Index
00014D56 0000                       		dc.w Obj4A_RmvSonic-Obj4A_Index
00014D58 0000                       		dc.w Obj4A_LoadSonic-Obj4A_Index
00014D5A                            ; ===========================================================================
00014D5A                            
00014D5A                            Obj4A_Main:				; XREF: Obj4A_Index
00014D5A 4AB8 F680                  		tst.l	($FFFFF680).w	; are pattern load cues	empty?
00014D5E 6700                       		beq.s	Obj4A_Main2	; if yes, branch
00014D60 4E75                       		rts	
00014D62                            ; ===========================================================================
00014D62                            
00014D62                            Obj4A_Main2:
00014D62 5428 0024                  		addq.b	#2,$24(a0)
00014D66 217C 0000 0000 0004        		move.l	#Map_obj4A,4(a0)
00014D6E 117C 0004 0001             		move.b	#4,1(a0)
00014D74 117C 0001 0018             		move.b	#1,$18(a0)
00014D7A 117C 0038 0019             		move.b	#$38,$19(a0)
00014D80 317C 0541 0002             		move.w	#$541,2(a0)
00014D86 317C 0078 0030             		move.w	#120,$30(a0)	; set time for Sonic's disappearance to 2 seconds
00014D8C                            
00014D8C                            Obj4A_RmvSonic:				; XREF: Obj4A_Index
00014D8C 3178 D008 0008             		move.w	($FFFFD008).w,8(a0)
00014D92 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0)
00014D98 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
00014D9E 43F9 0000 0000             		lea	(Ani_obj4A).l,a1
00014DA4 4EB9 0000 B056             		jsr	AnimateSprite
00014DAA 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
00014DB0 6600                       		bne.s	Obj4A_Display
00014DB2 4A38 D000                  		tst.b	($FFFFD000).w
00014DB6 6700                       		beq.s	Obj4A_Display
00014DB8 11FC 0000 D000             		move.b	#0,($FFFFD000).w ; remove Sonic
00014DBE 303C 00A8                  		move.w	#$A8,d0
00014DC2 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play Special Stage "GOAL" sound
00014DC8                            
00014DC8                            Obj4A_Display:
00014DC8 4EFA 922E                  		jmp	DisplaySprite
00014DCC                            ; ===========================================================================
00014DCC                            
00014DCC                            Obj4A_LoadSonic:			; XREF: Obj4A_Index
00014DCC 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
00014DD0 6600                       		bne.s	Obj4A_Wait	; if time remains, branch
00014DD2 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
00014DD8 4EFA 925A                  		jmp	DeleteObject
00014DDC                            ; ===========================================================================
00014DDC                            
00014DDC                            Obj4A_Wait:
00014DDC 4E75                       		rts	
00014DDE                            ; ===========================================================================
00014DDE                            ; ---------------------------------------------------------------------------
00014DDE                            ; Object 08 - water splash (LZ)
00014DDE                            ; ---------------------------------------------------------------------------
00014DDE                            
00014DDE                            Obj08:					; XREF: Obj_Index
00014DDE 7000                       		moveq	#0,d0
00014DE0 1028 0024                  		move.b	$24(a0),d0
00014DE4 323B 0000                  		move.w	Obj08_Index(pc,d0.w),d1
00014DE8 4EFB 1000                  		jmp	Obj08_Index(pc,d1.w)
00014DEC                            ; ===========================================================================
00014DEC 0000                       Obj08_Index:	dc.w Obj08_Main-Obj08_Index
00014DEE 0000                       		dc.w Obj08_Display-Obj08_Index
00014DF0 0000                       		dc.w Obj08_Delete-Obj08_Index
00014DF2                            ; ===========================================================================
00014DF2                            
00014DF2                            Obj08_Main:				; XREF: Obj08_Index
00014DF2 5428 0024                  		addq.b	#2,$24(a0)
00014DF6 217C 0000 0000 0004        		move.l	#Map_obj08,4(a0)
00014DFE 0028 0004 0001             		ori.b	#4,1(a0)
00014E04 117C 0001 0018             		move.b	#1,$18(a0)
00014E0A 117C 0010 0019             		move.b	#$10,$19(a0)
00014E10 317C 4259 0002             		move.w	#$4259,2(a0)
00014E16 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; copy x-position from Sonic
00014E1C                            
00014E1C                            Obj08_Display:				; XREF: Obj08_Index
00014E1C 3178 F646 000C             		move.w	($FFFFF646).w,$C(a0) ; copy y-position from water height
00014E22 43F9 0000 0000             		lea	(Ani_obj08).l,a1
00014E28 4EB9 0000 B056             		jsr	AnimateSprite
00014E2E 4EFA 91C8                  		jmp	DisplaySprite
00014E32                            ; ===========================================================================
00014E32                            
00014E32                            Obj08_Delete:				; XREF: Obj08_Index
00014E32 4EFA 9200                  		jmp	DeleteObject	; delete when animation	is complete
00014E36                            ; ===========================================================================
00014E36                            Ani_obj38:
00014E36                            	include "_anim\obj38.asm"
00014E36                            ; ---------------------------------------------------------------------------
00014E36                            ; Animation script - shield and invincibility stars
00014E36                            ; ---------------------------------------------------------------------------
00014E36 0000                       		dc.w byte_14356-Ani_obj38
00014E38 0000                       		dc.w byte_1435E-Ani_obj38
00014E3A 0000                       		dc.w byte_14364-Ani_obj38
00014E3C 0000                       		dc.w byte_1437E-Ani_obj38
00014E3E 0000                       		dc.w byte_14398-Ani_obj38
00014E40 0101 0002 0003 00FF        byte_14356:	dc.b 1,	1, 0, 2, 0, 3, 0, $FF
00014E48 0504 0506 07FF             byte_1435E:	dc.b 5,	4, 5, 6, 7, $FF
00014E4E 0004 0400 0404 0005 0500+  byte_14364:	dc.b 0,	4, 4, 0, 4, 4, 0, 5, 5,	0, 5, 5, 0, 6, 6, 0, 6
00014E5F 0600 0707 0007 0700 FF     		dc.b 6,	0, 7, 7, 0, 7, 7, 0, $FF
00014E68 0004 0400 0400 0005 0500+  byte_1437E:	dc.b 0,	4, 4, 0, 4, 0, 0, 5, 5,	0, 5, 0, 0, 6, 6, 0, 6
00014E79 0000 0707 0007 0000 FF     		dc.b 0,	0, 7, 7, 0, 7, 0, 0, $FF
00014E82 0004 0000 0400 0005 0000+  byte_14398:	dc.b 0,	4, 0, 0, 4, 0, 0, 5, 0,	0, 5, 0, 0, 6, 0, 0, 6
00014E93 0000 0700 0007 0000 FF     		dc.b 0,	0, 7, 0, 0, 7, 0, 0, $FF
00014E9C                            		even
00014E9C                            		even
00014E9C                            
00014E9C                            ; ---------------------------------------------------------------------------
00014E9C                            ; Sprite mappings - shield and invincibility stars
00014E9C                            ; ---------------------------------------------------------------------------
00014E9C                            Map_obj38:
00014E9C                            	include "_maps\obj38.asm"
00014E9C                            ; ---------------------------------------------------------------------------
00014E9C                            ; Sprite mappings - shield and invincibility stars
00014E9C                            ; ---------------------------------------------------------------------------
00014E9C 0000 0000                  		dc.w byte_143CD-Map_obj38, byte_143C2-Map_obj38
00014EA0 0000 0000                  		dc.w byte_143D7-Map_obj38, byte_143EC-Map_obj38
00014EA4 0000 0000                  		dc.w byte_14401-Map_obj38, byte_14416-Map_obj38
00014EA8 0000 0000                  		dc.w byte_1442B-Map_obj38, byte_14440-Map_obj38
00014EAC 04                         byte_143C2:	dc.b 4
00014EAD E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00014EB2 E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
00014EB7 000A 1000 E8               byte_143CD:	dc.b 0,	$A, $10, 0, $E8
00014EBC 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
00014EC1 04                         byte_143D7:	dc.b 4
00014EC2 E80A 0812 E9               		dc.b $E8, $A, 8, $12, $E9
00014EC7 E80A 0012 00               		dc.b $E8, $A, 0, $12, 0
00014ECC 000A 1812 E9               		dc.b 0,	$A, $18, $12, $E9
00014ED1 000A 1012 00               		dc.b 0,	$A, $10, $12, 0
00014ED6 04                         byte_143EC:	dc.b 4
00014ED7 E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
00014EDC E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00014EE1 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
00014EE6 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00014EEB 04                         byte_14401:	dc.b 4
00014EEC E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00014EF1 E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
00014EF6 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
00014EFB 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00014F00 04                         byte_14416:	dc.b 4
00014F01 E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
00014F06 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00014F0B 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
00014F10 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
00014F15 04                         byte_1442B:	dc.b 4
00014F16 E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
00014F1B E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
00014F20 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
00014F25 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
00014F2A 04                         byte_14440:	dc.b 4
00014F2B E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
00014F30 E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
00014F35 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
00014F3A 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
00014F40 00                         		even
00014F40 00                         		even
00014F40                            
00014F40                            Ani_obj4A:
00014F40                            	include "_anim\obj4A.asm"
00014F40                            ; ---------------------------------------------------------------------------
00014F40                            ; Animation script - special stage entry effect from beta
00014F40                            ; ---------------------------------------------------------------------------
00014F40 0000                       		dc.w byte_14458-Ani_obj4A
00014F42 0500 0100 0100 0701 0702+  byte_14458:	dc.b 5,	0, 1, 0, 1, 0, 7, 1, 7,	2, 7, 3, 7, 4, 7, 5, 7, 6, 7, $FC
00014F56                            		even
00014F56                            		even
00014F56                            
00014F56                            ; ---------------------------------------------------------------------------
00014F56                            ; Sprite mappings - special stage entry	from beta
00014F56                            ; ---------------------------------------------------------------------------
00014F56                            Map_obj4A:
00014F56                            	include "_maps\obj4A.asm"
00014F56                            ; ---------------------------------------------------------------------------
00014F56                            ; Sprite mappings - special stage entry	from beta
00014F56                            ; ---------------------------------------------------------------------------
00014F56 0000 0000                  		dc.w byte_1447C-Map_obj4A, byte_1448C-Map_obj4A
00014F5A 0000 0000                  		dc.w byte_1449C-Map_obj4A, byte_144B6-Map_obj4A
00014F5E 0000 0000                  		dc.w byte_144E4-Map_obj4A, byte_1453F-Map_obj4A
00014F62 0000 0000                  		dc.w byte_14595-Map_obj4A, byte_145BF-Map_obj4A
00014F66 03                         byte_1447C:	dc.b 3
00014F67 F800 0000 08               		dc.b $F8, 0, 0,	0, 8
00014F6C 0004 0001 00               		dc.b 0,	4, 0, 1, 0
00014F71 0800 1000 08               		dc.b 8,	0, $10,	0, 8
00014F76 03                         byte_1448C:	dc.b 3
00014F77 F00D 0003 F0               		dc.b $F0, $D, 0, 3, $F0
00014F7C 000C 000B F0               		dc.b 0,	$C, 0, $B, $F0
00014F81 080D 1003 F0               		dc.b 8,	$D, $10, 3, $F0
00014F86 05                         byte_1449C:	dc.b 5
00014F87 E40E 000F F4               		dc.b $E4, $E, 0, $F, $F4
00014F8C EC02 001B EC               		dc.b $EC, 2, 0,	$1B, $EC
00014F91 FC0C 001E F4               		dc.b $FC, $C, 0, $1E, $F4
00014F96 040E 100F F4               		dc.b 4,	$E, $10, $F, $F4
00014F9B 0401 101B EC               		dc.b 4,	1, $10,	$1B, $EC
00014FA0 09                         byte_144B6:	dc.b 9
00014FA1 F008 0022 F8               		dc.b $F0, 8, 0,	$22, $F8
00014FA6 F80E 0025 F0               		dc.b $F8, $E, 0, $25, $F0
00014FAB 1008 0031 F0               		dc.b $10, 8, 0,	$31, $F0
00014FB0 0005 0034 10               		dc.b 0,	5, 0, $34, $10
00014FB5 F800 0825 10               		dc.b $F8, 0, 8,	$25, $10
00014FBA F000 1836 18               		dc.b $F0, 0, $18, $36, $18
00014FBF F800 1825 20               		dc.b $F8, 0, $18, $25, $20
00014FC4 0000 0825 28               		dc.b 0,	0, 8, $25, $28
00014FC9 F800 0025 30               		dc.b $F8, 0, 0,	$25, $30
00014FCE 12                         byte_144E4:	dc.b $12
00014FCF 0000 1825 F0               		dc.b 0,	0, $18,	$25, $F0
00014FD4 F804 0038 F8               		dc.b $F8, 4, 0,	$38, $F8
00014FD9 F000 0026 08               		dc.b $F0, 0, 0,	$26, 8
00014FDE 0000 0025 00               		dc.b 0,	0, 0, $25, 0
00014FE3 0800 1825 F8               		dc.b 8,	0, $18,	$25, $F8
00014FE8 1000 1026 00               		dc.b $10, 0, $10, $26, 0
00014FED 0800 1038 08               		dc.b 8,	0, $10,	$38, 8
00014FF2 F800 0029 10               		dc.b $F8, 0, 0,	$29, $10
00014FF7 0000 0026 10               		dc.b 0,	0, 0, $26, $10
00014FFC 0000 002D 18               		dc.b 0,	0, 0, $2D, $18
00015001 0800 0826 18               		dc.b 8,	0, 8, $26, $18
00015006 0800 0029 20               		dc.b 8,	0, 0, $29, $20
0001500B F800 0026 20               		dc.b $F8, 0, 0,	$26, $20
00015010 F800 002D 28               		dc.b $F8, 0, 0,	$2D, $28
00015015 0000 003A 28               		dc.b 0,	0, 0, $3A, $28
0001501A F800 1826 30               		dc.b $F8, 0, $18, $26, $30
0001501F 0000 1025 38               		dc.b 0,	0, $10,	$25, $38
00015024 F800 1025 40               		dc.b $F8, 0, $10, $25, $40
00015029 11                         byte_1453F:	dc.b $11
0001502A F800 0825 00               		dc.b $F8, 0, 8,	$25, 0
0001502F F000 0038 10               		dc.b $F0, 0, 0,	$38, $10
00015034 1000 0825 00               		dc.b $10, 0, 8,	$25, 0
00015039 0000 1825 10               		dc.b 0,	0, $18,	$25, $10
0001503E 0800 1025 18               		dc.b 8,	0, $10,	$25, $18
00015043 F800 1825 20               		dc.b $F8, 0, $18, $25, $20
00015048 0000 1026 28               		dc.b 0,	0, $10,	$26, $28
0001504D F800 1025 30               		dc.b $F8, 0, $10, $25, $30
00015052 0000 0025 30               		dc.b 0,	0, 0, $25, $30
00015057 0800 0825 30               		dc.b 8,	0, 8, $25, $30
0001505C 0000 0826 38               		dc.b 0,	0, 8, $26, $38
00015061 0800 0029 38               		dc.b 8,	0, 0, $29, $38
00015066 F800 0826 40               		dc.b $F8, 0, 8,	$26, $40
0001506B 0000 002D 40               		dc.b 0,	0, 0, $2D, $40
00015070 F800 0825 48               		dc.b $F8, 0, 8,	$25, $48
00015075 0000 0025 48               		dc.b 0,	0, 0, $25, $48
0001507A 0000 1025 50               		dc.b 0,	0, $10,	$25, $50
0001507F 09                         byte_14595:	dc.b 9
00015080 FC00 0826 30               		dc.b $FC, 0, 8,	$26, $30
00015085 0400 0825 28               		dc.b 4,	0, 8, $25, $28
0001508A 0400 1027 38               		dc.b 4,	0, $10,	$27, $38
0001508F 0400 0826 40               		dc.b 4,	0, 8, $26, $40
00015094 FC00 1025 40               		dc.b $FC, 0, $10, $25, $40
00015099 FC00 1026 48               		dc.b $FC, 0, $10, $26, $48
0001509E 0C00 0827 48               		dc.b $C, 0, 8, $27, $48
000150A3 0400 1826 50               		dc.b 4,	0, $18,	$26, $50
000150A8 04                         		dc.b 4
000150A9 0008 2758 00               byte_145BF:	dc.b 0,	8, $27,	$58, 0
000150AE                            		even
000150AE                            		even
000150AE                            
000150AE                            Ani_obj08:
000150AE                            	include "_anim\obj08.asm"
000150AE                            ; ---------------------------------------------------------------------------
000150AE                            ; Animation script - water splash (LZ)
000150AE                            ; ---------------------------------------------------------------------------
000150AE 0000                       		dc.w byte_145C6-Ani_obj08
000150B0 0400 0102 FC00             byte_145C6:	dc.b 4,	0, 1, 2, $FC, 0
000150B6                            		even
000150B6                            		even
000150B6                            
000150B6                            ; ---------------------------------------------------------------------------
000150B6                            ; Sprite mappings - water splash (LZ)
000150B6                            ; ---------------------------------------------------------------------------
000150B6                            Map_obj08:
000150B6                            	include "_maps\obj08.asm"
000150B6                            ; ---------------------------------------------------------------------------
000150B6                            ; Sprite mappings - water splash (LZ)
000150B6                            ; ---------------------------------------------------------------------------
000150B6 0000                       		dc.w byte_145D2-Map_obj08
000150B8 0000                       		dc.w byte_145DD-Map_obj08
000150BA 0000                       		dc.w byte_145E8-Map_obj08
000150BC 02                         byte_145D2:	dc.b 2
000150BD F204 006D F8               		dc.b $F2, 4, 0,	$6D, $F8
000150C2 FA0C 006F F0               		dc.b $FA, $C, 0, $6F, $F0
000150C7 02                         byte_145DD:	dc.b 2
000150C8 E200 0073 F8               		dc.b $E2, 0, 0,	$73, $F8
000150CD EA0E 0074 F0               		dc.b $EA, $E, 0, $74, $F0
000150D2 01                         byte_145E8:	dc.b 1
000150D3 E20F 0080 F0               		dc.b $E2, $F, 0, $80, $F0
000150D8                            		even
000150D8                            		even
000150D8                            
000150D8                            ; ---------------------------------------------------------------------------
000150D8                            ; Subroutine to	change Sonic's angle & position as he walks along the floor
000150D8                            ; ---------------------------------------------------------------------------
000150D8                            
000150D8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000150D8                            
000150D8                            
000150D8                            Sonic_AnglePos:				; XREF: Obj01_MdNormal; Obj01_MdRoll
000150D8 0828 0003 0022             		btst	#3,$22(a0)
000150DE 6700                       		beq.s	loc_14602
000150E0 7000                       		moveq	#0,d0
000150E2 11C0 F768                  		move.b	d0,($FFFFF768).w
000150E6 11C0 F76A                  		move.b	d0,($FFFFF76A).w
000150EA 4E75                       		rts	
000150EC                            ; ===========================================================================
000150EC                            
000150EC                            loc_14602:
000150EC 7003                       		moveq	#3,d0
000150EE 11C0 F768                  		move.b	d0,($FFFFF768).w
000150F2 11C0 F76A                  		move.b	d0,($FFFFF76A).w
000150F6 1028 0026                  		move.b	$26(a0),d0
000150FA 0600 0020                  		addi.b	#$20,d0
000150FE 6A00                       		bpl.s	loc_14624
00015100 1028 0026                  		move.b	$26(a0),d0
00015104 6A00                       		bpl.s	loc_1461E
00015106 5300                       		subq.b	#1,d0
00015108                            
00015108                            loc_1461E:
00015108 0600 0020                  		addi.b	#$20,d0
0001510C 6000                       		bra.s	loc_14630
0001510E                            ; ===========================================================================
0001510E                            
0001510E                            loc_14624:
0001510E 1028 0026                  		move.b	$26(a0),d0
00015112 6A00                       		bpl.s	loc_1462C
00015114 5200                       		addq.b	#1,d0
00015116                            
00015116                            loc_1462C:
00015116 0600 001F                  		addi.b	#$1F,d0
0001511A                            
0001511A                            loc_14630:
0001511A 0200 00C0                  		andi.b	#$C0,d0
0001511E 0C00 0040                  		cmpi.b	#$40,d0
00015122 6700 0000                  		beq.w	Sonic_WalkVertL
00015126 0C00 0080                  		cmpi.b	#$80,d0
0001512A 6700 0000                  		beq.w	Sonic_WalkCeiling
0001512E 0C00 00C0                  		cmpi.b	#$C0,d0
00015132 6700 0000                  		beq.w	Sonic_WalkVertR
00015136 3428 000C                  		move.w	$C(a0),d2
0001513A 3628 0008                  		move.w	8(a0),d3
0001513E 7000                       		moveq	#0,d0
00015140 1028 0016                  		move.b	$16(a0),d0
00015144 4880                       		ext.w	d0
00015146 D440                       		add.w	d0,d2
00015148 1028 0017                  		move.b	$17(a0),d0
0001514C 4880                       		ext.w	d0
0001514E D640                       		add.w	d0,d3
00015150 49F8 F768                  		lea	($FFFFF768).w,a4
00015154 367C 0010                  		movea.w	#$10,a3
00015158 3C3C 0000                  		move.w	#0,d6
0001515C 7A0D                       		moveq	#$D,d5
0001515E 6100 0000                  		bsr.w	FindFloor
00015162 3F01                       		move.w	d1,-(sp)
00015164 3428 000C                  		move.w	$C(a0),d2
00015168 3628 0008                  		move.w	8(a0),d3
0001516C 7000                       		moveq	#0,d0
0001516E 1028 0016                  		move.b	$16(a0),d0
00015172 4880                       		ext.w	d0
00015174 D440                       		add.w	d0,d2
00015176 1028 0017                  		move.b	$17(a0),d0
0001517A 4880                       		ext.w	d0
0001517C 4440                       		neg.w	d0
0001517E D640                       		add.w	d0,d3
00015180 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015184 367C 0010                  		movea.w	#$10,a3
00015188 3C3C 0000                  		move.w	#0,d6
0001518C 7A0D                       		moveq	#$D,d5
0001518E 6100 0000                  		bsr.w	FindFloor
00015192 301F                       		move.w	(sp)+,d0
00015194 6100 0000                  		bsr.w	Sonic_Angle
00015198 4A41                       		tst.w	d1
0001519A 6700                       		beq.s	locret_146BE
0001519C 6A00                       		bpl.s	loc_146C0
0001519E 0C41 FFF2                  		cmpi.w	#-$E,d1
000151A2 6D00                       		blt.s	locret_146E6
000151A4 D368 000C                  		add.w	d1,$C(a0)
000151A8                            
000151A8                            locret_146BE:
000151A8 4E75                       		rts	
000151AA                            ; ===========================================================================
000151AA                            
000151AA                            loc_146C0:
000151AA 0C41 000E                  		cmpi.w	#$E,d1
000151AE 6E00                       		bgt.s	loc_146CC
000151B0                            
000151B0                            loc_146C6:
000151B0 D368 000C                  		add.w	d1,$C(a0)
000151B4 4E75                       		rts	
000151B6                            ; ===========================================================================
000151B6                            
000151B6                            loc_146CC:
000151B6 4A28 0038                  		tst.b	$38(a0)
000151BA 66F4                       		bne.s	loc_146C6
000151BC 08E8 0001 0022             		bset	#1,$22(a0)
000151C2 08A8 0005 0022             		bclr	#5,$22(a0)
000151C8 117C 0001 001D             		move.b	#1,$1D(a0)
000151CE 4E75                       		rts	
000151D0                            ; ===========================================================================
000151D0                            
000151D0                            locret_146E6:
000151D0 4E75                       		rts	
000151D2                            ; End of function Sonic_AnglePos
000151D2                            
000151D2                            ; ===========================================================================
000151D2 2428 0008                  		move.l	8(a0),d2
000151D6 3028 0010                  		move.w	$10(a0),d0
000151DA 48C0                       		ext.l	d0
000151DC E180                       		asl.l	#8,d0
000151DE 9480                       		sub.l	d0,d2
000151E0 2142 0008                  		move.l	d2,8(a0)
000151E4 303C 0038                  		move.w	#$38,d0
000151E8 48C0                       		ext.l	d0
000151EA E180                       		asl.l	#8,d0
000151EC 9680                       		sub.l	d0,d3
000151EE 2143 000C                  		move.l	d3,$C(a0)
000151F2 4E75                       		rts	
000151F4                            ; ===========================================================================
000151F4                            
000151F4                            locret_1470A:
000151F4 4E75                       		rts	
000151F6                            ; ===========================================================================
000151F6 2628 000C                  		move.l	$C(a0),d3
000151FA 3028 0012                  		move.w	$12(a0),d0
000151FE 0440 0038                  		subi.w	#$38,d0
00015202 3140 0012                  		move.w	d0,$12(a0)
00015206 48C0                       		ext.l	d0
00015208 E180                       		asl.l	#8,d0
0001520A 9680                       		sub.l	d0,d3
0001520C 2143 000C                  		move.l	d3,$C(a0)
00015210 4E75                       		rts	
00015212 4E75                       		rts	
00015214                            ; ===========================================================================
00015214 2428 0008                  		move.l	8(a0),d2
00015218 2628 000C                  		move.l	$C(a0),d3
0001521C 3028 0010                  		move.w	$10(a0),d0
00015220 48C0                       		ext.l	d0
00015222 E180                       		asl.l	#8,d0
00015224 9480                       		sub.l	d0,d2
00015226 3028 0012                  		move.w	$12(a0),d0
0001522A 48C0                       		ext.l	d0
0001522C E180                       		asl.l	#8,d0
0001522E 9680                       		sub.l	d0,d3
00015230 2142 0008                  		move.l	d2,8(a0)
00015234 2143 000C                  		move.l	d3,$C(a0)
00015238 4E75                       		rts	
0001523A                            
0001523A                            ; ---------------------------------------------------------------------------
0001523A                            ; Subroutine to	change Sonic's angle as he walks along the floor
0001523A                            ; ---------------------------------------------------------------------------
0001523A                            
0001523A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001523A                            
0001523A                            
0001523A                            Sonic_Angle:				; XREF: Sonic_AnglePos; et al
0001523A 1438 F76A                  		move.b	($FFFFF76A).w,d2
0001523E B240                       		cmp.w	d0,d1
00015240 6F00                       		ble.s	loc_1475E
00015242 1438 F768                  		move.b	($FFFFF768).w,d2
00015246 3200                       		move.w	d0,d1
00015248                            
00015248                            loc_1475E:
00015248 0802 0000                  		btst	#0,d2
0001524C 6600                       		bne.s	loc_1476A
0001524E 1142 0026                  		move.b	d2,$26(a0)
00015252 4E75                       		rts	
00015254                            ; ===========================================================================
00015254                            
00015254                            loc_1476A:
00015254 1428 0026                  		move.b	$26(a0),d2
00015258 0602 0020                  		addi.b	#$20,d2
0001525C 0202 00C0                  		andi.b	#$C0,d2
00015260 1142 0026                  		move.b	d2,$26(a0)
00015264 4E75                       		rts	
00015266                            ; End of function Sonic_Angle
00015266                            
00015266                            ; ---------------------------------------------------------------------------
00015266                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his right
00015266                            ; ---------------------------------------------------------------------------
00015266                            
00015266                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015266                            
00015266                            
00015266                            Sonic_WalkVertR:			; XREF: Sonic_AnglePos
00015266 3428 000C                  		move.w	$C(a0),d2
0001526A 3628 0008                  		move.w	8(a0),d3
0001526E 7000                       		moveq	#0,d0
00015270 1028 0017                  		move.b	$17(a0),d0
00015274 4880                       		ext.w	d0
00015276 4440                       		neg.w	d0
00015278 D440                       		add.w	d0,d2
0001527A 1028 0016                  		move.b	$16(a0),d0
0001527E 4880                       		ext.w	d0
00015280 D640                       		add.w	d0,d3
00015282 49F8 F768                  		lea	($FFFFF768).w,a4
00015286 367C 0010                  		movea.w	#$10,a3
0001528A 3C3C 0000                  		move.w	#0,d6
0001528E 7A0D                       		moveq	#$D,d5
00015290 6100 0000                  		bsr.w	FindWall
00015294 3F01                       		move.w	d1,-(sp)
00015296 3428 000C                  		move.w	$C(a0),d2
0001529A 3628 0008                  		move.w	8(a0),d3
0001529E 7000                       		moveq	#0,d0
000152A0 1028 0017                  		move.b	$17(a0),d0
000152A4 4880                       		ext.w	d0
000152A6 D440                       		add.w	d0,d2
000152A8 1028 0016                  		move.b	$16(a0),d0
000152AC 4880                       		ext.w	d0
000152AE D640                       		add.w	d0,d3
000152B0 49F8 F76A                  		lea	($FFFFF76A).w,a4
000152B4 367C 0010                  		movea.w	#$10,a3
000152B8 3C3C 0000                  		move.w	#0,d6
000152BC 7A0D                       		moveq	#$D,d5
000152BE 6100 0000                  		bsr.w	FindWall
000152C2 301F                       		move.w	(sp)+,d0
000152C4 6100 FF74                  		bsr.w	Sonic_Angle
000152C8 4A41                       		tst.w	d1
000152CA 6700                       		beq.s	locret_147F0
000152CC 6A00                       		bpl.s	loc_147F2
000152CE 0C41 FFF2                  		cmpi.w	#-$E,d1
000152D2 6D00 FF20                  		blt.w	locret_1470A
000152D6 D368 0008                  		add.w	d1,8(a0)
000152DA                            
000152DA                            locret_147F0:
000152DA 4E75                       		rts	
000152DC                            ; ===========================================================================
000152DC                            
000152DC                            loc_147F2:
000152DC 0C41 000E                  		cmpi.w	#$E,d1
000152E0 6E00                       		bgt.s	loc_147FE
000152E2                            
000152E2                            loc_147F8:
000152E2 D368 0008                  		add.w	d1,8(a0)
000152E6 4E75                       		rts	
000152E8                            ; ===========================================================================
000152E8                            
000152E8                            loc_147FE:
000152E8 4A28 0038                  		tst.b	$38(a0)
000152EC 66F4                       		bne.s	loc_147F8
000152EE 08E8 0001 0022             		bset	#1,$22(a0)
000152F4 08A8 0005 0022             		bclr	#5,$22(a0)
000152FA 117C 0001 001D             		move.b	#1,$1D(a0)
00015300 4E75                       		rts	
00015302                            ; End of function Sonic_WalkVertR
00015302                            
00015302                            ; ---------------------------------------------------------------------------
00015302                            ; Subroutine allowing Sonic to walk upside-down
00015302                            ; ---------------------------------------------------------------------------
00015302                            
00015302                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015302                            
00015302                            
00015302                            Sonic_WalkCeiling:			; XREF: Sonic_AnglePos
00015302 3428 000C                  		move.w	$C(a0),d2
00015306 3628 0008                  		move.w	8(a0),d3
0001530A 7000                       		moveq	#0,d0
0001530C 1028 0016                  		move.b	$16(a0),d0
00015310 4880                       		ext.w	d0
00015312 9440                       		sub.w	d0,d2
00015314 0A42 000F                  		eori.w	#$F,d2
00015318 1028 0017                  		move.b	$17(a0),d0
0001531C 4880                       		ext.w	d0
0001531E D640                       		add.w	d0,d3
00015320 49F8 F768                  		lea	($FFFFF768).w,a4
00015324 367C FFF0                  		movea.w	#-$10,a3
00015328 3C3C 1000                  		move.w	#$1000,d6
0001532C 7A0D                       		moveq	#$D,d5
0001532E 6100 0000                  		bsr.w	FindFloor
00015332 3F01                       		move.w	d1,-(sp)
00015334 3428 000C                  		move.w	$C(a0),d2
00015338 3628 0008                  		move.w	8(a0),d3
0001533C 7000                       		moveq	#0,d0
0001533E 1028 0016                  		move.b	$16(a0),d0
00015342 4880                       		ext.w	d0
00015344 9440                       		sub.w	d0,d2
00015346 0A42 000F                  		eori.w	#$F,d2
0001534A 1028 0017                  		move.b	$17(a0),d0
0001534E 4880                       		ext.w	d0
00015350 9640                       		sub.w	d0,d3
00015352 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015356 367C FFF0                  		movea.w	#-$10,a3
0001535A 3C3C 1000                  		move.w	#$1000,d6
0001535E 7A0D                       		moveq	#$D,d5
00015360 6100 0000                  		bsr.w	FindFloor
00015364 301F                       		move.w	(sp)+,d0
00015366 6100 FED2                  		bsr.w	Sonic_Angle
0001536A 4A41                       		tst.w	d1
0001536C 6700                       		beq.s	locret_14892
0001536E 6A00                       		bpl.s	loc_14894
00015370 0C41 FFF2                  		cmpi.w	#-$E,d1
00015374 6D00 FE5A                  		blt.w	locret_146E6
00015378 9368 000C                  		sub.w	d1,$C(a0)
0001537C                            
0001537C                            locret_14892:
0001537C 4E75                       		rts	
0001537E                            ; ===========================================================================
0001537E                            
0001537E                            loc_14894:
0001537E 0C41 000E                  		cmpi.w	#$E,d1
00015382 6E00                       		bgt.s	loc_148A0
00015384                            
00015384                            loc_1489A:
00015384 9368 000C                  		sub.w	d1,$C(a0)
00015388 4E75                       		rts	
0001538A                            ; ===========================================================================
0001538A                            
0001538A                            loc_148A0:
0001538A 4A28 0038                  		tst.b	$38(a0)
0001538E 66F4                       		bne.s	loc_1489A
00015390 08E8 0001 0022             		bset	#1,$22(a0)
00015396 08A8 0005 0022             		bclr	#5,$22(a0)
0001539C 117C 0001 001D             		move.b	#1,$1D(a0)
000153A2 4E75                       		rts	
000153A4                            ; End of function Sonic_WalkCeiling
000153A4                            
000153A4                            ; ---------------------------------------------------------------------------
000153A4                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his left
000153A4                            ; ---------------------------------------------------------------------------
000153A4                            
000153A4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000153A4                            
000153A4                            
000153A4                            Sonic_WalkVertL:			; XREF: Sonic_AnglePos
000153A4 3428 000C                  		move.w	$C(a0),d2
000153A8 3628 0008                  		move.w	8(a0),d3
000153AC 7000                       		moveq	#0,d0
000153AE 1028 0017                  		move.b	$17(a0),d0
000153B2 4880                       		ext.w	d0
000153B4 9440                       		sub.w	d0,d2
000153B6 1028 0016                  		move.b	$16(a0),d0
000153BA 4880                       		ext.w	d0
000153BC 9640                       		sub.w	d0,d3
000153BE 0A43 000F                  		eori.w	#$F,d3
000153C2 49F8 F768                  		lea	($FFFFF768).w,a4
000153C6 367C FFF0                  		movea.w	#-$10,a3
000153CA 3C3C 0800                  		move.w	#$800,d6
000153CE 7A0D                       		moveq	#$D,d5
000153D0 6100 0000                  		bsr.w	FindWall
000153D4 3F01                       		move.w	d1,-(sp)
000153D6 3428 000C                  		move.w	$C(a0),d2
000153DA 3628 0008                  		move.w	8(a0),d3
000153DE 7000                       		moveq	#0,d0
000153E0 1028 0017                  		move.b	$17(a0),d0
000153E4 4880                       		ext.w	d0
000153E6 D440                       		add.w	d0,d2
000153E8 1028 0016                  		move.b	$16(a0),d0
000153EC 4880                       		ext.w	d0
000153EE 9640                       		sub.w	d0,d3
000153F0 0A43 000F                  		eori.w	#$F,d3
000153F4 49F8 F76A                  		lea	($FFFFF76A).w,a4
000153F8 367C FFF0                  		movea.w	#-$10,a3
000153FC 3C3C 0800                  		move.w	#$800,d6
00015400 7A0D                       		moveq	#$D,d5
00015402 6100 0000                  		bsr.w	FindWall
00015406 301F                       		move.w	(sp)+,d0
00015408 6100 FE30                  		bsr.w	Sonic_Angle
0001540C 4A41                       		tst.w	d1
0001540E 6700                       		beq.s	locret_14934
00015410 6A00                       		bpl.s	loc_14936
00015412 0C41 FFF2                  		cmpi.w	#-$E,d1
00015416 6D00 FDDC                  		blt.w	locret_1470A
0001541A 9368 0008                  		sub.w	d1,8(a0)
0001541E                            
0001541E                            locret_14934:
0001541E 4E75                       		rts	
00015420                            ; ===========================================================================
00015420                            
00015420                            loc_14936:
00015420 0C41 000E                  		cmpi.w	#$E,d1
00015424 6E00                       		bgt.s	loc_14942
00015426                            
00015426                            loc_1493C:
00015426 9368 0008                  		sub.w	d1,8(a0)
0001542A 4E75                       		rts	
0001542C                            ; ===========================================================================
0001542C                            
0001542C                            loc_14942:
0001542C 4A28 0038                  		tst.b	$38(a0)
00015430 66F4                       		bne.s	loc_1493C
00015432 08E8 0001 0022             		bset	#1,$22(a0)
00015438 08A8 0005 0022             		bclr	#5,$22(a0)
0001543E 117C 0001 001D             		move.b	#1,$1D(a0)
00015444 4E75                       		rts	
00015446                            ; End of function Sonic_WalkVertL
00015446                            
00015446                            ; ---------------------------------------------------------------------------
00015446                            ; Subroutine to	find which tile	the object is standing on
00015446                            ; ---------------------------------------------------------------------------
00015446                            
00015446                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015446                            
00015446                            
00015446                            Floor_ChkTile:				; XREF: FindFloor; et al
00015446 3002                       		move.w	d2,d0
00015448 E248                       		lsr.w	#1,d0
0001544A 0240 0380                  		andi.w	#$380,d0
0001544E 3203                       		move.w	d3,d1
00015450 E049                       		lsr.w	#8,d1
00015452 0241 007F                  		andi.w	#$7F,d1
00015456 D041                       		add.w	d1,d0
00015458 72FF                       		moveq	#-1,d1
0001545A 43F8 A400                  		lea	($FFFFA400).w,a1
0001545E 1231 0000                  		move.b	(a1,d0.w),d1
00015462 6700                       		beq.s	loc_14996
00015464 6B00                       		bmi.s	loc_1499A
00015466 5301                       		subq.b	#1,d1
00015468 4881                       		ext.w	d1
0001546A EE59                       		ror.w	#7,d1
0001546C 3002                       		move.w	d2,d0
0001546E D040                       		add.w	d0,d0
00015470 0240 01E0                  		andi.w	#$1E0,d0
00015474 D240                       		add.w	d0,d1
00015476 3003                       		move.w	d3,d0
00015478 E648                       		lsr.w	#3,d0
0001547A 0240 001E                  		andi.w	#$1E,d0
0001547E D240                       		add.w	d0,d1
00015480                            
00015480                            loc_14996:
00015480 2241                       		movea.l	d1,a1
00015482 4E75                       		rts	
00015484                            ; ===========================================================================
00015484                            
00015484                            loc_1499A:
00015484 0241 007F                  		andi.w	#$7F,d1
00015488 0828 0006 0001             		btst	#6,1(a0)
0001548E 6700                       		beq.s	loc_149B2
00015490 5241                       		addq.w	#1,d1
00015492 0C41 0029                  		cmpi.w	#$29,d1
00015496 6600                       		bne.s	loc_149B2
00015498 323C 0051                  		move.w	#$51,d1
0001549C                            
0001549C                            loc_149B2:
0001549C 5301                       		subq.b	#1,d1
0001549E EE59                       		ror.w	#7,d1
000154A0 3002                       		move.w	d2,d0
000154A2 D040                       		add.w	d0,d0
000154A4 0240 01E0                  		andi.w	#$1E0,d0
000154A8 D240                       		add.w	d0,d1
000154AA 3003                       		move.w	d3,d0
000154AC E648                       		lsr.w	#3,d0
000154AE 0240 001E                  		andi.w	#$1E,d0
000154B2 D240                       		add.w	d0,d1
000154B4 2241                       		movea.l	d1,a1
000154B6 4E75                       		rts	
000154B8                            ; End of function Floor_ChkTile
000154B8                            
000154B8                            
000154B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000154B8                            
000154B8                            
000154B8                            FindFloor:				; XREF: Sonic_AnglePos; et al
000154B8 618C                       		bsr.s	Floor_ChkTile
000154BA 3011                       		move.w	(a1),d0
000154BC 3800                       		move.w	d0,d4
000154BE 0240 07FF                  		andi.w	#$7FF,d0
000154C2 6700                       		beq.s	loc_149DE
000154C4 0B04                       		btst	d5,d4
000154C6 6600                       		bne.s	loc_149EC
000154C8                            
000154C8                            loc_149DE:
000154C8 D44B                       		add.w	a3,d2
000154CA 6100 0000                  		bsr.w	FindFloor2
000154CE 944B                       		sub.w	a3,d2
000154D0 0641 0010                  		addi.w	#$10,d1
000154D4 4E75                       		rts	
000154D6                            ; ===========================================================================
000154D6                            
000154D6                            loc_149EC:
000154D6 2478 F796                  		movea.l	($FFFFF796).w,a2 ; load	collision index
000154DA 1032 0000                  		move.b	(a2,d0.w),d0
000154DE 0240 00FF                  		andi.w	#$FF,d0
000154E2 67E4                       		beq.s	loc_149DE
000154E4 45F9 0000 0000             		lea	(AngleMap).l,a2
000154EA 18B2 0000                  		move.b	(a2,d0.w),(a4)
000154EE E948                       		lsl.w	#4,d0
000154F0 3203                       		move.w	d3,d1
000154F2 0804 000B                  		btst	#$B,d4
000154F6 6700                       		beq.s	loc_14A12
000154F8 4641                       		not.w	d1
000154FA 4414                       		neg.b	(a4)
000154FC                            
000154FC                            loc_14A12:
000154FC 0804 000C                  		btst	#$C,d4
00015500 6700                       		beq.s	loc_14A22
00015502 0614 0040                  		addi.b	#$40,(a4)
00015506 4414                       		neg.b	(a4)
00015508 0414 0040                  		subi.b	#$40,(a4)
0001550C                            
0001550C                            loc_14A22:
0001550C 0241 000F                  		andi.w	#$F,d1
00015510 D240                       		add.w	d0,d1
00015512 45F9 0000 0000             		lea	(CollArray1).l,a2
00015518 1032 1000                  		move.b	(a2,d1.w),d0
0001551C 4880                       		ext.w	d0
0001551E BD44                       		eor.w	d6,d4
00015520 0804 000C                  		btst	#$C,d4
00015524 6700                       		beq.s	loc_14A3E
00015526 4440                       		neg.w	d0
00015528                            
00015528                            loc_14A3E:
00015528 4A40                       		tst.w	d0
0001552A 679C                       		beq.s	loc_149DE
0001552C 6B00                       		bmi.s	loc_14A5A
0001552E 0C00 0010                  		cmpi.b	#$10,d0
00015532 6700                       		beq.s	loc_14A66
00015534 3202                       		move.w	d2,d1
00015536 0241 000F                  		andi.w	#$F,d1
0001553A D041                       		add.w	d1,d0
0001553C 323C 000F                  		move.w	#$F,d1
00015540 9240                       		sub.w	d0,d1
00015542 4E75                       		rts	
00015544                            ; ===========================================================================
00015544                            
00015544                            loc_14A5A:
00015544 3202                       		move.w	d2,d1
00015546 0241 000F                  		andi.w	#$F,d1
0001554A D041                       		add.w	d1,d0
0001554C 6A00 FF7A                  		bpl.w	loc_149DE
00015550                            
00015550                            loc_14A66:
00015550 944B                       		sub.w	a3,d2
00015552 6100 0000                  		bsr.w	FindFloor2
00015556 D44B                       		add.w	a3,d2
00015558 0441 0010                  		subi.w	#$10,d1
0001555C 4E75                       		rts	
0001555E                            ; End of function FindFloor
0001555E                            
0001555E                            
0001555E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001555E                            
0001555E                            
0001555E                            FindFloor2:				; XREF: FindFloor
0001555E 6100 FEE6                  		bsr.w	Floor_ChkTile
00015562 3011                       		move.w	(a1),d0
00015564 3800                       		move.w	d0,d4
00015566 0240 07FF                  		andi.w	#$7FF,d0
0001556A 6700                       		beq.s	loc_14A86
0001556C 0B04                       		btst	d5,d4
0001556E 6600                       		bne.s	loc_14A94
00015570                            
00015570                            loc_14A86:
00015570 323C 000F                  		move.w	#$F,d1
00015574 3002                       		move.w	d2,d0
00015576 0240 000F                  		andi.w	#$F,d0
0001557A 9240                       		sub.w	d0,d1
0001557C 4E75                       		rts	
0001557E                            ; ===========================================================================
0001557E                            
0001557E                            loc_14A94:
0001557E 2478 F796                  		movea.l	($FFFFF796).w,a2
00015582 1032 0000                  		move.b	(a2,d0.w),d0
00015586 0240 00FF                  		andi.w	#$FF,d0
0001558A 67E4                       		beq.s	loc_14A86
0001558C 45F9 0000 0000             		lea	(AngleMap).l,a2
00015592 18B2 0000                  		move.b	(a2,d0.w),(a4)
00015596 E948                       		lsl.w	#4,d0
00015598 3203                       		move.w	d3,d1
0001559A 0804 000B                  		btst	#$B,d4
0001559E 6700                       		beq.s	loc_14ABA
000155A0 4641                       		not.w	d1
000155A2 4414                       		neg.b	(a4)
000155A4                            
000155A4                            loc_14ABA:
000155A4 0804 000C                  		btst	#$C,d4
000155A8 6700                       		beq.s	loc_14ACA
000155AA 0614 0040                  		addi.b	#$40,(a4)
000155AE 4414                       		neg.b	(a4)
000155B0 0414 0040                  		subi.b	#$40,(a4)
000155B4                            
000155B4                            loc_14ACA:
000155B4 0241 000F                  		andi.w	#$F,d1
000155B8 D240                       		add.w	d0,d1
000155BA 45F9 0000 0000             		lea	(CollArray1).l,a2
000155C0 1032 1000                  		move.b	(a2,d1.w),d0
000155C4 4880                       		ext.w	d0
000155C6 BD44                       		eor.w	d6,d4
000155C8 0804 000C                  		btst	#$C,d4
000155CC 6700                       		beq.s	loc_14AE6
000155CE 4440                       		neg.w	d0
000155D0                            
000155D0                            loc_14AE6:
000155D0 4A40                       		tst.w	d0
000155D2 679C                       		beq.s	loc_14A86
000155D4 6B00                       		bmi.s	loc_14AFC
000155D6 3202                       		move.w	d2,d1
000155D8 0241 000F                  		andi.w	#$F,d1
000155DC D041                       		add.w	d1,d0
000155DE 323C 000F                  		move.w	#$F,d1
000155E2 9240                       		sub.w	d0,d1
000155E4 4E75                       		rts	
000155E6                            ; ===========================================================================
000155E6                            
000155E6                            loc_14AFC:
000155E6 3202                       		move.w	d2,d1
000155E8 0241 000F                  		andi.w	#$F,d1
000155EC D041                       		add.w	d1,d0
000155EE 6A00 FF80                  		bpl.w	loc_14A86
000155F2 4641                       		not.w	d1
000155F4 4E75                       		rts	
000155F6                            ; End of function FindFloor2
000155F6                            
000155F6                            
000155F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000155F6                            
000155F6                            
000155F6                            FindWall:				; XREF: Sonic_WalkVertR; et al
000155F6 6100 FE4E                  		bsr.w	Floor_ChkTile
000155FA 3011                       		move.w	(a1),d0
000155FC 3800                       		move.w	d0,d4
000155FE 0240 07FF                  		andi.w	#$7FF,d0
00015602 6700                       		beq.s	loc_14B1E
00015604 0B04                       		btst	d5,d4
00015606 6600                       		bne.s	loc_14B2C
00015608                            
00015608                            loc_14B1E:
00015608 D64B                       		add.w	a3,d3
0001560A 6100 0000                  		bsr.w	FindWall2
0001560E 964B                       		sub.w	a3,d3
00015610 0641 0010                  		addi.w	#$10,d1
00015614 4E75                       		rts	
00015616                            ; ===========================================================================
00015616                            
00015616                            loc_14B2C:
00015616 2478 F796                  		movea.l	($FFFFF796).w,a2
0001561A 1032 0000                  		move.b	(a2,d0.w),d0
0001561E 0240 00FF                  		andi.w	#$FF,d0
00015622 67E4                       		beq.s	loc_14B1E
00015624 45F9 0000 0000             		lea	(AngleMap).l,a2
0001562A 18B2 0000                  		move.b	(a2,d0.w),(a4)
0001562E E948                       		lsl.w	#4,d0
00015630 3202                       		move.w	d2,d1
00015632 0804 000C                  		btst	#$C,d4
00015636 6700                       		beq.s	loc_14B5A
00015638 4641                       		not.w	d1
0001563A 0614 0040                  		addi.b	#$40,(a4)
0001563E 4414                       		neg.b	(a4)
00015640 0414 0040                  		subi.b	#$40,(a4)
00015644                            
00015644                            loc_14B5A:
00015644 0804 000B                  		btst	#$B,d4
00015648 6700                       		beq.s	loc_14B62
0001564A 4414                       		neg.b	(a4)
0001564C                            
0001564C                            loc_14B62:
0001564C 0241 000F                  		andi.w	#$F,d1
00015650 D240                       		add.w	d0,d1
00015652 45F9 0000 0000             		lea	(CollArray2).l,a2
00015658 1032 1000                  		move.b	(a2,d1.w),d0
0001565C 4880                       		ext.w	d0
0001565E BD44                       		eor.w	d6,d4
00015660 0804 000B                  		btst	#$B,d4
00015664 6700                       		beq.s	loc_14B7E
00015666 4440                       		neg.w	d0
00015668                            
00015668                            loc_14B7E:
00015668 4A40                       		tst.w	d0
0001566A 679C                       		beq.s	loc_14B1E
0001566C 6B00                       		bmi.s	loc_14B9A
0001566E 0C00 0010                  		cmpi.b	#$10,d0
00015672 6700                       		beq.s	loc_14BA6
00015674 3203                       		move.w	d3,d1
00015676 0241 000F                  		andi.w	#$F,d1
0001567A D041                       		add.w	d1,d0
0001567C 323C 000F                  		move.w	#$F,d1
00015680 9240                       		sub.w	d0,d1
00015682 4E75                       		rts	
00015684                            ; ===========================================================================
00015684                            
00015684                            loc_14B9A:
00015684 3203                       		move.w	d3,d1
00015686 0241 000F                  		andi.w	#$F,d1
0001568A D041                       		add.w	d1,d0
0001568C 6A00 FF7A                  		bpl.w	loc_14B1E
00015690                            
00015690                            loc_14BA6:
00015690 964B                       		sub.w	a3,d3
00015692 6100 0000                  		bsr.w	FindWall2
00015696 D64B                       		add.w	a3,d3
00015698 0441 0010                  		subi.w	#$10,d1
0001569C 4E75                       		rts	
0001569E                            ; End of function FindWall
0001569E                            
0001569E                            
0001569E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001569E                            
0001569E                            
0001569E                            FindWall2:				; XREF: FindWall
0001569E 6100 FDA6                  		bsr.w	Floor_ChkTile
000156A2 3011                       		move.w	(a1),d0
000156A4 3800                       		move.w	d0,d4
000156A6 0240 07FF                  		andi.w	#$7FF,d0
000156AA 6700                       		beq.s	loc_14BC6
000156AC 0B04                       		btst	d5,d4
000156AE 6600                       		bne.s	loc_14BD4
000156B0                            
000156B0                            loc_14BC6:
000156B0 323C 000F                  		move.w	#$F,d1
000156B4 3003                       		move.w	d3,d0
000156B6 0240 000F                  		andi.w	#$F,d0
000156BA 9240                       		sub.w	d0,d1
000156BC 4E75                       		rts	
000156BE                            ; ===========================================================================
000156BE                            
000156BE                            loc_14BD4:
000156BE 2478 F796                  		movea.l	($FFFFF796).w,a2
000156C2 1032 0000                  		move.b	(a2,d0.w),d0
000156C6 0240 00FF                  		andi.w	#$FF,d0
000156CA 67E4                       		beq.s	loc_14BC6
000156CC 45F9 0000 0000             		lea	(AngleMap).l,a2
000156D2 18B2 0000                  		move.b	(a2,d0.w),(a4)
000156D6 E948                       		lsl.w	#4,d0
000156D8 3202                       		move.w	d2,d1
000156DA 0804 000C                  		btst	#$C,d4
000156DE 6700                       		beq.s	loc_14C02
000156E0 4641                       		not.w	d1
000156E2 0614 0040                  		addi.b	#$40,(a4)
000156E6 4414                       		neg.b	(a4)
000156E8 0414 0040                  		subi.b	#$40,(a4)
000156EC                            
000156EC                            loc_14C02:
000156EC 0804 000B                  		btst	#$B,d4
000156F0 6700                       		beq.s	loc_14C0A
000156F2 4414                       		neg.b	(a4)
000156F4                            
000156F4                            loc_14C0A:
000156F4 0241 000F                  		andi.w	#$F,d1
000156F8 D240                       		add.w	d0,d1
000156FA 45F9 0000 0000             		lea	(CollArray2).l,a2
00015700 1032 1000                  		move.b	(a2,d1.w),d0
00015704 4880                       		ext.w	d0
00015706 BD44                       		eor.w	d6,d4
00015708 0804 000B                  		btst	#$B,d4
0001570C 6700                       		beq.s	loc_14C26
0001570E 4440                       		neg.w	d0
00015710                            
00015710                            loc_14C26:
00015710 4A40                       		tst.w	d0
00015712 679C                       		beq.s	loc_14BC6
00015714 6B00                       		bmi.s	loc_14C3C
00015716 3203                       		move.w	d3,d1
00015718 0241 000F                  		andi.w	#$F,d1
0001571C D041                       		add.w	d1,d0
0001571E 323C 000F                  		move.w	#$F,d1
00015722 9240                       		sub.w	d0,d1
00015724 4E75                       		rts	
00015726                            ; ===========================================================================
00015726                            
00015726                            loc_14C3C:
00015726 3203                       		move.w	d3,d1
00015728 0241 000F                  		andi.w	#$F,d1
0001572C D041                       		add.w	d1,d0
0001572E 6A00 FF80                  		bpl.w	loc_14BC6
00015732 4641                       		not.w	d1
00015734 4E75                       		rts	
00015736                            ; End of function FindWall2
00015736                            
00015736                            ; ---------------------------------------------------------------------------
00015736                            ; Unused floor/wall subroutine - logs something	to do with collision
00015736                            ; ---------------------------------------------------------------------------
00015736                            
00015736                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015736                            
00015736                            
00015736                            FloorLog_Unk:				; XREF: Level
00015736 4E75                       		rts	
00015738                            
00015738 43F9 0000 0000             		lea	(CollArray1).l,a1
0001573E 45F9 0000 0000             		lea	(CollArray1).l,a2
00015744 363C 00FF                  		move.w	#$FF,d3
00015748                            
00015748                            loc_14C5E:
00015748 7A10                       		moveq	#$10,d5
0001574A 343C 000F                  		move.w	#$F,d2
0001574E                            
0001574E                            loc_14C64:
0001574E 7800                       		moveq	#0,d4
00015750 323C 000F                  		move.w	#$F,d1
00015754                            
00015754                            loc_14C6A:
00015754 3019                       		move.w	(a1)+,d0
00015756 EAA8                       		lsr.l	d5,d0
00015758 D944                       		addx.w	d4,d4
0001575A 51C9 FFF8                  		dbf	d1,loc_14C6A
0001575E                            
0001575E 34C4                       		move.w	d4,(a2)+
00015760 92FC 0020                  		suba.w	#$20,a1
00015764 5345                       		subq.w	#1,d5
00015766 51CA FFE6                  		dbf	d2,loc_14C64
0001576A                            
0001576A D2FC 0020                  		adda.w	#$20,a1
0001576E 51CB FFD8                  		dbf	d3,loc_14C5E
00015772                            
00015772 43F9 0000 0000             		lea	(CollArray1).l,a1
00015778 45F9 0000 0000             		lea	(CollArray2).l,a2
0001577E 6100                       		bsr.s	FloorLog_Unk2
00015780 43F9 0000 0000             		lea	(CollArray1).l,a1
00015786 45F9 0000 0000             		lea	(CollArray1).l,a2
0001578C                            
0001578C                            ; End of function FloorLog_Unk
0001578C                            
0001578C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001578C                            
0001578C                            
0001578C                            FloorLog_Unk2:				; XREF: FloorLog_Unk
0001578C 363C 0FFF                  		move.w	#$FFF,d3
00015790                            
00015790                            loc_14CA6:
00015790 7400                       		moveq	#0,d2
00015792 323C 000F                  		move.w	#$F,d1
00015796 3019                       		move.w	(a1)+,d0
00015798 6700                       		beq.s	loc_14CD4
0001579A 6B00                       		bmi.s	loc_14CBE
0001579C                            
0001579C                            loc_14CB2:
0001579C E248                       		lsr.w	#1,d0
0001579E 6400                       		bcc.s	loc_14CB8
000157A0 5202                       		addq.b	#1,d2
000157A2                            
000157A2                            loc_14CB8:
000157A2 51C9 FFF8                  		dbf	d1,loc_14CB2
000157A6                            
000157A6 6000                       		bra.s	loc_14CD6
000157A8                            ; ===========================================================================
000157A8                            
000157A8                            loc_14CBE:
000157A8 0C40 FFFF                  		cmpi.w	#-1,d0
000157AC 6700                       		beq.s	loc_14CD0
000157AE                            
000157AE                            loc_14CC4:
000157AE E348                       		lsl.w	#1,d0
000157B0 6400                       		bcc.s	loc_14CCA
000157B2 5302                       		subq.b	#1,d2
000157B4                            
000157B4                            loc_14CCA:
000157B4 51C9 FFF8                  		dbf	d1,loc_14CC4
000157B8                            
000157B8 6000                       		bra.s	loc_14CD6
000157BA                            ; ===========================================================================
000157BA                            
000157BA                            loc_14CD0:
000157BA 303C 0010                  		move.w	#$10,d0
000157BE                            
000157BE                            loc_14CD4:
000157BE 3400                       		move.w	d0,d2
000157C0                            
000157C0                            loc_14CD6:
000157C0 14C2                       		move.b	d2,(a2)+
000157C2 51CB FFCC                  		dbf	d3,loc_14CA6
000157C6                            
000157C6 4E75                       		rts	
000157C8                            
000157C8                            ; End of function FloorLog_Unk2
000157C8                            
000157C8                            
000157C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000157C8                            
000157C8                            
000157C8                            Sonic_WalkSpeed:			; XREF: Sonic_Move
000157C8 2628 0008                  		move.l	8(a0),d3
000157CC 2428 000C                  		move.l	$C(a0),d2
000157D0 3228 0010                  		move.w	$10(a0),d1
000157D4 48C1                       		ext.l	d1
000157D6 E181                       		asl.l	#8,d1
000157D8 D681                       		add.l	d1,d3
000157DA 3228 0012                  		move.w	$12(a0),d1
000157DE 48C1                       		ext.l	d1
000157E0 E181                       		asl.l	#8,d1
000157E2 D481                       		add.l	d1,d2
000157E4 4842                       		swap	d2
000157E6 4843                       		swap	d3
000157E8 11C0 F768                  		move.b	d0,($FFFFF768).w
000157EC 11C0 F76A                  		move.b	d0,($FFFFF76A).w
000157F0 1200                       		move.b	d0,d1
000157F2 0600 0020                  		addi.b	#$20,d0
000157F6 6A00                       		bpl.s	loc_14D1A
000157F8 1001                       		move.b	d1,d0
000157FA 6A00                       		bpl.s	loc_14D14
000157FC 5300                       		subq.b	#1,d0
000157FE                            
000157FE                            loc_14D14:
000157FE 0600 0020                  		addi.b	#$20,d0
00015802 6000                       		bra.s	loc_14D24
00015804                            ; ===========================================================================
00015804                            
00015804                            loc_14D1A:
00015804 1001                       		move.b	d1,d0
00015806 6A00                       		bpl.s	loc_14D20
00015808 5200                       		addq.b	#1,d0
0001580A                            
0001580A                            loc_14D20:
0001580A 0600 001F                  		addi.b	#$1F,d0
0001580E                            
0001580E                            loc_14D24:
0001580E 0200 00C0                  		andi.b	#$C0,d0
00015812 6700 0000                  		beq.w	loc_14DF0
00015816 0C00 0080                  		cmpi.b	#$80,d0
0001581A 6700 0000                  		beq.w	loc_14F7C
0001581E 0201 0038                  		andi.b	#$38,d1
00015822 6600                       		bne.s	loc_14D3C
00015824 5042                       		addq.w	#8,d2
00015826                            
00015826                            loc_14D3C:
00015826 0C00 0040                  		cmpi.b	#$40,d0
0001582A 6700 0000                  		beq.w	loc_1504A
0001582E 6000 0000                  		bra.w	loc_14EBC
00015832                            
00015832                            ; End of function Sonic_WalkSpeed
00015832                            
00015832                            
00015832                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015832                            
00015832                            
00015832                            sub_14D48:				; XREF: Sonic_Jump
00015832 11C0 F768                  		move.b	d0,($FFFFF768).w
00015836 11C0 F76A                  		move.b	d0,($FFFFF76A).w
0001583A 0600 0020                  		addi.b	#$20,d0
0001583E 0200 00C0                  		andi.b	#$C0,d0
00015842 0C00 0040                  		cmpi.b	#$40,d0
00015846 6700 0000                  		beq.w	loc_14FD6
0001584A 0C00 0080                  		cmpi.b	#$80,d0
0001584E 6700 0000                  		beq.w	Sonic_DontRunOnWalls
00015852 0C00 00C0                  		cmpi.b	#$C0,d0
00015856 6700 0000                  		beq.w	sub_14E50
0001585A                            
0001585A                            ; End of function sub_14D48
0001585A                            
0001585A                            ; ---------------------------------------------------------------------------
0001585A                            ; Subroutine to	make Sonic land	on the floor after jumping
0001585A                            ; ---------------------------------------------------------------------------
0001585A                            
0001585A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001585A                            
0001585A                            
0001585A                            Sonic_HitFloor:				; XREF: Sonic_Floor
0001585A 3428 000C                  		move.w	$C(a0),d2
0001585E 3628 0008                  		move.w	8(a0),d3
00015862 7000                       		moveq	#0,d0
00015864 1028 0016                  		move.b	$16(a0),d0
00015868 4880                       		ext.w	d0
0001586A D440                       		add.w	d0,d2
0001586C 1028 0017                  		move.b	$17(a0),d0
00015870 4880                       		ext.w	d0
00015872 D640                       		add.w	d0,d3
00015874 49F8 F768                  		lea	($FFFFF768).w,a4
00015878 367C 0010                  		movea.w	#$10,a3
0001587C 3C3C 0000                  		move.w	#0,d6
00015880 7A0D                       		moveq	#$D,d5
00015882 6100 FC34                  		bsr.w	FindFloor
00015886 3F01                       		move.w	d1,-(sp)
00015888 3428 000C                  		move.w	$C(a0),d2
0001588C 3628 0008                  		move.w	8(a0),d3
00015890 7000                       		moveq	#0,d0
00015892 1028 0016                  		move.b	$16(a0),d0
00015896 4880                       		ext.w	d0
00015898 D440                       		add.w	d0,d2
0001589A 1028 0017                  		move.b	$17(a0),d0
0001589E 4880                       		ext.w	d0
000158A0 9640                       		sub.w	d0,d3
000158A2 49F8 F76A                  		lea	($FFFFF76A).w,a4
000158A6 367C 0010                  		movea.w	#$10,a3
000158AA 3C3C 0000                  		move.w	#0,d6
000158AE 7A0D                       		moveq	#$D,d5
000158B0 6100 FC06                  		bsr.w	FindFloor
000158B4 301F                       		move.w	(sp)+,d0
000158B6 143C 0000                  		move.b	#0,d2
000158BA                            
000158BA                            loc_14DD0:
000158BA 1638 F76A                  		move.b	($FFFFF76A).w,d3
000158BE B240                       		cmp.w	d0,d1
000158C0 6F00                       		ble.s	loc_14DDE
000158C2 1638 F768                  		move.b	($FFFFF768).w,d3
000158C6 C141                       		exg	d0,d1
000158C8                            
000158C8                            loc_14DDE:
000158C8 0803 0000                  		btst	#0,d3
000158CC 6700                       		beq.s	locret_14DE6
000158CE 1602                       		move.b	d2,d3
000158D0                            
000158D0                            locret_14DE6:
000158D0 4E75                       		rts	
000158D2                            
000158D2                            ; End of function Sonic_HitFloor
000158D2                            
000158D2                            ; ===========================================================================
000158D2 3428 000C                  		move.w	$C(a0),d2
000158D6 3628 0008                  		move.w	8(a0),d3
000158DA                            
000158DA                            loc_14DF0:				; XREF: Sonic_WalkSpeed
000158DA 0642 000A                  		addi.w	#$A,d2
000158DE 49F8 F768                  		lea	($FFFFF768).w,a4
000158E2 367C 0010                  		movea.w	#$10,a3
000158E6 3C3C 0000                  		move.w	#0,d6
000158EA 7A0E                       		moveq	#$E,d5
000158EC 6100 FBCA                  		bsr.w	FindFloor
000158F0 143C 0000                  		move.b	#0,d2
000158F4                            
000158F4                            loc_14E0A:				; XREF: sub_14EB4
000158F4 1638 F768                  		move.b	($FFFFF768).w,d3
000158F8 0803 0000                  		btst	#0,d3
000158FC 6700                       		beq.s	locret_14E16
000158FE 1602                       		move.b	d2,d3
00015900                            
00015900                            locret_14E16:
00015900 4E75                       		rts	
00015902                            
00015902                            ; ---------------------------------------------------------------------------
00015902                            ; Subroutine allowing objects to interact with the floor
00015902                            ; ---------------------------------------------------------------------------
00015902                            
00015902                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015902                            
00015902                            
00015902                            ObjHitFloor:
00015902 3628 0008                  		move.w	8(a0),d3
00015906                            
00015906                            ; End of function ObjHitFloor
00015906                            
00015906                            
00015906                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015906                            
00015906                            
00015906                            ObjHitFloor2:
00015906 3428 000C                  		move.w	$C(a0),d2
0001590A 7000                       		moveq	#0,d0
0001590C 1028 0016                  		move.b	$16(a0),d0
00015910 4880                       		ext.w	d0
00015912 D440                       		add.w	d0,d2
00015914 49F8 F768                  		lea	($FFFFF768).w,a4
00015918 18BC 0000                  		move.b	#0,(a4)
0001591C 367C 0010                  		movea.w	#$10,a3
00015920 3C3C 0000                  		move.w	#0,d6
00015924 7A0D                       		moveq	#$D,d5
00015926 6100 FB90                  		bsr.w	FindFloor
0001592A 1638 F768                  		move.b	($FFFFF768).w,d3
0001592E 0803 0000                  		btst	#0,d3
00015932 6700                       		beq.s	locret_14E4E
00015934 163C 0000                  		move.b	#0,d3
00015938                            
00015938                            locret_14E4E:
00015938 4E75                       		rts	
0001593A                            ; End of function ObjHitFloor2
0001593A                            
0001593A                            
0001593A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001593A                            
0001593A                            
0001593A                            sub_14E50:				; XREF: sub_14D48
0001593A 3428 000C                  		move.w	$C(a0),d2
0001593E 3628 0008                  		move.w	8(a0),d3
00015942 7000                       		moveq	#0,d0
00015944 1028 0017                  		move.b	$17(a0),d0
00015948 4880                       		ext.w	d0
0001594A 9440                       		sub.w	d0,d2
0001594C 1028 0016                  		move.b	$16(a0),d0
00015950 4880                       		ext.w	d0
00015952 D640                       		add.w	d0,d3
00015954 49F8 F768                  		lea	($FFFFF768).w,a4
00015958 367C 0010                  		movea.w	#$10,a3
0001595C 3C3C 0000                  		move.w	#0,d6
00015960 7A0E                       		moveq	#$E,d5
00015962 6100 FC92                  		bsr.w	FindWall
00015966 3F01                       		move.w	d1,-(sp)
00015968 3428 000C                  		move.w	$C(a0),d2
0001596C 3628 0008                  		move.w	8(a0),d3
00015970 7000                       		moveq	#0,d0
00015972 1028 0017                  		move.b	$17(a0),d0
00015976 4880                       		ext.w	d0
00015978 D440                       		add.w	d0,d2
0001597A 1028 0016                  		move.b	$16(a0),d0
0001597E 4880                       		ext.w	d0
00015980 D640                       		add.w	d0,d3
00015982 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015986 367C 0010                  		movea.w	#$10,a3
0001598A 3C3C 0000                  		move.w	#0,d6
0001598E 7A0E                       		moveq	#$E,d5
00015990 6100 FC64                  		bsr.w	FindWall
00015994 301F                       		move.w	(sp)+,d0
00015996 143C 00C0                  		move.b	#-$40,d2
0001599A 6000 FF1E                  		bra.w	loc_14DD0
0001599E                            
0001599E                            ; End of function sub_14E50
0001599E                            
0001599E                            
0001599E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001599E                            
0001599E                            
0001599E                            sub_14EB4:				; XREF: Sonic_Floor
0001599E 3428 000C                  		move.w	$C(a0),d2
000159A2 3628 0008                  		move.w	8(a0),d3
000159A6                            
000159A6                            loc_14EBC:
000159A6 0643 000A                  		addi.w	#$A,d3
000159AA 49F8 F768                  		lea	($FFFFF768).w,a4
000159AE 367C 0010                  		movea.w	#$10,a3
000159B2 3C3C 0000                  		move.w	#0,d6
000159B6 7A0E                       		moveq	#$E,d5
000159B8 6100 FC3C                  		bsr.w	FindWall
000159BC 143C 00C0                  		move.b	#-$40,d2
000159C0 6000 FF32                  		bra.w	loc_14E0A
000159C4                            
000159C4                            ; End of function sub_14EB4
000159C4                            
000159C4                            ; ---------------------------------------------------------------------------
000159C4                            ; Subroutine to	detect when an object hits a wall to its right
000159C4                            ; ---------------------------------------------------------------------------
000159C4                            
000159C4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000159C4                            
000159C4                            
000159C4                            ObjHitWallRight:
000159C4 D668 0008                  		add.w	8(a0),d3
000159C8 3428 000C                  		move.w	$C(a0),d2
000159CC 49F8 F768                  		lea	($FFFFF768).w,a4
000159D0 18BC 0000                  		move.b	#0,(a4)
000159D4 367C 0010                  		movea.w	#$10,a3
000159D8 3C3C 0000                  		move.w	#0,d6
000159DC 7A0E                       		moveq	#$E,d5
000159DE 6100 FC16                  		bsr.w	FindWall
000159E2 1638 F768                  		move.b	($FFFFF768).w,d3
000159E6 0803 0000                  		btst	#0,d3
000159EA 6700                       		beq.s	locret_14F06
000159EC 163C 00C0                  		move.b	#-$40,d3
000159F0                            
000159F0                            locret_14F06:
000159F0 4E75                       		rts	
000159F2                            
000159F2                            ; End of function ObjHitWallRight
000159F2                            
000159F2                            ; ---------------------------------------------------------------------------
000159F2                            ; Subroutine preventing	Sonic from running on walls and	ceilings when he
000159F2                            ; touches them
000159F2                            ; ---------------------------------------------------------------------------
000159F2                            
000159F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000159F2                            
000159F2                            
000159F2                            Sonic_DontRunOnWalls:			; XREF: Sonic_Floor; et al
000159F2 3428 000C                  		move.w	$C(a0),d2
000159F6 3628 0008                  		move.w	8(a0),d3
000159FA 7000                       		moveq	#0,d0
000159FC 1028 0016                  		move.b	$16(a0),d0
00015A00 4880                       		ext.w	d0
00015A02 9440                       		sub.w	d0,d2
00015A04 0A42 000F                  		eori.w	#$F,d2
00015A08 1028 0017                  		move.b	$17(a0),d0
00015A0C 4880                       		ext.w	d0
00015A0E D640                       		add.w	d0,d3
00015A10 49F8 F768                  		lea	($FFFFF768).w,a4
00015A14 367C FFF0                  		movea.w	#-$10,a3
00015A18 3C3C 1000                  		move.w	#$1000,d6
00015A1C 7A0E                       		moveq	#$E,d5
00015A1E 6100 FA98                  		bsr.w	FindFloor
00015A22 3F01                       		move.w	d1,-(sp)
00015A24 3428 000C                  		move.w	$C(a0),d2
00015A28 3628 0008                  		move.w	8(a0),d3
00015A2C 7000                       		moveq	#0,d0
00015A2E 1028 0016                  		move.b	$16(a0),d0
00015A32 4880                       		ext.w	d0
00015A34 9440                       		sub.w	d0,d2
00015A36 0A42 000F                  		eori.w	#$F,d2
00015A3A 1028 0017                  		move.b	$17(a0),d0
00015A3E 4880                       		ext.w	d0
00015A40 9640                       		sub.w	d0,d3
00015A42 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015A46 367C FFF0                  		movea.w	#-$10,a3
00015A4A 3C3C 1000                  		move.w	#$1000,d6
00015A4E 7A0E                       		moveq	#$E,d5
00015A50 6100 FA66                  		bsr.w	FindFloor
00015A54 301F                       		move.w	(sp)+,d0
00015A56 143C 0080                  		move.b	#-$80,d2
00015A5A 6000 FE5E                  		bra.w	loc_14DD0
00015A5E                            ; End of function Sonic_DontRunOnWalls
00015A5E                            
00015A5E                            ; ===========================================================================
00015A5E 3428 000C                  		move.w	$C(a0),d2
00015A62 3628 0008                  		move.w	8(a0),d3
00015A66                            
00015A66                            loc_14F7C:
00015A66 0442 000A                  		subi.w	#$A,d2
00015A6A 0A42 000F                  		eori.w	#$F,d2
00015A6E 49F8 F768                  		lea	($FFFFF768).w,a4
00015A72 367C FFF0                  		movea.w	#-$10,a3
00015A76 3C3C 1000                  		move.w	#$1000,d6
00015A7A 7A0E                       		moveq	#$E,d5
00015A7C 6100 FA3A                  		bsr.w	FindFloor
00015A80 143C 0080                  		move.b	#-$80,d2
00015A84 6000 FE6E                  		bra.w	loc_14E0A
00015A88                            
00015A88                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015A88                            
00015A88                            
00015A88                            ObjHitCeiling:
00015A88 3428 000C                  		move.w	$C(a0),d2
00015A8C 3628 0008                  		move.w	8(a0),d3
00015A90 7000                       		moveq	#0,d0
00015A92 1028 0016                  		move.b	$16(a0),d0
00015A96 4880                       		ext.w	d0
00015A98 9440                       		sub.w	d0,d2
00015A9A 0A42 000F                  		eori.w	#$F,d2
00015A9E 49F8 F768                  		lea	($FFFFF768).w,a4
00015AA2 367C FFF0                  		movea.w	#-$10,a3
00015AA6 3C3C 1000                  		move.w	#$1000,d6
00015AAA 7A0E                       		moveq	#$E,d5
00015AAC 6100 FA0A                  		bsr.w	FindFloor
00015AB0 1638 F768                  		move.b	($FFFFF768).w,d3
00015AB4 0803 0000                  		btst	#0,d3
00015AB8 6700                       		beq.s	locret_14FD4
00015ABA 163C 0080                  		move.b	#-$80,d3
00015ABE                            
00015ABE                            locret_14FD4:
00015ABE 4E75                       		rts	
00015AC0                            ; End of function ObjHitCeiling
00015AC0                            
00015AC0                            ; ===========================================================================
00015AC0                            
00015AC0                            loc_14FD6:				; XREF: sub_14D48
00015AC0 3428 000C                  		move.w	$C(a0),d2
00015AC4 3628 0008                  		move.w	8(a0),d3
00015AC8 7000                       		moveq	#0,d0
00015ACA 1028 0017                  		move.b	$17(a0),d0
00015ACE 4880                       		ext.w	d0
00015AD0 9440                       		sub.w	d0,d2
00015AD2 1028 0016                  		move.b	$16(a0),d0
00015AD6 4880                       		ext.w	d0
00015AD8 9640                       		sub.w	d0,d3
00015ADA 0A43 000F                  		eori.w	#$F,d3
00015ADE 49F8 F768                  		lea	($FFFFF768).w,a4
00015AE2 367C FFF0                  		movea.w	#-$10,a3
00015AE6 3C3C 0800                  		move.w	#$800,d6
00015AEA 7A0E                       		moveq	#$E,d5
00015AEC 6100 FB08                  		bsr.w	FindWall
00015AF0 3F01                       		move.w	d1,-(sp)
00015AF2 3428 000C                  		move.w	$C(a0),d2
00015AF6 3628 0008                  		move.w	8(a0),d3
00015AFA 7000                       		moveq	#0,d0
00015AFC 1028 0017                  		move.b	$17(a0),d0
00015B00 4880                       		ext.w	d0
00015B02 D440                       		add.w	d0,d2
00015B04 1028 0016                  		move.b	$16(a0),d0
00015B08 4880                       		ext.w	d0
00015B0A 9640                       		sub.w	d0,d3
00015B0C 0A43 000F                  		eori.w	#$F,d3
00015B10 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015B14 367C FFF0                  		movea.w	#-$10,a3
00015B18 3C3C 0800                  		move.w	#$800,d6
00015B1C 7A0E                       		moveq	#$E,d5
00015B1E 6100 FAD6                  		bsr.w	FindWall
00015B22 301F                       		move.w	(sp)+,d0
00015B24 143C 0040                  		move.b	#$40,d2
00015B28 6000 FD90                  		bra.w	loc_14DD0
00015B2C                            
00015B2C                            ; ---------------------------------------------------------------------------
00015B2C                            ; Subroutine to	stop Sonic when	he jumps at a wall
00015B2C                            ; ---------------------------------------------------------------------------
00015B2C                            
00015B2C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015B2C                            
00015B2C                            
00015B2C                            Sonic_HitWall:				; XREF: Sonic_Floor
00015B2C 3428 000C                  		move.w	$C(a0),d2
00015B30 3628 0008                  		move.w	8(a0),d3
00015B34                            
00015B34                            loc_1504A:
00015B34 0443 000A                  		subi.w	#$A,d3
00015B38 0A43 000F                  		eori.w	#$F,d3
00015B3C 49F8 F768                  		lea	($FFFFF768).w,a4
00015B40 367C FFF0                  		movea.w	#-$10,a3
00015B44 3C3C 0800                  		move.w	#$800,d6
00015B48 7A0E                       		moveq	#$E,d5
00015B4A 6100 FAAA                  		bsr.w	FindWall
00015B4E 143C 0040                  		move.b	#$40,d2
00015B52 6000 FDA0                  		bra.w	loc_14E0A
00015B56                            ; End of function Sonic_HitWall
00015B56                            
00015B56                            ; ---------------------------------------------------------------------------
00015B56                            ; Subroutine to	detect when an object hits a wall to its left
00015B56                            ; ---------------------------------------------------------------------------
00015B56                            
00015B56                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015B56                            
00015B56                            
00015B56                            ObjHitWallLeft:
00015B56 D668 0008                  		add.w	8(a0),d3
00015B5A 3428 000C                  		move.w	$C(a0),d2
00015B5E 49F8 F768                  		lea	($FFFFF768).w,a4
00015B62 18BC 0000                  		move.b	#0,(a4)
00015B66 367C FFF0                  		movea.w	#-$10,a3
00015B6A 3C3C 0800                  		move.w	#$800,d6
00015B6E 7A0E                       		moveq	#$E,d5
00015B70 6100 FA84                  		bsr.w	FindWall
00015B74 1638 F768                  		move.b	($FFFFF768).w,d3
00015B78 0803 0000                  		btst	#0,d3
00015B7C 6700                       		beq.s	locret_15098
00015B7E 163C 0040                  		move.b	#$40,d3
00015B82                            
00015B82                            locret_15098:
00015B82 4E75                       		rts	
00015B84                            ; End of function ObjHitWallLeft
00015B84                            
00015B84                            ; ===========================================================================
00015B84                            ; ---------------------------------------------------------------------------
00015B84                            ; Object 66 - rotating disc that grabs Sonic (SBZ)
00015B84                            ; ---------------------------------------------------------------------------
00015B84                            
00015B84                            Obj66:					; XREF: Obj_Index
00015B84 7000                       		moveq	#0,d0
00015B86 1028 0024                  		move.b	$24(a0),d0
00015B8A 323B 0000                  		move.w	Obj66_Index(pc,d0.w),d1
00015B8E 4EFB 1000                  		jmp	Obj66_Index(pc,d1.w)
00015B92                            ; ===========================================================================
00015B92 0000                       Obj66_Index:	dc.w Obj66_Main-Obj66_Index
00015B94 0000                       		dc.w Obj66_Action-Obj66_Index
00015B96 0000                       		dc.w Obj66_Display-Obj66_Index
00015B98 0000                       		dc.w Obj66_Release-Obj66_Index
00015B9A                            ; ===========================================================================
00015B9A                            
00015B9A                            Obj66_Main:				; XREF: Obj66_Index
00015B9A 5428 0024                  		addq.b	#2,$24(a0)
00015B9E 323C 0001                  		move.w	#1,d1
00015BA2 2248                       		movea.l	a0,a1
00015BA4 6000                       		bra.s	Obj66_MakeItem
00015BA6                            ; ===========================================================================
00015BA6                            
00015BA6                            Obj66_Loop:
00015BA6 6100 88D6                  		bsr.w	SingleObjLoad
00015BAA 6600                       		bne.s	loc_150FE
00015BAC 12BC 0066                  		move.b	#$66,0(a1)
00015BB0 5829 0024                  		addq.b	#4,$24(a1)
00015BB4 3368 0008 0008             		move.w	8(a0),8(a1)
00015BBA 3368 000C 000C             		move.w	$C(a0),$C(a1)
00015BC0 137C 0003 0018             		move.b	#3,$18(a1)
00015BC6 137C 0010 001A             		move.b	#$10,$1A(a1)
00015BCC                            
00015BCC                            Obj66_MakeItem:				; XREF: Obj66_Main
00015BCC 237C 0000 0000 0004        		move.l	#Map_obj66,4(a1)
00015BD4 337C 4348 0002             		move.w	#$4348,2(a1)
00015BDA 0029 0004 0001             		ori.b	#4,1(a1)
00015BE0 137C 0038 0019             		move.b	#$38,$19(a1)
00015BE6                            
00015BE6                            loc_150FE:
00015BE6 51C9 FFBE                  		dbf	d1,Obj66_Loop
00015BEA                            
00015BEA 117C 0030 0019             		move.b	#$30,$19(a0)
00015BF0 117C 0004 0018             		move.b	#4,$18(a0)
00015BF6 317C 003C 0030             		move.w	#$3C,$30(a0)
00015BFC 117C 0001 0034             		move.b	#1,$34(a0)
00015C02 1168 0028 0038             		move.b	$28(a0),$38(a0)
00015C08                            
00015C08                            Obj66_Action:				; XREF: Obj66_Index
00015C08 6100 0000                  		bsr.w	Obj66_ChkSwitch
00015C0C 4A28 0001                  		tst.b	1(a0)
00015C10 6A00 0000                  		bpl.w	Obj66_Display
00015C14 323C 0030                  		move.w	#$30,d1
00015C18 3401                       		move.w	d1,d2
00015C1A 3602                       		move.w	d2,d3
00015C1C 5243                       		addq.w	#1,d3
00015C1E 3828 0008                  		move.w	8(a0),d4
00015C22 6100 A7A4                  		bsr.w	SolidObject
00015C26 0828 0005 0022             		btst	#5,$22(a0)
00015C2C 6700 0000                  		beq.w	Obj66_Display
00015C30 43F8 D000                  		lea	($FFFFD000).w,a1
00015C34 720E                       		moveq	#$E,d1
00015C36 3029 0008                  		move.w	8(a1),d0
00015C3A B068 0008                  		cmp.w	8(a0),d0
00015C3E 6500                       		bcs.s	Obj66_GrabSonic
00015C40 7207                       		moveq	#7,d1
00015C42                            
00015C42                            Obj66_GrabSonic:
00015C42 B228 001A                  		cmp.b	$1A(a0),d1
00015C46 6600                       		bne.s	Obj66_Display
00015C48 1141 0032                  		move.b	d1,$32(a0)
00015C4C 5828 0024                  		addq.b	#4,$24(a0)
00015C50 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
00015C56 137C 0002 001C             		move.b	#2,$1C(a1)	; make Sonic use "rolling" animation
00015C5C 337C 0800 0014             		move.w	#$800,$14(a1)
00015C62 337C 0000 0010             		move.w	#0,$10(a1)
00015C68 337C 0000 0012             		move.w	#0,$12(a1)
00015C6E 08A8 0005 0022             		bclr	#5,$22(a0)
00015C74 08A9 0005 0022             		bclr	#5,$22(a1)
00015C7A 08E9 0001 0022             		bset	#1,$22(a1)
00015C80 3429 0008                  		move.w	8(a1),d2
00015C84 3629 000C                  		move.w	$C(a1),d3
00015C88 6100 0000                  		bsr.w	Obj66_ChgPos
00015C8C D569 0008                  		add.w	d2,8(a1)
00015C90 D769 000C                  		add.w	d3,$C(a1)
00015C94 E0E9 0008                  		asr	8(a1)
00015C98 E0E9 000C                  		asr	$C(a1)
00015C9C                            
00015C9C                            Obj66_Display:				; XREF: Obj66_Index
00015C9C 6000 A402                  		bra.w	MarkObjGone
00015CA0                            ; ===========================================================================
00015CA0                            
00015CA0                            Obj66_Release:				; XREF: Obj66_Index
00015CA0 1028 001A                  		move.b	$1A(a0),d0
00015CA4 0C00 0004                  		cmpi.b	#4,d0
00015CA8 6700                       		beq.s	loc_151C8
00015CAA 0C00 0007                  		cmpi.b	#7,d0
00015CAE 6600                       		bne.s	loc_151F8
00015CB0                            
00015CB0                            loc_151C8:
00015CB0 B028 0032                  		cmp.b	$32(a0),d0
00015CB4 6700                       		beq.s	loc_151F8
00015CB6 43F8 D000                  		lea	($FFFFD000).w,a1
00015CBA 337C 0000 0010             		move.w	#0,$10(a1)
00015CC0 337C 0800 0012             		move.w	#$800,$12(a1)
00015CC6 0C00 0004                  		cmpi.b	#4,d0
00015CCA 6700                       		beq.s	loc_151F0
00015CCC 337C 0800 0010             		move.w	#$800,$10(a1)
00015CD2 337C 0800 0012             		move.w	#$800,$12(a1)
00015CD8                            
00015CD8                            loc_151F0:
00015CD8 4238 F7C8                  		clr.b	($FFFFF7C8).w	; unlock controls
00015CDC 5928 0024                  		subq.b	#4,$24(a0)
00015CE0                            
00015CE0                            loc_151F8:
00015CE0 6100                       		bsr.s	Obj66_ChkSwitch
00015CE2 6100                       		bsr.s	Obj66_ChgPos
00015CE4 6000 A3BA                  		bra.w	MarkObjGone
00015CE8                            
00015CE8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015CE8                            
00015CE8                            
00015CE8                            Obj66_ChkSwitch:			; XREF: Obj66_Action
00015CE8 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00015CEC 7000                       		moveq	#0,d0
00015CEE 1028 0038                  		move.b	$38(a0),d0
00015CF2 0832 0000 0000             		btst	#0,(a2,d0.w)	; is switch pressed?
00015CF8 6700                       		beq.s	loc_15224	; if not, branch
00015CFA 4A28 0036                  		tst.b	$36(a0)		; has switch previously	been pressed?
00015CFE 6600                       		bne.s	Obj66_Animate	; if yes, branch
00015D00 4428 0034                  		neg.b	$34(a0)
00015D04 117C 0001 0036             		move.b	#1,$36(a0)	; set to "previously pressed"
00015D0A 6000                       		bra.s	Obj66_Animate
00015D0C                            ; ===========================================================================
00015D0C                            
00015D0C                            loc_15224:
00015D0C 4228 0036                  		clr.b	$36(a0)		; set to "not yet pressed"
00015D10                            
00015D10                            Obj66_Animate:
00015D10 5328 001E                  		subq.b	#1,$1E(a0)
00015D14 6A00                       		bpl.s	locret_15246
00015D16 117C 0007 001E             		move.b	#7,$1E(a0)
00015D1C 1228 0034                  		move.b	$34(a0),d1
00015D20 1028 001A                  		move.b	$1A(a0),d0
00015D24 D001                       		add.b	d1,d0
00015D26 0200 000F                  		andi.b	#$F,d0
00015D2A 1140 001A                  		move.b	d0,$1A(a0)
00015D2E                            
00015D2E                            locret_15246:
00015D2E 4E75                       		rts	
00015D30                            ; End of function Obj66_ChkSwitch
00015D30                            
00015D30                            
00015D30                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015D30                            
00015D30                            
00015D30                            Obj66_ChgPos:				; XREF: Obj66_GrabSonic
00015D30 43F8 D000                  		lea	($FFFFD000).w,a1
00015D34 7000                       		moveq	#0,d0
00015D36 1028 001A                  		move.b	$1A(a0),d0
00015D3A D040                       		add.w	d0,d0
00015D3C 45FB 0000                  		lea	Obj66_PosData(pc,d0.w),a2
00015D40 101A                       		move.b	(a2)+,d0
00015D42 4880                       		ext.w	d0
00015D44 D068 0008                  		add.w	8(a0),d0
00015D48 3340 0008                  		move.w	d0,8(a1)
00015D4C 101A                       		move.b	(a2)+,d0
00015D4E 4880                       		ext.w	d0
00015D50 D068 000C                  		add.w	$C(a0),d0
00015D54 3340 000C                  		move.w	d0,$C(a1)
00015D58 4E75                       		rts	
00015D5A                            ; End of function Obj66_ChgPos
00015D5A                            
00015D5A                            ; ===========================================================================
00015D5A E000 E20E                  Obj66_PosData:	dc.b  $E0,   0,	$E2,  $E ; disc	x-pos, Sonic x-pos, disc y-pos,	Sonic y-pos
00015D5E E818 F21E                  		dc.b  $E8, $18,	$F2, $1E
00015D62 0020 0E1E                  		dc.b	0, $20,	 $E, $1E
00015D66 1818 1E0E                  		dc.b  $18, $18,	$1E,  $E
00015D6A 2000 1EF2                  		dc.b  $20,   0,	$1E, $F2
00015D6E 18E8 0EE2                  		dc.b  $18, $E8,	 $E, $E2
00015D72 00E0 F2E2                  		dc.b	0, $E0,	$F2, $E2
00015D76 E8E8 E2F2                  		dc.b  $E8, $E8,	$E2, $F2
00015D7A                            ; ---------------------------------------------------------------------------
00015D7A                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
00015D7A                            ; ---------------------------------------------------------------------------
00015D7A                            Map_obj66:
00015D7A                            	include "_maps\obj66.asm"
00015D7A                            ; ---------------------------------------------------------------------------
00015D7A                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
00015D7A                            ; ---------------------------------------------------------------------------
00015D7A 0000 0000                  		dc.w byte_152B4-Map_obj66, byte_152D3-Map_obj66
00015D7E 0000 0000                  		dc.w byte_152F2-Map_obj66, byte_15311-Map_obj66
00015D82 0000 0000                  		dc.w byte_15330-Map_obj66, byte_1534F-Map_obj66
00015D86 0000 0000                  		dc.w byte_1536E-Map_obj66, byte_1538D-Map_obj66
00015D8A 0000 0000                  		dc.w byte_153AC-Map_obj66, byte_153CB-Map_obj66
00015D8E 0000 0000                  		dc.w byte_153EA-Map_obj66, byte_15409-Map_obj66
00015D92 0000 0000                  		dc.w byte_15428-Map_obj66, byte_15447-Map_obj66
00015D96 0000 0000                  		dc.w byte_15466-Map_obj66, byte_15485-Map_obj66
00015D9A 0000                       		dc.w byte_154A4-Map_obj66
00015D9C 06                         byte_152B4:	dc.b 6
00015D9D E805 0022 D0               		dc.b $E8, 5, 0,	$22, $D0
00015DA2 0805 1022 D0               		dc.b 8,	5, $10,	$22, $D0
00015DA7 E80A 0000 C8               		dc.b $E8, $A, 0, 0, $C8
00015DAC E80A 0800 E0               		dc.b $E8, $A, 8, 0, $E0
00015DB1 000A 1000 C8               		dc.b 0,	$A, $10, 0, $C8
00015DB6 000A 1800 E0               		dc.b 0,	$A, $18, 0, $E0
00015DBB 06                         byte_152D3:	dc.b 6
00015DBC F803 0026 D0               		dc.b $F8, 3, 0,	$26, $D0
00015DC1 1805 002A D8               		dc.b $18, 5, 0,	$2A, $D8
00015DC6 F60A 0000 CA               		dc.b $F6, $A, 0, 0, $CA
00015DCB F60A 0800 E2               		dc.b $F6, $A, 8, 0, $E2
00015DD0 0E0A 1000 CA               		dc.b $E, $A, $10, 0, $CA
00015DD5 0E0A 1800 E2               		dc.b $E, $A, $18, 0, $E2
00015DDA 06                         byte_152F2:	dc.b 6
00015DDB 0006 002E D0               		dc.b 0,	6, 0, $2E, $D0
00015DE0 2009 0034 E8               		dc.b $20, 9, 0,	$34, $E8
00015DE5 000A 0000 D0               		dc.b 0,	$A, 0, 0, $D0
00015DEA 000A 0800 E8               		dc.b 0,	$A, 8, 0, $E8
00015DEF 180A 1000 D0               		dc.b $18, $A, $10, 0, $D0
00015DF4 180A 1800 E8               		dc.b $18, $A, $18, 0, $E8
00015DF9 06                         byte_15311:	dc.b 6
00015DFA 0807 003A D8               		dc.b 8,	7, 0, $3A, $D8
00015DFF 2808 0042 F0               		dc.b $28, 8, 0,	$42, $F0
00015E04 060A 0000 DA               		dc.b 6,	$A, 0, 0, $DA
00015E09 060A 0800 F2               		dc.b 6,	$A, 8, 0, $F2
00015E0E 1E0A 1000 DA               		dc.b $1E, $A, $10, 0, $DA
00015E13 1E0A 1800 F2               		dc.b $1E, $A, $18, 0, $F2
00015E18 06                         byte_15330:	dc.b 6
00015E19 2005 0045 E8               		dc.b $20, 5, 0,	$45, $E8
00015E1E 2005 0845 08               		dc.b $20, 5, 8,	$45, 8
00015E23 080A 0000 E8               		dc.b 8,	$A, 0, 0, $E8
00015E28 080A 0800 00               		dc.b 8,	$A, 8, 0, 0
00015E2D 200A 1000 E8               		dc.b $20, $A, $10, 0, $E8
00015E32 200A 1800 00               		dc.b $20, $A, $18, 0, 0
00015E37 06                         byte_1534F:	dc.b 6
00015E38 2808 0842 F8               		dc.b $28, 8, 8,	$42, $F8
00015E3D 0807 083A 18               		dc.b 8,	7, 8, $3A, $18
00015E42 060A 0000 F6               		dc.b 6,	$A, 0, 0, $F6
00015E47 060A 0800 0E               		dc.b 6,	$A, 8, 0, $E
00015E4C 1E0A 1000 F6               		dc.b $1E, $A, $10, 0, $F6
00015E51 1E0A 1800 0E               		dc.b $1E, $A, $18, 0, $E
00015E56 06                         byte_1536E:	dc.b 6
00015E57 2009 0834 00               		dc.b $20, 9, 8,	$34, 0
00015E5C 0006 082E 20               		dc.b 0,	6, 8, $2E, $20
00015E61 000A 0000 00               		dc.b 0,	$A, 0, 0, 0
00015E66 000A 0800 18               		dc.b 0,	$A, 8, 0, $18
00015E6B 180A 1000 00               		dc.b $18, $A, $10, 0, 0
00015E70 180A 1800 18               		dc.b $18, $A, $18, 0, $18
00015E75 06                         byte_1538D:	dc.b 6
00015E76 1805 082A 18               		dc.b $18, 5, 8,	$2A, $18
00015E7B F803 0826 28               		dc.b $F8, 3, 8,	$26, $28
00015E80 F60A 0000 06               		dc.b $F6, $A, 0, 0, 6
00015E85 F60A 0800 1E               		dc.b $F6, $A, 8, 0, $1E
00015E8A 0E0A 1000 06               		dc.b $E, $A, $10, 0, 6
00015E8F 0E0A 1800 1E               		dc.b $E, $A, $18, 0, $1E
00015E94 06                         byte_153AC:	dc.b 6
00015E95 E805 0822 20               		dc.b $E8, 5, 8,	$22, $20
00015E9A 0805 1822 20               		dc.b 8,	5, $18,	$22, $20
00015E9F E80A 0000 08               		dc.b $E8, $A, 0, 0, 8
00015EA4 E80A 0800 20               		dc.b $E8, $A, 8, 0, $20
00015EA9 000A 1000 08               		dc.b 0,	$A, $10, 0, 8
00015EAE 000A 1800 20               		dc.b 0,	$A, $18, 0, $20
00015EB3 06                         byte_153CB:	dc.b 6
00015EB4 D805 182A 18               		dc.b $D8, 5, $18, $2A, $18
00015EB9 E803 1826 28               		dc.b $E8, 3, $18, $26, $28
00015EBE DA0A 0000 06               		dc.b $DA, $A, 0, 0, 6
00015EC3 DA0A 0800 1E               		dc.b $DA, $A, 8, 0, $1E
00015EC8 F20A 1000 06               		dc.b $F2, $A, $10, 0, 6
00015ECD F20A 1800 1E               		dc.b $F2, $A, $18, 0, $1E
00015ED2 06                         byte_153EA:	dc.b 6
00015ED3 D009 1834 00               		dc.b $D0, 9, $18, $34, 0
00015ED8 E806 182E 20               		dc.b $E8, 6, $18, $2E, $20
00015EDD D00A 0000 00               		dc.b $D0, $A, 0, 0, 0
00015EE2 D00A 0800 18               		dc.b $D0, $A, 8, 0, $18
00015EE7 E80A 1000 00               		dc.b $E8, $A, $10, 0, 0
00015EEC E80A 1800 18               		dc.b $E8, $A, $18, 0, $18
00015EF1 06                         byte_15409:	dc.b 6
00015EF2 D008 1842 F8               		dc.b $D0, 8, $18, $42, $F8
00015EF7 D807 183A 18               		dc.b $D8, 7, $18, $3A, $18
00015EFC CA0A 0000 F6               		dc.b $CA, $A, 0, 0, $F6
00015F01 CA0A 0800 0E               		dc.b $CA, $A, 8, 0, $E
00015F06 E20A 1000 F6               		dc.b $E2, $A, $10, 0, $F6
00015F0B E20A 1800 0E               		dc.b $E2, $A, $18, 0, $E
00015F10 06                         byte_15428:	dc.b 6
00015F11 D005 1045 E8               		dc.b $D0, 5, $10, $45, $E8
00015F16 D005 1845 08               		dc.b $D0, 5, $18, $45, 8
00015F1B C80A 0000 E8               		dc.b $C8, $A, 0, 0, $E8
00015F20 C80A 0800 00               		dc.b $C8, $A, 8, 0, 0
00015F25 E00A 1000 E8               		dc.b $E0, $A, $10, 0, $E8
00015F2A E00A 1800 00               		dc.b $E0, $A, $18, 0, 0
00015F2F 06                         byte_15447:	dc.b 6
00015F30 D807 103A D8               		dc.b $D8, 7, $10, $3A, $D8
00015F35 D008 1042 F0               		dc.b $D0, 8, $10, $42, $F0
00015F3A CA0A 0000 DA               		dc.b $CA, $A, 0, 0, $DA
00015F3F CA0A 0800 F2               		dc.b $CA, $A, 8, 0, $F2
00015F44 E20A 1000 DA               		dc.b $E2, $A, $10, 0, $DA
00015F49 E20A 1800 F2               		dc.b $E2, $A, $18, 0, $F2
00015F4E 06                         byte_15466:	dc.b 6
00015F4F E806 102E D0               		dc.b $E8, 6, $10, $2E, $D0
00015F54 D009 1034 E8               		dc.b $D0, 9, $10, $34, $E8
00015F59 D00A 0000 D0               		dc.b $D0, $A, 0, 0, $D0
00015F5E D00A 0800 E8               		dc.b $D0, $A, 8, 0, $E8
00015F63 E80A 1000 D0               		dc.b $E8, $A, $10, 0, $D0
00015F68 E80A 1800 E8               		dc.b $E8, $A, $18, 0, $E8
00015F6D 06                         byte_15485:	dc.b 6
00015F6E E803 1026 D0               		dc.b $E8, 3, $10, $26, $D0
00015F73 D805 102A D8               		dc.b $D8, 5, $10, $2A, $D8
00015F78 DA0A 0000 CA               		dc.b $DA, $A, 0, 0, $CA
00015F7D DA0A 0800 E2               		dc.b $DA, $A, 8, 0, $E2
00015F82 F20A 1000 CA               		dc.b $F2, $A, $10, 0, $CA
00015F87 F20A 1800 E2               		dc.b $F2, $A, $18, 0, $E2
00015F8C 0C                         byte_154A4:	dc.b $C
00015F8D C80D 0009 E0               		dc.b $C8, $D, 0, 9, $E0
00015F92 D00A 0011 D0               		dc.b $D0, $A, 0, $11, $D0
00015F97 E007 001A C8               		dc.b $E0, 7, 0,	$1A, $C8
00015F9C C80D 0809 00               		dc.b $C8, $D, 8, 9, 0
00015FA1 D00A 0811 18               		dc.b $D0, $A, 8, $11, $18
00015FA6 E007 081A 28               		dc.b $E0, 7, 8,	$1A, $28
00015FAB 0007 101A C8               		dc.b 0,	7, $10,	$1A, $C8
00015FB0 180A 1011 D0               		dc.b $18, $A, $10, $11,	$D0
00015FB5 280D 1009 E0               		dc.b $28, $D, $10, 9, $E0
00015FBA 280D 1809 00               		dc.b $28, $D, $18, 9, 0
00015FBF 180A 1811 18               		dc.b $18, $A, $18, $11,	$18
00015FC4 0007 181A 28               		dc.b 0,	7, $18,	$1A, $28
00015FCA 00                         		even
00015FCA 00                         		even
00015FCA                            
00015FCA                            ; ===========================================================================
00015FCA                            ; ---------------------------------------------------------------------------
00015FCA                            ; Object 67 - disc that	you run	around (SBZ)
00015FCA                            ; ---------------------------------------------------------------------------
00015FCA                            
00015FCA                            Obj67:					; XREF: Obj_Index
00015FCA 7000                       		moveq	#0,d0
00015FCC 1028 0024                  		move.b	$24(a0),d0
00015FD0 323B 0000                  		move.w	Obj67_Index(pc,d0.w),d1
00015FD4 4EFB 1000                  		jmp	Obj67_Index(pc,d1.w)
00015FD8                            ; ===========================================================================
00015FD8 0000                       Obj67_Index:	dc.w Obj67_Main-Obj67_Index
00015FDA 0000                       		dc.w Obj67_Action-Obj67_Index
00015FDC                            ; ===========================================================================
00015FDC                            
00015FDC                            Obj67_Main:				; XREF: Obj67_Index
00015FDC 5428 0024                  		addq.b	#2,$24(a0)
00015FE0 217C 0000 0000 0004        		move.l	#Map_obj67,4(a0)
00015FE8 317C C344 0002             		move.w	#$C344,2(a0)
00015FEE 117C 0004 0001             		move.b	#4,1(a0)
00015FF4 117C 0004 0018             		move.b	#4,$18(a0)
00015FFA 117C 0008 0019             		move.b	#8,$19(a0)
00016000 3168 0008 0032             		move.w	8(a0),$32(a0)
00016006 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001600C 117C 0018 0034             		move.b	#$18,$34(a0)
00016012 117C 0048 0038             		move.b	#$48,$38(a0)
00016018 1228 0028                  		move.b	$28(a0),d1	; get object type
0001601C 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
00016020 6700                       		beq.s	loc_15546
00016022 117C 0010 0034             		move.b	#$10,$34(a0)
00016028 117C 0038 0038             		move.b	#$38,$38(a0)
0001602E                            
0001602E                            loc_15546:
0001602E 1228 0028                  		move.b	$28(a0),d1	; get object type
00016032 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00016036 4881                       		ext.w	d1
00016038 E741                       		asl.w	#3,d1
0001603A 3141 0036                  		move.w	d1,$36(a0)
0001603E 1028 0022                  		move.b	$22(a0),d0
00016042 E418                       		ror.b	#2,d0
00016044 0200 00C0                  		andi.b	#-$40,d0
00016048 1140 0026                  		move.b	d0,$26(a0)
0001604C                            
0001604C                            Obj67_Action:				; XREF: Obj67_Index
0001604C 6100 0000                  		bsr.w	Obj67_MoveSonic
00016050 6100 0000                  		bsr.w	Obj67_MoveSpot
00016054 6000 0000                  		bra.w	Obj67_ChkDel
00016058                            ; ===========================================================================
00016058                            
00016058                            Obj67_MoveSonic:			; XREF: Obj67_Action
00016058 7400                       		moveq	#0,d2
0001605A 1428 0038                  		move.b	$38(a0),d2
0001605E 3602                       		move.w	d2,d3
00016060 D643                       		add.w	d3,d3
00016062 43F8 D000                  		lea	($FFFFD000).w,a1
00016066 3029 0008                  		move.w	8(a1),d0
0001606A 9068 0032                  		sub.w	$32(a0),d0
0001606E D042                       		add.w	d2,d0
00016070 B043                       		cmp.w	d3,d0
00016072 6400                       		bcc.s	loc_155A8
00016074 3229 000C                  		move.w	$C(a1),d1
00016078 9268 0030                  		sub.w	$30(a0),d1
0001607C D242                       		add.w	d2,d1
0001607E B243                       		cmp.w	d3,d1
00016080 6400                       		bcc.s	loc_155A8
00016082 0829 0001 0022             		btst	#1,$22(a1)
00016088 6700                       		beq.s	loc_155B8
0001608A 4228 003A                  		clr.b	$3A(a0)
0001608E 4E75                       		rts	
00016090                            ; ===========================================================================
00016090                            
00016090                            loc_155A8:
00016090 4A28 003A                  		tst.b	$3A(a0)
00016094 6700                       		beq.s	locret_155B6
00016096 4229 0038                  		clr.b	$38(a1)
0001609A 4228 003A                  		clr.b	$3A(a0)
0001609E                            
0001609E                            locret_155B6:
0001609E 4E75                       		rts	
000160A0                            ; ===========================================================================
000160A0                            
000160A0                            loc_155B8:
000160A0 4A28 003A                  		tst.b	$3A(a0)
000160A4 6600                       		bne.s	loc_155E2
000160A6 117C 0001 003A             		move.b	#1,$3A(a0)
000160AC 0829 0002 0022             		btst	#2,$22(a1)
000160B2 6600                       		bne.s	loc_155D0
000160B4 4229 001C                  		clr.b	$1C(a1)
000160B8                            
000160B8                            loc_155D0:
000160B8 08A9 0005 0022             		bclr	#5,$22(a1)
000160BE 137C 0001 001D             		move.b	#1,$1D(a1)
000160C4 137C 0001 0038             		move.b	#1,$38(a1)
000160CA                            
000160CA                            loc_155E2:
000160CA 3029 0014                  		move.w	$14(a1),d0
000160CE 4A68 0036                  		tst.w	$36(a0)
000160D2 6A00                       		bpl.s	loc_15608
000160D4 0C40 FC00                  		cmpi.w	#-$400,d0
000160D8 6F00                       		ble.s	loc_155FA
000160DA 337C FC00 0014             		move.w	#-$400,$14(a1)
000160E0 4E75                       		rts	
000160E2                            ; ===========================================================================
000160E2                            
000160E2                            loc_155FA:
000160E2 0C40 F100                  		cmpi.w	#-$F00,d0
000160E6 6C00                       		bge.s	locret_15606
000160E8 337C F100 0014             		move.w	#-$F00,$14(a1)
000160EE                            
000160EE                            locret_15606:
000160EE 4E75                       		rts	
000160F0                            ; ===========================================================================
000160F0                            
000160F0                            loc_15608:
000160F0 0C40 0400                  		cmpi.w	#$400,d0
000160F4 6C00                       		bge.s	loc_15616
000160F6 337C 0400 0014             		move.w	#$400,$14(a1)
000160FC 4E75                       		rts	
000160FE                            ; ===========================================================================
000160FE                            
000160FE                            loc_15616:
000160FE 0C40 0F00                  		cmpi.w	#$F00,d0
00016102 6F00                       		ble.s	locret_15622
00016104 337C 0F00 0014             		move.w	#$F00,$14(a1)
0001610A                            
0001610A                            locret_15622:
0001610A 4E75                       		rts	
0001610C                            ; ===========================================================================
0001610C                            
0001610C                            Obj67_MoveSpot:				; XREF: Obj67_Action
0001610C 3028 0036                  		move.w	$36(a0),d0
00016110 D168 0026                  		add.w	d0,$26(a0)
00016114 1028 0026                  		move.b	$26(a0),d0
00016118 4EB9 0000 2D6C             		jsr	(CalcSine).l
0001611E 3428 0030                  		move.w	$30(a0),d2
00016122 3628 0032                  		move.w	$32(a0),d3
00016126 7800                       		moveq	#0,d4
00016128 1828 0034                  		move.b	$34(a0),d4
0001612C E14C                       		lsl.w	#8,d4
0001612E 2A04                       		move.l	d4,d5
00016130 C9C0                       		muls.w	d0,d4
00016132 4844                       		swap	d4
00016134 CBC1                       		muls.w	d1,d5
00016136 4845                       		swap	d5
00016138 D842                       		add.w	d2,d4
0001613A DA43                       		add.w	d3,d5
0001613C 3144 000C                  		move.w	d4,$C(a0)
00016140 3145 0008                  		move.w	d5,8(a0)
00016144 4E75                       		rts	
00016146                            ; ===========================================================================
00016146                            
00016146                            Obj67_ChkDel:				; XREF: Obj67_Action
00016146 3028 0032                  		move.w	$32(a0),d0
0001614A 0240 FF80                  		andi.w	#-$80,d0
0001614E 3238 F700                  		move.w	($FFFFF700).w,d1
00016152 0441 0080                  		subi.w	#$80,d1
00016156 0241 FF80                  		andi.w	#-$80,d1
0001615A 9041                       		sub.w	d1,d0
0001615C 0C40 0280                  		cmpi.w	#$280,d0
00016160 6200                       		bhi.s	Obj67_Delete
00016162 4EF9 0000 DFF8             		jmp	DisplaySprite
00016168                            ; ===========================================================================
00016168                            
00016168                            Obj67_Delete:
00016168 4EF9 0000 E034             		jmp	DeleteObject
0001616E                            ; ===========================================================================
0001616E                            ; ---------------------------------------------------------------------------
0001616E                            ; Sprite mappings - disc that you run around (SBZ)
0001616E                            ; (It's just a small blob that moves around in a circle. The disc itself is
0001616E                            ; part of the level tiles.)
0001616E                            ; ---------------------------------------------------------------------------
0001616E                            Map_obj67:
0001616E                            	include "_maps\obj67.asm"
0001616E                            ; ---------------------------------------------------------------------------
0001616E                            ; Sprite mappings - disc that you run around (SBZ)
0001616E                            ; (It's just a small blob that moves around in a circle. The disc itself is
0001616E                            ; part of the level tiles.)
0001616E                            ; ---------------------------------------------------------------------------
0001616E 0000                       		dc.w byte_15688-Map_obj67
00016170 01                         byte_15688:	dc.b 1
00016171 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00016176                            		even
00016176                            		even
00016176                            
00016176                            ; ===========================================================================
00016176                            ; ---------------------------------------------------------------------------
00016176                            ; Object 68 - conveyor belts (SBZ)
00016176                            ; ---------------------------------------------------------------------------
00016176                            
00016176                            Obj68:					; XREF: Obj_Index
00016176 7000                       		moveq	#0,d0
00016178 1028 0024                  		move.b	$24(a0),d0
0001617C 323B 0000                  		move.w	Obj68_Index(pc,d0.w),d1
00016180 4EFB 1000                  		jmp	Obj68_Index(pc,d1.w)
00016184                            ; ===========================================================================
00016184 0000                       Obj68_Index:	dc.w Obj68_Main-Obj68_Index
00016186 0000                       		dc.w Obj68_Action-Obj68_Index
00016188                            ; ===========================================================================
00016188                            
00016188                            Obj68_Main:				; XREF: Obj68_Index
00016188 5428 0024                  		addq.b	#2,$24(a0)
0001618C 117C 0080 0038             		move.b	#128,$38(a0)	; set width to 128 pixels
00016192 1228 0028                  		move.b	$28(a0),d1	; get object type
00016196 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
0001619A 6700                       		beq.s	loc_156BA	; if zero, branch
0001619C 117C 0038 0038             		move.b	#56,$38(a0)	; set width to 56 pixels
000161A2                            
000161A2                            loc_156BA:
000161A2 1228 0028                  		move.b	$28(a0),d1	; get object type
000161A6 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
000161AA 4881                       		ext.w	d1
000161AC E841                       		asr.w	#4,d1
000161AE 3141 0036                  		move.w	d1,$36(a0)	; set belt speed
000161B2                            
000161B2                            Obj68_Action:				; XREF: Obj68_Index
000161B2 6100                       		bsr.s	Obj68_MoveSonic
000161B4 3028 0008                  		move.w	8(a0),d0
000161B8 0240 FF80                  		andi.w	#$FF80,d0
000161BC 3238 F700                  		move.w	($FFFFF700).w,d1
000161C0 0441 0080                  		subi.w	#$80,d1
000161C4 0241 FF80                  		andi.w	#$FF80,d1
000161C8 9041                       		sub.w	d1,d0
000161CA 0C40 0280                  		cmpi.w	#$280,d0
000161CE 6200                       		bhi.s	Obj68_Delete
000161D0 4E75                       		rts	
000161D2                            ; ===========================================================================
000161D2                            
000161D2                            Obj68_Delete:
000161D2 4EF9 0000 E034             		jmp	DeleteObject
000161D8                            ; ===========================================================================
000161D8                            
000161D8                            Obj68_MoveSonic:			; XREF: Obj68_Action
000161D8 7400                       		moveq	#0,d2
000161DA 1428 0038                  		move.b	$38(a0),d2
000161DE 3602                       		move.w	d2,d3
000161E0 D643                       		add.w	d3,d3
000161E2 43F8 D000                  		lea	($FFFFD000).w,a1
000161E6 3029 0008                  		move.w	8(a1),d0
000161EA 9068 0008                  		sub.w	8(a0),d0
000161EE D042                       		add.w	d2,d0
000161F0 B043                       		cmp.w	d3,d0
000161F2 6400                       		bcc.s	locret_1572E
000161F4 3229 000C                  		move.w	$C(a1),d1
000161F8 9268 000C                  		sub.w	$C(a0),d1
000161FC 0641 0030                  		addi.w	#$30,d1
00016200 0C41 0030                  		cmpi.w	#$30,d1
00016204 6400                       		bcc.s	locret_1572E
00016206 0829 0001 0022             		btst	#1,$22(a1)
0001620C 6600                       		bne.s	locret_1572E
0001620E 3028 0036                  		move.w	$36(a0),d0
00016212 D169 0008                  		add.w	d0,8(a1)
00016216                            
00016216                            locret_1572E:
00016216 4E75                       		rts	
00016218                            
00016218                            ; ===========================================================================
00016218                            ; ---------------------------------------------------------------------------
00016218                            ; Object 69 - spinning platforms and trapdoors (SBZ)
00016218                            ; ---------------------------------------------------------------------------
00016218                            
00016218                            Obj69:					; XREF: Obj_Index
00016218 7000                       		moveq	#0,d0
0001621A 1028 0024                  		move.b	$24(a0),d0
0001621E 323B 0000                  		move.w	Obj69_Index(pc,d0.w),d1
00016222 4EFB 1000                  		jmp	Obj69_Index(pc,d1.w)
00016226                            ; ===========================================================================
00016226 0000                       Obj69_Index:	dc.w Obj69_Main-Obj69_Index
00016228 0000                       		dc.w Obj69_Trapdoor-Obj69_Index
0001622A 0000                       		dc.w Obj69_Spinner-Obj69_Index
0001622C                            ; ===========================================================================
0001622C                            
0001622C                            Obj69_Main:				; XREF: Obj69_Index
0001622C 5428 0024                  		addq.b	#2,$24(a0)
00016230 217C 0000 0000 0004        		move.l	#Map_obj69,4(a0)
00016238 317C 4492 0002             		move.w	#$4492,2(a0)
0001623E 0028 0004 0001             		ori.b	#4,1(a0)
00016244 117C 0080 0019             		move.b	#$80,$19(a0)
0001624A 7000                       		moveq	#0,d0
0001624C 1028 0028                  		move.b	$28(a0),d0
00016250 0240 000F                  		andi.w	#$F,d0
00016254 C0FC 003C                  		mulu.w	#$3C,d0
00016258 3140 0032                  		move.w	d0,$32(a0)
0001625C 4A28 0028                  		tst.b	$28(a0)
00016260 6A00                       		bpl.s	Obj69_Trapdoor
00016262 5428 0024                  		addq.b	#2,$24(a0)
00016266 217C 0000 0000 0004        		move.l	#Map_obj69a,4(a0)
0001626E 317C 04DF 0002             		move.w	#$4DF,2(a0)
00016274 117C 0010 0019             		move.b	#$10,$19(a0)
0001627A 117C 0002 001C             		move.b	#2,$1C(a0)
00016280 7000                       		moveq	#0,d0
00016282 1028 0028                  		move.b	$28(a0),d0	; get object type
00016286 3200                       		move.w	d0,d1
00016288 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
0001628C C0FC 0006                  		mulu.w	#6,d0		; multiply by 6
00016290 3140 0030                  		move.w	d0,$30(a0)	; set time delay
00016294 3140 0032                  		move.w	d0,$32(a0)
00016298 0241 0070                  		andi.w	#$70,d1
0001629C 0641 0010                  		addi.w	#$10,d1
000162A0 E549                       		lsl.w	#2,d1
000162A2 5341                       		subq.w	#1,d1
000162A4 3141 0036                  		move.w	d1,$36(a0)
000162A8 6000                       		bra.s	Obj69_Spinner
000162AA                            ; ===========================================================================
000162AA                            
000162AA                            Obj69_Trapdoor:				; XREF: Obj69_Index
000162AA 5368 0030                  		subq.w	#1,$30(a0)
000162AE 6A00                       		bpl.s	Obj69_Animate
000162B0 3168 0032 0030             		move.w	$32(a0),$30(a0)
000162B6 0868 0000 001C             		bchg	#0,$1C(a0)
000162BC 4A28 0001                  		tst.b	1(a0)
000162C0 6A00                       		bpl.s	Obj69_Animate
000162C2 303C 00BB                  		move.w	#$BB,d0
000162C6 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play door sound
000162CC                            
000162CC                            Obj69_Animate:
000162CC 43F9 0000 0000             		lea	(Ani_obj69).l,a1
000162D2 4EB9 0000 B056             		jsr	AnimateSprite
000162D8 4A28 001A                  		tst.b	$1A(a0)		; is frame number 0 displayed?
000162DC 6600                       		bne.s	Obj69_NotSolid	; if not, branch
000162DE 323C 004B                  		move.w	#$4B,d1
000162E2 343C 000C                  		move.w	#$C,d2
000162E6 3602                       		move.w	d2,d3
000162E8 5243                       		addq.w	#1,d3
000162EA 3828 0008                  		move.w	8(a0),d4
000162EE 6100 A0D8                  		bsr.w	SolidObject
000162F2 6000 9DAC                  		bra.w	MarkObjGone
000162F6                            ; ===========================================================================
000162F6                            
000162F6                            Obj69_NotSolid:
000162F6 0828 0003 0022             		btst	#3,$22(a0)
000162FC 6700                       		beq.s	Obj69_Display
000162FE 43F8 D000                  		lea	($FFFFD000).w,a1
00016302 08A9 0003 0022             		bclr	#3,$22(a1)
00016308 08A8 0003 0022             		bclr	#3,$22(a0)
0001630E 4228 0025                  		clr.b	$25(a0)
00016312                            
00016312                            Obj69_Display:
00016312 6000 9D8C                  		bra.w	MarkObjGone
00016316                            ; ===========================================================================
00016316                            
00016316                            Obj69_Spinner:				; XREF: Obj69_Index
00016316 3038 FE04                  		move.w	($FFFFFE04).w,d0
0001631A C068 0036                  		and.w	$36(a0),d0
0001631E 6600                       		bne.s	Obj69_Delay
00016320 117C 0001 0034             		move.b	#1,$34(a0)
00016326                            
00016326                            Obj69_Delay:
00016326 4A28 0034                  		tst.b	$34(a0)
0001632A 6700                       		beq.s	Obj69_Animate2
0001632C 5368 0030                  		subq.w	#1,$30(a0)
00016330 6A00                       		bpl.s	Obj69_Animate2
00016332 3168 0032 0030             		move.w	$32(a0),$30(a0)
00016338 4228 0034                  		clr.b	$34(a0)
0001633C 0868 0000 001C             		bchg	#0,$1C(a0)
00016342                            
00016342                            Obj69_Animate2:
00016342 43F9 0000 0000             		lea	(Ani_obj69).l,a1
00016348 4EB9 0000 B056             		jsr	AnimateSprite
0001634E 4A28 001A                  		tst.b	$1A(a0)		; check	if frame number	0 is displayed
00016352 6600                       		bne.s	Obj69_NotSolid2	; if not, branch
00016354 323C 001B                  		move.w	#$1B,d1
00016358 343C 0007                  		move.w	#7,d2
0001635C 3602                       		move.w	d2,d3
0001635E 5243                       		addq.w	#1,d3
00016360 3828 0008                  		move.w	8(a0),d4
00016364 6100 A062                  		bsr.w	SolidObject
00016368 6000 9D36                  		bra.w	MarkObjGone
0001636C                            ; ===========================================================================
0001636C                            
0001636C                            Obj69_NotSolid2:
0001636C 0828 0003 0022             		btst	#3,$22(a0)
00016372 6700                       		beq.s	Obj69_Display2
00016374 43F8 D000                  		lea	($FFFFD000).w,a1
00016378 08A9 0003 0022             		bclr	#3,$22(a1)
0001637E 08A8 0003 0022             		bclr	#3,$22(a0)
00016384 4228 0025                  		clr.b	$25(a0)
00016388                            
00016388                            Obj69_Display2:
00016388 6000 9D16                  		bra.w	MarkObjGone
0001638C                            ; ===========================================================================
0001638C                            Ani_obj69:
0001638C                            	include "_anim\obj69.asm"
0001638C                            ; ---------------------------------------------------------------------------
0001638C                            ; Animation script - trapdoor (SBZ)
0001638C                            ; ---------------------------------------------------------------------------
0001638C 0000                       		dc.w byte_158AC-Ani_obj69
0001638E 0000                       		dc.w byte_158B2-Ani_obj69
00016390 0000                       		dc.w byte_158B8-Ani_obj69
00016392 0000                       		dc.w byte_158CC-Ani_obj69
00016394 0300 0102 FE01             byte_158AC:	dc.b 3,	0, 1, 2, $FE, 1
0001639A 0302 0100 FE01             byte_158B2:	dc.b 3,	2, 1, 0, $FE, 1
000163A0 0100 0102 0304 4342 4140+  byte_158B8:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
000163AD 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
000163B4 0100 0102 0304 4342 4140+  byte_158CC:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
000163C1 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
000163C8                            		even
000163C8                            		even
000163C8                            
000163C8                            ; ---------------------------------------------------------------------------
000163C8                            ; Sprite mappings - trapdoor (SBZ)
000163C8                            ; ---------------------------------------------------------------------------
000163C8                            Map_obj69:
000163C8                            	include "_maps\obj69.asm"
000163C8                            ; ---------------------------------------------------------------------------
000163C8                            ; Sprite mappings - trapdoor (SBZ)
000163C8                            ; ---------------------------------------------------------------------------
000163C8 0000                       		dc.w byte_158E6-Map_obj69
000163CA 0000                       		dc.w byte_158FB-Map_obj69
000163CC 0000                       		dc.w byte_15924-Map_obj69
000163CE 04                         byte_158E6:	dc.b 4
000163CF F40E 0000 C0               		dc.b $F4, $E, 0, 0, $C0
000163D4 F40E 0800 E0               		dc.b $F4, $E, 8, 0, $E0
000163D9 F40E 0000 00               		dc.b $F4, $E, 0, 0, 0
000163DE F40E 0800 20               		dc.b $F4, $E, 8, 0, $20
000163E3 08                         byte_158FB:	dc.b 8
000163E4 F20F 000C B6               		dc.b $F2, $F, 0, $C, $B6
000163E9 1A0F 180C D6               		dc.b $1A, $F, $18, $C, $D6
000163EE 020A 001C D6               		dc.b 2,	$A, 0, $1C, $D6
000163F3 120A 181C BE               		dc.b $12, $A, $18, $1C,	$BE
000163F8 F20F 080C 2A               		dc.b $F2, $F, 8, $C, $2A
000163FD 1A0F 100C 0A               		dc.b $1A, $F, $10, $C, $A
00016402 020A 081C 12               		dc.b 2,	$A, 8, $1C, $12
00016407 120A 101C 2A               		dc.b $12, $A, $10, $1C,	$2A
0001640C 04                         byte_15924:	dc.b 4
0001640D 000B 0025 B4               		dc.b 0,	$B, 0, $25, $B4
00016412 200B 1025 B4               		dc.b $20, $B, $10, $25,	$B4
00016417 000B 0025 34               		dc.b 0,	$B, 0, $25, $34
0001641C 200B 1025 34               		dc.b $20, $B, $10, $25,	$34
00016422 00                         		even
00016422 00                         		even
00016422                            
00016422                            ; ---------------------------------------------------------------------------
00016422                            ; Sprite mappings - spinning platforms (SBZ)
00016422                            ; ---------------------------------------------------------------------------
00016422                            Map_obj69a:
00016422                            	include "_maps\obj69a.asm"
00016422                            ; ---------------------------------------------------------------------------
00016422                            ; Sprite mappings - spinning platforms (SBZ)
00016422                            ; ---------------------------------------------------------------------------
00016422 0000 0000                  		dc.w byte_15944-Map_obj69a, byte_1594F-Map_obj69a
00016426 0000 0000                  		dc.w byte_1595A-Map_obj69a, byte_15965-Map_obj69a
0001642A 0000                       		dc.w byte_15970-Map_obj69a
0001642C 02                         byte_15944:	dc.b 2
0001642D F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
00016432 F805 0800 00               		dc.b $F8, 5, 8,	0, 0
00016437 02                         byte_1594F:	dc.b 2
00016438 F00D 0014 F0               		dc.b $F0, $D, 0, $14, $F0
0001643D 000D 001C F0               		dc.b 0,	$D, 0, $1C, $F0
00016442 02                         byte_1595A:	dc.b 2
00016443 F009 0004 F0               		dc.b $F0, 9, 0,	4, $F0
00016448 0009 000A F8               		dc.b 0,	9, 0, $A, $F8
0001644D 02                         byte_15965:	dc.b 2
0001644E F009 0024 F0               		dc.b $F0, 9, 0,	$24, $F0
00016453 0009 002A F8               		dc.b 0,	9, 0, $2A, $F8
00016458 02                         byte_15970:	dc.b 2
00016459 F005 0010 F8               		dc.b $F0, 5, 0,	$10, $F8
0001645E 0005 1010 F8               		dc.b 0,	5, $10,	$10, $F8
00016464 00                         		even
00016464 00                         		even
00016464                            
00016464                            ; ===========================================================================
00016464                            ; ---------------------------------------------------------------------------
00016464                            ; Object 6A - ground saws and pizza cutters (SBZ)
00016464                            ; ---------------------------------------------------------------------------
00016464                            
00016464                            Obj6A:					; XREF: Obj_Index
00016464 7000                       		moveq	#0,d0
00016466 1028 0024                  		move.b	$24(a0),d0
0001646A 323B 0000                  		move.w	Obj6A_Index(pc,d0.w),d1
0001646E 4EFB 1000                  		jmp	Obj6A_Index(pc,d1.w)
00016472                            ; ===========================================================================
00016472 0000                       Obj6A_Index:	dc.w Obj6A_Main-Obj6A_Index
00016474 0000                       		dc.w Obj6A_Action-Obj6A_Index
00016476                            ; ===========================================================================
00016476                            
00016476                            Obj6A_Main:				; XREF: Obj6A_Index
00016476 5428 0024                  		addq.b	#2,$24(a0)
0001647A 217C 0000 0000 0004        		move.l	#Map_obj6A,4(a0)
00016482 317C 43B5 0002             		move.w	#$43B5,2(a0)
00016488 117C 0004 0001             		move.b	#4,1(a0)
0001648E 117C 0004 0018             		move.b	#4,$18(a0)
00016494 117C 0020 0019             		move.b	#$20,$19(a0)
0001649A 3168 0008 003A             		move.w	8(a0),$3A(a0)
000164A0 3168 000C 0038             		move.w	$C(a0),$38(a0)
000164A6 0C28 0003 0028             		cmpi.b	#3,$28(a0)
000164AC 6400                       		bcc.s	Obj6A_Action
000164AE 117C 00A2 0020             		move.b	#$A2,$20(a0)
000164B4                            
000164B4                            Obj6A_Action:				; XREF: Obj6A_Index
000164B4 7000                       		moveq	#0,d0
000164B6 1028 0028                  		move.b	$28(a0),d0
000164BA 0240 0007                  		andi.w	#7,d0
000164BE D040                       		add.w	d0,d0
000164C0 323B 0000                  		move.w	Obj6A_TypeIndex(pc,d0.w),d1
000164C4 4EBB 1000                  		jsr	Obj6A_TypeIndex(pc,d1.w)
000164C8 3028 003A                  		move.w	$3A(a0),d0
000164CC 0240 FF80                  		andi.w	#$FF80,d0
000164D0 3238 F700                  		move.w	($FFFFF700).w,d1
000164D4 0441 0080                  		subi.w	#$80,d1
000164D8 0241 FF80                  		andi.w	#$FF80,d1
000164DC 9041                       		sub.w	d1,d0
000164DE 0C40 0280                  		cmpi.w	#$280,d0
000164E2 6200                       		bhi.s	Obj6A_Delete
000164E4 4EF9 0000 DFF8             		jmp	DisplaySprite
000164EA                            ; ===========================================================================
000164EA                            
000164EA                            Obj6A_Delete:
000164EA 4EF9 0000 E034             		jmp	DeleteObject
000164F0                            ; ===========================================================================
000164F0 0000 0000                  Obj6A_TypeIndex:dc.w Obj6A_Type00-Obj6A_TypeIndex, Obj6A_Type01-Obj6A_TypeIndex
000164F4 0000 0000                  		dc.w Obj6A_Type02-Obj6A_TypeIndex, Obj6A_Type03-Obj6A_TypeIndex
000164F8 0000                       		dc.w Obj6A_Type04-Obj6A_TypeIndex
000164FA                            ; ===========================================================================
000164FA                            
000164FA                            Obj6A_Type00:				; XREF: Obj6A_TypeIndex
000164FA 4E75                       		rts	
000164FC                            ; ===========================================================================
000164FC                            
000164FC                            Obj6A_Type01:				; XREF: Obj6A_TypeIndex
000164FC 323C 0060                  		move.w	#$60,d1
00016500 7000                       		moveq	#0,d0
00016502 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00016506 0828 0000 0022             		btst	#0,$22(a0)
0001650C 6700                       		beq.s	Obj6A_Animate01
0001650E 4440                       		neg.w	d0
00016510 D041                       		add.w	d1,d0
00016512                            
00016512                            Obj6A_Animate01:
00016512 3228 003A                  		move.w	$3A(a0),d1
00016516 9240                       		sub.w	d0,d1
00016518 3141 0008                  		move.w	d1,8(a0)	; move saw sideways
0001651C 5328 001E                  		subq.b	#1,$1E(a0)
00016520 6A00                       		bpl.s	loc_15A46
00016522 117C 0002 001E             		move.b	#2,$1E(a0)	; time between frame changes
00016528 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
0001652E                            
0001652E                            loc_15A46:
0001652E 4A28 0001                  		tst.b	1(a0)
00016532 6A00                       		bpl.s	locret_15A60
00016534 3038 FE04                  		move.w	($FFFFFE04).w,d0
00016538 0240 000F                  		andi.w	#$F,d0
0001653C 6600                       		bne.s	locret_15A60
0001653E 303C 00B0                  		move.w	#$B0,d0
00016542 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play saw sound
00016548                            
00016548                            locret_15A60:
00016548 4E75                       		rts	
0001654A                            ; ===========================================================================
0001654A                            
0001654A                            Obj6A_Type02:				; XREF: Obj6A_TypeIndex
0001654A 323C 0030                  		move.w	#$30,d1
0001654E 7000                       		moveq	#0,d0
00016550 1038 FE64                  		move.b	($FFFFFE64).w,d0
00016554 0828 0000 0022             		btst	#0,$22(a0)
0001655A 6700                       		beq.s	Obj6A_Animate02
0001655C 4440                       		neg.w	d0
0001655E 0640 0080                  		addi.w	#$80,d0
00016562                            
00016562                            Obj6A_Animate02:
00016562 3228 0038                  		move.w	$38(a0),d1
00016566 9240                       		sub.w	d0,d1
00016568 3141 000C                  		move.w	d1,$C(a0)	; move saw vertically
0001656C 5328 001E                  		subq.b	#1,$1E(a0)
00016570 6A00                       		bpl.s	loc_15A96
00016572 117C 0002 001E             		move.b	#2,$1E(a0)
00016578 0868 0000 001A             		bchg	#0,$1A(a0)
0001657E                            
0001657E                            loc_15A96:
0001657E 4A28 0001                  		tst.b	1(a0)
00016582 6A00                       		bpl.s	locret_15AB0
00016584 1038 FE64                  		move.b	($FFFFFE64).w,d0
00016588 0C00 0018                  		cmpi.b	#$18,d0
0001658C 6600                       		bne.s	locret_15AB0
0001658E 303C 00B0                  		move.w	#$B0,d0
00016592 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play saw sound
00016598                            
00016598                            locret_15AB0:
00016598 4E75                       		rts	
0001659A                            ; ===========================================================================
0001659A                            
0001659A                            Obj6A_Type03:				; XREF: Obj6A_TypeIndex
0001659A 4A28 003D                  		tst.b	$3D(a0)
0001659E 6600                       		bne.s	Obj6A_Animate03
000165A0 3038 D008                  		move.w	($FFFFD008).w,d0
000165A4 0440 00C0                  		subi.w	#$C0,d0
000165A8 6500                       		bcs.s	loc_15B02
000165AA 9068 0008                  		sub.w	8(a0),d0
000165AE 6500                       		bcs.s	loc_15B02
000165B0 3038 D00C                  		move.w	($FFFFD00C).w,d0
000165B4 0440 0080                  		subi.w	#$80,d0
000165B8 B068 000C                  		cmp.w	$C(a0),d0
000165BC 6400                       		bcc.s	locret_15B04
000165BE 0640 0100                  		addi.w	#$100,d0
000165C2 B068 000C                  		cmp.w	$C(a0),d0
000165C6 6500                       		bcs.s	locret_15B04
000165C8 117C 0001 003D             		move.b	#1,$3D(a0)
000165CE 317C 0600 0010             		move.w	#$600,$10(a0)	; move object to the right
000165D4 117C 00A2 0020             		move.b	#$A2,$20(a0)
000165DA 117C 0002 001A             		move.b	#2,$1A(a0)
000165E0 303C 00B0                  		move.w	#$B0,d0
000165E4 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play saw sound
000165EA                            
000165EA                            loc_15B02:
000165EA 588F                       		addq.l	#4,sp
000165EC                            
000165EC                            locret_15B04:
000165EC 4E75                       		rts	
000165EE                            ; ===========================================================================
000165EE                            
000165EE                            Obj6A_Animate03:			; XREF: ROM:00015AB6j
000165EE 4EB9 0000 DFD2             		jsr	SpeedToPos
000165F4 3168 0008 003A             		move.w	8(a0),$3A(a0)
000165FA 5328 001E                  		subq.b	#1,$1E(a0)
000165FE 6A00                       		bpl.s	locret_15B24
00016600 117C 0002 001E             		move.b	#2,$1E(a0)
00016606 0868 0000 001A             		bchg	#0,$1A(a0)
0001660C                            
0001660C                            locret_15B24:
0001660C 4E75                       		rts	
0001660E                            ; ===========================================================================
0001660E                            
0001660E                            Obj6A_Type04:				; XREF: Obj6A_TypeIndex
0001660E 4A28 003D                  		tst.b	$3D(a0)
00016612 6600                       		bne.s	Obj6A_Animate04
00016614 3038 D008                  		move.w	($FFFFD008).w,d0
00016618 0640 00E0                  		addi.w	#$E0,d0
0001661C 9068 0008                  		sub.w	8(a0),d0
00016620 6400                       		bcc.s	loc_15B74
00016622 3038 D00C                  		move.w	($FFFFD00C).w,d0
00016626 0440 0080                  		subi.w	#$80,d0
0001662A B068 000C                  		cmp.w	$C(a0),d0
0001662E 6400                       		bcc.s	locret_15B76
00016630 0640 0100                  		addi.w	#$100,d0
00016634 B068 000C                  		cmp.w	$C(a0),d0
00016638 6500                       		bcs.s	locret_15B76
0001663A 117C 0001 003D             		move.b	#1,$3D(a0)
00016640 317C FA00 0010             		move.w	#-$600,$10(a0)	; move object to the left
00016646 117C 00A2 0020             		move.b	#$A2,$20(a0)
0001664C 117C 0002 001A             		move.b	#2,$1A(a0)
00016652 303C 00B0                  		move.w	#$B0,d0
00016656 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play saw sound
0001665C                            
0001665C                            loc_15B74:
0001665C 588F                       		addq.l	#4,sp
0001665E                            
0001665E                            locret_15B76:
0001665E 4E75                       		rts	
00016660                            ; ===========================================================================
00016660                            
00016660                            Obj6A_Animate04:
00016660 4EB9 0000 DFD2             		jsr	SpeedToPos
00016666 3168 0008 003A             		move.w	8(a0),$3A(a0)
0001666C 5328 001E                  		subq.b	#1,$1E(a0)
00016670 6A00                       		bpl.s	locret_15B96
00016672 117C 0002 001E             		move.b	#2,$1E(a0)
00016678 0868 0000 001A             		bchg	#0,$1A(a0)
0001667E                            
0001667E                            locret_15B96:
0001667E 4E75                       		rts	
00016680                            ; ===========================================================================
00016680                            ; ---------------------------------------------------------------------------
00016680                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
00016680                            ; ---------------------------------------------------------------------------
00016680                            Map_obj6A:
00016680                            	include "_maps\obj6A.asm"
00016680                            ; ---------------------------------------------------------------------------
00016680                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
00016680                            ; ---------------------------------------------------------------------------
00016680 0000 0000                  		dc.w byte_15BA0-Map_obj6A, byte_15BC4-Map_obj6A
00016684 0000 0000                  		dc.w byte_15BE8-Map_obj6A, byte_15BFD-Map_obj6A
00016688 07                         byte_15BA0:	dc.b 7
00016689 C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
0001668E D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
00016693 E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
00016698 E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
0001669D E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
000166A2 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
000166A7 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
000166AC 07                         byte_15BC4:	dc.b 7
000166AD C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
000166B2 D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
000166B7 E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
000166BC E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
000166C1 E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
000166C6 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
000166CB 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
000166D0 04                         byte_15BE8:	dc.b 4
000166D1 E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
000166D6 E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
000166DB 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
000166E0 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
000166E5 04                         byte_15BFD:	dc.b 4
000166E6 E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
000166EB E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
000166F0 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
000166F5 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
000166FA                            		even
000166FA                            		even
000166FA                            
000166FA                            ; ===========================================================================
000166FA                            ; ---------------------------------------------------------------------------
000166FA                            ; Object 6B - stomper (SBZ)
000166FA                            ; ---------------------------------------------------------------------------
000166FA                            
000166FA                            Obj6B:					; XREF: Obj_Index
000166FA 7000                       		moveq	#0,d0
000166FC 1028 0024                  		move.b	$24(a0),d0
00016700 323B 0000                  		move.w	Obj6B_Index(pc,d0.w),d1
00016704 4EFB 1000                  		jmp	Obj6B_Index(pc,d1.w)
00016708                            ; ===========================================================================
00016708 0000                       Obj6B_Index:	dc.w Obj6B_Main-Obj6B_Index
0001670A 0000                       		dc.w Obj6B_Action-Obj6B_Index
0001670C                            
0001670C 400C 8001                  Obj6B_Var:	dc.b  $40,  $C,	$80,   1 ; width, height, ????,	type number
00016710 1C20 3803                  		dc.b  $1C, $20,	$38,   3
00016714 1C20 4004                  		dc.b  $1C, $20,	$40,   4
00016718 1C20 6004                  		dc.b  $1C, $20,	$60,   4
0001671C 8040 0005                  		dc.b  $80, $40,	  0,   5
00016720                            ; ===========================================================================
00016720                            
00016720                            Obj6B_Main:				; XREF: Obj6B_Index
00016720 5428 0024                  		addq.b	#2,$24(a0)
00016724 7000                       		moveq	#0,d0
00016726 1028 0028                  		move.b	$28(a0),d0
0001672A E448                       		lsr.w	#2,d0
0001672C 0240 001C                  		andi.w	#$1C,d0
00016730 47FB 00DA                  		lea	Obj6B_Var(pc,d0.w),a3
00016734 115B 0019                  		move.b	(a3)+,$19(a0)
00016738 115B 0016                  		move.b	(a3)+,$16(a0)
0001673C E448                       		lsr.w	#2,d0
0001673E 1140 001A                  		move.b	d0,$1A(a0)
00016742 217C 0000 0000 0004        		move.l	#Map_obj6B,4(a0)
0001674A 317C 22C0 0002             		move.w	#$22C0,2(a0)
00016750 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ/SBZ3
00016756 6600                       		bne.s	Obj6B_SBZ12	; if not, branch
00016758 08F8 0000 F7CB             		bset	#0,($FFFFF7CB).w
0001675E 6700                       		beq.s	Obj6B_SBZ3
00016760                            
00016760                            Obj6B_ChkGone:				; XREF: Obj6B_SBZ3
00016760 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016764 7000                       		moveq	#0,d0
00016766 1028 0023                  		move.b	$23(a0),d0
0001676A 6700                       		beq.s	Obj6B_Delete
0001676C 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00016772                            
00016772                            Obj6B_Delete:
00016772 4EF9 0000 E034             		jmp	DeleteObject
00016778                            ; ===========================================================================
00016778                            
00016778                            Obj6B_SBZ3:				; XREF: Obj6B_Main
00016778 317C 41F0 0002             		move.w	#$41F0,2(a0)
0001677E 0C68 0A80 0008             		cmpi.w	#$A80,8(a0)
00016784 6600                       		bne.s	Obj6B_SBZ12
00016786 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001678A 7000                       		moveq	#0,d0
0001678C 1028 0023                  		move.b	$23(a0),d0
00016790 6700                       		beq.s	Obj6B_SBZ12
00016792 0832 0000 0002             		btst	#0,2(a2,d0.w)
00016798 6700                       		beq.s	Obj6B_SBZ12
0001679A 4238 F7CB                  		clr.b	($FFFFF7CB).w
0001679E 60C0                       		bra.s	Obj6B_ChkGone
000167A0                            ; ===========================================================================
000167A0                            
000167A0                            Obj6B_SBZ12:				; XREF: Obj6B_Main
000167A0 0028 0004 0001             		ori.b	#4,1(a0)
000167A6 117C 0004 0018             		move.b	#4,$18(a0)
000167AC 3168 0008 0034             		move.w	8(a0),$34(a0)
000167B2 3168 000C 0030             		move.w	$C(a0),$30(a0)
000167B8 7000                       		moveq	#0,d0
000167BA 101B                       		move.b	(a3)+,d0
000167BC 3140 003C                  		move.w	d0,$3C(a0)
000167C0 7000                       		moveq	#0,d0
000167C2 1028 0028                  		move.b	$28(a0),d0
000167C6 6A00                       		bpl.s	Obj6B_Action
000167C8 0200 000F                  		andi.b	#$F,d0
000167CC 1140 003E                  		move.b	d0,$3E(a0)
000167D0 1153 0028                  		move.b	(a3),$28(a0)
000167D4 0C13 0005                  		cmpi.b	#5,(a3)
000167D8 6600                       		bne.s	Obj6B_ChkGone2
000167DA 08E8 0004 0001             		bset	#4,1(a0)
000167E0                            
000167E0                            Obj6B_ChkGone2:
000167E0 45F8 FC00                  		lea	($FFFFFC00).w,a2
000167E4 7000                       		moveq	#0,d0
000167E6 1028 0023                  		move.b	$23(a0),d0
000167EA 6700                       		beq.s	Obj6B_Action
000167EC 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000167F2                            
000167F2                            Obj6B_Action:				; XREF: Obj6B_Index
000167F2 3F28 0008                  		move.w	8(a0),-(sp)
000167F6 7000                       		moveq	#0,d0
000167F8 1028 0028                  		move.b	$28(a0),d0
000167FC 0240 000F                  		andi.w	#$F,d0
00016800 D040                       		add.w	d0,d0
00016802 323B 0000                  		move.w	Obj6B_TypeIndex(pc,d0.w),d1
00016806 4EBB 1000                  		jsr	Obj6B_TypeIndex(pc,d1.w)
0001680A 381F                       		move.w	(sp)+,d4
0001680C 4A28 0001                  		tst.b	1(a0)
00016810 6A00                       		bpl.s	Obj6B_ChkDel
00016812 7200                       		moveq	#0,d1
00016814 1228 0019                  		move.b	$19(a0),d1
00016818 0641 000B                  		addi.w	#$B,d1
0001681C 7400                       		moveq	#0,d2
0001681E 1428 0016                  		move.b	$16(a0),d2
00016822 3602                       		move.w	d2,d3
00016824 5243                       		addq.w	#1,d3
00016826 6100 9BA0                  		bsr.w	SolidObject
0001682A                            
0001682A                            Obj6B_ChkDel:
0001682A 3028 0034                  		move.w	$34(a0),d0
0001682E 0240 FF80                  		andi.w	#$FF80,d0
00016832 3238 F700                  		move.w	($FFFFF700).w,d1
00016836 0441 0080                  		subi.w	#$80,d1
0001683A 0241 FF80                  		andi.w	#$FF80,d1
0001683E 9041                       		sub.w	d1,d0
00016840 0C40 0280                  		cmpi.w	#$280,d0
00016844 6200                       		bhi.s	loc_15D64
00016846 4EF9 0000 DFF8             		jmp	DisplaySprite
0001684C                            ; ===========================================================================
0001684C                            
0001684C                            loc_15D64:
0001684C 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00016852 6600                       		bne.s	Obj6B_Delete2
00016854 4238 F7CB                  		clr.b	($FFFFF7CB).w
00016858 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001685C 7000                       		moveq	#0,d0
0001685E 1028 0023                  		move.b	$23(a0),d0
00016862 6700                       		beq.s	Obj6B_Delete2
00016864 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0001686A                            
0001686A                            Obj6B_Delete2:
0001686A 4EF9 0000 E034             		jmp	DeleteObject
00016870                            ; ===========================================================================
00016870 0000 0000                  Obj6B_TypeIndex:dc.w Obj6B_Type00-Obj6B_TypeIndex, Obj6B_Type01-Obj6B_TypeIndex
00016874 0000 0000                  		dc.w Obj6B_Type02-Obj6B_TypeIndex, Obj6B_Type03-Obj6B_TypeIndex
00016878 0000 0000                  		dc.w Obj6B_Type04-Obj6B_TypeIndex, Obj6B_Type05-Obj6B_TypeIndex
0001687C                            ; ===========================================================================
0001687C                            
0001687C                            Obj6B_Type00:				; XREF: Obj6B_TypeIndex
0001687C 4E75                       		rts	
0001687E                            ; ===========================================================================
0001687E                            
0001687E                            Obj6B_Type01:				; XREF: Obj6B_TypeIndex
0001687E 4A28 0038                  		tst.b	$38(a0)
00016882 6600                       		bne.s	loc_15DB4
00016884 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00016888 7000                       		moveq	#0,d0
0001688A 1028 003E                  		move.b	$3E(a0),d0
0001688E 0832 0000 0000             		btst	#0,(a2,d0.w)
00016894 6700                       		beq.s	loc_15DC2
00016896 117C 0001 0038             		move.b	#1,$38(a0)
0001689C                            
0001689C                            loc_15DB4:
0001689C 3028 003C                  		move.w	$3C(a0),d0
000168A0 B068 003A                  		cmp.w	$3A(a0),d0
000168A4 6700                       		beq.s	loc_15DE0
000168A6 5468 003A                  		addq.w	#2,$3A(a0)
000168AA                            
000168AA                            loc_15DC2:
000168AA 3028 003A                  		move.w	$3A(a0),d0
000168AE 0828 0000 0022             		btst	#0,$22(a0)
000168B4 6700                       		beq.s	loc_15DD4
000168B6 4440                       		neg.w	d0
000168B8 0640 0080                  		addi.w	#$80,d0
000168BC                            
000168BC                            loc_15DD4:
000168BC 3228 0034                  		move.w	$34(a0),d1
000168C0 9240                       		sub.w	d0,d1
000168C2 3141 0008                  		move.w	d1,8(a0)
000168C6 4E75                       		rts	
000168C8                            ; ===========================================================================
000168C8                            
000168C8                            loc_15DE0:
000168C8 5228 0028                  		addq.b	#1,$28(a0)
000168CC 317C 00B4 0036             		move.w	#$B4,$36(a0)
000168D2 4228 0038                  		clr.b	$38(a0)
000168D6 45F8 FC00                  		lea	($FFFFFC00).w,a2
000168DA 7000                       		moveq	#0,d0
000168DC 1028 0023                  		move.b	$23(a0),d0
000168E0 67C8                       		beq.s	loc_15DC2
000168E2 08F2 0000 0002             		bset	#0,2(a2,d0.w)
000168E8 60C0                       		bra.s	loc_15DC2
000168EA                            ; ===========================================================================
000168EA                            
000168EA                            Obj6B_Type02:				; XREF: Obj6B_TypeIndex
000168EA 4A28 0038                  		tst.b	$38(a0)
000168EE 6600                       		bne.s	loc_15E14
000168F0 5368 0036                  		subq.w	#1,$36(a0)
000168F4 6600                       		bne.s	loc_15E1E
000168F6 117C 0001 0038             		move.b	#1,$38(a0)
000168FC                            
000168FC                            loc_15E14:
000168FC 4A68 003A                  		tst.w	$3A(a0)
00016900 6700                       		beq.s	loc_15E3C
00016902 5568 003A                  		subq.w	#2,$3A(a0)
00016906                            
00016906                            loc_15E1E:
00016906 3028 003A                  		move.w	$3A(a0),d0
0001690A 0828 0000 0022             		btst	#0,$22(a0)
00016910 6700                       		beq.s	loc_15E30
00016912 4440                       		neg.w	d0
00016914 0640 0080                  		addi.w	#$80,d0
00016918                            
00016918                            loc_15E30:
00016918 3228 0034                  		move.w	$34(a0),d1
0001691C 9240                       		sub.w	d0,d1
0001691E 3141 0008                  		move.w	d1,8(a0)
00016922 4E75                       		rts	
00016924                            ; ===========================================================================
00016924                            
00016924                            loc_15E3C:
00016924 5328 0028                  		subq.b	#1,$28(a0)
00016928 4228 0038                  		clr.b	$38(a0)
0001692C 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016930 7000                       		moveq	#0,d0
00016932 1028 0023                  		move.b	$23(a0),d0
00016936 67CE                       		beq.s	loc_15E1E
00016938 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
0001693E 60C6                       		bra.s	loc_15E1E
00016940                            ; ===========================================================================
00016940                            
00016940                            Obj6B_Type03:				; XREF: Obj6B_TypeIndex
00016940 4A28 0038                  		tst.b	$38(a0)
00016944 6600                       		bne.s	loc_15E7C
00016946 4A68 003A                  		tst.w	$3A(a0)
0001694A 6700                       		beq.s	loc_15E6A
0001694C 5368 003A                  		subq.w	#1,$3A(a0)
00016950 6000                       		bra.s	loc_15E8E
00016952                            ; ===========================================================================
00016952                            
00016952                            loc_15E6A:
00016952 5368 0036                  		subq.w	#1,$36(a0)
00016956 6A00                       		bpl.s	loc_15E8E
00016958 317C 003C 0036             		move.w	#$3C,$36(a0)
0001695E 117C 0001 0038             		move.b	#1,$38(a0)
00016964                            
00016964                            loc_15E7C:
00016964 5068 003A                  		addq.w	#8,$3A(a0)
00016968 3028 003A                  		move.w	$3A(a0),d0
0001696C B068 003C                  		cmp.w	$3C(a0),d0
00016970 6600                       		bne.s	loc_15E8E
00016972 4228 0038                  		clr.b	$38(a0)
00016976                            
00016976                            loc_15E8E:
00016976 3028 003A                  		move.w	$3A(a0),d0
0001697A 0828 0000 0022             		btst	#0,$22(a0)
00016980 6700                       		beq.s	loc_15EA0
00016982 4440                       		neg.w	d0
00016984 0640 0038                  		addi.w	#$38,d0
00016988                            
00016988                            loc_15EA0:
00016988 3228 0030                  		move.w	$30(a0),d1
0001698C D240                       		add.w	d0,d1
0001698E 3141 000C                  		move.w	d1,$C(a0)
00016992 4E75                       		rts	
00016994                            ; ===========================================================================
00016994                            
00016994                            Obj6B_Type04:				; XREF: Obj6B_TypeIndex
00016994 4A28 0038                  		tst.b	$38(a0)
00016998 6600                       		bne.s	loc_15ED0
0001699A 4A68 003A                  		tst.w	$3A(a0)
0001699E 6700                       		beq.s	loc_15EBE
000169A0 5168 003A                  		subq.w	#8,$3A(a0)
000169A4 6000                       		bra.s	loc_15EF0
000169A6                            ; ===========================================================================
000169A6                            
000169A6                            loc_15EBE:
000169A6 5368 0036                  		subq.w	#1,$36(a0)
000169AA 6A00                       		bpl.s	loc_15EF0
000169AC 317C 003C 0036             		move.w	#$3C,$36(a0)
000169B2 117C 0001 0038             		move.b	#1,$38(a0)
000169B8                            
000169B8                            loc_15ED0:
000169B8 3028 003A                  		move.w	$3A(a0),d0
000169BC B068 003C                  		cmp.w	$3C(a0),d0
000169C0 6700                       		beq.s	loc_15EE0
000169C2 5068 003A                  		addq.w	#8,$3A(a0)
000169C6 6000                       		bra.s	loc_15EF0
000169C8                            ; ===========================================================================
000169C8                            
000169C8                            loc_15EE0:
000169C8 5368 0036                  		subq.w	#1,$36(a0)
000169CC 6A00                       		bpl.s	loc_15EF0
000169CE 317C 003C 0036             		move.w	#$3C,$36(a0)
000169D4 4228 0038                  		clr.b	$38(a0)
000169D8                            
000169D8                            loc_15EF0:
000169D8 3028 003A                  		move.w	$3A(a0),d0
000169DC 0828 0000 0022             		btst	#0,$22(a0)
000169E2 6700                       		beq.s	loc_15F02
000169E4 4440                       		neg.w	d0
000169E6 0640 0038                  		addi.w	#$38,d0
000169EA                            
000169EA                            loc_15F02:
000169EA 3228 0030                  		move.w	$30(a0),d1
000169EE D240                       		add.w	d0,d1
000169F0 3141 000C                  		move.w	d1,$C(a0)
000169F4 4E75                       		rts	
000169F6                            ; ===========================================================================
000169F6                            
000169F6                            Obj6B_Type05:				; XREF: Obj6B_TypeIndex
000169F6 4A28 0038                  		tst.b	$38(a0)
000169FA 6600                       		bne.s	loc_15F3E
000169FC 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00016A00 7000                       		moveq	#0,d0
00016A02 1028 003E                  		move.b	$3E(a0),d0
00016A06 0832 0000 0000             		btst	#0,(a2,d0.w)
00016A0C 6700                       		beq.s	locret_15F5C
00016A0E 117C 0001 0038             		move.b	#1,$38(a0)
00016A14 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016A18 7000                       		moveq	#0,d0
00016A1A 1028 0023                  		move.b	$23(a0),d0
00016A1E 6700                       		beq.s	loc_15F3E
00016A20 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00016A26                            
00016A26                            loc_15F3E:
00016A26 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
00016A2E 06A8 0000 8000 000C        		addi.l	#$8000,$C(a0)
00016A36 3168 0008 0034             		move.w	8(a0),$34(a0)
00016A3C 0C68 0980 0008             		cmpi.w	#$980,8(a0)
00016A42 6700                       		beq.s	loc_15F5E
00016A44                            
00016A44                            locret_15F5C:
00016A44 4E75                       		rts	
00016A46                            ; ===========================================================================
00016A46                            
00016A46                            loc_15F5E:
00016A46 4228 0028                  		clr.b	$28(a0)
00016A4A 4228 0038                  		clr.b	$38(a0)
00016A4E 4E75                       		rts	
00016A50                            ; ===========================================================================
00016A50                            ; ---------------------------------------------------------------------------
00016A50                            ; Sprite mappings - stomper and	platforms (SBZ)
00016A50                            ; ---------------------------------------------------------------------------
00016A50                            Map_obj6B:
00016A50                            	include "_maps\obj6B.asm"
00016A50                            ; ---------------------------------------------------------------------------
00016A50                            ; Sprite mappings - stomper and	platforms (SBZ)
00016A50                            ; ---------------------------------------------------------------------------
00016A50 0000 0000                  		dc.w byte_15F72-Map_obj6B, byte_15F87-Map_obj6B
00016A54 0000 0000                  		dc.w byte_15F87-Map_obj6B, byte_15F87-Map_obj6B
00016A58 0000                       		dc.w byte_15FB0-Map_obj6B
00016A5A 04                         byte_15F72:	dc.b 4
00016A5B F40E 21AF C0               		dc.b $F4, $E, $21, $AF,	$C0
00016A60 F40E 21B2 E0               		dc.b $F4, $E, $21, $B2,	$E0
00016A65 F40E 21B2 00               		dc.b $F4, $E, $21, $B2,	0
00016A6A F40E 29AF 20               		dc.b $F4, $E, $29, $AF,	$20
00016A6F 08                         byte_15F87:	dc.b 8
00016A70 E00C 000C E4               		dc.b $E0, $C, 0, $C, $E4
00016A75 E008 0010 04               		dc.b $E0, 8, 0,	$10, 4
00016A7A E80E 2013 E4               		dc.b $E8, $E, $20, $13,	$E4
00016A7F E80A 201F 04               		dc.b $E8, $A, $20, $1F,	4
00016A84 000E 2013 E4               		dc.b 0,	$E, $20, $13, $E4
00016A89 000A 201F 04               		dc.b 0,	$A, $20, $1F, 4
00016A8E 180C 000C E4               		dc.b $18, $C, 0, $C, $E4
00016A93 1808 0010 04               		dc.b $18, 8, 0,	$10, 4
00016A98 0E                         byte_15FB0:	dc.b $E
00016A99 C00F 0000 80               		dc.b $C0, $F, 0, 0, $80
00016A9E C00F 0010 A0               		dc.b $C0, $F, 0, $10, $A0
00016AA3 C00F 0020 C0               		dc.b $C0, $F, 0, $20, $C0
00016AA8 C00F 0010 E0               		dc.b $C0, $F, 0, $10, $E0
00016AAD C00F 0020 00               		dc.b $C0, $F, 0, $20, 0
00016AB2 C00F 0010 20               		dc.b $C0, $F, 0, $10, $20
00016AB7 C00F 0030 40               		dc.b $C0, $F, 0, $30, $40
00016ABC C00D 0040 60               		dc.b $C0, $D, 0, $40, $60
00016AC1 E00F 0048 80               		dc.b $E0, $F, 0, $48, $80
00016AC6 E00F 0048 C0               		dc.b $E0, $F, 0, $48, $C0
00016ACB E00F 0058 00               		dc.b $E0, $F, 0, $58, 0
00016AD0 000F 0048 80               		dc.b 0,	$F, 0, $48, $80
00016AD5 000F 0058 C0               		dc.b 0,	$F, 0, $58, $C0
00016ADA 200F 0058 80               		dc.b $20, $F, 0, $58, $80
00016AE0 00                         		even
00016AE0 00                         		even
00016AE0                            
00016AE0                            ; ===========================================================================
00016AE0                            ; ---------------------------------------------------------------------------
00016AE0                            ; Object 6C - vanishing	platforms (SBZ)
00016AE0                            ; ---------------------------------------------------------------------------
00016AE0                            
00016AE0                            Obj6C:					; XREF: Obj_Index
00016AE0 7000                       		moveq	#0,d0
00016AE2 1028 0024                  		move.b	$24(a0),d0
00016AE6 323B 0000                  		move.w	Obj6C_Index(pc,d0.w),d1
00016AEA 4EFB 1000                  		jmp	Obj6C_Index(pc,d1.w)
00016AEE                            ; ===========================================================================
00016AEE 0000                       Obj6C_Index:	dc.w Obj6C_Main-Obj6C_Index
00016AF0 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
00016AF2 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
00016AF4 0000                       		dc.w loc_16068-Obj6C_Index
00016AF6                            ; ===========================================================================
00016AF6                            
00016AF6                            Obj6C_Main:				; XREF: Obj6C_Index
00016AF6 5C28 0024                  		addq.b	#6,$24(a0)
00016AFA 217C 0000 0000 0004        		move.l	#Map_obj6C,4(a0)
00016B02 317C 44C3 0002             		move.w	#$44C3,2(a0)
00016B08 0028 0004 0001             		ori.b	#4,1(a0)
00016B0E 117C 0010 0019             		move.b	#$10,$19(a0)
00016B14 117C 0004 0018             		move.b	#4,$18(a0)
00016B1A 7000                       		moveq	#0,d0
00016B1C 1028 0028                  		move.b	$28(a0),d0	; get object type
00016B20 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00016B24 5240                       		addq.w	#1,d0		; add 1
00016B26 EF48                       		lsl.w	#7,d0		; multiply by $80
00016B28 3200                       		move.w	d0,d1
00016B2A 5340                       		subq.w	#1,d0
00016B2C 3140 0030                  		move.w	d0,$30(a0)
00016B30 3140 0032                  		move.w	d0,$32(a0)
00016B34 7000                       		moveq	#0,d0
00016B36 1028 0028                  		move.b	$28(a0),d0	; get object type
00016B3A 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st digit
00016B3E 0641 0080                  		addi.w	#$80,d1
00016B42 C0C1                       		mulu.w	d1,d0
00016B44 E088                       		lsr.l	#8,d0
00016B46 3140 0036                  		move.w	d0,$36(a0)
00016B4A 5341                       		subq.w	#1,d1
00016B4C 3141 0038                  		move.w	d1,$38(a0)
00016B50                            
00016B50                            loc_16068:				; XREF: Obj6C_Index
00016B50 3038 FE04                  		move.w	($FFFFFE04).w,d0
00016B54 9068 0036                  		sub.w	$36(a0),d0
00016B58 C068 0038                  		and.w	$38(a0),d0
00016B5C 6600                       		bne.s	Obj6C_Animate
00016B5E 5928 0024                  		subq.b	#4,$24(a0)
00016B62 6000                       		bra.s	Obj6C_Vanish
00016B64                            ; ===========================================================================
00016B64                            
00016B64                            Obj6C_Animate:
00016B64 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
00016B6A 4EB9 0000 B056             		jsr	AnimateSprite
00016B70 6000 952E                  		bra.w	MarkObjGone
00016B74                            ; ===========================================================================
00016B74                            
00016B74                            Obj6C_Vanish:				; XREF: Obj6C_Index
00016B74 5368 0030                  		subq.w	#1,$30(a0)
00016B78 6A00                       		bpl.s	loc_160AA
00016B7A 317C 007F 0030             		move.w	#127,$30(a0)
00016B80 4A28 001C                  		tst.b	$1C(a0)
00016B84 6700                       		beq.s	loc_160A4
00016B86 3168 0032 0030             		move.w	$32(a0),$30(a0)
00016B8C                            
00016B8C                            loc_160A4:
00016B8C 0868 0000 001C             		bchg	#0,$1C(a0)
00016B92                            
00016B92                            loc_160AA:
00016B92 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
00016B98 4EB9 0000 B056             		jsr	AnimateSprite
00016B9E 0828 0001 001A             		btst	#1,$1A(a0)	; has platform vanished?
00016BA4 6600                       		bne.s	Obj6C_NotSolid	; if yes, branch
00016BA6 0C28 0002 0024             		cmpi.b	#2,$24(a0)
00016BAC 6600                       		bne.s	loc_160D6
00016BAE 7200                       		moveq	#0,d1
00016BB0 1228 0019                  		move.b	$19(a0),d1
00016BB4 4EB9 0000 7C12             		jsr	(PlatformObject).l
00016BBA 6000 94E4                  		bra.w	MarkObjGone
00016BBE                            ; ===========================================================================
00016BBE                            
00016BBE                            loc_160D6:
00016BBE 7200                       		moveq	#0,d1
00016BC0 1228 0019                  		move.b	$19(a0),d1
00016BC4 4EB9 0000 7D86             		jsr	(ExitPlatform).l
00016BCA 3428 0008                  		move.w	8(a0),d2
00016BCE 4EB9 0000 82F0             		jsr	(MvSonicOnPtfm2).l
00016BD4 6000 94CA                  		bra.w	MarkObjGone
00016BD8                            ; ===========================================================================
00016BD8                            
00016BD8                            Obj6C_NotSolid:				; XREF: Obj6C_Vanish
00016BD8 0828 0003 0022             		btst	#3,$22(a0)
00016BDE 6700                       		beq.s	Obj6C_Display
00016BE0 43F8 D000                  		lea	($FFFFD000).w,a1
00016BE4 08A9 0003 0022             		bclr	#3,$22(a1)
00016BEA 08A8 0003 0022             		bclr	#3,$22(a0)
00016BF0 117C 0002 0024             		move.b	#2,$24(a0)
00016BF6 4228 0025                  		clr.b	$25(a0)
00016BFA                            
00016BFA                            Obj6C_Display:
00016BFA 6000 94A4                  		bra.w	MarkObjGone
00016BFE                            ; ===========================================================================
00016BFE                            Ani_obj6C:
00016BFE                            	include "_anim\obj6C.asm"
00016BFE                            ; ---------------------------------------------------------------------------
00016BFE                            ; Animation script - vanishing platforms (SBZ)
00016BFE                            ; ---------------------------------------------------------------------------
00016BFE 0000                       		dc.w byte_1611A-Ani_obj6C
00016C00 0000                       		dc.w byte_16122-Ani_obj6C
00016C02 0700 0102 03FE 0100        byte_1611A:	dc.b 7,	0, 1, 2, 3, $FE, 1, 0
00016C0A 0703 0201 00FE 0100        byte_16122:	dc.b 7,	3, 2, 1, 0, $FE, 1, 0
00016C12                            		even
00016C12                            		even
00016C12                            
00016C12                            ; ---------------------------------------------------------------------------
00016C12                            ; Sprite mappings - vanishing platforms	(SBZ)
00016C12                            ; ---------------------------------------------------------------------------
00016C12                            Map_obj6C:
00016C12                            	include "_maps\obj6C.asm"
00016C12                            ; ---------------------------------------------------------------------------
00016C12                            ; Sprite mappings - vanishing platforms	(SBZ)
00016C12                            ; ---------------------------------------------------------------------------
00016C12 0000 0000                  		dc.w byte_16132-Map_obj6C, byte_16138-Map_obj6C
00016C16 0000 0000                  		dc.w byte_1613E-Map_obj6C, byte_16144-Map_obj6C
00016C1A 01                         byte_16132:	dc.b 1
00016C1B F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0
00016C20 01                         byte_16138:	dc.b 1
00016C21 F807 0010 F8               		dc.b $F8, 7, 0,	$10, $F8
00016C26 01                         byte_1613E:	dc.b 1
00016C27 F803 0018 FC               		dc.b $F8, 3, 0,	$18, $FC
00016C2C 00                         byte_16144:	dc.b 0
00016C2E 00                         		even
00016C2E 00                         		even
00016C2E                            
00016C2E                            ; ===========================================================================
00016C2E                            ; ---------------------------------------------------------------------------
00016C2E                            ; Object 6E - electrocution orbs (SBZ)
00016C2E                            ; ---------------------------------------------------------------------------
00016C2E                            
00016C2E                            Obj6E:					; XREF: Obj_Index
00016C2E 7000                       		moveq	#0,d0
00016C30 1028 0024                  		move.b	$24(a0),d0
00016C34 323B 0000                  		move.w	Obj6E_Index(pc,d0.w),d1
00016C38 4EFB 1000                  		jmp	Obj6E_Index(pc,d1.w)
00016C3C                            ; ===========================================================================
00016C3C 0000                       Obj6E_Index:	dc.w Obj6E_Main-Obj6E_Index
00016C3E 0000                       		dc.w Obj6E_Shock-Obj6E_Index
00016C40                            ; ===========================================================================
00016C40                            
00016C40                            Obj6E_Main:				; XREF: Obj6E_Index
00016C40 5428 0024                  		addq.b	#2,$24(a0)
00016C44 217C 0000 0000 0004        		move.l	#Map_obj6E,4(a0)
00016C4C 317C 047E 0002             		move.w	#$47E,2(a0)
00016C52 0028 0004 0001             		ori.b	#4,1(a0)
00016C58 117C 0028 0019             		move.b	#$28,$19(a0)
00016C5E 7000                       		moveq	#0,d0
00016C60 1028 0028                  		move.b	$28(a0),d0	; read object type
00016C64 E948                       		lsl.w	#4,d0		; multiply by $10
00016C66 5340                       		subq.w	#1,d0
00016C68 3140 0034                  		move.w	d0,$34(a0)
00016C6C                            
00016C6C                            Obj6E_Shock:				; XREF: Obj6E_Index
00016C6C 3038 FE04                  		move.w	($FFFFFE04).w,d0
00016C70 C068 0034                  		and.w	$34(a0),d0
00016C74 6600                       		bne.s	Obj6E_Animate
00016C76 117C 0001 001C             		move.b	#1,$1C(a0)	; run "shocking" animation
00016C7C 4A28 0001                  		tst.b	1(a0)
00016C80 6A00                       		bpl.s	Obj6E_Animate
00016C82 303C 00B1                  		move.w	#$B1,d0
00016C86 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play electricity sound
00016C8C                            
00016C8C                            Obj6E_Animate:
00016C8C 43F9 0000 0000             		lea	(Ani_obj6E).l,a1
00016C92 4EB9 0000 B056             		jsr	AnimateSprite
00016C98 117C 0000 0020             		move.b	#0,$20(a0)
00016C9E 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is frame number 4 displayed?
00016CA4 6600                       		bne.s	Obj6E_Display	; if not, branch
00016CA6 117C 00A4 0020             		move.b	#$A4,$20(a0)	; if yes, make object hurt Sonic
00016CAC                            
00016CAC                            Obj6E_Display:
00016CAC 6000 93F2                  		bra.w	MarkObjGone
00016CB0                            ; ===========================================================================
00016CB0                            Ani_obj6E:
00016CB0                            	include "_anim\obj6E.asm"
00016CB0                            ; ---------------------------------------------------------------------------
00016CB0                            ; Animation script - electrocution orbs (SBZ)
00016CB0                            ; ---------------------------------------------------------------------------
00016CB0 0000                       		dc.w byte_161CC-Ani_obj6E
00016CB2 0000                       		dc.w byte_161D0-Ani_obj6E
00016CB4 0700 FF00                  byte_161CC:	dc.b 7,	0, $FF,	0
00016CB8 0001 0101 0203 0304 0404+  byte_161D0:	dc.b 0,	1, 1, 1, 2, 3, 3, 4, 4,	4, 5, 5, 5, 0, $FD, 0
00016CC8                            		even
00016CC8                            		even
00016CC8                            
00016CC8                            ; ---------------------------------------------------------------------------
00016CC8                            ; Sprite mappings - electrocution orbs (SBZ)
00016CC8                            ; ---------------------------------------------------------------------------
00016CC8                            Map_obj6E:
00016CC8                            	include "_maps\obj6E.asm"
00016CC8                            Map_26ed:
00016CC8 0000                       Map_26ed_0: 	dc.w Map_26ed_C-Map_26ed
00016CCA 0000                       Map_26ed_2: 	dc.w Map_26ed_12-Map_26ed
00016CCC 0000                       Map_26ed_4: 	dc.w Map_26ed_1D-Map_26ed
00016CCE 0000                       Map_26ed_6: 	dc.w Map_26ed_3C-Map_26ed
00016CD0 0000                       Map_26ed_8: 	dc.w Map_26ed_65-Map_26ed
00016CD2 0000                       Map_26ed_A: 	dc.w Map_26ed_84-Map_26ed
00016CD4 01                         Map_26ed_C: 	dc.b $1
00016CD5 0805 0000 F8               	dc.b $8, $5, $0, $0, $F8
00016CDA 02                         Map_26ed_12: 	dc.b $2
00016CDB F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00016CE0 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00016CE5 06                         Map_26ed_1D: 	dc.b $6
00016CE6 F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00016CEB 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00016CF0 F605 0010 0C               	dc.b $F6, $5, $0, $10, $C
00016CF5 F605 0010 1C               	dc.b $F6, $5, $0, $10, $1C
00016CFA F605 0810 D4               	dc.b $F6, $5, $8, $10, $D4
00016CFF F605 0810 E4               	dc.b $F6, $5, $8, $10, $E4
00016D04 08                         Map_26ed_3C: 	dc.b $8
00016D05 F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00016D0A 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00016D0F F605 0010 0C               	dc.b $F6, $5, $0, $10, $C
00016D14 F605 0010 1C               	dc.b $F6, $5, $0, $10, $1C
00016D19 F605 0810 E4               	dc.b $F6, $5, $8, $10, $E4
00016D1E F605 0010 2C               	dc.b $F6, $5, $0, $10, $2C
00016D23 F605 0810 D4               	dc.b $F6, $5, $8, $10, $D4
00016D28 F605 0810 C4               	dc.b $F6, $5, $8, $10, $C4
00016D2D 06                         Map_26ed_65: 	dc.b $6
00016D2E F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00016D33 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00016D38 F605 0010 1C               	dc.b $F6, $5, $0, $10, $1C
00016D3D F605 0010 2C               	dc.b $F6, $5, $0, $10, $2C
00016D42 F605 0810 D4               	dc.b $F6, $5, $8, $10, $D4
00016D47 F605 0810 C4               	dc.b $F6, $5, $8, $10, $C4
00016D4C 04                         Map_26ed_84: 	dc.b $4
00016D4D F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00016D52 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00016D57 F605 0010 2C               	dc.b $F6, $5, $0, $10, $2C
00016D5C F605 0810 C4               	dc.b $F6, $5, $8, $10, $C4
00016D62 00                         	even
00016D62 00                         	even
00016D62                            
00016D62                            ; ===========================================================================
00016D62                            ; ---------------------------------------------------------------------------
00016D62                            ; Object 6F - spinning platforms that move around a conveyor belt (SBZ)
00016D62                            ; ---------------------------------------------------------------------------
00016D62                            
00016D62                            Obj6F:					; XREF: Obj_Index
00016D62 7000                       		moveq	#0,d0
00016D64 1028 0024                  		move.b	$24(a0),d0
00016D68 323B 0000                  		move.w	Obj6F_Index(pc,d0.w),d1
00016D6C 4EBB 1000                  		jsr	Obj6F_Index(pc,d1.w)
00016D70 3028 0030                  		move.w	$30(a0),d0
00016D74 0240 FF80                  		andi.w	#$FF80,d0
00016D78 3238 F700                  		move.w	($FFFFF700).w,d1
00016D7C 0441 0080                  		subi.w	#$80,d1
00016D80 0241 FF80                  		andi.w	#$FF80,d1
00016D84 9041                       		sub.w	d1,d0
00016D86 0C40 0280                  		cmpi.w	#$280,d0
00016D8A 6200                       		bhi.s	loc_1629A
00016D8C                            
00016D8C                            Obj6F_Display:
00016D8C 4EF9 0000 DFF8             		jmp	DisplaySprite
00016D92                            ; ===========================================================================
00016D92                            
00016D92                            loc_1629A:
00016D92 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; check if act	is 3
00016D98 6600                       		bne.s	Obj6F_Act1or2	; if not, branch
00016D9A 0C40 FF80                  		cmpi.w	#-$80,d0
00016D9E 64EC                       		bcc.s	Obj6F_Display
00016DA0                            
00016DA0                            Obj6F_Act1or2:
00016DA0 1028 002F                  		move.b	$2F(a0),d0
00016DA4 6A00                       		bpl.s	Obj6F_Delete
00016DA6 0240 007F                  		andi.w	#$7F,d0
00016DAA 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00016DAE 08B2 0000 0000             		bclr	#0,(a2,d0.w)
00016DB4                            
00016DB4                            Obj6F_Delete:
00016DB4 4EF9 0000 E034             		jmp	DeleteObject
00016DBA                            ; ===========================================================================
00016DBA 0000                       Obj6F_Index:	dc.w Obj6F_Main-Obj6F_Index
00016DBC 0000                       		dc.w loc_163D8-Obj6F_Index
00016DBE                            ; ===========================================================================
00016DBE                            
00016DBE                            Obj6F_Main:				; XREF: Obj6F_Index
00016DBE 1028 0028                  		move.b	$28(a0),d0
00016DC2 6B00 0000                  		bmi.w	loc_16380
00016DC6 5428 0024                  		addq.b	#2,$24(a0)
00016DCA 217C 0001 6422 0004        		move.l	#Map_obj69a,4(a0)
00016DD2 317C 04DF 0002             		move.w	#$4DF,2(a0)
00016DD8 117C 0010 0019             		move.b	#$10,$19(a0)
00016DDE 0028 0004 0001             		ori.b	#4,1(a0)
00016DE4 117C 0004 0018             		move.b	#4,$18(a0)
00016DEA 7000                       		moveq	#0,d0
00016DEC 1028 0028                  		move.b	$28(a0),d0
00016DF0 3200                       		move.w	d0,d1
00016DF2 E648                       		lsr.w	#3,d0
00016DF4 0240 001E                  		andi.w	#$1E,d0
00016DF8 45FA 0000                  		lea	off_164A6(pc),a2
00016DFC D4F2 0000                  		adda.w	(a2,d0.w),a2
00016E00 315A 0038                  		move.w	(a2)+,$38(a0)
00016E04 315A 0030                  		move.w	(a2)+,$30(a0)
00016E08 214A 003C                  		move.l	a2,$3C(a0)
00016E0C 0241 000F                  		andi.w	#$F,d1
00016E10 E549                       		lsl.w	#2,d1
00016E12 1141 0038                  		move.b	d1,$38(a0)
00016E16 117C 0004 003A             		move.b	#4,$3A(a0)
00016E1C 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00016E20 6700                       		beq.s	loc_16356
00016E22 117C 0001 003B             		move.b	#1,$3B(a0)
00016E28 4428 003A                  		neg.b	$3A(a0)
00016E2C 7200                       		moveq	#0,d1
00016E2E 1228 0038                  		move.b	$38(a0),d1
00016E32 D228 003A                  		add.b	$3A(a0),d1
00016E36 B228 0039                  		cmp.b	$39(a0),d1
00016E3A 6500                       		bcs.s	loc_16352
00016E3C 1001                       		move.b	d1,d0
00016E3E 7200                       		moveq	#0,d1
00016E40 4A00                       		tst.b	d0
00016E42 6A00                       		bpl.s	loc_16352
00016E44 1228 0039                  		move.b	$39(a0),d1
00016E48 5901                       		subq.b	#4,d1
00016E4A                            
00016E4A                            loc_16352:
00016E4A 1141 0038                  		move.b	d1,$38(a0)
00016E4E                            
00016E4E                            loc_16356:
00016E4E 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
00016E54 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
00016E5A 4A41                       		tst.w	d1
00016E5C 6600                       		bne.s	loc_1636C
00016E5E 117C 0001 001C             		move.b	#1,$1C(a0)
00016E64                            
00016E64                            loc_1636C:
00016E64 0C41 0008                  		cmpi.w	#8,d1
00016E68 6600                       		bne.s	loc_16378
00016E6A 117C 0000 001C             		move.b	#0,$1C(a0)
00016E70                            
00016E70                            loc_16378:
00016E70 6100 C0C6                  		bsr.w	Obj63_ChangeDir
00016E74 6000 0000                  		bra.w	loc_163D8
00016E78                            ; ===========================================================================
00016E78                            
00016E78                            loc_16380:				; XREF: Obj6F_Main
00016E78 1140 002F                  		move.b	d0,$2F(a0)
00016E7C 0240 007F                  		andi.w	#$7F,d0
00016E80 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00016E84 08F2 0000 0000             		bset	#0,(a2,d0.w)
00016E8A 6700                       		beq.s	loc_1639A
00016E8C 4EF9 0000 E034             		jmp	DeleteObject
00016E92                            ; ===========================================================================
00016E92                            
00016E92                            loc_1639A:
00016E92 D040                       		add.w	d0,d0
00016E94 0240 001E                  		andi.w	#$1E,d0
00016E98 0640 0080                  		addi.w	#$80,d0
00016E9C 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
00016EA2 D4F2 0000                  		adda.w	(a2,d0.w),a2
00016EA6 321A                       		move.w	(a2)+,d1
00016EA8 2248                       		movea.l	a0,a1
00016EAA 6000                       		bra.s	Obj6F_LoadPform
00016EAC                            ; ===========================================================================
00016EAC                            
00016EAC                            Obj6F_Loop:
00016EAC 4EB9 0000 E47E             		jsr	SingleObjLoad
00016EB2 6600                       		bne.s	loc_163D0
00016EB4                            
00016EB4                            Obj6F_LoadPform:			; XREF: loc_1639A
00016EB4 12BC 006F                  		move.b	#$6F,0(a1)
00016EB8 335A 0008                  		move.w	(a2)+,8(a1)
00016EBC 335A 000C                  		move.w	(a2)+,$C(a1)
00016EC0 301A                       		move.w	(a2)+,d0
00016EC2 1340 0028                  		move.b	d0,$28(a1)
00016EC6                            
00016EC6                            loc_163D0:
00016EC6 51C9 FFE4                  		dbf	d1,Obj6F_Loop
00016ECA                            
00016ECA 588F                       		addq.l	#4,sp
00016ECC 4E75                       		rts	
00016ECE                            ; ===========================================================================
00016ECE                            
00016ECE                            loc_163D8:				; XREF: Obj6F_Index
00016ECE 43F9 0000 0000             		lea	(Ani_obj6F).l,a1
00016ED4 4EB9 0000 B056             		jsr	AnimateSprite
00016EDA 4A28 001A                  		tst.b	$1A(a0)
00016EDE 6600                       		bne.s	loc_16404
00016EE0 3F28 0008                  		move.w	8(a0),-(sp)
00016EE4 6100 0000                  		bsr.w	loc_16424
00016EE8 323C 001B                  		move.w	#$1B,d1
00016EEC 343C 0007                  		move.w	#7,d2
00016EF0 3602                       		move.w	d2,d3
00016EF2 5243                       		addq.w	#1,d3
00016EF4 381F                       		move.w	(sp)+,d4
00016EF6 6000 94D0                  		bra.w	SolidObject
00016EFA                            ; ===========================================================================
00016EFA                            
00016EFA                            loc_16404:
00016EFA 0828 0003 0022             		btst	#3,$22(a0)
00016F00 6700                       		beq.s	loc_16420
00016F02 43F8 D000                  		lea	($FFFFD000).w,a1
00016F06 08A9 0003 0022             		bclr	#3,$22(a1)
00016F0C 08A8 0003 0022             		bclr	#3,$22(a0)
00016F12 4228 0025                  		clr.b	$25(a0)
00016F16                            
00016F16                            loc_16420:
00016F16 6000 0002                  		bra.w	*+4
00016F1A                            
00016F1A                            loc_16424:
00016F1A 3028 0008                  		move.w	8(a0),d0
00016F1E B068 0034                  		cmp.w	$34(a0),d0
00016F22 6600                       		bne.s	loc_16484
00016F24 3028 000C                  		move.w	$C(a0),d0
00016F28 B068 0036                  		cmp.w	$36(a0),d0
00016F2C 6600                       		bne.s	loc_16484
00016F2E 7200                       		moveq	#0,d1
00016F30 1228 0038                  		move.b	$38(a0),d1
00016F34 D228 003A                  		add.b	$3A(a0),d1
00016F38 B228 0039                  		cmp.b	$39(a0),d1
00016F3C 6500                       		bcs.s	loc_16456
00016F3E 1001                       		move.b	d1,d0
00016F40 7200                       		moveq	#0,d1
00016F42 4A00                       		tst.b	d0
00016F44 6A00                       		bpl.s	loc_16456
00016F46 1228 0039                  		move.b	$39(a0),d1
00016F4A 5901                       		subq.b	#4,d1
00016F4C                            
00016F4C                            loc_16456:
00016F4C 1141 0038                  		move.b	d1,$38(a0)
00016F50 2268 003C                  		movea.l	$3C(a0),a1
00016F54 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
00016F5A 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
00016F60 4A41                       		tst.w	d1
00016F62 6600                       		bne.s	loc_16474
00016F64 117C 0001 001C             		move.b	#1,$1C(a0)
00016F6A                            
00016F6A                            loc_16474:
00016F6A 0C41 0008                  		cmpi.w	#8,d1
00016F6E 6600                       		bne.s	loc_16480
00016F70 117C 0000 001C             		move.b	#0,$1C(a0)
00016F76                            
00016F76                            loc_16480:
00016F76 6100 BFC0                  		bsr.w	Obj63_ChangeDir
00016F7A                            
00016F7A                            loc_16484:
00016F7A 4EF9 0000 DFD2             		jmp	SpeedToPos
00016F80                            ; ===========================================================================
00016F80                            Ani_obj6F:
00016F80                            	include "_anim\obj6F.asm"
00016F80                            ; ---------------------------------------------------------------------------
00016F80                            ; Animation script - platform on conveyor belt (SBZ)
00016F80                            ; ---------------------------------------------------------------------------
00016F80 0000                       		dc.w byte_1648E-Ani_obj6F
00016F82 0000                       		dc.w byte_164A2-Ani_obj6F
00016F84 0000 0102 0304 4342 4140+  byte_1648E:	dc.b 0,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00016F91 6423 2221 00FF 00          		dc.b $64, $23, $22, $21, 0, $FF, 0
00016F98 0F00 FF                    byte_164A2:	dc.b $F, 0, $FF
00016F9C 00                         		even
00016F9C 00                         		even
00016F9C                            
00016F9C 0000 0000 0000             off_164A6:	dc.w word_164B2-off_164A6, word_164C6-off_164A6, word_164DA-off_164A6
00016FA2 0000 0000 0000             		dc.w word_164EE-off_164A6, word_16502-off_164A6, word_16516-off_164A6
00016FA8 0010 0E80 0E14 0370 0EEF+  word_164B2:	dc.w $10, $E80,	$E14, $370, $EEF, $302,	$EEF, $340, $E14, $3AE
00016FBC 0010 0F80 0F14 02E0 0FEF+  word_164C6:	dc.w $10, $F80,	$F14, $2E0, $FEF, $272,	$FEF, $2B0, $F14, $31E
00016FD0 0010 1080 1014 0270 10EF+  word_164DA:	dc.w $10, $1080, $1014,	$270, $10EF, $202, $10EF, $240,	$1014, $2AE
00016FE4 0010 0F80 0F14 0570 0FEF+  word_164EE:	dc.w $10, $F80,	$F14, $570, $FEF, $502,	$FEF, $540, $F14, $5AE
00016FF8 0010 1B80 1B14 0670 1BEF+  word_16502:	dc.w $10, $1B80, $1B14,	$670, $1BEF, $602, $1BEF, $640,	$1B14, $6AE
0001700C 0010 1C80 1C14 05E0 1CEF+  word_16516:	dc.w $10, $1C80, $1C14,	$5E0, $1CEF, $572, $1CEF, $5B0,	$1C14, $61E
00017020                            ; ===========================================================================
00017020                            ; ---------------------------------------------------------------------------
00017020                            ; Object 70 - large girder block (SBZ)
00017020                            ; ---------------------------------------------------------------------------
00017020                            
00017020                            Obj70:					; XREF: Obj_Index
00017020 7000                       		moveq	#0,d0
00017022 1028 0024                  		move.b	$24(a0),d0
00017026 323B 0000                  		move.w	Obj70_Index(pc,d0.w),d1
0001702A 4EFB 1000                  		jmp	Obj70_Index(pc,d1.w)
0001702E                            ; ===========================================================================
0001702E 0000                       Obj70_Index:	dc.w Obj70_Main-Obj70_Index
00017030 0000                       		dc.w Obj70_Action-Obj70_Index
00017032                            ; ===========================================================================
00017032                            
00017032                            Obj70_Main:				; XREF: Obj70_Index
00017032 5428 0024                  		addq.b	#2,$24(a0)
00017036 217C 0000 0000 0004        		move.l	#Map_obj70,4(a0)
0001703E 317C 42F0 0002             		move.w	#$42F0,2(a0)
00017044 0028 0004 0001             		ori.b	#4,1(a0)
0001704A 117C 0004 0018             		move.b	#4,$18(a0)
00017050 117C 0060 0019             		move.b	#$60,$19(a0)
00017056 117C 0018 0016             		move.b	#$18,$16(a0)
0001705C 3168 0008 0032             		move.w	8(a0),$32(a0)
00017062 3168 000C 0030             		move.w	$C(a0),$30(a0)
00017068 6100 0000                  		bsr.w	Obj70_Move2
0001706C                            
0001706C                            Obj70_Action:				; XREF: Obj70_Index
0001706C 3F28 0008                  		move.w	8(a0),-(sp)
00017070 4A68 003A                  		tst.w	$3A(a0)
00017074 6700                       		beq.s	Obj70_Move
00017076 5368 003A                  		subq.w	#1,$3A(a0)
0001707A 6600                       		bne.s	Obj70_Solid
0001707C                            
0001707C                            Obj70_Move:
0001707C 4EB9 0000 DFD2             		jsr	SpeedToPos
00017082 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from movement duration
00017086 6600                       		bne.s	Obj70_Solid	; if time remains, branch
00017088 6100 0000                  		bsr.w	Obj70_Move2	; if time is zero, branch
0001708C                            
0001708C                            Obj70_Solid:
0001708C 381F                       		move.w	(sp)+,d4
0001708E 4A28 0001                  		tst.b	1(a0)
00017092 6A00                       		bpl.s	Obj70_ChkDel
00017094 7200                       		moveq	#0,d1
00017096 1228 0019                  		move.b	$19(a0),d1
0001709A 0641 000B                  		addi.w	#$B,d1
0001709E 7400                       		moveq	#0,d2
000170A0 1428 0016                  		move.b	$16(a0),d2
000170A4 3602                       		move.w	d2,d3
000170A6 5243                       		addq.w	#1,d3
000170A8 6100 931E                  		bsr.w	SolidObject
000170AC                            
000170AC                            Obj70_ChkDel:
000170AC 3028 0032                  		move.w	$32(a0),d0
000170B0 0240 FF80                  		andi.w	#$FF80,d0
000170B4 3238 F700                  		move.w	($FFFFF700).w,d1
000170B8 0441 0080                  		subi.w	#$80,d1
000170BC 0241 FF80                  		andi.w	#$FF80,d1
000170C0 9041                       		sub.w	d1,d0
000170C2 0C40 0280                  		cmpi.w	#$280,d0
000170C6 6200                       		bhi.s	Obj70_Delete
000170C8 4EF9 0000 DFF8             		jmp	DisplaySprite
000170CE                            ; ===========================================================================
000170CE                            
000170CE                            Obj70_Delete:
000170CE 4EF9 0000 E034             		jmp	DeleteObject
000170D4                            ; ===========================================================================
000170D4                            
000170D4                            Obj70_Move2:				; XREF: Obj70_Main
000170D4 1028 0038                  		move.b	$38(a0),d0
000170D8 0240 0018                  		andi.w	#$18,d0
000170DC 43F9 0000 0000             		lea	(Obj70_MoveData).l,a1
000170E2 43F1 0000                  		lea	(a1,d0.w),a1
000170E6 3159 0010                  		move.w	(a1)+,$10(a0)
000170EA 3159 0012                  		move.w	(a1)+,$12(a0)
000170EE 3159 0034                  		move.w	(a1)+,$34(a0)
000170F2 5028 0038                  		addq.b	#8,$38(a0)	; use next movedata set
000170F6 317C 0007 003A             		move.w	#7,$3A(a0)
000170FC 4E75                       		rts	
000170FE                            ; ===========================================================================
000170FE 0100 0000 0060 0000        Obj70_MoveData:	dc.w   $100,	 0,   $60,     0 ; x-speed, y-speed, duration, blank
00017106 0000 0100 0030 0000        		dc.w	  0,  $100,   $30,     0
0001710E FF00 FFC0 0060 0000        		dc.w  $FF00, $FFC0,   $60,     0
00017116 0000 FF00 0018 0000        		dc.w	  0, $FF00,   $18,     0
0001711E                            ; ---------------------------------------------------------------------------
0001711E                            ; Sprite mappings - large girder block (SBZ)
0001711E                            ; ---------------------------------------------------------------------------
0001711E                            Map_obj70:
0001711E                            	include "_maps\obj70.asm"
0001711E                            ; ---------------------------------------------------------------------------
0001711E                            ; Sprite mappings - large girder block (SBZ)
0001711E                            ; ---------------------------------------------------------------------------
0001711E 0000                       		dc.w byte_1662A-Map_obj70
00017120 0C                         byte_1662A:	dc.b $C
00017121 E80E 0000 A0               		dc.b $E8, $E, 0, 0, $A0
00017126 000E 1000 A0               		dc.b 0,	$E, $10, 0, $A0
0001712B E80E 0006 C0               		dc.b $E8, $E, 0, 6, $C0
00017130 000E 1006 C0               		dc.b 0,	$E, $10, 6, $C0
00017135 E80E 0006 E0               		dc.b $E8, $E, 0, 6, $E0
0001713A 000E 1006 E0               		dc.b 0,	$E, $10, 6, $E0
0001713F E80E 0006 00               		dc.b $E8, $E, 0, 6, 0
00017144 000E 1006 00               		dc.b 0,	$E, $10, 6, 0
00017149 E80E 0006 20               		dc.b $E8, $E, 0, 6, $20
0001714E 000E 1006 20               		dc.b 0,	$E, $10, 6, $20
00017153 E80E 0006 40               		dc.b $E8, $E, 0, 6, $40
00017158 000E 1006 40               		dc.b 0,	$E, $10, 6, $40
0001715E 00                         		even
0001715E 00                         		even
0001715E                            
0001715E                            ; ===========================================================================
0001715E                            ; ---------------------------------------------------------------------------
0001715E                            ; Object 72 - teleporter (SBZ)
0001715E                            ; ---------------------------------------------------------------------------
0001715E                            
0001715E                            Obj72:					; XREF: Obj_Index
0001715E 7000                       		moveq	#0,d0
00017160 1028 0024                  		move.b	$24(a0),d0
00017164 323B 0000                  		move.w	Obj72_Index(pc,d0.w),d1
00017168 4EBB 1000                  		jsr	Obj72_Index(pc,d1.w)
0001716C 3028 0008                  		move.w	8(a0),d0
00017170 0240 FF80                  		andi.w	#$FF80,d0
00017174 3238 F700                  		move.w	($FFFFF700).w,d1
00017178 0441 0080                  		subi.w	#$80,d1
0001717C 0241 FF80                  		andi.w	#$FF80,d1
00017180 9041                       		sub.w	d1,d0
00017182 0C40 0280                  		cmpi.w	#$280,d0
00017186 6200                       		bhi.s	Obj72_Delete
00017188 4E75                       		rts	
0001718A                            ; ===========================================================================
0001718A                            
0001718A                            Obj72_Delete:
0001718A 4EF9 0000 E034             		jmp	DeleteObject
00017190                            ; ===========================================================================
00017190 0000                       Obj72_Index:	dc.w Obj72_Main-Obj72_Index
00017192 0000                       		dc.w loc_166C8-Obj72_Index
00017194 0000                       		dc.w loc_1675E-Obj72_Index
00017196 0000                       		dc.w loc_16798-Obj72_Index
00017198                            ; ===========================================================================
00017198                            
00017198                            Obj72_Main:				; XREF: Obj72_Index
00017198 5428 0024                  		addq.b	#2,$24(a0)
0001719C 1028 0028                  		move.b	$28(a0),d0
000171A0 D040                       		add.w	d0,d0
000171A2 0240 001E                  		andi.w	#$1E,d0
000171A6 45FA 0000                  		lea	Obj72_Data(pc),a2
000171AA D4F2 0000                  		adda.w	(a2,d0.w),a2
000171AE 315A 003A                  		move.w	(a2)+,$3A(a0)
000171B2 214A 003C                  		move.l	a2,$3C(a0)
000171B6 315A 0036                  		move.w	(a2)+,$36(a0)
000171BA 315A 0038                  		move.w	(a2)+,$38(a0)
000171BE                            
000171BE                            loc_166C8:				; XREF: Obj72_Index
000171BE 43F8 D000                  		lea	($FFFFD000).w,a1
000171C2 3029 0008                  		move.w	8(a1),d0
000171C6 9068 0008                  		sub.w	8(a0),d0
000171CA 0828 0000 0022             		btst	#0,$22(a0)
000171D0 6700                       		beq.s	loc_166E0
000171D2 0640 000F                  		addi.w	#$F,d0
000171D6                            
000171D6                            loc_166E0:
000171D6 0C40 0010                  		cmpi.w	#$10,d0
000171DA 6400                       		bcc.s	locret_1675C
000171DC 3229 000C                  		move.w	$C(a1),d1
000171E0 9268 000C                  		sub.w	$C(a0),d1
000171E4 0641 0020                  		addi.w	#$20,d1
000171E8 0C41 0040                  		cmpi.w	#$40,d1
000171EC 6400                       		bcc.s	locret_1675C
000171EE 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000171F2 6600                       		bne.s	locret_1675C
000171F4 0C28 0007 0028             		cmpi.b	#7,$28(a0)
000171FA 6600                       		bne.s	loc_1670E
000171FC 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w
00017202 6500                       		bcs.s	locret_1675C
00017204                            
00017204                            loc_1670E:
00017204 5428 0024                  		addq.b	#2,$24(a0)
00017208 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
0001720E 137C 0002 001C             		move.b	#2,$1C(a1)	; use Sonic's rolling animation
00017214 337C 0800 0014             		move.w	#$800,$14(a1)
0001721A 337C 0000 0010             		move.w	#0,$10(a1)
00017220 337C 0000 0012             		move.w	#0,$12(a1)
00017226 08A8 0005 0022             		bclr	#5,$22(a0)
0001722C 08A9 0005 0022             		bclr	#5,$22(a1)
00017232 08E9 0001 0022             		bset	#1,$22(a1)
00017238 3368 0008 0008             		move.w	8(a0),8(a1)
0001723E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00017244 4228 0032                  		clr.b	$32(a0)
00017248 303C 00BE                  		move.w	#$BE,d0
0001724C 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play Sonic rolling sound
00017252                            
00017252                            locret_1675C:
00017252 4E75                       		rts	
00017254                            ; ===========================================================================
00017254                            
00017254                            loc_1675E:				; XREF: Obj72_Index
00017254 43F8 D000                  		lea	($FFFFD000).w,a1
00017258 1028 0032                  		move.b	$32(a0),d0
0001725C 5428 0032                  		addq.b	#2,$32(a0)
00017260 4EB9 0000 2D6C             		jsr	(CalcSine).l
00017266 EA40                       		asr.w	#5,d0
00017268 3428 000C                  		move.w	$C(a0),d2
0001726C 9440                       		sub.w	d0,d2
0001726E 3342 000C                  		move.w	d2,$C(a1)
00017272 0C28 0080 0032             		cmpi.b	#$80,$32(a0)
00017278 6600                       		bne.s	locret_16796
0001727A 6100 0000                  		bsr.w	sub_1681C
0001727E 5428 0024                  		addq.b	#2,$24(a0)
00017282 303C 00BC                  		move.w	#$BC,d0
00017286 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play teleport sound
0001728C                            
0001728C                            locret_16796:
0001728C 4E75                       		rts	
0001728E                            ; ===========================================================================
0001728E                            
0001728E                            loc_16798:				; XREF: Obj72_Index
0001728E 588F                       		addq.l	#4,sp
00017290 43F8 D000                  		lea	($FFFFD000).w,a1
00017294 5328 002E                  		subq.b	#1,$2E(a0)
00017298 6A00                       		bpl.s	loc_167DA
0001729A 3368 0036 0008             		move.w	$36(a0),8(a1)
000172A0 3368 0038 000C             		move.w	$38(a0),$C(a1)
000172A6 7200                       		moveq	#0,d1
000172A8 1228 003A                  		move.b	$3A(a0),d1
000172AC 5801                       		addq.b	#4,d1
000172AE B228 003B                  		cmp.b	$3B(a0),d1
000172B2 6500                       		bcs.s	loc_167C2
000172B4 7200                       		moveq	#0,d1
000172B6 6000                       		bra.s	loc_16800
000172B8                            ; ===========================================================================
000172B8                            
000172B8                            loc_167C2:
000172B8 1141 003A                  		move.b	d1,$3A(a0)
000172BC 2468 003C                  		movea.l	$3C(a0),a2
000172C0 3172 1000 0036             		move.w	(a2,d1.w),$36(a0)
000172C6 3172 1002 0038             		move.w	2(a2,d1.w),$38(a0)
000172CC 6000 0000                  		bra.w	sub_1681C
000172D0                            ; ===========================================================================
000172D0                            
000172D0                            loc_167DA:
000172D0 2429 0008                  		move.l	8(a1),d2
000172D4 2629 000C                  		move.l	$C(a1),d3
000172D8 3029 0010                  		move.w	$10(a1),d0
000172DC 48C0                       		ext.l	d0
000172DE E180                       		asl.l	#8,d0
000172E0 D480                       		add.l	d0,d2
000172E2 3029 0012                  		move.w	$12(a1),d0
000172E6 48C0                       		ext.l	d0
000172E8 E180                       		asl.l	#8,d0
000172EA D680                       		add.l	d0,d3
000172EC 2342 0008                  		move.l	d2,8(a1)
000172F0 2343 000C                  		move.l	d3,$C(a1)
000172F4 4E75                       		rts	
000172F6                            ; ===========================================================================
000172F6                            
000172F6                            loc_16800:
000172F6 0269 07FF 000C             		andi.w	#$7FF,$C(a1)
000172FC 4228 0024                  		clr.b	$24(a0)
00017300 4238 F7C8                  		clr.b	($FFFFF7C8).w
00017304 337C 0000 0010             		move.w	#0,$10(a1)
0001730A 337C 0200 0012             		move.w	#$200,$12(a1)
00017310 4E75                       		rts	
00017312                            
00017312                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017312                            
00017312                            
00017312                            sub_1681C:
00017312 7000                       		moveq	#0,d0
00017314 343C 1000                  		move.w	#$1000,d2
00017318 3028 0036                  		move.w	$36(a0),d0
0001731C 9069 0008                  		sub.w	8(a1),d0
00017320 6C00                       		bge.s	loc_16830
00017322 4440                       		neg.w	d0
00017324 4442                       		neg.w	d2
00017326                            
00017326                            loc_16830:
00017326 7200                       		moveq	#0,d1
00017328 363C 1000                  		move.w	#$1000,d3
0001732C 3228 0038                  		move.w	$38(a0),d1
00017330 9269 000C                  		sub.w	$C(a1),d1
00017334 6C00                       		bge.s	loc_16844
00017336 4441                       		neg.w	d1
00017338 4443                       		neg.w	d3
0001733A                            
0001733A                            loc_16844:
0001733A B240                       		cmp.w	d0,d1
0001733C 6500                       		bcs.s	loc_1687A
0001733E 7200                       		moveq	#0,d1
00017340 3228 0038                  		move.w	$38(a0),d1
00017344 9269 000C                  		sub.w	$C(a1),d1
00017348 4841                       		swap	d1
0001734A 83C3                       		divs.w	d3,d1
0001734C 7000                       		moveq	#0,d0
0001734E 3028 0036                  		move.w	$36(a0),d0
00017352 9069 0008                  		sub.w	8(a1),d0
00017356 6700                       		beq.s	loc_16866
00017358 4840                       		swap	d0
0001735A 81C1                       		divs.w	d1,d0
0001735C                            
0001735C                            loc_16866:
0001735C 3340 0010                  		move.w	d0,$10(a1)
00017360 3343 0012                  		move.w	d3,$12(a1)
00017364 4A41                       		tst.w	d1
00017366 6A00                       		bpl.s	loc_16874
00017368 4441                       		neg.w	d1
0001736A                            
0001736A                            loc_16874:
0001736A 3141 002E                  		move.w	d1,$2E(a0)
0001736E 4E75                       		rts	
00017370                            ; ===========================================================================
00017370                            
00017370                            loc_1687A:
00017370 7000                       		moveq	#0,d0
00017372 3028 0036                  		move.w	$36(a0),d0
00017376 9069 0008                  		sub.w	8(a1),d0
0001737A 4840                       		swap	d0
0001737C 81C2                       		divs.w	d2,d0
0001737E 7200                       		moveq	#0,d1
00017380 3228 0038                  		move.w	$38(a0),d1
00017384 9269 000C                  		sub.w	$C(a1),d1
00017388 6700                       		beq.s	loc_16898
0001738A 4841                       		swap	d1
0001738C 83C0                       		divs.w	d0,d1
0001738E                            
0001738E                            loc_16898:
0001738E 3341 0012                  		move.w	d1,$12(a1)
00017392 3342 0010                  		move.w	d2,$10(a1)
00017396 4A40                       		tst.w	d0
00017398 6A00                       		bpl.s	loc_168A6
0001739A 4440                       		neg.w	d0
0001739C                            
0001739C                            loc_168A6:
0001739C 3140 002E                  		move.w	d0,$2E(a0)
000173A0 4E75                       		rts	
000173A2                            ; End of function sub_1681C
000173A2                            
000173A2                            ; ===========================================================================
000173A2 0000 0000 0000             Obj72_Data:	dc.w word_168BC-Obj72_Data, word_168C2-Obj72_Data, word_168C8-Obj72_Data
000173A8 0000 0000 0000             		dc.w word_168E6-Obj72_Data, word_168EC-Obj72_Data, word_1690A-Obj72_Data
000173AE 0000 0000                  		dc.w word_16910-Obj72_Data, word_1692E-Obj72_Data
000173B2 0004 0794 098C             word_168BC:	dc.w 4,	$794, $98C
000173B8 0004 0094 038C             word_168C2:	dc.w 4,	$94, $38C
000173BE 001C 0794 02E8             word_168C8:	dc.w $1C, $794,	$2E8
000173C4 07A4 02C0 07D0             		dc.w $7A4, $2C0, $7D0
000173CA 02AC 0858 02AC             		dc.w $2AC, $858, $2AC
000173D0 0884 0298 0894             		dc.w $884, $298, $894
000173D6 0270 0894 0190             		dc.w $270, $894, $190
000173DC 0004 0894 0690             word_168E6:	dc.w 4,	$894, $690
000173E2 001C 1194 0470             word_168EC:	dc.w $1C, $1194, $470
000173E8 1184 0498 1158             		dc.w $1184, $498, $1158
000173EE 04AC 0FD0 04AC             		dc.w $4AC, $FD0, $4AC
000173F4 0FA4 04C0 0F94             		dc.w $FA4, $4C0, $F94
000173FA 04E8 0F94 0590             		dc.w $4E8, $F94, $590
00017400 0004 1294 0490             word_1690A:	dc.w 4,	$1294, $490
00017406 001C 1594 FFE8             word_16910:	dc.w $1C, $1594, $FFE8
0001740C 1584 FFC0 1560             		dc.w $1584, $FFC0, $1560
00017412 FFAC 14D0 FFAC             		dc.w $FFAC, $14D0, $FFAC
00017418 14A4 FF98 1494             		dc.w $14A4, $FF98, $1494
0001741E FF70 1494 FD90             		dc.w $FF70, $1494, $FD90
00017424 0004 0894 0090             word_1692E:	dc.w 4,	$894, $90
0001742A                            ; ===========================================================================
0001742A                            ; ---------------------------------------------------------------------------
0001742A                            ; Object 78 - Caterkiller enemy	(MZ, SBZ)
0001742A                            ; ---------------------------------------------------------------------------
0001742A                            
0001742A                            Obj78:					; XREF: Obj_Index
0001742A 7000                       		moveq	#0,d0
0001742C 1028 0024                  		move.b	$24(a0),d0
00017430 323B 0000                  		move.w	Obj78_Index(pc,d0.w),d1
00017434 4EFB 1000                  		jmp	Obj78_Index(pc,d1.w)
00017438                            ; ===========================================================================
00017438 0000                       Obj78_Index:	dc.w Obj78_Main-Obj78_Index
0001743A 0000                       		dc.w Obj78_Action-Obj78_Index
0001743C 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
0001743E 0000                       		dc.w Obj78_BodySeg2-Obj78_Index
00017440 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
00017442 0000                       		dc.w Obj78_Delete-Obj78_Index
00017444 0000                       		dc.w loc_16CC0-Obj78_Index
00017446                            ; ===========================================================================
00017446                            
00017446                            locret_16950:
00017446 4E75                       		rts	
00017448                            ; ===========================================================================
00017448                            
00017448                            Obj78_Main:				; XREF: Obj78_Index
00017448 117C 0007 0016             		move.b	#7,$16(a0)
0001744E 117C 0008 0017             		move.b	#8,$17(a0)
00017454 4EB9 0000 DF60             		jsr	ObjectFall
0001745A 4EBA E4A6                  		jsr	ObjHitFloor
0001745E 4A41                       		tst.w	d1
00017460 6AE4                       		bpl.s	locret_16950
00017462 D368 000C                  		add.w	d1,$C(a0)
00017466 4268 0012                  		clr.w	$12(a0)
0001746A 5428 0024                  		addq.b	#2,$24(a0)
0001746E 217C 0000 0000 0004        		move.l	#Map_obj78,4(a0)
00017476 317C 22B0 0002             		move.w	#$22B0,2(a0)
0001747C 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; if level is SBZ, branch
00017482 6700                       		beq.s	loc_16996
00017484 317C 24FF 0002             		move.w	#$24FF,2(a0)	; MZ specific code
0001748A                            
0001748A                            loc_16996:
0001748A 0228 0003 0001             		andi.b	#3,1(a0)
00017490 0028 0004 0001             		ori.b	#4,1(a0)
00017496 1168 0001 0022             		move.b	1(a0),$22(a0)
0001749C 117C 0004 0018             		move.b	#4,$18(a0)
000174A2 117C 0008 0019             		move.b	#8,$19(a0)
000174A8 117C 000B 0020             		move.b	#$B,$20(a0)
000174AE 3428 0008                  		move.w	8(a0),d2
000174B2 7A0C                       		moveq	#$C,d5
000174B4 0828 0000 0022             		btst	#0,$22(a0)
000174BA 6700                       		beq.s	loc_169CA
000174BC 4445                       		neg.w	d5
000174BE                            
000174BE                            loc_169CA:
000174BE 1C3C 0004                  		move.b	#4,d6
000174C2 7600                       		moveq	#0,d3
000174C4 7804                       		moveq	#4,d4
000174C6 2448                       		movea.l	a0,a2
000174C8 7202                       		moveq	#2,d1
000174CA                            
000174CA                            Obj78_LoadBody:
000174CA 4EB9 0000 E494             		jsr	SingleObjLoad2
000174D0 6600                       		bne.s	Obj78_QuitLoad
000174D2 12BC 0078                  		move.b	#$78,0(a1)	; load body segment object
000174D6 1346 0024                  		move.b	d6,$24(a1)
000174DA 5406                       		addq.b	#2,d6
000174DC 2368 0004 0004             		move.l	4(a0),4(a1)
000174E2 3368 0002 0002             		move.w	2(a0),2(a1)
000174E8 137C 0005 0018             		move.b	#5,$18(a1)
000174EE 137C 0008 0019             		move.b	#8,$19(a1)
000174F4 137C 00CB 0020             		move.b	#$CB,$20(a1)
000174FA D445                       		add.w	d5,d2
000174FC 3342 0008                  		move.w	d2,8(a1)
00017500 3368 000C 000C             		move.w	$C(a0),$C(a1)
00017506 1368 0022 0022             		move.b	$22(a0),$22(a1)
0001750C 1368 0022 0001             		move.b	$22(a0),1(a1)
00017512 137C 0008 001A             		move.b	#8,$1A(a1)
00017518 234A 003C                  		move.l	a2,$3C(a1)
0001751C 1344 003C                  		move.b	d4,$3C(a1)
00017520 5804                       		addq.b	#4,d4
00017522 2449                       		movea.l	a1,a2
00017524                            
00017524                            Obj78_QuitLoad:
00017524 51C9 FFA4                  		dbf	d1,Obj78_LoadBody ; repeat sequence 2 more times
00017528                            
00017528 117C 0007 002A             		move.b	#7,$2A(a0)
0001752E 4228 003C                  		clr.b	$3C(a0)
00017532                            
00017532                            Obj78_Action:				; XREF: Obj78_Index
00017532 4A28 0022                  		tst.b	$22(a0)
00017536 6B00 0000                  		bmi.w	loc_16C96
0001753A 7000                       		moveq	#0,d0
0001753C 1028 0025                  		move.b	$25(a0),d0
00017540 323B 0000                  		move.w	Obj78_Index2(pc,d0.w),d1
00017544 4EBB 1000                  		jsr	Obj78_Index2(pc,d1.w)
00017548 1228 002B                  		move.b	$2B(a0),d1
0001754C 6A00                       		bpl.s	Obj78_Display
0001754E 43F9 0000 0000             		lea	(Ani_obj78).l,a1
00017554 1028 0026                  		move.b	$26(a0),d0
00017558 0240 007F                  		andi.w	#$7F,d0
0001755C 5828 0026                  		addq.b	#4,$26(a0)
00017560 1031 0000                  		move.b	(a1,d0.w),d0
00017564 6A00                       		bpl.s	Obj78_AniHead
00017566 08A8 0007 002B             		bclr	#7,$2B(a0)
0001756C 6000                       		bra.s	Obj78_Display
0001756E                            ; ===========================================================================
0001756E                            
0001756E                            Obj78_AniHead:
0001756E 0201 0010                  		andi.b	#$10,d1
00017572 D001                       		add.b	d1,d0
00017574 1140 001A                  		move.b	d0,$1A(a0)
00017578                            
00017578                            Obj78_Display:
00017578 3028 0008                  		move.w	8(a0),d0
0001757C 0240 FF80                  		andi.w	#$FF80,d0
00017580 3238 F700                  		move.w	($FFFFF700).w,d1
00017584 0441 0080                  		subi.w	#$80,d1
00017588 0241 FF80                  		andi.w	#$FF80,d1
0001758C 9041                       		sub.w	d1,d0
0001758E 0C40 0280                  		cmpi.w	#$280,d0
00017592 6200 0000                  		bhi.w	Obj78_ChkGone
00017596 4EF9 0000 DFF8             		jmp	DisplaySprite
0001759C                            ; ===========================================================================
0001759C                            
0001759C                            Obj78_ChkGone:
0001759C 45F8 FC00                  		lea	($FFFFFC00).w,a2
000175A0 7000                       		moveq	#0,d0
000175A2 1028 0023                  		move.b	$23(a0),d0
000175A6 6700                       		beq.s	loc_16ABC
000175A8 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000175AE                            
000175AE                            loc_16ABC:
000175AE 117C 000A 0024             		move.b	#$A,$24(a0)	; run "Obj78_Delete" routine
000175B4 4E75                       		rts	
000175B6                            ; ===========================================================================
000175B6                            
000175B6                            Obj78_Delete:				; XREF: Obj78_Index
000175B6 4EF9 0000 E034             		jmp	DeleteObject
000175BC                            ; ===========================================================================
000175BC 0000                       Obj78_Index2:	dc.w Obj78_Move-Obj78_Index2
000175BE 0000                       		dc.w loc_16B02-Obj78_Index2
000175C0                            ; ===========================================================================
000175C0                            
000175C0                            Obj78_Move:				; XREF: Obj78_Index2
000175C0 5328 002A                  		subq.b	#1,$2A(a0)
000175C4 6B00                       		bmi.s	Obj78_Move2
000175C6 4E75                       		rts	
000175C8                            ; ===========================================================================
000175C8                            
000175C8                            Obj78_Move2:
000175C8 5428 0025                  		addq.b	#2,$25(a0)
000175CC 117C 0010 002A             		move.b	#$10,$2A(a0)
000175D2 317C FF40 0010             		move.w	#-$C0,$10(a0)
000175D8 317C 0040 0014             		move.w	#$40,$14(a0)
000175DE 0868 0004 002B             		bchg	#4,$2B(a0)
000175E4 6600                       		bne.s	loc_16AFC
000175E6 4268 0010                  		clr.w	$10(a0)
000175EA 4468 0014                  		neg.w	$14(a0)
000175EE                            
000175EE                            loc_16AFC:
000175EE 08E8 0007 002B             		bset	#7,$2B(a0)
000175F4                            
000175F4                            loc_16B02:				; XREF: Obj78_Index2
000175F4 5328 002A                  		subq.b	#1,$2A(a0)
000175F8 6B00                       		bmi.s	loc_16B5E
000175FA 2F28 0008                  		move.l	8(a0),-(sp)
000175FE 2428 0008                  		move.l	8(a0),d2
00017602 3028 0010                  		move.w	$10(a0),d0
00017606 0828 0000 0022             		btst	#0,$22(a0)
0001760C 6700                       		beq.s	loc_16B1E
0001760E 4440                       		neg.w	d0
00017610                            
00017610                            loc_16B1E:
00017610 48C0                       		ext.l	d0
00017612 E180                       		asl.l	#8,d0
00017614 D480                       		add.l	d0,d2
00017616 2142 0008                  		move.l	d2,8(a0)
0001761A 4EBA E2E6                  		jsr	ObjHitFloor
0001761E 241F                       		move.l	(sp)+,d2
00017620 0C41 FFF8                  		cmpi.w	#-8,d1
00017624 6D00                       		blt.s	loc_16B70
00017626 0C41 000C                  		cmpi.w	#$C,d1
0001762A 6C00                       		bge.s	loc_16B70
0001762C D368 000C                  		add.w	d1,$C(a0)
00017630 4842                       		swap	d2
00017632 B468 0008                  		cmp.w	8(a0),d2
00017636 6700                       		beq.s	locret_16B5C
00017638 7000                       		moveq	#0,d0
0001763A 1028 003C                  		move.b	$3C(a0),d0
0001763E 5228 003C                  		addq.b	#1,$3C(a0)
00017642 0228 000F 003C             		andi.b	#$F,$3C(a0)
00017648 1181 002C                  		move.b	d1,$2C(a0,d0.w)
0001764C                            
0001764C                            locret_16B5C:
0001764C 4E75                       		rts	
0001764E                            ; ===========================================================================
0001764E                            
0001764E                            loc_16B5E:
0001764E 5528 0025                  		subq.b	#2,$25(a0)
00017652 117C 0007 002A             		move.b	#7,$2A(a0)
00017658 317C 0000 0010             		move.w	#0,$10(a0)
0001765E 4E75                       		rts	
00017660                            ; ===========================================================================
00017660                            
00017660                            loc_16B70:
00017660 2142 0008                  		move.l	d2,8(a0)
00017664 0868 0000 0022             		bchg	#0,$22(a0)
0001766A 1168 0022 0001             		move.b	$22(a0),1(a0)
00017670 7000                       		moveq	#0,d0
00017672 1028 003C                  		move.b	$3C(a0),d0
00017676 11BC 0080 002C             		move.b	#$80,$2C(a0,d0.w)
0001767C 5228 003C                  		addq.b	#1,$3C(a0)
00017680 0228 000F 003C             		andi.b	#$F,$3C(a0)
00017686 4E75                       		rts	
00017688                            ; ===========================================================================
00017688                            
00017688                            Obj78_BodySeg2:				; XREF: Obj78_Index
00017688 2268 003C                  		movea.l	$3C(a0),a1
0001768C 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
00017692 6A00                       		bpl.s	Obj78_BodySeg1
00017694 43F9 0000 0000             		lea	(Ani_obj78).l,a1
0001769A 1028 0026                  		move.b	$26(a0),d0
0001769E 0240 007F                  		andi.w	#$7F,d0
000176A2 5828 0026                  		addq.b	#4,$26(a0)
000176A6 4A31 0004                  		tst.b	4(a1,d0.w)
000176AA 6A00                       		bpl.s	Obj78_AniBody
000176AC 5828 0026                  		addq.b	#4,$26(a0)
000176B0                            
000176B0                            Obj78_AniBody:
000176B0 1031 0000                  		move.b	(a1,d0.w),d0
000176B4 5000                       		addq.b	#8,d0
000176B6 1140 001A                  		move.b	d0,$1A(a0)
000176BA                            
000176BA                            Obj78_BodySeg1:				; XREF: Obj78_Index
000176BA 2268 003C                  		movea.l	$3C(a0),a1
000176BE 4A28 0022                  		tst.b	$22(a0)
000176C2 6B00 0000                  		bmi.w	loc_16C90
000176C6 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
000176CC 1169 0025 0025             		move.b	$25(a1),$25(a0)
000176D2 6700 0000                  		beq.w	loc_16C64
000176D6 3169 0014 0014             		move.w	$14(a1),$14(a0)
000176DC 3029 0010                  		move.w	$10(a1),d0
000176E0 D069 0014                  		add.w	$14(a1),d0
000176E4 3140 0010                  		move.w	d0,$10(a0)
000176E8 2428 0008                  		move.l	8(a0),d2
000176EC 2602                       		move.l	d2,d3
000176EE 3028 0010                  		move.w	$10(a0),d0
000176F2 0828 0000 0022             		btst	#0,$22(a0)
000176F8 6700                       		beq.s	loc_16C0C
000176FA 4440                       		neg.w	d0
000176FC                            
000176FC                            loc_16C0C:
000176FC 48C0                       		ext.l	d0
000176FE E180                       		asl.l	#8,d0
00017700 D480                       		add.l	d0,d2
00017702 2142 0008                  		move.l	d2,8(a0)
00017706 4843                       		swap	d3
00017708 B668 0008                  		cmp.w	8(a0),d3
0001770C 6700                       		beq.s	loc_16C64
0001770E 7000                       		moveq	#0,d0
00017710 1028 003C                  		move.b	$3C(a0),d0
00017714 1231 002C                  		move.b	$2C(a1,d0.w),d1
00017718 0C01 0080                  		cmpi.b	#-$80,d1
0001771C 6600                       		bne.s	loc_16C50
0001771E 4843                       		swap	d3
00017720 2143 0008                  		move.l	d3,8(a0)
00017724 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00017728 0868 0000 0022             		bchg	#0,$22(a0)
0001772E 1168 0022 0001             		move.b	$22(a0),1(a0)
00017734 5228 003C                  		addq.b	#1,$3C(a0)
00017738 0228 000F 003C             		andi.b	#$F,$3C(a0)
0001773E 6000                       		bra.s	loc_16C64
00017740                            ; ===========================================================================
00017740                            
00017740                            loc_16C50:
00017740 4881                       		ext.w	d1
00017742 D368 000C                  		add.w	d1,$C(a0)
00017746 5228 003C                  		addq.b	#1,$3C(a0)
0001774A 0228 000F 003C             		andi.b	#$F,$3C(a0)
00017750 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00017754                            
00017754                            loc_16C64:
00017754 0C29 000C 0024             		cmpi.b	#$C,$24(a1)
0001775A 6700                       		beq.s	loc_16C90
0001775C 0C11 0027                  		cmpi.b	#$27,0(a1)
00017760 6700                       		beq.s	loc_16C7C
00017762 0C29 000A 0024             		cmpi.b	#$A,$24(a1)
00017768 6600                       		bne.s	loc_16C82
0001776A                            
0001776A                            loc_16C7C:
0001776A 117C 000A 0024             		move.b	#$A,$24(a0)
00017770                            
00017770                            loc_16C82:
00017770 4EF9 0000 DFF8             		jmp	DisplaySprite
00017776                            
00017776                            ; ===========================================================================
00017776 FE00 FE80 0180 0200        Obj78_FragSpeed:dc.w $FE00, $FE80, $180, $200
0001777E                            ; ===========================================================================
0001777E                            
0001777E                            loc_16C90:
0001777E 08E9 0007 0022             		bset	#7,$22(a1)
00017784                            
00017784                            loc_16C96:
00017784 7000                       		moveq	#0,d0
00017786 1028 0024                  		move.b	$24(a0),d0
0001778A 303B 00E8                  		move.w	Obj78_FragSpeed-2(pc,d0.w),d0
0001778E 0828 0000 0022             		btst	#0,$22(a0)
00017794 6700                       		beq.s	loc_16CAA
00017796 4440                       		neg.w	d0
00017798                            
00017798                            loc_16CAA:
00017798 3140 0010                  		move.w	d0,$10(a0)
0001779C 317C FC00 0012             		move.w	#-$400,$12(a0)
000177A2 117C 000C 0024             		move.b	#$C,$24(a0)
000177A8 0228 00F8 001A             		andi.b	#-8,$1A(a0)
000177AE                            
000177AE                            loc_16CC0:				; XREF: Obj78_Index
000177AE 4EB9 0000 DF60             		jsr	ObjectFall
000177B4 4A68 0012                  		tst.w	$12(a0)
000177B8 6B00                       		bmi.s	loc_16CE0
000177BA 4EBA E146                  		jsr	ObjHitFloor
000177BE 4A41                       		tst.w	d1
000177C0 6A00                       		bpl.s	loc_16CE0
000177C2 D368 000C                  		add.w	d1,$C(a0)
000177C6 317C FC00 0012             		move.w	#-$400,$12(a0)
000177CC                            
000177CC                            loc_16CE0:
000177CC 4A28 0001                  		tst.b	1(a0)
000177D0 6A00 FDCA                  		bpl.w	Obj78_ChkGone
000177D4 4EF9 0000 DFF8             		jmp	DisplaySprite
000177DA                            ; ===========================================================================
000177DA                            Ani_obj78:
000177DA                            	include "_anim\obj78.asm"
000177DA                            ; ---------------------------------------------------------------------------
000177DA                            ; Animation script - Caterkiller enemy (uses non-standard format)
000177DA                            ; ---------------------------------------------------------------------------
000177DA 0000 0000 0000 0000 0000+  	dc.b 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 1
000177EA 0101 0101 0101 0202 0202+  	dc.b 1,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 3, 3, 3, 3, 3
000177FA 0404 0404 0404 0505 0505+  	dc.b 4,	4, 4, 4, 4, 4, 5, 5, 5,	5, 5, 6, 6, 6, 6, 6
0001780A 0606 0707 0707 0707 0707+  	dc.b 6,	6, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, $FF, 7, 7, $FF
0001781A 0707 0707 0707 0707 0707+  	dc.b 7,	7, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, 7, 7, 7, 6
0001782A 0606 0606 0606 0505 0505+  	dc.b 6,	6, 6, 6, 6, 6, 5, 5, 5,	5, 5, 4, 4, 4, 4, 4
0001783A 0403 0303 0303 0202 0202+  	dc.b 4,	3, 3, 3, 3, 3, 2, 2, 2,	2, 2, 1, 1, 1, 1, 1
0001784A 0101 0000 0000 0000 0000+  	dc.b 1,	1, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, $FF, 0, 0, $FF
0001785A                            	even
0001785A                            	even
0001785A                            
0001785A                            ; ---------------------------------------------------------------------------
0001785A                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
0001785A                            ; ---------------------------------------------------------------------------
0001785A                            Map_obj78:
0001785A                            	include "_maps\obj78.asm"
0001785A                            ; ---------------------------------------------------------------------------
0001785A                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
0001785A                            ; ---------------------------------------------------------------------------
0001785A 0000 0000                  		dc.w byte_16D9E-Map_obj78, byte_16DA4-Map_obj78
0001785E 0000 0000                  		dc.w byte_16DAA-Map_obj78, byte_16DB0-Map_obj78
00017862 0000 0000                  		dc.w byte_16DB6-Map_obj78, byte_16DBC-Map_obj78
00017866 0000 0000                  		dc.w byte_16DC2-Map_obj78, byte_16DC8-Map_obj78
0001786A 0000 0000                  		dc.w byte_16DCE-Map_obj78, byte_16DD4-Map_obj78
0001786E 0000 0000                  		dc.w byte_16DDA-Map_obj78, byte_16DE0-Map_obj78
00017872 0000 0000                  		dc.w byte_16DE6-Map_obj78, byte_16DEC-Map_obj78
00017876 0000 0000                  		dc.w byte_16DF2-Map_obj78, byte_16DF8-Map_obj78
0001787A 0000 0000                  		dc.w byte_16DFE-Map_obj78, byte_16E04-Map_obj78
0001787E 0000 0000                  		dc.w byte_16E0A-Map_obj78, byte_16E10-Map_obj78
00017882 0000 0000                  		dc.w byte_16E16-Map_obj78, byte_16E1C-Map_obj78
00017886 0000 0000                  		dc.w byte_16E22-Map_obj78, byte_16E28-Map_obj78
0001788A 01                         byte_16D9E:	dc.b 1
0001788B F206 0000 F8               		dc.b $F2, 6, 0,	0, $F8
00017890 01                         byte_16DA4:	dc.b 1
00017891 F106 0000 F8               		dc.b $F1, 6, 0,	0, $F8
00017896 01                         byte_16DAA:	dc.b 1
00017897 F006 0000 F8               		dc.b $F0, 6, 0,	0, $F8
0001789C 01                         byte_16DB0:	dc.b 1
0001789D EF06 0000 F8               		dc.b $EF, 6, 0,	0, $F8
000178A2 01                         byte_16DB6:	dc.b 1
000178A3 EE06 0000 F8               		dc.b $EE, 6, 0,	0, $F8
000178A8 01                         byte_16DBC:	dc.b 1
000178A9 ED06 0000 F8               		dc.b $ED, 6, 0,	0, $F8
000178AE 01                         byte_16DC2:	dc.b 1
000178AF EC06 0000 F8               		dc.b $EC, 6, 0,	0, $F8
000178B4 01                         byte_16DC8:	dc.b 1
000178B5 EB06 0000 F8               		dc.b $EB, 6, 0,	0, $F8
000178BA 01                         byte_16DCE:	dc.b 1
000178BB F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
000178C0 01                         byte_16DD4:	dc.b 1
000178C1 F705 000C F8               		dc.b $F7, 5, 0,	$C, $F8
000178C6 01                         byte_16DDA:	dc.b 1
000178C7 F605 000C F8               		dc.b $F6, 5, 0,	$C, $F8
000178CC 01                         byte_16DE0:	dc.b 1
000178CD F505 000C F8               		dc.b $F5, 5, 0,	$C, $F8
000178D2 01                         byte_16DE6:	dc.b 1
000178D3 F405 000C F8               		dc.b $F4, 5, 0,	$C, $F8
000178D8 01                         byte_16DEC:	dc.b 1
000178D9 F305 000C F8               		dc.b $F3, 5, 0,	$C, $F8
000178DE 01                         byte_16DF2:	dc.b 1
000178DF F205 000C F8               		dc.b $F2, 5, 0,	$C, $F8
000178E4 01                         byte_16DF8:	dc.b 1
000178E5 F105 000C F8               		dc.b $F1, 5, 0,	$C, $F8
000178EA 01                         byte_16DFE:	dc.b 1
000178EB F206 0006 F8               		dc.b $F2, 6, 0,	6, $F8
000178F0 01                         byte_16E04:	dc.b 1
000178F1 F106 0006 F8               		dc.b $F1, 6, 0,	6, $F8
000178F6 01                         byte_16E0A:	dc.b 1
000178F7 F006 0006 F8               		dc.b $F0, 6, 0,	6, $F8
000178FC 01                         byte_16E10:	dc.b 1
000178FD EF06 0006 F8               		dc.b $EF, 6, 0,	6, $F8
00017902 01                         byte_16E16:	dc.b 1
00017903 EE06 0006 F8               		dc.b $EE, 6, 0,	6, $F8
00017908 01                         byte_16E1C:	dc.b 1
00017909 ED06 0006 F8               		dc.b $ED, 6, 0,	6, $F8
0001790E 01                         byte_16E22:	dc.b 1
0001790F EC06 0006 F8               		dc.b $EC, 6, 0,	6, $F8
00017914 01                         byte_16E28:	dc.b 1
00017915 EB06 0006 F8               		dc.b $EB, 6, 0,	6, $F8
0001791A                            		even
0001791A                            		even
0001791A                            
0001791A                            ; ===========================================================================
0001791A                            ; ---------------------------------------------------------------------------
0001791A                            ; Object 79 - lamppost
0001791A                            ; ---------------------------------------------------------------------------
0001791A                            
0001791A                            Obj79:					; XREF: Obj_Index
0001791A 7000                       		moveq	#0,d0
0001791C 1028 0024                  		move.b	$24(a0),d0
00017920 323B 0000                  		move.w	Obj79_Index(pc,d0.w),d1
00017924 4EBB 1000                  		jsr	Obj79_Index(pc,d1.w)
00017928 4EFA 8776                  		jmp	MarkObjGone
0001792C                            ; ===========================================================================
0001792C 0000                       Obj79_Index:	dc.w Obj79_Main-Obj79_Index
0001792E 0000                       		dc.w Obj79_BlueLamp-Obj79_Index
00017930 0000                       		dc.w Obj79_AfterHit-Obj79_Index
00017932 0000                       		dc.w Obj79_Twirl-Obj79_Index
00017934                            ; ===========================================================================
00017934                            
00017934                            Obj79_Main:				; XREF: Obj79_Index
00017934 5428 0024                  		addq.b	#2,$24(a0)
00017938 217C 0000 0000 0004        		move.l	#Map_obj79,4(a0)
00017940 317C 07A0 0002             		move.w	#$7A0,2(a0)
00017946 117C 0004 0001             		move.b	#4,1(a0)
0001794C 117C 0008 0019             		move.b	#8,$19(a0)
00017952 117C 0005 0018             		move.b	#5,$18(a0)
00017958 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001795C 7000                       		moveq	#0,d0
0001795E 1028 0023                  		move.b	$23(a0),d0
00017962 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00017968 0832 0000 0002             		btst	#0,2(a2,d0.w)
0001796E 6600                       		bne.s	Obj79_RedLamp
00017970 1238 FE30                  		move.b	($FFFFFE30).w,d1
00017974 0201 007F                  		andi.b	#$7F,d1
00017978 1428 0028                  		move.b	$28(a0),d2	; get lamppost number
0001797C 0202 007F                  		andi.b	#$7F,d2
00017980 B202                       		cmp.b	d2,d1		; is lamppost number higher than the number hit?
00017982 6500                       		bcs.s	Obj79_BlueLamp	; if yes, branch
00017984                            
00017984                            Obj79_RedLamp:
00017984 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001798A 117C 0004 0024             		move.b	#4,$24(a0)	; run "Obj79_AfterHit" routine
00017990 117C 0003 001A             		move.b	#3,$1A(a0)	; use red lamppost frame
00017996 4E75                       		rts	
00017998                            ; ===========================================================================
00017998                            
00017998                            Obj79_BlueLamp:				; XREF: Obj79_Index
00017998 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
0001799C 6600 0000                  		bne.w	locret_16F90	; if yes, branch
000179A0 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000179A4 6B00 0000                  		bmi.w	locret_16F90
000179A8 1238 FE30                  		move.b	($FFFFFE30).w,d1
000179AC 0201 007F                  		andi.b	#$7F,d1
000179B0 1428 0028                  		move.b	$28(a0),d2
000179B4 0202 007F                  		andi.b	#$7F,d2
000179B8 B202                       		cmp.b	d2,d1
000179BA 6500                       		bcs.s	Obj79_HitLamp
000179BC 45F8 FC00                  		lea	($FFFFFC00).w,a2
000179C0 7000                       		moveq	#0,d0
000179C2 1028 0023                  		move.b	$23(a0),d0
000179C6 08F2 0000 0002             		bset	#0,2(a2,d0.w)
000179CC 117C 0004 0024             		move.b	#4,$24(a0)
000179D2 117C 0003 001A             		move.b	#3,$1A(a0)
000179D8 6000 0000                  		bra.w	locret_16F90
000179DC                            ; ===========================================================================
000179DC                            
000179DC                            Obj79_HitLamp:
000179DC 3038 D008                  		move.w	($FFFFD008).w,d0
000179E0 9068 0008                  		sub.w	8(a0),d0
000179E4 5040                       		addq.w	#8,d0
000179E6 0C40 0010                  		cmpi.w	#$10,d0
000179EA 6400 0000                  		bcc.w	locret_16F90
000179EE 3038 D00C                  		move.w	($FFFFD00C).w,d0
000179F2 9068 000C                  		sub.w	$C(a0),d0
000179F6 0640 0040                  		addi.w	#$40,d0
000179FA 0C40 0068                  		cmpi.w	#$68,d0
000179FE 6400                       		bcc.s	locret_16F90
00017A00 303C 00A1                  		move.w	#$A1,d0
00017A04 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play lamppost sound
00017A0A 5428 0024                  		addq.b	#2,$24(a0)
00017A0E 4EB9 0000 E47E             		jsr	SingleObjLoad
00017A14 6600                       		bne.s	loc_16F76
00017A16 12BC 0079                  		move.b	#$79,0(a1)	; load twirling	lamp object
00017A1A 137C 0006 0024             		move.b	#6,$24(a1)	; use "Obj79_Twirl" routine
00017A20 3368 0008 0030             		move.w	8(a0),$30(a1)
00017A26 3368 000C 0032             		move.w	$C(a0),$32(a1)
00017A2C 0469 0018 0032             		subi.w	#$18,$32(a1)
00017A32 237C 0000 0000 0004        		move.l	#Map_obj79,4(a1)
00017A3A 337C 07A0 0002             		move.w	#$7A0,2(a1)
00017A40 137C 0004 0001             		move.b	#4,1(a1)
00017A46 137C 0008 0019             		move.b	#8,$19(a1)
00017A4C 137C 0004 0018             		move.b	#4,$18(a1)
00017A52 137C 0002 001A             		move.b	#2,$1A(a1)
00017A58 337C 0020 0036             		move.w	#$20,$36(a1)
00017A5E                            
00017A5E                            loc_16F76:
00017A5E 117C 0001 001A             		move.b	#1,$1A(a0)	; use "post only" frame, with no lamp
00017A64 6100 0000                  		bsr.w	Obj79_StoreInfo
00017A68 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017A6C 7000                       		moveq	#0,d0
00017A6E 1028 0023                  		move.b	$23(a0),d0
00017A72 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00017A78                            
00017A78                            locret_16F90:
00017A78 4E75                       		rts	
00017A7A                            ; ===========================================================================
00017A7A                            
00017A7A                            Obj79_AfterHit:				; XREF: Obj79_Index
00017A7A 4E75                       		rts	
00017A7C                            ; ===========================================================================
00017A7C                            
00017A7C                            Obj79_Twirl:				; XREF: Obj79_Index
00017A7C 5368 0036                  		subq.w	#1,$36(a0)
00017A80 6A00                       		bpl.s	loc_16FA0
00017A82 117C 0004 0024             		move.b	#4,$24(a0)
00017A88                            
00017A88                            loc_16FA0:
00017A88 1028 0026                  		move.b	$26(a0),d0
00017A8C 0428 0010 0026             		subi.b	#$10,$26(a0)
00017A92 0400 0040                  		subi.b	#$40,d0
00017A96 4EB9 0000 2D6C             		jsr	(CalcSine).l
00017A9C C3FC 0C00                  		muls.w	#$C00,d1
00017AA0 4841                       		swap	d1
00017AA2 D268 0030                  		add.w	$30(a0),d1
00017AA6 3141 0008                  		move.w	d1,8(a0)
00017AAA C1FC 0C00                  		muls.w	#$C00,d0
00017AAE 4840                       		swap	d0
00017AB0 D068 0032                  		add.w	$32(a0),d0
00017AB4 3140 000C                  		move.w	d0,$C(a0)
00017AB8 4E75                       		rts	
00017ABA                            ; ===========================================================================
00017ABA                            ; ---------------------------------------------------------------------------
00017ABA                            ; Subroutine to	store information when you hit a lamppost
00017ABA                            ; ---------------------------------------------------------------------------
00017ABA                            
00017ABA                            Obj79_StoreInfo:			; XREF: Obj79_HitLamp
00017ABA 11E8 0028 FE30             		move.b	$28(a0),($FFFFFE30).w 		; lamppost number
00017AC0 11F8 FE30 FE31             		move.b	($FFFFFE30).w,($FFFFFE31).w
00017AC6 31E8 0008 FE32             		move.w	8(a0),($FFFFFE32).w		; x-position
00017ACC 31E8 000C FE34             		move.w	$C(a0),($FFFFFE34).w		; y-position
00017AD2 31F8 FE20 FE36             		move.w	($FFFFFE20).w,($FFFFFE36).w 	; rings
00017AD8 11F8 FE1B FE54             		move.b	($FFFFFE1B).w,($FFFFFE54).w 	; lives
00017ADE 21F8 FE22 FE38             		move.l	($FFFFFE22).w,($FFFFFE38).w 	; time
00017AE4 11F8 F742 FE3C             		move.b	($FFFFF742).w,($FFFFFE3C).w 	; routine counter for dynamic level mod
00017AEA 31F8 F72E FE3E             		move.w	($FFFFF72E).w,($FFFFFE3E).w 	; lower y-boundary of level
00017AF0 31F8 F700 FE40             		move.w	($FFFFF700).w,($FFFFFE40).w 	; screen x-position
00017AF6 31F8 F704 FE42             		move.w	($FFFFF704).w,($FFFFFE42).w 	; screen y-position
00017AFC 31F8 F708 FE44             		move.w	($FFFFF708).w,($FFFFFE44).w 	; bg position
00017B02 31F8 F70C FE46             		move.w	($FFFFF70C).w,($FFFFFE46).w 	; bg position
00017B08 31F8 F710 FE48             		move.w	($FFFFF710).w,($FFFFFE48).w 	; bg position
00017B0E 31F8 F714 FE4A             		move.w	($FFFFF714).w,($FFFFFE4A).w 	; bg position
00017B14 31F8 F718 FE4C             		move.w	($FFFFF718).w,($FFFFFE4C).w 	; bg position
00017B1A 31F8 F71C FE4E             		move.w	($FFFFF71C).w,($FFFFFE4E).w 	; bg position
00017B20 31F8 F648 FE50             		move.w	($FFFFF648).w,($FFFFFE50).w 	; water height
00017B26 11F8 F64D FE52             		move.b	($FFFFF64D).w,($FFFFFE52).w 	; rountine counter for water
00017B2C 11F8 F64E FE53             		move.b	($FFFFF64E).w,($FFFFFE53).w 	; water direction
00017B32 4E75                       		rts	
00017B34                            
00017B34                            ; ---------------------------------------------------------------------------
00017B34                            ; Subroutine to	load stored info when you start	a level	from a lamppost
00017B34                            ; ---------------------------------------------------------------------------
00017B34                            
00017B34                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017B34                            
00017B34                            
00017B34                            Obj79_LoadInfo:				; XREF: LevelSizeLoad
00017B34 11F8 FE31 FE30             		move.b	($FFFFFE31).w,($FFFFFE30).w
00017B3A 31F8 FE32 D008             		move.w	($FFFFFE32).w,($FFFFD008).w
00017B40 31F8 FE34 D00C             		move.w	($FFFFFE34).w,($FFFFD00C).w
00017B46 31F8 FE36 FE20             		move.w	($FFFFFE36).w,($FFFFFE20).w
00017B4C 11F8 FE54 FE1B             		move.b	($FFFFFE54).w,($FFFFFE1B).w
00017B52 4278 FE20                  		clr.w	($FFFFFE20).w
00017B56 4238 FE1B                  		clr.b	($FFFFFE1B).w
00017B5A 21F8 FE38 FE22             		move.l	($FFFFFE38).w,($FFFFFE22).w
00017B60 11FC 003B FE25             		move.b	#59,($FFFFFE25).w
00017B66 5338 FE24                  		subq.b	#1,($FFFFFE24).w
00017B6A 11F8 FE3C F742             		move.b	($FFFFFE3C).w,($FFFFF742).w
00017B70 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
00017B76 31F8 FE3E F72E             		move.w	($FFFFFE3E).w,($FFFFF72E).w
00017B7C 31F8 FE3E F726             		move.w	($FFFFFE3E).w,($FFFFF726).w
00017B82 31F8 FE40 F700             		move.w	($FFFFFE40).w,($FFFFF700).w
00017B88 31F8 FE42 F704             		move.w	($FFFFFE42).w,($FFFFF704).w
00017B8E 31F8 FE44 F708             		move.w	($FFFFFE44).w,($FFFFF708).w
00017B94 31F8 FE46 F70C             		move.w	($FFFFFE46).w,($FFFFF70C).w
00017B9A 31F8 FE48 F710             		move.w	($FFFFFE48).w,($FFFFF710).w
00017BA0 31F8 FE4A F714             		move.w	($FFFFFE4A).w,($FFFFF714).w
00017BA6 31F8 FE4C F718             		move.w	($FFFFFE4C).w,($FFFFF718).w
00017BAC 31F8 FE4E F71C             		move.w	($FFFFFE4E).w,($FFFFF71C).w
00017BB2 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00017BB8 6600                       		bne.s	loc_170E4
00017BBA 31F8 FE50 F648             		move.w	($FFFFFE50).w,($FFFFF648).w
00017BC0 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
00017BC6 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
00017BCC                            
00017BCC                            loc_170E4:
00017BCC 4A38 FE30                  		tst.b	($FFFFFE30).w
00017BD0 6A00                       		bpl.s	locret_170F6
00017BD2 3038 FE32                  		move.w	($FFFFFE32).w,d0
00017BD6 0440 00A0                  		subi.w	#$A0,d0
00017BDA 31C0 F728                  		move.w	d0,($FFFFF728).w
00017BDE                            
00017BDE                            locret_170F6:
00017BDE 4E75                       		rts	
00017BE0                            ; End of function Obj79_LoadInfo
00017BE0                            
00017BE0                            ; ===========================================================================
00017BE0                            ; ---------------------------------------------------------------------------
00017BE0                            ; Sprite mappings - lamppost
00017BE0                            ; ---------------------------------------------------------------------------
00017BE0                            Map_obj79:
00017BE0                            	include "_maps\obj79.asm"
00017BE0                            ; ---------------------------------------------------------------------------
00017BE0                            ; Sprite mappings - lamppost
00017BE0                            ; ---------------------------------------------------------------------------
00017BE0 0000 0000                  		dc.w byte_17100-Map_obj79, byte_1711F-Map_obj79
00017BE4 0000 0000                  		dc.w byte_17134-Map_obj79, byte_1713F-Map_obj79
00017BE8 06                         byte_17100:	dc.b 6
00017BE9 E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00017BEE E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00017BF3 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
00017BF8 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00017BFD D401 0006 F8               		dc.b $D4, 1, 0,	6, $F8
00017C02 D401 0806 00               		dc.b $D4, 1, 8,	6, 0
00017C07 04                         byte_1711F:	dc.b 4
00017C08 E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00017C0D E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00017C12 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
00017C17 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00017C1C 02                         byte_17134:	dc.b 2
00017C1D F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
00017C22 F801 0808 00               		dc.b $F8, 1, 8,	8, 0
00017C27 06                         byte_1713F:	dc.b 6
00017C28 E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00017C2D E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00017C32 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
00017C37 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00017C3C D401 0008 F8               		dc.b $D4, 1, 0,	8, $F8
00017C41 D401 0808 00               		dc.b $D4, 1, 8,	8, 0
00017C46                            		even
00017C46                            		even
00017C46                            
00017C46                            ; ===========================================================================
00017C46                            ; ---------------------------------------------------------------------------
00017C46                            ; Object 7D - hidden points at the end of a level
00017C46                            ; ---------------------------------------------------------------------------
00017C46                            
00017C46                            Obj7D:					; XREF: Obj_Index
00017C46 7000                       		moveq	#0,d0
00017C48 1028 0024                  		move.b	$24(a0),d0
00017C4C 323B 0000                  		move.w	Obj7D_Index(pc,d0.w),d1
00017C50 4EFB 1000                  		jmp	Obj7D_Index(pc,d1.w)
00017C54                            ; ===========================================================================
00017C54 0000                       Obj7D_Index:	dc.w Obj7D_Main-Obj7D_Index
00017C56 0000                       		dc.w Obj7D_DelayDel-Obj7D_Index
00017C58                            ; ===========================================================================
00017C58                            
00017C58                            Obj7D_Main:				; XREF: Obj7D_Index
00017C58 7410                       		moveq	#$10,d2
00017C5A 3602                       		move.w	d2,d3
00017C5C D643                       		add.w	d3,d3
00017C5E 43F8 D000                  		lea	($FFFFD000).w,a1
00017C62 3029 0008                  		move.w	8(a1),d0
00017C66 9068 0008                  		sub.w	8(a0),d0
00017C6A D042                       		add.w	d2,d0
00017C6C B043                       		cmp.w	d3,d0
00017C6E 6400                       		bcc.s	Obj7D_ChkDel
00017C70 3229 000C                  		move.w	$C(a1),d1
00017C74 9268 000C                  		sub.w	$C(a0),d1
00017C78 D242                       		add.w	d2,d1
00017C7A B243                       		cmp.w	d3,d1
00017C7C 6400                       		bcc.s	Obj7D_ChkDel
00017C7E 4A78 FE08                  		tst.w	($FFFFFE08).w
00017C82 6600                       		bne.s	Obj7D_ChkDel
00017C84 4A38 F7CD                  		tst.b	($FFFFF7CD).w
00017C88 6600                       		bne.s	Obj7D_ChkDel
00017C8A 5428 0024                  		addq.b	#2,$24(a0)
00017C8E 217C 0000 0000 0004        		move.l	#Map_obj7D,4(a0)
00017C96 317C 84B6 0002             		move.w	#$84B6,2(a0)
00017C9C 0028 0004 0001             		ori.b	#4,1(a0)
00017CA2 117C 0000 0018             		move.b	#0,$18(a0)
00017CA8 117C 0010 0019             		move.b	#$10,$19(a0)
00017CAE 1168 0028 001A             		move.b	$28(a0),$1A(a0)
00017CB4 317C 0077 0030             		move.w	#119,$30(a0)	; set display time to 2	seconds
00017CBA 303C 00C9                  		move.w	#$C9,d0
00017CBE 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play bonus sound
00017CC4 7000                       		moveq	#0,d0
00017CC6 1028 0028                  		move.b	$28(a0),d0
00017CCA D040                       		add.w	d0,d0
00017CCC 303B 0000                  		move.w	Obj7D_Points(pc,d0.w),d0 ; load	bonus points array
00017CD0 4EB9 0000 0000             		jsr	AddPoints
00017CD6                            
00017CD6                            Obj7D_ChkDel:
00017CD6 3028 0008                  		move.w	8(a0),d0
00017CDA 0240 FF80                  		andi.w	#$FF80,d0
00017CDE 3238 F700                  		move.w	($FFFFF700).w,d1
00017CE2 0441 0080                  		subi.w	#$80,d1
00017CE6 0241 FF80                  		andi.w	#$FF80,d1
00017CEA 9041                       		sub.w	d1,d0
00017CEC 0C40 0280                  		cmpi.w	#$280,d0
00017CF0 6200                       		bhi.s	Obj7D_Delete
00017CF2 4E75                       		rts	
00017CF4                            ; ===========================================================================
00017CF4                            
00017CF4                            Obj7D_Delete:
00017CF4 4EF9 0000 E034             		jmp	DeleteObject
00017CFA                            ; ===========================================================================
00017CFA 0000                       Obj7D_Points:	dc.w 0			; Bonus	points array
00017CFC 03E8                       		dc.w 1000
00017CFE 0064                       		dc.w 100
00017D00 0001                       		dc.w 1
00017D02                            ; ===========================================================================
00017D02                            
00017D02                            Obj7D_DelayDel:				; XREF: Obj7D_Index
00017D02 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from display time
00017D06 6B00                       		bmi.s	Obj7D_Delete2	; if time is zero, branch
00017D08 3028 0008                  		move.w	8(a0),d0
00017D0C 0240 FF80                  		andi.w	#-$80,d0
00017D10 3238 F700                  		move.w	($FFFFF700).w,d1
00017D14 0441 0080                  		subi.w	#$80,d1
00017D18 0241 FF80                  		andi.w	#-$80,d1
00017D1C 9041                       		sub.w	d1,d0
00017D1E 0C40 0280                  		cmpi.w	#$280,d0
00017D22 6200                       		bhi.s	Obj7D_Delete2
00017D24 4EF9 0000 DFF8             		jmp	DisplaySprite
00017D2A                            ; ===========================================================================
00017D2A                            
00017D2A                            Obj7D_Delete2:
00017D2A 4EF9 0000 E034             		jmp	DeleteObject
00017D30                            ; ===========================================================================
00017D30                            ; ---------------------------------------------------------------------------
00017D30                            ; Sprite mappings - hidden points at the end of	a level
00017D30                            ; ---------------------------------------------------------------------------
00017D30                            Map_obj7D:
00017D30                            	include "_maps\obj7D.asm"
00017D30                            ; ---------------------------------------------------------------------------
00017D30                            ; Sprite mappings - hidden points at the end of	a level
00017D30                            ; ---------------------------------------------------------------------------
00017D30 0000 0000                  		dc.w byte_17250-Map_obj7D, byte_17251-Map_obj7D
00017D34 0000 0000                  		dc.w byte_17257-Map_obj7D, byte_1725D-Map_obj7D
00017D38 00                         byte_17250:	dc.b 0
00017D39 01                         byte_17251:	dc.b 1
00017D3A F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
00017D3F 01                         byte_17257:	dc.b 1
00017D40 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
00017D45 01                         byte_1725D:	dc.b 1
00017D46 F40E 0018 F0               		dc.b $F4, $E, 0, $18, $F0
00017D4C 00                         		even
00017D4C 00                         		even
00017D4C                            
00017D4C                            ; ===========================================================================
00017D4C                            ; ---------------------------------------------------------------------------
00017D4C                            ; Object 8A - "SONIC TEAM PRESENTS" and	credits
00017D4C                            ; ---------------------------------------------------------------------------
00017D4C                            
00017D4C                            Obj8A:					; XREF: Obj_Index
00017D4C 7000                       		moveq	#0,d0
00017D4E 1028 0024                  		move.b	$24(a0),d0
00017D52 323B 0000                  		move.w	Obj8A_Index(pc,d0.w),d1
00017D56 4EFB 1000                  		jmp	Obj8A_Index(pc,d1.w)
00017D5A                            ; ===========================================================================
00017D5A 0000                       Obj8A_Index:	dc.w Obj8A_Main-Obj8A_Index
00017D5C 0000                       		dc.w Obj8A_Display-Obj8A_Index
00017D5E                            ; ===========================================================================
00017D5E                            
00017D5E                            Obj8A_Main:				; XREF: Obj8A_Index
00017D5E 5428 0024                  		addq.b	#2,$24(a0)
00017D62 317C 0120 0008             		move.w	#$120,8(a0)
00017D68 317C 00F0 000A             		move.w	#$F0,$A(a0)
00017D6E 217C 0000 0000 0004        		move.l	#Map_obj8A,4(a0)
00017D76 317C 05A0 0002             		move.w	#$5A0,2(a0)
00017D7C 3038 FFF4                  		move.w	($FFFFFFF4).w,d0 ; load	credits	index number
00017D80 1140 001A                  		move.b	d0,$1A(a0)	; display appropriate sprite
00017D84 117C 0000 0001             		move.b	#0,1(a0)
00017D8A 117C 0000 0018             		move.b	#0,$18(a0)
00017D90 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w ; is the scene	number 04 (title screen)?
00017D96 6600                       		bne.s	Obj8A_Display	; if not, branch
00017D98 317C 00A6 0002             		move.w	#$A6,2(a0)
00017D9E 117C 000A 001A             		move.b	#$A,$1A(a0)	; display "SONIC TEAM PRESENTS"
00017DA4 4A38 FFE3                  		tst.b	($FFFFFFE3).w	; is hidden credits cheat on?
00017DA8 6700                       		beq.s	Obj8A_Display	; if not, branch
00017DAA 0C38 0072 F604             		cmpi.b	#$72,($FFFFF604).w ; is	Start+A+C+Down being pressed?
00017DB0 6600                       		bne.s	Obj8A_Display	; if not, branch
00017DB2 31FC 0EEE FBC0             		move.w	#$EEE,($FFFFFBC0).w ; 3rd pallet, 1st entry = white
00017DB8 31FC 0880 FBC2             		move.w	#$880,($FFFFFBC2).w ; 3rd pallet, 2nd entry = cyan
00017DBE 4EF9 0000 E034             		jmp	DeleteObject
00017DC4                            ; ===========================================================================
00017DC4                            
00017DC4                            Obj8A_Display:				; XREF: Obj8A_Index
00017DC4 4EF9 0000 DFF8             		jmp	DisplaySprite
00017DCA                            ; ===========================================================================
00017DCA                            ; ---------------------------------------------------------------------------
00017DCA                            ; Sprite mappings - "SONIC TEAM	PRESENTS" and credits
00017DCA                            ; ---------------------------------------------------------------------------
00017DCA                            Map_obj8A:
00017DCA                            	include "_maps\obj8A.asm"
00017DCA                            Map_ca8f:
00017DCA 0000                       Map_ca8f_0: 	dc.w Map_ca8f_16-Map_ca8f
00017DCC 0000                       Map_ca8f_2: 	dc.w Map_ca8f_3F-Map_ca8f
00017DCE 0000                       Map_ca8f_4: 	dc.w Map_ca8f_90-Map_ca8f
00017DD0 0000                       Map_ca8f_6: 	dc.w Map_ca8f_C3-Map_ca8f
00017DD2 0000                       Map_ca8f_8: 	dc.w Map_ca8f_13C-Map_ca8f
00017DD4 0000                       Map_ca8f_A: 	dc.w Map_ca8f_1A1-Map_ca8f
00017DD6 0000                       Map_ca8f_C: 	dc.w Map_ca8f_224-Map_ca8f
00017DD8 0000                       Map_ca8f_E: 	dc.w Map_ca8f_298-Map_ca8f
00017DDA 0000                       Map_ca8f_10: 	dc.w Map_ca8f_334-Map_ca8f
00017DDC 0000                       Map_ca8f_12: 	dc.w Map_ca8f_380-Map_ca8f
00017DDE 0000                       Map_ca8f_14: 	dc.w Map_ca8f_3A9-Map_ca8f
00017DE0 08                         Map_ca8f_16: 	dc.b $8
00017DE1 CC05 803E BD               	dc.b $CC, $5, $80, $3E, $BD
00017DE6 E205 800E CD               	dc.b $E2, $5, $80, $E, $CD
00017DEB F305 8004 DE               	dc.b $F3, $5, $80, $4, $DE
00017DF0 0409 8008 EF               	dc.b $4, $9, $80, $8, $EF
00017DF5 B205 000E E5               	dc.b $B2, $5, $0, $E, $E5
00017DFA B205 0012 F5               	dc.b $B2, $5, $0, $12, $F5
00017DFF B301 0016 08               	dc.b $B3, $1, $0, $16, $8
00017E04 B309 001C 0A               	dc.b $B3, $9, $0, $1C, $A
00017E09 10                         Map_ca8f_3F: 	dc.b $10
00017E0A D805 0000 80               	dc.b $D8, $5, $0, $0, $80
00017E0F D805 0004 90               	dc.b $D8, $5, $0, $4, $90
00017E14 D809 0008 A0               	dc.b $D8, $9, $0, $8, $A0
00017E19 D805 000E B4               	dc.b $D8, $5, $0, $E, $B4
00017E1E D805 0012 D0               	dc.b $D8, $5, $0, $12, $D0
00017E23 D805 0016 E0               	dc.b $D8, $5, $0, $16, $E0
00017E28 D805 0004 F0               	dc.b $D8, $5, $0, $4, $F0
00017E2D D805 001A 00               	dc.b $D8, $5, $0, $1A, $0
00017E32 0805 001E C8               	dc.b $8, $5, $0, $1E, $C8
00017E37 0805 0004 D8               	dc.b $8, $5, $0, $4, $D8
00017E3C 0805 0022 E8               	dc.b $8, $5, $0, $22, $E8
00017E41 0805 0026 F8               	dc.b $8, $5, $0, $26, $F8
00017E46 0805 0016 08               	dc.b $8, $5, $0, $16, $8
00017E4B 0805 002A 20               	dc.b $8, $5, $0, $2A, $20
00017E50 0805 0004 30               	dc.b $8, $5, $0, $4, $30
00017E55 0805 002E 44               	dc.b $8, $5, $0, $2E, $44
00017E5A 0A                         Map_ca8f_90: 	dc.b $A
00017E5B D805 0012 80               	dc.b $D8, $5, $0, $12, $80
00017E60 D805 0022 90               	dc.b $D8, $5, $0, $22, $90
00017E65 D805 0026 A0               	dc.b $D8, $5, $0, $26, $A0
00017E6A D805 0000 B0               	dc.b $D8, $5, $0, $0, $B0
00017E6F D805 0022 C0               	dc.b $D8, $5, $0, $22, $C0
00017E74 D805 0004 D0               	dc.b $D8, $5, $0, $4, $D0
00017E79 D809 0008 E0               	dc.b $D8, $9, $0, $8, $E0
00017E7E 0805 002A E8               	dc.b $8, $5, $0, $2A, $E8
00017E83 0805 0032 F8               	dc.b $8, $5, $0, $32, $F8
00017E88 0805 0036 08               	dc.b $8, $5, $0, $36, $8
00017E8D 18                         Map_ca8f_C3: 	dc.b $18
00017E8E D805 001E 88               	dc.b $D8, $5, $0, $1E, $88
00017E93 D805 003A 98               	dc.b $D8, $5, $0, $3A, $98
00017E98 D805 0004 A8               	dc.b $D8, $5, $0, $4, $A8
00017E9D D805 0022 B8               	dc.b $D8, $5, $0, $22, $B8
00017EA2 D805 0004 C8               	dc.b $D8, $5, $0, $4, $C8
00017EA7 D805 001E D8               	dc.b $D8, $5, $0, $1E, $D8
00017EAC D805 003E E8               	dc.b $D8, $5, $0, $3E, $E8
00017EB1 D805 000E F8               	dc.b $D8, $5, $0, $E, $F8
00017EB6 D805 0022 08               	dc.b $D8, $5, $0, $22, $8
00017EBB D805 0042 20               	dc.b $D8, $5, $0, $42, $20
00017EC0 D805 000E 30               	dc.b $D8, $5, $0, $E, $30
00017EC5 D805 002E 40               	dc.b $D8, $5, $0, $2E, $40
00017ECA D801 0046 50               	dc.b $D8, $1, $0, $46, $50
00017ECF D805 0000 58               	dc.b $D8, $5, $0, $0, $58
00017ED4 D805 001A 68               	dc.b $D8, $5, $0, $1A, $68
00017ED9 0805 0048 C0               	dc.b $8, $5, $0, $48, $C0
00017EDE 0801 0046 D0               	dc.b $8, $1, $0, $46, $D0
00017EE3 0805 0000 D8               	dc.b $8, $5, $0, $0, $D8
00017EE8 0801 0046 E8               	dc.b $8, $1, $0, $46, $E8
00017EED 0805 002E F0               	dc.b $8, $5, $0, $2E, $F0
00017EF2 0805 0016 00               	dc.b $8, $5, $0, $16, $0
00017EF7 0805 0004 10               	dc.b $8, $5, $0, $4, $10
00017EFC 0805 001A 20               	dc.b $8, $5, $0, $1A, $20
00017F01 0805 0042 30               	dc.b $8, $5, $0, $42, $30
00017F06 14                         Map_ca8f_13C: 	dc.b $14
00017F07 D005 0042 A0               	dc.b $D0, $5, $0, $42, $A0
00017F0C D005 000E B0               	dc.b $D0, $5, $0, $E, $B0
00017F11 D005 002E C0               	dc.b $D0, $5, $0, $2E, $C0
00017F16 D001 0046 D0               	dc.b $D0, $1, $0, $46, $D0
00017F1B D005 0000 D8               	dc.b $D0, $5, $0, $0, $D8
00017F20 D005 001A E8               	dc.b $D0, $5, $0, $1A, $E8
00017F25 0005 004C E8               	dc.b $0, $5, $0, $4C, $E8
00017F2A 0001 0046 F8               	dc.b $0, $1, $0, $46, $F8
00017F2F 0005 001A 04               	dc.b $0, $5, $0, $1A, $4
00017F34 0005 002A 14               	dc.b $0, $5, $0, $2A, $14
00017F39 0005 0004 24               	dc.b $0, $5, $0, $4, $24
00017F3E 2005 0012 D0               	dc.b $20, $5, $0, $12, $D0
00017F43 2005 003A E0               	dc.b $20, $5, $0, $3A, $E0
00017F48 2005 000E F0               	dc.b $20, $5, $0, $E, $F0
00017F4D 2005 001A 00               	dc.b $20, $5, $0, $1A, $0
00017F52 2001 0046 10               	dc.b $20, $1, $0, $46, $10
00017F57 2005 0050 18               	dc.b $20, $5, $0, $50, $18
00017F5C 2005 0022 30               	dc.b $20, $5, $0, $22, $30
00017F61 2001 0046 40               	dc.b $20, $1, $0, $46, $40
00017F66 2005 000E 48               	dc.b $20, $5, $0, $E, $48
00017F6B 1A                         Map_ca8f_1A1: 	dc.b $1A
00017F6C D805 002E 98               	dc.b $D8, $5, $0, $2E, $98
00017F71 D805 0026 A8               	dc.b $D8, $5, $0, $26, $A8
00017F76 D805 0032 B8               	dc.b $D8, $5, $0, $32, $B8
00017F7B D805 001A C8               	dc.b $D8, $5, $0, $1A, $C8
00017F80 D805 0054 D8               	dc.b $D8, $5, $0, $54, $D8
00017F85 D805 0012 F8               	dc.b $D8, $5, $0, $12, $F8
00017F8A D805 0022 08               	dc.b $D8, $5, $0, $22, $8
00017F8F D805 0026 18               	dc.b $D8, $5, $0, $26, $18
00017F94 D805 0042 28               	dc.b $D8, $5, $0, $42, $28
00017F99 D805 0032 38               	dc.b $D8, $5, $0, $32, $38
00017F9E D805 001E 48               	dc.b $D8, $5, $0, $1E, $48
00017FA3 D805 000E 58               	dc.b $D8, $5, $0, $E, $58
00017FA8 0809 0008 88               	dc.b $8, $9, $0, $8, $88
00017FAD 0805 0004 9C               	dc.b $8, $5, $0, $4, $9C
00017FB2 0805 002E AC               	dc.b $8, $5, $0, $2E, $AC
00017FB7 0805 0004 BC               	dc.b $8, $5, $0, $4, $BC
00017FBC 0805 003E CC               	dc.b $8, $5, $0, $3E, $CC
00017FC1 0805 0026 DC               	dc.b $8, $5, $0, $26, $DC
00017FC6 0805 001A F8               	dc.b $8, $5, $0, $1A, $F8
00017FCB 0805 0004 08               	dc.b $8, $5, $0, $4, $8
00017FD0 0805 0058 18               	dc.b $8, $5, $0, $58, $18
00017FD5 0805 0004 28               	dc.b $8, $5, $0, $4, $28
00017FDA 0809 0008 38               	dc.b $8, $9, $0, $8, $38
00017FDF 0805 0032 4C               	dc.b $8, $5, $0, $32, $4C
00017FE4 0805 0022 5C               	dc.b $8, $5, $0, $22, $5C
00017FE9 0805 0004 6C               	dc.b $8, $5, $0, $4, $6C
00017FEE 17                         Map_ca8f_224: 	dc.b $17
00017FEF D005 002E 98               	dc.b $D0, $5, $0, $2E, $98
00017FF4 D005 0026 A8               	dc.b $D0, $5, $0, $26, $A8
00017FF9 D005 0032 B8               	dc.b $D0, $5, $0, $32, $B8
00017FFE D005 001A C8               	dc.b $D0, $5, $0, $1A, $C8
00018003 D005 0054 D8               	dc.b $D0, $5, $0, $54, $D8
00018008 D005 0012 F8               	dc.b $D0, $5, $0, $12, $F8
0001800D D005 0022 08               	dc.b $D0, $5, $0, $22, $8
00018012 D005 0026 18               	dc.b $D0, $5, $0, $26, $18
00018017 D005 0000 28               	dc.b $D0, $5, $0, $0, $28
0001801C D005 0022 38               	dc.b $D0, $5, $0, $22, $38
00018021 D005 0004 48               	dc.b $D0, $5, $0, $4, $48
00018026 D009 0008 58               	dc.b $D0, $9, $0, $8, $58
0001802B 0005 004C D0               	dc.b $0, $5, $0, $4C, $D0
00018030 0001 0046 E0               	dc.b $0, $1, $0, $46, $E0
00018035 0009 0008 E8               	dc.b $0, $9, $0, $8, $E8
0001803A 0001 0046 FC               	dc.b $0, $1, $0, $46, $FC
0001803F 0005 003E 04               	dc.b $0, $5, $0, $3E, $4
00018044 0005 0004 14               	dc.b $0, $5, $0, $4, $14
00018049 2009 0008 D0               	dc.b $20, $9, $0, $8, $D0
0001804E 2005 0004 E4               	dc.b $20, $5, $0, $4, $E4
00018053 2005 001E F4               	dc.b $20, $5, $0, $1E, $F4
00018058 2005 0058 04               	dc.b $20, $5, $0, $58, $4
0001805D 2005 002A 14               	dc.b $20, $5, $0, $2A, $14
00018062 1F                         Map_ca8f_298: 	dc.b $1F
00018063 D805 002E 80               	dc.b $D8, $5, $0, $2E, $80
00018068 D805 0012 90               	dc.b $D8, $5, $0, $12, $90
0001806D D805 000E A0               	dc.b $D8, $5, $0, $E, $A0
00018072 D805 001E B0               	dc.b $D8, $5, $0, $1E, $B0
00018077 D801 0046 C0               	dc.b $D8, $1, $0, $46, $C0
0001807C D805 0004 C8               	dc.b $D8, $5, $0, $4, $C8
00018081 D805 0016 D8               	dc.b $D8, $5, $0, $16, $D8
00018086 D805 003E F8               	dc.b $D8, $5, $0, $3E, $F8
0001808B D805 003A 08               	dc.b $D8, $5, $0, $3A, $8
00018090 D805 0004 18               	dc.b $D8, $5, $0, $4, $18
00018095 D805 001A 28               	dc.b $D8, $5, $0, $1A, $28
0001809A D805 0058 38               	dc.b $D8, $5, $0, $58, $38
0001809F D805 002E 48               	dc.b $D8, $5, $0, $2E, $48
000180A4 0005 005C B0               	dc.b $0, $5, $0, $5C, $B0
000180A9 0005 0032 C0               	dc.b $0, $5, $0, $32, $C0
000180AE 0005 004C D0               	dc.b $0, $5, $0, $4C, $D0
000180B3 0001 0046 E0               	dc.b $0, $1, $0, $46, $E0
000180B8 0005 0026 E8               	dc.b $0, $5, $0, $26, $E8
000180BD 0009 0008 00               	dc.b $0, $9, $0, $8, $0
000180C2 0001 0046 14               	dc.b $0, $1, $0, $46, $14
000180C7 0005 001A 1C               	dc.b $0, $5, $0, $1A, $1C
000180CC 0005 000E 2C               	dc.b $0, $5, $0, $E, $2C
000180D1 0005 0000 3C               	dc.b $0, $5, $0, $0, $3C
000180D6 0001 0046 4C               	dc.b $0, $1, $0, $46, $4C
000180DB 0005 002E 54               	dc.b $0, $5, $0, $2E, $54
000180E0 0005 003A 64               	dc.b $0, $5, $0, $3A, $64
000180E5 0001 0046 74               	dc.b $0, $1, $0, $46, $74
000180EA 2005 0012 F8               	dc.b $20, $5, $0, $12, $F8
000180EF 2005 0004 08               	dc.b $20, $5, $0, $4, $8
000180F4 2005 0012 18               	dc.b $20, $5, $0, $12, $18
000180F9 2005 0004 28               	dc.b $20, $5, $0, $4, $28
000180FE 0F                         Map_ca8f_334: 	dc.b $F
000180FF F805 0012 80               	dc.b $F8, $5, $0, $12, $80
00018104 F805 0022 90               	dc.b $F8, $5, $0, $22, $90
00018109 F805 000E A0               	dc.b $F8, $5, $0, $E, $A0
0001810E F805 002E B0               	dc.b $F8, $5, $0, $2E, $B0
00018113 F805 000E C0               	dc.b $F8, $5, $0, $E, $C0
00018118 F805 001A D0               	dc.b $F8, $5, $0, $1A, $D0
0001811D F805 003E E0               	dc.b $F8, $5, $0, $3E, $E0
00018122 F805 000E F0               	dc.b $F8, $5, $0, $E, $F0
00018127 F805 0042 00               	dc.b $F8, $5, $0, $42, $0
0001812C F805 0048 18               	dc.b $F8, $5, $0, $48, $18
00018131 F805 002A 28               	dc.b $F8, $5, $0, $2A, $28
00018136 F805 002E 40               	dc.b $F8, $5, $0, $2E, $40
0001813B F805 000E 50               	dc.b $F8, $5, $0, $E, $50
00018140 F805 0000 60               	dc.b $F8, $5, $0, $0, $60
00018145 F805 0004 70               	dc.b $F8, $5, $0, $4, $70
0001814A 08                         Map_ca8f_380: 	dc.b $8
0001814B 3005 003E C0               	dc.b $30, $5, $0, $3E, $C0
00018150 3005 0022 D0               	dc.b $30, $5, $0, $22, $D0
00018155 3005 002A E0               	dc.b $30, $5, $0, $2A, $E0
0001815A 3005 0004 F8               	dc.b $30, $5, $0, $4, $F8
0001815F 3005 0000 08               	dc.b $30, $5, $0, $0, $8
00018164 3005 0004 18               	dc.b $30, $5, $0, $4, $18
00018169 3001 0046 28               	dc.b $30, $1, $0, $46, $28
0001816E 3005 001A 30               	dc.b $30, $5, $0, $1A, $30
00018173 20                         Map_ca8f_3A9: 	dc.b $20
00018174 ED05 002E BF               	dc.b $ED, $5, $0, $2E, $BF
00018179 ED05 0026 CD               	dc.b $ED, $5, $0, $26, $CD
0001817E ED09 0008 DD               	dc.b $ED, $9, $0, $8, $DD
00018183 ED05 000E F1               	dc.b $ED, $5, $0, $E, $F1
00018188 ED05 0026 00               	dc.b $ED, $5, $0, $26, $0
0001818D ED05 001A 10               	dc.b $ED, $5, $0, $1A, $10
00018192 ED05 000E 1F               	dc.b $ED, $5, $0, $E, $1F
00018197 FD05 0012 BF               	dc.b $FD, $5, $0, $12, $BF
0001819C FD05 0016 CE               	dc.b $FD, $5, $0, $16, $CE
000181A1 FD05 000E DD               	dc.b $FD, $5, $0, $E, $DD
000181A6 FD05 0004 EC               	dc.b $FD, $5, $0, $4, $EC
000181AB FD05 002E FC               	dc.b $FD, $5, $0, $2E, $FC
000181B0 FD05 000E 0A               	dc.b $FD, $5, $0, $E, $A
000181B5 0D05 0004 BE               	dc.b $D, $5, $0, $4, $BE
000181BA 0D05 0054 CE               	dc.b $D, $5, $0, $54, $CE
000181BF 0D05 0054 DD               	dc.b $D, $5, $0, $54, $DD
000181C4 0D05 0032 F2               	dc.b $D, $5, $0, $32, $F2
000181C9 0D05 001A 02               	dc.b $D, $5, $0, $1A, $2
000181CE 0D05 0054 11               	dc.b $D, $5, $0, $54, $11
000181D3 0D05 002A 20               	dc.b $D, $5, $0, $2A, $20
000181D8 0D01 0046 30               	dc.b $D, $1, $0, $46, $30
000181DD 0D05 001A 38               	dc.b $D, $5, $0, $1A, $38
000181E2 0D05 0000 47               	dc.b $D, $5, $0, $0, $47
000181E7 1D05 003E BE               	dc.b $1D, $5, $0, $3E, $BE
000181EC 1D05 0026 CE               	dc.b $1D, $5, $0, $26, $CE
000181F1 1D05 003E E4               	dc.b $1D, $5, $0, $3E, $E4
000181F6 1D05 003A F4               	dc.b $1D, $5, $0, $3A, $F4
000181FB 1D05 000E 04               	dc.b $1D, $5, $0, $E, $4
00018200 1D05 000E 2A               	dc.b $1D, $5, $0, $E, $2A
00018205 1D05 0022 1A               	dc.b $1D, $5, $0, $22, $1A
0001820A 1D05 0012 39               	dc.b $1D, $5, $0, $12, $39
0001820F 1D05 0026 48               	dc.b $1D, $5, $0, $26, $48
00018214                            	even
00018214                            	even
00018214                            
00018214                            ; ===========================================================================
00018214                            ; ---------------------------------------------------------------------------
00018214                            ; Object 3D - matthew boss - modified by GK89
00018214                            ; ---------------------------------------------------------------------------
00018214                            
00018214                            Obj3D:					; XREF: Obj_Index
00018214 7000                       		moveq	#0,d0
00018216 1028 0024                  		move.b	$24(a0),d0
0001821A 323B 0000                  		move.w	Obj3D_Index(pc,d0.w),d1
0001821E 4EFB 1000                  		jmp	Obj3D_Index(pc,d1.w)
00018222                            ; ===========================================================================
00018222 0000                       Obj3D_Index:	dc.w Obj3D_Main-Obj3D_Index
00018224 0000                       		dc.w Obj3D_ShipMain-Obj3D_Index
00018226 0000                       		dc.w Obj3D_FaceMain-Obj3D_Index
00018228 0000                       		dc.w Obj3D_FlameMain-Obj3D_Index
0001822A                            
0001822A 0200                       Obj3D_ObjData:	dc.b 2,	0		; routine counter, animation
0001822C 0401                       		dc.b 4,	1
0001822E 0607                       		dc.b 6,	7
00018230                            ; ===========================================================================
00018230                            
00018230                            Obj3D_Main:				; XREF: Obj3D_Index
00018230 45F9 0001 822A             		lea	(Obj3D_ObjData).l,a2
00018236 2248                       		movea.l	a0,a1
00018238 7202                       		moveq	#2,d1
0001823A 6000                       		bra.s	Obj3D_LoadBoss
0001823C                            ; ===========================================================================
0001823C                            
0001823C                            Obj3D_Loop:
0001823C 4EB9 0000 E494             		jsr	SingleObjLoad2
00018242 6600                       		bne.s	loc_17772
00018244                            
00018244                            Obj3D_LoadBoss:				; XREF: Obj3D_Main
00018244 135A 0024                  		move.b	(a2)+,$24(a1)
00018248 12BC 003D                  		move.b	#$3D,0(a1)
0001824C 3368 0008 0008             		move.w	8(a0),8(a1)
00018252 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018258 237C 0000 0000 0004        		move.l	#Map_Eggman,4(a1)
00018260 337C 0400 0002             		move.w	#$400,2(a1)
00018266 137C 0004 0001             		move.b	#4,1(a1)
0001826C 137C 0020 0019             		move.b	#$20,$19(a1)
00018272 137C 0003 0018             		move.b	#3,$18(a1)
00018278 135A 001C                  		move.b	(a2)+,$1C(a1)
0001827C 2348 0034                  		move.l	a0,$34(a1)
00018280 51C9 FFBA                  		dbf	d1,Obj3D_Loop	; repeat sequence 2 more times
00018284                            
00018284                            loc_17772:
00018284 3168 0008 0030             		move.w	8(a0),$30(a0)
0001828A 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018290 117C 000F 0020             		move.b	#$F,$20(a0)
00018296 117C 0028 0021             		move.b	#$28,$21(a0)	; set number of	hits to	8
0001829C                            
0001829C                            Obj3D_ShipMain:				; XREF: Obj3D_Index
0001829C 7000                       		moveq	#0,d0
0001829E 1028 0025                  		move.b	$25(a0),d0
000182A2 323B 0000                  		move.w	Obj3D_ShipIndex(pc,d0.w),d1
000182A6 4EBB 1000                  		jsr	Obj3D_ShipIndex(pc,d1.w)
000182AA 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
000182B0 4EB9 0000 B056             		jsr	AnimateSprite
000182B6 1028 0022                  		move.b	$22(a0),d0
000182BA 0200 0003                  		andi.b	#3,d0
000182BE 0228 00FC 0001             		andi.b	#$FC,1(a0)
000182C4 8128 0001                  		or.b	d0,1(a0)
000182C8 4EF9 0000 DFF8             		jmp	DisplaySprite
000182CE                            ; ===========================================================================
000182CE 0000                       Obj3D_ShipIndex:dc.w Obj3D_ShipStart-Obj3D_ShipIndex
000182D0 0000                       		dc.w Obj3D_MakeBall-Obj3D_ShipIndex
000182D2 0000                       		dc.w Obj3D_ShipMove-Obj3D_ShipIndex
000182D4 0000                       		dc.w loc_17954-Obj3D_ShipIndex
000182D6 0000                       		dc.w loc_1797A-Obj3D_ShipIndex
000182D8 0000                       		dc.w loc_179AC-Obj3D_ShipIndex
000182DA 0000                       		dc.w loc_179F6-Obj3D_ShipIndex
000182DC                            ; ===========================================================================
000182DC                            
000182DC                            Obj3D_ShipStart:			; XREF: Obj3D_ShipIndex
000182DC 4EB9 0000 0000             		jsr    Obj3D_ShipMove
000182E2 6100 0000                  		bsr.w	BossMove
000182E6 0C68 0338 0038             		cmpi.w	#$338,$38(a0)
000182EC 6600                       		bne.s	loc_177E6
000182EE 317C 0000 0012             		move.w	#0,$12(a0)	; stop ship
000182F4 5428 0025                  		addq.b	#2,$25(a0)	; goto next routine
000182F8                            
000182F8                            loc_177E6:
000182F8 1028 003F                  		move.b	$3F(a0),d0
000182FC 4EB9 0000 2D6C             		jsr	(CalcSine).l
00018302 EC40                       		asr.w	#6,d0
00018304 D068 0038                  		add.w	$38(a0),d0
00018308 3140 000C                  		move.w	d0,$C(a0)
0001830C 3168 0030 0008             		move.w	$30(a0),8(a0)
00018312 5428 003F                  		addq.b	#2,$3F(a0)
00018316 0C28 0008 0025             		cmpi.b	#8,$25(a0)
0001831C 6400                       		bcc.s	locret_1784A
0001831E 4A28 0022                  		tst.b	$22(a0)
00018322 6B00                       		bmi.s	loc_1784C
00018324 4A28 0020                  		tst.b	$20(a0)
00018328 6600                       		bne.s	locret_1784A
0001832A 4A28 003E                  		tst.b	$3E(a0)
0001832E 6600                       		bne.s	Obj3D_ShipFlash
00018330 117C 0020 003E             		move.b	#$20,$3E(a0)	; set number of	times for ship to flash
00018336 303C 00AC                  		move.w	#$AC,d0
0001833A 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play boss damage sound
00018340                            
00018340                            Obj3D_ShipFlash:
00018340 43F8 FB22                  		lea	($FFFFFB22).w,a1 ; load	2nd pallet, 2nd	entry
00018344 7000                       		moveq	#0,d0		; move 0 (black) to d0
00018346 4A51                       		tst.w	(a1)
00018348 6600                       		bne.s	loc_1783C
0001834A 303C 0EEE                  		move.w	#$EEE,d0	; move 0EEE (white) to d0
0001834E                            
0001834E                            loc_1783C:
0001834E 3280                       		move.w	d0,(a1)		; load colour stored in	d0
00018350 5328 003E                  		subq.b	#1,$3E(a0)
00018354 6600                       		bne.s	locret_1784A
00018356 117C 000F 0020             		move.b	#$F,$20(a0)
0001835C                            
0001835C                            locret_1784A:
0001835C 4E75                       		rts	
0001835E                            ; ===========================================================================
0001835E                            
0001835E                            loc_1784C:				; XREF: loc_177E6
0001835E 7064                       		moveq	#100,d0
00018360 6100 0000                  		bsr.w	AddPoints
00018364 117C 0008 0025             		move.b	#8,$25(a0)
0001836A 317C 00B3 003C             		move.w	#$B3,$3C(a0)
00018370 4E75                       		rts	
00018372                            
00018372                            ; ---------------------------------------------------------------------------
00018372                            ; Defeated boss	subroutine
00018372                            ; ---------------------------------------------------------------------------
00018372                            
00018372                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018372                            
00018372                            
00018372                            BossDefeated:
00018372 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00018376 0200 0007                  		andi.b	#7,d0
0001837A 6600                       		bne.s	locret_178A2
0001837C 4EB9 0000 E47E             		jsr	SingleObjLoad
00018382 6600                       		bne.s	locret_178A2
00018384 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
00018388 3368 0008 0008             		move.w	8(a0),8(a1)
0001838E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018394 4EB9 0000 2D46             		jsr	(RandomNumber).l
0001839A 3200                       		move.w	d0,d1
0001839C 7200                       		moveq	#0,d1
0001839E 1200                       		move.b	d0,d1
000183A0 E409                       		lsr.b	#2,d1
000183A2 0441 0020                  		subi.w	#$20,d1
000183A6 D369 0008                  		add.w	d1,8(a1)
000183AA E048                       		lsr.w	#8,d0
000183AC E608                       		lsr.b	#3,d0
000183AE D169 000C                  		add.w	d0,$C(a1)
000183B2                            
000183B2                            locret_178A2:
000183B2 4E75                       		rts	
000183B4                            ; End of function BossDefeated
000183B4                            
000183B4                            ; ---------------------------------------------------------------------------
000183B4                            ; Subroutine to	move a boss
000183B4                            ; ---------------------------------------------------------------------------
000183B4                            
000183B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000183B4                            
000183B4                            
000183B4                            BossMove:
000183B4 2428 0030                  		move.l	$30(a0),d2
000183B8 2628 0038                  		move.l	$38(a0),d3
000183BC 3028 0010                  		move.w	$10(a0),d0
000183C0 48C0                       		ext.l	d0
000183C2 E180                       		asl.l	#8,d0
000183C4 D480                       		add.l	d0,d2
000183C6 3028 0012                  		move.w	$12(a0),d0
000183CA 48C0                       		ext.l	d0
000183CC E180                       		asl.l	#8,d0
000183CE D680                       		add.l	d0,d3
000183D0 2142 0030                  		move.l	d2,$30(a0)
000183D4 2143 0038                  		move.l	d3,$38(a0)
000183D8 4E75                       		rts	
000183DA                            ; End of function BossMove
000183DA                            
000183DA                            ; ===========================================================================
000183DA                            
000183DA                            Obj3D_MakeBall:				; XREF: Obj3D_ShipIndex		
000183DA 6100 FFD8                  		bsr.w	BossMove
000183DE 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
000183E4 6600                       		bne.s	loc_17916
000183E6 317C 0000 0010             		move.w	#0,$10(a0)
000183EC 317C 0000 0012             		move.w	#0,$12(a0)
000183F2 5428 0025                  		addq.b	#2,$25(a0)
000183F6 4EB9 0000 E494             		jsr	SingleObjLoad2
000183FC 6600                       		bne.s	loc_17910
000183FE 12BC 0048                  		move.b	#$48,0(a1)	; load swinging	ball object
00018402 3368 0030 0008             		move.w	$30(a0),8(a1)
00018408 3368 0038 000C             		move.w	$38(a0),$C(a1)
0001840E 2348 0034                  		move.l	a0,$34(a1)
00018412                            
00018412                            loc_17910:
00018412 317C 0077 003C             		move.w	#$77,$3C(a0)
00018418                            
00018418                            loc_17916:
00018418 6000 FEDE                  		bra.w	loc_177E6
0001841C                            ; ===========================================================================
0001841C                            
0001841C                            Obj3D_ShipMove:				; XREF:  sonic follow move
0001841C 5368 003C                  		subq.w	#1,$3C(a0)
00018420 4EB9 0000 0000             		jsr 	Obj3D_UpStuff
00018426 5428 0025                  		addq.b	#2,$25(a0)
0001842A 317C 003F 003C             		move.w	#$3F,$3C(a0)
00018430 3038 D008                  		move.w	($FFFFD008).w,d0	 
00018434 9068 0008                  		sub.w	8(a0),d0		 
00018438 6A00                       		bpl.s	Obj3D_left			 
0001843A 08A8 0000 0022             		bclr	#0,$22(a0)		 
00018440 6000                       		bra.s	Obj3D_right		 
00018442 08A8 0005 0022             		bclr	#5,$22(a0)
00018448 4EB9 0000 0000              		jsr     loc_17950
0001844E 4E75                       		rts
00018450                            ; ===========================================================================
00018450                            
00018450                            Obj3D_right:
00018450 317C FF00 0010             		move.w	#-$100,$10(a0)	
00018456 4E75                       		Rts
00018458                            
00018458                            Obj3D_left:
00018458 317C 0100 0010             		move.w	#$100,$10(a0)	 
0001845E 0828 0000 0022             		btst	#0,$22(a0)	; is matt facing	left?
00018464 6600                       		bne.s	RTSboss  	; if not, branch
00018466 0868 0000 0022              		bchg	#0,$22(a0)
0001846C                            
0001846C                            RTSboss:	    
0001846C 4E75                       		rts
0001846E                             ; ===========================================================================
0001846E                            
0001846E                            Obj3D_UpStuff:
0001846E 3038 D00C                  		move.w	($FFFFD00C).w,d0	 
00018472 9068 000C                  		sub.w	$C(a0),d0		 
00018476 6A00                       		bpl.s	Obj3D_down			 
00018478 6000                        		bra.s	Obj3D_up		 
0001847A 08A8 0005 0022             		bclr	#5,$22(a0)
00018480                             
00018480                            Obj3D_up:		
00018480 317C FEE0 0012             		move.w	#-$120,$12(a0)           ; Up	 
00018486 4E75                        	    rts
00018488                            
00018488                            Obj3D_down:
00018488 317C 0120 0012              		move.w	#$120, $12(a0)           ; Down
0001848E                            
0001848E                            loc_17950:
0001848E 6000 FE68                  		bra.w	loc_177E6
00018492                            ; ===========================================================================
00018492                            
00018492                            loc_17954:				; XREF: Obj3D_ShipIndex
00018492 5368 003C                  		subq.w	#1,$3C(a0)
00018496 6B00                       		bmi.s	loc_17960
00018498 6100 FF1A                  		bsr.w	BossMove
0001849C 6000                       		bra.s	loc_17976
0001849E                            ; ===========================================================================
0001849E                            
0001849E                            loc_17960:
0001849E 0868 0000 0022             		bchg	#0,$22(a0)
000184A4 317C 003F 003C             		move.w	#$3F,$3C(a0)
000184AA 5528 0025                  		subq.b	#2,$25(a0)
000184AE 317C 0000 0010             		move.w	#0,$10(a0)
000184B4                            
000184B4                            loc_17976:
000184B4 6000 FE42                  		bra.w	loc_177E6
000184B8                            ; ===========================================================================
000184B8                            
000184B8                            loc_1797A:				; XREF: Obj3D_ShipIndex
000184B8 5368 003C                  		subq.w	#1,$3C(a0)
000184BC 6B00                       		bmi.s	loc_17984
000184BE 6000 FEB2                  		bra.w	BossDefeated
000184C2                            ; ===========================================================================
000184C2                            
000184C2                            loc_17984:
000184C2 08E8 0000 0022             		bset	#0,$22(a0)
000184C8 08A8 0007 0022             		bclr	#7,$22(a0)
000184CE 4268 0010                  		clr.w	$10(a0)
000184D2 5428 0025                  		addq.b	#2,$25(a0)
000184D6 317C FFDA 003C             		move.w	#-$26,$3C(a0)
000184DC 4A38 F7A7                  		tst.b	($FFFFF7A7).w
000184E0 6600                       		bne.s	locret_179AA
000184E2 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
000184E8 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
000184EE 6000 FE82                  		bra.w	BossDefeated
000184F2                            
000184F2                            locret_179AA:
000184F2 4E75                       		rts	
000184F4                            ; ===========================================================================
000184F4                            
000184F4                            loc_179AC:				; XREF: Obj3D_ShipIndex
000184F4 4EB9 0000 DF60             		jsr ObjectFall		
000184FA 5268 003C                  		addq.w	#1,$3C(a0)
000184FE 6700                       		beq.s	loc_179BC
00018500 6A00                       		bpl.s	loc_179C2
00018502 6000                       		bra.s	loc_179EE
00018504                            ; ===========================================================================
00018504                            
00018504                            loc_179BC:
00018504 4268 0012                  		clr.w	$12(a0)
00018508 6000                       		bra.s	loc_179EE
0001850A                            ; ===========================================================================
0001850A                            
0001850A                            loc_179C2:
0001850A 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
00018510 6500                       		bcs.s	loc_179DA
00018512 6700                       		beq.s	loc_179E0
00018514 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
0001851A 6500                       		bcs.s	loc_179EE
0001851C 5428 0025                  		addq.b	#2,$25(a0)
00018520 6000                       		bra.s	loc_179EE
00018522                            ; ===========================================================================
00018522                            
00018522                            loc_179DA:
00018522 5168 0012                  		subq.w	#8,$12(a0)
00018526 6000                       		bra.s	loc_179EE
00018528 6000 FE48                  		bra.w	BossDefeated
0001852C                            ; ===========================================================================
0001852C                            
0001852C                            loc_179E0:
0001852C 4268 0012                  		clr.w	$12(a0)
00018530 303C 0081                  		move.w	#$81,d0
00018534 4EB9 0000 15CC             		jsr	(PlaySound).l	; play GHZ music
0001853A                            
0001853A                            loc_179EE:
0001853A 6100 FE78                  		bsr.w	BossMove
0001853E 6000 FDB8                  		bra.w	loc_177E6
00018542                            ; ===========================================================================
00018542                            
00018542                            loc_179F6:				; XREF: Obj3D_ShipIndex
00018542 0C78 2AC0 F72A             		cmpi.w	#$2AC0,($FFFFF72A).w
00018548 6700                       		beq.s	loc_17A10
0001854A 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001854E 6000                       		bra.s	loc_17A16
00018550                            ; ===========================================================================
00018550                            
00018550                            loc_17A10:
00018550 4A28 0001                  		tst.b	1(a0)
00018554 6A00                       		bpl.s	Obj3D_ShipDel
00018556                            
00018556                            loc_17A16:
00018556 6100 FE5C                  		bsr.w	BossMove
0001855A 6000 FD9C                  		bra.w	loc_177E6
0001855E                            ; ===========================================================================
0001855E                            
0001855E                            Obj3D_ShipDel:
0001855E 4EF9 0000 E034             		jmp	DeleteObject
00018564                            ; ===========================================================================
00018564                            
00018564                            Obj3D_FaceMain:				; XREF: Obj3D_Index
00018564 7000                       		moveq	#0,d0
00018566 7201                       		moveq	#1,d1
00018568 2268 0034                  		movea.l	$34(a0),a1
0001856C 1029 0025                  		move.b	$25(a1),d0
00018570 5900                       		subq.b	#4,d0
00018572 6600                       		bne.s	loc_17A3E
00018574 0C69 2A00 0030             		cmpi.w	#$2A00,$30(a1)
0001857A 6600                       		bne.s	loc_17A46
0001857C 7204                       		moveq	#4,d1
0001857E                            
0001857E                            loc_17A3E:
0001857E 5D00                       		subq.b	#6,d0
00018580 6B00                       		bmi.s	loc_17A46
00018582 720A                       		moveq	#$A,d1
00018584 6000                       		bra.s	loc_17A5A
00018586                            ; ===========================================================================
00018586                            
00018586                            loc_17A46:
00018586 4A29 0020                  		tst.b	$20(a1)
0001858A 6600                       		bne.s	loc_17A50
0001858C 7205                       		moveq	#5,d1
0001858E 6000                       		bra.s	loc_17A5A
00018590                            ; ===========================================================================
00018590                            
00018590                            loc_17A50:
00018590 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00018596 6500                       		bcs.s	loc_17A5A
00018598 7204                       		moveq	#4,d1
0001859A                            
0001859A                            loc_17A5A:
0001859A 1141 001C                  		move.b	d1,$1C(a0)
0001859E 5500                       		subq.b	#2,d0
000185A0 6600                       		bne.s	Obj3D_FaceDisp
000185A2 117C 0006 001C             		move.b	#6,$1C(a0)
000185A8 4A28 0001                  		tst.b	1(a0)
000185AC 6A00                       		bpl.s	Obj3D_FaceDel
000185AE                            
000185AE                            Obj3D_FaceDisp:
000185AE 6000                       		bra.s	Obj3D_Display
000185B0                            ; ===========================================================================
000185B0                            
000185B0                            Obj3D_FaceDel:
000185B0 4EF9 0000 E034             		jmp	DeleteObject
000185B6                            ; ===========================================================================
000185B6                            
000185B6                            Obj3D_FlameMain:			; XREF: Obj3D_Index
000185B6 117C 0007 001C             		move.b	#7,$1C(a0)
000185BC 2268 0034                  		movea.l	$34(a0),a1
000185C0 0C29 000C 0025             		cmpi.b	#$C,$25(a1)
000185C6 6600                       		bne.s	loc_17A96
000185C8 117C 000B 001C             		move.b	#$B,$1C(a0)
000185CE 4A28 0001                  		tst.b	1(a0)
000185D2 6A00                       		bpl.s	Obj3D_FlameDel
000185D4 6000                       		bra.s	Obj3D_FlameDisp
000185D6                            ; ===========================================================================
000185D6                            
000185D6                            loc_17A96:
000185D6 3029 0010                  		move.w	$10(a1),d0
000185DA 6700                       		beq.s	Obj3D_FlameDisp
000185DC 117C 0008 001C             		move.b	#8,$1C(a0)
000185E2                            
000185E2                            Obj3D_FlameDisp:
000185E2 6000                       		bra.s	Obj3D_Display
000185E4                            ; ===========================================================================
000185E4                            
000185E4                            Obj3D_FlameDel:
000185E4 4EF9 0000 E034             		jmp	DeleteObject
000185EA                            ; ===========================================================================
000185EA                            
000185EA                            Obj3D_Display:				; XREF: Obj3D_FaceDisp; Obj3D_FlameDisp
000185EA 2268 0034                  		movea.l	$34(a0),a1
000185EE 3169 0008 0008             		move.w	8(a1),8(a0)
000185F4 3169 000C 000C             		move.w	$C(a1),$C(a0)
000185FA 1169 0022 0022             		move.b	$22(a1),$22(a0)
00018600 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
00018606 4EB9 0000 B056             		jsr	AnimateSprite
0001860C 1028 0022                  		move.b	$22(a0),d0
00018610 0200 0003                  		andi.b	#3,d0
00018614 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001861A 8128 0001                  		or.b	d0,1(a0)
0001861E 4EF9 0000 DFF8             		jmp	DisplaySprite
00018624                            ; ===========================================================================
00018624                            ; ---------------------------------------------------------------------------
00018624                            ; Object 48 - ball on a	chain that Eggman swings (GHZ)
00018624                            ; ---------------------------------------------------------------------------
00018624                            
00018624                            Obj48:					; XREF: Obj_Index
00018624 7000                       		moveq	#0,d0
00018626 1028 0024                  		move.b	$24(a0),d0
0001862A 323B 0000                  		move.w	Obj48_Index(pc,d0.w),d1
0001862E 4EFB 1000                  		jmp	Obj48_Index(pc,d1.w)
00018632                            ; ===========================================================================
00018632 0000                       Obj48_Index:	dc.w Obj48_Main-Obj48_Index
00018634 0000                       		dc.w Obj48_Base-Obj48_Index
00018636 0000                       		dc.w Obj48_Display2-Obj48_Index
00018638 0000                       		dc.w loc_17C68-Obj48_Index
0001863A 0000                       		dc.w Obj48_ChkVanish-Obj48_Index
0001863C                            ; ===========================================================================
0001863C                            
0001863C                            Obj48_Main:				; XREF: Obj48_Index
0001863C 5428 0024                  		addq.b	#2,$24(a0)
00018640 317C 4080 0026             		move.w	#$4080,$26(a0)
00018646 317C FE00 003E             		move.w	#-$200,$3E(a0)
0001864C 217C 0000 0000 0004        		move.l	#Map_BossItems,4(a0)
00018654 317C 046C 0002             		move.w	#$46C,2(a0)
0001865A 45E8 0028                  		lea	$28(a0),a2
0001865E 14FC 0000                  		move.b	#0,(a2)+
00018662 7205                       		moveq	#5,d1
00018664 2248                       		movea.l	a0,a1
00018666 6000                       		bra.s	loc_17B60
00018668                            ; ===========================================================================
00018668                            
00018668                            Obj48_MakeLinks:
00018668 4EB9 0000 E494             		jsr	SingleObjLoad2
0001866E 6600                       		bne.s	Obj48_MakeBall
00018670 3368 0008 0008             		move.w	8(a0),8(a1)
00018676 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001867C 12BC 0048                  		move.b	#$48,0(a1)	; load chain link object
00018680 137C 0006 0024             		move.b	#6,$24(a1)
00018686 237C 0000 840A 0004        		move.l	#Map_obj15,4(a1)
0001868E 337C 0380 0002             		move.w	#$380,2(a1)
00018694 137C 0001 001A             		move.b	#1,$1A(a1)
0001869A 5228 0028                  		addq.b	#1,$28(a0)
0001869E                            
0001869E                            loc_17B60:				; XREF: Obj48_Main
0001869E 3A09                       		move.w	a1,d5
000186A0 0445 D000                  		subi.w	#$D000,d5
000186A4 EC4D                       		lsr.w	#6,d5
000186A6 0245 007F                  		andi.w	#$7F,d5
000186AA 14C5                       		move.b	d5,(a2)+
000186AC 137C 0004 0001             		move.b	#4,1(a1)
000186B2 137C 0008 0019             		move.b	#8,$19(a1)
000186B8 137C 0006 0018             		move.b	#6,$18(a1)
000186BE 2368 0034 0034             		move.l	$34(a0),$34(a1)
000186C4 51C9 FFA2                  		dbf	d1,Obj48_MakeLinks ; repeat sequence 5 more times
000186C8                            
000186C8                            Obj48_MakeBall:
000186C8 137C 0008 0024             		move.b	#8,$24(a1)
000186CE 237C 0000 89FA 0004        		move.l	#Map_obj48,4(a1) ; load	different mappings for final link
000186D6 337C 43AA 0002             		move.w	#$43AA,2(a1)	; use different	graphics
000186DC 137C 0001 001A             		move.b	#1,$1A(a1)
000186E2 137C 0005 0018             		move.b	#5,$18(a1)
000186E8 137C 0081 0020             		move.b	#$81,$20(a1)	; make object hurt Sonic
000186EE 4E75                       		rts	
000186F0                            ; ===========================================================================
000186F0                            
000186F0 0010 2030 4060             Obj48_PosData:	dc.b 0,	$10, $20, $30, $40, $60	; y-position data for links and	giant ball
000186F6                            
000186F6                            ; ===========================================================================
000186F6                            
000186F6                            Obj48_Base:				; XREF: Obj48_Index
000186F6 47F9 0001 86F0             		lea	(Obj48_PosData).l,a3
000186FC 45E8 0028                  		lea	$28(a0),a2
00018700 7C00                       		moveq	#0,d6
00018702 1C1A                       		move.b	(a2)+,d6
00018704                            
00018704                            loc_17BC6:
00018704 7800                       		moveq	#0,d4
00018706 181A                       		move.b	(a2)+,d4
00018708 ED4C                       		lsl.w	#6,d4
0001870A 0684 00FF D000             		addi.l	#$FFD000,d4
00018710 2244                       		movea.l	d4,a1
00018712 101B                       		move.b	(a3)+,d0
00018714 B029 003C                  		cmp.b	$3C(a1),d0
00018718 6700                       		beq.s	loc_17BE0
0001871A 5229 003C                  		addq.b	#1,$3C(a1)
0001871E                            
0001871E                            loc_17BE0:
0001871E 51CE FFE4                  		dbf	d6,loc_17BC6
00018722                            
00018722 B029 003C                  		cmp.b	$3C(a1),d0
00018726 6600                       		bne.s	loc_17BFA
00018728 2268 0034                  		movea.l	$34(a0),a1
0001872C 0C29 0006 0025             		cmpi.b	#6,$25(a1)
00018732 6600                       		bne.s	loc_17BFA
00018734 5428 0024                  		addq.b	#2,$24(a0)
00018738                            
00018738                            loc_17BFA:
00018738 0C68 0020 0032             		cmpi.w	#$20,$32(a0)
0001873E 6700                       		beq.s	Obj48_Display
00018740 5268 0032                  		addq.w	#1,$32(a0)
00018744                            
00018744                            Obj48_Display:
00018744 6100 0000                  		bsr.w	sub_17C2A
00018748 1028 0026                  		move.b	$26(a0),d0
0001874C 4EB9 0000 837C             		jsr	(Obj15_Move2).l
00018752 4EF9 0000 DFF8             		jmp	DisplaySprite
00018758                            ; ===========================================================================
00018758                            
00018758                            Obj48_Display2:				; XREF: Obj48_Index
00018758 6100 0000                  		bsr.w	sub_17C2A
0001875C 4EB9 0000 833C             		jsr	(Obj48_Move).l
00018762 4EF9 0000 DFF8             		jmp	DisplaySprite
00018768                            
00018768                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018768                            
00018768                            
00018768                            sub_17C2A:				; XREF: Obj48_Display; Obj48_Display2
00018768 2268 0034                  		movea.l	$34(a0),a1
0001876C 0628 0020 001B             		addi.b	#$20,$1B(a0)
00018772 6400                       		bcc.s	loc_17C3C
00018774 0868 0000 001A             		bchg	#0,$1A(a0)
0001877A                            
0001877A                            loc_17C3C:
0001877A 3169 0008 003A             		move.w	8(a1),$3A(a0)
00018780 3029 000C                  		move.w	$C(a1),d0
00018784 D068 0032                  		add.w	$32(a0),d0
00018788 3140 0038                  		move.w	d0,$38(a0)
0001878C 1169 0022 0022             		move.b	$22(a1),$22(a0)
00018792 4A29 0022                  		tst.b	$22(a1)
00018796 6A00                       		bpl.s	locret_17C66
00018798 10BC 003F                  		move.b	#$3F,0(a0)
0001879C 117C 0000 0024             		move.b	#0,$24(a0)
000187A2                            
000187A2                            locret_17C66:
000187A2 4E75                       		rts	
000187A4                            ; End of function sub_17C2A
000187A4                            
000187A4                            ; ===========================================================================
000187A4                            
000187A4                            loc_17C68:				; XREF: Obj48_Index
000187A4 2268 0034                  		movea.l	$34(a0),a1
000187A8 4A29 0022                  		tst.b	$22(a1)
000187AC 6A00                       		bpl.s	Obj48_Display3
000187AE 10BC 003F                  		move.b	#$3F,0(a0)
000187B2 117C 0000 0024             		move.b	#0,$24(a0)
000187B8                            
000187B8                            Obj48_Display3:
000187B8 4EF9 0000 DFF8             		jmp	DisplaySprite
000187BE                            ; ===========================================================================
000187BE                            
000187BE                            Obj48_ChkVanish:			; XREF: Obj48_Index
000187BE 7000                       		moveq	#0,d0
000187C0 4A28 001A                  		tst.b	$1A(a0)
000187C4 6600                       		bne.s	Obj48_Vanish
000187C6 5200                       		addq.b	#1,d0
000187C8                            
000187C8                            Obj48_Vanish:
000187C8 1140 001A                  		move.b	d0,$1A(a0)
000187CC 2268 0034                  		movea.l	$34(a0),a1
000187D0 4A29 0022                  		tst.b	$22(a1)
000187D4 6A00                       		bpl.s	Obj48_Display4
000187D6 117C 0000 0020             		move.b	#0,$20(a0)
000187DC 6100 FB94                  		bsr.w	BossDefeated
000187E0 5328 003C                  		subq.b	#1,$3C(a0)
000187E4 6A00                       		bpl.s	Obj48_Display4
000187E6 10BC 003F                  		move.b	#$3F,(a0)
000187EA 117C 0000 0024             		move.b	#0,$24(a0)
000187F0                            
000187F0                            Obj48_Display4:
000187F0 4EF9 0000 DFF8             		jmp	DisplaySprite
000187F6                            ; ===========================================================================
000187F6                            Ani_Eggman:
000187F6                            	include "_anim\Eggman.asm"
000187F6                            ; ---------------------------------------------------------------------------
000187F6                            ; Animation script - Eggman (bosses)
000187F6                            ; ---------------------------------------------------------------------------
000187F6 0000                       		dc.w byte_17CD4-Ani_Eggman
000187F8 0000                       		dc.w byte_17CD8-Ani_Eggman
000187FA 0000                       		dc.w byte_17CDC-Ani_Eggman
000187FC 0000                       		dc.w byte_17CE0-Ani_Eggman
000187FE 0000                       		dc.w byte_17CE4-Ani_Eggman
00018800 0000                       		dc.w byte_17CE8-Ani_Eggman
00018802 0000                       		dc.w byte_17CEC-Ani_Eggman
00018804 0000                       		dc.w byte_17CF0-Ani_Eggman
00018806 0000                       		dc.w byte_17CF4-Ani_Eggman
00018808 0000                       		dc.w byte_17CF8-Ani_Eggman
0001880A 0000                       		dc.w byte_17CFC-Ani_Eggman
0001880C 0000                       		dc.w byte_17D00-Ani_Eggman
0001880E 0F00 FF00                  byte_17CD4:	dc.b $F, 0, $FF, 0
00018812 0501 02FF                  byte_17CD8:	dc.b 5,	1, 2, $FF
00018816 0301 02FF                  byte_17CDC:	dc.b 3,	1, 2, $FF
0001881A 0101 02FF                  byte_17CE0:	dc.b 1,	1, 2, $FF
0001881E 0403 04FF                  byte_17CE4:	dc.b 4,	3, 4, $FF
00018822 1F05 01FF                  byte_17CE8:	dc.b $1F, 5, 1,	$FF
00018826 0306 01FF                  byte_17CEC:	dc.b 3,	6, 1, $FF
0001882A 0F0A FF00                  byte_17CF0:	dc.b $F, $A, $FF, 0
0001882E 0308 09FF                  byte_17CF4:	dc.b 3,	8, 9, $FF
00018832 0108 09FF                  byte_17CF8:	dc.b 1,	8, 9, $FF
00018836 0F07 FF00                  byte_17CFC:	dc.b $F, 7, $FF, 0
0001883A 0209 080B 0C0B 0C09 08FE+  byte_17D00:	dc.b 2,	9, 8, $B, $C, $B, $C, 9, 8, $FE, 2, 0
00018846                            		even
00018846                            		even
00018846                            Ani_TetoB:
00018846                            	include "_anim\TetoB.asm"
00018846                            ; ---------------------------------------------------------------------------
00018846                            ; Animation script - Eggman (bosses)
00018846                            ; ---------------------------------------------------------------------------
00018846 0000                       		dc.w spin-Ani_TetoB
00018848 0000                       		dc.w static-Ani_TetoB
0001884A 0000                       		dc.w static2-Ani_TetoB
0001884C 0400 0102 03FF 00          spin:	dc.b 4, 0, 1, 2, 3, $FF, 0
00018853 0500 FF                    static:	dc.b 5,	0, $FF
00018856 0501 FF                    static2:	dc.b 5,	1, $FF
0001885A 00                         		even
0001885A 00                         		even
0001885A                            ; ---------------------------------------------------------------------------
0001885A                            ; Sprite mappings - Eggman (boss levels)
0001885A                            ; ---------------------------------------------------------------------------
0001885A                            Map_Eggman:
0001885A                            	include "_maps\Eggman.asm"
0001885A                            Map_dc7e:
0001885A 0000                       Map_dc7e_0: 	dc.w Map_dc7e_1A-Map_dc7e
0001885C 0000                       Map_dc7e_2: 	dc.w Map_dc7e_39-Map_dc7e
0001885E 0000                       Map_dc7e_4: 	dc.w Map_dc7e_44-Map_dc7e
00018860 0000                       Map_dc7e_6: 	dc.w Map_dc7e_4F-Map_dc7e
00018862 0000                       Map_dc7e_8: 	dc.w Map_dc7e_5F-Map_dc7e
00018864 0000                       Map_dc7e_A: 	dc.w Map_dc7e_6F-Map_dc7e
00018866 0000                       Map_dc7e_C: 	dc.w Map_dc7e_7F-Map_dc7e
00018868 0000                       Map_dc7e_E: 	dc.w Map_dc7e_8F-Map_dc7e
0001886A 0000                       Map_dc7e_10: 	dc.w Map_dc7e_A4-Map_dc7e
0001886C 0000                       Map_dc7e_12: 	dc.w Map_dc7e_AA-Map_dc7e
0001886E 0000                       Map_dc7e_14: 	dc.w Map_dc7e_B0-Map_dc7e
00018870 0000                       Map_dc7e_16: 	dc.w Map_dc7e_B1-Map_dc7e
00018872 0000                       Map_dc7e_18: 	dc.w Map_dc7e_BC-Map_dc7e
00018874 06                         Map_dc7e_1A: 	dc.b $6
00018875 EC01 000A E4               	dc.b $EC, $1, $0, $A, $E4
0001887A EC05 000C 0C               	dc.b $EC, $5, $0, $C, $C
0001887F FC0E 2010 E4               	dc.b $FC, $E, $20, $10, $E4
00018884 FC0E 201C 04               	dc.b $FC, $E, $20, $1C, $4
00018889 140C 2028 EC               	dc.b $14, $C, $20, $28, $EC
0001888E 1400 202C 0C               	dc.b $14, $0, $20, $2C, $C
00018893 02                         Map_dc7e_39: 	dc.b $2
00018894 E404 0000 F4               	dc.b $E4, $4, $0, $0, $F4
00018899 EC0D 0002 EC               	dc.b $EC, $D, $0, $2, $EC
0001889E 02                         Map_dc7e_44: 	dc.b $2
0001889F E404 0000 F4               	dc.b $E4, $4, $0, $0, $F4
000188A4 EC0D 0035 EC               	dc.b $EC, $D, $0, $35, $EC
000188A9 03                         Map_dc7e_4F: 	dc.b $3
000188AA E408 003D F4               	dc.b $E4, $8, $0, $3D, $F4
000188AF EC09 0040 EC               	dc.b $EC, $9, $0, $40, $EC
000188B4 EC05 0046 04               	dc.b $EC, $5, $0, $46, $4
000188B9 03                         Map_dc7e_5F: 	dc.b $3
000188BA E408 004A F4               	dc.b $E4, $8, $0, $4A, $F4
000188BF EC09 004D EC               	dc.b $EC, $9, $0, $4D, $EC
000188C4 EC05 0053 04               	dc.b $EC, $5, $0, $53, $4
000188C9 03                         Map_dc7e_6F: 	dc.b $3
000188CA E408 0057 F4               	dc.b $E4, $8, $0, $57, $F4
000188CF EC09 005A EC               	dc.b $EC, $9, $0, $5A, $EC
000188D4 EC05 0060 04               	dc.b $EC, $5, $0, $60, $4
000188D9 03                         Map_dc7e_7F: 	dc.b $3
000188DA E404 0064 04               	dc.b $E4, $4, $0, $64, $4
000188DF E404 0000 F4               	dc.b $E4, $4, $0, $0, $F4
000188E4 EC0D 0035 EC               	dc.b $EC, $D, $0, $35, $EC
000188E9 04                         Map_dc7e_8F: 	dc.b $4
000188EA E409 0066 F4               	dc.b $E4, $9, $0, $66, $F4
000188EF E408 0057 F4               	dc.b $E4, $8, $0, $57, $F4
000188F4 EC09 005A EC               	dc.b $EC, $9, $0, $5A, $EC
000188F9 EC05 0060 04               	dc.b $EC, $5, $0, $60, $4
000188FE 01                         Map_dc7e_A4: 	dc.b $1
000188FF 0405 002D 22               	dc.b $4, $5, $0, $2D, $22
00018904 01                         Map_dc7e_AA: 	dc.b $1
00018905 0405 0031 22               	dc.b $4, $5, $0, $31, $22
0001890A 00                         Map_dc7e_B0: 	dc.b $0
0001890B 02                         Map_dc7e_B1: 	dc.b $2
0001890C 0008 012A 22               	dc.b $0, $8, $1, $2A, $22
00018911 0808 112A 22               	dc.b $8, $8, $11, $2A, $22
00018916 02                         Map_dc7e_BC: 	dc.b $2
00018917 F80B 012D 22               	dc.b $F8, $B, $1, $2D, $22
0001891C 0001 0139 3A               	dc.b $0, $1, $1, $39, $3A
00018922 00                         	even
00018922 00                         	even
00018922                            
00018922                            ; ---------------------------------------------------------------------------
00018922                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
00018922                            ; ---------------------------------------------------------------------------
00018922                            Map_BossItems:
00018922                            	include "_maps\Boss items.asm"
00018922                            ; ---------------------------------------------------------------------------
00018922                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
00018922                            ; ---------------------------------------------------------------------------
00018922 0000 0000                  		dc.w byte_17DE4-Map_BossItems, byte_17DEA-Map_BossItems
00018926 0000 0000                  		dc.w byte_17DF6-Map_BossItems, byte_17DFC-Map_BossItems
0001892A 0000 0000                  		dc.w byte_17E02-Map_BossItems, byte_17E08-Map_BossItems
0001892E 0000 0000                  		dc.w byte_17E1E-Map_BossItems, byte_17E2A-Map_BossItems
00018932 01                         byte_17DE4:	dc.b 1
00018933 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00018938 02                         byte_17DEA:	dc.b 2
00018939 FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8
0001893E F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00018943 00                         		dc.b 0
00018944 01                         byte_17DF6:	dc.b 1
00018945 FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC
0001894A 01                         byte_17DFC:	dc.b 1
0001894B 1409 0007 F4               		dc.b $14, 9, 0,	7, $F4
00018950 01                         byte_17E02:	dc.b 1
00018951 1405 000D F8               		dc.b $14, 5, 0,	$D, $F8
00018956 04                         byte_17E08:	dc.b 4
00018957 F004 0011 F8               		dc.b $F0, 4, 0,	$11, $F8
0001895C F801 0013 F8               		dc.b $F8, 1, 0,	$13, $F8
00018961 F801 0813 00               		dc.b $F8, 1, 8,	$13, 0
00018966 0804 0015 F8               		dc.b 8,	4, 0, $15, $F8
0001896B 00                         		dc.b 0
0001896C 02                         byte_17E1E:	dc.b 2
0001896D 0005 0017 00               		dc.b 0,	5, 0, $17, 0
00018972 0000 001B 10               		dc.b 0,	0, 0, $1B, $10
00018977 00                         		dc.b 0
00018978 02                         byte_17E2A:	dc.b 2
00018979 1804 001C 00               		dc.b $18, 4, 0,	$1C, 0
0001897E 000B 001E 10               		dc.b 0,	$B, 0, $1E, $10
00018984 00                         		even
00018984 00                         		even
00018984                            
00018984                            ; ===========================================================================
00018984                            ; ---------------------------------------------------------------------------
00018984                            ; Object 77 - Fatass teto boss fight in LZ -STDH
00018984                            ; ---------------------------------------------------------------------------
00018984                            
00018984                            
00018984                            obj77:					; XREF: Obj_Index
00018984 7000                       		moveq	#0,d0
00018986 1028 0024                  		move.b	$24(a0),d0
0001898A 323B 0000                  		move.w	obj77_Index(pc,d0.w),d1
0001898E 4EFB 1000                  		jmp	obj77_Index(pc,d1.w)
00018992                            ; ===========================================================================
00018992 0000                       obj77_Index:	dc.w obj77_Main-obj77_Index
00018994 0000                       		dc.w obj77_ShipMain-obj77_Index
00018996 0000                       		dc.w obj77_FaceMain-obj77_Index
00018998 0000                       		dc.w obj77_FlameMain-obj77_Index
0001899A                            
0001899A 0200                       obj77_ObjData:	dc.b 2,	0		; routine counter, animation
0001899C 0401                       		dc.b 4,	1
0001899E 0607                       		dc.b 6,	7
000189A0                            ; ===========================================================================
000189A0                            
000189A0                            obj77_Main:				; XREF: obj77_Index
000189A0 45F9 0001 899A             		lea	(obj77_ObjData).l,a2
000189A6 2248                       		movea.l	a0,a1
000189A8 7202                       		moveq	#2,d1
000189AA 6000                       		bra.s	obj77_LoadBoss
000189AC                            ; ===========================================================================
000189AC                            
000189AC                            obj77_Loop:
000189AC 4EB9 0000 E494             		jsr	SingleObjLoad2
000189B2 6600                       		bne.s	loc2_17772
000189B4                            
000189B4                            obj77_LoadBoss:				; XREF: obj77_Main
000189B4 135A 0024                  		move.b	(a2)+,$24(a1)
000189B8 12BC 0077                  		move.b	#$77,0(a1)
000189BC 3368 0008 0008             		move.w	8(a0),8(a1)
000189C2 3368 000C 000C             		move.w	$C(a0),$C(a1)
000189C8 237C 0000 0000 0004        		move.l	#Map_TetoBoss,4(a1)
000189D0 337C 0400 0002             		move.w	#$400,2(a1)
000189D6 137C 0004 0001             		move.b	#4,1(a1)
000189DC 137C 0020 0019             		move.b	#$20,$19(a1)
000189E2 137C 0003 0018             		move.b	#3,$18(a1)
000189E8 135A 001C                  		move.b	(a2)+,$1C(a1)
000189EC 2348 0034                  		move.l	a0,$34(a1)
000189F0 51C9 FFBA                  		dbf	d1,obj77_Loop	; repeat sequence 2 more times
000189F4                            
000189F4                            loc2_17772:
000189F4 3168 0008 0030             		move.w	8(a0),$30(a0)
000189FA 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018A00 117C 000F 0020             		move.b	#$F,$20(a0)
00018A06 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00018A0C                            
00018A0C                            obj77_ShipMain:				; XREF: obj77_Index
00018A0C 7000                       		moveq	#0,d0
00018A0E 1028 0025                  		move.b	$25(a0),d0
00018A12 323B 0000                  		move.w	obj77_ShipIndex(pc,d0.w),d1
00018A16 4EBB 1000                  		jsr	obj77_ShipIndex(pc,d1.w)
00018A1A 43F9 0001 8846             		lea	(Ani_TetoB).l,a1
00018A20 4EB9 0000 B056             		jsr	AnimateSprite
00018A26 1028 0022                  		move.b	$22(a0),d0
00018A2A 0200 0003                  		andi.b	#3,d0
00018A2E 0228 00FC 0001             		andi.b	#$FC,1(a0)
00018A34 8128 0001                  		or.b	d0,1(a0)
00018A38 4EF9 0000 DFF8             		jmp	DisplaySprite
00018A3E                            ; ===========================================================================
00018A3E 0000                       obj77_ShipIndex:dc.w obj77_ShipStart-obj77_ShipIndex
00018A40 0000                       		dc.w obj77_MakeBall-obj77_ShipIndex
00018A42 0000                       		dc.w obj77_ShipMove-obj77_ShipIndex
00018A44 0000                       		dc.w loc2_17954-obj77_ShipIndex
00018A46 0000                       		dc.w fatassruns-obj77_ShipIndex		
00018A48 0000                       		dc.w loc2_1797A-obj77_ShipIndex
00018A4A 0000                       		dc.w loc2_179AC-obj77_ShipIndex
00018A4C 0000                       		dc.w loc2_179F6-obj77_ShipIndex
00018A4E                            ; ===========================================================================
00018A4E                            
00018A4E                            obj77_ShipStart:			; XREF: obj77_ShipIndex
00018A4E                            	;	move.w	#$100,$12(a0)	; move ship down
00018A4E 6100 F964                  		bsr.w	BossMove
00018A52 0C68 06E0 0038             		cmpi.w	#$6E0,$38(a0)
00018A58 6600                       		bne.s	loc2_177E6
00018A5A 317C 0000 0012             		move.w	#0,$12(a0)	; stop ship
00018A60 5428 0025                  		addq.b	#2,$25(a0)	; goto next routine
00018A64                            
00018A64                            loc2_177E6:
00018A64                            ;		move.b	$3F(a0),d0
00018A64                            ;		jsr	(CalcSine).l
00018A64 EC40                       		asr.w	#6,d0
00018A66 D068 0038                  		add.w	$38(a0),d0
00018A6A 3140 000C                  		move.w	d0,$C(a0)
00018A6E 3168 0030 0008             		move.w	$30(a0),8(a0)
00018A74 5428 003F                  		addq.b	#2,$3F(a0)
00018A78 0C28 000A 0025             		cmpi.b	#$A,$25(a0)
00018A7E 6400                       		bcc.s	locret_1784A2
00018A80 4A28 0022                  		tst.b	$22(a0)
00018A84 6B00                       		bmi.s	loc2_1784C
00018A86 4A28 0020                  		tst.b	$20(a0)
00018A8A 6600                       		bne.s	locret_1784A2
00018A8C 4A28 003E                  		tst.b	$3E(a0)
00018A90 6600                       		bne.s	obj77_ShipFlash
00018A92 117C 0060 003E             		move.b	#$60,$3E(a0)	; set number of	times for ship to flash
00018A98 303C 00AC                  		move.w	#$AC,d0
00018A9C 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play boss damage sound
00018AA2                            
00018AA2                            obj77_ShipFlash:
00018AA2 43F8 FB22                  		lea	($FFFFFB22).w,a1 ; load	2nd pallet, 2nd	entry
00018AA6 7000                       		moveq	#0,d0		; move 0 (black) to d0
00018AA8 4A51                       		tst.w	(a1)
00018AAA 6600                       		bne.s	loc2_1783C
00018AAC 303C 0EEE                  		move.w	#$EEE,d0	; move 0EEE (white) to d0
00018AB0                            
00018AB0                            loc2_1783C:
00018AB0 3280                       		move.w	d0,(a1)		; load colour stored in	d0
00018AB2 5328 003E                  		subq.b	#1,$3E(a0)
00018AB6 6600                       		bne.s	locret_1784A2
00018AB8 117C 000F 0020             		move.b	#$F,$20(a0)
00018ABE                            
00018ABE                            locret_1784A2:
00018ABE 4E75                       		rts	
00018AC0                            ; ===========================================================================
00018AC0                            
00018AC0                            loc2_1784C:				; XREF: loc2_177E6
00018AC0 7064                       		moveq	#100,d0
00018AC2 6100 0000                  		bsr.w	AddPoints
00018AC6 117C 000A 0025             		move.b	#$A,$25(a0)
00018ACC 317C 00B3 003C             		move.w	#$B3,$3C(a0)
00018AD2 4E75                       		rts	
00018AD4                            ; ===========================================================================
00018AD4                            
00018AD4                            obj77_MakeBall:				; XREF: obj77_ShipIndex
00018AD4 317C FF00 0010             		move.w	#-$100,$10(a0)
00018ADA 117C 0001 001C             		move.b	#1,$1C(a0)	; it runs
00018AE0 6100 F8D2                  		bsr.w	BossMove
00018AE4 0C68 1E00 0030             		cmpi.w	#$1E00,$30(a0)
00018AEA 6600                       		bne.s	loc2_17916
00018AEC 317C 0000 0010             		move.w	#0,$10(a0)
00018AF2 117C 0002 001C             		move.b	#2,$1C(a0)	; stare
00018AF8 317C 0000 0012             		move.w	#0,$12(a0)
00018AFE 5428 0025                  		addq.b	#2,$25(a0)
00018B02                            
00018B02                            loc2_17910:
00018B02 317C 0077 003C             		move.w	#$77,$3C(a0)
00018B08                            
00018B08                            loc2_17916:
00018B08 6000 FF5A                  		bra.w	loc2_177E6
00018B0C                            ; ===========================================================================
00018B0C                            
00018B0C                            obj77_ShipMove:				; XREF: obj77_ShipIndex
00018B0C 6100 F8A6                  		bsr.w	BossMove
00018B10 5368 003C                  		subq.w	#1,$3C(a0)
00018B14 6A00                       		bpl.s	loc2_17950 ; if time remains go here
00018B16 117C 0000 001C             		move.b	#0,$1C(a0)	; make it spin
00018B1C 117C 0087 0020             		move.b	#$87,$20(a0) ; the spinning hurts you
00018B22 317C FE00 0010             		move.w	#-$200,$10(a0)	; move the ship	sideways
00018B28 0C68 1D10 0030             		cmpi.w	#$1D10,$30(a0) ; is teto here
00018B2E 6600                       		bne.s	loc2_17950 ; if not branch
00018B30                            
00018B30                            fatass_attack:
00018B30 317C 0000 0010             		move.w	#0,$10(a0) ; stop her
00018B36 317C FE00 0012             		move.w	#-$200,$12(a0) ; OH SHIT SHES GOING UP
00018B3C 0C68 0680 0038              		cmpi.w	#$680,$38(a0) ; is she here
00018B42 6600                       		bne.s	loc2_17950    ; if not you know the drill
00018B44 5428 0025                  		addq.b	#2,$25(a0)	; next routine!
00018B48 317C 0000 0012             		move.w	#0,$12(a0) ; stop her		
00018B4E                            
00018B4E                            loc2_17950:
00018B4E 6000 FF14                  		bra.w	loc2_177E6
00018B52                            ; ===========================================================================
00018B52                            
00018B52                            loc2_17954:				; XREF: obj77_ShipIndex
00018B52 6100 F860                  		bsr.w	BossMove
00018B56 317C 0400 0012             		move.w	#$400,$12(a0) ; RUN A EARTHQUAKE!!
00018B5C                            		; i suck at programming
00018B5C 0C68 06E0 0038              		cmpi.w	#$6E0,$38(a0) ; is she back to the ground
00018B62 6600                       		bne.s	loc2_17976    ; if not blah blah
00018B64 317C 0000 0012             		move.w	#0,$12(a0) ; stop her		
00018B6A 5428 0025                  		addq.b	#2,$25(a0)	; next routine!
00018B6E 303C 00B9                  		move.w	#$B9,d0
00018B72 4EB9 0000 15CC             		jsr	(PlaySound).l	; play the earthquake sound
00018B78                            
00018B78                            Peartobombs:	
00018B78 4EB9 0000 E494                		jsr	SingleObjLoad2
00018B7E 6600                       		bne.s	secondone
00018B80 12BC 0019                  		move.b	#$19,0(a1)	; load pearto bomb
00018B84 337C 1D70 0008             		move.w	#$1D70,8(a1)
00018B8A 337C 0670 000C             		move.w	#$670,$C(a1)
00018B90                            secondone:		
00018B90 4EB9 0000 E494                		jsr	SingleObjLoad2
00018B96 6600                       		bne.s	loc2_17976		
00018B98 12BC 0019                  		move.b	#$19,0(a1)	; load pearto bomb 2
00018B9C 337C 1D20 0008             		move.w	#$1D20,8(a1)
00018BA2 337C 0670 000C             		move.w	#$670,$C(a1)
00018BA8                            lastone:
00018BA8 4EB9 0000 E494                		jsr	SingleObjLoad2
00018BAE 6600                       		bne.s	loc2_17976		
00018BB0 12BC 0019                  		move.b	#$19,0(a1)	; load pearto bomb 3
00018BB4 337C 1E00 0008             		move.w	#$1E00,8(a1)
00018BBA 337C 0670 000C             		move.w	#$670,$C(a1)
00018BC0                            		
00018BC0                            loc2_17976:
00018BC0 6000 FEA2                  		bra.w	loc2_177E6
00018BC4                            		
00018BC4                            ; ===========================================================================
00018BC4                            Fatassruns:
00018BC4 6100 F7EE                   		bsr.w	BossMove
00018BC8 317C 0200 0010             		move.w	#$200,$10(a0)	; IT RUNS!!
00018BCE 0C68 1E00 0030             		cmpi.w	#$1E00,$30(a0) ; is she back here
00018BD4 6600                       		bne.s	processstuff ; is not go here
00018BD6 317C 0000 0010             		move.w	#0,$10(a0)	; stop'
00018BDC 117C 0002 001C             		move.b	#2,$1C(a0)	; stareeeee
00018BE2 5928 0025                  		subq.b	#4,$25(a0) ; make the boss loop
00018BE6 317C 0077 003C             		move.w	#$77,$3C(a0) ; timeerr
00018BEC 117C 000F 0020             		move.b	#$F,$20(a0) ; now you can hit her
00018BF2                            		
00018BF2                            		
00018BF2                            processstuff:
00018BF2 6000 FE70                  		bra.w	loc2_177E6
00018BF6                            ; ===========================================================================
00018BF6                            
00018BF6                            loc2_1797A:				; XREF: obj77_ShipIndex
00018BF6 5368 003C                  		subq.w	#1,$3C(a0)
00018BFA 6B00                       		bmi.s	loc2_17984
00018BFC 6000 F774                  		bra.w	BossDefeated
00018C00                            ; ===========================================================================
00018C00                            
00018C00                            loc2_17984:
00018C00 08E8 0000 0022             		bset	#0,$22(a0)
00018C06 08A8 0007 0022             		bclr	#7,$22(a0)
00018C0C 4268 0010                  		clr.w	$10(a0)
00018C10 5428 0025                  		addq.b	#2,$25(a0)
00018C14 317C FFDA 003C             		move.w	#-$26,$3C(a0)
00018C1A 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00018C1E 6600                       		bne.s	locret_179AA2
00018C20 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00018C26                            
00018C26                            locret_179AA2:
00018C26 4E75                       		rts	
00018C28                            ; ===========================================================================
00018C28                            
00018C28                            loc2_179AC:				; XREF: obj77_ShipIndex
00018C28 5268 003C                  		addq.w	#1,$3C(a0)
00018C2C 6700                       		beq.s	loc2_179BC
00018C2E 6A00                       		bpl.s	loc2_179C2
00018C30 0668 0018 0012             		addi.w	#$18,$12(a0)
00018C36 6000                       		bra.s	loc2_179EE
00018C38                            ; ===========================================================================
00018C38                            
00018C38                            loc2_179BC:
00018C38 4268 0012                  		clr.w	$12(a0)
00018C3C 6000                       		bra.s	loc2_179EE
00018C3E                            ; ===========================================================================
00018C3E                            
00018C3E                            loc2_179C2:
00018C3E 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
00018C44 6500                       		bcs.s	loc2_179DA
00018C46 6700                       		beq.s	loc2_179E0
00018C48 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
00018C4E 6500                       		bcs.s	loc2_179EE
00018C50 5428 0025                  		addq.b	#2,$25(a0)
00018C54 6000                       		bra.s	loc2_179EE
00018C56                            ; ===========================================================================
00018C56                            
00018C56                            loc2_179DA:
00018C56 5168 0012                  		subq.w	#8,$12(a0)
00018C5A 6000                       		bra.s	loc2_179EE
00018C5C                            ; ===========================================================================
00018C5C                            
00018C5C                            loc2_179E0:
00018C5C 4268 0012                  		clr.w	$12(a0)
00018C60 303C 0097                  		move.w	#$97,d0
00018C64 4EB9 0000 15CC             		jsr	(PlaySound).l	; play lz3 music
00018C6A                            
00018C6A                            loc2_179EE:
00018C6A 6100 F748                  		bsr.w	BossMove
00018C6E 6000 FDF4                  		bra.w	loc2_177E6
00018C72                            ; ===========================================================================
00018C72                            
00018C72                            loc2_179F6:				; XREF: obj77_ShipIndex
00018C72 317C 0400 0010             		move.w	#$400,$10(a0)
00018C78 317C FFC0 0012             		move.w	#-$40,$12(a0)
00018C7E 0C78 1F00 F72A             		cmpi.w	#$1F00,($FFFFF72A).w
00018C84 6700                       		beq.s	loc2_17A10
00018C86 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00018C8A 6000                       		bra.s	loc2_17A16
00018C8C                            ; ===========================================================================
00018C8C                            
00018C8C                            loc2_17A10:
00018C8C 4A28 0001                  		tst.b	1(a0)
00018C90 6A00                       		bpl.s	obj77_ShipDel
00018C92                            
00018C92                            loc2_17A16:
00018C92 6100 F720                  		bsr.w	BossMove
00018C96 6000 FDCC                  		bra.w	loc2_177E6
00018C9A                            ; ===========================================================================
00018C9A                            
00018C9A                            obj77_ShipDel:
00018C9A 4EF9 0000 E034             		jmp	DeleteObject
00018CA0                            ; ===========================================================================
00018CA0                            
00018CA0                            obj77_FaceMain:				; XREF: obj77_Index
00018CA0 4E75                       		rts
00018CA2                            ; ===========================================================================
00018CA2                            
00018CA2                            obj77_FlameMain:			; XREF: obj77_Index
00018CA2 4E75                       		rts
00018CA4                            ; ===========================================================================
00018CA4                            
00018CA4                            obj77_Display:				; XREF: obj77_FaceDisp; obj77_FlameDisp
00018CA4 43F9 0001 8846             		lea	(Ani_TetoB).l,a1
00018CAA 4EB9 0000 B056             		jsr	AnimateSprite
00018CB0 4EF9 0000 DFF8             		jmp	DisplaySprite
00018CB6                            ; ---------------------------------------------------------------------------
00018CB6                            ; Sprite mappings - Fatass teto boss
00018CB6                            ; ---------------------------------------------------------------------------
00018CB6                            Map_TetoBoss:
00018CB6                            	include "_maps\tetoboss.asm"
00018CB6                            Map_f09a:
00018CB6 0000                       Map_f09a_0: 	dc.w Map_f09a_8-Map_f09a
00018CB8 0000                       Map_f09a_2: 	dc.w Map_f09a_18-Map_f09a
00018CBA 0000                       Map_f09a_4: 	dc.w Map_f09a_37-Map_f09a
00018CBC 0000                       Map_f09a_6: 	dc.w Map_f09a_47-Map_f09a
00018CBE 03                         Map_f09a_8: 	dc.b $3
00018CBF E50F 602B F0               	dc.b $E5, $F, $60, $2B, $F0
00018CC4 050E 603B F0               	dc.b $5, $E, $60, $3B, $F0
00018CC9 DD00 6047 F8               	dc.b $DD, $0, $60, $47, $F8
00018CCE 06                         Map_f09a_18: 	dc.b $6
00018CCF EC0E 6000 E4               	dc.b $EC, $E, $60, $0, $E4
00018CD4 040E 600C EC               	dc.b $4, $E, $60, $C, $EC
00018CD9 E408 6018 F4               	dc.b $E4, $8, $60, $18, $F4
00018CDE 1C00 601B F4               	dc.b $1C, $0, $60, $1B, $F4
00018CE3 EC0A 601C 04               	dc.b $EC, $A, $60, $1C, $4
00018CE8 0406 6025 0C               	dc.b $4, $6, $60, $25, $C
00018CED 03                         Map_f09a_37: 	dc.b $3
00018CEE E50F 682B F0               	dc.b $E5, $F, $68, $2B, $F0
00018CF3 050E 683B F0               	dc.b $5, $E, $68, $3B, $F0
00018CF8 DD00 6847 00               	dc.b $DD, $0, $68, $47, $0
00018CFD 06                         Map_f09a_47: 	dc.b $6
00018CFE ED0E 6048 E4               	dc.b $ED, $E, $60, $48, $E4
00018D03 050E 6054 EC               	dc.b $5, $E, $60, $54, $EC
00018D08 E508 6060 F4               	dc.b $E5, $8, $60, $60, $F4
00018D0D DD00 6063 FC               	dc.b $DD, $0, $60, $63, $FC
00018D12 ED0A 6064 04               	dc.b $ED, $A, $60, $64, $4
00018D17 0502 606D 0C               	dc.b $5, $2, $60, $6D, $C
00018D1C                            	even
00018D1C                            	even
00018D1C                            ; ===========================================================================
00018D1C                            ; ---------------------------------------------------------------------------
00018D1C                            ; Object 73 - Eggman (MZ)
00018D1C                            ; ---------------------------------------------------------------------------
00018D1C                            
00018D1C                            Obj73:					; XREF: Obj_Index
00018D1C 7000                       		moveq	#0,d0
00018D1E 1028 0024                  		move.b	$24(a0),d0
00018D22 323B 0000                  		move.w	Obj73_Index(pc,d0.w),d1
00018D26 4EFB 1000                  		jmp	Obj73_Index(pc,d1.w)
00018D2A                            ; ===========================================================================
00018D2A 0000                       Obj73_Index:	dc.w Obj73_Main-Obj73_Index
00018D2C 0000                       		dc.w Obj73_ShipMain-Obj73_Index
00018D2E 0000                       		dc.w Obj73_FaceMain-Obj73_Index
00018D30 0000                       		dc.w Obj73_FlameMain-Obj73_Index
00018D32 0000                       		dc.w Obj73_TubeMain-Obj73_Index
00018D34                            
00018D34 0200 04                    Obj73_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
00018D37 0401 04                    		dc.b 4,	1, 4
00018D3A 0607 04                    		dc.b 6,	7, 4
00018D3D 0800 03                    		dc.b 8,	0, 3
00018D40                            ; ===========================================================================
00018D40                            
00018D40                            Obj73_Main:				; XREF: Obj73_Index
00018D40 3168 0008 0030             		move.w	8(a0),$30(a0)
00018D46 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018D4C 117C 000F 0020             		move.b	#$F,$20(a0)
00018D52 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00018D58 45FA FFDA                  		lea	Obj73_ObjData(pc),a2
00018D5C 2248                       		movea.l	a0,a1
00018D5E 7203                       		moveq	#3,d1
00018D60 6000                       		bra.s	Obj73_LoadBoss
00018D62                            ; ===========================================================================
00018D62                            
00018D62                            Obj73_Loop:
00018D62 4EB9 0000 E494             		jsr	SingleObjLoad2
00018D68 6600                       		bne.s	Obj73_ShipMain
00018D6A 12BC 0073                  		move.b	#$73,0(a1)
00018D6E 3368 0008 0008             		move.w	8(a0),8(a1)
00018D74 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018D7A                            
00018D7A                            Obj73_LoadBoss:				; XREF: Obj73_Main
00018D7A 08A8 0000 0022             		bclr	#0,$22(a0)
00018D80 4229 0025                  		clr.b	$25(a1)
00018D84 135A 0024                  		move.b	(a2)+,$24(a1)
00018D88 135A 001C                  		move.b	(a2)+,$1C(a1)
00018D8C 135A 0018                  		move.b	(a2)+,$18(a1)
00018D90 237C 0001 885A 0004        		move.l	#Map_Eggman,4(a1)
00018D98 337C 0400 0002             		move.w	#$400,2(a1)
00018D9E 137C 0004 0001             		move.b	#4,1(a1)
00018DA4 137C 0020 0019             		move.b	#$20,$19(a1)
00018DAA 2348 0034                  		move.l	a0,$34(a1)
00018DAE 51C9 FFB2                  		dbf	d1,Obj73_Loop	; repeat sequence 3 more times
00018DB2                            
00018DB2                            Obj73_ShipMain:
00018DB2 7000                       		moveq	#0,d0
00018DB4 1028 0025                  		move.b	$25(a0),d0
00018DB8 323B 0000                  		move.w	Obj73_ShipIndex(pc,d0.w),d1
00018DBC 4EBB 1000                  		jsr	Obj73_ShipIndex(pc,d1.w)
00018DC0 43F9 0001 87F6             		lea	(Ani_Eggman).l,a1
00018DC6 4EB9 0000 B056             		jsr	AnimateSprite
00018DCC 7003                       		moveq	#3,d0
00018DCE C028 0022                  		and.b	$22(a0),d0
00018DD2 0228 00FC 0001             		andi.b	#$FC,1(a0)
00018DD8 8128 0001                  		or.b	d0,1(a0)
00018DDC 4EF9 0000 DFF8             		jmp	DisplaySprite
00018DE2                            ; ===========================================================================
00018DE2 0000                       Obj73_ShipIndex:dc.w loc_18302-Obj73_ShipIndex
00018DE4 0000                       		dc.w loc_183AA-Obj73_ShipIndex
00018DE6 0000                       		dc.w loc_184F6-Obj73_ShipIndex
00018DE8 0000                       		dc.w loc_1852C-Obj73_ShipIndex
00018DEA 0000                       		dc.w loc_18582-Obj73_ShipIndex
00018DEC                            ; ===========================================================================
00018DEC                            
00018DEC                            loc_18302:				; XREF: Obj73_ShipIndex
00018DEC 1028 003F                  		move.b	$3F(a0),d0
00018DF0 5428 003F                  		addq.b	#2,$3F(a0)
00018DF4 4EB9 0000 2D6C             		jsr	(CalcSine).l
00018DFA E440                       		asr.w	#2,d0
00018DFC 3140 0012                  		move.w	d0,$12(a0)
00018E00 317C FF00 0010             		move.w	#-$100,$10(a0)
00018E06 6100 F5AC                  		bsr.w	BossMove
00018E0A 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
00018E10 6600                       		bne.s	loc_18334
00018E12 5428 0025                  		addq.b	#2,$25(a0)
00018E16 4228 0028                  		clr.b	$28(a0)
00018E1A 42A8 0010                  		clr.l	$10(a0)
00018E1E                            
00018E1E                            loc_18334:
00018E1E 4EB9 0000 2D46             		jsr	(RandomNumber).l
00018E24 1140 0034                  		move.b	d0,$34(a0)
00018E28                            
00018E28                            loc_1833E:
00018E28 3168 0038 000C             		move.w	$38(a0),$C(a0)
00018E2E 3168 0030 0008             		move.w	$30(a0),8(a0)
00018E34 0C28 0004 0025             		cmpi.b	#4,$25(a0)
00018E3A 6400                       		bcc.s	locret_18390
00018E3C 4A28 0022                  		tst.b	$22(a0)
00018E40 6B00                       		bmi.s	loc_18392
00018E42 4A28 0020                  		tst.b	$20(a0)
00018E46 6600                       		bne.s	locret_18390
00018E48 4A28 003E                  		tst.b	$3E(a0)
00018E4C 6600                       		bne.s	loc_18374
00018E4E 117C 0028 003E             		move.b	#$28,$3E(a0)
00018E54 303C 00AC                  		move.w	#$AC,d0
00018E58 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play boss damage sound
00018E5E                            
00018E5E                            loc_18374:
00018E5E 43F8 FB22                  		lea	($FFFFFB22).w,a1
00018E62 7000                       		moveq	#0,d0
00018E64 4A51                       		tst.w	(a1)
00018E66 6600                       		bne.s	loc_18382
00018E68 303C 0EEE                  		move.w	#$EEE,d0
00018E6C                            
00018E6C                            loc_18382:
00018E6C 3280                       		move.w	d0,(a1)
00018E6E 5328 003E                  		subq.b	#1,$3E(a0)
00018E72 6600                       		bne.s	locret_18390
00018E74 117C 000F 0020             		move.b	#$F,$20(a0)
00018E7A                            
00018E7A                            locret_18390:
00018E7A 4E75                       		rts	
00018E7C                            ; ===========================================================================
00018E7C                            
00018E7C                            loc_18392:				; XREF: loc_1833E
00018E7C 7064                       		moveq	#100,d0
00018E7E 6100 0000                  		bsr.w	AddPoints
00018E82 117C 0004 0025             		move.b	#4,$25(a0)
00018E88 317C 00B4 003C             		move.w	#$B4,$3C(a0)
00018E8E 4268 0010                  		clr.w	$10(a0)
00018E92 4E75                       		rts	
00018E94                            ; ===========================================================================
00018E94                            
00018E94                            loc_183AA:				; XREF: Obj73_ShipIndex
00018E94 7000                       		moveq	#0,d0
00018E96 1028 0028                  		move.b	$28(a0),d0
00018E9A 303B 0000                  		move.w	off_183C2(pc,d0.w),d0
00018E9E 4EBB 0000                  		jsr	off_183C2(pc,d0.w)
00018EA2 0228 0006 0028             		andi.b	#6,$28(a0)
00018EA8 6000 FF7E                  		bra.w	loc_1833E
00018EAC                            ; ===========================================================================
00018EAC 0000                       off_183C2:	dc.w loc_183CA-off_183C2
00018EAE 0000                       		dc.w Obj73_MakeLava2-off_183C2
00018EB0 0000                       		dc.w loc_183CA-off_183C2
00018EB2 0000                       		dc.w Obj73_MakeLava2-off_183C2
00018EB4                            ; ===========================================================================
00018EB4                            
00018EB4                            loc_183CA:				; XREF: off_183C2
00018EB4 4A68 0010                  		tst.w	$10(a0)
00018EB8 6600                       		bne.s	loc_183FE
00018EBA 7040                       		moveq	#$40,d0
00018EBC 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
00018EC2 6700                       		beq.s	loc_183E6
00018EC4 6500                       		bcs.s	loc_183DE
00018EC6 4440                       		neg.w	d0
00018EC8                            
00018EC8                            loc_183DE:
00018EC8 3140 0012                  		move.w	d0,$12(a0)
00018ECC 6000 F4E6                  		bra.w	BossMove
00018ED0                            ; ===========================================================================
00018ED0                            
00018ED0                            loc_183E6:
00018ED0 317C 0200 0010             		move.w	#$200,$10(a0)
00018ED6 317C 0100 0012             		move.w	#$100,$12(a0)
00018EDC 0828 0000 0022             		btst	#0,$22(a0)
00018EE2 6600                       		bne.s	loc_183FE
00018EE4 4468 0010                  		neg.w	$10(a0)
00018EE8                            
00018EE8                            loc_183FE:
00018EE8 0C28 0018 003E             		cmpi.b	#$18,$3E(a0)
00018EEE 6400                       		bcc.s	Obj73_MakeLava
00018EF0 6100 F4C2                  		bsr.w	BossMove
00018EF4 5968 0012                  		subq.w	#4,$12(a0)
00018EF8                            
00018EF8                            Obj73_MakeLava:
00018EF8 5328 0034                  		subq.b	#1,$34(a0)
00018EFC 6400                       		bcc.s	loc_1845C
00018EFE 4EB9 0000 E47E             		jsr	SingleObjLoad
00018F04 6600                       		bne.s	loc_1844A
00018F06 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
00018F0A 337C 02E8 000C             		move.w	#$2E8,$C(a1)	; set Y	position
00018F10 4EB9 0000 2D46             		jsr	(RandomNumber).l
00018F16 0280 0000 FFFF             		andi.l	#$FFFF,d0
00018F1C 80FC 0050                  		divu.w	#$50,d0
00018F20 4840                       		swap	d0
00018F22 0640 1878                  		addi.w	#$1878,d0
00018F26 3340 0008                  		move.w	d0,8(a1)
00018F2A EE09                       		lsr.b	#7,d1
00018F2C 337C 00FF 0028             		move.w	#$FF,$28(a1)
00018F32                            
00018F32                            loc_1844A:
00018F32 4EB9 0000 2D46             		jsr	(RandomNumber).l
00018F38 0200 001F                  		andi.b	#$1F,d0
00018F3C 0600 0040                  		addi.b	#$40,d0
00018F40 1140 0034                  		move.b	d0,$34(a0)
00018F44                            
00018F44                            loc_1845C:
00018F44 0828 0000 0022             		btst	#0,$22(a0)
00018F4A 6700                       		beq.s	loc_18474
00018F4C 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
00018F52 6D00                       		blt.s	locret_1849C
00018F54 317C 1910 0030             		move.w	#$1910,$30(a0)
00018F5A 6000                       		bra.s	loc_18482
00018F5C                            ; ===========================================================================
00018F5C                            
00018F5C                            loc_18474:
00018F5C 0C68 1830 0030             		cmpi.w	#$1830,$30(a0)
00018F62 6E00                       		bgt.s	locret_1849C
00018F64 317C 1830 0030             		move.w	#$1830,$30(a0)
00018F6A                            
00018F6A                            loc_18482:
00018F6A 4268 0010                  		clr.w	$10(a0)
00018F6E 317C FE80 0012             		move.w	#-$180,$12(a0)
00018F74 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
00018F7A 6400                       		bcc.s	loc_18498
00018F7C 4468 0012                  		neg.w	$12(a0)
00018F80                            
00018F80                            loc_18498:
00018F80 5428 0028                  		addq.b	#2,$28(a0)
00018F84                            
00018F84                            locret_1849C:
00018F84 4E75                       		rts	
00018F86                            ; ===========================================================================
00018F86                            
00018F86                            Obj73_MakeLava2:			; XREF: off_183C2
00018F86 6100 F42C                  		bsr.w	BossMove
00018F8A 3028 0038                  		move.w	$38(a0),d0
00018F8E 0440 022C                  		subi.w	#$22C,d0
00018F92 6E00                       		bgt.s	locret_184F4
00018F94 303C 022C                  		move.w	#$22C,d0
00018F98 4A68 0012                  		tst.w	$12(a0)
00018F9C 6700                       		beq.s	loc_184EA
00018F9E 4268 0012                  		clr.w	$12(a0)
00018FA2 317C 0050 003C             		move.w	#$50,$3C(a0)
00018FA8 0868 0000 0022             		bchg	#0,$22(a0)
00018FAE 4EB9 0000 E47E             		jsr	SingleObjLoad
00018FB4 6600                       		bne.s	loc_184EA
00018FB6 3368 0030 0008             		move.w	$30(a0),8(a1)
00018FBC 3368 0038 000C             		move.w	$38(a0),$C(a1)
00018FC2 0669 0018 000C             		addi.w	#$18,$C(a1)
00018FC8 12BC 0074                  		move.b	#$74,(a1)	; load lava ball object
00018FCC 137C 0001 0028             		move.b	#1,$28(a1)
00018FD2                            
00018FD2                            loc_184EA:
00018FD2 5368 003C                  		subq.w	#1,$3C(a0)
00018FD6 6600                       		bne.s	locret_184F4
00018FD8 5428 0028                  		addq.b	#2,$28(a0)
00018FDC                            
00018FDC                            locret_184F4:
00018FDC 4E75                       		rts	
00018FDE                            ; ===========================================================================
00018FDE                            
00018FDE                            loc_184F6:				; XREF: Obj73_ShipIndex
00018FDE 5368 003C                  		subq.w	#1,$3C(a0)
00018FE2 6B00                       		bmi.s	loc_18500
00018FE4 6000 F38C                  		bra.w	BossDefeated
00018FE8                            ; ===========================================================================
00018FE8                            
00018FE8                            loc_18500:
00018FE8 08E8 0000 0022             		bset	#0,$22(a0)
00018FEE 08A8 0007 0022             		bclr	#7,$22(a0)
00018FF4 4268 0010                  		clr.w	$10(a0)
00018FF8 5428 0025                  		addq.b	#2,$25(a0)
00018FFC 317C FFDA 003C             		move.w	#-$26,$3C(a0)
00019002 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00019006 6600                       		bne.s	locret_1852A
00019008 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
0001900E 4268 0012                  		clr.w	$12(a0)
00019012                            
00019012                            locret_1852A:
00019012 4E75                       		rts	
00019014                            ; ===========================================================================
00019014                            
00019014                            loc_1852C:				; XREF: Obj73_ShipIndex
00019014 5268 003C                  		addq.w	#1,$3C(a0)
00019018 6700                       		beq.s	loc_18544
0001901A 6A00                       		bpl.s	loc_1854E
0001901C 0C68 0270 0038             		cmpi.w	#$270,$38(a0)
00019022 6400                       		bcc.s	loc_18544
00019024 0668 0018 0012             		addi.w	#$18,$12(a0)
0001902A 6000                       		bra.s	loc_1857A
0001902C                            ; ===========================================================================
0001902C                            
0001902C                            loc_18544:
0001902C 4268 0012                  		clr.w	$12(a0)
00019030 4268 003C                  		clr.w	$3C(a0)
00019034 6000                       		bra.s	loc_1857A
00019036                            ; ===========================================================================
00019036                            
00019036                            loc_1854E:
00019036 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
0001903C 6500                       		bcs.s	loc_18566
0001903E 6700                       		beq.s	loc_1856C
00019040 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
00019046 6500                       		bcs.s	loc_1857A
00019048 5428 0025                  		addq.b	#2,$25(a0)
0001904C 6000                       		bra.s	loc_1857A
0001904E                            ; ===========================================================================
0001904E                            
0001904E                            loc_18566:
0001904E 5168 0012                  		subq.w	#8,$12(a0)
00019052 6000                       		bra.s	loc_1857A
00019054                            ; ===========================================================================
00019054                            
00019054                            loc_1856C:
00019054 4268 0012                  		clr.w	$12(a0)
00019058 303C 0083                  		move.w	#$83,d0
0001905C 4EB9 0000 15CC             		jsr	(PlaySound).l	; play MZ music
00019062                            
00019062                            loc_1857A:
00019062 6100 F350                  		bsr.w	BossMove
00019066 6000 FDC0                  		bra.w	loc_1833E
0001906A                            ; ===========================================================================
0001906A                            
0001906A                            loc_18582:				; XREF: Obj73_ShipIndex
0001906A 317C 0500 0010             		move.w	#$500,$10(a0)
00019070 317C FFC0 0012             		move.w	#-$40,$12(a0)
00019076 0C78 1960 F72A             		cmpi.w	#$1960,($FFFFF72A).w
0001907C 6400                       		bcc.s	loc_1859C
0001907E 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00019082 6000                       		bra.s	loc_185A2
00019084                            ; ===========================================================================
00019084                            
00019084                            loc_1859C:
00019084 4A28 0001                  		tst.b	1(a0)
00019088 6A00                       		bpl.s	Obj73_ShipDel
0001908A                            
0001908A                            loc_185A2:
0001908A 6100 F328                  		bsr.w	BossMove
0001908E 6000 FD98                  		bra.w	loc_1833E
00019092                            ; ===========================================================================
00019092                            
00019092                            Obj73_ShipDel:
00019092 4EF9 0000 E034             		jmp	DeleteObject
00019098                            ; ===========================================================================
00019098                            
00019098                            Obj73_FaceMain:				; XREF: Obj73_Index
00019098 7000                       		moveq	#0,d0
0001909A 7201                       		moveq	#1,d1
0001909C 2268 0034                  		movea.l	$34(a0),a1
000190A0 1029 0025                  		move.b	$25(a1),d0
000190A4 5540                       		subq.w	#2,d0
000190A6 6600                       		bne.s	loc_185D2
000190A8 0829 0001 0028             		btst	#1,$28(a1)
000190AE 6700                       		beq.s	loc_185DA
000190B0 4A69 0012                  		tst.w	$12(a1)
000190B4 6600                       		bne.s	loc_185DA
000190B6 7204                       		moveq	#4,d1
000190B8 6000                       		bra.s	loc_185EE
000190BA                            ; ===========================================================================
000190BA                            
000190BA                            loc_185D2:
000190BA 5500                       		subq.b	#2,d0
000190BC 6B00                       		bmi.s	loc_185DA
000190BE 720A                       		moveq	#$A,d1
000190C0 6000                       		bra.s	loc_185EE
000190C2                            ; ===========================================================================
000190C2                            
000190C2                            loc_185DA:
000190C2 4A29 0020                  		tst.b	$20(a1)
000190C6 6600                       		bne.s	loc_185E4
000190C8 7205                       		moveq	#5,d1
000190CA 6000                       		bra.s	loc_185EE
000190CC                            ; ===========================================================================
000190CC                            
000190CC                            loc_185E4:
000190CC 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
000190D2 6500                       		bcs.s	loc_185EE
000190D4 7204                       		moveq	#4,d1
000190D6                            
000190D6                            loc_185EE:
000190D6 1141 001C                  		move.b	d1,$1C(a0)
000190DA 5900                       		subq.b	#4,d0
000190DC 6600                       		bne.s	loc_18602
000190DE 117C 0006 001C             		move.b	#6,$1C(a0)
000190E4 4A28 0001                  		tst.b	1(a0)
000190E8 6A00                       		bpl.s	Obj73_FaceDel
000190EA                            
000190EA                            loc_18602:
000190EA 6000                       		bra.s	Obj73_Display
000190EC                            ; ===========================================================================
000190EC                            
000190EC                            Obj73_FaceDel:
000190EC 4EF9 0000 E034             		jmp	DeleteObject
000190F2                            ; ===========================================================================
000190F2                            
000190F2                            Obj73_FlameMain:			; XREF: Obj73_Index
000190F2 117C 0007 001C             		move.b	#7,$1C(a0)
000190F8 2268 0034                  		movea.l	$34(a0),a1
000190FC 0C29 0008 0025             		cmpi.b	#8,$25(a1)
00019102 6D00                       		blt.s	loc_1862A
00019104 117C 000B 001C             		move.b	#$B,$1C(a0)
0001910A 4A28 0001                  		tst.b	1(a0)
0001910E 6A00                       		bpl.s	Obj73_FlameDel
00019110 6000                       		bra.s	loc_18636
00019112                            ; ===========================================================================
00019112                            
00019112                            loc_1862A:
00019112 4A69 0010                  		tst.w	$10(a1)
00019116 6700                       		beq.s	loc_18636
00019118 117C 0008 001C             		move.b	#8,$1C(a0)
0001911E                            
0001911E                            loc_18636:
0001911E 6000                       		bra.s	Obj73_Display
00019120                            ; ===========================================================================
00019120                            
00019120                            Obj73_FlameDel:				; XREF: Obj73_FlameMain
00019120 4EF9 0000 E034             		jmp	DeleteObject
00019126                            ; ===========================================================================
00019126                            
00019126                            Obj73_Display:
00019126 43F9 0001 87F6             		lea	(Ani_Eggman).l,a1
0001912C 4EB9 0000 B056             		jsr	AnimateSprite
00019132                            
00019132                            loc_1864A:
00019132 2268 0034                  		movea.l	$34(a0),a1
00019136 3169 0008 0008             		move.w	8(a1),8(a0)
0001913C 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019142 1169 0022 0022             		move.b	$22(a1),$22(a0)
00019148 7003                       		moveq	#3,d0
0001914A C028 0022                  		and.b	$22(a0),d0
0001914E 0228 00FC 0001             		andi.b	#-4,1(a0)
00019154 8128 0001                  		or.b	d0,1(a0)
00019158 4EF9 0000 DFF8             		jmp	DisplaySprite
0001915E                            ; ===========================================================================
0001915E                            
0001915E                            Obj73_TubeMain:				; XREF: Obj73_Index
0001915E 2268 0034                  		movea.l	$34(a0),a1
00019162 0C29 0008 0025             		cmpi.b	#8,$25(a1)
00019168 6600                       		bne.s	loc_18688
0001916A 4A28 0001                  		tst.b	1(a0)
0001916E 6A00                       		bpl.s	Obj73_TubeDel
00019170                            
00019170                            loc_18688:
00019170 217C 0001 8922 0004        		move.l	#Map_BossItems,4(a0)
00019178 317C 246C 0002             		move.w	#$246C,2(a0)
0001917E 117C 0004 001A             		move.b	#4,$1A(a0)
00019184 60AC                       		bra.s	loc_1864A
00019186                            ; ===========================================================================
00019186                            
00019186                            Obj73_TubeDel:
00019186 4EF9 0000 E034             		jmp	DeleteObject
0001918C                            ; ===========================================================================
0001918C                            ; ---------------------------------------------------------------------------
0001918C                            ; Object 74 - lava that	Eggman drops (MZ)
0001918C                            ; ---------------------------------------------------------------------------
0001918C                            
0001918C                            Obj74:					; XREF: Obj_Index
0001918C 7000                       		moveq	#0,d0
0001918E 1028 0024                  		move.b	$24(a0),d0
00019192 303B 0000                  		move.w	Obj74_Index(pc,d0.w),d0
00019196 4EBB 0000                  		jsr	Obj74_Index(pc,d0.w)
0001919A 4EF9 0000 DFF8             		jmp	DisplaySprite
000191A0                            ; ===========================================================================
000191A0 0000                       Obj74_Index:	dc.w Obj74_Main-Obj74_Index
000191A2 0000                       		dc.w Obj74_Action-Obj74_Index
000191A4 0000                       		dc.w loc_18886-Obj74_Index
000191A6 0000                       		dc.w Obj74_Delete3-Obj74_Index
000191A8                            ; ===========================================================================
000191A8                            
000191A8                            Obj74_Main:				; XREF: Obj74_Index
000191A8 117C 0008 0016             		move.b	#8,$16(a0)
000191AE 117C 0008 0017             		move.b	#8,$17(a0)
000191B4 217C 0000 BC54 0004        		move.l	#Map_obj14,4(a0)
000191BC 317C 0345 0002             		move.w	#$345,2(a0)
000191C2 117C 0004 0001             		move.b	#4,1(a0)
000191C8 117C 0005 0018             		move.b	#5,$18(a0)
000191CE 3168 000C 0038             		move.w	$C(a0),$38(a0)
000191D4 117C 0008 0019             		move.b	#8,$19(a0)
000191DA 5428 0024                  		addq.b	#2,$24(a0)
000191DE 4A28 0028                  		tst.b	$28(a0)
000191E2 6600                       		bne.s	loc_1870A
000191E4 117C 008B 0020             		move.b	#$8B,$20(a0)
000191EA 5428 0024                  		addq.b	#2,$24(a0)
000191EE 6000 0000                  		bra.w	loc_18886
000191F2                            ; ===========================================================================
000191F2                            
000191F2                            loc_1870A:
000191F2 117C 001E 0029             		move.b	#$1E,$29(a0)
000191F8 303C 00AE                  		move.w	#$AE,d0
000191FC 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play lava sound
00019202                            
00019202                            Obj74_Action:				; XREF: Obj74_Index
00019202 7000                       		moveq	#0,d0
00019204 1028 0025                  		move.b	$25(a0),d0
00019208 303B 0000                  		move.w	Obj74_Index2(pc,d0.w),d0
0001920C 4EBB 0000                  		jsr	Obj74_Index2(pc,d0.w)
00019210 4EB9 0000 DFD2             		jsr	SpeedToPos
00019216 43F9 0000 EEB2             		lea	(Ani_obj14).l,a1
0001921C 4EB9 0000 B056             		jsr	AnimateSprite
00019222 0C68 02E8 000C             		cmpi.w	#$2E8,$C(a0)
00019228 6200                       		bhi.s	Obj74_Delete
0001922A 4E75                       		rts	
0001922C                            ; ===========================================================================
0001922C                            
0001922C                            Obj74_Delete:
0001922C 4EF9 0000 E034             		jmp	DeleteObject
00019232                            ; ===========================================================================
00019232 0000                       Obj74_Index2:	dc.w Obj74_Drop-Obj74_Index2
00019234 0000                       		dc.w Obj74_MakeFlame-Obj74_Index2
00019236 0000                       		dc.w Obj74_Duplicate-Obj74_Index2
00019238 0000                       		dc.w Obj74_FallEdge-Obj74_Index2
0001923A                            ; ===========================================================================
0001923A                            
0001923A                            Obj74_Drop:				; XREF: Obj74_Index2
0001923A 08E8 0001 0022             		bset	#1,$22(a0)
00019240 5328 0029                  		subq.b	#1,$29(a0)
00019244 6A00                       		bpl.s	locret_18780
00019246 117C 008B 0020             		move.b	#$8B,$20(a0)
0001924C 4228 0028                  		clr.b	$28(a0)
00019250 0668 0018 0012             		addi.w	#$18,$12(a0)
00019256 08A8 0001 0022             		bclr	#1,$22(a0)
0001925C 6100 C6A4                  		bsr.w	ObjHitFloor
00019260 4A41                       		tst.w	d1
00019262 6A00                       		bpl.s	locret_18780
00019264 5428 0025                  		addq.b	#2,$25(a0)
00019268                            
00019268                            locret_18780:
00019268 4E75                       		rts	
0001926A                            ; ===========================================================================
0001926A                            
0001926A                            Obj74_MakeFlame:			; XREF: Obj74_Index2
0001926A 5568 000C                  		subq.w	#2,$C(a0)
0001926E 08E8 0007 0002             		bset	#7,2(a0)
00019274 317C 00A0 0010             		move.w	#$A0,$10(a0)
0001927A 4268 0012                  		clr.w	$12(a0)
0001927E 3168 0008 0030             		move.w	8(a0),$30(a0)
00019284 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001928A 117C 0003 0029             		move.b	#3,$29(a0)
00019290 4EB9 0000 E494             		jsr	SingleObjLoad2
00019296 6600                       		bne.s	loc_187CA
00019298 47D1                       		lea	(a1),a3
0001929A 45D0                       		lea	(a0),a2
0001929C 7003                       		moveq	#3,d0
0001929E                            
0001929E                            Obj74_Loop:
0001929E 26DA                       		move.l	(a2)+,(a3)+
000192A0 26DA                       		move.l	(a2)+,(a3)+
000192A2 26DA                       		move.l	(a2)+,(a3)+
000192A4 26DA                       		move.l	(a2)+,(a3)+
000192A6 51C8 FFF6                  		dbf	d0,Obj74_Loop
000192AA                            
000192AA 4469 0010                  		neg.w	$10(a1)
000192AE 5429 0025                  		addq.b	#2,$25(a1)
000192B2                            
000192B2                            loc_187CA:
000192B2 5428 0025                  		addq.b	#2,$25(a0)
000192B6 4E75                       		rts	
000192B8                            
000192B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000192B8                            
000192B8                            
000192B8                            Obj74_Duplicate2:			; XREF: Obj74_Duplicate
000192B8 4EB9 0000 E494             		jsr	SingleObjLoad2
000192BE 6600                       		bne.s	locret_187EE
000192C0 3368 0008 0008             		move.w	8(a0),8(a1)
000192C6 3368 000C 000C             		move.w	$C(a0),$C(a1)
000192CC 12BC 0074                  		move.b	#$74,(a1)
000192D0 337C 0067 0028             		move.w	#$67,$28(a1)
000192D6                            
000192D6                            locret_187EE:
000192D6 4E75                       		rts	
000192D8                            ; End of function Obj74_Duplicate2
000192D8                            
000192D8                            ; ===========================================================================
000192D8                            
000192D8                            Obj74_Duplicate:			; XREF: Obj74_Index2
000192D8 6100 C628                  		bsr.w	ObjHitFloor
000192DC 4A41                       		tst.w	d1
000192DE 6A00                       		bpl.s	loc_18826
000192E0 3028 0008                  		move.w	8(a0),d0
000192E4 0C40 1940                  		cmpi.w	#$1940,d0
000192E8 6E00                       		bgt.s	loc_1882C
000192EA 3228 0030                  		move.w	$30(a0),d1
000192EE B240                       		cmp.w	d0,d1
000192F0 6700                       		beq.s	loc_1881E
000192F2 0240 0010                  		andi.w	#$10,d0
000192F6 0241 0010                  		andi.w	#$10,d1
000192FA B240                       		cmp.w	d0,d1
000192FC 6700                       		beq.s	loc_1881E
000192FE 61B8                       		bsr.s	Obj74_Duplicate2
00019300 3168 0008 0032             		move.w	8(a0),$32(a0)
00019306                            
00019306                            loc_1881E:
00019306 3168 0008 0030             		move.w	8(a0),$30(a0)
0001930C 4E75                       		rts	
0001930E                            ; ===========================================================================
0001930E                            
0001930E                            loc_18826:
0001930E 5428 0025                  		addq.b	#2,$25(a0)
00019312 4E75                       		rts	
00019314                            ; ===========================================================================
00019314                            
00019314                            loc_1882C:
00019314 5428 0024                  		addq.b	#2,$24(a0)
00019318 4E75                       		rts	
0001931A                            ; ===========================================================================
0001931A                            
0001931A                            Obj74_FallEdge:				; XREF: Obj74_Index2
0001931A 08A8 0001 0022             		bclr	#1,$22(a0)
00019320 0668 0024 0012             		addi.w	#$24,$12(a0)	; make flame fall
00019326 3028 0008                  		move.w	8(a0),d0
0001932A 9068 0032                  		sub.w	$32(a0),d0
0001932E 6A00                       		bpl.s	loc_1884A
00019330 4440                       		neg.w	d0
00019332                            
00019332                            loc_1884A:
00019332 0C40 0012                  		cmpi.w	#$12,d0
00019336 6600                       		bne.s	loc_18856
00019338 08A8 0007 0002             		bclr	#7,2(a0)
0001933E                            
0001933E                            loc_18856:
0001933E 6100 C5C2                  		bsr.w	ObjHitFloor
00019342 4A41                       		tst.w	d1
00019344 6A00                       		bpl.s	locret_1887E
00019346 5328 0029                  		subq.b	#1,$29(a0)
0001934A 6700                       		beq.s	Obj74_Delete2
0001934C 4268 0012                  		clr.w	$12(a0)
00019350 3168 0032 0008             		move.w	$32(a0),8(a0)
00019356 3168 0038 000C             		move.w	$38(a0),$C(a0)
0001935C 08E8 0007 0002             		bset	#7,2(a0)
00019362 5528 0025                  		subq.b	#2,$25(a0)
00019366                            
00019366                            locret_1887E:
00019366 4E75                       		rts	
00019368                            ; ===========================================================================
00019368                            
00019368                            Obj74_Delete2:
00019368 4EF9 0000 E034             		jmp	DeleteObject
0001936E                            ; ===========================================================================
0001936E                            
0001936E                            loc_18886:				; XREF: Obj74_Index
0001936E 08E8 0007 0002             		bset	#7,2(a0)
00019374 5328 0029                  		subq.b	#1,$29(a0)
00019378 6600                       		bne.s	Obj74_Animate
0001937A 117C 0001 001C             		move.b	#1,$1C(a0)
00019380 5968 000C                  		subq.w	#4,$C(a0)
00019384 4228 0020                  		clr.b	$20(a0)
00019388                            
00019388                            Obj74_Animate:
00019388 43F9 0000 EEB2             		lea	(Ani_obj14).l,a1
0001938E 4EF9 0000 B056             		jmp	AnimateSprite
00019394                            ; ===========================================================================
00019394                            
00019394                            Obj74_Delete3:				; XREF: Obj74_Index
00019394 4EF9 0000 E034             		jmp	DeleteObject
0001939A                            ; ===========================================================================
0001939A                            
0001939A                            Obj7A_Delete:
0001939A 4EF9 0000 E034             		jmp	DeleteObject
000193A0                            ; ===========================================================================
000193A0                            ; ---------------------------------------------------------------------------
000193A0                            ; Object 7A - Eggman (SLZ)
000193A0                            ; ---------------------------------------------------------------------------
000193A0                            
000193A0                            Obj7A:					; XREF: Obj_Index
000193A0 7000                       		moveq	#0,d0
000193A2 1028 0024                  		move.b	$24(a0),d0
000193A6 323B 0000                  		move.w	Obj7A_Index(pc,d0.w),d1
000193AA 4EFB 1000                  		jmp	Obj7A_Index(pc,d1.w)
000193AE                            ; ===========================================================================
000193AE 0000                       Obj7A_Index:	dc.w Obj7A_Main-Obj7A_Index
000193B0 0000                       		dc.w Obj7A_ShipMain-Obj7A_Index
000193B2 0000                       		dc.w Obj7A_FaceMain-Obj7A_Index
000193B4 0000                       		dc.w Obj7A_FlameMain-Obj7A_Index
000193B6 0000                       		dc.w Obj7A_TubeMain-Obj7A_Index
000193B8                            
000193B8 0200 04                    Obj7A_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
000193BB 0401 04                    		dc.b 4,	1, 4
000193BE 0607 04                    		dc.b 6,	7, 4
000193C1 0800 03                    		dc.b 8,	0, 3
000193C4                            ; ===========================================================================
000193C4                            
000193C4                            Obj7A_Main:				; XREF: Obj7A_Index
000193C4 317C 2188 0008             		move.w	#$2188,8(a0)
000193CA 317C 0228 000C             		move.w	#$228,$C(a0)
000193D0 3168 0008 0030             		move.w	8(a0),$30(a0)
000193D6 3168 000C 0038             		move.w	$C(a0),$38(a0)
000193DC 117C 000F 0020             		move.b	#$F,$20(a0)
000193E2 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
000193E8 45FA FFCE                  		lea	Obj7A_ObjData(pc),a2
000193EC 2248                       		movea.l	a0,a1
000193EE 7203                       		moveq	#3,d1
000193F0 6000                       		bra.s	Obj7A_LoadBoss
000193F2                            ; ===========================================================================
000193F2                            
000193F2                            Obj7A_Loop:
000193F2 4EB9 0000 E494             		jsr	SingleObjLoad2
000193F8 6600                       		bne.s	loc_1895C
000193FA 12BC 007A                  		move.b	#$7A,0(a1)
000193FE 3368 0008 0008             		move.w	8(a0),8(a1)
00019404 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001940A                            
0001940A                            Obj7A_LoadBoss:				; XREF: Obj7A_Main
0001940A 08A8 0000 0022             		bclr	#0,$22(a0)
00019410 4229 0025                  		clr.b	$25(a1)
00019414 135A 0024                  		move.b	(a2)+,$24(a1)
00019418 135A 001C                  		move.b	(a2)+,$1C(a1)
0001941C 135A 0018                  		move.b	(a2)+,$18(a1)
00019420 237C 0001 885A 0004        		move.l	#Map_Eggman,4(a1)
00019428 337C 0400 0002             		move.w	#$400,2(a1)
0001942E 137C 0004 0001             		move.b	#4,1(a1)
00019434 137C 0020 0019             		move.b	#$20,$19(a1)
0001943A 2348 0034                  		move.l	a0,$34(a1)
0001943E 51C9 FFB2                  		dbf	d1,Obj7A_Loop	; repeat sequence 3 more times
00019442                            
00019442                            loc_1895C:
00019442 43F8 D040                  		lea	($FFFFD040).w,a1
00019446 45E8 002A                  		lea	$2A(a0),a2
0001944A 705E                       		moveq	#$5E,d0
0001944C 723E                       		moveq	#$3E,d1
0001944E                            
0001944E                            loc_18968:
0001944E B011                       		cmp.b	(a1),d0
00019450 6600                       		bne.s	loc_18974
00019452 4A29 0028                  		tst.b	$28(a1)
00019456 6700                       		beq.s	loc_18974
00019458 34C9                       		move.w	a1,(a2)+
0001945A                            
0001945A                            loc_18974:
0001945A D2FC 0040                  		adda.w	#$40,a1
0001945E 51C9 FFEE                  		dbf	d1,loc_18968
00019462                            
00019462                            Obj7A_ShipMain:				; XREF: Obj7A_Index
00019462 7000                       		moveq	#0,d0
00019464 1028 0025                  		move.b	$25(a0),d0
00019468 303B 0000                  		move.w	Obj7A_ShipIndex(pc,d0.w),d0
0001946C 4EBB 0000                  		jsr	Obj7A_ShipIndex(pc,d0.w)
00019470 43F9 0001 87F6             		lea	(Ani_Eggman).l,a1
00019476 4EB9 0000 B056             		jsr	AnimateSprite
0001947C 7003                       		moveq	#3,d0
0001947E C028 0022                  		and.b	$22(a0),d0
00019482 0228 00FC 0001             		andi.b	#$FC,1(a0)
00019488 8128 0001                  		or.b	d0,1(a0)
0001948C 4EF9 0000 DFF8             		jmp	DisplaySprite
00019492                            ; ===========================================================================
00019492 0000                       Obj7A_ShipIndex:dc.w loc_189B8-Obj7A_ShipIndex
00019494 0000                       		dc.w loc_18A5E-Obj7A_ShipIndex
00019496 0000                       		dc.w Obj7A_MakeBall-Obj7A_ShipIndex
00019498 0000                       		dc.w loc_18B48-Obj7A_ShipIndex
0001949A 0000                       		dc.w loc_18B80-Obj7A_ShipIndex
0001949C 0000                       		dc.w loc_18BC6-Obj7A_ShipIndex
0001949E                            ; ===========================================================================
0001949E                            
0001949E                            loc_189B8:				; XREF: Obj7A_ShipIndex
0001949E 317C FF00 0010             		move.w	#-$100,$10(a0)
000194A4 0C68 2120 0030             		cmpi.w	#$2120,$30(a0)
000194AA 6400                       		bcc.s	loc_189CA
000194AC 5428 0025                  		addq.b	#2,$25(a0)
000194B0                            
000194B0                            loc_189CA:
000194B0 6100 EF02                  		bsr.w	BossMove
000194B4 1028 003F                  		move.b	$3F(a0),d0
000194B8 5428 003F                  		addq.b	#2,$3F(a0)
000194BC 4EB9 0000 2D6C             		jsr	(CalcSine).l
000194C2 EC40                       		asr.w	#6,d0
000194C4 D068 0038                  		add.w	$38(a0),d0
000194C8 3140 000C                  		move.w	d0,$C(a0)
000194CC 3168 0030 0008             		move.w	$30(a0),8(a0)
000194D2 6000                       		bra.s	loc_189FE
000194D4                            ; ===========================================================================
000194D4                            
000194D4                            loc_189EE:
000194D4 6100 EEDE                  		bsr.w	BossMove
000194D8 3168 0038 000C             		move.w	$38(a0),$C(a0)
000194DE 3168 0030 0008             		move.w	$30(a0),8(a0)
000194E4                            
000194E4                            loc_189FE:
000194E4 0C28 0006 0025             		cmpi.b	#6,$25(a0)
000194EA 6400                       		bcc.s	locret_18A44
000194EC 4A28 0022                  		tst.b	$22(a0)
000194F0 6B00                       		bmi.s	loc_18A46
000194F2 4A28 0020                  		tst.b	$20(a0)
000194F6 6600                       		bne.s	locret_18A44
000194F8 4A28 003E                  		tst.b	$3E(a0)
000194FC 6600                       		bne.s	loc_18A28
000194FE 117C 0020 003E             		move.b	#$20,$3E(a0)
00019504 303C 00AC                  		move.w	#$AC,d0
00019508 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001950E                            
0001950E                            loc_18A28:
0001950E 43F8 FB22                  		lea	($FFFFFB22).w,a1
00019512 7000                       		moveq	#0,d0
00019514 4A51                       		tst.w	(a1)
00019516 6600                       		bne.s	loc_18A36
00019518 303C 0EEE                  		move.w	#$EEE,d0
0001951C                            
0001951C                            loc_18A36:
0001951C 3280                       		move.w	d0,(a1)
0001951E 5328 003E                  		subq.b	#1,$3E(a0)
00019522 6600                       		bne.s	locret_18A44
00019524 117C 000F 0020             		move.b	#$F,$20(a0)
0001952A                            
0001952A                            locret_18A44:
0001952A 4E75                       		rts	
0001952C                            ; ===========================================================================
0001952C                            
0001952C                            loc_18A46:
0001952C 7064                       		moveq	#100,d0
0001952E 6100 0000                  		bsr.w	AddPoints
00019532 117C 0006 0025             		move.b	#6,$25(a0)
00019538 117C 0078 003C             		move.b	#$78,$3C(a0)
0001953E 4268 0010                  		clr.w	$10(a0)
00019542 4E75                       		rts	
00019544                            ; ===========================================================================
00019544                            
00019544                            loc_18A5E:				; XREF: Obj7A_ShipIndex
00019544 3028 0030                  		move.w	$30(a0),d0
00019548 317C 0200 0010             		move.w	#$200,$10(a0)
0001954E 0828 0000 0022             		btst	#0,$22(a0)
00019554 6600                       		bne.s	loc_18A7C
00019556 4468 0010                  		neg.w	$10(a0)
0001955A 0C40 2008                  		cmpi.w	#$2008,d0
0001955E 6E00                       		bgt.s	loc_18A88
00019560 6000                       		bra.s	loc_18A82
00019562                            ; ===========================================================================
00019562                            
00019562                            loc_18A7C:
00019562 0C40 2138                  		cmpi.w	#$2138,d0
00019566 6D00                       		blt.s	loc_18A88
00019568                            
00019568                            loc_18A82:
00019568 0868 0000 0022             		bchg	#0,$22(a0)
0001956E                            
0001956E                            loc_18A88:
0001956E 3028 0008                  		move.w	8(a0),d0
00019572 72FF                       		moveq	#-1,d1
00019574 7402                       		moveq	#2,d2
00019576 45E8 002A                  		lea	$2A(a0),a2
0001957A 7828                       		moveq	#$28,d4
0001957C 4A68 0010                  		tst.w	$10(a0)
00019580 6A00                       		bpl.s	loc_18A9E
00019582 4444                       		neg.w	d4
00019584                            
00019584                            loc_18A9E:
00019584 321A                       		move.w	(a2)+,d1
00019586 2641                       		movea.l	d1,a3
00019588 082B 0003 0022             		btst	#3,$22(a3)
0001958E 6600                       		bne.s	loc_18AB4
00019590 362B 0008                  		move.w	8(a3),d3
00019594 D644                       		add.w	d4,d3
00019596 9640                       		sub.w	d0,d3
00019598 6700                       		beq.s	loc_18AC0
0001959A                            
0001959A                            loc_18AB4:
0001959A 51CA FFE8                  		dbf	d2,loc_18A9E
0001959E                            
0001959E 1142 0028                  		move.b	d2,$28(a0)
000195A2 6000 FF0C                  		bra.w	loc_189CA
000195A6                            ; ===========================================================================
000195A6                            
000195A6                            loc_18AC0:
000195A6 1142 0028                  		move.b	d2,$28(a0)
000195AA 5428 0025                  		addq.b	#2,$25(a0)
000195AE 117C 0028 003C             		move.b	#$28,$3C(a0)
000195B4 6000 FEFA                  		bra.w	loc_189CA
000195B8                            ; ===========================================================================
000195B8                            
000195B8                            Obj7A_MakeBall:				; XREF: Obj7A_ShipIndex
000195B8 0C28 0028 003C             		cmpi.b	#$28,$3C(a0)
000195BE 6600                       		bne.s	loc_18B36
000195C0 70FF                       		moveq	#-1,d0
000195C2 1028 0028                  		move.b	$28(a0),d0
000195C6 4880                       		ext.w	d0
000195C8 6B00                       		bmi.s	loc_18B40
000195CA 5540                       		subq.w	#2,d0
000195CC 4440                       		neg.w	d0
000195CE D040                       		add.w	d0,d0
000195D0 43E8 002A                  		lea	$2A(a0),a1
000195D4 3031 0000                  		move.w	(a1,d0.w),d0
000195D8 2440                       		movea.l	d0,a2
000195DA 43F8 D040                  		lea	($FFFFD040).w,a1
000195DE 723E                       		moveq	#$3E,d1
000195E0                            
000195E0                            loc_18AFA:
000195E0 B0A9 003C                  		cmp.l	$3C(a1),d0
000195E4 6700                       		beq.s	loc_18B40
000195E6 D2FC 0040                  		adda.w	#$40,a1
000195EA 51C9 FFF4                  		dbf	d1,loc_18AFA
000195EE                            
000195EE 2F08                       		move.l	a0,-(sp)
000195F0 41D2                       		lea	(a2),a0
000195F2 4EB9 0000 E494             		jsr	SingleObjLoad2
000195F8 205F                       		movea.l	(sp)+,a0
000195FA 6600                       		bne.s	loc_18B40
000195FC 12BC 007B                  		move.b	#$7B,(a1)	; load spiked ball object
00019600 3368 0008 0008             		move.w	8(a0),8(a1)
00019606 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001960C 0669 0020 000C             		addi.w	#$20,$C(a1)
00019612 136A 0022 0022             		move.b	$22(a2),$22(a1)
00019618 234A 003C                  		move.l	a2,$3C(a1)
0001961C                            
0001961C                            loc_18B36:
0001961C 5328 003C                  		subq.b	#1,$3C(a0)
00019620 6700                       		beq.s	loc_18B40
00019622 6000 FEC0                  		bra.w	loc_189FE
00019626                            ; ===========================================================================
00019626                            
00019626                            loc_18B40:
00019626 5528 0025                  		subq.b	#2,$25(a0)
0001962A 6000 FE84                  		bra.w	loc_189CA
0001962E                            ; ===========================================================================
0001962E                            
0001962E                            loc_18B48:				; XREF: Obj7A_ShipIndex
0001962E 5328 003C                  		subq.b	#1,$3C(a0)
00019632 6B00                       		bmi.s	loc_18B52
00019634 6000 ED3C                  		bra.w	BossDefeated
00019638                            ; ===========================================================================
00019638                            
00019638                            loc_18B52:
00019638 5428 0025                  		addq.b	#2,$25(a0)
0001963C 4268 0012                  		clr.w	$12(a0)
00019640 08E8 0000 0022             		bset	#0,$22(a0)
00019646 08A8 0007 0022             		bclr	#7,$22(a0)
0001964C 4268 0010                  		clr.w	$10(a0)
00019650 117C 00E8 003C             		move.b	#-$18,$3C(a0)
00019656 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0001965A 6600                       		bne.s	loc_18B7C
0001965C 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00019662                            
00019662                            loc_18B7C:
00019662 6000 FE80                  		bra.w	loc_189FE
00019666                            ; ===========================================================================
00019666                            
00019666                            loc_18B80:				; XREF: Obj7A_ShipIndex
00019666 5228 003C                  		addq.b	#1,$3C(a0)
0001966A 6700                       		beq.s	loc_18B90
0001966C 6A00                       		bpl.s	loc_18B96
0001966E 0668 0018 0012             		addi.w	#$18,$12(a0)
00019674 6000                       		bra.s	loc_18BC2
00019676                            ; ===========================================================================
00019676                            
00019676                            loc_18B90:
00019676 4268 0012                  		clr.w	$12(a0)
0001967A 6000                       		bra.s	loc_18BC2
0001967C                            ; ===========================================================================
0001967C                            
0001967C                            loc_18B96:
0001967C 0C28 0020 003C             		cmpi.b	#$20,$3C(a0)
00019682 6500                       		bcs.s	loc_18BAE
00019684 6700                       		beq.s	loc_18BB4
00019686 0C28 002A 003C             		cmpi.b	#$2A,$3C(a0)
0001968C 6500                       		bcs.s	loc_18BC2
0001968E 5428 0025                  		addq.b	#2,$25(a0)
00019692 6000                       		bra.s	loc_18BC2
00019694                            ; ===========================================================================
00019694                            
00019694                            loc_18BAE:
00019694 5168 0012                  		subq.w	#8,$12(a0)
00019698 6000                       		bra.s	loc_18BC2
0001969A                            ; ===========================================================================
0001969A                            
0001969A                            loc_18BB4:
0001969A 4268 0012                  		clr.w	$12(a0)
0001969E 303C 0084                  		move.w	#$84,d0
000196A2 4EB9 0000 15CC             		jsr	(PlaySound).l	; play SLZ music
000196A8                            
000196A8                            loc_18BC2:
000196A8 6000 FE2A                  		bra.w	loc_189EE
000196AC                            ; ===========================================================================
000196AC                            
000196AC                            loc_18BC6:				; XREF: Obj7A_ShipIndex
000196AC 317C 0400 0010             		move.w	#$400,$10(a0)
000196B2 317C FFC0 0012             		move.w	#-$40,$12(a0)
000196B8 0C78 2160 F72A             		cmpi.w	#$2160,($FFFFF72A).w
000196BE 6400                       		bcc.s	loc_18BE0
000196C0 5478 F72A                  		addq.w	#2,($FFFFF72A).w
000196C4 6000                       		bra.s	loc_18BE8
000196C6                            ; ===========================================================================
000196C6                            
000196C6                            loc_18BE0:
000196C6 4A28 0001                  		tst.b	1(a0)
000196CA 6A00 FCCE                  		bpl.w	Obj7A_Delete
000196CE                            
000196CE                            loc_18BE8:
000196CE 6100 ECE4                  		bsr.w	BossMove
000196D2 6000 FDDC                  		bra.w	loc_189CA
000196D6                            ; ===========================================================================
000196D6                            
000196D6                            Obj7A_FaceMain:				; XREF: Obj7A_Index
000196D6 7000                       		moveq	#0,d0
000196D8 7201                       		moveq	#1,d1
000196DA 2268 0034                  		movea.l	$34(a0),a1
000196DE 1029 0025                  		move.b	$25(a1),d0
000196E2 0C00 0006                  		cmpi.b	#6,d0
000196E6 6B00                       		bmi.s	loc_18C06
000196E8 720A                       		moveq	#$A,d1
000196EA 6000                       		bra.s	loc_18C1A
000196EC                            ; ===========================================================================
000196EC                            
000196EC                            loc_18C06:
000196EC 4A29 0020                  		tst.b	$20(a1)
000196F0 6600                       		bne.s	loc_18C10
000196F2 7205                       		moveq	#5,d1
000196F4 6000                       		bra.s	loc_18C1A
000196F6                            ; ===========================================================================
000196F6                            
000196F6                            loc_18C10:
000196F6 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
000196FC 6500                       		bcs.s	loc_18C1A
000196FE 7204                       		moveq	#4,d1
00019700                            
00019700                            loc_18C1A:
00019700 1141 001C                  		move.b	d1,$1C(a0)
00019704 0C00 000A                  		cmpi.b	#$A,d0
00019708 6600                       		bne.s	loc_18C32
0001970A 117C 0006 001C             		move.b	#6,$1C(a0)
00019710 4A28 0001                  		tst.b	1(a0)
00019714 6A00 FC84                  		bpl.w	Obj7A_Delete
00019718                            
00019718                            loc_18C32:
00019718 6000                       		bra.s	loc_18C6C
0001971A                            ; ===========================================================================
0001971A                            
0001971A                            Obj7A_FlameMain:			; XREF: Obj7A_Index
0001971A 117C 0008 001C             		move.b	#8,$1C(a0)
00019720 2268 0034                  		movea.l	$34(a0),a1
00019724 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001972A 6600                       		bne.s	loc_18C56
0001972C 4A28 0001                  		tst.b	1(a0)
00019730 6A00 FC68                  		bpl.w	Obj7A_Delete
00019734 117C 000B 001C             		move.b	#$B,$1C(a0)
0001973A 6000                       		bra.s	loc_18C6C
0001973C                            ; ===========================================================================
0001973C                            
0001973C                            loc_18C56:
0001973C 0C29 0008 0025             		cmpi.b	#8,$25(a1)
00019742 6E00                       		bgt.s	loc_18C6C
00019744 0C29 0004 0025             		cmpi.b	#4,$25(a1)
0001974A 6D00                       		blt.s	loc_18C6C
0001974C 117C 0007 001C             		move.b	#7,$1C(a0)
00019752                            
00019752                            loc_18C6C:
00019752 43F9 0001 87F6             		lea	(Ani_Eggman).l,a1
00019758 4EB9 0000 B056             		jsr	AnimateSprite
0001975E                            
0001975E                            loc_18C78:
0001975E 2268 0034                  		movea.l	$34(a0),a1
00019762 3169 0008 0008             		move.w	8(a1),8(a0)
00019768 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001976E 1169 0022 0022             		move.b	$22(a1),$22(a0)
00019774 7003                       		moveq	#3,d0
00019776 C028 0022                  		and.b	$22(a0),d0
0001977A 0228 00FC 0001             		andi.b	#-4,1(a0)
00019780 8128 0001                  		or.b	d0,1(a0)
00019784 4EF9 0000 DFF8             		jmp	DisplaySprite
0001978A                            ; ===========================================================================
0001978A                            
0001978A                            Obj7A_TubeMain:				; XREF: Obj7A_Index
0001978A 2268 0034                  		movea.l	$34(a0),a1
0001978E 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
00019794 6600                       		bne.s	loc_18CB8
00019796 4A28 0001                  		tst.b	1(a0)
0001979A 6A00 FBFE                  		bpl.w	Obj7A_Delete
0001979E                            
0001979E                            loc_18CB8:
0001979E 217C 0001 8922 0004        		move.l	#Map_BossItems,4(a0)
000197A6 317C 246C 0002             		move.w	#$246C,2(a0)
000197AC 117C 0003 001A             		move.b	#3,$1A(a0)
000197B2 60AA                       		bra.s	loc_18C78
000197B4                            ; ===========================================================================
000197B4                            ; ---------------------------------------------------------------------------
000197B4                            ; Object 7B - exploding	spikeys	that Eggman drops (SLZ)
000197B4                            ; ---------------------------------------------------------------------------
000197B4                            
000197B4                            Obj7B:					; XREF: Obj_Index
000197B4 7000                       		moveq	#0,d0
000197B6 1028 0024                  		move.b	$24(a0),d0
000197BA 303B 0000                  		move.w	Obj7B_Index(pc,d0.w),d0
000197BE 4EBB 0000                  		jsr	Obj7B_Index(pc,d0.w)
000197C2 3028 0030                  		move.w	$30(a0),d0
000197C6 0240 FF80                  		andi.w	#$FF80,d0
000197CA 3238 F700                  		move.w	($FFFFF700).w,d1
000197CE 0441 0080                  		subi.w	#$80,d1
000197D2 0241 FF80                  		andi.w	#$FF80,d1
000197D6 9041                       		sub.w	d1,d0
000197D8 6B00 FBC0                  		bmi.w	Obj7A_Delete
000197DC 0C40 0280                  		cmpi.w	#$280,d0
000197E0 6200 FBB8                  		bhi.w	Obj7A_Delete
000197E4 4EF9 0000 DFF8             		jmp	DisplaySprite
000197EA                            ; ===========================================================================
000197EA 0000                       Obj7B_Index:	dc.w Obj7B_Main-Obj7B_Index
000197EC 0000                       		dc.w Obj7B_Fall-Obj7B_Index
000197EE 0000                       		dc.w loc_18DC6-Obj7B_Index
000197F0 0000                       		dc.w loc_18EAA-Obj7B_Index
000197F2 0000                       		dc.w Obj7B_Explode-Obj7B_Index
000197F4 0000                       		dc.w Obj7B_MoveFrag-Obj7B_Index
000197F6                            ; ===========================================================================
000197F6                            
000197F6                            Obj7B_Main:				; XREF: Obj7B_Index
000197F6 217C 0001 23BE 0004        		move.l	#Map_obj5Ea,4(a0)
000197FE 317C 0518 0002             		move.w	#$518,2(a0)
00019804 117C 0001 001A             		move.b	#1,$1A(a0)
0001980A 0028 0004 0001             		ori.b	#4,1(a0)
00019810 117C 0004 0018             		move.b	#4,$18(a0)
00019816 117C 008B 0020             		move.b	#$8B,$20(a0)
0001981C 117C 000C 0019             		move.b	#$C,$19(a0)
00019822 2268 003C                  		movea.l	$3C(a0),a1
00019826 3169 0008 0030             		move.w	8(a1),$30(a0)
0001982C 3169 000C 0034             		move.w	$C(a1),$34(a0)
00019832 08E8 0000 0022             		bset	#0,$22(a0)
00019838 3028 0008                  		move.w	8(a0),d0
0001983C B069 0008                  		cmp.w	8(a1),d0
00019840 6E00                       		bgt.s	loc_18D68
00019842 08A8 0000 0022             		bclr	#0,$22(a0)
00019848 117C 0002 003A             		move.b	#2,$3A(a0)
0001984E                            
0001984E                            loc_18D68:
0001984E 5428 0024                  		addq.b	#2,$24(a0)
00019852                            
00019852                            Obj7B_Fall:				; XREF: Obj7B_Index
00019852 4EB9 0000 DF60             		jsr	ObjectFall
00019858 2268 003C                  		movea.l	$3C(a0),a1
0001985C 45F9 0000 0000             		lea	(word_19018).l,a2
00019862 7000                       		moveq	#0,d0
00019864 1029 001A                  		move.b	$1A(a1),d0
00019868 3228 0008                  		move.w	8(a0),d1
0001986C 9268 0030                  		sub.w	$30(a0),d1
00019870 6400                       		bcc.s	loc_18D8E
00019872 5440                       		addq.w	#2,d0
00019874                            
00019874                            loc_18D8E:
00019874 D040                       		add.w	d0,d0
00019876 3228 0034                  		move.w	$34(a0),d1
0001987A D272 0000                  		add.w	(a2,d0.w),d1
0001987E B268 000C                  		cmp.w	$C(a0),d1
00019882 6E00                       		bgt.s	locret_18DC4
00019884 2268 003C                  		movea.l	$3C(a0),a1
00019888 7202                       		moveq	#2,d1
0001988A 0828 0000 0022             		btst	#0,$22(a0)
00019890 6700                       		beq.s	loc_18DAE
00019892 7200                       		moveq	#0,d1
00019894                            
00019894                            loc_18DAE:
00019894 317C 00F0 0028             		move.w	#$F0,$28(a0)
0001989A 117C 000A 001F             		move.b	#10,$1F(a0)	; set frame duration to	10 frames
000198A0 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
000198A6 6000 0000                  		bra.w	loc_18FA2
000198AA                            ; ===========================================================================
000198AA                            
000198AA                            locret_18DC4:
000198AA 4E75                       		rts	
000198AC                            ; ===========================================================================
000198AC                            
000198AC                            loc_18DC6:				; XREF: Obj7B_Index
000198AC 2268 003C                  		movea.l	$3C(a0),a1
000198B0 7000                       		moveq	#0,d0
000198B2 1028 003A                  		move.b	$3A(a0),d0
000198B6 9029 003A                  		sub.b	$3A(a1),d0
000198BA 6700                       		beq.s	loc_18E2A
000198BC 6400                       		bcc.s	loc_18DDA
000198BE 4400                       		neg.b	d0
000198C0                            
000198C0                            loc_18DDA:
000198C0 323C F7E8                  		move.w	#-$818,d1
000198C4 343C FEEC                  		move.w	#-$114,d2
000198C8 0C00 0001                  		cmpi.b	#1,d0
000198CC 6700                       		beq.s	loc_18E00
000198CE 323C F6A0                  		move.w	#-$960,d1
000198D2 343C FF0C                  		move.w	#-$F4,d2
000198D6 0C69 09C0 0038             		cmpi.w	#$9C0,$38(a1)
000198DC 6D00                       		blt.s	loc_18E00
000198DE 323C F5E0                  		move.w	#-$A20,d1
000198E2 343C FF80                  		move.w	#-$80,d2
000198E6                            
000198E6                            loc_18E00:
000198E6 3141 0012                  		move.w	d1,$12(a0)
000198EA 3142 0010                  		move.w	d2,$10(a0)
000198EE 3028 0008                  		move.w	8(a0),d0
000198F2 9068 0030                  		sub.w	$30(a0),d0
000198F6 6400                       		bcc.s	loc_18E16
000198F8 4468 0010                  		neg.w	$10(a0)
000198FC                            
000198FC                            loc_18E16:
000198FC 117C 0001 001A             		move.b	#1,$1A(a0)
00019902 317C 0020 0028             		move.w	#$20,$28(a0)
00019908 5428 0024                  		addq.b	#2,$24(a0)
0001990C 6000 0000                  		bra.w	loc_18EAA
00019910                            ; ===========================================================================
00019910                            
00019910                            loc_18E2A:				; XREF: loc_18DC6
00019910 45F9 0000 0000             		lea	(word_19018).l,a2
00019916 7000                       		moveq	#0,d0
00019918 1029 001A                  		move.b	$1A(a1),d0
0001991C 343C 0028                  		move.w	#$28,d2
00019920 3228 0008                  		move.w	8(a0),d1
00019924 9268 0030                  		sub.w	$30(a0),d1
00019928 6400                       		bcc.s	loc_18E48
0001992A 4442                       		neg.w	d2
0001992C 5440                       		addq.w	#2,d0
0001992E                            
0001992E                            loc_18E48:
0001992E D040                       		add.w	d0,d0
00019930 3228 0034                  		move.w	$34(a0),d1
00019934 D272 0000                  		add.w	(a2,d0.w),d1
00019938 3141 000C                  		move.w	d1,$C(a0)
0001993C D468 0030                  		add.w	$30(a0),d2
00019940 3142 0008                  		move.w	d2,8(a0)
00019944 4268 000E                  		clr.w	$E(a0)
00019948 4268 000A                  		clr.w	$A(a0)
0001994C 5368 0028                  		subq.w	#1,$28(a0)
00019950 6600                       		bne.s	loc_18E7A
00019952 317C 0020 0028             		move.w	#$20,$28(a0)
00019958 117C 0008 0024             		move.b	#8,$24(a0)
0001995E 4E75                       		rts	
00019960                            ; ===========================================================================
00019960                            
00019960                            loc_18E7A:
00019960 0C68 0078 0028             		cmpi.w	#$78,$28(a0)
00019966 6600                       		bne.s	loc_18E88
00019968 117C 0005 001F             		move.b	#5,$1F(a0)
0001996E                            
0001996E                            loc_18E88:
0001996E 0C68 003C 0028             		cmpi.w	#$3C,$28(a0)
00019974 6600                       		bne.s	loc_18E96
00019976 117C 0002 001F             		move.b	#2,$1F(a0)
0001997C                            
0001997C                            loc_18E96:
0001997C 5328 001E                  		subq.b	#1,$1E(a0)
00019980 6E00                       		bgt.s	locret_18EA8
00019982 0868 0000 001A             		bchg	#0,$1A(a0)
00019988 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
0001998E                            
0001998E                            locret_18EA8:
0001998E 4E75                       		rts	
00019990                            ; ===========================================================================
00019990                            
00019990                            loc_18EAA:				; XREF: Obj7B_Index
00019990 43F8 D040                  		lea	($FFFFD040).w,a1
00019994 707A                       		moveq	#$7A,d0
00019996 7240                       		moveq	#$40,d1
00019998 743E                       		moveq	#$3E,d2
0001999A                            
0001999A                            loc_18EB4:
0001999A B011                       		cmp.b	(a1),d0
0001999C 6700                       		beq.s	loc_18EC0
0001999E D2C1                       		adda.w	d1,a1
000199A0 51CA FFF8                  		dbf	d2,loc_18EB4
000199A4                            
000199A4 6000                       		bra.s	loc_18F38
000199A6                            ; ===========================================================================
000199A6                            
000199A6                            loc_18EC0:
000199A6 3029 0008                  		move.w	8(a1),d0
000199AA 3229 000C                  		move.w	$C(a1),d1
000199AE 3428 0008                  		move.w	8(a0),d2
000199B2 3628 000C                  		move.w	$C(a0),d3
000199B6 45FA 0000                  		lea	byte_19022(pc),a2
000199BA 47FA 0000                  		lea	byte_19026(pc),a3
000199BE 181A                       		move.b	(a2)+,d4
000199C0 4884                       		ext.w	d4
000199C2 D044                       		add.w	d4,d0
000199C4 181B                       		move.b	(a3)+,d4
000199C6 4884                       		ext.w	d4
000199C8 D444                       		add.w	d4,d2
000199CA B440                       		cmp.w	d0,d2
000199CC 6500                       		bcs.s	loc_18F38
000199CE 181A                       		move.b	(a2)+,d4
000199D0 4884                       		ext.w	d4
000199D2 D044                       		add.w	d4,d0
000199D4 181B                       		move.b	(a3)+,d4
000199D6 4884                       		ext.w	d4
000199D8 D444                       		add.w	d4,d2
000199DA B042                       		cmp.w	d2,d0
000199DC 6500                       		bcs.s	loc_18F38
000199DE 181A                       		move.b	(a2)+,d4
000199E0 4884                       		ext.w	d4
000199E2 D244                       		add.w	d4,d1
000199E4 181B                       		move.b	(a3)+,d4
000199E6 4884                       		ext.w	d4
000199E8 D644                       		add.w	d4,d3
000199EA B641                       		cmp.w	d1,d3
000199EC 6500                       		bcs.s	loc_18F38
000199EE 181A                       		move.b	(a2)+,d4
000199F0 4884                       		ext.w	d4
000199F2 D244                       		add.w	d4,d1
000199F4 181B                       		move.b	(a3)+,d4
000199F6 4884                       		ext.w	d4
000199F8 D644                       		add.w	d4,d3
000199FA B243                       		cmp.w	d3,d1
000199FC 6500                       		bcs.s	loc_18F38
000199FE 5428 0024                  		addq.b	#2,$24(a0)
00019A02 4268 0028                  		clr.w	$28(a0)
00019A06 4229 0020                  		clr.b	$20(a1)
00019A0A 5329 0021                  		subq.b	#1,$21(a1)
00019A0E 6600                       		bne.s	loc_18F38
00019A10 08E9 0007 0022             		bset	#7,$22(a1)
00019A16 4268 0010                  		clr.w	$10(a0)
00019A1A 4268 0012                  		clr.w	$12(a0)
00019A1E                            
00019A1E                            loc_18F38:
00019A1E 4A68 0012                  		tst.w	$12(a0)
00019A22 6A00                       		bpl.s	loc_18F5C
00019A24 4EB9 0000 DF60             		jsr	ObjectFall
00019A2A 3028 0034                  		move.w	$34(a0),d0
00019A2E 0440 002F                  		subi.w	#$2F,d0
00019A32 B068 000C                  		cmp.w	$C(a0),d0
00019A36 6E00                       		bgt.s	loc_18F58
00019A38 4EB9 0000 DF60             		jsr	ObjectFall
00019A3E                            
00019A3E                            loc_18F58:
00019A3E 6000 FF20                  		bra.w	loc_18E7A
00019A42                            ; ===========================================================================
00019A42                            
00019A42                            loc_18F5C:
00019A42 4EB9 0000 DF60             		jsr	ObjectFall
00019A48 2268 003C                  		movea.l	$3C(a0),a1
00019A4C 45F9 0000 0000             		lea	(word_19018).l,a2
00019A52 7000                       		moveq	#0,d0
00019A54 1029 001A                  		move.b	$1A(a1),d0
00019A58 3228 0008                  		move.w	8(a0),d1
00019A5C 9268 0030                  		sub.w	$30(a0),d1
00019A60 6400                       		bcc.s	loc_18F7E
00019A62 5440                       		addq.w	#2,d0
00019A64                            
00019A64                            loc_18F7E:
00019A64 D040                       		add.w	d0,d0
00019A66 3228 0034                  		move.w	$34(a0),d1
00019A6A D272 0000                  		add.w	(a2,d0.w),d1
00019A6E B268 000C                  		cmp.w	$C(a0),d1
00019A72 6ECA                       		bgt.s	loc_18F58
00019A74 2268 003C                  		movea.l	$3C(a0),a1
00019A78 7202                       		moveq	#2,d1
00019A7A 4A68 0010                  		tst.w	$10(a0)
00019A7E 6B00                       		bmi.s	loc_18F9C
00019A80 7200                       		moveq	#0,d1
00019A82                            
00019A82                            loc_18F9C:
00019A82 317C 0000 0028             		move.w	#0,$28(a0)
00019A88                            
00019A88                            loc_18FA2:
00019A88 1341 003A                  		move.b	d1,$3A(a1)
00019A8C 1141 003A                  		move.b	d1,$3A(a0)
00019A90 B229 001A                  		cmp.b	$1A(a1),d1
00019A94 6700                       		beq.s	loc_19008
00019A96 08A9 0003 0022             		bclr	#3,$22(a1)
00019A9C 6700                       		beq.s	loc_19008
00019A9E 4229 0025                  		clr.b	$25(a1)
00019AA2 137C 0002 0024             		move.b	#2,$24(a1)
00019AA8 45F8 D000                  		lea	($FFFFD000).w,a2
00019AAC 3568 0012 0012             		move.w	$12(a0),$12(a2)
00019AB2 446A 0012                  		neg.w	$12(a2)
00019AB6 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
00019ABC 6600                       		bne.s	loc_18FDC
00019ABE E0EA 0012                  		asr	$12(a2)
00019AC2                            
00019AC2                            loc_18FDC:
00019AC2 08EA 0001 0022             		bset	#1,$22(a2)
00019AC8 08AA 0003 0022             		bclr	#3,$22(a2)
00019ACE 422A 003C                  		clr.b	$3C(a2)
00019AD2 2F08                       		move.l	a0,-(sp)
00019AD4 41D2                       		lea	(a2),a0
00019AD6 4EBA A36C                  		jsr	Obj01_ChkRoll
00019ADA 205F                       		movea.l	(sp)+,a0
00019ADC 157C 0002 0024             		move.b	#2,$24(a2)
00019AE2 303C 00CC                  		move.w	#$CC,d0
00019AE6 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play "spring" sound
00019AEC                            
00019AEC                            loc_19008:
00019AEC 4268 0010                  		clr.w	$10(a0)
00019AF0 4268 0012                  		clr.w	$12(a0)
00019AF4 5428 0024                  		addq.b	#2,$24(a0)
00019AF8 6000 FE66                  		bra.w	loc_18E7A
00019AFC                            ; ===========================================================================
00019AFC FFF8 FFE4 FFD1 FFE4 FFF8   word_19018:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
00019B06                            		even
00019B06 E830 E830                  byte_19022:	dc.b $E8, $30, $E8, $30
00019B0A                            		even
00019B0A 08F0 08F0                  byte_19026:	dc.b 8,	$F0, 8,	$F0
00019B0E                            		even
00019B0E                            ; ===========================================================================
00019B0E                            
00019B0E                            Obj7B_Explode:				; XREF: Obj7B_Index
00019B0E 10BC 003F                  		move.b	#$3F,(a0)
00019B12 4228 0024                  		clr.b	$24(a0)
00019B16 0C68 0020 0028             		cmpi.w	#$20,$28(a0)
00019B1C 6700                       		beq.s	Obj7B_MakeFrag
00019B1E 4E75                       		rts	
00019B20                            ; ===========================================================================
00019B20                            
00019B20                            Obj7B_MakeFrag:
00019B20 3168 0034 000C             		move.w	$34(a0),$C(a0)
00019B26 7203                       		moveq	#3,d1
00019B28 45FA 0000                  		lea	Obj7B_FragSpeed(pc),a2
00019B2C                            
00019B2C                            Obj7B_Loop:
00019B2C 4EB9 0000 E47E             		jsr	SingleObjLoad
00019B32 6600                       		bne.s	loc_1909A
00019B34 12BC 007B                  		move.b	#$7B,(a1)	; load shrapnel	object
00019B38 137C 000A 0024             		move.b	#$A,$24(a1)
00019B3E 237C 0000 0000 0004        		move.l	#Map_obj7B,4(a1)
00019B46 137C 0003 0018             		move.b	#3,$18(a1)
00019B4C 337C 0518 0002             		move.w	#$518,2(a1)
00019B52 3368 0008 0008             		move.w	8(a0),8(a1)
00019B58 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019B5E 335A 0010                  		move.w	(a2)+,$10(a1)
00019B62 335A 0012                  		move.w	(a2)+,$12(a1)
00019B66 137C 0098 0020             		move.b	#$98,$20(a1)
00019B6C 0029 0004 0001             		ori.b	#4,1(a1)
00019B72 08E9 0007 0001             		bset	#7,1(a1)
00019B78 137C 000C 0019             		move.b	#$C,$19(a1)
00019B7E                            
00019B7E                            loc_1909A:
00019B7E 51C9 FFAC                  		dbf	d1,Obj7B_Loop	; repeat sequence 3 more times
00019B82                            
00019B82 4E75                       		rts	
00019B84                            ; ===========================================================================
00019B84 FF00 FCC0                  Obj7B_FragSpeed:dc.w $FF00, $FCC0	; horizontal, vertical
00019B88 FF60 FDC0                  		dc.w $FF60, $FDC0
00019B8C 0100 FCC0                  		dc.w $100, $FCC0
00019B90 00A0 FDC0                  		dc.w $A0, $FDC0
00019B94                            ; ===========================================================================
00019B94                            
00019B94                            Obj7B_MoveFrag:				; XREF: Obj7B_Index
00019B94 4EB9 0000 DFD2             		jsr	SpeedToPos
00019B9A 3168 0008 0030             		move.w	8(a0),$30(a0)
00019BA0 3168 000C 0034             		move.w	$C(a0),$34(a0)
00019BA6 0668 0018 0012             		addi.w	#$18,$12(a0)
00019BAC 7004                       		moveq	#4,d0
00019BAE C078 FE0E                  		and.w	($FFFFFE0E).w,d0
00019BB2 E448                       		lsr.w	#2,d0
00019BB4 1140 001A                  		move.b	d0,$1A(a0)
00019BB8 4A28 0001                  		tst.b	1(a0)
00019BBC 6A00 F7DC                  		bpl.w	Obj7A_Delete
00019BC0 4E75                       		rts	
00019BC2                            ; ===========================================================================
00019BC2                            ; ---------------------------------------------------------------------------
00019BC2                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
00019BC2                            ; ---------------------------------------------------------------------------
00019BC2                            Map_obj7B:
00019BC2                            	include "_maps\obj7B.asm"
00019BC2                            ; ---------------------------------------------------------------------------
00019BC2                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
00019BC2                            ; ---------------------------------------------------------------------------
00019BC2 0000                       		dc.w byte_190E2-Map_obj7B
00019BC4 0000                       		dc.w byte_190E8-Map_obj7B
00019BC6 01                         byte_190E2:	dc.b 1
00019BC7 FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
00019BCC 01                         byte_190E8:	dc.b 1
00019BCD FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
00019BD2                            		even
00019BD2                            		even
00019BD2                            
00019BD2                            ; ===========================================================================
00019BD2                            ; ---------------------------------------------------------------------------
00019BD2                            ; Object 75 - Eggman (SYZ)
00019BD2                            ; ---------------------------------------------------------------------------
00019BD2                            
00019BD2                            Obj75:					; XREF: Obj_Index
00019BD2 7000                       		moveq	#0,d0
00019BD4 1028 0024                  		move.b	$24(a0),d0
00019BD8 323B 0000                  		move.w	Obj75_Index(pc,d0.w),d1
00019BDC 4EFB 1000                  		jmp	Obj75_Index(pc,d1.w)
00019BE0                            ; ===========================================================================
00019BE0 0000                       Obj75_Index:	dc.w Obj75_Main-Obj75_Index
00019BE2 0000                       		dc.w Obj75_ShipMain-Obj75_Index
00019BE4 0000                       		dc.w Obj75_FaceMain-Obj75_Index
00019BE6 0000                       		dc.w Obj75_FlameMain-Obj75_Index
00019BE8 0000                       		dc.w Obj75_SpikeMain-Obj75_Index
00019BEA                            
00019BEA 0200 05                    Obj75_ObjData:	dc.b 2,	0, 5		; routine number, animation, priority
00019BED 0401 05                    		dc.b 4,	1, 5
00019BF0 0607 05                    		dc.b 6,	7, 5
00019BF3 0800 05                    		dc.b 8,	0, 5
00019BF6                            ; ===========================================================================
00019BF6                            
00019BF6                            Obj75_Main:				; XREF: Obj75_Index
00019BF6 317C 2DB0 0008             		move.w	#$2DB0,8(a0)
00019BFC 317C 04DA 000C             		move.w	#$4DA,$C(a0)
00019C02 3168 0008 0030             		move.w	8(a0),$30(a0)
00019C08 3168 000C 0038             		move.w	$C(a0),$38(a0)
00019C0E 117C 000F 0020             		move.b	#$F,$20(a0)
00019C14 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00019C1A 45FA FFCE                  		lea	Obj75_ObjData(pc),a2
00019C1E 2248                       		movea.l	a0,a1
00019C20 7203                       		moveq	#3,d1
00019C22 6000                       		bra.s	Obj75_LoadBoss
00019C24                            ; ===========================================================================
00019C24                            
00019C24                            Obj75_Loop:
00019C24 4EB9 0000 E494             		jsr	SingleObjLoad2
00019C2A 6600                       		bne.s	Obj75_ShipMain
00019C2C 12BC 0075                  		move.b	#$75,(a1)
00019C30 3368 0008 0008             		move.w	8(a0),8(a1)
00019C36 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019C3C                            
00019C3C                            Obj75_LoadBoss:				; XREF: Obj75_Main
00019C3C 08A8 0000 0022             		bclr	#0,$22(a0)
00019C42 4229 0025                  		clr.b	$25(a1)
00019C46 135A 0024                  		move.b	(a2)+,$24(a1)
00019C4A 135A 001C                  		move.b	(a2)+,$1C(a1)
00019C4E 135A 0018                  		move.b	(a2)+,$18(a1)
00019C52 237C 0001 885A 0004        		move.l	#Map_Eggman,4(a1)
00019C5A 337C 0400 0002             		move.w	#$400,2(a1)
00019C60 137C 0004 0001             		move.b	#4,1(a1)
00019C66 137C 0020 0019             		move.b	#$20,$19(a1)
00019C6C 2348 0034                  		move.l	a0,$34(a1)
00019C70 51C9 FFB2                  		dbf	d1,Obj75_Loop	; repeat sequence 3 more times
00019C74                            
00019C74                            Obj75_ShipMain:				; XREF: Obj75_Index
00019C74 7000                       		moveq	#0,d0
00019C76 1028 0025                  		move.b	$25(a0),d0
00019C7A 323B 0000                  		move.w	Obj75_ShipIndex(pc,d0.w),d1
00019C7E 4EBB 1000                  		jsr	Obj75_ShipIndex(pc,d1.w)
00019C82 43F9 0001 87F6             		lea	(Ani_Eggman).l,a1
00019C88 4EB9 0000 B056             		jsr	AnimateSprite
00019C8E 7003                       		moveq	#3,d0
00019C90 C028 0022                  		and.b	$22(a0),d0
00019C94 0228 00FC 0001             		andi.b	#$FC,1(a0)
00019C9A 8128 0001                  		or.b	d0,1(a0)
00019C9E 4EF9 0000 DFF8             		jmp	DisplaySprite
00019CA4                            ; ===========================================================================
00019CA4 0000 0000                  Obj75_ShipIndex:dc.w loc_191CC-Obj75_ShipIndex,	loc_19270-Obj75_ShipIndex
00019CA8 0000 0000                  		dc.w loc_192EC-Obj75_ShipIndex,	loc_19474-Obj75_ShipIndex
00019CAC 0000 0000                  		dc.w loc_194AC-Obj75_ShipIndex,	loc_194F2-Obj75_ShipIndex
00019CB0                            ; ===========================================================================
00019CB0                            
00019CB0                            loc_191CC:				; XREF: Obj75_ShipIndex
00019CB0 317C FF00 0010             		move.w	#-$100,$10(a0)
00019CB6 0C68 2D38 0030             		cmpi.w	#$2D38,$30(a0)
00019CBC 6400                       		bcc.s	loc_191DE
00019CBE 5428 0025                  		addq.b	#2,$25(a0)
00019CC2                            
00019CC2                            loc_191DE:
00019CC2 1028 003F                  		move.b	$3F(a0),d0
00019CC6 5428 003F                  		addq.b	#2,$3F(a0)
00019CCA 4EB9 0000 2D6C             		jsr	(CalcSine).l
00019CD0 E440                       		asr.w	#2,d0
00019CD2 3140 0012                  		move.w	d0,$12(a0)
00019CD6                            
00019CD6                            loc_191F2:
00019CD6 6100 E6DC                  		bsr.w	BossMove
00019CDA 3168 0038 000C             		move.w	$38(a0),$C(a0)
00019CE0 3168 0030 0008             		move.w	$30(a0),8(a0)
00019CE6                            
00019CE6                            loc_19202:
00019CE6 3028 0008                  		move.w	8(a0),d0
00019CEA 0440 2C00                  		subi.w	#$2C00,d0
00019CEE EA48                       		lsr.w	#5,d0
00019CF0 1140 0034                  		move.b	d0,$34(a0)
00019CF4 0C28 0006 0025             		cmpi.b	#6,$25(a0)
00019CFA 6400                       		bcc.s	locret_19256
00019CFC 4A28 0022                  		tst.b	$22(a0)
00019D00 6B00                       		bmi.s	loc_19258
00019D02 4A28 0020                  		tst.b	$20(a0)
00019D06 6600                       		bne.s	locret_19256
00019D08 4A28 003E                  		tst.b	$3E(a0)
00019D0C 6600                       		bne.s	loc_1923A
00019D0E 117C 0020 003E             		move.b	#$20,$3E(a0)
00019D14 303C 00AC                  		move.w	#$AC,d0
00019D18 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play boss damage sound
00019D1E                            
00019D1E                            loc_1923A:
00019D1E 43F8 FB22                  		lea	($FFFFFB22).w,a1
00019D22 7000                       		moveq	#0,d0
00019D24 4A51                       		tst.w	(a1)
00019D26 6600                       		bne.s	loc_19248
00019D28 303C 0EEE                  		move.w	#$EEE,d0
00019D2C                            
00019D2C                            loc_19248:
00019D2C 3280                       		move.w	d0,(a1)
00019D2E 5328 003E                  		subq.b	#1,$3E(a0)
00019D32 6600                       		bne.s	locret_19256
00019D34 117C 000F 0020             		move.b	#$F,$20(a0)
00019D3A                            
00019D3A                            locret_19256:
00019D3A 4E75                       		rts	
00019D3C                            ; ===========================================================================
00019D3C                            
00019D3C                            loc_19258:				; XREF: loc_19202
00019D3C 7064                       		moveq	#100,d0
00019D3E 6100 0000                  		bsr.w	AddPoints
00019D42 117C 0006 0025             		move.b	#6,$25(a0)
00019D48 317C 00B4 003C             		move.w	#$B4,$3C(a0)
00019D4E 4268 0010                  		clr.w	$10(a0)
00019D52 4E75                       		rts	
00019D54                            ; ===========================================================================
00019D54                            
00019D54                            loc_19270:				; XREF: Obj75_ShipIndex
00019D54 3028 0030                  		move.w	$30(a0),d0
00019D58 317C 0140 0010             		move.w	#$140,$10(a0)
00019D5E 0828 0000 0022             		btst	#0,$22(a0)
00019D64 6600                       		bne.s	loc_1928E
00019D66 4468 0010                  		neg.w	$10(a0)
00019D6A 0C40 2C08                  		cmpi.w	#$2C08,d0
00019D6E 6E00                       		bgt.s	loc_1929E
00019D70 6000                       		bra.s	loc_19294
00019D72                            ; ===========================================================================
00019D72                            
00019D72                            loc_1928E:
00019D72 0C40 2D38                  		cmpi.w	#$2D38,d0
00019D76 6D00                       		blt.s	loc_1929E
00019D78                            
00019D78                            loc_19294:
00019D78 0868 0000 0022             		bchg	#0,$22(a0)
00019D7E 4228 003D                  		clr.b	$3D(a0)
00019D82                            
00019D82                            loc_1929E:
00019D82 0440 2C10                  		subi.w	#$2C10,d0
00019D86 0240 001F                  		andi.w	#$1F,d0
00019D8A 0440 001F                  		subi.w	#$1F,d0
00019D8E 6A00                       		bpl.s	loc_192AE
00019D90 4440                       		neg.w	d0
00019D92                            
00019D92                            loc_192AE:
00019D92 5340                       		subq.w	#1,d0
00019D94 6E00                       		bgt.s	loc_192E8
00019D96 4A28 003D                  		tst.b	$3D(a0)
00019D9A 6600                       		bne.s	loc_192E8
00019D9C 3238 D008                  		move.w	($FFFFD008).w,d1
00019DA0 0441 2C00                  		subi.w	#$2C00,d1
00019DA4 EA41                       		asr.w	#5,d1
00019DA6 B228 0034                  		cmp.b	$34(a0),d1
00019DAA 6600                       		bne.s	loc_192E8
00019DAC 7000                       		moveq	#0,d0
00019DAE 1028 0034                  		move.b	$34(a0),d0
00019DB2 EB40                       		asl.w	#5,d0
00019DB4 0640 2C10                  		addi.w	#$2C10,d0
00019DB8 3140 0030                  		move.w	d0,$30(a0)
00019DBC 6100 0000                  		bsr.w	Obj75_FindBlocks
00019DC0 5428 0025                  		addq.b	#2,$25(a0)
00019DC4 4268 0028                  		clr.w	$28(a0)
00019DC8 4268 0010                  		clr.w	$10(a0)
00019DCC                            
00019DCC                            loc_192E8:
00019DCC 6000 FEF4                  		bra.w	loc_191DE
00019DD0                            ; ===========================================================================
00019DD0                            
00019DD0                            loc_192EC:				; XREF: Obj75_ShipIndex
00019DD0 7000                       		moveq	#0,d0
00019DD2 1028 0028                  		move.b	$28(a0),d0
00019DD6 303B 0000                  		move.w	off_192FA(pc,d0.w),d0
00019DDA 4EFB 0000                  		jmp	off_192FA(pc,d0.w)
00019DDE                            ; ===========================================================================
00019DDE 0000                       off_192FA:	dc.w loc_19302-off_192FA
00019DE0 0000                       		dc.w loc_19348-off_192FA
00019DE2 0000                       		dc.w loc_1938E-off_192FA
00019DE4 0000                       		dc.w loc_193D0-off_192FA
00019DE6                            ; ===========================================================================
00019DE6                            
00019DE6                            loc_19302:				; XREF: off_192FA
00019DE6 317C 0180 0012             		move.w	#$180,$12(a0)
00019DEC 3028 0038                  		move.w	$38(a0),d0
00019DF0 0C40 0556                  		cmpi.w	#$556,d0
00019DF4 6500                       		bcs.s	loc_19344
00019DF6 317C 0556 0038             		move.w	#$556,$38(a0)
00019DFC 4268 003C                  		clr.w	$3C(a0)
00019E00 70FF                       		moveq	#-1,d0
00019E02 3028 0036                  		move.w	$36(a0),d0
00019E06 6700                       		beq.s	loc_1933C
00019E08 2240                       		movea.l	d0,a1
00019E0A 137C 00FF 0029             		move.b	#-1,$29(a1)
00019E10 117C 00FF 0029             		move.b	#-1,$29(a0)
00019E16 2348 0034                  		move.l	a0,$34(a1)
00019E1A 317C 0032 003C             		move.w	#$32,$3C(a0)
00019E20                            
00019E20                            loc_1933C:
00019E20 4268 0012                  		clr.w	$12(a0)
00019E24 5428 0028                  		addq.b	#2,$28(a0)
00019E28                            
00019E28                            loc_19344:
00019E28 6000 FEAC                  		bra.w	loc_191F2
00019E2C                            ; ===========================================================================
00019E2C                            
00019E2C                            loc_19348:				; XREF: off_192FA
00019E2C 5368 003C                  		subq.w	#1,$3C(a0)
00019E30 6A00                       		bpl.s	loc_19366
00019E32 5428 0028                  		addq.b	#2,$28(a0)
00019E36 317C F800 0012             		move.w	#-$800,$12(a0)
00019E3C 4A68 0036                  		tst.w	$36(a0)
00019E40 6600                       		bne.s	loc_19362
00019E42 E0E8 0012                  		asr	$12(a0)
00019E46                            
00019E46                            loc_19362:
00019E46 7000                       		moveq	#0,d0
00019E48 6000                       		bra.s	loc_1937C
00019E4A                            ; ===========================================================================
00019E4A                            
00019E4A                            loc_19366:
00019E4A 7000                       		moveq	#0,d0
00019E4C 0C68 001E 003C             		cmpi.w	#$1E,$3C(a0)
00019E52 6E00                       		bgt.s	loc_1937C
00019E54 7002                       		moveq	#2,d0
00019E56 0828 0001 003D             		btst	#1,$3D(a0)
00019E5C 6700                       		beq.s	loc_1937C
00019E5E 4440                       		neg.w	d0
00019E60                            
00019E60                            loc_1937C:
00019E60 D068 0038                  		add.w	$38(a0),d0
00019E64 3140 000C                  		move.w	d0,$C(a0)
00019E68 3168 0030 0008             		move.w	$30(a0),8(a0)
00019E6E 6000 FE76                  		bra.w	loc_19202
00019E72                            ; ===========================================================================
00019E72                            
00019E72                            loc_1938E:				; XREF: off_192FA
00019E72 303C 04DA                  		move.w	#$4DA,d0
00019E76 4A68 0036                  		tst.w	$36(a0)
00019E7A 6700                       		beq.s	loc_1939C
00019E7C 0440 0018                  		subi.w	#$18,d0
00019E80                            
00019E80                            loc_1939C:
00019E80 B068 0038                  		cmp.w	$38(a0),d0
00019E84 6D00                       		blt.s	loc_193BE
00019E86 317C 0008 003C             		move.w	#8,$3C(a0)
00019E8C 4A68 0036                  		tst.w	$36(a0)
00019E90 6700                       		beq.s	loc_193B4
00019E92 317C 002D 003C             		move.w	#$2D,$3C(a0)
00019E98                            
00019E98                            loc_193B4:
00019E98 5428 0028                  		addq.b	#2,$28(a0)
00019E9C 4268 0012                  		clr.w	$12(a0)
00019EA0 6000                       		bra.s	loc_193CC
00019EA2                            ; ===========================================================================
00019EA2                            
00019EA2                            loc_193BE:
00019EA2 0C68 FFC0 0012             		cmpi.w	#-$40,$12(a0)
00019EA8 6C00                       		bge.s	loc_193CC
00019EAA 0668 000C 0012             		addi.w	#$C,$12(a0)
00019EB0                            
00019EB0                            loc_193CC:
00019EB0 6000 FE24                  		bra.w	loc_191F2
00019EB4                            ; ===========================================================================
00019EB4                            
00019EB4                            loc_193D0:				; XREF: off_192FA
00019EB4 5368 003C                  		subq.w	#1,$3C(a0)
00019EB8 6E00                       		bgt.s	loc_19406
00019EBA 6B00                       		bmi.s	loc_193EE
00019EBC 70FF                       		moveq	#-1,d0
00019EBE 3028 0036                  		move.w	$36(a0),d0
00019EC2 6700                       		beq.s	loc_193E8
00019EC4 2240                       		movea.l	d0,a1
00019EC6 137C 000A 0029             		move.b	#$A,$29(a1)
00019ECC                            
00019ECC                            loc_193E8:
00019ECC 4268 0036                  		clr.w	$36(a0)
00019ED0 6000                       		bra.s	loc_19406
00019ED2                            ; ===========================================================================
00019ED2                            
00019ED2                            loc_193EE:
00019ED2 0C68 FFE2 003C             		cmpi.w	#-$1E,$3C(a0)
00019ED8 6600                       		bne.s	loc_19406
00019EDA 4228 0029                  		clr.b	$29(a0)
00019EDE 5528 0025                  		subq.b	#2,$25(a0)
00019EE2 117C 00FF 003D             		move.b	#-1,$3D(a0)
00019EE8 6000                       		bra.s	loc_19446
00019EEA                            ; ===========================================================================
00019EEA                            
00019EEA                            loc_19406:
00019EEA 7001                       		moveq	#1,d0
00019EEC 4A68 0036                  		tst.w	$36(a0)
00019EF0 6700                       		beq.s	loc_19410
00019EF2 7002                       		moveq	#2,d0
00019EF4                            
00019EF4                            loc_19410:
00019EF4 0C68 04DA 0038             		cmpi.w	#$4DA,$38(a0)
00019EFA 6700                       		beq.s	loc_19424
00019EFC 6D00                       		blt.s	loc_1941C
00019EFE 4440                       		neg.w	d0
00019F00                            
00019F00                            loc_1941C:
00019F00 4A68 0036                  		tst.w	$36(a0)
00019F04 D168 0038                  		add.w	d0,$38(a0)
00019F08                            
00019F08                            loc_19424:
00019F08 7000                       		moveq	#0,d0
00019F0A 4A68 0036                  		tst.w	$36(a0)
00019F0E 6700                       		beq.s	loc_19438
00019F10 7002                       		moveq	#2,d0
00019F12 0828 0000 003D             		btst	#0,$3D(a0)
00019F18 6700                       		beq.s	loc_19438
00019F1A 4440                       		neg.w	d0
00019F1C                            
00019F1C                            loc_19438:
00019F1C D068 0038                  		add.w	$38(a0),d0
00019F20 3140 000C                  		move.w	d0,$C(a0)
00019F24 3168 0030 0008             		move.w	$30(a0),8(a0)
00019F2A                            
00019F2A                            loc_19446:
00019F2A 6000 FDBA                  		bra.w	loc_19202
00019F2E                            
00019F2E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019F2E                            
00019F2E                            
00019F2E                            Obj75_FindBlocks:			; XREF: loc_192AE
00019F2E 4268 0036                  		clr.w	$36(a0)
00019F32 43F8 D040                  		lea	($FFFFD040).w,a1
00019F36 703E                       		moveq	#$3E,d0
00019F38 7276                       		moveq	#$76,d1
00019F3A 1428 0034                  		move.b	$34(a0),d2
00019F3E                            
00019F3E                            Obj75_FindLoop:
00019F3E B211                       		cmp.b	(a1),d1		; is object a SYZ boss block?
00019F40 6600                       		bne.s	loc_1946A	; if not, branch
00019F42 B429 0028                  		cmp.b	$28(a1),d2
00019F46 6600                       		bne.s	loc_1946A
00019F48 3149 0036                  		move.w	a1,$36(a0)
00019F4C 6000                       		bra.s	locret_19472
00019F4E                            ; ===========================================================================
00019F4E                            
00019F4E                            loc_1946A:
00019F4E 43E9 0040                  		lea	$40(a1),a1	; next object RAM entry
00019F52 51C8 FFEA                  		dbf	d0,Obj75_FindLoop
00019F56                            
00019F56                            locret_19472:
00019F56 4E75                       		rts	
00019F58                            ; End of function Obj75_FindBlocks
00019F58                            
00019F58                            ; ===========================================================================
00019F58                            
00019F58                            loc_19474:				; XREF: Obj75_ShipIndex
00019F58 5368 003C                  		subq.w	#1,$3C(a0)
00019F5C 6B00                       		bmi.s	loc_1947E
00019F5E 6000 E412                  		bra.w	BossDefeated
00019F62                            ; ===========================================================================
00019F62                            
00019F62                            loc_1947E:
00019F62 5428 0025                  		addq.b	#2,$25(a0)
00019F66 4268 0012                  		clr.w	$12(a0)
00019F6A 08E8 0000 0022             		bset	#0,$22(a0)
00019F70 08A8 0007 0022             		bclr	#7,$22(a0)
00019F76 4268 0010                  		clr.w	$10(a0)
00019F7A 317C FFFF 003C             		move.w	#-1,$3C(a0)
00019F80 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00019F84 6600                       		bne.s	loc_194A8
00019F86 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00019F8C                            
00019F8C                            loc_194A8:
00019F8C 6000 FD58                  		bra.w	loc_19202
00019F90                            ; ===========================================================================
00019F90                            
00019F90                            loc_194AC:				; XREF: Obj75_ShipIndex
00019F90 5268 003C                  		addq.w	#1,$3C(a0)
00019F94 6700                       		beq.s	loc_194BC
00019F96 6A00                       		bpl.s	loc_194C2
00019F98 0668 0018 0012             		addi.w	#$18,$12(a0)
00019F9E 6000                       		bra.s	loc_194EE
00019FA0                            ; ===========================================================================
00019FA0                            
00019FA0                            loc_194BC:
00019FA0 4268 0012                  		clr.w	$12(a0)
00019FA4 6000                       		bra.s	loc_194EE
00019FA6                            ; ===========================================================================
00019FA6                            
00019FA6                            loc_194C2:
00019FA6 0C68 0020 003C             		cmpi.w	#$20,$3C(a0)
00019FAC 6500                       		bcs.s	loc_194DA
00019FAE 6700                       		beq.s	loc_194E0
00019FB0 0C68 002A 003C             		cmpi.w	#$2A,$3C(a0)
00019FB6 6500                       		bcs.s	loc_194EE
00019FB8 5428 0025                  		addq.b	#2,$25(a0)
00019FBC 6000                       		bra.s	loc_194EE
00019FBE                            ; ===========================================================================
00019FBE                            
00019FBE                            loc_194DA:
00019FBE 5168 0012                  		subq.w	#8,$12(a0)
00019FC2 6000                       		bra.s	loc_194EE
00019FC4                            ; ===========================================================================
00019FC4                            
00019FC4                            loc_194E0:
00019FC4 4268 0012                  		clr.w	$12(a0)
00019FC8 303C 0085                  		move.w	#$85,d0
00019FCC 4EB9 0000 15CC             		jsr	(PlaySound).l	; play SYZ music
00019FD2                            
00019FD2                            loc_194EE:
00019FD2 6000 FD02                  		bra.w	loc_191F2
00019FD6                            ; ===========================================================================
00019FD6                            
00019FD6                            loc_194F2:				; XREF: Obj75_ShipIndex
00019FD6 317C 0400 0010             		move.w	#$400,$10(a0)
00019FDC 317C FFC0 0012             		move.w	#-$40,$12(a0)
00019FE2 0C78 2D40 F72A             		cmpi.w	#$2D40,($FFFFF72A).w
00019FE8 6400                       		bcc.s	loc_1950C
00019FEA 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00019FEE 6000                       		bra.s	loc_19512
00019FF0                            ; ===========================================================================
00019FF0                            
00019FF0                            loc_1950C:
00019FF0 4A28 0001                  		tst.b	1(a0)
00019FF4 6A00                       		bpl.s	Obj75_ShipDelete
00019FF6                            
00019FF6                            loc_19512:
00019FF6 6100 E3BC                  		bsr.w	BossMove
00019FFA 6000 FCC6                  		bra.w	loc_191DE
00019FFE                            ; ===========================================================================
00019FFE                            
00019FFE                            Obj75_ShipDelete:
00019FFE 4EF9 0000 E034             		jmp	DeleteObject
0001A004                            ; ===========================================================================
0001A004                            
0001A004                            Obj75_FaceMain:				; XREF: Obj75_Index
0001A004 7201                       		moveq	#1,d1
0001A006 2268 0034                  		movea.l	$34(a0),a1
0001A00A 7000                       		moveq	#0,d0
0001A00C 1029 0025                  		move.b	$25(a1),d0
0001A010 303B 0000                  		move.w	off_19546(pc,d0.w),d0
0001A014 4EBB 0000                  		jsr	off_19546(pc,d0.w)
0001A018 1141 001C                  		move.b	d1,$1C(a0)
0001A01C 1010                       		move.b	(a0),d0
0001A01E B011                       		cmp.b	(a1),d0
0001A020 6600                       		bne.s	Obj75_FaceDelete
0001A022 6000                       		bra.s	loc_195BE
0001A024                            ; ===========================================================================
0001A024                            
0001A024                            Obj75_FaceDelete:
0001A024 4EF9 0000 E034             		jmp	DeleteObject
0001A02A                            ; ===========================================================================
0001A02A 0000 0000                  off_19546:	dc.w loc_19574-off_19546, loc_19574-off_19546
0001A02E 0000 0000                  		dc.w loc_1955A-off_19546, loc_19552-off_19546
0001A032 0000 0000                  		dc.w loc_19552-off_19546, loc_19556-off_19546
0001A036                            ; ===========================================================================
0001A036                            
0001A036                            loc_19552:				; XREF: off_19546
0001A036 720A                       		moveq	#$A,d1
0001A038 4E75                       		rts	
0001A03A                            ; ===========================================================================
0001A03A                            
0001A03A                            loc_19556:				; XREF: off_19546
0001A03A 7206                       		moveq	#6,d1
0001A03C 4E75                       		rts	
0001A03E                            ; ===========================================================================
0001A03E                            
0001A03E                            loc_1955A:				; XREF: off_19546
0001A03E 7000                       		moveq	#0,d0
0001A040 1029 0028                  		move.b	$28(a1),d0
0001A044 303B 0000                  		move.w	off_19568(pc,d0.w),d0
0001A048 4EFB 0000                  		jmp	off_19568(pc,d0.w)
0001A04C                            ; ===========================================================================
0001A04C 0000 0000                  off_19568:	dc.w loc_19570-off_19568, loc_19572-off_19568
0001A050 0000 0000                  		dc.w loc_19570-off_19568, loc_19570-off_19568
0001A054                            ; ===========================================================================
0001A054                            
0001A054                            loc_19570:				; XREF: off_19568
0001A054 6000                       		bra.s	loc_19574
0001A056                            ; ===========================================================================
0001A056                            
0001A056                            loc_19572:				; XREF: off_19568
0001A056 7206                       		moveq	#6,d1
0001A058                            
0001A058                            loc_19574:				; XREF: off_19546
0001A058 4A29 0020                  		tst.b	$20(a1)
0001A05C 6600                       		bne.s	loc_1957E
0001A05E 7205                       		moveq	#5,d1
0001A060 4E75                       		rts	
0001A062                            ; ===========================================================================
0001A062                            
0001A062                            loc_1957E:
0001A062 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0001A068 6500                       		bcs.s	locret_19588
0001A06A 7204                       		moveq	#4,d1
0001A06C                            
0001A06C                            locret_19588:
0001A06C 4E75                       		rts	
0001A06E                            ; ===========================================================================
0001A06E                            
0001A06E                            Obj75_FlameMain:			; XREF: Obj75_Index
0001A06E 117C 0007 001C             		move.b	#7,$1C(a0)
0001A074 2268 0034                  		movea.l	$34(a0),a1
0001A078 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001A07E 6600                       		bne.s	loc_195AA
0001A080 117C 000B 001C             		move.b	#$B,$1C(a0)
0001A086 4A28 0001                  		tst.b	1(a0)
0001A08A 6A00                       		bpl.s	Obj75_FlameDelete
0001A08C 6000                       		bra.s	loc_195B6
0001A08E                            ; ===========================================================================
0001A08E                            
0001A08E                            loc_195AA:
0001A08E 4A69 0010                  		tst.w	$10(a1)
0001A092 6700                       		beq.s	loc_195B6
0001A094 117C 0008 001C             		move.b	#8,$1C(a0)
0001A09A                            
0001A09A                            loc_195B6:
0001A09A 6000                       		bra.s	loc_195BE
0001A09C                            ; ===========================================================================
0001A09C                            
0001A09C                            Obj75_FlameDelete:
0001A09C 4EF9 0000 E034             		jmp	DeleteObject
0001A0A2                            ; ===========================================================================
0001A0A2                            
0001A0A2                            loc_195BE:
0001A0A2 43F9 0001 87F6             		lea	(Ani_Eggman).l,a1
0001A0A8 4EB9 0000 B056             		jsr	AnimateSprite
0001A0AE 2268 0034                  		movea.l	$34(a0),a1
0001A0B2 3169 0008 0008             		move.w	8(a1),8(a0)
0001A0B8 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001A0BE                            
0001A0BE                            loc_195DA:
0001A0BE 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001A0C4 7003                       		moveq	#3,d0
0001A0C6 C028 0022                  		and.b	$22(a0),d0
0001A0CA 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001A0D0 8128 0001                  		or.b	d0,1(a0)
0001A0D4 4EF9 0000 DFF8             		jmp	DisplaySprite
0001A0DA                            ; ===========================================================================
0001A0DA                            
0001A0DA                            Obj75_SpikeMain:			; XREF: Obj75_Index
0001A0DA 217C 0001 8922 0004        		move.l	#Map_BossItems,4(a0)
0001A0E2 317C 246C 0002             		move.w	#$246C,2(a0)
0001A0E8 117C 0005 001A             		move.b	#5,$1A(a0)
0001A0EE 2268 0034                  		movea.l	$34(a0),a1
0001A0F2 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001A0F8 6600                       		bne.s	loc_1961C
0001A0FA 4A28 0001                  		tst.b	1(a0)
0001A0FE 6A00                       		bpl.s	Obj75_SpikeDelete
0001A100                            
0001A100                            loc_1961C:
0001A100 3169 0008 0008             		move.w	8(a1),8(a0)
0001A106 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001A10C 3028 003C                  		move.w	$3C(a0),d0
0001A110 0C29 0004 0025             		cmpi.b	#4,$25(a1)
0001A116 6600                       		bne.s	loc_19652
0001A118 0C29 0006 0028             		cmpi.b	#6,$28(a1)
0001A11E 6700                       		beq.s	loc_1964C
0001A120 4A29 0028                  		tst.b	$28(a1)
0001A124 6600                       		bne.s	loc_19658
0001A126 0C40 0094                  		cmpi.w	#$94,d0
0001A12A 6C00                       		bge.s	loc_19658
0001A12C 5E40                       		addq.w	#7,d0
0001A12E 6000                       		bra.s	loc_19658
0001A130                            ; ===========================================================================
0001A130                            
0001A130                            loc_1964C:
0001A130 4A69 003C                  		tst.w	$3C(a1)
0001A134 6A00                       		bpl.s	loc_19658
0001A136                            
0001A136                            loc_19652:
0001A136 4A40                       		tst.w	d0
0001A138 6F00                       		ble.s	loc_19658
0001A13A 5B40                       		subq.w	#5,d0
0001A13C                            
0001A13C                            loc_19658:
0001A13C 3140 003C                  		move.w	d0,$3C(a0)
0001A140 E440                       		asr.w	#2,d0
0001A142 D168 000C                  		add.w	d0,$C(a0)
0001A146 117C 0008 0019             		move.b	#8,$19(a0)
0001A14C 117C 000C 0016             		move.b	#$C,$16(a0)
0001A152 4228 0020                  		clr.b	$20(a0)
0001A156 2268 0034                  		movea.l	$34(a0),a1
0001A15A 4A29 0020                  		tst.b	$20(a1)
0001A15E 6700                       		beq.s	loc_19688
0001A160 4A29 0029                  		tst.b	$29(a1)
0001A164 6600                       		bne.s	loc_19688
0001A166 117C 0084 0020             		move.b	#$84,$20(a0)
0001A16C                            
0001A16C                            loc_19688:
0001A16C 6000 FF50                  		bra.w	loc_195DA
0001A170                            ; ===========================================================================
0001A170                            
0001A170                            Obj75_SpikeDelete:
0001A170 4EF9 0000 E034             		jmp	DeleteObject
0001A176                            ; ===========================================================================
0001A176                            ; ---------------------------------------------------------------------------
0001A176                            ; Object 76 - blocks that Eggman picks up (SYZ)
0001A176                            ; ---------------------------------------------------------------------------
0001A176                            
0001A176                            Obj76:					; XREF: Obj_Index
0001A176 7000                       		moveq	#0,d0
0001A178 1028 0024                  		move.b	$24(a0),d0
0001A17C 323B 0000                  		move.w	Obj76_Index(pc,d0.w),d1
0001A180 4EFB 1000                  		jmp	Obj76_Index(pc,d1.w)
0001A184                            ; ===========================================================================
0001A184 0000                       Obj76_Index:	dc.w Obj76_Main-Obj76_Index
0001A186 0000                       		dc.w Obj76_Action-Obj76_Index
0001A188 0000                       		dc.w loc_19762-Obj76_Index
0001A18A                            ; ===========================================================================
0001A18A                            
0001A18A                            Obj76_Main:				; XREF: Obj76_Index
0001A18A 7800                       		moveq	#0,d4
0001A18C 3A3C 2C10                  		move.w	#$2C10,d5
0001A190 7C09                       		moveq	#9,d6
0001A192 43D0                       		lea	(a0),a1
0001A194 6000                       		bra.s	Obj76_MakeBlock
0001A196                            ; ===========================================================================
0001A196                            
0001A196                            Obj76_Loop:
0001A196 4EB9 0000 E47E             		jsr	SingleObjLoad
0001A19C 6600                       		bne.s	Obj76_ExitLoop
0001A19E                            
0001A19E                            Obj76_MakeBlock:			; XREF: Obj76_Main
0001A19E 12BC 0076                  		move.b	#$76,(a1)
0001A1A2 237C 0000 0000 0004        		move.l	#Map_obj76,4(a1)
0001A1AA 337C 4000 0002             		move.w	#$4000,2(a1)
0001A1B0 137C 0004 0001             		move.b	#4,1(a1)
0001A1B6 137C 0010 0019             		move.b	#$10,$19(a1)
0001A1BC 137C 0010 0016             		move.b	#$10,$16(a1)
0001A1C2 137C 0003 0018             		move.b	#3,$18(a1)
0001A1C8 3345 0008                  		move.w	d5,8(a1)	; set x-position
0001A1CC 337C 0582 000C             		move.w	#$582,$C(a1)
0001A1D2 3344 0028                  		move.w	d4,$28(a1)
0001A1D6 0644 0101                  		addi.w	#$101,d4
0001A1DA 0645 0020                  		addi.w	#$20,d5		; add $20 to next x-position
0001A1DE 5429 0024                  		addq.b	#2,$24(a1)
0001A1E2 51CE FFB2                  		dbf	d6,Obj76_Loop	; repeat sequence 9 more times
0001A1E6                            
0001A1E6                            Obj76_ExitLoop:
0001A1E6 4E75                       		rts	
0001A1E8                            ; ===========================================================================
0001A1E8                            
0001A1E8                            Obj76_Action:				; XREF: Obj76_Index
0001A1E8 1028 0029                  		move.b	$29(a0),d0
0001A1EC B028 0028                  		cmp.b	$28(a0),d0
0001A1F0 6700                       		beq.s	Obj76_Solid
0001A1F2 4A00                       		tst.b	d0
0001A1F4 6B00                       		bmi.s	loc_19718
0001A1F6                            
0001A1F6                            loc_19712:
0001A1F6 6100 0000                  		bsr.w	Obj76_Break
0001A1FA 6000                       		bra.s	Obj76_Display
0001A1FC                            ; ===========================================================================
0001A1FC                            
0001A1FC                            loc_19718:
0001A1FC 2268 0034                  		movea.l	$34(a0),a1
0001A200 4A29 0021                  		tst.b	$21(a1)
0001A204 67F0                       		beq.s	loc_19712
0001A206 3169 0008 0008             		move.w	8(a1),8(a0)
0001A20C 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001A212 0668 002C 000C             		addi.w	#$2C,$C(a0)
0001A218 B2C8                       		cmpa.w	a0,a1
0001A21A 6500                       		bcs.s	Obj76_Display
0001A21C 3029 0012                  		move.w	$12(a1),d0
0001A220 48C0                       		ext.l	d0
0001A222 E080                       		asr.l	#8,d0
0001A224 D168 000C                  		add.w	d0,$C(a0)
0001A228 6000                       		bra.s	Obj76_Display
0001A22A                            ; ===========================================================================
0001A22A                            
0001A22A                            Obj76_Solid:				; XREF: Obj76_Action
0001A22A 323C 001B                  		move.w	#$1B,d1
0001A22E 343C 0010                  		move.w	#$10,d2
0001A232 363C 0011                  		move.w	#$11,d3
0001A236 3828 0008                  		move.w	8(a0),d4
0001A23A 4EB9 0001 03C8             		jsr	SolidObject
0001A240                            
0001A240                            Obj76_Display:				; XREF: Obj76_Action
0001A240 4EF9 0000 DFF8             		jmp	DisplaySprite
0001A246                            ; ===========================================================================
0001A246                            
0001A246                            loc_19762:				; XREF: Obj76_Index
0001A246 4A28 0001                  		tst.b	1(a0)
0001A24A 6A00                       		bpl.s	Obj76_Delete
0001A24C 4EB9 0000 DF60             		jsr	ObjectFall
0001A252 4EF9 0000 DFF8             		jmp	DisplaySprite
0001A258                            ; ===========================================================================
0001A258                            
0001A258                            Obj76_Delete:
0001A258 4EF9 0000 E034             		jmp	DeleteObject
0001A25E                            
0001A25E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001A25E                            
0001A25E                            
0001A25E                            Obj76_Break:				; XREF: Obj76_Action
0001A25E 49FA 0000                  		lea	Obj76_FragSpeed(pc),a4
0001A262 4BFA 0000                  		lea	Obj76_FragPos(pc),a5
0001A266 7801                       		moveq	#1,d4
0001A268 7203                       		moveq	#3,d1
0001A26A 7438                       		moveq	#$38,d2
0001A26C 5428 0024                  		addq.b	#2,$24(a0)
0001A270 117C 0008 0019             		move.b	#8,$19(a0)
0001A276 117C 0008 0016             		move.b	#8,$16(a0)
0001A27C 43D0                       		lea	(a0),a1
0001A27E 6000                       		bra.s	Obj76_MakeFrag
0001A280                            ; ===========================================================================
0001A280                            
0001A280                            Obj76_LoopFrag:
0001A280 4EB9 0000 E494             		jsr	SingleObjLoad2
0001A286 6600                       		bne.s	loc_197D4
0001A288                            
0001A288                            Obj76_MakeFrag:
0001A288 45D0                       		lea	(a0),a2
0001A28A 47D1                       		lea	(a1),a3
0001A28C 7603                       		moveq	#3,d3
0001A28E                            
0001A28E                            loc_197AA:
0001A28E 26DA                       		move.l	(a2)+,(a3)+
0001A290 26DA                       		move.l	(a2)+,(a3)+
0001A292 26DA                       		move.l	(a2)+,(a3)+
0001A294 26DA                       		move.l	(a2)+,(a3)+
0001A296 51CB FFF6                  		dbf	d3,loc_197AA
0001A29A                            
0001A29A 335C 0010                  		move.w	(a4)+,$10(a1)
0001A29E 335C 0012                  		move.w	(a4)+,$12(a1)
0001A2A2 361D                       		move.w	(a5)+,d3
0001A2A4 D769 0008                  		add.w	d3,8(a1)
0001A2A8 361D                       		move.w	(a5)+,d3
0001A2AA D769 000C                  		add.w	d3,$C(a1)
0001A2AE 1344 001A                  		move.b	d4,$1A(a1)
0001A2B2 5244                       		addq.w	#1,d4
0001A2B4 51C9 FFCA                  		dbf	d1,Obj76_LoopFrag ; repeat sequence 3 more times
0001A2B8                            
0001A2B8                            loc_197D4:
0001A2B8 303C 00CB                  		move.w	#$CB,d0
0001A2BC 4EF9 0000 15D2             		jmp	(PlaySound_Special).l ;	play smashing sound
0001A2C2                            ; End of function Obj76_Break
0001A2C2                            
0001A2C2                            ; ===========================================================================
0001A2C2 FE80 FE00                  Obj76_FragSpeed:dc.w $FE80, $FE00
0001A2C6 0180 FE00                  		dc.w $180, $FE00
0001A2CA FF00 FF00                  		dc.w $FF00, $FF00
0001A2CE 0100 FF00                  		dc.w $100, $FF00
0001A2D2 FFF8 FFF8                  Obj76_FragPos:	dc.w $FFF8, $FFF8
0001A2D6 0010 0000                  		dc.w $10, 0
0001A2DA 0000 0010                  		dc.w 0,	$10
0001A2DE 0010 0010                  		dc.w $10, $10
0001A2E2                            ; ---------------------------------------------------------------------------
0001A2E2                            ; Sprite mappings - blocks that	Eggman picks up (SYZ)
0001A2E2                            ; ---------------------------------------------------------------------------
0001A2E2                            Map_obj76:
0001A2E2                            	include "_maps\obj76.asm"
0001A2E2                            ; ---------------------------------------------------------------------------
0001A2E2                            ; Sprite mappings - blocks that	Robotnik picks up (SYZ)
0001A2E2                            ; ---------------------------------------------------------------------------
0001A2E2 0000 0000                  		dc.w byte_19808-Map_obj76, byte_19814-Map_obj76
0001A2E6 0000 0000                  		dc.w byte_1981A-Map_obj76, byte_19820-Map_obj76
0001A2EA 0000                       		dc.w byte_19826-Map_obj76
0001A2EC 02                         byte_19808:	dc.b 2
0001A2ED F00D 0071 F0               		dc.b $F0, $D, 0, $71, $F0
0001A2F2 000D 0079 F0               		dc.b 0,	$D, 0, $79, $F0
0001A2F7 00                         		dc.b 0
0001A2F8 01                         byte_19814:	dc.b 1
0001A2F9 F805 0071 F8               		dc.b $F8, 5, 0,	$71, $F8
0001A2FE 01                         byte_1981A:	dc.b 1
0001A2FF F805 0075 F8               		dc.b $F8, 5, 0,	$75, $F8
0001A304 01                         byte_19820:	dc.b 1
0001A305 F805 0079 F8               		dc.b $F8, 5, 0,	$79, $F8
0001A30A 01                         byte_19826:	dc.b 1
0001A30B F805 007D F8               		dc.b $F8, 5, 0,	$7D, $F8
0001A310                            		even
0001A310                            		even
0001A310                            
0001A310                            ; ===========================================================================
0001A310                            
0001A310                            loc_1982C:				; XREF: loc_19C62; loc_19C80
0001A310 4EF9 0000 E034             		jmp	DeleteObject
0001A316                            ; ===========================================================================
0001A316                            ; ---------------------------------------------------------------------------
0001A316                            ; Object 82 - Eggman (SBZ2)
0001A316                            ; ---------------------------------------------------------------------------
0001A316                            
0001A316                            Obj82:					; XREF: Obj_Index
0001A316 7000                       		moveq	#0,d0
0001A318 1028 0024                  		move.b	$24(a0),d0
0001A31C 323B 0000                  		move.w	Obj82_Index(pc,d0.w),d1
0001A320 4EFB 1000                  		jmp	Obj82_Index(pc,d1.w)
0001A324                            ; ===========================================================================
0001A324 0000                       Obj82_Index:	dc.w Obj82_Main-Obj82_Index
0001A326 0000                       		dc.w Obj82_Eggman-Obj82_Index
0001A328 0000                       		dc.w Obj82_Switch-Obj82_Index
0001A32A                            
0001A32A 0200 03                    Obj82_ObjData:	dc.b 2,	0, 3		; routine number, animation, priority
0001A32D 0400 03                    		dc.b 4,	0, 3
0001A330                            ; ===========================================================================
0001A330                            
0001A330                            Obj82_Main:				; XREF: Obj82_Index
0001A330 45FA FFF8                  		lea	Obj82_ObjData(pc),a2
0001A334 317C 2160 0008             		move.w	#$2160,8(a0)
0001A33A 317C 05A4 000C             		move.w	#$5A4,$C(a0)
0001A340 117C 000F 0020             		move.b	#$F,$20(a0)
0001A346 117C 0010 0021             		move.b	#$10,$21(a0)
0001A34C 08A8 0000 0022             		bclr	#0,$22(a0)
0001A352 4228 0025                  		clr.b	$25(a0)
0001A356 115A 0024                  		move.b	(a2)+,$24(a0)
0001A35A 115A 001C                  		move.b	(a2)+,$1C(a0)
0001A35E 115A 0018                  		move.b	(a2)+,$18(a0)
0001A362 217C 0000 0000 0004        		move.l	#Map_obj82,4(a0)
0001A36A 317C 0400 0002             		move.w	#$400,2(a0)
0001A370 117C 0004 0001             		move.b	#4,1(a0)
0001A376 08E8 0007 0001             		bset	#7,1(a0)
0001A37C 117C 0020 0019             		move.b	#$20,$19(a0)
0001A382 4EB9 0000 E494             		jsr	SingleObjLoad2
0001A388 6600                       		bne.s	Obj82_Eggman
0001A38A 2348 0034                  		move.l	a0,$34(a1)
0001A38E 12BC 0082                  		move.b	#$82,(a1)	; load switch object
0001A392 337C 2130 0008             		move.w	#$2130,8(a1)
0001A398 337C 05BC 000C             		move.w	#$5BC,$C(a1)
0001A39E 4228 0025                  		clr.b	$25(a0)
0001A3A2 135A 0024                  		move.b	(a2)+,$24(a1)
0001A3A6 135A 001C                  		move.b	(a2)+,$1C(a1)
0001A3AA 135A 0018                  		move.b	(a2)+,$18(a1)
0001A3AE 237C 0000 C78A 0004        		move.l	#Map_obj32,4(a1)
0001A3B6 337C 04A4 0002             		move.w	#$4A4,2(a1)
0001A3BC 137C 0004 0001             		move.b	#4,1(a1)
0001A3C2 08E9 0007 0001             		bset	#7,1(a1)
0001A3C8 137C 0010 0019             		move.b	#$10,$19(a1)
0001A3CE 137C 0000 001A             		move.b	#0,$1A(a1)
0001A3D4                            
0001A3D4                            Obj82_Eggman:				; XREF: Obj82_Index
0001A3D4 7000                       		moveq	#0,d0
0001A3D6 1028 0025                  		move.b	$25(a0),d0
0001A3DA 323B 0000                  		move.w	Obj82_EggIndex(pc,d0.w),d1
0001A3DE 4EBB 1000                  		jsr	Obj82_EggIndex(pc,d1.w)
0001A3E2 43FA 0000                  		lea	Ani_obj82(pc),a1
0001A3E6 4EB9 0000 B056             		jsr	AnimateSprite
0001A3EC 4EF9 0000 DFF8             		jmp	DisplaySprite
0001A3F2                            ; ===========================================================================
0001A3F2 0000                       Obj82_EggIndex:	dc.w Obj82_ChkSonic-Obj82_EggIndex
0001A3F4 0000                       		dc.w Obj82_PreLeap-Obj82_EggIndex
0001A3F6 0000                       		dc.w Obj82_Leap-Obj82_EggIndex
0001A3F8 0000                       		dc.w loc_19934-Obj82_EggIndex
0001A3FA                            ; ===========================================================================
0001A3FA                            
0001A3FA                            Obj82_ChkSonic:				; XREF: Obj82_EggIndex
0001A3FA 3028 0008                  		move.w	8(a0),d0
0001A3FE 9078 D008                  		sub.w	($FFFFD008).w,d0
0001A402 0C40 0080                  		cmpi.w	#128,d0		; is Sonic within 128 pixels of	Eggman?
0001A406 6400                       		bcc.s	loc_19934	; if not, branch
0001A408 5428 0025                  		addq.b	#2,$25(a0)
0001A40C 317C 00B4 003C             		move.w	#180,$3C(a0)	; set delay to 3 seconds
0001A412 117C 0001 001C             		move.b	#1,$1C(a0)
0001A418                            
0001A418                            loc_19934:				; XREF: Obj82_EggIndex
0001A418 4EF9 0000 DFD2             		jmp	SpeedToPos
0001A41E                            ; ===========================================================================
0001A41E                            
0001A41E                            Obj82_PreLeap:				; XREF: Obj82_EggIndex
0001A41E 5368 003C                  		subq.w	#1,$3C(a0)	; subtract 1 from time delay
0001A422 6600                       		bne.s	loc_19954	; if time remains, branch
0001A424 5428 0025                  		addq.b	#2,$25(a0)
0001A428 117C 0002 001C             		move.b	#2,$1C(a0)
0001A42E 5868 000C                  		addq.w	#4,$C(a0)
0001A432 317C 000F 003C             		move.w	#15,$3C(a0)
0001A438                            
0001A438                            loc_19954:
0001A438 60DE                       		bra.s	loc_19934
0001A43A                            ; ===========================================================================
0001A43A                            
0001A43A                            Obj82_Leap:				; XREF: Obj82_EggIndex
0001A43A 5368 003C                  		subq.w	#1,$3C(a0)
0001A43E 6E00                       		bgt.s	loc_199D0
0001A440 6600                       		bne.s	loc_1996A
0001A442 317C FF04 0010             		move.w	#-$FC,$10(a0)	; make Eggman leap
0001A448 317C FC40 0012             		move.w	#-$3C0,$12(a0)
0001A44E                            
0001A44E                            loc_1996A:
0001A44E 0C68 2132 0008             		cmpi.w	#$2132,8(a0)
0001A454 6E00                       		bgt.s	loc_19976
0001A456 4268 0010                  		clr.w	$10(a0)
0001A45A                            
0001A45A                            loc_19976:
0001A45A 0668 0024 0012             		addi.w	#$24,$12(a0)
0001A460 4A68 0012                  		tst.w	$12(a0)
0001A464 6B00                       		bmi.s	Obj82_FindBlocks
0001A466 0C68 0595 000C             		cmpi.w	#$595,$C(a0)
0001A46C 6500                       		bcs.s	Obj82_FindBlocks
0001A46E 317C 5357 0028             		move.w	#$5357,$28(a0)
0001A474 0C68 059B 000C             		cmpi.w	#$59B,$C(a0)
0001A47A 6500                       		bcs.s	Obj82_FindBlocks
0001A47C 317C 059B 000C             		move.w	#$59B,$C(a0)
0001A482 4268 0012                  		clr.w	$12(a0)
0001A486                            
0001A486                            Obj82_FindBlocks:
0001A486 3028 0010                  		move.w	$10(a0),d0
0001A48A 8068 0012                  		or.w	$12(a0),d0
0001A48E 6600                       		bne.s	loc_199D0
0001A490 43F8 D000                  		lea	($FFFFD000).w,a1 ; start at the	first object RAM
0001A494 703E                       		moveq	#$3E,d0
0001A496 7240                       		moveq	#$40,d1
0001A498                            
0001A498                            Obj82_FindLoop:	
0001A498 D2C1                       		adda.w	d1,a1		; jump to next object RAM
0001A49A 0C11 0083                  		cmpi.b	#$83,(a1)	; is object a block? (object $83)
0001A49E 57C8 FFF8                  		dbeq	d0,Obj82_FindLoop ; if not, repeat (max	$3E times)
0001A4A2                            
0001A4A2 6600                       		bne.s	loc_199D0
0001A4A4 337C 474F 0028             		move.w	#$474F,$28(a1)	; set block to disintegrate
0001A4AA 5428 0025                  		addq.b	#2,$25(a0)
0001A4AE 117C 0001 001C             		move.b	#1,$1C(a0)
0001A4B4                            
0001A4B4                            loc_199D0:
0001A4B4 6000 FF62                  		bra.w	loc_19934
0001A4B8                            ; ===========================================================================
0001A4B8                            
0001A4B8                            Obj82_Switch:				; XREF: Obj82_Index
0001A4B8 7000                       		moveq	#0,d0
0001A4BA 1028 0025                  		move.b	$25(a0),d0
0001A4BE 303B 0000                  		move.w	Obj82_SwIndex(pc,d0.w),d0
0001A4C2 4EFB 0000                  		jmp	Obj82_SwIndex(pc,d0.w)
0001A4C6                            ; ===========================================================================
0001A4C6 0000                       Obj82_SwIndex:	dc.w loc_199E6-Obj82_SwIndex
0001A4C8 0000                       		dc.w Obj82_SwDisplay-Obj82_SwIndex
0001A4CA                            ; ===========================================================================
0001A4CA                            
0001A4CA                            loc_199E6:				; XREF: Obj82_SwIndex
0001A4CA 2268 0034                  		movea.l	$34(a0),a1
0001A4CE 0C69 5357 0028             		cmpi.w	#$5357,$28(a1)
0001A4D4 6600                       		bne.s	Obj82_SwDisplay
0001A4D6 117C 0001 001A             		move.b	#1,$1A(a0)
0001A4DC 5428 0025                  		addq.b	#2,$25(a0)
0001A4E0                            
0001A4E0                            Obj82_SwDisplay:			; XREF: Obj82_SwIndex
0001A4E0 4EF9 0000 DFF8             		jmp	DisplaySprite
0001A4E6                            ; ===========================================================================
0001A4E6                            Ani_obj82:
0001A4E6                            	include "_anim\obj82.asm"
0001A4E6                            ; ---------------------------------------------------------------------------
0001A4E6                            ; Animation script - Eggman (SBZ2)
0001A4E6                            ; ---------------------------------------------------------------------------
0001A4E6 0000                       		dc.w byte_19A10-Ani_obj82
0001A4E8 0000                       		dc.w byte_19A14-Ani_obj82
0001A4EA 0000                       		dc.w byte_19A18-Ani_obj82
0001A4EC 0000                       		dc.w byte_19A20-Ani_obj82
0001A4EE 0000                       		dc.w byte_19A24-Ani_obj82
0001A4F0 0000                       		dc.w byte_19A2A-Ani_obj82
0001A4F2 0000                       		dc.w byte_19A30-Ani_obj82
0001A4F4 7E00 FF00                  byte_19A10:	dc.b $7E, 0, $FF, 0
0001A4F8 0601 02FF                  byte_19A14:	dc.b 6,	1, 2, $FF
0001A4FC 0E03 0404 0000 00FF        byte_19A18:	dc.b $E, 3, 4, 4, 0, 0,	0, $FF
0001A504 0005 09FF                  byte_19A20:	dc.b 0,	5, 9, $FF
0001A508 0607 0408 04FF             byte_19A24:	dc.b 6,	7, 4, 8, 4, $FF
0001A50E 0F04 0303 FF00             byte_19A2A:	dc.b $F, 4, 3, 3, $FF, 0
0001A514 7E06 FF00                  byte_19A30:	dc.b $7E, 6, $FF, 0
0001A518                            		even
0001A518                            		even
0001A518                            
0001A518                            ; ---------------------------------------------------------------------------
0001A518                            ; Sprite mappings - Eggman (SBZ2)
0001A518                            ; ---------------------------------------------------------------------------
0001A518                            Map_obj82:
0001A518                            	include "_maps\obj82.asm"
0001A518                            ; ================================================================================
0001A518                            ; Sprite Mappings - generated by Flex 2 Fri Mar 21 2025 21:13:29 GMT-0500 (Central Daylight Time)
0001A518                            ; ================================================================================
0001A518                            
0001A518                            DATAA16Z12RYSAF:
0001A518 0000 0000                  	dc.w DATAA16Z12RYSAF_0-DATAA16Z12RYSAF, DATAA16Z12RYSAF_1-DATAA16Z12RYSAF
0001A51C 0000 0000                  	dc.w DATAA16Z12RYSAF_2-DATAA16Z12RYSAF, DATAA16Z12RYSAF_3-DATAA16Z12RYSAF
0001A520 0000 0000                  	dc.w DATAA16Z12RYSAF_4-DATAA16Z12RYSAF, DATAA16Z12RYSAF_5-DATAA16Z12RYSAF
0001A524 0000 0000                  	dc.w DATAA16Z12RYSAF_6-DATAA16Z12RYSAF, DATAA16Z12RYSAF_7-DATAA16Z12RYSAF
0001A528 0000 0000                  	dc.w DATAA16Z12RYSAF_8-DATAA16Z12RYSAF, DATAA16Z12RYSAF_9-DATAA16Z12RYSAF
0001A52C 0000                       	dc.w DATAA16Z12RYSAF_A-DATAA16Z12RYSAF
0001A52E 03                         DATAA16Z12RYSAF_0: dc.b $3
0001A52F FC00 006D E8               	dc.b $FC, $0, $0, $6D, $E8
0001A534 E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A539 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A53E 04                         DATAA16Z12RYSAF_1: dc.b $4
0001A53F E80D 000C F0               	dc.b $E8, $D, $0, $C, $F0
0001A544 E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A549 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A54E FC00 006D E8               	dc.b $FC, $0, $0, $6D, $E8
0001A553 04                         DATAA16Z12RYSAF_2: dc.b $4
0001A554 E90D 000C F0               	dc.b $E9, $D, $0, $C, $F0
0001A559 E90E 0000 F0               	dc.b $E9, $E, $0, $0, $F0
0001A55E 010F 005D F0               	dc.b $1, $F, $0, $5D, $F0
0001A563 FD00 006D E8               	dc.b $FD, $0, $0, $6D, $E8
0001A568 03                         DATAA16Z12RYSAF_3: dc.b $3
0001A569 E80F 006E E8               	dc.b $E8, $F, $0, $6E, $E8
0001A56E 080D 007E E8               	dc.b $8, $D, $0, $7E, $E8
0001A573 F005 0086 08               	dc.b $F0, $5, $0, $86, $8
0001A578 04                         DATAA16Z12RYSAF_4: dc.b $4
0001A579 E00F 008A E8               	dc.b $E0, $F, $0, $8A, $E8
0001A57E 000C 009A E8               	dc.b $0, $C, $0, $9A, $E8
0001A583 0806 009E F0               	dc.b $8, $6, $0, $9E, $F0
0001A588 E805 00A4 08               	dc.b $E8, $5, $0, $A4, $8
0001A58D 04                         DATAA16Z12RYSAF_5: dc.b $4
0001A58E E80D 0014 EC               	dc.b $E8, $D, $0, $14, $EC
0001A593 E801 001C 0C               	dc.b $E8, $1, $0, $1C, $C
0001A598 E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A59D 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A5A2 07                         DATAA16Z12RYSAF_6: dc.b $7
0001A5A3 E80D 0014 EC               	dc.b $E8, $D, $0, $14, $EC
0001A5A8 E801 001C 0C               	dc.b $E8, $1, $0, $1C, $C
0001A5AD 0409 082E 00               	dc.b $4, $9, $8, $2E, $0
0001A5B2 0405 0834 E8               	dc.b $4, $5, $8, $34, $E8
0001A5B7 F00F 081E F0               	dc.b $F0, $F, $8, $1E, $F0
0001A5BC F104 0838 10               	dc.b $F1, $4, $8, $38, $10
0001A5C1 F104 0038 E0               	dc.b $F1, $4, $0, $38, $E0
0001A5C6 04                         DATAA16Z12RYSAF_7: dc.b $4
0001A5C7 080D 00A8 E4               	dc.b $8, $D, $0, $A8, $E4
0001A5CC E80F 00B0 EC               	dc.b $E8, $F, $0, $B0, $EC
0001A5D1 0805 00C0 04               	dc.b $8, $5, $0, $C0, $4
0001A5D6 F005 00C4 0C               	dc.b $F0, $5, $0, $C4, $C
0001A5DB 05                         DATAA16Z12RYSAF_8: dc.b $5
0001A5DC 0C05 00C8 E4               	dc.b $C, $5, $0, $C8, $E4
0001A5E1 E40F 00CC EC               	dc.b $E4, $F, $0, $CC, $EC
0001A5E6 040C 00DC EC               	dc.b $4, $C, $0, $DC, $EC
0001A5EB 0C05 00E0 FC               	dc.b $C, $5, $0, $E0, $FC
0001A5F0 EC04 00E4 0C               	dc.b $EC, $4, $0, $E4, $C
0001A5F5 08                         DATAA16Z12RYSAF_9: dc.b $8
0001A5F6 E80D 0014 EC               	dc.b $E8, $D, $0, $14, $EC
0001A5FB E801 001C 0C               	dc.b $E8, $1, $0, $1C, $C
0001A600 E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A605 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A60A E00D 3ECE F0               	dc.b $E0, $D, $3E, $CE, $F0
0001A60F F00D 3ECE F0               	dc.b $F0, $D, $3E, $CE, $F0
0001A614 000D 3ECE F0               	dc.b $0, $D, $3E, $CE, $F0
0001A619 100D 3ECE F0               	dc.b $10, $D, $3E, $CE, $F0
0001A61E 03                         DATAA16Z12RYSAF_A: dc.b $3
0001A61F EC0D 003A E4               	dc.b $EC, $D, $0, $3A, $E4
0001A624 F408 0042 04               	dc.b $F4, $8, $0, $42, $4
0001A629 EC0D 0045 FC               	dc.b $EC, $D, $0, $45, $FC
0001A62E                            	even
0001A62E                            	even
0001A62E                            
0001A62E                            ; ===========================================================================
0001A62E                            ; ---------------------------------------------------------------------------
0001A62E                            ; Object 83 - blocks that disintegrate Eggman	presses	a switch (SBZ2)
0001A62E                            ; ---------------------------------------------------------------------------
0001A62E                            
0001A62E                            Obj83:					; XREF: Obj_Index
0001A62E 7000                       		moveq	#0,d0
0001A630 1028 0024                  		move.b	$24(a0),d0
0001A634 323B 0000                  		move.w	Obj83_Index(pc,d0.w),d1
0001A638 4EFB 1000                  		jmp	Obj83_Index(pc,d1.w)
0001A63C                            ; ===========================================================================
0001A63C 0000                       Obj83_Index:	dc.w Obj83_Main-Obj83_Index
0001A63E 0000                       		dc.w Obj83_ChkBreak-Obj83_Index
0001A640 0000                       		dc.w loc_19C36-Obj83_Index
0001A642 0000                       		dc.w loc_19C62-Obj83_Index
0001A644 0000                       		dc.w loc_19C72-Obj83_Index
0001A646 0000                       		dc.w loc_19C80-Obj83_Index
0001A648                            ; ===========================================================================
0001A648                            
0001A648                            Obj83_Main:				; XREF: Obj83_Index
0001A648 317C 2080 0008             		move.w	#$2080,8(a0)
0001A64E 317C 05D0 000C             		move.w	#$5D0,$C(a0)
0001A654 117C 0080 0019             		move.b	#$80,$19(a0)
0001A65A 117C 0010 0016             		move.b	#$10,$16(a0)
0001A660 117C 0004 0001             		move.b	#4,1(a0)
0001A666 08E8 0007 0001             		bset	#7,1(a0)
0001A66C 7800                       		moveq	#0,d4
0001A66E 3A3C 2010                  		move.w	#$2010,d5
0001A672 7C07                       		moveq	#7,d6
0001A674 45E8 0030                  		lea	$30(a0),a2
0001A678                            
0001A678                            Obj83_MakeBlock:
0001A678 4EB9 0000 E47E             		jsr	SingleObjLoad
0001A67E 6600                       		bne.s	Obj83_ExitMake
0001A680 34C9                       		move.w	a1,(a2)+
0001A682 12BC 0083                  		move.b	#$83,(a1)	; load block object
0001A686 237C 0000 0000 0004        		move.l	#Map_obj83,4(a1)
0001A68E 337C 4518 0002             		move.w	#$4518,2(a1)
0001A694 137C 0004 0001             		move.b	#4,1(a1)
0001A69A 137C 0010 0019             		move.b	#$10,$19(a1)
0001A6A0 137C 0010 0016             		move.b	#$10,$16(a1)
0001A6A6 137C 0003 0018             		move.b	#3,$18(a1)
0001A6AC 3345 0008                  		move.w	d5,8(a1)	; set X	position
0001A6B0 337C 05D0 000C             		move.w	#$5D0,$C(a1)
0001A6B6 0645 0020                  		addi.w	#$20,d5		; add $20 for next X position
0001A6BA 137C 0008 0024             		move.b	#8,$24(a1)
0001A6C0 51CE FFB6                  		dbf	d6,Obj83_MakeBlock ; repeat sequence 7 more times
0001A6C4                            
0001A6C4                            Obj83_ExitMake:
0001A6C4 5428 0024                  		addq.b	#2,$24(a0)
0001A6C8 4E75                       		rts	
0001A6CA                            ; ===========================================================================
0001A6CA                            
0001A6CA                            Obj83_ChkBreak:				; XREF: Obj83_Index
0001A6CA 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
0001A6D0 6600                       		bne.s	Obj83_Solid	; if not, branch
0001A6D2 4228 001A                  		clr.b	$1A(a0)
0001A6D6 5428 0024                  		addq.b	#2,$24(a0)	; next subroutine
0001A6DA                            
0001A6DA                            Obj83_Solid:
0001A6DA 7000                       		moveq	#0,d0
0001A6DC 1028 001A                  		move.b	$1A(a0),d0
0001A6E0 4400                       		neg.b	d0
0001A6E2 4880                       		ext.w	d0
0001A6E4 5040                       		addq.w	#8,d0
0001A6E6 E940                       		asl.w	#4,d0
0001A6E8 383C 2100                  		move.w	#$2100,d4
0001A6EC 9840                       		sub.w	d0,d4
0001A6EE 1140 0019                  		move.b	d0,$19(a0)
0001A6F2 3144 0008                  		move.w	d4,8(a0)
0001A6F6 720B                       		moveq	#$B,d1
0001A6F8 D240                       		add.w	d0,d1
0001A6FA 7410                       		moveq	#$10,d2
0001A6FC 7611                       		moveq	#$11,d3
0001A6FE 4EF9 0001 03C8             		jmp	SolidObject
0001A704                            ; ===========================================================================
0001A704                            
0001A704                            loc_19C36:				; XREF: Obj83_Index
0001A704 0428 000E 001E             		subi.b	#$E,$1E(a0)
0001A70A 6400                       		bcc.s	Obj83_Solid2
0001A70C 70FF                       		moveq	#-1,d0
0001A70E 1028 001A                  		move.b	$1A(a0),d0
0001A712 4880                       		ext.w	d0
0001A714 D040                       		add.w	d0,d0
0001A716 3030 0030                  		move.w	$30(a0,d0.w),d0
0001A71A 2240                       		movea.l	d0,a1
0001A71C 337C 474F 0028             		move.w	#$474F,$28(a1)
0001A722 5228 001A                  		addq.b	#1,$1A(a0)
0001A726 0C28 0008 001A             		cmpi.b	#8,$1A(a0)
0001A72C 6700                       		beq.s	loc_19C62
0001A72E                            
0001A72E                            Obj83_Solid2:
0001A72E 60AA                       		bra.s	Obj83_Solid
0001A730                            ; ===========================================================================
0001A730                            
0001A730                            loc_19C62:				; XREF: Obj83_Index
0001A730 08A8 0003 0022             		bclr	#3,$22(a0)
0001A736 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001A73C 6000 FBD2                  		bra.w	loc_1982C
0001A740                            ; ===========================================================================
0001A740                            
0001A740                            loc_19C72:				; XREF: Obj83_Index
0001A740 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
0001A746 6700                       		beq.s	Obj83_Break	; if yes, branch
0001A748 4EF9 0000 DFF8             		jmp	DisplaySprite
0001A74E                            ; ===========================================================================
0001A74E                            
0001A74E                            loc_19C80:				; XREF: Obj83_Index
0001A74E 4A28 0001                  		tst.b	1(a0)
0001A752 6A00 FBBC                  		bpl.w	loc_1982C
0001A756 4EB9 0000 DF60             		jsr	ObjectFall
0001A75C 4EF9 0000 DFF8             		jmp	DisplaySprite
0001A762                            ; ===========================================================================
0001A762                            
0001A762                            Obj83_Break:				; XREF: loc_19C72
0001A762 49FA 0000                  		lea	Obj83_FragSpeed(pc),a4
0001A766 4BFA 0000                  		lea	Obj83_FragPos(pc),a5
0001A76A 7801                       		moveq	#1,d4
0001A76C 7203                       		moveq	#3,d1
0001A76E 7438                       		moveq	#$38,d2
0001A770 5428 0024                  		addq.b	#2,$24(a0)
0001A774 117C 0008 0019             		move.b	#8,$19(a0)
0001A77A 117C 0008 0016             		move.b	#8,$16(a0)
0001A780 43D0                       		lea	(a0),a1
0001A782 6000                       		bra.s	Obj83_MakeFrag
0001A784                            ; ===========================================================================
0001A784                            
0001A784                            Obj83_LoopFrag:
0001A784 4EB9 0000 E494             		jsr	SingleObjLoad2
0001A78A 6600                       		bne.s	Obj83_BreakSnd
0001A78C                            
0001A78C                            Obj83_MakeFrag:				; XREF: Obj83_Break
0001A78C 45D0                       		lea	(a0),a2
0001A78E 47D1                       		lea	(a1),a3
0001A790 7603                       		moveq	#3,d3
0001A792                            
0001A792                            loc_19CC4:
0001A792 26DA                       		move.l	(a2)+,(a3)+
0001A794 26DA                       		move.l	(a2)+,(a3)+
0001A796 26DA                       		move.l	(a2)+,(a3)+
0001A798 26DA                       		move.l	(a2)+,(a3)+
0001A79A 51CB FFF6                  		dbf	d3,loc_19CC4
0001A79E                            
0001A79E 335C 0012                  		move.w	(a4)+,$12(a1)
0001A7A2 361D                       		move.w	(a5)+,d3
0001A7A4 D769 0008                  		add.w	d3,8(a1)
0001A7A8 361D                       		move.w	(a5)+,d3
0001A7AA D769 000C                  		add.w	d3,$C(a1)
0001A7AE 1344 001A                  		move.b	d4,$1A(a1)
0001A7B2 5244                       		addq.w	#1,d4
0001A7B4 51C9 FFCE                  		dbf	d1,Obj83_LoopFrag ; repeat sequence 3 more times
0001A7B8                            
0001A7B8                            Obj83_BreakSnd:
0001A7B8 303C 00CB                  		move.w	#$CB,d0
0001A7BC 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play smashing sound
0001A7C2 4EF9 0000 DFF8             		jmp	DisplaySprite
0001A7C8                            ; ===========================================================================
0001A7C8 0080 0000                  Obj83_FragSpeed:dc.w $80, 0
0001A7CC 0120 00C0                  		dc.w $120, $C0
0001A7D0 FFF8 FFF8                  Obj83_FragPos:	dc.w $FFF8, $FFF8
0001A7D4 0010 0000                  		dc.w $10, 0
0001A7D8 0000 0010                  		dc.w 0,	$10
0001A7DC 0010 0010                  		dc.w $10, $10
0001A7E0                            ; ---------------------------------------------------------------------------
0001A7E0                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001A7E0                            ; ---------------------------------------------------------------------------
0001A7E0                            Map_obj83:
0001A7E0                            	include "_maps\obj83.asm"
0001A7E0                            ; ---------------------------------------------------------------------------
0001A7E0                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001A7E0                            ; ---------------------------------------------------------------------------
0001A7E0 0000 0000                  		dc.w byte_19D1C-Map_obj83, byte_19D22-Map_obj83
0001A7E4 0000 0000                  		dc.w byte_19D2E-Map_obj83, byte_19D3A-Map_obj83
0001A7E8 0000                       		dc.w byte_19D46-Map_obj83
0001A7EA 01                         byte_19D1C:	dc.b 1
0001A7EB F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0001A7F0 02                         byte_19D22:	dc.b 2
0001A7F1 F801 0000 F8               		dc.b $F8, 1, 0,	0, $F8
0001A7F6 F801 0004 00               		dc.b $F8, 1, 0,	4, 0
0001A7FB 00                         		dc.b 0
0001A7FC 02                         byte_19D2E:	dc.b 2
0001A7FD F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
0001A802 F801 000C 00               		dc.b $F8, 1, 0,	$C, 0
0001A807 00                         		dc.b 0
0001A808 02                         byte_19D3A:	dc.b 2
0001A809 F801 0002 F8               		dc.b $F8, 1, 0,	2, $F8
0001A80E F801 0006 00               		dc.b $F8, 1, 0,	6, 0
0001A813 00                         		dc.b 0
0001A814 02                         byte_19D46:	dc.b 2
0001A815 F801 000A F8               		dc.b $F8, 1, 0,	$A, $F8
0001A81A F801 000E 00               		dc.b $F8, 1, 0,	$E, 0
0001A820 00                         		even
0001A820 00                         		even
0001A820                            
0001A820                            ; ===========================================================================
0001A820                            ; ---------------------------------------------------------------------------
0001A820                            ; Object 85 - Eggman (FZ)
0001A820                            ; ---------------------------------------------------------------------------
0001A820                            
0001A820                            Obj85_Delete:
0001A820 4EF9 0000 E034             		jmp	DeleteObject
0001A826                            ; ===========================================================================
0001A826                            
0001A826                            Obj85:					; XREF: Obj_Index
0001A826 7000                       		moveq	#0,d0
0001A828 1028 0024                  		move.b	$24(a0),d0
0001A82C 303B 0000                  		move.w	Obj85_Index(pc,d0.w),d0
0001A830 4EFB 0000                  		jmp	Obj85_Index(pc,d0.w)
0001A834                            ; ===========================================================================
0001A834 0000                       Obj85_Index:	dc.w Obj85_Main-Obj85_Index
0001A836 0000                       		dc.w Obj85_Eggman-Obj85_Index
0001A838 0000                       		dc.w loc_1A38E-Obj85_Index
0001A83A 0000                       		dc.w loc_1A346-Obj85_Index
0001A83C 0000                       		dc.w loc_1A2C6-Obj85_Index
0001A83E 0000                       		dc.w loc_1A3AC-Obj85_Index
0001A840 0000                       		dc.w loc_1A264-Obj85_Index
0001A842                            
0001A842 0100 0100 0470             Obj85_ObjData:	dc.w $100, $100, $470	; X pos, Y pos,	VRAM setting
0001A848 0001 A518                  		dc.l Map_obj82		; mappings pointer
0001A84C 25B0 0590 0300             		dc.w $25B0, $590, $300
0001A852 0000 0000                  		dc.l Map_obj84
0001A856 26E0 0596 03A0             		dc.w $26E0, $596, $3A0
0001A85C 0000 0000                  		dc.l Map_FZBoss
0001A860 26E0 0596 0470             		dc.w $26E0, $596, $470
0001A866 0001 A518                  		dc.l Map_obj82
0001A86A 26E0 0596 0400             		dc.w $26E0, $596, $400
0001A870 0001 885A                  		dc.l Map_Eggman
0001A874 26E0 0596 0400             		dc.w $26E0, $596, $400
0001A87A 0001 885A                  		dc.l Map_Eggman
0001A87E                            
0001A87E 0200 0420 19               Obj85_ObjData2:	dc.b 2,	0, 4, $20, $19	; routine num, animation, sprite priority, width, height
0001A883 0400 0112 08               		dc.b 4,	0, 1, $12, 8
0001A888 0600 0300 00               		dc.b 6,	0, 3, 0, 0
0001A88D 0800 0300 00               		dc.b 8,	0, 3, 0, 0
0001A892 0A00 0320 20               		dc.b $A, 0, 3, $20, $20
0001A897 0C00 0300 00               		dc.b $C, 0, 3, 0, 0
0001A89C                            ; ===========================================================================
0001A89C                            
0001A89C                            Obj85_Main:				; XREF: Obj85_Index
0001A89C 45FA FFA4                  		lea	Obj85_ObjData(pc),a2
0001A8A0 47FA FFDC                  		lea	Obj85_ObjData2(pc),a3
0001A8A4 2248                       		movea.l	a0,a1
0001A8A6 7205                       		moveq	#5,d1
0001A8A8 6000                       		bra.s	Obj85_LoadBoss
0001A8AA                            ; ===========================================================================
0001A8AA                            
0001A8AA                            Obj85_Loop:
0001A8AA 4EB9 0000 E494             		jsr	SingleObjLoad2
0001A8B0 6600                       		bne.s	loc_19E20
0001A8B2                            
0001A8B2                            Obj85_LoadBoss:				; XREF: Obj85_Main
0001A8B2 12BC 0085                  		move.b	#$85,(a1)
0001A8B6 335A 0008                  		move.w	(a2)+,8(a1)
0001A8BA 335A 000C                  		move.w	(a2)+,$C(a1)
0001A8BE 335A 0002                  		move.w	(a2)+,2(a1)
0001A8C2 235A 0004                  		move.l	(a2)+,4(a1)
0001A8C6 135B 0024                  		move.b	(a3)+,$24(a1)
0001A8CA 135B 001C                  		move.b	(a3)+,$1C(a1)
0001A8CE 135B 0018                  		move.b	(a3)+,$18(a1)
0001A8D2 135B 0017                  		move.b	(a3)+,$17(a1)
0001A8D6 135B 0016                  		move.b	(a3)+,$16(a1)
0001A8DA 137C 0004 0001             		move.b	#4,1(a1)
0001A8E0 08E8 0007 0001             		bset	#7,1(a0)
0001A8E6 2348 0034                  		move.l	a0,$34(a1)
0001A8EA 51C9 FFBE                  		dbf	d1,Obj85_Loop
0001A8EE                            
0001A8EE                            loc_19E20:
0001A8EE 45E8 0036                  		lea	$36(a0),a2
0001A8F2 4EB9 0000 E47E             		jsr	SingleObjLoad
0001A8F8 6600                       		bne.s	loc_19E5A
0001A8FA 12BC 0086                  		move.b	#$86,(a1)	; load energy ball object
0001A8FE 3489                       		move.w	a1,(a2)
0001A900 2348 0034                  		move.l	a0,$34(a1)
0001A904 45E8 0038                  		lea	$38(a0),a2
0001A908 7400                       		moveq	#0,d2
0001A90A 7203                       		moveq	#3,d1
0001A90C                            
0001A90C                            loc_19E3E:
0001A90C 4EB9 0000 E494             		jsr	SingleObjLoad2
0001A912 6600                       		bne.s	loc_19E5A
0001A914 34C9                       		move.w	a1,(a2)+
0001A916 12BC 0084                  		move.b	#$84,(a1)	; load crushing	cylinder object
0001A91A 2348 0034                  		move.l	a0,$34(a1)
0001A91E 1342 0028                  		move.b	d2,$28(a1)
0001A922 5442                       		addq.w	#2,d2
0001A924 51C9 FFE6                  		dbf	d1,loc_19E3E
0001A928                            
0001A928                            loc_19E5A:
0001A928 317C 0000 0034             		move.w	#0,$34(a0)
0001A92E 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001A934 317C FFFF 0030             		move.w	#-1,$30(a0)
0001A93A                            
0001A93A                            Obj85_Eggman:				; XREF: Obj85_Index
0001A93A 7000                       		moveq	#0,d0
0001A93C 1028 0034                  		move.b	$34(a0),d0
0001A940 303B 0000                  		move.w	off_19E80(pc,d0.w),d0
0001A944 4EBB 0000                  		jsr	off_19E80(pc,d0.w)
0001A948 4EF9 0000 DFF8             		jmp	DisplaySprite
0001A94E                            ; ===========================================================================
0001A94E 0000 0000                  off_19E80:	dc.w loc_19E90-off_19E80, loc_19EA8-off_19E80
0001A952 0000 0000                  		dc.w loc_19FE6-off_19E80, loc_1A02A-off_19E80
0001A956 0000 0000                  		dc.w loc_1A074-off_19E80, loc_1A112-off_19E80
0001A95A 0000 0000                  		dc.w loc_1A192-off_19E80, loc_1A1D4-off_19E80
0001A95E                            ; ===========================================================================
0001A95E                            
0001A95E                            loc_19E90:				; XREF: off_19E80
0001A95E 4AB8 F680                  		tst.l	($FFFFF680).w
0001A962 6600                       		bne.s	loc_19EA2
0001A964 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
0001A96A 6500                       		bcs.s	loc_19EA2
0001A96C 5428 0034                  		addq.b	#2,$34(a0)
0001A970                            
0001A970                            loc_19EA2:
0001A970 52B8 F636                  		addq.l	#1,($FFFFF636).w
0001A974 4E75                       		rts	
0001A976                            ; ===========================================================================
0001A976                            
0001A976                            loc_19EA8:				; XREF: off_19E80
0001A976 4A68 0030                  		tst.w	$30(a0)
0001A97A 6A00                       		bpl.s	loc_19F10
0001A97C 4268 0030                  		clr.w	$30(a0)
0001A980 4EB9 0000 2D46             		jsr	(RandomNumber).l
0001A986 0240 000C                  		andi.w	#$C,d0
0001A98A 3200                       		move.w	d0,d1
0001A98C 5441                       		addq.w	#2,d1
0001A98E 4A80                       		tst.l	d0
0001A990 6A00                       		bpl.s	loc_19EC6
0001A992 C141                       		exg	d1,d0
0001A994                            
0001A994                            loc_19EC6:
0001A994 43FA 0000                  		lea	word_19FD6(pc),a1
0001A998 3031 0000                  		move.w	(a1,d0.w),d0
0001A99C 3231 1000                  		move.w	(a1,d1.w),d1
0001A9A0 3140 0030                  		move.w	d0,$30(a0)
0001A9A4 74FF                       		moveq	#-1,d2
0001A9A6 3430 0038                  		move.w	$38(a0,d0.w),d2
0001A9AA 2242                       		movea.l	d2,a1
0001A9AC 137C 00FF 0029             		move.b	#-1,$29(a1)
0001A9B2 337C FFFF 0030             		move.w	#-1,$30(a1)
0001A9B8 3430 1038                  		move.w	$38(a0,d1.w),d2
0001A9BC 2242                       		movea.l	d2,a1
0001A9BE 137C 0001 0029             		move.b	#1,$29(a1)
0001A9C4 337C 0000 0030             		move.w	#0,$30(a1)
0001A9CA 317C 0001 0032             		move.w	#1,$32(a0)
0001A9D0 4228 0035                  		clr.b	$35(a0)
0001A9D4 303C 00B7                  		move.w	#$B7,d0
0001A9D8 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play rumbling sound
0001A9DE                            
0001A9DE                            loc_19F10:
0001A9DE 4A68 0032                  		tst.w	$32(a0)
0001A9E2 6B00 0000                  		bmi.w	loc_19FA6
0001A9E6 08A8 0000 0022             		bclr	#0,$22(a0)
0001A9EC 3038 D008                  		move.w	($FFFFD008).w,d0
0001A9F0 9068 0008                  		sub.w	8(a0),d0
0001A9F4 6500                       		bcs.s	loc_19F2E
0001A9F6 08E8 0000 0022             		bset	#0,$22(a0)
0001A9FC                            
0001A9FC                            loc_19F2E:
0001A9FC 323C 002B                  		move.w	#$2B,d1
0001AA00 343C 0014                  		move.w	#$14,d2
0001AA04 363C 0014                  		move.w	#$14,d3
0001AA08 3828 0008                  		move.w	8(a0),d4
0001AA0C 4EB9 0001 03C8             		jsr	SolidObject
0001AA12 4A44                       		tst.w	d4
0001AA14 6E00                       		bgt.s	loc_19F50
0001AA16                            
0001AA16                            loc_19F48:
0001AA16 4A28 0035                  		tst.b	$35(a0)
0001AA1A 6600                       		bne.s	loc_19F88
0001AA1C 6000                       		bra.s	loc_19F96
0001AA1E                            ; ===========================================================================
0001AA1E                            
0001AA1E                            loc_19F50:
0001AA1E 5E78 F636                  		addq.w	#7,($FFFFF636).w
0001AA22 0C38 0002 D01C             		cmpi.b	#2,($FFFFD01C).w
0001AA28 66EC                       		bne.s	loc_19F48
0001AA2A 303C 0300                  		move.w	#$300,d0
0001AA2E 0828 0000 0022             		btst	#0,$22(a0)
0001AA34 6600                       		bne.s	loc_19F6A
0001AA36 4440                       		neg.w	d0
0001AA38                            
0001AA38                            loc_19F6A:
0001AA38 31C0 D010                  		move.w	d0,($FFFFD010).w
0001AA3C 4A28 0035                  		tst.b	$35(a0)
0001AA40 6600                       		bne.s	loc_19F88
0001AA42 5328 0021                  		subq.b	#1,$21(a0)
0001AA46 117C 0064 0035             		move.b	#$64,$35(a0)
0001AA4C 303C 00AC                  		move.w	#$AC,d0
0001AA50 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001AA56                            
0001AA56                            loc_19F88:
0001AA56 5328 0035                  		subq.b	#1,$35(a0)
0001AA5A 6700                       		beq.s	loc_19F96
0001AA5C 117C 0003 001C             		move.b	#3,$1C(a0)
0001AA62 6000                       		bra.s	loc_19F9C
0001AA64                            ; ===========================================================================
0001AA64                            
0001AA64                            loc_19F96:
0001AA64 117C 0001 001C             		move.b	#1,$1C(a0)
0001AA6A                            
0001AA6A                            loc_19F9C:
0001AA6A 43FA FA7A                  		lea	Ani_obj82(pc),a1
0001AA6E 4EF9 0000 B056             		jmp	AnimateSprite
0001AA74                            ; ===========================================================================
0001AA74                            
0001AA74                            loc_19FA6:
0001AA74 4A28 0021                  		tst.b	$21(a0)
0001AA78 6700                       		beq.s	loc_19FBC
0001AA7A 5428 0034                  		addq.b	#2,$34(a0)
0001AA7E 317C FFFF 0030             		move.w	#-1,$30(a0)
0001AA84 4268 0032                  		clr.w	$32(a0)
0001AA88 4E75                       		rts	
0001AA8A                            ; ===========================================================================
0001AA8A                            
0001AA8A                            loc_19FBC:
0001AA8A 117C 0006 0034             		move.b	#6,$34(a0)
0001AA90 317C 25C0 0008             		move.w	#$25C0,8(a0)
0001AA96 317C 053C 000C             		move.w	#$53C,$C(a0)
0001AA9C 117C 0014 0016             		move.b	#$14,$16(a0)
0001AAA2 4E75                       		rts	
0001AAA4                            ; ===========================================================================
0001AAA4 0000 0002 0002 0004 0004+  word_19FD6:	dc.w 0,	2, 2, 4, 4, 6, 6, 0
0001AAB4                            ; ===========================================================================
0001AAB4                            
0001AAB4                            loc_19FE6:				; XREF: off_19E80
0001AAB4 70FF                       		moveq	#-1,d0
0001AAB6 3028 0036                  		move.w	$36(a0),d0
0001AABA 2240                       		movea.l	d0,a1
0001AABC 4A68 0030                  		tst.w	$30(a0)
0001AAC0 6A00                       		bpl.s	loc_1A000
0001AAC2 4268 0030                  		clr.w	$30(a0)
0001AAC6 137C 00FF 0029             		move.b	#-1,$29(a1)
0001AACC 6100                       		bsr.s	loc_1A020
0001AACE                            
0001AACE                            loc_1A000:
0001AACE 700F                       		moveq	#$F,d0
0001AAD0 C078 FE0E                  		and.w	($FFFFFE0E).w,d0
0001AAD4 6600                       		bne.s	loc_1A00A
0001AAD6 6100                       		bsr.s	loc_1A020
0001AAD8                            
0001AAD8                            loc_1A00A:
0001AAD8 4A68 0032                  		tst.w	$32(a0)
0001AADC 6700                       		beq.s	locret_1A01E
0001AADE 5528 0034                  		subq.b	#2,$34(a0)
0001AAE2 317C FFFF 0030             		move.w	#-1,$30(a0)
0001AAE8 4268 0032                  		clr.w	$32(a0)
0001AAEC                            
0001AAEC                            locret_1A01E:
0001AAEC 4E75                       		rts	
0001AAEE                            ; ===========================================================================
0001AAEE                            
0001AAEE                            loc_1A020:
0001AAEE 303C 00B1                  		move.w	#$B1,d0
0001AAF2 4EF9 0000 15D2             		jmp	(PlaySound_Special).l ;	play electricity sound
0001AAF8                            ; ===========================================================================
0001AAF8                            
0001AAF8                            loc_1A02A:				; XREF: off_19E80
0001AAF8 117C 0030 0017             		move.b	#$30,$17(a0)
0001AAFE 08E8 0000 0022             		bset	#0,$22(a0)
0001AB04 4EB9 0000 DFD2             		jsr	SpeedToPos
0001AB0A 117C 0006 001A             		move.b	#6,$1A(a0)
0001AB10 0668 0010 0012             		addi.w	#$10,$12(a0)
0001AB16 0C68 059C 000C             		cmpi.w	#$59C,$C(a0)
0001AB1C 6500                       		bcs.s	loc_1A070
0001AB1E 317C 059C 000C             		move.w	#$59C,$C(a0)
0001AB24 5428 0034                  		addq.b	#2,$34(a0)
0001AB28 117C 0020 0017             		move.b	#$20,$17(a0)
0001AB2E 317C 0100 0010             		move.w	#$100,$10(a0)
0001AB34 317C FF00 0012             		move.w	#-$100,$12(a0)
0001AB3A 5438 F742                  		addq.b	#2,($FFFFF742).w
0001AB3E                            
0001AB3E                            loc_1A070:
0001AB3E 6000 0000                  		bra.w	loc_1A166
0001AB42                            ; ===========================================================================
0001AB42                            
0001AB42                            loc_1A074:				; XREF: off_19E80
0001AB42 08E8 0000 0022             		bset	#0,$22(a0)
0001AB48 117C 0004 001C             		move.b	#4,$1C(a0)
0001AB4E 4EB9 0000 DFD2             		jsr	SpeedToPos
0001AB54 0668 0010 0012             		addi.w	#$10,$12(a0)
0001AB5A 0C68 05A3 000C             		cmpi.w	#$5A3,$C(a0)
0001AB60 6500                       		bcs.s	loc_1A09A
0001AB62 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001AB68                            
0001AB68                            loc_1A09A:
0001AB68 317C 0400 0010             		move.w	#$400,$10(a0)
0001AB6E 3028 0008                  		move.w	8(a0),d0
0001AB72 9078 D008                  		sub.w	($FFFFD008).w,d0
0001AB76 6A00                       		bpl.s	loc_1A0B4
0001AB78 317C 0500 0010             		move.w	#$500,$10(a0)
0001AB7E 6000 0000                  		bra.w	loc_1A0F2
0001AB82                            ; ===========================================================================
0001AB82                            
0001AB82                            loc_1A0B4:
0001AB82 0440 0070                  		subi.w	#$70,d0
0001AB86 6500                       		bcs.s	loc_1A0F2
0001AB88 0468 0100 0010             		subi.w	#$100,$10(a0)
0001AB8E 5140                       		subq.w	#8,d0
0001AB90 6500                       		bcs.s	loc_1A0F2
0001AB92 0468 0100 0010             		subi.w	#$100,$10(a0)
0001AB98 5140                       		subq.w	#8,d0
0001AB9A 6500                       		bcs.s	loc_1A0F2
0001AB9C 0468 0080 0010             		subi.w	#$80,$10(a0)
0001ABA2 5140                       		subq.w	#8,d0
0001ABA4 6500                       		bcs.s	loc_1A0F2
0001ABA6 0468 0080 0010             		subi.w	#$80,$10(a0)
0001ABAC 5140                       		subq.w	#8,d0
0001ABAE 6500                       		bcs.s	loc_1A0F2
0001ABB0 0468 0080 0010             		subi.w	#$80,$10(a0)
0001ABB6 0440 0038                  		subi.w	#$38,d0
0001ABBA 6500                       		bcs.s	loc_1A0F2
0001ABBC 4268 0010                  		clr.w	$10(a0)
0001ABC0                            
0001ABC0                            loc_1A0F2:
0001ABC0 0C68 26A0 0008             		cmpi.w	#$26A0,8(a0)
0001ABC6 6500                       		bcs.s	loc_1A110
0001ABC8 317C 26A0 0008             		move.w	#$26A0,8(a0)
0001ABCE 317C 0240 0010             		move.w	#$240,$10(a0)
0001ABD4 317C FB40 0012             		move.w	#-$4C0,$12(a0)
0001ABDA 5428 0034                  		addq.b	#2,$34(a0)
0001ABDE                            
0001ABDE                            loc_1A110:
0001ABDE 6000                       		bra.s	loc_1A15C
0001ABE0                            ; ===========================================================================
0001ABE0                            
0001ABE0                            loc_1A112:				; XREF: off_19E80
0001ABE0 4EB9 0000 DFD2             		jsr	SpeedToPos
0001ABE6 0C68 26E0 0008             		cmpi.w	#$26E0,8(a0)
0001ABEC 6500                       		bcs.s	loc_1A124
0001ABEE 4268 0010                  		clr.w	$10(a0)
0001ABF2                            
0001ABF2                            loc_1A124:
0001ABF2 0668 0034 0012             		addi.w	#$34,$12(a0)
0001ABF8 4A68 0012                  		tst.w	$12(a0)
0001ABFC 6B00                       		bmi.s	loc_1A142
0001ABFE 0C68 0592 000C             		cmpi.w	#$592,$C(a0)
0001AC04 6500                       		bcs.s	loc_1A142
0001AC06 317C 0592 000C             		move.w	#$592,$C(a0)
0001AC0C 4268 0012                  		clr.w	$12(a0)
0001AC10                            
0001AC10                            loc_1A142:
0001AC10 3028 0010                  		move.w	$10(a0),d0
0001AC14 8068 0012                  		or.w	$12(a0),d0
0001AC18 6600                       		bne.s	loc_1A15C
0001AC1A 5428 0034                  		addq.b	#2,$34(a0)
0001AC1E 317C FE80 0012             		move.w	#-$180,$12(a0)
0001AC24 117C 0001 0021             		move.b	#1,$21(a0)
0001AC2A                            
0001AC2A                            loc_1A15C:
0001AC2A 43FA F8BA                  		lea	Ani_obj82(pc),a1
0001AC2E 4EB9 0000 B056             		jsr	AnimateSprite
0001AC34                            
0001AC34                            loc_1A166:
0001AC34 0C78 2700 F72A             		cmpi.w	#$2700,($FFFFF72A).w
0001AC3A 6C00                       		bge.s	loc_1A172
0001AC3C 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001AC40                            
0001AC40                            loc_1A172:
0001AC40 0C28 000C 0034             		cmpi.b	#$C,$34(a0)
0001AC46 6C00                       		bge.s	locret_1A190
0001AC48 323C 001B                  		move.w	#$1B,d1
0001AC4C 343C 0070                  		move.w	#$70,d2
0001AC50 363C 0071                  		move.w	#$71,d3
0001AC54 3828 0008                  		move.w	8(a0),d4
0001AC58 4EF9 0001 03C8             		jmp	SolidObject
0001AC5E                            ; ===========================================================================
0001AC5E                            
0001AC5E                            locret_1A190:
0001AC5E 4E75                       		rts	
0001AC60                            ; ===========================================================================
0001AC60                            
0001AC60                            loc_1A192:				; XREF: off_19E80
0001AC60 217C 0001 885A 0004        		move.l	#Map_Eggman,4(a0)
0001AC68 317C 0400 0002             		move.w	#$400,2(a0)
0001AC6E 117C 0000 001C             		move.b	#0,$1C(a0)
0001AC74 08E8 0000 0022             		bset	#0,$22(a0)
0001AC7A 4EB9 0000 DFD2             		jsr	SpeedToPos
0001AC80 0C68 0544 000C             		cmpi.w	#$544,$C(a0)
0001AC86 6400                       		bcc.s	loc_1A1D0
0001AC88 317C 0180 0010             		move.w	#$180,$10(a0)
0001AC8E 317C FFE8 0012             		move.w	#-$18,$12(a0)
0001AC94 117C 000F 0020             		move.b	#$F,$20(a0)
0001AC9A 5428 0034                  		addq.b	#2,$34(a0)
0001AC9E                            
0001AC9E                            loc_1A1D0:
0001AC9E 6000 FF8A                  		bra.w	loc_1A15C
0001ACA2                            ; ===========================================================================
0001ACA2                            
0001ACA2                            loc_1A1D4:				; XREF: off_19E80
0001ACA2 08E8 0000 0022             		bset	#0,$22(a0)
0001ACA8 4EB9 0000 DFD2             		jsr	SpeedToPos
0001ACAE 4A68 0030                  		tst.w	$30(a0)
0001ACB2 6600                       		bne.s	loc_1A1FC
0001ACB4 4A28 0020                  		tst.b	$20(a0)
0001ACB8 6600                       		bne.s	loc_1A216
0001ACBA 317C 001E 0030             		move.w	#$1E,$30(a0)
0001ACC0 303C 00AC                  		move.w	#$AC,d0
0001ACC4 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001ACCA                            
0001ACCA                            loc_1A1FC:
0001ACCA 5368 0030                  		subq.w	#1,$30(a0)
0001ACCE 6600                       		bne.s	loc_1A216
0001ACD0 4A28 0022                  		tst.b	$22(a0)
0001ACD4 6A00                       		bpl.s	loc_1A210
0001ACD6 317C 0060 0012             		move.w	#$60,$12(a0)
0001ACDC 6000                       		bra.s	loc_1A216
0001ACDE                            ; ===========================================================================
0001ACDE                            
0001ACDE                            loc_1A210:
0001ACDE 117C 000F 0020             		move.b	#$F,$20(a0)
0001ACE4                            
0001ACE4                            loc_1A216:
0001ACE4 0C78 2790 D008             		cmpi.w	#$2790,($FFFFD008).w
0001ACEA 6D00                       		blt.s	loc_1A23A
0001ACEC 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w
0001ACF2 31FC 0000 F602             		move.w	#0,($FFFFF602).w
0001ACF8 4278 D014                  		clr.w	($FFFFD014).w
0001ACFC 4A68 0012                  		tst.w	$12(a0)
0001AD00 6A00                       		bpl.s	loc_1A248
0001AD02 31FC 0100 F602             		move.w	#$100,($FFFFF602).w
0001AD08                            
0001AD08                            loc_1A23A:
0001AD08 0C78 27E0 D008             		cmpi.w	#$27E0,($FFFFD008).w
0001AD0E 6D00                       		blt.s	loc_1A248
0001AD10 31FC 27E0 D008             		move.w	#$27E0,($FFFFD008).w
0001AD16                            
0001AD16                            loc_1A248:
0001AD16 0C68 2900 0008             		cmpi.w	#$2900,8(a0)
0001AD1C 6500                       		bcs.s	loc_1A260
0001AD1E 4A28 0001                  		tst.b	1(a0)
0001AD22 6B00                       		bmi.s	loc_1A260
0001AD24 11FC 0018 F600             		move.b	#$18,($FFFFF600).w
0001AD2A 6000 FAF4                  		bra.w	Obj85_Delete
0001AD2E                            ; ===========================================================================
0001AD2E                            
0001AD2E                            loc_1A260:
0001AD2E 6000 FEFA                  		bra.w	loc_1A15C
0001AD32                            ; ===========================================================================
0001AD32                            
0001AD32                            loc_1A264:				; XREF: Obj85_Index
0001AD32 2268 0034                  		movea.l	$34(a0),a1
0001AD36 1011                       		move.b	(a1),d0
0001AD38 B010                       		cmp.b	(a0),d0
0001AD3A 6600 FAE4                  		bne.w	Obj85_Delete
0001AD3E 117C 0007 001C             		move.b	#7,$1C(a0)
0001AD44 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001AD4A 6C00                       		bge.s	loc_1A280
0001AD4C 6000                       		bra.s	loc_1A2A6
0001AD4E                            ; ===========================================================================
0001AD4E                            
0001AD4E                            loc_1A280:
0001AD4E 4A69 0010                  		tst.w	$10(a1)
0001AD52 6700                       		beq.s	loc_1A28C
0001AD54 117C 000B 001C             		move.b	#$B,$1C(a0)
0001AD5A                            
0001AD5A                            loc_1A28C:
0001AD5A 43FA DA9A                  		lea	Ani_Eggman(pc),a1
0001AD5E 4EB9 0000 B056             		jsr	AnimateSprite
0001AD64                            
0001AD64                            loc_1A296:
0001AD64 2268 0034                  		movea.l	$34(a0),a1
0001AD68 3169 0008 0008             		move.w	8(a1),8(a0)
0001AD6E 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001AD74                            
0001AD74                            loc_1A2A6:
0001AD74 2268 0034                  		movea.l	$34(a0),a1
0001AD78 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001AD7E 7003                       		moveq	#3,d0
0001AD80 C028 0022                  		and.b	$22(a0),d0
0001AD84 0228 00FC 0001             		andi.b	#-4,1(a0)
0001AD8A 8128 0001                  		or.b	d0,1(a0)
0001AD8E 4EF9 0000 DFF8             		jmp	DisplaySprite
0001AD94                            ; ===========================================================================
0001AD94                            
0001AD94                            loc_1A2C6:				; XREF: Obj85_Index
0001AD94 2268 0034                  		movea.l	$34(a0),a1
0001AD98 1011                       		move.b	(a1),d0
0001AD9A B010                       		cmp.b	(a0),d0
0001AD9C 6600 FA82                  		bne.w	Obj85_Delete
0001ADA0 0CA9 0001 885A 0004        		cmpi.l	#Map_Eggman,4(a1)
0001ADA8 6700                       		beq.s	loc_1A2E4
0001ADAA 117C 000A 001A             		move.b	#$A,$1A(a0)
0001ADB0 60C2                       		bra.s	loc_1A2A6
0001ADB2                            ; ===========================================================================
0001ADB2                            
0001ADB2                            loc_1A2E4:
0001ADB2 117C 0001 001C             		move.b	#1,$1C(a0)
0001ADB8 4A29 0021                  		tst.b	$21(a1)
0001ADBC 6F00                       		ble.s	loc_1A312
0001ADBE 117C 0006 001C             		move.b	#6,$1C(a0)
0001ADC4 217C 0001 885A 0004        		move.l	#Map_Eggman,4(a0)
0001ADCC 317C 0400 0002             		move.w	#$400,2(a0)
0001ADD2 43FA DA22                  		lea	Ani_Eggman(pc),a1
0001ADD6 4EB9 0000 B056             		jsr	AnimateSprite
0001ADDC 6000 FF86                  		bra.w	loc_1A296
0001ADE0                            ; ===========================================================================
0001ADE0                            
0001ADE0                            loc_1A312:
0001ADE0 4A28 0001                  		tst.b	1(a0)
0001ADE4 6A00 FA3A                  		bpl.w	Obj85_Delete
0001ADE8 6100 D588                  		bsr.w	BossDefeated
0001ADEC 117C 0002 0018             		move.b	#2,$18(a0)
0001ADF2 117C 0000 001C             		move.b	#0,$1C(a0)
0001ADF8 217C 0000 0000 0004        		move.l	#Map_Eggman2,4(a0)
0001AE00 317C 03A0 0002             		move.w	#$3A0,2(a0)
0001AE06 43FA 0000                  		lea	Ani_obj85(pc),a1
0001AE0A 4EB9 0000 B056             		jsr	AnimateSprite
0001AE10 6000 FF52                  		bra.w	loc_1A296
0001AE14                            ; ===========================================================================
0001AE14                            
0001AE14                            loc_1A346:				; XREF: Obj85_Index
0001AE14 08E8 0000 0022             		bset	#0,$22(a0)
0001AE1A 2268 0034                  		movea.l	$34(a0),a1
0001AE1E 0CA9 0001 885A 0004        		cmpi.l	#Map_Eggman,4(a1)
0001AE26 6700                       		beq.s	loc_1A35E
0001AE28 6000 FF4A                  		bra.w	loc_1A2A6
0001AE2C                            ; ===========================================================================
0001AE2C                            
0001AE2C                            loc_1A35E:
0001AE2C 3169 0008 0008             		move.w	8(a1),8(a0)
0001AE32 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001AE38 4A28 001E                  		tst.b	$1E(a0)
0001AE3C 6600                       		bne.s	loc_1A376
0001AE3E 117C 0014 001E             		move.b	#$14,$1E(a0)
0001AE44                            
0001AE44                            loc_1A376:
0001AE44 5328 001E                  		subq.b	#1,$1E(a0)
0001AE48 6E00                       		bgt.s	loc_1A38A
0001AE4A 5228 001A                  		addq.b	#1,$1A(a0)
0001AE4E 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0001AE54 6E00 F9CA                  		bgt.w	Obj85_Delete
0001AE58                            
0001AE58                            loc_1A38A:
0001AE58 6000 FF0A                  		bra.w	loc_1A296
0001AE5C                            ; ===========================================================================
0001AE5C                            
0001AE5C                            loc_1A38E:				; XREF: Obj85_Index
0001AE5C 117C 000B 001A             		move.b	#$B,$1A(a0)
0001AE62 3038 D008                  		move.w	($FFFFD008).w,d0
0001AE66 9068 0008                  		sub.w	8(a0),d0
0001AE6A 6500                       		bcs.s	loc_1A3A6
0001AE6C 4A28 0001                  		tst.b	1(a0)
0001AE70 6A00 F9AE                  		bpl.w	Obj85_Delete
0001AE74                            
0001AE74                            loc_1A3A6:
0001AE74 4EF9 0000 DFF8             		jmp	DisplaySprite
0001AE7A                            ; ===========================================================================
0001AE7A                            
0001AE7A                            loc_1A3AC:				; XREF: Obj85_Index
0001AE7A 117C 0000 001A             		move.b	#0,$1A(a0)
0001AE80 08E8 0000 0022             		bset	#0,$22(a0)
0001AE86 2268 0034                  		movea.l	$34(a0),a1
0001AE8A 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001AE90 6600                       		bne.s	loc_1A3D0
0001AE92 0CA9 0001 885A 0004        		cmpi.l	#Map_Eggman,4(a1)
0001AE9A 6700 F984                  		beq.w	Obj85_Delete
0001AE9E                            
0001AE9E                            loc_1A3D0:
0001AE9E 6000 FED4                  		bra.w	loc_1A2A6
0001AEA2                            ; ===========================================================================
0001AEA2                            Ani_obj85:
0001AEA2                            	include "_anim\obj85.asm"
0001AEA2                            ; ---------------------------------------------------------------------------
0001AEA2                            ; Animation script - Eggman (FZ)
0001AEA2                            ; ---------------------------------------------------------------------------
0001AEA2 0000                       		dc.w byte_1A3D6-Ani_obj85
0001AEA4 0300 01FF                  byte_1A3D6:	dc.b 3,	0, 1, $FF
0001AEA8                            		even
0001AEA8                            		even
0001AEA8                            
0001AEA8                            Map_Eggman2:
0001AEA8                            	include "_maps\Eggman2.asm"
0001AEA8                            ; ---------------------------------------------------------------------------
0001AEA8                            ; Sprite mappings - Eggman (FZ)
0001AEA8                            ; ---------------------------------------------------------------------------
0001AEA8 0000                       		dc.w byte_1A3DE-Map_Eggman2
0001AEAA 0000                       		dc.w byte_1A3FD-Map_Eggman2
0001AEAC 06                         byte_1A3DE:	dc.b 6
0001AEAD E408 0020 F4               		dc.b $E4, 8, 0,	$20, $F4
0001AEB2 EC0D 0023 E4               		dc.b $EC, $D, 0, $23, $E4
0001AEB7 EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001AEBC FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001AEC1 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001AEC6 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001AECB 06                         byte_1A3FD:	dc.b 6
0001AECC E40A 0031 F4               		dc.b $E4, $A, 0, $31, $F4
0001AED1 EC05 0023 E4               		dc.b $EC, 5, 0,	$23, $E4
0001AED6 EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001AEDB FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001AEE0 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001AEE5 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001AEEA                            		even
0001AEEA                            		even
0001AEEA                            
0001AEEA                            Map_FZBoss:
0001AEEA                            	include "_maps\FZ boss.asm"
0001AEEA                            ; ---------------------------------------------------------------------------
0001AEEA                            ; Sprite mappings - boss (FZ)
0001AEEA                            ; ---------------------------------------------------------------------------
0001AEEA 0000                       		dc.w byte_1A422-Map_FZBoss
0001AEEC 0000                       		dc.w byte_1A42D-Map_FZBoss
0001AEEE 0000                       		dc.w byte_1A43D-Map_FZBoss
0001AEF0 02                         byte_1A422:	dc.b 2
0001AEF1 140E 2800 F4               		dc.b $14, $E, $28, 0, $F4
0001AEF6 2400 280C EC               		dc.b $24, 0, $28, $C, $EC
0001AEFB 03                         byte_1A42D:	dc.b 3
0001AEFC 0C05 280D 0C               		dc.b $C, 5, $28, $D, $C
0001AF01 1C00 2811 0C               		dc.b $1C, 0, $28, $11, $C
0001AF06 140D 2812 EC               		dc.b $14, $D, $28, $12,	$EC
0001AF0B 02                         byte_1A43D:	dc.b 2
0001AF0C 0C01 281A 0C               		dc.b $C, 1, $28, $1A, $C
0001AF11 140C 281C EC               		dc.b $14, $C, $28, $1C,	$EC
0001AF16                            		even
0001AF16                            		even
0001AF16                            
0001AF16                            ; ===========================================================================
0001AF16                            
0001AF16                            Obj84_Delete:
0001AF16 4EF9 0000 E034             		jmp	DeleteObject
0001AF1C                            ; ===========================================================================
0001AF1C                            ; ---------------------------------------------------------------------------
0001AF1C                            ; Object 84 - cylinder Eggman	hides in (FZ)
0001AF1C                            ; ---------------------------------------------------------------------------
0001AF1C                            
0001AF1C                            Obj84:					; XREF: Obj_Index
0001AF1C 7000                       		moveq	#0,d0
0001AF1E 1028 0024                  		move.b	$24(a0),d0
0001AF22 303B 0000                  		move.w	Obj84_Index(pc,d0.w),d0
0001AF26 4EFB 0000                  		jmp	Obj84_Index(pc,d0.w)
0001AF2A                            ; ===========================================================================
0001AF2A 0000                       Obj84_Index:	dc.w Obj84_Main-Obj84_Index
0001AF2C 0000                       		dc.w loc_1A4CE-Obj84_Index
0001AF2E 0000                       		dc.w loc_1A57E-Obj84_Index
0001AF30                            
0001AF30 24D0 0620                  Obj84_PosData:	dc.w $24D0, $620
0001AF34 2550 0620                  		dc.w $2550, $620
0001AF38 2490 04C0                  		dc.w $2490, $4C0
0001AF3C 2510 04C0                  		dc.w $2510, $4C0
0001AF40                            ; ===========================================================================
0001AF40                            
0001AF40                            Obj84_Main:				; XREF: Obj84_Index
0001AF40 43FA FFEE                  		lea	Obj84_PosData(pc),a1
0001AF44 7000                       		moveq	#0,d0
0001AF46 1028 0028                  		move.b	$28(a0),d0
0001AF4A D040                       		add.w	d0,d0
0001AF4C D2C0                       		adda.w	d0,a1
0001AF4E 117C 0004 0001             		move.b	#4,1(a0)
0001AF54 08E8 0007 0001             		bset	#7,1(a0)
0001AF5A 08E8 0004 0001             		bset	#4,1(a0)
0001AF60 317C 0300 0002             		move.w	#$300,2(a0)
0001AF66 217C 0000 0000 0004        		move.l	#Map_obj84,4(a0)
0001AF6E 3159 0008                  		move.w	(a1)+,8(a0)
0001AF72 3151 000C                  		move.w	(a1),$C(a0)
0001AF76 3159 0038                  		move.w	(a1)+,$38(a0)
0001AF7A 117C 0020 0016             		move.b	#$20,$16(a0)
0001AF80 117C 0060 0017             		move.b	#$60,$17(a0)
0001AF86 117C 0020 0019             		move.b	#$20,$19(a0)
0001AF8C 117C 0060 0016             		move.b	#$60,$16(a0)
0001AF92 117C 0003 0018             		move.b	#3,$18(a0)
0001AF98 5428 0024                  		addq.b	#2,$24(a0)
0001AF9C                            
0001AF9C                            loc_1A4CE:				; XREF: Obj84_Index
0001AF9C 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001AFA2 6F00                       		ble.s	loc_1A4DC
0001AFA4 08E8 0001 0001             		bset	#1,1(a0)
0001AFAA                            
0001AFAA                            loc_1A4DC:
0001AFAA 42A8 003C                  		clr.l	$3C(a0)
0001AFAE 4A28 0029                  		tst.b	$29(a0)
0001AFB2 6700                       		beq.s	loc_1A4EA
0001AFB4 5428 0024                  		addq.b	#2,$24(a0)
0001AFB8                            
0001AFB8                            loc_1A4EA:
0001AFB8 2028 003C                  		move.l	$3C(a0),d0
0001AFBC 2228 0038                  		move.l	$38(a0),d1
0001AFC0 D280                       		add.l	d0,d1
0001AFC2 4841                       		swap	d1
0001AFC4 3141 000C                  		move.w	d1,$C(a0)
0001AFC8 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0001AFCE 6600                       		bne.s	loc_1A524
0001AFD0 4A68 0030                  		tst.w	$30(a0)
0001AFD4 6A00                       		bpl.s	loc_1A524
0001AFD6 70F6                       		moveq	#-$A,d0
0001AFD8 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001AFDE 6F00                       		ble.s	loc_1A514
0001AFE0 700E                       		moveq	#$E,d0
0001AFE2                            
0001AFE2                            loc_1A514:
0001AFE2 D240                       		add.w	d0,d1
0001AFE4 2268 0034                  		movea.l	$34(a0),a1
0001AFE8 3341 000C                  		move.w	d1,$C(a1)
0001AFEC 3368 0008 0008             		move.w	8(a0),8(a1)
0001AFF2                            
0001AFF2                            loc_1A524:
0001AFF2 323C 002B                  		move.w	#$2B,d1
0001AFF6 343C 0060                  		move.w	#$60,d2
0001AFFA 363C 0061                  		move.w	#$61,d3
0001AFFE 3828 0008                  		move.w	8(a0),d4
0001B002 4EB9 0001 03C8             		jsr	SolidObject
0001B008 7000                       		moveq	#0,d0
0001B00A 3228 003C                  		move.w	$3C(a0),d1
0001B00E 6A00                       		bpl.s	loc_1A550
0001B010 4441                       		neg.w	d1
0001B012 5141                       		subq.w	#8,d1
0001B014 6500                       		bcs.s	loc_1A55C
0001B016 5200                       		addq.b	#1,d0
0001B018 E841                       		asr.w	#4,d1
0001B01A D041                       		add.w	d1,d0
0001B01C 6000                       		bra.s	loc_1A55C
0001B01E                            ; ===========================================================================
0001B01E                            
0001B01E                            loc_1A550:
0001B01E 0441 0027                  		subi.w	#$27,d1
0001B022 6500                       		bcs.s	loc_1A55C
0001B024 5200                       		addq.b	#1,d0
0001B026 E841                       		asr.w	#4,d1
0001B028 D041                       		add.w	d1,d0
0001B02A                            
0001B02A                            loc_1A55C:
0001B02A 1140 001A                  		move.b	d0,$1A(a0)
0001B02E 3038 D008                  		move.w	($FFFFD008).w,d0
0001B032 9068 0008                  		sub.w	8(a0),d0
0001B036 6B00                       		bmi.s	loc_1A578
0001B038 0440 0140                  		subi.w	#$140,d0
0001B03C 6B00                       		bmi.s	loc_1A578
0001B03E 4A28 0001                  		tst.b	1(a0)
0001B042 6A00 FED2                  		bpl.w	Obj84_Delete
0001B046                            
0001B046                            loc_1A578:
0001B046 4EF9 0000 DFF8             		jmp	DisplaySprite
0001B04C                            ; ===========================================================================
0001B04C                            
0001B04C                            loc_1A57E:				; XREF: Obj84_Index
0001B04C 7000                       		moveq	#0,d0
0001B04E 1028 0028                  		move.b	$28(a0),d0
0001B052 303B 0000                  		move.w	off_1A590(pc,d0.w),d0
0001B056 4EBB 0000                  		jsr	off_1A590(pc,d0.w)
0001B05A 6000 FF5C                  		bra.w	loc_1A4EA
0001B05E                            ; ===========================================================================
0001B05E 0000                       off_1A590:	dc.w loc_1A598-off_1A590
0001B060 0000                       		dc.w loc_1A598-off_1A590
0001B062 0000                       		dc.w loc_1A604-off_1A590
0001B064 0000                       		dc.w loc_1A604-off_1A590
0001B066                            ; ===========================================================================
0001B066                            
0001B066                            loc_1A598:				; XREF: off_1A590
0001B066 4A28 0029                  		tst.b	$29(a0)
0001B06A 6600                       		bne.s	loc_1A5D4
0001B06C 2268 0034                  		movea.l	$34(a0),a1
0001B070 4A29 0021                  		tst.b	$21(a1)
0001B074 6600                       		bne.s	loc_1A5B4
0001B076 6100 D2FA                  		bsr.w	BossDefeated
0001B07A 04A8 0001 0000 003C        		subi.l	#$10000,$3C(a0)
0001B082                            
0001B082                            loc_1A5B4:
0001B082 06A8 0002 0000 003C        		addi.l	#$20000,$3C(a0)
0001B08A 6400                       		bcc.s	locret_1A602
0001B08C 42A8 003C                  		clr.l	$3C(a0)
0001B090 2268 0034                  		movea.l	$34(a0),a1
0001B094 5369 0032                  		subq.w	#1,$32(a1)
0001B098 4269 0030                  		clr.w	$30(a1)
0001B09C 5528 0024                  		subq.b	#2,$24(a0)
0001B0A0 4E75                       		rts	
0001B0A2                            ; ===========================================================================
0001B0A2                            
0001B0A2                            loc_1A5D4:
0001B0A2 0C68 FFF0 003C             		cmpi.w	#-$10,$3C(a0)
0001B0A8 6C00                       		bge.s	loc_1A5E4
0001B0AA 04A8 0002 8000 003C        		subi.l	#$28000,$3C(a0)
0001B0B2                            
0001B0B2                            loc_1A5E4:
0001B0B2 04A8 0000 8000 003C        		subi.l	#$8000,$3C(a0)
0001B0BA 0C68 FF60 003C             		cmpi.w	#-$A0,$3C(a0)
0001B0C0 6E00                       		bgt.s	locret_1A602
0001B0C2 4268 003E                  		clr.w	$3E(a0)
0001B0C6 317C FF60 003C             		move.w	#-$A0,$3C(a0)
0001B0CC 4228 0029                  		clr.b	$29(a0)
0001B0D0                            
0001B0D0                            locret_1A602:
0001B0D0 4E75                       		rts	
0001B0D2                            ; ===========================================================================
0001B0D2                            
0001B0D2                            loc_1A604:				; XREF: off_1A590
0001B0D2 08E8 0001 0001             		bset	#1,1(a0)
0001B0D8 4A28 0029                  		tst.b	$29(a0)
0001B0DC 6600                       		bne.s	loc_1A646
0001B0DE 2268 0034                  		movea.l	$34(a0),a1
0001B0E2 4A29 0021                  		tst.b	$21(a1)
0001B0E6 6600                       		bne.s	loc_1A626
0001B0E8 6100 D288                  		bsr.w	BossDefeated
0001B0EC 06A8 0001 0000 003C        		addi.l	#$10000,$3C(a0)
0001B0F4                            
0001B0F4                            loc_1A626:
0001B0F4 04A8 0002 0000 003C        		subi.l	#$20000,$3C(a0)
0001B0FC 6400                       		bcc.s	locret_1A674
0001B0FE 42A8 003C                  		clr.l	$3C(a0)
0001B102 2268 0034                  		movea.l	$34(a0),a1
0001B106 5369 0032                  		subq.w	#1,$32(a1)
0001B10A 4269 0030                  		clr.w	$30(a1)
0001B10E 5528 0024                  		subq.b	#2,$24(a0)
0001B112 4E75                       		rts	
0001B114                            ; ===========================================================================
0001B114                            
0001B114                            loc_1A646:
0001B114 0C68 0010 003C             		cmpi.w	#$10,$3C(a0)
0001B11A 6D00                       		blt.s	loc_1A656
0001B11C 06A8 0002 8000 003C        		addi.l	#$28000,$3C(a0)
0001B124                            
0001B124                            loc_1A656:
0001B124 06A8 0000 8000 003C        		addi.l	#$8000,$3C(a0)
0001B12C 0C68 00A0 003C             		cmpi.w	#$A0,$3C(a0)
0001B132 6D00                       		blt.s	locret_1A674
0001B134 4268 003E                  		clr.w	$3E(a0)
0001B138 317C 00A0 003C             		move.w	#$A0,$3C(a0)
0001B13E 4228 0029                  		clr.b	$29(a0)
0001B142                            
0001B142                            locret_1A674:
0001B142 4E75                       		rts	
0001B144                            ; ===========================================================================
0001B144                            ; ---------------------------------------------------------------------------
0001B144                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001B144                            ; ---------------------------------------------------------------------------
0001B144                            Map_obj84:
0001B144                            	include "_maps\obj84.asm"
0001B144                            ; ---------------------------------------------------------------------------
0001B144                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001B144                            ; ---------------------------------------------------------------------------
0001B144 0000 0000                  		dc.w byte_1A68E-Map_obj84, byte_1A6AD-Map_obj84
0001B148 0000 0000                  		dc.w byte_1A6D6-Map_obj84, byte_1A709-Map_obj84
0001B14C 0000 0000                  		dc.w byte_1A746-Map_obj84, byte_1A788-Map_obj84
0001B150 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001B154 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001B158 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A7CF-Map_obj84
0001B15C 06                         byte_1A68E:	dc.b 6
0001B15D A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001B162 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001B167 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001B16C B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001B171 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001B176 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001B17B 08                         byte_1A6AD:	dc.b 8
0001B17C A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001B181 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001B186 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001B18B B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001B190 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001B195 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001B19A D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001B19F D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001B1A4 0A                         byte_1A6D6:	dc.b $A
0001B1A5 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001B1AA A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001B1AF B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001B1B4 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001B1B9 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001B1BE B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001B1C3 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001B1C8 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001B1CD F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001B1D2 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001B1D7 0C                         byte_1A709:	dc.b $C
0001B1D8 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001B1DD A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001B1E2 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001B1E7 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001B1EC B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001B1F1 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001B1F6 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001B1FB D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001B200 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001B205 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001B20A 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001B20F 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001B214 0D                         byte_1A746:	dc.b $D
0001B215 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001B21A A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001B21F B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001B224 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001B229 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001B22E B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001B233 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001B238 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001B23D F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001B242 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001B247 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001B24C 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001B251 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001B256 0E                         byte_1A788:	dc.b $E
0001B257 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001B25C A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001B261 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001B266 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001B26B B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001B270 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001B275 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001B27A D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001B27F F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001B284 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001B289 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001B28E 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001B293 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001B298 580F 4050 F0               		dc.b $58, $F, $40, $50,	$F0
0001B29D 02                         byte_1A7CF:	dc.b 2
0001B29E F804 0068 F0               		dc.b $F8, 4, 0,	$68, $F0
0001B2A3 000C 006A F0               		dc.b 0,	$C, 0, $6A, $F0
0001B2A8                            		even
0001B2A8                            		even
0001B2A8                            
0001B2A8                            ; ===========================================================================
0001B2A8                            ; ---------------------------------------------------------------------------
0001B2A8                            ; Object 86 - energy balls (FZ)
0001B2A8                            ; ---------------------------------------------------------------------------
0001B2A8                            
0001B2A8                            Obj86:					; XREF: Obj_Index
0001B2A8 7000                       		moveq	#0,d0
0001B2AA 1028 0024                  		move.b	$24(a0),d0
0001B2AE 303B 0000                  		move.w	Obj86_Index(pc,d0.w),d0
0001B2B2 4EFB 0000                  		jmp	Obj86_Index(pc,d0.w)
0001B2B6                            ; ===========================================================================
0001B2B6 0000                       Obj86_Index:	dc.w Obj86_Main-Obj86_Index
0001B2B8 0000                       		dc.w Obj86_Generator-Obj86_Index
0001B2BA 0000                       		dc.w Obj86_MakeBalls-Obj86_Index
0001B2BC 0000                       		dc.w loc_1A962-Obj86_Index
0001B2BE 0000                       		dc.w loc_1A982-Obj86_Index
0001B2C0                            ; ===========================================================================
0001B2C0                            
0001B2C0                            Obj86_Main:				; XREF: Obj86_Index
0001B2C0 317C 2588 0008             		move.w	#$2588,8(a0)
0001B2C6 317C 053C 000C             		move.w	#$53C,$C(a0)
0001B2CC 317C 0300 0002             		move.w	#$300,2(a0)
0001B2D2 217C 0000 0000 0004        		move.l	#Map_obj86,4(a0)
0001B2DA 117C 0000 001C             		move.b	#0,$1C(a0)
0001B2E0 117C 0003 0018             		move.b	#3,$18(a0)
0001B2E6 117C 0008 0017             		move.b	#8,$17(a0)
0001B2EC 117C 0008 0016             		move.b	#8,$16(a0)
0001B2F2 117C 0004 0001             		move.b	#4,1(a0)
0001B2F8 08E8 0007 0001             		bset	#7,1(a0)
0001B2FE 5428 0024                  		addq.b	#2,$24(a0)
0001B302                            
0001B302                            Obj86_Generator:			; XREF: Obj86_Index
0001B302 2268 0034                  		movea.l	$34(a0),a1
0001B306 0C29 0006 0034             		cmpi.b	#6,$34(a1)
0001B30C 6600                       		bne.s	loc_1A850
0001B30E 10BC 003F                  		move.b	#$3F,(a0)
0001B312 117C 0000 0024             		move.b	#0,$24(a0)
0001B318 4EF9 0000 DFF8             		jmp	DisplaySprite
0001B31E                            ; ===========================================================================
0001B31E                            
0001B31E                            loc_1A850:
0001B31E 117C 0000 001C             		move.b	#0,$1C(a0)
0001B324 4A28 0029                  		tst.b	$29(a0)
0001B328 6700                       		beq.s	loc_1A86C
0001B32A 5428 0024                  		addq.b	#2,$24(a0)
0001B32E 117C 0001 001C             		move.b	#1,$1C(a0)
0001B334 117C 003E 0028             		move.b	#$3E,$28(a0)
0001B33A                            
0001B33A                            loc_1A86C:
0001B33A 323C 0013                  		move.w	#$13,d1
0001B33E 343C 0008                  		move.w	#8,d2
0001B342 363C 0011                  		move.w	#$11,d3
0001B346 3828 0008                  		move.w	8(a0),d4
0001B34A 4EB9 0001 03C8             		jsr	SolidObject
0001B350 3038 D008                  		move.w	($FFFFD008).w,d0
0001B354 9068 0008                  		sub.w	8(a0),d0
0001B358 6B00                       		bmi.s	loc_1A89A
0001B35A 0440 0140                  		subi.w	#$140,d0
0001B35E 6B00                       		bmi.s	loc_1A89A
0001B360 4A28 0001                  		tst.b	1(a0)
0001B364 6A00 FBB0                  		bpl.w	Obj84_Delete
0001B368                            
0001B368                            loc_1A89A:
0001B368 43FA 0000                  		lea	Ani_obj86(pc),a1
0001B36C 4EB9 0000 B056             		jsr	AnimateSprite
0001B372 4EF9 0000 DFF8             		jmp	DisplaySprite
0001B378                            ; ===========================================================================
0001B378                            
0001B378                            Obj86_MakeBalls:			; XREF: Obj86_Index
0001B378 4A28 0029                  		tst.b	$29(a0)
0001B37C 6700 0000                  		beq.w	loc_1A954
0001B380 4228 0029                  		clr.b	$29(a0)
0001B384 D068 0030                  		add.w	$30(a0),d0
0001B388 0240 001E                  		andi.w	#$1E,d0
0001B38C D4C0                       		adda.w	d0,a2
0001B38E 5868 0030                  		addq.w	#4,$30(a0)
0001B392 4268 0032                  		clr.w	$32(a0)
0001B396 7403                       		moveq	#3,d2
0001B398                            
0001B398                            Obj86_Loop:
0001B398 4EB9 0000 E494             		jsr	SingleObjLoad2
0001B39E 6600 0000                  		bne.w	loc_1A954
0001B3A2 12BC 0086                  		move.b	#$86,(a1)
0001B3A6 3368 0008 0008             		move.w	8(a0),8(a1)
0001B3AC 337C 053C 000C             		move.w	#$53C,$C(a1)
0001B3B2 137C 0008 0024             		move.b	#8,$24(a1)
0001B3B8 337C 2300 0002             		move.w	#$2300,2(a1)
0001B3BE 237C 0000 0000 0004        		move.l	#Map_obj86a,4(a1)
0001B3C6 137C 000C 0016             		move.b	#$C,$16(a1)
0001B3CC 137C 000C 0017             		move.b	#$C,$17(a1)
0001B3D2 137C 0000 0020             		move.b	#0,$20(a1)
0001B3D8 137C 0003 0018             		move.b	#3,$18(a1)
0001B3DE 337C 003E 0028             		move.w	#$3E,$28(a1)
0001B3E4 137C 0004 0001             		move.b	#4,1(a1)
0001B3EA 08E9 0007 0001             		bset	#7,1(a1)
0001B3F0 2348 0034                  		move.l	a0,$34(a1)
0001B3F4 4EB9 0000 2D46             		jsr	(RandomNumber).l
0001B3FA 3228 0032                  		move.w	$32(a0),d1
0001B3FE C3FC FFB1                  		muls.w	#-$4F,d1
0001B402 0641 2578                  		addi.w	#$2578,d1
0001B406 0240 001F                  		andi.w	#$1F,d0
0001B40A 0440 0010                  		subi.w	#$10,d0
0001B40E D041                       		add.w	d1,d0
0001B410 3340 0030                  		move.w	d0,$30(a1)
0001B414 5268 0032                  		addq.w	#1,$32(a0)
0001B418 3168 0032 0038             		move.w	$32(a0),$38(a0)
0001B41E 51CA FF78                  		dbf	d2,Obj86_Loop	; repeat sequence 3 more times
0001B422                            
0001B422                            loc_1A954:
0001B422 4A68 0032                  		tst.w	$32(a0)
0001B426 6600                       		bne.s	loc_1A95E
0001B428 5428 0024                  		addq.b	#2,$24(a0)
0001B42C                            
0001B42C                            loc_1A95E:
0001B42C 6000 FF0C                  		bra.w	loc_1A86C
0001B430                            ; ===========================================================================
0001B430                            
0001B430                            loc_1A962:				; XREF: Obj86_Index
0001B430 117C 0002 001C             		move.b	#2,$1C(a0)
0001B436 4A68 0038                  		tst.w	$38(a0)
0001B43A 6600                       		bne.s	loc_1A97E
0001B43C 117C 0002 0024             		move.b	#2,$24(a0)
0001B442 2268 0034                  		movea.l	$34(a0),a1
0001B446 337C FFFF 0032             		move.w	#-1,$32(a1)
0001B44C                            
0001B44C                            loc_1A97E:
0001B44C 6000 FEEC                  		bra.w	loc_1A86C
0001B450                            ; ===========================================================================
0001B450                            
0001B450                            loc_1A982:				; XREF: Obj86_Index
0001B450 7000                       		moveq	#0,d0
0001B452 1028 0025                  		move.b	$25(a0),d0
0001B456 303B 0000                  		move.w	Obj86_Index2(pc,d0.w),d0
0001B45A 4EBB 0000                  		jsr	Obj86_Index2(pc,d0.w)
0001B45E 43FA 0000                  		lea	Ani_obj86a(pc),a1
0001B462 4EB9 0000 B056             		jsr	AnimateSprite
0001B468 4EF9 0000 DFF8             		jmp	DisplaySprite
0001B46E                            ; ===========================================================================
0001B46E 0000                       Obj86_Index2:	dc.w loc_1A9A6-Obj86_Index2
0001B470 0000                       		dc.w loc_1A9C0-Obj86_Index2
0001B472 0000                       		dc.w loc_1AA1E-Obj86_Index2
0001B474                            ; ===========================================================================
0001B474                            
0001B474                            loc_1A9A6:				; XREF: Obj86_Index2
0001B474 3028 0030                  		move.w	$30(a0),d0
0001B478 9068 0008                  		sub.w	8(a0),d0
0001B47C E940                       		asl.w	#4,d0
0001B47E 3140 0010                  		move.w	d0,$10(a0)
0001B482 317C 00B4 0028             		move.w	#$B4,$28(a0)
0001B488 5428 0025                  		addq.b	#2,$25(a0)
0001B48C 4E75                       		rts	
0001B48E                            ; ===========================================================================
0001B48E                            
0001B48E                            loc_1A9C0:				; XREF: Obj86_Index2
0001B48E 4A68 0010                  		tst.w	$10(a0)
0001B492 6700                       		beq.s	loc_1A9E6
0001B494 4EB9 0000 DFD2             		jsr	SpeedToPos
0001B49A 3028 0008                  		move.w	8(a0),d0
0001B49E 9068 0030                  		sub.w	$30(a0),d0
0001B4A2 6400                       		bcc.s	loc_1A9E6
0001B4A4 4268 0010                  		clr.w	$10(a0)
0001B4A8 D168 0008                  		add.w	d0,8(a0)
0001B4AC 2268 0034                  		movea.l	$34(a0),a1
0001B4B0 5369 0032                  		subq.w	#1,$32(a1)
0001B4B4                            
0001B4B4                            loc_1A9E6:
0001B4B4 117C 0000 001C             		move.b	#0,$1C(a0)
0001B4BA 5368 0028                  		subq.w	#1,$28(a0)
0001B4BE 6600                       		bne.s	locret_1AA1C
0001B4C0 5428 0025                  		addq.b	#2,$25(a0)
0001B4C4 117C 0001 001C             		move.b	#1,$1C(a0)
0001B4CA 117C 009A 0020             		move.b	#$9A,$20(a0)
0001B4D0 317C 00B4 0028             		move.w	#$B4,$28(a0)
0001B4D6 7000                       		moveq	#0,d0
0001B4D8 3038 D008                  		move.w	($FFFFD008).w,d0
0001B4DC 9068 0008                  		sub.w	8(a0),d0
0001B4E0 3140 0010                  		move.w	d0,$10(a0)
0001B4E4 317C 0140 0012             		move.w	#$140,$12(a0)
0001B4EA                            
0001B4EA                            locret_1AA1C:
0001B4EA 4E75                       		rts	
0001B4EC                            ; ===========================================================================
0001B4EC                            
0001B4EC                            loc_1AA1E:				; XREF: Obj86_Index2
0001B4EC 4EB9 0000 DFD2             		jsr	SpeedToPos
0001B4F2 0C68 05E0 000C             		cmpi.w	#$5E0,$C(a0)
0001B4F8 6400                       		bcc.s	loc_1AA34
0001B4FA 5368 0028                  		subq.w	#1,$28(a0)
0001B4FE 6700                       		beq.s	loc_1AA34
0001B500 4E75                       		rts	
0001B502                            ; ===========================================================================
0001B502                            
0001B502                            loc_1AA34:
0001B502 2268 0034                  		movea.l	$34(a0),a1
0001B506 5369 0038                  		subq.w	#1,$38(a1)
0001B50A 6000 FA0A                  		bra.w	Obj84_Delete
0001B50E                            ; ===========================================================================
0001B50E                            Ani_obj86:
0001B50E                            	include "_anim\obj86.asm"
0001B50E                            ; ---------------------------------------------------------------------------
0001B50E                            ; Animation script - energy ball launcher (FZ)
0001B50E                            ; ---------------------------------------------------------------------------
0001B50E 0000                       		dc.w byte_1AA46-Ani_obj86
0001B510 0000                       		dc.w byte_1AA4A-Ani_obj86
0001B512 0000                       		dc.w byte_1AA50-Ani_obj86
0001B514 7E00 FF00                  byte_1AA46:	dc.b $7E, 0, $FF, 0
0001B518 0100 0200 03FF             byte_1AA4A:	dc.b 1,	0, 2, 0, 3, $FF
0001B51E 0101 0201 03FF             byte_1AA50:	dc.b 1,	1, 2, 1, 3, $FF
0001B524                            		even
0001B524                            		even
0001B524                            
0001B524                            ; ---------------------------------------------------------------------------
0001B524                            ; Sprite mappings - energy ball	launcher (FZ)
0001B524                            ; ---------------------------------------------------------------------------
0001B524                            Map_obj86:
0001B524                            	include "_maps\obj86.asm"
0001B524                            ; ---------------------------------------------------------------------------
0001B524                            ; Sprite mappings - energy ball	launcher (FZ)
0001B524                            ; ---------------------------------------------------------------------------
0001B524 0000 0000                  		dc.w byte_1AA5E-Map_obj86, byte_1AA64-Map_obj86
0001B528 0000 0000                  		dc.w byte_1AA6A-Map_obj86, byte_1AA70-Map_obj86
0001B52C 01                         byte_1AA5E:	dc.b 1
0001B52D F805 006E F8               		dc.b $F8, 5, 0,	$6E, $F8
0001B532 01                         byte_1AA64:	dc.b 1
0001B533 F805 0076 F8               		dc.b $F8, 5, 0,	$76, $F8
0001B538 01                         byte_1AA6A:	dc.b 1
0001B539 F805 0072 F8               		dc.b $F8, 5, 0,	$72, $F8
0001B53E 01                         byte_1AA70:	dc.b 1
0001B53F F805 1072 F8               		dc.b $F8, 5, $10, $72, $F8
0001B544                            		even
0001B544                            		even
0001B544                            
0001B544                            Ani_obj86a:
0001B544                            	include "_anim\obj86a.asm"
0001B544                            ; ---------------------------------------------------------------------------
0001B544                            ; Animation script - energy balls (FZ)
0001B544                            ; ---------------------------------------------------------------------------
0001B544 0000                       		dc.w byte_1AA7A-Ani_obj86a
0001B546 0000                       		dc.w byte_1AA9C-Ani_obj86a
0001B548 0100 0A08 0A01 0A09 0A06+  byte_1AA7A:	dc.b 1,	0, $A, 8, $A, 1, $A, 9,	$A, 6, $A, 7, $A, 0, $A
0001B557 080A 010A 090A 060A 070A+  		dc.b 8,	$A, 1, $A, 9, $A, 6, $A, 7, $A,	2, $A, 3, $A, 4
0001B566 0A05 FF00                  		dc.b $A, 5, $FF, 0
0001B56A 0006 0501 0507 0501 05FF   byte_1AA9C:	dc.b 0,	6, 5, 1, 5, 7, 5, 1, 5,	$FF
0001B574                            		even
0001B574                            		even
0001B574                            
0001B574                            ; ---------------------------------------------------------------------------
0001B574                            ; Sprite mappings - energy balls (FZ)
0001B574                            ; ---------------------------------------------------------------------------
0001B574                            Map_obj86a:
0001B574                            	include "_maps\obj86a.asm"
0001B574                            ; ---------------------------------------------------------------------------
0001B574                            ; Sprite mappings - energy balls (FZ)
0001B574                            ; ---------------------------------------------------------------------------
0001B574 0000 0000                  		dc.w byte_1AABC-Map_obj86a, byte_1AAC7-Map_obj86a
0001B578 0000 0000                  		dc.w byte_1AAD2-Map_obj86a, byte_1AADD-Map_obj86a
0001B57C 0000 0000                  		dc.w byte_1AAE8-Map_obj86a, byte_1AAF3-Map_obj86a
0001B580 0000 0000                  		dc.w byte_1AAFE-Map_obj86a, byte_1AB04-Map_obj86a
0001B584 0000 0000                  		dc.w byte_1AB0A-Map_obj86a, byte_1AB15-Map_obj86a
0001B588 0000                       		dc.w byte_1AB20-Map_obj86a
0001B58A 02                         byte_1AABC:	dc.b 2
0001B58B F00D 007A F0               		dc.b $F0, $D, 0, $7A, $F0
0001B590 000D 187A F0               		dc.b 0,	$D, $18, $7A, $F0
0001B595 02                         byte_1AAC7:	dc.b 2
0001B596 F406 0082 F4               		dc.b $F4, 6, 0,	$82, $F4
0001B59B F402 1882 04               		dc.b $F4, 2, $18, $82, 4
0001B5A0 02                         byte_1AAD2:	dc.b 2
0001B5A1 F804 0088 F8               		dc.b $F8, 4, 0,	$88, $F8
0001B5A6 0004 1088 F8               		dc.b 0,	4, $10,	$88, $F8
0001B5AB 02                         byte_1AADD:	dc.b 2
0001B5AC F804 008A F8               		dc.b $F8, 4, 0,	$8A, $F8
0001B5B1 0004 108A F8               		dc.b 0,	4, $10,	$8A, $F8
0001B5B6 02                         byte_1AAE8:	dc.b 2
0001B5B7 F804 008C F8               		dc.b $F8, 4, 0,	$8C, $F8
0001B5BC 0004 108C F8               		dc.b 0,	4, $10,	$8C, $F8
0001B5C1 02                         byte_1AAF3:	dc.b 2
0001B5C2 F406 008E F4               		dc.b $F4, 6, 0,	$8E, $F4
0001B5C7 F402 188E 04               		dc.b $F4, 2, $18, $8E, 4
0001B5CC 01                         byte_1AAFE:	dc.b 1
0001B5CD F805 0094 F8               		dc.b $F8, 5, 0,	$94, $F8
0001B5D2 01                         byte_1AB04:	dc.b 1
0001B5D3 F805 0098 F8               		dc.b $F8, 5, 0,	$98, $F8
0001B5D8 02                         byte_1AB0A:	dc.b 2
0001B5D9 F00D 087A F0               		dc.b $F0, $D, 8, $7A, $F0
0001B5DE 000D 107A F0               		dc.b 0,	$D, $10, $7A, $F0
0001B5E3 02                         byte_1AB15:	dc.b 2
0001B5E4 F406 1082 F4               		dc.b $F4, 6, $10, $82, $F4
0001B5E9 F402 0882 04               		dc.b $F4, 2, 8,	$82, 4
0001B5EE 00                         byte_1AB20:	dc.b 0
0001B5F0 00                         		even
0001B5F0 00                         		even
0001B5F0                            
0001B5F0                            ; ===========================================================================
0001B5F0                            ; ---------------------------------------------------------------------------
0001B5F0                            ; Object 3E - prison capsule
0001B5F0                            ; ---------------------------------------------------------------------------
0001B5F0                            
0001B5F0                            Obj3E:					; XREF: Obj_Index
0001B5F0 7000                       		moveq	#0,d0
0001B5F2 1028 0024                  		move.b	$24(a0),d0
0001B5F6 323B 0000                  		move.w	Obj3E_Index(pc,d0.w),d1
0001B5FA 4EBB 1000                  		jsr	Obj3E_Index(pc,d1.w)
0001B5FE 3028 0008                  		move.w	8(a0),d0
0001B602 0240 FF80                  		andi.w	#$FF80,d0
0001B606 3238 F700                  		move.w	($FFFFF700).w,d1
0001B60A 0441 0080                  		subi.w	#$80,d1
0001B60E 0241 FF80                  		andi.w	#$FF80,d1
0001B612 9041                       		sub.w	d1,d0
0001B614 0C40 0280                  		cmpi.w	#$280,d0
0001B618 6200                       		bhi.s	Obj3E_Delete
0001B61A 4EF9 0000 DFF8             		jmp	DisplaySprite
0001B620                            ; ===========================================================================
0001B620                            
0001B620                            Obj3E_Delete:
0001B620 4EF9 0000 E034             		jmp	DeleteObject
0001B626                            ; ===========================================================================
0001B626 0000                       Obj3E_Index:	dc.w Obj3E_Main-Obj3E_Index
0001B628 0000                       		dc.w Obj3E_BodyMain-Obj3E_Index
0001B62A 0000                       		dc.w Obj3E_Switched-Obj3E_Index
0001B62C 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001B62E 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001B630 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001B632 0000                       		dc.w Obj3E_Animals-Obj3E_Index
0001B634 0000                       		dc.w Obj3E_EndAct-Obj3E_Index
0001B636                            
0001B636 0220 0400                  Obj3E_Var:	dc.b 2,	$20, 4,	0	; routine, width, priority, frame
0001B63A 040C 0501                  		dc.b 4,	$C, 5, 1
0001B63E 0610 0403                  		dc.b 6,	$10, 4,	3
0001B642 0810 0305                  		dc.b 8,	$10, 3,	5
0001B646                            ; ===========================================================================
0001B646                            
0001B646                            Obj3E_Main:				; XREF: Obj3E_Index
0001B646 217C 0000 0000 0004        		move.l	#Map_obj3E,4(a0)
0001B64E 317C 049D 0002             		move.w	#$49D,2(a0)
0001B654 117C 0004 0001             		move.b	#4,1(a0)
0001B65A 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001B660 7000                       		moveq	#0,d0
0001B662 1028 0028                  		move.b	$28(a0),d0
0001B666 E548                       		lsl.w	#2,d0
0001B668 43FB 00CC                  		lea	Obj3E_Var(pc,d0.w),a1
0001B66C 1159 0024                  		move.b	(a1)+,$24(a0)
0001B670 1159 0019                  		move.b	(a1)+,$19(a0)
0001B674 1159 0018                  		move.b	(a1)+,$18(a0)
0001B678 1159 001A                  		move.b	(a1)+,$1A(a0)
0001B67C 0C40 0008                  		cmpi.w	#8,d0		; is object type number	02?
0001B680 6600                       		bne.s	Obj3E_Not02	; if not, branch
0001B682 117C 0006 0020             		move.b	#6,$20(a0)
0001B688 117C 0008 0021             		move.b	#8,$21(a0)
0001B68E                            
0001B68E                            Obj3E_Not02:
0001B68E 4E75                       		rts	
0001B690                            ; ===========================================================================
0001B690                            
0001B690                            Obj3E_BodyMain:				; XREF: Obj3E_Index
0001B690 0C38 0002 F7A7             		cmpi.b	#2,($FFFFF7A7).w
0001B696 6700                       		beq.s	Obj3E_ChkOpened
0001B698 323C 002B                  		move.w	#$2B,d1
0001B69C 343C 0018                  		move.w	#$18,d2
0001B6A0 363C 0018                  		move.w	#$18,d3
0001B6A4 3828 0008                  		move.w	8(a0),d4
0001B6A8 4EF9 0001 03C8             		jmp	SolidObject
0001B6AE                            ; ===========================================================================
0001B6AE                            
0001B6AE                            Obj3E_ChkOpened:
0001B6AE 4A28 0025                  		tst.b	$25(a0)		; has the prison been opened?
0001B6B2 6700                       		beq.s	Obj3E_DoOpen	; if yes, branch
0001B6B4 4228 0025                  		clr.b	$25(a0)
0001B6B8 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001B6BE 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001B6C4                            
0001B6C4                            Obj3E_DoOpen:
0001B6C4 117C 0002 001A             		move.b	#2,$1A(a0)	; use frame number 2 (destroyed	prison)
0001B6CA 4E75                       		rts	
0001B6CC                            ; ===========================================================================
0001B6CC                            
0001B6CC                            Obj3E_Switched:				; XREF: Obj3E_Index
0001B6CC 323C 0017                  		move.w	#$17,d1
0001B6D0 343C 0008                  		move.w	#8,d2
0001B6D4 363C 0008                  		move.w	#8,d3
0001B6D8 3828 0008                  		move.w	8(a0),d4
0001B6DC 4EB9 0001 03C8             		jsr	SolidObject
0001B6E2 43F9 0000 0000             		lea	(Ani_obj3E).l,a1
0001B6E8 4EB9 0000 B056             		jsr	AnimateSprite
0001B6EE 3168 0030 000C             		move.w	$30(a0),$C(a0)
0001B6F4 4A28 0025                  		tst.b	$25(a0)
0001B6F8 6700                       		beq.s	locret_1AC60
0001B6FA 5068 000C                  		addq.w	#8,$C(a0)
0001B6FE 117C 000A 0024             		move.b	#$A,$24(a0)
0001B704 317C 003C 001E             		move.w	#$3C,$1E(a0)
0001B70A 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0001B70E 4238 F7AA                  		clr.b	($FFFFF7AA).w	; lock screen position
0001B712 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0001B718 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0001B71E 6700                       		beq.s	Obj3E_MoveLeft	; GMZ: If not, branch
0001B720 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; make Sonic run to	the right
0001B726 6000                       		bra.s	Obj3E_ContinueCode
0001B728                            
0001B728                            Obj3E_MoveLeft:
0001B728 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0001B72E                            
0001B72E                            Obj3E_ContinueCode:
0001B72E 4228 0025                  		clr.b	$25(a0)
0001B732 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001B738 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001B73E                            
0001B73E                            locret_1AC60:
0001B73E 4E75                       		rts	
0001B740                            ; ===========================================================================
0001B740                            
0001B740                            Obj3E_Explosion:			; XREF: Obj3E_Index
0001B740 7007                       		moveq	#7,d0
0001B742 C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001B746 6600                       		bne.s	loc_1ACA0
0001B748 4EB9 0000 E47E             		jsr	SingleObjLoad
0001B74E 6600                       		bne.s	loc_1ACA0
0001B750 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
0001B754 3368 0008 0008             		move.w	8(a0),8(a1)
0001B75A 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B760 4EB9 0000 2D46             		jsr	(RandomNumber).l
0001B766 7200                       		moveq	#0,d1
0001B768 1200                       		move.b	d0,d1
0001B76A E409                       		lsr.b	#2,d1
0001B76C 0441 0020                  		subi.w	#$20,d1
0001B770 D369 0008                  		add.w	d1,8(a1)
0001B774 E048                       		lsr.w	#8,d0
0001B776 E608                       		lsr.b	#3,d0
0001B778 D169 000C                  		add.w	d0,$C(a1)
0001B77C                            
0001B77C                            loc_1ACA0:
0001B77C 5368 001E                  		subq.w	#1,$1E(a0)
0001B780 6700                       		beq.s	Obj3E_MakeAnimal
0001B782 4E75                       		rts	
0001B784                            ; ===========================================================================
0001B784                            
0001B784                            Obj3E_MakeAnimal:
0001B784 11FC 0002 F7A7             		move.b	#2,($FFFFF7A7).w
0001B78A 117C 000C 0024             		move.b	#$C,$24(a0)	; replace explosions with animals
0001B790 117C 0006 001A             		move.b	#6,$1A(a0)
0001B796 317C 0096 001E             		move.w	#$96,$1E(a0)
0001B79C 0668 0020 000C             		addi.w	#$20,$C(a0)
0001B7A2 7C07                       		moveq	#7,d6
0001B7A4 3A3C 009A                  		move.w	#$9A,d5
0001B7A8 78E4                       		moveq	#-$1C,d4
0001B7AA                            
0001B7AA                            Obj3E_Loop:
0001B7AA 4EB9 0000 E47E             		jsr	SingleObjLoad
0001B7B0 6600                       		bne.s	locret_1ACF8
0001B7B2 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001B7B6 3368 0008 0008             		move.w	8(a0),8(a1)
0001B7BC 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B7C2 D969 0008                  		add.w	d4,8(a1)
0001B7C6 5E44                       		addq.w	#7,d4
0001B7C8 3345 0036                  		move.w	d5,$36(a1)
0001B7CC 5145                       		subq.w	#8,d5
0001B7CE 51CE FFDA                  		dbf	d6,Obj3E_Loop	; repeat 7 more	times
0001B7D2                            
0001B7D2                            locret_1ACF8:
0001B7D2 4E75                       		rts	
0001B7D4                            ; ===========================================================================
0001B7D4                            
0001B7D4                            Obj3E_Animals:				; XREF: Obj3E_Index
0001B7D4 7007                       		moveq	#7,d0
0001B7D6 C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001B7DA 6600                       		bne.s	loc_1AD38
0001B7DC 4EB9 0000 E47E             		jsr	SingleObjLoad
0001B7E2 6600                       		bne.s	loc_1AD38
0001B7E4 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001B7E8 3368 0008 0008             		move.w	8(a0),8(a1)
0001B7EE 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B7F4 4EB9 0000 2D46             		jsr	(RandomNumber).l
0001B7FA 0240 001F                  		andi.w	#$1F,d0
0001B7FE 5D40                       		subq.w	#6,d0
0001B800 4A41                       		tst.w	d1
0001B802 6A00                       		bpl.s	loc_1AD2E
0001B804 4440                       		neg.w	d0
0001B806                            
0001B806                            loc_1AD2E:
0001B806 D169 0008                  		add.w	d0,8(a1)
0001B80A 337C 000C 0036             		move.w	#$C,$36(a1)
0001B810                            
0001B810                            loc_1AD38:
0001B810 5368 001E                  		subq.w	#1,$1E(a0)
0001B814 6600                       		bne.s	locret_1AD48
0001B816 5428 0024                  		addq.b	#2,$24(a0)
0001B81A 317C 00B4 001E             		move.w	#180,$1E(a0)
0001B820                            
0001B820                            locret_1AD48:
0001B820 4E75                       		rts	
0001B822                            ; ===========================================================================
0001B822                            
0001B822                            Obj3E_EndAct:				; XREF: Obj3E_Index
0001B822 703E                       		moveq	#$3E,d0
0001B824 7228                       		moveq	#$28,d1
0001B826 7440                       		moveq	#$40,d2
0001B828 43F8 D040                  		lea	($FFFFD040).w,a1 ; load	object RAM
0001B82C                            
0001B82C                            Obj3E_FindObj28:
0001B82C B211                       		cmp.b	(a1),d1		; is object $28	(animal) loaded?
0001B82E 6700                       		beq.s	Obj3E_Obj28Found ; if yes, branch
0001B830 D2C2                       		adda.w	d2,a1		; next object RAM
0001B832 51C8 FFF8                  		dbf	d0,Obj3E_FindObj28 ; repeat $3E	times
0001B836                            
0001B836 4EB9 0000 F684             		jsr	GotThroughAct
0001B83C 4EF9 0000 E034             		jmp	DeleteObject
0001B842                            ; ===========================================================================
0001B842                            
0001B842                            Obj3E_Obj28Found:
0001B842 4E75                       		rts	
0001B844                            ; ===========================================================================
0001B844                            Ani_obj3E:
0001B844                            	include "_anim\obj3E.asm"
0001B844                            ; ---------------------------------------------------------------------------
0001B844                            ; Animation script - prison capsule
0001B844                            ; ---------------------------------------------------------------------------
0001B844 0000                       		dc.w byte_1AD70-Ani_obj3E
0001B846 0000                       		dc.w byte_1AD70-Ani_obj3E
0001B848 0201 03FF                  byte_1AD70:	dc.b 2,	1, 3, $FF
0001B84C                            		even
0001B84C                            		even
0001B84C                            
0001B84C                            ; ---------------------------------------------------------------------------
0001B84C                            ; Sprite mappings - prison capsule
0001B84C                            ; ---------------------------------------------------------------------------
0001B84C                            Map_obj3E:
0001B84C                            	include "_maps\obj3E.asm"
0001B84C                            ; ---------------------------------------------------------------------------
0001B84C                            ; Sprite mappings - prison capsule
0001B84C                            ; ---------------------------------------------------------------------------
0001B84C 0000 0000                  		dc.w byte_1AD82-Map_obj3E, byte_1ADA6-Map_obj3E
0001B850 0000 0000                  		dc.w byte_1ADAC-Map_obj3E, byte_1ADCB-Map_obj3E
0001B854 0000 0000                  		dc.w byte_1ADD1-Map_obj3E, byte_1ADDC-Map_obj3E
0001B858 0000                       		dc.w byte_1ADE2-Map_obj3E
0001B85A 07                         byte_1AD82:	dc.b 7
0001B85B E00C 2000 F0               		dc.b $E0, $C, $20, 0, $F0
0001B860 E80D 2004 E0               		dc.b $E8, $D, $20, 4, $E0
0001B865 E80D 200C 00               		dc.b $E8, $D, $20, $C, 0
0001B86A F80E 2014 E0               		dc.b $F8, $E, $20, $14,	$E0
0001B86F F80E 2020 00               		dc.b $F8, $E, $20, $20,	0
0001B874 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001B879 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001B87E 01                         byte_1ADA6:	dc.b 1
0001B87F F809 003C F4               		dc.b $F8, 9, 0,	$3C, $F4
0001B884 06                         byte_1ADAC:	dc.b 6
0001B885 0008 2042 E0               		dc.b 0,	8, $20,	$42, $E0
0001B88A 080C 2045 E0               		dc.b 8,	$C, $20, $45, $E0
0001B88F 0004 2049 10               		dc.b 0,	4, $20,	$49, $10
0001B894 080C 204B 00               		dc.b 8,	$C, $20, $4B, 0
0001B899 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001B89E 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001B8A3 01                         byte_1ADCB:	dc.b 1
0001B8A4 F809 004F F4               		dc.b $F8, 9, 0,	$4F, $F4
0001B8A9 02                         byte_1ADD1:	dc.b 2
0001B8AA E80E 2055 F0               		dc.b $E8, $E, $20, $55,	$F0
0001B8AF 000E 2061 F0               		dc.b 0,	$E, $20, $61, $F0
0001B8B4 01                         byte_1ADDC:	dc.b 1
0001B8B5 F007 206D F8               		dc.b $F0, 7, $20, $6D, $F8
0001B8BA 00                         byte_1ADE2:	dc.b 0
0001B8BC 00                         		even
0001B8BC 00                         		even
0001B8BC                            
0001B8BC                            ; ---------------------------------------------------------------------------
0001B8BC                            ; Object touch response	subroutine - $20(a0) in	the object RAM
0001B8BC                            ; ---------------------------------------------------------------------------
0001B8BC                            
0001B8BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B8BC                            
0001B8BC                            
0001B8BC                            TouchResponse:				; XREF: Obj01
0001B8BC 4E71                       		nop	
0001B8BE 3428 0008                  		move.w	8(a0),d2	; load Sonic's x-axis value
0001B8C2 3628 000C                  		move.w	$C(a0),d3	; load Sonic's y-axis value
0001B8C6 5142                       		subq.w	#8,d2
0001B8C8 7A00                       		moveq	#0,d5
0001B8CA 1A28 0016                  		move.b	$16(a0),d5	; load Sonic's height
0001B8CE 5705                       		subq.b	#3,d5
0001B8D0 9645                       		sub.w	d5,d3
0001B8D2 0C28 0039 001A             		cmpi.b	#$39,$1A(a0)	; is Sonic ducking?
0001B8D8 6600                       		bne.s	Touch_NoDuck	; if not, branch
0001B8DA 0643 000C                  		addi.w	#$C,d3
0001B8DE 7A0A                       		moveq	#$A,d5
0001B8E0                            
0001B8E0                            Touch_NoDuck:
0001B8E0 383C 0010                  		move.w	#$10,d4
0001B8E4 DA45                       		add.w	d5,d5
0001B8E6 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking the object RAM
0001B8EA 3C3C 005F                  		move.w	#$5F,d6
0001B8EE                            
0001B8EE                            Touch_Loop:
0001B8EE 4A29 0001                  		tst.b	1(a1)
0001B8F2 6A00                       		bpl.s	Touch_NextObj
0001B8F4 1029 0020                  		move.b	$20(a1),d0	; load touch response number
0001B8F8 6600                       		bne.s	Touch_Height	; if touch response is not 0, branch
0001B8FA                            
0001B8FA                            Touch_NextObj:
0001B8FA 43E9 0040                  		lea	$40(a1),a1	; next object RAM
0001B8FE 51CE FFEE                  		dbf	d6,Touch_Loop	; repeat $5F more times
0001B902                            
0001B902 7000                       		moveq	#0,d0
0001B904 4E75                       		rts	
0001B906                            ; ===========================================================================
0001B906 1414                       Touch_Sizes:	dc.b  $14, $14		; width, height
0001B908 0C14                       		dc.b   $C, $14
0001B90A 140C                       		dc.b  $14,  $C
0001B90C 0410                       		dc.b	4, $10
0001B90E 0C12                       		dc.b   $C, $12
0001B910 1010                       		dc.b  $10, $10
0001B912 0606                       		dc.b	6,   6
0001B914 180C                       		dc.b  $18,  $C
0001B916 0C10                       		dc.b   $C, $10
0001B918 100C                       		dc.b  $10,  $C
0001B91A 0808                       		dc.b	8,   8
0001B91C 1410                       		dc.b  $14, $10
0001B91E 1408                       		dc.b  $14,   8
0001B920 0E0E                       		dc.b   $E,  $E
0001B922 1818                       		dc.b  $18, $18
0001B924 2810                       		dc.b  $28, $10
0001B926 1018                       		dc.b  $10, $18
0001B928 0810                       		dc.b	8, $10
0001B92A 2070                       		dc.b  $20, $70
0001B92C 4020                       		dc.b  $40, $20
0001B92E 8020                       		dc.b  $80, $20
0001B930 2020                       		dc.b  $20, $20
0001B932 0808                       		dc.b	8,   8
0001B934 0404                       		dc.b	4,   4
0001B936 2008                       		dc.b  $20,   8
0001B938 0C0C                       		dc.b   $C,  $C
0001B93A 0804                       		dc.b	8,   4
0001B93C 1804                       		dc.b  $18,   4
0001B93E 2804                       		dc.b  $28,   4
0001B940 0408                       		dc.b	4,   8
0001B942 0418                       		dc.b	4, $18
0001B944 0428                       		dc.b	4, $28
0001B946 0420                       		dc.b	4, $20
0001B948 1818                       		dc.b  $18, $18
0001B94A 0C18                       		dc.b   $C, $18
0001B94C 4808                       		dc.b  $48,   8
0001B94E                            ; ===========================================================================
0001B94E                            
0001B94E                            Touch_Height:				; XREF: TouchResponse
0001B94E 0240 003F                  		andi.w	#$3F,d0
0001B952 D040                       		add.w	d0,d0
0001B954 45FB 00AE                  		lea	Touch_Sizes-2(pc,d0.w),a2
0001B958 7200                       		moveq	#0,d1
0001B95A 121A                       		move.b	(a2)+,d1
0001B95C 3029 0008                  		move.w	8(a1),d0
0001B960 9041                       		sub.w	d1,d0
0001B962 9042                       		sub.w	d2,d0
0001B964 6400                       		bcc.s	loc_1AE98
0001B966 D241                       		add.w	d1,d1
0001B968 D041                       		add.w	d1,d0
0001B96A 6500                       		bcs.s	Touch_Width
0001B96C 6000 FF8C                  		bra.w	Touch_NextObj
0001B970                            ; ===========================================================================
0001B970                            
0001B970                            loc_1AE98:
0001B970 B044                       		cmp.w	d4,d0
0001B972 6200 FF86                  		bhi.w	Touch_NextObj
0001B976                            
0001B976                            Touch_Width:
0001B976 7200                       		moveq	#0,d1
0001B978 121A                       		move.b	(a2)+,d1
0001B97A 3029 000C                  		move.w	$C(a1),d0
0001B97E 9041                       		sub.w	d1,d0
0001B980 9043                       		sub.w	d3,d0
0001B982 6400                       		bcc.s	loc_1AEB6
0001B984 D241                       		add.w	d1,d1
0001B986 D240                       		add.w	d0,d1
0001B988 6500                       		bcs.s	Touch_ChkValue
0001B98A 6000 FF6E                  		bra.w	Touch_NextObj
0001B98E                            ; ===========================================================================
0001B98E                            
0001B98E                            loc_1AEB6:
0001B98E B045                       		cmp.w	d5,d0
0001B990 6200 FF68                  		bhi.w	Touch_NextObj
0001B994                            
0001B994                            Touch_ChkValue:
0001B994 1229 0020                  		move.b	$20(a1),d1	; load touch response number
0001B998 0201 00C0                  		andi.b	#$C0,d1		; is touch response $40	or higher?
0001B99C 6700 0000                  		beq.w	Touch_Enemy	; if not, branch
0001B9A0 0C01 00C0                  		cmpi.b	#$C0,d1		; is touch response $C0	or higher?
0001B9A4 6700 0000                  		beq.w	Touch_Special	; if yes, branch
0001B9A8 4A01                       		tst.b	d1		; is touch response $80-$BF ?
0001B9AA 6B00 0000                  		bmi.w	Touch_ChkHurt	; if yes, branch
0001B9AE                            
0001B9AE                            ; touch	response is $40-$7F
0001B9AE                            
0001B9AE 1029 0020                  		move.b	$20(a1),d0
0001B9B2 0200 003F                  		andi.b	#$3F,d0
0001B9B6 0C00 0006                  		cmpi.b	#6,d0		; is touch response $46	?
0001B9BA 6700                       		beq.s	Touch_Monitor	; if yes, branch
0001B9BC 0C68 005A 0030             		cmpi.w	#$5A,$30(a0)
0001B9C2 6400 0000                  		bcc.w	locret_1AEF2
0001B9C6 5429 0024                  		addq.b	#2,$24(a1)	; advance the object's routine counter
0001B9CA                            
0001B9CA                            locret_1AEF2:
0001B9CA 4E75                       		rts	
0001B9CC                            ; ===========================================================================
0001B9CC                            
0001B9CC                            Touch_Monitor:
0001B9CC 4A68 0012                  		tst.w	$12(a0)		; is Sonic moving upwards?
0001B9D0 6A00                       		bpl.s	loc_1AF1E	; if not, branch
0001B9D2 3028 000C                  		move.w	$C(a0),d0
0001B9D6 0440 0010                  		subi.w	#$10,d0
0001B9DA B069 000C                  		cmp.w	$C(a1),d0
0001B9DE 6500                       		bcs.s	locret_1AF2E
0001B9E0 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001B9E4 337C FE80 0012             		move.w	#-$180,$12(a1)
0001B9EA 4A29 0025                  		tst.b	$25(a1)
0001B9EE 6600                       		bne.s	locret_1AF2E
0001B9F0 5829 0025                  		addq.b	#4,$25(a1)	; advance the monitor's routine counter
0001B9F4 4E75                       		rts	
0001B9F6                            ; ===========================================================================
0001B9F6                            
0001B9F6                            loc_1AF1E:
0001B9F6 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling/jumping?
0001B9FC 6600                       		bne.s	locret_1AF2E
0001B9FE 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001BA02 5429 0024                  		addq.b	#2,$24(a1)	; advance the monitor's routine counter
0001BA06                            
0001BA06                            locret_1AF2E:
0001BA06 4E75                       		rts	
0001BA08                            ; ===========================================================================
0001BA08                            
0001BA08                            Touch_Enemy:				; XREF: Touch_ChkValue
0001BA08 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001BA0C 6600                       		bne.s	loc_1AF40	; if yes, branch
0001BA0E 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling?
0001BA14 6600 0000                  		bne.w	Touch_ChkHurt	; if not, branch
0001BA18                            
0001BA18                            loc_1AF40:
0001BA18 4A29 0021                  		tst.b	$21(a1)
0001BA1C 6700                       		beq.s	Touch_KillEnemy
0001BA1E 4468 0010                  		neg.w	$10(a0)
0001BA22 4468 0012                  		neg.w	$12(a0)
0001BA26 E0E8 0010                  		asr	$10(a0)
0001BA2A E0E8 0012                  		asr	$12(a0)
0001BA2E 137C 0000 0020             		move.b	#0,$20(a1)
0001BA34 5329 0021                  		subq.b	#1,$21(a1)
0001BA38 6600                       		bne.s	locret_1AF68
0001BA3A 08E9 0007 0022             		bset	#7,$22(a1)
0001BA40                            
0001BA40                            locret_1AF68:
0001BA40 4E75                       		rts	
0001BA42                            ; ===========================================================================
0001BA42                            
0001BA42                            Touch_KillEnemy:
0001BA42 08E9 0007 0022             		bset	#7,$22(a1)
0001BA48 7000                       		moveq	#0,d0
0001BA4A 3038 F7D0                  		move.w	($FFFFF7D0).w,d0
0001BA4E 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w ; add 2 to item bonus counter
0001BA52 0C40 0006                  		cmpi.w	#6,d0
0001BA56 6500                       		bcs.s	loc_1AF82
0001BA58 7006                       		moveq	#6,d0
0001BA5A                            
0001BA5A                            loc_1AF82:
0001BA5A 3340 003E                  		move.w	d0,$3E(a1)
0001BA5E 303B 0000                  		move.w	Enemy_Points(pc,d0.w),d0
0001BA62 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 enemies been destroyed?
0001BA68 6500                       		bcs.s	loc_1AF9C	; if not, branch
0001BA6A 303C 03E8                  		move.w	#1000,d0	; fix bonus to 10000
0001BA6E 337C 000A 003E             		move.w	#$A,$3E(a1)
0001BA74                            
0001BA74                            loc_1AF9C:
0001BA74 6100 0000                  		bsr.w	AddPoints
0001BA78 7400                       		moveq	#0,d2	; GMZ
0001BA7A 7205                       		moveq	#5,d1	; GMZ: Amount of explosion objects
0001BA7C 2449                       		move.l	a1,a2	; GMZ: Save a1 address on a2
0001BA7E                            
0001BA7E                            TouchKE_Explode:
0001BA7E 12BC 0027                  		move.b	#$27,0(a1)	; change object	to points
0001BA82 137C 0000 0024             		move.b	#0,$24(a1)
0001BA88 1342 0028                  		move.b	d2,$28(a1)	; GMZ: Set subtype
0001BA8C                            
0001BA8C                            TouchKE_NextExplosion:
0001BA8C 5802                       		addq.b	#4,d2
0001BA8E 4EB9 0000 E47E             		jsr	SingleObjLoad
0001BA94 6600                       		bne.s	TouchKE_NoExplosion
0001BA96 336A 0008 0008             		move.w	8(a2),8(a1)
0001BA9C 336A 000C 000C             		move.w	$C(a2),$C(a1)
0001BAA2 51C9 FFDA                  		dbf	d1,TouchKE_Explode
0001BAA6                            
0001BAA6                            TouchKE_NoExplosion:
0001BAA6 224A                       		move.l	a2,a1	; GMZ: Restore original a1 address
0001BAA8 4A68 0012                  		tst.w	$12(a0)
0001BAAC 6B00                       		bmi.s	loc_1AFC2
0001BAAE 3028 000C                  		move.w	$C(a0),d0
0001BAB2 B069 000C                  		cmp.w	$C(a1),d0
0001BAB6 6400                       		bcc.s	loc_1AFCA
0001BAB8 4468 0012                  		neg.w	$12(a0)
0001BABC 4E75                       		rts	
0001BABE                            ; ===========================================================================
0001BABE                            
0001BABE                            loc_1AFC2:
0001BABE 0668 0100 0012             		addi.w	#$100,$12(a0)
0001BAC4 4E75                       		rts	
0001BAC6                            ; ===========================================================================
0001BAC6                            
0001BAC6                            loc_1AFCA:
0001BAC6 0468 0100 0012             		subi.w	#$100,$12(a0)
0001BACC 4E75                       		rts	
0001BACE                            ; ===========================================================================
0001BACE 000A 0014 0032 0064        Enemy_Points:	dc.w 10, 20, 50, 100
0001BAD6                            ; ===========================================================================
0001BAD6                            
0001BAD6                            loc_1AFDA:				; XREF: Touch_CatKiller
0001BAD6 08E9 0007 0022             		bset	#7,$22(a1)
0001BADC                            
0001BADC                            Touch_ChkHurt:				; XREF: Touch_ChkValue
0001BADC 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001BAE0 6700                       		beq.s	Touch_Hurt	; if not, branch
0001BAE2                            
0001BAE2                            loc_1AFE6:				; XREF: Touch_Hurt
0001BAE2 70FF                       		moveq	#-1,d0
0001BAE4 4E75                       		rts	
0001BAE6                            ; ===========================================================================
0001BAE6                            
0001BAE6                            Touch_Hurt:				; XREF: Touch_ChkHurt
0001BAE6 4E71                       		nop	
0001BAE8 4A68 0030                  		tst.w	$30(a0)
0001BAEC 66F4                       		bne.s	loc_1AFE6
0001BAEE 2449                       		movea.l	a1,a2
0001BAF0                            
0001BAF0                            ; End of function TouchResponse
0001BAF0                            ; continue straight to HurtSonic
0001BAF0                            
0001BAF0                            ; ---------------------------------------------------------------------------
0001BAF0                            ; Hurting Sonic	subroutine
0001BAF0                            ; ---------------------------------------------------------------------------
0001BAF0                            
0001BAF0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BAF0                            
0001BAF0                            
0001BAF0                            HurtSonic:
0001BAF0 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have a shield?
0001BAF4 6600                       		bne.s	Hurt_Shield	; if yes, branch
0001BAF6 4A78 FE20                  		tst.w	($FFFFFE20).w	; does Sonic have any rings?
0001BAFA 6700 0000                  		beq.w	Hurt_NoRings	; if not, branch
0001BAFE 4EB9 0000 E47E             		jsr	SingleObjLoad
0001BB04 6600                       		bne.s	Hurt_Shield
0001BB06 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	multi rings object
0001BB0A 3368 0008 0008             		move.w	8(a0),8(a1)
0001BB10 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001BB16                            
0001BB16                            Hurt_Shield:
0001BB16 11FC 0000 FE2C             		move.b	#0,($FFFFFE2C).w ; remove shield
0001BB1C 117C 0004 0024             		move.b	#4,$24(a0)
0001BB22 6100 871A                  		bsr.w	Sonic_ResetOnFloor
0001BB26 08E8 0001 0022             		bset	#1,$22(a0)
0001BB2C 317C FC00 0012             		move.w	#-$400,$12(a0)	; make Sonic bounce away from the object
0001BB32 317C FE00 0010             		move.w	#-$200,$10(a0)
0001BB38 0828 0006 0022             		btst	#6,$22(a0)
0001BB3E 6700                       		beq.s	Hurt_Reverse
0001BB40 317C FE00 0012             		move.w	#-$200,$12(a0)
0001BB46 317C FF00 0010             		move.w	#-$100,$10(a0)
0001BB4C                            
0001BB4C                            Hurt_Reverse:
0001BB4C 3028 0008                  		move.w	8(a0),d0
0001BB50 B06A 0008                  		cmp.w	8(a2),d0
0001BB54 6500                       		bcs.s	Hurt_ChkSpikes	; if Sonic is left of the object, branch
0001BB56 4468 0010                  		neg.w	$10(a0)		; if Sonic is right of the object, reverse
0001BB5A                            
0001BB5A                            Hurt_ChkSpikes:
0001BB5A 317C 0000 0014             		move.w	#0,$14(a0)
0001BB60 117C 001A 001C             		move.b	#$1A,$1C(a0)
0001BB66 317C 0078 0030             		move.w	#$78,$30(a0)
0001BB6C 303C 00A3                  		move.w	#$A3,d0		; load normal damage sound
0001BB70 0C12 0036                  		cmpi.b	#$36,(a2)	; was damage caused by spikes?
0001BB74 6600                       		bne.s	Hurt_Sound	; if not, branch
0001BB76 0C12 0016                  		cmpi.b	#$16,(a2)	; was damage caused by LZ harpoon?
0001BB7A 6600                       		bne.s	Hurt_Sound	; if not, branch
0001BB7C 303C 00A6                  		move.w	#$A6,d0		; load spikes damage sound
0001BB80                            
0001BB80                            Hurt_Sound:
0001BB80 4EB9 0000 15D2             		jsr	(PlaySound_Special).l
0001BB86 70FF                       		moveq	#-1,d0
0001BB88 4E75                       		rts	
0001BB8A                            ; ===========================================================================
0001BB8A                            
0001BB8A                            Hurt_NoRings:
0001BB8A 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	cheat on?
0001BB8E 6600 FF86                  		bne.w	Hurt_Shield	; if yes, branch
0001BB92                            ; End of function HurtSonic
0001BB92                            
0001BB92                            ; ---------------------------------------------------------------------------
0001BB92                            ; Subroutine to	kill Sonic
0001BB92                            ; ---------------------------------------------------------------------------
0001BB92                            
0001BB92                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BB92                            
0001BB92                            
0001BB92                            KillSonic:
0001BB92 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	active?
0001BB96 6600                       		bne.s	Kill_NoDeath	; if yes, branch
0001BB98 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; remove invincibility
0001BB9E 117C 0006 0024             		move.b	#6,$24(a0)
0001BBA4 6100 8698                  		bsr.w	Sonic_ResetOnFloor
0001BBA8 08E8 0001 0022             		bset	#1,$22(a0)
0001BBAE 317C F900 0012             		move.w	#-$700,$12(a0)
0001BBB4 317C 0000 0010             		move.w	#0,$10(a0)
0001BBBA 317C 0000 0014             		move.w	#0,$14(a0)
0001BBC0 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001BBC6 117C 0018 001C             		move.b	#$18,$1C(a0)
0001BBCC 08E8 0007 0002             		bset	#7,2(a0)
0001BBD2 303C 00A3                  		move.w	#$A3,d0		; play normal death sound
0001BBD6 0C12 0036                  		cmpi.b	#$36,(a2)	; check	if you were killed by spikes
0001BBDA 6600                       		bne.s	Kill_Sound
0001BBDC 303C 00A6                  		move.w	#$A6,d0		; play spikes death sound
0001BBE0                            
0001BBE0                            Kill_Sound:
0001BBE0 4EB9 0000 15D2             		jsr	(PlaySound_Special).l
0001BBE6                            
0001BBE6                            Kill_NoDeath:
0001BBE6 70FF                       		moveq	#-1,d0
0001BBE8 4E75                       		rts	
0001BBEA                            ; End of function KillSonic
0001BBEA                            
0001BBEA                            
0001BBEA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BBEA                            
0001BBEA                            
0001BBEA                            Touch_Special:				; XREF: Touch_ChkValue
0001BBEA 1229 0020                  		move.b	$20(a1),d1
0001BBEE 0201 003F                  		andi.b	#$3F,d1
0001BBF2 0C01 000B                  		cmpi.b	#$B,d1		; is touch response $CB	?
0001BBF6 6700                       		beq.s	Touch_CatKiller	; if yes, branch
0001BBF8 0C01 000C                  		cmpi.b	#$C,d1		; is touch response $CC	?
0001BBFC 6700                       		beq.s	Touch_Yadrin	; if yes, branch
0001BBFE 0C01 0017                  		cmpi.b	#$17,d1		; is touch response $D7	?
0001BC02 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001BC04 0C01 0021                  		cmpi.b	#$21,d1		; is touch response $E1	?
0001BC08 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001BC0A 4E75                       		rts	
0001BC0C                            ; ===========================================================================
0001BC0C                            
0001BC0C                            Touch_CatKiller:			; XREF: Touch_Special
0001BC0C 6000 FEC8                  		bra.w	loc_1AFDA
0001BC10                            ; ===========================================================================
0001BC10                            
0001BC10                            Touch_Yadrin:				; XREF: Touch_Special
0001BC10 9A40                       		sub.w	d0,d5
0001BC12 0C45 0008                  		cmpi.w	#8,d5
0001BC16 6400                       		bcc.s	loc_1B144
0001BC18 3029 0008                  		move.w	8(a1),d0
0001BC1C 5940                       		subq.w	#4,d0
0001BC1E 0829 0000 0022             		btst	#0,$22(a1)
0001BC24 6700                       		beq.s	loc_1B130
0001BC26 0440 0010                  		subi.w	#$10,d0
0001BC2A                            
0001BC2A                            loc_1B130:
0001BC2A 9042                       		sub.w	d2,d0
0001BC2C 6400                       		bcc.s	loc_1B13C
0001BC2E 0640 0018                  		addi.w	#$18,d0
0001BC32 6500                       		bcs.s	loc_1B140
0001BC34 6000                       		bra.s	loc_1B144
0001BC36                            ; ===========================================================================
0001BC36                            
0001BC36                            loc_1B13C:
0001BC36 B044                       		cmp.w	d4,d0
0001BC38 6200                       		bhi.s	loc_1B144
0001BC3A                            
0001BC3A                            loc_1B140:
0001BC3A 6000 FEA0                  		bra.w	Touch_ChkHurt
0001BC3E                            ; ===========================================================================
0001BC3E                            
0001BC3E                            loc_1B144:
0001BC3E 6000 FDC8                  		bra.w	Touch_Enemy
0001BC42                            ; ===========================================================================
0001BC42                            
0001BC42                            Touch_D7orE1:				; XREF: Touch_Special
0001BC42 5229 0021                  		addq.b	#1,$21(a1)
0001BC46 4E75                       		rts	
0001BC48                            ; End of function Touch_Special
0001BC48                            
0001BC48                            ; ---------------------------------------------------------------------------
0001BC48                            ; Subroutine to	show the special stage layout
0001BC48                            ; ---------------------------------------------------------------------------
0001BC48                            
0001BC48                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BC48                            
0001BC48                            
0001BC48                            SS_ShowLayout:				; XREF: SpecialStage
0001BC48 6100 0000                  		bsr.w	SS_AniWallsRings
0001BC4C 6100 0000                  		bsr.w	SS_AniItems
0001BC50 3F05                       		move.w	d5,-(sp)
0001BC52 43F8 8000                  		lea	($FFFF8000).w,a1
0001BC56 1038 F780                  		move.b	($FFFFF780).w,d0
0001BC5A 0200 00FC                  		andi.b	#$FC,d0
0001BC5E 4EB9 0000 2D6C             		jsr	(CalcSine).l
0001BC64 3800                       		move.w	d0,d4
0001BC66 3A01                       		move.w	d1,d5
0001BC68 C9FC 0018                  		muls.w	#$18,d4
0001BC6C CBFC 0018                  		muls.w	#$18,d5
0001BC70 7400                       		moveq	#0,d2
0001BC72 3438 F700                  		move.w	($FFFFF700).w,d2
0001BC76 84FC 0018                  		divu.w	#$18,d2
0001BC7A 4842                       		swap	d2
0001BC7C 4442                       		neg.w	d2
0001BC7E 0642 FF4C                  		addi.w	#-$B4,d2
0001BC82 7600                       		moveq	#0,d3
0001BC84 3638 F704                  		move.w	($FFFFF704).w,d3
0001BC88 86FC 0018                  		divu.w	#$18,d3
0001BC8C 4843                       		swap	d3
0001BC8E 4443                       		neg.w	d3
0001BC90 0643 FF4C                  		addi.w	#-$B4,d3
0001BC94 3E3C 000F                  		move.w	#$F,d7
0001BC98                            
0001BC98                            loc_1B19E:
0001BC98 48A7 E000                  		movem.w	d0-d2,-(sp)
0001BC9C 48A7 C000                  		movem.w	d0-d1,-(sp)
0001BCA0 4440                       		neg.w	d0
0001BCA2 C3C2                       		muls.w	d2,d1
0001BCA4 C1C3                       		muls.w	d3,d0
0001BCA6 2C00                       		move.l	d0,d6
0001BCA8 DC81                       		add.l	d1,d6
0001BCAA 4C9F 0003                  		movem.w	(sp)+,d0-d1
0001BCAE C1C2                       		muls.w	d2,d0
0001BCB0 C3C3                       		muls.w	d3,d1
0001BCB2 D280                       		add.l	d0,d1
0001BCB4 2406                       		move.l	d6,d2
0001BCB6 3C3C 000F                  		move.w	#$F,d6
0001BCBA                            
0001BCBA                            loc_1B1C0:
0001BCBA 2002                       		move.l	d2,d0
0001BCBC E080                       		asr.l	#8,d0
0001BCBE 32C0                       		move.w	d0,(a1)+
0001BCC0 2001                       		move.l	d1,d0
0001BCC2 E080                       		asr.l	#8,d0
0001BCC4 32C0                       		move.w	d0,(a1)+
0001BCC6 D485                       		add.l	d5,d2
0001BCC8 D284                       		add.l	d4,d1
0001BCCA 51CE FFEE                  		dbf	d6,loc_1B1C0
0001BCCE                            
0001BCCE 4C9F 0007                  		movem.w	(sp)+,d0-d2
0001BCD2 0643 0018                  		addi.w	#$18,d3
0001BCD6 51CF FFC0                  		dbf	d7,loc_1B19E
0001BCDA                            
0001BCDA 3A1F                       		move.w	(sp)+,d5
0001BCDC 41F9 00FF 0000             		lea	($FF0000).l,a0
0001BCE2 7000                       		moveq	#0,d0
0001BCE4 3038 F704                  		move.w	($FFFFF704).w,d0
0001BCE8 80FC 0018                  		divu.w	#$18,d0
0001BCEC C0FC 0080                  		mulu.w	#$80,d0
0001BCF0 D1C0                       		adda.l	d0,a0
0001BCF2 7000                       		moveq	#0,d0
0001BCF4 3038 F700                  		move.w	($FFFFF700).w,d0
0001BCF8 80FC 0018                  		divu.w	#$18,d0
0001BCFC D0C0                       		adda.w	d0,a0
0001BCFE 49F8 8000                  		lea	($FFFF8000).w,a4
0001BD02 3E3C 000F                  		move.w	#$F,d7
0001BD06                            
0001BD06                            loc_1B20C:
0001BD06 3C3C 000F                  		move.w	#$F,d6
0001BD0A                            
0001BD0A                            loc_1B210:
0001BD0A 7000                       		moveq	#0,d0
0001BD0C 1018                       		move.b	(a0)+,d0
0001BD0E 6700                       		beq.s	loc_1B268
0001BD10 0C00 004E                  		cmpi.b	#$4E,d0
0001BD14 6200                       		bhi.s	loc_1B268
0001BD16 3614                       		move.w	(a4),d3
0001BD18 0643 0120                  		addi.w	#$120,d3
0001BD1C 0C43 0070                  		cmpi.w	#$70,d3
0001BD20 6500                       		bcs.s	loc_1B268
0001BD22 0C43 01D0                  		cmpi.w	#$1D0,d3
0001BD26 6400                       		bcc.s	loc_1B268
0001BD28 342C 0002                  		move.w	2(a4),d2
0001BD2C 0642 00F0                  		addi.w	#$F0,d2
0001BD30 0C42 0070                  		cmpi.w	#$70,d2
0001BD34 6500                       		bcs.s	loc_1B268
0001BD36 0C42 0170                  		cmpi.w	#$170,d2
0001BD3A 6400                       		bcc.s	loc_1B268
0001BD3C 4BF9 00FF 4000             		lea	($FF4000).l,a5
0001BD42 E748                       		lsl.w	#3,d0
0001BD44 4BF5 0000                  		lea	(a5,d0.w),a5
0001BD48 225D                       		movea.l	(a5)+,a1
0001BD4A 321D                       		move.w	(a5)+,d1
0001BD4C D241                       		add.w	d1,d1
0001BD4E D2F1 1000                  		adda.w	(a1,d1.w),a1
0001BD52 365D                       		movea.w	(a5)+,a3
0001BD54 7200                       		moveq	#0,d1
0001BD56 1219                       		move.b	(a1)+,d1
0001BD58 5301                       		subq.b	#1,d1
0001BD5A 6B00                       		bmi.s	loc_1B268
0001BD5C 4EB9 0000 E156             		jsr	sub_D762
0001BD62                            
0001BD62                            loc_1B268:
0001BD62 584C                       		addq.w	#4,a4
0001BD64 51CE FFA4                  		dbf	d6,loc_1B210
0001BD68                            
0001BD68 41E8 0070                  		lea	$70(a0),a0
0001BD6C 51CF FF98                  		dbf	d7,loc_1B20C
0001BD70                            
0001BD70 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0001BD74 0C05 0050                  		cmpi.b	#$50,d5
0001BD78 6700                       		beq.s	loc_1B288
0001BD7A 24BC 0000 0000             		move.l	#0,(a2)
0001BD80 4E75                       		rts	
0001BD82                            ; ===========================================================================
0001BD82                            
0001BD82                            loc_1B288:
0001BD82 157C 0000 FFFB             		move.b	#0,-5(a2)
0001BD88 4E75                       		rts	
0001BD8A                            ; End of function SS_ShowLayout
0001BD8A                            
0001BD8A                            ; ---------------------------------------------------------------------------
0001BD8A                            ; Subroutine to	animate	walls and rings	in the special stage
0001BD8A                            ; ---------------------------------------------------------------------------
0001BD8A                            
0001BD8A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BD8A                            
0001BD8A                            
0001BD8A                            SS_AniWallsRings:			; XREF: SS_ShowLayout
0001BD8A 43F9 00FF 400C             		lea	($FF400C).l,a1
0001BD90 7000                       		moveq	#0,d0
0001BD92 1038 F780                  		move.b	($FFFFF780).w,d0
0001BD96 E408                       		lsr.b	#2,d0
0001BD98 0240 000F                  		andi.w	#$F,d0
0001BD9C 7223                       		moveq	#$23,d1
0001BD9E                            
0001BD9E                            loc_1B2A4:
0001BD9E 3280                       		move.w	d0,(a1)
0001BDA0 5049                       		addq.w	#8,a1
0001BDA2 51C9 FFFA                  		dbf	d1,loc_1B2A4
0001BDA6                            
0001BDA6 43F9 00FF 4005             		lea	($FF4005).l,a1
0001BDAC 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
0001BDB0 6A00                       		bpl.s	loc_1B2C8
0001BDB2 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
0001BDB8 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
0001BDBC 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
0001BDC2                            
0001BDC2                            loc_1B2C8:
0001BDC2 1378 FEC3 01D0             		move.b	($FFFFFEC3).w,$1D0(a1)
0001BDC8 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
0001BDCC 6A00                       		bpl.s	loc_1B2E4
0001BDCE 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
0001BDD4 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
0001BDD8 0238 0001 FEC5             		andi.b	#1,($FFFFFEC5).w
0001BDDE                            
0001BDDE                            loc_1B2E4:
0001BDDE 1038 FEC5                  		move.b	($FFFFFEC5).w,d0
0001BDE2 1340 0138                  		move.b	d0,$138(a1)
0001BDE6 1340 0160                  		move.b	d0,$160(a1)
0001BDEA 1340 0148                  		move.b	d0,$148(a1)
0001BDEE 1340 0150                  		move.b	d0,$150(a1)
0001BDF2 1340 01D8                  		move.b	d0,$1D8(a1)
0001BDF6 1340 01E0                  		move.b	d0,$1E0(a1)
0001BDFA 1340 01E8                  		move.b	d0,$1E8(a1)
0001BDFE 1340 01F0                  		move.b	d0,$1F0(a1)
0001BE02 1340 01F8                  		move.b	d0,$1F8(a1)
0001BE06 1340 0200                  		move.b	d0,$200(a1)
0001BE0A 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
0001BE0E 6A00                       		bpl.s	loc_1B326
0001BE10 11FC 0004 FEC6             		move.b	#4,($FFFFFEC6).w
0001BE16 5238 FEC7                  		addq.b	#1,($FFFFFEC7).w
0001BE1A 0238 0003 FEC7             		andi.b	#3,($FFFFFEC7).w
0001BE20                            
0001BE20                            loc_1B326:
0001BE20 1038 FEC7                  		move.b	($FFFFFEC7).w,d0
0001BE24 1340 0168                  		move.b	d0,$168(a1)
0001BE28 1340 0170                  		move.b	d0,$170(a1)
0001BE2C 1340 0178                  		move.b	d0,$178(a1)
0001BE30 1340 0180                  		move.b	d0,$180(a1)
0001BE34 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
0001BE38 6A00                       		bpl.s	loc_1B350
0001BE3A 11FC 0007 FEC0             		move.b	#7,($FFFFFEC0).w
0001BE40 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
0001BE44 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
0001BE4A                            
0001BE4A                            loc_1B350:
0001BE4A 43F9 00FF 4016             		lea	($FF4016).l,a1
0001BE50 41F9 0000 0000             		lea	(SS_WaRiVramSet).l,a0
0001BE56 7000                       		moveq	#0,d0
0001BE58 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
0001BE5C D040                       		add.w	d0,d0
0001BE5E 41F0 0000                  		lea	(a0,d0.w),a0
0001BE62 3290                       		move.w	(a0),(a1)
0001BE64 3368 0002 0008             		move.w	2(a0),8(a1)
0001BE6A 3368 0004 0010             		move.w	4(a0),$10(a1)
0001BE70 3368 0006 0018             		move.w	6(a0),$18(a1)
0001BE76 3368 0008 0020             		move.w	8(a0),$20(a1)
0001BE7C 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001BE82 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001BE88 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001BE8E D0FC 0020                  		adda.w	#$20,a0
0001BE92 D2FC 0048                  		adda.w	#$48,a1
0001BE96 3290                       		move.w	(a0),(a1)
0001BE98 3368 0002 0008             		move.w	2(a0),8(a1)
0001BE9E 3368 0004 0010             		move.w	4(a0),$10(a1)
0001BEA4 3368 0006 0018             		move.w	6(a0),$18(a1)
0001BEAA 3368 0008 0020             		move.w	8(a0),$20(a1)
0001BEB0 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001BEB6 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001BEBC 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001BEC2 D0FC 0020                  		adda.w	#$20,a0
0001BEC6 D2FC 0048                  		adda.w	#$48,a1
0001BECA 3290                       		move.w	(a0),(a1)
0001BECC 3368 0002 0008             		move.w	2(a0),8(a1)
0001BED2 3368 0004 0010             		move.w	4(a0),$10(a1)
0001BED8 3368 0006 0018             		move.w	6(a0),$18(a1)
0001BEDE 3368 0008 0020             		move.w	8(a0),$20(a1)
0001BEE4 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001BEEA 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001BEF0 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001BEF6 D0FC 0020                  		adda.w	#$20,a0
0001BEFA D2FC 0048                  		adda.w	#$48,a1
0001BEFE 3290                       		move.w	(a0),(a1)
0001BF00 3368 0002 0008             		move.w	2(a0),8(a1)
0001BF06 3368 0004 0010             		move.w	4(a0),$10(a1)
0001BF0C 3368 0006 0018             		move.w	6(a0),$18(a1)
0001BF12 3368 0008 0020             		move.w	8(a0),$20(a1)
0001BF18 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001BF1E 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001BF24 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001BF2A D0FC 0020                  		adda.w	#$20,a0
0001BF2E D2FC 0048                  		adda.w	#$48,a1
0001BF32 4E75                       		rts	
0001BF34                            ; End of function SS_AniWallsRings
0001BF34                            
0001BF34                            ; ===========================================================================
0001BF34 0142 6142 0142 0142 0142+  SS_WaRiVramSet:	dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001BF44 0142 6142 0142 0142 0142+  		dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001BF54 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001BF64 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001BF74 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001BF84 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001BF94 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001BFA4 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001BFB4                            ; ---------------------------------------------------------------------------
0001BFB4                            ; Subroutine to	remove items when you collect them in the special stage
0001BFB4                            ; ---------------------------------------------------------------------------
0001BFB4                            
0001BFB4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BFB4                            
0001BFB4                            
0001BFB4                            SS_RemoveCollectedItem:			; XREF: Obj09_ChkItems
0001BFB4 45F9 00FF 4400             		lea	($FF4400).l,a2
0001BFBA 303C 001F                  		move.w	#$1F,d0
0001BFBE                            
0001BFBE                            loc_1B4C4:
0001BFBE 4A12                       		tst.b	(a2)
0001BFC0 6700                       		beq.s	locret_1B4CE
0001BFC2 504A                       		addq.w	#8,a2
0001BFC4 51C8 FFF8                  		dbf	d0,loc_1B4C4
0001BFC8                            
0001BFC8                            locret_1B4CE:
0001BFC8 4E75                       		rts	
0001BFCA                            ; End of function SS_RemoveCollectedItem
0001BFCA                            
0001BFCA                            ; ---------------------------------------------------------------------------
0001BFCA                            ; Subroutine to	animate	special	stage items when you touch them
0001BFCA                            ; ---------------------------------------------------------------------------
0001BFCA                            
0001BFCA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BFCA                            
0001BFCA                            
0001BFCA                            SS_AniItems:				; XREF: SS_ShowLayout
0001BFCA 41F9 00FF 4400             		lea	($FF4400).l,a0
0001BFD0 3E3C 001F                  		move.w	#$1F,d7
0001BFD4                            
0001BFD4                            loc_1B4DA:
0001BFD4 7000                       		moveq	#0,d0
0001BFD6 1010                       		move.b	(a0),d0
0001BFD8 6700                       		beq.s	loc_1B4E8
0001BFDA E548                       		lsl.w	#2,d0
0001BFDC 227B 0000                  		movea.l	SS_AniIndex-4(pc,d0.w),a1
0001BFE0 4E91                       		jsr	(a1)
0001BFE2                            
0001BFE2                            loc_1B4E8:
0001BFE2 5048                       		addq.w	#8,a0
0001BFE4                            
0001BFE4                            loc_1B4EA:
0001BFE4 51CF FFEE                  		dbf	d7,loc_1B4DA
0001BFE8                            
0001BFE8 4E75                       		rts	
0001BFEA                            ; End of function SS_AniItems
0001BFEA                            
0001BFEA                            ; ===========================================================================
0001BFEA 0000 0000                  SS_AniIndex:	dc.l SS_AniRingSparks
0001BFEE 0000 0000                  		dc.l SS_AniBumper
0001BFF2 0000 0000                  		dc.l SS_Ani1Up
0001BFF6 0000 0000                  		dc.l SS_AniReverse
0001BFFA 0000 0000                  		dc.l SS_AniEmeraldSparks
0001BFFE 0000 0000                  		dc.l SS_AniGlassBlock
0001C002                            ; ===========================================================================
0001C002                            
0001C002                            SS_AniRingSparks:			; XREF: SS_AniIndex
0001C002 5328 0002                  		subq.b	#1,2(a0)
0001C006 6A00                       		bpl.s	locret_1B530
0001C008 117C 0005 0002             		move.b	#5,2(a0)
0001C00E 7000                       		moveq	#0,d0
0001C010 1028 0003                  		move.b	3(a0),d0
0001C014 5228 0003                  		addq.b	#1,3(a0)
0001C018 2268 0004                  		movea.l	4(a0),a1
0001C01C 103B 0000                  		move.b	SS_AniRingData(pc,d0.w),d0
0001C020 1280                       		move.b	d0,(a1)
0001C022 6600                       		bne.s	locret_1B530
0001C024 4290                       		clr.l	(a0)
0001C026 42A8 0004                  		clr.l	4(a0)
0001C02A                            
0001C02A                            locret_1B530:
0001C02A 4E75                       		rts	
0001C02C                            ; ===========================================================================
0001C02C 4243 4445 0000             SS_AniRingData:	dc.b $42, $43, $44, $45, 0, 0
0001C032                            ; ===========================================================================
0001C032                            
0001C032                            SS_AniBumper:				; XREF: SS_AniIndex
0001C032 5328 0002                  		subq.b	#1,2(a0)
0001C036 6A00                       		bpl.s	locret_1B566
0001C038 117C 0007 0002             		move.b	#7,2(a0)
0001C03E 7000                       		moveq	#0,d0
0001C040 1028 0003                  		move.b	3(a0),d0
0001C044 5228 0003                  		addq.b	#1,3(a0)
0001C048 2268 0004                  		movea.l	4(a0),a1
0001C04C 103B 0000                  		move.b	SS_AniBumpData(pc,d0.w),d0
0001C050 6600                       		bne.s	loc_1B564
0001C052 4290                       		clr.l	(a0)
0001C054 42A8 0004                  		clr.l	4(a0)
0001C058 12BC 0025                  		move.b	#$25,(a1)
0001C05C 4E75                       		rts	
0001C05E                            ; ===========================================================================
0001C05E                            
0001C05E                            loc_1B564:
0001C05E 1280                       		move.b	d0,(a1)
0001C060                            
0001C060                            locret_1B566:
0001C060 4E75                       		rts	
0001C062                            ; ===========================================================================
0001C062 3233 3233 0000             SS_AniBumpData:	dc.b $32, $33, $32, $33, 0, 0
0001C068                            ; ===========================================================================
0001C068                            
0001C068                            SS_Ani1Up:				; XREF: SS_AniIndex
0001C068 5328 0002                  		subq.b	#1,2(a0)
0001C06C 6A00                       		bpl.s	locret_1B596
0001C06E 117C 0005 0002             		move.b	#5,2(a0)
0001C074 7000                       		moveq	#0,d0
0001C076 1028 0003                  		move.b	3(a0),d0
0001C07A 5228 0003                  		addq.b	#1,3(a0)
0001C07E 2268 0004                  		movea.l	4(a0),a1
0001C082 103B 0000                  		move.b	SS_Ani1UpData(pc,d0.w),d0
0001C086 1280                       		move.b	d0,(a1)
0001C088 6600                       		bne.s	locret_1B596
0001C08A 4290                       		clr.l	(a0)
0001C08C 42A8 0004                  		clr.l	4(a0)
0001C090                            
0001C090                            locret_1B596:
0001C090 4E75                       		rts	
0001C092                            ; ===========================================================================
0001C092 4647 4849 0000             SS_Ani1UpData:	dc.b $46, $47, $48, $49, 0, 0
0001C098                            ; ===========================================================================
0001C098                            
0001C098                            SS_AniReverse:				; XREF: SS_AniIndex
0001C098 5328 0002                  		subq.b	#1,2(a0)
0001C09C 6A00                       		bpl.s	locret_1B5CC
0001C09E 117C 0007 0002             		move.b	#7,2(a0)
0001C0A4 7000                       		moveq	#0,d0
0001C0A6 1028 0003                  		move.b	3(a0),d0
0001C0AA 5228 0003                  		addq.b	#1,3(a0)
0001C0AE 2268 0004                  		movea.l	4(a0),a1
0001C0B2 103B 0000                  		move.b	SS_AniRevData(pc,d0.w),d0
0001C0B6 6600                       		bne.s	loc_1B5CA
0001C0B8 4290                       		clr.l	(a0)
0001C0BA 42A8 0004                  		clr.l	4(a0)
0001C0BE 12BC 002B                  		move.b	#$2B,(a1)
0001C0C2 4E75                       		rts	
0001C0C4                            ; ===========================================================================
0001C0C4                            
0001C0C4                            loc_1B5CA:
0001C0C4 1280                       		move.b	d0,(a1)
0001C0C6                            
0001C0C6                            locret_1B5CC:
0001C0C6 4E75                       		rts	
0001C0C8                            ; ===========================================================================
0001C0C8 2B31 2B31 0000             SS_AniRevData:	dc.b $2B, $31, $2B, $31, 0, 0
0001C0CE                            ; ===========================================================================
0001C0CE                            
0001C0CE                            SS_AniEmeraldSparks:			; XREF: SS_AniIndex
0001C0CE 5328 0002                  		subq.b	#1,2(a0)
0001C0D2 6A00                       		bpl.s	locret_1B60C
0001C0D4 117C 0005 0002             		move.b	#5,2(a0)
0001C0DA 7000                       		moveq	#0,d0
0001C0DC 1028 0003                  		move.b	3(a0),d0
0001C0E0 5228 0003                  		addq.b	#1,3(a0)
0001C0E4 2268 0004                  		movea.l	4(a0),a1
0001C0E8 103B 0000                  		move.b	SS_AniEmerData(pc,d0.w),d0
0001C0EC 1280                       		move.b	d0,(a1)
0001C0EE 6600                       		bne.s	locret_1B60C
0001C0F0 4290                       		clr.l	(a0)
0001C0F2 42A8 0004                  		clr.l	4(a0)
0001C0F6 11FC 0004 D024             		move.b	#4,($FFFFD024).w
0001C0FC 303C 00A8                  		move.w	#$A8,d0
0001C100 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play special stage GOAL	sound
0001C106                            
0001C106                            locret_1B60C:
0001C106 4E75                       		rts	
0001C108                            ; ===========================================================================
0001C108 4647 4849 0000             SS_AniEmerData:	dc.b $46, $47, $48, $49, 0, 0
0001C10E                            ; ===========================================================================
0001C10E                            
0001C10E                            SS_AniGlassBlock:			; XREF: SS_AniIndex
0001C10E 5328 0002                  		subq.b	#1,2(a0)
0001C112 6A00                       		bpl.s	locret_1B640
0001C114 117C 0001 0002             		move.b	#1,2(a0)
0001C11A 7000                       		moveq	#0,d0
0001C11C 1028 0003                  		move.b	3(a0),d0
0001C120 5228 0003                  		addq.b	#1,3(a0)
0001C124 2268 0004                  		movea.l	4(a0),a1
0001C128 103B 0000                  		move.b	SS_AniGlassData(pc,d0.w),d0
0001C12C 1280                       		move.b	d0,(a1)
0001C12E 6600                       		bne.s	locret_1B640
0001C130 12A8 0004                  		move.b	4(a0),(a1)
0001C134 4290                       		clr.l	(a0)
0001C136 42A8 0004                  		clr.l	4(a0)
0001C13A                            
0001C13A                            locret_1B640:
0001C13A 4E75                       		rts	
0001C13C                            ; ===========================================================================
0001C13C 4B4C 4D4E 4B4C 4D4E 0000   SS_AniGlassData:dc.b $4B, $4C, $4D, $4E, $4B, $4C, $4D,	$4E, 0,	0
0001C146                            ; ---------------------------------------------------------------------------
0001C146                            ; Special stage	layout pointers
0001C146                            ; ---------------------------------------------------------------------------
0001C146                            SS_LayoutIndex:
0001C146                            	include "_inc\Special stage layout pointers.asm"
0001C146                            ; ---------------------------------------------------------------------------
0001C146                            ; Special stage	layout pointers
0001C146                            ; ---------------------------------------------------------------------------
0001C146 0000 0000                  	dc.l SS_1
0001C14A 0000 0000                  	dc.l SS_2
0001C14E 0000 0000                  	dc.l SS_3
0001C152 0000 0000                  	dc.l SS_4
0001C156 0000 0000                  	dc.l SS_5
0001C15A 0000 0000                  	dc.l SS_6
0001C15E                            	even
0001C15E                            	even
0001C15E                            
0001C15E                            ; ---------------------------------------------------------------------------
0001C15E                            ; Special stage	start locations
0001C15E                            ; ---------------------------------------------------------------------------
0001C15E                            SS_StartLoc:	incbin	misc\sloc_ss.bin
0001C176                            		even
0001C176                            
0001C176                            ; ---------------------------------------------------------------------------
0001C176                            ; Subroutine to	load special stage layout
0001C176                            ; ---------------------------------------------------------------------------
0001C176                            
0001C176                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C176                            
0001C176                            
0001C176                            SS_Load:				; XREF: SpecialStage
0001C176 7000                       		moveq	#0,d0
0001C178 1038 FE16                  		move.b	($FFFFFE16).w,d0 ; load	number of last special stage entered
0001C17C 5238 FE16                  		addq.b	#1,($FFFFFE16).w
0001C180 0C38 0006 FE16             		cmpi.b	#6,($FFFFFE16).w
0001C186 6500                       		bcs.s	SS_ChkEmldNum
0001C188 11FC 0000 FE16             		move.b	#0,($FFFFFE16).w ; reset if higher than	6
0001C18E                            
0001C18E                            SS_ChkEmldNum:
0001C18E 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all emeralds?
0001C194 6700                       		beq.s	SS_LoadData	; if yes, branch
0001C196 7200                       		moveq	#0,d1
0001C198 1238 FE57                  		move.b	($FFFFFE57).w,d1
0001C19C 5301                       		subq.b	#1,d1
0001C19E 6500                       		bcs.s	SS_LoadData
0001C1A0 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0001C1A4                            
0001C1A4                            SS_ChkEmldLoop:	
0001C1A4 B033 1000                  		cmp.b	(a3,d1.w),d0
0001C1A8 6600                       		bne.s	SS_ChkEmldRepeat
0001C1AA 60CA                       		bra.s	SS_Load
0001C1AC                            ; ===========================================================================
0001C1AC                            
0001C1AC                            SS_ChkEmldRepeat:
0001C1AC 51C9 FFF6                  		dbf	d1,SS_ChkEmldLoop
0001C1B0                            
0001C1B0                            SS_LoadData:
0001C1B0 E548                       		lsl.w	#2,d0
0001C1B2 43FB 00AA                  		lea	SS_StartLoc(pc,d0.w),a1
0001C1B6 31D9 D008                  		move.w	(a1)+,($FFFFD008).w
0001C1BA 31D9 D00C                  		move.w	(a1)+,($FFFFD00C).w
0001C1BE 207B 0086                  		movea.l	SS_LayoutIndex(pc,d0.w),a0
0001C1C2 43F9 00FF 4000             		lea	($FF4000).l,a1
0001C1C8 303C 0000                  		move.w	#0,d0
0001C1CC 4EB9 0000 1954             		jsr	(EniDec).l
0001C1D2 43F9 00FF 0000             		lea	($FF0000).l,a1
0001C1D8 303C 0FFF                  		move.w	#$FFF,d0
0001C1DC                            
0001C1DC                            SS_ClrRAM3:
0001C1DC 4299                       		clr.l	(a1)+
0001C1DE 51C8 FFFC                  		dbf	d0,SS_ClrRAM3
0001C1E2                            
0001C1E2 43F9 00FF 1020             		lea	($FF1020).l,a1
0001C1E8 41F9 00FF 4000             		lea	($FF4000).l,a0
0001C1EE 723F                       		moveq	#$3F,d1
0001C1F0                            
0001C1F0                            loc_1B6F6:
0001C1F0 743F                       		moveq	#$3F,d2
0001C1F2                            
0001C1F2                            loc_1B6F8:
0001C1F2 12D8                       		move.b	(a0)+,(a1)+
0001C1F4 51CA FFFC                  		dbf	d2,loc_1B6F8
0001C1F8                            
0001C1F8 43E9 0040                  		lea	$40(a1),a1
0001C1FC 51C9 FFF2                  		dbf	d1,loc_1B6F6
0001C200                            
0001C200 43F9 00FF 4008             		lea	($FF4008).l,a1
0001C206 41F9 0000 0000             		lea	(SS_MapIndex).l,a0
0001C20C 724D                       		moveq	#$4D,d1
0001C20E                            
0001C20E                            loc_1B714:
0001C20E 22D8                       		move.l	(a0)+,(a1)+
0001C210 32FC 0000                  		move.w	#0,(a1)+
0001C214 1368 FFFC FFFF             		move.b	-4(a0),-1(a1)
0001C21A 32D8                       		move.w	(a0)+,(a1)+
0001C21C 51C9 FFF0                  		dbf	d1,loc_1B714
0001C220                            
0001C220 43F9 00FF 4400             		lea	($FF4400).l,a1
0001C226 323C 003F                  		move.w	#$3F,d1
0001C22A                            
0001C22A                            loc_1B730:
0001C22A                            
0001C22A 4299                       		clr.l	(a1)+
0001C22C 51C9 FFFC                  		dbf	d1,loc_1B730
0001C230                            
0001C230 4E75                       		rts	
0001C232                            ; End of function SS_Load
0001C232                            
0001C232                            ; ===========================================================================
0001C232                            ; ---------------------------------------------------------------------------
0001C232                            ; Special stage	mappings and VRAM pointers
0001C232                            ; ---------------------------------------------------------------------------
0001C232                            SS_MapIndex:
0001C232                            	include "_inc\Special stage mappings and VRAM pointers.asm"
0001C232                            ; ---------------------------------------------------------------------------
0001C232                            ; Special stage	mappings and VRAM pointers
0001C232                            ; ---------------------------------------------------------------------------
0001C232 0000 0000                  	dc.l Map_SSWalls	; address of mappings
0001C236 0142                       	dc.w $142		; VRAM setting
0001C238 0000 0000                  	dc.l Map_SSWalls
0001C23C 0142                       	dc.w $142
0001C23E 0000 0000                  	dc.l Map_SSWalls
0001C242 0142                       	dc.w $142
0001C244 0000 0000                  	dc.l Map_SSWalls
0001C248 0142                       	dc.w $142
0001C24A 0000 0000                  	dc.l Map_SSWalls
0001C24E 0142                       	dc.w $142
0001C250 0000 0000                  	dc.l Map_SSWalls
0001C254 0142                       	dc.w $142
0001C256 0000 0000                  	dc.l Map_SSWalls
0001C25A 0142                       	dc.w $142
0001C25C 0000 0000                  	dc.l Map_SSWalls
0001C260 0142                       	dc.w $142
0001C262 0000 0000                  	dc.l Map_SSWalls
0001C266 0142                       	dc.w $142
0001C268 0000 0000                  	dc.l Map_SSWalls
0001C26C 2142                       	dc.w $2142
0001C26E 0000 0000                  	dc.l Map_SSWalls
0001C272 2142                       	dc.w $2142
0001C274 0000 0000                  	dc.l Map_SSWalls
0001C278 2142                       	dc.w $2142
0001C27A 0000 0000                  	dc.l Map_SSWalls
0001C27E 2142                       	dc.w $2142
0001C280 0000 0000                  	dc.l Map_SSWalls
0001C284 2142                       	dc.w $2142
0001C286 0000 0000                  	dc.l Map_SSWalls
0001C28A 2142                       	dc.w $2142
0001C28C 0000 0000                  	dc.l Map_SSWalls
0001C290 2142                       	dc.w $2142
0001C292 0000 0000                  	dc.l Map_SSWalls
0001C296 2142                       	dc.w $2142
0001C298 0000 0000                  	dc.l Map_SSWalls
0001C29C 2142                       	dc.w $2142
0001C29E 0000 0000                  	dc.l Map_SSWalls
0001C2A2 4142                       	dc.w $4142
0001C2A4 0000 0000                  	dc.l Map_SSWalls
0001C2A8 4142                       	dc.w $4142
0001C2AA 0000 0000                  	dc.l Map_SSWalls
0001C2AE 4142                       	dc.w $4142
0001C2B0 0000 0000                  	dc.l Map_SSWalls
0001C2B4 4142                       	dc.w $4142
0001C2B6 0000 0000                  	dc.l Map_SSWalls
0001C2BA 4142                       	dc.w $4142
0001C2BC 0000 0000                  	dc.l Map_SSWalls
0001C2C0 4142                       	dc.w $4142
0001C2C2 0000 0000                  	dc.l Map_SSWalls
0001C2C6 4142                       	dc.w $4142
0001C2C8 0000 0000                  	dc.l Map_SSWalls
0001C2CC 4142                       	dc.w $4142
0001C2CE 0000 0000                  	dc.l Map_SSWalls
0001C2D2 4142                       	dc.w $4142
0001C2D4 0000 0000                  	dc.l Map_SSWalls
0001C2D8 6142                       	dc.w $6142
0001C2DA 0000 0000                  	dc.l Map_SSWalls
0001C2DE 6142                       	dc.w $6142
0001C2E0 0000 0000                  	dc.l Map_SSWalls
0001C2E4 6142                       	dc.w $6142
0001C2E6 0000 0000                  	dc.l Map_SSWalls
0001C2EA 6142                       	dc.w $6142
0001C2EC 0000 0000                  	dc.l Map_SSWalls
0001C2F0 6142                       	dc.w $6142
0001C2F2 0000 0000                  	dc.l Map_SSWalls
0001C2F6 6142                       	dc.w $6142
0001C2F8 0000 0000                  	dc.l Map_SSWalls
0001C2FC 6142                       	dc.w $6142
0001C2FE 0000 0000                  	dc.l Map_SSWalls
0001C302 6142                       	dc.w $6142
0001C304 0000 0000                  	dc.l Map_SSWalls
0001C308 6142                       	dc.w $6142
0001C30A 0000 F4EC                  	dc.l Map_obj47
0001C30E 023B                       	dc.w $23B
0001C310 0000 0000                  	dc.l Map_SS_R
0001C314 0570                       	dc.w $570
0001C316 0000 0000                  	dc.l Map_SS_R
0001C31A 0251                       	dc.w $251
0001C31C 0000 0000                  	dc.l Map_SS_R
0001C320 0370                       	dc.w $370
0001C322 0000 0000                  	dc.l Map_SS_Up
0001C326 0263                       	dc.w $263
0001C328 0000 0000                  	dc.l Map_SS_Down
0001C32C 0263                       	dc.w $263
0001C32E 0000 0000                  	dc.l Map_SS_R
0001C332 22F0                       	dc.w $22F0
0001C334 0000 0000                  	dc.l Map_SS_Glass
0001C338 0470                       	dc.w $470
0001C33A 0000 0000                  	dc.l Map_SS_Glass
0001C33E 05F0                       	dc.w $5F0
0001C340 0000 0000                  	dc.l Map_SS_Glass
0001C344 65F0                       	dc.w $65F0
0001C346 0000 0000                  	dc.l Map_SS_Glass
0001C34A 25F0                       	dc.w $25F0
0001C34C 0000 0000                  	dc.l Map_SS_Glass
0001C350 45F0                       	dc.w $45F0
0001C352 0000 0000                  	dc.l Map_SS_R
0001C356 02F0                       	dc.w $2F0
0001C358 0100 F4EC                  	dc.l Map_obj47+$1000000	; add frame no.	* $1000000
0001C35C 023B                       	dc.w $23B
0001C35E 0200 F4EC                  	dc.l Map_obj47+$2000000
0001C362 023B                       	dc.w $23B
0001C364 0000 0000                  	dc.l Map_SS_R
0001C368 0797                       	dc.w $797
0001C36A 0000 0000                  	dc.l Map_SS_R
0001C36E 07A0                       	dc.w $7A0
0001C370 0000 0000                  	dc.l Map_SS_R
0001C374 07A9                       	dc.w $7A9
0001C376 0000 0000                  	dc.l Map_SS_R
0001C37A 0797                       	dc.w $797
0001C37C 0000 0000                  	dc.l Map_SS_R
0001C380 07A0                       	dc.w $7A0
0001C382 0000 0000                  	dc.l Map_SS_R
0001C386 07A9                       	dc.w $7A9
0001C388 0000 A7F4                  	dc.l Map_obj25
0001C38C 27B2                       	dc.w $27B2
0001C38E 0000 0000                  	dc.l Map_SS_Chaos3
0001C392 0770                       	dc.w $770
0001C394 0000 0000                  	dc.l Map_SS_Chaos3
0001C398 2770                       	dc.w $2770
0001C39A 0000 0000                  	dc.l Map_SS_Chaos3
0001C39E 4770                       	dc.w $4770
0001C3A0 0000 0000                  	dc.l Map_SS_Chaos3
0001C3A4 6770                       	dc.w $6770
0001C3A6 0000 0000                  	dc.l Map_SS_Chaos1
0001C3AA 0770                       	dc.w $770
0001C3AC 0000 0000                  	dc.l Map_SS_Chaos2
0001C3B0 0770                       	dc.w $770
0001C3B2 0000 0000                  	dc.l Map_SS_R
0001C3B6 04F0                       	dc.w $4F0
0001C3B8 0400 A7F4                  	dc.l Map_obj25+$4000000
0001C3BC 27B2                       	dc.w $27B2
0001C3BE 0500 A7F4                  	dc.l Map_obj25+$5000000
0001C3C2 27B2                       	dc.w $27B2
0001C3C4 0600 A7F4                  	dc.l Map_obj25+$6000000
0001C3C8 27B2                       	dc.w $27B2
0001C3CA 0700 A7F4                  	dc.l Map_obj25+$7000000
0001C3CE 27B2                       	dc.w $27B2
0001C3D0 0000 0000                  	dc.l Map_SS_Glass
0001C3D4 23F0                       	dc.w $23F0
0001C3D6 0000 0000                  	dc.l Map_SS_Glass+$1000000
0001C3DA 23F0                       	dc.w $23F0
0001C3DC 0000 0000                  	dc.l Map_SS_Glass+$2000000
0001C3E0 23F0                       	dc.w $23F0
0001C3E2 0000 0000                  	dc.l Map_SS_Glass+$3000000
0001C3E6 23F0                       	dc.w $23F0
0001C3E8 0000 0000                  	dc.l Map_SS_R+$2000000
0001C3EC 04F0                       	dc.w $4F0
0001C3EE 0000 0000                  	dc.l Map_SS_Glass
0001C3F2 05F0                       	dc.w $5F0
0001C3F4 0000 0000                  	dc.l Map_SS_Glass
0001C3F8 65F0                       	dc.w $65F0
0001C3FA 0000 0000                  	dc.l Map_SS_Glass
0001C3FE 25F0                       	dc.w $25F0
0001C400 0000 0000                  	dc.l Map_SS_Glass
0001C404 45F0                       	dc.w $45F0
0001C404 45F0                       	dc.w $45F0
0001C406                            
0001C406                            ; ---------------------------------------------------------------------------
0001C406                            ; Sprite mappings - special stage "R" block
0001C406                            ; ---------------------------------------------------------------------------
0001C406                            Map_SS_R:
0001C406                            	include "_maps\SSRblock.asm"
0001C406                            ; ---------------------------------------------------------------------------
0001C406                            ; Sprite mappings - special stage "R" block
0001C406                            ; ---------------------------------------------------------------------------
0001C406 0000 0000                  		dc.w byte_1B912-Map_SS_R, byte_1B918-Map_SS_R
0001C40A 0000                       		dc.w byte_1B91E-Map_SS_R
0001C40C 01                         byte_1B912:	dc.b 1
0001C40D F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001C412 01                         byte_1B918:	dc.b 1
0001C413 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001C418 00                         byte_1B91E:	dc.b 0
0001C41A 00                         		even
0001C41A 00                         		even
0001C41A                            
0001C41A                            ; ---------------------------------------------------------------------------
0001C41A                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001C41A                            ; ---------------------------------------------------------------------------
0001C41A                            Map_SS_Glass:
0001C41A                            	include "_maps\SSglassblock.asm"
0001C41A                            ; ---------------------------------------------------------------------------
0001C41A                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001C41A                            ; ---------------------------------------------------------------------------
0001C41A 0000 0000                  		dc.w byte_1B928-Map_SS_Glass, byte_1B92E-Map_SS_Glass
0001C41E 0000 0000                  		dc.w byte_1B934-Map_SS_Glass, byte_1B93A-Map_SS_Glass
0001C422 01                         byte_1B928:	dc.b 1
0001C423 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001C428 01                         byte_1B92E:	dc.b 1
0001C429 F40A 0800 F4               		dc.b $F4, $A, 8, 0, $F4
0001C42E 01                         byte_1B934:	dc.b 1
0001C42F F40A 1800 F4               		dc.b $F4, $A, $18, 0, $F4
0001C434 01                         byte_1B93A:	dc.b 1
0001C435 F40A 1000 F4               		dc.b $F4, $A, $10, 0, $F4
0001C43A                            		even
0001C43A                            		even
0001C43A                            
0001C43A                            ; ---------------------------------------------------------------------------
0001C43A                            ; Sprite mappings - special stage "UP" block
0001C43A                            ; ---------------------------------------------------------------------------
0001C43A                            Map_SS_Up:
0001C43A                            	include "_maps\SSUPblock.asm"
0001C43A                            ; ---------------------------------------------------------------------------
0001C43A                            ; Sprite mappings - special stage "UP" block
0001C43A                            ; ---------------------------------------------------------------------------
0001C43A 0000                       		dc.w byte_1B944-Map_SS_Up
0001C43C 0000                       		dc.w byte_1B94A-Map_SS_Up
0001C43E 01                         byte_1B944:	dc.b 1
0001C43F F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001C444 01                         byte_1B94A:	dc.b 1
0001C445 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001C44A                            		even
0001C44A                            		even
0001C44A                            
0001C44A                            ; ---------------------------------------------------------------------------
0001C44A                            ; Sprite mappings - special stage "DOWN" block
0001C44A                            ; ---------------------------------------------------------------------------
0001C44A                            Map_SS_Down:
0001C44A                            	include "_maps\SSDOWNblock.asm"
0001C44A                            ; ---------------------------------------------------------------------------
0001C44A                            ; Sprite mappings - special stage "DOWN" block
0001C44A                            ; ---------------------------------------------------------------------------
0001C44A 0000                       		dc.w byte_1B954-Map_SS_Down
0001C44C 0000                       		dc.w byte_1B95A-Map_SS_Down
0001C44E 01                         byte_1B954:	dc.b 1
0001C44F F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001C454 01                         byte_1B95A:	dc.b 1
0001C455 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001C45A                            		even
0001C45A                            		even
0001C45A                            
0001C45A                            ; ---------------------------------------------------------------------------
0001C45A                            ; Sprite mappings - special stage chaos	emeralds
0001C45A                            ; ---------------------------------------------------------------------------
0001C45A 0000                       Map_SS_Chaos1:	dc.w byte_1B96C-Map_SS_Chaos1
0001C45C 0000                       		dc.w byte_1B97E-Map_SS_Chaos1
0001C45E 0000                       Map_SS_Chaos2:	dc.w byte_1B972-Map_SS_Chaos2
0001C460 0000                       		dc.w byte_1B97E-Map_SS_Chaos2
0001C462 0000                       Map_SS_Chaos3:	dc.w byte_1B978-Map_SS_Chaos3
0001C464 0000                       		dc.w byte_1B97E-Map_SS_Chaos3
0001C466 01                         byte_1B96C:	dc.b 1
0001C467 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001C46C 01                         byte_1B972:	dc.b 1
0001C46D F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0001C472 01                         byte_1B978:	dc.b 1
0001C473 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
0001C478 01                         byte_1B97E:	dc.b 1
0001C479 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
0001C47E                            		even
0001C47E                            ; ===========================================================================
0001C47E                            ; ---------------------------------------------------------------------------
0001C47E                            ; Object 09 - Sonic (special stage)
0001C47E                            ; ---------------------------------------------------------------------------
0001C47E                            
0001C47E                            Obj09:					; XREF: Obj_Index
0001C47E                            ;		tst.w	($FFFFFE08).w	; is debug mode	being used?
0001C47E                            ;		beq.s	Obj09_Normal	; if not, branch
0001C47E 6100 0000                  		bsr.w	SS_FixCamera
0001C482                            ;		bra.w	DebugMode
0001C482                            ; ===========================================================================
0001C482                            
0001C482                            Obj09_Normal:
0001C482 7000                       		moveq	#0,d0
0001C484 1028 0024                  		move.b	$24(a0),d0
0001C488 323B 0000                  		move.w	Obj09_Index(pc,d0.w),d1
0001C48C 4EFB 1000                  		jmp	Obj09_Index(pc,d1.w)
0001C490                            ; ===========================================================================
0001C490 0000                       Obj09_Index:	dc.w Obj09_Main-Obj09_Index
0001C492 0000                       		dc.w Obj09_ChkDebug-Obj09_Index
0001C494 0000                       		dc.w Obj09_ExitStage-Obj09_Index
0001C496 0000                       		dc.w Obj09_Exit2-Obj09_Index
0001C498                            ; ===========================================================================
0001C498                            
0001C498                            Obj09_Main:				; XREF: Obj09_Index
0001C498 5428 0024                  		addq.b	#2,$24(a0)
0001C49C 117C 000E 0016             		move.b	#$E,$16(a0)
0001C4A2 117C 0007 0017             		move.b	#7,$17(a0)
0001C4A8 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
0001C4B0 317C 0780 0002             		move.w	#$780,2(a0)
0001C4B6 117C 0004 0001             		move.b	#4,1(a0)
0001C4BC 117C 0000 0018             		move.b	#0,$18(a0)
0001C4C2 117C 0002 001C             		move.b	#2,$1C(a0)
0001C4C8 08E8 0002 0022             		bset	#2,$22(a0)
0001C4CE 08E8 0001 0022             		bset	#1,$22(a0)
0001C4D4                            
0001C4D4                            Obj09_ChkDebug:				; XREF: Obj09_Index
0001C4D4                            ;		tst.w	($FFFFFFFA).w	; is debug mode	cheat enabled?
0001C4D4                            ;		beq.s	Obj09_NoDebug	; if not, branch
0001C4D4                            ;		btst	#4,($FFFFF605).w ; is button B pressed?
0001C4D4                            ;		beq.s	Obj09_NoDebug	; if not, branch
0001C4D4                            ;		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring
0001C4D4                            
0001C4D4                            Obj09_NoDebug:
0001C4D4 117C 0000 0030             		move.b	#0,$30(a0)
0001C4DA 7000                       		moveq	#0,d0
0001C4DC 1028 0022                  		move.b	$22(a0),d0
0001C4E0 0240 0002                  		andi.w	#2,d0
0001C4E4 323B 0000                  		move.w	Obj09_Modes(pc,d0.w),d1
0001C4E8 4EBB 1000                  		jsr	Obj09_Modes(pc,d1.w)
0001C4EC 4EBA 8212                  		jsr	LoadSonicDynPLC
0001C4F0 4EF9 0000 DFF8             		jmp	DisplaySprite
0001C4F6                            ; ===========================================================================
0001C4F6 0000                       Obj09_Modes:	dc.w Obj09_OnWall-Obj09_Modes
0001C4F8 0000                       		dc.w Obj09_InAir-Obj09_Modes
0001C4FA                            ; ===========================================================================
0001C4FA                            
0001C4FA                            Obj09_OnWall:				; XREF: Obj09_Modes
0001C4FA 6100 0000                  		bsr.w	Obj09_Rise
0001C4FE 6100 0000                  		bsr.w	Obj09_Move
0001C502 6100 0000                  		bsr.w	Obj09_Fall
0001C506 6000                       		bra.s	Obj09_Display
0001C508                            ; ===========================================================================
0001C508                            
0001C508                            Obj09_InAir:				; XREF: Obj09_Modes
0001C508 6100 0000                  		bsr.w	Obj09_Rise
0001C50C 6100 0000                  		bsr.w	Obj09_Move
0001C510 6100 0000                  		bsr.w	Obj09_Fall
0001C514                            
0001C514                            Obj09_Display:				; XREF: Obj09_OnWall
0001C514 6100 0000                  		bsr.w	Obj09_ChkItems
0001C518 6100 0000                  		bsr.w	Obj09_ChkItems2
0001C51C 4EB9 0000 DFD2             		jsr	SpeedToPos
0001C522 6100 0000                  		bsr.w	SS_FixCamera
0001C526 3038 F780                  		move.w	($FFFFF780).w,d0
0001C52A D078 F782                  		add.w	($FFFFF782).w,d0
0001C52E 31C0 F780                  		move.w	d0,($FFFFF780).w
0001C532 4EB9 0001 445A             		jsr	Sonic_Animate
0001C538 4E75                       		rts	
0001C53A                            
0001C53A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C53A                            
0001C53A                            
0001C53A                            Obj09_Move:				; XREF: Obj09_OnWall; Obj09_InAir
0001C53A 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
0001C540 6700                       		beq.s	Obj09_ChkRight	; if not, branch
0001C542 4A78 F784                          tst.w   ($FFFFF784).w
0001C546 6600                               bne.s   @corereverse1
0001C548 6100 0000                  		bsr.w	Obj09_MoveLeft
0001C54C 6000                               bra.s   Obj09_ChkRight          
0001C54E                            
0001C54E                            @corereverse1:
0001C54E 6100 0000                          bsr.w	Obj09_MoveRight
0001C552                            
0001C552                            Obj09_ChkRight:
0001C552 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
0001C558 6700                       		beq.s	Obj09_MoveSpeed	; if not, branch
0001C55A 4A78 F784                          tst.w   ($FFFFF784).w
0001C55E 6600                               bne.s   @corereverse2
0001C560 6100 0000                  		bsr.w	Obj09_MoveRight
0001C564 6000                               bra.s   Obj09_MoveSpeed 
0001C566                            
0001C566                            @corereverse2:
0001C566 6100 0000                  		bsr.w	Obj09_MoveLeft			;	branch to right movement subroutine
0001C56A                            
0001C56A                            Obj09_MoveSpeed:
0001C56A 1038 F602                  		move.b	($FFFFF602).w,d0
0001C56E 0200 000C                  		andi.b	#$C,d0
0001C572 6600                       		bne.s	Obj09_MoveCollision
0001C574 3028 0010                  		move.w	$10(a0),d0
0001C578 6700                       		beq.s	Obj09_MoveCollision
0001C57A 317C 0000 0010             		move.w	#0,$10(a0)
0001C580                            
0001C580                            Obj09_MoveCollision:
0001C580 1038 F780                  		move.b	($FFFFF780).w,d0
0001C584 0600 0020                  		addi.b	#$20,d0
0001C588 0200 00C0                  		andi.b	#$C0,d0
0001C58C 4400                       		neg.b	d0
0001C58E 4EB9 0000 2D6C             		jsr	(CalcSine).l
0001C594 C3E8 0010                  		muls.w	$10(a0),d1
0001C598 D3A8 0008                  		add.l	d1,8(a0)
0001C59C C1E8 0012                  		muls.w	$12(a0),d0
0001C5A0 D1A8 000C                  		add.l	d0,$C(a0)
0001C5A4 48E7 C000                  		movem.l	d0-d1,-(sp)
0001C5A8 2428 000C                  		move.l	$C(a0),d2
0001C5AC 2628 0008                  		move.l	8(a0),d3
0001C5B0 6100 0000                  		bsr.w	sub_1BCE8
0001C5B4 6700                       		beq.s	loc_1BAF2
0001C5B6 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001C5BA 93A8 0008                  		sub.l	d1,8(a0)
0001C5BE 91A8 000C                  		sub.l	d0,$C(a0)
0001C5C2 317C 0000 0010             		move.w	#0,$10(a0)
0001C5C8 4E75                       		rts	
0001C5CA                            ; ===========================================================================
0001C5CA                            
0001C5CA                            loc_1BAF2:
0001C5CA 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001C5CE 4E75                       		rts	
0001C5D0                            ; End of function Obj09_Move
0001C5D0                            
0001C5D0                            
0001C5D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C5D0                            
0001C5D0                            
0001C5D0                            Obj09_MoveLeft:				; XREF: Obj09_Move
0001C5D0 08E8 0000 0022             		bset	#0,$22(a0)
0001C5D6 4240                               clr.w   d0
0001C5D8 3038 F786                          move.w  ($FFFFF786).w,d0
0001C5DC D040                               add.w   d0,d0
0001C5DE 317B 0000 0010                     move.w	SS_XSpdIndex(pc,d0.w),$10(a0)
0001C5E4 4468 0010                          neg.w   $10(a0)
0001C5E8 4E75                               rts
0001C5EA                            
0001C5EA                            ; End of function Obj09_MoveLeft
0001C5EA                            
0001C5EA                            
0001C5EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C5EA                            
0001C5EA                            
0001C5EA                            Obj09_MoveRight:
0001C5EA 08A8 0000 0022             		bclr	#0,$22(a0)
0001C5F0 4240                               clr.w   d0
0001C5F2 3038 F786                          move.w  ($FFFFF786).w,d0
0001C5F6 D040                               add.w   d0,d0
0001C5F8 317B 0000 0010                     move.w	SS_XSpdIndex(pc,d0.w),$10(a0)
0001C5FE 4E75                       		rts
0001C600                            
0001C600                            ; End of function Obj09_MoveRight
0001C600                            
0001C600                            ; ---------------------------------------------------------------------------
0001C600                            
0001C600                            SS_XSpdIndex:
0001C600 0032                       		dc.w 50
0001C602 0064                       		dc.w 100
0001C604 0096                       		dc.w 150
0001C606 00C8                       		dc.w 200
0001C608 00FA                       		dc.w 250
0001C60A                            
0001C60A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C60A                            
0001C60A                            
0001C60A                            Obj09_Rise:				; XREF: Obj09_OnWall
0001C60A 0838 0000 F602             		btst	#0,($FFFFF602).w
0001C610 6700                       		beq.s	Obj09_NoRise	; if not, branch
0001C612 4A78 F784                          tst.w   ($FFFFF784).w
0001C616 6600 0000                          bne.w   @corereverse1
0001C61A 6100 0000                  		bsr.w	Obj09_MoveUp
0001C61E 6000                               bra.s   Obj09_NoRise
0001C620                            
0001C620                            @corereverse1:
0001C620 6100 0000                  		bsr.w	Obj09_Falling 
0001C624                                    
0001C624                            Obj09_NoRise:
0001C624 0838 0001 F602             		btst	#1,($FFFFF602).w	;	is Dn Pressed?
0001C62A 6700                       		beq.s	Obj09_MoveYSpeed		;	
0001C62C 4A78 F784                          tst.w   ($FFFFF784).w
0001C630 6600 0000                          bne.w   @corereverse2
0001C634 6100 0000                  		bsr.w	Obj09_Falling			;	
0001C638 6000                               bra.s   Obj09_MoveYSpeed
0001C63A                            
0001C63A                            @corereverse2:
0001C63A 6100 0000                  		bsr.w	Obj09_MoveUp
0001C63E                            		
0001C63E                            Obj09_MoveYSpeed:
0001C63E 1038 F602                  		move.b	($FFFFF602).w,d0
0001C642 0200 0003                  		andi.b	#3,d0
0001C646 6600                       		bne.s	Obj09_MoveYCollision
0001C648 3028 0012                  		move.w	$12(a0),d0
0001C64C 6700                       		beq.s	Obj09_MoveYCollision
0001C64E 317C 0000 0012             		move.w	#0,$12(a0)
0001C654                            
0001C654                            Obj09_MoveYCollision:		;	CODE TO CHECK STAGE COLLISION ON X-AXIS
0001C654 1038 F780                  		move.b	($FFFFF780).w,d0		;	check the Special Stage Angle
0001C658 0600 0020                  		addi.b	#$20,d0					;	?
0001C65C 0200 00C0                  		andi.b	#$C0,d0					;	
0001C660 4400                       		neg.b	d0						;	?
0001C662 4EB9 0000 2D6C             		jsr	(CalcSine).l				;	load speed trajectory algorithms
0001C668 C3E8 0010                  		muls.w	$10(a0),d1			;	calculate x-speed trajectory
0001C66C D3A8 0008                  		add.l	d1,8(a0)				;	calculate Sonic's next x position
0001C670 C1E8 0012                  		muls.w	$12(a0),d0			;	calculate y-speed trajectory
0001C674 D1A8 000C                  		add.l	d0,$C(a0)				;	calculate Sonic's next y position
0001C678 48E7 C000                  		movem.l	d0-d1,-(sp)				;	save trajectory values
0001C67C 2428 000C                  		move.l	$C(a0),d2				;	move sonic's next y-position into d2
0001C680 2628 0008                  		move.l	8(a0),d3				;	move sonic's next x-position into d3
0001C684 6100 0000                  		bsr.w	sub_1BCE8				;	branch to the collision detection routine
0001C688 6700 FF40                  		beq.w	loc_1BAF2				;	if Sonic's not colliding with anything branch
0001C68C 4CDF 0003                  		movem.l	(sp)+,d0-d1				;	remove x and y speed trajectory from the stack
0001C690 93A8 0008                  		sub.l	d1,8(a0)				;	cancel out Sonic's next x-position
0001C694 91A8 000C                  		sub.l	d0,$C(a0)				;	cancel out Sonic's next y-position
0001C698 317C 0000 0012             		move.w	#0,$12(a0)           ;	Make Sonic Stop
0001C69E 4E75                       		rts								;	end routine
0001C6A0                            
0001C6A0                            Obj09_MoveUp:
0001C6A0 4240                               clr.w   d0
0001C6A2 3038 F786                          move.w  ($FFFFF786).w,d0
0001C6A6 D040                               add.w   d0,d0
0001C6A8 317B 0000 0012                     move.w	SS_YSpdIndex(pc,d0.w),$12(a0)
0001C6AE 4468 0012                          neg.w   $12(a0)
0001C6B2 4E75                               rts
0001C6B4                            
0001C6B4                            Obj09_Falling:
0001C6B4 4240                               clr.w   d0
0001C6B6 3038 F786                          move.w  ($FFFFF786).w,d0
0001C6BA D040                               add.w   d0,d0
0001C6BC 317B 0000 0012                     move.w	SS_YSpdIndex(pc,d0.w),$12(a0)
0001C6C2 4E75                       		rts
0001C6C4                            ; End of function Obj09_Jump
0001C6C4                            
0001C6C4                            ; ---------------------------------------------------------------------------
0001C6C4                            SS_YSpdIndex:
0001C6C4 0080                       		dc.w $80
0001C6C6 0100                       		dc.w $100
0001C6C8 0180                       		dc.w $180
0001C6CA 0200                       		dc.w $200
0001C6CC 0280                       		dc.w $280
0001C6CE                            
0001C6CE                            
0001C6CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C6CE                            
0001C6CE                            
0001C6CE                            nullsub_2:				; XREF: Obj09_InAir
0001C6CE 4E75                       		rts	
0001C6D0                            ; End of function nullsub_2
0001C6D0                            
0001C6D0                            ; ===========================================================================
0001C6D0                            ; ---------------------------------------------------------------------------
0001C6D0                            ; unused subroutine to limit Sonic's upward vertical speed
0001C6D0                            ; ---------------------------------------------------------------------------
0001C6D0 323C FC00                  		move.w	#-$400,d1
0001C6D4 B268 0012                  		cmp.w	$12(a0),d1
0001C6D8 6F00                       		ble.s	locret_1BBB4
0001C6DA 1038 F602                  		move.b	($FFFFF602).w,d0
0001C6DE 0200 0070                  		andi.b	#$70,d0
0001C6E2 6600                       		bne.s	locret_1BBB4
0001C6E4 3141 0012                  		move.w	d1,$12(a0)
0001C6E8                            
0001C6E8                            locret_1BBB4:
0001C6E8 4E75                       		rts	
0001C6EA                            ; ---------------------------------------------------------------------------
0001C6EA                            ; Subroutine to	fix the	camera on Sonic's position (special stage)
0001C6EA                            ; ---------------------------------------------------------------------------
0001C6EA                            
0001C6EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C6EA                            
0001C6EA                            
0001C6EA                            SS_FixCamera:				; XREF: Obj09
0001C6EA 3428 000C                  		move.w	$C(a0),d2
0001C6EE 3628 0008                  		move.w	8(a0),d3
0001C6F2 3038 F700                  		move.w	($FFFFF700).w,d0
0001C6F6 0443 00A0                  		subi.w	#$A0,d3
0001C6FA 6500                       		bcs.s	loc_1BBCE
0001C6FC 9043                       		sub.w	d3,d0
0001C6FE 9178 F700                  		sub.w	d0,($FFFFF700).w
0001C702                            
0001C702                            loc_1BBCE:
0001C702 3038 F704                  		move.w	($FFFFF704).w,d0
0001C706 0442 0070                  		subi.w	#$70,d2
0001C70A 6500                       		bcs.s	locret_1BBDE
0001C70C 9042                       		sub.w	d2,d0
0001C70E 9178 F704                  		sub.w	d0,($FFFFF704).w
0001C712                            
0001C712                            locret_1BBDE:
0001C712 4E75                       		rts	
0001C714                            ; End of function SS_FixCamera
0001C714                            
0001C714                            ; ===========================================================================
0001C714                            
0001C714                            Obj09_ExitStage:			; XREF: Obj09_Index
0001C714 0678 0040 F782             		addi.w	#$40,($FFFFF782).w
0001C71A 0C78 1800 F782             		cmpi.w	#$1800,($FFFFF782).w
0001C720 6600                       		bne.s	loc_1BBF4
0001C722 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001C728                            
0001C728                            loc_1BBF4:
0001C728 0C78 3000 F782             		cmpi.w	#$3000,($FFFFF782).w
0001C72E 6D00                       		blt.s	loc_1BC12
0001C730 31FC 0000 F782             		move.w	#0,($FFFFF782).w
0001C736                            ;		move.w	#$4000,($FFFFF780).w
0001C736 5428 0024                  		addq.b	#2,$24(a0)
0001C73A 317C 003C 0038             		move.w	#$3C,$38(a0)
0001C740                            
0001C740                            loc_1BC12:
0001C740                            ;		move.w	($FFFFF780).w,d0
0001C740                            ;		add.w	($FFFFF782).w,d0
0001C740                            ;		move.w	d0,($FFFFF780).w
0001C740 4EB9 0001 445A             		jsr	Sonic_Animate
0001C746 4EB9 0001 4700             		jsr	LoadSonicDynPLC
0001C74C 6100 FF9C                  		bsr.w	SS_FixCamera
0001C750 4EF9 0000 DFF8             		jmp	DisplaySprite
0001C756                            ; ===========================================================================
0001C756                            
0001C756                            Obj09_Exit2:				; XREF: Obj09_Index
0001C756 5368 0038                  		subq.w	#1,$38(a0)
0001C75A 6600                       		bne.s	loc_1BC40
0001C75C 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001C762                            
0001C762                            loc_1BC40:
0001C762 4EB9 0001 445A             		jsr	Sonic_Animate
0001C768 4EB9 0001 4700             		jsr	LoadSonicDynPLC
0001C76E 6100 FF7A                  		bsr.w	SS_FixCamera
0001C772 4EF9 0000 DFF8             		jmp	DisplaySprite
0001C778                            
0001C778                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C778                            
0001C778                            
0001C778                            Obj09_Fall:				; XREF: Obj09_OnWall; Obj09_InAir
0001C778 2428 000C                  		move.l	$C(a0),d2
0001C77C 2628 0008                  		move.l	8(a0),d3
0001C780 1038 F780                  		move.b	($FFFFF780).w,d0
0001C784 0200 00FC                  		andi.b	#$FC,d0
0001C788 4EB9 0000 2D6C             		jsr	(CalcSine).l
0001C78E 3828 0010                  		move.w	$10(a0),d4
0001C792 48C4                       		ext.l	d4
0001C794 E184                       		asl.l	#8,d4
0001C796 C1FC 002A                  		muls.w	#$2A,d0
0001C79A D084                       		add.l	d4,d0
0001C79C 3828 0012                  		move.w	$12(a0),d4
0001C7A0 48C4                       		ext.l	d4
0001C7A2 E184                       		asl.l	#8,d4
0001C7A4 C3FC 002A                  		muls.w	#$2A,d1
0001C7A8 D284                       		add.l	d4,d1
0001C7AA 7A00                       		moveq	#0,d5
0001C7AC 3A28 0010                  		move.w	$10(a0),d5
0001C7B0 6700                       		beq.s	Obj09_NoXFall
0001C7B2 D680                       		add.l	d0,d3
0001C7B4 6100 0000                  		bsr.w	sub_1BCE8
0001C7B8 6700                       		beq.s	loc_1BCB0
0001C7BA 9680                       		sub.l	d0,d3
0001C7BC 7000                       		moveq	#0,d0
0001C7BE 3140 0010                  		move.w	d0,$10(a0)
0001C7C2 08A8 0001 0022             		bclr	#1,$22(a0)
0001C7C8                            
0001C7C8                            Obj09_NoXFall
0001C7C8 7C00                       		moveq	#0,d6
0001C7CA 3C28 0012                  		move.w	$12(a0),d6
0001C7CE 6700                       		beq.s	Obj09_NoYFall
0001C7D0 D481                       		add.l	d1,d2
0001C7D2 6100 0000                  		bsr.w	sub_1BCE8
0001C7D6 6700                       		beq.s	loc_1BCC6
0001C7D8 9481                       		sub.l	d1,d2
0001C7DA 7200                       		moveq	#0,d1
0001C7DC 3141 0012                  		move.w	d1,$12(a0)
0001C7E0 4E75                       		rts	
0001C7E2                            ; ===========================================================================
0001C7E2                            
0001C7E2                            loc_1BCB0:
0001C7E2 7C00                       		moveq	#0,d6
0001C7E4 3C28 0012                  		move.w	$12(a0),d6
0001C7E8 6700                       		beq.s	Obj09_NoYFall
0001C7EA D481                       		add.l	d1,d2
0001C7EC 6100 0000                  		bsr.w	sub_1BCE8
0001C7F0 6700                       		beq.s	loc_1BCD4
0001C7F2 9481                       		sub.l	d1,d2
0001C7F4 7200                       		moveq	#0,d1
0001C7F6 3141 0012                  		move.w	d1,$12(a0)
0001C7FA 08A8 0001 0022             		bclr	#1,$22(a0)
0001C800                            
0001C800                            loc_1BCC6:
0001C800 E080                       		asr.l	#8,d0
0001C802 E081                       		asr.l	#8,d1
0001C804 3140 0010                  		move.w	d0,$10(a0)
0001C808 3141 0012                  		move.w	d1,$12(a0)
0001C80C 4E75                       		rts	
0001C80E                            ; ===========================================================================
0001C80E                            
0001C80E                            loc_1BCD4:
0001C80E E080                       		asr.l	#8,d0
0001C810 E081                       		asr.l	#8,d1
0001C812 3140 0010                  		move.w	d0,$10(a0)
0001C816 3141 0012                  		move.w	d1,$12(a0)
0001C81A 08E8 0001 0022             		bset	#1,$22(a0)
0001C820 4E75                       		rts	
0001C822                            
0001C822                            Obj09_NoYFall:
0001C822 4E75                       		rts
0001C824                            ; End of function Obj09_Fall
0001C824                            
0001C824                            
0001C824                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C824                            
0001C824                            
0001C824                            sub_1BCE8:				; XREF: Obj09_Move; Obj09_Fall
0001C824 43F9 00FF 0000             		lea	($FF0000).l,a1
0001C82A 7800                       		moveq	#0,d4
0001C82C 4842                       		swap	d2
0001C82E 3802                       		move.w	d2,d4
0001C830 4842                       		swap	d2
0001C832 0644 0044                  		addi.w	#$44,d4
0001C836 88FC 0018                  		divu.w	#$18,d4
0001C83A C8FC 0080                  		mulu.w	#$80,d4
0001C83E D3C4                       		adda.l	d4,a1
0001C840 7800                       		moveq	#0,d4
0001C842 4843                       		swap	d3
0001C844 3803                       		move.w	d3,d4
0001C846 4843                       		swap	d3
0001C848 0644 0014                  		addi.w	#$14,d4
0001C84C 88FC 0018                  		divu.w	#$18,d4
0001C850 D2C4                       		adda.w	d4,a1
0001C852 7A00                       		moveq	#0,d5
0001C854 1819                       		move.b	(a1)+,d4
0001C856 6100                       		bsr.s	sub_1BD30
0001C858 1819                       		move.b	(a1)+,d4
0001C85A 6100                       		bsr.s	sub_1BD30
0001C85C D2FC 007E                  		adda.w	#$7E,a1
0001C860 1819                       		move.b	(a1)+,d4
0001C862 6100                       		bsr.s	sub_1BD30
0001C864 1819                       		move.b	(a1)+,d4
0001C866 6100                       		bsr.s	sub_1BD30
0001C868 4A05                       		tst.b	d5
0001C86A 4E75                       		rts	
0001C86C                            ; End of function sub_1BCE8
0001C86C                            
0001C86C                            
0001C86C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C86C                            
0001C86C                            
0001C86C                            sub_1BD30:				; XREF: sub_1BCE8
0001C86C 6700                       		beq.s	locret_1BD44
0001C86E 0C04 0028                  		cmpi.b	#$28,d4
0001C872 6500                       		blo.s	loc_1BD46
0001C874 0C04 004B                  		cmpi.b	#$4B,d4
0001C878 6400                       		bhs.s	loc_1BD46
0001C87A 0C04 003A                  		cmpi.b	#$3A,d4
0001C87E 6400                       		bhs.s	locret_1BD44
0001C880 0C04 002C                  		cmpi.b	#$2C,d4
0001C884 6400                       		bhs.s	loc_1BD46
0001C886                            
0001C886                            locret_1BD44:
0001C886 4E75                       		rts	
0001C888                            ; ===========================================================================
0001C888                            
0001C888                            loc_1BD46:
0001C888 1144 0030                  		move.b	d4,$30(a0)
0001C88C 2149 0032                  		move.l	a1,$32(a0)
0001C890 7AFF                       		moveq	#-1,d5
0001C892 4E75                       		rts	
0001C894                            ; End of function sub_1BD30
0001C894                            
0001C894                            
0001C894                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C894                            
0001C894                            
0001C894                            Obj09_ChkItems:				; XREF: Obj09_Display
0001C894 43F9 00FF 0000             		lea	($FF0000).l,a1
0001C89A 7800                       		moveq	#0,d4
0001C89C 3828 000C                  		move.w	$C(a0),d4
0001C8A0 0644 0050                  		addi.w	#$50,d4
0001C8A4 88FC 0018                  		divu.w	#$18,d4
0001C8A8 C8FC 0080                  		mulu.w	#$80,d4
0001C8AC D3C4                       		adda.l	d4,a1
0001C8AE 7800                       		moveq	#0,d4
0001C8B0 3828 0008                  		move.w	8(a0),d4
0001C8B4 0644 0020                  		addi.w	#$20,d4
0001C8B8 88FC 0018                  		divu.w	#$18,d4
0001C8BC D2C4                       		adda.w	d4,a1
0001C8BE 1811                       		move.b	(a1),d4
0001C8C0 6600                       		bne.s	Obj09_ChkCont
0001C8C2 4A28 003A                  		tst.b	$3A(a0)
0001C8C6 6600 0000                  		bne.w	Obj09_MakeGhostSolid
0001C8CA 7800                       		moveq	#0,d4
0001C8CC 4E75                       		rts	
0001C8CE                            ; ===========================================================================
0001C8CE                            
0001C8CE                            Obj09_ChkCont:
0001C8CE 0C04 003A                  		cmpi.b	#$3A,d4		; is the item a	ring?
0001C8D2 6600                       		bne.s	Obj09_Chk1Up
0001C8D4 6100 F6DE                  		bsr.w	SS_RemoveCollectedItem
0001C8D8 6600                       		bne.s	Obj09_GetCont
0001C8DA 14BC 0001                  		move.b	#1,(a2)
0001C8DE 2549 0004                  		move.l	a1,4(a2)
0001C8E2                            
0001C8E2                            Obj09_GetCont:
0001C8E2 4EB9 0000 A4DC             		jsr	CollectRing
0001C8E8 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; check if you have 50 rings
0001C8EE 6500                       		bcs.s	Obj09_NoCont
0001C8F0 08F8 0000 FE1B             		bset	#0,($FFFFFE1B).w
0001C8F6 6600                       		bne.s	Obj09_NoCont
0001C8F8 5238 FE18                  		addq.b	#1,($FFFFFE18).w ; add 1 to number of continues
0001C8FC 303C 00BF                  		move.w	#$BF,d0
0001C900 4EB9 0000 15CC             		jsr	(PlaySound).l	; play extra continue sound
0001C906                            
0001C906                            Obj09_NoCont:
0001C906 7800                       		moveq	#0,d4
0001C908 4E75                       		rts	
0001C90A                            ; ===========================================================================
0001C90A                            
0001C90A                            Obj09_Chk1Up:
0001C90A 0C04 0028                  		cmpi.b	#$28,d4		; is the item an extra life?
0001C90E 6600                       		bne.s	Obj09_ChkEmer
0001C910 6100 F6A2                  		bsr.w	SS_RemoveCollectedItem
0001C914 6600                       		bne.s	Obj09_Get1Up
0001C916 14BC 0003                  		move.b	#3,(a2)
0001C91A 2549 0004                  		move.l	a1,4(a2)
0001C91E                            
0001C91E                            Obj09_Get1Up:
0001C91E 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to number of lives
0001C922 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to lives counter
0001C926 303C 0088                  		move.w	#$88,d0
0001C92A 4EB9 0000 15CC             		jsr	(PlaySound).l	; play extra life music
0001C930 7800                       		moveq	#0,d4
0001C932 4E75                       		rts	
0001C934                            ; ===========================================================================
0001C934                            
0001C934                            Obj09_ChkEmer:
0001C934 0C04 003B                  		cmpi.b	#$3B,d4		; is the item an emerald?
0001C938 6500                       		bcs.s	Obj09_UPblock
0001C93A 0C04 0040                  		cmpi.b	#$40,d4
0001C93E 6200                       		bhi.s	Obj09_UPblock
0001C940 6100 F672                  		bsr.w	SS_RemoveCollectedItem
0001C944 6600                       		bne.s	Obj09_GetEmer
0001C946 14BC 0005                  		move.b	#5,(a2)
0001C94A 2549 0004                  		move.l	a1,4(a2)
0001C94E                            
0001C94E                            Obj09_GetEmer:
0001C94E 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all the emeralds?
0001C954 6700                       		beq.s	Obj09_NoEmer	; if yes, branch
0001C956 0404 003B                  		subi.b	#$3B,d4
0001C95A 7000                       		moveq	#0,d0
0001C95C 1038 FE57                  		move.b	($FFFFFE57).w,d0
0001C960 45F8 FE58                  		lea	($FFFFFE58).w,a2
0001C964 1584 0000                  		move.b	d4,(a2,d0.w)
0001C968 5238 FE57                  		addq.b	#1,($FFFFFE57).w ; add 1 to number of emeralds
0001C96C                            
0001C96C                            Obj09_NoEmer:
0001C96C 303C 0093                  		move.w	#$93,d0
0001C970 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play emerald music
0001C976 7800                       		moveq	#0,d4
0001C978 4E75                       		rts	
0001C97A                            
0001C97A                            ; ===========================================================================
0001C97A                            
0001C97A                            Obj09_UPblock:
0001C97A 0C04 0029                  		cmpi.b	#$29,d4		; is the item an "UP" block?
0001C97E 6600                       		bne.s	Obj09_DOWNblock
0001C980 6100 F632                  		bsr.w	SS_RemoveCollectedItem
0001C984 6600                       		bne.s	Obj09_SpeedUp
0001C986 14BC 0001                  		move.b	#1,(a2)
0001C98A 2549 0004                  		move.l	a1,4(a2)
0001C98E                            
0001C98E                            Obj09_SpeedUp:
0001C98E 0C78 0004 F786             		cmpi.w	#4,($FFFFF786).w
0001C994 6400                       		bhs.s	Obj09_UPsnd
0001C996 5278 F786                  		addi.w	#1,($FFFFF786).w	; increase stage rotation speed
0001C99A                            
0001C99A                            Obj09_UPsnd:
0001C99A 303C 00A9                  		move.w	#$A9,d0
0001C99E 4EB9 0000 15D2             		jsr	(PlaySound_Special).l	; play up/down sound
0001C9A4 7800                       		moveq	#0,d4
0001C9A6 4E75                       		rts	
0001C9A8                            ; ===========================================================================
0001C9A8                            
0001C9A8                            Obj09_DOWNblock:
0001C9A8 0C04 002A                  		cmpi.b	#$2A,d4		; is the item a	"DOWN" block?
0001C9AC 6600                       		bne.s	Obj09_Rblock
0001C9AE 6100 F604                  		bsr.w	SS_RemoveCollectedItem
0001C9B2 6600                       		bne.s	Obj09_SpeedDown
0001C9B4 14BC 0001                  		move.b	#1,(a2)
0001C9B8 2549 0004                  		move.l	a1,4(a2)
0001C9BC                            
0001C9BC                            Obj09_SpeedDown:
0001C9BC 4A78 F786                  		tst.w 	($FFFFF786).w
0001C9C0 6700                       		beq.s	Obj09_DOWNsnd
0001C9C2 5378 F786                  		subi.w	#1,($FFFFF786).w	; reduce stage rotation speed
0001C9C6                            
0001C9C6                            Obj09_DOWNsnd:
0001C9C6 303C 00A9                  		move.w	#$A9,d0
0001C9CA 4EB9 0000 15D2             		jsr	(PlaySound_Special).l	; play up/down sound
0001C9D0 7800                       		moveq	#0,d4
0001C9D2 4E75                       		rts	
0001C9D4                            ; ===========================================================================
0001C9D4                            
0001C9D4                            Obj09_Rblock:
0001C9D4 0C04 002B                  		cmpi.b	#$2B,d4		; is the item an "R" block?
0001C9D8 6600                       		bne.s	Obj09_ChkGhost
0001C9DA 6100 F5D8                  		bsr.w	SS_RemoveCollectedItem
0001C9DE 6600                       		bne.s	Obj09_RevStage
0001C9E0 14BC 0001                  		move.b	#1,(a2)
0001C9E4 2549 0004                  		move.l	a1,4(a2)
0001C9E8                            
0001C9E8                            Obj09_RevStage:
0001C9E8 31FC 012C F784                     move.w  #300,($FFFFF784).w
0001C9EE 103C 00A9                  		move.b	#$A9,d0
0001C9F2 4EB9 0000 15D2             		jsr	(PlaySound_Special).l	; play sound
0001C9F8 7800                       		moveq	#0,d4
0001C9FA 4E75                       		rts	
0001C9FC                            
0001C9FC                            ; ===========================================================================
0001C9FC                            
0001C9FC                            Obj09_ChkGhost:
0001C9FC 0C04 0041                  		cmpi.b	#$41,d4		; is the item a	ghost block?
0001CA00 6600                       		bne.s	Obj09_ChkGhostTag
0001CA02 117C 0001 003A             		move.b	#1,$3A(a0)	; mark the ghost block as "passed"
0001CA08                            
0001CA08                            Obj09_ChkGhostTag:
0001CA08 0C04 004A                  		cmpi.b	#$4A,d4		; is the item a	switch for ghost blocks?
0001CA0C 6600                       		bne.s	Obj09_NoGhost
0001CA0E 0C28 0001 003A             		cmpi.b	#1,$3A(a0)	; have the ghost blocks	been passed?
0001CA14 6600                       		bne.s	Obj09_NoGhost	; if not, branch
0001CA16 117C 0002 003A             		move.b	#2,$3A(a0)	; mark the ghost blocks	as "solid"
0001CA1C                            
0001CA1C                            Obj09_NoGhost:
0001CA1C 78FF                       		moveq	#-1,d4
0001CA1E 4E75                       		rts	
0001CA20                            ; ===========================================================================
0001CA20                            
0001CA20                            Obj09_MakeGhostSolid:
0001CA20 0C28 0002 003A             		cmpi.b	#2,$3A(a0)	; is the ghost marked as "solid"?
0001CA26 6600                       		bne.s	Obj09_GhostNotSolid ; if not, branch
0001CA28 43F9 00FF 1020             		lea	($FF1020).l,a1
0001CA2E 723F                       		moveq	#$3F,d1
0001CA30                            
0001CA30                            Obj09_GhostLoop2:
0001CA30 743F                       		moveq	#$3F,d2
0001CA32                            
0001CA32                            Obj09_GhostLoop:
0001CA32 0C11 0041                  		cmpi.b	#$41,(a1)	; is the item a	ghost block?
0001CA36 6600                       		bne.s	Obj09_NoReplace	; if not, branch
0001CA38 12BC 002C                  		move.b	#$2C,(a1)	; replace ghost	block with a solid block
0001CA3C                            
0001CA3C                            Obj09_NoReplace:
0001CA3C 5249                       		addq.w	#1,a1
0001CA3E 51CA FFF2                  		dbf	d2,Obj09_GhostLoop
0001CA42 43E9 0040                  		lea	$40(a1),a1
0001CA46 51C9 FFE8                  		dbf	d1,Obj09_GhostLoop2
0001CA4A                            
0001CA4A                            Obj09_GhostNotSolid:
0001CA4A 4228 003A                  		clr.b	$3A(a0)
0001CA4E 7800                       		moveq	#0,d4
0001CA50 4E75                       		rts	
0001CA52                            ; End of function Obj09_ChkItems
0001CA52                            
0001CA52                            
0001CA52                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CA52                            
0001CA52                            
0001CA52                            Obj09_ChkItems2:			; XREF: Obj09_Display
0001CA52 1028 0030                  		move.b	$30(a0),d0
0001CA56 6600                       		bne.s	Obj09_GOAL
0001CA58 5328 0036                  		subq.b	#1,$36(a0)
0001CA5C 6A00                       		bpl.s	loc_1BEA0
0001CA5E 117C 0000 0036             		move.b	#0,$36(a0)
0001CA64                            
0001CA64                            loc_1BEA0:
0001CA64 5328 0037                  		subq.b	#1,$37(a0)
0001CA68 6A00                       		bpl.s	locret_1BEAC
0001CA6A 117C 0000 0037             		move.b	#0,$37(a0)
0001CA70                            
0001CA70                            locret_1BEAC:
0001CA70 4E75                       		rts	
0001CA72                            ; ===========================================================================
0001CA72                            
0001CA72                            ; ===========================================================================
0001CA72                            
0001CA72                            Obj09_GOAL:
0001CA72 0C00 0027                  		cmpi.b	#$27,d0		; is the item a	"GOAL"?
0001CA76 6600                       		bne.s	Obj09_ChkGlass
0001CA78 5428 0024                  		addq.b	#2,$24(a0)	; run routine "Obj09_ExitStage"
0001CA7C 303C 00A8                  		move.w	#$A8,d0		; change item
0001CA80 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play "GOAL" sound
0001CA86 4E75                       		rts	
0001CA88                            ; ===========================================================================
0001CA88                            
0001CA88                            ; ===========================================================================
0001CA88                            
0001CA88                            Obj09_ChkGlass:
0001CA88 0C00 002D                  		cmpi.b	#$2D,d0		; is the item a	glass block?
0001CA8C 6700                       		beq.s	Obj09_Glass	; if yes, branch
0001CA8E 0C00 002E                  		cmpi.b	#$2E,d0
0001CA92 6700                       		beq.s	Obj09_Glass
0001CA94 0C00 002F                  		cmpi.b	#$2F,d0
0001CA98 6700                       		beq.s	Obj09_Glass
0001CA9A 0C00 0030                  		cmpi.b	#$30,d0
0001CA9E 6600                       		bne.s	Obj09_NoGlass	; if not, branch
0001CAA0                            
0001CAA0                            Obj09_Glass:
0001CAA0 6100 F512                  		bsr.w	SS_RemoveCollectedItem
0001CAA4 6600                       		bne.s	Obj09_GlassSnd
0001CAA6 14BC 0006                  		move.b	#6,(a2)
0001CAAA 2268 0032                  		movea.l	$32(a0),a1
0001CAAE 5389                       		subq.l	#1,a1
0001CAB0 2549 0004                  		move.l	a1,4(a2)
0001CAB4 1011                       		move.b	(a1),d0
0001CAB6 5200                       		addq.b	#1,d0		; change glass type when touched
0001CAB8 0C00 0030                  		cmpi.b	#$30,d0
0001CABC 6300                       		bls.s	Obj09_GlassUpdate ; if glass is	still there, branch
0001CABE 4200                       		clr.b	d0		; remove the glass block when it's destroyed
0001CAC0                            
0001CAC0                            Obj09_GlassUpdate:
0001CAC0 1540 0004                  		move.b	d0,4(a2)	; update the stage layout
0001CAC4                            
0001CAC4                            Obj09_GlassSnd:
0001CAC4 303C 00BA                  		move.w	#$BA,d0
0001CAC8 4EF9 0000 15D2             		jmp	(PlaySound_Special).l ;	play glass block sound
0001CACE                            ; ===========================================================================
0001CACE                            
0001CACE                            Obj09_NoGlass:
0001CACE 4E75                       		rts	
0001CAD0                            ; End of function Obj09_ChkItems2
0001CAD0                            
0001CAD0                            ; ===========================================================================
0001CAD0                            ; ---------------------------------------------------------------------------
0001CAD0                            ; Object 10 - blank
0001CAD0                            ; ---------------------------------------------------------------------------
0001CAD0                            
0001CAD0                            Obj10:					; XREF: Obj_Index
0001CAD0 4E75                       		rts	
0001CAD2                            ; ---------------------------------------------------------------------------
0001CAD2                            ; Subroutine to	animate	level graphics
0001CAD2                            ; ---------------------------------------------------------------------------
0001CAD2                            
0001CAD2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CAD2                            
0001CAD2                            
0001CAD2                            AniArt_Load:				; XREF: Demo_Time; loc_F54
0001CAD2 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001CAD6 6600                       		bne.s	AniArt_Pause	; if yes, branch
0001CAD8 4DF9 00C0 0000             		lea	($C00000).l,a6
0001CADE 6100 0000                  		bsr.w	AniArt_GiantRing
0001CAE2 7000                       		moveq	#0,d0
0001CAE4 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001CAE8 D040                       		add.w	d0,d0
0001CAEA 303B 0000                  		move.w	AniArt_Index(pc,d0.w),d0
0001CAEE 4EFB 0000                  		jmp	AniArt_Index(pc,d0.w)
0001CAF2                            ; ===========================================================================
0001CAF2                            
0001CAF2                            AniArt_Pause:
0001CAF2 4E75                       		rts	
0001CAF4                            ; End of function AniArt_Load
0001CAF4                            
0001CAF4                            ; ===========================================================================
0001CAF4 0000 0000                  AniArt_Index:	dc.w AniArt_GHZ-AniArt_Index, AniArt_none-AniArt_Index
0001CAF8 0000 0000                  		dc.w AniArt_MZ-AniArt_Index, AniArt_none-AniArt_Index
0001CAFC 0000 0000                  		dc.w AniArt_none-AniArt_Index, AniArt_SBZ-AniArt_Index
0001CB00 0000 0000                  		dc.w AniArt_Ending-AniArt_Index, AniArt_GHZ-AniArt_Index
0001CB04                            ; ===========================================================================
0001CB04                            ; ---------------------------------------------------------------------------
0001CB04                            ; Animated pattern routine - Green Hill
0001CB04                            ; ---------------------------------------------------------------------------
0001CB04                            
0001CB04                            AniArt_GHZ:				; XREF: AniArt_Index
0001CB04 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001CB08 6A00                       		bpl.s	loc_1C08A
0001CB0A 11FC 0005 F7B1             		move.b	#5,($FFFFF7B1).w ; time	to display each	frame for
0001CB10 43F9 0000 0000             		lea	(Art_GhzWater).l,a1 ; load waterfall patterns
0001CB16 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001CB1A 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001CB1E 0240 0001                  		andi.w	#1,d0
0001CB22 6700                       		beq.s	loc_1C078
0001CB24 43E9 0100                  		lea	$100(a1),a1	; load next frame
0001CB28                            
0001CB28                            loc_1C078:
0001CB28 23FC 6F00 0001 00C0 0004   		move.l	#$6F000001,($C00004).l ; VRAM address
0001CB32 323C 0007                  		move.w	#7,d1		; number of 8x8	tiles
0001CB36 6000 0000                  		bra.w	LoadTiles
0001CB3A                            ; ===========================================================================
0001CB3A                            
0001CB3A                            loc_1C08A:
0001CB3A 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001CB3E 6A00                       		bpl.s	loc_1C0C0
0001CB40 11FC 000F F7B3             		move.b	#$F,($FFFFF7B3).w
0001CB46 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001CB4C 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001CB50 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001CB54 0240 0001                  		andi.w	#1,d0
0001CB58 6700                       		beq.s	loc_1C0AE
0001CB5A 43E9 0200                  		lea	$200(a1),a1
0001CB5E                            
0001CB5E                            loc_1C0AE:
0001CB5E 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001CB68 323C 000F                  		move.w	#$F,d1
0001CB6C 6000 0000                  		bra.w	LoadTiles
0001CB70                            ; ===========================================================================
0001CB70                            
0001CB70                            loc_1C0C0:
0001CB70 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001CB74 6A00                       		bpl.s	locret_1C10C
0001CB76 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001CB7C 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001CB80 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001CB84 0240 0003                  		andi.w	#3,d0
0001CB88 103B 0000                  		move.b	byte_1C10E(pc,d0.w),d0
0001CB8C 0800 0000                  		btst	#0,d0
0001CB90 6600                       		bne.s	loc_1C0E8
0001CB92 11FC 007F F7B5             		move.b	#$7F,($FFFFF7B5).w
0001CB98                            
0001CB98                            loc_1C0E8:
0001CB98 EF48                       		lsl.w	#7,d0
0001CB9A 3200                       		move.w	d0,d1
0001CB9C D040                       		add.w	d0,d0
0001CB9E D041                       		add.w	d1,d0
0001CBA0 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001CBAA 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001CBB0 43F1 0000                  		lea	(a1,d0.w),a1
0001CBB4 323C 000B                  		move.w	#$B,d1
0001CBB8 6100 0000                  		bsr.w	LoadTiles
0001CBBC                            
0001CBBC                            locret_1C10C:
0001CBBC 4E75                       		rts	
0001CBBE                            ; ===========================================================================
0001CBBE 0001 0201                  byte_1C10E:	dc.b 0,	1, 2, 1
0001CBC2                            ; ===========================================================================
0001CBC2                            ; ---------------------------------------------------------------------------
0001CBC2                            ; Animated pattern routine - Marble
0001CBC2                            ; ---------------------------------------------------------------------------
0001CBC2                            
0001CBC2                            AniArt_MZ:				; XREF: AniArt_Index
0001CBC2 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001CBC6 6A00                       		bpl.s	loc_1C150
0001CBC8 11FC 0013 F7B1             		move.b	#$13,($FFFFF7B1).w
0001CBCE 43F9 0000 0000             		lea	(Art_MzLava1).l,a1 ; load lava surface patterns
0001CBD4 7000                       		moveq	#0,d0
0001CBD6 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001CBDA 5200                       		addq.b	#1,d0
0001CBDC 0C00 0003                  		cmpi.b	#3,d0
0001CBE0 6600                       		bne.s	loc_1C134
0001CBE2 7000                       		moveq	#0,d0
0001CBE4                            
0001CBE4                            loc_1C134:
0001CBE4 11C0 F7B0                  		move.b	d0,($FFFFF7B0).w
0001CBE8 C0FC 0100                  		mulu.w	#$100,d0
0001CBEC D2C0                       		adda.w	d0,a1
0001CBEE 23FC 5C40 0001 00C0 0004   		move.l	#$5C400001,($C00004).l
0001CBF8 323C 0007                  		move.w	#7,d1
0001CBFC 6100 0000                  		bsr.w	LoadTiles
0001CC00                            
0001CC00                            loc_1C150:
0001CC00 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001CC04 6A00                       		bpl.s	loc_1C1AE
0001CC06 11FC 0001 F7B3             		move.b	#1,($FFFFF7B3).w
0001CC0C 7000                       		moveq	#0,d0
0001CC0E 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001CC12 49F9 0000 0000             		lea	(Art_MzLava2).l,a4 ; load lava patterns
0001CC18 EE58                       		ror.w	#7,d0
0001CC1A D8C0                       		adda.w	d0,a4
0001CC1C 23FC 5A40 0001 00C0 0004   		move.l	#$5A400001,($C00004).l
0001CC26 7600                       		moveq	#0,d3
0001CC28 1638 F7B2                  		move.b	($FFFFF7B2).w,d3
0001CC2C 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001CC30 1638 FE68                  		move.b	($FFFFFE68).w,d3
0001CC34 343C 0003                  		move.w	#3,d2
0001CC38                            
0001CC38                            loc_1C188:
0001CC38 3003                       		move.w	d3,d0
0001CC3A D040                       		add.w	d0,d0
0001CC3C 0240 001E                  		andi.w	#$1E,d0
0001CC40 47F9 0000 0000             		lea	(AniArt_MZextra).l,a3
0001CC46 3033 0000                  		move.w	(a3,d0.w),d0
0001CC4A 47F3 0000                  		lea	(a3,d0.w),a3
0001CC4E 224C                       		movea.l	a4,a1
0001CC50 323C 001F                  		move.w	#$1F,d1
0001CC54 4E93                       		jsr	(a3)
0001CC56 5843                       		addq.w	#4,d3
0001CC58 51CA FFDE                  		dbf	d2,loc_1C188
0001CC5C 4E75                       		rts	
0001CC5E                            ; ===========================================================================
0001CC5E                            
0001CC5E                            loc_1C1AE:
0001CC5E 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001CC62 6A00 0000                  		bpl.w	locret_1C1EA
0001CC66 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001CC6C 43F9 0000 0000             		lea	(Art_MzTorch).l,a1 ; load torch	patterns
0001CC72 7000                       		moveq	#0,d0
0001CC74 1038 F7B6                  		move.b	($FFFFF7B6).w,d0
0001CC78 5238 F7B6                  		addq.b	#1,($FFFFF7B6).w
0001CC7C 0238 0003 F7B6             		andi.b	#3,($FFFFF7B6).w
0001CC82 C0FC 00C0                  		mulu.w	#$C0,d0
0001CC86 D2C0                       		adda.w	d0,a1
0001CC88 23FC 5E40 0001 00C0 0004   		move.l	#$5E400001,($C00004).l
0001CC92 323C 0005                  		move.w	#5,d1
0001CC96 6000 0000                  		bra.w	LoadTiles
0001CC9A                            ; ===========================================================================
0001CC9A                            
0001CC9A                            locret_1C1EA:
0001CC9A 4E75                       		rts	
0001CC9C                            ; ===========================================================================
0001CC9C                            ; ---------------------------------------------------------------------------
0001CC9C                            ; Animated pattern routine - Scrap Brain
0001CC9C                            ; ---------------------------------------------------------------------------
0001CC9C                            
0001CC9C                            AniArt_SBZ:				; XREF: AniArt_Index
0001CC9C 4A38 F7B4                  		tst.b	($FFFFF7B4).w
0001CCA0 6700                       		beq.s	loc_1C1F8
0001CCA2 5338 F7B4                  		subq.b	#1,($FFFFF7B4).w
0001CCA6 6000                       		bra.s	loc_1C250
0001CCA8                            ; ===========================================================================
0001CCA8                            
0001CCA8                            loc_1C1F8:
0001CCA8 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001CCAC 6A00                       		bpl.s	loc_1C250
0001CCAE 11FC 0007 F7B1             		move.b	#7,($FFFFF7B1).w
0001CCB4 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1 ; load smoke patterns
0001CCBA 23FC 4900 0002 00C0 0004   		move.l	#$49000002,($C00004).l
0001CCC4 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001CCC8 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001CCCC 0240 0007                  		andi.w	#7,d0
0001CCD0 6700                       		beq.s	loc_1C234
0001CCD2 5340                       		subq.w	#1,d0
0001CCD4 C0FC 0180                  		mulu.w	#$180,d0
0001CCD8 43F1 0000                  		lea	(a1,d0.w),a1
0001CCDC 323C 000B                  		move.w	#$B,d1
0001CCE0 6000 0000                  		bra.w	LoadTiles
0001CCE4                            ; ===========================================================================
0001CCE4                            
0001CCE4                            loc_1C234:
0001CCE4 11FC 00B4 F7B4             		move.b	#$B4,($FFFFF7B4).w
0001CCEA                            
0001CCEA                            loc_1C23A:
0001CCEA 323C 0005                  		move.w	#5,d1
0001CCEE 6100 0000                  		bsr.w	LoadTiles
0001CCF2 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001CCF8 323C 0005                  		move.w	#5,d1
0001CCFC 6000 0000                  		bra.w	LoadTiles
0001CD00                            ; ===========================================================================
0001CD00                            
0001CD00                            loc_1C250:
0001CD00 4A38 F7B5                  		tst.b	($FFFFF7B5).w
0001CD04 6700                       		beq.s	loc_1C25C
0001CD06 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001CD0A 6000                       		bra.s	locret_1C2A0
0001CD0C                            ; ===========================================================================
0001CD0C                            
0001CD0C                            loc_1C25C:
0001CD0C 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001CD10 6A00                       		bpl.s	locret_1C2A0
0001CD12 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001CD18 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001CD1E 23FC 4A80 0002 00C0 0004   		move.l	#$4A800002,($C00004).l
0001CD28 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001CD2C 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001CD30 0240 0007                  		andi.w	#7,d0
0001CD34 6700                       		beq.s	loc_1C298
0001CD36 5340                       		subq.w	#1,d0
0001CD38 C0FC 0180                  		mulu.w	#$180,d0
0001CD3C 43F1 0000                  		lea	(a1,d0.w),a1
0001CD40 323C 000B                  		move.w	#$B,d1
0001CD44 6000 0000                  		bra.w	LoadTiles
0001CD48                            ; ===========================================================================
0001CD48                            
0001CD48                            loc_1C298:
0001CD48 11FC 0078 F7B5             		move.b	#$78,($FFFFF7B5).w
0001CD4E 609A                       		bra.s	loc_1C23A
0001CD50                            ; ===========================================================================
0001CD50                            
0001CD50                            locret_1C2A0:
0001CD50 4E75                       		rts	
0001CD52                            ; ===========================================================================
0001CD52                            ; ---------------------------------------------------------------------------
0001CD52                            ; Animated pattern routine - ending sequence
0001CD52                            ; ---------------------------------------------------------------------------
0001CD52                            
0001CD52                            AniArt_Ending:				; XREF: AniArt_Index
0001CD52 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001CD56 6A00                       		bpl.s	loc_1C2F4
0001CD58 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001CD5E 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001CD64 45F8 9400                  		lea	($FFFF9400).w,a2
0001CD68 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001CD6C 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001CD70 0240 0001                  		andi.w	#1,d0
0001CD74 6700                       		beq.s	loc_1C2CE
0001CD76 43E9 0200                  		lea	$200(a1),a1
0001CD7A 45EA 0200                  		lea	$200(a2),a2
0001CD7E                            
0001CD7E                            loc_1C2CE:
0001CD7E 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001CD88 323C 000F                  		move.w	#$F,d1
0001CD8C 6100 0000                  		bsr.w	LoadTiles
0001CD90 224A                       		movea.l	a2,a1
0001CD92 23FC 7200 0001 00C0 0004   		move.l	#$72000001,($C00004).l
0001CD9C 323C 000F                  		move.w	#$F,d1
0001CDA0 6000 0000                  		bra.w	LoadTiles
0001CDA4                            ; ===========================================================================
0001CDA4                            
0001CDA4                            loc_1C2F4:
0001CDA4 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001CDA8 6A00                       		bpl.s	loc_1C33C
0001CDAA 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001CDB0 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001CDB4 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001CDB8 0240 0007                  		andi.w	#7,d0
0001CDBC 103B 0000                  		move.b	byte_1C334(pc,d0.w),d0
0001CDC0 EF48                       		lsl.w	#7,d0
0001CDC2 3200                       		move.w	d0,d1
0001CDC4 D040                       		add.w	d0,d0
0001CDC6 D041                       		add.w	d1,d0
0001CDC8 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001CDD2 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001CDD8 43F1 0000                  		lea	(a1,d0.w),a1
0001CDDC 323C 000B                  		move.w	#$B,d1
0001CDE0 6000 0000                  		bra.w	LoadTiles
0001CDE4                            ; ===========================================================================
0001CDE4 0000 0001 0202 0201        byte_1C334:	dc.b 0,	0, 0, 1, 2, 2, 2, 1
0001CDEC                            ; ===========================================================================
0001CDEC                            
0001CDEC                            loc_1C33C:
0001CDEC 5338 F7B9                  		subq.b	#1,($FFFFF7B9).w
0001CDF0 6A00                       		bpl.s	loc_1C37A
0001CDF2 11FC 000E F7B9             		move.b	#$E,($FFFFF7B9).w
0001CDF8 1038 F7B8                  		move.b	($FFFFF7B8).w,d0
0001CDFC 5238 F7B8                  		addq.b	#1,($FFFFF7B8).w
0001CE00 0240 0003                  		andi.w	#3,d0
0001CE04 103B 0000                  		move.b	byte_1C376(pc,d0.w),d0
0001CE08 E148                       		lsl.w	#8,d0
0001CE0A D040                       		add.w	d0,d0
0001CE0C 23FC 7000 0001 00C0 0004   		move.l	#$70000001,($C00004).l
0001CE16 43F8 9800                  		lea	($FFFF9800).w,a1 ; load	special	flower patterns	(from RAM)
0001CE1A 43F1 0000                  		lea	(a1,d0.w),a1
0001CE1E 323C 000F                  		move.w	#$F,d1
0001CE22 6000 0000                  		bra.w	LoadTiles
0001CE26                            ; ===========================================================================
0001CE26 0001 0201                  byte_1C376:	dc.b 0,	1, 2, 1
0001CE2A                            ; ===========================================================================
0001CE2A                            
0001CE2A                            loc_1C37A:
0001CE2A 5338 F7BB                  		subq.b	#1,($FFFFF7BB).w
0001CE2E 6A00                       		bpl.s	locret_1C3B4
0001CE30 11FC 000B F7BB             		move.b	#$B,($FFFFF7BB).w
0001CE36 1038 F7BA                  		move.b	($FFFFF7BA).w,d0
0001CE3A 5238 F7BA                  		addq.b	#1,($FFFFF7BA).w
0001CE3E 0240 0003                  		andi.w	#3,d0
0001CE42 103B 00E2                  		move.b	byte_1C376(pc,d0.w),d0
0001CE46 E148                       		lsl.w	#8,d0
0001CE48 D040                       		add.w	d0,d0
0001CE4A 23FC 6800 0001 00C0 0004   		move.l	#$68000001,($C00004).l
0001CE54 43F8 9E00                  		lea	($FFFF9E00).w,a1 ; load	special	flower patterns	(from RAM)
0001CE58 43F1 0000                  		lea	(a1,d0.w),a1
0001CE5C 323C 000F                  		move.w	#$F,d1
0001CE60 6000 0000                  		bra.w	LoadTiles
0001CE64                            ; ===========================================================================
0001CE64                            
0001CE64                            locret_1C3B4:
0001CE64 4E75                       		rts	
0001CE66                            ; ===========================================================================
0001CE66                            
0001CE66                            AniArt_none:				; XREF: AniArt_Index
0001CE66 4E75                       		rts	
0001CE68                            
0001CE68                            ; ---------------------------------------------------------------------------
0001CE68                            ; Subroutine to	load (d1 - 1) 8x8 tiles
0001CE68                            ; ---------------------------------------------------------------------------
0001CE68                            
0001CE68                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CE68                            
0001CE68                            
0001CE68                            LoadTiles:
0001CE68 2C99                       		move.l	(a1)+,(a6)
0001CE6A 2C99                       		move.l	(a1)+,(a6)
0001CE6C 2C99                       		move.l	(a1)+,(a6)
0001CE6E 2C99                       		move.l	(a1)+,(a6)
0001CE70 2C99                       		move.l	(a1)+,(a6)
0001CE72 2C99                       		move.l	(a1)+,(a6)
0001CE74 2C99                       		move.l	(a1)+,(a6)
0001CE76 2C99                       		move.l	(a1)+,(a6)
0001CE78 51C9 FFEE                  		dbf	d1,LoadTiles
0001CE7C 4E75                       		rts	
0001CE7E                            ; End of function LoadTiles
0001CE7E                            
0001CE7E                            ; ===========================================================================
0001CE7E                            ; ---------------------------------------------------------------------------
0001CE7E                            ; Animated pattern routine - more Marble Zone
0001CE7E                            ; ---------------------------------------------------------------------------
0001CE7E 0000 0000                  AniArt_MZextra:	dc.w loc_1C3EE-AniArt_MZextra, loc_1C3FA-AniArt_MZextra
0001CE82 0000 0000                  		dc.w loc_1C410-AniArt_MZextra, loc_1C41E-AniArt_MZextra
0001CE86 0000 0000                  		dc.w loc_1C434-AniArt_MZextra, loc_1C442-AniArt_MZextra
0001CE8A 0000 0000                  		dc.w loc_1C458-AniArt_MZextra, loc_1C466-AniArt_MZextra
0001CE8E 0000 0000                  		dc.w loc_1C47C-AniArt_MZextra, loc_1C48A-AniArt_MZextra
0001CE92 0000 0000                  		dc.w loc_1C4A0-AniArt_MZextra, loc_1C4AE-AniArt_MZextra
0001CE96 0000 0000                  		dc.w loc_1C4C4-AniArt_MZextra, loc_1C4D2-AniArt_MZextra
0001CE9A 0000 0000                  		dc.w loc_1C4E8-AniArt_MZextra, loc_1C4FA-AniArt_MZextra
0001CE9E                            ; ===========================================================================
0001CE9E                            
0001CE9E                            loc_1C3EE:				; XREF: AniArt_MZextra
0001CE9E 2C91                       		move.l	(a1),(a6)
0001CEA0 43E9 0010                  		lea	$10(a1),a1
0001CEA4 51C9 FFF8                  		dbf	d1,loc_1C3EE
0001CEA8 4E75                       		rts	
0001CEAA                            ; ===========================================================================
0001CEAA                            
0001CEAA                            loc_1C3FA:				; XREF: AniArt_MZextra
0001CEAA 2029 0002                  		move.l	2(a1),d0
0001CEAE 1029 0001                  		move.b	1(a1),d0
0001CEB2 E098                       		ror.l	#8,d0
0001CEB4 2C80                       		move.l	d0,(a6)
0001CEB6 43E9 0010                  		lea	$10(a1),a1
0001CEBA 51C9 FFEE                  		dbf	d1,loc_1C3FA
0001CEBE 4E75                       		rts	
0001CEC0                            ; ===========================================================================
0001CEC0                            
0001CEC0                            loc_1C410:				; XREF: AniArt_MZextra
0001CEC0 2CA9 0002                  		move.l	2(a1),(a6)
0001CEC4 43E9 0010                  		lea	$10(a1),a1
0001CEC8 51C9 FFF6                  		dbf	d1,loc_1C410
0001CECC 4E75                       		rts	
0001CECE                            ; ===========================================================================
0001CECE                            
0001CECE                            loc_1C41E:				; XREF: AniArt_MZextra
0001CECE 2029 0004                  		move.l	4(a1),d0
0001CED2 1029 0003                  		move.b	3(a1),d0
0001CED6 E098                       		ror.l	#8,d0
0001CED8 2C80                       		move.l	d0,(a6)
0001CEDA 43E9 0010                  		lea	$10(a1),a1
0001CEDE 51C9 FFEE                  		dbf	d1,loc_1C41E
0001CEE2 4E75                       		rts	
0001CEE4                            ; ===========================================================================
0001CEE4                            
0001CEE4                            loc_1C434:				; XREF: AniArt_MZextra
0001CEE4 2CA9 0004                  		move.l	4(a1),(a6)
0001CEE8 43E9 0010                  		lea	$10(a1),a1
0001CEEC 51C9 FFF6                  		dbf	d1,loc_1C434
0001CEF0 4E75                       		rts	
0001CEF2                            ; ===========================================================================
0001CEF2                            
0001CEF2                            loc_1C442:				; XREF: AniArt_MZextra
0001CEF2 2029 0006                  		move.l	6(a1),d0
0001CEF6 1029 0005                  		move.b	5(a1),d0
0001CEFA E098                       		ror.l	#8,d0
0001CEFC 2C80                       		move.l	d0,(a6)
0001CEFE 43E9 0010                  		lea	$10(a1),a1
0001CF02 51C9 FFEE                  		dbf	d1,loc_1C442
0001CF06 4E75                       		rts	
0001CF08                            ; ===========================================================================
0001CF08                            
0001CF08                            loc_1C458:				; XREF: AniArt_MZextra
0001CF08 2CA9 0006                  		move.l	6(a1),(a6)
0001CF0C 43E9 0010                  		lea	$10(a1),a1
0001CF10 51C9 FFF6                  		dbf	d1,loc_1C458
0001CF14 4E75                       		rts	
0001CF16                            ; ===========================================================================
0001CF16                            
0001CF16                            loc_1C466:				; XREF: AniArt_MZextra
0001CF16 2029 0008                  		move.l	8(a1),d0
0001CF1A 1029 0007                  		move.b	7(a1),d0
0001CF1E E098                       		ror.l	#8,d0
0001CF20 2C80                       		move.l	d0,(a6)
0001CF22 43E9 0010                  		lea	$10(a1),a1
0001CF26 51C9 FFEE                  		dbf	d1,loc_1C466
0001CF2A 4E75                       		rts	
0001CF2C                            ; ===========================================================================
0001CF2C                            
0001CF2C                            loc_1C47C:				; XREF: AniArt_MZextra
0001CF2C 2CA9 0008                  		move.l	8(a1),(a6)
0001CF30 43E9 0010                  		lea	$10(a1),a1
0001CF34 51C9 FFF6                  		dbf	d1,loc_1C47C
0001CF38 4E75                       		rts	
0001CF3A                            ; ===========================================================================
0001CF3A                            
0001CF3A                            loc_1C48A:				; XREF: AniArt_MZextra
0001CF3A 2029 000A                  		move.l	$A(a1),d0
0001CF3E 1029 0009                  		move.b	9(a1),d0
0001CF42 E098                       		ror.l	#8,d0
0001CF44 2C80                       		move.l	d0,(a6)
0001CF46 43E9 0010                  		lea	$10(a1),a1
0001CF4A 51C9 FFEE                  		dbf	d1,loc_1C48A
0001CF4E 4E75                       		rts	
0001CF50                            ; ===========================================================================
0001CF50                            
0001CF50                            loc_1C4A0:				; XREF: AniArt_MZextra
0001CF50 2CA9 000A                  		move.l	$A(a1),(a6)
0001CF54 43E9 0010                  		lea	$10(a1),a1
0001CF58 51C9 FFF6                  		dbf	d1,loc_1C4A0
0001CF5C 4E75                       		rts	
0001CF5E                            ; ===========================================================================
0001CF5E                            
0001CF5E                            loc_1C4AE:				; XREF: AniArt_MZextra
0001CF5E 2029 000C                  		move.l	$C(a1),d0
0001CF62 1029 000B                  		move.b	$B(a1),d0
0001CF66 E098                       		ror.l	#8,d0
0001CF68 2C80                       		move.l	d0,(a6)
0001CF6A 43E9 0010                  		lea	$10(a1),a1
0001CF6E 51C9 FFEE                  		dbf	d1,loc_1C4AE
0001CF72 4E75                       		rts	
0001CF74                            ; ===========================================================================
0001CF74                            
0001CF74                            loc_1C4C4:				; XREF: AniArt_MZextra
0001CF74 2CA9 000C                  		move.l	$C(a1),(a6)
0001CF78 43E9 0010                  		lea	$10(a1),a1
0001CF7C 51C9 FFF6                  		dbf	d1,loc_1C4C4
0001CF80 4E75                       		rts	
0001CF82                            ; ===========================================================================
0001CF82                            
0001CF82                            loc_1C4D2:				; XREF: AniArt_MZextra
0001CF82 2029 000C                  		move.l	$C(a1),d0
0001CF86 E198                       		rol.l	#8,d0
0001CF88 1011                       		move.b	0(a1),d0
0001CF8A 2C80                       		move.l	d0,(a6)
0001CF8C 43E9 0010                  		lea	$10(a1),a1
0001CF90 51C9 FFF0                  		dbf	d1,loc_1C4D2
0001CF94 4E75                       		rts	
0001CF96                            ; ===========================================================================
0001CF96                            
0001CF96                            loc_1C4E8:				; XREF: AniArt_MZextra
0001CF96 3CA9 000E                  		move.w	$E(a1),(a6)
0001CF9A 3C91                       		move.w	0(a1),(a6)
0001CF9C 43E9 0010                  		lea	$10(a1),a1
0001CFA0 51C9 FFF4                  		dbf	d1,loc_1C4E8
0001CFA4 4E75                       		rts	
0001CFA6                            ; ===========================================================================
0001CFA6                            
0001CFA6                            loc_1C4FA:				; XREF: AniArt_MZextra
0001CFA6 2011                       		move.l	0(a1),d0
0001CFA8 1029 000F                  		move.b	$F(a1),d0
0001CFAC E098                       		ror.l	#8,d0
0001CFAE 2C80                       		move.l	d0,(a6)
0001CFB0 43E9 0010                  		lea	$10(a1),a1
0001CFB4 51C9 FFF0                  		dbf	d1,loc_1C4FA
0001CFB8 4E75                       		rts	
0001CFBA                            
0001CFBA                            ; ---------------------------------------------------------------------------
0001CFBA                            ; Animated pattern routine - giant ring
0001CFBA                            ; ---------------------------------------------------------------------------
0001CFBA                            
0001CFBA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CFBA                            
0001CFBA                            
0001CFBA                            AniArt_GiantRing:			; XREF: AniArt_Load
0001CFBA 4A78 F7BE                  		tst.w	($FFFFF7BE).w
0001CFBE 6600                       		bne.s	loc_1C518
0001CFC0 4E75                       		rts	
0001CFC2                            ; ===========================================================================
0001CFC2                            
0001CFC2                            loc_1C518:
0001CFC2 0478 01C0 F7BE             		subi.w	#$1C0,($FFFFF7BE).w
0001CFC8 43F9 0000 0000             		lea	(Art_BigRing).l,a1 ; load giant	ring patterns
0001CFCE 7000                       		moveq	#0,d0
0001CFD0 3038 F7BE                  		move.w	($FFFFF7BE).w,d0
0001CFD4 43F1 0000                  		lea	(a1,d0.w),a1
0001CFD8 0640 8000                  		addi.w	#$8000,d0
0001CFDC E588                       		lsl.l	#2,d0
0001CFDE E448                       		lsr.w	#2,d0
0001CFE0 0040 4000                  		ori.w	#$4000,d0
0001CFE4 4840                       		swap	d0
0001CFE6 2D40 0004                  		move.l	d0,4(a6)
0001CFEA 323C 000D                  		move.w	#$D,d1
0001CFEE 6000 FE78                  		bra.w	LoadTiles
0001CFF2                            ; End of function AniArt_GiantRing
0001CFF2                            
0001CFF2                            ; ===========================================================================
0001CFF2                            ; ---------------------------------------------------------------------------
0001CFF2                            ; Object 21 - SCORE, TIME, RINGS
0001CFF2                            ; ---------------------------------------------------------------------------
0001CFF2                            
0001CFF2                            Obj21:					; XREF: Obj_Index
0001CFF2 7000                       		moveq	#0,d0
0001CFF4 1028 0024                  		move.b	$24(a0),d0
0001CFF8 323B 0000                  		move.w	Obj21_Index(pc,d0.w),d1
0001CFFC 4EFB 1000                  		jmp	Obj21_Index(pc,d1.w)
0001D000                            ; ===========================================================================
0001D000 0000                       Obj21_Index:	dc.w Obj21_Main-Obj21_Index
0001D002 0000                       		dc.w Obj21_Flash-Obj21_Index
0001D004                            ; ===========================================================================
0001D004                            
0001D004                            Obj21_Main:				; XREF: Obj21_Main
0001D004 5428 0024                  		addq.b	#2,$24(a0)
0001D008 317C 0090 0008             		move.w	#$90,8(a0)
0001D00E 317C 0108 000A             		move.w	#$108,$A(a0)
0001D014 217C 0000 0000 0004        		move.l	#Map_obj21,4(a0)
0001D01C 317C 06CA 0002             		move.w	#$6CA,2(a0)
0001D022 117C 0000 0001             		move.b	#0,1(a0)
0001D028 117C 0000 0018             		move.b	#0,$18(a0)
0001D02E                            
0001D02E                            Obj21_Flash:				; XREF: Obj21_Main
0001D02E 4A78 FE20                  		tst.w	($FFFFFE20).w	; do you have any rings?
0001D032 6700                       		beq.s	Obj21_Flash2	; if not, branch
0001D034 4228 001A                  		clr.b	$1A(a0)		; make all counters yellow
0001D038 4EF9 0000 DFF8             		jmp	DisplaySprite
0001D03E                            ; ===========================================================================
0001D03E                            
0001D03E                            Obj21_Flash2:
0001D03E 7000                       		moveq	#0,d0
0001D040 0838 0003 FE05             		btst	#3,($FFFFFE05).w
0001D046 6600                       		bne.s	Obj21_Display
0001D048 5240                       		addq.w	#1,d0		; make ring counter flash red
0001D04A 0C38 0009 FE23             		cmpi.b	#9,($FFFFFE23).w ; have	9 minutes elapsed?
0001D050 6600                       		bne.s	Obj21_Display	; if not, branch
0001D052 5440                       		addq.w	#2,d0		; make time counter flash red
0001D054                            
0001D054                            Obj21_Display:
0001D054 1140 001A                  		move.b	d0,$1A(a0)
0001D058 4EF9 0000 DFF8             		jmp	DisplaySprite
0001D05E                            ; ===========================================================================
0001D05E                            ; ---------------------------------------------------------------------------
0001D05E                            ; Sprite mappings - SCORE, TIME, RINGS
0001D05E                            ; ---------------------------------------------------------------------------
0001D05E                            Map_obj21:
0001D05E                            	include "_maps\obj21.asm"
0001D05E                            ; ---------------------------------------------------------------------------
0001D05E                            ; Sprite mappings - SCORE, TIME, RINGS
0001D05E                            ; ---------------------------------------------------------------------------
0001D05E 0000 0000                  		dc.w byte_1C5BC-Map_obj21, byte_1C5F0-Map_obj21
0001D062 0000 0000                  		dc.w byte_1C624-Map_obj21, byte_1C658-Map_obj21
0001D066 0A                         byte_1C5BC:	dc.b $A
0001D067 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001D06C 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001D071 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001D076 900D 8010 00               		dc.b $90, $D, $80, $10,	0
0001D07B 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001D080 A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
0001D085 A001 8000 20               		dc.b $A0, 1, $80, 0, $20
0001D08A A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001D08F 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001D094 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001D099 00                         		dc.b 0
0001D09A 0A                         byte_1C5F0:	dc.b $A
0001D09B 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001D0A0 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001D0A5 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001D0AA 900D 8010 00               		dc.b $90, $D, $80, $10,	0
0001D0AF 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001D0B4 A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
0001D0B9 A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
0001D0BE A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001D0C3 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001D0C8 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001D0CD 00                         		dc.b 0
0001D0CE 0A                         byte_1C624:	dc.b $A
0001D0CF 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001D0D4 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001D0D9 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001D0DE 900D A010 00               		dc.b $90, $D, $A0, $10,	0
0001D0E3 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001D0E8 A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
0001D0ED A001 8000 20               		dc.b $A0, 1, $80, 0, $20
0001D0F2 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001D0F7 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001D0FC 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001D101 00                         		dc.b 0
0001D102 0A                         byte_1C658:	dc.b $A
0001D103 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001D108 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001D10D 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001D112 900D A010 00               		dc.b $90, $D, $A0, $10,	0
0001D117 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001D11C A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
0001D121 A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
0001D126 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001D12B 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001D130 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001D136 00                         		even
0001D136 00                         		even
0001D136                            
0001D136                            ; ---------------------------------------------------------------------------
0001D136                            ; Add points subroutine
0001D136                            ; ---------------------------------------------------------------------------
0001D136                            
0001D136                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D136                            
0001D136                            
0001D136                            AddPoints:
0001D136 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; set score counter to	update
0001D13C 45F8 FFC0                  		lea	($FFFFFFC0).w,a2
0001D140 47F8 FE26                  		lea	($FFFFFE26).w,a3
0001D144 D193                       		add.l	d0,(a3)		; add d0*10 to the score
0001D146 223C 000F 423F             		move.l	#999999,d1
0001D14C B293                       		cmp.l	(a3),d1		; is #999999 higher than the score?
0001D14E 6200 0000                  		bhi.w	loc_1C6AC	; if yes, branch
0001D152 2681                       		move.l	d1,(a3)		; reset	score to #999999
0001D154 2481                       		move.l	d1,(a2)
0001D156                            
0001D156                            loc_1C6AC:
0001D156 2013                       		move.l	(a3),d0
0001D158 B092                       		cmp.l	(a2),d0
0001D15A 6500 0000                  		bcs.w	locret_1C6B6
0001D15E 2480                       		move.l	d0,(a2)
0001D160                            
0001D160                            locret_1C6B6:
0001D160 4E75                       		rts	
0001D162                            ; End of function AddPoints
0001D162                            
0001D162                            ; ---------------------------------------------------------------------------
0001D162                            ; Subroutine to	update the HUD
0001D162                            ; ---------------------------------------------------------------------------
0001D162                            
0001D162                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D162                            
0001D162                            
0001D162                            HudUpdate:
0001D162 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	on?
0001D166 6600 0000                  		bne.w	HudDebug	; if yes, branch
0001D16A 4A38 FE1F                  		tst.b	($FFFFFE1F).w	; does the score need updating?
0001D16E 6700                       		beq.s	Hud_ChkRings	; if not, branch
0001D170 4238 FE1F                  		clr.b	($FFFFFE1F).w
0001D174 203C 5C80 0003             		move.l	#$5C800003,d0	; set VRAM address
0001D17A 2238 FE26                  		move.l	($FFFFFE26).w,d1 ; load	score
0001D17E 6100 0000                  		bsr.w	Hud_Score
0001D182                            
0001D182                            Hud_ChkRings:
0001D182 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001D186 6700                       		beq.s	Hud_ChkTime	; if not, branch
0001D188 6A00                       		bpl.s	loc_1C6E4
0001D18A 6100 0000                  		bsr.w	Hud_LoadZero
0001D18E                            
0001D18E                            loc_1C6E4:
0001D18E 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001D192 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001D198 7200                       		moveq	#0,d1
0001D19A 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001D19E 6100 0000                  		bsr.w	Hud_Rings
0001D1A2                            
0001D1A2                            Hud_ChkTime:
0001D1A2 4A38 FE1E                  		tst.b	($FFFFFE1E).w	; does the time	need updating?
0001D1A6 6700                       		beq.s	Hud_ChkLives	; if not, branch
0001D1A8 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001D1AC 6600                       		bne.s	Hud_ChkLives	; if yes, branch
0001D1AE 43F8 FE22                  		lea	($FFFFFE22).w,a1
0001D1B2 0C99 0009 3B3B             		cmpi.l	#$93B3B,(a1)+	; is the time 9.59?
0001D1B8 6700                       		beq.s	TimeOver	; if yes, branch
0001D1BA 5221                       		addq.b	#1,-(a1)
0001D1BC 0C11 003C                  		cmpi.b	#60,(a1)
0001D1C0 6500                       		bcs.s	Hud_ChkLives
0001D1C2 12BC 0000                  		move.b	#0,(a1)
0001D1C6 5221                       		addq.b	#1,-(a1)
0001D1C8 0C11 003C                  		cmpi.b	#60,(a1)
0001D1CC 6500                       		bcs.s	loc_1C734
0001D1CE 12BC 0000                  		move.b	#0,(a1)
0001D1D2 5221                       		addq.b	#1,-(a1)
0001D1D4 0C11 0009                  		cmpi.b	#9,(a1)
0001D1D8 6500                       		bcs.s	loc_1C734
0001D1DA 12BC 0009                  		move.b	#9,(a1)
0001D1DE                            
0001D1DE                            loc_1C734:
0001D1DE 203C 5E40 0003             		move.l	#$5E400003,d0
0001D1E4 7200                       		moveq	#0,d1
0001D1E6 1238 FE23                  		move.b	($FFFFFE23).w,d1 ; load	minutes
0001D1EA 6100 0000                  		bsr.w	Hud_Mins
0001D1EE 203C 5EC0 0003             		move.l	#$5EC00003,d0
0001D1F4 7200                       		moveq	#0,d1
0001D1F6 1238 FE24                  		move.b	($FFFFFE24).w,d1 ; load	seconds
0001D1FA 6100 0000                  		bsr.w	Hud_Secs
0001D1FE                            
0001D1FE                            Hud_ChkLives:
0001D1FE 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001D202 6700                       		beq.s	Hud_ChkBonus	; if not, branch
0001D204 4238 FE1C                  		clr.b	($FFFFFE1C).w
0001D208 6100 0000                  		bsr.w	Hud_Lives
0001D20C                            
0001D20C                            Hud_ChkBonus:
0001D20C 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; do time/ring bonus counters need updating?
0001D210 6700                       		beq.s	Hud_End		; if not, branch
0001D212 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001D216 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l
0001D220 7200                       		moveq	#0,d1
0001D222 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001D226 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001D22A 7200                       		moveq	#0,d1
0001D22C 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001D230 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001D234                            
0001D234                            Hud_End:
0001D234 4E75                       		rts	
0001D236                            ; ===========================================================================
0001D236                            
0001D236                            TimeOver:				; XREF: Hud_ChkTime
0001D236 4238 FE1E                  		clr.b	($FFFFFE1E).w
0001D23A 41F8 D000                  		lea	($FFFFD000).w,a0
0001D23E 2448                       		movea.l	a0,a2
0001D240 6100 E950                  		bsr.w	KillSonic
0001D244 11FC 0001 FE1A             		move.b	#1,($FFFFFE1A).w
0001D24A 4E75                       		rts	
0001D24C                            ; ===========================================================================
0001D24C                            
0001D24C                            HudDebug:				; XREF: HudUpdate
0001D24C 6100 0000                  		bsr.w	HudDb_XY
0001D250 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001D254 6700                       		beq.s	HudDb_ObjCount	; if not, branch
0001D256 6A00                       		bpl.s	HudDb_Rings
0001D258 6100 0000                  		bsr.w	Hud_LoadZero
0001D25C                            
0001D25C                            HudDb_Rings:
0001D25C 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001D260 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001D266 7200                       		moveq	#0,d1
0001D268 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001D26C 6100 0000                  		bsr.w	Hud_Rings
0001D270                            
0001D270                            HudDb_ObjCount:
0001D270 203C 5EC0 0003             		move.l	#$5EC00003,d0	; set VRAM address
0001D276 7200                       		moveq	#0,d1
0001D278 1238 F62C                  		move.b	($FFFFF62C).w,d1 ; load	"number	of objects" counter
0001D27C 6100 0000                  		bsr.w	Hud_Secs
0001D280 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001D284 6700                       		beq.s	HudDb_ChkBonus	; if not, branch
0001D286 4238 FE1C                  		clr.b	($FFFFFE1C).w
0001D28A 6100 0000                  		bsr.w	Hud_Lives
0001D28E                            
0001D28E                            HudDb_ChkBonus:
0001D28E 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; does the ring/time bonus counter need	updating?
0001D292 6700                       		beq.s	HudDb_End	; if not, branch
0001D294 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001D298 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l ; set VRAM address
0001D2A2 7200                       		moveq	#0,d1
0001D2A4 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001D2A8 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001D2AC 7200                       		moveq	#0,d1
0001D2AE 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001D2B2 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001D2B6                            
0001D2B6                            HudDb_End:
0001D2B6 4E75                       		rts	
0001D2B8                            ; End of function HudUpdate
0001D2B8                            
0001D2B8                            ; ---------------------------------------------------------------------------
0001D2B8                            ; Subroutine to	load "0" on the	HUD
0001D2B8                            ; ---------------------------------------------------------------------------
0001D2B8                            
0001D2B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D2B8                            
0001D2B8                            
0001D2B8                            Hud_LoadZero:				; XREF: HudUpdate
0001D2B8 23FC 5F40 0003 00C0 0004   		move.l	#$5F400003,($C00004).l
0001D2C2 45FA 0000                  		lea	Hud_TilesZero(pc),a2
0001D2C6 343C 0002                  		move.w	#2,d2
0001D2CA 6000                       		bra.s	loc_1C83E
0001D2CC                            ; End of function Hud_LoadZero
0001D2CC                            
0001D2CC                            ; ---------------------------------------------------------------------------
0001D2CC                            ; Subroutine to	load uncompressed HUD patterns ("E", "0", colon)
0001D2CC                            ; ---------------------------------------------------------------------------
0001D2CC                            
0001D2CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D2CC                            
0001D2CC                            
0001D2CC                            Hud_Base:				; XREF: Level; SS_EndLoop; EndingSequence
0001D2CC 4DF9 00C0 0000             		lea	($C00000).l,a6
0001D2D2 6100 0000                  		bsr.w	Hud_Lives
0001D2D6 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l
0001D2E0 45FA 0000                  		lea	Hud_TilesBase(pc),a2
0001D2E4 343C 000E                  		move.w	#$E,d2
0001D2E8                            
0001D2E8                            loc_1C83E:				; XREF: Hud_LoadZero
0001D2E8 43FA 0000                  		lea	Art_Hud(pc),a1
0001D2EC                            
0001D2EC                            loc_1C842:
0001D2EC 323C 000F                  		move.w	#$F,d1
0001D2F0 101A                       		move.b	(a2)+,d0
0001D2F2 6B00                       		bmi.s	loc_1C85E
0001D2F4 4880                       		ext.w	d0
0001D2F6 EB48                       		lsl.w	#5,d0
0001D2F8 47F1 0000                  		lea	(a1,d0.w),a3
0001D2FC                            
0001D2FC                            loc_1C852:
0001D2FC 2C9B                       		move.l	(a3)+,(a6)
0001D2FE 51C9 FFFC                  		dbf	d1,loc_1C852
0001D302                            
0001D302                            loc_1C858:
0001D302 51CA FFE8                  		dbf	d2,loc_1C842
0001D306                            
0001D306 4E75                       		rts	
0001D308                            ; ===========================================================================
0001D308                            
0001D308                            loc_1C85E:
0001D308 2CBC 0000 0000             		move.l	#0,(a6)
0001D30E 51C9 FFF8                  		dbf	d1,loc_1C85E
0001D312                            
0001D312 60EE                       		bra.s	loc_1C858
0001D314                            ; End of function Hud_Base
0001D314                            
0001D314                            ; ===========================================================================
0001D314 16FF FFFF FFFF FF00 0014+  Hud_TilesBase:	dc.b $16, $FF, $FF, $FF, $FF, $FF, $FF,	0, 0, $14, 0, 0
0001D320 FFFF 0000                  Hud_TilesZero:	dc.b $FF, $FF, 0, 0
0001D324                            ; ---------------------------------------------------------------------------
0001D324                            ; Subroutine to	load debug mode	numbers	patterns
0001D324                            ; ---------------------------------------------------------------------------
0001D324                            
0001D324                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D324                            
0001D324                            
0001D324                            HudDb_XY:				; XREF: HudDebug
0001D324 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l ; set VRAM address
0001D32E 3238 F700                  		move.w	($FFFFF700).w,d1 ; load	camera x-position
0001D332 4841                       		swap	d1
0001D334 3238 D008                  		move.w	($FFFFD008).w,d1 ; load	Sonic's x-position
0001D338 6100                       		bsr.s	HudDb_XY2
0001D33A 3238 F704                  		move.w	($FFFFF704).w,d1 ; load	camera y-position
0001D33E 4841                       		swap	d1
0001D340 3238 D00C                  		move.w	($FFFFD00C).w,d1 ; load	Sonic's y-position
0001D344                            ; End of function HudDb_XY
0001D344                            
0001D344                            
0001D344                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D344                            
0001D344                            
0001D344                            HudDb_XY2:
0001D344 7C07                       		moveq	#7,d6
0001D346 43F9 0000 0606             		lea	(Art_Text).l,a1
0001D34C                            
0001D34C                            HudDb_XYLoop:
0001D34C E959                       		rol.w	#4,d1
0001D34E 3401                       		move.w	d1,d2
0001D350 0242 000F                  		andi.w	#$F,d2
0001D354 0C42 000A                  		cmpi.w	#$A,d2
0001D358 6500                       		bcs.s	loc_1C8B2
0001D35A 5E42                       		addq.w	#7,d2
0001D35C                            
0001D35C                            loc_1C8B2:
0001D35C EB4A                       		lsl.w	#5,d2
0001D35E 47F1 2000                  		lea	(a1,d2.w),a3
0001D362 2C9B                       		move.l	(a3)+,(a6)
0001D364 2C9B                       		move.l	(a3)+,(a6)
0001D366 2C9B                       		move.l	(a3)+,(a6)
0001D368 2C9B                       		move.l	(a3)+,(a6)
0001D36A 2C9B                       		move.l	(a3)+,(a6)
0001D36C 2C9B                       		move.l	(a3)+,(a6)
0001D36E 2C9B                       		move.l	(a3)+,(a6)
0001D370 2C9B                       		move.l	(a3)+,(a6)
0001D372 4841                       		swap	d1
0001D374 51CE FFD6                  		dbf	d6,HudDb_XYLoop	; repeat 7 more	times
0001D378                            
0001D378 4E75                       		rts	
0001D37A                            ; End of function HudDb_XY2
0001D37A                            
0001D37A                            ; ---------------------------------------------------------------------------
0001D37A                            ; Subroutine to	load rings numbers patterns
0001D37A                            ; ---------------------------------------------------------------------------
0001D37A                            
0001D37A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D37A                            
0001D37A                            
0001D37A                            Hud_Rings:				; XREF: HudUpdate
0001D37A 45F9 0000 0000             		lea	(Hud_100).l,a2
0001D380 7C02                       		moveq	#2,d6
0001D382 6000                       		bra.s	Hud_LoadArt
0001D384                            ; End of function Hud_Rings
0001D384                            
0001D384                            ; ---------------------------------------------------------------------------
0001D384                            ; Subroutine to	load score numbers patterns
0001D384                            ; ---------------------------------------------------------------------------
0001D384                            
0001D384                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D384                            
0001D384                            
0001D384                            Hud_Score:				; XREF: HudUpdate
0001D384 45F9 0000 0000             		lea	(Hud_100000).l,a2
0001D38A 7C05                       		moveq	#5,d6
0001D38C                            
0001D38C                            Hud_LoadArt:
0001D38C 7800                       		moveq	#0,d4
0001D38E 43FA 0000                  		lea	Art_Hud(pc),a1
0001D392                            
0001D392                            Hud_ScoreLoop:
0001D392 7400                       		moveq	#0,d2
0001D394 261A                       		move.l	(a2)+,d3
0001D396                            
0001D396                            loc_1C8EC:
0001D396 9283                       		sub.l	d3,d1
0001D398 6500                       		bcs.s	loc_1C8F4
0001D39A 5242                       		addq.w	#1,d2
0001D39C 60F8                       		bra.s	loc_1C8EC
0001D39E                            ; ===========================================================================
0001D39E                            
0001D39E                            loc_1C8F4:
0001D39E D283                       		add.l	d3,d1
0001D3A0 4A42                       		tst.w	d2
0001D3A2 6700                       		beq.s	loc_1C8FE
0001D3A4 383C 0001                  		move.w	#1,d4
0001D3A8                            
0001D3A8                            loc_1C8FE:
0001D3A8 4A44                       		tst.w	d4
0001D3AA 6700                       		beq.s	loc_1C92C
0001D3AC ED4A                       		lsl.w	#6,d2
0001D3AE 2D40 0004                  		move.l	d0,4(a6)
0001D3B2 47F1 2000                  		lea	(a1,d2.w),a3
0001D3B6 2C9B                       		move.l	(a3)+,(a6)
0001D3B8 2C9B                       		move.l	(a3)+,(a6)
0001D3BA 2C9B                       		move.l	(a3)+,(a6)
0001D3BC 2C9B                       		move.l	(a3)+,(a6)
0001D3BE 2C9B                       		move.l	(a3)+,(a6)
0001D3C0 2C9B                       		move.l	(a3)+,(a6)
0001D3C2 2C9B                       		move.l	(a3)+,(a6)
0001D3C4 2C9B                       		move.l	(a3)+,(a6)
0001D3C6 2C9B                       		move.l	(a3)+,(a6)
0001D3C8 2C9B                       		move.l	(a3)+,(a6)
0001D3CA 2C9B                       		move.l	(a3)+,(a6)
0001D3CC 2C9B                       		move.l	(a3)+,(a6)
0001D3CE 2C9B                       		move.l	(a3)+,(a6)
0001D3D0 2C9B                       		move.l	(a3)+,(a6)
0001D3D2 2C9B                       		move.l	(a3)+,(a6)
0001D3D4 2C9B                       		move.l	(a3)+,(a6)
0001D3D6                            
0001D3D6                            loc_1C92C:
0001D3D6 0680 0040 0000             		addi.l	#$400000,d0
0001D3DC 51CE FFB4                  		dbf	d6,Hud_ScoreLoop
0001D3E0                            
0001D3E0 4E75                       		rts	
0001D3E2                            ; End of function Hud_Score
0001D3E2                            
0001D3E2                            ; ---------------------------------------------------------------------------
0001D3E2                            ; Subroutine to	load countdown numbers on the continue screen
0001D3E2                            ; ---------------------------------------------------------------------------
0001D3E2                            
0001D3E2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D3E2                            
0001D3E2                            
0001D3E2                            ContScrCounter:				; XREF: ContinueScreen
0001D3E2 23FC 5F80 0003 00C0 0004   		move.l	#$5F800003,($C00004).l ; set VRAM address
0001D3EC 4DF9 00C0 0000             		lea	($C00000).l,a6
0001D3F2 45F9 0000 0000             		lea	(Hud_10).l,a2
0001D3F8 7C01                       		moveq	#1,d6
0001D3FA 7800                       		moveq	#0,d4
0001D3FC 43FA 0000                  		lea	Art_Hud(pc),a1 ; load numbers patterns
0001D400                            
0001D400                            ContScr_Loop:
0001D400 7400                       		moveq	#0,d2
0001D402 261A                       		move.l	(a2)+,d3
0001D404                            
0001D404                            loc_1C95A:
0001D404 9283                       		sub.l	d3,d1
0001D406 6500                       		bcs.s	loc_1C962
0001D408 5242                       		addq.w	#1,d2
0001D40A 60F8                       		bra.s	loc_1C95A
0001D40C                            ; ===========================================================================
0001D40C                            
0001D40C                            loc_1C962:
0001D40C D283                       		add.l	d3,d1
0001D40E ED4A                       		lsl.w	#6,d2
0001D410 47F1 2000                  		lea	(a1,d2.w),a3
0001D414 2C9B                       		move.l	(a3)+,(a6)
0001D416 2C9B                       		move.l	(a3)+,(a6)
0001D418 2C9B                       		move.l	(a3)+,(a6)
0001D41A 2C9B                       		move.l	(a3)+,(a6)
0001D41C 2C9B                       		move.l	(a3)+,(a6)
0001D41E 2C9B                       		move.l	(a3)+,(a6)
0001D420 2C9B                       		move.l	(a3)+,(a6)
0001D422 2C9B                       		move.l	(a3)+,(a6)
0001D424 2C9B                       		move.l	(a3)+,(a6)
0001D426 2C9B                       		move.l	(a3)+,(a6)
0001D428 2C9B                       		move.l	(a3)+,(a6)
0001D42A 2C9B                       		move.l	(a3)+,(a6)
0001D42C 2C9B                       		move.l	(a3)+,(a6)
0001D42E 2C9B                       		move.l	(a3)+,(a6)
0001D430 2C9B                       		move.l	(a3)+,(a6)
0001D432 2C9B                       		move.l	(a3)+,(a6)
0001D434 51CE FFCA                  		dbf	d6,ContScr_Loop	; repeat 1 more	time
0001D438                            
0001D438 4E75                       		rts	
0001D43A                            ; End of function ContScrCounter
0001D43A                            
0001D43A                            ; ===========================================================================
0001D43A                            ; ---------------------------------------------------------------------------
0001D43A                            ; HUD counter sizes
0001D43A                            ; ---------------------------------------------------------------------------
0001D43A 0001 86A0                  Hud_100000:	dc.l 100000		; XREF: Hud_Score
0001D43E 0000 2710                  Hud_10000:	dc.l 10000
0001D442 0000 03E8                  Hud_1000:	dc.l 1000		; XREF: Hud_TimeRingBonus
0001D446 0000 0064                  Hud_100:	dc.l 100		; XREF: Hud_Rings
0001D44A 0000 000A                  Hud_10:		dc.l 10			; XREF: ContScrCounter; Hud_Secs; Hud_Lives
0001D44E 0000 0001                  Hud_1:		dc.l 1			; XREF: Hud_Mins
0001D452                            
0001D452                            ; ---------------------------------------------------------------------------
0001D452                            ; Subroutine to	load time numbers patterns
0001D452                            ; ---------------------------------------------------------------------------
0001D452                            
0001D452                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D452                            
0001D452                            
0001D452                            Hud_Mins:				; XREF: Hud_ChkTime
0001D452 45F9 0001 D44E             		lea	(Hud_1).l,a2
0001D458 7C00                       		moveq	#0,d6
0001D45A 6000                       		bra.s	loc_1C9BA
0001D45C                            ; End of function Hud_Mins
0001D45C                            
0001D45C                            
0001D45C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D45C                            
0001D45C                            
0001D45C                            Hud_Secs:				; XREF: Hud_ChkTime
0001D45C 45F9 0001 D44A             		lea	(Hud_10).l,a2
0001D462 7C01                       		moveq	#1,d6
0001D464                            
0001D464                            loc_1C9BA:
0001D464 7800                       		moveq	#0,d4
0001D466 43FA 0000                  		lea	Art_Hud(pc),a1
0001D46A                            
0001D46A                            Hud_TimeLoop:
0001D46A 7400                       		moveq	#0,d2
0001D46C 261A                       		move.l	(a2)+,d3
0001D46E                            
0001D46E                            loc_1C9C4:
0001D46E 9283                       		sub.l	d3,d1
0001D470 6500                       		bcs.s	loc_1C9CC
0001D472 5242                       		addq.w	#1,d2
0001D474 60F8                       		bra.s	loc_1C9C4
0001D476                            ; ===========================================================================
0001D476                            
0001D476                            loc_1C9CC:
0001D476 D283                       		add.l	d3,d1
0001D478 4A42                       		tst.w	d2
0001D47A 6700                       		beq.s	loc_1C9D6
0001D47C 383C 0001                  		move.w	#1,d4
0001D480                            
0001D480                            loc_1C9D6:
0001D480 ED4A                       		lsl.w	#6,d2
0001D482 2D40 0004                  		move.l	d0,4(a6)
0001D486 47F1 2000                  		lea	(a1,d2.w),a3
0001D48A 2C9B                       		move.l	(a3)+,(a6)
0001D48C 2C9B                       		move.l	(a3)+,(a6)
0001D48E 2C9B                       		move.l	(a3)+,(a6)
0001D490 2C9B                       		move.l	(a3)+,(a6)
0001D492 2C9B                       		move.l	(a3)+,(a6)
0001D494 2C9B                       		move.l	(a3)+,(a6)
0001D496 2C9B                       		move.l	(a3)+,(a6)
0001D498 2C9B                       		move.l	(a3)+,(a6)
0001D49A 2C9B                       		move.l	(a3)+,(a6)
0001D49C 2C9B                       		move.l	(a3)+,(a6)
0001D49E 2C9B                       		move.l	(a3)+,(a6)
0001D4A0 2C9B                       		move.l	(a3)+,(a6)
0001D4A2 2C9B                       		move.l	(a3)+,(a6)
0001D4A4 2C9B                       		move.l	(a3)+,(a6)
0001D4A6 2C9B                       		move.l	(a3)+,(a6)
0001D4A8 2C9B                       		move.l	(a3)+,(a6)
0001D4AA 0680 0040 0000             		addi.l	#$400000,d0
0001D4B0 51CE FFB8                  		dbf	d6,Hud_TimeLoop
0001D4B4                            
0001D4B4 4E75                       		rts	
0001D4B6                            ; End of function Hud_Secs
0001D4B6                            
0001D4B6                            ; ---------------------------------------------------------------------------
0001D4B6                            ; Subroutine to	load time/ring bonus numbers patterns
0001D4B6                            ; ---------------------------------------------------------------------------
0001D4B6                            
0001D4B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D4B6                            
0001D4B6                            
0001D4B6                            Hud_TimeRingBonus:			; XREF: Hud_ChkBonus
0001D4B6 45F9 0001 D442             		lea	(Hud_1000).l,a2
0001D4BC 7C03                       		moveq	#3,d6
0001D4BE 7800                       		moveq	#0,d4
0001D4C0 43FA 0000                  		lea	Art_Hud(pc),a1
0001D4C4                            
0001D4C4                            Hud_BonusLoop:
0001D4C4 7400                       		moveq	#0,d2
0001D4C6 261A                       		move.l	(a2)+,d3
0001D4C8                            
0001D4C8                            loc_1CA1E:
0001D4C8 9283                       		sub.l	d3,d1
0001D4CA 6500                       		bcs.s	loc_1CA26
0001D4CC 5242                       		addq.w	#1,d2
0001D4CE 60F8                       		bra.s	loc_1CA1E
0001D4D0                            ; ===========================================================================
0001D4D0                            
0001D4D0                            loc_1CA26:
0001D4D0 D283                       		add.l	d3,d1
0001D4D2 4A42                       		tst.w	d2
0001D4D4 6700                       		beq.s	loc_1CA30
0001D4D6 383C 0001                  		move.w	#1,d4
0001D4DA                            
0001D4DA                            loc_1CA30:
0001D4DA 4A44                       		tst.w	d4
0001D4DC 6700                       		beq.s	Hud_ClrBonus
0001D4DE ED4A                       		lsl.w	#6,d2
0001D4E0 47F1 2000                  		lea	(a1,d2.w),a3
0001D4E4 2C9B                       		move.l	(a3)+,(a6)
0001D4E6 2C9B                       		move.l	(a3)+,(a6)
0001D4E8 2C9B                       		move.l	(a3)+,(a6)
0001D4EA 2C9B                       		move.l	(a3)+,(a6)
0001D4EC 2C9B                       		move.l	(a3)+,(a6)
0001D4EE 2C9B                       		move.l	(a3)+,(a6)
0001D4F0 2C9B                       		move.l	(a3)+,(a6)
0001D4F2 2C9B                       		move.l	(a3)+,(a6)
0001D4F4 2C9B                       		move.l	(a3)+,(a6)
0001D4F6 2C9B                       		move.l	(a3)+,(a6)
0001D4F8 2C9B                       		move.l	(a3)+,(a6)
0001D4FA 2C9B                       		move.l	(a3)+,(a6)
0001D4FC 2C9B                       		move.l	(a3)+,(a6)
0001D4FE 2C9B                       		move.l	(a3)+,(a6)
0001D500 2C9B                       		move.l	(a3)+,(a6)
0001D502 2C9B                       		move.l	(a3)+,(a6)
0001D504                            
0001D504                            loc_1CA5A:
0001D504 51CE FFBE                  		dbf	d6,Hud_BonusLoop ; repeat 3 more times
0001D508                            
0001D508 4E75                       		rts	
0001D50A                            ; ===========================================================================
0001D50A                            
0001D50A                            Hud_ClrBonus:
0001D50A 7A0F                       		moveq	#$F,d5
0001D50C                            
0001D50C                            Hud_ClrBonusLoop:
0001D50C 2CBC 0000 0000             		move.l	#0,(a6)
0001D512 51CD FFF8                  		dbf	d5,Hud_ClrBonusLoop
0001D516                            
0001D516 60EC                       		bra.s	loc_1CA5A
0001D518                            ; End of function Hud_TimeRingBonus
0001D518                            
0001D518                            ; ---------------------------------------------------------------------------
0001D518                            ; Subroutine to	load uncompressed lives	counter	patterns
0001D518                            ; ---------------------------------------------------------------------------
0001D518                            
0001D518                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D518                            
0001D518                            
0001D518                            Hud_Lives:				; XREF: Hud_ChkLives
0001D518 203C 7BA0 0003             		move.l	#$7BA00003,d0	; set VRAM address
0001D51E 7200                       		moveq	#0,d1
0001D520 1238 FE12                  		move.b	($FFFFFE12).w,d1 ; load	number of lives
0001D524 45F9 0001 D44A             		lea	(Hud_10).l,a2
0001D52A 7C01                       		moveq	#1,d6
0001D52C 7800                       		moveq	#0,d4
0001D52E 43FA 0000                  		lea	Art_LivesNums(pc),a1
0001D532                            
0001D532                            Hud_LivesLoop:
0001D532 2D40 0004                  		move.l	d0,4(a6)
0001D536 7400                       		moveq	#0,d2
0001D538 261A                       		move.l	(a2)+,d3
0001D53A                            
0001D53A                            loc_1CA90:
0001D53A 9283                       		sub.l	d3,d1
0001D53C 6500                       		bcs.s	loc_1CA98
0001D53E 5242                       		addq.w	#1,d2
0001D540 60F8                       		bra.s	loc_1CA90
0001D542                            ; ===========================================================================
0001D542                            
0001D542                            loc_1CA98:
0001D542 D283                       		add.l	d3,d1
0001D544 4A42                       		tst.w	d2
0001D546 6700                       		beq.s	loc_1CAA2
0001D548 383C 0001                  		move.w	#1,d4
0001D54C                            
0001D54C                            loc_1CAA2:
0001D54C 4A44                       		tst.w	d4
0001D54E 6700                       		beq.s	Hud_ClrLives
0001D550                            
0001D550                            loc_1CAA6:
0001D550 EB4A                       		lsl.w	#5,d2
0001D552 47F1 2000                  		lea	(a1,d2.w),a3
0001D556 2C9B                       		move.l	(a3)+,(a6)
0001D558 2C9B                       		move.l	(a3)+,(a6)
0001D55A 2C9B                       		move.l	(a3)+,(a6)
0001D55C 2C9B                       		move.l	(a3)+,(a6)
0001D55E 2C9B                       		move.l	(a3)+,(a6)
0001D560 2C9B                       		move.l	(a3)+,(a6)
0001D562 2C9B                       		move.l	(a3)+,(a6)
0001D564 2C9B                       		move.l	(a3)+,(a6)
0001D566                            
0001D566                            loc_1CABC:
0001D566 0680 0040 0000             		addi.l	#$400000,d0
0001D56C 51CE FFC4                  		dbf	d6,Hud_LivesLoop ; repeat 1 more time
0001D570                            
0001D570 4E75                       		rts	
0001D572                            ; ===========================================================================
0001D572                            
0001D572                            Hud_ClrLives:
0001D572 4A46                       		tst.w	d6
0001D574 67DA                       		beq.s	loc_1CAA6
0001D576 7A07                       		moveq	#7,d5
0001D578                            
0001D578                            Hud_ClrLivesLoop:
0001D578 2CBC 0000 0000             		move.l	#0,(a6)
0001D57E 51CD FFF8                  		dbf	d5,Hud_ClrLivesLoop
0001D582 60E2                       		bra.s	loc_1CABC
0001D584                            ; End of function Hud_Lives
0001D584                            
0001D584                            ; ===========================================================================
0001D584                            Art_Hud:	incbin	artunc\HUD.bin		; 8x16 pixel numbers on HUD
0001D884                            		even
0001D884                            Art_LivesNums:	incbin	artunc\livescnt.bin	; 8x8 pixel numbers on lives counter
0001D9C4                            		even
0001D9C4                            ; ===========================================================================
0001D9C4                            ; ---------------------------------------------------------------------------
0001D9C4                            ; When debug mode is currently in use
0001D9C4                            ; ---------------------------------------------------------------------------
0001D9C4                            
0001D9C4                            DebugMode:				; XREF: Obj01; Obj09
0001D9C4 7000                       		moveq	#0,d0
0001D9C6 1038 FE08                  		move.b	($FFFFFE08).w,d0
0001D9CA 323B 0000                  		move.w	Debug_Index(pc,d0.w),d1
0001D9CE 4EFB 1000                  		jmp	Debug_Index(pc,d1.w)
0001D9D2                            ; ===========================================================================
0001D9D2 0000                       Debug_Index:	dc.w Debug_Main-Debug_Index
0001D9D4 0000                       		dc.w Debug_Skip-Debug_Index
0001D9D6                            ; ===========================================================================
0001D9D6                            
0001D9D6                            Debug_Main:				; XREF: Debug_Index
0001D9D6 5438 FE08                  		addq.b	#2,($FFFFFE08).w
0001D9DA 31F8 F72C FEF0             		move.w	($FFFFF72C).w,($FFFFFEF0).w ; buffer level x-boundary
0001D9E0 31F8 F726 FEF2             		move.w	($FFFFF726).w,($FFFFFEF2).w ; buffer level y-boundary
0001D9E6 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
0001D9EC 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
0001D9F2 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
0001D9F8 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
0001D9FE 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
0001DA04 117C 0000 001A             		move.b	#0,$1A(a0)
0001DA0A 117C 0000 001C             		move.b	#0,$1C(a0)
0001DA10 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)?
0001DA16 6600                       		bne.s	Debug_Zone	; if not, branch
0001DA18 31FC 0000 F782             		move.w	#0,($FFFFF782).w ; stop	special	stage rotating
0001DA1E 31FC 0000 F780             		move.w	#0,($FFFFF780).w ; make	special	stage "upright"
0001DA24 7006                       		moveq	#6,d0		; use 6th debug	item list
0001DA26 6000                       		bra.s	Debug_UseList
0001DA28                            ; ===========================================================================
0001DA28                            
0001DA28                            Debug_Zone:
0001DA28 7000                       		moveq	#0,d0
0001DA2A 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001DA2E                            
0001DA2E                            Debug_UseList:
0001DA2E 45F9 0000 0000             		lea	(DebugList).l,a2
0001DA34 D040                       		add.w	d0,d0
0001DA36 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001DA3A 3C1A                       		move.w	(a2)+,d6
0001DA3C BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001DA40 6200                       		bhi.s	loc_1CF9E
0001DA42 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w
0001DA48                            
0001DA48                            loc_1CF9E:
0001DA48 6100 0000                  		bsr.w	Debug_ShowItem
0001DA4C 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001DA52 11FC 0001 FE0B             		move.b	#1,($FFFFFE0B).w
0001DA58                            
0001DA58                            Debug_Skip:				; XREF: Debug_Index
0001DA58 7006                       		moveq	#6,d0
0001DA5A 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
0001DA60 6700                       		beq.s	loc_1CFBE
0001DA62 7000                       		moveq	#0,d0
0001DA64 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001DA68                            
0001DA68                            loc_1CFBE:
0001DA68 45F9 0000 0000             		lea	(DebugList).l,a2
0001DA6E D040                       		add.w	d0,d0
0001DA70 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001DA74 3C1A                       		move.w	(a2)+,d6
0001DA76 6100 0000                  		bsr.w	Debug_Control
0001DA7A 4EF9 0000 DFF8             		jmp	DisplaySprite
0001DA80                            
0001DA80                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DA80                            
0001DA80                            
0001DA80                            Debug_Control:
0001DA80 7800                       		moveq	#0,d4
0001DA82 323C 0001                  		move.w	#1,d1
0001DA86 1838 F605                  		move.b	($FFFFF605).w,d4
0001DA8A 0244 000F                  		andi.w	#$F,d4		; is up/down/left/right	pressed?
0001DA8E 6600                       		bne.s	loc_1D018	; if yes, branch
0001DA90 1038 F604                  		move.b	($FFFFF604).w,d0
0001DA94 0240 000F                  		andi.w	#$F,d0
0001DA98 6600                       		bne.s	loc_1D000
0001DA9A 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001DAA0 11FC 000F FE0B             		move.b	#$F,($FFFFFE0B).w
0001DAA6 6000 0000                  		bra.w	Debug_BackItem
0001DAAA                            ; ===========================================================================
0001DAAA                            
0001DAAA                            loc_1D000:
0001DAAA 5338 FE0A                  		subq.b	#1,($FFFFFE0A).w
0001DAAE 6600                       		bne.s	loc_1D01C
0001DAB0 11FC 0001 FE0A             		move.b	#1,($FFFFFE0A).w
0001DAB6 5238 FE0B                  		addq.b	#1,($FFFFFE0B).w
0001DABA 6600                       		bne.s	loc_1D018
0001DABC 11FC 00FF FE0B             		move.b	#-1,($FFFFFE0B).w
0001DAC2                            
0001DAC2                            loc_1D018:
0001DAC2 1838 F604                  		move.b	($FFFFF604).w,d4
0001DAC6                            
0001DAC6                            loc_1D01C:
0001DAC6 7200                       		moveq	#0,d1
0001DAC8 1238 FE0B                  		move.b	($FFFFFE0B).w,d1
0001DACC 5241                       		addq.w	#1,d1
0001DACE 4841                       		swap	d1
0001DAD0 E881                       		asr.l	#4,d1
0001DAD2 2428 000C                  		move.l	$C(a0),d2
0001DAD6 2628 0008                  		move.l	8(a0),d3
0001DADA 0804 0000                  		btst	#0,d4		; is up	being pressed?
0001DADE 6700                       		beq.s	loc_1D03C	; if not, branch
0001DAE0 9481                       		sub.l	d1,d2
0001DAE2 6400                       		bcc.s	loc_1D03C
0001DAE4 7400                       		moveq	#0,d2
0001DAE6                            
0001DAE6                            loc_1D03C:
0001DAE6 0804 0001                  		btst	#1,d4		; is down being	pressed?
0001DAEA 6700                       		beq.s	loc_1D052	; if not, branch
0001DAEC D481                       		add.l	d1,d2
0001DAEE 0C82 07FF 0000             		cmpi.l	#$7FF0000,d2
0001DAF4 6500                       		bcs.s	loc_1D052
0001DAF6 243C 07FF 0000             		move.l	#$7FF0000,d2
0001DAFC                            
0001DAFC                            loc_1D052:
0001DAFC 0804 0002                  		btst	#2,d4
0001DB00 6700                       		beq.s	loc_1D05E
0001DB02 9681                       		sub.l	d1,d3
0001DB04 6400                       		bcc.s	loc_1D05E
0001DB06 7600                       		moveq	#0,d3
0001DB08                            
0001DB08                            loc_1D05E:
0001DB08 0804 0003                  		btst	#3,d4
0001DB0C 6700                       		beq.s	loc_1D066
0001DB0E D681                       		add.l	d1,d3
0001DB10                            
0001DB10                            loc_1D066:
0001DB10 2142 000C                  		move.l	d2,$C(a0)
0001DB14 2143 0008                  		move.l	d3,8(a0)
0001DB18                            
0001DB18                            Debug_BackItem:
0001DB18 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
0001DB1E 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001DB20 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001DB26 6700                       		beq.s	Debug_NextItem	; if not, branch
0001DB28 5338 FE06                  		subq.b	#1,($FFFFFE06).w ; go back 1 item
0001DB2C 6400                       		bcc.s	Debug_NoLoop
0001DB2E DD38 FE06                  		add.b	d6,($FFFFFE06).w
0001DB32 6000                       		bra.s	Debug_NoLoop
0001DB34                            ; ===========================================================================
0001DB34                            
0001DB34                            Debug_NextItem:
0001DB34 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
0001DB3A 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001DB3C 5238 FE06                  		addq.b	#1,($FFFFFE06).w ; go forwards 1 item
0001DB40 BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001DB44 6200                       		bhi.s	Debug_NoLoop
0001DB46 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w ; loop	back to	first item
0001DB4C                            
0001DB4C                            Debug_NoLoop:
0001DB4C 6000 0000                  		bra.w	Debug_ShowItem
0001DB50                            ; ===========================================================================
0001DB50                            
0001DB50                            Debug_MakeItem:
0001DB50 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001DB56 6700                       		beq.s	Debug_Exit	; if not, branch
0001DB58 4EB9 0000 E47E             		jsr	SingleObjLoad
0001DB5E 6600                       		bne.s	Debug_Exit
0001DB60 3368 0008 0008             		move.w	8(a0),8(a1)
0001DB66 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001DB6C 12A8 0004                  		move.b	4(a0),0(a1)	; create object
0001DB70 1368 0001 0001             		move.b	1(a0),1(a1)
0001DB76 1368 0001 0022             		move.b	1(a0),$22(a1)
0001DB7C 0229 007F 0022             		andi.b	#$7F,$22(a1)
0001DB82 7000                       		moveq	#0,d0
0001DB84 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001DB88 E748                       		lsl.w	#3,d0
0001DB8A 1372 0004 0028             		move.b	4(a2,d0.w),$28(a1)
0001DB90 4E75                       		rts	
0001DB92                            ; ===========================================================================
0001DB92                            
0001DB92                            Debug_Exit:
0001DB92 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button B pressed?
0001DB98 6700                       		beq.s	Debug_DoNothing	; if not, branch
0001DB9A 7000                       		moveq	#0,d0
0001DB9C 31C0 FE08                  		move.w	d0,($FFFFFE08).w ; deactivate debug mode
0001DBA0 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001DBA8 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001DBAE 11C0 D01C                  		move.b	d0,($FFFFD01C).w
0001DBB2 3140 000A                  		move.w	d0,$A(a0)
0001DBB6 3140 000E                  		move.w	d0,$E(a0)
0001DBBA 31F8 FEF0 F72C             		move.w	($FFFFFEF0).w,($FFFFF72C).w ; restore level boundaries
0001DBC0 31F8 FEF2 F726             		move.w	($FFFFFEF2).w,($FFFFF726).w
0001DBC6 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; are you in	the special stage?
0001DBCC 6600                       		bne.s	Debug_DoNothing	; if not, branch
0001DBCE 4278 F780                  		clr.w	($FFFFF780).w
0001DBD2 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set new level rotation speed
0001DBD8 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001DBE0 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001DBE6 11FC 0002 D01C             		move.b	#2,($FFFFD01C).w
0001DBEC 08F8 0002 D022             		bset	#2,($FFFFD022).w
0001DBF2 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001DBF8                            
0001DBF8                            Debug_DoNothing:
0001DBF8 4E75                       		rts	
0001DBFA                            ; End of function Debug_Control
0001DBFA                            
0001DBFA                            
0001DBFA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DBFA                            
0001DBFA                            
0001DBFA                            Debug_ShowItem:				; XREF: Debug_Main
0001DBFA 7000                       		moveq	#0,d0
0001DBFC 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001DC00 E748                       		lsl.w	#3,d0
0001DC02 2172 0000 0004             		move.l	(a2,d0.w),4(a0)	; load mappings	for item
0001DC08 3172 0006 0002             		move.w	6(a2,d0.w),2(a0) ; load	VRAM setting for item
0001DC0E 1172 0005 001A             		move.b	5(a2,d0.w),$1A(a0) ; load frame	number for item
0001DC14 4E75                       		rts	
0001DC16                            ; End of function Debug_ShowItem
0001DC16                            
0001DC16                            ; ===========================================================================
0001DC16                            ; ---------------------------------------------------------------------------
0001DC16                            ; Debug	list pointers
0001DC16                            ; ---------------------------------------------------------------------------
0001DC16                            DebugList:
0001DC16                            	include "_inc\Debug list pointers.asm"
0001DC16                            ; ---------------------------------------------------------------------------
0001DC16                            ; Debug	list pointers
0001DC16                            ; ---------------------------------------------------------------------------
0001DC16 0000                       	dc.w Debug_GHZ-DebugList
0001DC18 0000                       	dc.w Debug_LZ-DebugList
0001DC1A 0000                       	dc.w Debug_MZ-DebugList
0001DC1C 0000                       	dc.w Debug_SLZ-DebugList
0001DC1E 0000                       	dc.w Debug_SYZ-DebugList
0001DC20 0000                       	dc.w Debug_SBZ-DebugList
0001DC22 0000                       	dc.w Debug_Ending-DebugList
0001DC24 0000                       	dc.w Debug_GHZ-DebugList
0001DC24 0000                       	dc.w Debug_GHZ-DebugList
0001DC26                            
0001DC26                            ; ---------------------------------------------------------------------------
0001DC26                            ; Debug	list - Green Hill
0001DC26                            ; ---------------------------------------------------------------------------
0001DC26                            Debug_GHZ:
0001DC26                            	include "_inc\Debug list - GHZ.asm"
0001DC26                            ; ---------------------------------------------------------------------------
0001DC26                            ; Debug	list - Green Hill
0001DC26                            ; ---------------------------------------------------------------------------
0001DC26 0010                       	dc.w $10			; number of items in list
0001DC28 2500 A7F4                  	dc.l Map_obj25+$25000000	; mappings pointer, object type * 10^6
0001DC2C 0000 27B2                  	dc.b 0,	0, $27,	$B2		; subtype, frame, VRAM setting (2 bytes)
0001DC30 2600 ADFA                  	dc.l Map_obj26+$26000000
0001DC34 0000 0680                  	dc.b 0,	0, 6, $80
0001DC38 1F00 9FEC                  	dc.l Map_obj1F+$1F000000
0001DC3C 0000 0400                  	dc.b 0,	0, 4, 0
0001DC40 2200 A2A8                  	dc.l Map_obj22+$22000000
0001DC44 0000 0444                  	dc.b 0,	0, 4, $44
0001DC48 2B00 B46E                  	dc.l Map_obj2B+$2B000000
0001DC4C 0000 047B                  	dc.b 0,	0, 4, $7B
0001DC50 3600 D99A                  	dc.l Map_obj36+$36000000
0001DC54 0000 051B                  	dc.b 0,	0, 5, $1B
0001DC58 1800 88FA                  	dc.l Map_obj18+$18000000
0001DC5C 0000 4000                  	dc.b 0,	0, $40,	0
0001DC60 3B00 DAC0                  	dc.l Map_obj3B+$3B000000
0001DC64 0000 63D0                  	dc.b 0,	0, $63,	$D0
0001DC68 4001 0192                  	dc.l Map_obj40+$40000000
0001DC6C 0000 04F0                  	dc.b 0,	0, 4, $F0
0001DC70 4100 E70C                  	dc.l Map_obj41+$41000000
0001DC74 0000 0523                  	dc.b 0,	0, 5, $23
0001DC78 4200 E932                  	dc.l Map_obj42+$42000000
0001DC7C 0000 249B                  	dc.b 0,	0, $24,	$9B
0001DC80 4400 EC40                  	dc.l Map_obj44+$44000000
0001DC84 0000 434C                  	dc.b 0,	0, $43,	$4C
0001DC88 1900 89FA                  	dc.l Map_obj48+$19000000
0001DC8C 0000 43AA                  	dc.b 0,	0, $43,	$AA
0001DC90 7901 7BE0                  	dc.l Map_obj79+$79000000
0001DC94 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DC98 4B00 A834                  	dc.l Map_obj4B+$4B000000
0001DC9C 0000 2400                  	dc.b 0,	0, $24,	0
0001DCA0 7D01 7D30                  	dc.l Map_obj7D+$7D000000
0001DCA4 0101 84B6                  	dc.b 1,	1, $84,	$B6
0001DCA8                            	even
0001DCA8                            	even
0001DCA8                            
0001DCA8                            ; ---------------------------------------------------------------------------
0001DCA8                            ; Debug	list - Labyrinth
0001DCA8                            ; ---------------------------------------------------------------------------
0001DCA8                            Debug_LZ:
0001DCA8                            	include "_inc\Debug list - LZ.asm"
0001DCA8                            ; ---------------------------------------------------------------------------
0001DCA8                            ; Debug	list - Labyrinth
0001DCA8                            ; ---------------------------------------------------------------------------
0001DCA8 0019                       	dc.w $19
0001DCAA 2500 A7F4                  	dc.l Map_obj25+$25000000
0001DCAE 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DCB2 2600 ADFA                  	dc.l Map_obj26+$26000000
0001DCB6 0000 0680                  	dc.b 0,	0, 6, $80
0001DCBA 4100 E70C                  	dc.l Map_obj41+$41000000
0001DCBE 0000 0523                  	dc.b 0,	0, 5, $23
0001DCC2 2C00 B51E                  	dc.l Map_obj2C+$2C000000
0001DCC6 0800 2486                  	dc.b 8,	0, $24,	$86
0001DCCA 2D00 B712                  	dc.l Map_obj2D+$2D000000
0001DCCE 0002 84A6                  	dc.b 0,	2, $84,	$A6
0001DCD2 1601 2966                  	dc.l Map_obj16+$16000000
0001DCD6 0000 03CC                  	dc.b 0,	0, 3, $CC
0001DCDA 1601 2966                  	dc.l Map_obj16+$16000000
0001DCDE 0203 03CC                  	dc.b 2,	3, 3, $CC
0001DCE2 3300 CBCA                  	dc.l Map_obj33+$33000000
0001DCE6 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001DCEA 3200 C78A                  	dc.l Map_obj32+$32000000
0001DCEE 0000 0513                  	dc.b 0,	0, 5, $13
0001DCF2 3600 D99A                  	dc.l Map_obj36+$36000000
0001DCF6 0000 051B                  	dc.b 0,	0, 5, $1B
0001DCFA 5201 0A88                  	dc.l Map_obj52a+$52000000
0001DCFE 0400 43BC                  	dc.b 4,	0, $43,	$BC
0001DD02 6101 2B8E                  	dc.l Map_obj61+$61000000
0001DD06 0100 43E6                  	dc.b 1,	0, $43,	$E6
0001DD0A 6101 2B8E                  	dc.l Map_obj61+$61000000
0001DD0E 1301 43E6                  	dc.b $13, 1, $43, $E6
0001DD12 6101 2B8E                  	dc.l Map_obj61+$61000000
0001DD16 0500 43E6                  	dc.b 5,	0, $43,	$E6
0001DD1A 6201 2CE2                  	dc.l Map_obj62+$62000000
0001DD1E 0000 443E                  	dc.b 0,	0, $44,	$3E
0001DD22 6101 2B8E                  	dc.l Map_obj61+$61000000
0001DD26 2702 43E6                  	dc.b $27, 2, $43, $E6
0001DD2A 6101 2B8E                  	dc.l Map_obj61+$61000000
0001DD2E 3003 43E6                  	dc.b $30, 3, $43, $E6
0001DD32 6301 3044                  	dc.l Map_obj63+$63000000
0001DD36 7F00 03F6                  	dc.b $7F, 0, 3,	$F6
0001DD3A 6001 28B0                  	dc.l Map_obj60+$60000000
0001DD3E 0000 0467                  	dc.b 0,	0, 4, $67
0001DD42 6401 338A                  	dc.l Map_obj64+$64000000
0001DD46 8413 8348                  	dc.b $84, $13, $83, $48
0001DD4A 6501 3512                  	dc.l Map_obj65+$65000000
0001DD4E 0202 C259                  	dc.b 2,	2, $C2,	$59
0001DD52 6501 3512                  	dc.l Map_obj65+$65000000
0001DD56 0909 C259                  	dc.b 9,	9, $C2,	$59
0001DD5A 0B01 1D00                  	dc.l Map_obj0B+$B000000
0001DD5E 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001DD62 0C01 1DD0                  	dc.l Map_obj0C+$C000000
0001DD66 0200 4328                  	dc.b 2,	0, $43,	$28
0001DD6A 7901 7BE0                  	dc.l Map_obj79+$79000000
0001DD6E 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DD72                            	even
0001DD72                            	even
0001DD72                            
0001DD72                            ; ---------------------------------------------------------------------------
0001DD72                            ; Debug	list - Marble
0001DD72                            ; ---------------------------------------------------------------------------
0001DD72                            Debug_MZ:
0001DD72                            	include "_inc\Debug list - MZ.asm"
0001DD72                            ; ---------------------------------------------------------------------------
0001DD72                            ; Debug	list - Marble
0001DD72                            ; ---------------------------------------------------------------------------
0001DD72 0012                       	dc.w $12
0001DD74 2500 A7F4                  	dc.l Map_obj25+$25000000
0001DD78 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DD7C 2600 ADFA                  	dc.l Map_obj26+$26000000
0001DD80 0000 0680                  	dc.b 0,	0, 6, $80
0001DD84 2200 A2A8                  	dc.l Map_obj22+$22000000
0001DD88 0000 0444                  	dc.b 0,	0, 4, $44
0001DD8C 3600 D99A                  	dc.l Map_obj36+$36000000
0001DD90 0000 051B                  	dc.b 0,	0, 5, $1B
0001DD94 4100 E70C                  	dc.l Map_obj41+$41000000
0001DD98 0000 0523                  	dc.b 0,	0, 5, $23
0001DD9C 1300 BC54                  	dc.l Map_obj14+$13000000
0001DDA0 0000 0345                  	dc.b 0,	0, 3, $45
0001DDA4 4600 F2F2                  	dc.l Map_obj46+$46000000
0001DDA8 0000 4000                  	dc.b 0,	0, $40,	0
0001DDAC 4C00 FC3E                  	dc.l Map_obj4C+$4C000000
0001DDB0 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001DDB4 4E00 FF22                  	dc.l Map_obj4E+$4E000000
0001DDB8 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001DDBC 3300 CBCA                  	dc.l Map_obj33+$33000000
0001DDC0 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001DDC4 5001 0320                  	dc.l Map_obj50+$50000000
0001DDC8 0000 247B                  	dc.b 0,	0, $24,	$7B
0001DDCC 5101 07BC                  	dc.l Map_obj51+$51000000
0001DDD0 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001DDD4 5201 0A32                  	dc.l Map_obj52+$52000000
0001DDD8 0000 02B8                  	dc.b 0,	0, 2, $B8
0001DDDC 5300 8F92                  	dc.l Map_obj53+$53000000
0001DDE0 0000 62B8                  	dc.b 0,	0, $62,	$B8
0001DDE4 5400 FC04                  	dc.l Map_obj54+$54000000
0001DDE8 0000 8680                  	dc.b 0,	0, $86,	$80
0001DDEC 5501 0C26                  	dc.l Map_obj55+$55000000
0001DDF0 0000 04B8                  	dc.b 0,	0, 4, $B8
0001DDF4 7801 785A                  	dc.l Map_obj78+$78000000
0001DDF8 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001DDFC 7901 7BE0                  	dc.l Map_obj79+$79000000
0001DE00 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DE04                            	even
0001DE04                            	even
0001DE04                            
0001DE04                            ; ---------------------------------------------------------------------------
0001DE04                            ; Debug	list - Star Light
0001DE04                            ; ---------------------------------------------------------------------------
0001DE04                            Debug_SLZ:
0001DE04                            	include "_inc\Debug list - SLZ.asm"
0001DE04                            ; ---------------------------------------------------------------------------
0001DE04                            ; Debug	list - Star Light
0001DE04                            ; ---------------------------------------------------------------------------
0001DE04 000F                       	dc.w $F
0001DE06 2500 A7F4                  	dc.l Map_obj25+$25000000
0001DE0A 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DE0E 2600 ADFA                  	dc.l Map_obj26+$26000000
0001DE12 0000 0680                  	dc.b 0,	0, 6, $80
0001DE16 5901 1728                  	dc.l Map_obj59+$59000000
0001DE1A 0000 4000                  	dc.b 0,	0, $40,	0
0001DE1E 5300 8F92                  	dc.l Map_obj53+$53000000
0001DE22 0002 44E0                  	dc.b 0,	2, $44,	$E0
0001DE26 1800 8958                  	dc.l Map_obj18b+$18000000
0001DE2A 0000 4000                  	dc.b 0,	0, $40,	0
0001DE2E 5A01 1862                  	dc.l Map_obj5A+$5A000000
0001DE32 0000 4000                  	dc.b 0,	0, $40,	0
0001DE36 5B01 1A1A                  	dc.l Map_obj5B+$5B000000
0001DE3A 0000 4000                  	dc.b 0,	0, $40,	0
0001DE3E 5D01 1FEA                  	dc.l Map_obj5D+$5D000000
0001DE42 0000 43A0                  	dc.b 0,	0, $43,	$A0
0001DE46 5E01 237C                  	dc.l Map_obj5E+$5E000000
0001DE4A 0000 0374                  	dc.b 0,	0, 3, $74
0001DE4E 4100 E70C                  	dc.l Map_obj41+$41000000
0001DE52 0000 0523                  	dc.b 0,	0, 5, $23
0001DE56 1300 BC54                  	dc.l Map_obj14+$13000000
0001DE5A 0000 0480                  	dc.b 0,	0, 4, $80
0001DE5E 1C00 90A2                  	dc.l Map_obj1C+$1C000000
0001DE62 0000 44D8                  	dc.b 0,	0, $44,	$D8
0001DE66 5F01 25FA                  	dc.l Map_obj5F+$5F000000
0001DE6A 0000 0400                  	dc.b 0,	0, 4, 0
0001DE6E 6001 28B0                  	dc.l Map_obj60+$60000000
0001DE72 0000 2429                  	dc.b 0,	0, $24,	$29
0001DE76 7901 7BE0                  	dc.l Map_obj79+$79000000
0001DE7A 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DE7E                            	even
0001DE7E                            	even
0001DE7E                            
0001DE7E                            ; ---------------------------------------------------------------------------
0001DE7E                            ; Debug	list - Spring Yard
0001DE7E                            ; ---------------------------------------------------------------------------
0001DE7E                            Debug_SYZ:
0001DE7E                            	include "_inc\Debug list - SYZ.asm"
0001DE7E                            ; ---------------------------------------------------------------------------
0001DE7E                            ; Debug	list - Spring Yard
0001DE7E                            ; ---------------------------------------------------------------------------
0001DE7E 000F                       	dc.w $F
0001DE80 2500 A7F4                  	dc.l Map_obj25+$25000000
0001DE84 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DE88 2600 ADFA                  	dc.l Map_obj26+$26000000
0001DE8C 0000 0680                  	dc.b 0,	0, 6, $80
0001DE90 3600 D99A                  	dc.l Map_obj36+$36000000
0001DE94 0000 051B                  	dc.b 0,	0, 5, $1B
0001DE98 4100 E70C                  	dc.l Map_obj41+$41000000
0001DE9C 0000 0523                  	dc.b 0,	0, 5, $23
0001DEA0 4300 EB92                  	dc.l Map_obj43+$43000000
0001DEA4 0000 04B8                  	dc.b 0,	0, 4, $B8
0001DEA8 1200 F370                  	dc.l Map_obj12+$12000000
0001DEAC 0000 0000                  	dc.b 0,	0, 0, 0
0001DEB0 4700 F4EC                  	dc.l Map_obj47+$47000000
0001DEB4 0000 0380                  	dc.b 0,	0, 3, $80
0001DEB8 1F00 9FEC                  	dc.l Map_obj1F+$1F000000
0001DEBC 0000 0400                  	dc.b 0,	0, 4, 0
0001DEC0 2200 A2A8                  	dc.l Map_obj22+$22000000
0001DEC4 0000 0444                  	dc.b 0,	0, 4, $44
0001DEC8 5001 0320                  	dc.l Map_obj50+$50000000
0001DECC 0000 247B                  	dc.b 0,	0, $24,	$7B
0001DED0 1800 8946                  	dc.l Map_obj18a+$18000000
0001DED4 0000 4000                  	dc.b 0,	0, $40,	0
0001DED8 5601 10E8                  	dc.l Map_obj56+$56000000
0001DEDC 0000 4000                  	dc.b 0,	0, $40,	0
0001DEE0 3200 C78A                  	dc.l Map_obj32+$32000000
0001DEE4 0000 0513                  	dc.b 0,	0, 5, $13
0001DEE8 7801 785A                  	dc.l Map_obj78+$78000000
0001DEEC 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001DEF0 7901 7BE0                  	dc.l Map_obj79+$79000000
0001DEF4 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DEF8                            	even
0001DEF8                            	even
0001DEF8                            
0001DEF8                            ; ---------------------------------------------------------------------------
0001DEF8                            ; Debug	list - Scrap Brain
0001DEF8                            ; ---------------------------------------------------------------------------
0001DEF8                            Debug_SBZ:
0001DEF8                            	include "_inc\Debug list - SBZ.asm"
0001DEF8                            ; ---------------------------------------------------------------------------
0001DEF8                            ; Debug	list - Scrap Brain
0001DEF8                            ; ---------------------------------------------------------------------------
0001DEF8 001D                       	dc.w $1D
0001DEFA 2500 A7F4                  	dc.l Map_obj25+$25000000
0001DEFE 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DF02 2600 ADFA                  	dc.l Map_obj26+$26000000
0001DF06 0000 0680                  	dc.b 0,	0, 6, $80
0001DF0A 5F01 25FA                  	dc.l Map_obj5F+$5F000000
0001DF0E 0000 0400                  	dc.b 0,	0, 4, 0
0001DF12 6001 28B0                  	dc.l Map_obj60+$60000000
0001DF16 0000 0429                  	dc.b 0,	0, 4, $29
0001DF1A 7801 785A                  	dc.l Map_obj78+$78000000
0001DF1E 0000 22B0                  	dc.b 0,	0, $22,	$B0
0001DF22 1501 1484                  	dc.l Map_obj15b+$15000000
0001DF26 0702 4391                  	dc.b 7,	2, $43,	$91
0001DF2A 6701 616E                  	dc.l Map_obj67+$67000000
0001DF2E E000 C344                  	dc.b $E0, 0, $C3, $44
0001DF32 5201 0A32                  	dc.l Map_obj52+$52000000
0001DF36 2802 22C0                  	dc.b $28, 2, $22, $C0
0001DF3A 3200 C78A                  	dc.l Map_obj32+$32000000
0001DF3E 0000 0513                  	dc.b 0,	0, 5, $13
0001DF42 6901 63C8                  	dc.l Map_obj69+$69000000
0001DF46 0300 4492                  	dc.b 3,	0, $44,	$92
0001DF4A 6901 6422                  	dc.l Map_obj69a+$69000000
0001DF4E 8300 04DF                  	dc.b $83, 0, 4,	$DF
0001DF52 6A01 6680                  	dc.l Map_obj6A+$6A000000
0001DF56 0200 43B5                  	dc.b 2,	0, $43,	$B5
0001DF5A 5300 8F92                  	dc.l Map_obj53+$53000000
0001DF5E 0000 43F5                  	dc.b 0,	0, $43,	$F5
0001DF62 5201 0A32                  	dc.l Map_obj52+$52000000
0001DF66 3903 4460                  	dc.b $39, 3, $44, $60
0001DF6A 6B01 6A50                  	dc.l Map_obj6B+$6B000000
0001DF6E 0000 22C0                  	dc.b 0,	0, $22,	$C0
0001DF72 2A00 9238                  	dc.l Map_obj2A+$2A000000
0001DF76 0000 42E8                  	dc.b 0,	0, $42,	$E8
0001DF7A 6B01 6A50                  	dc.l Map_obj6B+$6B000000
0001DF7E 1301 22C0                  	dc.b $13, 1, $22, $C0
0001DF82 6A01 6680                  	dc.l Map_obj6A+$6A000000
0001DF86 0100 43B5                  	dc.b 1,	0, $43,	$B5
0001DF8A 6B01 6A50                  	dc.l Map_obj6B+$6B000000
0001DF8E 2401 22C0                  	dc.b $24, 1, $22, $C0
0001DF92 6A01 6680                  	dc.l Map_obj6A+$6A000000
0001DF96 0402 43B5                  	dc.b 4,	2, $43,	$B5
0001DF9A 6B01 6A50                  	dc.l Map_obj6B+$6B000000
0001DF9E 3401 22C0                  	dc.b $34, 1, $22, $C0
0001DFA2 6C01 6C12                  	dc.l Map_obj6C+$6C000000
0001DFA6 0000 44C3                  	dc.b 0,	0, $44,	$C3
0001DFAA 6D00 EFE2                  	dc.l Map_obj6D+$6D000000
0001DFAE 6400 83D9                  	dc.b $64, 0, $83, $D9
0001DFB2 6D00 EFE2                  	dc.l Map_obj6D+$6D000000
0001DFB6 640B 83D9                  	dc.b $64, $B, $83, $D9
0001DFBA 6E01 6CC8                  	dc.l Map_obj6E+$6E000000
0001DFBE 0400 047E                  	dc.b 4,	0, 4, $7E
0001DFC2 7001 711E                  	dc.l Map_obj70+$70000000
0001DFC6 0000 42F0                  	dc.b 0,	0, $42,	$F0
0001DFCA 7101 1E90                  	dc.l Map_obj71+$71000000
0001DFCE 1100 8680                  	dc.b $11, 0, $86, $80
0001DFD2 1E00 96F6                  	dc.l Map_obj1E+$1E000000
0001DFD6 0400 2302                  	dc.b 4,	0, $23,	2
0001DFDA 7901 7BE0                  	dc.l Map_obj79+$79000000
0001DFDE 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DFE2                            	even
0001DFE2                            	even
0001DFE2                            
0001DFE2                            ; ---------------------------------------------------------------------------
0001DFE2                            ; Debug	list - ending sequence / special stage
0001DFE2                            ; ---------------------------------------------------------------------------
0001DFE2                            Debug_Ending:
0001DFE2                            	include "_inc\Debug list - Ending and SS.asm"
0001DFE2                            ; ---------------------------------------------------------------------------
0001DFE2                            ; Debug	list - ending sequence / special stage
0001DFE2                            ; ---------------------------------------------------------------------------
0001DFE2 000D                       	dc.w $D
0001DFE4 2500 A7F4                  	dc.l Map_obj25+$25000000
0001DFE8 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DFEC 4700 F4EC                  	dc.l Map_obj47+$47000000
0001DFF0 0000 0380                  	dc.b 0,	0, 3, $80
0001DFF4 2800 9D1E                  	dc.l Map_obj28a+$28000000
0001DFF8 0A00 05A0                  	dc.b $A, 0, 5, $A0
0001DFFC 2800 9D1E                  	dc.l Map_obj28a+$28000000
0001E000 0B00 05A0                  	dc.b $B, 0, 5, $A0
0001E004 2800 9D1E                  	dc.l Map_obj28a+$28000000
0001E008 0C00 05A0                  	dc.b $C, 0, 5, $A0
0001E00C 2800 9D06                  	dc.l Map_obj28+$28000000
0001E010 0D00 0553                  	dc.b $D, 0, 5, $53
0001E014 2800 9D06                  	dc.l Map_obj28+$28000000
0001E018 0E00 0553                  	dc.b $E, 0, 5, $53
0001E01C 2800 9D06                  	dc.l Map_obj28+$28000000
0001E020 0F00 0573                  	dc.b $F, 0, 5, $73
0001E024 2800 9D06                  	dc.l Map_obj28+$28000000
0001E028 1000 0573                  	dc.b $10, 0, 5,	$73
0001E02C 2800 9D1E                  	dc.l Map_obj28a+$28000000
0001E030 1100 0585                  	dc.b $11, 0, 5,	$85
0001E034 2800 9D36                  	dc.l Map_obj28b+$28000000
0001E038 1200 0593                  	dc.b $12, 0, 5,	$93
0001E03C 2800 9D1E                  	dc.l Map_obj28a+$28000000
0001E040 1300 0565                  	dc.b $13, 0, 5,	$65
0001E044 2800 9D36                  	dc.l Map_obj28b+$28000000
0001E048 1400 05B3                  	dc.b $14, 0, 5,	$B3
0001E04C                            	even
0001E04C                            	even
0001E04C                            
0001E04C                            ; ---------------------------------------------------------------------------
0001E04C                            ; Main level load blocks
0001E04C                            ; ---------------------------------------------------------------------------
0001E04C                            MainLoadBlocks:
0001E04C                            	include "_inc\Main level load blocks.asm"
0001E04C                            ; ---------------------------------------------------------------------------
0001E04C                            ; Main level load blocks
0001E04C                            ;
0001E04C                            ; ===FORMAT===
0001E04C                            ; level	patterns + (1st	PLC num	* 10^6)
0001E04C                            ; 16x16	mappings + (2nd	PLC num	* 10^6)
0001E04C                            ; 256x256 mappings
0001E04C                            ; blank, music (unused), pal index (unused), pal index
0001E04C                            ; ---------------------------------------------------------------------------
0001E04C 0000 0000                  	dc.l Nem_GHZ_2nd+$4000000
0001E050 0000 0000                  	dc.l Blk16_GHZ+$5000000
0001E054 0000 0000                  	dc.l Blk256_GHZ
0001E058 0081 0404                  	dc.b 0,	$81, 4,	4
0001E05C 0000 0000                  	dc.l Nem_LZ+$6000000
0001E060 0000 0000                  	dc.l Blk16_LZ+$7000000
0001E064 0000 0000                  	dc.l Blk256_LZ
0001E068 0082 0505                  	dc.b 0,	$82, 5,	5
0001E06C 0000 0000                  	dc.l Nem_MZ+$8000000
0001E070 0000 0000                  	dc.l Blk16_MZ+$9000000
0001E074 0000 0000                  	dc.l Blk256_MZ
0001E078 0083 0606                  	dc.b 0,	$83, 6,	6
0001E07C 0000 0000                  	dc.l Nem_SLZ+$A000000
0001E080 0000 0000                  	dc.l Blk16_SLZ+$B000000
0001E084 0000 0000                  	dc.l Blk256_SLZ
0001E088 0084 0707                  	dc.b 0,	$84, 7,	7
0001E08C 0000 0000                  	dc.l Nem_SYZ+$C000000
0001E090 0000 0000                  	dc.l Blk16_SYZ+$D000000
0001E094 0000 0000                  	dc.l Blk256_SYZ
0001E098 0085 0808                  	dc.b 0,	$85, 8,	8
0001E09C 0000 0000                  	dc.l Nem_SBZ+$E000000
0001E0A0 0000 0000                  	dc.l Blk16_SBZ+$F000000
0001E0A4 0000 0000                  	dc.l Blk256_SBZ
0001E0A8 0086 0909                  	dc.b 0,	$86, 9,	9
0001E0AC 0000 0000                  	dc.l Nem_GHZ_2nd	; main load block for ending
0001E0B0 0000 0000                  	dc.l Blk16_GHZ
0001E0B4 0000 0000                  	dc.l Blk256_GHZ
0001E0B8 0086 1313                  	dc.b 0,	$86, $13, $13
0001E0BC 0000 0000                  	dc.l Nem_BHZ_2nd+$4000000 ; MAKOTO ZONE
0001E0C0 0000 0000                  	dc.l Blk16_BHZ+$5000000
0001E0C4 0000 0000                  	dc.l Blk256_BHZ
0001E0C8 009E 2222                  	dc.b 0,	$9E, $22,	$22
0001E0CC                            	even
0001E0CC                            	even
0001E0CC                            
0001E0CC                            ; ---------------------------------------------------------------------------
0001E0CC                            ; Pattern load cues
0001E0CC                            ; ---------------------------------------------------------------------------
0001E0CC                            ArtLoadCues:
0001E0CC                            	include "_inc\Pattern load cues.asm"
0001E0CC                            ; ---------------------------------------------------------------------------
0001E0CC                            ; Pattern load cues - index
0001E0CC                            ; ---------------------------------------------------------------------------
0001E0CC 0000 0000                  	dc.w PLC_Main-ArtLoadCues, PLC_Main2-ArtLoadCues
0001E0D0 0000 0000                  	dc.w PLC_Explode-ArtLoadCues, PLC_GameOver-ArtLoadCues
0001E0D4 0000 0000                  	dc.w PLC_GHZ-ArtLoadCues, PLC_GHZ2-ArtLoadCues
0001E0D8 0000 0000                  	dc.w PLC_LZ-ArtLoadCues, PLC_LZ2-ArtLoadCues
0001E0DC 0000 0000                  	dc.w PLC_MZ-ArtLoadCues, PLC_MZ2-ArtLoadCues
0001E0E0 0000 0000                  	dc.w PLC_SLZ-ArtLoadCues, PLC_SLZ2-ArtLoadCues
0001E0E4 0000 0000                  	dc.w PLC_SYZ-ArtLoadCues, PLC_SYZ2-ArtLoadCues
0001E0E8 0000 0000                  	dc.w PLC_SBZ-ArtLoadCues, PLC_SBZ2-ArtLoadCues
0001E0EC 0000 0000                  	dc.w PLC_BHZ-ArtLoadCues, PLC_BHZ2-ArtLoadCues
0001E0F0 0000 0000                  	dc.w PLC_TitleCard-ArtLoadCues,	PLC_Boss-ArtLoadCues
0001E0F4 0000 0000                  	dc.w PLC_Signpost-ArtLoadCues, PLC_Warp-ArtLoadCues
0001E0F8 0000 0000                  	dc.w PLC_SpeStage-ArtLoadCues, PLC_GHZAnimals-ArtLoadCues
0001E0FC 0000 0000                  	dc.w PLC_LZAnimals-ArtLoadCues,	PLC_MZAnimals-ArtLoadCues
0001E100 0000 0000                  	dc.w PLC_SLZAnimals-ArtLoadCues, PLC_SYZAnimals-ArtLoadCues
0001E104 0000 0000 0000             	dc.w PLC_SBZAnimals-ArtLoadCues, PLC_GHZAnimals-ArtLoadCues, PLC_SpeStResult-ArtLoadCues
0001E10A 0000 0000                  	dc.w PLC_Ending-ArtLoadCues, PLC_TryAgain-ArtLoadCues
0001E10E 0000 0000                  	dc.w PLC_EggmanSBZ2-ArtLoadCues, PLC_FZBoss-ArtLoadCues
0001E112 0000                       	dc.w Plc_TetoBoss-ArtLoadCues
0001E114                            ; ---------------------------------------------------------------------------
0001E114                            ; Pattern load cues - standard block 1
0001E114                            ; ---------------------------------------------------------------------------
0001E114 0004                       PLC_Main:	dc.w 4
0001E116 0000 0000                  		dc.l Nem_Lamp		; lamppost
0001E11A F400                       		dc.w $F400
0001E11C 0000 0000                  		dc.l Nem_Hud		; HUD
0001E120 D940                       		dc.w $D940
0001E122 0000 0000                  		dc.l Nem_Lives		; lives	counter
0001E126 FA80                       		dc.w $FA80
0001E128 0000 0000                  		dc.l Nem_Ring		; rings
0001E12C F640                       		dc.w $F640
0001E12E 0000 0000                  		dc.l Nem_Points		; points from enemy
0001E132 F2E0                       		dc.w $F2E0
0001E134                            ; ---------------------------------------------------------------------------
0001E134                            ; Pattern load cues - standard block 2
0001E134                            ; ---------------------------------------------------------------------------
0001E134 0002                       PLC_Main2:	dc.w 2
0001E136 0000 0000                  		dc.l Nem_Monitors	; monitors
0001E13A D000                       		dc.w $D000
0001E13C 0000 0000                  		dc.l Nem_Shield		; shield
0001E140 A820                       		dc.w $A820
0001E142 0000 0000                  		dc.l Nem_Stars		; invincibility	stars
0001E146 AB80                       		dc.w $AB80
0001E148                            ; ---------------------------------------------------------------------------
0001E148                            ; Pattern load cues - explosion
0001E148                            ; ---------------------------------------------------------------------------
0001E148 0000                       PLC_Explode:	dc.w 0
0001E14A 0000 0000                  		dc.l Nem_Explode	; explosion
0001E14E B400                       		dc.w $B400
0001E150                            ; ---------------------------------------------------------------------------
0001E150                            ; Pattern load cues - game/time	over
0001E150                            ; ---------------------------------------------------------------------------
0001E150 0000                       PLC_GameOver:	dc.w 0
0001E152 0000 0000                  		dc.l Nem_GameOver	; game/time over
0001E156 ABC0                       		dc.w $ABC0
0001E158                            ; ---------------------------------------------------------------------------
0001E158                            ; Pattern load cues - Green Hill
0001E158                            ; ---------------------------------------------------------------------------
0001E158 000B                       PLC_GHZ:	dc.w $B
0001E15A 0000 0000                  		dc.l Nem_GHZ_1st	; GHZ main patterns
0001E15E 0000                       		dc.w 0
0001E160 0000 0000                  		dc.l Nem_GHZ_2nd	; GHZ secondary	patterns
0001E164 39A0                       		dc.w $39A0
0001E166 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001E16A 6B00                       		dc.w $6B00
0001E16C 0000 0000                  		dc.l Nem_PplRock	; purple rock
0001E170 7A00                       		dc.w $7A00
0001E172 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001E176 8000                       		dc.w $8000
0001E178 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001E17C 8880                       		dc.w $8880
0001E17E 0000 0000                  		dc.l Nem_Chopper	; chopper enemy
0001E182 8F60                       		dc.w $8F60
0001E184 0000 0000                  		dc.l Nem_Newtron	; newtron enemy
0001E188 9360                       		dc.w $9360
0001E18A 0000 0000                  		dc.l Nem_Motobug	; motobug enemy
0001E18E 9E00                       		dc.w $9E00
0001E190 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E194 A360                       		dc.w $A360
0001E196 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E19A A460                       		dc.w $A460
0001E19C 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E1A0 A660                       		dc.w $A660
0001E1A2 0005                       PLC_GHZ2:	dc.w 5
0001E1A4 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001E1A8 7000                       		dc.w $7000
0001E1AA 0000 0000                  		dc.l Nem_Bridge		; bridge
0001E1AE 71C0                       		dc.w $71C0
0001E1B0 0000 0000                  		dc.l Nem_SpikePole	; spiked pole
0001E1B4 7300                       		dc.w $7300
0001E1B6 0000 0000                  		dc.l Nem_Ball		; giant	ball
0001E1BA 7540                       		dc.w $7540
0001E1BC 0000 0000                  		dc.l Nem_GhzWall1	; breakable wall
0001E1C0 A1E0                       		dc.w $A1E0
0001E1C2 0000 0000                  		dc.l Nem_GhzWall2	; normal wall
0001E1C6 6980                       		dc.w $6980
0001E1C8                            ; ---------------------------------------------------------------------------
0001E1C8                            ; Pattern load cues - Labyrinth
0001E1C8                            ; ---------------------------------------------------------------------------
0001E1C8 000B                       PLC_LZ:		dc.w $B
0001E1CA 0000 0000                  		dc.l Nem_LZ		; LZ main patterns
0001E1CE 0000                       		dc.w 0
0001E1D0 0000 0000                  		dc.l Nem_LzBlock1	; block
0001E1D4 3C00                       		dc.w $3C00
0001E1D6 0000 0000                  		dc.l Nem_LzBlock2	; blocks
0001E1DA 3E00                       		dc.w $3E00
0001E1DC 0000 0000                  		dc.l Nem_Splash		; waterfalls and splash
0001E1E0 4B20                       		dc.w $4B20
0001E1E2 0000 0000                  		dc.l Nem_Water		; water	surface
0001E1E6 6000                       		dc.w $6000
0001E1E8 0000 0000                  		dc.l Nem_LzSpikeBall	; spiked ball
0001E1EC 6200                       		dc.w $6200
0001E1EE 0000 0000                  		dc.l Nem_FlapDoor	; flapping door
0001E1F2 6500                       		dc.w $6500
0001E1F4 0000 0000                  		dc.l Nem_Bubbles	; bubbles and numbers
0001E1F8 6900                       		dc.w $6900
0001E1FA 0000 0000                  		dc.l Nem_LzBlock3	; block
0001E1FE 7780                       		dc.w $7780
0001E200 0000 0000                  		dc.l Nem_LzDoor1	; vertical door
0001E204 7880                       		dc.w $7880
0001E206 0000 0000                  		dc.l Nem_Harpoon	; harpoon
0001E20A 7980                       		dc.w $7980
0001E20C 0000 0000                  		dc.l Nem_Burrobot	; burrobot enemy
0001E210 94C0                       		dc.w $94C0
0001E212 000C                       PLC_LZ2:	dc.w $C
0001E214 0000 0000                  		dc.l Nem_LzPole		; pole that breaks
0001E218 7BC0                       		dc.w $7BC0
0001E21A 0000 0000                  		dc.l Nem_LzDoor2	; large	horizontal door
0001E21E 7CC0                       		dc.w $7CC0
0001E220 0000 0000                  		dc.l Nem_LzWheel	; wheel
0001E224 7EC0                       		dc.w $7EC0
0001E226 0000 0000                  		dc.l Nem_Gargoyle	; gargoyle head
0001E22A 5D20                       		dc.w $5D20
0001E22C 0000 0000                  		dc.l Nem_LzSonic	; Sonic	holding	his breath
0001E230 8800                       		dc.w $8800
0001E232 0000 0000                  		dc.l Nem_LzPlatfm	; rising platform
0001E236 89E0                       		dc.w $89E0
0001E238 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001E23C 8CE0                       		dc.w $8CE0
0001E23E 0000 0000                  		dc.l Nem_Jaws		; jaws enemy
0001E242 90C0                       		dc.w $90C0
0001E244 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001E248 A1E0                       		dc.w $A1E0
0001E24A 0000 0000                  		dc.l Nem_Cork		; cork block
0001E24E A000                       		dc.w $A000
0001E250 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E254 A360                       		dc.w $A360
0001E256 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E25A A460                       		dc.w $A460
0001E25C 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E260 A660                       		dc.w $A660
0001E262                            ; ---------------------------------------------------------------------------
0001E262                            ; Pattern load cues - Marble
0001E262                            ; ---------------------------------------------------------------------------
0001E262 0009                       PLC_MZ:		dc.w 9
0001E264 0000 0000                  		dc.l Nem_MZ		; MZ main patterns
0001E268 0000                       		dc.w 0
0001E26A 0000 0000                  		dc.l Nem_MzMetal	; metal	blocks
0001E26E 6000                       		dc.w $6000
0001E270 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001E274 68A0                       		dc.w $68A0
0001E276 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001E27A 7000                       		dc.w $7000
0001E27C 0000 0000                  		dc.l Nem_MzGlass	; green	glassy block
0001E280 71C0                       		dc.w $71C0
0001E282 0000 0000                  		dc.l Nem_Lava		; lava
0001E286 7500                       		dc.w $7500
0001E288 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001E28C 8880                       		dc.w $8880
0001E28E 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001E292 8F60                       		dc.w $8F60
0001E294 0000 0000                  		dc.l Nem_Basaran	; basaran enemy
0001E298 9700                       		dc.w $9700
0001E29A 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001E29E 9FE0                       		dc.w $9FE0
0001E2A0 0004                       PLC_MZ2:	dc.w 4
0001E2A2 0000 0000                  		dc.l Nem_MzSwitch	; switch
0001E2A6 A260                       		dc.w $A260
0001E2A8 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E2AC A360                       		dc.w $A360
0001E2AE 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E2B2 A460                       		dc.w $A460
0001E2B4 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E2B8 A660                       		dc.w $A660
0001E2BA 0000 0000                  		dc.l Nem_MzBlock	; green	stone block
0001E2BE 5700                       		dc.w $5700
0001E2C0                            ; ---------------------------------------------------------------------------
0001E2C0                            ; Pattern load cues - Star Light
0001E2C0                            ; ---------------------------------------------------------------------------
0001E2C0 0008                       PLC_SLZ:	dc.w 8
0001E2C2 0000 0000                  		dc.l Nem_SLZ		; SLZ main patterns
0001E2C6 0000                       		dc.w 0
0001E2C8 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001E2CC 8000                       		dc.w $8000
0001E2CE 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001E2D2 8520                       		dc.w $8520
0001E2D4 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001E2D8 9000                       		dc.w $9000
0001E2DA 0000 0000                  		dc.l Nem_SlzBlock	; block
0001E2DE 9C00                       		dc.w $9C00
0001E2E0 0000 0000                  		dc.l Nem_SlzWall	; breakable wall
0001E2E4 A260                       		dc.w $A260
0001E2E6 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E2EA A360                       		dc.w $A360
0001E2EC 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E2F0 A460                       		dc.w $A460
0001E2F2 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E2F6 A660                       		dc.w $A660
0001E2F8 0005                       PLC_SLZ2:	dc.w 5
0001E2FA 0000 0000                  		dc.l Nem_Seesaw		; seesaw
0001E2FE 6E80                       		dc.w $6E80
0001E300 0000 0000                  		dc.l Nem_Fan		; fan
0001E304 7400                       		dc.w $7400
0001E306 0000 0000                  		dc.l Nem_Pylon		; foreground pylon
0001E30A 7980                       		dc.w $7980
0001E30C 0000 0000                  		dc.l Nem_SlzSwing	; swinging platform
0001E310 7B80                       		dc.w $7B80
0001E312 0000 0000                  		dc.l Nem_SlzCannon	; fireball launcher
0001E316 9B00                       		dc.w $9B00
0001E318 0000 0000                  		dc.l Nem_SlzSpike	; spikeball
0001E31C 9E00                       		dc.w $9E00
0001E31E                            ; ---------------------------------------------------------------------------
0001E31E                            ; Pattern load cues - Spring Yard
0001E31E                            ; ---------------------------------------------------------------------------
0001E31E 0004                       PLC_SYZ:	dc.w 4
0001E320 0000 0000                  		dc.l Nem_SYZ		; SYZ main patterns
0001E324 0000                       		dc.w 0
0001E326 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001E32A 8000                       		dc.w $8000
0001E32C 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001E330 8880                       		dc.w $8880
0001E332 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001E336 8F60                       		dc.w $8F60
0001E338 0000 0000                  		dc.l Nem_Roller		; roller enemy
0001E33C 9700                       		dc.w $9700
0001E33E 0007                       PLC_SYZ2:	dc.w 7
0001E340 0000 0000                  		dc.l Nem_Bumper		; bumper
0001E344 7000                       		dc.w $7000
0001E346 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001E34A 72C0                       		dc.w $72C0
0001E34C 0000 0000                  		dc.l Nem_SyzSpike2	; small	spikeball
0001E350 7740                       		dc.w $7740
0001E352 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001E356 9FE0                       		dc.w $9FE0
0001E358 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001E35C A1E0                       		dc.w $A1E0
0001E35E 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E362 A360                       		dc.w $A360
0001E364 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E368 A460                       		dc.w $A460
0001E36A 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E36E A660                       		dc.w $A660
0001E370                            ; ---------------------------------------------------------------------------
0001E370                            ; Pattern load cues - Scrap Brain
0001E370                            ; ---------------------------------------------------------------------------
0001E370 000B                       PLC_SBZ:	dc.w $B
0001E372 0000 0000                  		dc.l Nem_SBZ		; SBZ main patterns
0001E376 0000                       		dc.w 0
0001E378 0000 0000                  		dc.l Nem_Stomper	; moving platform and stomper
0001E37C 5800                       		dc.w $5800
0001E37E 0000 0000                  		dc.l Nem_SbzDoor1	; door
0001E382 5D00                       		dc.w $5D00
0001E384 0000 0000                  		dc.l Nem_Girder		; girder
0001E388 5E00                       		dc.w $5E00
0001E38A 0000 0000                  		dc.l Nem_BallHog	; ball hog enemy
0001E38E 6040                       		dc.w $6040
0001E390 0000 0000                  		dc.l Nem_SbzWheel1	; spot on large	wheel
0001E394 6880                       		dc.w $6880
0001E396 0000 0000                  		dc.l Nem_SbzWheel2	; wheel	that grabs Sonic
0001E39A 6900                       		dc.w $6900
0001E39C 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001E3A0 7220                       		dc.w $7220
0001E3A2 0000 0000                  		dc.l Nem_Cutter		; pizza	cutter
0001E3A6 76A0                       		dc.w $76A0
0001E3A8 0000 0000                  		dc.l Nem_FlamePipe	; flaming pipe
0001E3AC 7B20                       		dc.w $7B20
0001E3AE 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001E3B2 7EA0                       		dc.w $7EA0
0001E3B4 0000 0000                  		dc.l Nem_SbzBlock	; vanishing block
0001E3B8 9860                       		dc.w $9860
0001E3BA 000C                       PLC_SBZ2:	dc.w $C
0001E3BC 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001E3C0 5600                       		dc.w $5600
0001E3C2 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001E3C6 8000                       		dc.w $8000
0001E3C8 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001E3CC 8520                       		dc.w $8520
0001E3CE 0000 0000                  		dc.l Nem_SlideFloor	; floor	that slides away
0001E3D2 8C00                       		dc.w $8C00
0001E3D4 0000 0000                  		dc.l Nem_SbzDoor2	; horizontal door
0001E3D8 8DE0                       		dc.w $8DE0
0001E3DA 0000 0000                  		dc.l Nem_Electric	; electric orb
0001E3DE 8FC0                       		dc.w $8FC0
0001E3E0 0000 0000                  		dc.l Nem_TrapDoor	; trapdoor
0001E3E4 9240                       		dc.w $9240
0001E3E6 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001E3EA 7F20                       		dc.w $7F20
0001E3EC 0000 0000                  		dc.l Nem_SpinPform	; small	spinning platform
0001E3F0 9BE0                       		dc.w $9BE0
0001E3F2 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001E3F6 A1E0                       		dc.w $A1E0
0001E3F8 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E3FC A360                       		dc.w $A360
0001E3FE 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E402 A460                       		dc.w $A460
0001E404 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E408 A660                       		dc.w $A660
0001E40A                            ; ---------------------------------------------------------------------------
0001E40A                            ; Pattern load cues - DR. Breen Hill
0001E40A                            ; ---------------------------------------------------------------------------
0001E40A 000B                       PLC_BHZ:	dc.w $B
0001E40C 0000 0000                  		dc.l Nem_BHZ_1st	; GHZ main patterns
0001E410 0000                       		dc.w 0
0001E412 0000 0000                  		dc.l Nem_BHZ_2nd	; GHZ secondary	patterns
0001E416 39A0                       		dc.w $39A0
0001E418 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001E41C 6B00                       		dc.w $6B00
0001E41E 0000 0000                  		dc.l Nem_PplRock	; purple rock
0001E422 7A00                       		dc.w $7A00
0001E424 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001E428 8000                       		dc.w $8000
0001E42A 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001E42E 8880                       		dc.w $8880
0001E430 0000 0000                  		dc.l Nem_Chopper	; chopper enemy
0001E434 8F60                       		dc.w $8F60
0001E436 0000 0000                  		dc.l Nem_Newtron	; newtron enemy
0001E43A 9360                       		dc.w $9360
0001E43C 0000 0000                  		dc.l Nem_Motobug	; motobug enemy
0001E440 9E00                       		dc.w $9E00
0001E442 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E446 A360                       		dc.w $A360
0001E448 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E44C A460                       		dc.w $A460
0001E44E 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E452 A660                       		dc.w $A660
0001E454 0005                       PLC_BHZ2:	dc.w 5
0001E456 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001E45A 7000                       		dc.w $7000
0001E45C 0000 0000                  		dc.l Nem_Bridge		; bridge
0001E460 71C0                       		dc.w $71C0
0001E462 0000 0000                  		dc.l Nem_SpikePole	; spiked pole
0001E466 7300                       		dc.w $7300
0001E468 0000 0000                  		dc.l Nem_Ball		; giant	ball
0001E46C 7540                       		dc.w $7540
0001E46E 0000 0000                  		dc.l Nem_GhzWall1	; breakable wall
0001E472 A1E0                       		dc.w $A1E0
0001E474 0000 0000                  		dc.l Nem_GhzWall2	; normal wall
0001E478 6980                       		dc.w $6980
0001E47A                            ; ---------------------------------------------------------------------------
0001E47A                            ; Pattern load cues - title card
0001E47A                            ; ---------------------------------------------------------------------------
0001E47A 0000                       PLC_TitleCard:	dc.w 0
0001E47C 0000 0000                  		dc.l Nem_TitleCard
0001E480 B000                       		dc.w $B000
0001E482                            ; ---------------------------------------------------------------------------
0001E482                            ; Pattern load cues - act 3 boss
0001E482                            ; ---------------------------------------------------------------------------
0001E482 0005                       PLC_Boss:	dc.w 5
0001E484 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001E488 8000                       		dc.w $8000
0001E48A 0000 0000                  		dc.l Nem_Weapons	; Eggman's weapons
0001E48E 8D80                       		dc.w $8D80
0001E490 0000 0000                  		dc.l Nem_Prison		; prison capsule
0001E494 93A0                       		dc.w $93A0
0001E496 0000 0000                  		dc.l Nem_Bomb		; bomb enemy (gets overwritten)
0001E49A A300                       		dc.w $A300
0001E49C 0000 0000                  		dc.l Nem_SlzSpike	; spikeball (SLZ boss)
0001E4A0 A300                       		dc.w $A300
0001E4A2 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001E4A6 A540                       		dc.w $A540
0001E4A8                            ; ---------------------------------------------------------------------------
0001E4A8                            ; Pattern load cues - act 1/2 signpost
0001E4A8                            ; ---------------------------------------------------------------------------
0001E4A8 0002                       PLC_Signpost:	dc.w 2
0001E4AA 0000 0000                  		dc.l Nem_SignPost	; signpost
0001E4AE D000                       		dc.w $D000
0001E4B0 0000 0000                  		dc.l Nem_Bonus		; hidden bonus points
0001E4B4 96C0                       		dc.w $96C0
0001E4B6 0000 0000                  		dc.l Nem_BigFlash	; giant	ring flash effect
0001E4BA 8C40                       		dc.w $8C40
0001E4BC                            ; ---------------------------------------------------------------------------
0001E4BC                            ; Pattern load cues - beta special stage warp effect
0001E4BC                            ; ---------------------------------------------------------------------------
0001E4BC 0000                       PLC_Warp:	dc.w 0
0001E4BE 0000 0000                  		dc.l Nem_Warp
0001E4C2 A820                       		dc.w $A820
0001E4C4                            ; ---------------------------------------------------------------------------
0001E4C4                            ; Pattern load cues - special stage
0001E4C4                            ; ---------------------------------------------------------------------------
0001E4C4 0010                       PLC_SpeStage:	dc.w $10
0001E4C6 0000 0000                  		dc.l Nem_SSBgCloud	; bubble and cloud background
0001E4CA 0000                       		dc.w 0
0001E4CC 0000 0000                  		dc.l Nem_SSBgFish	; bird and fish	background
0001E4D0 0A20                       		dc.w $A20
0001E4D2 0000 0000                  		dc.l Nem_SSWalls	; walls
0001E4D6 2840                       		dc.w $2840
0001E4D8 0000 0000                  		dc.l Nem_Bumper		; bumper
0001E4DC 4760                       		dc.w $4760
0001E4DE 0000 0000                  		dc.l Nem_SSGOAL		; GOAL block
0001E4E2 4A20                       		dc.w $4A20
0001E4E4 0000 0000                  		dc.l Nem_SSUpDown	; UP and DOWN blocks
0001E4E8 4C60                       		dc.w $4C60
0001E4EA 0000 0000                  		dc.l Nem_SSRBlock	; R block
0001E4EE 5E00                       		dc.w $5E00
0001E4F0 0000 0000                  		dc.l Nem_SS1UpBlock	; 1UP block
0001E4F4 6E00                       		dc.w $6E00
0001E4F6 0000 0000                  		dc.l Nem_SSEmStars	; emerald collection stars
0001E4FA 7E00                       		dc.w $7E00
0001E4FC 0000 0000                  		dc.l Nem_SSRedWhite	; red and white	block
0001E500 8E00                       		dc.w $8E00
0001E502 0000 0000                  		dc.l Nem_SSGhost	; ghost	block
0001E506 9E00                       		dc.w $9E00
0001E508 0000 0000                  		dc.l Nem_SSWBlock	; W block
0001E50C AE00                       		dc.w $AE00
0001E50E 0000 0000                  		dc.l Nem_SSGlass	; glass	block
0001E512 BE00                       		dc.w $BE00
0001E514 0000 0000                  		dc.l Nem_SSEmerald	; emeralds
0001E518 EE00                       		dc.w $EE00
0001E51A 0000 0000                  		dc.l Nem_SSZone1	; ZONE 1 block
0001E51E F2E0                       		dc.w $F2E0
0001E520 0000 0000                  		dc.l Nem_SSZone2	; ZONE 2 block
0001E524 F400                       		dc.w $F400
0001E526 0000 0000                  		dc.l Nem_SSZone3	; ZONE 3 block
0001E52A F520                       		dc.w $F520
0001E52C 0000 0000                  		dc.l Nem_SSZone4	; ZONE 4 block
0001E530 F2E0                       		dc.w $F2E0
0001E532 0000 0000                  		dc.l Nem_SSZone5	; ZONE 5 block
0001E536 F400                       		dc.w $F400
0001E538 0000 0000                  		dc.l Nem_SSZone6	; ZONE 6 block
0001E53C F520                       		dc.w $F520
0001E53E                            ; ---------------------------------------------------------------------------
0001E53E                            ; Pattern load cues - GHZ animals
0001E53E                            ; ---------------------------------------------------------------------------
0001E53E 0001                       PLC_GHZAnimals:	dc.w 1
0001E540 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001E544 B000                       		dc.w $B000
0001E546 0000 0000                  		dc.l Nem_Flicky		; flicky
0001E54A B240                       		dc.w $B240
0001E54C                            ; ---------------------------------------------------------------------------
0001E54C                            ; Pattern load cues - LZ animals
0001E54C                            ; ---------------------------------------------------------------------------
0001E54C 0001                       PLC_LZAnimals:	dc.w 1
0001E54E 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001E552 B000                       		dc.w $B000
0001E554 0000 0000                  		dc.l Nem_Seal		; seal
0001E558 B240                       		dc.w $B240
0001E55A                            ; ---------------------------------------------------------------------------
0001E55A                            ; Pattern load cues - MZ animals
0001E55A                            ; ---------------------------------------------------------------------------
0001E55A 0001                       PLC_MZAnimals:	dc.w 1
0001E55C 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001E560 B000                       		dc.w $B000
0001E562 0000 0000                  		dc.l Nem_Seal		; seal
0001E566 B240                       		dc.w $B240
0001E568                            ; ---------------------------------------------------------------------------
0001E568                            ; Pattern load cues - SLZ animals
0001E568                            ; ---------------------------------------------------------------------------
0001E568 0001                       PLC_SLZAnimals:	dc.w 1
0001E56A 0000 0000                  		dc.l Nem_Pig		; pig
0001E56E B000                       		dc.w $B000
0001E570 0000 0000                  		dc.l Nem_Flicky		; flicky
0001E574 B240                       		dc.w $B240
0001E576                            ; ---------------------------------------------------------------------------
0001E576                            ; Pattern load cues - SYZ animals
0001E576                            ; ---------------------------------------------------------------------------
0001E576 0001                       PLC_SYZAnimals:	dc.w 1
0001E578 0000 0000                  		dc.l Nem_Pig		; pig
0001E57C B000                       		dc.w $B000
0001E57E 0000 0000                  		dc.l Nem_Chicken	; chicken
0001E582 B240                       		dc.w $B240
0001E584                            ; ---------------------------------------------------------------------------
0001E584                            ; Pattern load cues - SBZ animals
0001E584                            ; ---------------------------------------------------------------------------
0001E584 0001                       PLC_SBZAnimals:	dc.w 1
0001E586 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001E58A B000                       		dc.w $B000
0001E58C 0000 0000                  		dc.l Nem_Chicken	; chicken
0001E590 B240                       		dc.w $B240
0001E592                            ; ---------------------------------------------------------------------------
0001E592                            ; Pattern load cues - special stage results screen
0001E592                            ; ---------------------------------------------------------------------------
0001E592 0001                       PLC_SpeStResult:dc.w 1
0001E594 0000 0000                  		dc.l Nem_ResultEm	; emeralds
0001E598 A820                       		dc.w $A820
0001E59A 0000 0000                  		dc.l Nem_MiniSonic	; mini Sonic
0001E59E AA20                       		dc.w $AA20
0001E5A0                            ; ---------------------------------------------------------------------------
0001E5A0                            ; Pattern load cues - ending sequence
0001E5A0                            ; ---------------------------------------------------------------------------
0001E5A0 000E                       PLC_Ending:	dc.w $E
0001E5A2 0000 0000                  		dc.l Nem_GHZ_1st	; GHZ main patterns
0001E5A6 0000                       		dc.w 0
0001E5A8 0000 0000                  		dc.l Nem_GHZ_2nd	; GHZ secondary	patterns
0001E5AC 39A0                       		dc.w $39A0
0001E5AE 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001E5B2 6B00                       		dc.w $6B00
0001E5B4 0000 0000                  		dc.l Nem_EndFlower	; flowers
0001E5B8 7400                       		dc.w $7400
0001E5BA 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001E5BE 78A0                       		dc.w $78A0
0001E5C0 0000 0000                  		dc.l Nem_EndSonic	; Sonic
0001E5C4 7C20                       		dc.w $7C20
0001E5C6 0000 0000                  		dc.l Nem_EndEggman	; Eggman's death (unused)
0001E5CA A480                       		dc.w $A480
0001E5CC 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001E5D0 AA60                       		dc.w $AA60
0001E5D2 0000 0000                  		dc.l Nem_Chicken	; chicken
0001E5D6 ACA0                       		dc.w $ACA0
0001E5D8 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001E5DC AE60                       		dc.w $AE60
0001E5DE 0000 0000                  		dc.l Nem_Seal		; seal
0001E5E2 B0A0                       		dc.w $B0A0
0001E5E4 0000 0000                  		dc.l Nem_Pig		; pig
0001E5E8 B260                       		dc.w $B260
0001E5EA 0000 0000                  		dc.l Nem_Flicky		; flicky
0001E5EE B4A0                       		dc.w $B4A0
0001E5F0 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001E5F4 B660                       		dc.w $B660
0001E5F6 0000 0000                  		dc.l Nem_EndStH		; "SONIC THE HEDGEHOG"
0001E5FA B8A0                       		dc.w $B8A0
0001E5FC                            ; ---------------------------------------------------------------------------
0001E5FC                            ; Pattern load cues - "TRY AGAIN" and "END" screens
0001E5FC                            ; ---------------------------------------------------------------------------
0001E5FC 0002                       PLC_TryAgain:	dc.w 2
0001E5FE 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001E602 78A0                       		dc.w $78A0
0001E604 0000 0000                  		dc.l Nem_TryAgain	; Eggman
0001E608 7C20                       		dc.w $7C20
0001E60A 0000 0000                  		dc.l Nem_CreditText	; credits alphabet
0001E60E B400                       		dc.w $B400
0001E610                            ; ---------------------------------------------------------------------------
0001E610                            ; Pattern load cues - Eggman on SBZ 2
0001E610                            ; ---------------------------------------------------------------------------
0001E610 0002                       PLC_EggmanSBZ2:	dc.w 2
0001E612 0000 0000                  		dc.l Nem_SbzBlock	; block
0001E616 A300                       		dc.w $A300
0001E618 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman
0001E61C 8000                       		dc.w $8000
0001E61E 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001E622 9400                       		dc.w $9400
0001E624                            ; ---------------------------------------------------------------------------
0001E624                            ; Pattern load cues - final boss
0001E624                            ; ---------------------------------------------------------------------------
0001E624 0004                       PLC_FZBoss:	dc.w 4
0001E626 0000 0000                  		dc.l Nem_FzEggman	; Eggman after boss
0001E62A 7400                       		dc.w $7400
0001E62C 0000 0000                  		dc.l Nem_FzBoss		; FZ boss
0001E630 6000                       		dc.w $6000
0001E632 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001E636 8000                       		dc.w $8000
0001E638 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman without ship
0001E63C 8E00                       		dc.w $8E00
0001E63E 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001E642 A540                       		dc.w $A540
0001E644                            ; ---------------------------------------------------------------------------
0001E644                            ; Pattern load cues - Teto boss
0001E644                            ; ---------------------------------------------------------------------------
0001E644 0002                       PLC_TetoBoss:	dc.w 2
0001E646 0000 0000                  		dc.l Nem_Tetoboss		; Eggman main patterns
0001E64A 8000                       		dc.w $8000
0001E64C 0000 0000                  		dc.l Nem_Prison		; prison capsule
0001E650 93A0                       		dc.w $93A0
0001E652 0000 0000                  		dc.l Nem_Peartobomb		; bomb enemy (gets overwritten)
0001E656 9000                       		dc.w $9000
0001E658                            		even
0001E658                            		even
0001E658                            
0001E658                            		incbin	misc\padding.bin
0001E746                            		even
0001E746                            Nem_SegaLogo:	incbin	artnem\segalogo.bin	; large Sega logo
0001EB9C                            		even
0001EB9C                            Eni_SegaLogo:	incbin	mapeni\segalogo.bin	; large Sega logo (mappings)
0001EC34                            		even
0001EC34                            Nem_Gomer:	incbin	artnem\gomer.bin
0001ED76                            		even
0001ED76                            Eni_Gomer:	incbin	mapeni\gomer.bin
0001EDC4                            		even
0001EDC4                            Eni_Title:	incbin	mapeni\titlescr.bin	; title screen foreground (mappings)
0001EED8                            		even
0001EED8                            Nem_TitleFg:	incbin	artnem\titlefor.bin	; title screen foreground
0001FDA2                            		even
0001FDA2                            Nem_TitleSonic:	incbin	artnem\titleson.bin	; Sonic on title screen
00023EA8                            		even
00023EA8                            Nem_TitleTM:	incbin	artnem\titletm.bin	; TM on title screen
00023EDC                            		even
00023EDC                            Eni_JapNames:	incbin	mapeni\japcreds.bin	; Japanese credits (mappings)
00023F9A                            		even
00023F9A                            Nem_JapNames:	incbin	artnem\japcreds.bin	; Japanese credits
00024442                            		even
00024442                            Eni_Idiot:	incbin	mapeni\idiot.bin	; Idiot (mappings)
000244A0                            		even
000244A0                            Nem_Idiot:	incbin	artnem\idiot.bin	; Idiot
000250A6                            		even
000250A6                            ; ---------------------------------------------------------------------------
000250A6                            ; Sprite mappings - Sonic
000250A6                            ; ---------------------------------------------------------------------------
000250A6                            Map_Sonic:
000250A6                            	include "_maps\Sonic.asm"
000250A6                            Map_a933:
000250A6 0000                       Map_a933_0: 	dc.w Map_a933_E0-Map_a933
000250A8 0000                       Map_a933_2: 	dc.w Map_a933_E1-Map_a933
000250AA 0000                       Map_a933_4: 	dc.w Map_a933_EC-Map_a933
000250AC 0000                       Map_a933_6: 	dc.w Map_a933_FC-Map_a933
000250AE 0000                       Map_a933_8: 	dc.w Map_a933_10C-Map_a933
000250B0 0000                       Map_a933_A: 	dc.w Map_a933_11C-Map_a933
000250B2 0000                       Map_a933_C: 	dc.w Map_a933_12C-Map_a933
000250B4 0000                       Map_a933_E: 	dc.w Map_a933_141-Map_a933
000250B6 0000                       Map_a933_10: 	dc.w Map_a933_14C-Map_a933
000250B8 0000                       Map_a933_12: 	dc.w Map_a933_157-Map_a933
000250BA 0000                       Map_a933_14: 	dc.w Map_a933_16C-Map_a933
000250BC 0000                       Map_a933_16: 	dc.w Map_a933_177-Map_a933
000250BE 0000                       Map_a933_18: 	dc.w Map_a933_187-Map_a933
000250C0 0000                       Map_a933_1A: 	dc.w Map_a933_1A1-Map_a933
000250C2 0000                       Map_a933_1C: 	dc.w Map_a933_1C0-Map_a933
000250C4 0000                       Map_a933_1E: 	dc.w Map_a933_1D5-Map_a933
000250C6 0000                       Map_a933_20: 	dc.w Map_a933_1EF-Map_a933
000250C8 0000                       Map_a933_22: 	dc.w Map_a933_204-Map_a933
000250CA 0000                       Map_a933_24: 	dc.w Map_a933_21E-Map_a933
000250CC 0000                       Map_a933_26: 	dc.w Map_a933_233-Map_a933
000250CE 0000                       Map_a933_28: 	dc.w Map_a933_23E-Map_a933
000250D0 0000                       Map_a933_2A: 	dc.w Map_a933_249-Map_a933
000250D2 0000                       Map_a933_2C: 	dc.w Map_a933_25E-Map_a933
000250D4 0000                       Map_a933_2E: 	dc.w Map_a933_269-Map_a933
000250D6 0000                       Map_a933_30: 	dc.w Map_a933_279-Map_a933
000250D8 0000                       Map_a933_32: 	dc.w Map_a933_298-Map_a933
000250DA 0000                       Map_a933_34: 	dc.w Map_a933_2B7-Map_a933
000250DC 0000                       Map_a933_36: 	dc.w Map_a933_2CC-Map_a933
000250DE 0000                       Map_a933_38: 	dc.w Map_a933_2E6-Map_a933
000250E0 0000                       Map_a933_3A: 	dc.w Map_a933_2FB-Map_a933
000250E2 0000                       Map_a933_3C: 	dc.w Map_a933_315-Map_a933
000250E4 0000                       Map_a933_3E: 	dc.w Map_a933_320-Map_a933
000250E6 0000                       Map_a933_40: 	dc.w Map_a933_32B-Map_a933
000250E8 0000                       Map_a933_42: 	dc.w Map_a933_336-Map_a933
000250EA 0000                       Map_a933_44: 	dc.w Map_a933_341-Map_a933
000250EC 0000                       Map_a933_46: 	dc.w Map_a933_356-Map_a933
000250EE 0000                       Map_a933_48: 	dc.w Map_a933_366-Map_a933
000250F0 0000                       Map_a933_4A: 	dc.w Map_a933_37B-Map_a933
000250F2 0000                       Map_a933_4C: 	dc.w Map_a933_38B-Map_a933
000250F4 0000                       Map_a933_4E: 	dc.w Map_a933_396-Map_a933
000250F6 0000                       Map_a933_50: 	dc.w Map_a933_3A1-Map_a933
000250F8 0000                       Map_a933_52: 	dc.w Map_a933_3AC-Map_a933
000250FA 0000                       Map_a933_54: 	dc.w Map_a933_3B7-Map_a933
000250FC 0000                       Map_a933_56: 	dc.w Map_a933_3CC-Map_a933
000250FE 0000                       Map_a933_58: 	dc.w Map_a933_3D7-Map_a933
00025100 0000                       Map_a933_5A: 	dc.w Map_a933_3EC-Map_a933
00025102 0000                       Map_a933_5C: 	dc.w Map_a933_3F7-Map_a933
00025104 0000                       Map_a933_5E: 	dc.w Map_a933_3FD-Map_a933
00025106 0000                       Map_a933_60: 	dc.w Map_a933_403-Map_a933
00025108 0000                       Map_a933_62: 	dc.w Map_a933_409-Map_a933
0002510A 0000                       Map_a933_64: 	dc.w Map_a933_40F-Map_a933
0002510C 0000                       Map_a933_66: 	dc.w Map_a933_415-Map_a933
0002510E 0000                       Map_a933_68: 	dc.w Map_a933_420-Map_a933
00025110 0000                       Map_a933_6A: 	dc.w Map_a933_426-Map_a933
00025112 0000                       Map_a933_6C: 	dc.w Map_a933_431-Map_a933
00025114 0000                       Map_a933_6E: 	dc.w Map_a933_437-Map_a933
00025116 0000                       Map_a933_70: 	dc.w Map_a933_442-Map_a933
00025118 0000                       Map_a933_72: 	dc.w Map_a933_457-Map_a933
0002511A 0000                       Map_a933_74: 	dc.w Map_a933_476-Map_a933
0002511C 0000                       Map_a933_76: 	dc.w Map_a933_481-Map_a933
0002511E 0000                       Map_a933_78: 	dc.w Map_a933_48C-Map_a933
00025120 0000                       Map_a933_7A: 	dc.w Map_a933_4A1-Map_a933
00025122 0000                       Map_a933_7C: 	dc.w Map_a933_4AC-Map_a933
00025124 0000                       Map_a933_7E: 	dc.w Map_a933_4BC-Map_a933
00025126 0000                       Map_a933_80: 	dc.w Map_a933_4D1-Map_a933
00025128 0000                       Map_a933_82: 	dc.w Map_a933_4DC-Map_a933
0002512A 0000                       Map_a933_84: 	dc.w Map_a933_4F1-Map_a933
0002512C 0000                       Map_a933_86: 	dc.w Map_a933_506-Map_a933
0002512E 0000                       Map_a933_88: 	dc.w Map_a933_520-Map_a933
00025130 0000                       Map_a933_8A: 	dc.w Map_a933_53A-Map_a933
00025132 0000                       Map_a933_8C: 	dc.w Map_a933_545-Map_a933
00025134 0000                       Map_a933_8E: 	dc.w Map_a933_555-Map_a933
00025136 0000                       Map_a933_90: 	dc.w Map_a933_560-Map_a933
00025138 0000                       Map_a933_92: 	dc.w Map_a933_570-Map_a933
0002513A 0000                       Map_a933_94: 	dc.w Map_a933_57B-Map_a933
0002513C 0000                       Map_a933_96: 	dc.w Map_a933_58B-Map_a933
0002513E 0000                       Map_a933_98: 	dc.w Map_a933_59B-Map_a933
00025140 0000                       Map_a933_9A: 	dc.w Map_a933_5B5-Map_a933
00025142 0000                       Map_a933_9C: 	dc.w Map_a933_5CF-Map_a933
00025144 0000                       Map_a933_9E: 	dc.w Map_a933_5DA-Map_a933
00025146 0000                       Map_a933_A0: 	dc.w Map_a933_5EA-Map_a933
00025148 0000                       Map_a933_A2: 	dc.w Map_a933_5F0-Map_a933
0002514A 0000                       Map_a933_A4: 	dc.w Map_a933_5F6-Map_a933
0002514C 0000                       Map_a933_A6: 	dc.w Map_a933_5FC-Map_a933
0002514E 0000                       Map_a933_A8: 	dc.w Map_a933_611-Map_a933
00025150 0000                       Map_a933_AA: 	dc.w Map_a933_621-Map_a933
00025152 0000                       Map_a933_AC: 	dc.w Map_a933_631-Map_a933
00025154 0000                       Map_a933_AE: 	dc.w Map_a933_641-Map_a933
00025156 0000                       Map_a933_B0: 	dc.w Map_a933_64C-Map_a933
00025158 0000                       Map_a933_B2: 	dc.w Map_a933_657-Map_a933
0002515A 0000                       Map_a933_B4: 	dc.w Map_a933_667-Map_a933
0002515C 0000                       Map_a933_B6: 	dc.w Map_a933_672-Map_a933
0002515E 0000                       Map_a933_B8: 	dc.w Map_a933_687-Map_a933
00025160 0000                       Map_a933_BA: 	dc.w Map_a933_688-Map_a933
00025162 0000                       Map_a933_BC: 	dc.w Map_a933_689-Map_a933
00025164 0000                       Map_a933_BE: 	dc.w Map_a933_68A-Map_a933
00025166 0000                       Map_a933_C0: 	dc.w Map_a933_68B-Map_a933
00025168 0000                       Map_a933_C2: 	dc.w Map_a933_696-Map_a933
0002516A 0000                       Map_a933_C4: 	dc.w Map_a933_697-Map_a933
0002516C 0000                       Map_a933_C6: 	dc.w Map_a933_6A2-Map_a933
0002516E 0000                       Map_a933_C8: 	dc.w Map_a933_6A3-Map_a933
00025170 0000                       Map_a933_CA: 	dc.w Map_a933_6A4-Map_a933
00025172 0000                       Map_a933_CC: 	dc.w Map_a933_6A5-Map_a933
00025174 0000                       Map_a933_CE: 	dc.w Map_a933_6B0-Map_a933
00025176 0000                       Map_a933_D0: 	dc.w Map_a933_6B1-Map_a933
00025178 0000                       Map_a933_D2: 	dc.w Map_a933_6BC-Map_a933
0002517A 0000                       Map_a933_D4: 	dc.w Map_a933_6BD-Map_a933
0002517C 0000                       Map_a933_D6: 	dc.w Map_a933_6BE-Map_a933
0002517E 0000                       Map_a933_D8: 	dc.w Map_a933_6BF-Map_a933
00025180 0000                       Map_a933_DA: 	dc.w Map_a933_6CA-Map_a933
00025182 0000                       Map_a933_DC: 	dc.w Map_a933_6CB-Map_a933
00025184 0000                       Map_a933_DE: 	dc.w Map_a933_6D6-Map_a933
00025186 00                         Map_a933_E0: 	dc.b $0
00025187 02                         Map_a933_E1: 	dc.b $2
00025188 ED0E 0000 ED               	dc.b $ED, $E, $0, $0, $ED
0002518D 0509 000C F5               	dc.b $5, $9, $0, $C, $F5
00025192 03                         Map_a933_EC: 	dc.b $3
00025193 EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
00025198 FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
0002519D 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
000251A2 03                         Map_a933_FC: 	dc.b $3
000251A3 EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
000251A8 FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
000251AD 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
000251B2 03                         Map_a933_10C: 	dc.b $3
000251B3 EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
000251B8 FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
000251BD 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
000251C2 03                         Map_a933_11C: 	dc.b $3
000251C3 EC0A 0000 F0               	dc.b $EC, $A, $0, $0, $F0
000251C8 0408 0009 F0               	dc.b $4, $8, $0, $9, $F0
000251CD 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
000251D2 04                         Map_a933_12C: 	dc.b $4
000251D3 EB0D 0000 EC               	dc.b $EB, $D, $0, $0, $EC
000251D8 FB09 0008 EC               	dc.b $FB, $9, $0, $8, $EC
000251DD FB06 000E 04               	dc.b $FB, $6, $0, $E, $4
000251E2 0B04 0014 EC               	dc.b $B, $4, $0, $14, $EC
000251E7 02                         Map_a933_141: 	dc.b $2
000251E8 EC0D 0000 ED               	dc.b $EC, $D, $0, $0, $ED
000251ED FC0E 0008 F5               	dc.b $FC, $E, $0, $8, $F5
000251F2 02                         Map_a933_14C: 	dc.b $2
000251F3 ED09 0000 F3               	dc.b $ED, $9, $0, $0, $F3
000251F8 FD0A 0006 F3               	dc.b $FD, $A, $0, $6, $F3
000251FD 04                         Map_a933_157: 	dc.b $4
000251FE EB09 0000 F4               	dc.b $EB, $9, $0, $0, $F4
00025203 FB09 0006 EC               	dc.b $FB, $9, $0, $6, $EC
00025208 FB06 000C 04               	dc.b $FB, $6, $0, $C, $4
0002520D 0B04 0012 EC               	dc.b $B, $4, $0, $12, $EC
00025212 02                         Map_a933_16C: 	dc.b $2
00025213 FC0E 0000 EB               	dc.b $FC, $E, $0, $0, $EB
00025218 EC09 000C F3               	dc.b $EC, $9, $0, $C, $F3
0002521D 03                         Map_a933_177: 	dc.b $3
0002521E ED0D 0000 EC               	dc.b $ED, $D, $0, $0, $EC
00025223 FD0C 0008 F4               	dc.b $FD, $C, $0, $8, $F4
00025228 0509 000C F4               	dc.b $5, $9, $0, $C, $F4
0002522D 05                         Map_a933_187: 	dc.b $5
0002522E EB09 0000 EB               	dc.b $EB, $9, $0, $0, $EB
00025233 EB06 0006 03               	dc.b $EB, $6, $0, $6, $3
00025238 FB08 000C EB               	dc.b $FB, $8, $0, $C, $EB
0002523D 0309 000F F3               	dc.b $3, $9, $0, $F, $F3
00025242 1300 0015 FB               	dc.b $13, $0, $0, $15, $FB
00025247 06                         Map_a933_1A1: 	dc.b $6
00025248 EC09 0000 EC               	dc.b $EC, $9, $0, $0, $EC
0002524D EC01 0006 04               	dc.b $EC, $1, $0, $6, $4
00025252 FC0C 0008 EC               	dc.b $FC, $C, $0, $8, $EC
00025257 0409 000C F4               	dc.b $4, $9, $0, $C, $F4
0002525C FC05 0012 0C               	dc.b $FC, $5, $0, $12, $C
00025261 F400 0016 14               	dc.b $F4, $0, $0, $16, $14
00025266 04                         Map_a933_1C0: 	dc.b $4
00025267 ED09 0000 ED               	dc.b $ED, $9, $0, $0, $ED
0002526C ED01 0006 05               	dc.b $ED, $1, $0, $6, $5
00025271 FD0D 0008 F5               	dc.b $FD, $D, $0, $8, $F5
00025276 0D08 0010 FD               	dc.b $D, $8, $0, $10, $FD
0002527B 05                         Map_a933_1D5: 	dc.b $5
0002527C EB09 0000 EB               	dc.b $EB, $9, $0, $0, $EB
00025281 EB05 0006 03               	dc.b $EB, $5, $0, $6, $3
00025286 FB0D 000A F3               	dc.b $FB, $D, $0, $A, $F3
0002528B 0B08 0012 F3               	dc.b $B, $8, $0, $12, $F3
00025290 1304 0015 FB               	dc.b $13, $4, $0, $15, $FB
00025295 04                         Map_a933_1EF: 	dc.b $4
00025296 EC09 0000 EC               	dc.b $EC, $9, $0, $0, $EC
0002529B EC01 0006 04               	dc.b $EC, $1, $0, $6, $4
000252A0 FC0D 0008 F4               	dc.b $FC, $D, $0, $8, $F4
000252A5 0C08 0010 FC               	dc.b $C, $8, $0, $10, $FC
000252AA 05                         Map_a933_204: 	dc.b $5
000252AB ED09 0000 ED               	dc.b $ED, $9, $0, $0, $ED
000252B0 ED01 0006 05               	dc.b $ED, $1, $0, $6, $5
000252B5 FD00 0008 ED               	dc.b $FD, $0, $0, $8, $ED
000252BA FD0D 0009 F5               	dc.b $FD, $D, $0, $9, $F5
000252BF 0D08 0011 FD               	dc.b $D, $8, $0, $11, $FD
000252C4 04                         Map_a933_21E: 	dc.b $4
000252C5 F407 0000 EB               	dc.b $F4, $7, $0, $0, $EB
000252CA EC09 0008 FB               	dc.b $EC, $9, $0, $8, $FB
000252CF FC04 000E FB               	dc.b $FC, $4, $0, $E, $FB
000252D4 0409 0010 FB               	dc.b $4, $9, $0, $10, $FB
000252D9 02                         Map_a933_233: 	dc.b $2
000252DA F407 0000 EC               	dc.b $F4, $7, $0, $0, $EC
000252DF EC0B 0008 FC               	dc.b $EC, $B, $0, $8, $FC
000252E4 02                         Map_a933_23E: 	dc.b $2
000252E5 F406 0000 ED               	dc.b $F4, $6, $0, $0, $ED
000252EA F40A 0006 FD               	dc.b $F4, $A, $0, $6, $FD
000252EF 04                         Map_a933_249: 	dc.b $4
000252F0 F406 0000 EB               	dc.b $F4, $6, $0, $0, $EB
000252F5 EC09 0006 FB               	dc.b $EC, $9, $0, $6, $FB
000252FA FC04 000C FB               	dc.b $FC, $4, $0, $C, $FB
000252FF 0409 000E FB               	dc.b $4, $9, $0, $E, $FB
00025304 02                         Map_a933_25E: 	dc.b $2
00025305 F406 0000 EC               	dc.b $F4, $6, $0, $0, $EC
0002530A F40B 0006 FC               	dc.b $F4, $B, $0, $6, $FC
0002530F 03                         Map_a933_269: 	dc.b $3
00025310 F407 0000 ED               	dc.b $F4, $7, $0, $0, $ED
00025315 EC00 0008 FD               	dc.b $EC, $0, $0, $8, $FD
0002531A F40A 0009 FD               	dc.b $F4, $A, $0, $9, $FD
0002531F 06                         Map_a933_279: 	dc.b $6
00025320 FD06 0000 EB               	dc.b $FD, $6, $0, $0, $EB
00025325 ED04 0006 F3               	dc.b $ED, $4, $0, $6, $F3
0002532A F504 0008 EB               	dc.b $F5, $4, $0, $8, $EB
0002532F F50A 000A FB               	dc.b $F5, $A, $0, $A, $FB
00025334 0D00 0013 FB               	dc.b $D, $0, $0, $13, $FB
00025339 FD00 0014 13               	dc.b $FD, $0, $0, $14, $13
0002533E 06                         Map_a933_298: 	dc.b $6
0002533F FC06 0000 EC               	dc.b $FC, $6, $0, $0, $EC
00025344 E408 0006 F4               	dc.b $E4, $8, $0, $6, $F4
00025349 EC04 0009 FC               	dc.b $EC, $4, $0, $9, $FC
0002534E F404 000B EC               	dc.b $F4, $4, $0, $B, $EC
00025353 F40A 000D FC               	dc.b $F4, $A, $0, $D, $FC
00025358 0C00 0016 FC               	dc.b $C, $0, $0, $16, $FC
0002535D 04                         Map_a933_2B7: 	dc.b $4
0002535E FB06 0000 ED               	dc.b $FB, $6, $0, $0, $ED
00025363 F304 0006 ED               	dc.b $F3, $4, $0, $6, $ED
00025368 EB0A 0008 FD               	dc.b $EB, $A, $0, $8, $FD
0002536D 0304 0011 FD               	dc.b $3, $4, $0, $11, $FD
00025372 05                         Map_a933_2CC: 	dc.b $5
00025373 FD06 0000 EB               	dc.b $FD, $6, $0, $0, $EB
00025378 ED08 0006 F3               	dc.b $ED, $8, $0, $6, $F3
0002537D F504 0009 EB               	dc.b $F5, $4, $0, $9, $EB
00025382 F50D 000B FB               	dc.b $F5, $D, $0, $B, $FB
00025387 0508 0013 FB               	dc.b $5, $8, $0, $13, $FB
0002538C 04                         Map_a933_2E6: 	dc.b $4
0002538D FC06 0000 EC               	dc.b $FC, $6, $0, $0, $EC
00025392 F404 0006 EC               	dc.b $F4, $4, $0, $6, $EC
00025397 EC0A 0008 FC               	dc.b $EC, $A, $0, $8, $FC
0002539C 0404 0011 FC               	dc.b $4, $4, $0, $11, $FC
000253A1 05                         Map_a933_2FB: 	dc.b $5
000253A2 FB06 0000 ED               	dc.b $FB, $6, $0, $0, $ED
000253A7 EB0A 0006 FD               	dc.b $EB, $A, $0, $6, $FD
000253AC F304 000F ED               	dc.b $F3, $4, $0, $F, $ED
000253B1 0304 0011 FD               	dc.b $3, $4, $0, $11, $FD
000253B6 0B00 0013 FD               	dc.b $B, $0, $0, $13, $FD
000253BB 02                         Map_a933_315: 	dc.b $2
000253BC EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
000253C1 FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
000253C6 02                         Map_a933_320: 	dc.b $2
000253C7 EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
000253CC FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
000253D1 02                         Map_a933_32B: 	dc.b $2
000253D2 EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
000253D7 FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
000253DC 02                         Map_a933_336: 	dc.b $2
000253DD EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
000253E2 FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
000253E7 04                         Map_a933_341: 	dc.b $4
000253E8 EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
000253ED EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
000253F2 FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
000253F7 FE00 0014 EE               	dc.b $FE, $0, $0, $14, $EE
000253FC 03                         Map_a933_356: 	dc.b $3
000253FD EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
00025402 EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
00025407 FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
0002540C 04                         Map_a933_366: 	dc.b $4
0002540D EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
00025412 EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
00025417 FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
0002541C FE00 0014 EE               	dc.b $FE, $0, $0, $14, $EE
00025421 03                         Map_a933_37B: 	dc.b $3
00025422 EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
00025427 EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
0002542C FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
00025431 02                         Map_a933_38B: 	dc.b $2
00025432 F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
00025437 F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
0002543C 02                         Map_a933_396: 	dc.b $2
0002543D F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
00025442 F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
00025447 02                         Map_a933_3A1: 	dc.b $2
00025448 F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
0002544D F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
00025452 02                         Map_a933_3AC: 	dc.b $2
00025453 F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
00025458 F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
0002545D 04                         Map_a933_3B7: 	dc.b $4
0002545E FA06 0000 EE               	dc.b $FA, $6, $0, $0, $EE
00025463 F204 0006 EE               	dc.b $F2, $4, $0, $6, $EE
00025468 EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
0002546D 0A00 0014 FE               	dc.b $A, $0, $0, $14, $FE
00025472 02                         Map_a933_3CC: 	dc.b $2
00025473 F207 0000 EE               	dc.b $F2, $7, $0, $0, $EE
00025478 EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
0002547D 04                         Map_a933_3D7: 	dc.b $4
0002547E FA06 0000 EE               	dc.b $FA, $6, $0, $0, $EE
00025483 F204 0006 EE               	dc.b $F2, $4, $0, $6, $EE
00025488 EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
0002548D 0A00 0014 FE               	dc.b $A, $0, $0, $14, $FE
00025492 02                         Map_a933_3EC: 	dc.b $2
00025493 F207 0000 EE               	dc.b $F2, $7, $0, $0, $EE
00025498 EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
0002549D 01                         Map_a933_3F7: 	dc.b $1
0002549E F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000254A3 01                         Map_a933_3FD: 	dc.b $1
000254A4 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000254A9 01                         Map_a933_403: 	dc.b $1
000254AA F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000254AF 01                         Map_a933_409: 	dc.b $1
000254B0 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000254B5 01                         Map_a933_40F: 	dc.b $1
000254B6 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000254BB 02                         Map_a933_415: 	dc.b $2
000254BC F40E 0000 EC               	dc.b $F4, $E, $0, $0, $EC
000254C1 F402 000C 0C               	dc.b $F4, $2, $0, $C, $C
000254C6 01                         Map_a933_420: 	dc.b $1
000254C7 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000254CC 02                         Map_a933_426: 	dc.b $2
000254CD EC0B 0000 F4               	dc.b $EC, $B, $0, $0, $F4
000254D2 0C08 000C F4               	dc.b $C, $8, $0, $C, $F4
000254D7 01                         Map_a933_431: 	dc.b $1
000254D8 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000254DD 02                         Map_a933_437: 	dc.b $2
000254DE ED09 0000 F0               	dc.b $ED, $9, $0, $0, $F0
000254E3 FD0E 0006 F0               	dc.b $FD, $E, $0, $6, $F0
000254E8 04                         Map_a933_442: 	dc.b $4
000254E9 ED09 0000 F0               	dc.b $ED, $9, $0, $0, $F0
000254EE FD0D 0006 F0               	dc.b $FD, $D, $0, $6, $F0
000254F3 0D04 000E 00               	dc.b $D, $4, $0, $E, $0
000254F8 0500 0010 E8               	dc.b $5, $0, $0, $10, $E8
000254FD 06                         Map_a933_457: 	dc.b $6
000254FE F404 0000 F4               	dc.b $F4, $4, $0, $0, $F4
00025503 FC0D 0002 EC               	dc.b $FC, $D, $0, $2, $EC
00025508 0C08 000A F4               	dc.b $C, $8, $0, $A, $F4
0002550D 0C00 000D EC               	dc.b $C, $0, $0, $D, $EC
00025512 FC02 000E 0C               	dc.b $FC, $2, $0, $E, $C
00025517 F400 0011 04               	dc.b $F4, $0, $0, $11, $4
0002551C 02                         Map_a933_476: 	dc.b $2
0002551D 040D 0000 E4               	dc.b $4, $D, $0, $0, $E4
00025522 EC0A 0008 EC               	dc.b $EC, $A, $0, $8, $EC
00025527 02                         Map_a933_481: 	dc.b $2
00025528 040D 0000 E3               	dc.b $4, $D, $0, $0, $E3
0002552D EC0A 0008 EB               	dc.b $EC, $A, $0, $8, $EB
00025532 04                         Map_a933_48C: 	dc.b $4
00025533 F40D 0000 FC               	dc.b $F4, $D, $0, $0, $FC
00025538 F705 0008 EC               	dc.b $F7, $5, $0, $8, $EC
0002553D 0408 000C 03               	dc.b $4, $8, $0, $C, $3
00025542 0700 000F EC               	dc.b $7, $0, $0, $F, $EC
00025547 02                         Map_a933_4A1: 	dc.b $2
00025548 F40A 0000 E8               	dc.b $F4, $A, $0, $0, $E8
0002554D F40A 0800 00               	dc.b $F4, $A, $8, $0, $0
00025552 03                         Map_a933_4AC: 	dc.b $3
00025553 F40D 0000 EB               	dc.b $F4, $D, $0, $0, $EB
00025558 FC00 0008 0B               	dc.b $FC, $0, $0, $8, $B
0002555D 040C 0009 EC               	dc.b $4, $C, $0, $9, $EC
00025562 04                         Map_a933_4BC: 	dc.b $4
00025563 F40D 0000 FC               	dc.b $F4, $D, $0, $0, $FC
00025568 F705 0008 EC               	dc.b $F7, $5, $0, $8, $EC
0002556D 0408 000C 02               	dc.b $4, $8, $0, $C, $2
00025572 0700 000F EC               	dc.b $7, $0, $0, $F, $EC
00025577 02                         Map_a933_4D1: 	dc.b $2
00025578 EC0B 0000 F4               	dc.b $EC, $B, $0, $0, $F4
0002557D 0C04 000C F4               	dc.b $C, $4, $0, $C, $F4
00025582 04                         Map_a933_4DC: 	dc.b $4
00025583 F80E 0000 E8               	dc.b $F8, $E, $0, $0, $E8
00025588 0005 000C 08               	dc.b $0, $5, $0, $C, $8
0002558D F800 0010 08               	dc.b $F8, $0, $0, $10, $8
00025592 F000 0011 F8               	dc.b $F0, $0, $0, $11, $F8
00025597 04                         Map_a933_4F1: 	dc.b $4
00025598 F80E 0000 E8               	dc.b $F8, $E, $0, $0, $E8
0002559D 0005 000C 08               	dc.b $0, $5, $0, $C, $8
000255A2 F800 0010 08               	dc.b $F8, $0, $0, $10, $8
000255A7 F000 0011 F8               	dc.b $F0, $0, $0, $11, $F8
000255AC 05                         Map_a933_506: 	dc.b $5
000255AD E80A 0000 F4               	dc.b $E8, $A, $0, $0, $F4
000255B2 F001 0009 0C               	dc.b $F0, $1, $0, $9, $C
000255B7 0009 000B F4               	dc.b $0, $9, $0, $B, $F4
000255BC 1004 0011 F4               	dc.b $10, $4, $0, $11, $F4
000255C1 0000 0013 EC               	dc.b $0, $0, $0, $13, $EC
000255C6 05                         Map_a933_520: 	dc.b $5
000255C7 E80A 0000 F4               	dc.b $E8, $A, $0, $0, $F4
000255CC E801 0009 0C               	dc.b $E8, $1, $0, $9, $C
000255D1 0009 000B F4               	dc.b $0, $9, $0, $B, $F4
000255D6 1004 0011 F4               	dc.b $10, $4, $0, $11, $F4
000255DB 0000 0013 EC               	dc.b $0, $0, $0, $13, $EC
000255E0 02                         Map_a933_53A: 	dc.b $2
000255E1 ED0A 0000 F3               	dc.b $ED, $A, $0, $0, $F3
000255E6 050D 0009 EB               	dc.b $5, $D, $0, $9, $EB
000255EB 03                         Map_a933_545: 	dc.b $3
000255EC EC0A 0000 F3               	dc.b $EC, $A, $0, $0, $F3
000255F1 0408 0009 F3               	dc.b $4, $8, $0, $9, $F3
000255F6 0C04 000C F3               	dc.b $C, $4, $0, $C, $F3
000255FB 02                         Map_a933_555: 	dc.b $2
000255FC ED0A 0000 F3               	dc.b $ED, $A, $0, $0, $F3
00025601 050D 0009 EB               	dc.b $5, $D, $0, $9, $EB
00025606 03                         Map_a933_560: 	dc.b $3
00025607 EC0A 0000 F3               	dc.b $EC, $A, $0, $0, $F3
0002560C 0408 0009 F3               	dc.b $4, $8, $0, $9, $F3
00025611 0C04 000C F3               	dc.b $C, $4, $0, $C, $F3
00025616 02                         Map_a933_570: 	dc.b $2
00025617 EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
0002561C FC0E 0006 F0               	dc.b $FC, $E, $0, $6, $F0
00025621 03                         Map_a933_57B: 	dc.b $3
00025622 EC0A 0000 F0               	dc.b $EC, $A, $0, $0, $F0
00025627 0405 0009 F8               	dc.b $4, $5, $0, $9, $F8
0002562C E400 000D F8               	dc.b $E4, $0, $0, $D, $F8
00025631 03                         Map_a933_58B: 	dc.b $3
00025632 E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
00025637 E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
0002563C F80B 000A F4               	dc.b $F8, $B, $0, $A, $F4
00025641 05                         Map_a933_59B: 	dc.b $5
00025642 E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
00025647 E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
0002564C F809 000A F4               	dc.b $F8, $9, $0, $A, $F4
00025651 080C 0010 F4               	dc.b $8, $C, $0, $10, $F4
00025656 1000 0014 F4               	dc.b $10, $0, $0, $14, $F4
0002565B 05                         Map_a933_5B5: 	dc.b $5
0002565C E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
00025661 E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
00025666 F809 000A F4               	dc.b $F8, $9, $0, $A, $F4
0002566B 080C 0010 F4               	dc.b $8, $C, $0, $10, $F4
00025670 1000 0014 F4               	dc.b $10, $0, $0, $14, $F4
00025675 02                         Map_a933_5CF: 	dc.b $2
00025676 EC08 0000 F0               	dc.b $EC, $8, $0, $0, $F0
0002567B F40F 0003 F0               	dc.b $F4, $F, $0, $3, $F0
00025680 03                         Map_a933_5DA: 	dc.b $3
00025681 EC08 0000 F0               	dc.b $EC, $8, $0, $0, $F0
00025686 F40E 0003 F0               	dc.b $F4, $E, $0, $3, $F0
0002568B 0C08 000F F8               	dc.b $C, $8, $0, $F, $F8
00025690 01                         Map_a933_5EA: 	dc.b $1
00025691 F00B 0000 F4               	dc.b $F0, $B, $0, $0, $F4
00025696 01                         Map_a933_5F0: 	dc.b $1
00025697 F406 0000 F8               	dc.b $F4, $6, $0, $0, $F8
0002569C 01                         Map_a933_5F6: 	dc.b $1
0002569D F801 0000 FC               	dc.b $F8, $1, $0, $0, $FC
000256A2 04                         Map_a933_5FC: 	dc.b $4
000256A3 F40D 0800 E4               	dc.b $F4, $D, $8, $0, $E4
000256A8 F705 0808 04               	dc.b $F7, $5, $8, $8, $4
000256AD 0408 080C E5               	dc.b $4, $8, $8, $C, $E5
000256B2 0700 080F 0C               	dc.b $7, $0, $8, $F, $C
000256B7 03                         Map_a933_611: 	dc.b $3
000256B8 F40D 0800 F5               	dc.b $F4, $D, $8, $0, $F5
000256BD FC00 0808 ED               	dc.b $FC, $0, $8, $8, $ED
000256C2 040C 0809 F4               	dc.b $4, $C, $8, $9, $F4
000256C7 03                         Map_a933_621: 	dc.b $3
000256C8 F00E 0000 EC               	dc.b $F0, $E, $0, $0, $EC
000256CD F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
000256D2 080C 000E F4               	dc.b $8, $C, $0, $E, $F4
000256D7 03                         Map_a933_631: 	dc.b $3
000256D8 EB09 0000 F4               	dc.b $EB, $9, $0, $0, $F4
000256DD FB0E 0006 EC               	dc.b $FB, $E, $0, $6, $EC
000256E2 0301 0012 0C               	dc.b $3, $1, $0, $12, $C
000256E7 02                         Map_a933_641: 	dc.b $2
000256E8 F00F 0000 EC               	dc.b $F0, $F, $0, $0, $EC
000256ED F802 0010 0C               	dc.b $F8, $2, $0, $10, $C
000256F2 02                         Map_a933_64C: 	dc.b $2
000256F3 F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
000256F8 EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
000256FD 03                         Map_a933_657: 	dc.b $3
000256FE ED0F 0000 F3               	dc.b $ED, $F, $0, $0, $F3
00025703 0D00 0010 F3               	dc.b $D, $0, $0, $10, $F3
00025708 0D04 0011 03               	dc.b $D, $4, $0, $11, $3
0002570D 02                         Map_a933_667: 	dc.b $2
0002570E F60F 0000 EE               	dc.b $F6, $F, $0, $0, $EE
00025713 EE08 0010 F6               	dc.b $EE, $8, $0, $10, $F6
00025718 04                         Map_a933_672: 	dc.b $4
00025719 ED08 0000 F3               	dc.b $ED, $8, $0, $0, $F3
0002571E F50E 0003 EB               	dc.b $F5, $E, $0, $3, $EB
00025723 F503 000F 0B               	dc.b $F5, $3, $0, $F, $B
00025728 0D08 0013 F3               	dc.b $D, $8, $0, $13, $F3
0002572D 00                         Map_a933_687: 	dc.b $0
0002572E 00                         Map_a933_688: 	dc.b $0
0002572F 00                         Map_a933_689: 	dc.b $0
00025730 00                         Map_a933_68A: 	dc.b $0
00025731 02                         Map_a933_68B: 	dc.b $2
00025732 F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
00025737 EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
0002573C 00                         Map_a933_696: 	dc.b $0
0002573D 02                         Map_a933_697: 	dc.b $2
0002573E F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
00025743 EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
00025748 00                         Map_a933_6A2: 	dc.b $0
00025749 00                         Map_a933_6A3: 	dc.b $0
0002574A 00                         Map_a933_6A4: 	dc.b $0
0002574B 02                         Map_a933_6A5: 	dc.b $2
0002574C F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
00025751 EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
00025756 00                         Map_a933_6B0: 	dc.b $0
00025757 02                         Map_a933_6B1: 	dc.b $2
00025758 F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
0002575D EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
00025762 00                         Map_a933_6BC: 	dc.b $0
00025763 00                         Map_a933_6BD: 	dc.b $0
00025764 00                         Map_a933_6BE: 	dc.b $0
00025765 02                         Map_a933_6BF: 	dc.b $2
00025766 F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
0002576B EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
00025770 00                         Map_a933_6CA: 	dc.b $0
00025771 02                         Map_a933_6CB: 	dc.b $2
00025772 F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
00025777 EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
0002577C 00                         Map_a933_6D6: 	dc.b $0
0002577E 00                         	even
0002577E 00                         	even
0002577E                            
0002577E                            ; ---------------------------------------------------------------------------
0002577E                            ; Uncompressed graphics	loading	array for Sonic
0002577E                            ; ---------------------------------------------------------------------------
0002577E                            SonicDynPLC:
0002577E                            	include "_inc\Sonic dynamic pattern load cues.asm"
0002577E                            DPLC_33c5:
0002577E 0000                       DPLC_33c5_0: 	dc.w DPLC_33c5_E0-DPLC_33c5
00025780 0000                       DPLC_33c5_2: 	dc.w DPLC_33c5_E1-DPLC_33c5
00025782 0000                       DPLC_33c5_4: 	dc.w DPLC_33c5_E6-DPLC_33c5
00025784 0000                       DPLC_33c5_6: 	dc.w DPLC_33c5_ED-DPLC_33c5
00025786 0000                       DPLC_33c5_8: 	dc.w DPLC_33c5_F4-DPLC_33c5
00025788 0000                       DPLC_33c5_A: 	dc.w DPLC_33c5_FB-DPLC_33c5
0002578A 0000                       DPLC_33c5_C: 	dc.w DPLC_33c5_102-DPLC_33c5
0002578C 0000                       DPLC_33c5_E: 	dc.w DPLC_33c5_10B-DPLC_33c5
0002578E 0000                       DPLC_33c5_10: 	dc.w DPLC_33c5_110-DPLC_33c5
00025790 0000                       DPLC_33c5_12: 	dc.w DPLC_33c5_115-DPLC_33c5
00025792 0000                       DPLC_33c5_14: 	dc.w DPLC_33c5_11E-DPLC_33c5
00025794 0000                       DPLC_33c5_16: 	dc.w DPLC_33c5_123-DPLC_33c5
00025796 0000                       DPLC_33c5_18: 	dc.w DPLC_33c5_12A-DPLC_33c5
00025798 0000                       DPLC_33c5_1A: 	dc.w DPLC_33c5_135-DPLC_33c5
0002579A 0000                       DPLC_33c5_1C: 	dc.w DPLC_33c5_142-DPLC_33c5
0002579C 0000                       DPLC_33c5_1E: 	dc.w DPLC_33c5_14B-DPLC_33c5
0002579E 0000                       DPLC_33c5_20: 	dc.w DPLC_33c5_156-DPLC_33c5
000257A0 0000                       DPLC_33c5_22: 	dc.w DPLC_33c5_15F-DPLC_33c5
000257A2 0000                       DPLC_33c5_24: 	dc.w DPLC_33c5_16A-DPLC_33c5
000257A4 0000                       DPLC_33c5_26: 	dc.w DPLC_33c5_173-DPLC_33c5
000257A6 0000                       DPLC_33c5_28: 	dc.w DPLC_33c5_178-DPLC_33c5
000257A8 0000                       DPLC_33c5_2A: 	dc.w DPLC_33c5_17D-DPLC_33c5
000257AA 0000                       DPLC_33c5_2C: 	dc.w DPLC_33c5_186-DPLC_33c5
000257AC 0000                       DPLC_33c5_2E: 	dc.w DPLC_33c5_18B-DPLC_33c5
000257AE 0000                       DPLC_33c5_30: 	dc.w DPLC_33c5_192-DPLC_33c5
000257B0 0000                       DPLC_33c5_32: 	dc.w DPLC_33c5_19F-DPLC_33c5
000257B2 0000                       DPLC_33c5_34: 	dc.w DPLC_33c5_1AC-DPLC_33c5
000257B4 0000                       DPLC_33c5_36: 	dc.w DPLC_33c5_1B5-DPLC_33c5
000257B6 0000                       DPLC_33c5_38: 	dc.w DPLC_33c5_1C0-DPLC_33c5
000257B8 0000                       DPLC_33c5_3A: 	dc.w DPLC_33c5_1C9-DPLC_33c5
000257BA 0000                       DPLC_33c5_3C: 	dc.w DPLC_33c5_1D4-DPLC_33c5
000257BC 0000                       DPLC_33c5_3E: 	dc.w DPLC_33c5_1D9-DPLC_33c5
000257BE 0000                       DPLC_33c5_40: 	dc.w DPLC_33c5_1DE-DPLC_33c5
000257C0 0000                       DPLC_33c5_42: 	dc.w DPLC_33c5_1E3-DPLC_33c5
000257C2 0000                       DPLC_33c5_44: 	dc.w DPLC_33c5_1E8-DPLC_33c5
000257C4 0000                       DPLC_33c5_46: 	dc.w DPLC_33c5_1F1-DPLC_33c5
000257C6 0000                       DPLC_33c5_48: 	dc.w DPLC_33c5_1F8-DPLC_33c5
000257C8 0000                       DPLC_33c5_4A: 	dc.w DPLC_33c5_201-DPLC_33c5
000257CA 0000                       DPLC_33c5_4C: 	dc.w DPLC_33c5_208-DPLC_33c5
000257CC 0000                       DPLC_33c5_4E: 	dc.w DPLC_33c5_20D-DPLC_33c5
000257CE 0000                       DPLC_33c5_50: 	dc.w DPLC_33c5_212-DPLC_33c5
000257D0 0000                       DPLC_33c5_52: 	dc.w DPLC_33c5_217-DPLC_33c5
000257D2 0000                       DPLC_33c5_54: 	dc.w DPLC_33c5_21C-DPLC_33c5
000257D4 0000                       DPLC_33c5_56: 	dc.w DPLC_33c5_225-DPLC_33c5
000257D6 0000                       DPLC_33c5_58: 	dc.w DPLC_33c5_22A-DPLC_33c5
000257D8 0000                       DPLC_33c5_5A: 	dc.w DPLC_33c5_233-DPLC_33c5
000257DA 0000                       DPLC_33c5_5C: 	dc.w DPLC_33c5_238-DPLC_33c5
000257DC 0000                       DPLC_33c5_5E: 	dc.w DPLC_33c5_23B-DPLC_33c5
000257DE 0000                       DPLC_33c5_60: 	dc.w DPLC_33c5_23E-DPLC_33c5
000257E0 0000                       DPLC_33c5_62: 	dc.w DPLC_33c5_241-DPLC_33c5
000257E2 0000                       DPLC_33c5_64: 	dc.w DPLC_33c5_244-DPLC_33c5
000257E4 0000                       DPLC_33c5_66: 	dc.w DPLC_33c5_247-DPLC_33c5
000257E6 0000                       DPLC_33c5_68: 	dc.w DPLC_33c5_24C-DPLC_33c5
000257E8 0000                       DPLC_33c5_6A: 	dc.w DPLC_33c5_24F-DPLC_33c5
000257EA 0000                       DPLC_33c5_6C: 	dc.w DPLC_33c5_254-DPLC_33c5
000257EC 0000                       DPLC_33c5_6E: 	dc.w DPLC_33c5_257-DPLC_33c5
000257EE 0000                       DPLC_33c5_70: 	dc.w DPLC_33c5_25C-DPLC_33c5
000257F0 0000                       DPLC_33c5_72: 	dc.w DPLC_33c5_265-DPLC_33c5
000257F2 0000                       DPLC_33c5_74: 	dc.w DPLC_33c5_26A-DPLC_33c5
000257F4 0000                       DPLC_33c5_76: 	dc.w DPLC_33c5_26F-DPLC_33c5
000257F6 0000                       DPLC_33c5_78: 	dc.w DPLC_33c5_274-DPLC_33c5
000257F8 0000                       DPLC_33c5_7A: 	dc.w DPLC_33c5_279-DPLC_33c5
000257FA 0000                       DPLC_33c5_7C: 	dc.w DPLC_33c5_27C-DPLC_33c5
000257FC 0000                       DPLC_33c5_7E: 	dc.w DPLC_33c5_283-DPLC_33c5
000257FE 0000                       DPLC_33c5_80: 	dc.w DPLC_33c5_288-DPLC_33c5
00025800 0000                       DPLC_33c5_82: 	dc.w DPLC_33c5_28B-DPLC_33c5
00025802 0000                       DPLC_33c5_84: 	dc.w DPLC_33c5_294-DPLC_33c5
00025804 0000                       DPLC_33c5_86: 	dc.w DPLC_33c5_29D-DPLC_33c5
00025806 0000                       DPLC_33c5_88: 	dc.w DPLC_33c5_2A8-DPLC_33c5
00025808 0000                       DPLC_33c5_8A: 	dc.w DPLC_33c5_2B3-DPLC_33c5
0002580A 0000                       DPLC_33c5_8C: 	dc.w DPLC_33c5_2B8-DPLC_33c5
0002580C 0000                       DPLC_33c5_8E: 	dc.w DPLC_33c5_2BF-DPLC_33c5
0002580E 0000                       DPLC_33c5_90: 	dc.w DPLC_33c5_2C4-DPLC_33c5
00025810 0000                       DPLC_33c5_92: 	dc.w DPLC_33c5_2CB-DPLC_33c5
00025812 0000                       DPLC_33c5_94: 	dc.w DPLC_33c5_2D0-DPLC_33c5
00025814 0000                       DPLC_33c5_96: 	dc.w DPLC_33c5_2D7-DPLC_33c5
00025816 0000                       DPLC_33c5_98: 	dc.w DPLC_33c5_2DE-DPLC_33c5
00025818 0000                       DPLC_33c5_9A: 	dc.w DPLC_33c5_2E9-DPLC_33c5
0002581A 0000                       DPLC_33c5_9C: 	dc.w DPLC_33c5_2F4-DPLC_33c5
0002581C 0000                       DPLC_33c5_9E: 	dc.w DPLC_33c5_2F9-DPLC_33c5
0002581E 0000                       DPLC_33c5_A0: 	dc.w DPLC_33c5_300-DPLC_33c5
00025820 0000                       DPLC_33c5_A2: 	dc.w DPLC_33c5_303-DPLC_33c5
00025822 0000                       DPLC_33c5_A4: 	dc.w DPLC_33c5_306-DPLC_33c5
00025824 0000                       DPLC_33c5_A6: 	dc.w DPLC_33c5_309-DPLC_33c5
00025826 0000                       DPLC_33c5_A8: 	dc.w DPLC_33c5_30E-DPLC_33c5
00025828 0000                       DPLC_33c5_AA: 	dc.w DPLC_33c5_315-DPLC_33c5
0002582A 0000                       DPLC_33c5_AC: 	dc.w DPLC_33c5_31C-DPLC_33c5
0002582C 0000                       DPLC_33c5_AE: 	dc.w DPLC_33c5_323-DPLC_33c5
0002582E 0000                       DPLC_33c5_B0: 	dc.w DPLC_33c5_328-DPLC_33c5
00025830 0000                       DPLC_33c5_B2: 	dc.w DPLC_33c5_32D-DPLC_33c5
00025832 0000                       DPLC_33c5_B4: 	dc.w DPLC_33c5_332-DPLC_33c5
00025834 0000                       DPLC_33c5_B6: 	dc.w DPLC_33c5_337-DPLC_33c5
00025836 0000                       DPLC_33c5_B8: 	dc.w DPLC_33c5_33C-DPLC_33c5
00025838 0000                       DPLC_33c5_BA: 	dc.w DPLC_33c5_33D-DPLC_33c5
0002583A 0000                       DPLC_33c5_BC: 	dc.w DPLC_33c5_33E-DPLC_33c5
0002583C 0000                       DPLC_33c5_BE: 	dc.w DPLC_33c5_33F-DPLC_33c5
0002583E 0000                       DPLC_33c5_C0: 	dc.w DPLC_33c5_340-DPLC_33c5
00025840 0000                       DPLC_33c5_C2: 	dc.w DPLC_33c5_345-DPLC_33c5
00025842 0000                       DPLC_33c5_C4: 	dc.w DPLC_33c5_346-DPLC_33c5
00025844 0000                       DPLC_33c5_C6: 	dc.w DPLC_33c5_34B-DPLC_33c5
00025846 0000                       DPLC_33c5_C8: 	dc.w DPLC_33c5_34C-DPLC_33c5
00025848 0000                       DPLC_33c5_CA: 	dc.w DPLC_33c5_34D-DPLC_33c5
0002584A 0000                       DPLC_33c5_CC: 	dc.w DPLC_33c5_34E-DPLC_33c5
0002584C 0000                       DPLC_33c5_CE: 	dc.w DPLC_33c5_353-DPLC_33c5
0002584E 0000                       DPLC_33c5_D0: 	dc.w DPLC_33c5_354-DPLC_33c5
00025850 0000                       DPLC_33c5_D2: 	dc.w DPLC_33c5_359-DPLC_33c5
00025852 0000                       DPLC_33c5_D4: 	dc.w DPLC_33c5_35A-DPLC_33c5
00025854 0000                       DPLC_33c5_D6: 	dc.w DPLC_33c5_35B-DPLC_33c5
00025856 0000                       DPLC_33c5_D8: 	dc.w DPLC_33c5_35C-DPLC_33c5
00025858 0000                       DPLC_33c5_DA: 	dc.w DPLC_33c5_361-DPLC_33c5
0002585A 0000                       DPLC_33c5_DC: 	dc.w DPLC_33c5_362-DPLC_33c5
0002585C 0000                       DPLC_33c5_DE: 	dc.w DPLC_33c5_367-DPLC_33c5
0002585E 00                         DPLC_33c5_E0: 	dc.b $0
0002585F 02                         DPLC_33c5_E1: 	dc.b $2
00025860 F000                       	dc.b $F0, $0
00025862 1010                       	dc.b $10, $10
00025864 03                         DPLC_33c5_E6: 	dc.b $3
00025865 5012                       	dc.b $50, $12
00025867 5018                       	dc.b $50, $18
00025869 201E                       	dc.b $20, $1E
0002586B 03                         DPLC_33c5_ED: 	dc.b $3
0002586C 5021                       	dc.b $50, $21
0002586E 5018                       	dc.b $50, $18
00025870 201E                       	dc.b $20, $1E
00025872 03                         DPLC_33c5_F4: 	dc.b $3
00025873 5021                       	dc.b $50, $21
00025875 5018                       	dc.b $50, $18
00025877 2027                       	dc.b $20, $27
00025879 03                         DPLC_33c5_FB: 	dc.b $3
0002587A 802A                       	dc.b $80, $2A
0002587C 2033                       	dc.b $20, $33
0002587E 2036                       	dc.b $20, $36
00025880 04                         DPLC_33c5_102: 	dc.b $4
00025881 7039                       	dc.b $70, $39
00025883 5041                       	dc.b $50, $41
00025885 5047                       	dc.b $50, $47
00025887 104D                       	dc.b $10, $4D
00025889 02                         DPLC_33c5_10B: 	dc.b $2
0002588A 7039                       	dc.b $70, $39
0002588C B04F                       	dc.b $B0, $4F
0002588E 02                         DPLC_33c5_110: 	dc.b $2
0002588F 505B                       	dc.b $50, $5B
00025891 8061                       	dc.b $80, $61
00025893 04                         DPLC_33c5_115: 	dc.b $4
00025894 505B                       	dc.b $50, $5B
00025896 506A                       	dc.b $50, $6A
00025898 5070                       	dc.b $50, $70
0002589A 1076                       	dc.b $10, $76
0002589C 02                         DPLC_33c5_11E: 	dc.b $2
0002589D F4F0                       	dc.b $F4, $F0
0002589F 1500                       	dc.b $15, $0
000258A1 03                         DPLC_33c5_123: 	dc.b $3
000258A2 7039                       	dc.b $70, $39
000258A4 3078                       	dc.b $30, $78
000258A6 507C                       	dc.b $50, $7C
000258A8 05                         DPLC_33c5_12A: 	dc.b $5
000258A9 5082                       	dc.b $50, $82
000258AB 5088                       	dc.b $50, $88
000258AD 208E                       	dc.b $20, $8E
000258AF 5091                       	dc.b $50, $91
000258B1 0097                       	dc.b $0, $97
000258B3 06                         DPLC_33c5_135: 	dc.b $6
000258B4 5082                       	dc.b $50, $82
000258B6 1098                       	dc.b $10, $98
000258B8 309A                       	dc.b $30, $9A
000258BA 509E                       	dc.b $50, $9E
000258BC 30A4                       	dc.b $30, $A4
000258BE 00A8                       	dc.b $0, $A8
000258C0 04                         DPLC_33c5_142: 	dc.b $4
000258C1 50A9                       	dc.b $50, $A9
000258C3 10AF                       	dc.b $10, $AF
000258C5 70B1                       	dc.b $70, $B1
000258C7 20B9                       	dc.b $20, $B9
000258C9 05                         DPLC_33c5_14B: 	dc.b $5
000258CA 50BC                       	dc.b $50, $BC
000258CC 30C2                       	dc.b $30, $C2
000258CE 70C6                       	dc.b $70, $C6
000258D0 20CE                       	dc.b $20, $CE
000258D2 10D1                       	dc.b $10, $D1
000258D4 04                         DPLC_33c5_156: 	dc.b $4
000258D5 50BC                       	dc.b $50, $BC
000258D7 10D3                       	dc.b $10, $D3
000258D9 70D5                       	dc.b $70, $D5
000258DB 20DD                       	dc.b $20, $DD
000258DD 05                         DPLC_33c5_15F: 	dc.b $5
000258DE 5082                       	dc.b $50, $82
000258E0 1098                       	dc.b $10, $98
000258E2 008E                       	dc.b $0, $8E
000258E4 70E0                       	dc.b $70, $E0
000258E6 20E8                       	dc.b $20, $E8
000258E8 04                         DPLC_33c5_16A: 	dc.b $4
000258E9 70EB                       	dc.b $70, $EB
000258EB 50F3                       	dc.b $50, $F3
000258ED 10F9                       	dc.b $10, $F9
000258EF 50FB                       	dc.b $50, $FB
000258F1 02                         DPLC_33c5_173: 	dc.b $2
000258F2 70EB                       	dc.b $70, $EB
000258F4 B101                       	dc.b $B1, $1
000258F6 02                         DPLC_33c5_178: 	dc.b $2
000258F7 510D                       	dc.b $51, $D
000258F9 8113                       	dc.b $81, $13
000258FB 04                         DPLC_33c5_17D: 	dc.b $4
000258FC 510D                       	dc.b $51, $D
000258FE 511C                       	dc.b $51, $1C
00025900 1122                       	dc.b $11, $22
00025902 5124                       	dc.b $51, $24
00025904 02                         DPLC_33c5_186: 	dc.b $2
00025905 510D                       	dc.b $51, $D
00025907 B12A                       	dc.b $B1, $2A
00025909 03                         DPLC_33c5_18B: 	dc.b $3
0002590A 70EB                       	dc.b $70, $EB
0002590C 0101                       	dc.b $1, $1
0002590E 8136                       	dc.b $81, $36
00025910 06                         DPLC_33c5_192: 	dc.b $6
00025911 513F                       	dc.b $51, $3F
00025913 1145                       	dc.b $11, $45
00025915 1147                       	dc.b $11, $47
00025917 8149                       	dc.b $81, $49
00025919 0152                       	dc.b $1, $52
0002591B 0153                       	dc.b $1, $53
0002591D 06                         DPLC_33c5_19F: 	dc.b $6
0002591E 513F                       	dc.b $51, $3F
00025920 2154                       	dc.b $21, $54
00025922 1157                       	dc.b $11, $57
00025924 1159                       	dc.b $11, $59
00025926 815B                       	dc.b $81, $5B
00025928 0152                       	dc.b $1, $52
0002592A 04                         DPLC_33c5_1AC: 	dc.b $4
0002592B 5164                       	dc.b $51, $64
0002592D 116A                       	dc.b $11, $6A
0002592F 816C                       	dc.b $81, $6C
00025931 1175                       	dc.b $11, $75
00025933 05                         DPLC_33c5_1B5: 	dc.b $5
00025934 5177                       	dc.b $51, $77
00025936 217D                       	dc.b $21, $7D
00025938 1180                       	dc.b $11, $80
0002593A 7182                       	dc.b $71, $82
0002593C 218A                       	dc.b $21, $8A
0002593E 04                         DPLC_33c5_1C0: 	dc.b $4
0002593F 5177                       	dc.b $51, $77
00025941 118D                       	dc.b $11, $8D
00025943 818F                       	dc.b $81, $8F
00025945 1198                       	dc.b $11, $98
00025947 05                         DPLC_33c5_1C9: 	dc.b $5
00025948 513F                       	dc.b $51, $3F
0002594A 819A                       	dc.b $81, $9A
0002594C 1159                       	dc.b $11, $59
0002594E 11A3                       	dc.b $11, $A3
00025950 0152                       	dc.b $1, $52
00025952 02                         DPLC_33c5_1D4: 	dc.b $2
00025953 51A5                       	dc.b $51, $A5
00025955 B1AB                       	dc.b $B1, $AB
00025957 02                         DPLC_33c5_1D9: 	dc.b $2
00025958 505B                       	dc.b $50, $5B
0002595A B1B7                       	dc.b $B1, $B7
0002595C 02                         DPLC_33c5_1DE: 	dc.b $2
0002595D 51A5                       	dc.b $51, $A5
0002595F B1C3                       	dc.b $B1, $C3
00025961 02                         DPLC_33c5_1E3: 	dc.b $2
00025962 505B                       	dc.b $50, $5B
00025964 B1CF                       	dc.b $B1, $CF
00025966 04                         DPLC_33c5_1E8: 	dc.b $4
00025967 51DB                       	dc.b $51, $DB
00025969 11E1                       	dc.b $11, $E1
0002596B B1E3                       	dc.b $B1, $E3
0002596D 01EF                       	dc.b $1, $EF
0002596F 03                         DPLC_33c5_1F1: 	dc.b $3
00025970 51F0                       	dc.b $51, $F0
00025972 11F6                       	dc.b $11, $F6
00025974 B1F8                       	dc.b $B1, $F8
00025976 04                         DPLC_33c5_1F8: 	dc.b $4
00025977 51DB                       	dc.b $51, $DB
00025979 1204                       	dc.b $12, $4
0002597B B206                       	dc.b $B2, $6
0002597D 01EF                       	dc.b $1, $EF
0002597F 03                         DPLC_33c5_201: 	dc.b $3
00025980 51F0                       	dc.b $51, $F0
00025982 11F6                       	dc.b $11, $F6
00025984 B212                       	dc.b $B2, $12
00025986 02                         DPLC_33c5_208: 	dc.b $2
00025987 521E                       	dc.b $52, $1E
00025989 B224                       	dc.b $B2, $24
0002598B 02                         DPLC_33c5_20D: 	dc.b $2
0002598C 510D                       	dc.b $51, $D
0002598E B230                       	dc.b $B2, $30
00025990 02                         DPLC_33c5_212: 	dc.b $2
00025991 521E                       	dc.b $52, $1E
00025993 B23C                       	dc.b $B2, $3C
00025995 02                         DPLC_33c5_217: 	dc.b $2
00025996 510D                       	dc.b $51, $D
00025998 B248                       	dc.b $B2, $48
0002599A 04                         DPLC_33c5_21C: 	dc.b $4
0002599B 5254                       	dc.b $52, $54
0002599D 125A                       	dc.b $12, $5A
0002599F B25C                       	dc.b $B2, $5C
000259A1 0268                       	dc.b $2, $68
000259A3 02                         DPLC_33c5_225: 	dc.b $2
000259A4 7269                       	dc.b $72, $69
000259A6 B271                       	dc.b $B2, $71
000259A8 04                         DPLC_33c5_22A: 	dc.b $4
000259A9 5254                       	dc.b $52, $54
000259AB 127D                       	dc.b $12, $7D
000259AD B27F                       	dc.b $B2, $7F
000259AF 0268                       	dc.b $2, $68
000259B1 02                         DPLC_33c5_233: 	dc.b $2
000259B2 7269                       	dc.b $72, $69
000259B4 B28B                       	dc.b $B2, $8B
000259B6 01                         DPLC_33c5_238: 	dc.b $1
000259B7 F297                       	dc.b $F2, $97
000259B9 01                         DPLC_33c5_23B: 	dc.b $1
000259BA F2A7                       	dc.b $F2, $A7
000259BC 01                         DPLC_33c5_23E: 	dc.b $1
000259BD F2B7                       	dc.b $F2, $B7
000259BF 01                         DPLC_33c5_241: 	dc.b $1
000259C0 F2C7                       	dc.b $F2, $C7
000259C2 01                         DPLC_33c5_244: 	dc.b $1
000259C3 F2D7                       	dc.b $F2, $D7
000259C5 02                         DPLC_33c5_247: 	dc.b $2
000259C6 B2E7                       	dc.b $B2, $E7
000259C8 22F3                       	dc.b $22, $F3
000259CA 01                         DPLC_33c5_24C: 	dc.b $1
000259CB F2F6                       	dc.b $F2, $F6
000259CD 02                         DPLC_33c5_24F: 	dc.b $2
000259CE B306                       	dc.b $B3, $6
000259D0 2312                       	dc.b $23, $12
000259D2 01                         DPLC_33c5_254: 	dc.b $1
000259D3 F315                       	dc.b $F3, $15
000259D5 02                         DPLC_33c5_257: 	dc.b $2
000259D6 5325                       	dc.b $53, $25
000259D8 B32B                       	dc.b $B3, $2B
000259DA 04                         DPLC_33c5_25C: 	dc.b $4
000259DB 5337                       	dc.b $53, $37
000259DD 733D                       	dc.b $73, $3D
000259DF 1345                       	dc.b $13, $45
000259E1 0347                       	dc.b $3, $47
000259E3 02                         DPLC_33c5_265: 	dc.b $2
000259E4 D348                       	dc.b $D3, $48
000259E6 34EC                       	dc.b $34, $EC
000259E8 02                         DPLC_33c5_26A: 	dc.b $2
000259E9 F528                       	dc.b $F5, $28
000259EB 0538                       	dc.b $5, $38
000259ED 02                         DPLC_33c5_26F: 	dc.b $2
000259EE F539                       	dc.b $F5, $39
000259F0 0549                       	dc.b $5, $49
000259F2 02                         DPLC_33c5_274: 	dc.b $2
000259F3 E356                       	dc.b $E3, $56
000259F5 054A                       	dc.b $5, $4A
000259F7 01                         DPLC_33c5_279: 	dc.b $1
000259F8 8365                       	dc.b $83, $65
000259FA 03                         DPLC_33c5_27C: 	dc.b $3
000259FB 736E                       	dc.b $73, $6E
000259FD 0376                       	dc.b $3, $76
000259FF 3377                       	dc.b $33, $77
00025A01 02                         DPLC_33c5_283: 	dc.b $2
00025A02 E37B                       	dc.b $E3, $7B
00025A04 054A                       	dc.b $5, $4A
00025A06 01                         DPLC_33c5_288: 	dc.b $1
00025A07 D561                       	dc.b $D5, $61
00025A09 04                         DPLC_33c5_28B: 	dc.b $4
00025A0A B399                       	dc.b $B3, $99
00025A0C 33A5                       	dc.b $33, $A5
00025A0E 03A9                       	dc.b $3, $A9
00025A10 03AA                       	dc.b $3, $AA
00025A12 04                         DPLC_33c5_294: 	dc.b $4
00025A13 B3AB                       	dc.b $B3, $AB
00025A15 33B7                       	dc.b $33, $B7
00025A17 03BB                       	dc.b $3, $BB
00025A19 03BC                       	dc.b $3, $BC
00025A1B 05                         DPLC_33c5_29D: 	dc.b $5
00025A1C 83BD                       	dc.b $83, $BD
00025A1E 13C6                       	dc.b $13, $C6
00025A20 53C8                       	dc.b $53, $C8
00025A22 13CE                       	dc.b $13, $CE
00025A24 03D0                       	dc.b $3, $D0
00025A26 05                         DPLC_33c5_2A8: 	dc.b $5
00025A27 83D1                       	dc.b $83, $D1
00025A29 13DA                       	dc.b $13, $DA
00025A2B 53C8                       	dc.b $53, $C8
00025A2D 13CE                       	dc.b $13, $CE
00025A2F 03D0                       	dc.b $3, $D0
00025A31 02                         DPLC_33c5_2B3: 	dc.b $2
00025A32 83DC                       	dc.b $83, $DC
00025A34 73E5                       	dc.b $73, $E5
00025A36 03                         DPLC_33c5_2B8: 	dc.b $3
00025A37 83ED                       	dc.b $83, $ED
00025A39 23F6                       	dc.b $23, $F6
00025A3B 13F9                       	dc.b $13, $F9
00025A3D 02                         DPLC_33c5_2BF: 	dc.b $2
00025A3E 83FB                       	dc.b $83, $FB
00025A40 7404                       	dc.b $74, $4
00025A42 03                         DPLC_33c5_2C4: 	dc.b $3
00025A43 83ED                       	dc.b $83, $ED
00025A45 240C                       	dc.b $24, $C
00025A47 140F                       	dc.b $14, $F
00025A49 02                         DPLC_33c5_2CB: 	dc.b $2
00025A4A 5411                       	dc.b $54, $11
00025A4C B417                       	dc.b $B4, $17
00025A4E 03                         DPLC_33c5_2D0: 	dc.b $3
00025A4F 8423                       	dc.b $84, $23
00025A51 342C                       	dc.b $34, $2C
00025A53 0430                       	dc.b $4, $30
00025A55 03                         DPLC_33c5_2D7: 	dc.b $3
00025A56 7431                       	dc.b $74, $31
00025A58 1439                       	dc.b $14, $39
00025A5A B43B                       	dc.b $B4, $3B
00025A5C 05                         DPLC_33c5_2DE: 	dc.b $5
00025A5D 7447                       	dc.b $74, $47
00025A5F 144F                       	dc.b $14, $4F
00025A61 5451                       	dc.b $54, $51
00025A63 3457                       	dc.b $34, $57
00025A65 045B                       	dc.b $4, $5B
00025A67 05                         DPLC_33c5_2E9: 	dc.b $5
00025A68 745C                       	dc.b $74, $5C
00025A6A 144F                       	dc.b $14, $4F
00025A6C 5464                       	dc.b $54, $64
00025A6E 3457                       	dc.b $34, $57
00025A70 045B                       	dc.b $4, $5B
00025A72 02                         DPLC_33c5_2F4: 	dc.b $2
00025A73 246A                       	dc.b $24, $6A
00025A75 F46D                       	dc.b $F4, $6D
00025A77 03                         DPLC_33c5_2F9: 	dc.b $3
00025A78 247D                       	dc.b $24, $7D
00025A7A B480                       	dc.b $B4, $80
00025A7C 248C                       	dc.b $24, $8C
00025A7E 01                         DPLC_33c5_300: 	dc.b $1
00025A7F B48F                       	dc.b $B4, $8F
00025A81 01                         DPLC_33c5_303: 	dc.b $1
00025A82 549B                       	dc.b $54, $9B
00025A84 01                         DPLC_33c5_306: 	dc.b $1
00025A85 14A1                       	dc.b $14, $A1
00025A87 02                         DPLC_33c5_309: 	dc.b $2
00025A88 E356                       	dc.b $E3, $56
00025A8A 054A                       	dc.b $5, $4A
00025A8C 03                         DPLC_33c5_30E: 	dc.b $3
00025A8D 736E                       	dc.b $73, $6E
00025A8F 0376                       	dc.b $3, $76
00025A91 3377                       	dc.b $33, $77
00025A93 03                         DPLC_33c5_315: 	dc.b $3
00025A94 B4A3                       	dc.b $B4, $A3
00025A96 14AF                       	dc.b $14, $AF
00025A98 34B1                       	dc.b $34, $B1
00025A9A 03                         DPLC_33c5_31C: 	dc.b $3
00025A9B 54B5                       	dc.b $54, $B5
00025A9D B4BB                       	dc.b $B4, $BB
00025A9F 1074                       	dc.b $10, $74
00025AA1 02                         DPLC_33c5_323: 	dc.b $2
00025AA2 F4C7                       	dc.b $F4, $C7
00025AA4 24D7                       	dc.b $24, $D7
00025AA6 02                         DPLC_33c5_328: 	dc.b $2
00025AA7 F4DA                       	dc.b $F4, $DA
00025AA9 14EA                       	dc.b $14, $EA
00025AAB 02                         DPLC_33c5_32D: 	dc.b $2
00025AAC F502                       	dc.b $F5, $2
00025AAE 2512                       	dc.b $25, $12
00025AB0 02                         DPLC_33c5_332: 	dc.b $2
00025AB1 F515                       	dc.b $F5, $15
00025AB3 2525                       	dc.b $25, $25
00025AB5 02                         DPLC_33c5_337: 	dc.b $2
00025AB6 F54B                       	dc.b $F5, $4B
00025AB8 755B                       	dc.b $75, $5B
00025ABA 00                         DPLC_33c5_33C: 	dc.b $0
00025ABB 00                         DPLC_33c5_33D: 	dc.b $0
00025ABC 00                         DPLC_33c5_33E: 	dc.b $0
00025ABD 00                         DPLC_33c5_33F: 	dc.b $0
00025ABE 02                         DPLC_33c5_340: 	dc.b $2
00025ABF F4DA                       	dc.b $F4, $DA
00025AC1 14EA                       	dc.b $14, $EA
00025AC3 00                         DPLC_33c5_345: 	dc.b $0
00025AC4 02                         DPLC_33c5_346: 	dc.b $2
00025AC5 F4DA                       	dc.b $F4, $DA
00025AC7 14EA                       	dc.b $14, $EA
00025AC9 00                         DPLC_33c5_34B: 	dc.b $0
00025ACA 00                         DPLC_33c5_34C: 	dc.b $0
00025ACB 00                         DPLC_33c5_34D: 	dc.b $0
00025ACC 02                         DPLC_33c5_34E: 	dc.b $2
00025ACD F4DA                       	dc.b $F4, $DA
00025ACF 14EA                       	dc.b $14, $EA
00025AD1 00                         DPLC_33c5_353: 	dc.b $0
00025AD2 02                         DPLC_33c5_354: 	dc.b $2
00025AD3 F4DA                       	dc.b $F4, $DA
00025AD5 14EA                       	dc.b $14, $EA
00025AD7 00                         DPLC_33c5_359: 	dc.b $0
00025AD8 00                         DPLC_33c5_35A: 	dc.b $0
00025AD9 00                         DPLC_33c5_35B: 	dc.b $0
00025ADA 02                         DPLC_33c5_35C: 	dc.b $2
00025ADB F4DA                       	dc.b $F4, $DA
00025ADD 14EA                       	dc.b $14, $EA
00025ADF 00                         DPLC_33c5_361: 	dc.b $0
00025AE0 02                         DPLC_33c5_362: 	dc.b $2
00025AE1 F4DA                       	dc.b $F4, $DA
00025AE3 14EA                       	dc.b $14, $EA
00025AE5 00                         DPLC_33c5_367: 	dc.b $0
00025AE6                            	even
00025AE6                            	even
00025AE6                            
00025AE6                            ; ---------------------------------------------------------------------------
00025AE6                            ; Uncompressed graphics	- Sonic
00025AE6                            ; ---------------------------------------------------------------------------
00025AE6                            Art_Sonic:	incbin	artunc\sonic.bin	; Sonic
000308C6                            		even
000308C6                            ; ---------------------------------------------------------------------------
000308C6                            ; Compressed graphics - various
000308C6                            ; ---------------------------------------------------------------------------
000308C6                            Nem_Smoke:	incbin	artnem\xxxsmoke.bin	; unused smoke
000309CA                            		even
000309CA                            Nem_SyzSparkle:	incbin	artnem\xxxstars.bin	; unused stars
00030A04                            		even
00030A04                            Nem_Shield:	incbin	artnem\shield.bin	; shield
00030B9A                            		even
00030B9A                            Nem_Stars:	incbin	artnem\invstars.bin	; invincibility stars
00030CE2                            		even
00030CE2                            Nem_LzSonic:	incbin	artnem\xxxlzson.bin	; unused LZ Sonic holding his breath
00030DEC                            		even
00030DEC                            Nem_UnkFire:	incbin	artnem\xxxfire.bin	; unused fireball
00030E3E                            		even
00030E3E                            Nem_Warp:	incbin	artnem\xxxflash.bin	; unused entry to special stage flash
00031086                            		even
00031086                            Nem_Goggle:	incbin	artnem\xxxgoggl.bin	; unused goggles
0003120C                            		even
0003120C                            ; ---------------------------------------------------------------------------
0003120C                            ; Sprite mappings - walls of the special stage
0003120C                            ; ---------------------------------------------------------------------------
0003120C                            Map_SSWalls:
0003120C                            	include "_maps\SSwalls.asm"
0003120C                            ; ---------------------------------------------------------------------------
0003120C                            ; Sprite mappings - walls of the special stage
0003120C                            ; ---------------------------------------------------------------------------
0003120C 0000 0000                  		dc.w byte_2C584-Map_SSWalls, byte_2C58A-Map_SSWalls
00031210 0000 0000                  		dc.w byte_2C590-Map_SSWalls, byte_2C596-Map_SSWalls
00031214 0000 0000                  		dc.w byte_2C59C-Map_SSWalls, byte_2C5A2-Map_SSWalls
00031218 0000 0000                  		dc.w byte_2C5A8-Map_SSWalls, byte_2C5AE-Map_SSWalls
0003121C 0000 0000                  		dc.w byte_2C5B4-Map_SSWalls, byte_2C5BA-Map_SSWalls
00031220 0000 0000                  		dc.w byte_2C5C0-Map_SSWalls, byte_2C5C6-Map_SSWalls
00031224 0000 0000                  		dc.w byte_2C5CC-Map_SSWalls, byte_2C5D2-Map_SSWalls
00031228 0000 0000                  		dc.w byte_2C5D8-Map_SSWalls, byte_2C5DE-Map_SSWalls
0003122C 01                         byte_2C584:	dc.b 1
0003122D F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00031232 01                         byte_2C58A:	dc.b 1
00031233 F00F 0009 F0               		dc.b $F0, $F, 0, 9, $F0
00031238 01                         byte_2C590:	dc.b 1
00031239 F00F 0019 F0               		dc.b $F0, $F, 0, $19, $F0
0003123E 01                         byte_2C596:	dc.b 1
0003123F F00F 0029 F0               		dc.b $F0, $F, 0, $29, $F0
00031244 01                         byte_2C59C:	dc.b 1
00031245 F00F 0039 F0               		dc.b $F0, $F, 0, $39, $F0
0003124A 01                         byte_2C5A2:	dc.b 1
0003124B F00F 0049 F0               		dc.b $F0, $F, 0, $49, $F0
00031250 01                         byte_2C5A8:	dc.b 1
00031251 F00F 0059 F0               		dc.b $F0, $F, 0, $59, $F0
00031256 01                         byte_2C5AE:	dc.b 1
00031257 F00F 0069 F0               		dc.b $F0, $F, 0, $69, $F0
0003125C 01                         byte_2C5B4:	dc.b 1
0003125D F00F 0079 F0               		dc.b $F0, $F, 0, $79, $F0
00031262 01                         byte_2C5BA:	dc.b 1
00031263 F00F 0089 F0               		dc.b $F0, $F, 0, $89, $F0
00031268 01                         byte_2C5C0:	dc.b 1
00031269 F00F 0099 F0               		dc.b $F0, $F, 0, $99, $F0
0003126E 01                         byte_2C5C6:	dc.b 1
0003126F F00F 00A9 F0               		dc.b $F0, $F, 0, $A9, $F0
00031274 01                         byte_2C5CC:	dc.b 1
00031275 F00F 00B9 F0               		dc.b $F0, $F, 0, $B9, $F0
0003127A 01                         byte_2C5D2:	dc.b 1
0003127B F00F 00C9 F0               		dc.b $F0, $F, 0, $C9, $F0
00031280 01                         byte_2C5D8:	dc.b 1
00031281 F00F 00D9 F0               		dc.b $F0, $F, 0, $D9, $F0
00031286 01                         byte_2C5DE:	dc.b 1
00031287 F00F 00E9 F0               		dc.b $F0, $F, 0, $E9, $F0
0003128C                            		even
0003128C                            		even
0003128C                            ; ---------------------------------------------------------------------------
0003128C                            ; Compressed graphics - special stage
0003128C                            ; ---------------------------------------------------------------------------
0003128C                            Nem_SSWalls:	incbin	artnem\sswalls.bin	; special stage walls
00031BC4                            		even
00031BC4                            Eni_SSBg1:	incbin	mapeni\ssbg1.bin	; special stage background (mappings)
00031D12                            		even
00031D12                            Nem_SSBgFish:	incbin	artnem\ssbg1.bin	; special stage birds and fish background
000331A4                            		even
000331A4                            Eni_SSBg2:	incbin	mapeni\ssbg2.bin	; special stage background (mappings)
000334A4                            		even
000334A4                            Nem_SSBgCloud:	incbin	artnem\ssbg2.bin	; special stage clouds background
00033998                            		even
00033998                            Nem_SSGOAL:	incbin	artnem\ssgoal.bin	; special stage GOAL block
00033A86                            		even
00033A86                            Nem_SSRBlock:	incbin	artnem\ssr.bin		; special stage R block
00033B56                            		even
00033B56                            Nem_SS1UpBlock:	incbin	artnem\ss1up.bin	; special stage 1UP block
00033C4C                            		even
00033C4C                            Nem_SSEmStars:	incbin	artnem\ssemstar.bin	; special stage stars from a collected emerald
00033CAA                            		even
00033CAA                            Nem_SSRedWhite:	incbin	artnem\ssredwhi.bin	; special stage red/white block
00033D3C                            		even
00033D3C                            Nem_SSZone1:	incbin	artnem\sszone1.bin	; special stage ZONE1 block
00033DFE                            		even
00033DFE                            Nem_SSZone2:	incbin	artnem\sszone2.bin	; ZONE2 block
00033ECC                            		even
00033ECC                            Nem_SSZone3:	incbin	artnem\sszone3.bin	; ZONE3 block
00033F98                            		even
00033F98                            Nem_SSZone4:	incbin	artnem\sszone4.bin	; ZONE4 block
00034060                            		even
00034060                            Nem_SSZone5:	incbin	artnem\sszone5.bin	; ZONE5 block
0003412A                            		even
0003412A                            Nem_SSZone6:	incbin	artnem\sszone6.bin	; ZONE6 block
000341FA                            		even
000341FA                            Nem_SSUpDown:	incbin	artnem\ssupdown.bin	; special stage UP/DOWN block
000343EE                            		even
000343EE                            Nem_SSEmerald:	incbin	artnem\ssemeral.bin	; special stage chaos emeralds
00034556                            		even
00034556                            Nem_SSGhost:	incbin	artnem\ssghost.bin	; special stage ghost block
00034606                            		even
00034606                            Nem_SSWBlock:	incbin	artnem\ssw.bin		; special stage W block
000346E0                            		even
000346E0                            Nem_SSGlass:	incbin	artnem\ssglass.bin	; special stage destroyable glass block
00034764                            		even
00034764                            Nem_ResultEm:	incbin	artnem\ssresems.bin	; chaos emeralds on special stage results screen
000348E2                            		even
000348E2                            ; ---------------------------------------------------------------------------
000348E2                            ; Compressed graphics - GHZ stuff
000348E2                            ; ---------------------------------------------------------------------------
000348E2                            Nem_Stalk:	incbin	artnem\ghzstalk.bin	; GHZ flower stalk
0003492C                            		even
0003492C                            Nem_Swing:	incbin	artnem\ghzswing.bin	; GHZ swinging platform
00034A46                            		even
00034A46                            Nem_Bridge:	incbin	artnem\ghzbridg.bin	; GHZ bridge
00034B32                            		even
00034B32                            Nem_GhzUnkBlock:incbin	artnem\xxxghzbl.bin	; unused GHZ block
00034B7A                            		even
00034B7A                            Nem_Ball:	incbin	artnem\ghzball.bin	; GHZ giant ball
00034D18                            		even
00034D18                            Nem_Spikes:	incbin	artnem\spikes.bin	; spikes
00034DD4                            		even
00034DD4                            Nem_GhzLog:	incbin	artnem\xxxghzlo.bin	; unused GHZ log
00034FE8                            		even
00034FE8                            Nem_SpikePole:	incbin	artnem\ghzlog.bin	; GHZ spiked log
00035114                            		even
00035114                            Nem_PplRock:	incbin	artnem\ghzrock.bin	; GHZ purple rock
00035242                            		even
00035242                            Nem_GhzWall1:	incbin	artnem\ghzwall1.bin	; GHZ destroyable wall
000352E0                            		even
000352E0                            Nem_GhzWall2:	incbin	artnem\ghzwall2.bin	; GHZ normal wall
00035340                            		even
00035340                            ; ---------------------------------------------------------------------------
00035340                            ; Compressed graphics - LZ stuff
00035340                            ; ---------------------------------------------------------------------------
00035340                            Nem_Water:	incbin	artnem\lzwater.bin	; LZ water surface
00035464                            		even
00035464                            Nem_Splash:	incbin	artnem\lzsplash.bin	; LZ waterfalls and splashes
00035C58                            		even
00035C58                            Nem_LzSpikeBall:incbin	artnem\lzspball.bin	; LZ spiked ball on chain
00035DD8                            		even
00035DD8                            Nem_FlapDoor:	incbin	artnem\lzflapdo.bin	; LZ flapping door
00035F42                            		even
00035F42                            Nem_Bubbles:	incbin	artnem\lzbubble.bin	; LZ bubbles and countdown numbers
00036598                            		even
00036598                            Nem_LzBlock3:	incbin	artnem\lzblock3.bin	; LZ 32x16 block
0003664E                            		even
0003664E                            Nem_LzDoor1:	incbin	artnem\lzvdoor.bin	; LZ vertical door
000366F0                            		even
000366F0                            Nem_Harpoon:	incbin	artnem\lzharpoo.bin	; LZ harpoon
0003684C                            		even
0003684C                            Nem_LzPole:	incbin	artnem\lzpole.bin	; LZ pole that breaks
000368B0                            		even
000368B0                            Nem_LzDoor2:	incbin	artnem\lzhdoor.bin	; LZ large horizontal door
00036A02                            		even
00036A02                            Nem_LzWheel:	incbin	artnem\lzwheel.bin	; LZ wheel from corner of conveyor belt
00036EE4                            		even
00036EE4                            Nem_Gargoyle:	incbin	artnem\lzgargoy.bin	; LZ gargoyle head and spitting fire
00037054                            		even
00037054                            Nem_LzBlock2:	incbin	artnem\lzblock2.bin	; LZ blocks
0003730C                            		even
0003730C                            Nem_LzPlatfm:	incbin	artnem\lzptform.bin	; LZ rising platforms
00037444                            		even
00037444                            Nem_Cork:	incbin	artnem\lzcork.bin	; LZ cork block
0003756E                            		even
0003756E                            Nem_LzBlock1:	incbin	artnem\lzblock1.bin	; LZ 32x32 block
0003767E                            		even
0003767E                            ; ---------------------------------------------------------------------------
0003767E                            ; Compressed graphics - MZ stuff
0003767E                            ; ---------------------------------------------------------------------------
0003767E                            Nem_MzMetal:	incbin	artnem\mzmetal.bin	; MZ metal blocks
0003790C                            		even
0003790C                            Nem_MzSwitch:	incbin	artnem\mzswitch.bin	; MZ switch
000379CA                            		even
000379CA                            Nem_MzGlass:	incbin	artnem\mzglassy.bin	; MZ green glassy block
00037A82                            		even
00037A82                            Nem_GhzGrass:	incbin	artnem\xxxgrass.bin	; unused grass (GHZ or MZ?)
00037AD6                            		even
00037AD6                            Nem_MzFire:	incbin	artnem\mzfire.bin	; MZ fireballs
00037DA8 00                         		even
00037DA8                            Nem_Lava:	incbin	artnem\mzlava.bin	; MZ lava
000386BE                            		even
000386BE                            Nem_MzBlock:	incbin	artnem\mzblock.bin	; MZ green pushable block
00038822                            		even
00038822                            Nem_MzUnkBlock:	incbin	artnem\xxxmzblo.bin	; MZ unused background block
000388AA                            		even
000388AA                            ; ---------------------------------------------------------------------------
000388AA                            ; Compressed graphics - SLZ stuff
000388AA                            ; ---------------------------------------------------------------------------
000388AA                            Nem_Seesaw:	incbin	artnem\slzseesa.bin	; SLZ seesaw
00038AE6                            		even
00038AE6                            Nem_SlzSpike:	incbin	artnem\slzspike.bin	; SLZ spikeball that sits on a seesaw
00038C2C                            		even
00038C2C                            Nem_Fan:	incbin	artnem\slzfan.bin	; SLZ fan
00038E70                            		even
00038E70                            Nem_SlzWall:	incbin	artnem\slzwall.bin	; SLZ smashable wall
00038ED2                            		even
00038ED2                            Nem_Pylon:	incbin	artnem\slzpylon.bin	; SLZ foreground pylon
00038FB4                            		even
00038FB4                            Nem_SlzSwing:	incbin	artnem\slzswing.bin	; SLZ swinging platform
00039196                            		even
00039196                            Nem_SlzBlock:	incbin	artnem\slzblock.bin	; SLZ 32x32 block
000392A2                            		even
000392A2                            Nem_SlzCannon:	incbin	artnem\slzcanno.bin	; SLZ fireball launcher cannon
00039346                            		even
00039346                            ; ---------------------------------------------------------------------------
00039346                            ; Compressed graphics - SYZ stuff
00039346                            ; ---------------------------------------------------------------------------
00039346                            Nem_Bumper:	incbin	artnem\syzbumpe.bin	; SYZ bumper
000394B0                            		even
000394B0                            Nem_SyzSpike2:	incbin	artnem\syzsspik.bin	; SYZ small spikeball
00039512                            		even
00039512                            Nem_LzSwitch:	incbin	artnem\switch.bin	; LZ/SYZ/SBZ switch
000395F4                            		even
000395F4                            Nem_SyzSpike1:	incbin	artnem\syzlspik.bin	; SYZ/SBZ large spikeball
00039882                            		even
00039882                            ; ---------------------------------------------------------------------------
00039882                            ; Compressed graphics - SBZ stuff
00039882                            ; ---------------------------------------------------------------------------
00039882                            Nem_SbzWheel1:	incbin	artnem\sbzwhee1.bin	; SBZ spot on rotating wheel that Sonic runs around
000398D6                            		even
000398D6                            Nem_SbzWheel2:	incbin	artnem\sbzwhee2.bin	; SBZ wheel that grabs Sonic
00039B72                            		even
00039B72                            Nem_Cutter:	incbin	artnem\sbzcutte.bin	; SBZ pizza cutter
00039D76                            		even
00039D76                            Nem_Stomper:	incbin	artnem\sbzstomp.bin	; SBZ stomper
00039F14                            		even
00039F14                            Nem_SpinPform:	incbin	artnem\sbzpform.bin	; SBZ spinning platform
0003A244                            		even
0003A244                            Nem_TrapDoor:	incbin	artnem\sbztrapd.bin	; SBZ trapdoor
0003A422                            		even
0003A422                            Nem_SbzFloor:	incbin	artnem\sbzfloor.bin	; SBZ collapsing floor
0003A47A                            		even
0003A47A                            Nem_Electric:	incbin	artnem\sbzshock.bin	; SBZ electric shock orb
0003A644 00                         		even
0003A644                            Nem_SbzBlock:	incbin	artnem\sbzvanis.bin	; SBZ vanishing block
0003A742                            		even
0003A742                            Nem_FlamePipe:	incbin	artnem\sbzflame.bin	; SBZ flaming pipe
0003A8CE                            		even
0003A8CE                            Nem_SbzDoor1:	incbin	artnem\sbzvdoor.bin	; SBZ small vertical door
0003A91E                            		even
0003A91E                            Nem_SlideFloor:	incbin	artnem\sbzslide.bin	; SBZ floor that slides away
0003A976                            		even
0003A976                            Nem_SbzDoor2:	incbin	artnem\sbzhdoor.bin	; SBZ large horizontal door
0003AA72                            		even
0003AA72                            Nem_Girder:	incbin	artnem\sbzgirde.bin	; SBZ crushing girder
0003AB88                            		even
0003AB88                            ; ---------------------------------------------------------------------------
0003AB88                            ; Compressed graphics - enemies
0003AB88                            ; ---------------------------------------------------------------------------
0003AB88                            Nem_BallHog:	incbin	artnem\ballhog.bin	; ball hog
0003AFF6 00                         		even
0003AFF6                            Nem_Crabmeat:	incbin	artnem\crabmeat.bin	; crabmeat
0003B1A0 00                         		even
0003B1A0                            Nem_Buzz:	incbin	artnem\buzzbomb.bin	; buzz bomber
0003B562 00                         		even
0003B562                            Nem_UnkExplode:	incbin	artnem\xxxexplo.bin	; unused explosion
0003B74A                            		even
0003B74A                            Nem_Burrobot:	incbin	artnem\burrobot.bin	; burrobot
0003B902 00                         		even
0003B902                            Nem_Chopper:	incbin	artnem\chopper.bin	; chopper
0003BA4C                            		even
0003BA4C                            Nem_Jaws:	incbin	artnem\jaws.bin		; jaws
0003BCD6                            		even
0003BCD6                            Nem_Roller:	incbin	artnem\roller.bin	; roller
0003C2FA                            		even
0003C2FA                            Nem_Motobug:	incbin	artnem\motobug.bin	; moto bug
0003C4F0                            		even
0003C4F0                            Nem_Newtron:	incbin	artnem\newtron.bin	; newtron
0003CB0E                            		even
0003CB0E                            Nem_Yadrin:	incbin	artnem\yadrin.bin	; yadrin
0003CF0E 00                         		even
0003CF0E                            Nem_Basaran:	incbin	artnem\basaran.bin	; basaran
0003D20A                            		even
0003D20A                            Nem_Splats:	incbin	artnem\splats.bin	; splats
0003D452                            		even
0003D452                            Nem_Bomb:	incbin	artnem\bomb.bin		; bomb
0003D6EA                            		even
0003D6EA                            Nem_Orbinaut:	incbin	artnem\orbinaut.bin	; orbinaut
0003D8C8                            		even
0003D8C8                            Nem_Cater:	incbin	artnem\caterkil.bin	; caterkiller
0003DA56                            		even
0003DA56                            ; ---------------------------------------------------------------------------
0003DA56                            ; Compressed graphics - various
0003DA56                            ; ---------------------------------------------------------------------------
0003DA56                            Nem_TitleCard:	incbin	artnem\ttlcards.bin	; title cards
0003DF86                            		even
0003DF86                            Nem_Hud:	incbin	artnem\hud.bin		; HUD (rings, time, score)
0003E07C                            		even
0003E07C                            Nem_Lives:	incbin	artnem\lifeicon.bin	; life counter icon
0003E182                            		even
0003E182                            Nem_Ring:	incbin	artnem\rings.bin	; rings
0003E276                            		even
0003E276                            Nem_Monitors:	incbin	artnem\monitors.bin	; monitors
0003E7BA                            		even
0003E7BA                            Nem_Explode:	incbin	artnem\explosio.bin	; explosion
0003EE20                            		even
0003EE20                            Nem_Points:	incbin	artnem\points.bin	; points from destroyed enemy or object
0003EED0                            		even
0003EED0                            Nem_GameOver:	incbin	artnem\gameover.bin	; game over / time over
0003F062                            		even
0003F062                            Nem_HSpring:	incbin	artnem\springh.bin	; horizontal spring
0003F176                            		even
0003F176                            Nem_VSpring:	incbin	artnem\springv.bin	; vertical spring
0003F248                            		even
0003F248                            Nem_SignPost:	incbin	artnem\signpost.bin	; end of level signpost
0003F6C4                            		even
0003F6C4                            Nem_Lamp:	incbin	artnem\lamppost.bin	; lamppost
0003F784                            		even
0003F784                            Nem_BigFlash:	incbin	artnem\rngflash.bin	; flash from giant ring
0003F8F8                            		even
0003F8F8                            Nem_Bonus:	incbin	artnem\bonus.bin	; hidden bonuses at end of a level
0003FBFA                            		even
0003FBFA                            ; ---------------------------------------------------------------------------
0003FBFA                            ; Compressed graphics - continue screen
0003FBFA                            ; ---------------------------------------------------------------------------
0003FBFA                            Nem_ContSonic:	incbin	artnem\cntsonic.bin	; Sonic on continue screen
0003FEAA                            		even
0003FEAA                            Nem_MiniSonic:	incbin	artnem\cntother.bin	; mini Sonic and text on continue screen
000400E4                            		even
000400E4                            ; ---------------------------------------------------------------------------
000400E4                            ; Compressed graphics - animals
000400E4                            ; ---------------------------------------------------------------------------
000400E4                            Nem_Rabbit:	incbin	artnem\rabbit.bin	; rabbit
0004023C                            		even
0004023C                            Nem_Chicken:	incbin	artnem\chicken.bin	; chicken
00040398                            		even
00040398                            Nem_BlackBird:	incbin	artnem\blackbrd.bin	; blackbird
00040514                            		even
00040514                            Nem_Seal:	incbin	artnem\seal.bin		; seal
00040630                            		even
00040630                            Nem_Pig:	incbin	artnem\pig.bin		; pig
00040766                            		even
00040766                            Nem_Flicky:	incbin	artnem\flicky.bin	; flicky
000408A0                            		even
000408A0                            Nem_Squirrel:	incbin	artnem\squirrel.bin	; squirrel
000409FC                            		even
000409FC                            ; ---------------------------------------------------------------------------
000409FC                            ; Compressed graphics - primary patterns and block mappings
000409FC                            ; ---------------------------------------------------------------------------
000409FC                            Blk16_GHZ:	incbin	map16\ghz.bin
00041310                            		even
00041310                            Nem_GHZ_1st:	incbin	artnem\8x8ghz1.bin	; GHZ primary patterns
00042C1E                            		even
00042C1E                            Nem_GHZ_2nd:	incbin	artnem\8x8ghz2.bin	; GHZ secondary patterns
00043F9E                            		even
00043F9E                            Blk256_GHZ:	incbin	map256\ghz.bin
000463D8                            		even
000463D8                            Blk16_LZ:	incbin	map16\lz.bin
00046B12                            		even
00046B12                            Nem_LZ:		incbin	artnem\8x8lz.bin	; LZ primary patterns
00048F18                            		even
00048F18                            Blk256_LZ:	incbin	map256\lz.bin
0004B898                            		even
0004B898                            Blk16_MZ:	incbin	map16\mz.bin
0004C000                            		even
0004C000                            Nem_MZ:		incbin	artnem\8x8mz.bin	; MZ primary patterns
0004E93C                            		even
0004E93C                            Blk256_MZ:	incbin	map256\mz.bin
000500E0                            		even
000500E0                            Blk16_SLZ:	incbin	map16\slz.bin
000507AA                            		even
000507AA                            Nem_SLZ:	incbin	artnem\8x8slz.bin	; SLZ primary patterns
000526FE                            		even
000526FE                            Blk256_SLZ:	incbin	map256\slz.bin
00052D78                            		even
00052D78                            Blk16_SYZ:	incbin	map16\syz.bin
0005399E                            		even
0005399E                            Nem_SYZ:	incbin	artnem\8x8syz.bin	; SYZ primary patterns
00057F30                            		even
00057F30                            Blk256_SYZ:	incbin	map256\syz.bin
00059F8C                            		even
00059F8C                            Blk16_SBZ:	incbin	map16\sbz.bin
0005AED4                            		even
0005AED4                            Nem_SBZ:	incbin	artnem\8x8sbz.bin	; SBZ primary patterns
0005D898                            		even
0005D898                            Blk256_SBZ:	incbin	map256\sbz.bin
0006038E                            		even
0006038E                            Blk16_BHZ:	incbin	map16\bhz.bin
00060D2E                            		even
00060D2E                            Nem_BHZ_1st:	incbin	artnem\8x8bhz1.bin	; GHZ primary patterns
0006238E                            		even
0006238E                            Nem_BHZ_2nd:	incbin	artnem\8x8bhz2.bin	; GHZ secondary patterns
00063736                            		even
00063736                            Blk256_BHZ:	incbin	map256\bhz.bin
00065846                            		even
00065846                            ; ---------------------------------------------------------------------------
00065846                            ; Compressed graphics - bosses and ending sequence
00065846                            ; ---------------------------------------------------------------------------
00065846                            Nem_Eggman:	incbin	artnem\bossmain.bin	; boss main patterns
00066060 00                         		even
00066060                            Nem_Tetoboss:	incbin	artnem\TetoBoss.bin	; boss main patterns
000666AE                            		even
000666AE                            Nem_Peartobomb:	incbin	artnem\peartobomb.bin	; boss main patterns
00066728                            		even
00066728                            Nem_Weapons:	incbin	artnem\bossxtra.bin	; boss add-ons and weapons
00066A12                            		even
00066A12                            Nem_Prison:	incbin	artnem\prison.bin	; prison capsule
00067296                            		even
00067296                            Nem_Sbz2Eggman:	incbin	artnem\sbz2boss.bin	; Eggman in SBZ2 and FZ
00067FEC 00                         		even
00067FEC                            Nem_FzBoss:	incbin	artnem\fzboss.bin	; FZ boss
00068754                            		even
00068754                            Nem_FzEggman:	incbin	artnem\fzboss2.bin	; Eggman after the FZ boss
00068CD4                            		even
00068CD4                            Nem_Exhaust:	incbin	artnem\bossflam.bin	; boss exhaust flame
00068DF4                            		even
00068DF4                            Nem_EndEm:	incbin	artnem\endemera.bin	; ending sequence chaos emeralds
00068FF2                            		even
00068FF2                            Nem_EndSonic:	incbin	artnem\endsonic.bin	; ending sequence Sonic
0006A1D0                            		even
0006A1D0                            Nem_TryAgain:	incbin	artnem\tryagain.bin	; ending "try again" screen
0006AB14                            		even
0006AB14                            Nem_EndEggman:	incbin	artnem\xxxend.bin	; unused boss sequence on ending
0006AEEA                            		even
0006AEEA                            Kos_EndFlowers:	incbin	artkos\flowers.bin	; ending sequence animated flowers
0006B47A                            		even
0006B47A                            Nem_EndFlower:	incbin	artnem\endflowe.bin	; ending sequence flowers
0006B702                            		even
0006B702                            Nem_CreditText:	incbin	artnem\credits.bin	; credits alphabet
0006BCF0 00                         		even
0006BCF0                            Nem_EndStH:	incbin	artnem\endtext.bin	; ending sequence "Sonic the Hedgehog" text
0006BF78                            		even
0006BF78                            		incbin	misc\padding2.bin
0006C07C                            		even
0006C07C                            ; ---------------------------------------------------------------------------
0006C07C                            ; Collision data
0006C07C                            ; ---------------------------------------------------------------------------
0006C07C                            AngleMap:	incbin	collide\anglemap.bin	; floor angle map
0006C17C                            		even
0006C17C                            CollArray1:	incbin	collide\carray_n.bin	; normal collision array
0006D17C                            		even
0006D17C                            CollArray2:	incbin	collide\carray_r.bin	; rotated collision array
0006E17C                            		even
0006E17C                            Col_GHZ:	incbin	collide\ghz.bin		; GHZ index
0006E334 00                         		even
0006E334                            Col_LZ:		incbin	collide\lz.bin		; LZ index
0006E49C                            		even
0006E49C                            Col_MZ:		incbin	collide\mz.bin		; MZ index
0006E62C 00                         		even
0006E62C                            Col_SLZ:	incbin	collide\slz.bin		; SLZ index
0006E820                            		even
0006E820                            Col_SYZ:	incbin	collide\syz.bin		; SYZ index
0006EA26                            		even
0006EA26                            Col_SBZ:	incbin	collide\sbz.bin		; SBZ index
0006ECC4                            		even
0006ECC4                            Col_BHZ:	incbin	collide\bhz.bin		; GHZ index
0006EE5E                            		even
0006EE5E                            ; ---------------------------------------------------------------------------
0006EE5E                            ; Special layouts
0006EE5E                            ; ---------------------------------------------------------------------------
0006EE5E                            SS_1:		incbin	sslayout\1.bin
0006F0A6                            		even
0006F0A6                            SS_2:		incbin	sslayout\2.bin
0006F45E                            		even
0006F45E                            SS_3:		incbin	sslayout\3.bin
0006F7BA                            		even
0006F7BA                            SS_4:		incbin	sslayout\4.bin
0006FC94                            		even
0006FC94                            SS_5:		incbin	sslayout\5.bin
00070144                            		even
00070144                            SS_6:		incbin	sslayout\6.bin
00070436                            		even
00070436                            ; ---------------------------------------------------------------------------
00070436                            ; Animated uncompressed graphics
00070436                            ; ---------------------------------------------------------------------------
00070436                            Art_GhzWater:	incbin	artunc\ghzwater.bin	; GHZ waterfall
00070636                            		even
00070636                            Art_GhzFlower1:	incbin	artunc\ghzflowl.bin	; GHZ large flower
00070A36                            		even
00070A36                            Art_GhzFlower2:	incbin	artunc\ghzflows.bin	; GHZ small flower
00070EB6                            		even
00070EB6                            Art_MzLava1:	incbin	artunc\mzlava1.bin	; MZ lava surface
000711B6                            		even
000711B6                            Art_MzLava2:	incbin	artunc\mzlava2.bin	; MZ lava
000717B6                            		even
000717B6                            Art_MzTorch:	incbin	artunc\mztorch.bin	; MZ torch in background
00071AB6                            		even
00071AB6                            Art_SbzSmoke:	incbin	artunc\sbzsmoke.bin	; SBZ smoke in background
00072536                            		even
00072536                            
00072536                            ; ---------------------------------------------------------------------------
00072536                            ; Level	layout index
00072536                            ; ---------------------------------------------------------------------------
00072536 0000 0000 0000             Level_Index:	dc.w Level_GHZ1-Level_Index, Level_GHZbg-Level_Index, byte_68D70-Level_Index
0007253C 0000 0000 0000             		dc.w Level_GHZ2-Level_Index, Level_GHZbg-Level_Index, byte_68E3C-Level_Index
00072542 0000 0000 0000             		dc.w Level_GHZ3-Level_Index, Level_GHZbg-Level_Index, byte_68F84-Level_Index
00072548 0000 0000 0000             		dc.w byte_68F88-Level_Index, byte_68F88-Level_Index, byte_68F88-Level_Index
0007254E 0000 0000 0000             		dc.w Level_LZ1-Level_Index, Level_LZbg-Level_Index, byte_69190-Level_Index
00072554 0000 0000 0000             		dc.w Level_LZ2-Level_Index, Level_LZbg-Level_Index, byte_6922E-Level_Index
0007255A 0000 0000 0000             		dc.w Level_LZ3-Level_Index, Level_LZbg-Level_Index, byte_6934C-Level_Index
00072560 0000 0000 0000             		dc.w Level_SBZ3-Level_Index, Level_LZbg-Level_Index, byte_6940A-Level_Index
00072566 0000 0000 0000             		dc.w Level_MZ1-Level_Index, Level_MZ1bg-Level_Index, Level_MZ1-Level_Index
0007256C 0000 0000 0000             		dc.w Level_MZ2-Level_Index, Level_MZ2bg-Level_Index, byte_6965C-Level_Index
00072572 0000 0000 0000             		dc.w Level_MZ3-Level_Index, Level_MZ3bg-Level_Index, byte_697E6-Level_Index
00072578 0000 0000 0000             		dc.w byte_697EA-Level_Index, byte_697EA-Level_Index, byte_697EA-Level_Index
0007257E 0000 0000 0000             		dc.w Level_SLZ1-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
00072584 0000 0000 0000             		dc.w Level_SLZ2-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0007258A 0000 0000 0000             		dc.w Level_SLZ3-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
00072590 0000 0000 0000             		dc.w byte_69B84-Level_Index, byte_69B84-Level_Index, byte_69B84-Level_Index
00072596 0000 0000 0000             		dc.w Level_SYZ1-Level_Index, Level_SYZbg-Level_Index, byte_69C7E-Level_Index
0007259C 0000 0000 0000             		dc.w Level_SYZ2-Level_Index, Level_SYZbg-Level_Index, byte_69D86-Level_Index
000725A2 0000 0000 0000             		dc.w Level_SYZ3-Level_Index, Level_SYZbg-Level_Index, byte_69EE4-Level_Index
000725A8 0000 0000 0000             		dc.w byte_69EE8-Level_Index, byte_69EE8-Level_Index, byte_69EE8-Level_Index
000725AE 0000 0000 0000             		dc.w Level_SBZ1-Level_Index, Level_SBZ1bg-Level_Index, Level_SBZ1bg-Level_Index
000725B4 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, Level_SBZ2bg-Level_Index
000725BA 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, byte_6A2F8-Level_Index
000725C0 0000 0000 0000             		dc.w byte_6A2FC-Level_Index, byte_6A2FC-Level_Index, byte_6A2FC-Level_Index
000725C6 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
000725CC 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
000725D2 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
000725D8 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
000725DE 0000 0000 0000             		dc.w Level_BHZ1-Level_Index, Level_BHZbg-Level_Index, byte_68D70-Level_Index
000725E4 0000 0000 0000             		dc.w Level_BHZ2-Level_Index, Level_BHZbg-Level_Index, byte_68E3C-Level_Index
000725EA 0000 0000 0000             		dc.w Level_BHZ3-Level_Index, Level_BHZbg-Level_Index, byte_68F84-Level_Index
000725F0 0000 0000 0000             		dc.w byte_68F88-Level_Index, byte_68F88-Level_Index, byte_68F88-Level_Index
000725F6                            
000725F6                            Level_GHZ1:	incbin	levels\ghz1.bin
000726E8                            		even
000726E8 0000 0000                  byte_68D70:	dc.b 0,	0, 0, 0
000726EC                            Level_GHZ2:	incbin	levels\ghz2.bin
000727B4                            		even
000727B4 0000 0000                  byte_68E3C:	dc.b 0,	0, 0, 0
000727B8                            Level_GHZ3:	incbin	levels\ghz3.bin
000728DA                            		even
000728DA                            Level_GHZbg:	incbin	levels\ghzbg.bin
000728FC                            		even
000728FC 0000 0000                  byte_68F84:	dc.b 0,	0, 0, 0
00072900 0000 0000                  byte_68F88:	dc.b 0,	0, 0, 0
00072904                            
00072904                            Level_LZ1:	incbin	levels\lz1.bin
00072A06                            		even
00072A06                            Level_LZbg:	incbin	levels\lzbg.bin
00072B08                            		even
00072B08 0000 0000                  byte_69190:	dc.b 0,	0, 0, 0
00072B0C                            Level_LZ2:	incbin	levels\lz2.bin
00072BA6                            		even
00072BA6 0000 0000                  byte_6922E:	dc.b 0,	0, 0, 0
00072BAA                            Level_LZ3:	incbin	levels\lz3.bin
00072CC4                            		even
00072CC4 0000 0000                  byte_6934C:	dc.b 0,	0, 0, 0
00072CC8                            Level_SBZ3:	incbin	levels\sbz3.bin
00072D82                            		even
00072D82 0000 0000                  byte_6940A:	dc.b 0,	0, 0, 0
00072D86                            
00072D86                            Level_MZ1:	incbin	levels\mz1.bin
00072E24                            		even
00072E24                            Level_MZ1bg:	incbin	levels\mz1bg.bin
00072E9E                            		even
00072E9E                            Level_MZ2:	incbin	levels\mz2.bin
00072F42                            		even
00072F42                            Level_MZ2bg:	incbin	levels\mz2bg.bin
00072FD4                            		even
00072FD4 0000 0000                  byte_6965C:	dc.b 0,	0, 0, 0
00072FD8                            Level_MZ3:	incbin	levels\mz3.bin
000730BA                            		even
000730BA                            Level_MZ3bg:	incbin	levels\mz3bg.bin
0007315E 00                         		even
0007315E 0000 0000                  byte_697E6:	dc.b 0,	0, 0, 0
00073162 0000 0000                  byte_697EA:	dc.b 0,	0, 0, 0
00073166                            
00073166                            Level_SLZ1:	incbin	levels\slz1.bin
00073278                            		even
00073278                            Level_SLZbg:	incbin	levels\slzbg.bin
00073292                            		even
00073292                            Level_SLZ2:	incbin	levels\slz2.bin
00073382                            		even
00073382                            Level_SLZ3:	incbin	levels\slz3.bin
0007349C                            		even
0007349C 0000 0000                  byte_69B84:	dc.b 0,	0, 0, 0
000734A0                            
000734A0                            Level_SYZ1:	incbin	levels\syz1.bin
0007355C 00                         		even
0007355C                            Level_SYZbg:	incbin	levels\syzbg.bin
00073596                            		even
00073596 0000 0000                  byte_69C7E:	dc.b 0,	0, 0, 0
0007359A                            Level_SYZ2:	incbin	levels\syz2.bin
0007369E                            		even
0007369E 0000 0000                  byte_69D86:	dc.b 0,	0, 0, 0
000736A2                            Level_SYZ3:	incbin	levels\syz3.bin
000737FC 00                         		even
000737FC 0000 0000                  byte_69EE4:	dc.b 0,	0, 0, 0
00073800 0000 0000                  byte_69EE8:	dc.b 0,	0, 0, 0
00073804                            
00073804                            Level_SBZ1:	incbin	levels\sbz1.bin
00073926                            		even
00073926                            Level_SBZ1bg:	incbin	levels\sbz1bg.bin
00073964                            		even
00073964                            Level_SBZ2:	incbin	levels\sbz2.bin
00073AA6                            		even
00073AA6                            Level_SBZ2bg:	incbin	levels\sbz2bg.bin
00073C10                            		even
00073C10 0000 0000                  byte_6A2F8:	dc.b 0,	0, 0, 0
00073C14 0000 0000                  byte_6A2FC:	dc.b 0,	0, 0, 0
00073C18                            Level_End:	incbin	levels\ending.bin
00073C48 00                         		even
00073C48 0000 0000                  byte_6A320:	dc.b 0,	0, 0, 0
00073C4C                            Level_BHZ1:	incbin	levels\bhz1.bin
00073D3E                            		even
00073D3E                            
00073D3E                            Level_BHZ2:	incbin	levels\bhz2.bin
00073E06                            		even
00073E06                            
00073E06                            Level_BHZ3:	incbin	levels\bhz3.bin
00073F28                            		even
00073F28                            Level_BHZbg:	incbin	levels\bhzbg.bin
00073F4A                            		even
00073F4A                            ; ---------------------------------------------------------------------------
00073F4A                            ; Animated uncompressed giant ring graphics
00073F4A                            ; ---------------------------------------------------------------------------
00073F4A                            Art_BigRing:	incbin	artunc\bigring.bin
00074B8A                            		even
00074B8A                            
00074B8A                            		incbin	misc\padding3.bin
00074C26                            		even
00074C26                            
00074C26                            ; ---------------------------------------------------------------------------
00074C26                            ; Sprite locations index
00074C26                            ; ---------------------------------------------------------------------------
00074C26 0000 0000                  ObjPos_Index:	dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074C2A 0000 0000                  		dc.w ObjPos_GHZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074C2E 0000 0000                  		dc.w ObjPos_GHZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074C32 0000 0000                  		dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074C36 0000 0000                  		dc.w ObjPos_LZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074C3A 0000 0000                  		dc.w ObjPos_LZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074C3E 0000 0000                  		dc.w ObjPos_LZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074C42 0000 0000                  		dc.w ObjPos_SBZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074C46 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074C4A 0000 0000                  		dc.w ObjPos_MZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074C4E 0000 0000                  		dc.w ObjPos_MZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074C52 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074C56 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074C5A 0000 0000                  		dc.w ObjPos_SLZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074C5E 0000 0000                  		dc.w ObjPos_SLZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074C62 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074C66 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074C6A 0000 0000                  		dc.w ObjPos_SYZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074C6E 0000 0000                  		dc.w ObjPos_SYZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074C72 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074C76 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074C7A 0000 0000                  		dc.w ObjPos_SBZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074C7E 0000 0000                  		dc.w ObjPos_FZ-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074C82 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074C86 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074C8A 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074C8E 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074C92 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074C96 0000 0000                  		dc.w ObjPos_BHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074C9A 0000 0000                  		dc.w ObjPos_BHZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074C9E 0000 0000                  		dc.w ObjPos_BHZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074CA2 0000 0000                  		dc.w ObjPos_BHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074CA6 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
00074CAA 0000 0000                  		dc.w ObjPos_LZ2pf1-ObjPos_Index, ObjPos_LZ2pf2-ObjPos_Index
00074CAE 0000 0000                  		dc.w ObjPos_LZ3pf1-ObjPos_Index, ObjPos_LZ3pf2-ObjPos_Index
00074CB2 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
00074CB6 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
00074CBA 0000 0000                  		dc.w ObjPos_SBZ1pf3-ObjPos_Index, ObjPos_SBZ1pf4-ObjPos_Index
00074CBE 0000 0000                  		dc.w ObjPos_SBZ1pf5-ObjPos_Index, ObjPos_SBZ1pf6-ObjPos_Index
00074CC2 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
00074CC6 FFFF 0000 0000             		dc.b $FF, $FF, 0, 0, 0,	0
00074CCC                            ObjPos_GHZ1:	incbin	objpos\ghz1.bin
00075518                            		even
00075518                            ObjPos_GHZ2:	incbin	objpos\ghz2.bin
000757E2                            		even
000757E2                            ObjPos_GHZ3:	incbin	objpos\ghz3.bin
000761AE                            		even
000761AE                            ObjPos_LZ1:	incbin	objpos\lz1.bin
00076556                            		even
00076556                            ObjPos_LZ2:	incbin	objpos\lz2.bin
0007688C                            		even
0007688C                            ObjPos_LZ3:	incbin	objpos\lz3.bin
00076DA2                            		even
00076DA2                            ObjPos_SBZ3:	incbin	objpos\sbz3.bin
0007723A                            		even
0007723A                            ObjPos_LZ1pf1:	incbin	objpos\lz1pf1.bin
0007726C                            		even
0007726C                            ObjPos_LZ1pf2:	incbin	objpos\lz1pf2.bin
0007729E                            		even
0007729E                            ObjPos_LZ2pf1:	incbin	objpos\lz2pf1.bin
000772D0                            		even
000772D0                            ObjPos_LZ2pf2:	incbin	objpos\lz2pf2.bin
00077302                            		even
00077302                            ObjPos_LZ3pf1:	incbin	objpos\lz3pf1.bin
0007734C                            		even
0007734C                            ObjPos_LZ3pf2:	incbin	objpos\lz3pf2.bin
0007738A                            		even
0007738A                            ObjPos_MZ1:	incbin	objpos\mz1.bin
000776F6                            		even
000776F6                            ObjPos_MZ2:	incbin	objpos\mz2.bin
00077BA0                            		even
00077BA0                            ObjPos_MZ3:	incbin	objpos\mz3.bin
00078116                            		even
00078116                            ObjPos_SLZ1:	incbin	objpos\slz1.bin
00078140                            		even
00078140                            ObjPos_SLZ2:	incbin	objpos\slz2.bin
000785A8                            		even
000785A8                            ObjPos_SLZ3:	incbin	objpos\slz3.bin
00078B8A                            		even
00078B8A                            ObjPos_SYZ1:	incbin	objpos\syz1.bin
000791FC                            		even
000791FC                            ObjPos_SYZ2:	incbin	objpos\syz2.bin
00079766                            		even
00079766                            ObjPos_SYZ3:	incbin	objpos\syz3.bin
00079D6C                            		even
00079D6C                            ObjPos_SBZ1:	incbin	objpos\sbz1.bin
0007A4AA                            		even
0007A4AA                            ObjPos_SBZ2:	incbin	objpos\sbz2.bin
0007AB88                            		even
0007AB88                            ObjPos_FZ:	incbin	objpos\fz.bin
0007AB9A                            		even
0007AB9A                            ObjPos_SBZ1pf1:	incbin	objpos\sbz1pf1.bin
0007ABCC                            		even
0007ABCC                            ObjPos_SBZ1pf2:	incbin	objpos\sbz1pf2.bin
0007ABFE                            		even
0007ABFE                            ObjPos_SBZ1pf3:	incbin	objpos\sbz1pf3.bin
0007AC30                            		even
0007AC30                            ObjPos_SBZ1pf4:	incbin	objpos\sbz1pf4.bin
0007AC62                            		even
0007AC62                            ObjPos_SBZ1pf5:	incbin	objpos\sbz1pf5.bin
0007AC94                            		even
0007AC94                            ObjPos_SBZ1pf6:	incbin	objpos\sbz1pf6.bin
0007ACCC                            		even
0007ACCC                            ObjPos_End:	incbin	objpos\ending.bin
0007AE28                            		even
0007AE28                            ObjPos_BHZ1:	incbin	objpos\bhz1.bin
0007B332                            		even
0007B332                            ObjPos_BHZ2:	incbin	objpos\bhz2.bin
0007B8F0                            		even
0007B8F0                            ObjPos_BHZ3:	incbin	objpos\bhz3.bin
0007BFAA                            		even
0007BFAA FFFF 0000 0000             ObjPos_Null:	dc.b $FF, $FF, 0, 0, 0,	0
0007BFB0                            ; ---------------------------------------------------------------------------
0007BFB0                            		incbin	misc\padding4.bin
0007C5DA                            		even
0007C5DA                            
0007C5DA 0000 0000                  Go_SoundTypes:	dc.l SoundTypes		; XREF: Sound_Play
0007C5DE 0000 0000                  Go_SoundD0:	dc.l SoundD0Index	; XREF: Sound_D0toDF
0007C5E2 0000 0000                  Go_MusicIndex:	dc.l MusicIndex		; XREF: Sound_81to9F
0007C5E6 0000 0000                  Go_SoundIndex:	dc.l SoundIndex		; XREF: Sound_A0toCF
0007C5EA 0000 0000                  off_719A0:	dc.l byte_71A94		; XREF: Sound_81to9F
0007C5EE 0000 0000                  Go_PSGIndex:	dc.l PSG_Index		; XREF: sub_72926
0007C5F2                            ; ---------------------------------------------------------------------------
0007C5F2                            ; PSG instruments used in music
0007C5F2                            ; ---------------------------------------------------------------------------
0007C5F2 0000 0000 0000 0000 0000+  PSG_Index:	dc.l PSG1, PSG2, PSG3
0007C5FE 0000 0000 0000 0000 0000+  		dc.l PSG4, PSG5, PSG6
0007C60A 0000 0000 0000 0000 0000+  		dc.l PSG7, PSG8, PSG9
0007C616                            
0007C616 0000 0001 0101 0202 0203+  PSG1:		dc.b    0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5
0007C626 0505 0606 0607 80                      dc.b    5, 5, 6, 6, 6, 7, $80
0007C62D                            
0007C62D 0002 0406 0810 80          PSG2:		dc.b    0, 2, 4, 6, 8, $10, $80
0007C634                            
0007C634 0000 0101 0202 0303 0404+  PSG3:		dc.b    0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7
0007C644 80                                     dc.b    $80
0007C645                            
0007C645 0000 0203 0404 0505 0506+  PSG4:		dc.b    0, 0, 2, 3, 4, 4, 5, 5, 5, 6, $80
0007C650                            
0007C650 0000 0000 0000 0000 0000+  PSG5:		dc.b    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1
0007C660 0101 0101 0101 0101 0202+              dc.b    1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2
0007C670 0303 0303 0303 0303 0480               dc.b    3, 3, 3, 3, 3, 3, 3, 3, 4, $80
0007C67A                            
0007C67A 0303 0302 0202 0201 0101+  PSG6:		dc.b    3, 3, 3, 2, 2, 2, 2, 1, 1, 1, 0, 0, 0, 0, $80
0007C689                            
0007C689 0000 0000 0000 0101 0101+  PSG7:		dc.b    0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2
0007C699 0303 0304 0404 0505 0506+              dc.b    3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 7, $80
0007C6A5                            
0007C6A5 0000 0000 0001 0101 0101+  PSG8:		dc.b    0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2
0007C6B5 0303 0303 0304 0404 0404+              dc.b    3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6
0007C6C5 0606 0606 0707 0780                    dc.b    6, 6, 6, 6, 7, 7, 7, $80
0007C6CD                            
0007C6CD 0001 0203 0405 0607 0809+  PSG9:		dc.b    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, $A, $B, $C, $D, $E, $F
0007C6DD 80                                     dc.b    $80
0007C6DE                            
0007C6DE 0772 7326 1508 FF05        byte_71A94:	dc.b 7,	$72, $73, $26, $15, 8, $FF, 5
0007C6E6                            ; ---------------------------------------------------------------------------
0007C6E6                            ; Music	Pointers
0007C6E6                            ; ---------------------------------------------------------------------------
0007C6E6 0000 0000 0000 0000        MusicIndex:	dc.l Music81, Music82
0007C6EE 0000 0000 0000 0000        		dc.l Music83, Music84
0007C6F6 0000 0000 0000 0000        		dc.l Music85, Music86
0007C6FE 0000 0000 0000 0000        		dc.l Music87, Music88
0007C706 0000 0000 0000 0000        		dc.l Music89, Music8A
0007C70E 0000 0000 0000 0000        		dc.l Music8B, Music8C
0007C716 0000 0000 0000 0000        		dc.l Music8D, Music8E
0007C71E 0000 0000 0000 0000        		dc.l Music8F, Music90
0007C726 0000 0000 0000 0000        		dc.l Music91, Music92
0007C72E 0000 0000 0000 0000        		dc.l Music93, Music94
0007C736 0000 0000 0000 0000        		dc.l Music95, Music96
0007C73E 0000 0000 0000 0000        		dc.l Music97, Music98
0007C746 0000 0000 0000 0000        		dc.l Music99, Music9A
0007C74E 0000 0000 0000 0000        		dc.l Music9B, Music9C
0007C756 0000 0000 0000 0000        		dc.l Music9D, Music9E
0007C75E 0000 0000                  		dc.l Music9F
0007C762                            ; ---------------------------------------------------------------------------
0007C762                            ; Type of sound	being played ($90 = music; $70 = normal	sound effect)
0007C762                            ; ---------------------------------------------------------------------------
0007C762 9090 9090 9090 9090 9090+  SoundTypes:	dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$90
0007C772 9090 9090 9090 9090 9090+  		dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$80
0007C782 7070 7070 7070 7070 7068+  		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $68, $70, $70, $70, $60, $70,	$70
0007C792 6070 6070 7070 7070 7070+  		dc.b $60, $70, $60, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $7F,	$60
0007C7A2 7070 7070 7070 7070 7070+  		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $70,	$80
0007C7B2 8080 8080 8080 8080 8080+  		dc.b $80, $80, $80, $80, $80, $80, $80,	$80, $80, $80, $80, $80, $80, $80, $80,	$90
0007C7C2 9090 9090                  		dc.b $90, $90, $90, $90
0007C7C6                            
0007C7C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007C7C6                            
0007C7C6                            
0007C7C6                            sub_71B4C:				; XREF: loc_B10; PalToCRAM
0007C7C6 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
0007C7CE 4E71                       		nop	
0007C7D0 4E71                       		nop	
0007C7D2 4E71                       		nop	
0007C7D4                            
0007C7D4                            loc_71B5A:
0007C7D4 0839 0000 00A1 1100        		btst	#0,($A11100).l
0007C7DC 66F6                       		bne.s	loc_71B5A
0007C7DE                            
0007C7DE 0839 0007 00A0 1FFD        		btst	#7,($A01FFD).l
0007C7E6 6700                       		beq.s	loc_71B82
0007C7E8 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
0007C7F0 4E71                       		nop	
0007C7F2 4E71                       		nop	
0007C7F4 4E71                       		nop	
0007C7F6 4E71                       		nop	
0007C7F8 4E71                       		nop	
0007C7FA 60CA                       		bra.s	sub_71B4C
0007C7FC                            ; ===========================================================================
0007C7FC                            
0007C7FC                            loc_71B82:
0007C7FC 4DF9 00FF F000             		lea	($FFF000).l,a6
0007C802 422E 000E                  		clr.b	$E(a6)
0007C806 4A2E 0003                  		tst.b	3(a6)		; is music paused?
0007C80A 6600 0000                  		bne.w	loc_71E50	; if yes, branch
0007C80E 532E 0001                  		subq.b	#1,1(a6)
0007C812 6600                       		bne.s	loc_71B9E
0007C814 4EBA 0000                  		jsr	sub_7260C(pc)
0007C818                            
0007C818                            loc_71B9E:
0007C818 102E 0004                  		move.b	4(a6),d0
0007C81C 6700                       		beq.s	loc_71BA8
0007C81E 4EBA 0000                  		jsr	sub_72504(pc)
0007C822                            
0007C822                            loc_71BA8:
0007C822 4A2E 0024                  		tst.b	$24(a6)
0007C826 6700                       		beq.s	loc_71BB2
0007C828 4EBA 0000                  		jsr	sub_7267C(pc)
0007C82C                            
0007C82C                            loc_71BB2:
0007C82C 4A6E 000A                  		tst.w	$A(a6)		; is music or sound being played?
0007C830 6700                       		beq.s	loc_71BBC	; if not, branch
0007C832 4EBA 0000                  		jsr	Sound_Play(pc)
0007C836                            
0007C836                            loc_71BBC:
0007C836 0C2E 0080 0009             		cmpi.b	#$80,9(a6)
0007C83C 6700                       		beq.s	loc_71BC8
0007C83E 4EBA 0000                  		jsr	Sound_ChkValue(pc)
0007C842                            
0007C842                            loc_71BC8:
0007C842 4BEE 0040                  		lea	$40(a6),a5
0007C846 4A15                       		tst.b	(a5)
0007C848 6A00                       		bpl.s	loc_71BD4
0007C84A 4EBA 0000                  		jsr	sub_71C4E(pc)
0007C84E                            
0007C84E                            loc_71BD4:
0007C84E 422E 0008                  		clr.b	8(a6)
0007C852 7E05                       		moveq	#5,d7
0007C854                            
0007C854                            loc_71BDA:
0007C854 DAFC 0030                  		adda.w	#$30,a5
0007C858 4A15                       		tst.b	(a5)
0007C85A 6A00                       		bpl.s	loc_71BE6
0007C85C 4EBA 0000                  		jsr	sub_71CCA(pc)
0007C860                            
0007C860                            loc_71BE6:
0007C860 51CF FFF2                  		dbf	d7,loc_71BDA
0007C864                            
0007C864 7E02                       		moveq	#2,d7
0007C866                            
0007C866                            loc_71BEC:
0007C866 DAFC 0030                  		adda.w	#$30,a5
0007C86A 4A15                       		tst.b	(a5)
0007C86C 6A00                       		bpl.s	loc_71BF8
0007C86E 4EBA 0000                  		jsr	sub_72850(pc)
0007C872                            
0007C872                            loc_71BF8:
0007C872 51CF FFF2                  		dbf	d7,loc_71BEC
0007C876                            
0007C876 1D7C 0080 000E             		move.b	#$80,$E(a6)
0007C87C 7E02                       		moveq	#2,d7
0007C87E                            
0007C87E                            loc_71C04:
0007C87E DAFC 0030                  		adda.w	#$30,a5
0007C882 4A15                       		tst.b	(a5)
0007C884 6A00                       		bpl.s	loc_71C10
0007C886 4EBA 0000                  		jsr	sub_71CCA(pc)
0007C88A                            
0007C88A                            loc_71C10:
0007C88A 51CF FFF2                  		dbf	d7,loc_71C04
0007C88E                            
0007C88E 7E02                       		moveq	#2,d7
0007C890                            
0007C890                            loc_71C16:
0007C890 DAFC 0030                  		adda.w	#$30,a5
0007C894 4A15                       		tst.b	(a5)
0007C896 6A00                       		bpl.s	loc_71C22
0007C898 4EBA 0000                  		jsr	sub_72850(pc)
0007C89C                            
0007C89C                            loc_71C22:
0007C89C 51CF FFF2                  		dbf	d7,loc_71C16
0007C8A0 1D7C 0040 000E             		move.b	#$40,$E(a6)
0007C8A6 DAFC 0030                  		adda.w	#$30,a5
0007C8AA 4A15                       		tst.b	(a5)
0007C8AC 6A00                       		bpl.s	loc_71C38
0007C8AE 4EBA 0000                  		jsr	sub_71CCA(pc)
0007C8B2                            
0007C8B2                            loc_71C38:
0007C8B2 DAFC 0030                  		adda.w	#$30,a5
0007C8B6 4A15                       		tst.b	(a5)
0007C8B8 6A00                       		bpl.s	loc_71C44
0007C8BA 4EBA 0000                  		jsr	sub_72850(pc)
0007C8BE                            
0007C8BE                            loc_71C44:
0007C8BE 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
0007C8C6 4E75                       		rts	
0007C8C8                            ; End of function sub_71B4C
0007C8C8                            
0007C8C8                            
0007C8C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007C8C8                            
0007C8C8                            
0007C8C8                            sub_71C4E:				; XREF: sub_71B4C
0007C8C8 532D 000E                  		subq.b	#1,$E(a5)
0007C8CC 6600                       		bne.s	locret_71CAA
0007C8CE 1D7C 0080 0008             		move.b	#$80,8(a6)
0007C8D4 286D 0004                  		movea.l	4(a5),a4
0007C8D8                            
0007C8D8                            loc_71C5E:
0007C8D8 7A00                       		moveq	#0,d5
0007C8DA 1A1C                       		move.b	(a4)+,d5
0007C8DC 0C05 00E0                  		cmpi.b	#-$20,d5
0007C8E0 6500                       		bcs.s	loc_71C6E
0007C8E2 4EBA 0000                  		jsr	sub_72A5A(pc)
0007C8E6 60F0                       		bra.s	loc_71C5E
0007C8E8                            ; ===========================================================================
0007C8E8                            
0007C8E8                            loc_71C6E:
0007C8E8 4A05                       		tst.b	d5
0007C8EA 6A00                       		bpl.s	loc_71C84
0007C8EC 1B45 0010                  		move.b	d5,$10(a5)
0007C8F0 1A1C                       		move.b	(a4)+,d5
0007C8F2 6A00                       		bpl.s	loc_71C84
0007C8F4 534C                       		subq.w	#1,a4
0007C8F6 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
0007C8FC 6000                       		bra.s	loc_71C88
0007C8FE                            ; ===========================================================================
0007C8FE                            
0007C8FE                            loc_71C84:
0007C8FE 4EBA 0000                  		jsr	sub_71D40(pc)
0007C902                            
0007C902                            loc_71C88:
0007C902 2B4C 0004                  		move.l	a4,4(a5)
0007C906 0815 0002                  		btst	#2,(a5)
0007C90A 6600                       		bne.s	locret_71CAA
0007C90C 7000                       		moveq	#0,d0
0007C90E 102D 0010                  		move.b	$10(a5),d0
0007C912 0C00 0080                  		cmpi.b	#$80,d0
0007C916 6700                       		beq.s	locret_71CAA
0007C918 0800 0003                  		btst	#3,d0
0007C91C 6600                       		bne.s	loc_71CAC
0007C91E 13C0 00A0 1FFF             		move.b	d0,($A01FFF).l
0007C924                            
0007C924                            locret_71CAA:
0007C924 4E75                       		rts	
0007C926                            ; ===========================================================================
0007C926                            
0007C926                            loc_71CAC:
0007C926 0400 0088                  		subi.b	#$88,d0
0007C92A 103B 0000                  		move.b	byte_71CC4(pc,d0.w),d0
0007C92E 13C0 00A0 00EA             		move.b	d0,($A000EA).l
0007C934 13FC 0083 00A0 1FFF        		move.b	#$83,($A01FFF).l
0007C93C 4E75                       		rts	
0007C93E                            ; End of function sub_71C4E
0007C93E                            
0007C93E                            ; ===========================================================================
0007C93E 1215 1C1D FFFF             byte_71CC4:	dc.b $12, $15, $1C, $1D, $FF, $FF
0007C944                            
0007C944                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007C944                            
0007C944                            
0007C944                            sub_71CCA:				; XREF: sub_71B4C
0007C944 532D 000E                  		subq.b	#1,$E(a5)
0007C948 6600                       		bne.s	loc_71CE0
0007C94A 0895 0004                  		bclr	#4,(a5)
0007C94E 4EBA 0000                  		jsr	sub_71CEC(pc)
0007C952 4EBA 0000                  		jsr	sub_71E18(pc)
0007C956 6000 0000                  		bra.w	loc_726E2
0007C95A                            ; ===========================================================================
0007C95A                            
0007C95A                            loc_71CE0:
0007C95A 4EBA 0000                  		jsr	sub_71D9E(pc)
0007C95E 4EBA 0000                  		jsr	sub_71DC6(pc)
0007C962 6000 0000                  		bra.w	loc_71E24
0007C966                            ; End of function sub_71CCA
0007C966                            
0007C966                            
0007C966                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007C966                            
0007C966                            
0007C966                            sub_71CEC:				; XREF: sub_71CCA
0007C966 286D 0004                  		movea.l	4(a5),a4
0007C96A 0895 0001                  		bclr	#1,(a5)
0007C96E                            
0007C96E                            loc_71CF4:
0007C96E 7A00                       		moveq	#0,d5
0007C970 1A1C                       		move.b	(a4)+,d5
0007C972 0C05 00E0                  		cmpi.b	#-$20,d5
0007C976 6500                       		bcs.s	loc_71D04
0007C978 4EBA 0000                  		jsr	sub_72A5A(pc)
0007C97C 60F0                       		bra.s	loc_71CF4
0007C97E                            ; ===========================================================================
0007C97E                            
0007C97E                            loc_71D04:
0007C97E 4EBA 0000                  		jsr	sub_726FE(pc)
0007C982 4A05                       		tst.b	d5
0007C984 6A00                       		bpl.s	loc_71D1A
0007C986 4EBA 0000                  		jsr	sub_71D22(pc)
0007C98A 1A1C                       		move.b	(a4)+,d5
0007C98C 6A00                       		bpl.s	loc_71D1A
0007C98E 534C                       		subq.w	#1,a4
0007C990 6000 0000                  		bra.w	sub_71D60
0007C994                            ; ===========================================================================
0007C994                            
0007C994                            loc_71D1A:
0007C994 4EBA 0000                  		jsr	sub_71D40(pc)
0007C998 6000 0000                  		bra.w	sub_71D60
0007C99C                            ; End of function sub_71CEC
0007C99C                            
0007C99C                            
0007C99C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007C99C                            
0007C99C                            
0007C99C                            sub_71D22:				; XREF: sub_71CEC
0007C99C 0405 0080                  		subi.b	#$80,d5
0007C9A0 6700                       		beq.s	loc_71D58
0007C9A2 DA2D 0008                  		add.b	8(a5),d5
0007C9A6 0245 007F                  		andi.w	#$7F,d5
0007C9AA E34D                       		lsl.w	#1,d5
0007C9AC 41FA 0000                  		lea	word_72790(pc),a0
0007C9B0 3C30 5000                  		move.w	(a0,d5.w),d6
0007C9B4 3B46 0010                  		move.w	d6,$10(a5)
0007C9B8 4E75                       		rts	
0007C9BA                            ; End of function sub_71D22
0007C9BA                            
0007C9BA                            
0007C9BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007C9BA                            
0007C9BA                            
0007C9BA                            sub_71D40:				; XREF: sub_71C4E; sub_71CEC; sub_72878
0007C9BA 1005                       		move.b	d5,d0
0007C9BC 122D 0002                  		move.b	2(a5),d1
0007C9C0                            
0007C9C0                            loc_71D46:
0007C9C0 5301                       		subq.b	#1,d1
0007C9C2 6700                       		beq.s	loc_71D4E
0007C9C4 D005                       		add.b	d5,d0
0007C9C6 60F8                       		bra.s	loc_71D46
0007C9C8                            ; ===========================================================================
0007C9C8                            
0007C9C8                            loc_71D4E:
0007C9C8 1B40 000F                  		move.b	d0,$F(a5)
0007C9CC 1B40 000E                  		move.b	d0,$E(a5)
0007C9D0 4E75                       		rts	
0007C9D2                            ; End of function sub_71D40
0007C9D2                            
0007C9D2                            ; ===========================================================================
0007C9D2                            
0007C9D2                            loc_71D58:				; XREF: sub_71D22
0007C9D2 08D5 0001                  		bset	#1,(a5)
0007C9D6 426D 0010                  		clr.w	$10(a5)
0007C9DA                            
0007C9DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007C9DA                            
0007C9DA                            
0007C9DA                            sub_71D60:				; XREF: sub_71CEC; sub_72878; sub_728AC
0007C9DA 2B4C 0004                  		move.l	a4,4(a5)
0007C9DE 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
0007C9E4 0815 0004                  		btst	#4,(a5)
0007C9E8 6600                       		bne.s	locret_71D9C
0007C9EA 1B6D 0013 0012             		move.b	$13(a5),$12(a5)
0007C9F0 422D 000C                  		clr.b	$C(a5)
0007C9F4 0815 0003                  		btst	#3,(a5)
0007C9F8 6700                       		beq.s	locret_71D9C
0007C9FA 206D 0014                  		movea.l	$14(a5),a0
0007C9FE 1B58 0018                  		move.b	(a0)+,$18(a5)
0007CA02 1B58 0019                  		move.b	(a0)+,$19(a5)
0007CA06 1B58 001A                  		move.b	(a0)+,$1A(a5)
0007CA0A 1018                       		move.b	(a0)+,d0
0007CA0C E208                       		lsr.b	#1,d0
0007CA0E 1B40 001B                  		move.b	d0,$1B(a5)
0007CA12 426D 001C                  		clr.w	$1C(a5)
0007CA16                            
0007CA16                            locret_71D9C:
0007CA16 4E75                       		rts	
0007CA18                            ; End of function sub_71D60
0007CA18                            
0007CA18                            
0007CA18                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007CA18                            
0007CA18                            
0007CA18                            sub_71D9E:				; XREF: sub_71CCA; sub_72850
0007CA18 4A2D 0012                  		tst.b	$12(a5)
0007CA1C 6700                       		beq.s	locret_71DC4
0007CA1E 532D 0012                  		subq.b	#1,$12(a5)
0007CA22 6600                       		bne.s	locret_71DC4
0007CA24 08D5 0001                  		bset	#1,(a5)
0007CA28 4A2D 0001                  		tst.b	1(a5)
0007CA2C 6B00 0000                  		bmi.w	loc_71DBE
0007CA30 4EBA 0000                  		jsr	sub_726FE(pc)
0007CA34 584F                       		addq.w	#4,sp
0007CA36 4E75                       		rts	
0007CA38                            ; ===========================================================================
0007CA38                            
0007CA38                            loc_71DBE:
0007CA38 4EBA 0000                  		jsr	sub_729A0(pc)
0007CA3C 584F                       		addq.w	#4,sp
0007CA3E                            
0007CA3E                            locret_71DC4:
0007CA3E 4E75                       		rts	
0007CA40                            ; End of function sub_71D9E
0007CA40                            
0007CA40                            
0007CA40                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007CA40                            
0007CA40                            
0007CA40                            sub_71DC6:				; XREF: sub_71CCA; sub_72850
0007CA40 584F                       		addq.w	#4,sp
0007CA42 0815 0003                  		btst	#3,(a5)
0007CA46 6700                       		beq.s	locret_71E16
0007CA48 4A2D 0018                  		tst.b	$18(a5)
0007CA4C 6700                       		beq.s	loc_71DDA
0007CA4E 532D 0018                  		subq.b	#1,$18(a5)
0007CA52 4E75                       		rts	
0007CA54                            ; ===========================================================================
0007CA54                            
0007CA54                            loc_71DDA:
0007CA54 532D 0019                  		subq.b	#1,$19(a5)
0007CA58 6700                       		beq.s	loc_71DE2
0007CA5A 4E75                       		rts	
0007CA5C                            ; ===========================================================================
0007CA5C                            
0007CA5C                            loc_71DE2:
0007CA5C 206D 0014                  		movea.l	$14(a5),a0
0007CA60 1B68 0001 0019             		move.b	1(a0),$19(a5)
0007CA66 4A2D 001B                  		tst.b	$1B(a5)
0007CA6A 6600                       		bne.s	loc_71DFE
0007CA6C 1B68 0003 001B             		move.b	3(a0),$1B(a5)
0007CA72 442D 001A                  		neg.b	$1A(a5)
0007CA76 4E75                       		rts	
0007CA78                            ; ===========================================================================
0007CA78                            
0007CA78                            loc_71DFE:
0007CA78 532D 001B                  		subq.b	#1,$1B(a5)
0007CA7C 1C2D 001A                  		move.b	$1A(a5),d6
0007CA80 4886                       		ext.w	d6
0007CA82 DC6D 001C                  		add.w	$1C(a5),d6
0007CA86 3B46 001C                  		move.w	d6,$1C(a5)
0007CA8A DC6D 0010                  		add.w	$10(a5),d6
0007CA8E 594F                       		subq.w	#4,sp
0007CA90                            
0007CA90                            locret_71E16:
0007CA90 4E75                       		rts	
0007CA92                            ; End of function sub_71DC6
0007CA92                            
0007CA92                            
0007CA92                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007CA92                            
0007CA92                            
0007CA92                            sub_71E18:				; XREF: sub_71CCA
0007CA92 0815 0001                  		btst	#1,(a5)
0007CA96 6600                       		bne.s	locret_71E48
0007CA98 3C2D 0010                  		move.w	$10(a5),d6
0007CA9C 6700                       		beq.s	loc_71E4A
0007CA9E                            
0007CA9E                            loc_71E24:				; XREF: sub_71CCA
0007CA9E 102D 001E                  		move.b	$1E(a5),d0
0007CAA2 4880                       		ext.w	d0
0007CAA4 DC40                       		add.w	d0,d6
0007CAA6 0815 0002                  		btst	#2,(a5)
0007CAAA 6600                       		bne.s	locret_71E48
0007CAAC 3206                       		move.w	d6,d1
0007CAAE E049                       		lsr.w	#8,d1
0007CAB0 103C 00A4                  		move.b	#-$5C,d0
0007CAB4 4EBA 0000                  		jsr	sub_72722(pc)
0007CAB8 1206                       		move.b	d6,d1
0007CABA 103C 00A0                  		move.b	#-$60,d0
0007CABE 4EBA 0000                  		jsr	sub_72722(pc)
0007CAC2                            
0007CAC2                            locret_71E48:
0007CAC2 4E75                       		rts	
0007CAC4                            ; ===========================================================================
0007CAC4                            
0007CAC4                            loc_71E4A:
0007CAC4 08D5 0001                  		bset	#1,(a5)
0007CAC8 4E75                       		rts	
0007CACA                            ; End of function sub_71E18
0007CACA                            
0007CACA                            ; ===========================================================================
0007CACA                            
0007CACA                            loc_71E50:				; XREF: sub_71B4C
0007CACA 6B00                       		bmi.s	loc_71E94
0007CACC 0C2E 0002 0003             		cmpi.b	#2,3(a6)
0007CAD2 6700 0000                  		beq.w	loc_71EFE
0007CAD6 1D7C 0002 0003             		move.b	#2,3(a6)
0007CADC 7602                       		moveq	#2,d3
0007CADE 103C 00B4                  		move.b	#-$4C,d0
0007CAE2 7200                       		moveq	#0,d1
0007CAE4                            
0007CAE4                            loc_71E6A:
0007CAE4 4EBA 0000                  		jsr	sub_7272E(pc)
0007CAE8 4EBA 0000                  		jsr	sub_72764(pc)
0007CAEC 5200                       		addq.b	#1,d0
0007CAEE 51CB FFF4                  		dbf	d3,loc_71E6A
0007CAF2                            
0007CAF2 7602                       		moveq	#2,d3
0007CAF4 7028                       		moveq	#$28,d0
0007CAF6                            
0007CAF6                            loc_71E7C:
0007CAF6 1203                       		move.b	d3,d1
0007CAF8 4EBA 0000                  		jsr	sub_7272E(pc)
0007CAFC 5801                       		addq.b	#4,d1
0007CAFE 4EBA 0000                  		jsr	sub_7272E(pc)
0007CB02 51CB FFF2                  		dbf	d3,loc_71E7C
0007CB06                            
0007CB06 4EBA 0000                  		jsr	sub_729B6(pc)
0007CB0A 6000 FDB2                  		bra.w	loc_71C44
0007CB0E                            ; ===========================================================================
0007CB0E                            
0007CB0E                            loc_71E94:				; XREF: loc_71E50
0007CB0E 422E 0003                  		clr.b	3(a6)
0007CB12 7630                       		moveq	#$30,d3
0007CB14 4BEE 0040                  		lea	$40(a6),a5
0007CB18 7806                       		moveq	#6,d4
0007CB1A                            
0007CB1A                            loc_71EA0:
0007CB1A 0815 0007                  		btst	#7,(a5)
0007CB1E 6700                       		beq.s	loc_71EB8
0007CB20 0815 0002                  		btst	#2,(a5)
0007CB24 6600                       		bne.s	loc_71EB8
0007CB26 103C 00B4                  		move.b	#-$4C,d0
0007CB2A 122D 000A                  		move.b	$A(a5),d1
0007CB2E 4EBA 0000                  		jsr	sub_72722(pc)
0007CB32                            
0007CB32                            loc_71EB8:
0007CB32 DAC3                       		adda.w	d3,a5
0007CB34 51CC FFE4                  		dbf	d4,loc_71EA0
0007CB38                            
0007CB38 4BEE 0220                  		lea	$220(a6),a5
0007CB3C 7802                       		moveq	#2,d4
0007CB3E                            
0007CB3E                            loc_71EC4:
0007CB3E 0815 0007                  		btst	#7,(a5)
0007CB42 6700                       		beq.s	loc_71EDC
0007CB44 0815 0002                  		btst	#2,(a5)
0007CB48 6600                       		bne.s	loc_71EDC
0007CB4A 103C 00B4                  		move.b	#-$4C,d0
0007CB4E 122D 000A                  		move.b	$A(a5),d1
0007CB52 4EBA 0000                  		jsr	sub_72722(pc)
0007CB56                            
0007CB56                            loc_71EDC:
0007CB56 DAC3                       		adda.w	d3,a5
0007CB58 51CC FFE4                  		dbf	d4,loc_71EC4
0007CB5C                            
0007CB5C 4BEE 0340                  		lea	$340(a6),a5
0007CB60 0815 0007                  		btst	#7,(a5)
0007CB64 6700                       		beq.s	loc_71EFE
0007CB66 0815 0002                  		btst	#2,(a5)
0007CB6A 6600                       		bne.s	loc_71EFE
0007CB6C 103C 00B4                  		move.b	#-$4C,d0
0007CB70 122D 000A                  		move.b	$A(a5),d1
0007CB74 4EBA 0000                  		jsr	sub_72722(pc)
0007CB78                            
0007CB78                            loc_71EFE:
0007CB78 6000 FD44                  		bra.w	loc_71C44
0007CB7C                            
0007CB7C                            ; ---------------------------------------------------------------------------
0007CB7C                            ; Subroutine to	play a sound or	music track
0007CB7C                            ; ---------------------------------------------------------------------------
0007CB7C                            
0007CB7C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007CB7C                            
0007CB7C                            
0007CB7C                            Sound_Play:				; XREF: sub_71B4C
0007CB7C 2079 0007 C5DA             		movea.l	(Go_SoundTypes).l,a0
0007CB82 43EE 000A                  		lea	$A(a6),a1	; load music track number
0007CB86 1616                       		move.b	0(a6),d3
0007CB88 7802                       		moveq	#2,d4
0007CB8A                            
0007CB8A                            loc_71F12:
0007CB8A 1011                       		move.b	(a1),d0		; move track number to d0
0007CB8C 1200                       		move.b	d0,d1
0007CB8E 4219                       		clr.b	(a1)+
0007CB90 0400 0081                  		subi.b	#$81,d0
0007CB94 6500                       		bcs.s	loc_71F3E
0007CB96 0C2E 0080 0009             		cmpi.b	#$80,9(a6)
0007CB9C 6700                       		beq.s	loc_71F2C
0007CB9E 1D41 000A                  		move.b	d1,$A(a6)
0007CBA2 6000                       		bra.s	loc_71F3E
0007CBA4                            ; ===========================================================================
0007CBA4                            
0007CBA4                            loc_71F2C:
0007CBA4 0240 007F                  		andi.w	#$7F,d0
0007CBA8 1430 0000                  		move.b	(a0,d0.w),d2
0007CBAC B403                       		cmp.b	d3,d2
0007CBAE 6500                       		bcs.s	loc_71F3E
0007CBB0 1602                       		move.b	d2,d3
0007CBB2 1D41 0009                  		move.b	d1,9(a6)	; set music flag
0007CBB6                            
0007CBB6                            loc_71F3E:
0007CBB6 51CC FFD2                  		dbf	d4,loc_71F12
0007CBBA                            
0007CBBA 4A03                       		tst.b	d3
0007CBBC 6B00                       		bmi.s	locret_71F4A
0007CBBE 1C83                       		move.b	d3,0(a6)
0007CBC0                            
0007CBC0                            locret_71F4A:
0007CBC0 4E75                       		rts	
0007CBC2                            ; End of function Sound_Play
0007CBC2                            
0007CBC2                            
0007CBC2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007CBC2                            
0007CBC2                            
0007CBC2                            Sound_ChkValue:				; XREF: sub_71B4C
0007CBC2 7E00                       		moveq	#0,d7
0007CBC4 1E2E 0009                  		move.b	9(a6),d7
0007CBC8 6700 0000                  		beq.w	Sound_E4
0007CBCC 6A00                       		bpl.s	locret_71F8C
0007CBCE 1D7C 0080 0009             		move.b	#$80,9(a6)	; reset	music flag
0007CBD4 0C07 009F                  		cmpi.b	#$9F,d7
0007CBD8 6300 0000                  		bls.w	Sound_81to9F	; music	$81-$9F
0007CBDC 0C07 00A0                  		cmpi.b	#$A0,d7
0007CBE0 6500 0000                  		bcs.w	locret_71F8C
0007CBE4 0C07 00CF                  		cmpi.b	#$CF,d7
0007CBE8 6300 0000                  		bls.w	Sound_A0toCF	; sound	$A0-$CF
0007CBEC 0C07 00D0                  		cmpi.b	#$D0,d7
0007CBF0 6500 0000                  		bcs.w	locret_71F8C
0007CBF4 0C07 00E0                  		cmpi.b	#$E0,d7
0007CBF8 6500 0000                  		bcs.w	Sound_D0toDF	; sound	$D0-$DF
0007CBFC 0C07 00E5                  		cmpi.b	#$E5,d7
0007CC00 6300                       		bls.s	Sound_E0toE5	; sound	$E0-$E5
0007CC02                            
0007CC02                            locret_71F8C:
0007CC02 4E75                       		rts	
0007CC04                            ; ===========================================================================
0007CC04                            
0007CC04                            Sound_E0toE5				; XREF: Sound_ChkValue
0007CC04 0407 00E0                  		subi.b	#$E0,d7
0007CC08 E54F                       		lsl.w	#2,d7
0007CC0A 4EFB 7000                  		jmp	Sound_ExIndex(pc,d7.w)
0007CC0E                            ; ===========================================================================
0007CC0E                            
0007CC0E                            Sound_ExIndex:
0007CC0E 6000 0000                  		bra.w	Sound_E0
0007CC12                            ; ===========================================================================
0007CC12 6000 0000                  		bra.w	Sound_E1
0007CC16                            ; ===========================================================================
0007CC16 6000 0000                  		bra.w	Sound_E2
0007CC1A                            ; ===========================================================================
0007CC1A 6000 0000                  		bra.w	Sound_E3
0007CC1E                            ; ===========================================================================
0007CC1E 6000 0000                  		bra.w	Sound_E4
0007CC22                            ; ===========================================================================
0007CC22 6000 0000                  		bra.w	Sound_E5
0007CC26                            ; ===========================================================================
0007CC26                            ; ---------------------------------------------------------------------------
0007CC26                            ; Play "Say-gaa" PCM sound
0007CC26                            ; ---------------------------------------------------------------------------
0007CC26                            
0007CC26                            Sound_E1:				  
0007CC26 45F9 0000 0000             		lea	(SegaPCM).l,a2			; Load the SEGA PCM sample into a2. It's important that we use a2 since a0 and a1 are going to be used up ahead when reading the joypad ports 
0007CC2C 263C 0000 0000             		move.l	#(SegaPCM_End-SegaPCM),d3			; Load the size of the SEGA PCM sample into d3 
0007CC32 13FC 002A 00A0 4000        		move.b	#$2A,($A04000).l		; $A04000 = $2A -> Write to DAC channel	  
0007CC3A                            PlayPCM_Loop:	  
0007CC3A 13DA 00A0 4001             		move.b	(a2)+,($A04001).l		; Write the PCM data (contained in a2) to $A04001 (YM2612 register D0) 
0007CC40 303C 0014                  		move.w	#$14,d0				; Write the pitch ($14 in this case) to d0 
0007CC44 51C8 FFFE                  		dbf	d0,*				; Decrement d0; jump to itself if not 0. (for pitch control, avoids playing the sample too fast)  
0007CC48 5383                       		sub.l	#1,d3				; Subtract 1 from the PCM sample size 
0007CC4A 6700                       		beq.s	return_PlayPCM			; If d3 = 0, we finished playing the PCM sample, so stop playing, leave this loop, and unfreeze the 68K 
0007CC4C 41F8 F604                  		lea	($FFFFF604).w,a0		; address where JoyPad states are written 
0007CC50 43F9 00A1 0003             		lea	($A10003).l,a1			; address where JoyPad states are read from 
0007CC56 4EB8 142A                  		jsr	(Joypad_Read).w			; Read only the first joypad port. It's important that we do NOT do the two ports, we don't have the cycles for that 
0007CC5A 0838 0007 F604             		btst	#7,($FFFFF604).w		; Check for Start button 
0007CC60 6600                       		bne.s	return_PlayPCM			; If start is pressed, stop playing, leave this loop, and unfreeze the 68K 
0007CC62 60D6                       		bra.s	PlayPCM_Loop			; Otherwise, continue playing PCM sample 
0007CC64                            return_PlayPCM: 
0007CC64 584F                       		addq.w	#4,sp 
0007CC66 4E75                       		rts
0007CC68                            		
0007CC68                            ; ---------------------------------------------------------------------------
0007CC68                            ; Play you are an idiot pcm sound
0007CC68                            ; since the sfx already crashes the game forever load it here :V
0007CC68                            ; ---------------------------------------------------------------------------
0007CC68                            
0007CC68                            Sound_E5: 
0007CC68 4EB8 14FA                  		jsr	ClearScreen
0007CC6C                            		;control port on a5
0007CC6C 2ABC 9401 9340             		move.l	#$94000000+((($280>>1)&$FF00)<<8)+$9300+(($280>>1)&$FF),(a5)
0007CC72 2ABC 96FC 9500             		move.l	#$96000000+((($FFFFF800>>1)&$FF00)<<8)+$9500+(($FFFFF800>>1)&$FF),(a5)
0007CC78 3ABC 977F                  		move.w	#$9700+(((($FFFFF800>>1)&$FF0000)>>16)&$7F),(a5)
0007CC7C 3ABC 7800                  		move.w	#$4000+($F800&$3FFF),(a5)
0007CC80 3ABC 0083                  		move.w	#$80+(($F800&$C000)>>14),(a5) ; clear sprites
0007CC84                            		
0007CC84 3ABC 8700                  		move.w	#$8700,(a5) ; first colour is bg now
0007CC88                            		
0007CC88 2ABC 4000 0000             		move.l	#$40000000,(a5)
0007CC8E 41F9 0002 44A0             		lea	(Nem_Idiot).l,a0 ;	load idiot sprites
0007CC94 4EB8 1676                  		jsr	NemDec
0007CC98 43F9 00FF 0000             		lea	($FF0000).l,a1
0007CC9E 41F9 0002 4442             		lea	(Eni_Idiot).l,a0 ; load mappings for IDIOT
0007CCA4 303C 0000                  		move.w	#0,d0
0007CCA8 4EB8 1954                  		jsr	EniDec
0007CCAC 43F9 00FF 0000             		lea	($FF0000).l,a1
0007CCB2 203C 4304 0003             		move.l	#$43040003,d0
0007CCB8 7223                       		moveq	#35,d1
0007CCBA 740D                       		moveq	#13,d2
0007CCBC 4EB8 1656                  		jsr	ShowVDPGraphics
0007CCC0 7014                       		moveq	#20,d0
0007CCC2 4EB8 231A                  		jsr	PalLoad2	; load pallet
0007CCC6                            		
0007CCC6                            Sound_E5_StartPCM:
0007CCC6 45F9 0000 0000             		lea	(IdiotPCM).l,a2			; Load the idiot PCM sample into a2. It's important that we use a2 since a0 and a1 are going to be used up ahead when reading the joypad ports 
0007CCCC 263C 0000 0000             		move.l	#(IdiotPCM_End-IdiotPCM),d3			; Load the size of the idiot PCM sample into d3 
0007CCD2 13FC 002A 00A0 4000        		move.b	#$2A,($A04000).l		; $A04000 = $2A -> Write to DAC channel	  
0007CCDA                            PlayPCM_LoopE5:	  
0007CCDA                            
0007CCDA 13DA 00A0 4001             		move.b	(a2)+,($A04001).l		; Write the PCM data (contained in a2) to $A04001 (YM2612 register D0) 
0007CCE0                            		
0007CCE0 5278 FE24                  		addq.w	#1,($FFFFFE24).w
0007CCE4                            		
0007CCE4 1038 FE24                  		move.b	($FFFFFE24).w,d0
0007CCE8 0200 000F                  		andi.b	#$F,d0
0007CCEC 6700                       		beq.s	SfxE5SwapPalette
0007CCEE                            		
0007CCEE 303C 0056                  		move.w	#$58-2,d0				; Write the pitch ($58 in this case) to d0  (-28 from the check before)
0007CCF2 51C8 FFFE                  		dbf	d0,*				; Decrement d0; jump to itself if not 0. (for pitch control, avoids playing the sample too fast)   (14 cycles)
0007CCF6 5383                       		sub.l	#1,d3				; Subtract 1 from the PCM sample size 
0007CCF8 67CC                       		beq.s	Sound_E5_StartPCM			; If d3 = 0, we finished playing the PCM sample, DONT STOP
0007CCFA 60DE                       		bra.s	PlayPCM_LoopE5
0007CCFC                            		
0007CCFC                            SfxE5SwapPalette:
0007CCFC                            		
0007CCFC 2ABC 9400 9308             		move.l	#$94000000+((($10>>1)&$FF00)<<8)+$9300+(($10>>1)&$FF),(a5) ; len
0007CD02                            		
0007CD02                            		
0007CD02 0838 0004 FE24             		btst	#4,($FFFFFE24).w
0007CD08 6700                       		beq.s	@not_black
0007CD0A 2ABC 96FD 9598             		move.l	#$96000000+((($FFFFFB30>>1)&$FF00)<<8)+$9500+(($FFFFFB30>>1)&$FF),(a5)	; source	
0007CD10 6000                       		bra.s	@merge
0007CD12                            	@not_black:
0007CD12 2ABC 96FD 9590             		move.l	#$96000000+((($FFFFFB20>>1)&$FF00)<<8)+$9500+(($FFFFFB20>>1)&$FF),(a5)	; source
0007CD18                            	@merge:
0007CD18 3ABC 977F                  		move.w	#$9700+(((($FFFFFB20>>1)&$FF0000)>>16)&$7F),(a5) ; source
0007CD1C 3ABC C000                  		move.w	#$C000+(0&$3FFF),(a5) ; dest
0007CD20 31FC 0080 F640             		move.w	#$80+((0&$C000)>>14),($FFFFF640).w ;dest
0007CD26 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0007CD2A                            		
0007CD2A 303C 004D                  		move.w	#$58-11,d0				; attempt at removing the little jumps
0007CD2E 51C8 FFFE                  		dbf	d0,*				; (14 cycles)
0007CD32 60A6                       		bra.s	PlayPCM_LoopE5
0007CD34                            		
0007CD34                            ; ===========================================================================
0007CD34                            ; ---------------------------------------------------------------------------
0007CD34                            ; Play music track $81-$9F
0007CD34                            ; ---------------------------------------------------------------------------
0007CD34                            
0007CD34                            Sound_81to9F:				; XREF: Sound_ChkValue
0007CD34 0C07 0088                  		cmpi.b	#$88,d7		; is "extra life" music	played?
0007CD38 6600                       		bne.s	loc_72024	; if not, branch
0007CD3A 4A2E 0027                  		tst.b	$27(a6)
0007CD3E 6600 0000                  		bne.w	loc_721B6
0007CD42 4BEE 0040                  		lea	$40(a6),a5
0007CD46 7009                       		moveq	#9,d0
0007CD48                            
0007CD48                            loc_71FE6:
0007CD48 0895 0002                  		bclr	#2,(a5)
0007CD4C DAFC 0030                  		adda.w	#$30,a5
0007CD50 51C8 FFF6                  		dbf	d0,loc_71FE6
0007CD54                            
0007CD54 4BEE 0220                  		lea	$220(a6),a5
0007CD58 7005                       		moveq	#5,d0
0007CD5A                            
0007CD5A                            loc_71FF8:
0007CD5A 0895 0007                  		bclr	#7,(a5)
0007CD5E DAFC 0030                  		adda.w	#$30,a5
0007CD62 51C8 FFF6                  		dbf	d0,loc_71FF8
0007CD66 4216                       		clr.b	0(a6)
0007CD68 204E                       		movea.l	a6,a0
0007CD6A 43EE 03A0                  		lea	$3A0(a6),a1
0007CD6E 303C 0087                  		move.w	#$87,d0
0007CD72                            
0007CD72                            loc_72012:
0007CD72 22D8                       		move.l	(a0)+,(a1)+
0007CD74 51C8 FFFC                  		dbf	d0,loc_72012
0007CD78                            
0007CD78 1D7C 0080 0027             		move.b	#$80,$27(a6)
0007CD7E 4216                       		clr.b	0(a6)
0007CD80 6000                       		bra.s	loc_7202C
0007CD82                            ; ===========================================================================
0007CD82                            
0007CD82                            loc_72024:
0007CD82 422E 0027                  		clr.b	$27(a6)
0007CD86 422E 0026                  		clr.b	$26(a6)
0007CD8A                            
0007CD8A                            loc_7202C:
0007CD8A 4EBA 0000                  		jsr	sub_725CA(pc)
0007CD8E 2879 0007 C5EA             		movea.l	(off_719A0).l,a4
0007CD94 0407 0081                  		subi.b	#$81,d7
0007CD98 1D74 7000 0029             		move.b	(a4,d7.w),$29(a6)
0007CD9E 2879 0007 C5E2             		movea.l	(Go_MusicIndex).l,a4
0007CDA4 E54F                       		lsl.w	#2,d7
0007CDA6 2874 7000                  		movea.l	(a4,d7.w),a4
0007CDAA 7000                       		moveq	#0,d0
0007CDAC 3014                       		move.w	(a4),d0
0007CDAE D08C                       		add.l	a4,d0
0007CDB0 2D40 0018                  		move.l	d0,$18(a6)
0007CDB4 102C 0005                  		move.b	5(a4),d0
0007CDB8 1D40 0028                  		move.b	d0,$28(a6)
0007CDBC 4A2E 002A                  		tst.b	$2A(a6)
0007CDC0 6700                       		beq.s	loc_72068
0007CDC2 102E 0029                  		move.b	$29(a6),d0
0007CDC6                            
0007CDC6                            loc_72068:
0007CDC6 1D40 0002                  		move.b	d0,2(a6)
0007CDCA 1D40 0001                  		move.b	d0,1(a6)
0007CDCE 7200                       		moveq	#0,d1
0007CDD0 264C                       		movea.l	a4,a3
0007CDD2 5C4C                       		addq.w	#6,a4
0007CDD4 7E00                       		moveq	#0,d7
0007CDD6 1E2B 0002                  		move.b	2(a3),d7
0007CDDA 6700 0000                  		beq.w	loc_72114
0007CDDE 5307                       		subq.b	#1,d7
0007CDE0 123C 00C0                  		move.b	#-$40,d1
0007CDE4 182B 0004                  		move.b	4(a3),d4
0007CDE8 7C30                       		moveq	#$30,d6
0007CDEA 1A3C 0001                  		move.b	#1,d5
0007CDEE 43EE 0040                  		lea	$40(a6),a1
0007CDF2 45FA 0000                  		lea	byte_721BA(pc),a2
0007CDF6                            
0007CDF6                            loc_72098:
0007CDF6 08D1 0007                  		bset	#7,(a1)
0007CDFA 135A 0001                  		move.b	(a2)+,1(a1)
0007CDFE 1344 0002                  		move.b	d4,2(a1)
0007CE02 1346 000D                  		move.b	d6,$D(a1)
0007CE06 1341 000A                  		move.b	d1,$A(a1)
0007CE0A 1345 000E                  		move.b	d5,$E(a1)
0007CE0E 7000                       		moveq	#0,d0
0007CE10 301C                       		move.w	(a4)+,d0
0007CE12 D08B                       		add.l	a3,d0
0007CE14 2340 0004                  		move.l	d0,4(a1)
0007CE18 335C 0008                  		move.w	(a4)+,8(a1)
0007CE1C D2C6                       		adda.w	d6,a1
0007CE1E 51CF FFD6                  		dbf	d7,loc_72098
0007CE22 0C2B 0007 0002             		cmpi.b	#7,2(a3)
0007CE28 6600                       		bne.s	loc_720D8
0007CE2A 702B                       		moveq	#$2B,d0
0007CE2C 7200                       		moveq	#0,d1
0007CE2E 4EBA 0000                  		jsr	sub_7272E(pc)
0007CE32 6000 0000                  		bra.w	loc_72114
0007CE36                            ; ===========================================================================
0007CE36                            
0007CE36                            loc_720D8:
0007CE36 7028                       		moveq	#$28,d0
0007CE38 7206                       		moveq	#6,d1
0007CE3A 4EBA 0000                  		jsr	sub_7272E(pc)
0007CE3E 103C 0042                  		move.b	#$42,d0
0007CE42 727F                       		moveq	#$7F,d1
0007CE44 4EBA 0000                  		jsr	sub_72764(pc)
0007CE48 103C 004A                  		move.b	#$4A,d0
0007CE4C 727F                       		moveq	#$7F,d1
0007CE4E 4EBA 0000                  		jsr	sub_72764(pc)
0007CE52 103C 0046                  		move.b	#$46,d0
0007CE56 727F                       		moveq	#$7F,d1
0007CE58 4EBA 0000                  		jsr	sub_72764(pc)
0007CE5C 103C 004E                  		move.b	#$4E,d0
0007CE60 727F                       		moveq	#$7F,d1
0007CE62 4EBA 0000                  		jsr	sub_72764(pc)
0007CE66 103C 00B6                  		move.b	#-$4A,d0
0007CE6A 123C 00C0                  		move.b	#-$40,d1
0007CE6E 4EBA 0000                  		jsr	sub_72764(pc)
0007CE72                            
0007CE72                            loc_72114:
0007CE72 7E00                       		moveq	#0,d7
0007CE74 1E2B 0003                  		move.b	3(a3),d7
0007CE78 6700                       		beq.s	loc_72154
0007CE7A 5307                       		subq.b	#1,d7
0007CE7C 43EE 0190                  		lea	$190(a6),a1
0007CE80 45FA 0000                  		lea	byte_721C2(pc),a2
0007CE84                            
0007CE84                            loc_72126:
0007CE84 08D1 0007                  		bset	#7,(a1)
0007CE88 135A 0001                  		move.b	(a2)+,1(a1)
0007CE8C 1344 0002                  		move.b	d4,2(a1)
0007CE90 1346 000D                  		move.b	d6,$D(a1)
0007CE94 1345 000E                  		move.b	d5,$E(a1)
0007CE98 7000                       		moveq	#0,d0
0007CE9A 301C                       		move.w	(a4)+,d0
0007CE9C D08B                       		add.l	a3,d0
0007CE9E 2340 0004                  		move.l	d0,4(a1)
0007CEA2 335C 0008                  		move.w	(a4)+,8(a1)
0007CEA6 101C                       		move.b	(a4)+,d0
0007CEA8 135C 000B                  		move.b	(a4)+,$B(a1)
0007CEAC D2C6                       		adda.w	d6,a1
0007CEAE 51CF FFD4                  		dbf	d7,loc_72126
0007CEB2                            
0007CEB2                            loc_72154:
0007CEB2 43EE 0220                  		lea	$220(a6),a1
0007CEB6 7E05                       		moveq	#5,d7
0007CEB8                            
0007CEB8                            loc_7215A:
0007CEB8 4A11                       		tst.b	(a1)
0007CEBA 6A00 0000                  		bpl.w	loc_7217C
0007CEBE 7000                       		moveq	#0,d0
0007CEC0 1029 0001                  		move.b	1(a1),d0
0007CEC4 6B00                       		bmi.s	loc_7216E
0007CEC6 5500                       		subq.b	#2,d0
0007CEC8 E508                       		lsl.b	#2,d0
0007CECA 6000                       		bra.s	loc_72170
0007CECC                            ; ===========================================================================
0007CECC                            
0007CECC                            loc_7216E:
0007CECC E608                       		lsr.b	#3,d0
0007CECE                            
0007CECE                            loc_72170:
0007CECE 41FA 0000                  		lea	dword_722CC(pc),a0
0007CED2 2070 0000                  		movea.l	(a0,d0.w),a0
0007CED6 08D0 0002                  		bset	#2,(a0)
0007CEDA                            
0007CEDA                            loc_7217C:
0007CEDA D2C6                       		adda.w	d6,a1
0007CEDC 51CF FFDA                  		dbf	d7,loc_7215A
0007CEE0                            
0007CEE0 4A6E 0340                  		tst.w	$340(a6)
0007CEE4 6A00                       		bpl.s	loc_7218E
0007CEE6 08EE 0002 0100             		bset	#2,$100(a6)
0007CEEC                            
0007CEEC                            loc_7218E:
0007CEEC 4A6E 0370                  		tst.w	$370(a6)
0007CEF0 6A00                       		bpl.s	loc_7219A
0007CEF2 08EE 0002 01F0             		bset	#2,$1F0(a6)
0007CEF8                            
0007CEF8                            loc_7219A:
0007CEF8 4BEE 0070                  		lea	$70(a6),a5
0007CEFC 7805                       		moveq	#5,d4
0007CEFE                            
0007CEFE                            loc_721A0:
0007CEFE 4EBA 0000                  		jsr	sub_726FE(pc)
0007CF02 DAC6                       		adda.w	d6,a5
0007CF04 51CC FFF8                  		dbf	d4,loc_721A0
0007CF08 7802                       		moveq	#2,d4
0007CF0A                            
0007CF0A                            loc_721AC:
0007CF0A 4EBA 0000                  		jsr	sub_729A0(pc)
0007CF0E DAC6                       		adda.w	d6,a5
0007CF10 51CC FFF8                  		dbf	d4,loc_721AC
0007CF14                            
0007CF14                            loc_721B6:
0007CF14 584F                       		addq.w	#4,sp
0007CF16 4E75                       		rts	
0007CF18                            ; ===========================================================================
0007CF18 0600 0102 0405 0600        byte_721BA:	dc.b 6,	0, 1, 2, 4, 5, 6, 0
0007CF20                            		even
0007CF20 80A0 C000                  byte_721C2:	dc.b $80, $A0, $C0, 0
0007CF24                            		even
0007CF24                            ; ===========================================================================
0007CF24                            ; ---------------------------------------------------------------------------
0007CF24                            ; Play normal sound effect
0007CF24                            ; ---------------------------------------------------------------------------
0007CF24                            
0007CF24                            Sound_A0toCF:				; XREF: Sound_ChkValue
0007CF24 4A2E 0027                  		tst.b	$27(a6)
0007CF28 6600 0000                  		bne.w	loc_722C6
0007CF2C 4A2E 0004                  		tst.b	4(a6)
0007CF30 6600 0000                  		bne.w	loc_722C6
0007CF34 4A2E 0024                  		tst.b	$24(a6)
0007CF38 6600 0000                  		bne.w	loc_722C6
0007CF3C 0C07 00B5                  		cmpi.b	#$B5,d7		; is ring sound	effect played?
0007CF40 6600                       		bne.s	Sound_notB5	; if not, branch
0007CF42 4A2E 002B                  		tst.b	$2B(a6)
0007CF46 6600                       		bne.s	loc_721EE
0007CF48 1E3C 00CE                  		move.b	#$CE,d7		; play ring sound in left speaker
0007CF4C                            
0007CF4C                            loc_721EE:
0007CF4C 086E 0000 002B             		bchg	#0,$2B(a6)	; change speaker
0007CF52                            
0007CF52                            Sound_notB5:
0007CF52 0C07 00A7                  		cmpi.b	#$A7,d7		; is "pushing" sound played?
0007CF56 6600                       		bne.s	Sound_notA7	; if not, branch
0007CF58 4A2E 002C                  		tst.b	$2C(a6)
0007CF5C 6600 0000                  		bne.w	locret_722C4
0007CF60 1D7C 0080 002C             		move.b	#$80,$2C(a6)
0007CF66                            
0007CF66                            Sound_notA7:
0007CF66 2079 0007 C5E6             		movea.l	(Go_SoundIndex).l,a0
0007CF6C 0407 00A0                  		subi.b	#$A0,d7
0007CF70 E54F                       		lsl.w	#2,d7
0007CF72 2670 7000                  		movea.l	(a0,d7.w),a3
0007CF76 224B                       		movea.l	a3,a1
0007CF78 7200                       		moveq	#0,d1
0007CF7A 3219                       		move.w	(a1)+,d1
0007CF7C D28B                       		add.l	a3,d1
0007CF7E 1A19                       		move.b	(a1)+,d5
0007CF80 1E19                       		move.b	(a1)+,d7
0007CF82 5307                       		subq.b	#1,d7
0007CF84 7C30                       		moveq	#$30,d6
0007CF86                            
0007CF86                            loc_72228:
0007CF86 7600                       		moveq	#0,d3
0007CF88 1629 0001                  		move.b	1(a1),d3
0007CF8C 1803                       		move.b	d3,d4
0007CF8E 6B00                       		bmi.s	loc_72244
0007CF90 5543                       		subq.w	#2,d3
0007CF92 E54B                       		lsl.w	#2,d3
0007CF94 4BFA 0000                  		lea	dword_722CC(pc),a5
0007CF98 2A75 3000                  		movea.l	(a5,d3.w),a5
0007CF9C 08D5 0002                  		bset	#2,(a5)
0007CFA0 6000                       		bra.s	loc_7226E
0007CFA2                            ; ===========================================================================
0007CFA2                            
0007CFA2                            loc_72244:
0007CFA2 E64B                       		lsr.w	#3,d3
0007CFA4 4BFA 0000                  		lea	dword_722CC(pc),a5
0007CFA8 2A75 3000                  		movea.l	(a5,d3.w),a5
0007CFAC 08D5 0002                  		bset	#2,(a5)
0007CFB0 0C04 00C0                  		cmpi.b	#$C0,d4
0007CFB4 6600                       		bne.s	loc_7226E
0007CFB6 1004                       		move.b	d4,d0
0007CFB8 0000 001F                  		ori.b	#$1F,d0
0007CFBC 13C0 00C0 0011             		move.b	d0,($C00011).l
0007CFC2 0840 0005                  		bchg	#5,d0
0007CFC6 13C0 00C0 0011             		move.b	d0,($C00011).l
0007CFCC                            
0007CFCC                            loc_7226E:
0007CFCC 2A7B 3000                  		movea.l	dword_722EC(pc,d3.w),a5
0007CFD0 244D                       		movea.l	a5,a2
0007CFD2 700B                       		moveq	#$B,d0
0007CFD4                            
0007CFD4                            loc_72276:
0007CFD4 429A                       		clr.l	(a2)+
0007CFD6 51C8 FFFC                  		dbf	d0,loc_72276
0007CFDA                            
0007CFDA 3A99                       		move.w	(a1)+,(a5)
0007CFDC 1B45 0002                  		move.b	d5,2(a5)
0007CFE0 7000                       		moveq	#0,d0
0007CFE2 3019                       		move.w	(a1)+,d0
0007CFE4 D08B                       		add.l	a3,d0
0007CFE6 2B40 0004                  		move.l	d0,4(a5)
0007CFEA 3B59 0008                  		move.w	(a1)+,8(a5)
0007CFEE 1B7C 0001 000E             		move.b	#1,$E(a5)
0007CFF4 1B46 000D                  		move.b	d6,$D(a5)
0007CFF8 4A04                       		tst.b	d4
0007CFFA 6B00                       		bmi.s	loc_722A8
0007CFFC 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
0007D002 2B41 0020                  		move.l	d1,$20(a5)
0007D006                            
0007D006                            loc_722A8:
0007D006 51CF FF7E                  		dbf	d7,loc_72228
0007D00A                            
0007D00A 4A2E 0250                  		tst.b	$250(a6)
0007D00E 6A00                       		bpl.s	loc_722B8
0007D010 08EE 0002 0340             		bset	#2,$340(a6)
0007D016                            
0007D016                            loc_722B8:
0007D016 4A2E 0310                  		tst.b	$310(a6)
0007D01A 6A00                       		bpl.s	locret_722C4
0007D01C 08EE 0002 0370             		bset	#2,$370(a6)
0007D022                            
0007D022                            locret_722C4:
0007D022 4E75                       		rts	
0007D024                            ; ===========================================================================
0007D024                            
0007D024                            loc_722C6:
0007D024 4216                       		clr.b	0(a6)
0007D026 4E75                       		rts	
0007D028                            ; ===========================================================================
0007D028 00FF F0D0                  dword_722CC:	dc.l $FFF0D0
0007D02C 0000 0000                  		dc.l 0
0007D030 00FF F100                  		dc.l $FFF100
0007D034 00FF F130                  		dc.l $FFF130
0007D038 00FF F190                  		dc.l $FFF190
0007D03C 00FF F1C0                  		dc.l $FFF1C0
0007D040 00FF F1F0                  		dc.l $FFF1F0
0007D044 00FF F1F0                  		dc.l $FFF1F0
0007D048 00FF F220                  dword_722EC:	dc.l $FFF220
0007D04C 0000 0000                  		dc.l 0
0007D050 00FF F250                  		dc.l $FFF250
0007D054 00FF F280                  		dc.l $FFF280
0007D058 00FF F2B0                  		dc.l $FFF2B0
0007D05C 00FF F2E0                  		dc.l $FFF2E0
0007D060 00FF F310                  		dc.l $FFF310
0007D064 00FF F310                  		dc.l $FFF310
0007D068                            ; ===========================================================================
0007D068                            ; ---------------------------------------------------------------------------
0007D068                            ; Play GHZ waterfall sound
0007D068                            ; ---------------------------------------------------------------------------
0007D068                            
0007D068                            Sound_D0toDF:				; XREF: Sound_ChkValue
0007D068 4A2E 0027                  		tst.b	$27(a6)
0007D06C 6600 0000                  		bne.w	locret_723C6
0007D070 4A2E 0004                  		tst.b	4(a6)
0007D074 6600 0000                  		bne.w	locret_723C6
0007D078 4A2E 0024                  		tst.b	$24(a6)
0007D07C 6600 0000                  		bne.w	locret_723C6
0007D080 2079 0007 C5DE             		movea.l	(Go_SoundD0).l,a0
0007D086 0407 00D0                  		subi.b	#$D0,d7
0007D08A E54F                       		lsl.w	#2,d7
0007D08C 2670 7000                  		movea.l	(a0,d7.w),a3
0007D090 224B                       		movea.l	a3,a1
0007D092 7000                       		moveq	#0,d0
0007D094 3019                       		move.w	(a1)+,d0
0007D096 D08B                       		add.l	a3,d0
0007D098 2D40 0020                  		move.l	d0,$20(a6)
0007D09C 1A19                       		move.b	(a1)+,d5
0007D09E 1E19                       		move.b	(a1)+,d7
0007D0A0 5307                       		subq.b	#1,d7
0007D0A2 7C30                       		moveq	#$30,d6
0007D0A4                            
0007D0A4                            loc_72348:
0007D0A4 1829 0001                  		move.b	1(a1),d4
0007D0A8 6B00                       		bmi.s	loc_7235A
0007D0AA 08EE 0002 0100             		bset	#2,$100(a6)
0007D0B0 4BEE 0340                  		lea	$340(a6),a5
0007D0B4 6000                       		bra.s	loc_72364
0007D0B6                            ; ===========================================================================
0007D0B6                            
0007D0B6                            loc_7235A:
0007D0B6 08EE 0002 01F0             		bset	#2,$1F0(a6)
0007D0BC 4BEE 0370                  		lea	$370(a6),a5
0007D0C0                            
0007D0C0                            loc_72364:
0007D0C0 244D                       		movea.l	a5,a2
0007D0C2 700B                       		moveq	#$B,d0
0007D0C4                            
0007D0C4                            loc_72368:
0007D0C4 429A                       		clr.l	(a2)+
0007D0C6 51C8 FFFC                  		dbf	d0,loc_72368
0007D0CA                            
0007D0CA 3A99                       		move.w	(a1)+,(a5)
0007D0CC 1B45 0002                  		move.b	d5,2(a5)
0007D0D0 7000                       		moveq	#0,d0
0007D0D2 3019                       		move.w	(a1)+,d0
0007D0D4 D08B                       		add.l	a3,d0
0007D0D6 2B40 0004                  		move.l	d0,4(a5)
0007D0DA 3B59 0008                  		move.w	(a1)+,8(a5)
0007D0DE 1B7C 0001 000E             		move.b	#1,$E(a5)
0007D0E4 1B46 000D                  		move.b	d6,$D(a5)
0007D0E8 4A04                       		tst.b	d4
0007D0EA 6B00                       		bmi.s	loc_72396
0007D0EC 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
0007D0F2                            
0007D0F2                            loc_72396:
0007D0F2 51CF FFB0                  		dbf	d7,loc_72348
0007D0F6                            
0007D0F6 4A2E 0250                  		tst.b	$250(a6)
0007D0FA 6A00                       		bpl.s	loc_723A6
0007D0FC 08EE 0002 0340             		bset	#2,$340(a6)
0007D102                            
0007D102                            loc_723A6:
0007D102 4A2E 0310                  		tst.b	$310(a6)
0007D106 6A00                       		bpl.s	locret_723C6
0007D108 08EE 0002 0370             		bset	#2,$370(a6)
0007D10E 0004 001F                  		ori.b	#$1F,d4
0007D112 13C4 00C0 0011             		move.b	d4,($C00011).l
0007D118 0844 0005                  		bchg	#5,d4
0007D11C 13C4 00C0 0011             		move.b	d4,($C00011).l
0007D122                            
0007D122                            locret_723C6:
0007D122 4E75                       		rts	
0007D124                            ; End of function Sound_ChkValue
0007D124                            
0007D124                            ; ===========================================================================
0007D124 00FF F100                  		dc.l $FFF100
0007D128 00FF F1F0                  		dc.l $FFF1F0
0007D12C 00FF F250                  		dc.l $FFF250
0007D130 00FF F310                  		dc.l $FFF310
0007D134 00FF F340                  		dc.l $FFF340
0007D138 00FF F370                  		dc.l $FFF370
0007D13C                            
0007D13C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D13C                            
0007D13C                            
0007D13C                            Snd_FadeOut1:				; XREF: Sound_E0
0007D13C 4216                       		clr.b	0(a6)
0007D13E 4BEE 0220                  		lea	$220(a6),a5
0007D142 7E05                       		moveq	#5,d7
0007D144                            
0007D144                            loc_723EA:
0007D144 4A15                       		tst.b	(a5)
0007D146 6A00 0000                  		bpl.w	loc_72472
0007D14A 0895 0007                  		bclr	#7,(a5)
0007D14E 7600                       		moveq	#0,d3
0007D150 162D 0001                  		move.b	1(a5),d3
0007D154 6B00                       		bmi.s	loc_7243C
0007D156 4EBA 0000                  		jsr	sub_726FE(pc)
0007D15A 0C03 0004                  		cmpi.b	#4,d3
0007D15E 6600                       		bne.s	loc_72416
0007D160 4A2E 0340                  		tst.b	$340(a6)
0007D164 6A00                       		bpl.s	loc_72416
0007D166 4BEE 0340                  		lea	$340(a6),a5
0007D16A 226E 0020                  		movea.l	$20(a6),a1
0007D16E 6000                       		bra.s	loc_72428
0007D170                            ; ===========================================================================
0007D170                            
0007D170                            loc_72416:
0007D170 5503                       		subq.b	#2,d3
0007D172 E50B                       		lsl.b	#2,d3
0007D174 41FA FEB2                  		lea	dword_722CC(pc),a0
0007D178 264D                       		movea.l	a5,a3
0007D17A 2A70 3000                  		movea.l	(a0,d3.w),a5
0007D17E 226E 0018                  		movea.l	$18(a6),a1
0007D182                            
0007D182                            loc_72428:
0007D182 0895 0002                  		bclr	#2,(a5)
0007D186 08D5 0001                  		bset	#1,(a5)
0007D18A 102D 000B                  		move.b	$B(a5),d0
0007D18E 4EBA 0000                  		jsr	sub_72C4E(pc)
0007D192 2A4B                       		movea.l	a3,a5
0007D194 6000                       		bra.s	loc_72472
0007D196                            ; ===========================================================================
0007D196                            
0007D196                            loc_7243C:
0007D196 4EBA 0000                  		jsr	sub_729A0(pc)
0007D19A 41EE 0370                  		lea	$370(a6),a0
0007D19E 0C03 00E0                  		cmpi.b	#$E0,d3
0007D1A2 6700                       		beq.s	loc_7245A
0007D1A4 0C03 00C0                  		cmpi.b	#$C0,d3
0007D1A8 6700                       		beq.s	loc_7245A
0007D1AA E60B                       		lsr.b	#3,d3
0007D1AC 41FA FE7A                  		lea	dword_722CC(pc),a0
0007D1B0 2070 3000                  		movea.l	(a0,d3.w),a0
0007D1B4                            
0007D1B4                            loc_7245A:
0007D1B4 0890 0002                  		bclr	#2,(a0)
0007D1B8 08D0 0001                  		bset	#1,(a0)
0007D1BC 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
0007D1C2 6600                       		bne.s	loc_72472
0007D1C4 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
0007D1CC                            
0007D1CC                            loc_72472:
0007D1CC DAFC 0030                  		adda.w	#$30,a5
0007D1D0 51CF FF72                  		dbf	d7,loc_723EA
0007D1D4                            
0007D1D4 4E75                       		rts	
0007D1D6                            ; End of function Snd_FadeOut1
0007D1D6                            
0007D1D6                            
0007D1D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D1D6                            
0007D1D6                            
0007D1D6                            Snd_FadeOut2:				; XREF: Sound_E0
0007D1D6 4BEE 0340                  		lea	$340(a6),a5
0007D1DA 4A15                       		tst.b	(a5)
0007D1DC 6A00                       		bpl.s	loc_724AE
0007D1DE 0895 0007                  		bclr	#7,(a5)
0007D1E2 0815 0002                  		btst	#2,(a5)
0007D1E6 6600                       		bne.s	loc_724AE
0007D1E8 4EBA 0000                  		jsr	loc_7270A(pc)
0007D1EC 4BEE 0100                  		lea	$100(a6),a5
0007D1F0 0895 0002                  		bclr	#2,(a5)
0007D1F4 08D5 0001                  		bset	#1,(a5)
0007D1F8 4A15                       		tst.b	(a5)
0007D1FA 6A00                       		bpl.s	loc_724AE
0007D1FC 226E 0018                  		movea.l	$18(a6),a1
0007D200 102D 000B                  		move.b	$B(a5),d0
0007D204 4EBA 0000                  		jsr	sub_72C4E(pc)
0007D208                            
0007D208                            loc_724AE:
0007D208 4BEE 0370                  		lea	$370(a6),a5
0007D20C 4A15                       		tst.b	(a5)
0007D20E 6A00                       		bpl.s	locret_724E4
0007D210 0895 0007                  		bclr	#7,(a5)
0007D214 0815 0002                  		btst	#2,(a5)
0007D218 6600                       		bne.s	locret_724E4
0007D21A 4EBA 0000                  		jsr	loc_729A6(pc)
0007D21E 4BEE 01F0                  		lea	$1F0(a6),a5
0007D222 0895 0002                  		bclr	#2,(a5)
0007D226 08D5 0001                  		bset	#1,(a5)
0007D22A 4A15                       		tst.b	(a5)
0007D22C 6A00                       		bpl.s	locret_724E4
0007D22E 0C2D 00E0 0001             		cmpi.b	#-$20,1(a5)
0007D234 6600                       		bne.s	locret_724E4
0007D236 13ED 001F 00C0 0011        		move.b	$1F(a5),($C00011).l
0007D23E                            
0007D23E                            locret_724E4:
0007D23E 4E75                       		rts	
0007D240                            ; End of function Snd_FadeOut2
0007D240                            
0007D240                            ; ===========================================================================
0007D240                            ; ---------------------------------------------------------------------------
0007D240                            ; Fade out music
0007D240                            ; ---------------------------------------------------------------------------
0007D240                            
0007D240                            Sound_E0:				; XREF: Sound_ExIndex
0007D240 4EBA FEFA                  		jsr	Snd_FadeOut1(pc)
0007D244 4EBA FF90                  		jsr	Snd_FadeOut2(pc)
0007D248 1D7C 0003 0006             		move.b	#3,6(a6)
0007D24E 1D7C 0028 0004             		move.b	#$28,4(a6)
0007D254 422E 0040                  		clr.b	$40(a6)
0007D258 422E 002A                  		clr.b	$2A(a6)
0007D25C 4E75                       		rts	
0007D25E                            
0007D25E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D25E                            
0007D25E                            
0007D25E                            sub_72504:				; XREF: sub_71B4C
0007D25E 102E 0006                  		move.b	6(a6),d0
0007D262 6700                       		beq.s	loc_72510
0007D264 532E 0006                  		subq.b	#1,6(a6)
0007D268 4E75                       		rts	
0007D26A                            ; ===========================================================================
0007D26A                            
0007D26A                            loc_72510:
0007D26A 532E 0004                  		subq.b	#1,4(a6)
0007D26E 6700 0000                  		beq.w	Sound_E4
0007D272 1D7C 0003 0006             		move.b	#3,6(a6)
0007D278 4BEE 0070                  		lea	$70(a6),a5
0007D27C 7E05                       		moveq	#5,d7
0007D27E                            
0007D27E                            loc_72524:
0007D27E 4A15                       		tst.b	(a5)
0007D280 6A00                       		bpl.s	loc_72538
0007D282 522D 0009                  		addq.b	#1,9(a5)
0007D286 6A00                       		bpl.s	loc_72534
0007D288 0895 0007                  		bclr	#7,(a5)
0007D28C 6000                       		bra.s	loc_72538
0007D28E                            ; ===========================================================================
0007D28E                            
0007D28E                            loc_72534:
0007D28E 4EBA 0000                  		jsr	sub_72CB4(pc)
0007D292                            
0007D292                            loc_72538:
0007D292 DAFC 0030                  		adda.w	#$30,a5
0007D296 51CF FFE6                  		dbf	d7,loc_72524
0007D29A                            
0007D29A 7E02                       		moveq	#2,d7
0007D29C                            
0007D29C                            loc_72542:
0007D29C 4A15                       		tst.b	(a5)
0007D29E 6A00                       		bpl.s	loc_72560
0007D2A0 522D 0009                  		addq.b	#1,9(a5)
0007D2A4 0C2D 0010 0009             		cmpi.b	#$10,9(a5)
0007D2AA 6500                       		bcs.s	loc_72558
0007D2AC 0895 0007                  		bclr	#7,(a5)
0007D2B0 6000                       		bra.s	loc_72560
0007D2B2                            ; ===========================================================================
0007D2B2                            
0007D2B2                            loc_72558:
0007D2B2 1C2D 0009                  		move.b	9(a5),d6
0007D2B6 4EBA 0000                  		jsr	sub_7296A(pc)
0007D2BA                            
0007D2BA                            loc_72560:
0007D2BA DAFC 0030                  		adda.w	#$30,a5
0007D2BE 51CF FFDC                  		dbf	d7,loc_72542
0007D2C2                            
0007D2C2 4E75                       		rts	
0007D2C4                            ; End of function sub_72504
0007D2C4                            
0007D2C4                            
0007D2C4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D2C4                            
0007D2C4                            
0007D2C4                            sub_7256A:				; XREF: Sound_E4; sub_725CA
0007D2C4 7602                       		moveq	#2,d3
0007D2C6 7028                       		moveq	#$28,d0
0007D2C8                            
0007D2C8                            loc_7256E:
0007D2C8 1203                       		move.b	d3,d1
0007D2CA 4EBA 0000                  		jsr	sub_7272E(pc)
0007D2CE 5801                       		addq.b	#4,d1
0007D2D0 4EBA 0000                  		jsr	sub_7272E(pc)
0007D2D4 51CB FFF2                  		dbf	d3,loc_7256E
0007D2D8                            
0007D2D8 7040                       		moveq	#$40,d0
0007D2DA 727F                       		moveq	#$7F,d1
0007D2DC 7802                       		moveq	#2,d4
0007D2DE                            
0007D2DE                            loc_72584:
0007D2DE 7603                       		moveq	#3,d3
0007D2E0                            
0007D2E0                            loc_72586:
0007D2E0 4EBA 0000                  		jsr	sub_7272E(pc)
0007D2E4 4EBA 0000                  		jsr	sub_72764(pc)
0007D2E8 5840                       		addq.w	#4,d0
0007D2EA 51CB FFF4                  		dbf	d3,loc_72586
0007D2EE                            
0007D2EE 0400 000F                  		subi.b	#$F,d0
0007D2F2 51CC FFEA                  		dbf	d4,loc_72584
0007D2F6                            
0007D2F6 4E75                       		rts	
0007D2F8                            ; End of function sub_7256A
0007D2F8                            
0007D2F8                            ; ===========================================================================
0007D2F8                            ; ---------------------------------------------------------------------------
0007D2F8                            ; Stop music
0007D2F8                            ; ---------------------------------------------------------------------------
0007D2F8                            
0007D2F8                            Sound_E4:				; XREF: Sound_ChkValue; Sound_ExIndex; sub_72504
0007D2F8 702B                       		moveq	#$2B,d0
0007D2FA 123C 0080                  		move.b	#$80,d1
0007D2FE 4EBA 0000                  		jsr	sub_7272E(pc)
0007D302 7027                       		moveq	#$27,d0
0007D304 7200                       		moveq	#0,d1
0007D306 4EBA 0000                  		jsr	sub_7272E(pc)
0007D30A 204E                       		movea.l	a6,a0
0007D30C 303C 00E3                  		move.w	#$E3,d0
0007D310                            
0007D310                            loc_725B6:
0007D310 4298                       		clr.l	(a0)+
0007D312 51C8 FFFC                  		dbf	d0,loc_725B6
0007D316                            
0007D316 1D7C 0080 0009             		move.b	#$80,9(a6)	; set music to $80 (silence)
0007D31C 4EBA FFA6                  		jsr	sub_7256A(pc)
0007D320 6000 0000                  		bra.w	sub_729B6
0007D324                            
0007D324                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D324                            
0007D324                            
0007D324                            sub_725CA:				; XREF: Sound_ChkValue
0007D324 204E                       		movea.l	a6,a0
0007D326 1216                       		move.b	0(a6),d1
0007D328 142E 0027                  		move.b	$27(a6),d2
0007D32C 162E 002A                  		move.b	$2A(a6),d3
0007D330 182E 0026                  		move.b	$26(a6),d4
0007D334 3A2E 000A                  		move.w	$A(a6),d5
0007D338 303C 0087                  		move.w	#$87,d0
0007D33C                            
0007D33C                            loc_725E4:
0007D33C 4298                       		clr.l	(a0)+
0007D33E 51C8 FFFC                  		dbf	d0,loc_725E4
0007D342                            
0007D342 1C81                       		move.b	d1,0(a6)
0007D344 1D42 0027                  		move.b	d2,$27(a6)
0007D348 1D43 002A                  		move.b	d3,$2A(a6)
0007D34C 1D44 0026                  		move.b	d4,$26(a6)
0007D350 3D45 000A                  		move.w	d5,$A(a6)
0007D354 1D7C 0080 0009             		move.b	#$80,9(a6)
0007D35A 4EBA FF68                  		jsr	sub_7256A(pc)
0007D35E 6000 0000                  		bra.w	sub_729B6
0007D362                            ; End of function sub_725CA
0007D362                            
0007D362                            
0007D362                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D362                            
0007D362                            
0007D362                            sub_7260C:				; XREF: sub_71B4C
0007D362 1D6E 0002 0001             		move.b	2(a6),1(a6)
0007D368 41EE 004E                  		lea	$4E(a6),a0
0007D36C 7030                       		moveq	#$30,d0
0007D36E 7209                       		moveq	#9,d1
0007D370                            
0007D370                            loc_7261A:
0007D370 5210                       		addq.b	#1,(a0)
0007D372 D0C0                       		adda.w	d0,a0
0007D374 51C9 FFFA                  		dbf	d1,loc_7261A
0007D378                            
0007D378 4E75                       		rts	
0007D37A                            ; End of function sub_7260C
0007D37A                            
0007D37A                            ; ===========================================================================
0007D37A                            ; ---------------------------------------------------------------------------
0007D37A                            ; Speed	up music
0007D37A                            ; ---------------------------------------------------------------------------
0007D37A                            
0007D37A                            Sound_E2:				; XREF: Sound_ExIndex
0007D37A 4A2E 0027                  		tst.b	$27(a6)
0007D37E 6600                       		bne.s	loc_7263E
0007D380 1D6E 0029 0002             		move.b	$29(a6),2(a6)
0007D386 1D6E 0029 0001             		move.b	$29(a6),1(a6)
0007D38C 1D7C 0080 002A             		move.b	#$80,$2A(a6)
0007D392 4E75                       		rts	
0007D394                            ; ===========================================================================
0007D394                            
0007D394                            loc_7263E:
0007D394 1D6E 03C9 03A2             		move.b	$3C9(a6),$3A2(a6)
0007D39A 1D6E 03C9 03A1             		move.b	$3C9(a6),$3A1(a6)
0007D3A0 1D7C 0080 03CA             		move.b	#$80,$3CA(a6)
0007D3A6 4E75                       		rts	
0007D3A8                            ; ===========================================================================
0007D3A8                            ; ---------------------------------------------------------------------------
0007D3A8                            ; Change music back to normal speed
0007D3A8                            ; ---------------------------------------------------------------------------
0007D3A8                            
0007D3A8                            Sound_E3:				; XREF: Sound_ExIndex
0007D3A8 4A2E 0027                  		tst.b	$27(a6)
0007D3AC 6600                       		bne.s	loc_7266A
0007D3AE 1D6E 0028 0002             		move.b	$28(a6),2(a6)
0007D3B4 1D6E 0028 0001             		move.b	$28(a6),1(a6)
0007D3BA 422E 002A                  		clr.b	$2A(a6)
0007D3BE 4E75                       		rts	
0007D3C0                            ; ===========================================================================
0007D3C0                            
0007D3C0                            loc_7266A:
0007D3C0 1D6E 03C8 03A2             		move.b	$3C8(a6),$3A2(a6)
0007D3C6 1D6E 03C8 03A1             		move.b	$3C8(a6),$3A1(a6)
0007D3CC 422E 03CA                  		clr.b	$3CA(a6)
0007D3D0 4E75                       		rts	
0007D3D2                            
0007D3D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D3D2                            
0007D3D2                            
0007D3D2                            sub_7267C:				; XREF: sub_71B4C
0007D3D2 4A2E 0025                  		tst.b	$25(a6)
0007D3D6 6700                       		beq.s	loc_72688
0007D3D8 532E 0025                  		subq.b	#1,$25(a6)
0007D3DC 4E75                       		rts	
0007D3DE                            ; ===========================================================================
0007D3DE                            
0007D3DE                            loc_72688:
0007D3DE 4A2E 0026                  		tst.b	$26(a6)
0007D3E2 6700                       		beq.s	loc_726D6
0007D3E4 532E 0026                  		subq.b	#1,$26(a6)
0007D3E8 1D7C 0002 0025             		move.b	#2,$25(a6)
0007D3EE 4BEE 0070                  		lea	$70(a6),a5
0007D3F2 7E05                       		moveq	#5,d7
0007D3F4                            
0007D3F4                            loc_7269E:
0007D3F4 4A15                       		tst.b	(a5)
0007D3F6 6A00                       		bpl.s	loc_726AA
0007D3F8 532D 0009                  		subq.b	#1,9(a5)
0007D3FC 4EBA 0000                  		jsr	sub_72CB4(pc)
0007D400                            
0007D400                            loc_726AA:
0007D400 DAFC 0030                  		adda.w	#$30,a5
0007D404 51CF FFEE                  		dbf	d7,loc_7269E
0007D408 7E02                       		moveq	#2,d7
0007D40A                            
0007D40A                            loc_726B4:
0007D40A 4A15                       		tst.b	(a5)
0007D40C 6A00                       		bpl.s	loc_726CC
0007D40E 532D 0009                  		subq.b	#1,9(a5)
0007D412 1C2D 0009                  		move.b	9(a5),d6
0007D416 0C06 0010                  		cmpi.b	#$10,d6
0007D41A 6500                       		bcs.s	loc_726C8
0007D41C 7C0F                       		moveq	#$F,d6
0007D41E                            
0007D41E                            loc_726C8:
0007D41E 4EBA 0000                  		jsr	sub_7296A(pc)
0007D422                            
0007D422                            loc_726CC:
0007D422 DAFC 0030                  		adda.w	#$30,a5
0007D426 51CF FFE2                  		dbf	d7,loc_726B4
0007D42A 4E75                       		rts	
0007D42C                            ; ===========================================================================
0007D42C                            
0007D42C                            loc_726D6:
0007D42C 08AE 0002 0040             		bclr	#2,$40(a6)
0007D432 422E 0024                  		clr.b	$24(a6)
0007D436 4E75                       		rts	
0007D438                            ; End of function sub_7267C
0007D438                            
0007D438                            ; ===========================================================================
0007D438                            
0007D438                            loc_726E2:				; XREF: sub_71CCA
0007D438 0815 0001                  		btst	#1,(a5)
0007D43C 6600                       		bne.s	locret_726FC
0007D43E 0815 0002                  		btst	#2,(a5)
0007D442 6600                       		bne.s	locret_726FC
0007D444 7028                       		moveq	#$28,d0
0007D446 122D 0001                  		move.b	1(a5),d1
0007D44A 0001 00F0                  		ori.b	#-$10,d1
0007D44E 6000 0000                  		bra.w	sub_7272E
0007D452                            ; ===========================================================================
0007D452                            
0007D452                            locret_726FC:
0007D452 4E75                       		rts	
0007D454                            
0007D454                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D454                            
0007D454                            
0007D454                            sub_726FE:				; XREF: sub_71CEC; sub_71D9E; Sound_ChkValue; Snd_FadeOut1
0007D454 0815 0004                  		btst	#4,(a5)
0007D458 6600                       		bne.s	locret_72714
0007D45A 0815 0002                  		btst	#2,(a5)
0007D45E 6600                       		bne.s	locret_72714
0007D460                            
0007D460                            loc_7270A:				; XREF: Snd_FadeOut2
0007D460 7028                       		moveq	#$28,d0
0007D462 122D 0001                  		move.b	1(a5),d1
0007D466 6000 0000                  		bra.w	sub_7272E
0007D46A                            ; ===========================================================================
0007D46A                            
0007D46A                            locret_72714:
0007D46A 4E75                       		rts	
0007D46C                            ; End of function sub_726FE
0007D46C                            
0007D46C                            ; ===========================================================================
0007D46C                            
0007D46C                            loc_72716:				; XREF: sub_72A5A
0007D46C 0815 0002                  		btst	#2,(a5)
0007D470 6600                       		bne.s	locret_72720
0007D472 6000 0000                  		bra.w	sub_72722
0007D476                            ; ===========================================================================
0007D476                            
0007D476                            locret_72720:
0007D476 4E75                       		rts	
0007D478                            
0007D478                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D478                            
0007D478                            
0007D478                            sub_72722:				; XREF: sub_71E18; sub_72C4E; sub_72CB4
0007D478 082D 0002 0001             		btst	#2,1(a5)
0007D47E 6600                       		bne.s	loc_7275A
0007D480 D02D 0001                  		add.b	1(a5),d0
0007D484                            ; End of function sub_72722
0007D484                            
0007D484                            
0007D484                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D484                            
0007D484                            
0007D484                            sub_7272E:				; XREF: loc_71E6A
0007D484 1439 00A0 4000             		move.b	($A04000).l,d2
0007D48A 0802 0007                  		btst	#7,d2
0007D48E 66F4                       		bne.s	sub_7272E
0007D490 13C0 00A0 4000             		move.b	d0,($A04000).l
0007D496 4E71                       		nop	
0007D498 4E71                       		nop	
0007D49A 4E71                       		nop	
0007D49C                            
0007D49C                            loc_72746:
0007D49C 1439 00A0 4000             		move.b	($A04000).l,d2
0007D4A2 0802 0007                  		btst	#7,d2
0007D4A6 66F4                       		bne.s	loc_72746
0007D4A8                            
0007D4A8 13C1 00A0 4001             		move.b	d1,($A04001).l
0007D4AE 4E75                       		rts	
0007D4B0                            ; End of function sub_7272E
0007D4B0                            
0007D4B0                            ; ===========================================================================
0007D4B0                            
0007D4B0                            loc_7275A:				; XREF: sub_72722
0007D4B0 142D 0001                  		move.b	1(a5),d2
0007D4B4 0882 0002                  		bclr	#2,d2
0007D4B8 D002                       		add.b	d2,d0
0007D4BA                            
0007D4BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D4BA                            
0007D4BA                            
0007D4BA                            sub_72764:				; XREF: loc_71E6A; Sound_ChkValue; sub_7256A; sub_72764
0007D4BA 1439 00A0 4000             		move.b	($A04000).l,d2
0007D4C0 0802 0007                  		btst	#7,d2
0007D4C4 66F4                       		bne.s	sub_72764
0007D4C6 13C0 00A0 4002             		move.b	d0,($A04002).l
0007D4CC 4E71                       		nop	
0007D4CE 4E71                       		nop	
0007D4D0 4E71                       		nop	
0007D4D2                            
0007D4D2                            loc_7277C:
0007D4D2 1439 00A0 4000             		move.b	($A04000).l,d2
0007D4D8 0802 0007                  		btst	#7,d2
0007D4DC 66F4                       		bne.s	loc_7277C
0007D4DE                            
0007D4DE 13C1 00A0 4003             		move.b	d1,($A04003).l
0007D4E4 4E75                       		rts	
0007D4E6                            ; End of function sub_72764
0007D4E6                            
0007D4E6                            ; ===========================================================================
0007D4E6 025E 0284 02AB 02D3 02FE+  word_72790:	dc.w $25E, $284, $2AB, $2D3, $2FE, $32D, $35C, $38F, $3C5
0007D4F8 03FF 043C 047C 0A5E 0A84+  		dc.w $3FF, $43C, $47C, $A5E, $A84, $AAB, $AD3, $AFE, $B2D
0007D50A 0B5C 0B8F 0BC5 0BFF 0C3C+  		dc.w $B5C, $B8F, $BC5, $BFF, $C3C, $C7C, $125E,	$1284
0007D51A 12AB 12D3 12FE 132D 135C+  		dc.w $12AB, $12D3, $12FE, $132D, $135C,	$138F, $13C5, $13FF
0007D52A 143C 147C 1A5E 1A84 1AAB+  		dc.w $143C, $147C, $1A5E, $1A84, $1AAB,	$1AD3, $1AFE, $1B2D
0007D53A 1B5C 1B8F 1BC5 1BFF 1C3C+  		dc.w $1B5C, $1B8F, $1BC5, $1BFF, $1C3C,	$1C7C, $225E, $2284
0007D54A 22AB 22D3 22FE 232D 235C+  		dc.w $22AB, $22D3, $22FE, $232D, $235C,	$238F, $23C5, $23FF
0007D55A 243C 247C 2A5E 2A84 2AAB+  		dc.w $243C, $247C, $2A5E, $2A84, $2AAB,	$2AD3, $2AFE, $2B2D
0007D56A 2B5C 2B8F 2BC5 2BFF 2C3C+  		dc.w $2B5C, $2B8F, $2BC5, $2BFF, $2C3C,	$2C7C, $325E, $3284
0007D57A 32AB 32D3 32FE 332D 335C+  		dc.w $32AB, $32D3, $32FE, $332D, $335C,	$338F, $33C5, $33FF
0007D58A 343C 347C 3A5E 3A84 3AAB+  		dc.w $343C, $347C, $3A5E, $3A84, $3AAB,	$3AD3, $3AFE, $3B2D
0007D59A 3B5C 3B8F 3BC5 3BFF 3C3C+  		dc.w $3B5C, $3B8F, $3BC5, $3BFF, $3C3C,	$3C7C
0007D5A6                            
0007D5A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D5A6                            
0007D5A6                            
0007D5A6                            sub_72850:				; XREF: sub_71B4C
0007D5A6 532D 000E                  		subq.b	#1,$E(a5)
0007D5AA 6600                       		bne.s	loc_72866
0007D5AC 0895 0004                  		bclr	#4,(a5)
0007D5B0 4EBA 0000                  		jsr	sub_72878(pc)
0007D5B4 4EBA 0000                  		jsr	sub_728DC(pc)
0007D5B8 6000 0000                  		bra.w	loc_7292E
0007D5BC                            ; ===========================================================================
0007D5BC                            
0007D5BC                            loc_72866:
0007D5BC 4EBA F45A                  		jsr	sub_71D9E(pc)
0007D5C0 4EBA 0000                  		jsr	sub_72926(pc)
0007D5C4 4EBA F47A                  		jsr	sub_71DC6(pc)
0007D5C8 4EBA 0000                  		jsr	sub_728E2(pc)
0007D5CC 4E75                       		rts	
0007D5CE                            ; End of function sub_72850
0007D5CE                            
0007D5CE                            
0007D5CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D5CE                            
0007D5CE                            
0007D5CE                            sub_72878:				; XREF: sub_72850
0007D5CE 0895 0001                  		bclr	#1,(a5)
0007D5D2 286D 0004                  		movea.l	4(a5),a4
0007D5D6                            
0007D5D6                            loc_72880:
0007D5D6 7A00                       		moveq	#0,d5
0007D5D8 1A1C                       		move.b	(a4)+,d5
0007D5DA 0C05 00E0                  		cmpi.b	#$E0,d5
0007D5DE 6500                       		bcs.s	loc_72890
0007D5E0 4EBA 0000                  		jsr	sub_72A5A(pc)
0007D5E4 60F0                       		bra.s	loc_72880
0007D5E6                            ; ===========================================================================
0007D5E6                            
0007D5E6                            loc_72890:
0007D5E6 4A05                       		tst.b	d5
0007D5E8 6A00                       		bpl.s	loc_728A4
0007D5EA 4EBA 0000                  		jsr	sub_728AC(pc)
0007D5EE 1A1C                       		move.b	(a4)+,d5
0007D5F0 4A05                       		tst.b	d5
0007D5F2 6A00                       		bpl.s	loc_728A4
0007D5F4 534C                       		subq.w	#1,a4
0007D5F6 6000 F3E2                  		bra.w	sub_71D60
0007D5FA                            ; ===========================================================================
0007D5FA                            
0007D5FA                            loc_728A4:
0007D5FA 4EBA F3BE                  		jsr	sub_71D40(pc)
0007D5FE 6000 F3DA                  		bra.w	sub_71D60
0007D602                            ; End of function sub_72878
0007D602                            
0007D602                            
0007D602                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D602                            
0007D602                            
0007D602                            sub_728AC:				; XREF: sub_72878
0007D602 0405 0081                  		subi.b	#$81,d5
0007D606 6500                       		bcs.s	loc_728CA
0007D608 DA2D 0008                  		add.b	8(a5),d5
0007D60C 0245 007F                  		andi.w	#$7F,d5
0007D610 E34D                       		lsl.w	#1,d5
0007D612 41FA 0000                  		lea	word_729CE(pc),a0
0007D616 3B70 5000 0010             		move.w	(a0,d5.w),$10(a5)
0007D61C 6000 F3BC                  		bra.w	sub_71D60
0007D620                            ; ===========================================================================
0007D620                            
0007D620                            loc_728CA:
0007D620 08D5 0001                  		bset	#1,(a5)
0007D624 3B7C FFFF 0010             		move.w	#-1,$10(a5)
0007D62A 4EBA F3AE                  		jsr	sub_71D60(pc)
0007D62E 6000 0000                  		bra.w	sub_729A0
0007D632                            ; End of function sub_728AC
0007D632                            
0007D632                            
0007D632                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D632                            
0007D632                            
0007D632                            sub_728DC:				; XREF: sub_72850
0007D632 3C2D 0010                  		move.w	$10(a5),d6
0007D636 6B00                       		bmi.s	loc_72920
0007D638                            ; End of function sub_728DC
0007D638                            
0007D638                            
0007D638                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D638                            
0007D638                            
0007D638                            sub_728E2:				; XREF: sub_72850
0007D638 102D 001E                  		move.b	$1E(a5),d0
0007D63C 4880                       		ext.w	d0
0007D63E DC40                       		add.w	d0,d6
0007D640 0815 0002                  		btst	#2,(a5)
0007D644 6600                       		bne.s	locret_7291E
0007D646 0815 0001                  		btst	#1,(a5)
0007D64A 6600                       		bne.s	locret_7291E
0007D64C 102D 0001                  		move.b	1(a5),d0
0007D650 0C00 00E0                  		cmpi.b	#$E0,d0
0007D654 6600                       		bne.s	loc_72904
0007D656 103C 00C0                  		move.b	#$C0,d0
0007D65A                            
0007D65A                            loc_72904:
0007D65A 3206                       		move.w	d6,d1
0007D65C 0201 000F                  		andi.b	#$F,d1
0007D660 8001                       		or.b	d1,d0
0007D662 E84E                       		lsr.w	#4,d6
0007D664 0206 003F                  		andi.b	#$3F,d6
0007D668 13C0 00C0 0011             		move.b	d0,($C00011).l
0007D66E 13C6 00C0 0011             		move.b	d6,($C00011).l
0007D674                            
0007D674                            locret_7291E:
0007D674 4E75                       		rts	
0007D676                            ; End of function sub_728E2
0007D676                            
0007D676                            ; ===========================================================================
0007D676                            
0007D676                            loc_72920:				; XREF: sub_728DC
0007D676 08D5 0001                  		bset	#1,(a5)
0007D67A 4E75                       		rts	
0007D67C                            
0007D67C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D67C                            
0007D67C                            
0007D67C                            sub_72926:				; XREF: sub_72850
0007D67C 4A2D 000B                  		tst.b	$B(a5)
0007D680 6700 0000                  		beq.w	locret_7298A
0007D684                            
0007D684                            loc_7292E:				; XREF: sub_72850
0007D684 1C2D 0009                  		move.b	9(a5),d6
0007D688 7000                       		moveq	#0,d0
0007D68A 102D 000B                  		move.b	$B(a5),d0
0007D68E 6700                       		beq.s	sub_7296A
0007D690 2079 0007 C5EE             		movea.l	(Go_PSGIndex).l,a0
0007D696 5340                       		subq.w	#1,d0
0007D698 E548                       		lsl.w	#2,d0
0007D69A 2070 0000                  		movea.l	(a0,d0.w),a0
0007D69E 102D 000C                  		move.b	$C(a5),d0
0007D6A2 1030 0000                  		move.b	(a0,d0.w),d0
0007D6A6 522D 000C                  		addq.b	#1,$C(a5)
0007D6AA 0800 0007                  		btst	#7,d0
0007D6AE 6700                       		beq.s	loc_72960
0007D6B0 0C00 0080                  		cmpi.b	#$80,d0
0007D6B4 6700                       		beq.s	loc_7299A
0007D6B6                            
0007D6B6                            loc_72960:
0007D6B6 DC40                       		add.w	d0,d6
0007D6B8 0C06 0010                  		cmpi.b	#$10,d6
0007D6BC 6500                       		bcs.s	sub_7296A
0007D6BE 7C0F                       		moveq	#$F,d6
0007D6C0                            ; End of function sub_72926
0007D6C0                            
0007D6C0                            
0007D6C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D6C0                            
0007D6C0                            
0007D6C0                            sub_7296A:				; XREF: sub_72504; sub_7267C; sub_72926
0007D6C0 0815 0001                  		btst	#1,(a5)
0007D6C4 6600                       		bne.s	locret_7298A
0007D6C6 0815 0002                  		btst	#2,(a5)
0007D6CA 6600                       		bne.s	locret_7298A
0007D6CC 0815 0004                  		btst	#4,(a5)
0007D6D0 6600                       		bne.s	loc_7298C
0007D6D2                            
0007D6D2                            loc_7297C:
0007D6D2 8C2D 0001                  		or.b	1(a5),d6
0007D6D6 0606 0010                  		addi.b	#$10,d6
0007D6DA 13C6 00C0 0011             		move.b	d6,($C00011).l
0007D6E0                            
0007D6E0                            locret_7298A:
0007D6E0 4E75                       		rts	
0007D6E2                            ; ===========================================================================
0007D6E2                            
0007D6E2                            loc_7298C:
0007D6E2 4A2D 0013                  		tst.b	$13(a5)
0007D6E6 67EA                       		beq.s	loc_7297C
0007D6E8 4A2D 0012                  		tst.b	$12(a5)
0007D6EC 66E4                       		bne.s	loc_7297C
0007D6EE 4E75                       		rts	
0007D6F0                            ; End of function sub_7296A
0007D6F0                            
0007D6F0                            ; ===========================================================================
0007D6F0                            
0007D6F0                            loc_7299A:				; XREF: sub_72926
0007D6F0 532D 000C                  		subq.b	#1,$C(a5)
0007D6F4 4E75                       		rts	
0007D6F6                            
0007D6F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D6F6                            
0007D6F6                            
0007D6F6                            sub_729A0:				; XREF: sub_71D9E; Sound_ChkValue; Snd_FadeOut1; sub_728AC
0007D6F6 0815 0002                  		btst	#2,(a5)
0007D6FA 6600                       		bne.s	locret_729B4
0007D6FC                            
0007D6FC                            loc_729A6:				; XREF: Snd_FadeOut2
0007D6FC 102D 0001                  		move.b	1(a5),d0
0007D700 0000 001F                  		ori.b	#$1F,d0
0007D704 13C0 00C0 0011             		move.b	d0,($C00011).l
0007D70A                            
0007D70A                            locret_729B4:
0007D70A 4E75                       		rts	
0007D70C                            ; End of function sub_729A0
0007D70C                            
0007D70C                            
0007D70C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D70C                            
0007D70C                            
0007D70C                            sub_729B6:				; XREF: loc_71E7C
0007D70C 41F9 00C0 0011             		lea	($C00011).l,a0
0007D712 10BC 009F                  		move.b	#$9F,(a0)
0007D716 10BC 00BF                  		move.b	#$BF,(a0)
0007D71A 10BC 00DF                  		move.b	#$DF,(a0)
0007D71E 10BC 00FF                  		move.b	#$FF,(a0)
0007D722 4E75                       		rts	
0007D724                            ; End of function sub_729B6
0007D724                            
0007D724                            ; ===========================================================================
0007D724 0356 0326 02F9 02CE 02A5+  word_729CE:	dc.w $356, $326, $2F9, $2CE, $2A5, $280, $25C, $23A, $21A
0007D736 01FB 01DF 01C4 01AB 0193+  		dc.w $1FB, $1DF, $1C4, $1AB, $193, $17D, $167, $153, $140
0007D748 012E 011D 010D 00FE 00EF+  		dc.w $12E, $11D, $10D, $FE, $EF, $E2, $D6, $C9,	$BE, $B4
0007D75C 00A9 00A0 0097 008F 0087+  		dc.w $A9, $A0, $97, $8F, $87, $7F, $78,	$71, $6B, $65
0007D770 005F 005A 0055 0050 004B+  		dc.w $5F, $5A, $55, $50, $4B, $47, $43,	$40, $3C, $39
0007D784 0036 0033 0030 002D 002B+  		dc.w $36, $33, $30, $2D, $2B, $28, $26,	$24, $22, $20
0007D798 001F 001D 001B 001A 0018+  		dc.w $1F, $1D, $1B, $1A, $18, $17, $16,	$15, $13, $12
0007D7AC 0011 0000                  		dc.w $11, 0
0007D7B0                            
0007D7B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D7B0                            
0007D7B0                            
0007D7B0                            sub_72A5A:				; XREF: sub_71C4E; sub_71CEC; sub_72878
0007D7B0 0445 00E0                  		subi.w	#$E0,d5
0007D7B4 E54D                       		lsl.w	#2,d5
0007D7B6 4EFB 5000                  		jmp	loc_72A64(pc,d5.w)
0007D7BA                            ; End of function sub_72A5A
0007D7BA                            
0007D7BA                            ; ===========================================================================
0007D7BA                            
0007D7BA                            loc_72A64:
0007D7BA 6000 0000                  		bra.w	loc_72ACC
0007D7BE                            ; ===========================================================================
0007D7BE 6000 0000                  		bra.w	loc_72AEC
0007D7C2                            ; ===========================================================================
0007D7C2 6000 0000                  		bra.w	loc_72AF2
0007D7C6                            ; ===========================================================================
0007D7C6 6000 0000                  		bra.w	loc_72AF8
0007D7CA                            ; ===========================================================================
0007D7CA 6000 0000                  		bra.w	loc_72B14
0007D7CE                            ; ===========================================================================
0007D7CE 6000 0000                  		bra.w	loc_72B9E
0007D7D2                            ; ===========================================================================
0007D7D2 6000 0000                  		bra.w	loc_72BA4
0007D7D6                            ; ===========================================================================
0007D7D6 6000 0000                  		bra.w	loc_72BAE
0007D7DA                            ; ===========================================================================
0007D7DA 6000 0000                  		bra.w	loc_72BB4
0007D7DE                            ; ===========================================================================
0007D7DE 6000 0000                  		bra.w	loc_72BBE
0007D7E2                            ; ===========================================================================
0007D7E2 6000 0000                  		bra.w	loc_72BC6
0007D7E6                            ; ===========================================================================
0007D7E6 6000 0000                  		bra.w	loc_72BD0
0007D7EA                            ; ===========================================================================
0007D7EA 6000 0000                  		bra.w	loc_72BE6
0007D7EE                            ; ===========================================================================
0007D7EE 6000 0000                  		bra.w	loc_72BEE
0007D7F2                            ; ===========================================================================
0007D7F2 6000 0000                  		bra.w	loc_72BF4
0007D7F6                            ; ===========================================================================
0007D7F6 6000 0000                  		bra.w	loc_72C26
0007D7FA                            ; ===========================================================================
0007D7FA 6000 0000                  		bra.w	loc_72D30
0007D7FE                            ; ===========================================================================
0007D7FE 6000 0000                  		bra.w	loc_72D52
0007D802                            ; ===========================================================================
0007D802 6000 0000                  		bra.w	loc_72D58
0007D806                            ; ===========================================================================
0007D806 6000 0000                  		bra.w	loc_72E06
0007D80A                            ; ===========================================================================
0007D80A 6000 0000                  		bra.w	loc_72E20
0007D80E                            ; ===========================================================================
0007D80E 6000 0000                  		bra.w	loc_72E26
0007D812                            ; ===========================================================================
0007D812 6000 0000                  		bra.w	loc_72E2C
0007D816                            ; ===========================================================================
0007D816 6000 0000                  		bra.w	loc_72E38
0007D81A                            ; ===========================================================================
0007D81A 6000 0000                  		bra.w	loc_72E52
0007D81E                            ; ===========================================================================
0007D81E 6000 0000                  		bra.w	loc_72E64
0007D822                            ; ===========================================================================
0007D822                            
0007D822                            loc_72ACC:				; XREF: loc_72A64
0007D822 121C                       		move.b	(a4)+,d1
0007D824 4A2D 0001                  		tst.b	1(a5)
0007D828 6B00                       		bmi.s	locret_72AEA
0007D82A 102D 000A                  		move.b	$A(a5),d0
0007D82E 0200 0037                  		andi.b	#$37,d0
0007D832 8200                       		or.b	d0,d1
0007D834 1B41 000A                  		move.b	d1,$A(a5)
0007D838 103C 00B4                  		move.b	#$B4,d0
0007D83C 6000 FC2E                  		bra.w	loc_72716
0007D840                            ; ===========================================================================
0007D840                            
0007D840                            locret_72AEA:
0007D840 4E75                       		rts	
0007D842                            ; ===========================================================================
0007D842                            
0007D842                            loc_72AEC:				; XREF: loc_72A64
0007D842 1B5C 001E                  		move.b	(a4)+,$1E(a5)
0007D846 4E75                       		rts	
0007D848                            ; ===========================================================================
0007D848                            
0007D848                            loc_72AF2:				; XREF: loc_72A64
0007D848 1D5C 0007                  		move.b	(a4)+,7(a6)
0007D84C 4E75                       		rts	
0007D84E                            ; ===========================================================================
0007D84E                            
0007D84E                            loc_72AF8:				; XREF: loc_72A64
0007D84E 7000                       		moveq	#0,d0
0007D850 102D 000D                  		move.b	$D(a5),d0
0007D854 2875 0000                  		movea.l	(a5,d0.w),a4
0007D858 2BBC 0000 0000 0000        		move.l	#0,(a5,d0.w)
0007D860 544C                       		addq.w	#2,a4
0007D862 5800                       		addq.b	#4,d0
0007D864 1B40 000D                  		move.b	d0,$D(a5)
0007D868 4E75                       		rts	
0007D86A                            ; ===========================================================================
0007D86A                            
0007D86A                            loc_72B14:				; XREF: loc_72A64
0007D86A 204E                       		movea.l	a6,a0
0007D86C 43EE 03A0                  		lea	$3A0(a6),a1
0007D870 303C 0087                  		move.w	#$87,d0
0007D874                            
0007D874                            loc_72B1E:
0007D874 20D9                       		move.l	(a1)+,(a0)+
0007D876 51C8 FFFC                  		dbf	d0,loc_72B1E
0007D87A                            
0007D87A 08EE 0002 0040             		bset	#2,$40(a6)
0007D880 264D                       		movea.l	a5,a3
0007D882 1C3C 0028                  		move.b	#$28,d6
0007D886 9C2E 0026                  		sub.b	$26(a6),d6
0007D88A 7E05                       		moveq	#5,d7
0007D88C 4BEE 0070                  		lea	$70(a6),a5
0007D890                            
0007D890                            loc_72B3A:
0007D890 0815 0007                  		btst	#7,(a5)
0007D894 6700                       		beq.s	loc_72B5C
0007D896 08D5 0001                  		bset	#1,(a5)
0007D89A DD2D 0009                  		add.b	d6,9(a5)
0007D89E 0815 0002                  		btst	#2,(a5)
0007D8A2 6600                       		bne.s	loc_72B5C
0007D8A4 7000                       		moveq	#0,d0
0007D8A6 102D 000B                  		move.b	$B(a5),d0
0007D8AA 226E 0018                  		movea.l	$18(a6),a1
0007D8AE 4EBA 0000                  		jsr	sub_72C4E(pc)
0007D8B2                            
0007D8B2                            loc_72B5C:
0007D8B2 DAFC 0030                  		adda.w	#$30,a5
0007D8B6 51CF FFD8                  		dbf	d7,loc_72B3A
0007D8BA                            
0007D8BA 7E02                       		moveq	#2,d7
0007D8BC                            
0007D8BC                            loc_72B66:
0007D8BC 0815 0007                  		btst	#7,(a5)
0007D8C0 6700                       		beq.s	loc_72B78
0007D8C2 08D5 0001                  		bset	#1,(a5)
0007D8C6 4EBA FE2E                  		jsr	sub_729A0(pc)
0007D8CA DD2D 0009                  		add.b	d6,9(a5)
0007D8CE                            
0007D8CE                            loc_72B78:
0007D8CE DAFC 0030                  		adda.w	#$30,a5
0007D8D2 51CF FFE8                  		dbf	d7,loc_72B66
0007D8D6 2A4B                       		movea.l	a3,a5
0007D8D8 1D7C 0080 0024             		move.b	#$80,$24(a6)
0007D8DE 1D7C 0028 0026             		move.b	#$28,$26(a6)
0007D8E4 422E 0027                  		clr.b	$27(a6)
0007D8E8 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
0007D8F0 504F                       		addq.w	#8,sp
0007D8F2 4E75                       		rts	
0007D8F4                            ; ===========================================================================
0007D8F4                            
0007D8F4                            loc_72B9E:				; XREF: loc_72A64
0007D8F4 1B5C 0002                  		move.b	(a4)+,2(a5)
0007D8F8 4E75                       		rts	
0007D8FA                            ; ===========================================================================
0007D8FA                            
0007D8FA                            loc_72BA4:				; XREF: loc_72A64
0007D8FA 101C                       		move.b	(a4)+,d0
0007D8FC D12D 0009                  		add.b	d0,9(a5)
0007D900 6000 0000                  		bra.w	sub_72CB4
0007D904                            ; ===========================================================================
0007D904                            
0007D904                            loc_72BAE:				; XREF: loc_72A64
0007D904 08D5 0004                  		bset	#4,(a5)
0007D908 4E75                       		rts	
0007D90A                            ; ===========================================================================
0007D90A                            
0007D90A                            loc_72BB4:				; XREF: loc_72A64
0007D90A 1B54 0012                  		move.b	(a4),$12(a5)
0007D90E 1B5C 0013                  		move.b	(a4)+,$13(a5)
0007D912 4E75                       		rts	
0007D914                            ; ===========================================================================
0007D914                            
0007D914                            loc_72BBE:				; XREF: loc_72A64
0007D914 101C                       		move.b	(a4)+,d0
0007D916 D12D 0008                  		add.b	d0,8(a5)
0007D91A 4E75                       		rts	
0007D91C                            ; ===========================================================================
0007D91C                            
0007D91C                            loc_72BC6:				; XREF: loc_72A64
0007D91C 1D54 0002                  		move.b	(a4),2(a6)
0007D920 1D5C 0001                  		move.b	(a4)+,1(a6)
0007D924 4E75                       		rts	
0007D926                            ; ===========================================================================
0007D926                            
0007D926                            loc_72BD0:				; XREF: loc_72A64
0007D926 41EE 0040                  		lea	$40(a6),a0
0007D92A 101C                       		move.b	(a4)+,d0
0007D92C 7230                       		moveq	#$30,d1
0007D92E 7409                       		moveq	#9,d2
0007D930                            
0007D930                            loc_72BDA:
0007D930 1140 0002                  		move.b	d0,2(a0)
0007D934 D0C1                       		adda.w	d1,a0
0007D936 51CA FFF8                  		dbf	d2,loc_72BDA
0007D93A                            
0007D93A 4E75                       		rts	
0007D93C                            ; ===========================================================================
0007D93C                            
0007D93C                            loc_72BE6:				; XREF: loc_72A64
0007D93C 101C                       		move.b	(a4)+,d0
0007D93E D12D 0009                  		add.b	d0,9(a5)
0007D942 4E75                       		rts	
0007D944                            ; ===========================================================================
0007D944                            
0007D944                            loc_72BEE:				; XREF: loc_72A64
0007D944 422E 002C                  		clr.b	$2C(a6)
0007D948 4E75                       		rts	
0007D94A                            ; ===========================================================================
0007D94A                            
0007D94A                            loc_72BF4:				; XREF: loc_72A64
0007D94A 0895 0007                  		bclr	#7,(a5)
0007D94E 0895 0004                  		bclr	#4,(a5)
0007D952 4EBA FB00                  		jsr	sub_726FE(pc)
0007D956 4A2E 0250                  		tst.b	$250(a6)
0007D95A 6B00                       		bmi.s	loc_72C22
0007D95C 264D                       		movea.l	a5,a3
0007D95E 4BEE 0100                  		lea	$100(a6),a5
0007D962 226E 0018                  		movea.l	$18(a6),a1
0007D966 0895 0002                  		bclr	#2,(a5)
0007D96A 08D5 0001                  		bset	#1,(a5)
0007D96E 102D 000B                  		move.b	$B(a5),d0
0007D972 4EBA 0000                  		jsr	sub_72C4E(pc)
0007D976 2A4B                       		movea.l	a3,a5
0007D978                            
0007D978                            loc_72C22:
0007D978 504F                       		addq.w	#8,sp
0007D97A 4E75                       		rts	
0007D97C                            ; ===========================================================================
0007D97C                            
0007D97C                            loc_72C26:				; XREF: loc_72A64
0007D97C 7000                       		moveq	#0,d0
0007D97E 101C                       		move.b	(a4)+,d0
0007D980 1B40 000B                  		move.b	d0,$B(a5)
0007D984 0815 0002                  		btst	#2,(a5)
0007D988 6600 0000                  		bne.w	locret_72CAA
0007D98C 226E 0018                  		movea.l	$18(a6),a1
0007D990 4A2E 000E                  		tst.b	$E(a6)
0007D994 6700                       		beq.s	sub_72C4E
0007D996 226D 0020                  		movea.l	$20(a5),a1
0007D99A 4A2E 000E                  		tst.b	$E(a6)
0007D99E 6B00                       		bmi.s	sub_72C4E
0007D9A0 226E 0020                  		movea.l	$20(a6),a1
0007D9A4                            
0007D9A4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D9A4                            
0007D9A4                            
0007D9A4                            sub_72C4E:				; XREF: Snd_FadeOut1; et al
0007D9A4 5340                       		subq.w	#1,d0
0007D9A6 6B00                       		bmi.s	loc_72C5C
0007D9A8 323C 0019                  		move.w	#$19,d1
0007D9AC                            
0007D9AC                            loc_72C56:
0007D9AC D2C1                       		adda.w	d1,a1
0007D9AE 51C8 FFFC                  		dbf	d0,loc_72C56
0007D9B2                            
0007D9B2                            loc_72C5C:
0007D9B2 1219                       		move.b	(a1)+,d1
0007D9B4 1B41 001F                  		move.b	d1,$1F(a5)
0007D9B8 1801                       		move.b	d1,d4
0007D9BA 103C 00B0                  		move.b	#$B0,d0
0007D9BE 4EBA FAB8                  		jsr	sub_72722(pc)
0007D9C2 45FA 0000                  		lea	byte_72D18(pc),a2
0007D9C6 7613                       		moveq	#$13,d3
0007D9C8                            
0007D9C8                            loc_72C72:
0007D9C8 101A                       		move.b	(a2)+,d0
0007D9CA 1219                       		move.b	(a1)+,d1
0007D9CC 4EBA FAAA                  		jsr	sub_72722(pc)
0007D9D0 51CB FFF6                  		dbf	d3,loc_72C72
0007D9D4 7A03                       		moveq	#3,d5
0007D9D6 0244 0007                  		andi.w	#7,d4
0007D9DA 183B 4000                  		move.b	byte_72CAC(pc,d4.w),d4
0007D9DE 162D 0009                  		move.b	9(a5),d3
0007D9E2                            
0007D9E2                            loc_72C8C:
0007D9E2 101A                       		move.b	(a2)+,d0
0007D9E4 1219                       		move.b	(a1)+,d1
0007D9E6 E20C                       		lsr.b	#1,d4
0007D9E8 6400                       		bcc.s	loc_72C96
0007D9EA D203                       		add.b	d3,d1
0007D9EC                            
0007D9EC                            loc_72C96:
0007D9EC 4EBA FA8A                  		jsr	sub_72722(pc)
0007D9F0 51CD FFF0                  		dbf	d5,loc_72C8C
0007D9F4 103C 00B4                  		move.b	#$B4,d0
0007D9F8 122D 000A                  		move.b	$A(a5),d1
0007D9FC 4EBA FA7A                  		jsr	sub_72722(pc)
0007DA00                            
0007DA00                            locret_72CAA:
0007DA00 4E75                       		rts	
0007DA02                            ; End of function sub_72C4E
0007DA02                            
0007DA02                            ; ===========================================================================
0007DA02 0808 0808 0A0E 0E0F        byte_72CAC:	dc.b 8,	8, 8, 8, $A, $E, $E, $F
0007DA0A                            
0007DA0A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007DA0A                            
0007DA0A                            
0007DA0A                            sub_72CB4:				; XREF: sub_72504; sub_7267C; loc_72BA4
0007DA0A 0815 0002                  		btst	#2,(a5)
0007DA0E 6600                       		bne.s	locret_72D16
0007DA10 7000                       		moveq	#0,d0
0007DA12 102D 000B                  		move.b	$B(a5),d0
0007DA16 226E 0018                  		movea.l	$18(a6),a1
0007DA1A 4A2E 000E                  		tst.b	$E(a6)
0007DA1E 6700                       		beq.s	loc_72CD8
0007DA20 226E 0020                  		movea.l	$20(a6),a1
0007DA24 4A2E 000E                  		tst.b	$E(a6)
0007DA28 6B00                       		bmi.s	loc_72CD8
0007DA2A 226E 0020                  		movea.l	$20(a6),a1
0007DA2E                            
0007DA2E                            loc_72CD8:
0007DA2E 5340                       		subq.w	#1,d0
0007DA30 6B00                       		bmi.s	loc_72CE6
0007DA32 323C 0019                  		move.w	#$19,d1
0007DA36                            
0007DA36                            loc_72CE0:
0007DA36 D2C1                       		adda.w	d1,a1
0007DA38 51C8 FFFC                  		dbf	d0,loc_72CE0
0007DA3C                            
0007DA3C                            loc_72CE6:
0007DA3C D2FC 0015                  		adda.w	#$15,a1
0007DA40 45FA 0000                  		lea	byte_72D2C(pc),a2
0007DA44 102D 001F                  		move.b	$1F(a5),d0
0007DA48 0240 0007                  		andi.w	#7,d0
0007DA4C 183B 00B4                  		move.b	byte_72CAC(pc,d0.w),d4
0007DA50 162D 0009                  		move.b	9(a5),d3
0007DA54 6B00                       		bmi.s	locret_72D16
0007DA56 7A03                       		moveq	#3,d5
0007DA58                            
0007DA58                            loc_72D02:
0007DA58 101A                       		move.b	(a2)+,d0
0007DA5A 1219                       		move.b	(a1)+,d1
0007DA5C E20C                       		lsr.b	#1,d4
0007DA5E 6400                       		bcc.s	loc_72D12
0007DA60 D203                       		add.b	d3,d1
0007DA62 6500                       		bcs.s	loc_72D12
0007DA64 4EBA FA12                  		jsr	sub_72722(pc)
0007DA68                            
0007DA68                            loc_72D12:
0007DA68 51CD FFEE                  		dbf	d5,loc_72D02
0007DA6C                            
0007DA6C                            locret_72D16:
0007DA6C 4E75                       		rts	
0007DA6E                            ; End of function sub_72CB4
0007DA6E                            
0007DA6E                            ; ===========================================================================
0007DA6E 3038 343C 5058 545C 6068   byte_72D18:	dc.b $30, $38, $34, $3C, $50, $58, $54,	$5C, $60, $68
0007DA78 646C 7078 747C 8088 848C   		dc.b $64, $6C, $70, $78, $74, $7C, $80,	$88, $84, $8C
0007DA82 4048 444C                  byte_72D2C:	dc.b $40, $48, $44, $4C
0007DA86                            ; ===========================================================================
0007DA86                            
0007DA86                            loc_72D30:				; XREF: loc_72A64
0007DA86 08D5 0003                  		bset	#3,(a5)
0007DA8A 2B4C 0014                  		move.l	a4,$14(a5)
0007DA8E 1B5C 0018                  		move.b	(a4)+,$18(a5)
0007DA92 1B5C 0019                  		move.b	(a4)+,$19(a5)
0007DA96 1B5C 001A                  		move.b	(a4)+,$1A(a5)
0007DA9A 101C                       		move.b	(a4)+,d0
0007DA9C E208                       		lsr.b	#1,d0
0007DA9E 1B40 001B                  		move.b	d0,$1B(a5)
0007DAA2 426D 001C                  		clr.w	$1C(a5)
0007DAA6 4E75                       		rts	
0007DAA8                            ; ===========================================================================
0007DAA8                            
0007DAA8                            loc_72D52:				; XREF: loc_72A64
0007DAA8 08D5 0003                  		bset	#3,(a5)
0007DAAC 4E75                       		rts	
0007DAAE                            ; ===========================================================================
0007DAAE                            
0007DAAE                            loc_72D58:				; XREF: loc_72A64
0007DAAE 0895 0007                  		bclr	#7,(a5)
0007DAB2 0895 0004                  		bclr	#4,(a5)
0007DAB6 4A2D 0001                  		tst.b	1(a5)
0007DABA 6B00                       		bmi.s	loc_72D74
0007DABC 4A2E 0008                  		tst.b	8(a6)
0007DAC0 6B00 0000                  		bmi.w	loc_72E02
0007DAC4 4EBA F98E                  		jsr	sub_726FE(pc)
0007DAC8 6000                       		bra.s	loc_72D78
0007DACA                            ; ===========================================================================
0007DACA                            
0007DACA                            loc_72D74:
0007DACA 4EBA FC2A                  		jsr	sub_729A0(pc)
0007DACE                            
0007DACE                            loc_72D78:
0007DACE 4A2E 000E                  		tst.b	$E(a6)
0007DAD2 6A00 0000                  		bpl.w	loc_72E02
0007DAD6 4216                       		clr.b	0(a6)
0007DAD8 7000                       		moveq	#0,d0
0007DADA 102D 0001                  		move.b	1(a5),d0
0007DADE 6B00                       		bmi.s	loc_72DCC
0007DAE0 41FA F546                  		lea	dword_722CC(pc),a0
0007DAE4 264D                       		movea.l	a5,a3
0007DAE6 0C00 0004                  		cmpi.b	#4,d0
0007DAEA 6600                       		bne.s	loc_72DA8
0007DAEC 4A2E 0340                  		tst.b	$340(a6)
0007DAF0 6A00                       		bpl.s	loc_72DA8
0007DAF2 4BEE 0340                  		lea	$340(a6),a5
0007DAF6 226E 0020                  		movea.l	$20(a6),a1
0007DAFA 6000                       		bra.s	loc_72DB8
0007DAFC                            ; ===========================================================================
0007DAFC                            
0007DAFC                            loc_72DA8:
0007DAFC 5500                       		subq.b	#2,d0
0007DAFE E508                       		lsl.b	#2,d0
0007DB00 2A70 0000                  		movea.l	(a0,d0.w),a5
0007DB04 4A15                       		tst.b	(a5)
0007DB06 6A00                       		bpl.s	loc_72DC8
0007DB08 226E 0018                  		movea.l	$18(a6),a1
0007DB0C                            
0007DB0C                            loc_72DB8:
0007DB0C 0895 0002                  		bclr	#2,(a5)
0007DB10 08D5 0001                  		bset	#1,(a5)
0007DB14 102D 000B                  		move.b	$B(a5),d0
0007DB18 4EBA FE8A                  		jsr	sub_72C4E(pc)
0007DB1C                            
0007DB1C                            loc_72DC8:
0007DB1C 2A4B                       		movea.l	a3,a5
0007DB1E 6000                       		bra.s	loc_72E02
0007DB20                            ; ===========================================================================
0007DB20                            
0007DB20                            loc_72DCC:
0007DB20 41EE 0370                  		lea	$370(a6),a0
0007DB24 4A10                       		tst.b	(a0)
0007DB26 6A00                       		bpl.s	loc_72DE0
0007DB28 0C00 00E0                  		cmpi.b	#$E0,d0
0007DB2C 6700                       		beq.s	loc_72DEA
0007DB2E 0C00 00C0                  		cmpi.b	#$C0,d0
0007DB32 6700                       		beq.s	loc_72DEA
0007DB34                            
0007DB34                            loc_72DE0:
0007DB34 41FA F4F2                  		lea	dword_722CC(pc),a0
0007DB38 E608                       		lsr.b	#3,d0
0007DB3A 2070 0000                  		movea.l	(a0,d0.w),a0
0007DB3E                            
0007DB3E                            loc_72DEA:
0007DB3E 0890 0002                  		bclr	#2,(a0)
0007DB42 08D0 0001                  		bset	#1,(a0)
0007DB46 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
0007DB4C 6600                       		bne.s	loc_72E02
0007DB4E 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
0007DB56                            
0007DB56                            loc_72E02:
0007DB56 504F                       		addq.w	#8,sp
0007DB58 4E75                       		rts	
0007DB5A                            ; ===========================================================================
0007DB5A                            
0007DB5A                            loc_72E06:				; XREF: loc_72A64
0007DB5A 1B7C 00E0 0001             		move.b	#$E0,1(a5)
0007DB60 1B5C 001F                  		move.b	(a4)+,$1F(a5)
0007DB64 0815 0002                  		btst	#2,(a5)
0007DB68 6600                       		bne.s	locret_72E1E
0007DB6A 13EC FFFF 00C0 0011        		move.b	-1(a4),($C00011).l
0007DB72                            
0007DB72                            locret_72E1E:
0007DB72 4E75                       		rts	
0007DB74                            ; ===========================================================================
0007DB74                            
0007DB74                            loc_72E20:				; XREF: loc_72A64
0007DB74 0895 0003                  		bclr	#3,(a5)
0007DB78 4E75                       		rts	
0007DB7A                            ; ===========================================================================
0007DB7A                            
0007DB7A                            loc_72E26:				; XREF: loc_72A64
0007DB7A 1B5C 000B                  		move.b	(a4)+,$B(a5)
0007DB7E 4E75                       		rts	
0007DB80                            ; ===========================================================================
0007DB80                            
0007DB80                            loc_72E2C:				; XREF: loc_72A64
0007DB80 101C                       		move.b	(a4)+,d0
0007DB82 E148                       		lsl.w	#8,d0
0007DB84 101C                       		move.b	(a4)+,d0
0007DB86 D8C0                       		adda.w	d0,a4
0007DB88 534C                       		subq.w	#1,a4
0007DB8A 4E75                       		rts	
0007DB8C                            ; ===========================================================================
0007DB8C                            
0007DB8C                            loc_72E38:				; XREF: loc_72A64
0007DB8C 7000                       		moveq	#0,d0
0007DB8E 101C                       		move.b	(a4)+,d0
0007DB90 121C                       		move.b	(a4)+,d1
0007DB92 4A35 0024                  		tst.b	$24(a5,d0.w)
0007DB96 6600                       		bne.s	loc_72E48
0007DB98 1B81 0024                  		move.b	d1,$24(a5,d0.w)
0007DB9C                            
0007DB9C                            loc_72E48:
0007DB9C 5335 0024                  		subq.b	#1,$24(a5,d0.w)
0007DBA0 66DE                       		bne.s	loc_72E2C
0007DBA2 544C                       		addq.w	#2,a4
0007DBA4 4E75                       		rts	
0007DBA6                            ; ===========================================================================
0007DBA6                            
0007DBA6                            loc_72E52:				; XREF: loc_72A64
0007DBA6 7000                       		moveq	#0,d0
0007DBA8 102D 000D                  		move.b	$D(a5),d0
0007DBAC 5900                       		subq.b	#4,d0
0007DBAE 2B8C 0000                  		move.l	a4,(a5,d0.w)
0007DBB2 1B40 000D                  		move.b	d0,$D(a5)
0007DBB6 60C8                       		bra.s	loc_72E2C
0007DBB8                            ; ===========================================================================
0007DBB8                            
0007DBB8                            loc_72E64:				; XREF: loc_72A64
0007DBB8 103C 0088                  		move.b	#$88,d0
0007DBBC 123C 000F                  		move.b	#$F,d1
0007DBC0 4EBA F8C2                  		jsr	sub_7272E(pc)
0007DBC4 103C 008C                  		move.b	#$8C,d0
0007DBC8 123C 000F                  		move.b	#$F,d1
0007DBCC 6000 F8B6                  		bra.w	sub_7272E
0007DBD0                            ; ===========================================================================
0007DBD0                            Kos_Z80:	incbin	sound\z80_1.bin
0007DC80 0000                       		dc.w ((SegaPCM&$FF)<<8)+((SegaPCM&$FF00)>>8)
0007DC82 21                         		dc.b $21
0007DC83 0000                       		dc.w (((EndOfRom-SegaPCM)&$FF)<<8)+(((EndOfRom-SegaPCM)&$FF00)>>8)
0007DC85                            		incbin	sound\z80_2.bin
0007F330                            		even
0007F330                            Music81:	incbin	sound\jahl.bin ; 	Green Hill Act 1
00085B30                            		even
00085B30                            Music82:	incbin	sound\music82.bin ; Labyrinth Act 1
0008F3CE                            		even
0008F3CE                            Music83:	incbin	sound\music83.bin ; Marble Act 1
00092FEE 00                         		even
00092FEE                            Music84:	include	sound\music84.asm ; Star Light Act 1
00092FEE                            music84_Header:
00092FEE =00000001                  smpsHeaderStartSong = 1
00092FEE 0000                       	smpsHeaderVoice     music84_Voices
00092FF0 0603                       	smpsHeaderChan      $06, $03
00092FF2 0205                       	smpsHeaderTempo     $02, $05
00092FF4                            
00092FF8 0000 0000                  	smpsHeaderFM        music84_FM1,	$00, $00
00092FFC 0000 0000                  	smpsHeaderFM        music84_FM2,	$00, $00
00093000 0000 0000                  	smpsHeaderFM        music84_FM3,	$00, $00
00093004 0000 0000                  	smpsHeaderFM        music84_FM4,	$00, $00
00093008 0000 0000                  	smpsHeaderFM        music84_FM5,	$00, $00
0009300C 0000 0000 0000             	smpsHeaderPSG       music84_PSG1,	$00, $00, $00, $00
00093012 0000 0000 0000             	smpsHeaderPSG       music84_PSG2,	$00, $00, $00, $00
00093018 0000 0000 0000             	smpsHeaderPSG       music84_PSG3,	$00, $00, $00, $00
0009301E                            
0009301E                            ; FM1 Data
0009301E                            music84_FM1:
0009301E E0C0                       	smpsPan             panCenter, $00
00093022 E107                       	smpsAlterNote       $07
00093024 9B03 8007                  	dc.b	nD2, $03, nRst, $07
00093028 E106                       	smpsAlterNote       $06
0009302A 9903 800B                  	dc.b	nC2, $03, nRst, $0B
0009302E E10B                       	smpsAlterNote       $0B
00093030 9606 800B A201             	dc.b	nA1, $06, nRst, $0B, nA2, $01
00093036 E10C                       	smpsAlterNote       $0C
00093038 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
0009303B E10B                       	smpsAlterNote       $0B
0009303D E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00093040 E109                       	smpsAlterNote       $09
00093042 E7A0 029E 01               	dc.b	smpsNoAttack, nG2, $02, nF2, $01
00093047 E108                       	smpsAlterNote       $08
00093049 8001                       	dc.b	nRst, $01
0009304B E10B                       	smpsAlterNote       $0B
0009304D 9603 A203 8001             	dc.b	nA1, $03, nA2, $03, nRst, $01
00093053 E107                       	smpsAlterNote       $07
00093055 9B03                       	dc.b	nD2, $03
00093057                            
00093057                            music84_Jump04:
00093057 E107                       	smpsAlterNote       $07
00093059 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0009305D E10B                       	smpsAlterNote       $0B
0009305F A202 8001                  	dc.b	nA2, $02, nRst, $01
00093063 E107                       	smpsAlterNote       $07
00093065 9B03                       	dc.b	nD2, $03
00093067 E11A                       	smpsAlterNote       $1A
00093069 A301                       	dc.b	nBb2, $01
0009306B E1F2                       	smpsAlterNote       $F2
0009306D E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00093070 E1FF                       	smpsAlterNote       $FF
00093072 E701                       	dc.b	smpsNoAttack, $01
00093074 E111                       	smpsAlterNote       $11
00093076 E701                       	dc.b	smpsNoAttack, $01
00093078 E106                       	smpsAlterNote       $06
0009307A E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
0009307D E107                       	smpsAlterNote       $07
0009307F 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00093083 E108                       	smpsAlterNote       $08
00093085 9C06 8001 9C02 8001        	dc.b	nEb2, $06, nRst, $01, nEb2, $02, nRst, $01
0009308D E109                       	smpsAlterNote       $09
0009308F A003                       	dc.b	nG2, $03
00093091 E10C                       	smpsAlterNote       $0C
00093093 A303 8001                  	dc.b	nBb2, $03, nRst, $01
00093097 E1FD                       	smpsAlterNote       $FD
00093099 A401                       	dc.b	nB2, $01
0009309B E109                       	smpsAlterNote       $09
0009309D E701                       	dc.b	smpsNoAttack, $01
0009309F E106                       	smpsAlterNote       $06
000930A1 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000930A4 E109                       	smpsAlterNote       $09
000930A6 A007                       	dc.b	nG2, $07
000930A8 E108                       	smpsAlterNote       $08
000930AA 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
000930AE E107                       	smpsAlterNote       $07
000930B0 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
000930B6 E10B                       	smpsAlterNote       $0B
000930B8 A203 8001                  	dc.b	nA2, $03, nRst, $01
000930BC E107                       	smpsAlterNote       $07
000930BE 9B03                       	dc.b	nD2, $03
000930C0 E11A                       	smpsAlterNote       $1A
000930C2 A301                       	dc.b	nBb2, $01
000930C4 E1F9                       	smpsAlterNote       $F9
000930C6 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000930C9 E107                       	smpsAlterNote       $07
000930CB E701                       	dc.b	smpsNoAttack, $01
000930CD E111                       	smpsAlterNote       $11
000930CF E701                       	dc.b	smpsNoAttack, $01
000930D1 E106                       	smpsAlterNote       $06
000930D3 E7A5 0280 01               	dc.b	smpsNoAttack, nC3, $02, nRst, $01
000930D8 E107                       	smpsAlterNote       $07
000930DA 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
000930E2 E1EC                       	smpsAlterNote       $EC
000930E4 A101                       	dc.b	nAb2, $01
000930E6 E108                       	smpsAlterNote       $08
000930E8 E701                       	dc.b	smpsNoAttack, $01
000930EA E116                       	smpsAlterNote       $16
000930EC E701                       	dc.b	smpsNoAttack, $01
000930EE E1F5                       	smpsAlterNote       $F5
000930F0 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
000930F3 E10B                       	smpsAlterNote       $0B
000930F5 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000930F9 E107                       	smpsAlterNote       $07
000930FB 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
00093101 E109                       	smpsAlterNote       $09
00093103 9E03 8001                  	dc.b	nF2, $03, nRst, $01
00093107 E10B                       	smpsAlterNote       $0B
00093109 9603                       	dc.b	nA1, $03
0009310B E107                       	smpsAlterNote       $07
0009310D 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
00093113 E10B                       	smpsAlterNote       $0B
00093115 A203 8001                  	dc.b	nA2, $03, nRst, $01
00093119 E107                       	smpsAlterNote       $07
0009311B 9B02 8001                  	dc.b	nD2, $02, nRst, $01
0009311F E11A                       	smpsAlterNote       $1A
00093121 A301                       	dc.b	nBb2, $01
00093123 E1F9                       	smpsAlterNote       $F9
00093125 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00093128 E107                       	smpsAlterNote       $07
0009312A E701                       	dc.b	smpsNoAttack, $01
0009312C E1FB                       	smpsAlterNote       $FB
0009312E E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00093131 E106                       	smpsAlterNote       $06
00093133 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00093137 E107                       	smpsAlterNote       $07
00093139 9B03                       	dc.b	nD2, $03
0009313B E108                       	smpsAlterNote       $08
0009313D 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
00093143 E109                       	smpsAlterNote       $09
00093145 A002 8001                  	dc.b	nG2, $02, nRst, $01
00093149 E10C                       	smpsAlterNote       $0C
0009314B A303                       	dc.b	nBb2, $03
0009314D E1F0                       	smpsAlterNote       $F0
0009314F A401                       	dc.b	nB2, $01
00093151 E1FD                       	smpsAlterNote       $FD
00093153 E701 E7A5 01               	dc.b	smpsNoAttack, $01, smpsNoAttack, nC3, $01
00093158 E106                       	smpsAlterNote       $06
0009315A 8001                       	dc.b	nRst, $01
0009315C E109                       	smpsAlterNote       $09
0009315E A006 8001                  	dc.b	nG2, $06, nRst, $01
00093162 E108                       	smpsAlterNote       $08
00093164 9C02 8001                  	dc.b	nEb2, $02, nRst, $01
00093168 E107                       	smpsAlterNote       $07
0009316A 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00093170 E10B                       	smpsAlterNote       $0B
00093172 A203                       	dc.b	nA2, $03
00093174 E107                       	smpsAlterNote       $07
00093176 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0009317A E1F2                       	smpsAlterNote       $F2
0009317C A401                       	dc.b	nB2, $01
0009317E E1FF                       	smpsAlterNote       $FF
00093180 E701                       	dc.b	smpsNoAttack, $01
00093182 E107                       	smpsAlterNote       $07
00093184 E701                       	dc.b	smpsNoAttack, $01
00093186 E1FB                       	smpsAlterNote       $FB
00093188 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0009318B E106                       	smpsAlterNote       $06
0009318D E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00093191 E107                       	smpsAlterNote       $07
00093193 9B02 8001 A706 8001 9B03   	dc.b	nD2, $02, nRst, $01, nD3, $06, nRst, $01, nD2, $03
0009319D E117                       	smpsAlterNote       $17
0009319F A001                       	dc.b	nG2, $01
000931A1 E1FA                       	smpsAlterNote       $FA
000931A3 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
000931A6 E108                       	smpsAlterNote       $08
000931A8 E701                       	dc.b	smpsNoAttack, $01
000931AA E1E7                       	smpsAlterNote       $E7
000931AC E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
000931AF E103                       	smpsAlterNote       $03
000931B1 E701                       	dc.b	smpsNoAttack, $01
000931B3 E10B                       	smpsAlterNote       $0B
000931B5 E702                       	dc.b	smpsNoAttack, $02
000931B7 E107                       	smpsAlterNote       $07
000931B9 9B03 8001 A702 8001        	dc.b	nD2, $03, nRst, $01, nD3, $02, nRst, $01
000931C1 E106                       	smpsAlterNote       $06
000931C3 9903 A503 8001             	dc.b	nC2, $03, nC3, $03, nRst, $01
000931C9 E10C                       	smpsAlterNote       $0C
000931CB 9703 9703 8001             	dc.b	nBb1, $03, nBb1, $03, nRst, $01
000931D1 E109                       	smpsAlterNote       $09
000931D3 9E03                       	dc.b	nF2, $03
000931D5 E10C                       	smpsAlterNote       $0C
000931D7 9703 8001                  	dc.b	nBb1, $03, nRst, $01
000931DB E1EA                       	smpsAlterNote       $EA
000931DD A201                       	dc.b	nA2, $01
000931DF E106                       	smpsAlterNote       $06
000931E1 E701                       	dc.b	smpsNoAttack, $01
000931E3 E1E2                       	smpsAlterNote       $E2
000931E5 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
000931E8 E1F0                       	smpsAlterNote       $F0
000931EA E701                       	dc.b	smpsNoAttack, $01
000931EC E10C                       	smpsAlterNote       $0C
000931EE E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
000931FA E116                       	smpsAlterNote       $16
000931FC 9C01                       	dc.b	nEb2, $01
000931FE E105                       	smpsAlterNote       $05
00093200 E79D 01                    	dc.b	smpsNoAttack, nE2, $01
00093203 E1F1                       	smpsAlterNote       $F1
00093205 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00093208 E1FF                       	smpsAlterNote       $FF
0009320A E701                       	dc.b	smpsNoAttack, $01
0009320C E109                       	smpsAlterNote       $09
0009320E E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00093212 E10C                       	smpsAlterNote       $0C
00093214 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $01
00093220 9702 8001 9703             	dc.b	nBb1, $02, nRst, $01, nBb1, $03
00093226 E109                       	smpsAlterNote       $09
00093228 9E03 8001                  	dc.b	nF2, $03, nRst, $01
0009322C E10C                       	smpsAlterNote       $0C
0009322E 9703                       	dc.b	nBb1, $03
00093230 E11A                       	smpsAlterNote       $1A
00093232 A101                       	dc.b	nAb2, $01
00093234 E1FB                       	smpsAlterNote       $FB
00093236 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00093239 E10A                       	smpsAlterNote       $0A
0009323B E701                       	dc.b	smpsNoAttack, $01
0009323D E1E8                       	smpsAlterNote       $E8
0009323F E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00093242 E106                       	smpsAlterNote       $06
00093244 E701                       	dc.b	smpsNoAttack, $01
00093246 E10C                       	smpsAlterNote       $0C
00093248 E702 9703 8001 A306 9703+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nBb1, $03, nRst, $01
00093254 E1F9                       	smpsAlterNote       $F9
00093256 9D01                       	dc.b	nE2, $01
00093258 E108                       	smpsAlterNote       $08
0009325A E701                       	dc.b	smpsNoAttack, $01
0009325C E1F6                       	smpsAlterNote       $F6
0009325E E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00093261 E109                       	smpsAlterNote       $09
00093263 E703 8001                  	dc.b	smpsNoAttack, $03, nRst, $01
00093267 E10C                       	smpsAlterNote       $0C
00093269 9703 9703 8001 A302 8001+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $02, nRst, $01, nBb1, $03
00093275 E108                       	smpsAlterNote       $08
00093277 9D03 8001 9D03             	dc.b	nE2, $03, nRst, $01, nE2, $03
0009327D E106                       	smpsAlterNote       $06
0009327F A403 8001                  	dc.b	nB2, $03, nRst, $01
00093283 E108                       	smpsAlterNote       $08
00093285 9D03                       	dc.b	nE2, $03
00093287 E1EB                       	smpsAlterNote       $EB
00093289 A801                       	dc.b	nEb3, $01
0009328B E109                       	smpsAlterNote       $09
0009328D E701                       	dc.b	smpsNoAttack, $01
0009328F E1FA                       	smpsAlterNote       $FA
00093291 E7A9 01                    	dc.b	smpsNoAttack, nE3, $01
00093294 E108                       	smpsAlterNote       $08
00093296 E703 8001 9D03 A907 9D03+  	dc.b	smpsNoAttack, $03, nRst, $01, nE2, $03, nE3, $07, nE2, $03, nRst, $01
000932A2 E1E9                       	smpsAlterNote       $E9
000932A4 A301                       	dc.b	nBb2, $01
000932A6 E107                       	smpsAlterNote       $07
000932A8 E701                       	dc.b	smpsNoAttack, $01
000932AA E1F0                       	smpsAlterNote       $F0
000932AC E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000932AF E1F7                       	smpsAlterNote       $F7
000932B1 E701                       	dc.b	smpsNoAttack, $01
000932B3 E107                       	smpsAlterNote       $07
000932B5 E701                       	dc.b	smpsNoAttack, $01
000932B7 E106                       	smpsAlterNote       $06
000932B9 E701                       	dc.b	smpsNoAttack, $01
000932BB E108                       	smpsAlterNote       $08
000932BD 9D03 8001 9D03             	dc.b	nE2, $03, nRst, $01, nE2, $03
000932C3 E106                       	smpsAlterNote       $06
000932C5 A403 8001                  	dc.b	nB2, $03, nRst, $01
000932C9 E108                       	smpsAlterNote       $08
000932CB 9D03                       	dc.b	nE2, $03
000932CD E10B                       	smpsAlterNote       $0B
000932CF 9603 8001 9602 8001        	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01
000932D7 E108                       	smpsAlterNote       $08
000932D9 9D03                       	dc.b	nE2, $03
000932DB E10B                       	smpsAlterNote       $0B
000932DD 9603 8001                  	dc.b	nA1, $03, nRst, $01
000932E1 E113                       	smpsAlterNote       $13
000932E3 A001                       	dc.b	nG2, $01
000932E5 E118                       	smpsAlterNote       $18
000932E7 E701                       	dc.b	smpsNoAttack, $01
000932E9 E1E9                       	smpsAlterNote       $E9
000932EB E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
000932EE E1F3                       	smpsAlterNote       $F3
000932F0 E701                       	dc.b	smpsNoAttack, $01
000932F2 E1FD                       	smpsAlterNote       $FD
000932F4 E701                       	dc.b	smpsNoAttack, $01
000932F6 E102                       	smpsAlterNote       $02
000932F8 E701                       	dc.b	smpsNoAttack, $01
000932FA E107                       	smpsAlterNote       $07
000932FC 8001                       	dc.b	nRst, $01
000932FE E10B                       	smpsAlterNote       $0B
00093300 9603                       	dc.b	nA1, $03
00093302 E10C                       	smpsAlterNote       $0C
00093304 9706 8001 9703             	dc.b	nBb1, $06, nRst, $01, nBb1, $03
0009330A E10B                       	smpsAlterNote       $0B
0009330C 9603 8001 A206 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA2, $06, nRst, $01, nA1, $03, nA2, $03
00093318 8001 9602 8001             	dc.b	nRst, $01, nA1, $02, nRst, $01
0009331E E107                       	smpsAlterNote       $07
00093320 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00093326 E10B                       	smpsAlterNote       $0B
00093328 A203                       	dc.b	nA2, $03
0009332A E107                       	smpsAlterNote       $07
0009332C 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00093330 E1F2                       	smpsAlterNote       $F2
00093332 A401                       	dc.b	nB2, $01
00093334 E1FF                       	smpsAlterNote       $FF
00093336 E701                       	dc.b	smpsNoAttack, $01
00093338 E107                       	smpsAlterNote       $07
0009333A E701                       	dc.b	smpsNoAttack, $01
0009333C E1FB                       	smpsAlterNote       $FB
0009333E E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00093341 E106                       	smpsAlterNote       $06
00093343 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00093347 E107                       	smpsAlterNote       $07
00093349 9B02 8001                  	dc.b	nD2, $02, nRst, $01
0009334D E108                       	smpsAlterNote       $08
0009334F 9C06 8001 9C03             	dc.b	nEb2, $06, nRst, $01, nEb2, $03
00093355 E109                       	smpsAlterNote       $09
00093357 A003 8001                  	dc.b	nG2, $03, nRst, $01
0009335B E10C                       	smpsAlterNote       $0C
0009335D A302 8001                  	dc.b	nBb2, $02, nRst, $01
00093361 E1F0                       	smpsAlterNote       $F0
00093363 A401                       	dc.b	nB2, $01
00093365 E109                       	smpsAlterNote       $09
00093367 E701                       	dc.b	smpsNoAttack, $01
00093369 E106                       	smpsAlterNote       $06
0009336B E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0009336E E109                       	smpsAlterNote       $09
00093370 A007                       	dc.b	nG2, $07
00093372 E108                       	smpsAlterNote       $08
00093374 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
00093378 E107                       	smpsAlterNote       $07
0009337A 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00093380 E10B                       	smpsAlterNote       $0B
00093382 A202 8001                  	dc.b	nA2, $02, nRst, $01
00093386 E107                       	smpsAlterNote       $07
00093388 9B03                       	dc.b	nD2, $03
0009338A E11A                       	smpsAlterNote       $1A
0009338C A301                       	dc.b	nBb2, $01
0009338E E1F2                       	smpsAlterNote       $F2
00093390 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00093393 E1FF                       	smpsAlterNote       $FF
00093395 E701                       	dc.b	smpsNoAttack, $01
00093397 E111                       	smpsAlterNote       $11
00093399 E701                       	dc.b	smpsNoAttack, $01
0009339B E106                       	smpsAlterNote       $06
0009339D E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
000933A0 E107                       	smpsAlterNote       $07
000933A2 9B03 8001 A706 8001 9B02+  	dc.b	nD2, $03, nRst, $01, nD3, $06, nRst, $01, nD2, $02, nRst, $01
000933AE E117                       	smpsAlterNote       $17
000933B0 A001                       	dc.b	nG2, $01
000933B2 E1FA                       	smpsAlterNote       $FA
000933B4 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
000933B7 E116                       	smpsAlterNote       $16
000933B9 E701                       	dc.b	smpsNoAttack, $01
000933BB E1F5                       	smpsAlterNote       $F5
000933BD E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
000933C0 E103                       	smpsAlterNote       $03
000933C2 E701                       	dc.b	smpsNoAttack, $01
000933C4 E10B                       	smpsAlterNote       $0B
000933C6 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000933CA E107                       	smpsAlterNote       $07
000933CC 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
000933D2 E109                       	smpsAlterNote       $09
000933D4 9E03                       	dc.b	nF2, $03
000933D6 E10B                       	smpsAlterNote       $0B
000933D8 9603 8001                  	dc.b	nA1, $03, nRst, $01
000933DC E107                       	smpsAlterNote       $07
000933DE 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
000933E4 E10B                       	smpsAlterNote       $0B
000933E6 A203 8001                  	dc.b	nA2, $03, nRst, $01
000933EA E107                       	smpsAlterNote       $07
000933EC 9B03                       	dc.b	nD2, $03
000933EE E11A                       	smpsAlterNote       $1A
000933F0 A301                       	dc.b	nBb2, $01
000933F2 E1F9                       	smpsAlterNote       $F9
000933F4 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000933F7 E107                       	smpsAlterNote       $07
000933F9 E701                       	dc.b	smpsNoAttack, $01
000933FB E111                       	smpsAlterNote       $11
000933FD E701                       	dc.b	smpsNoAttack, $01
000933FF E106                       	smpsAlterNote       $06
00093401 E7A5 0280 01               	dc.b	smpsNoAttack, nC3, $02, nRst, $01
00093406 E107                       	smpsAlterNote       $07
00093408 9B03                       	dc.b	nD2, $03
0009340A E108                       	smpsAlterNote       $08
0009340C 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
00093412 E109                       	smpsAlterNote       $09
00093414 A003                       	dc.b	nG2, $03
00093416 E10C                       	smpsAlterNote       $0C
00093418 A303 8001                  	dc.b	nBb2, $03, nRst, $01
0009341C E1FD                       	smpsAlterNote       $FD
0009341E A401 E7A5 01               	dc.b	nB2, $01, smpsNoAttack, nC3, $01
00093423 E106                       	smpsAlterNote       $06
00093425 8001                       	dc.b	nRst, $01
00093427 E109                       	smpsAlterNote       $09
00093429 A006 8001                  	dc.b	nG2, $06, nRst, $01
0009342D E108                       	smpsAlterNote       $08
0009342F 9C03                       	dc.b	nEb2, $03
00093431 E107                       	smpsAlterNote       $07
00093433 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
00093439 E10B                       	smpsAlterNote       $0B
0009343B A203 8001                  	dc.b	nA2, $03, nRst, $01
0009343F E107                       	smpsAlterNote       $07
00093441 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00093445 E11A                       	smpsAlterNote       $1A
00093447 A301                       	dc.b	nBb2, $01
00093449 E1F9                       	smpsAlterNote       $F9
0009344B E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0009344E E107                       	smpsAlterNote       $07
00093450 E701                       	dc.b	smpsNoAttack, $01
00093452 E1FB                       	smpsAlterNote       $FB
00093454 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00093457 E106                       	smpsAlterNote       $06
00093459 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0009345D E107                       	smpsAlterNote       $07
0009345F 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
00093467 E1EC                       	smpsAlterNote       $EC
00093469 A101                       	dc.b	nAb2, $01
0009346B E108                       	smpsAlterNote       $08
0009346D E701                       	dc.b	smpsNoAttack, $01
0009346F E1E7                       	smpsAlterNote       $E7
00093471 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00093474 E1F5                       	smpsAlterNote       $F5
00093476 E701                       	dc.b	smpsNoAttack, $01
00093478 E10B                       	smpsAlterNote       $0B
0009347A E702                       	dc.b	smpsNoAttack, $02
0009347C E107                       	smpsAlterNote       $07
0009347E 9B03 8001 A703             	dc.b	nD2, $03, nRst, $01, nD3, $03
00093484 E106                       	smpsAlterNote       $06
00093486 9903 8001 A503             	dc.b	nC2, $03, nRst, $01, nC3, $03
0009348C E10C                       	smpsAlterNote       $0C
0009348E 9703 8001 9702 8001        	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01
00093496 E109                       	smpsAlterNote       $09
00093498 9E03                       	dc.b	nF2, $03
0009349A E10C                       	smpsAlterNote       $0C
0009349C 9703 8001                  	dc.b	nBb1, $03, nRst, $01
000934A0 E1EA                       	smpsAlterNote       $EA
000934A2 A201                       	dc.b	nA2, $01
000934A4 E106                       	smpsAlterNote       $06
000934A6 E701                       	dc.b	smpsNoAttack, $01
000934A8 E114                       	smpsAlterNote       $14
000934AA E701                       	dc.b	smpsNoAttack, $01
000934AC E1F0                       	smpsAlterNote       $F0
000934AE E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
000934B1 E10C                       	smpsAlterNote       $0C
000934B3 E702 8001 9702 8001 A306+  	dc.b	smpsNoAttack, $02, nRst, $01, nBb1, $02, nRst, $01, nBb2, $06, nRst, $01
000934BF 9703                       	dc.b	nBb1, $03
000934C1 E116                       	smpsAlterNote       $16
000934C3 9C01                       	dc.b	nEb2, $01
000934C5 E105                       	smpsAlterNote       $05
000934C7 E79D 01                    	dc.b	smpsNoAttack, nE2, $01
000934CA E113                       	smpsAlterNote       $13
000934CC E701                       	dc.b	smpsNoAttack, $01
000934CE E1FF                       	smpsAlterNote       $FF
000934D0 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
000934D3 E109                       	smpsAlterNote       $09
000934D5 E703                       	dc.b	smpsNoAttack, $03
000934D7 E10C                       	smpsAlterNote       $0C
000934D9 9703 8001 9702 8001 A303+  	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb2, $03, nBb1, $03
000934E5 8001 9703 9703 8001        	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
000934ED E109                       	smpsAlterNote       $09
000934EF 9E03                       	dc.b	nF2, $03
000934F1 E10C                       	smpsAlterNote       $0C
000934F3 9703 8001                  	dc.b	nBb1, $03, nRst, $01
000934F7 E1EC                       	smpsAlterNote       $EC
000934F9 A201                       	dc.b	nA2, $01
000934FB E10A                       	smpsAlterNote       $0A
000934FD E701                       	dc.b	smpsNoAttack, $01
000934FF E1E8                       	smpsAlterNote       $E8
00093501 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00093504 E1F7                       	smpsAlterNote       $F7
00093506 E701                       	dc.b	smpsNoAttack, $01
00093508 E10C                       	smpsAlterNote       $0C
0009350A E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
00093516 E1EA                       	smpsAlterNote       $EA
00093518 9D01                       	dc.b	nE2, $01
0009351A E108                       	smpsAlterNote       $08
0009351C E701                       	dc.b	smpsNoAttack, $01
0009351E E1F6                       	smpsAlterNote       $F6
00093520 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00093523 E105                       	smpsAlterNote       $05
00093525 E701                       	dc.b	smpsNoAttack, $01
00093527 E109                       	smpsAlterNote       $09
00093529 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0009352D E10C                       	smpsAlterNote       $0C
0009352F 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $01
0009353B E108                       	smpsAlterNote       $08
0009353D 9D02 8001 9D03             	dc.b	nE2, $02, nRst, $01, nE2, $03
00093543 E106                       	smpsAlterNote       $06
00093545 A403 8001                  	dc.b	nB2, $03, nRst, $01
00093549 E108                       	smpsAlterNote       $08
0009354B 9D03                       	dc.b	nE2, $03
0009354D E1EB                       	smpsAlterNote       $EB
0009354F A801                       	dc.b	nEb3, $01
00093551 E109                       	smpsAlterNote       $09
00093553 E701                       	dc.b	smpsNoAttack, $01
00093555 E1EB                       	smpsAlterNote       $EB
00093557 E7A9 01                    	dc.b	smpsNoAttack, nE3, $01
0009355A E108                       	smpsAlterNote       $08
0009355C E704 9D03 8001 A906 9D03+  	dc.b	smpsNoAttack, $04, nE2, $03, nRst, $01, nE3, $06, nE2, $03, nRst, $01
00093568 E1E9                       	smpsAlterNote       $E9
0009356A A301                       	dc.b	nBb2, $01
0009356C E1F8                       	smpsAlterNote       $F8
0009356E E701                       	dc.b	smpsNoAttack, $01
00093570 E116                       	smpsAlterNote       $16
00093572 E701                       	dc.b	smpsNoAttack, $01
00093574 E1F7                       	smpsAlterNote       $F7
00093576 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00093579 E107                       	smpsAlterNote       $07
0009357B E701                       	dc.b	smpsNoAttack, $01
0009357D E1EE                       	smpsAlterNote       $EE
0009357F E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00093582 E106                       	smpsAlterNote       $06
00093584 8001                       	dc.b	nRst, $01
00093586 E108                       	smpsAlterNote       $08
00093588 9D03 9D03 8001             	dc.b	nE2, $03, nE2, $03, nRst, $01
0009358E E106                       	smpsAlterNote       $06
00093590 A402 8001                  	dc.b	nB2, $02, nRst, $01
00093594 E108                       	smpsAlterNote       $08
00093596 9D03                       	dc.b	nE2, $03
00093598 E10B                       	smpsAlterNote       $0B
0009359A 9603 8001 9603             	dc.b	nA1, $03, nRst, $01, nA1, $03
000935A0 E108                       	smpsAlterNote       $08
000935A2 9D03 8001                  	dc.b	nE2, $03, nRst, $01
000935A6 E10B                       	smpsAlterNote       $0B
000935A8 9603                       	dc.b	nA1, $03
000935AA E10E                       	smpsAlterNote       $0E
000935AC A001                       	dc.b	nG2, $01
000935AE E118                       	smpsAlterNote       $18
000935B0 E701                       	dc.b	smpsNoAttack, $01
000935B2 E1E9                       	smpsAlterNote       $E9
000935B4 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
000935B7 E1EE                       	smpsAlterNote       $EE
000935B9 E701                       	dc.b	smpsNoAttack, $01
000935BB E1F8                       	smpsAlterNote       $F8
000935BD E701                       	dc.b	smpsNoAttack, $01
000935BF E102                       	smpsAlterNote       $02
000935C1 E701                       	dc.b	smpsNoAttack, $01
000935C3 E107                       	smpsAlterNote       $07
000935C5 8001                       	dc.b	nRst, $01
000935C7 E10B                       	smpsAlterNote       $0B
000935C9 9603                       	dc.b	nA1, $03
000935CB E10C                       	smpsAlterNote       $0C
000935CD 9707 9703 8001             	dc.b	nBb1, $07, nBb1, $03, nRst, $01
000935D3 E10B                       	smpsAlterNote       $0B
000935D5 9602 8001 A206 8001 9603+  	dc.b	nA1, $02, nRst, $01, nA2, $06, nRst, $01, nA1, $03, nA2, $03
000935E1 8001 9603                  	dc.b	nRst, $01, nA1, $03
000935E5 E10C                       	smpsAlterNote       $0C
000935E7 9706 800F 9703 9703 8019+  	dc.b	nBb1, $06, nRst, $0F, nBb1, $03, nBb1, $03, nRst, $19, nBb1, $02
000935F3 8001                       	dc.b	nRst, $01
000935F5 E10B                       	smpsAlterNote       $0B
000935F7 9606 800F 9602 8001        	dc.b	nA1, $06, nRst, $0F, nA1, $02, nRst, $01
000935FF E107                       	smpsAlterNote       $07
00093601 9B06 8001                  	dc.b	nD2, $06, nRst, $01
00093605 E10B                       	smpsAlterNote       $0B
00093607 9603                       	dc.b	nA1, $03
00093609 E109                       	smpsAlterNote       $09
0009360B 9E03 8001                  	dc.b	nF2, $03, nRst, $01
0009360F E108                       	smpsAlterNote       $08
00093611 9D06                       	dc.b	nE2, $06
00093613 E107                       	smpsAlterNote       $07
00093615 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00093619 E106                       	smpsAlterNote       $06
0009361B 9903                       	dc.b	nC2, $03
0009361D E10C                       	smpsAlterNote       $0C
0009361F 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00093623 E10B                       	smpsAlterNote       $0B
00093625 9603 9603 8001 9602 8001+  	dc.b	nA1, $03, nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03
00093631 9603 8001 9603 9603 8001   	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
0009363B E10C                       	smpsAlterNote       $0C
0009363D 9706 8001 9702 8001 9703+  	dc.b	nBb1, $06, nRst, $01, nBb1, $02, nRst, $01, nBb1, $03, nBb1, $03
00093649 8001 9703 9703 8001 9703+  	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03
00093655 8001                       	dc.b	nRst, $01
00093657 E10B                       	smpsAlterNote       $0B
00093659 9602 8001 9603 9603 8001+  	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
00093665 9603 8001 9602 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03, nA1, $07
00093671 9603 8001 9603 9603 8001+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $02
0009367D 8001 9603 9603 8001 9603   	dc.b	nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
00093687 E10C                       	smpsAlterNote       $0C
00093689 9707 800E 9703 9703 8019+  	dc.b	nBb1, $07, nRst, $0E, nBb1, $03, nBb1, $03, nRst, $19, nBb1, $03
00093695 E10B                       	smpsAlterNote       $0B
00093697 9606 800F 9602 8001        	dc.b	nA1, $06, nRst, $0F, nA1, $02, nRst, $01
0009369F E107                       	smpsAlterNote       $07
000936A1 9B06 8001                  	dc.b	nD2, $06, nRst, $01
000936A5 E10B                       	smpsAlterNote       $0B
000936A7 9603                       	dc.b	nA1, $03
000936A9 E109                       	smpsAlterNote       $09
000936AB 9E03 8001                  	dc.b	nF2, $03, nRst, $01
000936AF E108                       	smpsAlterNote       $08
000936B1 9D06 8001                  	dc.b	nE2, $06, nRst, $01
000936B5 E107                       	smpsAlterNote       $07
000936B7 9B02 8001                  	dc.b	nD2, $02, nRst, $01
000936BB E106                       	smpsAlterNote       $06
000936BD 9903                       	dc.b	nC2, $03
000936BF E10C                       	smpsAlterNote       $0C
000936C1 9703 8001                  	dc.b	nBb1, $03, nRst, $01
000936C5 E10B                       	smpsAlterNote       $0B
000936C7 9603 9603 8001 9603 9603+  	dc.b	nA1, $03, nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
000936D3 9602 8001 9603 9603 8001   	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01
000936DD E10C                       	smpsAlterNote       $0C
000936DF 9706 8001 9703 9703 8001+  	dc.b	nBb1, $06, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $02
000936EB 8001 9703 9703 8001 9703+  	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03
000936F7 8001                       	dc.b	nRst, $01
000936F9 E10B                       	smpsAlterNote       $0B
000936FB 9602 8001 9603 9603 8001+  	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
00093707 9603 8001 9603 9603 8001   	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
00093711 E10C                       	smpsAlterNote       $0C
00093713 9706 9703 8001 9703 9703+  	dc.b	nBb1, $06, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
0009371F 9703 9703 8001 9702 8001+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb1, $03
0009372B E10B                       	smpsAlterNote       $0B
0009372D 9603 8001 9603 9603 8001+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
00093739 9603 8001 9602 8001 9603   	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03
00093743 E10C                       	smpsAlterNote       $0C
00093745 9707 9703 8001 9703 9703+  	dc.b	nBb1, $07, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
00093751 9702 8001 9703 9703 8001+  	dc.b	nBb1, $02, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03
0009375D E10B                       	smpsAlterNote       $0B
0009375F 9603 8001 9602 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03, nA1, $03
0009376B 8001                       	dc.b	nRst, $01
0009376D E1EC                       	smpsAlterNote       $EC
0009376F A101                       	dc.b	nAb2, $01
00093771 E1FA                       	smpsAlterNote       $FA
00093773 E701                       	dc.b	smpsNoAttack, $01
00093775 E116                       	smpsAlterNote       $16
00093777 E701                       	dc.b	smpsNoAttack, $01
00093779 E1F5                       	smpsAlterNote       $F5
0009377B E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
0009377E E10B                       	smpsAlterNote       $0B
00093780 E702 8001 9603 9606 8001+  	dc.b	smpsNoAttack, $02, nRst, $01, nA1, $03, nA1, $06, nRst, $01, nA1, $03
0009378C 9603 8001 9603 800B 9602+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nRst, $0B, nA1, $02, nRst, $01
00093798 E107                       	smpsAlterNote       $07
0009379A 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
000937A0 E10B                       	smpsAlterNote       $0B
000937A2 A203                       	dc.b	nA2, $03
000937A4 E107                       	smpsAlterNote       $07
000937A6 9B03 8001                  	dc.b	nD2, $03, nRst, $01
000937AA E1F3                       	smpsAlterNote       $F3
000937AC A401                       	dc.b	nB2, $01
000937AE E102                       	smpsAlterNote       $02
000937B0 E701                       	dc.b	smpsNoAttack, $01
000937B2 E109                       	smpsAlterNote       $09
000937B4 E701                       	dc.b	smpsNoAttack, $01
000937B6 E102                       	smpsAlterNote       $02
000937B8 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000937BB E106                       	smpsAlterNote       $06
000937BD E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000937C1 E107                       	smpsAlterNote       $07
000937C3 9B02 8001                  	dc.b	nD2, $02, nRst, $01
000937C7 E108                       	smpsAlterNote       $08
000937C9 9C06 8001 9C03             	dc.b	nEb2, $06, nRst, $01, nEb2, $03
000937CF E109                       	smpsAlterNote       $09
000937D1 A003 8001                  	dc.b	nG2, $03, nRst, $01
000937D5 E1F2                       	smpsAlterNote       $F2
000937D7 A401                       	dc.b	nB2, $01
000937D9 E1FF                       	smpsAlterNote       $FF
000937DB E701                       	dc.b	smpsNoAttack, $01
000937DD E111                       	smpsAlterNote       $11
000937DF E701                       	dc.b	smpsNoAttack, $01
000937E1 E1FB                       	smpsAlterNote       $FB
000937E3 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000937E6 E106                       	smpsAlterNote       $06
000937E8 E702                       	dc.b	smpsNoAttack, $02
000937EA E109                       	smpsAlterNote       $09
000937EC A007                       	dc.b	nG2, $07
000937EE E108                       	smpsAlterNote       $08
000937F0 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
000937F4 E107                       	smpsAlterNote       $07
000937F6 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
000937FC E10B                       	smpsAlterNote       $0B
000937FE A202 8001                  	dc.b	nA2, $02, nRst, $01
00093802 E107                       	smpsAlterNote       $07
00093804 9B03                       	dc.b	nD2, $03
00093806 E11A                       	smpsAlterNote       $1A
00093808 A301                       	dc.b	nBb2, $01
0009380A E1F2                       	smpsAlterNote       $F2
0009380C E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0009380F E1FF                       	smpsAlterNote       $FF
00093811 E701                       	dc.b	smpsNoAttack, $01
00093813 E111                       	smpsAlterNote       $11
00093815 E701                       	dc.b	smpsNoAttack, $01
00093817 E106                       	smpsAlterNote       $06
00093819 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
0009381C E107                       	smpsAlterNote       $07
0009381E 9B03 8001 A706 8001 9B02+  	dc.b	nD2, $03, nRst, $01, nD3, $06, nRst, $01, nD2, $02, nRst, $01
0009382A E117                       	smpsAlterNote       $17
0009382C A001                       	dc.b	nG2, $01
0009382E E1FA                       	smpsAlterNote       $FA
00093830 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
00093833 E116                       	smpsAlterNote       $16
00093835 E701                       	dc.b	smpsNoAttack, $01
00093837 E1F5                       	smpsAlterNote       $F5
00093839 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
0009383C E103                       	smpsAlterNote       $03
0009383E E701                       	dc.b	smpsNoAttack, $01
00093840 E10B                       	smpsAlterNote       $0B
00093842 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00093846 E107                       	smpsAlterNote       $07
00093848 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
0009384E E109                       	smpsAlterNote       $09
00093850 9E03                       	dc.b	nF2, $03
00093852 E10B                       	smpsAlterNote       $0B
00093854 9603 8001                  	dc.b	nA1, $03, nRst, $01
00093858 E107                       	smpsAlterNote       $07
0009385A 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
00093860 E10B                       	smpsAlterNote       $0B
00093862 A203 8001                  	dc.b	nA2, $03, nRst, $01
00093866 E107                       	smpsAlterNote       $07
00093868 9B03                       	dc.b	nD2, $03
0009386A E11A                       	smpsAlterNote       $1A
0009386C A301                       	dc.b	nBb2, $01
0009386E E1F9                       	smpsAlterNote       $F9
00093870 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00093873 E1FF                       	smpsAlterNote       $FF
00093875 E701                       	dc.b	smpsNoAttack, $01
00093877 E111                       	smpsAlterNote       $11
00093879 E701                       	dc.b	smpsNoAttack, $01
0009387B E106                       	smpsAlterNote       $06
0009387D E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00093880 E107                       	smpsAlterNote       $07
00093882 9B03                       	dc.b	nD2, $03
00093884 E108                       	smpsAlterNote       $08
00093886 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
0009388C E109                       	smpsAlterNote       $09
0009388E A003                       	dc.b	nG2, $03
00093890 E1F0                       	smpsAlterNote       $F0
00093892 A501                       	dc.b	nC3, $01
00093894 E106                       	smpsAlterNote       $06
00093896 E705 8001                  	dc.b	smpsNoAttack, $05, nRst, $01
0009389A E109                       	smpsAlterNote       $09
0009389C A006 8001                  	dc.b	nG2, $06, nRst, $01
000938A0 E108                       	smpsAlterNote       $08
000938A2 9C03                       	dc.b	nEb2, $03
000938A4 E107                       	smpsAlterNote       $07
000938A6 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
000938AC E10B                       	smpsAlterNote       $0B
000938AE A203 8001                  	dc.b	nA2, $03, nRst, $01
000938B2 E107                       	smpsAlterNote       $07
000938B4 9B02 8001                  	dc.b	nD2, $02, nRst, $01
000938B8 E11A                       	smpsAlterNote       $1A
000938BA A301                       	dc.b	nBb2, $01
000938BC E1F9                       	smpsAlterNote       $F9
000938BE E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000938C1 E107                       	smpsAlterNote       $07
000938C3 E701                       	dc.b	smpsNoAttack, $01
000938C5 E1FB                       	smpsAlterNote       $FB
000938C7 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000938CA E106                       	smpsAlterNote       $06
000938CC E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000938D0 E107                       	smpsAlterNote       $07
000938D2 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
000938DA E1EC                       	smpsAlterNote       $EC
000938DC A101                       	dc.b	nAb2, $01
000938DE E108                       	smpsAlterNote       $08
000938E0 E701                       	dc.b	smpsNoAttack, $01
000938E2 E1E7                       	smpsAlterNote       $E7
000938E4 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
000938E7 E1F5                       	smpsAlterNote       $F5
000938E9 E701                       	dc.b	smpsNoAttack, $01
000938EB E10B                       	smpsAlterNote       $0B
000938ED E702                       	dc.b	smpsNoAttack, $02
000938EF E107                       	smpsAlterNote       $07
000938F1 9B03 8001 A703             	dc.b	nD2, $03, nRst, $01, nD3, $03
000938F7 E106                       	smpsAlterNote       $06
000938F9 9903 8001 A503             	dc.b	nC2, $03, nRst, $01, nC3, $03
000938FF E10C                       	smpsAlterNote       $0C
00093901 9703 8001 9702 8001        	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01
00093909 E109                       	smpsAlterNote       $09
0009390B 9E03                       	dc.b	nF2, $03
0009390D E10C                       	smpsAlterNote       $0C
0009390F 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00093913 E1EA                       	smpsAlterNote       $EA
00093915 A201                       	dc.b	nA2, $01
00093917 E106                       	smpsAlterNote       $06
00093919 E701                       	dc.b	smpsNoAttack, $01
0009391B E114                       	smpsAlterNote       $14
0009391D E701                       	dc.b	smpsNoAttack, $01
0009391F E1F0                       	smpsAlterNote       $F0
00093921 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00093924 E10C                       	smpsAlterNote       $0C
00093926 E702 8001 9702 8001 A306+  	dc.b	smpsNoAttack, $02, nRst, $01, nBb1, $02, nRst, $01, nBb2, $06, nRst, $01
00093932 9703                       	dc.b	nBb1, $03
00093934 E116                       	smpsAlterNote       $16
00093936 9C01                       	dc.b	nEb2, $01
00093938 E105                       	smpsAlterNote       $05
0009393A E79D 01                    	dc.b	smpsNoAttack, nE2, $01
0009393D E113                       	smpsAlterNote       $13
0009393F E701                       	dc.b	smpsNoAttack, $01
00093941 E1FF                       	smpsAlterNote       $FF
00093943 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00093946 E109                       	smpsAlterNote       $09
00093948 E703                       	dc.b	smpsNoAttack, $03
0009394A E10C                       	smpsAlterNote       $0C
0009394C 9703 8001 9702 8001 A303+  	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb2, $03, nBb1, $03
00093958 8001 9703 9703 8001        	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
00093960 E109                       	smpsAlterNote       $09
00093962 9E03                       	dc.b	nF2, $03
00093964 E10C                       	smpsAlterNote       $0C
00093966 9703 8001                  	dc.b	nBb1, $03, nRst, $01
0009396A E1EA                       	smpsAlterNote       $EA
0009396C A201                       	dc.b	nA2, $01
0009396E E106                       	smpsAlterNote       $06
00093970 E701                       	dc.b	smpsNoAttack, $01
00093972 E1E2                       	smpsAlterNote       $E2
00093974 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00093977 E1F0                       	smpsAlterNote       $F0
00093979 E701                       	dc.b	smpsNoAttack, $01
0009397B E10C                       	smpsAlterNote       $0C
0009397D E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
00093989 E116                       	smpsAlterNote       $16
0009398B 9C01                       	dc.b	nEb2, $01
0009398D E105                       	smpsAlterNote       $05
0009398F E79D 01                    	dc.b	smpsNoAttack, nE2, $01
00093992 E1F1                       	smpsAlterNote       $F1
00093994 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00093997 E1FF                       	smpsAlterNote       $FF
00093999 E701                       	dc.b	smpsNoAttack, $01
0009399B E109                       	smpsAlterNote       $09
0009399D E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000939A1 E10C                       	smpsAlterNote       $0C
000939A3 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $04
000939AF E106                       	smpsAlterNote       $06
000939B1 9903                       	dc.b	nC2, $03
000939B3 E107                       	smpsAlterNote       $07
000939B5 9B03 8001                  	dc.b	nD2, $03, nRst, $01
000939B9 E109                       	smpsAlterNote       $09
000939BB 8003 940D 8004             	dc.b	nRst, $03, nG1, $0D, nRst, $04
000939C1 E107                       	smpsAlterNote       $07
000939C3 9B03 8001                  	dc.b	nD2, $03, nRst, $01
000939C7 E108                       	smpsAlterNote       $08
000939C9 9D03                       	dc.b	nE2, $03
000939CB E10B                       	smpsAlterNote       $0B
000939CD 8004 960D 8004             	dc.b	nRst, $04, nA1, $0D, nRst, $04
000939D3 E109                       	smpsAlterNote       $09
000939D5 9E03 A003 8001             	dc.b	nF2, $03, nG2, $03, nRst, $01
000939DB E10C                       	smpsAlterNote       $0C
000939DD 8003 970D 8001             	dc.b	nRst, $03, nBb1, $0D, nRst, $01
000939E3 E106                       	smpsAlterNote       $06
000939E5 9903                       	dc.b	nC2, $03
000939E7 E11A                       	smpsAlterNote       $1A
000939E9 A301                       	dc.b	nBb2, $01
000939EB E1F9                       	smpsAlterNote       $F9
000939ED E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000939F0 E1FF                       	smpsAlterNote       $FF
000939F2 E701                       	dc.b	smpsNoAttack, $01
000939F4 E111                       	smpsAlterNote       $11
000939F6 E701                       	dc.b	smpsNoAttack, $01
000939F8 E106                       	smpsAlterNote       $06
000939FA E7A5 0399 0380 04          	dc.b	smpsNoAttack, nC3, $03, nC2, $03, nRst, $04
00093A01 E109                       	smpsAlterNote       $09
00093A03 A003                       	dc.b	nG2, $03
00093A05 E106                       	smpsAlterNote       $06
00093A07 9907                       	dc.b	nC2, $07
00093A09 E107                       	smpsAlterNote       $07
00093A0B 9B03 8001 9B02 8001        	dc.b	nD2, $03, nRst, $01, nD2, $02, nRst, $01
00093A13 E10B                       	smpsAlterNote       $0B
00093A15 A203                       	dc.b	nA2, $03
00093A17 E107                       	smpsAlterNote       $07
00093A19 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00093A1D E1F2                       	smpsAlterNote       $F2
00093A1F A401                       	dc.b	nB2, $01
00093A21 E1F9                       	smpsAlterNote       $F9
00093A23 E701                       	dc.b	smpsNoAttack, $01
00093A25 E107                       	smpsAlterNote       $07
00093A27 E701                       	dc.b	smpsNoAttack, $01
00093A29 E1FB                       	smpsAlterNote       $FB
00093A2B E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00093A2E E106                       	smpsAlterNote       $06
00093A30 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00093A34 E107                       	smpsAlterNote       $07
00093A36 9B03                       	dc.b	nD2, $03
00093A38 E108                       	smpsAlterNote       $08
00093A3A 9C06 8001 A803             	dc.b	nEb2, $06, nRst, $01, nEb3, $03
00093A40 E109                       	smpsAlterNote       $09
00093A42 A003 8001                  	dc.b	nG2, $03, nRst, $01
00093A46 E1F2                       	smpsAlterNote       $F2
00093A48 A401                       	dc.b	nB2, $01
00093A4A E1F9                       	smpsAlterNote       $F9
00093A4C E701                       	dc.b	smpsNoAttack, $01
00093A4E E107                       	smpsAlterNote       $07
00093A50 E701                       	dc.b	smpsNoAttack, $01
00093A52 E1FB                       	smpsAlterNote       $FB
00093A54 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00093A57 E106                       	smpsAlterNote       $06
00093A59 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00093A5D E108                       	smpsAlterNote       $08
00093A5F 9C06 8001                  	dc.b	nEb2, $06, nRst, $01
00093A63 E10C                       	smpsAlterNote       $0C
00093A65 A302 8001                  	dc.b	nBb2, $02, nRst, $01
00093A69 E107                       	smpsAlterNote       $07
00093A6B 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00093A71 E10B                       	smpsAlterNote       $0B
00093A73 A203                       	dc.b	nA2, $03
00093A75 E107                       	smpsAlterNote       $07
00093A77 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00093A7B E1F2                       	smpsAlterNote       $F2
00093A7D A401                       	dc.b	nB2, $01
00093A7F E1FF                       	smpsAlterNote       $FF
00093A81 E701                       	dc.b	smpsNoAttack, $01
00093A83 E107                       	smpsAlterNote       $07
00093A85 E701                       	dc.b	smpsNoAttack, $01
00093A87 E1FB                       	smpsAlterNote       $FB
00093A89 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00093A8C E106                       	smpsAlterNote       $06
00093A8E E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00093A92 E107                       	smpsAlterNote       $07
00093A94 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00093A98 E108                       	smpsAlterNote       $08
00093A9A 9C06 8001 A803             	dc.b	nEb2, $06, nRst, $01, nEb3, $03
00093AA0 E109                       	smpsAlterNote       $09
00093AA2 A003 8001                  	dc.b	nG2, $03, nRst, $01
00093AA6 E1F2                       	smpsAlterNote       $F2
00093AA8 A401                       	dc.b	nB2, $01
00093AAA E1FF                       	smpsAlterNote       $FF
00093AAC E701                       	dc.b	smpsNoAttack, $01
00093AAE E111                       	smpsAlterNote       $11
00093AB0 E701                       	dc.b	smpsNoAttack, $01
00093AB2 E1FB                       	smpsAlterNote       $FB
00093AB4 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00093AB7 E106                       	smpsAlterNote       $06
00093AB9 E702                       	dc.b	smpsNoAttack, $02
00093ABB E108                       	smpsAlterNote       $08
00093ABD 9C07                       	dc.b	nEb2, $07
00093ABF E10C                       	smpsAlterNote       $0C
00093AC1 A303 8001                  	dc.b	nBb2, $03, nRst, $01
00093AC5 E107                       	smpsAlterNote       $07
00093AC7 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00093ACD E10B                       	smpsAlterNote       $0B
00093ACF A202 8001                  	dc.b	nA2, $02, nRst, $01
00093AD3 E107                       	smpsAlterNote       $07
00093AD5 9B03                       	dc.b	nD2, $03
00093AD7 E11A                       	smpsAlterNote       $1A
00093AD9 A301                       	dc.b	nBb2, $01
00093ADB E1F2                       	smpsAlterNote       $F2
00093ADD E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00093AE0 E1FF                       	smpsAlterNote       $FF
00093AE2 E701                       	dc.b	smpsNoAttack, $01
00093AE4 E111                       	smpsAlterNote       $11
00093AE6 E701                       	dc.b	smpsNoAttack, $01
00093AE8 E106                       	smpsAlterNote       $06
00093AEA E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00093AED E107                       	smpsAlterNote       $07
00093AEF 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00093AF3 E108                       	smpsAlterNote       $08
00093AF5 9C06 8001 A802 8001        	dc.b	nEb2, $06, nRst, $01, nEb3, $02, nRst, $01
00093AFD E109                       	smpsAlterNote       $09
00093AFF A003                       	dc.b	nG2, $03
00093B01 E11A                       	smpsAlterNote       $1A
00093B03 A301                       	dc.b	nBb2, $01
00093B05 E1F2                       	smpsAlterNote       $F2
00093B07 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00093B0A E1FF                       	smpsAlterNote       $FF
00093B0C E701                       	dc.b	smpsNoAttack, $01
00093B0E E111                       	smpsAlterNote       $11
00093B10 E701                       	dc.b	smpsNoAttack, $01
00093B12 E106                       	smpsAlterNote       $06
00093B14 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00093B17 E108                       	smpsAlterNote       $08
00093B19 9C07                       	dc.b	nEb2, $07
00093B1B E10C                       	smpsAlterNote       $0C
00093B1D A303 8001                  	dc.b	nBb2, $03, nRst, $01
00093B21 E107                       	smpsAlterNote       $07
00093B23 9B02 8001 9B03 9B03 8001+  	dc.b	nD2, $02, nRst, $01, nD2, $03, nD2, $03, nRst, $01, nD2, $03
00093B2F 9B03 8001 9B03 9B03 8001   	dc.b	nD2, $03, nRst, $01, nD2, $03, nD2, $03, nRst, $01
00093B39 E108                       	smpsAlterNote       $08
00093B3B 9C06                       	dc.b	nEb2, $06
00093B3D E10C                       	smpsAlterNote       $0C
00093B3F 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00093B43 E108                       	smpsAlterNote       $08
00093B45 9C03                       	dc.b	nEb2, $03
00093B47 E109                       	smpsAlterNote       $09
00093B49 A003 8001                  	dc.b	nG2, $03, nRst, $01
00093B4D E10C                       	smpsAlterNote       $0C
00093B4F A302 8001 A303 8007        	dc.b	nBb2, $02, nRst, $01, nBb2, $03, nRst, $07
00093B57 E107                       	smpsAlterNote       $07
00093B59 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00093B5D F6F4 F8                    	smpsJump            music84_Jump04
00093B60                            
00093B60                            ; FM2 Data
00093B60                            music84_FM2:
00093B60 E0C0                       	smpsPan             panCenter, $00
00093B64 E10B                       	smpsAlterNote       $0B
00093B66 C603 8007                  	dc.b	nA5, $03, nRst, $07
00093B6A E109                       	smpsAlterNote       $09
00093B6C C403 800B                  	dc.b	nG5, $03, nRst, $0B
00093B70 E108                       	smpsAlterNote       $08
00093B72 C103 8004                  	dc.b	nE5, $03, nRst, $04
00093B78 E080                       	smpsPan             panLeft, $00
00093B7A E10C                       	smpsAlterNote       $0C
00093B7C E6F9                       	smpsAlterVol        $F9
00093B7E C703                       	dc.b	nBb5, $03
00093B80 E10B                       	smpsAlterNote       $0B
00093B82 C603 8001                  	dc.b	nA5, $03, nRst, $01
00093B86 E109                       	smpsAlterNote       $09
00093B88 C402 8001 C203             	dc.b	nG5, $02, nRst, $01, nF5, $03
00093B8E E108                       	smpsAlterNote       $08
00093B90 C103 8001                  	dc.b	nE5, $03, nRst, $01
00093B94 E106                       	smpsAlterNote       $06
00093B96 BD03                       	dc.b	nC5, $03
00093B98 E10B                       	smpsAlterNote       $0B
00093B9A BA03 8001                  	dc.b	nA4, $03, nRst, $01
00093BA0 E0C0                       	smpsPan             panCenter, $00
00093BA2 E107                       	smpsAlterNote       $07
00093BA4 E606                       	smpsAlterVol        $06
00093BA6 BF03                       	dc.b	nD5, $03
00093BA8                            
00093BA8                            music84_Jump03:
00093BA8 E108                       	smpsAlterNote       $08
00093BAA C103 8001                  	dc.b	nE5, $03, nRst, $01
00093BAE E109                       	smpsAlterNote       $09
00093BB0 C202 8001 C403             	dc.b	nF5, $02, nRst, $01, nG5, $03
00093BB6 E10B                       	smpsAlterNote       $0B
00093BB8 C607                       	dc.b	nA5, $07
00093BBA E107                       	smpsAlterNote       $07
00093BBC BF03 8001                  	dc.b	nD5, $03, nRst, $01
00093BC0 E106                       	smpsAlterNote       $06
00093BC2 C90D                       	dc.b	nC6, $0D
00093BC4 E100                       	smpsAlterNote       $00
00093BC6 E701                       	dc.b	smpsNoAttack, $01
00093BC8 E1FF                       	smpsAlterNote       $FF
00093BCA E701                       	dc.b	smpsNoAttack, $01
00093BCC E103                       	smpsAlterNote       $03
00093BCE E701                       	dc.b	smpsNoAttack, $01
00093BD0 E109                       	smpsAlterNote       $09
00093BD2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093BD6 E106                       	smpsAlterNote       $06
00093BD8 E701                       	dc.b	smpsNoAttack, $01
00093BDA E100                       	smpsAlterNote       $00
00093BDC E701                       	dc.b	smpsNoAttack, $01
00093BDE E10C                       	smpsAlterNote       $0C
00093BE0 C703 8001                  	dc.b	nBb5, $03, nRst, $01
00093BE4 E10B                       	smpsAlterNote       $0B
00093BE6 C603                       	dc.b	nA5, $03
00093BE8 E109                       	smpsAlterNote       $09
00093BEA C403 8001                  	dc.b	nG5, $03, nRst, $01
00093BEE E10B                       	smpsAlterNote       $0B
00093BF0 C60D                       	dc.b	nA5, $0D
00093BF2 E105                       	smpsAlterNote       $05
00093BF4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093BF8 E10B                       	smpsAlterNote       $0B
00093BFA E701                       	dc.b	smpsNoAttack, $01
00093BFC E10E                       	smpsAlterNote       $0E
00093BFE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093C02 E108                       	smpsAlterNote       $08
00093C04 E701                       	dc.b	smpsNoAttack, $01
00093C06 E104                       	smpsAlterNote       $04
00093C08 E701                       	dc.b	smpsNoAttack, $01
00093C0A E105                       	smpsAlterNote       $05
00093C0C E701                       	dc.b	smpsNoAttack, $01
00093C0E E10B                       	smpsAlterNote       $0B
00093C10 E701                       	dc.b	smpsNoAttack, $01
00093C12 E10F                       	smpsAlterNote       $0F
00093C14 E701                       	dc.b	smpsNoAttack, $01
00093C16 E10B                       	smpsAlterNote       $0B
00093C18 E701                       	dc.b	smpsNoAttack, $01
00093C1A E108                       	smpsAlterNote       $08
00093C1C E701                       	dc.b	smpsNoAttack, $01
00093C1E E104                       	smpsAlterNote       $04
00093C20 E701                       	dc.b	smpsNoAttack, $01
00093C22 E108                       	smpsAlterNote       $08
00093C24 E701                       	dc.b	smpsNoAttack, $01
00093C26 E10E                       	smpsAlterNote       $0E
00093C28 E701                       	dc.b	smpsNoAttack, $01
00093C2A E10F                       	smpsAlterNote       $0F
00093C2C E701                       	dc.b	smpsNoAttack, $01
00093C2E E10B                       	smpsAlterNote       $0B
00093C30 E701                       	dc.b	smpsNoAttack, $01
00093C32 E105                       	smpsAlterNote       $05
00093C34 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093C38 E108                       	smpsAlterNote       $08
00093C3A E701                       	dc.b	smpsNoAttack, $01
00093C3C E10E                       	smpsAlterNote       $0E
00093C3E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093C42 E108                       	smpsAlterNote       $08
00093C44 E701                       	dc.b	smpsNoAttack, $01
00093C46 E105                       	smpsAlterNote       $05
00093C48 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093C4C E10B                       	smpsAlterNote       $0B
00093C4E E701                       	dc.b	smpsNoAttack, $01
00093C50 E10F                       	smpsAlterNote       $0F
00093C52 E701 800E                  	dc.b	smpsNoAttack, $01, nRst, $0E
00093C56 E107                       	smpsAlterNote       $07
00093C58 BF03 8001                  	dc.b	nD5, $03, nRst, $01
00093C5C E108                       	smpsAlterNote       $08
00093C5E C103                       	dc.b	nE5, $03
00093C60 E109                       	smpsAlterNote       $09
00093C62 C203 8001 C402 8001        	dc.b	nF5, $03, nRst, $01, nG5, $02, nRst, $01
00093C6A E10B                       	smpsAlterNote       $0B
00093C6C C606 8001                  	dc.b	nA5, $06, nRst, $01
00093C70 E107                       	smpsAlterNote       $07
00093C72 BF03                       	dc.b	nD5, $03
00093C74 E106                       	smpsAlterNote       $06
00093C76 C90D 8001                  	dc.b	nC6, $0D, nRst, $01
00093C7A E107                       	smpsAlterNote       $07
00093C7C CB03                       	dc.b	nD6, $03
00093C7E E10C                       	smpsAlterNote       $0C
00093C80 C704 8001                  	dc.b	nBb5, $04, nRst, $01
00093C84 E10B                       	smpsAlterNote       $0B
00093C86 C604 8001                  	dc.b	nA5, $04, nRst, $01
00093C8A E109                       	smpsAlterNote       $09
00093C8C C404                       	dc.b	nG5, $04
00093C8E E10B                       	smpsAlterNote       $0B
00093C90 C60D                       	dc.b	nA5, $0D
00093C92 E108                       	smpsAlterNote       $08
00093C94 E701                       	dc.b	smpsNoAttack, $01
00093C96 E104                       	smpsAlterNote       $04
00093C98 E701                       	dc.b	smpsNoAttack, $01
00093C9A E108                       	smpsAlterNote       $08
00093C9C E701                       	dc.b	smpsNoAttack, $01
00093C9E E10B                       	smpsAlterNote       $0B
00093CA0 E701                       	dc.b	smpsNoAttack, $01
00093CA2 E10F                       	smpsAlterNote       $0F
00093CA4 E701                       	dc.b	smpsNoAttack, $01
00093CA6 E10B                       	smpsAlterNote       $0B
00093CA8 E701                       	dc.b	smpsNoAttack, $01
00093CAA E105                       	smpsAlterNote       $05
00093CAC E701                       	dc.b	smpsNoAttack, $01
00093CAE E104                       	smpsAlterNote       $04
00093CB0 E701                       	dc.b	smpsNoAttack, $01
00093CB2 E108                       	smpsAlterNote       $08
00093CB4 E701                       	dc.b	smpsNoAttack, $01
00093CB6 E10E                       	smpsAlterNote       $0E
00093CB8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093CBC E10B                       	smpsAlterNote       $0B
00093CBE E701                       	dc.b	smpsNoAttack, $01
00093CC0 E105                       	smpsAlterNote       $05
00093CC2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093CC6 E10B                       	smpsAlterNote       $0B
00093CC8 E701                       	dc.b	smpsNoAttack, $01
00093CCA E10E                       	smpsAlterNote       $0E
00093CCC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093CD0 E108                       	smpsAlterNote       $08
00093CD2 E701                       	dc.b	smpsNoAttack, $01
00093CD4 E104                       	smpsAlterNote       $04
00093CD6 E701                       	dc.b	smpsNoAttack, $01
00093CD8 E105                       	smpsAlterNote       $05
00093CDA E701                       	dc.b	smpsNoAttack, $01
00093CDC E10B                       	smpsAlterNote       $0B
00093CDE E701                       	dc.b	smpsNoAttack, $01
00093CE0 E10F                       	smpsAlterNote       $0F
00093CE2 E701                       	dc.b	smpsNoAttack, $01
00093CE4 E10B                       	smpsAlterNote       $0B
00093CE6 E701                       	dc.b	smpsNoAttack, $01
00093CE8 E108                       	smpsAlterNote       $08
00093CEA E701                       	dc.b	smpsNoAttack, $01
00093CEC E105                       	smpsAlterNote       $05
00093CEE 8001                       	dc.b	nRst, $01
00093CF0 E109                       	smpsAlterNote       $09
00093CF2 C401                       	dc.b	nG5, $01
00093CF4 E10B                       	smpsAlterNote       $0B
00093CF6 E7C5 02C6 0D80 01C6 04     	dc.b	smpsNoAttack, nAb5, $02, nA5, $0D, nRst, $01, nA5, $04
00093CFF E109                       	smpsAlterNote       $09
00093D01 C404 8001                  	dc.b	nG5, $04, nRst, $01
00093D05 E10B                       	smpsAlterNote       $0B
00093D07 C604 8001                  	dc.b	nA5, $04, nRst, $01
00093D0B E107                       	smpsAlterNote       $07
00093D0D BF0D                       	dc.b	nD5, $0D
00093D0F E101                       	smpsAlterNote       $01
00093D11 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093D15 E104                       	smpsAlterNote       $04
00093D17 E701                       	dc.b	smpsNoAttack, $01
00093D19 E10A                       	smpsAlterNote       $0A
00093D1B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093D1F E104                       	smpsAlterNote       $04
00093D21 E701                       	dc.b	smpsNoAttack, $01
00093D23 E101                       	smpsAlterNote       $01
00093D25 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093D29 E107                       	smpsAlterNote       $07
00093D2B E701                       	dc.b	smpsNoAttack, $01
00093D2D E10B                       	smpsAlterNote       $0B
00093D2F E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00093D33 E108                       	smpsAlterNote       $08
00093D35 C101                       	dc.b	nE5, $01
00093D37 E109                       	smpsAlterNote       $09
00093D39 E7C2 01C4 01               	dc.b	smpsNoAttack, nF5, $01, nG5, $01
00093D3E E10B                       	smpsAlterNote       $0B
00093D40 C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
00093D48 E108                       	smpsAlterNote       $08
00093D4A CD06                       	dc.b	nE6, $06
00093D4C E109                       	smpsAlterNote       $09
00093D4E CE07                       	dc.b	nF6, $07
00093D50 E108                       	smpsAlterNote       $08
00093D52 CD03 8001                  	dc.b	nE6, $03, nRst, $01
00093D56 E106                       	smpsAlterNote       $06
00093D58 C903                       	dc.b	nC6, $03
00093D5A E109                       	smpsAlterNote       $09
00093D5C C403 8001                  	dc.b	nG5, $03, nRst, $01
00093D60 E10C                       	smpsAlterNote       $0C
00093D62 C70D                       	dc.b	nBb5, $0D
00093D64 E106                       	smpsAlterNote       $06
00093D66 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093D6A E109                       	smpsAlterNote       $09
00093D6C E701                       	dc.b	smpsNoAttack, $01
00093D6E E10F                       	smpsAlterNote       $0F
00093D70 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093D74 E109                       	smpsAlterNote       $09
00093D76 E701                       	dc.b	smpsNoAttack, $01
00093D78 E106                       	smpsAlterNote       $06
00093D7A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093D7E E10C                       	smpsAlterNote       $0C
00093D80 E701                       	dc.b	smpsNoAttack, $01
00093D82 E110                       	smpsAlterNote       $10
00093D84 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00093D88 E10B                       	smpsAlterNote       $0B
00093D8A C606 C50E                  	dc.b	nA5, $06, nAb5, $0E
00093D8E E105                       	smpsAlterNote       $05
00093D90 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093D94 E10B                       	smpsAlterNote       $0B
00093D96 E701                       	dc.b	smpsNoAttack, $01
00093D98 E10E                       	smpsAlterNote       $0E
00093D9A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093D9E E108                       	smpsAlterNote       $08
00093DA0 E701                       	dc.b	smpsNoAttack, $01
00093DA2 E104                       	smpsAlterNote       $04
00093DA4 E701                       	dc.b	smpsNoAttack, $01
00093DA6 E105                       	smpsAlterNote       $05
00093DA8 E701                       	dc.b	smpsNoAttack, $01
00093DAA E10B                       	smpsAlterNote       $0B
00093DAC E701                       	dc.b	smpsNoAttack, $01
00093DAE E10F                       	smpsAlterNote       $0F
00093DB0 E701                       	dc.b	smpsNoAttack, $01
00093DB2 E10B                       	smpsAlterNote       $0B
00093DB4 E701                       	dc.b	smpsNoAttack, $01
00093DB6 E108                       	smpsAlterNote       $08
00093DB8 E701                       	dc.b	smpsNoAttack, $01
00093DBA E104                       	smpsAlterNote       $04
00093DBC E701                       	dc.b	smpsNoAttack, $01
00093DBE E108                       	smpsAlterNote       $08
00093DC0 E701                       	dc.b	smpsNoAttack, $01
00093DC2 E10E                       	smpsAlterNote       $0E
00093DC4 E701                       	dc.b	smpsNoAttack, $01
00093DC6 E10F                       	smpsAlterNote       $0F
00093DC8 E701                       	dc.b	smpsNoAttack, $01
00093DCA E10B                       	smpsAlterNote       $0B
00093DCC E701                       	dc.b	smpsNoAttack, $01
00093DCE E105                       	smpsAlterNote       $05
00093DD0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093DD4 E108                       	smpsAlterNote       $08
00093DD6 E701                       	dc.b	smpsNoAttack, $01
00093DD8 E10E                       	smpsAlterNote       $0E
00093DDA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093DDE E108                       	smpsAlterNote       $08
00093DE0 E701                       	dc.b	smpsNoAttack, $01
00093DE2 E105                       	smpsAlterNote       $05
00093DE4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093DE8 E10B                       	smpsAlterNote       $0B
00093DEA E701                       	dc.b	smpsNoAttack, $01
00093DEC E10F                       	smpsAlterNote       $0F
00093DEE E701                       	dc.b	smpsNoAttack, $01
00093DF0 E10E                       	smpsAlterNote       $0E
00093DF2 E701                       	dc.b	smpsNoAttack, $01
00093DF4 E108                       	smpsAlterNote       $08
00093DF6 E701                       	dc.b	smpsNoAttack, $01
00093DF8 E104                       	smpsAlterNote       $04
00093DFA E701                       	dc.b	smpsNoAttack, $01
00093DFC E108                       	smpsAlterNote       $08
00093DFE E701                       	dc.b	smpsNoAttack, $01
00093E00 E10E                       	smpsAlterNote       $0E
00093E02 E701                       	dc.b	smpsNoAttack, $01
00093E04 E10F                       	smpsAlterNote       $0F
00093E06 E701                       	dc.b	smpsNoAttack, $01
00093E08 E10B                       	smpsAlterNote       $0B
00093E0A E701                       	dc.b	smpsNoAttack, $01
00093E0C E105                       	smpsAlterNote       $05
00093E0E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093E12 E108                       	smpsAlterNote       $08
00093E14 E701                       	dc.b	smpsNoAttack, $01
00093E16 E10E                       	smpsAlterNote       $0E
00093E18 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093E1C E108                       	smpsAlterNote       $08
00093E1E E701                       	dc.b	smpsNoAttack, $01
00093E20 E105                       	smpsAlterNote       $05
00093E22 E701                       	dc.b	smpsNoAttack, $01
00093E24 E10B                       	smpsAlterNote       $0B
00093E26 C60D                       	dc.b	nA5, $0D
00093E28 E108                       	smpsAlterNote       $08
00093E2A E701                       	dc.b	smpsNoAttack, $01
00093E2C E104                       	smpsAlterNote       $04
00093E2E E701                       	dc.b	smpsNoAttack, $01
00093E30 E105                       	smpsAlterNote       $05
00093E32 E701                       	dc.b	smpsNoAttack, $01
00093E34 E10B                       	smpsAlterNote       $0B
00093E36 E701                       	dc.b	smpsNoAttack, $01
00093E38 E10F                       	smpsAlterNote       $0F
00093E3A E701                       	dc.b	smpsNoAttack, $01
00093E3C E10B                       	smpsAlterNote       $0B
00093E3E E701                       	dc.b	smpsNoAttack, $01
00093E40 E108                       	smpsAlterNote       $08
00093E42 E701                       	dc.b	smpsNoAttack, $01
00093E44 E104                       	smpsAlterNote       $04
00093E46 E701                       	dc.b	smpsNoAttack, $01
00093E48 E108                       	smpsAlterNote       $08
00093E4A E701                       	dc.b	smpsNoAttack, $01
00093E4C E10E                       	smpsAlterNote       $0E
00093E4E E701                       	dc.b	smpsNoAttack, $01
00093E50 E10F                       	smpsAlterNote       $0F
00093E52 E701                       	dc.b	smpsNoAttack, $01
00093E56 E109                       	smpsAlterNote       $09
00093E58 E6FF                       	smpsAlterVol        $FF
00093E5A C206 8001 C203 C203 8001   	dc.b	nF5, $06, nRst, $01, nF5, $03, nF5, $03, nRst, $01
00093E64 E108                       	smpsAlterNote       $08
00093E66 C103 800E                  	dc.b	nE5, $03, nRst, $0E
00093E6C E107                       	smpsAlterNote       $07
00093E6E E601                       	smpsAlterVol        $01
00093E70 BF03                       	dc.b	nD5, $03
00093E72 E108                       	smpsAlterNote       $08
00093E74 C103 8001                  	dc.b	nE5, $03, nRst, $01
00093E78 E109                       	smpsAlterNote       $09
00093E7A C203 C403 8001             	dc.b	nF5, $03, nG5, $03, nRst, $01
00093E80 E10B                       	smpsAlterNote       $0B
00093E82 C606 8001                  	dc.b	nA5, $06, nRst, $01
00093E86 E107                       	smpsAlterNote       $07
00093E88 BF02 8001                  	dc.b	nD5, $02, nRst, $01
00093E8C E106                       	smpsAlterNote       $06
00093E8E C90D                       	dc.b	nC6, $0D
00093E90 E103                       	smpsAlterNote       $03
00093E92 E701                       	dc.b	smpsNoAttack, $01
00093E94 E1FF                       	smpsAlterNote       $FF
00093E96 E701                       	dc.b	smpsNoAttack, $01
00093E98 E103                       	smpsAlterNote       $03
00093E9A E701                       	dc.b	smpsNoAttack, $01
00093E9C E109                       	smpsAlterNote       $09
00093E9E E701                       	dc.b	smpsNoAttack, $01
00093EA0 E10A                       	smpsAlterNote       $0A
00093EA2 E701                       	dc.b	smpsNoAttack, $01
00093EA4 E106                       	smpsAlterNote       $06
00093EA6 E701                       	dc.b	smpsNoAttack, $01
00093EA8 E100                       	smpsAlterNote       $00
00093EAA E701                       	dc.b	smpsNoAttack, $01
00093EAC E10C                       	smpsAlterNote       $0C
00093EAE C703 8001                  	dc.b	nBb5, $03, nRst, $01
00093EB2 E10B                       	smpsAlterNote       $0B
00093EB4 C603                       	dc.b	nA5, $03
00093EB6 E109                       	smpsAlterNote       $09
00093EB8 C403 8001                  	dc.b	nG5, $03, nRst, $01
00093EBC E10B                       	smpsAlterNote       $0B
00093EBE C60D                       	dc.b	nA5, $0D
00093EC0 E105                       	smpsAlterNote       $05
00093EC2 E701                       	dc.b	smpsNoAttack, $01
00093EC4 E104                       	smpsAlterNote       $04
00093EC6 E701                       	dc.b	smpsNoAttack, $01
00093EC8 E108                       	smpsAlterNote       $08
00093ECA E701                       	dc.b	smpsNoAttack, $01
00093ECC E10E                       	smpsAlterNote       $0E
00093ECE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093ED2 E10B                       	smpsAlterNote       $0B
00093ED4 E701                       	dc.b	smpsNoAttack, $01
00093ED6 E105                       	smpsAlterNote       $05
00093ED8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093EDC E10B                       	smpsAlterNote       $0B
00093EDE E701                       	dc.b	smpsNoAttack, $01
00093EE0 E10E                       	smpsAlterNote       $0E
00093EE2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093EE6 E108                       	smpsAlterNote       $08
00093EE8 E701                       	dc.b	smpsNoAttack, $01
00093EEA E104                       	smpsAlterNote       $04
00093EEC E701                       	dc.b	smpsNoAttack, $01
00093EEE E105                       	smpsAlterNote       $05
00093EF0 E701                       	dc.b	smpsNoAttack, $01
00093EF2 E10B                       	smpsAlterNote       $0B
00093EF4 E701                       	dc.b	smpsNoAttack, $01
00093EF6 E10F                       	smpsAlterNote       $0F
00093EF8 E701                       	dc.b	smpsNoAttack, $01
00093EFA E10B                       	smpsAlterNote       $0B
00093EFC E701                       	dc.b	smpsNoAttack, $01
00093EFE E108                       	smpsAlterNote       $08
00093F00 E701                       	dc.b	smpsNoAttack, $01
00093F02 E104                       	smpsAlterNote       $04
00093F04 E701                       	dc.b	smpsNoAttack, $01
00093F06 E108                       	smpsAlterNote       $08
00093F08 E701                       	dc.b	smpsNoAttack, $01
00093F0A E10E                       	smpsAlterNote       $0E
00093F0C E701                       	dc.b	smpsNoAttack, $01
00093F0E E10F                       	smpsAlterNote       $0F
00093F10 E701                       	dc.b	smpsNoAttack, $01
00093F12 E10B                       	smpsAlterNote       $0B
00093F14 E701                       	dc.b	smpsNoAttack, $01
00093F16 E105                       	smpsAlterNote       $05
00093F18 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093F1C E108                       	smpsAlterNote       $08
00093F1E E701                       	dc.b	smpsNoAttack, $01
00093F20 E10E                       	smpsAlterNote       $0E
00093F22 E701                       	dc.b	smpsNoAttack, $01
00093F24 E10F                       	smpsAlterNote       $0F
00093F26 800F                       	dc.b	nRst, $0F
00093F28 E107                       	smpsAlterNote       $07
00093F2A BF02 8001                  	dc.b	nD5, $02, nRst, $01
00093F2E E108                       	smpsAlterNote       $08
00093F30 C103                       	dc.b	nE5, $03
00093F32 E109                       	smpsAlterNote       $09
00093F34 C203 8001 C403             	dc.b	nF5, $03, nRst, $01, nG5, $03
00093F3A E10B                       	smpsAlterNote       $0B
00093F3C C606 8001                  	dc.b	nA5, $06, nRst, $01
00093F40 E107                       	smpsAlterNote       $07
00093F42 BF03                       	dc.b	nD5, $03
00093F44 E106                       	smpsAlterNote       $06
00093F46 C90E                       	dc.b	nC6, $0E
00093F48 E107                       	smpsAlterNote       $07
00093F4A CB03 8001                  	dc.b	nD6, $03, nRst, $01
00093F4E E10C                       	smpsAlterNote       $0C
00093F50 C704                       	dc.b	nBb5, $04
00093F52 E10B                       	smpsAlterNote       $0B
00093F54 C604 8001                  	dc.b	nA5, $04, nRst, $01
00093F58 E109                       	smpsAlterNote       $09
00093F5A C404                       	dc.b	nG5, $04
00093F5C E10B                       	smpsAlterNote       $0B
00093F5E C60D                       	dc.b	nA5, $0D
00093F60 E108                       	smpsAlterNote       $08
00093F62 E701                       	dc.b	smpsNoAttack, $01
00093F64 E105                       	smpsAlterNote       $05
00093F66 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093F6A E10B                       	smpsAlterNote       $0B
00093F6C E701                       	dc.b	smpsNoAttack, $01
00093F6E E10F                       	smpsAlterNote       $0F
00093F70 E701                       	dc.b	smpsNoAttack, $01
00093F72 E10E                       	smpsAlterNote       $0E
00093F74 E701                       	dc.b	smpsNoAttack, $01
00093F76 E108                       	smpsAlterNote       $08
00093F78 E701                       	dc.b	smpsNoAttack, $01
00093F7A E104                       	smpsAlterNote       $04
00093F7C E701                       	dc.b	smpsNoAttack, $01
00093F7E E108                       	smpsAlterNote       $08
00093F80 E701                       	dc.b	smpsNoAttack, $01
00093F82 E10B                       	smpsAlterNote       $0B
00093F84 E701                       	dc.b	smpsNoAttack, $01
00093F86 E10F                       	smpsAlterNote       $0F
00093F88 E701                       	dc.b	smpsNoAttack, $01
00093F8A E10B                       	smpsAlterNote       $0B
00093F8C E701                       	dc.b	smpsNoAttack, $01
00093F8E E105                       	smpsAlterNote       $05
00093F90 E701                       	dc.b	smpsNoAttack, $01
00093F92 E104                       	smpsAlterNote       $04
00093F94 E701                       	dc.b	smpsNoAttack, $01
00093F96 E108                       	smpsAlterNote       $08
00093F98 E701                       	dc.b	smpsNoAttack, $01
00093F9A E10E                       	smpsAlterNote       $0E
00093F9C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093FA0 E10B                       	smpsAlterNote       $0B
00093FA2 E701                       	dc.b	smpsNoAttack, $01
00093FA4 E105                       	smpsAlterNote       $05
00093FA6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093FAA E10B                       	smpsAlterNote       $0B
00093FAC E701                       	dc.b	smpsNoAttack, $01
00093FAE E10E                       	smpsAlterNote       $0E
00093FB0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093FB4 E108                       	smpsAlterNote       $08
00093FB6 E701                       	dc.b	smpsNoAttack, $01
00093FB8 E105                       	smpsAlterNote       $05
00093FBA 8001                       	dc.b	nRst, $01
00093FBC E109                       	smpsAlterNote       $09
00093FBE C402                       	dc.b	nG5, $02
00093FC0 E10B                       	smpsAlterNote       $0B
00093FC2 E7C5 01C6 0EC6 0480 01     	dc.b	smpsNoAttack, nAb5, $01, nA5, $0E, nA5, $04, nRst, $01
00093FCB E109                       	smpsAlterNote       $09
00093FCD C404                       	dc.b	nG5, $04
00093FCF E10B                       	smpsAlterNote       $0B
00093FD1 C604 8001                  	dc.b	nA5, $04, nRst, $01
00093FD5 E107                       	smpsAlterNote       $07
00093FD7 BF0D                       	dc.b	nD5, $0D
00093FD9 E101                       	smpsAlterNote       $01
00093FDB E701                       	dc.b	smpsNoAttack, $01
00093FDD E100                       	smpsAlterNote       $00
00093FDF E701                       	dc.b	smpsNoAttack, $01
00093FE1 E104                       	smpsAlterNote       $04
00093FE3 E701                       	dc.b	smpsNoAttack, $01
00093FE5 E10A                       	smpsAlterNote       $0A
00093FE7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093FEB E107                       	smpsAlterNote       $07
00093FED E701                       	dc.b	smpsNoAttack, $01
00093FEF E101                       	smpsAlterNote       $01
00093FF1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093FF5 E107                       	smpsAlterNote       $07
00093FF7 E701                       	dc.b	smpsNoAttack, $01
00093FF9 E10A                       	smpsAlterNote       $0A
00093FFB E701                       	dc.b	smpsNoAttack, $01
00093FFD E10B                       	smpsAlterNote       $0B
00093FFF 8001                       	dc.b	nRst, $01
00094001 E108                       	smpsAlterNote       $08
00094003 C101                       	dc.b	nE5, $01
00094005 E109                       	smpsAlterNote       $09
00094007 E7C2 01C4 01               	dc.b	smpsNoAttack, nF5, $01, nG5, $01
0009400C E10B                       	smpsAlterNote       $0B
0009400E C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
00094016 E108                       	smpsAlterNote       $08
00094018 CD06 8001                  	dc.b	nE6, $06, nRst, $01
0009401C E109                       	smpsAlterNote       $09
0009401E CE06 8001                  	dc.b	nF6, $06, nRst, $01
00094022 E108                       	smpsAlterNote       $08
00094024 CD02 8001                  	dc.b	nE6, $02, nRst, $01
00094028 E106                       	smpsAlterNote       $06
0009402A C903                       	dc.b	nC6, $03
0009402C E109                       	smpsAlterNote       $09
0009402E C403 8001                  	dc.b	nG5, $03, nRst, $01
00094032 E10C                       	smpsAlterNote       $0C
00094034 C70D                       	dc.b	nBb5, $0D
00094036 E109                       	smpsAlterNote       $09
00094038 E701                       	dc.b	smpsNoAttack, $01
0009403A E105                       	smpsAlterNote       $05
0009403C E701                       	dc.b	smpsNoAttack, $01
0009403E E109                       	smpsAlterNote       $09
00094040 E701                       	dc.b	smpsNoAttack, $01
00094042 E10F                       	smpsAlterNote       $0F
00094044 E701                       	dc.b	smpsNoAttack, $01
00094046 E110                       	smpsAlterNote       $10
00094048 E701                       	dc.b	smpsNoAttack, $01
0009404A E10C                       	smpsAlterNote       $0C
0009404C E701                       	dc.b	smpsNoAttack, $01
0009404E E106                       	smpsAlterNote       $06
00094050 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094054 E109                       	smpsAlterNote       $09
00094056 E701                       	dc.b	smpsNoAttack, $01
00094058 E10F                       	smpsAlterNote       $0F
0009405A E701                       	dc.b	smpsNoAttack, $01
0009405C E110                       	smpsAlterNote       $10
0009405E 8001                       	dc.b	nRst, $01
00094060 E10B                       	smpsAlterNote       $0B
00094062 C606 8001 C50D             	dc.b	nA5, $06, nRst, $01, nAb5, $0D
00094068 E105                       	smpsAlterNote       $05
0009406A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009406E E108                       	smpsAlterNote       $08
00094070 E701                       	dc.b	smpsNoAttack, $01
00094072 E10E                       	smpsAlterNote       $0E
00094074 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094078 E108                       	smpsAlterNote       $08
0009407A E701                       	dc.b	smpsNoAttack, $01
0009407C E105                       	smpsAlterNote       $05
0009407E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094082 E10B                       	smpsAlterNote       $0B
00094084 E701                       	dc.b	smpsNoAttack, $01
00094086 E10F                       	smpsAlterNote       $0F
00094088 E701                       	dc.b	smpsNoAttack, $01
0009408A E10E                       	smpsAlterNote       $0E
0009408C E701                       	dc.b	smpsNoAttack, $01
0009408E E108                       	smpsAlterNote       $08
00094090 E701                       	dc.b	smpsNoAttack, $01
00094092 E104                       	smpsAlterNote       $04
00094094 E701                       	dc.b	smpsNoAttack, $01
00094096 E108                       	smpsAlterNote       $08
00094098 E701                       	dc.b	smpsNoAttack, $01
0009409A E10B                       	smpsAlterNote       $0B
0009409C E701                       	dc.b	smpsNoAttack, $01
0009409E E10F                       	smpsAlterNote       $0F
000940A0 E701                       	dc.b	smpsNoAttack, $01
000940A2 E10B                       	smpsAlterNote       $0B
000940A4 E701                       	dc.b	smpsNoAttack, $01
000940A6 E105                       	smpsAlterNote       $05
000940A8 E701                       	dc.b	smpsNoAttack, $01
000940AA E104                       	smpsAlterNote       $04
000940AC E701                       	dc.b	smpsNoAttack, $01
000940AE E108                       	smpsAlterNote       $08
000940B0 E701                       	dc.b	smpsNoAttack, $01
000940B2 E10E                       	smpsAlterNote       $0E
000940B4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000940B8 E10B                       	smpsAlterNote       $0B
000940BA E701                       	dc.b	smpsNoAttack, $01
000940BC E105                       	smpsAlterNote       $05
000940BE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000940C2 E10B                       	smpsAlterNote       $0B
000940C4 E701                       	dc.b	smpsNoAttack, $01
000940C6 E10E                       	smpsAlterNote       $0E
000940C8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000940CC E108                       	smpsAlterNote       $08
000940CE E701                       	dc.b	smpsNoAttack, $01
000940D0 E104                       	smpsAlterNote       $04
000940D2 E701                       	dc.b	smpsNoAttack, $01
000940D4 E105                       	smpsAlterNote       $05
000940D6 E701                       	dc.b	smpsNoAttack, $01
000940D8 E10B                       	smpsAlterNote       $0B
000940DA E701                       	dc.b	smpsNoAttack, $01
000940DC E10F                       	smpsAlterNote       $0F
000940DE E701                       	dc.b	smpsNoAttack, $01
000940E0 E10B                       	smpsAlterNote       $0B
000940E2 E701                       	dc.b	smpsNoAttack, $01
000940E4 E108                       	smpsAlterNote       $08
000940E6 E701                       	dc.b	smpsNoAttack, $01
000940E8 E104                       	smpsAlterNote       $04
000940EA E701                       	dc.b	smpsNoAttack, $01
000940EC E108                       	smpsAlterNote       $08
000940EE E701                       	dc.b	smpsNoAttack, $01
000940F0 E10E                       	smpsAlterNote       $0E
000940F2 E701                       	dc.b	smpsNoAttack, $01
000940F4 E10F                       	smpsAlterNote       $0F
000940F6 E701                       	dc.b	smpsNoAttack, $01
000940F8 E10B                       	smpsAlterNote       $0B
000940FA E701                       	dc.b	smpsNoAttack, $01
000940FC E105                       	smpsAlterNote       $05
000940FE E701                       	dc.b	smpsNoAttack, $01
00094100 E10B                       	smpsAlterNote       $0B
00094102 C60E                       	dc.b	nA5, $0E
00094104 E105                       	smpsAlterNote       $05
00094106 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009410A E10B                       	smpsAlterNote       $0B
0009410C E701                       	dc.b	smpsNoAttack, $01
0009410E E10E                       	smpsAlterNote       $0E
00094110 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094114 E108                       	smpsAlterNote       $08
00094116 E701                       	dc.b	smpsNoAttack, $01
00094118 E104                       	smpsAlterNote       $04
0009411A E701                       	dc.b	smpsNoAttack, $01
0009411C E105                       	smpsAlterNote       $05
0009411E E701                       	dc.b	smpsNoAttack, $01
00094120 E10B                       	smpsAlterNote       $0B
00094122 E701                       	dc.b	smpsNoAttack, $01
00094124 E10F                       	smpsAlterNote       $0F
00094126 E701                       	dc.b	smpsNoAttack, $01
00094128 E10B                       	smpsAlterNote       $0B
0009412A E701                       	dc.b	smpsNoAttack, $01
0009412C E108                       	smpsAlterNote       $08
0009412E E701                       	dc.b	smpsNoAttack, $01
00094130 E104                       	smpsAlterNote       $04
00094132 E701                       	dc.b	smpsNoAttack, $01
00094134 E108                       	smpsAlterNote       $08
00094136 E701                       	dc.b	smpsNoAttack, $01
00094138 E10E                       	smpsAlterNote       $0E
0009413A E701                       	dc.b	smpsNoAttack, $01
0009413C E10F                       	smpsAlterNote       $0F
0009413E E701                       	dc.b	smpsNoAttack, $01
00094140 E10B                       	smpsAlterNote       $0B
00094142 E701                       	dc.b	smpsNoAttack, $01
00094144 E105                       	smpsAlterNote       $05
00094146 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009414A E108                       	smpsAlterNote       $08
0009414C E701                       	dc.b	smpsNoAttack, $01
0009414E E10E                       	smpsAlterNote       $0E
00094150 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094154 E108                       	smpsAlterNote       $08
00094156 E701                       	dc.b	smpsNoAttack, $01
00094158 E105                       	smpsAlterNote       $05
0009415A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009415E E10B                       	smpsAlterNote       $0B
00094160 E701                       	dc.b	smpsNoAttack, $01
00094162 E10F                       	smpsAlterNote       $0F
00094164 E701                       	dc.b	smpsNoAttack, $01
00094166 E10E                       	smpsAlterNote       $0E
00094168 E701                       	dc.b	smpsNoAttack, $01
0009416A E108                       	smpsAlterNote       $08
0009416C E701                       	dc.b	smpsNoAttack, $01
0009416E E104                       	smpsAlterNote       $04
00094170 E701                       	dc.b	smpsNoAttack, $01
00094172 E108                       	smpsAlterNote       $08
00094174 E701                       	dc.b	smpsNoAttack, $01
00094176 E10E                       	smpsAlterNote       $0E
00094178 E701                       	dc.b	smpsNoAttack, $01
0009417A E10F                       	smpsAlterNote       $0F
0009417C E701                       	dc.b	smpsNoAttack, $01
0009417E E10B                       	smpsAlterNote       $0B
00094180 E701                       	dc.b	smpsNoAttack, $01
00094182 E105                       	smpsAlterNote       $05
00094184 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094188 E108                       	smpsAlterNote       $08
0009418A E701                       	dc.b	smpsNoAttack, $01
0009418C E10E                       	smpsAlterNote       $0E
0009418E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094192 E108                       	smpsAlterNote       $08
00094194 E701                       	dc.b	smpsNoAttack, $01
00094196 E105                       	smpsAlterNote       $05
00094198 E701                       	dc.b	smpsNoAttack, $01
0009419C E10B                       	smpsAlterNote       $0B
0009419E E6FD                       	smpsAlterVol        $FD
000941A0 C604 8001                  	dc.b	nA5, $04, nRst, $01
000941A4 E109                       	smpsAlterNote       $09
000941A6 C404                       	dc.b	nG5, $04
000941A8 E10B                       	smpsAlterNote       $0B
000941AA C604 8001                  	dc.b	nA5, $04, nRst, $01
000941AE E107                       	smpsAlterNote       $07
000941B0 BF0A BF03 8001             	dc.b	nD5, $0A, nD5, $03, nRst, $01
000941B6 E10B                       	smpsAlterNote       $0B
000941B8 C604                       	dc.b	nA5, $04
000941BA E109                       	smpsAlterNote       $09
000941BC C404 8001                  	dc.b	nG5, $04, nRst, $01
000941C0 E10B                       	smpsAlterNote       $0B
000941C2 C604                       	dc.b	nA5, $04
000941C4 E108                       	smpsAlterNote       $08
000941C6 C10A 8001 C102 8001        	dc.b	nE5, $0A, nRst, $01, nE5, $02, nRst, $01
000941CE E106                       	smpsAlterNote       $06
000941D0 C904 8001                  	dc.b	nC6, $04, nRst, $01
000941D4 E10C                       	smpsAlterNote       $0C
000941D6 C704                       	dc.b	nBb5, $04
000941D8 E10B                       	smpsAlterNote       $0B
000941DA C604 8001                  	dc.b	nA5, $04, nRst, $01
000941DE E109                       	smpsAlterNote       $09
000941E0 C403 C203 8001 C402 8001   	dc.b	nG5, $03, nF5, $03, nRst, $01, nG5, $02, nRst, $01
000941EA E10B                       	smpsAlterNote       $0B
000941EC C60D                       	dc.b	nA5, $0D
000941EE E108                       	smpsAlterNote       $08
000941F0 E701                       	dc.b	smpsNoAttack, $01
000941F2 E104                       	smpsAlterNote       $04
000941F4 E701                       	dc.b	smpsNoAttack, $01
000941F6 E108                       	smpsAlterNote       $08
000941F8 E701                       	dc.b	smpsNoAttack, $01
000941FA E10E                       	smpsAlterNote       $0E
000941FC E701                       	dc.b	smpsNoAttack, $01
000941FE E10F                       	smpsAlterNote       $0F
00094200 E701                       	dc.b	smpsNoAttack, $01
00094202 E10B                       	smpsAlterNote       $0B
00094204 E701                       	dc.b	smpsNoAttack, $01
00094206 E105                       	smpsAlterNote       $05
00094208 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009420C E108                       	smpsAlterNote       $08
0009420E E701                       	dc.b	smpsNoAttack, $01
00094210 E10E                       	smpsAlterNote       $0E
00094212 E701                       	dc.b	smpsNoAttack, $01
00094214 E10F                       	smpsAlterNote       $0F
00094216 8001                       	dc.b	nRst, $01
00094218 E109                       	smpsAlterNote       $09
0009421A C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
00094220 E108                       	smpsAlterNote       $08
00094222 C10D                       	dc.b	nE5, $0D
00094224 E102                       	smpsAlterNote       $02
00094226 E701                       	dc.b	smpsNoAttack, $01
00094228 E101                       	smpsAlterNote       $01
0009422A E701                       	dc.b	smpsNoAttack, $01
0009422C E105                       	smpsAlterNote       $05
0009422E E701                       	dc.b	smpsNoAttack, $01
00094230 E10B                       	smpsAlterNote       $0B
00094232 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094236 E108                       	smpsAlterNote       $08
00094238 E701                       	dc.b	smpsNoAttack, $01
0009423A E102                       	smpsAlterNote       $02
0009423C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094240 E108                       	smpsAlterNote       $08
00094242 E701                       	dc.b	smpsNoAttack, $01
00094244 E10B                       	smpsAlterNote       $0B
00094246 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009424A E105                       	smpsAlterNote       $05
0009424C E701                       	dc.b	smpsNoAttack, $01
0009424E E101                       	smpsAlterNote       $01
00094250 E701                       	dc.b	smpsNoAttack, $01
00094252 E102                       	smpsAlterNote       $02
00094254 E701                       	dc.b	smpsNoAttack, $01
00094256 E108                       	smpsAlterNote       $08
00094258 E701                       	dc.b	smpsNoAttack, $01
0009425A E10C                       	smpsAlterNote       $0C
0009425C E701                       	dc.b	smpsNoAttack, $01
0009425E E108                       	smpsAlterNote       $08
00094260 E701                       	dc.b	smpsNoAttack, $01
00094262 E105                       	smpsAlterNote       $05
00094264 E701                       	dc.b	smpsNoAttack, $01
00094266 E101                       	smpsAlterNote       $01
00094268 E701                       	dc.b	smpsNoAttack, $01
0009426A E105                       	smpsAlterNote       $05
0009426C E701                       	dc.b	smpsNoAttack, $01
0009426E E10B                       	smpsAlterNote       $0B
00094270 E701                       	dc.b	smpsNoAttack, $01
00094272 E10C                       	smpsAlterNote       $0C
00094274 E701                       	dc.b	smpsNoAttack, $01
00094276 E108                       	smpsAlterNote       $08
00094278 E701                       	dc.b	smpsNoAttack, $01
0009427A E102                       	smpsAlterNote       $02
0009427C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094280 E105                       	smpsAlterNote       $05
00094282 E701                       	dc.b	smpsNoAttack, $01
00094284 E10B                       	smpsAlterNote       $0B
00094286 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009428A E105                       	smpsAlterNote       $05
0009428C E701                       	dc.b	smpsNoAttack, $01
0009428E E102                       	smpsAlterNote       $02
00094290 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094294 E108                       	smpsAlterNote       $08
00094296 E701                       	dc.b	smpsNoAttack, $01
00094298 E10C                       	smpsAlterNote       $0C
0009429A E701                       	dc.b	smpsNoAttack, $01
0009429C E10B                       	smpsAlterNote       $0B
0009429E E701                       	dc.b	smpsNoAttack, $01
000942A0 E105                       	smpsAlterNote       $05
000942A2 E701                       	dc.b	smpsNoAttack, $01
000942A4 E101                       	smpsAlterNote       $01
000942A6 E701                       	dc.b	smpsNoAttack, $01
000942A8 E105                       	smpsAlterNote       $05
000942AA E701                       	dc.b	smpsNoAttack, $01
000942AC E108                       	smpsAlterNote       $08
000942AE E701                       	dc.b	smpsNoAttack, $01
000942B0 E10C                       	smpsAlterNote       $0C
000942B2 E701                       	dc.b	smpsNoAttack, $01
000942B4 E108                       	smpsAlterNote       $08
000942B6 E701                       	dc.b	smpsNoAttack, $01
000942B8 E102                       	smpsAlterNote       $02
000942BA E701                       	dc.b	smpsNoAttack, $01
000942BC E101                       	smpsAlterNote       $01
000942BE E701                       	dc.b	smpsNoAttack, $01
000942C0 E105                       	smpsAlterNote       $05
000942C2 E701                       	dc.b	smpsNoAttack, $01
000942C4 E10B                       	smpsAlterNote       $0B
000942C6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000942CA E108                       	smpsAlterNote       $08
000942CC E701                       	dc.b	smpsNoAttack, $01
000942CE E102                       	smpsAlterNote       $02
000942D0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000942D4 E108                       	smpsAlterNote       $08
000942D6 E701                       	dc.b	smpsNoAttack, $01
000942D8 E10B                       	smpsAlterNote       $0B
000942DA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000942DE E105                       	smpsAlterNote       $05
000942E0 E701                       	dc.b	smpsNoAttack, $01
000942E2 E101                       	smpsAlterNote       $01
000942E4 E701                       	dc.b	smpsNoAttack, $01
000942E6 E102                       	smpsAlterNote       $02
000942E8 E701                       	dc.b	smpsNoAttack, $01
000942EA E108                       	smpsAlterNote       $08
000942EC E701                       	dc.b	smpsNoAttack, $01
000942EE E10C                       	smpsAlterNote       $0C
000942F0 E701                       	dc.b	smpsNoAttack, $01
000942F2 E108                       	smpsAlterNote       $08
000942F4 E701                       	dc.b	smpsNoAttack, $01
000942F6 E105                       	smpsAlterNote       $05
000942F8 E701                       	dc.b	smpsNoAttack, $01
000942FA E101                       	smpsAlterNote       $01
000942FC E701                       	dc.b	smpsNoAttack, $01
000942FE E105                       	smpsAlterNote       $05
00094300 E701                       	dc.b	smpsNoAttack, $01
00094302 E10B                       	smpsAlterNote       $0B
00094304 E701                       	dc.b	smpsNoAttack, $01
00094306 E10C                       	smpsAlterNote       $0C
00094308 E701                       	dc.b	smpsNoAttack, $01
0009430A E108                       	smpsAlterNote       $08
0009430C E701                       	dc.b	smpsNoAttack, $01
0009430E E102                       	smpsAlterNote       $02
00094310 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094314 E105                       	smpsAlterNote       $05
00094316 E701                       	dc.b	smpsNoAttack, $01
00094318 E10B                       	smpsAlterNote       $0B
0009431A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009431E E105                       	smpsAlterNote       $05
00094320 E701                       	dc.b	smpsNoAttack, $01
00094322 E101                       	smpsAlterNote       $01
00094324 E701                       	dc.b	smpsNoAttack, $01
00094326 E102                       	smpsAlterNote       $02
00094328 E701                       	dc.b	smpsNoAttack, $01
0009432A E108                       	smpsAlterNote       $08
0009432C E701                       	dc.b	smpsNoAttack, $01
0009432E E10C                       	smpsAlterNote       $0C
00094330 E701                       	dc.b	smpsNoAttack, $01
00094332 E108                       	smpsAlterNote       $08
00094334 E701                       	dc.b	smpsNoAttack, $01
00094336 E105                       	smpsAlterNote       $05
00094338 E701                       	dc.b	smpsNoAttack, $01
0009433A E101                       	smpsAlterNote       $01
0009433C E701                       	dc.b	smpsNoAttack, $01
0009433E E105                       	smpsAlterNote       $05
00094340 E701                       	dc.b	smpsNoAttack, $01
00094342 E10B                       	smpsAlterNote       $0B
00094344 E701                       	dc.b	smpsNoAttack, $01
00094346 E10C                       	smpsAlterNote       $0C
00094348 E701                       	dc.b	smpsNoAttack, $01
0009434A E108                       	smpsAlterNote       $08
0009434C E701                       	dc.b	smpsNoAttack, $01
0009434E E102                       	smpsAlterNote       $02
00094350 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094354 E105                       	smpsAlterNote       $05
00094356 E701                       	dc.b	smpsNoAttack, $01
00094358 E10B                       	smpsAlterNote       $0B
0009435A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009435E E105                       	smpsAlterNote       $05
00094360 E701                       	dc.b	smpsNoAttack, $01
00094362 E102                       	smpsAlterNote       $02
00094364 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094368 E108                       	smpsAlterNote       $08
0009436A E701                       	dc.b	smpsNoAttack, $01
0009436C E10C                       	smpsAlterNote       $0C
0009436E E701                       	dc.b	smpsNoAttack, $01
00094370 E10B                       	smpsAlterNote       $0B
00094372 E701                       	dc.b	smpsNoAttack, $01
00094374 E105                       	smpsAlterNote       $05
00094376 E701                       	dc.b	smpsNoAttack, $01
00094378 E101                       	smpsAlterNote       $01
0009437A E701                       	dc.b	smpsNoAttack, $01
0009437C E105                       	smpsAlterNote       $05
0009437E E701                       	dc.b	smpsNoAttack, $01
00094380 E108                       	smpsAlterNote       $08
00094382 E701                       	dc.b	smpsNoAttack, $01
00094384 E10C                       	smpsAlterNote       $0C
00094386 E701                       	dc.b	smpsNoAttack, $01
0009438A E10B                       	smpsAlterNote       $0B
0009438C C604 8001                  	dc.b	nA5, $04, nRst, $01
00094390 E109                       	smpsAlterNote       $09
00094392 C404                       	dc.b	nG5, $04
00094394 E10B                       	smpsAlterNote       $0B
00094396 C604 8001                  	dc.b	nA5, $04, nRst, $01
0009439A E107                       	smpsAlterNote       $07
0009439C BF0A BF03 8001             	dc.b	nD5, $0A, nD5, $03, nRst, $01
000943A2 E10B                       	smpsAlterNote       $0B
000943A4 C604                       	dc.b	nA5, $04
000943A6 E109                       	smpsAlterNote       $09
000943A8 C404 8001                  	dc.b	nG5, $04, nRst, $01
000943AC E10B                       	smpsAlterNote       $0B
000943AE C604                       	dc.b	nA5, $04
000943B0 E108                       	smpsAlterNote       $08
000943B2 C10A 8001 C103             	dc.b	nE5, $0A, nRst, $01, nE5, $03
000943B8 E106                       	smpsAlterNote       $06
000943BA C904 8001                  	dc.b	nC6, $04, nRst, $01
000943BE E10C                       	smpsAlterNote       $0C
000943C0 C704                       	dc.b	nBb5, $04
000943C2 E10B                       	smpsAlterNote       $0B
000943C4 C604 8001                  	dc.b	nA5, $04, nRst, $01
000943C8 E109                       	smpsAlterNote       $09
000943CA C403 C203 8001 C402 8001   	dc.b	nG5, $03, nF5, $03, nRst, $01, nG5, $02, nRst, $01
000943D4 E10B                       	smpsAlterNote       $0B
000943D6 C60D                       	dc.b	nA5, $0D
000943D8 E108                       	smpsAlterNote       $08
000943DA E701                       	dc.b	smpsNoAttack, $01
000943DC E104                       	smpsAlterNote       $04
000943DE E701                       	dc.b	smpsNoAttack, $01
000943E0 E108                       	smpsAlterNote       $08
000943E2 E701                       	dc.b	smpsNoAttack, $01
000943E4 E10B                       	smpsAlterNote       $0B
000943E6 E701                       	dc.b	smpsNoAttack, $01
000943E8 E10F                       	smpsAlterNote       $0F
000943EA E701                       	dc.b	smpsNoAttack, $01
000943EC E10B                       	smpsAlterNote       $0B
000943EE E701                       	dc.b	smpsNoAttack, $01
000943F0 E105                       	smpsAlterNote       $05
000943F2 E701                       	dc.b	smpsNoAttack, $01
000943F4 E104                       	smpsAlterNote       $04
000943F6 E701                       	dc.b	smpsNoAttack, $01
000943F8 E108                       	smpsAlterNote       $08
000943FA E701                       	dc.b	smpsNoAttack, $01
000943FC E10E                       	smpsAlterNote       $0E
000943FE E701                       	dc.b	smpsNoAttack, $01
00094400 E10F                       	smpsAlterNote       $0F
00094402 8001                       	dc.b	nRst, $01
00094404 E109                       	smpsAlterNote       $09
00094406 C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
0009440C E108                       	smpsAlterNote       $08
0009440E C10D                       	dc.b	nE5, $0D
00094410 E105                       	smpsAlterNote       $05
00094412 E701                       	dc.b	smpsNoAttack, $01
00094414 E101                       	smpsAlterNote       $01
00094416 E701                       	dc.b	smpsNoAttack, $01
00094418 E105                       	smpsAlterNote       $05
0009441A E701                       	dc.b	smpsNoAttack, $01
0009441C E10B                       	smpsAlterNote       $0B
0009441E E701                       	dc.b	smpsNoAttack, $01
00094420 E10C                       	smpsAlterNote       $0C
00094422 E701                       	dc.b	smpsNoAttack, $01
00094424 E108                       	smpsAlterNote       $08
00094426 E701                       	dc.b	smpsNoAttack, $01
00094428 E102                       	smpsAlterNote       $02
0009442A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009442E E105                       	smpsAlterNote       $05
00094430 E701                       	dc.b	smpsNoAttack, $01
00094432 E10B                       	smpsAlterNote       $0B
00094434 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094438 E105                       	smpsAlterNote       $05
0009443A E701                       	dc.b	smpsNoAttack, $01
0009443C E102                       	smpsAlterNote       $02
0009443E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094442 E108                       	smpsAlterNote       $08
00094444 E701                       	dc.b	smpsNoAttack, $01
00094446 E10C                       	smpsAlterNote       $0C
00094448 E701                       	dc.b	smpsNoAttack, $01
0009444A E10B                       	smpsAlterNote       $0B
0009444C E701                       	dc.b	smpsNoAttack, $01
0009444E E105                       	smpsAlterNote       $05
00094450 E701                       	dc.b	smpsNoAttack, $01
00094452 E101                       	smpsAlterNote       $01
00094454 E701                       	dc.b	smpsNoAttack, $01
00094456 E105                       	smpsAlterNote       $05
00094458 E701                       	dc.b	smpsNoAttack, $01
0009445A E108                       	smpsAlterNote       $08
0009445C E701                       	dc.b	smpsNoAttack, $01
0009445E E10C                       	smpsAlterNote       $0C
00094460 E701                       	dc.b	smpsNoAttack, $01
00094462 E108                       	smpsAlterNote       $08
00094464 E701                       	dc.b	smpsNoAttack, $01
00094466 E102                       	smpsAlterNote       $02
00094468 E701                       	dc.b	smpsNoAttack, $01
0009446A E101                       	smpsAlterNote       $01
0009446C E701                       	dc.b	smpsNoAttack, $01
0009446E E105                       	smpsAlterNote       $05
00094470 E701                       	dc.b	smpsNoAttack, $01
00094472 E10B                       	smpsAlterNote       $0B
00094474 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094478 E108                       	smpsAlterNote       $08
0009447A E701                       	dc.b	smpsNoAttack, $01
0009447C E102                       	smpsAlterNote       $02
0009447E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094482 E108                       	smpsAlterNote       $08
00094484 E701                       	dc.b	smpsNoAttack, $01
00094486 E10B                       	smpsAlterNote       $0B
00094488 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009448C E105                       	smpsAlterNote       $05
0009448E E701                       	dc.b	smpsNoAttack, $01
00094490 E101                       	smpsAlterNote       $01
00094492 E701                       	dc.b	smpsNoAttack, $01
00094494 E102                       	smpsAlterNote       $02
00094496 E701                       	dc.b	smpsNoAttack, $01
00094498 E108                       	smpsAlterNote       $08
0009449A E701                       	dc.b	smpsNoAttack, $01
0009449C E10C                       	smpsAlterNote       $0C
0009449E E701                       	dc.b	smpsNoAttack, $01
000944A0 E108                       	smpsAlterNote       $08
000944A2 E701                       	dc.b	smpsNoAttack, $01
000944A4 E105                       	smpsAlterNote       $05
000944A6 E701                       	dc.b	smpsNoAttack, $01
000944A8 E101                       	smpsAlterNote       $01
000944AA E701                       	dc.b	smpsNoAttack, $01
000944AC E105                       	smpsAlterNote       $05
000944AE E701                       	dc.b	smpsNoAttack, $01
000944B0 E10B                       	smpsAlterNote       $0B
000944B2 E701                       	dc.b	smpsNoAttack, $01
000944B4 E10C                       	smpsAlterNote       $0C
000944B6 E701                       	dc.b	smpsNoAttack, $01
000944B8 E108                       	smpsAlterNote       $08
000944BA E701                       	dc.b	smpsNoAttack, $01
000944BC E102                       	smpsAlterNote       $02
000944BE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000944C2 E108                       	smpsAlterNote       $08
000944C4 E701                       	dc.b	smpsNoAttack, $01
000944C6 E10B                       	smpsAlterNote       $0B
000944C8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000944CC E105                       	smpsAlterNote       $05
000944CE E701                       	dc.b	smpsNoAttack, $01
000944D0 E101                       	smpsAlterNote       $01
000944D2 E701                       	dc.b	smpsNoAttack, $01
000944D4 E102                       	smpsAlterNote       $02
000944D6 E701                       	dc.b	smpsNoAttack, $01
000944D8 E108                       	smpsAlterNote       $08
000944DA E701                       	dc.b	smpsNoAttack, $01
000944DC E10C                       	smpsAlterNote       $0C
000944DE E701                       	dc.b	smpsNoAttack, $01
000944E0 E108                       	smpsAlterNote       $08
000944E2 E701                       	dc.b	smpsNoAttack, $01
000944E4 E105                       	smpsAlterNote       $05
000944E6 E701                       	dc.b	smpsNoAttack, $01
000944E8 E101                       	smpsAlterNote       $01
000944EA E701                       	dc.b	smpsNoAttack, $01
000944EC E105                       	smpsAlterNote       $05
000944EE E701                       	dc.b	smpsNoAttack, $01
000944F0 E10B                       	smpsAlterNote       $0B
000944F2 E701                       	dc.b	smpsNoAttack, $01
000944F4 E10C                       	smpsAlterNote       $0C
000944F6 E701                       	dc.b	smpsNoAttack, $01
000944F8 E108                       	smpsAlterNote       $08
000944FA E701                       	dc.b	smpsNoAttack, $01
000944FC E102                       	smpsAlterNote       $02
000944FE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094502 E105                       	smpsAlterNote       $05
00094504 E701                       	dc.b	smpsNoAttack, $01
00094506 E10B                       	smpsAlterNote       $0B
00094508 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009450C E105                       	smpsAlterNote       $05
0009450E E701                       	dc.b	smpsNoAttack, $01
00094510 E102                       	smpsAlterNote       $02
00094512 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094516 E108                       	smpsAlterNote       $08
00094518 E701                       	dc.b	smpsNoAttack, $01
0009451A E10C                       	smpsAlterNote       $0C
0009451C E701                       	dc.b	smpsNoAttack, $01
0009451E E10B                       	smpsAlterNote       $0B
00094520 E701                       	dc.b	smpsNoAttack, $01
00094522 E105                       	smpsAlterNote       $05
00094524 E701                       	dc.b	smpsNoAttack, $01
00094526 E101                       	smpsAlterNote       $01
00094528 E701                       	dc.b	smpsNoAttack, $01
0009452A E105                       	smpsAlterNote       $05
0009452C E701                       	dc.b	smpsNoAttack, $01
0009452E E108                       	smpsAlterNote       $08
00094530 E701                       	dc.b	smpsNoAttack, $01
00094532 E10C                       	smpsAlterNote       $0C
00094534 E701                       	dc.b	smpsNoAttack, $01
00094536 E108                       	smpsAlterNote       $08
00094538 E701                       	dc.b	smpsNoAttack, $01
0009453A E102                       	smpsAlterNote       $02
0009453C E701                       	dc.b	smpsNoAttack, $01
0009453E E101                       	smpsAlterNote       $01
00094540 E701                       	dc.b	smpsNoAttack, $01
00094542 E105                       	smpsAlterNote       $05
00094544 E701                       	dc.b	smpsNoAttack, $01
00094546 E10B                       	smpsAlterNote       $0B
00094548 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009454C E108                       	smpsAlterNote       $08
0009454E E701                       	dc.b	smpsNoAttack, $01
00094550 E102                       	smpsAlterNote       $02
00094552 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094556 E108                       	smpsAlterNote       $08
00094558 E701                       	dc.b	smpsNoAttack, $01
0009455A E10B                       	smpsAlterNote       $0B
0009455C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094560 E105                       	smpsAlterNote       $05
00094562 E701                       	dc.b	smpsNoAttack, $01
00094564 E102                       	smpsAlterNote       $02
00094566 8001                       	dc.b	nRst, $01
00094568 E107                       	smpsAlterNote       $07
0009456A BF01 8001                  	dc.b	nD5, $01, nRst, $01
0009456E E108                       	smpsAlterNote       $08
00094570 C001 C10E                  	dc.b	nEb5, $01, nE5, $0E
00094574 E102                       	smpsAlterNote       $02
00094576 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009457A E108                       	smpsAlterNote       $08
0009457C E701                       	dc.b	smpsNoAttack, $01
0009457E E10B                       	smpsAlterNote       $0B
00094580 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094584 E105                       	smpsAlterNote       $05
00094586 E701                       	dc.b	smpsNoAttack, $01
00094588 E101                       	smpsAlterNote       $01
0009458A E701                       	dc.b	smpsNoAttack, $01
0009458C E102                       	smpsAlterNote       $02
0009458E E701                       	dc.b	smpsNoAttack, $01
00094590 E108                       	smpsAlterNote       $08
00094592 E701                       	dc.b	smpsNoAttack, $01
00094594 E10C                       	smpsAlterNote       $0C
00094596 E701                       	dc.b	smpsNoAttack, $01
00094598 E108                       	smpsAlterNote       $08
0009459A E701                       	dc.b	smpsNoAttack, $01
0009459C E105                       	smpsAlterNote       $05
0009459E E701                       	dc.b	smpsNoAttack, $01
000945A0 E101                       	smpsAlterNote       $01
000945A2 E701                       	dc.b	smpsNoAttack, $01
000945A4 E105                       	smpsAlterNote       $05
000945A6 E701                       	dc.b	smpsNoAttack, $01
000945A8 E10B                       	smpsAlterNote       $0B
000945AA E701                       	dc.b	smpsNoAttack, $01
000945AC E10C                       	smpsAlterNote       $0C
000945AE E701                       	dc.b	smpsNoAttack, $01
000945B0 E108                       	smpsAlterNote       $08
000945B2 E701                       	dc.b	smpsNoAttack, $01
000945B4 E102                       	smpsAlterNote       $02
000945B6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000945BA E105                       	smpsAlterNote       $05
000945BC E701                       	dc.b	smpsNoAttack, $01
000945BE E10B                       	smpsAlterNote       $0B
000945C0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000945C4 E105                       	smpsAlterNote       $05
000945C6 E701                       	dc.b	smpsNoAttack, $01
000945C8 E102                       	smpsAlterNote       $02
000945CA E701                       	dc.b	smpsNoAttack, $01
000945CC E109                       	smpsAlterNote       $09
000945CE C40A C207                  	dc.b	nG5, $0A, nF5, $07
000945D2 E108                       	smpsAlterNote       $08
000945D4 C10D                       	dc.b	nE5, $0D
000945D6 E105                       	smpsAlterNote       $05
000945D8 E701                       	dc.b	smpsNoAttack, $01
000945DA E101                       	smpsAlterNote       $01
000945DC E701                       	dc.b	smpsNoAttack, $01
000945DE E102                       	smpsAlterNote       $02
000945E0 E701                       	dc.b	smpsNoAttack, $01
000945E2 E108                       	smpsAlterNote       $08
000945E4 E701                       	dc.b	smpsNoAttack, $01
000945E6 E10C                       	smpsAlterNote       $0C
000945E8 E701                       	dc.b	smpsNoAttack, $01
000945EA E108                       	smpsAlterNote       $08
000945EC E701                       	dc.b	smpsNoAttack, $01
000945EE E105                       	smpsAlterNote       $05
000945F0 E701                       	dc.b	smpsNoAttack, $01
000945F2 E101                       	smpsAlterNote       $01
000945F4 E701                       	dc.b	smpsNoAttack, $01
000945F6 E105                       	smpsAlterNote       $05
000945F8 E701                       	dc.b	smpsNoAttack, $01
000945FA E10B                       	smpsAlterNote       $0B
000945FC E701                       	dc.b	smpsNoAttack, $01
000945FE E10C                       	smpsAlterNote       $0C
00094600 E701                       	dc.b	smpsNoAttack, $01
00094602 E108                       	smpsAlterNote       $08
00094604 E701                       	dc.b	smpsNoAttack, $01
00094606 E102                       	smpsAlterNote       $02
00094608 E701 E701 800E             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $0E
00094610 E10B                       	smpsAlterNote       $0B
00094612 BA01 8001                  	dc.b	nA4, $01, nRst, $01
00094616 E10C                       	smpsAlterNote       $0C
00094618 BB01 8001                  	dc.b	nBb4, $01, nRst, $01
0009461C E10B                       	smpsAlterNote       $0B
0009461E BA03 BA06 8001             	dc.b	nA4, $03, nA4, $06, nRst, $01
00094624 E107                       	smpsAlterNote       $07
00094626 BF03                       	dc.b	nD5, $03
00094628 E108                       	smpsAlterNote       $08
0009462A C103 8001                  	dc.b	nE5, $03, nRst, $01
0009462E E109                       	smpsAlterNote       $09
00094630 C203 C403 8001             	dc.b	nF5, $03, nG5, $03, nRst, $01
00094636 E10B                       	smpsAlterNote       $0B
00094638 C606 8001                  	dc.b	nA5, $06, nRst, $01
0009463C E107                       	smpsAlterNote       $07
0009463E BF02 8001                  	dc.b	nD5, $02, nRst, $01
00094642 E106                       	smpsAlterNote       $06
00094644 C90D                       	dc.b	nC6, $0D
00094646 E103                       	smpsAlterNote       $03
00094648 E701                       	dc.b	smpsNoAttack, $01
0009464A E1FF                       	smpsAlterNote       $FF
0009464C E701                       	dc.b	smpsNoAttack, $01
0009464E E103                       	smpsAlterNote       $03
00094650 E701                       	dc.b	smpsNoAttack, $01
00094652 E109                       	smpsAlterNote       $09
00094654 E701                       	dc.b	smpsNoAttack, $01
00094656 E10A                       	smpsAlterNote       $0A
00094658 E701                       	dc.b	smpsNoAttack, $01
0009465A E106                       	smpsAlterNote       $06
0009465C E701                       	dc.b	smpsNoAttack, $01
0009465E E100                       	smpsAlterNote       $00
00094660 E701                       	dc.b	smpsNoAttack, $01
00094662 E10C                       	smpsAlterNote       $0C
00094664 C703 8001                  	dc.b	nBb5, $03, nRst, $01
00094668 E10B                       	smpsAlterNote       $0B
0009466A C603                       	dc.b	nA5, $03
0009466C E109                       	smpsAlterNote       $09
0009466E C403 8001                  	dc.b	nG5, $03, nRst, $01
00094672 E10B                       	smpsAlterNote       $0B
00094674 C60D                       	dc.b	nA5, $0D
00094676 E105                       	smpsAlterNote       $05
00094678 E701                       	dc.b	smpsNoAttack, $01
0009467A E104                       	smpsAlterNote       $04
0009467C E701                       	dc.b	smpsNoAttack, $01
0009467E E108                       	smpsAlterNote       $08
00094680 E701                       	dc.b	smpsNoAttack, $01
00094682 E10E                       	smpsAlterNote       $0E
00094684 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094688 E10B                       	smpsAlterNote       $0B
0009468A E701                       	dc.b	smpsNoAttack, $01
0009468C E105                       	smpsAlterNote       $05
0009468E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094692 E10B                       	smpsAlterNote       $0B
00094694 E701                       	dc.b	smpsNoAttack, $01
00094696 E10E                       	smpsAlterNote       $0E
00094698 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009469C E108                       	smpsAlterNote       $08
0009469E E701                       	dc.b	smpsNoAttack, $01
000946A0 E104                       	smpsAlterNote       $04
000946A2 E701                       	dc.b	smpsNoAttack, $01
000946A4 E105                       	smpsAlterNote       $05
000946A6 E701                       	dc.b	smpsNoAttack, $01
000946A8 E10B                       	smpsAlterNote       $0B
000946AA E701                       	dc.b	smpsNoAttack, $01
000946AC E10F                       	smpsAlterNote       $0F
000946AE E701                       	dc.b	smpsNoAttack, $01
000946B0 E10B                       	smpsAlterNote       $0B
000946B2 E701                       	dc.b	smpsNoAttack, $01
000946B4 E108                       	smpsAlterNote       $08
000946B6 E701                       	dc.b	smpsNoAttack, $01
000946B8 E104                       	smpsAlterNote       $04
000946BA E701                       	dc.b	smpsNoAttack, $01
000946BC E108                       	smpsAlterNote       $08
000946BE E701                       	dc.b	smpsNoAttack, $01
000946C0 E10E                       	smpsAlterNote       $0E
000946C2 E701                       	dc.b	smpsNoAttack, $01
000946C4 E10F                       	smpsAlterNote       $0F
000946C6 E701                       	dc.b	smpsNoAttack, $01
000946C8 E10B                       	smpsAlterNote       $0B
000946CA E701                       	dc.b	smpsNoAttack, $01
000946CC E105                       	smpsAlterNote       $05
000946CE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000946D2 E108                       	smpsAlterNote       $08
000946D4 E701                       	dc.b	smpsNoAttack, $01
000946D6 E10E                       	smpsAlterNote       $0E
000946D8 E701                       	dc.b	smpsNoAttack, $01
000946DA E10F                       	smpsAlterNote       $0F
000946DC 800F                       	dc.b	nRst, $0F
000946DE E107                       	smpsAlterNote       $07
000946E0 BF02 8001                  	dc.b	nD5, $02, nRst, $01
000946E4 E108                       	smpsAlterNote       $08
000946E6 C103                       	dc.b	nE5, $03
000946E8 E109                       	smpsAlterNote       $09
000946EA C203 8001 C403             	dc.b	nF5, $03, nRst, $01, nG5, $03
000946F0 E10B                       	smpsAlterNote       $0B
000946F2 C607                       	dc.b	nA5, $07
000946F4 E107                       	smpsAlterNote       $07
000946F6 BF03 8001                  	dc.b	nD5, $03, nRst, $01
000946FA E106                       	smpsAlterNote       $06
000946FC C90D                       	dc.b	nC6, $0D
000946FE E107                       	smpsAlterNote       $07
00094700 CB03 8001                  	dc.b	nD6, $03, nRst, $01
00094704 E10C                       	smpsAlterNote       $0C
00094706 C704                       	dc.b	nBb5, $04
00094708 E10B                       	smpsAlterNote       $0B
0009470A C604 8001                  	dc.b	nA5, $04, nRst, $01
0009470E E109                       	smpsAlterNote       $09
00094710 C404                       	dc.b	nG5, $04
00094712 E10B                       	smpsAlterNote       $0B
00094714 C60D                       	dc.b	nA5, $0D
00094716 E108                       	smpsAlterNote       $08
00094718 E701                       	dc.b	smpsNoAttack, $01
0009471A E105                       	smpsAlterNote       $05
0009471C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094720 E10B                       	smpsAlterNote       $0B
00094722 E701                       	dc.b	smpsNoAttack, $01
00094724 E10F                       	smpsAlterNote       $0F
00094726 E701                       	dc.b	smpsNoAttack, $01
00094728 E10E                       	smpsAlterNote       $0E
0009472A E701                       	dc.b	smpsNoAttack, $01
0009472C E108                       	smpsAlterNote       $08
0009472E E701                       	dc.b	smpsNoAttack, $01
00094730 E104                       	smpsAlterNote       $04
00094732 E701                       	dc.b	smpsNoAttack, $01
00094734 E108                       	smpsAlterNote       $08
00094736 E701                       	dc.b	smpsNoAttack, $01
00094738 E10B                       	smpsAlterNote       $0B
0009473A E701                       	dc.b	smpsNoAttack, $01
0009473C E10F                       	smpsAlterNote       $0F
0009473E E701                       	dc.b	smpsNoAttack, $01
00094740 E10B                       	smpsAlterNote       $0B
00094742 E701                       	dc.b	smpsNoAttack, $01
00094744 E105                       	smpsAlterNote       $05
00094746 E701                       	dc.b	smpsNoAttack, $01
00094748 E104                       	smpsAlterNote       $04
0009474A E701                       	dc.b	smpsNoAttack, $01
0009474C E108                       	smpsAlterNote       $08
0009474E E701                       	dc.b	smpsNoAttack, $01
00094750 E10E                       	smpsAlterNote       $0E
00094752 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094756 E10B                       	smpsAlterNote       $0B
00094758 E701                       	dc.b	smpsNoAttack, $01
0009475A E105                       	smpsAlterNote       $05
0009475C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094760 E10B                       	smpsAlterNote       $0B
00094762 E701                       	dc.b	smpsNoAttack, $01
00094764 E10E                       	smpsAlterNote       $0E
00094766 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009476A E108                       	smpsAlterNote       $08
0009476C E701                       	dc.b	smpsNoAttack, $01
0009476E E105                       	smpsAlterNote       $05
00094770 8001                       	dc.b	nRst, $01
00094772 E109                       	smpsAlterNote       $09
00094774 C401 8001                  	dc.b	nG5, $01, nRst, $01
00094778 E10B                       	smpsAlterNote       $0B
0009477A C501 C60E C604 8001        	dc.b	nAb5, $01, nA5, $0E, nA5, $04, nRst, $01
00094782 E109                       	smpsAlterNote       $09
00094784 C404                       	dc.b	nG5, $04
00094786 E10B                       	smpsAlterNote       $0B
00094788 C604 8001                  	dc.b	nA5, $04, nRst, $01
0009478C E107                       	smpsAlterNote       $07
0009478E BF0D                       	dc.b	nD5, $0D
00094790 E101                       	smpsAlterNote       $01
00094792 E701                       	dc.b	smpsNoAttack, $01
00094794 E100                       	smpsAlterNote       $00
00094796 E701                       	dc.b	smpsNoAttack, $01
00094798 E104                       	smpsAlterNote       $04
0009479A E701                       	dc.b	smpsNoAttack, $01
0009479C E10A                       	smpsAlterNote       $0A
0009479E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000947A2 E107                       	smpsAlterNote       $07
000947A4 E701                       	dc.b	smpsNoAttack, $01
000947A6 E101                       	smpsAlterNote       $01
000947A8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000947AC E107                       	smpsAlterNote       $07
000947AE E701                       	dc.b	smpsNoAttack, $01
000947B0 E10A                       	smpsAlterNote       $0A
000947B2 E701                       	dc.b	smpsNoAttack, $01
000947B4 E10B                       	smpsAlterNote       $0B
000947B6 8001                       	dc.b	nRst, $01
000947B8 E108                       	smpsAlterNote       $08
000947BA 8001                       	dc.b	nRst, $01
000947BC E109                       	smpsAlterNote       $09
000947BE 8001 C401                  	dc.b	nRst, $01, nG5, $01
000947C2 E10B                       	smpsAlterNote       $0B
000947C4 C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
000947CC E108                       	smpsAlterNote       $08
000947CE CD06 8001                  	dc.b	nE6, $06, nRst, $01
000947D2 E109                       	smpsAlterNote       $09
000947D4 CE06 8001                  	dc.b	nF6, $06, nRst, $01
000947D8 E108                       	smpsAlterNote       $08
000947DA CD02 8001                  	dc.b	nE6, $02, nRst, $01
000947DE E106                       	smpsAlterNote       $06
000947E0 C903                       	dc.b	nC6, $03
000947E2 E109                       	smpsAlterNote       $09
000947E4 C403 8001                  	dc.b	nG5, $03, nRst, $01
000947E8 E10C                       	smpsAlterNote       $0C
000947EA C70D                       	dc.b	nBb5, $0D
000947EC E109                       	smpsAlterNote       $09
000947EE E701                       	dc.b	smpsNoAttack, $01
000947F0 E105                       	smpsAlterNote       $05
000947F2 E701                       	dc.b	smpsNoAttack, $01
000947F4 E109                       	smpsAlterNote       $09
000947F6 E701                       	dc.b	smpsNoAttack, $01
000947F8 E10F                       	smpsAlterNote       $0F
000947FA E701                       	dc.b	smpsNoAttack, $01
000947FC E110                       	smpsAlterNote       $10
000947FE E701                       	dc.b	smpsNoAttack, $01
00094800 E10C                       	smpsAlterNote       $0C
00094802 E701                       	dc.b	smpsNoAttack, $01
00094804 E106                       	smpsAlterNote       $06
00094806 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009480A E109                       	smpsAlterNote       $09
0009480C E701                       	dc.b	smpsNoAttack, $01
0009480E E10F                       	smpsAlterNote       $0F
00094810 E701                       	dc.b	smpsNoAttack, $01
00094812 E110                       	smpsAlterNote       $10
00094814 8001                       	dc.b	nRst, $01
00094816 E10B                       	smpsAlterNote       $0B
00094818 C606 8001                  	dc.b	nA5, $06, nRst, $01
0009481C E109                       	smpsAlterNote       $09
0009481E C40D                       	dc.b	nG5, $0D
00094820 E103                       	smpsAlterNote       $03
00094822 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094826 E106                       	smpsAlterNote       $06
00094828 E701                       	dc.b	smpsNoAttack, $01
0009482A E10C                       	smpsAlterNote       $0C
0009482C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094830 E106                       	smpsAlterNote       $06
00094832 E701                       	dc.b	smpsNoAttack, $01
00094834 E103                       	smpsAlterNote       $03
00094836 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009483A E109                       	smpsAlterNote       $09
0009483C E701                       	dc.b	smpsNoAttack, $01
0009483E E10D                       	smpsAlterNote       $0D
00094840 E701                       	dc.b	smpsNoAttack, $01
00094842 E10C                       	smpsAlterNote       $0C
00094844 E701                       	dc.b	smpsNoAttack, $01
00094846 E106                       	smpsAlterNote       $06
00094848 E701                       	dc.b	smpsNoAttack, $01
0009484A E102                       	smpsAlterNote       $02
0009484C E701                       	dc.b	smpsNoAttack, $01
0009484E E103                       	smpsAlterNote       $03
00094850 8001                       	dc.b	nRst, $01
00094852 E10B                       	smpsAlterNote       $0B
00094854 C60D                       	dc.b	nA5, $0D
00094856 E108                       	smpsAlterNote       $08
00094858 E701                       	dc.b	smpsNoAttack, $01
0009485A E104                       	smpsAlterNote       $04
0009485C E701                       	dc.b	smpsNoAttack, $01
0009485E E108                       	smpsAlterNote       $08
00094860 E701                       	dc.b	smpsNoAttack, $01
00094862 E10B                       	smpsAlterNote       $0B
00094864 E701                       	dc.b	smpsNoAttack, $01
00094866 E10F                       	smpsAlterNote       $0F
00094868 E701                       	dc.b	smpsNoAttack, $01
0009486A E10B                       	smpsAlterNote       $0B
0009486C E701                       	dc.b	smpsNoAttack, $01
0009486E E105                       	smpsAlterNote       $05
00094870 E701                       	dc.b	smpsNoAttack, $01
00094872 E104                       	smpsAlterNote       $04
00094874 E701                       	dc.b	smpsNoAttack, $01
00094876 E108                       	smpsAlterNote       $08
00094878 E701                       	dc.b	smpsNoAttack, $01
0009487A E10E                       	smpsAlterNote       $0E
0009487C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094880 E10B                       	smpsAlterNote       $0B
00094882 E701                       	dc.b	smpsNoAttack, $01
00094884 E105                       	smpsAlterNote       $05
00094886 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009488A E10C                       	smpsAlterNote       $0C
0009488C C70E                       	dc.b	nBb5, $0E
0009488E E106                       	smpsAlterNote       $06
00094890 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094894 E10C                       	smpsAlterNote       $0C
00094896 E701                       	dc.b	smpsNoAttack, $01
00094898 E10F                       	smpsAlterNote       $0F
0009489A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009489E E109                       	smpsAlterNote       $09
000948A0 E701                       	dc.b	smpsNoAttack, $01
000948A2 E105                       	smpsAlterNote       $05
000948A4 E701                       	dc.b	smpsNoAttack, $01
000948A6 E106                       	smpsAlterNote       $06
000948A8 E701                       	dc.b	smpsNoAttack, $01
000948AA E10C                       	smpsAlterNote       $0C
000948AC E701                       	dc.b	smpsNoAttack, $01
000948AE E110                       	smpsAlterNote       $10
000948B0 E701                       	dc.b	smpsNoAttack, $01
000948B2 E10C                       	smpsAlterNote       $0C
000948B4 E701                       	dc.b	smpsNoAttack, $01
000948B6 E109                       	smpsAlterNote       $09
000948B8 E701                       	dc.b	smpsNoAttack, $01
000948BA E105                       	smpsAlterNote       $05
000948BC E701                       	dc.b	smpsNoAttack, $01
000948BE E106                       	smpsAlterNote       $06
000948C0 8001 C90C                  	dc.b	nRst, $01, nC6, $0C
000948C4 E107                       	smpsAlterNote       $07
000948C6 CA01 E7CB 01               	dc.b	nCs6, $01, smpsNoAttack, nD6, $01
000948CB E108                       	smpsAlterNote       $08
000948CD CD0D                       	dc.b	nE6, $0D
000948CF E107                       	smpsAlterNote       $07
000948D1 CB0D                       	dc.b	nD6, $0D
000948D3 E104                       	smpsAlterNote       $04
000948D5 E701                       	dc.b	smpsNoAttack, $01
000948D7 E100                       	smpsAlterNote       $00
000948D9 E701                       	dc.b	smpsNoAttack, $01
000948DB E101                       	smpsAlterNote       $01
000948DD E701                       	dc.b	smpsNoAttack, $01
000948DF E107                       	smpsAlterNote       $07
000948E1 E701                       	dc.b	smpsNoAttack, $01
000948E3 E10B                       	smpsAlterNote       $0B
000948E5 E701                       	dc.b	smpsNoAttack, $01
000948E7 E107                       	smpsAlterNote       $07
000948E9 E701                       	dc.b	smpsNoAttack, $01
000948EB E104                       	smpsAlterNote       $04
000948ED E701                       	dc.b	smpsNoAttack, $01
000948EF E100                       	smpsAlterNote       $00
000948F1 E701                       	dc.b	smpsNoAttack, $01
000948F3 E104                       	smpsAlterNote       $04
000948F5 E701                       	dc.b	smpsNoAttack, $01
000948F7 E10A                       	smpsAlterNote       $0A
000948F9 E701                       	dc.b	smpsNoAttack, $01
000948FB E10B                       	smpsAlterNote       $0B
000948FD E701                       	dc.b	smpsNoAttack, $01
000948FF E108                       	smpsAlterNote       $08
00094901 CC0D                       	dc.b	nEb6, $0D
00094903 E105                       	smpsAlterNote       $05
00094905 E701                       	dc.b	smpsNoAttack, $01
00094907 E101                       	smpsAlterNote       $01
00094909 E701                       	dc.b	smpsNoAttack, $01
0009490B E102                       	smpsAlterNote       $02
0009490D E701                       	dc.b	smpsNoAttack, $01
0009490F E108                       	smpsAlterNote       $08
00094911 E701                       	dc.b	smpsNoAttack, $01
00094913 E106                       	smpsAlterNote       $06
00094915 C903 8004 C902 C902 8001+  	dc.b	nC6, $03, nRst, $04, nC6, $02, nC6, $02, nRst, $01, nC6, $01
00094921 8001                       	dc.b	nRst, $01
00094923 E107                       	smpsAlterNote       $07
00094925 CB0D                       	dc.b	nD6, $0D
00094927 E104                       	smpsAlterNote       $04
00094929 E701                       	dc.b	smpsNoAttack, $01
0009492B E100                       	smpsAlterNote       $00
0009492D E701                       	dc.b	smpsNoAttack, $01
0009492F E104                       	smpsAlterNote       $04
00094931 E701                       	dc.b	smpsNoAttack, $01
00094933 E107                       	smpsAlterNote       $07
00094935 E701                       	dc.b	smpsNoAttack, $01
00094937 E10B                       	smpsAlterNote       $0B
00094939 E701                       	dc.b	smpsNoAttack, $01
0009493B E107                       	smpsAlterNote       $07
0009493D E701                       	dc.b	smpsNoAttack, $01
0009493F E101                       	smpsAlterNote       $01
00094941 E701                       	dc.b	smpsNoAttack, $01
00094943 E100                       	smpsAlterNote       $00
00094945 E701                       	dc.b	smpsNoAttack, $01
00094947 E104                       	smpsAlterNote       $04
00094949 E701                       	dc.b	smpsNoAttack, $01
0009494B E10A                       	smpsAlterNote       $0A
0009494D E701                       	dc.b	smpsNoAttack, $01
0009494F E10B                       	smpsAlterNote       $0B
00094951 8001                       	dc.b	nRst, $01
00094953 E109                       	smpsAlterNote       $09
00094955 CE0A                       	dc.b	nF6, $0A
00094957 E108                       	smpsAlterNote       $08
00094959 CC07                       	dc.b	nEb6, $07
0009495B E106                       	smpsAlterNote       $06
0009495D C903 8004 C902 C902 C902+  	dc.b	nC6, $03, nRst, $04, nC6, $02, nC6, $02, nC6, $02, nRst, $01
00094969 E107                       	smpsAlterNote       $07
0009496B CB0D                       	dc.b	nD6, $0D
0009496D E101                       	smpsAlterNote       $01
0009496F E701                       	dc.b	smpsNoAttack, $01
00094971 E100                       	smpsAlterNote       $00
00094973 E701                       	dc.b	smpsNoAttack, $01
00094975 E104                       	smpsAlterNote       $04
00094977 E701                       	dc.b	smpsNoAttack, $01
00094979 E10A                       	smpsAlterNote       $0A
0009497B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009497F E107                       	smpsAlterNote       $07
00094981 E701                       	dc.b	smpsNoAttack, $01
00094983 E101                       	smpsAlterNote       $01
00094985 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094989 E107                       	smpsAlterNote       $07
0009498B E701                       	dc.b	smpsNoAttack, $01
0009498D E10A                       	smpsAlterNote       $0A
0009498F E701                       	dc.b	smpsNoAttack, $01
00094991 E10B                       	smpsAlterNote       $0B
00094993 8001                       	dc.b	nRst, $01
00094995 E108                       	smpsAlterNote       $08
00094997 CC0D                       	dc.b	nEb6, $0D
00094999 E102                       	smpsAlterNote       $02
0009499B E701                       	dc.b	smpsNoAttack, $01
0009499D E101                       	smpsAlterNote       $01
0009499F E701                       	dc.b	smpsNoAttack, $01
000949A1 E105                       	smpsAlterNote       $05
000949A3 E701                       	dc.b	smpsNoAttack, $01
000949A5 E108                       	smpsAlterNote       $08
000949A7 8001                       	dc.b	nRst, $01
000949A9 E106                       	smpsAlterNote       $06
000949AB C903 8004 C901 8001 C902+  	dc.b	nC6, $03, nRst, $04, nC6, $01, nRst, $01, nC6, $02, nC6, $02
000949B7 8001                       	dc.b	nRst, $01
000949B9 E107                       	smpsAlterNote       $07
000949BB CB0D                       	dc.b	nD6, $0D
000949BD E101                       	smpsAlterNote       $01
000949BF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000949C3 E104                       	smpsAlterNote       $04
000949C5 E701                       	dc.b	smpsNoAttack, $01
000949C7 E10A                       	smpsAlterNote       $0A
000949C9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000949CD E104                       	smpsAlterNote       $04
000949CF E701                       	dc.b	smpsNoAttack, $01
000949D1 E101                       	smpsAlterNote       $01
000949D3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000949D7 E107                       	smpsAlterNote       $07
000949D9 E701                       	dc.b	smpsNoAttack, $01
000949DB E10B                       	smpsAlterNote       $0B
000949DD E701                       	dc.b	smpsNoAttack, $01
000949DF E10A                       	smpsAlterNote       $0A
000949E1 E701                       	dc.b	smpsNoAttack, $01
000949E3 E104                       	smpsAlterNote       $04
000949E5 E701                       	dc.b	smpsNoAttack, $01
000949E7 E100                       	smpsAlterNote       $00
000949E9 E701                       	dc.b	smpsNoAttack, $01
000949EB E101                       	smpsAlterNote       $01
000949ED 801C                       	dc.b	nRst, $1C
000949F1 E107                       	smpsAlterNote       $07
000949F3 BF03 8001                  	dc.b	nD5, $03, nRst, $01
000949F7 E603                       	smpsAlterVol        $03
000949F9 F6F1 AD                    	smpsJump            music84_Jump03
000949FC                            
000949FC                            ; FM3 Data
000949FC                            music84_FM3:
000949FC E0C0                       	smpsPan             panCenter, $00
00094A00 E109                       	smpsAlterNote       $09
00094A02 C203 8007                  	dc.b	nF5, $03, nRst, $07
00094A06 E108                       	smpsAlterNote       $08
00094A08 C103 800B                  	dc.b	nE5, $03, nRst, $0B
00094A0C E10B                       	smpsAlterNote       $0B
00094A0E BA03 8006                  	dc.b	nA4, $03, nRst, $06
00094A14 E040                       	smpsPan             panRight, $00
00094A16 E110                       	smpsAlterNote       $10
00094A18 E6F9                       	smpsAlterVol        $F9
00094A1A C702 8001                  	dc.b	nBb5, $02, nRst, $01
00094A1E E10F                       	smpsAlterNote       $0F
00094A20 C603                       	dc.b	nA5, $03
00094A22 E10D                       	smpsAlterNote       $0D
00094A24 C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
00094A2A E10C                       	smpsAlterNote       $0C
00094A2C C103 8001                  	dc.b	nE5, $03, nRst, $01
00094A30 E10A                       	smpsAlterNote       $0A
00094A32 BD02 8001                  	dc.b	nC5, $02, nRst, $01
00094A36 E10F                       	smpsAlterNote       $0F
00094A38 BA01 8001                  	dc.b	nA4, $01, nRst, $01
00094A3C E0C0                       	smpsPan             panCenter, $00
00094A40 E109                       	smpsAlterNote       $09
00094A42 E609                       	smpsAlterVol        $09
00094A44 B603                       	dc.b	nF4, $03
00094A46                            
00094A46                            music84_Jump02:
00094A46 E70A                       	dc.b	smpsNoAttack, $0A
00094A48 E103                       	smpsAlterNote       $03
00094A4A E701                       	dc.b	smpsNoAttack, $01
00094A4C E102                       	smpsAlterNote       $02
00094A4E E701                       	dc.b	smpsNoAttack, $01
00094A50 E106                       	smpsAlterNote       $06
00094A52 E701                       	dc.b	smpsNoAttack, $01
00094A54 E10C                       	smpsAlterNote       $0C
00094A56 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094A5A E109                       	smpsAlterNote       $09
00094A5C E701                       	dc.b	smpsNoAttack, $01
00094A5E E103                       	smpsAlterNote       $03
00094A60 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094A64 E109                       	smpsAlterNote       $09
00094A66 E701                       	dc.b	smpsNoAttack, $01
00094A68 E10C                       	smpsAlterNote       $0C
00094A6A E701                       	dc.b	smpsNoAttack, $01
00094A6C E10D                       	smpsAlterNote       $0D
00094A6E 8001                       	dc.b	nRst, $01
00094A70 E109                       	smpsAlterNote       $09
00094A72 B80D                       	dc.b	nG4, $0D
00094A74 E103                       	smpsAlterNote       $03
00094A76 E701                       	dc.b	smpsNoAttack, $01
00094A78 E102                       	smpsAlterNote       $02
00094A7A E701                       	dc.b	smpsNoAttack, $01
00094A7C E106                       	smpsAlterNote       $06
00094A7E E701                       	dc.b	smpsNoAttack, $01
00094A80 E10C                       	smpsAlterNote       $0C
00094A82 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094A86 E109                       	smpsAlterNote       $09
00094A88 E701                       	dc.b	smpsNoAttack, $01
00094A8A E103                       	smpsAlterNote       $03
00094A8C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094A90 E109                       	smpsAlterNote       $09
00094A92 E701                       	dc.b	smpsNoAttack, $01
00094A94 E10C                       	smpsAlterNote       $0C
00094A96 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094A9A E106                       	smpsAlterNote       $06
00094A9C E701                       	dc.b	smpsNoAttack, $01
00094A9E E102                       	smpsAlterNote       $02
00094AA0 E701                       	dc.b	smpsNoAttack, $01
00094AA2 E103                       	smpsAlterNote       $03
00094AA4 E701                       	dc.b	smpsNoAttack, $01
00094AA6 E109                       	smpsAlterNote       $09
00094AA8 E701                       	dc.b	smpsNoAttack, $01
00094AAA E10D                       	smpsAlterNote       $0D
00094AAC E701                       	dc.b	smpsNoAttack, $01
00094AAE E109                       	smpsAlterNote       $09
00094AB0 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00094AB4 E10B                       	smpsAlterNote       $0B
00094AB6 BA0D                       	dc.b	nA4, $0D
00094AB8 E105                       	smpsAlterNote       $05
00094ABA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094ABE E108                       	smpsAlterNote       $08
00094AC0 E701                       	dc.b	smpsNoAttack, $01
00094AC2 E10E                       	smpsAlterNote       $0E
00094AC4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094AC8 E108                       	smpsAlterNote       $08
00094ACA E701                       	dc.b	smpsNoAttack, $01
00094ACC E104                       	smpsAlterNote       $04
00094ACE E701                       	dc.b	smpsNoAttack, $01
00094AD0 E105                       	smpsAlterNote       $05
00094AD2 E701                       	dc.b	smpsNoAttack, $01
00094AD4 E10B                       	smpsAlterNote       $0B
00094AD6 E701                       	dc.b	smpsNoAttack, $01
00094AD8 E10F                       	smpsAlterNote       $0F
00094ADA E701                       	dc.b	smpsNoAttack, $01
00094ADC E10B                       	smpsAlterNote       $0B
00094ADE E701                       	dc.b	smpsNoAttack, $01
00094AE0 E108                       	smpsAlterNote       $08
00094AE2 E701                       	dc.b	smpsNoAttack, $01
00094AE4 E104                       	smpsAlterNote       $04
00094AE6 E701                       	dc.b	smpsNoAttack, $01
00094AE8 E108                       	smpsAlterNote       $08
00094AEA E701                       	dc.b	smpsNoAttack, $01
00094AEC E10E                       	smpsAlterNote       $0E
00094AEE E701                       	dc.b	smpsNoAttack, $01
00094AF0 E10F                       	smpsAlterNote       $0F
00094AF2 E701                       	dc.b	smpsNoAttack, $01
00094AF4 E10B                       	smpsAlterNote       $0B
00094AF6 E701                       	dc.b	smpsNoAttack, $01
00094AF8 E105                       	smpsAlterNote       $05
00094AFA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094AFE E108                       	smpsAlterNote       $08
00094B00 E701                       	dc.b	smpsNoAttack, $01
00094B02 E10E                       	smpsAlterNote       $0E
00094B04 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094B08 E108                       	smpsAlterNote       $08
00094B0A E701                       	dc.b	smpsNoAttack, $01
00094B0C E105                       	smpsAlterNote       $05
00094B0E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094B12 E10B                       	smpsAlterNote       $0B
00094B14 E701                       	dc.b	smpsNoAttack, $01
00094B16 E10F                       	smpsAlterNote       $0F
00094B18 E701                       	dc.b	smpsNoAttack, $01
00094B1A E10E                       	smpsAlterNote       $0E
00094B1C E701                       	dc.b	smpsNoAttack, $01
00094B1E E108                       	smpsAlterNote       $08
00094B20 E701                       	dc.b	smpsNoAttack, $01
00094B22 E104                       	smpsAlterNote       $04
00094B24 E701                       	dc.b	smpsNoAttack, $01
00094B26 E105                       	smpsAlterNote       $05
00094B28 8001                       	dc.b	nRst, $01
00094B2A E108                       	smpsAlterNote       $08
00094B2C B50A                       	dc.b	nE4, $0A
00094B2E E109                       	smpsAlterNote       $09
00094B30 B60D                       	dc.b	nF4, $0D
00094B32 E106                       	smpsAlterNote       $06
00094B34 E701                       	dc.b	smpsNoAttack, $01
00094B36 E103                       	smpsAlterNote       $03
00094B38 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094B3C E109                       	smpsAlterNote       $09
00094B3E E701                       	dc.b	smpsNoAttack, $01
00094B40 E10D                       	smpsAlterNote       $0D
00094B42 E701                       	dc.b	smpsNoAttack, $01
00094B44 E10C                       	smpsAlterNote       $0C
00094B46 E701                       	dc.b	smpsNoAttack, $01
00094B48 E106                       	smpsAlterNote       $06
00094B4A E701                       	dc.b	smpsNoAttack, $01
00094B4C E102                       	smpsAlterNote       $02
00094B4E E701                       	dc.b	smpsNoAttack, $01
00094B50 E106                       	smpsAlterNote       $06
00094B52 E701                       	dc.b	smpsNoAttack, $01
00094B54 E109                       	smpsAlterNote       $09
00094B56 E701                       	dc.b	smpsNoAttack, $01
00094B58 E10D                       	smpsAlterNote       $0D
00094B5A E701                       	dc.b	smpsNoAttack, $01
00094B5C E109                       	smpsAlterNote       $09
00094B5E B80D                       	dc.b	nG4, $0D
00094B60 E106                       	smpsAlterNote       $06
00094B62 E701                       	dc.b	smpsNoAttack, $01
00094B64 E103                       	smpsAlterNote       $03
00094B66 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094B6A E109                       	smpsAlterNote       $09
00094B6C E701                       	dc.b	smpsNoAttack, $01
00094B6E E10D                       	smpsAlterNote       $0D
00094B70 E701                       	dc.b	smpsNoAttack, $01
00094B72 E10C                       	smpsAlterNote       $0C
00094B74 E701                       	dc.b	smpsNoAttack, $01
00094B76 E106                       	smpsAlterNote       $06
00094B78 E701                       	dc.b	smpsNoAttack, $01
00094B7A E102                       	smpsAlterNote       $02
00094B7C E701                       	dc.b	smpsNoAttack, $01
00094B7E E106                       	smpsAlterNote       $06
00094B80 E701                       	dc.b	smpsNoAttack, $01
00094B82 E109                       	smpsAlterNote       $09
00094B84 E701                       	dc.b	smpsNoAttack, $01
00094B86 E10D                       	smpsAlterNote       $0D
00094B88 E701                       	dc.b	smpsNoAttack, $01
00094B8A E109                       	smpsAlterNote       $09
00094B8C E701                       	dc.b	smpsNoAttack, $01
00094B8E E103                       	smpsAlterNote       $03
00094B90 E701                       	dc.b	smpsNoAttack, $01
00094B92 E102                       	smpsAlterNote       $02
00094B94 E701                       	dc.b	smpsNoAttack, $01
00094B96 E106                       	smpsAlterNote       $06
00094B98 E701                       	dc.b	smpsNoAttack, $01
00094B9A E10C                       	smpsAlterNote       $0C
00094B9C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094BA0 E109                       	smpsAlterNote       $09
00094BA2 E701                       	dc.b	smpsNoAttack, $01
00094BA4 E10B                       	smpsAlterNote       $0B
00094BA6 BA0D                       	dc.b	nA4, $0D
00094BA8 E108                       	smpsAlterNote       $08
00094BAA E701                       	dc.b	smpsNoAttack, $01
00094BAC E104                       	smpsAlterNote       $04
00094BAE E701                       	dc.b	smpsNoAttack, $01
00094BB0 E108                       	smpsAlterNote       $08
00094BB2 E701                       	dc.b	smpsNoAttack, $01
00094BB4 E10B                       	smpsAlterNote       $0B
00094BB6 E701                       	dc.b	smpsNoAttack, $01
00094BB8 E10F                       	smpsAlterNote       $0F
00094BBA E701                       	dc.b	smpsNoAttack, $01
00094BBC E10B                       	smpsAlterNote       $0B
00094BBE E701                       	dc.b	smpsNoAttack, $01
00094BC0 E105                       	smpsAlterNote       $05
00094BC2 E701                       	dc.b	smpsNoAttack, $01
00094BC4 E104                       	smpsAlterNote       $04
00094BC6 E701                       	dc.b	smpsNoAttack, $01
00094BC8 E108                       	smpsAlterNote       $08
00094BCA E701                       	dc.b	smpsNoAttack, $01
00094BCC E10E                       	smpsAlterNote       $0E
00094BCE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094BD2 E10B                       	smpsAlterNote       $0B
00094BD4 E701                       	dc.b	smpsNoAttack, $01
00094BD6 E105                       	smpsAlterNote       $05
00094BD8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094BDC E10B                       	smpsAlterNote       $0B
00094BDE E701                       	dc.b	smpsNoAttack, $01
00094BE0 E10E                       	smpsAlterNote       $0E
00094BE2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094BE6 E108                       	smpsAlterNote       $08
00094BE8 E701                       	dc.b	smpsNoAttack, $01
00094BEA E104                       	smpsAlterNote       $04
00094BEC E701                       	dc.b	smpsNoAttack, $01
00094BEE E105                       	smpsAlterNote       $05
00094BF0 E701                       	dc.b	smpsNoAttack, $01
00094BF2 E10B                       	smpsAlterNote       $0B
00094BF4 E701                       	dc.b	smpsNoAttack, $01
00094BF6 E10F                       	smpsAlterNote       $0F
00094BF8 E701                       	dc.b	smpsNoAttack, $01
00094BFA E10B                       	smpsAlterNote       $0B
00094BFC E701                       	dc.b	smpsNoAttack, $01
00094BFE E108                       	smpsAlterNote       $08
00094C00 E701                       	dc.b	smpsNoAttack, $01
00094C02 E105                       	smpsAlterNote       $05
00094C04 8001                       	dc.b	nRst, $01
00094C06 E109                       	smpsAlterNote       $09
00094C08 B609 8001                  	dc.b	nF4, $09, nRst, $01
00094C0C E108                       	smpsAlterNote       $08
00094C0E B506 8001                  	dc.b	nE4, $06, nRst, $01
00094C12 E107                       	smpsAlterNote       $07
00094C14 B30D 8001                  	dc.b	nD4, $0D, nRst, $01
00094C18 E108                       	smpsAlterNote       $08
00094C1A B502 8001                  	dc.b	nE4, $02, nRst, $01
00094C1E E109                       	smpsAlterNote       $09
00094C20 B603 B803 8001             	dc.b	nF4, $03, nG4, $03, nRst, $01
00094C26 E10B                       	smpsAlterNote       $0B
00094C28 BA0D                       	dc.b	nA4, $0D
00094C2A E108                       	smpsAlterNote       $08
00094C2C E701                       	dc.b	smpsNoAttack, $01
00094C2E E104                       	smpsAlterNote       $04
00094C30 E701                       	dc.b	smpsNoAttack, $01
00094C32 E108                       	smpsAlterNote       $08
00094C34 E701                       	dc.b	smpsNoAttack, $01
00094C36 E10E                       	smpsAlterNote       $0E
00094C38 E701                       	dc.b	smpsNoAttack, $01
00094C3A E10F                       	smpsAlterNote       $0F
00094C3C E701                       	dc.b	smpsNoAttack, $01
00094C3E E10B                       	smpsAlterNote       $0B
00094C40 E701                       	dc.b	smpsNoAttack, $01
00094C42 E105                       	smpsAlterNote       $05
00094C44 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094C48 E108                       	smpsAlterNote       $08
00094C4A E701                       	dc.b	smpsNoAttack, $01
00094C4C E10E                       	smpsAlterNote       $0E
00094C4E E701                       	dc.b	smpsNoAttack, $01
00094C50 E10F                       	smpsAlterNote       $0F
00094C52 8001                       	dc.b	nRst, $01
00094C54 E109                       	smpsAlterNote       $09
00094C56 C20D                       	dc.b	nF5, $0D
00094C58 E103                       	smpsAlterNote       $03
00094C5A E701                       	dc.b	smpsNoAttack, $01
00094C5C E102                       	smpsAlterNote       $02
00094C5E E701                       	dc.b	smpsNoAttack, $01
00094C60 E106                       	smpsAlterNote       $06
00094C62 E701                       	dc.b	smpsNoAttack, $01
00094C64 E10C                       	smpsAlterNote       $0C
00094C66 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094C6A E109                       	smpsAlterNote       $09
00094C6C E701                       	dc.b	smpsNoAttack, $01
00094C6E E103                       	smpsAlterNote       $03
00094C70 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094C74 E109                       	smpsAlterNote       $09
00094C76 E701                       	dc.b	smpsNoAttack, $01
00094C78 E10C                       	smpsAlterNote       $0C
00094C7A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094C7E E106                       	smpsAlterNote       $06
00094C80 E701                       	dc.b	smpsNoAttack, $01
00094C82 E102                       	smpsAlterNote       $02
00094C84 E701                       	dc.b	smpsNoAttack, $01
00094C86 E103                       	smpsAlterNote       $03
00094C88 E701                       	dc.b	smpsNoAttack, $01
00094C8A E109                       	smpsAlterNote       $09
00094C8C E701                       	dc.b	smpsNoAttack, $01
00094C8E E10D                       	smpsAlterNote       $0D
00094C90 E701                       	dc.b	smpsNoAttack, $01
00094C92 E109                       	smpsAlterNote       $09
00094C94 E701                       	dc.b	smpsNoAttack, $01
00094C96 E106                       	smpsAlterNote       $06
00094C98 E701                       	dc.b	smpsNoAttack, $01
00094C9A E102                       	smpsAlterNote       $02
00094C9C E701                       	dc.b	smpsNoAttack, $01
00094C9E E106                       	smpsAlterNote       $06
00094CA0 E701                       	dc.b	smpsNoAttack, $01
00094CA2 E10C                       	smpsAlterNote       $0C
00094CA4 E701                       	dc.b	smpsNoAttack, $01
00094CA6 E10D                       	smpsAlterNote       $0D
00094CA8 E701                       	dc.b	smpsNoAttack, $01
00094CAA E109                       	smpsAlterNote       $09
00094CAC E701                       	dc.b	smpsNoAttack, $01
00094CAE E103                       	smpsAlterNote       $03
00094CB0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094CB4 E106                       	smpsAlterNote       $06
00094CB6 E701                       	dc.b	smpsNoAttack, $01
00094CB8 E10C                       	smpsAlterNote       $0C
00094CBA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094CBE E106                       	smpsAlterNote       $06
00094CC0 E701                       	dc.b	smpsNoAttack, $01
00094CC2 E103                       	smpsAlterNote       $03
00094CC4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094CC8 E109                       	smpsAlterNote       $09
00094CCA E701                       	dc.b	smpsNoAttack, $01
00094CCC E10D                       	smpsAlterNote       $0D
00094CCE E701                       	dc.b	smpsNoAttack, $01
00094CD0 E10C                       	smpsAlterNote       $0C
00094CD2 E701                       	dc.b	smpsNoAttack, $01
00094CD4 E106                       	smpsAlterNote       $06
00094CD6 E701                       	dc.b	smpsNoAttack, $01
00094CD8 E102                       	smpsAlterNote       $02
00094CDA E701                       	dc.b	smpsNoAttack, $01
00094CDC E106                       	smpsAlterNote       $06
00094CDE E701                       	dc.b	smpsNoAttack, $01
00094CE0 E109                       	smpsAlterNote       $09
00094CE2 E701                       	dc.b	smpsNoAttack, $01
00094CE4 E10D                       	smpsAlterNote       $0D
00094CE6 E701                       	dc.b	smpsNoAttack, $01
00094CE8 E109                       	smpsAlterNote       $09
00094CEA E701                       	dc.b	smpsNoAttack, $01
00094CEC E103                       	smpsAlterNote       $03
00094CEE E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00094CF2 E109                       	smpsAlterNote       $09
00094CF4 C206                       	dc.b	nF5, $06
00094CF6 E108                       	smpsAlterNote       $08
00094CF8 C10E                       	dc.b	nE5, $0E
00094CFA E102                       	smpsAlterNote       $02
00094CFC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094D00 E108                       	smpsAlterNote       $08
00094D02 E701                       	dc.b	smpsNoAttack, $01
00094D04 E10B                       	smpsAlterNote       $0B
00094D06 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094D0A E105                       	smpsAlterNote       $05
00094D0C E701                       	dc.b	smpsNoAttack, $01
00094D0E E101                       	smpsAlterNote       $01
00094D10 E701                       	dc.b	smpsNoAttack, $01
00094D12 E102                       	smpsAlterNote       $02
00094D14 E701                       	dc.b	smpsNoAttack, $01
00094D16 E108                       	smpsAlterNote       $08
00094D18 E701                       	dc.b	smpsNoAttack, $01
00094D1A E10C                       	smpsAlterNote       $0C
00094D1C E701                       	dc.b	smpsNoAttack, $01
00094D1E E107                       	smpsAlterNote       $07
00094D20 BF0E                       	dc.b	nD5, $0E
00094D22 E101                       	smpsAlterNote       $01
00094D24 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094D28 E107                       	smpsAlterNote       $07
00094D2A E701                       	dc.b	smpsNoAttack, $01
00094D2C E10A                       	smpsAlterNote       $0A
00094D2E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094D32 E104                       	smpsAlterNote       $04
00094D34 E701                       	dc.b	smpsNoAttack, $01
00094D36 E100                       	smpsAlterNote       $00
00094D38 E701                       	dc.b	smpsNoAttack, $01
00094D3A E104                       	smpsAlterNote       $04
00094D3C E701                       	dc.b	smpsNoAttack, $01
00094D3E E107                       	smpsAlterNote       $07
00094D40 E701                       	dc.b	smpsNoAttack, $01
00094D42 E10B                       	smpsAlterNote       $0B
00094D44 E701                       	dc.b	smpsNoAttack, $01
00094D46 E107                       	smpsAlterNote       $07
00094D48 E701                       	dc.b	smpsNoAttack, $01
00094D4A E101                       	smpsAlterNote       $01
00094D4C E701                       	dc.b	smpsNoAttack, $01
00094D4E E100                       	smpsAlterNote       $00
00094D50 E701                       	dc.b	smpsNoAttack, $01
00094D52 E104                       	smpsAlterNote       $04
00094D54 E701                       	dc.b	smpsNoAttack, $01
00094D56 E10A                       	smpsAlterNote       $0A
00094D58 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094D5C E107                       	smpsAlterNote       $07
00094D5E E701                       	dc.b	smpsNoAttack, $01
00094D60 E101                       	smpsAlterNote       $01
00094D62 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094D66 E107                       	smpsAlterNote       $07
00094D68 E701                       	dc.b	smpsNoAttack, $01
00094D6A E10A                       	smpsAlterNote       $0A
00094D6C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094D70 E104                       	smpsAlterNote       $04
00094D72 E701                       	dc.b	smpsNoAttack, $01
00094D74 E100                       	smpsAlterNote       $00
00094D76 E701                       	dc.b	smpsNoAttack, $01
00094D78 E101                       	smpsAlterNote       $01
00094D7A E701                       	dc.b	smpsNoAttack, $01
00094D7C E107                       	smpsAlterNote       $07
00094D7E E701                       	dc.b	smpsNoAttack, $01
00094D80 E10B                       	smpsAlterNote       $0B
00094D82 E701                       	dc.b	smpsNoAttack, $01
00094D84 E107                       	smpsAlterNote       $07
00094D86 E701                       	dc.b	smpsNoAttack, $01
00094D88 E104                       	smpsAlterNote       $04
00094D8A E701                       	dc.b	smpsNoAttack, $01
00094D8C E100                       	smpsAlterNote       $00
00094D8E E701                       	dc.b	smpsNoAttack, $01
00094D90 E104                       	smpsAlterNote       $04
00094D92 E701                       	dc.b	smpsNoAttack, $01
00094D94 E10A                       	smpsAlterNote       $0A
00094D96 E701                       	dc.b	smpsNoAttack, $01
00094D98 E10B                       	smpsAlterNote       $0B
00094D9A E701                       	dc.b	smpsNoAttack, $01
00094D9C E107                       	smpsAlterNote       $07
00094D9E E701                       	dc.b	smpsNoAttack, $01
00094DA0 E101                       	smpsAlterNote       $01
00094DA2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094DA6 E104                       	smpsAlterNote       $04
00094DA8 E701                       	dc.b	smpsNoAttack, $01
00094DAA E10A                       	smpsAlterNote       $0A
00094DAC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094DB0 E104                       	smpsAlterNote       $04
00094DB2 E701                       	dc.b	smpsNoAttack, $01
00094DB4 E101                       	smpsAlterNote       $01
00094DB6 E701                       	dc.b	smpsNoAttack, $01
00094DBA E107                       	smpsAlterNote       $07
00094DBC E6FF                       	smpsAlterVol        $FF
00094DBE BF06 8001 BF03 BF03 8001+  	dc.b	nD5, $06, nRst, $01, nD5, $03, nD5, $03, nRst, $01, nCs5, $03
00094DCA 8004                       	dc.b	nRst, $04
00094DCE E109                       	smpsAlterNote       $09
00094DD0 E602                       	smpsAlterVol        $02
00094DD2 B803 B603 8001             	dc.b	nG4, $03, nF4, $03, nRst, $01
00094DD8 E108                       	smpsAlterNote       $08
00094DDA B502 8001                  	dc.b	nE4, $02, nRst, $01
00094DDE E109                       	smpsAlterNote       $09
00094DE0 B60D                       	dc.b	nF4, $0D
00094DE2 E106                       	smpsAlterNote       $06
00094DE4 E701                       	dc.b	smpsNoAttack, $01
00094DE6 E102                       	smpsAlterNote       $02
00094DE8 E701                       	dc.b	smpsNoAttack, $01
00094DEA E106                       	smpsAlterNote       $06
00094DEC E701                       	dc.b	smpsNoAttack, $01
00094DEE E109                       	smpsAlterNote       $09
00094DF0 E701                       	dc.b	smpsNoAttack, $01
00094DF2 E10D                       	smpsAlterNote       $0D
00094DF4 E701                       	dc.b	smpsNoAttack, $01
00094DF6 E109                       	smpsAlterNote       $09
00094DF8 E701                       	dc.b	smpsNoAttack, $01
00094DFA E103                       	smpsAlterNote       $03
00094DFC E701                       	dc.b	smpsNoAttack, $01
00094DFE E102                       	smpsAlterNote       $02
00094E00 E701                       	dc.b	smpsNoAttack, $01
00094E02 E106                       	smpsAlterNote       $06
00094E04 E701                       	dc.b	smpsNoAttack, $01
00094E06 E10C                       	smpsAlterNote       $0C
00094E08 E701                       	dc.b	smpsNoAttack, $01
00094E0A E10D                       	smpsAlterNote       $0D
00094E0C 8001                       	dc.b	nRst, $01
00094E0E E109                       	smpsAlterNote       $09
00094E10 B80D                       	dc.b	nG4, $0D
00094E12 E106                       	smpsAlterNote       $06
00094E14 E701                       	dc.b	smpsNoAttack, $01
00094E16 E102                       	smpsAlterNote       $02
00094E18 E701                       	dc.b	smpsNoAttack, $01
00094E1A E106                       	smpsAlterNote       $06
00094E1C E701                       	dc.b	smpsNoAttack, $01
00094E1E E10C                       	smpsAlterNote       $0C
00094E20 E701                       	dc.b	smpsNoAttack, $01
00094E22 E10D                       	smpsAlterNote       $0D
00094E24 E701                       	dc.b	smpsNoAttack, $01
00094E26 E109                       	smpsAlterNote       $09
00094E28 E701                       	dc.b	smpsNoAttack, $01
00094E2A E103                       	smpsAlterNote       $03
00094E2C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094E30 E106                       	smpsAlterNote       $06
00094E32 E701                       	dc.b	smpsNoAttack, $01
00094E34 E10C                       	smpsAlterNote       $0C
00094E36 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094E3A E106                       	smpsAlterNote       $06
00094E3C E701                       	dc.b	smpsNoAttack, $01
00094E3E E103                       	smpsAlterNote       $03
00094E40 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094E44 E109                       	smpsAlterNote       $09
00094E46 E701                       	dc.b	smpsNoAttack, $01
00094E48 E10D                       	smpsAlterNote       $0D
00094E4A E701                       	dc.b	smpsNoAttack, $01
00094E4C E10C                       	smpsAlterNote       $0C
00094E4E E701                       	dc.b	smpsNoAttack, $01
00094E50 E109                       	smpsAlterNote       $09
00094E52 8001                       	dc.b	nRst, $01
00094E54 E10B                       	smpsAlterNote       $0B
00094E56 BA03                       	dc.b	nA4, $03
00094E58 E10C                       	smpsAlterNote       $0C
00094E5A BB03 8001                  	dc.b	nBb4, $03, nRst, $01
00094E5E E10B                       	smpsAlterNote       $0B
00094E60 BA02 8001 C603             	dc.b	nA4, $02, nRst, $01, nA5, $03
00094E66 E10C                       	smpsAlterNote       $0C
00094E68 C703 8001                  	dc.b	nBb5, $03, nRst, $01
00094E6C E10B                       	smpsAlterNote       $0B
00094E6E C603 D203 8001             	dc.b	nA5, $03, nA6, $03, nRst, $01
00094E74 E10C                       	smpsAlterNote       $0C
00094E76 D303                       	dc.b	nBb6, $03
00094E78 E10B                       	smpsAlterNote       $0B
00094E7A D20D                       	dc.b	nA6, $0D
00094E7C E108                       	smpsAlterNote       $08
00094E7E E701                       	dc.b	smpsNoAttack, $01
00094E80 E104                       	smpsAlterNote       $04
00094E82 E701                       	dc.b	smpsNoAttack, $01
00094E84 E105                       	smpsAlterNote       $05
00094E86 E701                       	dc.b	smpsNoAttack, $01
00094E88 E10B                       	smpsAlterNote       $0B
00094E8A E701                       	dc.b	smpsNoAttack, $01
00094E8C E10F                       	smpsAlterNote       $0F
00094E8E E701                       	dc.b	smpsNoAttack, $01
00094E90 E10B                       	smpsAlterNote       $0B
00094E92 E701                       	dc.b	smpsNoAttack, $01
00094E94 E108                       	smpsAlterNote       $08
00094E96 E701                       	dc.b	smpsNoAttack, $01
00094E98 E104                       	smpsAlterNote       $04
00094E9A E701                       	dc.b	smpsNoAttack, $01
00094E9C E108                       	smpsAlterNote       $08
00094E9E E701                       	dc.b	smpsNoAttack, $01
00094EA0 E10E                       	smpsAlterNote       $0E
00094EA2 E701                       	dc.b	smpsNoAttack, $01
00094EA4 E10F                       	smpsAlterNote       $0F
00094EA6 E701                       	dc.b	smpsNoAttack, $01
00094EA8 E10B                       	smpsAlterNote       $0B
00094EAA E701                       	dc.b	smpsNoAttack, $01
00094EAC E105                       	smpsAlterNote       $05
00094EAE E701 E701 8007             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $07
00094EB4 E109                       	smpsAlterNote       $09
00094EB6 CE07                       	dc.b	nF6, $07
00094EB8 E108                       	smpsAlterNote       $08
00094EBA CD06 8001                  	dc.b	nE6, $06, nRst, $01
00094EBE E109                       	smpsAlterNote       $09
00094EC0 CE03 8001                  	dc.b	nF6, $03, nRst, $01
00094EC4 E108                       	smpsAlterNote       $08
00094EC6 CC0D                       	dc.b	nEb6, $0D
00094EC8 E102                       	smpsAlterNote       $02
00094ECA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094ECE E108                       	smpsAlterNote       $08
00094ED0 E701                       	dc.b	smpsNoAttack, $01
00094ED2 E10B                       	smpsAlterNote       $0B
00094ED4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094ED8 E105                       	smpsAlterNote       $05
00094EDA E701                       	dc.b	smpsNoAttack, $01
00094EDC E101                       	smpsAlterNote       $01
00094EDE E701                       	dc.b	smpsNoAttack, $01
00094EE0 E102                       	smpsAlterNote       $02
00094EE2 E701                       	dc.b	smpsNoAttack, $01
00094EE4 E108                       	smpsAlterNote       $08
00094EE6 E701                       	dc.b	smpsNoAttack, $01
00094EE8 E10C                       	smpsAlterNote       $0C
00094EEA E701                       	dc.b	smpsNoAttack, $01
00094EEC E108                       	smpsAlterNote       $08
00094EEE E701                       	dc.b	smpsNoAttack, $01
00094EF0 E105                       	smpsAlterNote       $05
00094EF2 E701                       	dc.b	smpsNoAttack, $01
00094EF4 E101                       	smpsAlterNote       $01
00094EF6 E701                       	dc.b	smpsNoAttack, $01
00094EF8 E105                       	smpsAlterNote       $05
00094EFA E701                       	dc.b	smpsNoAttack, $01
00094EFC E10B                       	smpsAlterNote       $0B
00094EFE E701                       	dc.b	smpsNoAttack, $01
00094F00 E10C                       	smpsAlterNote       $0C
00094F02 E701                       	dc.b	smpsNoAttack, $01
00094F04 E108                       	smpsAlterNote       $08
00094F06 E701                       	dc.b	smpsNoAttack, $01
00094F08 E107                       	smpsAlterNote       $07
00094F0A CB03 8001 CA03 CB03 8001   	dc.b	nD6, $03, nRst, $01, nCs6, $03, nD6, $03, nRst, $01
00094F14 E10B                       	smpsAlterNote       $0B
00094F16 C602 8001 C503 C603 8001   	dc.b	nA5, $02, nRst, $01, nAb5, $03, nA5, $03, nRst, $01
00094F20 E109                       	smpsAlterNote       $09
00094F22 C203                       	dc.b	nF5, $03
00094F24 E108                       	smpsAlterNote       $08
00094F26 C103 8001                  	dc.b	nE5, $03, nRst, $01
00094F2A E109                       	smpsAlterNote       $09
00094F2C C20D                       	dc.b	nF5, $0D
00094F2E E108                       	smpsAlterNote       $08
00094F30 C10E                       	dc.b	nE5, $0E
00094F32 E107                       	smpsAlterNote       $07
00094F34 BF0D                       	dc.b	nD5, $0D
00094F36 E104                       	smpsAlterNote       $04
00094F38 E701                       	dc.b	smpsNoAttack, $01
00094F3A E100                       	smpsAlterNote       $00
00094F3C E701                       	dc.b	smpsNoAttack, $01
00094F3E E104                       	smpsAlterNote       $04
00094F40 E701                       	dc.b	smpsNoAttack, $01
00094F42 E107                       	smpsAlterNote       $07
00094F44 E701                       	dc.b	smpsNoAttack, $01
00094F46 E10B                       	smpsAlterNote       $0B
00094F48 E701                       	dc.b	smpsNoAttack, $01
00094F4A E107                       	smpsAlterNote       $07
00094F4C E701                       	dc.b	smpsNoAttack, $01
00094F4E E101                       	smpsAlterNote       $01
00094F50 E701                       	dc.b	smpsNoAttack, $01
00094F52 E100                       	smpsAlterNote       $00
00094F54 E701                       	dc.b	smpsNoAttack, $01
00094F56 E104                       	smpsAlterNote       $04
00094F58 E701                       	dc.b	smpsNoAttack, $01
00094F5A E10A                       	smpsAlterNote       $0A
00094F5C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094F60 E107                       	smpsAlterNote       $07
00094F62 E701                       	dc.b	smpsNoAttack, $01
00094F64 E101                       	smpsAlterNote       $01
00094F66 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094F6A E107                       	smpsAlterNote       $07
00094F6C E701                       	dc.b	smpsNoAttack, $01
00094F6E E10A                       	smpsAlterNote       $0A
00094F70 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094F74 E104                       	smpsAlterNote       $04
00094F76 E701                       	dc.b	smpsNoAttack, $01
00094F78 E100                       	smpsAlterNote       $00
00094F7A E701                       	dc.b	smpsNoAttack, $01
00094F7C E101                       	smpsAlterNote       $01
00094F7E E701                       	dc.b	smpsNoAttack, $01
00094F80 E107                       	smpsAlterNote       $07
00094F82 E701                       	dc.b	smpsNoAttack, $01
00094F84 E10B                       	smpsAlterNote       $0B
00094F86 E701                       	dc.b	smpsNoAttack, $01
00094F88 E107                       	smpsAlterNote       $07
00094F8A E701                       	dc.b	smpsNoAttack, $01
00094F8C E104                       	smpsAlterNote       $04
00094F8E E701                       	dc.b	smpsNoAttack, $01
00094F90 E100                       	smpsAlterNote       $00
00094F92 E701                       	dc.b	smpsNoAttack, $01
00094F94 E104                       	smpsAlterNote       $04
00094F96 E701                       	dc.b	smpsNoAttack, $01
00094F98 E10A                       	smpsAlterNote       $0A
00094F9A E701                       	dc.b	smpsNoAttack, $01
00094F9C E10B                       	smpsAlterNote       $0B
00094F9E E701                       	dc.b	smpsNoAttack, $01
00094FA0 E107                       	smpsAlterNote       $07
00094FA2 E701                       	dc.b	smpsNoAttack, $01
00094FA4 E101                       	smpsAlterNote       $01
00094FA6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094FAA E104                       	smpsAlterNote       $04
00094FAC E701                       	dc.b	smpsNoAttack, $01
00094FAE E10A                       	smpsAlterNote       $0A
00094FB0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094FB4 E104                       	smpsAlterNote       $04
00094FB6 E701                       	dc.b	smpsNoAttack, $01
00094FB8 E101                       	smpsAlterNote       $01
00094FBA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094FBE E107                       	smpsAlterNote       $07
00094FC0 E701                       	dc.b	smpsNoAttack, $01
00094FC2 E10B                       	smpsAlterNote       $0B
00094FC4 E701                       	dc.b	smpsNoAttack, $01
00094FC6 E10A                       	smpsAlterNote       $0A
00094FC8 E701                       	dc.b	smpsNoAttack, $01
00094FCA E104                       	smpsAlterNote       $04
00094FCC E701                       	dc.b	smpsNoAttack, $01
00094FCE E100                       	smpsAlterNote       $00
00094FD0 E701                       	dc.b	smpsNoAttack, $01
00094FD2 E104                       	smpsAlterNote       $04
00094FD4 E701                       	dc.b	smpsNoAttack, $01
00094FD6 E107                       	smpsAlterNote       $07
00094FD8 E701                       	dc.b	smpsNoAttack, $01
00094FDA E10B                       	smpsAlterNote       $0B
00094FDC E701                       	dc.b	smpsNoAttack, $01
00094FDE E107                       	smpsAlterNote       $07
00094FE0 E701                       	dc.b	smpsNoAttack, $01
00094FE2 E101                       	smpsAlterNote       $01
00094FE4 E701                       	dc.b	smpsNoAttack, $01
00094FE6 E100                       	smpsAlterNote       $00
00094FE8 E701                       	dc.b	smpsNoAttack, $01
00094FEA E104                       	smpsAlterNote       $04
00094FEC E701                       	dc.b	smpsNoAttack, $01
00094FEE E10A                       	smpsAlterNote       $0A
00094FF0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094FF4 E107                       	smpsAlterNote       $07
00094FF6 E701                       	dc.b	smpsNoAttack, $01
00094FF8 E101                       	smpsAlterNote       $01
00094FFA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094FFE E107                       	smpsAlterNote       $07
00095000 E701                       	dc.b	smpsNoAttack, $01
00095002 E10A                       	smpsAlterNote       $0A
00095004 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095008 E104                       	smpsAlterNote       $04
0009500A E701                       	dc.b	smpsNoAttack, $01
0009500C E100                       	smpsAlterNote       $00
0009500E E701                       	dc.b	smpsNoAttack, $01
00095010 E101                       	smpsAlterNote       $01
00095012 E701                       	dc.b	smpsNoAttack, $01
00095014 E107                       	smpsAlterNote       $07
00095016 E701                       	dc.b	smpsNoAttack, $01
00095018 E10B                       	smpsAlterNote       $0B
0009501A E701                       	dc.b	smpsNoAttack, $01
0009501C E107                       	smpsAlterNote       $07
0009501E E701                       	dc.b	smpsNoAttack, $01
00095020 E104                       	smpsAlterNote       $04
00095022 E701                       	dc.b	smpsNoAttack, $01
00095024 E100                       	smpsAlterNote       $00
00095026 E701                       	dc.b	smpsNoAttack, $01
00095028 E101                       	smpsAlterNote       $01
0009502A 8001                       	dc.b	nRst, $01
0009502C E109                       	smpsAlterNote       $09
0009502E C20D                       	dc.b	nF5, $0D
00095030 E106                       	smpsAlterNote       $06
00095032 E701                       	dc.b	smpsNoAttack, $01
00095034 E102                       	smpsAlterNote       $02
00095036 E701                       	dc.b	smpsNoAttack, $01
00095038 E106                       	smpsAlterNote       $06
0009503A E701                       	dc.b	smpsNoAttack, $01
0009503C E10C                       	smpsAlterNote       $0C
0009503E E701                       	dc.b	smpsNoAttack, $01
00095040 E10D                       	smpsAlterNote       $0D
00095042 E701                       	dc.b	smpsNoAttack, $01
00095044 E109                       	smpsAlterNote       $09
00095046 E701                       	dc.b	smpsNoAttack, $01
00095048 E103                       	smpsAlterNote       $03
0009504A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009504E E106                       	smpsAlterNote       $06
00095050 E701                       	dc.b	smpsNoAttack, $01
00095052 E10C                       	smpsAlterNote       $0C
00095054 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095058 E106                       	smpsAlterNote       $06
0009505A E701                       	dc.b	smpsNoAttack, $01
0009505C E103                       	smpsAlterNote       $03
0009505E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095062 E109                       	smpsAlterNote       $09
00095064 E701                       	dc.b	smpsNoAttack, $01
00095066 E10D                       	smpsAlterNote       $0D
00095068 E701                       	dc.b	smpsNoAttack, $01
0009506A E10C                       	smpsAlterNote       $0C
0009506C E701                       	dc.b	smpsNoAttack, $01
0009506E E109                       	smpsAlterNote       $09
00095070 8001                       	dc.b	nRst, $01
00095072 E108                       	smpsAlterNote       $08
00095074 C10D                       	dc.b	nE5, $0D
00095076 E109                       	smpsAlterNote       $09
00095078 C20A 8001                  	dc.b	nF5, $0A, nRst, $01
0009507C E108                       	smpsAlterNote       $08
0009507E C10D                       	dc.b	nE5, $0D
00095080 E102                       	smpsAlterNote       $02
00095082 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095086 E105                       	smpsAlterNote       $05
00095088 E701                       	dc.b	smpsNoAttack, $01
0009508A E108                       	smpsAlterNote       $08
0009508C 8001                       	dc.b	nRst, $01
0009508E E107                       	smpsAlterNote       $07
00095090 BF0D                       	dc.b	nD5, $0D
00095092 E108                       	smpsAlterNote       $08
00095094 C107                       	dc.b	nE5, $07
00095096 E109                       	smpsAlterNote       $09
00095098 C207 C406 8001             	dc.b	nF5, $07, nG5, $06, nRst, $01
0009509E E10B                       	smpsAlterNote       $0B
000950A0 C603                       	dc.b	nA5, $03
000950A2 E10C                       	smpsAlterNote       $0C
000950A4 C707 C703 8001             	dc.b	nBb5, $07, nBb5, $03, nRst, $01
000950AA E10B                       	smpsAlterNote       $0B
000950AC C603 D206 8001             	dc.b	nA5, $03, nA6, $06, nRst, $01
000950B2 E109                       	smpsAlterNote       $09
000950B4 D003                       	dc.b	nG6, $03
000950B6 E108                       	smpsAlterNote       $08
000950B8 CD02 8001                  	dc.b	nE6, $02, nRst, $01
000950BC E10B                       	smpsAlterNote       $0B
000950BE C601 8001                  	dc.b	nA5, $01, nRst, $01
000950C2 E108                       	smpsAlterNote       $08
000950C4 C102                       	dc.b	nE5, $02
000950C8 E10C                       	smpsAlterNote       $0C
000950CA E6FB                       	smpsAlterVol        $FB
000950CC A306 800F A303 A303 8019+  	dc.b	nBb2, $06, nRst, $0F, nBb2, $03, nBb2, $03, nRst, $19, nBb2, $02
000950D8 8001                       	dc.b	nRst, $01
000950DA E10B                       	smpsAlterNote       $0B
000950DC A206 800F A202 8001        	dc.b	nA2, $06, nRst, $0F, nA2, $02, nRst, $01
000950E4 E107                       	smpsAlterNote       $07
000950E6 A706 8001                  	dc.b	nD3, $06, nRst, $01
000950EA E10B                       	smpsAlterNote       $0B
000950EC A203                       	dc.b	nA2, $03
000950EE E109                       	smpsAlterNote       $09
000950F0 AA03 8001                  	dc.b	nF3, $03, nRst, $01
000950F4 E108                       	smpsAlterNote       $08
000950F6 A906                       	dc.b	nE3, $06
000950F8 E107                       	smpsAlterNote       $07
000950FA A703 8001                  	dc.b	nD3, $03, nRst, $01
000950FE E106                       	smpsAlterNote       $06
00095100 A503                       	dc.b	nC3, $03
00095102 E10C                       	smpsAlterNote       $0C
00095104 A303 8001                  	dc.b	nBb2, $03, nRst, $01
00095108 E10B                       	smpsAlterNote       $0B
0009510A A203 8004                  	dc.b	nA2, $03, nRst, $04
0009510E E11B                       	smpsAlterNote       $1B
00095110 C401                       	dc.b	nG5, $01
00095112 E1F4                       	smpsAlterNote       $F4
00095114 E7C5 01                    	dc.b	smpsNoAttack, nAb5, $01
00095117 E106                       	smpsAlterNote       $06
00095119 E701                       	dc.b	smpsNoAttack, $01
0009511B E10F                       	smpsAlterNote       $0F
0009511D E701                       	dc.b	smpsNoAttack, $01
0009511F E1E4                       	smpsAlterNote       $E4
00095121 E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
00095124 E1F6                       	smpsAlterNote       $F6
00095126 E701                       	dc.b	smpsNoAttack, $01
00095128 E108                       	smpsAlterNote       $08
0009512A E701                       	dc.b	smpsNoAttack, $01
0009512C E10B                       	smpsAlterNote       $0B
0009512E E706                       	dc.b	smpsNoAttack, $06
00095130 E105                       	smpsAlterNote       $05
00095132 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095136 E108                       	smpsAlterNote       $08
00095138 E701                       	dc.b	smpsNoAttack, $01
0009513A E10E                       	smpsAlterNote       $0E
0009513C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095140 E108                       	smpsAlterNote       $08
00095142 E701                       	dc.b	smpsNoAttack, $01
00095144 E105                       	smpsAlterNote       $05
00095146 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009514A E10B                       	smpsAlterNote       $0B
0009514C E701                       	dc.b	smpsNoAttack, $01
0009514E E10F                       	smpsAlterNote       $0F
00095150 E701                       	dc.b	smpsNoAttack, $01
00095152 E10E                       	smpsAlterNote       $0E
00095154 E701                       	dc.b	smpsNoAttack, $01
00095156 E108                       	smpsAlterNote       $08
00095158 E701                       	dc.b	smpsNoAttack, $01
0009515A E104                       	smpsAlterNote       $04
0009515C E701                       	dc.b	smpsNoAttack, $01
0009515E E108                       	smpsAlterNote       $08
00095160 E701                       	dc.b	smpsNoAttack, $01
00095162 E10B                       	smpsAlterNote       $0B
00095164 E701                       	dc.b	smpsNoAttack, $01
00095166 E10F                       	smpsAlterNote       $0F
00095168 E701                       	dc.b	smpsNoAttack, $01
0009516A E10B                       	smpsAlterNote       $0B
0009516C E701                       	dc.b	smpsNoAttack, $01
0009516E E105                       	smpsAlterNote       $05
00095170 E701                       	dc.b	smpsNoAttack, $01
00095172 E104                       	smpsAlterNote       $04
00095174 E701                       	dc.b	smpsNoAttack, $01
00095176 E108                       	smpsAlterNote       $08
00095178 E701                       	dc.b	smpsNoAttack, $01
0009517A E10E                       	smpsAlterNote       $0E
0009517C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095180 E10B                       	smpsAlterNote       $0B
00095182 E701                       	dc.b	smpsNoAttack, $01
00095184 E105                       	smpsAlterNote       $05
00095186 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009518A E10B                       	smpsAlterNote       $0B
0009518C E701                       	dc.b	smpsNoAttack, $01
0009518E E10E                       	smpsAlterNote       $0E
00095190 E701                       	dc.b	smpsNoAttack, $01
00095192 E10F                       	smpsAlterNote       $0F
00095194 8001                       	dc.b	nRst, $01
00095196 E109                       	smpsAlterNote       $09
00095198 C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
0009519E E108                       	smpsAlterNote       $08
000951A0 C101 8001                  	dc.b	nE5, $01, nRst, $01
000951A4 E109                       	smpsAlterNote       $09
000951A6 C202                       	dc.b	nF5, $02
000951A8 E108                       	smpsAlterNote       $08
000951AA C102                       	dc.b	nE5, $02
000951AC E107                       	smpsAlterNote       $07
000951AE BF02 8001                  	dc.b	nD5, $02, nRst, $01
000951B2 E108                       	smpsAlterNote       $08
000951B4 C101 8001                  	dc.b	nE5, $01, nRst, $01
000951B8 E107                       	smpsAlterNote       $07
000951BA BF02                       	dc.b	nD5, $02
000951BC E106                       	smpsAlterNote       $06
000951BE BD02 8001                  	dc.b	nC5, $02, nRst, $01
000951C2 E107                       	smpsAlterNote       $07
000951C4 BF01 8001                  	dc.b	nD5, $01, nRst, $01
000951C8 E106                       	smpsAlterNote       $06
000951CA BD02                       	dc.b	nC5, $02
000951CC E10C                       	smpsAlterNote       $0C
000951CE BB02                       	dc.b	nBb4, $02
000951D0 E106                       	smpsAlterNote       $06
000951D2 BD02 8001                  	dc.b	nC5, $02, nRst, $01
000951D6 E10C                       	smpsAlterNote       $0C
000951D8 BB01 8001                  	dc.b	nBb4, $01, nRst, $01
000951DC E10B                       	smpsAlterNote       $0B
000951DE BA02                       	dc.b	nA4, $02
000951E0 E10C                       	smpsAlterNote       $0C
000951E2 BB02                       	dc.b	nBb4, $02
000951E4 E10B                       	smpsAlterNote       $0B
000951E6 BA02 8001 B901 8001 BA02   	dc.b	nA4, $02, nRst, $01, nAb4, $01, nRst, $01, nA4, $02
000951F0 E108                       	smpsAlterNote       $08
000951F2 B502 8001 C101 8001        	dc.b	nE4, $02, nRst, $01, nE5, $01, nRst, $01
000951FA E107                       	smpsAlterNote       $07
000951FC BE02                       	dc.b	nCs5, $02
000951FE E10B                       	smpsAlterNote       $0B
00095200 BA02                       	dc.b	nA4, $02
00095202 E109                       	smpsAlterNote       $09
00095204 B802 8001                  	dc.b	nG4, $02, nRst, $01
00095208 E108                       	smpsAlterNote       $08
0009520A B501 8001                  	dc.b	nE4, $01, nRst, $01
0009520E E10B                       	smpsAlterNote       $0B
00095210 AE02                       	dc.b	nA3, $02
00095212 E10C                       	smpsAlterNote       $0C
00095214 A307 800E A303 A303 8019+  	dc.b	nBb2, $07, nRst, $0E, nBb2, $03, nBb2, $03, nRst, $19, nBb2, $03
00095220 E10B                       	smpsAlterNote       $0B
00095222 A206 800F A202 8001        	dc.b	nA2, $06, nRst, $0F, nA2, $02, nRst, $01
0009522A E107                       	smpsAlterNote       $07
0009522C A706 8001                  	dc.b	nD3, $06, nRst, $01
00095230 E10B                       	smpsAlterNote       $0B
00095232 A203                       	dc.b	nA2, $03
00095234 E109                       	smpsAlterNote       $09
00095236 AA03 8001                  	dc.b	nF3, $03, nRst, $01
0009523A E108                       	smpsAlterNote       $08
0009523C A906 8001                  	dc.b	nE3, $06, nRst, $01
00095240 E107                       	smpsAlterNote       $07
00095242 A702 8001                  	dc.b	nD3, $02, nRst, $01
00095246 E106                       	smpsAlterNote       $06
00095248 A503                       	dc.b	nC3, $03
0009524A E10C                       	smpsAlterNote       $0C
0009524C A303 8001                  	dc.b	nBb2, $03, nRst, $01
00095252 E107                       	smpsAlterNote       $07
00095254 B20D                       	dc.b	nCs4, $0D
00095256 E104                       	smpsAlterNote       $04
00095258 E701                       	dc.b	smpsNoAttack, $01
0009525A E100                       	smpsAlterNote       $00
0009525C E701                       	dc.b	smpsNoAttack, $01
0009525E E104                       	smpsAlterNote       $04
00095260 E701                       	dc.b	smpsNoAttack, $01
00095262 E10A                       	smpsAlterNote       $0A
00095264 E701                       	dc.b	smpsNoAttack, $01
00095266 E10B                       	smpsAlterNote       $0B
00095268 E701                       	dc.b	smpsNoAttack, $01
0009526A E107                       	smpsAlterNote       $07
0009526C E701                       	dc.b	smpsNoAttack, $01
0009526E E101                       	smpsAlterNote       $01
00095270 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095274 E104                       	smpsAlterNote       $04
00095276 E701                       	dc.b	smpsNoAttack, $01
00095278 E10A                       	smpsAlterNote       $0A
0009527A E701                       	dc.b	smpsNoAttack, $01
0009527C E10B                       	smpsAlterNote       $0B
0009527E 8001                       	dc.b	nRst, $01
00095280 E107                       	smpsAlterNote       $07
00095282 B30D                       	dc.b	nD4, $0D
00095284 E104                       	smpsAlterNote       $04
00095286 E701                       	dc.b	smpsNoAttack, $01
00095288 E100                       	smpsAlterNote       $00
0009528A E701                       	dc.b	smpsNoAttack, $01
0009528C E104                       	smpsAlterNote       $04
0009528E E701                       	dc.b	smpsNoAttack, $01
00095290 E10A                       	smpsAlterNote       $0A
00095292 E701                       	dc.b	smpsNoAttack, $01
00095294 E10B                       	smpsAlterNote       $0B
00095296 E701                       	dc.b	smpsNoAttack, $01
00095298 E107                       	smpsAlterNote       $07
0009529A E701                       	dc.b	smpsNoAttack, $01
0009529C E101                       	smpsAlterNote       $01
0009529E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000952A2 E104                       	smpsAlterNote       $04
000952A4 E701                       	dc.b	smpsNoAttack, $01
000952A6 E10A                       	smpsAlterNote       $0A
000952A8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000952AC E104                       	smpsAlterNote       $04
000952AE E701                       	dc.b	smpsNoAttack, $01
000952B0 E101                       	smpsAlterNote       $01
000952B2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000952B6 E107                       	smpsAlterNote       $07
000952B8 E701                       	dc.b	smpsNoAttack, $01
000952BA E10B                       	smpsAlterNote       $0B
000952BC E701                       	dc.b	smpsNoAttack, $01
000952BE E10A                       	smpsAlterNote       $0A
000952C0 E701                       	dc.b	smpsNoAttack, $01
000952C2 E107                       	smpsAlterNote       $07
000952C4 8001                       	dc.b	nRst, $01
000952C6 E108                       	smpsAlterNote       $08
000952C8 B50D                       	dc.b	nE4, $0D
000952CA E102                       	smpsAlterNote       $02
000952CC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000952D0 E105                       	smpsAlterNote       $05
000952D2 E701                       	dc.b	smpsNoAttack, $01
000952D4 E10B                       	smpsAlterNote       $0B
000952D6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000952DA E105                       	smpsAlterNote       $05
000952DC E701                       	dc.b	smpsNoAttack, $01
000952DE E102                       	smpsAlterNote       $02
000952E0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000952E4 E108                       	smpsAlterNote       $08
000952E6 E701                       	dc.b	smpsNoAttack, $01
000952E8 E10C                       	smpsAlterNote       $0C
000952EA E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000952EE E107                       	smpsAlterNote       $07
000952F0 B30D                       	dc.b	nD4, $0D
000952F2 E101                       	smpsAlterNote       $01
000952F4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000952F8 E104                       	smpsAlterNote       $04
000952FA E701                       	dc.b	smpsNoAttack, $01
000952FC E10A                       	smpsAlterNote       $0A
000952FE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095302 E104                       	smpsAlterNote       $04
00095304 E701                       	dc.b	smpsNoAttack, $01
00095306 E101                       	smpsAlterNote       $01
00095308 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009530C E107                       	smpsAlterNote       $07
0009530E E701                       	dc.b	smpsNoAttack, $01
00095310 E10B                       	smpsAlterNote       $0B
00095312 E701                       	dc.b	smpsNoAttack, $01
00095314 E10A                       	smpsAlterNote       $0A
00095316 E701                       	dc.b	smpsNoAttack, $01
00095318 E104                       	smpsAlterNote       $04
0009531A E701                       	dc.b	smpsNoAttack, $01
0009531C E100                       	smpsAlterNote       $00
0009531E E701                       	dc.b	smpsNoAttack, $01
00095320 E104                       	smpsAlterNote       $04
00095322 E701                       	dc.b	smpsNoAttack, $01
00095324 E107                       	smpsAlterNote       $07
00095326 E701                       	dc.b	smpsNoAttack, $01
00095328 E10B                       	smpsAlterNote       $0B
0009532A E701                       	dc.b	smpsNoAttack, $01
0009532C E107                       	smpsAlterNote       $07
0009532E E701 B20E                  	dc.b	smpsNoAttack, $01, nCs4, $0E
00095332 E101                       	smpsAlterNote       $01
00095334 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095338 E107                       	smpsAlterNote       $07
0009533A E701                       	dc.b	smpsNoAttack, $01
0009533C E10A                       	smpsAlterNote       $0A
0009533E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095342 E104                       	smpsAlterNote       $04
00095344 E701                       	dc.b	smpsNoAttack, $01
00095346 E100                       	smpsAlterNote       $00
00095348 E701                       	dc.b	smpsNoAttack, $01
0009534A E101                       	smpsAlterNote       $01
0009534C E701                       	dc.b	smpsNoAttack, $01
0009534E E107                       	smpsAlterNote       $07
00095350 E701                       	dc.b	smpsNoAttack, $01
00095352 E10B                       	smpsAlterNote       $0B
00095354 E701                       	dc.b	smpsNoAttack, $01
00095356 E107                       	smpsAlterNote       $07
00095358 B30E                       	dc.b	nD4, $0E
0009535A E101                       	smpsAlterNote       $01
0009535C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095360 E107                       	smpsAlterNote       $07
00095362 E701                       	dc.b	smpsNoAttack, $01
00095364 E10A                       	smpsAlterNote       $0A
00095366 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009536A E104                       	smpsAlterNote       $04
0009536C E701                       	dc.b	smpsNoAttack, $01
0009536E E100                       	smpsAlterNote       $00
00095370 E701                       	dc.b	smpsNoAttack, $01
00095372 E101                       	smpsAlterNote       $01
00095374 E701                       	dc.b	smpsNoAttack, $01
00095376 E107                       	smpsAlterNote       $07
00095378 E701                       	dc.b	smpsNoAttack, $01
0009537A E10B                       	smpsAlterNote       $0B
0009537C E701                       	dc.b	smpsNoAttack, $01
0009537E E107                       	smpsAlterNote       $07
00095380 E701                       	dc.b	smpsNoAttack, $01
00095382 E104                       	smpsAlterNote       $04
00095384 E701                       	dc.b	smpsNoAttack, $01
00095386 E100                       	smpsAlterNote       $00
00095388 E701                       	dc.b	smpsNoAttack, $01
0009538A E104                       	smpsAlterNote       $04
0009538C E701                       	dc.b	smpsNoAttack, $01
0009538E E10A                       	smpsAlterNote       $0A
00095390 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095394 E107                       	smpsAlterNote       $07
00095396 E701 B20D                  	dc.b	smpsNoAttack, $01, nCs4, $0D
0009539A E104                       	smpsAlterNote       $04
0009539C E701                       	dc.b	smpsNoAttack, $01
0009539E E100                       	smpsAlterNote       $00
000953A0 E701                       	dc.b	smpsNoAttack, $01
000953A2 E101                       	smpsAlterNote       $01
000953A4 E701                       	dc.b	smpsNoAttack, $01
000953A6 E107                       	smpsAlterNote       $07
000953A8 E701                       	dc.b	smpsNoAttack, $01
000953AA E10B                       	smpsAlterNote       $0B
000953AC E701                       	dc.b	smpsNoAttack, $01
000953AE E107                       	smpsAlterNote       $07
000953B0 E701                       	dc.b	smpsNoAttack, $01
000953B2 E104                       	smpsAlterNote       $04
000953B4 E701                       	dc.b	smpsNoAttack, $01
000953B6 E100                       	smpsAlterNote       $00
000953B8 E701                       	dc.b	smpsNoAttack, $01
000953BA E104                       	smpsAlterNote       $04
000953BC E701                       	dc.b	smpsNoAttack, $01
000953BE E10A                       	smpsAlterNote       $0A
000953C0 E701                       	dc.b	smpsNoAttack, $01
000953C2 E10B                       	smpsAlterNote       $0B
000953C4 E701                       	dc.b	smpsNoAttack, $01
000953C8 E6FF                       	smpsAlterVol        $FF
000953CA A206 8001 A203 A203 8001+  	dc.b	nA2, $06, nRst, $01, nA2, $03, nA2, $03, nRst, $01, nA2, $03
000953D6 800B A202 8001             	dc.b	nRst, $0B, nA2, $02, nRst, $01
000953DE E109                       	smpsAlterNote       $09
000953E0 E601                       	smpsAlterVol        $01
000953E2 B60D                       	dc.b	nF4, $0D
000953E4 E106                       	smpsAlterNote       $06
000953E6 E701                       	dc.b	smpsNoAttack, $01
000953E8 E102                       	smpsAlterNote       $02
000953EA E701                       	dc.b	smpsNoAttack, $01
000953EC E106                       	smpsAlterNote       $06
000953EE E701                       	dc.b	smpsNoAttack, $01
000953F0 E109                       	smpsAlterNote       $09
000953F2 E701                       	dc.b	smpsNoAttack, $01
000953F4 E10D                       	smpsAlterNote       $0D
000953F6 E701                       	dc.b	smpsNoAttack, $01
000953F8 E109                       	smpsAlterNote       $09
000953FA E701                       	dc.b	smpsNoAttack, $01
000953FC E103                       	smpsAlterNote       $03
000953FE E701                       	dc.b	smpsNoAttack, $01
00095400 E102                       	smpsAlterNote       $02
00095402 E701                       	dc.b	smpsNoAttack, $01
00095404 E106                       	smpsAlterNote       $06
00095406 E701                       	dc.b	smpsNoAttack, $01
00095408 E10C                       	smpsAlterNote       $0C
0009540A E701                       	dc.b	smpsNoAttack, $01
0009540C E10D                       	smpsAlterNote       $0D
0009540E 8001                       	dc.b	nRst, $01
00095410 E109                       	smpsAlterNote       $09
00095412 B80D                       	dc.b	nG4, $0D
00095414 E106                       	smpsAlterNote       $06
00095416 E701                       	dc.b	smpsNoAttack, $01
00095418 E102                       	smpsAlterNote       $02
0009541A E701                       	dc.b	smpsNoAttack, $01
0009541C E106                       	smpsAlterNote       $06
0009541E E701                       	dc.b	smpsNoAttack, $01
00095420 E109                       	smpsAlterNote       $09
00095422 E701                       	dc.b	smpsNoAttack, $01
00095424 E10D                       	smpsAlterNote       $0D
00095426 E701                       	dc.b	smpsNoAttack, $01
00095428 E109                       	smpsAlterNote       $09
0009542A E701                       	dc.b	smpsNoAttack, $01
0009542C E103                       	smpsAlterNote       $03
0009542E E701                       	dc.b	smpsNoAttack, $01
00095430 E102                       	smpsAlterNote       $02
00095432 E701                       	dc.b	smpsNoAttack, $01
00095434 E106                       	smpsAlterNote       $06
00095436 E701                       	dc.b	smpsNoAttack, $01
00095438 E10C                       	smpsAlterNote       $0C
0009543A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009543E E106                       	smpsAlterNote       $06
00095440 E701                       	dc.b	smpsNoAttack, $01
00095442 E103                       	smpsAlterNote       $03
00095444 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095448 E109                       	smpsAlterNote       $09
0009544A E701                       	dc.b	smpsNoAttack, $01
0009544C E10D                       	smpsAlterNote       $0D
0009544E E701                       	dc.b	smpsNoAttack, $01
00095450 E10C                       	smpsAlterNote       $0C
00095452 E701                       	dc.b	smpsNoAttack, $01
00095454 E109                       	smpsAlterNote       $09
00095456 8001                       	dc.b	nRst, $01
00095458 E10B                       	smpsAlterNote       $0B
0009545A BA0D                       	dc.b	nA4, $0D
0009545C E105                       	smpsAlterNote       $05
0009545E E701                       	dc.b	smpsNoAttack, $01
00095460 E104                       	smpsAlterNote       $04
00095462 E701                       	dc.b	smpsNoAttack, $01
00095464 E108                       	smpsAlterNote       $08
00095466 E701                       	dc.b	smpsNoAttack, $01
00095468 E10E                       	smpsAlterNote       $0E
0009546A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009546E E10B                       	smpsAlterNote       $0B
00095470 E701                       	dc.b	smpsNoAttack, $01
00095472 E105                       	smpsAlterNote       $05
00095474 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095478 E10B                       	smpsAlterNote       $0B
0009547A E701                       	dc.b	smpsNoAttack, $01
0009547C E10E                       	smpsAlterNote       $0E
0009547E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095482 E108                       	smpsAlterNote       $08
00095484 E701                       	dc.b	smpsNoAttack, $01
00095486 E104                       	smpsAlterNote       $04
00095488 E701                       	dc.b	smpsNoAttack, $01
0009548A E105                       	smpsAlterNote       $05
0009548C E701                       	dc.b	smpsNoAttack, $01
0009548E E10B                       	smpsAlterNote       $0B
00095490 E701                       	dc.b	smpsNoAttack, $01
00095492 E10F                       	smpsAlterNote       $0F
00095494 E701                       	dc.b	smpsNoAttack, $01
00095496 E10B                       	smpsAlterNote       $0B
00095498 E701                       	dc.b	smpsNoAttack, $01
0009549A E108                       	smpsAlterNote       $08
0009549C E701                       	dc.b	smpsNoAttack, $01
0009549E E104                       	smpsAlterNote       $04
000954A0 E701                       	dc.b	smpsNoAttack, $01
000954A2 E108                       	smpsAlterNote       $08
000954A4 E701                       	dc.b	smpsNoAttack, $01
000954A6 E10E                       	smpsAlterNote       $0E
000954A8 E701                       	dc.b	smpsNoAttack, $01
000954AA E10F                       	smpsAlterNote       $0F
000954AC E701                       	dc.b	smpsNoAttack, $01
000954AE E10B                       	smpsAlterNote       $0B
000954B0 E701                       	dc.b	smpsNoAttack, $01
000954B2 E105                       	smpsAlterNote       $05
000954B4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000954B8 E108                       	smpsAlterNote       $08
000954BA E701                       	dc.b	smpsNoAttack, $01
000954BC E10E                       	smpsAlterNote       $0E
000954BE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000954C2 E108                       	smpsAlterNote       $08
000954C4 E701                       	dc.b	smpsNoAttack, $01
000954C6 E105                       	smpsAlterNote       $05
000954C8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000954CC E108                       	smpsAlterNote       $08
000954CE B50A 8001                  	dc.b	nE4, $0A, nRst, $01
000954D2 E109                       	smpsAlterNote       $09
000954D4 B60D                       	dc.b	nF4, $0D
000954D6 E103                       	smpsAlterNote       $03
000954D8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000954DC E106                       	smpsAlterNote       $06
000954DE E701                       	dc.b	smpsNoAttack, $01
000954E0 E10C                       	smpsAlterNote       $0C
000954E2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000954E6 E106                       	smpsAlterNote       $06
000954E8 E701                       	dc.b	smpsNoAttack, $01
000954EA E103                       	smpsAlterNote       $03
000954EC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000954F0 E109                       	smpsAlterNote       $09
000954F2 E701                       	dc.b	smpsNoAttack, $01
000954F4 E10D                       	smpsAlterNote       $0D
000954F6 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000954FA E109                       	smpsAlterNote       $09
000954FC B80D                       	dc.b	nG4, $0D
000954FE E103                       	smpsAlterNote       $03
00095500 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095504 E109                       	smpsAlterNote       $09
00095506 E701                       	dc.b	smpsNoAttack, $01
00095508 E10C                       	smpsAlterNote       $0C
0009550A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009550E E106                       	smpsAlterNote       $06
00095510 E701                       	dc.b	smpsNoAttack, $01
00095512 E102                       	smpsAlterNote       $02
00095514 E701                       	dc.b	smpsNoAttack, $01
00095516 E103                       	smpsAlterNote       $03
00095518 E701                       	dc.b	smpsNoAttack, $01
0009551A E109                       	smpsAlterNote       $09
0009551C E701                       	dc.b	smpsNoAttack, $01
0009551E E10D                       	smpsAlterNote       $0D
00095520 E701                       	dc.b	smpsNoAttack, $01
00095522 E109                       	smpsAlterNote       $09
00095524 E701                       	dc.b	smpsNoAttack, $01
00095526 E106                       	smpsAlterNote       $06
00095528 E701                       	dc.b	smpsNoAttack, $01
0009552A E102                       	smpsAlterNote       $02
0009552C E701                       	dc.b	smpsNoAttack, $01
0009552E E106                       	smpsAlterNote       $06
00095530 E701                       	dc.b	smpsNoAttack, $01
00095532 E10C                       	smpsAlterNote       $0C
00095534 E701                       	dc.b	smpsNoAttack, $01
00095536 E10D                       	smpsAlterNote       $0D
00095538 E701                       	dc.b	smpsNoAttack, $01
0009553A E109                       	smpsAlterNote       $09
0009553C E701                       	dc.b	smpsNoAttack, $01
0009553E E10B                       	smpsAlterNote       $0B
00095540 BA0D                       	dc.b	nA4, $0D
00095542 E108                       	smpsAlterNote       $08
00095544 E701                       	dc.b	smpsNoAttack, $01
00095546 E105                       	smpsAlterNote       $05
00095548 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009554C E10B                       	smpsAlterNote       $0B
0009554E E701                       	dc.b	smpsNoAttack, $01
00095550 E10F                       	smpsAlterNote       $0F
00095552 E701                       	dc.b	smpsNoAttack, $01
00095554 E10E                       	smpsAlterNote       $0E
00095556 E701                       	dc.b	smpsNoAttack, $01
00095558 E108                       	smpsAlterNote       $08
0009555A E701                       	dc.b	smpsNoAttack, $01
0009555C E104                       	smpsAlterNote       $04
0009555E E701                       	dc.b	smpsNoAttack, $01
00095560 E108                       	smpsAlterNote       $08
00095562 E701                       	dc.b	smpsNoAttack, $01
00095564 E10B                       	smpsAlterNote       $0B
00095566 E701                       	dc.b	smpsNoAttack, $01
00095568 E10F                       	smpsAlterNote       $0F
0009556A E701                       	dc.b	smpsNoAttack, $01
0009556C E10B                       	smpsAlterNote       $0B
0009556E E701                       	dc.b	smpsNoAttack, $01
00095570 E105                       	smpsAlterNote       $05
00095572 E701                       	dc.b	smpsNoAttack, $01
00095574 E104                       	smpsAlterNote       $04
00095576 E701                       	dc.b	smpsNoAttack, $01
00095578 E108                       	smpsAlterNote       $08
0009557A E701                       	dc.b	smpsNoAttack, $01
0009557C E10E                       	smpsAlterNote       $0E
0009557E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095582 E10B                       	smpsAlterNote       $0B
00095584 E701                       	dc.b	smpsNoAttack, $01
00095586 E105                       	smpsAlterNote       $05
00095588 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009558C E10B                       	smpsAlterNote       $0B
0009558E E701                       	dc.b	smpsNoAttack, $01
00095590 E10E                       	smpsAlterNote       $0E
00095592 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095596 E108                       	smpsAlterNote       $08
00095598 E701                       	dc.b	smpsNoAttack, $01
0009559A E105                       	smpsAlterNote       $05
0009559C 8001                       	dc.b	nRst, $01
0009559E E109                       	smpsAlterNote       $09
000955A0 B60A                       	dc.b	nF4, $0A
000955A2 E108                       	smpsAlterNote       $08
000955A4 B507                       	dc.b	nE4, $07
000955A6 E107                       	smpsAlterNote       $07
000955A8 B30D 8001                  	dc.b	nD4, $0D, nRst, $01
000955AC E108                       	smpsAlterNote       $08
000955AE B503                       	dc.b	nE4, $03
000955B0 E109                       	smpsAlterNote       $09
000955B2 B603 8001 B802 8001        	dc.b	nF4, $03, nRst, $01, nG4, $02, nRst, $01
000955BA E10B                       	smpsAlterNote       $0B
000955BC BA0D                       	dc.b	nA4, $0D
000955BE E108                       	smpsAlterNote       $08
000955C0 E701                       	dc.b	smpsNoAttack, $01
000955C2 E104                       	smpsAlterNote       $04
000955C4 E701                       	dc.b	smpsNoAttack, $01
000955C6 E108                       	smpsAlterNote       $08
000955C8 E701                       	dc.b	smpsNoAttack, $01
000955CA E10B                       	smpsAlterNote       $0B
000955CC E701                       	dc.b	smpsNoAttack, $01
000955CE E10F                       	smpsAlterNote       $0F
000955D0 E701                       	dc.b	smpsNoAttack, $01
000955D2 E10B                       	smpsAlterNote       $0B
000955D4 E701                       	dc.b	smpsNoAttack, $01
000955D6 E105                       	smpsAlterNote       $05
000955D8 E701                       	dc.b	smpsNoAttack, $01
000955DA E104                       	smpsAlterNote       $04
000955DC E701                       	dc.b	smpsNoAttack, $01
000955DE E108                       	smpsAlterNote       $08
000955E0 E701                       	dc.b	smpsNoAttack, $01
000955E2 E10E                       	smpsAlterNote       $0E
000955E4 E701                       	dc.b	smpsNoAttack, $01
000955E6 E10F                       	smpsAlterNote       $0F
000955E8 8001                       	dc.b	nRst, $01
000955EA E109                       	smpsAlterNote       $09
000955EC C20D                       	dc.b	nF5, $0D
000955EE E106                       	smpsAlterNote       $06
000955F0 E701                       	dc.b	smpsNoAttack, $01
000955F2 E102                       	smpsAlterNote       $02
000955F4 E701                       	dc.b	smpsNoAttack, $01
000955F6 E106                       	smpsAlterNote       $06
000955F8 E701                       	dc.b	smpsNoAttack, $01
000955FA E109                       	smpsAlterNote       $09
000955FC E701                       	dc.b	smpsNoAttack, $01
000955FE E10D                       	smpsAlterNote       $0D
00095600 E701                       	dc.b	smpsNoAttack, $01
00095602 E109                       	smpsAlterNote       $09
00095604 E701                       	dc.b	smpsNoAttack, $01
00095606 E103                       	smpsAlterNote       $03
00095608 E701                       	dc.b	smpsNoAttack, $01
0009560A E102                       	smpsAlterNote       $02
0009560C E701                       	dc.b	smpsNoAttack, $01
0009560E E106                       	smpsAlterNote       $06
00095610 E701                       	dc.b	smpsNoAttack, $01
00095612 E10C                       	smpsAlterNote       $0C
00095614 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095618 E109                       	smpsAlterNote       $09
0009561A E701                       	dc.b	smpsNoAttack, $01
0009561C E103                       	smpsAlterNote       $03
0009561E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095622 E109                       	smpsAlterNote       $09
00095624 E701                       	dc.b	smpsNoAttack, $01
00095626 E10C                       	smpsAlterNote       $0C
00095628 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009562C E106                       	smpsAlterNote       $06
0009562E E701                       	dc.b	smpsNoAttack, $01
00095630 E102                       	smpsAlterNote       $02
00095632 E701                       	dc.b	smpsNoAttack, $01
00095634 E103                       	smpsAlterNote       $03
00095636 E701                       	dc.b	smpsNoAttack, $01
00095638 E109                       	smpsAlterNote       $09
0009563A E701                       	dc.b	smpsNoAttack, $01
0009563C E10D                       	smpsAlterNote       $0D
0009563E E701                       	dc.b	smpsNoAttack, $01
00095640 E109                       	smpsAlterNote       $09
00095642 E701                       	dc.b	smpsNoAttack, $01
00095644 E106                       	smpsAlterNote       $06
00095646 E701                       	dc.b	smpsNoAttack, $01
00095648 E102                       	smpsAlterNote       $02
0009564A E701                       	dc.b	smpsNoAttack, $01
0009564C E106                       	smpsAlterNote       $06
0009564E E701                       	dc.b	smpsNoAttack, $01
00095650 E10C                       	smpsAlterNote       $0C
00095652 E701                       	dc.b	smpsNoAttack, $01
00095654 E10D                       	smpsAlterNote       $0D
00095656 E701                       	dc.b	smpsNoAttack, $01
00095658 E109                       	smpsAlterNote       $09
0009565A E701                       	dc.b	smpsNoAttack, $01
0009565C E103                       	smpsAlterNote       $03
0009565E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095662 E106                       	smpsAlterNote       $06
00095664 E701                       	dc.b	smpsNoAttack, $01
00095666 E10C                       	smpsAlterNote       $0C
00095668 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009566C E106                       	smpsAlterNote       $06
0009566E E701                       	dc.b	smpsNoAttack, $01
00095670 E103                       	smpsAlterNote       $03
00095672 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095676 E109                       	smpsAlterNote       $09
00095678 E701                       	dc.b	smpsNoAttack, $01
0009567A E10D                       	smpsAlterNote       $0D
0009567C E701                       	dc.b	smpsNoAttack, $01
0009567E E10C                       	smpsAlterNote       $0C
00095680 E701                       	dc.b	smpsNoAttack, $01
00095682 E106                       	smpsAlterNote       $06
00095684 E701                       	dc.b	smpsNoAttack, $01
00095686 E103                       	smpsAlterNote       $03
00095688 8001                       	dc.b	nRst, $01
0009568A E109                       	smpsAlterNote       $09
0009568C C206 8001                  	dc.b	nF5, $06, nRst, $01
00095692 E10C                       	smpsAlterNote       $0C
00095694 E601                       	smpsAlterVol        $01
00095696 BB0D                       	dc.b	nBb4, $0D
00095698 E106                       	smpsAlterNote       $06
0009569A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009569E E109                       	smpsAlterNote       $09
000956A0 E701                       	dc.b	smpsNoAttack, $01
000956A2 E10F                       	smpsAlterNote       $0F
000956A4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000956A8 E109                       	smpsAlterNote       $09
000956AA E701                       	dc.b	smpsNoAttack, $01
000956AC E106                       	smpsAlterNote       $06
000956AE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000956B2 E10C                       	smpsAlterNote       $0C
000956B4 E701                       	dc.b	smpsNoAttack, $01
000956B6 E110                       	smpsAlterNote       $10
000956B8 E701                       	dc.b	smpsNoAttack, $01
000956BA E10F                       	smpsAlterNote       $0F
000956BC E701                       	dc.b	smpsNoAttack, $01
000956BE E109                       	smpsAlterNote       $09
000956C0 E701                       	dc.b	smpsNoAttack, $01
000956C2 E105                       	smpsAlterNote       $05
000956C4 E701                       	dc.b	smpsNoAttack, $01
000956C6 E106                       	smpsAlterNote       $06
000956C8 8001 BD0D                  	dc.b	nRst, $01, nC5, $0D
000956CC E103                       	smpsAlterNote       $03
000956CE E701                       	dc.b	smpsNoAttack, $01
000956D0 E1FF                       	smpsAlterNote       $FF
000956D2 E701                       	dc.b	smpsNoAttack, $01
000956D4 E103                       	smpsAlterNote       $03
000956D6 E701                       	dc.b	smpsNoAttack, $01
000956D8 E106                       	smpsAlterNote       $06
000956DA E701                       	dc.b	smpsNoAttack, $01
000956DC E10A                       	smpsAlterNote       $0A
000956DE E701                       	dc.b	smpsNoAttack, $01
000956E0 E106                       	smpsAlterNote       $06
000956E2 E701                       	dc.b	smpsNoAttack, $01
000956E4 E100                       	smpsAlterNote       $00
000956E6 E701                       	dc.b	smpsNoAttack, $01
000956E8 E1FF                       	smpsAlterNote       $FF
000956EA E701                       	dc.b	smpsNoAttack, $01
000956EC E103                       	smpsAlterNote       $03
000956EE E701                       	dc.b	smpsNoAttack, $01
000956F0 E109                       	smpsAlterNote       $09
000956F2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000956F6 E106                       	smpsAlterNote       $06
000956F8 E701                       	dc.b	smpsNoAttack, $01
000956FA E100                       	smpsAlterNote       $00
000956FC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095700 E107                       	smpsAlterNote       $07
00095702 BF0E                       	dc.b	nD5, $0E
00095704 E101                       	smpsAlterNote       $01
00095706 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009570A E107                       	smpsAlterNote       $07
0009570C E701                       	dc.b	smpsNoAttack, $01
0009570E E10A                       	smpsAlterNote       $0A
00095710 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095714 E104                       	smpsAlterNote       $04
00095716 E701                       	dc.b	smpsNoAttack, $01
00095718 E100                       	smpsAlterNote       $00
0009571A E701                       	dc.b	smpsNoAttack, $01
0009571C E101                       	smpsAlterNote       $01
0009571E E701                       	dc.b	smpsNoAttack, $01
00095720 E107                       	smpsAlterNote       $07
00095722 E701                       	dc.b	smpsNoAttack, $01
00095724 E10B                       	smpsAlterNote       $0B
00095726 E701                       	dc.b	smpsNoAttack, $01
00095728 E107                       	smpsAlterNote       $07
0009572A E701                       	dc.b	smpsNoAttack, $01
0009572C E104                       	smpsAlterNote       $04
0009572E E701                       	dc.b	smpsNoAttack, $01
00095730 E100                       	smpsAlterNote       $00
00095732 E701                       	dc.b	smpsNoAttack, $01
00095734 E101                       	smpsAlterNote       $01
00095736 8001                       	dc.b	nRst, $01
00095738 E108                       	smpsAlterNote       $08
0009573A C10C                       	dc.b	nE5, $0C
0009573C E109                       	smpsAlterNote       $09
0009573E C201 8001                  	dc.b	nF5, $01, nRst, $01
00095742 E10A                       	smpsAlterNote       $0A
00095744 8001                       	dc.b	nRst, $01
00095746 E109                       	smpsAlterNote       $09
00095748 C40C C20D                  	dc.b	nG5, $0C, nF5, $0D
0009574C E106                       	smpsAlterNote       $06
0009574E E701                       	dc.b	smpsNoAttack, $01
00095750 E102                       	smpsAlterNote       $02
00095752 E701                       	dc.b	smpsNoAttack, $01
00095754 E103                       	smpsAlterNote       $03
00095756 E701                       	dc.b	smpsNoAttack, $01
00095758 E109                       	smpsAlterNote       $09
0009575A E701                       	dc.b	smpsNoAttack, $01
0009575C E10D                       	smpsAlterNote       $0D
0009575E E701                       	dc.b	smpsNoAttack, $01
00095760 E109                       	smpsAlterNote       $09
00095762 E701                       	dc.b	smpsNoAttack, $01
00095764 E106                       	smpsAlterNote       $06
00095766 E701                       	dc.b	smpsNoAttack, $01
00095768 E102                       	smpsAlterNote       $02
0009576A E701                       	dc.b	smpsNoAttack, $01
0009576C E106                       	smpsAlterNote       $06
0009576E E701                       	dc.b	smpsNoAttack, $01
00095770 E10C                       	smpsAlterNote       $0C
00095772 E701                       	dc.b	smpsNoAttack, $01
00095774 E10D                       	smpsAlterNote       $0D
00095776 E701                       	dc.b	smpsNoAttack, $01
00095778 E109                       	smpsAlterNote       $09
0009577A C40D                       	dc.b	nG5, $0D
0009577C E106                       	smpsAlterNote       $06
0009577E E701                       	dc.b	smpsNoAttack, $01
00095780 E102                       	smpsAlterNote       $02
00095782 E701                       	dc.b	smpsNoAttack, $01
00095784 E103                       	smpsAlterNote       $03
00095786 E701                       	dc.b	smpsNoAttack, $01
00095788 E109                       	smpsAlterNote       $09
0009578A E701                       	dc.b	smpsNoAttack, $01
0009578C E108                       	smpsAlterNote       $08
0009578E C007 C002 C002 8001 C001+  	dc.b	nEb5, $07, nEb5, $02, nEb5, $02, nRst, $01, nEb5, $01, nRst, $01
0009579A E109                       	smpsAlterNote       $09
0009579C C20D                       	dc.b	nF5, $0D
0009579E E106                       	smpsAlterNote       $06
000957A0 E701                       	dc.b	smpsNoAttack, $01
000957A2 E102                       	smpsAlterNote       $02
000957A4 E701                       	dc.b	smpsNoAttack, $01
000957A6 E106                       	smpsAlterNote       $06
000957A8 E701                       	dc.b	smpsNoAttack, $01
000957AA E109                       	smpsAlterNote       $09
000957AC E701                       	dc.b	smpsNoAttack, $01
000957AE E10D                       	smpsAlterNote       $0D
000957B0 E701                       	dc.b	smpsNoAttack, $01
000957B2 E109                       	smpsAlterNote       $09
000957B4 E701                       	dc.b	smpsNoAttack, $01
000957B6 E103                       	smpsAlterNote       $03
000957B8 E701                       	dc.b	smpsNoAttack, $01
000957BA E102                       	smpsAlterNote       $02
000957BC E701                       	dc.b	smpsNoAttack, $01
000957BE E106                       	smpsAlterNote       $06
000957C0 E701                       	dc.b	smpsNoAttack, $01
000957C2 E10C                       	smpsAlterNote       $0C
000957C4 E701                       	dc.b	smpsNoAttack, $01
000957C6 E10D                       	smpsAlterNote       $0D
000957C8 8001                       	dc.b	nRst, $01
000957CA E112                       	smpsAlterNote       $12
000957CC C401                       	dc.b	nG5, $01
000957CE E1EB                       	smpsAlterNote       $EB
000957D0 E7C5 01                    	dc.b	smpsNoAttack, nAb5, $01
000957D3 E1FD                       	smpsAlterNote       $FD
000957D5 E701                       	dc.b	smpsNoAttack, $01
000957D7 E10F                       	smpsAlterNote       $0F
000957D9 E701                       	dc.b	smpsNoAttack, $01
000957DB E118                       	smpsAlterNote       $18
000957DD E701                       	dc.b	smpsNoAttack, $01
000957DF E1ED                       	smpsAlterNote       $ED
000957E1 E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
000957E4 E1FF                       	smpsAlterNote       $FF
000957E6 E701                       	dc.b	smpsNoAttack, $01
000957E8 E10B                       	smpsAlterNote       $0B
000957EA E703                       	dc.b	smpsNoAttack, $03
000957EC E109                       	smpsAlterNote       $09
000957EE C407                       	dc.b	nG5, $07
000957F0 E108                       	smpsAlterNote       $08
000957F2 C006 8001 C002 C002 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $02, nEb5, $02, nEb5, $02, nRst, $01
000957FE E109                       	smpsAlterNote       $09
00095800 C20D                       	dc.b	nF5, $0D
00095802 E103                       	smpsAlterNote       $03
00095804 E701                       	dc.b	smpsNoAttack, $01
00095806 E102                       	smpsAlterNote       $02
00095808 E701                       	dc.b	smpsNoAttack, $01
0009580A E106                       	smpsAlterNote       $06
0009580C E701                       	dc.b	smpsNoAttack, $01
0009580E E10C                       	smpsAlterNote       $0C
00095810 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095814 E109                       	smpsAlterNote       $09
00095816 E701                       	dc.b	smpsNoAttack, $01
00095818 E103                       	smpsAlterNote       $03
0009581A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009581E E109                       	smpsAlterNote       $09
00095820 E701                       	dc.b	smpsNoAttack, $01
00095822 E10C                       	smpsAlterNote       $0C
00095824 E701                       	dc.b	smpsNoAttack, $01
00095826 E10D                       	smpsAlterNote       $0D
00095828 8001                       	dc.b	nRst, $01
0009582A E10B                       	smpsAlterNote       $0B
0009582C C609 8001                  	dc.b	nA5, $09, nRst, $01
00095830 E109                       	smpsAlterNote       $09
00095832 B806 8001                  	dc.b	nG4, $06, nRst, $01
00095836 E108                       	smpsAlterNote       $08
00095838 C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
00095844 8001                       	dc.b	nRst, $01
00095846 E109                       	smpsAlterNote       $09
00095848 C20D                       	dc.b	nF5, $0D
0009584A E103                       	smpsAlterNote       $03
0009584C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095850 E106                       	smpsAlterNote       $06
00095852 E701                       	dc.b	smpsNoAttack, $01
00095854 E10C                       	smpsAlterNote       $0C
00095856 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009585A E106                       	smpsAlterNote       $06
0009585C E701                       	dc.b	smpsNoAttack, $01
0009585E E103                       	smpsAlterNote       $03
00095860 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095864 E109                       	smpsAlterNote       $09
00095866 E701                       	dc.b	smpsNoAttack, $01
00095868 E10D                       	smpsAlterNote       $0D
0009586A E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00095870 E108                       	smpsAlterNote       $08
00095872 E6FF                       	smpsAlterVol        $FF
00095874 A806                       	dc.b	nEb3, $06
00095876 E10C                       	smpsAlterNote       $0C
00095878 A303 8001                  	dc.b	nBb2, $03, nRst, $01
0009587C E108                       	smpsAlterNote       $08
0009587E A803                       	dc.b	nEb3, $03
00095880 E109                       	smpsAlterNote       $09
00095882 AC03 8001                  	dc.b	nG3, $03, nRst, $01
00095886 E10C                       	smpsAlterNote       $0C
00095888 AF02 8001 AF03 8007        	dc.b	nBb3, $02, nRst, $01, nBb3, $03, nRst, $07
00095892 E109                       	smpsAlterNote       $09
00095894 E602                       	smpsAlterVol        $02
00095896 B604                       	dc.b	nF4, $04
00095898 E602                       	smpsAlterVol        $02
0009589A F6F1 AA                    	smpsJump            music84_Jump02
0009589D                            
0009589D                            ; FM4 Data
0009589D                            music84_FM4:
0009589F E040                       	smpsPan             panRight, $00
000958A1 8003                       	dc.b	nRst, $03
000958A3 E10F                       	smpsAlterNote       $0F
000958A5 C603 8008                  	dc.b	nA5, $03, nRst, $08
000958A9 E10D                       	smpsAlterNote       $0D
000958AB C403 800A                  	dc.b	nG5, $03, nRst, $0A
000958AF E10C                       	smpsAlterNote       $0C
000958B1 C103 8004                  	dc.b	nE5, $03, nRst, $04
000958B7 E6FE                       	smpsAlterVol        $FE
000958B9 E110                       	smpsAlterNote       $10
000958BB C703 8001                  	dc.b	nBb5, $03, nRst, $01
000958BF E10F                       	smpsAlterNote       $0F
000958C1 C602 8001                  	dc.b	nA5, $02, nRst, $01
000958C5 E10D                       	smpsAlterNote       $0D
000958C7 C403 C401 E7C2 0280 01     	dc.b	nG5, $03, nG5, $01, smpsNoAttack, nF5, $02, nRst, $01
000958D0 E10C                       	smpsAlterNote       $0C
000958D2 C103                       	dc.b	nE5, $03
000958D4 E10A                       	smpsAlterNote       $0A
000958D6 BD03 8001                  	dc.b	nC5, $03, nRst, $01
000958DC 03                         	dc.b	$03
000958DD                            
000958DD                            music84_Jump01:
000958DD E10B                       	smpsAlterNote       $0B
000958DF BF03 8001                  	dc.b	nD5, $03, nRst, $01
000958E3 E10C                       	smpsAlterNote       $0C
000958E5 C102 8001                  	dc.b	nE5, $02, nRst, $01
000958E9 E10D                       	smpsAlterNote       $0D
000958EB C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
000958F5 E10B                       	smpsAlterNote       $0B
000958F7 BF03 C90D                  	dc.b	nD5, $03, nC6, $0D
000958FB E107                       	smpsAlterNote       $07
000958FD E701                       	dc.b	smpsNoAttack, $01
000958FF E103                       	smpsAlterNote       $03
00095901 E701                       	dc.b	smpsNoAttack, $01
00095903 E104                       	smpsAlterNote       $04
00095905 E701                       	dc.b	smpsNoAttack, $01
00095907 E10A                       	smpsAlterNote       $0A
00095909 E701                       	dc.b	smpsNoAttack, $01
0009590B E10E                       	smpsAlterNote       $0E
0009590D E701                       	dc.b	smpsNoAttack, $01
0009590F E10A                       	smpsAlterNote       $0A
00095911 E701                       	dc.b	smpsNoAttack, $01
00095913 E107                       	smpsAlterNote       $07
00095915 E701                       	dc.b	smpsNoAttack, $01
00095917 E104                       	smpsAlterNote       $04
00095919 8001                       	dc.b	nRst, $01
0009591B E110                       	smpsAlterNote       $10
0009591D C703                       	dc.b	nBb5, $03
0009591F E10F                       	smpsAlterNote       $0F
00095921 C603 8001                  	dc.b	nA5, $03, nRst, $01
00095925 E10D                       	smpsAlterNote       $0D
00095927 C402 8001 C60D             	dc.b	nG5, $02, nRst, $01, nA5, $0D
0009592D E10C                       	smpsAlterNote       $0C
0009592F E701                       	dc.b	smpsNoAttack, $01
00095931 E108                       	smpsAlterNote       $08
00095933 E701                       	dc.b	smpsNoAttack, $01
00095935 E10C                       	smpsAlterNote       $0C
00095937 E701                       	dc.b	smpsNoAttack, $01
00095939 E10F                       	smpsAlterNote       $0F
0009593B E701                       	dc.b	smpsNoAttack, $01
0009593D E113                       	smpsAlterNote       $13
0009593F E701                       	dc.b	smpsNoAttack, $01
00095941 E10F                       	smpsAlterNote       $0F
00095943 E701                       	dc.b	smpsNoAttack, $01
00095945 E109                       	smpsAlterNote       $09
00095947 E701                       	dc.b	smpsNoAttack, $01
00095949 E108                       	smpsAlterNote       $08
0009594B E701                       	dc.b	smpsNoAttack, $01
0009594D E10C                       	smpsAlterNote       $0C
0009594F E701                       	dc.b	smpsNoAttack, $01
00095951 E112                       	smpsAlterNote       $12
00095953 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095957 E10C                       	smpsAlterNote       $0C
00095959 E701                       	dc.b	smpsNoAttack, $01
0009595B E109                       	smpsAlterNote       $09
0009595D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095961 E10F                       	smpsAlterNote       $0F
00095963 E701                       	dc.b	smpsNoAttack, $01
00095965 E113                       	smpsAlterNote       $13
00095967 E701                       	dc.b	smpsNoAttack, $01
00095969 E112                       	smpsAlterNote       $12
0009596B E701                       	dc.b	smpsNoAttack, $01
0009596D E10C                       	smpsAlterNote       $0C
0009596F E701                       	dc.b	smpsNoAttack, $01
00095971 E108                       	smpsAlterNote       $08
00095973 E701                       	dc.b	smpsNoAttack, $01
00095975 E10C                       	smpsAlterNote       $0C
00095977 E701                       	dc.b	smpsNoAttack, $01
00095979 E10F                       	smpsAlterNote       $0F
0009597B E701                       	dc.b	smpsNoAttack, $01
0009597D E113                       	smpsAlterNote       $13
0009597F E701                       	dc.b	smpsNoAttack, $01
00095981 E10F                       	smpsAlterNote       $0F
00095983 E701                       	dc.b	smpsNoAttack, $01
00095985 E109                       	smpsAlterNote       $09
00095987 E701                       	dc.b	smpsNoAttack, $01
00095989 E108                       	smpsAlterNote       $08
0009598B E701                       	dc.b	smpsNoAttack, $01
0009598D E10C                       	smpsAlterNote       $0C
0009598F E701                       	dc.b	smpsNoAttack, $01
00095991 E112                       	smpsAlterNote       $12
00095993 E701                       	dc.b	smpsNoAttack, $01
00095995 E113                       	smpsAlterNote       $13
00095997 800F                       	dc.b	nRst, $0F
00095999 E10B                       	smpsAlterNote       $0B
0009599B BF03                       	dc.b	nD5, $03
0009599D E10C                       	smpsAlterNote       $0C
0009599F C103 8001                  	dc.b	nE5, $03, nRst, $01
000959A3 E10D                       	smpsAlterNote       $0D
000959A5 C202 8001 C403 C607        	dc.b	nF5, $02, nRst, $01, nG5, $03, nA5, $07
000959AD E10B                       	smpsAlterNote       $0B
000959AF BF03 8001 C90D CB03 8001   	dc.b	nD5, $03, nRst, $01, nC6, $0D, nD6, $03, nRst, $01
000959B9 E110                       	smpsAlterNote       $10
000959BB C704                       	dc.b	nBb5, $04
000959BD E10F                       	smpsAlterNote       $0F
000959BF C604 8001                  	dc.b	nA5, $04, nRst, $01
000959C3 E10D                       	smpsAlterNote       $0D
000959C5 C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
000959CB E109                       	smpsAlterNote       $09
000959CD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000959D1 E10F                       	smpsAlterNote       $0F
000959D3 E701                       	dc.b	smpsNoAttack, $01
000959D5 E112                       	smpsAlterNote       $12
000959D7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000959DB E10C                       	smpsAlterNote       $0C
000959DD E701                       	dc.b	smpsNoAttack, $01
000959DF E108                       	smpsAlterNote       $08
000959E1 E701                       	dc.b	smpsNoAttack, $01
000959E3 E109                       	smpsAlterNote       $09
000959E5 E701                       	dc.b	smpsNoAttack, $01
000959E7 E10F                       	smpsAlterNote       $0F
000959E9 E701                       	dc.b	smpsNoAttack, $01
000959EB E113                       	smpsAlterNote       $13
000959ED E701                       	dc.b	smpsNoAttack, $01
000959EF E10F                       	smpsAlterNote       $0F
000959F1 E701                       	dc.b	smpsNoAttack, $01
000959F3 E10C                       	smpsAlterNote       $0C
000959F5 E701                       	dc.b	smpsNoAttack, $01
000959F7 E108                       	smpsAlterNote       $08
000959F9 E701                       	dc.b	smpsNoAttack, $01
000959FB E10C                       	smpsAlterNote       $0C
000959FD E701                       	dc.b	smpsNoAttack, $01
000959FF E112                       	smpsAlterNote       $12
00095A01 E701                       	dc.b	smpsNoAttack, $01
00095A03 E113                       	smpsAlterNote       $13
00095A05 E701                       	dc.b	smpsNoAttack, $01
00095A07 E10F                       	smpsAlterNote       $0F
00095A09 E701                       	dc.b	smpsNoAttack, $01
00095A0B E109                       	smpsAlterNote       $09
00095A0D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095A11 E10C                       	smpsAlterNote       $0C
00095A13 E701                       	dc.b	smpsNoAttack, $01
00095A15 E112                       	smpsAlterNote       $12
00095A17 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095A1B E10C                       	smpsAlterNote       $0C
00095A1D E701                       	dc.b	smpsNoAttack, $01
00095A1F E109                       	smpsAlterNote       $09
00095A21 E701                       	dc.b	smpsNoAttack, $01
00095A23 E10D                       	smpsAlterNote       $0D
00095A25 C401 8001                  	dc.b	nG5, $01, nRst, $01
00095A29 E10F                       	smpsAlterNote       $0F
00095A2B C501 8001 C60D C604 8001   	dc.b	nAb5, $01, nRst, $01, nA5, $0D, nA5, $04, nRst, $01
00095A35 E10D                       	smpsAlterNote       $0D
00095A37 C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
00095A3D E10B                       	smpsAlterNote       $0B
00095A3F BF0D                       	dc.b	nD5, $0D
00095A41 E108                       	smpsAlterNote       $08
00095A43 E701                       	dc.b	smpsNoAttack, $01
00095A45 E104                       	smpsAlterNote       $04
00095A47 E701                       	dc.b	smpsNoAttack, $01
00095A49 E108                       	smpsAlterNote       $08
00095A4B E701                       	dc.b	smpsNoAttack, $01
00095A4D E10B                       	smpsAlterNote       $0B
00095A4F E701                       	dc.b	smpsNoAttack, $01
00095A51 E10F                       	smpsAlterNote       $0F
00095A53 E701                       	dc.b	smpsNoAttack, $01
00095A55 E10B                       	smpsAlterNote       $0B
00095A57 E701                       	dc.b	smpsNoAttack, $01
00095A59 E105                       	smpsAlterNote       $05
00095A5B E701                       	dc.b	smpsNoAttack, $01
00095A5D E104                       	smpsAlterNote       $04
00095A5F E701                       	dc.b	smpsNoAttack, $01
00095A61 E108                       	smpsAlterNote       $08
00095A63 E701                       	dc.b	smpsNoAttack, $01
00095A65 E10E                       	smpsAlterNote       $0E
00095A67 E701                       	dc.b	smpsNoAttack, $01
00095A69 E10F                       	smpsAlterNote       $0F
00095A6B 8001                       	dc.b	nRst, $01
00095A6D E10C                       	smpsAlterNote       $0C
00095A6F C101                       	dc.b	nE5, $01
00095A71 E10D                       	smpsAlterNote       $0D
00095A73 C201 C401 C607             	dc.b	nF5, $01, nG5, $01, nA5, $07
00095A79 E10F                       	smpsAlterNote       $0F
00095A7B C606 8001                  	dc.b	nA5, $06, nRst, $01
00095A7F E10C                       	smpsAlterNote       $0C
00095A81 CD06 8001                  	dc.b	nE6, $06, nRst, $01
00095A85 E10D                       	smpsAlterNote       $0D
00095A87 CE06 8001                  	dc.b	nF6, $06, nRst, $01
00095A8B E10C                       	smpsAlterNote       $0C
00095A8D CD03                       	dc.b	nE6, $03
00095A8F E10A                       	smpsAlterNote       $0A
00095A91 C903 8001                  	dc.b	nC6, $03, nRst, $01
00095A95 E10D                       	smpsAlterNote       $0D
00095A97 C402 8001 C70D E701        	dc.b	nG5, $02, nRst, $01, nBb5, $0D, smpsNoAttack, $01
00095A9F E109                       	smpsAlterNote       $09
00095AA1 E701                       	dc.b	smpsNoAttack, $01
00095AA3 E10D                       	smpsAlterNote       $0D
00095AA5 E701                       	dc.b	smpsNoAttack, $01
00095AA7 E110                       	smpsAlterNote       $10
00095AA9 E701                       	dc.b	smpsNoAttack, $01
00095AAB E114                       	smpsAlterNote       $14
00095AAD E701                       	dc.b	smpsNoAttack, $01
00095AAF E110                       	smpsAlterNote       $10
00095AB1 E701                       	dc.b	smpsNoAttack, $01
00095AB3 E10A                       	smpsAlterNote       $0A
00095AB5 E701                       	dc.b	smpsNoAttack, $01
00095AB7 E109                       	smpsAlterNote       $09
00095AB9 E701                       	dc.b	smpsNoAttack, $01
00095ABB E10D                       	smpsAlterNote       $0D
00095ABD E701                       	dc.b	smpsNoAttack, $01
00095ABF E113                       	smpsAlterNote       $13
00095AC1 E701                       	dc.b	smpsNoAttack, $01
00095AC3 E114                       	smpsAlterNote       $14
00095AC5 8001                       	dc.b	nRst, $01
00095AC7 E10F                       	smpsAlterNote       $0F
00095AC9 C606 8001 C50D             	dc.b	nA5, $06, nRst, $01, nAb5, $0D
00095ACF E10C                       	smpsAlterNote       $0C
00095AD1 E701                       	dc.b	smpsNoAttack, $01
00095AD3 E108                       	smpsAlterNote       $08
00095AD5 E701                       	dc.b	smpsNoAttack, $01
00095AD7 E10C                       	smpsAlterNote       $0C
00095AD9 E701                       	dc.b	smpsNoAttack, $01
00095ADB E112                       	smpsAlterNote       $12
00095ADD E701                       	dc.b	smpsNoAttack, $01
00095ADF E113                       	smpsAlterNote       $13
00095AE1 E701                       	dc.b	smpsNoAttack, $01
00095AE3 E10F                       	smpsAlterNote       $0F
00095AE5 E701                       	dc.b	smpsNoAttack, $01
00095AE7 E109                       	smpsAlterNote       $09
00095AE9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095AED E10C                       	smpsAlterNote       $0C
00095AEF E701                       	dc.b	smpsNoAttack, $01
00095AF1 E112                       	smpsAlterNote       $12
00095AF3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095AF7 E10C                       	smpsAlterNote       $0C
00095AF9 E701                       	dc.b	smpsNoAttack, $01
00095AFB E109                       	smpsAlterNote       $09
00095AFD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095B01 E10F                       	smpsAlterNote       $0F
00095B03 E701                       	dc.b	smpsNoAttack, $01
00095B05 E113                       	smpsAlterNote       $13
00095B07 E701                       	dc.b	smpsNoAttack, $01
00095B09 E112                       	smpsAlterNote       $12
00095B0B E701                       	dc.b	smpsNoAttack, $01
00095B0D E10C                       	smpsAlterNote       $0C
00095B0F E701                       	dc.b	smpsNoAttack, $01
00095B11 E108                       	smpsAlterNote       $08
00095B13 E701                       	dc.b	smpsNoAttack, $01
00095B15 E10C                       	smpsAlterNote       $0C
00095B17 E701                       	dc.b	smpsNoAttack, $01
00095B19 E10F                       	smpsAlterNote       $0F
00095B1B E701                       	dc.b	smpsNoAttack, $01
00095B1D E113                       	smpsAlterNote       $13
00095B1F E701                       	dc.b	smpsNoAttack, $01
00095B21 E10F                       	smpsAlterNote       $0F
00095B23 E701                       	dc.b	smpsNoAttack, $01
00095B25 E109                       	smpsAlterNote       $09
00095B27 E701                       	dc.b	smpsNoAttack, $01
00095B29 E108                       	smpsAlterNote       $08
00095B2B E701                       	dc.b	smpsNoAttack, $01
00095B2D E10C                       	smpsAlterNote       $0C
00095B2F E701                       	dc.b	smpsNoAttack, $01
00095B31 E112                       	smpsAlterNote       $12
00095B33 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095B37 E10F                       	smpsAlterNote       $0F
00095B39 E701                       	dc.b	smpsNoAttack, $01
00095B3B E109                       	smpsAlterNote       $09
00095B3D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095B41 E10F                       	smpsAlterNote       $0F
00095B43 E701                       	dc.b	smpsNoAttack, $01
00095B45 E113                       	smpsAlterNote       $13
00095B47 E701                       	dc.b	smpsNoAttack, $01
00095B49 E112                       	smpsAlterNote       $12
00095B4B E701                       	dc.b	smpsNoAttack, $01
00095B4D E10C                       	smpsAlterNote       $0C
00095B4F E701                       	dc.b	smpsNoAttack, $01
00095B51 E108                       	smpsAlterNote       $08
00095B53 E701                       	dc.b	smpsNoAttack, $01
00095B55 E10C                       	smpsAlterNote       $0C
00095B57 E701                       	dc.b	smpsNoAttack, $01
00095B59 E10F                       	smpsAlterNote       $0F
00095B5B E701                       	dc.b	smpsNoAttack, $01
00095B5D E113                       	smpsAlterNote       $13
00095B5F E701                       	dc.b	smpsNoAttack, $01
00095B61 E10F                       	smpsAlterNote       $0F
00095B63 E701                       	dc.b	smpsNoAttack, $01
00095B65 E109                       	smpsAlterNote       $09
00095B67 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00095B6B E10F                       	smpsAlterNote       $0F
00095B6D C60D                       	dc.b	nA5, $0D
00095B6F E109                       	smpsAlterNote       $09
00095B71 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095B75 E10C                       	smpsAlterNote       $0C
00095B77 E701                       	dc.b	smpsNoAttack, $01
00095B79 E112                       	smpsAlterNote       $12
00095B7B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095B7F E10C                       	smpsAlterNote       $0C
00095B81 E701                       	dc.b	smpsNoAttack, $01
00095B83 E109                       	smpsAlterNote       $09
00095B85 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095B89 E10F                       	smpsAlterNote       $0F
00095B8B E701                       	dc.b	smpsNoAttack, $01
00095B8D E113                       	smpsAlterNote       $13
00095B8F E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00095B95 E10D                       	smpsAlterNote       $0D
00095B97 C206 C203 8001 C203        	dc.b	nF5, $06, nF5, $03, nRst, $01, nF5, $03
00095B9F E10C                       	smpsAlterNote       $0C
00095BA1 C103 800E                  	dc.b	nE5, $03, nRst, $0E
00095BA7 E6FF                       	smpsAlterVol        $FF
00095BA9 E10B                       	smpsAlterNote       $0B
00095BAB BF03 8001                  	dc.b	nD5, $03, nRst, $01
00095BAF E10C                       	smpsAlterNote       $0C
00095BB1 C103                       	dc.b	nE5, $03
00095BB3 E10D                       	smpsAlterNote       $0D
00095BB5 C203 8001 C403 C606 8001   	dc.b	nF5, $03, nRst, $01, nG5, $03, nA5, $06, nRst, $01
00095BBF E10B                       	smpsAlterNote       $0B
00095BC1 BF03 C90D                  	dc.b	nD5, $03, nC6, $0D
00095BC5 E107                       	smpsAlterNote       $07
00095BC7 E701                       	dc.b	smpsNoAttack, $01
00095BC9 E104                       	smpsAlterNote       $04
00095BCB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095BCF E10A                       	smpsAlterNote       $0A
00095BD1 E701                       	dc.b	smpsNoAttack, $01
00095BD3 E10D                       	smpsAlterNote       $0D
00095BD5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095BD9 E107                       	smpsAlterNote       $07
00095BDB E701                       	dc.b	smpsNoAttack, $01
00095BDD E104                       	smpsAlterNote       $04
00095BDF 8001                       	dc.b	nRst, $01
00095BE1 E110                       	smpsAlterNote       $10
00095BE3 C703                       	dc.b	nBb5, $03
00095BE5 E10F                       	smpsAlterNote       $0F
00095BE7 C603 8001                  	dc.b	nA5, $03, nRst, $01
00095BEB E10D                       	smpsAlterNote       $0D
00095BED C403 C60D                  	dc.b	nG5, $03, nA5, $0D
00095BF1 E10C                       	smpsAlterNote       $0C
00095BF3 E701                       	dc.b	smpsNoAttack, $01
00095BF5 E108                       	smpsAlterNote       $08
00095BF7 E701                       	dc.b	smpsNoAttack, $01
00095BF9 E109                       	smpsAlterNote       $09
00095BFB E701                       	dc.b	smpsNoAttack, $01
00095BFD E10F                       	smpsAlterNote       $0F
00095BFF E701                       	dc.b	smpsNoAttack, $01
00095C01 E113                       	smpsAlterNote       $13
00095C03 E701                       	dc.b	smpsNoAttack, $01
00095C05 E10F                       	smpsAlterNote       $0F
00095C07 E701                       	dc.b	smpsNoAttack, $01
00095C09 E10C                       	smpsAlterNote       $0C
00095C0B E701                       	dc.b	smpsNoAttack, $01
00095C0D E108                       	smpsAlterNote       $08
00095C0F E701                       	dc.b	smpsNoAttack, $01
00095C11 E10C                       	smpsAlterNote       $0C
00095C13 E701                       	dc.b	smpsNoAttack, $01
00095C15 E112                       	smpsAlterNote       $12
00095C17 E701                       	dc.b	smpsNoAttack, $01
00095C19 E113                       	smpsAlterNote       $13
00095C1B E701                       	dc.b	smpsNoAttack, $01
00095C1D E10F                       	smpsAlterNote       $0F
00095C1F E701                       	dc.b	smpsNoAttack, $01
00095C21 E109                       	smpsAlterNote       $09
00095C23 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095C27 E10C                       	smpsAlterNote       $0C
00095C29 E701                       	dc.b	smpsNoAttack, $01
00095C2B E112                       	smpsAlterNote       $12
00095C2D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095C31 E10C                       	smpsAlterNote       $0C
00095C33 E701                       	dc.b	smpsNoAttack, $01
00095C35 E109                       	smpsAlterNote       $09
00095C37 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095C3B E10F                       	smpsAlterNote       $0F
00095C3D E701                       	dc.b	smpsNoAttack, $01
00095C3F E113                       	smpsAlterNote       $13
00095C41 E701                       	dc.b	smpsNoAttack, $01
00095C43 E112                       	smpsAlterNote       $12
00095C45 E701                       	dc.b	smpsNoAttack, $01
00095C47 E10C                       	smpsAlterNote       $0C
00095C49 E701                       	dc.b	smpsNoAttack, $01
00095C4B E108                       	smpsAlterNote       $08
00095C4D E701                       	dc.b	smpsNoAttack, $01
00095C4F E10C                       	smpsAlterNote       $0C
00095C51 E701                       	dc.b	smpsNoAttack, $01
00095C53 E10F                       	smpsAlterNote       $0F
00095C55 E701                       	dc.b	smpsNoAttack, $01
00095C57 E113                       	smpsAlterNote       $13
00095C59 E701                       	dc.b	smpsNoAttack, $01
00095C5B E10F                       	smpsAlterNote       $0F
00095C5D BA03 8001                  	dc.b	nA4, $03, nRst, $01
00095C61 E110                       	smpsAlterNote       $10
00095C63 BB03                       	dc.b	nBb4, $03
00095C65 E10F                       	smpsAlterNote       $0F
00095C67 BA06 8001                  	dc.b	nA4, $06, nRst, $01
00095C6B E10B                       	smpsAlterNote       $0B
00095C6D BF03                       	dc.b	nD5, $03
00095C6F E10C                       	smpsAlterNote       $0C
00095C71 C103 8001                  	dc.b	nE5, $03, nRst, $01
00095C75 E10D                       	smpsAlterNote       $0D
00095C77 C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
00095C81 E10B                       	smpsAlterNote       $0B
00095C83 BF02 8001 C90D 8001 CB02+  	dc.b	nD5, $02, nRst, $01, nC6, $0D, nRst, $01, nD6, $02, nRst, $01
00095C8F E110                       	smpsAlterNote       $10
00095C91 C704 8001                  	dc.b	nBb5, $04, nRst, $01
00095C95 E10F                       	smpsAlterNote       $0F
00095C97 C604                       	dc.b	nA5, $04
00095C99 E10D                       	smpsAlterNote       $0D
00095C9B C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
00095CA1 E109                       	smpsAlterNote       $09
00095CA3 E701                       	dc.b	smpsNoAttack, $01
00095CA5 E108                       	smpsAlterNote       $08
00095CA7 E701                       	dc.b	smpsNoAttack, $01
00095CA9 E10C                       	smpsAlterNote       $0C
00095CAB E701                       	dc.b	smpsNoAttack, $01
00095CAD E112                       	smpsAlterNote       $12
00095CAF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095CB3 E10F                       	smpsAlterNote       $0F
00095CB5 E701                       	dc.b	smpsNoAttack, $01
00095CB7 E109                       	smpsAlterNote       $09
00095CB9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095CBD E10F                       	smpsAlterNote       $0F
00095CBF E701                       	dc.b	smpsNoAttack, $01
00095CC1 E112                       	smpsAlterNote       $12
00095CC3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095CC7 E10C                       	smpsAlterNote       $0C
00095CC9 E701                       	dc.b	smpsNoAttack, $01
00095CCB E108                       	smpsAlterNote       $08
00095CCD E701                       	dc.b	smpsNoAttack, $01
00095CCF E109                       	smpsAlterNote       $09
00095CD1 E701                       	dc.b	smpsNoAttack, $01
00095CD3 E10F                       	smpsAlterNote       $0F
00095CD5 E701                       	dc.b	smpsNoAttack, $01
00095CD7 E113                       	smpsAlterNote       $13
00095CD9 E701                       	dc.b	smpsNoAttack, $01
00095CDB E10F                       	smpsAlterNote       $0F
00095CDD E701                       	dc.b	smpsNoAttack, $01
00095CDF E10C                       	smpsAlterNote       $0C
00095CE1 E701                       	dc.b	smpsNoAttack, $01
00095CE3 E108                       	smpsAlterNote       $08
00095CE5 E701                       	dc.b	smpsNoAttack, $01
00095CE7 E10C                       	smpsAlterNote       $0C
00095CE9 E701                       	dc.b	smpsNoAttack, $01
00095CEB E112                       	smpsAlterNote       $12
00095CED E701                       	dc.b	smpsNoAttack, $01
00095CEF E113                       	smpsAlterNote       $13
00095CF1 E701                       	dc.b	smpsNoAttack, $01
00095CF3 E10F                       	smpsAlterNote       $0F
00095CF5 E701                       	dc.b	smpsNoAttack, $01
00095CF7 E109                       	smpsAlterNote       $09
00095CF9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095CFD E10C                       	smpsAlterNote       $0C
00095CFF E701                       	dc.b	smpsNoAttack, $01
00095D01 E112                       	smpsAlterNote       $12
00095D03 E701                       	dc.b	smpsNoAttack, $01
00095D05 E113                       	smpsAlterNote       $13
00095D07 8001                       	dc.b	nRst, $01
00095D09 E10F                       	smpsAlterNote       $0F
00095D0B C602 C602 C602 8001 C601+  	dc.b	nA5, $02, nA5, $02, nA5, $02, nRst, $01, nA5, $01, nRst, $01
00095D17 C602 C602 8001 C604        	dc.b	nA5, $02, nA5, $02, nRst, $01, nA5, $04
00095D1F E10D                       	smpsAlterNote       $0D
00095D21 C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
00095D27 E10B                       	smpsAlterNote       $0B
00095D29 BF0D                       	dc.b	nD5, $0D
00095D2B E108                       	smpsAlterNote       $08
00095D2D E701                       	dc.b	smpsNoAttack, $01
00095D2F E104                       	smpsAlterNote       $04
00095D31 E701                       	dc.b	smpsNoAttack, $01
00095D33 E105                       	smpsAlterNote       $05
00095D35 E701                       	dc.b	smpsNoAttack, $01
00095D37 E10B                       	smpsAlterNote       $0B
00095D39 E701                       	dc.b	smpsNoAttack, $01
00095D3B E10F                       	smpsAlterNote       $0F
00095D3D E701                       	dc.b	smpsNoAttack, $01
00095D3F E10B                       	smpsAlterNote       $0B
00095D41 E701                       	dc.b	smpsNoAttack, $01
00095D43 E108                       	smpsAlterNote       $08
00095D45 E701                       	dc.b	smpsNoAttack, $01
00095D47 E104                       	smpsAlterNote       $04
00095D49 E701                       	dc.b	smpsNoAttack, $01
00095D4B E108                       	smpsAlterNote       $08
00095D4D E701                       	dc.b	smpsNoAttack, $01
00095D4F E10E                       	smpsAlterNote       $0E
00095D51 E701                       	dc.b	smpsNoAttack, $01
00095D53 E10F                       	smpsAlterNote       $0F
00095D55 E701                       	dc.b	smpsNoAttack, $01
00095D57 E10C                       	smpsAlterNote       $0C
00095D59 C101                       	dc.b	nE5, $01
00095D5B E10D                       	smpsAlterNote       $0D
00095D5D C201 C401 8001 C606        	dc.b	nF5, $01, nG5, $01, nRst, $01, nA5, $06
00095D65 E10F                       	smpsAlterNote       $0F
00095D67 C607                       	dc.b	nA5, $07
00095D69 E10C                       	smpsAlterNote       $0C
00095D6B CD07                       	dc.b	nE6, $07
00095D6D E10D                       	smpsAlterNote       $0D
00095D6F CE06 8001                  	dc.b	nF6, $06, nRst, $01
00095D73 E10C                       	smpsAlterNote       $0C
00095D75 CD03                       	dc.b	nE6, $03
00095D77 E10A                       	smpsAlterNote       $0A
00095D79 C903 8001                  	dc.b	nC6, $03, nRst, $01
00095D7D E10D                       	smpsAlterNote       $0D
00095D7F C403 C70D E701             	dc.b	nG5, $03, nBb5, $0D, smpsNoAttack, $01
00095D85 E10A                       	smpsAlterNote       $0A
00095D87 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095D8B E110                       	smpsAlterNote       $10
00095D8D E701                       	dc.b	smpsNoAttack, $01
00095D8F E114                       	smpsAlterNote       $14
00095D91 E701                       	dc.b	smpsNoAttack, $01
00095D93 E113                       	smpsAlterNote       $13
00095D95 E701                       	dc.b	smpsNoAttack, $01
00095D97 E10D                       	smpsAlterNote       $0D
00095D99 E701                       	dc.b	smpsNoAttack, $01
00095D9B E109                       	smpsAlterNote       $09
00095D9D E701                       	dc.b	smpsNoAttack, $01
00095D9F E10D                       	smpsAlterNote       $0D
00095DA1 E701                       	dc.b	smpsNoAttack, $01
00095DA3 E110                       	smpsAlterNote       $10
00095DA5 E701                       	dc.b	smpsNoAttack, $01
00095DA7 E114                       	smpsAlterNote       $14
00095DA9 E701                       	dc.b	smpsNoAttack, $01
00095DAB E10F                       	smpsAlterNote       $0F
00095DAD C607 C50D                  	dc.b	nA5, $07, nAb5, $0D
00095DB1 E10C                       	smpsAlterNote       $0C
00095DB3 E701                       	dc.b	smpsNoAttack, $01
00095DB5 E108                       	smpsAlterNote       $08
00095DB7 E701                       	dc.b	smpsNoAttack, $01
00095DB9 E10C                       	smpsAlterNote       $0C
00095DBB E701                       	dc.b	smpsNoAttack, $01
00095DBD E10F                       	smpsAlterNote       $0F
00095DBF E701                       	dc.b	smpsNoAttack, $01
00095DC1 E113                       	smpsAlterNote       $13
00095DC3 E701                       	dc.b	smpsNoAttack, $01
00095DC5 E10F                       	smpsAlterNote       $0F
00095DC7 E701                       	dc.b	smpsNoAttack, $01
00095DC9 E109                       	smpsAlterNote       $09
00095DCB E701                       	dc.b	smpsNoAttack, $01
00095DCD E108                       	smpsAlterNote       $08
00095DCF E701                       	dc.b	smpsNoAttack, $01
00095DD1 E10C                       	smpsAlterNote       $0C
00095DD3 E701                       	dc.b	smpsNoAttack, $01
00095DD5 E112                       	smpsAlterNote       $12
00095DD7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095DDB E10F                       	smpsAlterNote       $0F
00095DDD E701                       	dc.b	smpsNoAttack, $01
00095DDF E109                       	smpsAlterNote       $09
00095DE1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095DE5 E10F                       	smpsAlterNote       $0F
00095DE7 E701                       	dc.b	smpsNoAttack, $01
00095DE9 E112                       	smpsAlterNote       $12
00095DEB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095DEF E10C                       	smpsAlterNote       $0C
00095DF1 E701                       	dc.b	smpsNoAttack, $01
00095DF3 E108                       	smpsAlterNote       $08
00095DF5 E701                       	dc.b	smpsNoAttack, $01
00095DF7 E109                       	smpsAlterNote       $09
00095DF9 E701                       	dc.b	smpsNoAttack, $01
00095DFB E10F                       	smpsAlterNote       $0F
00095DFD E701                       	dc.b	smpsNoAttack, $01
00095DFF E113                       	smpsAlterNote       $13
00095E01 E701                       	dc.b	smpsNoAttack, $01
00095E03 E10F                       	smpsAlterNote       $0F
00095E05 E701                       	dc.b	smpsNoAttack, $01
00095E07 E10C                       	smpsAlterNote       $0C
00095E09 E701                       	dc.b	smpsNoAttack, $01
00095E0B E108                       	smpsAlterNote       $08
00095E0D E701                       	dc.b	smpsNoAttack, $01
00095E0F E10C                       	smpsAlterNote       $0C
00095E11 E701                       	dc.b	smpsNoAttack, $01
00095E13 E112                       	smpsAlterNote       $12
00095E15 E701                       	dc.b	smpsNoAttack, $01
00095E17 E113                       	smpsAlterNote       $13
00095E19 E701                       	dc.b	smpsNoAttack, $01
00095E1B E10F                       	smpsAlterNote       $0F
00095E1D E701                       	dc.b	smpsNoAttack, $01
00095E1F E109                       	smpsAlterNote       $09
00095E21 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095E25 E10C                       	smpsAlterNote       $0C
00095E27 E701                       	dc.b	smpsNoAttack, $01
00095E29 E112                       	smpsAlterNote       $12
00095E2B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095E2F E10C                       	smpsAlterNote       $0C
00095E31 E701                       	dc.b	smpsNoAttack, $01
00095E33 E109                       	smpsAlterNote       $09
00095E35 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095E39 E10F                       	smpsAlterNote       $0F
00095E3B E701                       	dc.b	smpsNoAttack, $01
00095E3D E113                       	smpsAlterNote       $13
00095E3F E701                       	dc.b	smpsNoAttack, $01
00095E41 E112                       	smpsAlterNote       $12
00095E43 E701                       	dc.b	smpsNoAttack, $01
00095E45 E10C                       	smpsAlterNote       $0C
00095E47 E701                       	dc.b	smpsNoAttack, $01
00095E49 E109                       	smpsAlterNote       $09
00095E4B 8001                       	dc.b	nRst, $01
00095E4D E10F                       	smpsAlterNote       $0F
00095E4F C60D                       	dc.b	nA5, $0D
00095E51 E10C                       	smpsAlterNote       $0C
00095E53 E701                       	dc.b	smpsNoAttack, $01
00095E55 E108                       	smpsAlterNote       $08
00095E57 E701                       	dc.b	smpsNoAttack, $01
00095E59 E10C                       	smpsAlterNote       $0C
00095E5B E701                       	dc.b	smpsNoAttack, $01
00095E5D E112                       	smpsAlterNote       $12
00095E5F E701                       	dc.b	smpsNoAttack, $01
00095E61 E113                       	smpsAlterNote       $13
00095E63 E701                       	dc.b	smpsNoAttack, $01
00095E65 E10F                       	smpsAlterNote       $0F
00095E67 E701                       	dc.b	smpsNoAttack, $01
00095E69 E109                       	smpsAlterNote       $09
00095E6B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095E6F E10C                       	smpsAlterNote       $0C
00095E71 E701                       	dc.b	smpsNoAttack, $01
00095E73 E112                       	smpsAlterNote       $12
00095E75 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095E79 E10C                       	smpsAlterNote       $0C
00095E7B E701                       	dc.b	smpsNoAttack, $01
00095E7D E109                       	smpsAlterNote       $09
00095E7F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095E83 E10F                       	smpsAlterNote       $0F
00095E85 E701                       	dc.b	smpsNoAttack, $01
00095E87 E113                       	smpsAlterNote       $13
00095E89 E701                       	dc.b	smpsNoAttack, $01
00095E8B E112                       	smpsAlterNote       $12
00095E8D E701                       	dc.b	smpsNoAttack, $01
00095E8F E10C                       	smpsAlterNote       $0C
00095E91 E701                       	dc.b	smpsNoAttack, $01
00095E93 E108                       	smpsAlterNote       $08
00095E95 E701                       	dc.b	smpsNoAttack, $01
00095E97 E10C                       	smpsAlterNote       $0C
00095E99 E701                       	dc.b	smpsNoAttack, $01
00095E9B E10F                       	smpsAlterNote       $0F
00095E9D E701                       	dc.b	smpsNoAttack, $01
00095E9F E113                       	smpsAlterNote       $13
00095EA1 E701                       	dc.b	smpsNoAttack, $01
00095EA3 E10F                       	smpsAlterNote       $0F
00095EA5 E701                       	dc.b	smpsNoAttack, $01
00095EA7 E109                       	smpsAlterNote       $09
00095EA9 E701                       	dc.b	smpsNoAttack, $01
00095EAB E108                       	smpsAlterNote       $08
00095EAD E701                       	dc.b	smpsNoAttack, $01
00095EAF E10C                       	smpsAlterNote       $0C
00095EB1 E701                       	dc.b	smpsNoAttack, $01
00095EB3 E112                       	smpsAlterNote       $12
00095EB5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095EB9 E10F                       	smpsAlterNote       $0F
00095EBB E701                       	dc.b	smpsNoAttack, $01
00095EBD E109                       	smpsAlterNote       $09
00095EBF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095EC3 E10F                       	smpsAlterNote       $0F
00095EC5 E701                       	dc.b	smpsNoAttack, $01
00095EC7 E112                       	smpsAlterNote       $12
00095EC9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095ECD E10C                       	smpsAlterNote       $0C
00095ECF E701                       	dc.b	smpsNoAttack, $01
00095ED1 E108                       	smpsAlterNote       $08
00095ED3 E701                       	dc.b	smpsNoAttack, $01
00095ED5 E10C                       	smpsAlterNote       $0C
00095ED7 E701                       	dc.b	smpsNoAttack, $01
00095ED9 E10F                       	smpsAlterNote       $0F
00095EDB E701                       	dc.b	smpsNoAttack, $01
00095EDD E113                       	smpsAlterNote       $13
00095EDF E701                       	dc.b	smpsNoAttack, $01
00095EE1 E10F                       	smpsAlterNote       $0F
00095EE3 E701                       	dc.b	smpsNoAttack, $01
00095EE5 E109                       	smpsAlterNote       $09
00095EE7 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00095EED E601                       	smpsAlterVol        $01
00095EEF E10F                       	smpsAlterNote       $0F
00095EF1 C604                       	dc.b	nA5, $04
00095EF3 E10D                       	smpsAlterNote       $0D
00095EF5 C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
00095EFB E10B                       	smpsAlterNote       $0B
00095EFD BF0A 8001 BF02 8001        	dc.b	nD5, $0A, nRst, $01, nD5, $02, nRst, $01
00095F05 E10F                       	smpsAlterNote       $0F
00095F07 C604 8001                  	dc.b	nA5, $04, nRst, $01
00095F0B E10D                       	smpsAlterNote       $0D
00095F0D C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
00095F13 E10C                       	smpsAlterNote       $0C
00095F15 C109 8001 C103             	dc.b	nE5, $09, nRst, $01, nE5, $03
00095F1B E10A                       	smpsAlterNote       $0A
00095F1D C904 8001                  	dc.b	nC6, $04, nRst, $01
00095F21 E110                       	smpsAlterNote       $10
00095F23 C704 8001                  	dc.b	nBb5, $04, nRst, $01
00095F27 E10F                       	smpsAlterNote       $0F
00095F29 C604                       	dc.b	nA5, $04
00095F2B E10D                       	smpsAlterNote       $0D
00095F2D C403 8001 C202 8001 C403+  	dc.b	nG5, $03, nRst, $01, nF5, $02, nRst, $01, nG5, $03, nA5, $0E
00095F39 E109                       	smpsAlterNote       $09
00095F3B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095F3F E10F                       	smpsAlterNote       $0F
00095F41 E701                       	dc.b	smpsNoAttack, $01
00095F43 E112                       	smpsAlterNote       $12
00095F45 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095F49 E10C                       	smpsAlterNote       $0C
00095F4B E701                       	dc.b	smpsNoAttack, $01
00095F4D E108                       	smpsAlterNote       $08
00095F4F E701                       	dc.b	smpsNoAttack, $01
00095F51 E10C                       	smpsAlterNote       $0C
00095F53 E701                       	dc.b	smpsNoAttack, $01
00095F55 E10F                       	smpsAlterNote       $0F
00095F57 E701                       	dc.b	smpsNoAttack, $01
00095F59 E113                       	smpsAlterNote       $13
00095F5B E701                       	dc.b	smpsNoAttack, $01
00095F5D E10D                       	smpsAlterNote       $0D
00095F5F C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
00095F65 E10C                       	smpsAlterNote       $0C
00095F67 C10D                       	dc.b	nE5, $0D
00095F69 E109                       	smpsAlterNote       $09
00095F6B E701                       	dc.b	smpsNoAttack, $01
00095F6D E105                       	smpsAlterNote       $05
00095F6F E701                       	dc.b	smpsNoAttack, $01
00095F71 E106                       	smpsAlterNote       $06
00095F73 E701                       	dc.b	smpsNoAttack, $01
00095F75 E10C                       	smpsAlterNote       $0C
00095F77 E701                       	dc.b	smpsNoAttack, $01
00095F79 E110                       	smpsAlterNote       $10
00095F7B E701                       	dc.b	smpsNoAttack, $01
00095F7D E10C                       	smpsAlterNote       $0C
00095F7F E701                       	dc.b	smpsNoAttack, $01
00095F81 E109                       	smpsAlterNote       $09
00095F83 E701                       	dc.b	smpsNoAttack, $01
00095F85 E105                       	smpsAlterNote       $05
00095F87 E701                       	dc.b	smpsNoAttack, $01
00095F89 E109                       	smpsAlterNote       $09
00095F8B E701                       	dc.b	smpsNoAttack, $01
00095F8D E10F                       	smpsAlterNote       $0F
00095F8F E701                       	dc.b	smpsNoAttack, $01
00095F91 E110                       	smpsAlterNote       $10
00095F93 E701                       	dc.b	smpsNoAttack, $01
00095F95 E10C                       	smpsAlterNote       $0C
00095F97 E701                       	dc.b	smpsNoAttack, $01
00095F99 E106                       	smpsAlterNote       $06
00095F9B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095F9F E109                       	smpsAlterNote       $09
00095FA1 E701                       	dc.b	smpsNoAttack, $01
00095FA3 E10F                       	smpsAlterNote       $0F
00095FA5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095FA9 E109                       	smpsAlterNote       $09
00095FAB E701                       	dc.b	smpsNoAttack, $01
00095FAD E106                       	smpsAlterNote       $06
00095FAF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095FB3 E10C                       	smpsAlterNote       $0C
00095FB5 E701                       	dc.b	smpsNoAttack, $01
00095FB7 E110                       	smpsAlterNote       $10
00095FB9 E701                       	dc.b	smpsNoAttack, $01
00095FBB E10F                       	smpsAlterNote       $0F
00095FBD E701                       	dc.b	smpsNoAttack, $01
00095FBF E109                       	smpsAlterNote       $09
00095FC1 E701                       	dc.b	smpsNoAttack, $01
00095FC3 E105                       	smpsAlterNote       $05
00095FC5 E701                       	dc.b	smpsNoAttack, $01
00095FC7 E109                       	smpsAlterNote       $09
00095FC9 E701                       	dc.b	smpsNoAttack, $01
00095FCB E10C                       	smpsAlterNote       $0C
00095FCD E701                       	dc.b	smpsNoAttack, $01
00095FCF E110                       	smpsAlterNote       $10
00095FD1 E701                       	dc.b	smpsNoAttack, $01
00095FD3 E10C                       	smpsAlterNote       $0C
00095FD5 E701                       	dc.b	smpsNoAttack, $01
00095FD7 E106                       	smpsAlterNote       $06
00095FD9 E701                       	dc.b	smpsNoAttack, $01
00095FDB E105                       	smpsAlterNote       $05
00095FDD E701                       	dc.b	smpsNoAttack, $01
00095FDF E109                       	smpsAlterNote       $09
00095FE1 E701                       	dc.b	smpsNoAttack, $01
00095FE3 E10F                       	smpsAlterNote       $0F
00095FE5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095FE9 E10C                       	smpsAlterNote       $0C
00095FEB E701                       	dc.b	smpsNoAttack, $01
00095FED E106                       	smpsAlterNote       $06
00095FEF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095FF3 E10C                       	smpsAlterNote       $0C
00095FF5 E701                       	dc.b	smpsNoAttack, $01
00095FF7 E10F                       	smpsAlterNote       $0F
00095FF9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095FFD E109                       	smpsAlterNote       $09
00095FFF E701                       	dc.b	smpsNoAttack, $01
00096001 E105                       	smpsAlterNote       $05
00096003 E701                       	dc.b	smpsNoAttack, $01
00096005 E106                       	smpsAlterNote       $06
00096007 E701                       	dc.b	smpsNoAttack, $01
00096009 E10C                       	smpsAlterNote       $0C
0009600B E701                       	dc.b	smpsNoAttack, $01
0009600D E110                       	smpsAlterNote       $10
0009600F E701                       	dc.b	smpsNoAttack, $01
00096011 E10C                       	smpsAlterNote       $0C
00096013 E701                       	dc.b	smpsNoAttack, $01
00096015 E109                       	smpsAlterNote       $09
00096017 E701                       	dc.b	smpsNoAttack, $01
00096019 E105                       	smpsAlterNote       $05
0009601B E701                       	dc.b	smpsNoAttack, $01
0009601D E109                       	smpsAlterNote       $09
0009601F E701                       	dc.b	smpsNoAttack, $01
00096021 E10F                       	smpsAlterNote       $0F
00096023 E701                       	dc.b	smpsNoAttack, $01
00096025 E110                       	smpsAlterNote       $10
00096027 E701                       	dc.b	smpsNoAttack, $01
00096029 E10C                       	smpsAlterNote       $0C
0009602B E701                       	dc.b	smpsNoAttack, $01
0009602D E106                       	smpsAlterNote       $06
0009602F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096033 E109                       	smpsAlterNote       $09
00096035 E701                       	dc.b	smpsNoAttack, $01
00096037 E10F                       	smpsAlterNote       $0F
00096039 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009603D E109                       	smpsAlterNote       $09
0009603F E701                       	dc.b	smpsNoAttack, $01
00096041 E106                       	smpsAlterNote       $06
00096043 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096047 E10C                       	smpsAlterNote       $0C
00096049 E701                       	dc.b	smpsNoAttack, $01
0009604B E110                       	smpsAlterNote       $10
0009604D E701                       	dc.b	smpsNoAttack, $01
0009604F E10F                       	smpsAlterNote       $0F
00096051 E701                       	dc.b	smpsNoAttack, $01
00096053 E109                       	smpsAlterNote       $09
00096055 E701                       	dc.b	smpsNoAttack, $01
00096057 E105                       	smpsAlterNote       $05
00096059 E701                       	dc.b	smpsNoAttack, $01
0009605B E109                       	smpsAlterNote       $09
0009605D E701                       	dc.b	smpsNoAttack, $01
0009605F E10C                       	smpsAlterNote       $0C
00096061 E701                       	dc.b	smpsNoAttack, $01
00096063 E110                       	smpsAlterNote       $10
00096065 E701                       	dc.b	smpsNoAttack, $01
00096067 E10C                       	smpsAlterNote       $0C
00096069 E701                       	dc.b	smpsNoAttack, $01
0009606B E106                       	smpsAlterNote       $06
0009606D E701                       	dc.b	smpsNoAttack, $01
0009606F E105                       	smpsAlterNote       $05
00096071 E701                       	dc.b	smpsNoAttack, $01
00096073 E109                       	smpsAlterNote       $09
00096075 E701                       	dc.b	smpsNoAttack, $01
00096077 E10F                       	smpsAlterNote       $0F
00096079 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009607D E109                       	smpsAlterNote       $09
0009607F E701                       	dc.b	smpsNoAttack, $01
00096081 E106                       	smpsAlterNote       $06
00096083 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096087 E10C                       	smpsAlterNote       $0C
00096089 E701                       	dc.b	smpsNoAttack, $01
0009608B E110                       	smpsAlterNote       $10
0009608D E701                       	dc.b	smpsNoAttack, $01
0009608F E10F                       	smpsAlterNote       $0F
00096091 E701                       	dc.b	smpsNoAttack, $01
00096093 E109                       	smpsAlterNote       $09
00096095 E701                       	dc.b	smpsNoAttack, $01
00096097 E105                       	smpsAlterNote       $05
00096099 E701                       	dc.b	smpsNoAttack, $01
0009609B E109                       	smpsAlterNote       $09
0009609D E701                       	dc.b	smpsNoAttack, $01
0009609F E10C                       	smpsAlterNote       $0C
000960A1 E701                       	dc.b	smpsNoAttack, $01
000960A3 E110                       	smpsAlterNote       $10
000960A5 E701                       	dc.b	smpsNoAttack, $01
000960A7 E10C                       	smpsAlterNote       $0C
000960A9 E701                       	dc.b	smpsNoAttack, $01
000960AB E106                       	smpsAlterNote       $06
000960AD E701                       	dc.b	smpsNoAttack, $01
000960AF E105                       	smpsAlterNote       $05
000960B1 E701                       	dc.b	smpsNoAttack, $01
000960B3 E109                       	smpsAlterNote       $09
000960B5 E701                       	dc.b	smpsNoAttack, $01
000960B7 E10F                       	smpsAlterNote       $0F
000960B9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000960BD E10C                       	smpsAlterNote       $0C
000960BF E701                       	dc.b	smpsNoAttack, $01
000960C1 E106                       	smpsAlterNote       $06
000960C3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000960C7 E10C                       	smpsAlterNote       $0C
000960C9 E701                       	dc.b	smpsNoAttack, $01
000960CB E10F                       	smpsAlterNote       $0F
000960CD E701                       	dc.b	smpsNoAttack, $01
000960CF E110                       	smpsAlterNote       $10
000960D1 8001                       	dc.b	nRst, $01
000960D3 E10F                       	smpsAlterNote       $0F
000960D5 C604                       	dc.b	nA5, $04
000960D7 E10D                       	smpsAlterNote       $0D
000960D9 C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
000960DF E10B                       	smpsAlterNote       $0B
000960E1 BF0A 8001 BF03             	dc.b	nD5, $0A, nRst, $01, nD5, $03
000960E7 E10F                       	smpsAlterNote       $0F
000960E9 C604 8001                  	dc.b	nA5, $04, nRst, $01
000960ED E10D                       	smpsAlterNote       $0D
000960EF C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
000960F5 E10C                       	smpsAlterNote       $0C
000960F7 C10A C103 8001             	dc.b	nE5, $0A, nE5, $03, nRst, $01
000960FD E10A                       	smpsAlterNote       $0A
000960FF C904                       	dc.b	nC6, $04
00096101 E110                       	smpsAlterNote       $10
00096103 C704 8001                  	dc.b	nBb5, $04, nRst, $01
00096107 E10F                       	smpsAlterNote       $0F
00096109 C604                       	dc.b	nA5, $04
0009610B E10D                       	smpsAlterNote       $0D
0009610D C403 8001 C202 8001 C403+  	dc.b	nG5, $03, nRst, $01, nF5, $02, nRst, $01, nG5, $03, nA5, $0E
00096119 E109                       	smpsAlterNote       $09
0009611B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009611F E10F                       	smpsAlterNote       $0F
00096121 E701                       	dc.b	smpsNoAttack, $01
00096123 E112                       	smpsAlterNote       $12
00096125 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096129 E10C                       	smpsAlterNote       $0C
0009612B E701                       	dc.b	smpsNoAttack, $01
0009612D E108                       	smpsAlterNote       $08
0009612F E701                       	dc.b	smpsNoAttack, $01
00096131 E109                       	smpsAlterNote       $09
00096133 E701                       	dc.b	smpsNoAttack, $01
00096135 E10F                       	smpsAlterNote       $0F
00096137 E701                       	dc.b	smpsNoAttack, $01
00096139 E113                       	smpsAlterNote       $13
0009613B E701                       	dc.b	smpsNoAttack, $01
0009613D E10D                       	smpsAlterNote       $0D
0009613F C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
00096145 E10C                       	smpsAlterNote       $0C
00096147 C10D                       	dc.b	nE5, $0D
00096149 E109                       	smpsAlterNote       $09
0009614B E701                       	dc.b	smpsNoAttack, $01
0009614D E106                       	smpsAlterNote       $06
0009614F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096153 E10C                       	smpsAlterNote       $0C
00096155 E701                       	dc.b	smpsNoAttack, $01
00096157 E110                       	smpsAlterNote       $10
00096159 E701                       	dc.b	smpsNoAttack, $01
0009615B E10F                       	smpsAlterNote       $0F
0009615D E701                       	dc.b	smpsNoAttack, $01
0009615F E109                       	smpsAlterNote       $09
00096161 E701                       	dc.b	smpsNoAttack, $01
00096163 E105                       	smpsAlterNote       $05
00096165 E701                       	dc.b	smpsNoAttack, $01
00096167 E109                       	smpsAlterNote       $09
00096169 E701                       	dc.b	smpsNoAttack, $01
0009616B E10C                       	smpsAlterNote       $0C
0009616D E701                       	dc.b	smpsNoAttack, $01
0009616F E110                       	smpsAlterNote       $10
00096171 E701                       	dc.b	smpsNoAttack, $01
00096173 E10C                       	smpsAlterNote       $0C
00096175 E701                       	dc.b	smpsNoAttack, $01
00096177 E106                       	smpsAlterNote       $06
00096179 E701                       	dc.b	smpsNoAttack, $01
0009617B E105                       	smpsAlterNote       $05
0009617D E701                       	dc.b	smpsNoAttack, $01
0009617F E109                       	smpsAlterNote       $09
00096181 E701                       	dc.b	smpsNoAttack, $01
00096183 E10F                       	smpsAlterNote       $0F
00096185 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096189 E10C                       	smpsAlterNote       $0C
0009618B E701                       	dc.b	smpsNoAttack, $01
0009618D E106                       	smpsAlterNote       $06
0009618F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096193 E10C                       	smpsAlterNote       $0C
00096195 E701                       	dc.b	smpsNoAttack, $01
00096197 E10F                       	smpsAlterNote       $0F
00096199 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009619D E109                       	smpsAlterNote       $09
0009619F E701                       	dc.b	smpsNoAttack, $01
000961A1 E105                       	smpsAlterNote       $05
000961A3 E701                       	dc.b	smpsNoAttack, $01
000961A5 E106                       	smpsAlterNote       $06
000961A7 E701                       	dc.b	smpsNoAttack, $01
000961A9 E10C                       	smpsAlterNote       $0C
000961AB E701                       	dc.b	smpsNoAttack, $01
000961AD E110                       	smpsAlterNote       $10
000961AF E701                       	dc.b	smpsNoAttack, $01
000961B1 E10C                       	smpsAlterNote       $0C
000961B3 E701                       	dc.b	smpsNoAttack, $01
000961B5 E109                       	smpsAlterNote       $09
000961B7 E701                       	dc.b	smpsNoAttack, $01
000961B9 E105                       	smpsAlterNote       $05
000961BB E701                       	dc.b	smpsNoAttack, $01
000961BD E109                       	smpsAlterNote       $09
000961BF E701                       	dc.b	smpsNoAttack, $01
000961C1 E10F                       	smpsAlterNote       $0F
000961C3 E701                       	dc.b	smpsNoAttack, $01
000961C5 E110                       	smpsAlterNote       $10
000961C7 E701                       	dc.b	smpsNoAttack, $01
000961C9 E10C                       	smpsAlterNote       $0C
000961CB E701                       	dc.b	smpsNoAttack, $01
000961CD E106                       	smpsAlterNote       $06
000961CF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000961D3 E109                       	smpsAlterNote       $09
000961D5 E701                       	dc.b	smpsNoAttack, $01
000961D7 E10F                       	smpsAlterNote       $0F
000961D9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000961DD E109                       	smpsAlterNote       $09
000961DF E701                       	dc.b	smpsNoAttack, $01
000961E1 E106                       	smpsAlterNote       $06
000961E3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000961E7 E10C                       	smpsAlterNote       $0C
000961E9 E701                       	dc.b	smpsNoAttack, $01
000961EB E110                       	smpsAlterNote       $10
000961ED E701                       	dc.b	smpsNoAttack, $01
000961EF E10F                       	smpsAlterNote       $0F
000961F1 E701                       	dc.b	smpsNoAttack, $01
000961F3 E109                       	smpsAlterNote       $09
000961F5 E701                       	dc.b	smpsNoAttack, $01
000961F7 E105                       	smpsAlterNote       $05
000961F9 E701                       	dc.b	smpsNoAttack, $01
000961FB E109                       	smpsAlterNote       $09
000961FD E701                       	dc.b	smpsNoAttack, $01
000961FF E10F                       	smpsAlterNote       $0F
00096201 E701                       	dc.b	smpsNoAttack, $01
00096203 E110                       	smpsAlterNote       $10
00096205 E701                       	dc.b	smpsNoAttack, $01
00096207 E10C                       	smpsAlterNote       $0C
00096209 E701                       	dc.b	smpsNoAttack, $01
0009620B E106                       	smpsAlterNote       $06
0009620D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096211 E109                       	smpsAlterNote       $09
00096213 E701                       	dc.b	smpsNoAttack, $01
00096215 E10F                       	smpsAlterNote       $0F
00096217 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009621B E109                       	smpsAlterNote       $09
0009621D E701                       	dc.b	smpsNoAttack, $01
0009621F E106                       	smpsAlterNote       $06
00096221 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096225 E10C                       	smpsAlterNote       $0C
00096227 E701                       	dc.b	smpsNoAttack, $01
00096229 E110                       	smpsAlterNote       $10
0009622B E701                       	dc.b	smpsNoAttack, $01
0009622D E10F                       	smpsAlterNote       $0F
0009622F E701                       	dc.b	smpsNoAttack, $01
00096231 E109                       	smpsAlterNote       $09
00096233 E701                       	dc.b	smpsNoAttack, $01
00096235 E105                       	smpsAlterNote       $05
00096237 E701                       	dc.b	smpsNoAttack, $01
00096239 E109                       	smpsAlterNote       $09
0009623B E701                       	dc.b	smpsNoAttack, $01
0009623D E10C                       	smpsAlterNote       $0C
0009623F E701                       	dc.b	smpsNoAttack, $01
00096241 E110                       	smpsAlterNote       $10
00096243 E701                       	dc.b	smpsNoAttack, $01
00096245 E10C                       	smpsAlterNote       $0C
00096247 E701                       	dc.b	smpsNoAttack, $01
00096249 E106                       	smpsAlterNote       $06
0009624B E701                       	dc.b	smpsNoAttack, $01
0009624D E105                       	smpsAlterNote       $05
0009624F E701                       	dc.b	smpsNoAttack, $01
00096251 E109                       	smpsAlterNote       $09
00096253 E701                       	dc.b	smpsNoAttack, $01
00096255 E10F                       	smpsAlterNote       $0F
00096257 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009625B E10C                       	smpsAlterNote       $0C
0009625D E701                       	dc.b	smpsNoAttack, $01
0009625F E106                       	smpsAlterNote       $06
00096261 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096265 E10C                       	smpsAlterNote       $0C
00096267 E701                       	dc.b	smpsNoAttack, $01
00096269 E10F                       	smpsAlterNote       $0F
0009626B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009626F E109                       	smpsAlterNote       $09
00096271 E701                       	dc.b	smpsNoAttack, $01
00096273 E105                       	smpsAlterNote       $05
00096275 E701                       	dc.b	smpsNoAttack, $01
00096277 E106                       	smpsAlterNote       $06
00096279 E701                       	dc.b	smpsNoAttack, $01
0009627B E10C                       	smpsAlterNote       $0C
0009627D E701                       	dc.b	smpsNoAttack, $01
0009627F E110                       	smpsAlterNote       $10
00096281 E701                       	dc.b	smpsNoAttack, $01
00096283 E10C                       	smpsAlterNote       $0C
00096285 E701                       	dc.b	smpsNoAttack, $01
00096287 E109                       	smpsAlterNote       $09
00096289 E701                       	dc.b	smpsNoAttack, $01
0009628B E105                       	smpsAlterNote       $05
0009628D E701                       	dc.b	smpsNoAttack, $01
0009628F E109                       	smpsAlterNote       $09
00096291 E701                       	dc.b	smpsNoAttack, $01
00096293 E10F                       	smpsAlterNote       $0F
00096295 E701                       	dc.b	smpsNoAttack, $01
00096297 E110                       	smpsAlterNote       $10
00096299 E701                       	dc.b	smpsNoAttack, $01
0009629B E10C                       	smpsAlterNote       $0C
0009629D E701                       	dc.b	smpsNoAttack, $01
0009629F E106                       	smpsAlterNote       $06
000962A1 E701                       	dc.b	smpsNoAttack, $01
000962A3 E10B                       	smpsAlterNote       $0B
000962A5 BF02                       	dc.b	nD5, $02
000962A7 E10C                       	smpsAlterNote       $0C
000962A9 C001 8001 C10D             	dc.b	nEb5, $01, nRst, $01, nE5, $0D
000962AF E109                       	smpsAlterNote       $09
000962B1 E701                       	dc.b	smpsNoAttack, $01
000962B3 E105                       	smpsAlterNote       $05
000962B5 E701                       	dc.b	smpsNoAttack, $01
000962B7 E109                       	smpsAlterNote       $09
000962B9 E701                       	dc.b	smpsNoAttack, $01
000962BB E10F                       	smpsAlterNote       $0F
000962BD E701                       	dc.b	smpsNoAttack, $01
000962BF E110                       	smpsAlterNote       $10
000962C1 E701                       	dc.b	smpsNoAttack, $01
000962C3 E10C                       	smpsAlterNote       $0C
000962C5 E701                       	dc.b	smpsNoAttack, $01
000962C7 E106                       	smpsAlterNote       $06
000962C9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000962CD E109                       	smpsAlterNote       $09
000962CF E701                       	dc.b	smpsNoAttack, $01
000962D1 E10F                       	smpsAlterNote       $0F
000962D3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000962D7 E109                       	smpsAlterNote       $09
000962D9 E701                       	dc.b	smpsNoAttack, $01
000962DB E106                       	smpsAlterNote       $06
000962DD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000962E1 E10C                       	smpsAlterNote       $0C
000962E3 E701                       	dc.b	smpsNoAttack, $01
000962E5 E110                       	smpsAlterNote       $10
000962E7 E701                       	dc.b	smpsNoAttack, $01
000962E9 E10F                       	smpsAlterNote       $0F
000962EB E701                       	dc.b	smpsNoAttack, $01
000962ED E109                       	smpsAlterNote       $09
000962EF E701                       	dc.b	smpsNoAttack, $01
000962F1 E105                       	smpsAlterNote       $05
000962F3 E701                       	dc.b	smpsNoAttack, $01
000962F5 E109                       	smpsAlterNote       $09
000962F7 E701                       	dc.b	smpsNoAttack, $01
000962F9 E10C                       	smpsAlterNote       $0C
000962FB E701                       	dc.b	smpsNoAttack, $01
000962FD E110                       	smpsAlterNote       $10
000962FF E701                       	dc.b	smpsNoAttack, $01
00096301 E10C                       	smpsAlterNote       $0C
00096303 E701                       	dc.b	smpsNoAttack, $01
00096305 E106                       	smpsAlterNote       $06
00096307 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0009630B E10D                       	smpsAlterNote       $0D
0009630D C409 8001 C206 8001        	dc.b	nG5, $09, nRst, $01, nF5, $06, nRst, $01
00096315 E10C                       	smpsAlterNote       $0C
00096317 C10D                       	dc.b	nE5, $0D
00096319 E106                       	smpsAlterNote       $06
0009631B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009631F E109                       	smpsAlterNote       $09
00096321 E701                       	dc.b	smpsNoAttack, $01
00096323 E10F                       	smpsAlterNote       $0F
00096325 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096329 E109                       	smpsAlterNote       $09
0009632B E701                       	dc.b	smpsNoAttack, $01
0009632D E106                       	smpsAlterNote       $06
0009632F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096333 E10C                       	smpsAlterNote       $0C
00096335 E701                       	dc.b	smpsNoAttack, $01
00096337 E110                       	smpsAlterNote       $10
00096339 E701                       	dc.b	smpsNoAttack, $01
0009633B E10F                       	smpsAlterNote       $0F
0009633D E701                       	dc.b	smpsNoAttack, $01
0009633F E109                       	smpsAlterNote       $09
00096341 E701                       	dc.b	smpsNoAttack, $01
00096343 E105                       	smpsAlterNote       $05
00096345 E701                       	dc.b	smpsNoAttack, $01
00096347 E106                       	smpsAlterNote       $06
00096349 800F                       	dc.b	nRst, $0F
0009634D E6FF                       	smpsAlterVol        $FF
0009634F E10F                       	smpsAlterNote       $0F
00096351 BA01                       	dc.b	nA4, $01
00096353 E110                       	smpsAlterNote       $10
00096355 BB02                       	dc.b	nBb4, $02
00096357 E10F                       	smpsAlterNote       $0F
00096359 BA03 8001 BA06             	dc.b	nA4, $03, nRst, $01, nA4, $06
0009635F E10B                       	smpsAlterNote       $0B
00096361 BF03 8001                  	dc.b	nD5, $03, nRst, $01
00096365 E10C                       	smpsAlterNote       $0C
00096367 C103                       	dc.b	nE5, $03
00096369 E10D                       	smpsAlterNote       $0D
0009636B C203 8001 C403 C606 8001   	dc.b	nF5, $03, nRst, $01, nG5, $03, nA5, $06, nRst, $01
00096375 E10B                       	smpsAlterNote       $0B
00096377 BF03 C90E                  	dc.b	nD5, $03, nC6, $0E
0009637B E104                       	smpsAlterNote       $04
0009637D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096381 E10A                       	smpsAlterNote       $0A
00096383 E701                       	dc.b	smpsNoAttack, $01
00096385 E10D                       	smpsAlterNote       $0D
00096387 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009638B E107                       	smpsAlterNote       $07
0009638D E701                       	dc.b	smpsNoAttack, $01
0009638F E104                       	smpsAlterNote       $04
00096391 8001                       	dc.b	nRst, $01
00096393 E110                       	smpsAlterNote       $10
00096395 C703                       	dc.b	nBb5, $03
00096397 E10F                       	smpsAlterNote       $0F
00096399 C603 8001                  	dc.b	nA5, $03, nRst, $01
0009639D E10D                       	smpsAlterNote       $0D
0009639F C403 C60D                  	dc.b	nG5, $03, nA5, $0D
000963A3 E10C                       	smpsAlterNote       $0C
000963A5 E701                       	dc.b	smpsNoAttack, $01
000963A7 E108                       	smpsAlterNote       $08
000963A9 E701                       	dc.b	smpsNoAttack, $01
000963AB E109                       	smpsAlterNote       $09
000963AD E701                       	dc.b	smpsNoAttack, $01
000963AF E10F                       	smpsAlterNote       $0F
000963B1 E701                       	dc.b	smpsNoAttack, $01
000963B3 E113                       	smpsAlterNote       $13
000963B5 E701                       	dc.b	smpsNoAttack, $01
000963B7 E10F                       	smpsAlterNote       $0F
000963B9 E701                       	dc.b	smpsNoAttack, $01
000963BB E10C                       	smpsAlterNote       $0C
000963BD E701                       	dc.b	smpsNoAttack, $01
000963BF E108                       	smpsAlterNote       $08
000963C1 E701                       	dc.b	smpsNoAttack, $01
000963C3 E10C                       	smpsAlterNote       $0C
000963C5 E701                       	dc.b	smpsNoAttack, $01
000963C7 E112                       	smpsAlterNote       $12
000963C9 E701                       	dc.b	smpsNoAttack, $01
000963CB E113                       	smpsAlterNote       $13
000963CD E701                       	dc.b	smpsNoAttack, $01
000963CF E10F                       	smpsAlterNote       $0F
000963D1 E701                       	dc.b	smpsNoAttack, $01
000963D3 E109                       	smpsAlterNote       $09
000963D5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000963D9 E10C                       	smpsAlterNote       $0C
000963DB E701                       	dc.b	smpsNoAttack, $01
000963DD E112                       	smpsAlterNote       $12
000963DF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000963E3 E10C                       	smpsAlterNote       $0C
000963E5 E701                       	dc.b	smpsNoAttack, $01
000963E7 E109                       	smpsAlterNote       $09
000963E9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000963ED E10F                       	smpsAlterNote       $0F
000963EF E701                       	dc.b	smpsNoAttack, $01
000963F1 E113                       	smpsAlterNote       $13
000963F3 E701                       	dc.b	smpsNoAttack, $01
000963F5 E112                       	smpsAlterNote       $12
000963F7 E701                       	dc.b	smpsNoAttack, $01
000963F9 E10C                       	smpsAlterNote       $0C
000963FB E701                       	dc.b	smpsNoAttack, $01
000963FD E108                       	smpsAlterNote       $08
000963FF E701                       	dc.b	smpsNoAttack, $01
00096401 E10C                       	smpsAlterNote       $0C
00096403 E701                       	dc.b	smpsNoAttack, $01
00096405 E10F                       	smpsAlterNote       $0F
00096407 E701                       	dc.b	smpsNoAttack, $01
00096409 E113                       	smpsAlterNote       $13
0009640B E701 800E                  	dc.b	smpsNoAttack, $01, nRst, $0E
0009640F E10B                       	smpsAlterNote       $0B
00096411 BF03                       	dc.b	nD5, $03
00096413 E10C                       	smpsAlterNote       $0C
00096415 C103 8001                  	dc.b	nE5, $03, nRst, $01
00096419 E10D                       	smpsAlterNote       $0D
0009641B C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
00096425 E10B                       	smpsAlterNote       $0B
00096427 BF02 8001 C90D 8001 CB02+  	dc.b	nD5, $02, nRst, $01, nC6, $0D, nRst, $01, nD6, $02, nRst, $01
00096433 E110                       	smpsAlterNote       $10
00096435 C704 8001                  	dc.b	nBb5, $04, nRst, $01
00096439 E10F                       	smpsAlterNote       $0F
0009643B C604                       	dc.b	nA5, $04
0009643D E10D                       	smpsAlterNote       $0D
0009643F C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
00096445 E109                       	smpsAlterNote       $09
00096447 E701                       	dc.b	smpsNoAttack, $01
00096449 E108                       	smpsAlterNote       $08
0009644B E701                       	dc.b	smpsNoAttack, $01
0009644D E10C                       	smpsAlterNote       $0C
0009644F E701                       	dc.b	smpsNoAttack, $01
00096451 E112                       	smpsAlterNote       $12
00096453 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096457 E10F                       	smpsAlterNote       $0F
00096459 E701                       	dc.b	smpsNoAttack, $01
0009645B E109                       	smpsAlterNote       $09
0009645D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096461 E10F                       	smpsAlterNote       $0F
00096463 E701                       	dc.b	smpsNoAttack, $01
00096465 E112                       	smpsAlterNote       $12
00096467 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009646B E10C                       	smpsAlterNote       $0C
0009646D E701                       	dc.b	smpsNoAttack, $01
0009646F E108                       	smpsAlterNote       $08
00096471 E701                       	dc.b	smpsNoAttack, $01
00096473 E109                       	smpsAlterNote       $09
00096475 E701                       	dc.b	smpsNoAttack, $01
00096477 E10F                       	smpsAlterNote       $0F
00096479 E701                       	dc.b	smpsNoAttack, $01
0009647B E113                       	smpsAlterNote       $13
0009647D E701                       	dc.b	smpsNoAttack, $01
0009647F E10F                       	smpsAlterNote       $0F
00096481 E701                       	dc.b	smpsNoAttack, $01
00096483 E10C                       	smpsAlterNote       $0C
00096485 E701                       	dc.b	smpsNoAttack, $01
00096487 E108                       	smpsAlterNote       $08
00096489 E701                       	dc.b	smpsNoAttack, $01
0009648B E10C                       	smpsAlterNote       $0C
0009648D E701                       	dc.b	smpsNoAttack, $01
0009648F E112                       	smpsAlterNote       $12
00096491 E701                       	dc.b	smpsNoAttack, $01
00096493 E113                       	smpsAlterNote       $13
00096495 E701                       	dc.b	smpsNoAttack, $01
00096497 E10F                       	smpsAlterNote       $0F
00096499 E701                       	dc.b	smpsNoAttack, $01
0009649B E109                       	smpsAlterNote       $09
0009649D E701                       	dc.b	smpsNoAttack, $01
0009649F E10D                       	smpsAlterNote       $0D
000964A1 C402                       	dc.b	nG5, $02
000964A3 E10F                       	smpsAlterNote       $0F
000964A5 C501 8001 C60D 8001 C604   	dc.b	nAb5, $01, nRst, $01, nA5, $0D, nRst, $01, nA5, $04
000964AF E10D                       	smpsAlterNote       $0D
000964B1 C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
000964B7 E10B                       	smpsAlterNote       $0B
000964B9 BF0D                       	dc.b	nD5, $0D
000964BB E108                       	smpsAlterNote       $08
000964BD E701                       	dc.b	smpsNoAttack, $01
000964BF E104                       	smpsAlterNote       $04
000964C1 E701                       	dc.b	smpsNoAttack, $01
000964C3 E105                       	smpsAlterNote       $05
000964C5 E701                       	dc.b	smpsNoAttack, $01
000964C7 E10B                       	smpsAlterNote       $0B
000964C9 E701                       	dc.b	smpsNoAttack, $01
000964CB E10F                       	smpsAlterNote       $0F
000964CD E701                       	dc.b	smpsNoAttack, $01
000964CF E10B                       	smpsAlterNote       $0B
000964D1 E701                       	dc.b	smpsNoAttack, $01
000964D3 E108                       	smpsAlterNote       $08
000964D5 E701                       	dc.b	smpsNoAttack, $01
000964D7 E104                       	smpsAlterNote       $04
000964D9 E701                       	dc.b	smpsNoAttack, $01
000964DB E108                       	smpsAlterNote       $08
000964DD E701                       	dc.b	smpsNoAttack, $01
000964DF E10E                       	smpsAlterNote       $0E
000964E1 E701                       	dc.b	smpsNoAttack, $01
000964E3 E10F                       	smpsAlterNote       $0F
000964E5 E701                       	dc.b	smpsNoAttack, $01
000964E7 E10C                       	smpsAlterNote       $0C
000964E9 C101                       	dc.b	nE5, $01
000964EB E10D                       	smpsAlterNote       $0D
000964ED C201 C401 8001 C606        	dc.b	nF5, $01, nG5, $01, nRst, $01, nA5, $06
000964F5 E10F                       	smpsAlterNote       $0F
000964F7 C607                       	dc.b	nA5, $07
000964F9 E10C                       	smpsAlterNote       $0C
000964FB CD07                       	dc.b	nE6, $07
000964FD E10D                       	smpsAlterNote       $0D
000964FF CE06 8001                  	dc.b	nF6, $06, nRst, $01
00096503 E10C                       	smpsAlterNote       $0C
00096505 CD03                       	dc.b	nE6, $03
00096507 E10A                       	smpsAlterNote       $0A
00096509 C903 8001                  	dc.b	nC6, $03, nRst, $01
0009650D E10D                       	smpsAlterNote       $0D
0009650F C403 C70D E701             	dc.b	nG5, $03, nBb5, $0D, smpsNoAttack, $01
00096515 E10A                       	smpsAlterNote       $0A
00096517 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009651B E110                       	smpsAlterNote       $10
0009651D E701                       	dc.b	smpsNoAttack, $01
0009651F E114                       	smpsAlterNote       $14
00096521 E701                       	dc.b	smpsNoAttack, $01
00096523 E113                       	smpsAlterNote       $13
00096525 E701                       	dc.b	smpsNoAttack, $01
00096527 E10D                       	smpsAlterNote       $0D
00096529 E701                       	dc.b	smpsNoAttack, $01
0009652B E109                       	smpsAlterNote       $09
0009652D E701                       	dc.b	smpsNoAttack, $01
0009652F E10D                       	smpsAlterNote       $0D
00096531 E701                       	dc.b	smpsNoAttack, $01
00096533 E110                       	smpsAlterNote       $10
00096535 E701                       	dc.b	smpsNoAttack, $01
00096537 E114                       	smpsAlterNote       $14
00096539 E701                       	dc.b	smpsNoAttack, $01
0009653B E10F                       	smpsAlterNote       $0F
0009653D C607                       	dc.b	nA5, $07
0009653F E10D                       	smpsAlterNote       $0D
00096541 C40D                       	dc.b	nG5, $0D
00096543 E10A                       	smpsAlterNote       $0A
00096545 E701                       	dc.b	smpsNoAttack, $01
00096547 E106                       	smpsAlterNote       $06
00096549 E701                       	dc.b	smpsNoAttack, $01
0009654B E10A                       	smpsAlterNote       $0A
0009654D E701                       	dc.b	smpsNoAttack, $01
0009654F E10D                       	smpsAlterNote       $0D
00096551 E701                       	dc.b	smpsNoAttack, $01
00096553 E111                       	smpsAlterNote       $11
00096555 E701                       	dc.b	smpsNoAttack, $01
00096557 E10D                       	smpsAlterNote       $0D
00096559 E701                       	dc.b	smpsNoAttack, $01
0009655B E107                       	smpsAlterNote       $07
0009655D E701                       	dc.b	smpsNoAttack, $01
0009655F E106                       	smpsAlterNote       $06
00096561 E701                       	dc.b	smpsNoAttack, $01
00096563 E10A                       	smpsAlterNote       $0A
00096565 E701                       	dc.b	smpsNoAttack, $01
00096567 E110                       	smpsAlterNote       $10
00096569 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009656D E10D                       	smpsAlterNote       $0D
0009656F E701                       	dc.b	smpsNoAttack, $01
00096571 E107                       	smpsAlterNote       $07
00096573 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096577 E10F                       	smpsAlterNote       $0F
00096579 C60E                       	dc.b	nA5, $0E
0009657B E109                       	smpsAlterNote       $09
0009657D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096581 E10F                       	smpsAlterNote       $0F
00096583 E701                       	dc.b	smpsNoAttack, $01
00096585 E112                       	smpsAlterNote       $12
00096587 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009658B E10C                       	smpsAlterNote       $0C
0009658D E701                       	dc.b	smpsNoAttack, $01
0009658F E108                       	smpsAlterNote       $08
00096591 E701                       	dc.b	smpsNoAttack, $01
00096593 E109                       	smpsAlterNote       $09
00096595 E701                       	dc.b	smpsNoAttack, $01
00096597 E10F                       	smpsAlterNote       $0F
00096599 E701                       	dc.b	smpsNoAttack, $01
0009659B E113                       	smpsAlterNote       $13
0009659D E701                       	dc.b	smpsNoAttack, $01
0009659F E10F                       	smpsAlterNote       $0F
000965A1 E701                       	dc.b	smpsNoAttack, $01
000965A3 E10C                       	smpsAlterNote       $0C
000965A5 E701                       	dc.b	smpsNoAttack, $01
000965A7 E108                       	smpsAlterNote       $08
000965A9 E701                       	dc.b	smpsNoAttack, $01
000965AB E109                       	smpsAlterNote       $09
000965AD 8001                       	dc.b	nRst, $01
000965AF E110                       	smpsAlterNote       $10
000965B1 C70D                       	dc.b	nBb5, $0D
000965B3 E10D                       	smpsAlterNote       $0D
000965B5 E701                       	dc.b	smpsNoAttack, $01
000965B7 E109                       	smpsAlterNote       $09
000965B9 E701                       	dc.b	smpsNoAttack, $01
000965BB E10D                       	smpsAlterNote       $0D
000965BD E701                       	dc.b	smpsNoAttack, $01
000965BF E113                       	smpsAlterNote       $13
000965C1 E701                       	dc.b	smpsNoAttack, $01
000965C3 E114                       	smpsAlterNote       $14
000965C5 E701                       	dc.b	smpsNoAttack, $01
000965C7 E110                       	smpsAlterNote       $10
000965C9 E701                       	dc.b	smpsNoAttack, $01
000965CB E10A                       	smpsAlterNote       $0A
000965CD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000965D1 E10D                       	smpsAlterNote       $0D
000965D3 E701                       	dc.b	smpsNoAttack, $01
000965D5 E113                       	smpsAlterNote       $13
000965D7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000965DB E10D                       	smpsAlterNote       $0D
000965DD E701                       	dc.b	smpsNoAttack, $01
000965DF E10A                       	smpsAlterNote       $0A
000965E1 E701 E701 C90C 8001 8001   	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nC6, $0C, nRst, $01, nRst, $01
000965EB E10B                       	smpsAlterNote       $0B
000965ED 8001                       	dc.b	nRst, $01
000965EF E10C                       	smpsAlterNote       $0C
000965F1 CD0C 8001                  	dc.b	nE6, $0C, nRst, $01
000965F5 E10B                       	smpsAlterNote       $0B
000965F7 CB0D                       	dc.b	nD6, $0D
000965F9 E105                       	smpsAlterNote       $05
000965FB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000965FF E108                       	smpsAlterNote       $08
00096601 E701                       	dc.b	smpsNoAttack, $01
00096603 E10E                       	smpsAlterNote       $0E
00096605 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096609 E108                       	smpsAlterNote       $08
0009660B E701                       	dc.b	smpsNoAttack, $01
0009660D E105                       	smpsAlterNote       $05
0009660F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096613 E10B                       	smpsAlterNote       $0B
00096615 E701                       	dc.b	smpsNoAttack, $01
00096617 E10F                       	smpsAlterNote       $0F
00096619 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0009661D E10C                       	smpsAlterNote       $0C
0009661F CC0D                       	dc.b	nEb6, $0D
00096621 E106                       	smpsAlterNote       $06
00096623 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096627 E109                       	smpsAlterNote       $09
00096629 E701                       	dc.b	smpsNoAttack, $01
0009662B E10C                       	smpsAlterNote       $0C
0009662D 8001                       	dc.b	nRst, $01
0009662F E10A                       	smpsAlterNote       $0A
00096631 C906 8001 C901 8001 C902+  	dc.b	nC6, $06, nRst, $01, nC6, $01, nRst, $01, nC6, $02, nC6, $02
0009663D CB0E                       	dc.b	nD6, $0E
0009663F E105                       	smpsAlterNote       $05
00096641 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096645 E10B                       	smpsAlterNote       $0B
00096647 E701                       	dc.b	smpsNoAttack, $01
00096649 E10E                       	smpsAlterNote       $0E
0009664B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009664F E108                       	smpsAlterNote       $08
00096651 E701                       	dc.b	smpsNoAttack, $01
00096653 E104                       	smpsAlterNote       $04
00096655 E701                       	dc.b	smpsNoAttack, $01
00096657 E105                       	smpsAlterNote       $05
00096659 E701                       	dc.b	smpsNoAttack, $01
0009665B E10B                       	smpsAlterNote       $0B
0009665D E701                       	dc.b	smpsNoAttack, $01
0009665F E10F                       	smpsAlterNote       $0F
00096661 E701                       	dc.b	smpsNoAttack, $01
00096663 E10D                       	smpsAlterNote       $0D
00096665 CE0A 8001                  	dc.b	nF6, $0A, nRst, $01
00096669 E10C                       	smpsAlterNote       $0C
0009666B CC06 8001                  	dc.b	nEb6, $06, nRst, $01
0009666F E10A                       	smpsAlterNote       $0A
00096671 C906 C902 8001 C901 8001+  	dc.b	nC6, $06, nC6, $02, nRst, $01, nC6, $01, nRst, $01, nC6, $02
0009667D CB0D                       	dc.b	nD6, $0D
0009667F E108                       	smpsAlterNote       $08
00096681 E701                       	dc.b	smpsNoAttack, $01
00096683 E104                       	smpsAlterNote       $04
00096685 E701                       	dc.b	smpsNoAttack, $01
00096687 E105                       	smpsAlterNote       $05
00096689 E701                       	dc.b	smpsNoAttack, $01
0009668B E10B                       	smpsAlterNote       $0B
0009668D E701                       	dc.b	smpsNoAttack, $01
0009668F E10F                       	smpsAlterNote       $0F
00096691 E701                       	dc.b	smpsNoAttack, $01
00096693 E10B                       	smpsAlterNote       $0B
00096695 E701                       	dc.b	smpsNoAttack, $01
00096697 E108                       	smpsAlterNote       $08
00096699 E701                       	dc.b	smpsNoAttack, $01
0009669B E104                       	smpsAlterNote       $04
0009669D E701                       	dc.b	smpsNoAttack, $01
0009669F E108                       	smpsAlterNote       $08
000966A1 E701                       	dc.b	smpsNoAttack, $01
000966A3 E10E                       	smpsAlterNote       $0E
000966A5 E701                       	dc.b	smpsNoAttack, $01
000966A7 E10F                       	smpsAlterNote       $0F
000966A9 E701                       	dc.b	smpsNoAttack, $01
000966AB E10C                       	smpsAlterNote       $0C
000966AD CC0D                       	dc.b	nEb6, $0D
000966AF E109                       	smpsAlterNote       $09
000966B1 E701                       	dc.b	smpsNoAttack, $01
000966B3 E105                       	smpsAlterNote       $05
000966B5 E701                       	dc.b	smpsNoAttack, $01
000966B7 E106                       	smpsAlterNote       $06
000966B9 E701                       	dc.b	smpsNoAttack, $01
000966BB E10C                       	smpsAlterNote       $0C
000966BD E701                       	dc.b	smpsNoAttack, $01
000966BF E10A                       	smpsAlterNote       $0A
000966C1 C907 C902 C902 8001 C901+  	dc.b	nC6, $07, nC6, $02, nC6, $02, nRst, $01, nC6, $01, nRst, $01
000966CD CB0D                       	dc.b	nD6, $0D
000966CF E108                       	smpsAlterNote       $08
000966D1 E701                       	dc.b	smpsNoAttack, $01
000966D3 E104                       	smpsAlterNote       $04
000966D5 E701                       	dc.b	smpsNoAttack, $01
000966D7 E108                       	smpsAlterNote       $08
000966D9 E701                       	dc.b	smpsNoAttack, $01
000966DB E10B                       	smpsAlterNote       $0B
000966DD E701                       	dc.b	smpsNoAttack, $01
000966DF E10F                       	smpsAlterNote       $0F
000966E1 E701                       	dc.b	smpsNoAttack, $01
000966E3 E10B                       	smpsAlterNote       $0B
000966E5 E701                       	dc.b	smpsNoAttack, $01
000966E7 E105                       	smpsAlterNote       $05
000966E9 E701                       	dc.b	smpsNoAttack, $01
000966EB E104                       	smpsAlterNote       $04
000966ED E701                       	dc.b	smpsNoAttack, $01
000966EF E108                       	smpsAlterNote       $08
000966F1 E701                       	dc.b	smpsNoAttack, $01
000966F3 E10E                       	smpsAlterNote       $0E
000966F5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000966F9 E10B                       	smpsAlterNote       $0B
000966FB E701                       	dc.b	smpsNoAttack, $01
000966FD E105                       	smpsAlterNote       $05
000966FF E701 E701 8019             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $19
00096707 03                         	dc.b	$03
00096708 E601                       	smpsAlterVol        $01
0009670A F6F1 D1                    	smpsJump            music84_Jump01
0009670D                            
0009670D                            ; FM5 Data
0009670D                            music84_FM5:
0009670F E080                       	smpsPan             panLeft, $00
00096711 8003                       	dc.b	nRst, $03
00096713 E10D                       	smpsAlterNote       $0D
00096715 C203 8008                  	dc.b	nF5, $03, nRst, $08
00096719 E10C                       	smpsAlterNote       $0C
0009671B C103 800A                  	dc.b	nE5, $03, nRst, $0A
0009671F E10F                       	smpsAlterNote       $0F
00096721 BA03 8006                  	dc.b	nA4, $03, nRst, $06
00096727 E6FE                       	smpsAlterVol        $FE
00096729 C703 C603 8001             	dc.b	nBb5, $03, nA5, $03, nRst, $01
0009672F E10D                       	smpsAlterNote       $0D
00096731 C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
00096737 E10C                       	smpsAlterNote       $0C
00096739 C102 8001                  	dc.b	nE5, $02, nRst, $01
0009673D E10A                       	smpsAlterNote       $0A
0009673F BD01 8001                  	dc.b	nC5, $01, nRst, $01
00096745 03                         	dc.b	$03
00096746                            
00096746                            music84_Jump00:
00096746 8004                       	dc.b	nRst, $04
00096748 E602                       	smpsAlterVol        $02
0009674A E10D                       	smpsAlterNote       $0D
0009674C B60D                       	dc.b	nF4, $0D
0009674E E107                       	smpsAlterNote       $07
00096750 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096754 E10A                       	smpsAlterNote       $0A
00096756 E701                       	dc.b	smpsNoAttack, $01
00096758 E110                       	smpsAlterNote       $10
0009675A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009675E E10A                       	smpsAlterNote       $0A
00096760 E701                       	dc.b	smpsNoAttack, $01
00096762 E107                       	smpsAlterNote       $07
00096764 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096768 E10D                       	smpsAlterNote       $0D
0009676A E701                       	dc.b	smpsNoAttack, $01
0009676C E111                       	smpsAlterNote       $11
0009676E E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00096772 E10D                       	smpsAlterNote       $0D
00096774 B80D                       	dc.b	nG4, $0D
00096776 E107                       	smpsAlterNote       $07
00096778 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009677C E10A                       	smpsAlterNote       $0A
0009677E E701                       	dc.b	smpsNoAttack, $01
00096780 E110                       	smpsAlterNote       $10
00096782 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096786 E10A                       	smpsAlterNote       $0A
00096788 E701                       	dc.b	smpsNoAttack, $01
0009678A E107                       	smpsAlterNote       $07
0009678C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096790 E10D                       	smpsAlterNote       $0D
00096792 E701                       	dc.b	smpsNoAttack, $01
00096794 E111                       	smpsAlterNote       $11
00096796 E701                       	dc.b	smpsNoAttack, $01
00096798 E110                       	smpsAlterNote       $10
0009679A E701                       	dc.b	smpsNoAttack, $01
0009679C E10A                       	smpsAlterNote       $0A
0009679E E701                       	dc.b	smpsNoAttack, $01
000967A0 E106                       	smpsAlterNote       $06
000967A2 E701                       	dc.b	smpsNoAttack, $01
000967A4 E10A                       	smpsAlterNote       $0A
000967A6 E701                       	dc.b	smpsNoAttack, $01
000967A8 E10D                       	smpsAlterNote       $0D
000967AA E701                       	dc.b	smpsNoAttack, $01
000967AC E111                       	smpsAlterNote       $11
000967AE E701                       	dc.b	smpsNoAttack, $01
000967B0 E10D                       	smpsAlterNote       $0D
000967B2 E701                       	dc.b	smpsNoAttack, $01
000967B4 E10F                       	smpsAlterNote       $0F
000967B6 BA0E                       	dc.b	nA4, $0E
000967B8 E109                       	smpsAlterNote       $09
000967BA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000967BE E10F                       	smpsAlterNote       $0F
000967C0 E701                       	dc.b	smpsNoAttack, $01
000967C2 E112                       	smpsAlterNote       $12
000967C4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000967C8 E10C                       	smpsAlterNote       $0C
000967CA E701                       	dc.b	smpsNoAttack, $01
000967CC E108                       	smpsAlterNote       $08
000967CE E701                       	dc.b	smpsNoAttack, $01
000967D0 E109                       	smpsAlterNote       $09
000967D2 E701                       	dc.b	smpsNoAttack, $01
000967D4 E10F                       	smpsAlterNote       $0F
000967D6 E701                       	dc.b	smpsNoAttack, $01
000967D8 E113                       	smpsAlterNote       $13
000967DA E701                       	dc.b	smpsNoAttack, $01
000967DC E10F                       	smpsAlterNote       $0F
000967DE E701                       	dc.b	smpsNoAttack, $01
000967E0 E109                       	smpsAlterNote       $09
000967E2 E701                       	dc.b	smpsNoAttack, $01
000967E4 E108                       	smpsAlterNote       $08
000967E6 E701                       	dc.b	smpsNoAttack, $01
000967E8 E10C                       	smpsAlterNote       $0C
000967EA E701                       	dc.b	smpsNoAttack, $01
000967EC E112                       	smpsAlterNote       $12
000967EE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000967F2 E10F                       	smpsAlterNote       $0F
000967F4 E701                       	dc.b	smpsNoAttack, $01
000967F6 E109                       	smpsAlterNote       $09
000967F8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000967FC E10F                       	smpsAlterNote       $0F
000967FE E701                       	dc.b	smpsNoAttack, $01
00096800 E112                       	smpsAlterNote       $12
00096802 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096806 E10C                       	smpsAlterNote       $0C
00096808 E701                       	dc.b	smpsNoAttack, $01
0009680A E108                       	smpsAlterNote       $08
0009680C E701                       	dc.b	smpsNoAttack, $01
0009680E E109                       	smpsAlterNote       $09
00096810 E701                       	dc.b	smpsNoAttack, $01
00096812 E10F                       	smpsAlterNote       $0F
00096814 E701                       	dc.b	smpsNoAttack, $01
00096816 E113                       	smpsAlterNote       $13
00096818 E701                       	dc.b	smpsNoAttack, $01
0009681A E10F                       	smpsAlterNote       $0F
0009681C E701                       	dc.b	smpsNoAttack, $01
0009681E E10C                       	smpsAlterNote       $0C
00096820 E701                       	dc.b	smpsNoAttack, $01
00096822 E108                       	smpsAlterNote       $08
00096824 E701                       	dc.b	smpsNoAttack, $01
00096826 E109                       	smpsAlterNote       $09
00096828 8001                       	dc.b	nRst, $01
0009682A E10C                       	smpsAlterNote       $0C
0009682C B50A                       	dc.b	nE4, $0A
0009682E E10D                       	smpsAlterNote       $0D
00096830 B60D                       	dc.b	nF4, $0D
00096832 E10A                       	smpsAlterNote       $0A
00096834 E701                       	dc.b	smpsNoAttack, $01
00096836 E106                       	smpsAlterNote       $06
00096838 E701                       	dc.b	smpsNoAttack, $01
0009683A E107                       	smpsAlterNote       $07
0009683C E701                       	dc.b	smpsNoAttack, $01
0009683E E10D                       	smpsAlterNote       $0D
00096840 E701                       	dc.b	smpsNoAttack, $01
00096842 E111                       	smpsAlterNote       $11
00096844 E701                       	dc.b	smpsNoAttack, $01
00096846 E10D                       	smpsAlterNote       $0D
00096848 E701                       	dc.b	smpsNoAttack, $01
0009684A E10A                       	smpsAlterNote       $0A
0009684C E701                       	dc.b	smpsNoAttack, $01
0009684E E106                       	smpsAlterNote       $06
00096850 E701                       	dc.b	smpsNoAttack, $01
00096852 E10A                       	smpsAlterNote       $0A
00096854 E701                       	dc.b	smpsNoAttack, $01
00096856 E110                       	smpsAlterNote       $10
00096858 E701                       	dc.b	smpsNoAttack, $01
0009685A E111                       	smpsAlterNote       $11
0009685C E701                       	dc.b	smpsNoAttack, $01
0009685E E10D                       	smpsAlterNote       $0D
00096860 B80D                       	dc.b	nG4, $0D
00096862 E10A                       	smpsAlterNote       $0A
00096864 E701                       	dc.b	smpsNoAttack, $01
00096866 E106                       	smpsAlterNote       $06
00096868 E701                       	dc.b	smpsNoAttack, $01
0009686A E107                       	smpsAlterNote       $07
0009686C E701                       	dc.b	smpsNoAttack, $01
0009686E E10D                       	smpsAlterNote       $0D
00096870 E701                       	dc.b	smpsNoAttack, $01
00096872 E111                       	smpsAlterNote       $11
00096874 E701                       	dc.b	smpsNoAttack, $01
00096876 E10D                       	smpsAlterNote       $0D
00096878 E701                       	dc.b	smpsNoAttack, $01
0009687A E10A                       	smpsAlterNote       $0A
0009687C E701                       	dc.b	smpsNoAttack, $01
0009687E E106                       	smpsAlterNote       $06
00096880 E701                       	dc.b	smpsNoAttack, $01
00096882 E10A                       	smpsAlterNote       $0A
00096884 E701                       	dc.b	smpsNoAttack, $01
00096886 E110                       	smpsAlterNote       $10
00096888 E701                       	dc.b	smpsNoAttack, $01
0009688A E111                       	smpsAlterNote       $11
0009688C E701                       	dc.b	smpsNoAttack, $01
0009688E E10D                       	smpsAlterNote       $0D
00096890 E701                       	dc.b	smpsNoAttack, $01
00096892 E107                       	smpsAlterNote       $07
00096894 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096898 E10A                       	smpsAlterNote       $0A
0009689A E701                       	dc.b	smpsNoAttack, $01
0009689C E110                       	smpsAlterNote       $10
0009689E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000968A2 E10D                       	smpsAlterNote       $0D
000968A4 8001                       	dc.b	nRst, $01
000968A6 E10F                       	smpsAlterNote       $0F
000968A8 BA0D                       	dc.b	nA4, $0D
000968AA E10C                       	smpsAlterNote       $0C
000968AC E701                       	dc.b	smpsNoAttack, $01
000968AE E108                       	smpsAlterNote       $08
000968B0 E701                       	dc.b	smpsNoAttack, $01
000968B2 E10C                       	smpsAlterNote       $0C
000968B4 E701                       	dc.b	smpsNoAttack, $01
000968B6 E112                       	smpsAlterNote       $12
000968B8 E701                       	dc.b	smpsNoAttack, $01
000968BA E113                       	smpsAlterNote       $13
000968BC E701                       	dc.b	smpsNoAttack, $01
000968BE E10F                       	smpsAlterNote       $0F
000968C0 E701                       	dc.b	smpsNoAttack, $01
000968C2 E109                       	smpsAlterNote       $09
000968C4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000968C8 E10C                       	smpsAlterNote       $0C
000968CA E701                       	dc.b	smpsNoAttack, $01
000968CC E112                       	smpsAlterNote       $12
000968CE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000968D2 E10C                       	smpsAlterNote       $0C
000968D4 E701                       	dc.b	smpsNoAttack, $01
000968D6 E109                       	smpsAlterNote       $09
000968D8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000968DC E10F                       	smpsAlterNote       $0F
000968DE E701                       	dc.b	smpsNoAttack, $01
000968E0 E113                       	smpsAlterNote       $13
000968E2 E701                       	dc.b	smpsNoAttack, $01
000968E4 E112                       	smpsAlterNote       $12
000968E6 E701                       	dc.b	smpsNoAttack, $01
000968E8 E10C                       	smpsAlterNote       $0C
000968EA E701                       	dc.b	smpsNoAttack, $01
000968EC E108                       	smpsAlterNote       $08
000968EE E701                       	dc.b	smpsNoAttack, $01
000968F0 E10C                       	smpsAlterNote       $0C
000968F2 E701                       	dc.b	smpsNoAttack, $01
000968F4 E10F                       	smpsAlterNote       $0F
000968F6 E701                       	dc.b	smpsNoAttack, $01
000968F8 E113                       	smpsAlterNote       $13
000968FA E701                       	dc.b	smpsNoAttack, $01
000968FC E10F                       	smpsAlterNote       $0F
000968FE E701                       	dc.b	smpsNoAttack, $01
00096900 E109                       	smpsAlterNote       $09
00096902 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00096906 E10D                       	smpsAlterNote       $0D
00096908 B609 8001                  	dc.b	nF4, $09, nRst, $01
0009690C E10C                       	smpsAlterNote       $0C
0009690E B506 8001                  	dc.b	nE4, $06, nRst, $01
00096912 E10B                       	smpsAlterNote       $0B
00096914 B30D                       	dc.b	nD4, $0D
00096916 E10C                       	smpsAlterNote       $0C
00096918 B503 8001                  	dc.b	nE4, $03, nRst, $01
0009691C E10D                       	smpsAlterNote       $0D
0009691E B603 B803 8001 BA0D        	dc.b	nF4, $03, nG4, $03, nRst, $01, nA4, $0D
00096926 E109                       	smpsAlterNote       $09
00096928 E701                       	dc.b	smpsNoAttack, $01
0009692A E108                       	smpsAlterNote       $08
0009692C E701                       	dc.b	smpsNoAttack, $01
0009692E E10C                       	smpsAlterNote       $0C
00096930 E701                       	dc.b	smpsNoAttack, $01
00096932 E112                       	smpsAlterNote       $12
00096934 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096938 E10F                       	smpsAlterNote       $0F
0009693A E701                       	dc.b	smpsNoAttack, $01
0009693C E109                       	smpsAlterNote       $09
0009693E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096942 E10F                       	smpsAlterNote       $0F
00096944 E701                       	dc.b	smpsNoAttack, $01
00096946 E112                       	smpsAlterNote       $12
00096948 E701                       	dc.b	smpsNoAttack, $01
0009694A E113                       	smpsAlterNote       $13
0009694C 8001                       	dc.b	nRst, $01
0009694E E10D                       	smpsAlterNote       $0D
00096950 C20D                       	dc.b	nF5, $0D
00096952 E107                       	smpsAlterNote       $07
00096954 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096958 E10A                       	smpsAlterNote       $0A
0009695A E701                       	dc.b	smpsNoAttack, $01
0009695C E110                       	smpsAlterNote       $10
0009695E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096962 E10A                       	smpsAlterNote       $0A
00096964 E701                       	dc.b	smpsNoAttack, $01
00096966 E107                       	smpsAlterNote       $07
00096968 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009696C E10D                       	smpsAlterNote       $0D
0009696E E701                       	dc.b	smpsNoAttack, $01
00096970 E111                       	smpsAlterNote       $11
00096972 E701                       	dc.b	smpsNoAttack, $01
00096974 E110                       	smpsAlterNote       $10
00096976 E701                       	dc.b	smpsNoAttack, $01
00096978 E10A                       	smpsAlterNote       $0A
0009697A E701                       	dc.b	smpsNoAttack, $01
0009697C E106                       	smpsAlterNote       $06
0009697E E701                       	dc.b	smpsNoAttack, $01
00096980 E10A                       	smpsAlterNote       $0A
00096982 E701                       	dc.b	smpsNoAttack, $01
00096984 E10D                       	smpsAlterNote       $0D
00096986 E701                       	dc.b	smpsNoAttack, $01
00096988 E111                       	smpsAlterNote       $11
0009698A E701                       	dc.b	smpsNoAttack, $01
0009698C E10D                       	smpsAlterNote       $0D
0009698E E701                       	dc.b	smpsNoAttack, $01
00096990 E107                       	smpsAlterNote       $07
00096992 E701                       	dc.b	smpsNoAttack, $01
00096994 E106                       	smpsAlterNote       $06
00096996 E701                       	dc.b	smpsNoAttack, $01
00096998 E10A                       	smpsAlterNote       $0A
0009699A E701                       	dc.b	smpsNoAttack, $01
0009699C E110                       	smpsAlterNote       $10
0009699E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000969A2 E10D                       	smpsAlterNote       $0D
000969A4 E701                       	dc.b	smpsNoAttack, $01
000969A6 E107                       	smpsAlterNote       $07
000969A8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000969AC E10D                       	smpsAlterNote       $0D
000969AE E701                       	dc.b	smpsNoAttack, $01
000969B0 E110                       	smpsAlterNote       $10
000969B2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000969B6 E10A                       	smpsAlterNote       $0A
000969B8 E701                       	dc.b	smpsNoAttack, $01
000969BA E106                       	smpsAlterNote       $06
000969BC E701                       	dc.b	smpsNoAttack, $01
000969BE E107                       	smpsAlterNote       $07
000969C0 E701                       	dc.b	smpsNoAttack, $01
000969C2 E10D                       	smpsAlterNote       $0D
000969C4 E701                       	dc.b	smpsNoAttack, $01
000969C6 E111                       	smpsAlterNote       $11
000969C8 E701                       	dc.b	smpsNoAttack, $01
000969CA E10D                       	smpsAlterNote       $0D
000969CC E701                       	dc.b	smpsNoAttack, $01
000969CE E10A                       	smpsAlterNote       $0A
000969D0 E701                       	dc.b	smpsNoAttack, $01
000969D2 E106                       	smpsAlterNote       $06
000969D4 E701                       	dc.b	smpsNoAttack, $01
000969D6 E10A                       	smpsAlterNote       $0A
000969D8 E701                       	dc.b	smpsNoAttack, $01
000969DA E110                       	smpsAlterNote       $10
000969DC E701                       	dc.b	smpsNoAttack, $01
000969DE E111                       	smpsAlterNote       $11
000969E0 E701                       	dc.b	smpsNoAttack, $01
000969E2 E10D                       	smpsAlterNote       $0D
000969E4 E701                       	dc.b	smpsNoAttack, $01
000969E6 E107                       	smpsAlterNote       $07
000969E8 E701                       	dc.b	smpsNoAttack, $01
000969EA E10D                       	smpsAlterNote       $0D
000969EC C207                       	dc.b	nF5, $07
000969EE E10C                       	smpsAlterNote       $0C
000969F0 C10D                       	dc.b	nE5, $0D
000969F2 E109                       	smpsAlterNote       $09
000969F4 E701                       	dc.b	smpsNoAttack, $01
000969F6 E106                       	smpsAlterNote       $06
000969F8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000969FC E10C                       	smpsAlterNote       $0C
000969FE E701                       	dc.b	smpsNoAttack, $01
00096A00 E110                       	smpsAlterNote       $10
00096A02 E701                       	dc.b	smpsNoAttack, $01
00096A04 E10F                       	smpsAlterNote       $0F
00096A06 E701                       	dc.b	smpsNoAttack, $01
00096A08 E109                       	smpsAlterNote       $09
00096A0A E701                       	dc.b	smpsNoAttack, $01
00096A0C E105                       	smpsAlterNote       $05
00096A0E E701                       	dc.b	smpsNoAttack, $01
00096A10 E109                       	smpsAlterNote       $09
00096A12 E701                       	dc.b	smpsNoAttack, $01
00096A14 E10C                       	smpsAlterNote       $0C
00096A16 E701                       	dc.b	smpsNoAttack, $01
00096A18 E110                       	smpsAlterNote       $10
00096A1A E701                       	dc.b	smpsNoAttack, $01
00096A1C E10B                       	smpsAlterNote       $0B
00096A1E BF0D                       	dc.b	nD5, $0D
00096A20 E108                       	smpsAlterNote       $08
00096A22 E701                       	dc.b	smpsNoAttack, $01
00096A24 E105                       	smpsAlterNote       $05
00096A26 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096A2A E10B                       	smpsAlterNote       $0B
00096A2C E701                       	dc.b	smpsNoAttack, $01
00096A2E E10F                       	smpsAlterNote       $0F
00096A30 E701                       	dc.b	smpsNoAttack, $01
00096A32 E10E                       	smpsAlterNote       $0E
00096A34 E701                       	dc.b	smpsNoAttack, $01
00096A36 E108                       	smpsAlterNote       $08
00096A38 E701                       	dc.b	smpsNoAttack, $01
00096A3A E104                       	smpsAlterNote       $04
00096A3C E701                       	dc.b	smpsNoAttack, $01
00096A3E E108                       	smpsAlterNote       $08
00096A40 E701                       	dc.b	smpsNoAttack, $01
00096A42 E10E                       	smpsAlterNote       $0E
00096A44 E701                       	dc.b	smpsNoAttack, $01
00096A46 E10F                       	smpsAlterNote       $0F
00096A48 E701                       	dc.b	smpsNoAttack, $01
00096A4A E10B                       	smpsAlterNote       $0B
00096A4C E701                       	dc.b	smpsNoAttack, $01
00096A4E E105                       	smpsAlterNote       $05
00096A50 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096A54 E108                       	smpsAlterNote       $08
00096A56 E701                       	dc.b	smpsNoAttack, $01
00096A58 E10E                       	smpsAlterNote       $0E
00096A5A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096A5E E108                       	smpsAlterNote       $08
00096A60 E701                       	dc.b	smpsNoAttack, $01
00096A62 E105                       	smpsAlterNote       $05
00096A64 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096A68 E10B                       	smpsAlterNote       $0B
00096A6A E701                       	dc.b	smpsNoAttack, $01
00096A6C E10F                       	smpsAlterNote       $0F
00096A6E E701                       	dc.b	smpsNoAttack, $01
00096A70 E10E                       	smpsAlterNote       $0E
00096A72 E701                       	dc.b	smpsNoAttack, $01
00096A74 E108                       	smpsAlterNote       $08
00096A76 E701                       	dc.b	smpsNoAttack, $01
00096A78 E104                       	smpsAlterNote       $04
00096A7A E701                       	dc.b	smpsNoAttack, $01
00096A7C E108                       	smpsAlterNote       $08
00096A7E E701                       	dc.b	smpsNoAttack, $01
00096A80 E10B                       	smpsAlterNote       $0B
00096A82 E701                       	dc.b	smpsNoAttack, $01
00096A84 E10F                       	smpsAlterNote       $0F
00096A86 E701                       	dc.b	smpsNoAttack, $01
00096A88 E10B                       	smpsAlterNote       $0B
00096A8A E701                       	dc.b	smpsNoAttack, $01
00096A8C E105                       	smpsAlterNote       $05
00096A8E E701                       	dc.b	smpsNoAttack, $01
00096A90 E104                       	smpsAlterNote       $04
00096A92 E701                       	dc.b	smpsNoAttack, $01
00096A94 E108                       	smpsAlterNote       $08
00096A96 E701                       	dc.b	smpsNoAttack, $01
00096A98 E10E                       	smpsAlterNote       $0E
00096A9A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096A9E E10B                       	smpsAlterNote       $0B
00096AA0 E701                       	dc.b	smpsNoAttack, $01
00096AA2 E105                       	smpsAlterNote       $05
00096AA4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096AA8 E10B                       	smpsAlterNote       $0B
00096AAA E701                       	dc.b	smpsNoAttack, $01
00096AAC E10E                       	smpsAlterNote       $0E
00096AAE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096AB2 E108                       	smpsAlterNote       $08
00096AB4 E701                       	dc.b	smpsNoAttack, $01
00096AB6 E105                       	smpsAlterNote       $05
00096AB8 8001                       	dc.b	nRst, $01
00096ABC E601                       	smpsAlterVol        $01
00096ABE E10B                       	smpsAlterNote       $0B
00096AC0 BF06 8001 BF03 BF03 8001+  	dc.b	nD5, $06, nRst, $01, nD5, $03, nD5, $03, nRst, $01, nCs5, $03
00096ACC 8004                       	dc.b	nRst, $04
00096AD0 E6FF                       	smpsAlterVol        $FF
00096AD2 E10D                       	smpsAlterNote       $0D
00096AD4 B802 8001 B603 B601        	dc.b	nG4, $02, nRst, $01, nF4, $03, nF4, $01
00096ADC E10C                       	smpsAlterNote       $0C
00096ADE E7B5 0280 01               	dc.b	smpsNoAttack, nE4, $02, nRst, $01
00096AE3 E10D                       	smpsAlterNote       $0D
00096AE5 B60D                       	dc.b	nF4, $0D
00096AE7 E10A                       	smpsAlterNote       $0A
00096AE9 E701                       	dc.b	smpsNoAttack, $01
00096AEB E106                       	smpsAlterNote       $06
00096AED E701                       	dc.b	smpsNoAttack, $01
00096AEF E10A                       	smpsAlterNote       $0A
00096AF1 E701                       	dc.b	smpsNoAttack, $01
00096AF3 E110                       	smpsAlterNote       $10
00096AF5 E701                       	dc.b	smpsNoAttack, $01
00096AF7 E111                       	smpsAlterNote       $11
00096AF9 E701                       	dc.b	smpsNoAttack, $01
00096AFB E10D                       	smpsAlterNote       $0D
00096AFD E701                       	dc.b	smpsNoAttack, $01
00096AFF E107                       	smpsAlterNote       $07
00096B01 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096B05 E10A                       	smpsAlterNote       $0A
00096B07 E701                       	dc.b	smpsNoAttack, $01
00096B09 E110                       	smpsAlterNote       $10
00096B0B E701                       	dc.b	smpsNoAttack, $01
00096B0D E111                       	smpsAlterNote       $11
00096B0F 8001                       	dc.b	nRst, $01
00096B11 E10D                       	smpsAlterNote       $0D
00096B13 B80D                       	dc.b	nG4, $0D
00096B15 E10A                       	smpsAlterNote       $0A
00096B17 E701                       	dc.b	smpsNoAttack, $01
00096B19 E106                       	smpsAlterNote       $06
00096B1B E701                       	dc.b	smpsNoAttack, $01
00096B1D E10A                       	smpsAlterNote       $0A
00096B1F E701                       	dc.b	smpsNoAttack, $01
00096B21 E110                       	smpsAlterNote       $10
00096B23 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096B27 E10D                       	smpsAlterNote       $0D
00096B29 E701                       	dc.b	smpsNoAttack, $01
00096B2B E107                       	smpsAlterNote       $07
00096B2D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096B31 E10D                       	smpsAlterNote       $0D
00096B33 E701                       	dc.b	smpsNoAttack, $01
00096B35 E110                       	smpsAlterNote       $10
00096B37 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096B3B E10A                       	smpsAlterNote       $0A
00096B3D E701                       	dc.b	smpsNoAttack, $01
00096B3F E106                       	smpsAlterNote       $06
00096B41 E701                       	dc.b	smpsNoAttack, $01
00096B43 E107                       	smpsAlterNote       $07
00096B45 E701                       	dc.b	smpsNoAttack, $01
00096B47 E10D                       	smpsAlterNote       $0D
00096B49 E701                       	dc.b	smpsNoAttack, $01
00096B4B E111                       	smpsAlterNote       $11
00096B4D E701                       	dc.b	smpsNoAttack, $01
00096B4F E10D                       	smpsAlterNote       $0D
00096B51 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00096B55 E10F                       	smpsAlterNote       $0F
00096B57 BA02 8001                  	dc.b	nA4, $02, nRst, $01
00096B5B E110                       	smpsAlterNote       $10
00096B5D BB03                       	dc.b	nBb4, $03
00096B5F E10F                       	smpsAlterNote       $0F
00096B61 BA03 8001 C603             	dc.b	nA4, $03, nRst, $01, nA5, $03
00096B67 E110                       	smpsAlterNote       $10
00096B69 C703 8001                  	dc.b	nBb5, $03, nRst, $01
00096B6D E10F                       	smpsAlterNote       $0F
00096B6F C603 D203 8001             	dc.b	nA5, $03, nA6, $03, nRst, $01
00096B75 E110                       	smpsAlterNote       $10
00096B77 D302 8001                  	dc.b	nBb6, $02, nRst, $01
00096B7B E10F                       	smpsAlterNote       $0F
00096B7D D20D                       	dc.b	nA6, $0D
00096B7F E10C                       	smpsAlterNote       $0C
00096B81 E701                       	dc.b	smpsNoAttack, $01
00096B83 E108                       	smpsAlterNote       $08
00096B85 E701                       	dc.b	smpsNoAttack, $01
00096B87 E10C                       	smpsAlterNote       $0C
00096B89 E701                       	dc.b	smpsNoAttack, $01
00096B8B E10F                       	smpsAlterNote       $0F
00096B8D E701                       	dc.b	smpsNoAttack, $01
00096B8F E113                       	smpsAlterNote       $13
00096B91 E701                       	dc.b	smpsNoAttack, $01
00096B93 E10F                       	smpsAlterNote       $0F
00096B95 E701                       	dc.b	smpsNoAttack, $01
00096B97 E109                       	smpsAlterNote       $09
00096B99 E701                       	dc.b	smpsNoAttack, $01
00096B9B E108                       	smpsAlterNote       $08
00096B9D E701                       	dc.b	smpsNoAttack, $01
00096B9F E10C                       	smpsAlterNote       $0C
00096BA1 E701                       	dc.b	smpsNoAttack, $01
00096BA3 E112                       	smpsAlterNote       $12
00096BA5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096BA9 E10F                       	smpsAlterNote       $0F
00096BAB E701                       	dc.b	smpsNoAttack, $01
00096BAD E109                       	smpsAlterNote       $09
00096BAF E701 E701 8007             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $07
00096BB5 E10D                       	smpsAlterNote       $0D
00096BB7 CE07                       	dc.b	nF6, $07
00096BB9 E10C                       	smpsAlterNote       $0C
00096BBB CD06 8001                  	dc.b	nE6, $06, nRst, $01
00096BBF E10D                       	smpsAlterNote       $0D
00096BC1 CE03                       	dc.b	nF6, $03
00096BC3 E10C                       	smpsAlterNote       $0C
00096BC5 CC0D                       	dc.b	nEb6, $0D
00096BC7 E109                       	smpsAlterNote       $09
00096BC9 E701                       	dc.b	smpsNoAttack, $01
00096BCB E106                       	smpsAlterNote       $06
00096BCD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096BD1 E10C                       	smpsAlterNote       $0C
00096BD3 E701                       	dc.b	smpsNoAttack, $01
00096BD5 E110                       	smpsAlterNote       $10
00096BD7 E701                       	dc.b	smpsNoAttack, $01
00096BD9 E10F                       	smpsAlterNote       $0F
00096BDB E701                       	dc.b	smpsNoAttack, $01
00096BDD E109                       	smpsAlterNote       $09
00096BDF E701                       	dc.b	smpsNoAttack, $01
00096BE1 E105                       	smpsAlterNote       $05
00096BE3 E701                       	dc.b	smpsNoAttack, $01
00096BE5 E109                       	smpsAlterNote       $09
00096BE7 E701                       	dc.b	smpsNoAttack, $01
00096BE9 E10C                       	smpsAlterNote       $0C
00096BEB E701                       	dc.b	smpsNoAttack, $01
00096BED E110                       	smpsAlterNote       $10
00096BEF E701                       	dc.b	smpsNoAttack, $01
00096BF1 E10C                       	smpsAlterNote       $0C
00096BF3 E701                       	dc.b	smpsNoAttack, $01
00096BF5 E106                       	smpsAlterNote       $06
00096BF7 E701                       	dc.b	smpsNoAttack, $01
00096BF9 E105                       	smpsAlterNote       $05
00096BFB E701                       	dc.b	smpsNoAttack, $01
00096BFD E109                       	smpsAlterNote       $09
00096BFF E701                       	dc.b	smpsNoAttack, $01
00096C01 E10F                       	smpsAlterNote       $0F
00096C03 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096C07 E10C                       	smpsAlterNote       $0C
00096C09 E701                       	dc.b	smpsNoAttack, $01
00096C0B E10B                       	smpsAlterNote       $0B
00096C0D CB03 8001 CA02 8001 CB03   	dc.b	nD6, $03, nRst, $01, nCs6, $02, nRst, $01, nD6, $03
00096C17 E10F                       	smpsAlterNote       $0F
00096C19 C603 8001 C503 C603 8001   	dc.b	nA5, $03, nRst, $01, nAb5, $03, nA5, $03, nRst, $01
00096C23 E10D                       	smpsAlterNote       $0D
00096C25 C203                       	dc.b	nF5, $03
00096C27 E10C                       	smpsAlterNote       $0C
00096C29 C103 8001                  	dc.b	nE5, $03, nRst, $01
00096C2D E10D                       	smpsAlterNote       $0D
00096C2F C20D                       	dc.b	nF5, $0D
00096C31 E10C                       	smpsAlterNote       $0C
00096C33 C10D 8001                  	dc.b	nE5, $0D, nRst, $01
00096C37 E10B                       	smpsAlterNote       $0B
00096C39 BF0D                       	dc.b	nD5, $0D
00096C3B E108                       	smpsAlterNote       $08
00096C3D E701                       	dc.b	smpsNoAttack, $01
00096C3F E104                       	smpsAlterNote       $04
00096C41 E701                       	dc.b	smpsNoAttack, $01
00096C43 E108                       	smpsAlterNote       $08
00096C45 E701                       	dc.b	smpsNoAttack, $01
00096C47 E10E                       	smpsAlterNote       $0E
00096C49 E701                       	dc.b	smpsNoAttack, $01
00096C4B E10F                       	smpsAlterNote       $0F
00096C4D E701                       	dc.b	smpsNoAttack, $01
00096C4F E10B                       	smpsAlterNote       $0B
00096C51 E701                       	dc.b	smpsNoAttack, $01
00096C53 E105                       	smpsAlterNote       $05
00096C55 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096C59 E108                       	smpsAlterNote       $08
00096C5B E701                       	dc.b	smpsNoAttack, $01
00096C5D E10E                       	smpsAlterNote       $0E
00096C5F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096C63 E108                       	smpsAlterNote       $08
00096C65 E701                       	dc.b	smpsNoAttack, $01
00096C67 E105                       	smpsAlterNote       $05
00096C69 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096C6D E10B                       	smpsAlterNote       $0B
00096C6F E701                       	dc.b	smpsNoAttack, $01
00096C71 E10F                       	smpsAlterNote       $0F
00096C73 E701                       	dc.b	smpsNoAttack, $01
00096C75 E10E                       	smpsAlterNote       $0E
00096C77 E701                       	dc.b	smpsNoAttack, $01
00096C79 E108                       	smpsAlterNote       $08
00096C7B E701                       	dc.b	smpsNoAttack, $01
00096C7D E104                       	smpsAlterNote       $04
00096C7F E701                       	dc.b	smpsNoAttack, $01
00096C81 E108                       	smpsAlterNote       $08
00096C83 E701                       	dc.b	smpsNoAttack, $01
00096C85 E10B                       	smpsAlterNote       $0B
00096C87 E701                       	dc.b	smpsNoAttack, $01
00096C89 E10F                       	smpsAlterNote       $0F
00096C8B E701                       	dc.b	smpsNoAttack, $01
00096C8D E10B                       	smpsAlterNote       $0B
00096C8F E701                       	dc.b	smpsNoAttack, $01
00096C91 E105                       	smpsAlterNote       $05
00096C93 E701                       	dc.b	smpsNoAttack, $01
00096C95 E104                       	smpsAlterNote       $04
00096C97 E701                       	dc.b	smpsNoAttack, $01
00096C99 E108                       	smpsAlterNote       $08
00096C9B E701                       	dc.b	smpsNoAttack, $01
00096C9D E10E                       	smpsAlterNote       $0E
00096C9F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096CA3 E10B                       	smpsAlterNote       $0B
00096CA5 E701                       	dc.b	smpsNoAttack, $01
00096CA7 E105                       	smpsAlterNote       $05
00096CA9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096CAD E10B                       	smpsAlterNote       $0B
00096CAF E701                       	dc.b	smpsNoAttack, $01
00096CB1 E10E                       	smpsAlterNote       $0E
00096CB3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096CB7 E108                       	smpsAlterNote       $08
00096CB9 E701                       	dc.b	smpsNoAttack, $01
00096CBB E104                       	smpsAlterNote       $04
00096CBD E701                       	dc.b	smpsNoAttack, $01
00096CBF E105                       	smpsAlterNote       $05
00096CC1 E701                       	dc.b	smpsNoAttack, $01
00096CC3 E10B                       	smpsAlterNote       $0B
00096CC5 E701                       	dc.b	smpsNoAttack, $01
00096CC7 E10F                       	smpsAlterNote       $0F
00096CC9 E701                       	dc.b	smpsNoAttack, $01
00096CCB E10B                       	smpsAlterNote       $0B
00096CCD E701                       	dc.b	smpsNoAttack, $01
00096CCF E108                       	smpsAlterNote       $08
00096CD1 E701                       	dc.b	smpsNoAttack, $01
00096CD3 E104                       	smpsAlterNote       $04
00096CD5 E701                       	dc.b	smpsNoAttack, $01
00096CD7 E108                       	smpsAlterNote       $08
00096CD9 E701                       	dc.b	smpsNoAttack, $01
00096CDB E10E                       	smpsAlterNote       $0E
00096CDD E701                       	dc.b	smpsNoAttack, $01
00096CDF E10F                       	smpsAlterNote       $0F
00096CE1 E701                       	dc.b	smpsNoAttack, $01
00096CE3 E10B                       	smpsAlterNote       $0B
00096CE5 E701                       	dc.b	smpsNoAttack, $01
00096CE7 E105                       	smpsAlterNote       $05
00096CE9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096CED E108                       	smpsAlterNote       $08
00096CEF E701                       	dc.b	smpsNoAttack, $01
00096CF1 E10E                       	smpsAlterNote       $0E
00096CF3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096CF7 E108                       	smpsAlterNote       $08
00096CF9 E701                       	dc.b	smpsNoAttack, $01
00096CFB E105                       	smpsAlterNote       $05
00096CFD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096D01 E10B                       	smpsAlterNote       $0B
00096D03 E701                       	dc.b	smpsNoAttack, $01
00096D05 E10F                       	smpsAlterNote       $0F
00096D07 E701                       	dc.b	smpsNoAttack, $01
00096D09 E10E                       	smpsAlterNote       $0E
00096D0B E701                       	dc.b	smpsNoAttack, $01
00096D0D E108                       	smpsAlterNote       $08
00096D0F E701                       	dc.b	smpsNoAttack, $01
00096D11 E104                       	smpsAlterNote       $04
00096D13 E701                       	dc.b	smpsNoAttack, $01
00096D15 E108                       	smpsAlterNote       $08
00096D17 E701                       	dc.b	smpsNoAttack, $01
00096D19 E10B                       	smpsAlterNote       $0B
00096D1B E701                       	dc.b	smpsNoAttack, $01
00096D1D E10F                       	smpsAlterNote       $0F
00096D1F E701                       	dc.b	smpsNoAttack, $01
00096D21 E10B                       	smpsAlterNote       $0B
00096D23 E701                       	dc.b	smpsNoAttack, $01
00096D25 E105                       	smpsAlterNote       $05
00096D27 E701                       	dc.b	smpsNoAttack, $01
00096D29 E104                       	smpsAlterNote       $04
00096D2B E701                       	dc.b	smpsNoAttack, $01
00096D2D E105                       	smpsAlterNote       $05
00096D2F 8001                       	dc.b	nRst, $01
00096D31 E10D                       	smpsAlterNote       $0D
00096D33 C20D                       	dc.b	nF5, $0D
00096D35 E107                       	smpsAlterNote       $07
00096D37 E701                       	dc.b	smpsNoAttack, $01
00096D39 E106                       	smpsAlterNote       $06
00096D3B E701                       	dc.b	smpsNoAttack, $01
00096D3D E10A                       	smpsAlterNote       $0A
00096D3F E701                       	dc.b	smpsNoAttack, $01
00096D41 E110                       	smpsAlterNote       $10
00096D43 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096D47 E10D                       	smpsAlterNote       $0D
00096D49 E701                       	dc.b	smpsNoAttack, $01
00096D4B E107                       	smpsAlterNote       $07
00096D4D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096D51 E10D                       	smpsAlterNote       $0D
00096D53 E701                       	dc.b	smpsNoAttack, $01
00096D55 E110                       	smpsAlterNote       $10
00096D57 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096D5B E10A                       	smpsAlterNote       $0A
00096D5D E701                       	dc.b	smpsNoAttack, $01
00096D5F E106                       	smpsAlterNote       $06
00096D61 E701                       	dc.b	smpsNoAttack, $01
00096D63 E107                       	smpsAlterNote       $07
00096D65 E701                       	dc.b	smpsNoAttack, $01
00096D67 E10D                       	smpsAlterNote       $0D
00096D69 E701                       	dc.b	smpsNoAttack, $01
00096D6B E111                       	smpsAlterNote       $11
00096D6D E701                       	dc.b	smpsNoAttack, $01
00096D6F E10D                       	smpsAlterNote       $0D
00096D71 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00096D75 E10C                       	smpsAlterNote       $0C
00096D77 C10D                       	dc.b	nE5, $0D
00096D79 E10D                       	smpsAlterNote       $0D
00096D7B C20A                       	dc.b	nF5, $0A
00096D7D E10C                       	smpsAlterNote       $0C
00096D7F C10E                       	dc.b	nE5, $0E
00096D81 E106                       	smpsAlterNote       $06
00096D83 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096D87 E10C                       	smpsAlterNote       $0C
00096D89 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00096D8D E10B                       	smpsAlterNote       $0B
00096D8F BF0D                       	dc.b	nD5, $0D
00096D91 E10C                       	smpsAlterNote       $0C
00096D93 C107                       	dc.b	nE5, $07
00096D95 E10D                       	smpsAlterNote       $0D
00096D97 C206 8001 C406 8001 C603   	dc.b	nF5, $06, nRst, $01, nG5, $06, nRst, $01, nA5, $03
00096DA1 E110                       	smpsAlterNote       $10
00096DA3 C707 C703 8001             	dc.b	nBb5, $07, nBb5, $03, nRst, $01
00096DA9 E10F                       	smpsAlterNote       $0F
00096DAB C602 8001 D206 8001        	dc.b	nA5, $02, nRst, $01, nA6, $06, nRst, $01
00096DB3 E10D                       	smpsAlterNote       $0D
00096DB5 D003                       	dc.b	nG6, $03
00096DB9 E0C0                       	smpsPan             panCenter, $00
00096DBB E6FF                       	smpsAlterVol        $FF
00096DBD AA06 800F AA03 AA03 8019+  	dc.b	nF3, $06, nRst, $0F, nF3, $03, nF3, $03, nRst, $19, nF3, $02
00096DC9 8001                       	dc.b	nRst, $01
00096DCB E10C                       	smpsAlterNote       $0C
00096DCD A906 800F A902 8001        	dc.b	nE3, $06, nRst, $0F, nE3, $02, nRst, $01
00096DD7 E604                       	smpsAlterVol        $04
00096DD9 E10B                       	smpsAlterNote       $0B
00096DDB B306 8001                  	dc.b	nD4, $06, nRst, $01
00096DDF E10F                       	smpsAlterNote       $0F
00096DE1 AE03                       	dc.b	nA3, $03
00096DE3 E10D                       	smpsAlterNote       $0D
00096DE5 B603 8001                  	dc.b	nF4, $03, nRst, $01
00096DE9 E10C                       	smpsAlterNote       $0C
00096DEB B506 8001                  	dc.b	nE4, $06, nRst, $01
00096DEF E10B                       	smpsAlterNote       $0B
00096DF1 B302 8001                  	dc.b	nD4, $02, nRst, $01
00096DF5 E10A                       	smpsAlterNote       $0A
00096DF7 B103                       	dc.b	nC4, $03
00096DF9 E110                       	smpsAlterNote       $10
00096DFB AF03 8001                  	dc.b	nBb3, $03, nRst, $01
00096DFF E10F                       	smpsAlterNote       $0F
00096E01 AE03 800A                  	dc.b	nA3, $03, nRst, $0A
00096E05 E080                       	smpsPan             panLeft, $00
00096E07 01                         	dc.b	$01
00096E0A E6FB                       	smpsAlterVol        $FB
00096E0C E1E4                       	smpsAlterNote       $E4
00096E0E C501                       	dc.b	nAb5, $01
00096E10 E1F4                       	smpsAlterNote       $F4
00096E12 E701                       	dc.b	smpsNoAttack, $01
00096E14 E104                       	smpsAlterNote       $04
00096E16 E701                       	dc.b	smpsNoAttack, $01
00096E18 E114                       	smpsAlterNote       $14
00096E1A E701                       	dc.b	smpsNoAttack, $01
00096E1C E11C                       	smpsAlterNote       $1C
00096E1E E701                       	dc.b	smpsNoAttack, $01
00096E20 E1EF                       	smpsAlterNote       $EF
00096E22 E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
00096E25 E1FF                       	smpsAlterNote       $FF
00096E27 E701                       	dc.b	smpsNoAttack, $01
00096E29 E10F                       	smpsAlterNote       $0F
00096E2B C606                       	dc.b	nA5, $06
00096E2D E109                       	smpsAlterNote       $09
00096E2F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096E33 E10F                       	smpsAlterNote       $0F
00096E35 E701                       	dc.b	smpsNoAttack, $01
00096E37 E112                       	smpsAlterNote       $12
00096E39 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096E3D E10C                       	smpsAlterNote       $0C
00096E3F E701                       	dc.b	smpsNoAttack, $01
00096E41 E108                       	smpsAlterNote       $08
00096E43 E701                       	dc.b	smpsNoAttack, $01
00096E45 E109                       	smpsAlterNote       $09
00096E47 E701                       	dc.b	smpsNoAttack, $01
00096E49 E10F                       	smpsAlterNote       $0F
00096E4B E701                       	dc.b	smpsNoAttack, $01
00096E4D E113                       	smpsAlterNote       $13
00096E4F E701                       	dc.b	smpsNoAttack, $01
00096E51 E10F                       	smpsAlterNote       $0F
00096E53 E701                       	dc.b	smpsNoAttack, $01
00096E55 E10C                       	smpsAlterNote       $0C
00096E57 E701                       	dc.b	smpsNoAttack, $01
00096E59 E108                       	smpsAlterNote       $08
00096E5B E701                       	dc.b	smpsNoAttack, $01
00096E5D E10C                       	smpsAlterNote       $0C
00096E5F E701                       	dc.b	smpsNoAttack, $01
00096E61 E112                       	smpsAlterNote       $12
00096E63 E701                       	dc.b	smpsNoAttack, $01
00096E65 E113                       	smpsAlterNote       $13
00096E67 E701                       	dc.b	smpsNoAttack, $01
00096E69 E10F                       	smpsAlterNote       $0F
00096E6B E701                       	dc.b	smpsNoAttack, $01
00096E6D E109                       	smpsAlterNote       $09
00096E6F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096E73 E10C                       	smpsAlterNote       $0C
00096E75 E701                       	dc.b	smpsNoAttack, $01
00096E77 E112                       	smpsAlterNote       $12
00096E79 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096E7D E10C                       	smpsAlterNote       $0C
00096E7F E701                       	dc.b	smpsNoAttack, $01
00096E81 E109                       	smpsAlterNote       $09
00096E83 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096E87 E10F                       	smpsAlterNote       $0F
00096E89 E701                       	dc.b	smpsNoAttack, $01
00096E8B E113                       	smpsAlterNote       $13
00096E8D E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00096E91 E10D                       	smpsAlterNote       $0D
00096E93 C402 8001 C203             	dc.b	nG5, $02, nRst, $01, nF5, $03
00096E99 E10C                       	smpsAlterNote       $0C
00096E9B C102 8001                  	dc.b	nE5, $02, nRst, $01
00096E9F E10D                       	smpsAlterNote       $0D
00096EA1 C201 8001                  	dc.b	nF5, $01, nRst, $01
00096EA5 E10C                       	smpsAlterNote       $0C
00096EA7 C102                       	dc.b	nE5, $02
00096EA9 E10B                       	smpsAlterNote       $0B
00096EAB BF02 8001                  	dc.b	nD5, $02, nRst, $01
00096EAF E10C                       	smpsAlterNote       $0C
00096EB1 C101 8001                  	dc.b	nE5, $01, nRst, $01
00096EB5 E10B                       	smpsAlterNote       $0B
00096EB7 BF02                       	dc.b	nD5, $02
00096EB9 E10A                       	smpsAlterNote       $0A
00096EBB BD02 BF02 8001 BD01 8001   	dc.b	nC5, $02, nD5, $02, nRst, $01, nC5, $01, nRst, $01
00096EC5 E110                       	smpsAlterNote       $10
00096EC7 BB02                       	dc.b	nBb4, $02
00096EC9 E10A                       	smpsAlterNote       $0A
00096ECB BD02 8001                  	dc.b	nC5, $02, nRst, $01
00096ECF E110                       	smpsAlterNote       $10
00096ED1 BB01 8001                  	dc.b	nBb4, $01, nRst, $01
00096ED5 E10F                       	smpsAlterNote       $0F
00096ED7 BA01 8001                  	dc.b	nA4, $01, nRst, $01
00096EDB E110                       	smpsAlterNote       $10
00096EDD BB02                       	dc.b	nBb4, $02
00096EDF E10F                       	smpsAlterNote       $0F
00096EE1 BA02 8001 B901 8001 BA02   	dc.b	nA4, $02, nRst, $01, nAb4, $01, nRst, $01, nA4, $02
00096EEB E10C                       	smpsAlterNote       $0C
00096EED B502 B501 C101 8001        	dc.b	nE4, $02, nE4, $01, nE5, $01, nRst, $01
00096EF5 E10B                       	smpsAlterNote       $0B
00096EF7 BE01 8001                  	dc.b	nCs5, $01, nRst, $01
00096EFB E10F                       	smpsAlterNote       $0F
00096EFD BA02                       	dc.b	nA4, $02
00096F01 E0C0                       	smpsPan             panCenter, $00
00096F03 E601                       	smpsAlterVol        $01
00096F05 E109                       	smpsAlterNote       $09
00096F07 AA07 800E AA03 AA07 8015+  	dc.b	nF3, $07, nRst, $0E, nF3, $03, nF3, $07, nRst, $15, nF3, $03
00096F13 E108                       	smpsAlterNote       $08
00096F15 A906 800F A903             	dc.b	nE3, $06, nRst, $0F, nE3, $03
00096F1B E107                       	smpsAlterNote       $07
00096F1D B306 8001 AE03             	dc.b	nD4, $06, nRst, $01, nA3, $03
00096F23 E109                       	smpsAlterNote       $09
00096F25 B603 8001                  	dc.b	nF4, $03, nRst, $01
00096F29 E108                       	smpsAlterNote       $08
00096F2B B506 8001                  	dc.b	nE4, $06, nRst, $01
00096F2F E107                       	smpsAlterNote       $07
00096F31 B302 8001                  	dc.b	nD4, $02, nRst, $01
00096F35 E106                       	smpsAlterNote       $06
00096F37 B103                       	dc.b	nC4, $03
00096F39 E10C                       	smpsAlterNote       $0C
00096F3B AF03 8001                  	dc.b	nBb3, $03, nRst, $01
00096F41 E080                       	smpsPan             panLeft, $00
00096F43 07                         	dc.b	$07
00096F44 E6FE                       	smpsAlterVol        $FE
00096F46 E10B                       	smpsAlterNote       $0B
00096F48 B20D                       	dc.b	nCs4, $0D
00096F4A E105                       	smpsAlterNote       $05
00096F4C E701                       	dc.b	smpsNoAttack, $01
00096F4E E104                       	smpsAlterNote       $04
00096F50 E701                       	dc.b	smpsNoAttack, $01
00096F52 E108                       	smpsAlterNote       $08
00096F54 E701                       	dc.b	smpsNoAttack, $01
00096F56 E10E                       	smpsAlterNote       $0E
00096F58 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096F5C E10B                       	smpsAlterNote       $0B
00096F5E E701                       	dc.b	smpsNoAttack, $01
00096F60 E105                       	smpsAlterNote       $05
00096F62 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096F66 E10B                       	smpsAlterNote       $0B
00096F68 E701                       	dc.b	smpsNoAttack, $01
00096F6A E10E                       	smpsAlterNote       $0E
00096F6C E701                       	dc.b	smpsNoAttack, $01
00096F6E E10F                       	smpsAlterNote       $0F
00096F70 8001                       	dc.b	nRst, $01
00096F72 E10B                       	smpsAlterNote       $0B
00096F74 B30D                       	dc.b	nD4, $0D
00096F76 E105                       	smpsAlterNote       $05
00096F78 E701                       	dc.b	smpsNoAttack, $01
00096F7A E104                       	smpsAlterNote       $04
00096F7C E701                       	dc.b	smpsNoAttack, $01
00096F7E E108                       	smpsAlterNote       $08
00096F80 E701                       	dc.b	smpsNoAttack, $01
00096F82 E10E                       	smpsAlterNote       $0E
00096F84 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096F88 E10B                       	smpsAlterNote       $0B
00096F8A E701                       	dc.b	smpsNoAttack, $01
00096F8C E105                       	smpsAlterNote       $05
00096F8E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096F92 E10B                       	smpsAlterNote       $0B
00096F94 E701                       	dc.b	smpsNoAttack, $01
00096F96 E10E                       	smpsAlterNote       $0E
00096F98 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096F9C E108                       	smpsAlterNote       $08
00096F9E E701                       	dc.b	smpsNoAttack, $01
00096FA0 E104                       	smpsAlterNote       $04
00096FA2 E701                       	dc.b	smpsNoAttack, $01
00096FA4 E105                       	smpsAlterNote       $05
00096FA6 E701                       	dc.b	smpsNoAttack, $01
00096FA8 E10B                       	smpsAlterNote       $0B
00096FAA E701                       	dc.b	smpsNoAttack, $01
00096FAC E10F                       	smpsAlterNote       $0F
00096FAE E701                       	dc.b	smpsNoAttack, $01
00096FB0 E10B                       	smpsAlterNote       $0B
00096FB2 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00096FB6 E10C                       	smpsAlterNote       $0C
00096FB8 B50D                       	dc.b	nE4, $0D
00096FBA E106                       	smpsAlterNote       $06
00096FBC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096FC0 E10C                       	smpsAlterNote       $0C
00096FC2 E701                       	dc.b	smpsNoAttack, $01
00096FC4 E10F                       	smpsAlterNote       $0F
00096FC6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096FCA E109                       	smpsAlterNote       $09
00096FCC E701                       	dc.b	smpsNoAttack, $01
00096FCE E105                       	smpsAlterNote       $05
00096FD0 E701                       	dc.b	smpsNoAttack, $01
00096FD2 E106                       	smpsAlterNote       $06
00096FD4 E701                       	dc.b	smpsNoAttack, $01
00096FD6 E10C                       	smpsAlterNote       $0C
00096FD8 E701                       	dc.b	smpsNoAttack, $01
00096FDA E110                       	smpsAlterNote       $10
00096FDC E701                       	dc.b	smpsNoAttack, $01
00096FDE E10B                       	smpsAlterNote       $0B
00096FE0 B30E                       	dc.b	nD4, $0E
00096FE2 E105                       	smpsAlterNote       $05
00096FE4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096FE8 E10B                       	smpsAlterNote       $0B
00096FEA E701                       	dc.b	smpsNoAttack, $01
00096FEC E10E                       	smpsAlterNote       $0E
00096FEE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096FF2 E108                       	smpsAlterNote       $08
00096FF4 E701                       	dc.b	smpsNoAttack, $01
00096FF6 E104                       	smpsAlterNote       $04
00096FF8 E701                       	dc.b	smpsNoAttack, $01
00096FFA E105                       	smpsAlterNote       $05
00096FFC E701                       	dc.b	smpsNoAttack, $01
00096FFE E10B                       	smpsAlterNote       $0B
00097000 E701                       	dc.b	smpsNoAttack, $01
00097002 E10F                       	smpsAlterNote       $0F
00097004 E701                       	dc.b	smpsNoAttack, $01
00097006 E10B                       	smpsAlterNote       $0B
00097008 E701                       	dc.b	smpsNoAttack, $01
0009700A E108                       	smpsAlterNote       $08
0009700C E701                       	dc.b	smpsNoAttack, $01
0009700E E104                       	smpsAlterNote       $04
00097010 E701                       	dc.b	smpsNoAttack, $01
00097012 E108                       	smpsAlterNote       $08
00097014 E701                       	dc.b	smpsNoAttack, $01
00097016 E10E                       	smpsAlterNote       $0E
00097018 E701                       	dc.b	smpsNoAttack, $01
0009701A E10F                       	smpsAlterNote       $0F
0009701C E701                       	dc.b	smpsNoAttack, $01
0009701E E10B                       	smpsAlterNote       $0B
00097020 E701 B20D                  	dc.b	smpsNoAttack, $01, nCs4, $0D
00097024 E108                       	smpsAlterNote       $08
00097026 E701                       	dc.b	smpsNoAttack, $01
00097028 E105                       	smpsAlterNote       $05
0009702A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009702E E10B                       	smpsAlterNote       $0B
00097030 E701                       	dc.b	smpsNoAttack, $01
00097032 E10F                       	smpsAlterNote       $0F
00097034 E701                       	dc.b	smpsNoAttack, $01
00097036 E10E                       	smpsAlterNote       $0E
00097038 E701                       	dc.b	smpsNoAttack, $01
0009703A E108                       	smpsAlterNote       $08
0009703C E701                       	dc.b	smpsNoAttack, $01
0009703E E104                       	smpsAlterNote       $04
00097040 E701                       	dc.b	smpsNoAttack, $01
00097042 E108                       	smpsAlterNote       $08
00097044 E701                       	dc.b	smpsNoAttack, $01
00097046 E10B                       	smpsAlterNote       $0B
00097048 E701                       	dc.b	smpsNoAttack, $01
0009704A E10F                       	smpsAlterNote       $0F
0009704C E701                       	dc.b	smpsNoAttack, $01
0009704E E10B                       	smpsAlterNote       $0B
00097050 B30D                       	dc.b	nD4, $0D
00097052 E108                       	smpsAlterNote       $08
00097054 E701                       	dc.b	smpsNoAttack, $01
00097056 E105                       	smpsAlterNote       $05
00097058 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009705C E10B                       	smpsAlterNote       $0B
0009705E E701                       	dc.b	smpsNoAttack, $01
00097060 E10F                       	smpsAlterNote       $0F
00097062 E701                       	dc.b	smpsNoAttack, $01
00097064 E10E                       	smpsAlterNote       $0E
00097066 E701                       	dc.b	smpsNoAttack, $01
00097068 E108                       	smpsAlterNote       $08
0009706A E701                       	dc.b	smpsNoAttack, $01
0009706C E104                       	smpsAlterNote       $04
0009706E E701                       	dc.b	smpsNoAttack, $01
00097070 E108                       	smpsAlterNote       $08
00097072 E701                       	dc.b	smpsNoAttack, $01
00097074 E10B                       	smpsAlterNote       $0B
00097076 E701                       	dc.b	smpsNoAttack, $01
00097078 E10F                       	smpsAlterNote       $0F
0009707A E701                       	dc.b	smpsNoAttack, $01
0009707C E10B                       	smpsAlterNote       $0B
0009707E E701                       	dc.b	smpsNoAttack, $01
00097080 E105                       	smpsAlterNote       $05
00097082 E701                       	dc.b	smpsNoAttack, $01
00097084 E104                       	smpsAlterNote       $04
00097086 E701                       	dc.b	smpsNoAttack, $01
00097088 E108                       	smpsAlterNote       $08
0009708A E701                       	dc.b	smpsNoAttack, $01
0009708C E10E                       	smpsAlterNote       $0E
0009708E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097092 E10B                       	smpsAlterNote       $0B
00097094 8001 B20D                  	dc.b	nRst, $01, nCs4, $0D
00097098 E108                       	smpsAlterNote       $08
0009709A E701                       	dc.b	smpsNoAttack, $01
0009709C E104                       	smpsAlterNote       $04
0009709E E701                       	dc.b	smpsNoAttack, $01
000970A0 E108                       	smpsAlterNote       $08
000970A2 E701                       	dc.b	smpsNoAttack, $01
000970A4 E10B                       	smpsAlterNote       $0B
000970A6 E701                       	dc.b	smpsNoAttack, $01
000970AA E0C0                       	smpsPan             panCenter, $00
000970AC E601                       	smpsAlterVol        $01
000970AE E108                       	smpsAlterNote       $08
000970B0 A906 8001 A903 A903 8001+  	dc.b	nE3, $06, nRst, $01, nE3, $03, nE3, $03, nRst, $01, nE3, $06
000970BC 8008 A902 8001             	dc.b	nRst, $08, nE3, $02, nRst, $01
000970C4 E080                       	smpsPan             panLeft, $00
000970C6 07                         	dc.b	$07
000970C7 E6FF                       	smpsAlterVol        $FF
000970C9 E10D                       	smpsAlterNote       $0D
000970CB B60D                       	dc.b	nF4, $0D
000970CD E10A                       	smpsAlterNote       $0A
000970CF E701                       	dc.b	smpsNoAttack, $01
000970D1 E106                       	smpsAlterNote       $06
000970D3 E701                       	dc.b	smpsNoAttack, $01
000970D5 E10A                       	smpsAlterNote       $0A
000970D7 E701                       	dc.b	smpsNoAttack, $01
000970D9 E110                       	smpsAlterNote       $10
000970DB E701                       	dc.b	smpsNoAttack, $01
000970DD E111                       	smpsAlterNote       $11
000970DF E701                       	dc.b	smpsNoAttack, $01
000970E1 E10D                       	smpsAlterNote       $0D
000970E3 E701                       	dc.b	smpsNoAttack, $01
000970E5 E107                       	smpsAlterNote       $07
000970E7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000970EB E10A                       	smpsAlterNote       $0A
000970ED E701                       	dc.b	smpsNoAttack, $01
000970EF E110                       	smpsAlterNote       $10
000970F1 E701                       	dc.b	smpsNoAttack, $01
000970F3 E111                       	smpsAlterNote       $11
000970F5 8001                       	dc.b	nRst, $01
000970F7 E10D                       	smpsAlterNote       $0D
000970F9 B80D                       	dc.b	nG4, $0D
000970FB E10A                       	smpsAlterNote       $0A
000970FD E701                       	dc.b	smpsNoAttack, $01
000970FF E106                       	smpsAlterNote       $06
00097101 E701                       	dc.b	smpsNoAttack, $01
00097103 E10A                       	smpsAlterNote       $0A
00097105 E701                       	dc.b	smpsNoAttack, $01
00097107 E110                       	smpsAlterNote       $10
00097109 E701                       	dc.b	smpsNoAttack, $01
0009710B E111                       	smpsAlterNote       $11
0009710D E701                       	dc.b	smpsNoAttack, $01
0009710F E10D                       	smpsAlterNote       $0D
00097111 E701                       	dc.b	smpsNoAttack, $01
00097113 E107                       	smpsAlterNote       $07
00097115 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097119 E10D                       	smpsAlterNote       $0D
0009711B E701                       	dc.b	smpsNoAttack, $01
0009711D E110                       	smpsAlterNote       $10
0009711F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097123 E10A                       	smpsAlterNote       $0A
00097125 E701                       	dc.b	smpsNoAttack, $01
00097127 E106                       	smpsAlterNote       $06
00097129 E701                       	dc.b	smpsNoAttack, $01
0009712B E107                       	smpsAlterNote       $07
0009712D E701                       	dc.b	smpsNoAttack, $01
0009712F E10D                       	smpsAlterNote       $0D
00097131 E701                       	dc.b	smpsNoAttack, $01
00097133 E111                       	smpsAlterNote       $11
00097135 E701                       	dc.b	smpsNoAttack, $01
00097137 E10D                       	smpsAlterNote       $0D
00097139 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0009713D E10F                       	smpsAlterNote       $0F
0009713F BA0D                       	dc.b	nA4, $0D
00097141 E109                       	smpsAlterNote       $09
00097143 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097147 E10C                       	smpsAlterNote       $0C
00097149 E701                       	dc.b	smpsNoAttack, $01
0009714B E112                       	smpsAlterNote       $12
0009714D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097151 E10C                       	smpsAlterNote       $0C
00097153 E701                       	dc.b	smpsNoAttack, $01
00097155 E109                       	smpsAlterNote       $09
00097157 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009715B E10F                       	smpsAlterNote       $0F
0009715D E701                       	dc.b	smpsNoAttack, $01
0009715F E113                       	smpsAlterNote       $13
00097161 E701                       	dc.b	smpsNoAttack, $01
00097163 E112                       	smpsAlterNote       $12
00097165 E701                       	dc.b	smpsNoAttack, $01
00097167 E10C                       	smpsAlterNote       $0C
00097169 E701                       	dc.b	smpsNoAttack, $01
0009716B E108                       	smpsAlterNote       $08
0009716D E701                       	dc.b	smpsNoAttack, $01
0009716F E10C                       	smpsAlterNote       $0C
00097171 E701                       	dc.b	smpsNoAttack, $01
00097173 E10F                       	smpsAlterNote       $0F
00097175 E701                       	dc.b	smpsNoAttack, $01
00097177 E113                       	smpsAlterNote       $13
00097179 E701                       	dc.b	smpsNoAttack, $01
0009717B E10F                       	smpsAlterNote       $0F
0009717D E701                       	dc.b	smpsNoAttack, $01
0009717F E109                       	smpsAlterNote       $09
00097181 E701                       	dc.b	smpsNoAttack, $01
00097183 E108                       	smpsAlterNote       $08
00097185 E701                       	dc.b	smpsNoAttack, $01
00097187 E10C                       	smpsAlterNote       $0C
00097189 E701                       	dc.b	smpsNoAttack, $01
0009718B E112                       	smpsAlterNote       $12
0009718D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097191 E10F                       	smpsAlterNote       $0F
00097193 E701                       	dc.b	smpsNoAttack, $01
00097195 E109                       	smpsAlterNote       $09
00097197 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009719B E10F                       	smpsAlterNote       $0F
0009719D E701                       	dc.b	smpsNoAttack, $01
0009719F E112                       	smpsAlterNote       $12
000971A1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000971A5 E10C                       	smpsAlterNote       $0C
000971A7 E701                       	dc.b	smpsNoAttack, $01
000971A9 E108                       	smpsAlterNote       $08
000971AB E701                       	dc.b	smpsNoAttack, $01
000971AD E109                       	smpsAlterNote       $09
000971AF E701                       	dc.b	smpsNoAttack, $01
000971B1 E10C                       	smpsAlterNote       $0C
000971B3 B50A                       	dc.b	nE4, $0A
000971B5 E10D                       	smpsAlterNote       $0D
000971B7 B60E                       	dc.b	nF4, $0E
000971B9 E107                       	smpsAlterNote       $07
000971BB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000971BF E10D                       	smpsAlterNote       $0D
000971C1 E701                       	dc.b	smpsNoAttack, $01
000971C3 E110                       	smpsAlterNote       $10
000971C5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000971C9 E10A                       	smpsAlterNote       $0A
000971CB E701                       	dc.b	smpsNoAttack, $01
000971CD E106                       	smpsAlterNote       $06
000971CF E701                       	dc.b	smpsNoAttack, $01
000971D1 E107                       	smpsAlterNote       $07
000971D3 E701                       	dc.b	smpsNoAttack, $01
000971D5 E10D                       	smpsAlterNote       $0D
000971D7 E701                       	dc.b	smpsNoAttack, $01
000971D9 E111                       	smpsAlterNote       $11
000971DB E701                       	dc.b	smpsNoAttack, $01
000971DD E10D                       	smpsAlterNote       $0D
000971DF B80D                       	dc.b	nG4, $0D
000971E1 E10A                       	smpsAlterNote       $0A
000971E3 E701                       	dc.b	smpsNoAttack, $01
000971E5 E107                       	smpsAlterNote       $07
000971E7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000971EB E10D                       	smpsAlterNote       $0D
000971ED E701                       	dc.b	smpsNoAttack, $01
000971EF E111                       	smpsAlterNote       $11
000971F1 E701                       	dc.b	smpsNoAttack, $01
000971F3 E110                       	smpsAlterNote       $10
000971F5 E701                       	dc.b	smpsNoAttack, $01
000971F7 E10A                       	smpsAlterNote       $0A
000971F9 E701                       	dc.b	smpsNoAttack, $01
000971FB E106                       	smpsAlterNote       $06
000971FD E701                       	dc.b	smpsNoAttack, $01
000971FF E10A                       	smpsAlterNote       $0A
00097201 E701                       	dc.b	smpsNoAttack, $01
00097203 E10D                       	smpsAlterNote       $0D
00097205 E701                       	dc.b	smpsNoAttack, $01
00097207 E111                       	smpsAlterNote       $11
00097209 E701                       	dc.b	smpsNoAttack, $01
0009720B E10D                       	smpsAlterNote       $0D
0009720D E701                       	dc.b	smpsNoAttack, $01
0009720F E107                       	smpsAlterNote       $07
00097211 E701                       	dc.b	smpsNoAttack, $01
00097213 E106                       	smpsAlterNote       $06
00097215 E701                       	dc.b	smpsNoAttack, $01
00097217 E10A                       	smpsAlterNote       $0A
00097219 E701                       	dc.b	smpsNoAttack, $01
0009721B E110                       	smpsAlterNote       $10
0009721D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097221 E10D                       	smpsAlterNote       $0D
00097223 E701                       	dc.b	smpsNoAttack, $01
00097225 E10F                       	smpsAlterNote       $0F
00097227 BA0D                       	dc.b	nA4, $0D
00097229 E10C                       	smpsAlterNote       $0C
0009722B E701                       	dc.b	smpsNoAttack, $01
0009722D E108                       	smpsAlterNote       $08
0009722F E701                       	dc.b	smpsNoAttack, $01
00097231 E109                       	smpsAlterNote       $09
00097233 E701                       	dc.b	smpsNoAttack, $01
00097235 E10F                       	smpsAlterNote       $0F
00097237 E701                       	dc.b	smpsNoAttack, $01
00097239 E113                       	smpsAlterNote       $13
0009723B E701                       	dc.b	smpsNoAttack, $01
0009723D E10F                       	smpsAlterNote       $0F
0009723F E701                       	dc.b	smpsNoAttack, $01
00097241 E10C                       	smpsAlterNote       $0C
00097243 E701                       	dc.b	smpsNoAttack, $01
00097245 E108                       	smpsAlterNote       $08
00097247 E701                       	dc.b	smpsNoAttack, $01
00097249 E10C                       	smpsAlterNote       $0C
0009724B E701                       	dc.b	smpsNoAttack, $01
0009724D E112                       	smpsAlterNote       $12
0009724F E701                       	dc.b	smpsNoAttack, $01
00097251 E113                       	smpsAlterNote       $13
00097253 E701                       	dc.b	smpsNoAttack, $01
00097255 E10F                       	smpsAlterNote       $0F
00097257 E701                       	dc.b	smpsNoAttack, $01
00097259 E109                       	smpsAlterNote       $09
0009725B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009725F E10C                       	smpsAlterNote       $0C
00097261 E701                       	dc.b	smpsNoAttack, $01
00097263 E112                       	smpsAlterNote       $12
00097265 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097269 E10C                       	smpsAlterNote       $0C
0009726B E701                       	dc.b	smpsNoAttack, $01
0009726D E109                       	smpsAlterNote       $09
0009726F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097273 E10F                       	smpsAlterNote       $0F
00097275 E701                       	dc.b	smpsNoAttack, $01
00097277 E113                       	smpsAlterNote       $13
00097279 E701                       	dc.b	smpsNoAttack, $01
0009727B E112                       	smpsAlterNote       $12
0009727D E701                       	dc.b	smpsNoAttack, $01
0009727F E10C                       	smpsAlterNote       $0C
00097281 E701                       	dc.b	smpsNoAttack, $01
00097283 E109                       	smpsAlterNote       $09
00097285 8001                       	dc.b	nRst, $01
00097287 E10D                       	smpsAlterNote       $0D
00097289 B60A                       	dc.b	nF4, $0A
0009728B E10C                       	smpsAlterNote       $0C
0009728D B506 8001                  	dc.b	nE4, $06, nRst, $01
00097291 E10B                       	smpsAlterNote       $0B
00097293 B30D 8001                  	dc.b	nD4, $0D, nRst, $01
00097297 E10C                       	smpsAlterNote       $0C
00097299 B503                       	dc.b	nE4, $03
0009729B E10D                       	smpsAlterNote       $0D
0009729D B603 8001 B802 8001 BA0D   	dc.b	nF4, $03, nRst, $01, nG4, $02, nRst, $01, nA4, $0D
000972A7 E10C                       	smpsAlterNote       $0C
000972A9 E701                       	dc.b	smpsNoAttack, $01
000972AB E108                       	smpsAlterNote       $08
000972AD E701                       	dc.b	smpsNoAttack, $01
000972AF E10C                       	smpsAlterNote       $0C
000972B1 E701                       	dc.b	smpsNoAttack, $01
000972B3 E112                       	smpsAlterNote       $12
000972B5 E701                       	dc.b	smpsNoAttack, $01
000972B7 E113                       	smpsAlterNote       $13
000972B9 E701                       	dc.b	smpsNoAttack, $01
000972BB E10F                       	smpsAlterNote       $0F
000972BD E701                       	dc.b	smpsNoAttack, $01
000972BF E109                       	smpsAlterNote       $09
000972C1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000972C5 E10C                       	smpsAlterNote       $0C
000972C7 E701                       	dc.b	smpsNoAttack, $01
000972C9 E112                       	smpsAlterNote       $12
000972CB E701                       	dc.b	smpsNoAttack, $01
000972CD E113                       	smpsAlterNote       $13
000972CF 8001                       	dc.b	nRst, $01
000972D1 E10D                       	smpsAlterNote       $0D
000972D3 C20D                       	dc.b	nF5, $0D
000972D5 E10A                       	smpsAlterNote       $0A
000972D7 E701                       	dc.b	smpsNoAttack, $01
000972D9 E106                       	smpsAlterNote       $06
000972DB E701                       	dc.b	smpsNoAttack, $01
000972DD E10A                       	smpsAlterNote       $0A
000972DF E701                       	dc.b	smpsNoAttack, $01
000972E1 E110                       	smpsAlterNote       $10
000972E3 E701                       	dc.b	smpsNoAttack, $01
000972E5 E111                       	smpsAlterNote       $11
000972E7 E701                       	dc.b	smpsNoAttack, $01
000972E9 E10D                       	smpsAlterNote       $0D
000972EB E701                       	dc.b	smpsNoAttack, $01
000972ED E107                       	smpsAlterNote       $07
000972EF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000972F3 E10A                       	smpsAlterNote       $0A
000972F5 E701                       	dc.b	smpsNoAttack, $01
000972F7 E110                       	smpsAlterNote       $10
000972F9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000972FD E10A                       	smpsAlterNote       $0A
000972FF E701                       	dc.b	smpsNoAttack, $01
00097301 E107                       	smpsAlterNote       $07
00097303 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097307 E10D                       	smpsAlterNote       $0D
00097309 E701                       	dc.b	smpsNoAttack, $01
0009730B E111                       	smpsAlterNote       $11
0009730D E701                       	dc.b	smpsNoAttack, $01
0009730F E110                       	smpsAlterNote       $10
00097311 E701                       	dc.b	smpsNoAttack, $01
00097313 E10A                       	smpsAlterNote       $0A
00097315 E701                       	dc.b	smpsNoAttack, $01
00097317 E106                       	smpsAlterNote       $06
00097319 E701                       	dc.b	smpsNoAttack, $01
0009731B E10A                       	smpsAlterNote       $0A
0009731D E701                       	dc.b	smpsNoAttack, $01
0009731F E10D                       	smpsAlterNote       $0D
00097321 E701                       	dc.b	smpsNoAttack, $01
00097323 E111                       	smpsAlterNote       $11
00097325 E701                       	dc.b	smpsNoAttack, $01
00097327 E10D                       	smpsAlterNote       $0D
00097329 E701                       	dc.b	smpsNoAttack, $01
0009732B E107                       	smpsAlterNote       $07
0009732D E701                       	dc.b	smpsNoAttack, $01
0009732F E106                       	smpsAlterNote       $06
00097331 E701                       	dc.b	smpsNoAttack, $01
00097333 E10A                       	smpsAlterNote       $0A
00097335 E701                       	dc.b	smpsNoAttack, $01
00097337 E110                       	smpsAlterNote       $10
00097339 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009733D E10D                       	smpsAlterNote       $0D
0009733F E701                       	dc.b	smpsNoAttack, $01
00097341 E107                       	smpsAlterNote       $07
00097343 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097347 E10D                       	smpsAlterNote       $0D
00097349 E701                       	dc.b	smpsNoAttack, $01
0009734B E110                       	smpsAlterNote       $10
0009734D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097351 E10A                       	smpsAlterNote       $0A
00097353 E701                       	dc.b	smpsNoAttack, $01
00097355 E106                       	smpsAlterNote       $06
00097357 E701                       	dc.b	smpsNoAttack, $01
00097359 E107                       	smpsAlterNote       $07
0009735B E701                       	dc.b	smpsNoAttack, $01
0009735D E10D                       	smpsAlterNote       $0D
0009735F E701                       	dc.b	smpsNoAttack, $01
00097361 E111                       	smpsAlterNote       $11
00097363 E701                       	dc.b	smpsNoAttack, $01
00097365 E10D                       	smpsAlterNote       $0D
00097367 E701                       	dc.b	smpsNoAttack, $01
00097369 E10A                       	smpsAlterNote       $0A
0009736B E701                       	dc.b	smpsNoAttack, $01
0009736D E107                       	smpsAlterNote       $07
0009736F 8001                       	dc.b	nRst, $01
00097371 E10D                       	smpsAlterNote       $0D
00097373 C206 8001                  	dc.b	nF5, $06, nRst, $01
00097379 E601                       	smpsAlterVol        $01
0009737B E110                       	smpsAlterNote       $10
0009737D BB0D                       	dc.b	nBb4, $0D
0009737F E10A                       	smpsAlterNote       $0A
00097381 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097385 E110                       	smpsAlterNote       $10
00097387 E701                       	dc.b	smpsNoAttack, $01
00097389 E113                       	smpsAlterNote       $13
0009738B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009738F E10D                       	smpsAlterNote       $0D
00097391 E701                       	dc.b	smpsNoAttack, $01
00097393 E109                       	smpsAlterNote       $09
00097395 E701                       	dc.b	smpsNoAttack, $01
00097397 E10A                       	smpsAlterNote       $0A
00097399 E701                       	dc.b	smpsNoAttack, $01
0009739B E110                       	smpsAlterNote       $10
0009739D E701                       	dc.b	smpsNoAttack, $01
0009739F E114                       	smpsAlterNote       $14
000973A1 E701                       	dc.b	smpsNoAttack, $01
000973A3 E110                       	smpsAlterNote       $10
000973A5 E701                       	dc.b	smpsNoAttack, $01
000973A7 E10D                       	smpsAlterNote       $0D
000973A9 E701                       	dc.b	smpsNoAttack, $01
000973AB E109                       	smpsAlterNote       $09
000973AD E701                       	dc.b	smpsNoAttack, $01
000973AF E10A                       	smpsAlterNote       $0A
000973B1 8001 BD0D                  	dc.b	nRst, $01, nC5, $0D
000973B5 E107                       	smpsAlterNote       $07
000973B7 E701                       	dc.b	smpsNoAttack, $01
000973B9 E103                       	smpsAlterNote       $03
000973BB E701                       	dc.b	smpsNoAttack, $01
000973BD E107                       	smpsAlterNote       $07
000973BF E701                       	dc.b	smpsNoAttack, $01
000973C1 E10D                       	smpsAlterNote       $0D
000973C3 E701                       	dc.b	smpsNoAttack, $01
000973C5 E10E                       	smpsAlterNote       $0E
000973C7 E701                       	dc.b	smpsNoAttack, $01
000973C9 E10A                       	smpsAlterNote       $0A
000973CB E701                       	dc.b	smpsNoAttack, $01
000973CD E104                       	smpsAlterNote       $04
000973CF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000973D3 E107                       	smpsAlterNote       $07
000973D5 E701                       	dc.b	smpsNoAttack, $01
000973D7 E10D                       	smpsAlterNote       $0D
000973D9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000973DD E107                       	smpsAlterNote       $07
000973DF E701                       	dc.b	smpsNoAttack, $01
000973E1 E104                       	smpsAlterNote       $04
000973E3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000973E7 E10B                       	smpsAlterNote       $0B
000973E9 BF0D                       	dc.b	nD5, $0D
000973EB E108                       	smpsAlterNote       $08
000973ED E701                       	dc.b	smpsNoAttack, $01
000973EF E105                       	smpsAlterNote       $05
000973F1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000973F5 E10B                       	smpsAlterNote       $0B
000973F7 E701                       	dc.b	smpsNoAttack, $01
000973F9 E10F                       	smpsAlterNote       $0F
000973FB E701                       	dc.b	smpsNoAttack, $01
000973FD E10E                       	smpsAlterNote       $0E
000973FF E701                       	dc.b	smpsNoAttack, $01
00097401 E108                       	smpsAlterNote       $08
00097403 E701                       	dc.b	smpsNoAttack, $01
00097405 E104                       	smpsAlterNote       $04
00097407 E701                       	dc.b	smpsNoAttack, $01
00097409 E108                       	smpsAlterNote       $08
0009740B E701                       	dc.b	smpsNoAttack, $01
0009740D E10B                       	smpsAlterNote       $0B
0009740F E701                       	dc.b	smpsNoAttack, $01
00097411 E10F                       	smpsAlterNote       $0F
00097413 E701                       	dc.b	smpsNoAttack, $01
00097415 E10B                       	smpsAlterNote       $0B
00097417 E701                       	dc.b	smpsNoAttack, $01
00097419 E105                       	smpsAlterNote       $05
0009741B E701                       	dc.b	smpsNoAttack, $01
0009741D E104                       	smpsAlterNote       $04
0009741F E701                       	dc.b	smpsNoAttack, $01
00097421 E105                       	smpsAlterNote       $05
00097423 8001                       	dc.b	nRst, $01
00097425 E10C                       	smpsAlterNote       $0C
00097427 C10C                       	dc.b	nE5, $0C
00097429 E10D                       	smpsAlterNote       $0D
0009742B C201                       	dc.b	nF5, $01
0009742D E10E                       	smpsAlterNote       $0E
0009742F C301 8001                  	dc.b	nFs5, $01, nRst, $01
00097433 E10D                       	smpsAlterNote       $0D
00097435 C40C C20D                  	dc.b	nG5, $0C, nF5, $0D
00097439 E10A                       	smpsAlterNote       $0A
0009743B E701                       	dc.b	smpsNoAttack, $01
0009743D E106                       	smpsAlterNote       $06
0009743F E701                       	dc.b	smpsNoAttack, $01
00097441 E10A                       	smpsAlterNote       $0A
00097443 E701                       	dc.b	smpsNoAttack, $01
00097445 E10D                       	smpsAlterNote       $0D
00097447 E701                       	dc.b	smpsNoAttack, $01
00097449 E111                       	smpsAlterNote       $11
0009744B E701                       	dc.b	smpsNoAttack, $01
0009744D E10D                       	smpsAlterNote       $0D
0009744F E701                       	dc.b	smpsNoAttack, $01
00097451 E107                       	smpsAlterNote       $07
00097453 E701                       	dc.b	smpsNoAttack, $01
00097455 E106                       	smpsAlterNote       $06
00097457 E701                       	dc.b	smpsNoAttack, $01
00097459 E10A                       	smpsAlterNote       $0A
0009745B E701                       	dc.b	smpsNoAttack, $01
0009745D E110                       	smpsAlterNote       $10
0009745F E701                       	dc.b	smpsNoAttack, $01
00097461 E111                       	smpsAlterNote       $11
00097463 8001                       	dc.b	nRst, $01
00097465 E10D                       	smpsAlterNote       $0D
00097467 C40D                       	dc.b	nG5, $0D
00097469 E10A                       	smpsAlterNote       $0A
0009746B E701                       	dc.b	smpsNoAttack, $01
0009746D E106                       	smpsAlterNote       $06
0009746F E701                       	dc.b	smpsNoAttack, $01
00097471 E10A                       	smpsAlterNote       $0A
00097473 E701                       	dc.b	smpsNoAttack, $01
00097475 E10D                       	smpsAlterNote       $0D
00097477 E701                       	dc.b	smpsNoAttack, $01
00097479 E10C                       	smpsAlterNote       $0C
0009747B C006 8001 C002 C002 8001+  	dc.b	nEb5, $06, nRst, $01, nEb5, $02, nEb5, $02, nRst, $01, nEb5, $01
00097487 8001                       	dc.b	nRst, $01
00097489 E10D                       	smpsAlterNote       $0D
0009748B C20D                       	dc.b	nF5, $0D
0009748D E10A                       	smpsAlterNote       $0A
0009748F E701                       	dc.b	smpsNoAttack, $01
00097491 E106                       	smpsAlterNote       $06
00097493 E701                       	dc.b	smpsNoAttack, $01
00097495 E10A                       	smpsAlterNote       $0A
00097497 E701                       	dc.b	smpsNoAttack, $01
00097499 E110                       	smpsAlterNote       $10
0009749B E701                       	dc.b	smpsNoAttack, $01
0009749D E111                       	smpsAlterNote       $11
0009749F E701                       	dc.b	smpsNoAttack, $01
000974A1 E10D                       	smpsAlterNote       $0D
000974A3 E701                       	dc.b	smpsNoAttack, $01
000974A5 E107                       	smpsAlterNote       $07
000974A7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000974AB E10A                       	smpsAlterNote       $0A
000974AD E701                       	dc.b	smpsNoAttack, $01
000974AF E110                       	smpsAlterNote       $10
000974B1 E701                       	dc.b	smpsNoAttack, $01
000974B3 E111                       	smpsAlterNote       $11
000974B5 8001                       	dc.b	nRst, $01
000974B7 E10F                       	smpsAlterNote       $0F
000974B9 C60A                       	dc.b	nA5, $0A
000974BB E10D                       	smpsAlterNote       $0D
000974BD C406 8001                  	dc.b	nG5, $06, nRst, $01
000974C1 E10C                       	smpsAlterNote       $0C
000974C3 C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
000974CF 8001                       	dc.b	nRst, $01
000974D1 E10D                       	smpsAlterNote       $0D
000974D3 C20D                       	dc.b	nF5, $0D
000974D5 E107                       	smpsAlterNote       $07
000974D7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000974DB E10A                       	smpsAlterNote       $0A
000974DD E701                       	dc.b	smpsNoAttack, $01
000974DF E110                       	smpsAlterNote       $10
000974E1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000974E5 E10A                       	smpsAlterNote       $0A
000974E7 E701                       	dc.b	smpsNoAttack, $01
000974E9 E107                       	smpsAlterNote       $07
000974EB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000974EF E10D                       	smpsAlterNote       $0D
000974F1 E701                       	dc.b	smpsNoAttack, $01
000974F3 E111                       	smpsAlterNote       $11
000974F5 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000974F9 E10D                       	smpsAlterNote       $0D
000974FB C40D                       	dc.b	nG5, $0D
000974FD E107                       	smpsAlterNote       $07
000974FF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097503 E10A                       	smpsAlterNote       $0A
00097505 E701                       	dc.b	smpsNoAttack, $01
00097507 E10D                       	smpsAlterNote       $0D
00097509 8001                       	dc.b	nRst, $01
0009750B E10C                       	smpsAlterNote       $0C
0009750D C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
00097519 E10D                       	smpsAlterNote       $0D
0009751B C20E                       	dc.b	nF5, $0E
0009751D E107                       	smpsAlterNote       $07
0009751F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097523 E10D                       	smpsAlterNote       $0D
00097525 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0009752B E0C0                       	smpsPan             panCenter, $00
0009752D E603                       	smpsAlterVol        $03
0009752F E108                       	smpsAlterNote       $08
00097531 B406                       	dc.b	nEb4, $06
00097533 E10C                       	smpsAlterNote       $0C
00097535 AF03 8001                  	dc.b	nBb3, $03, nRst, $01
00097539 E108                       	smpsAlterNote       $08
0009753B B403                       	dc.b	nEb4, $03
0009753D E109                       	smpsAlterNote       $09
0009753F B803 8001                  	dc.b	nG4, $03, nRst, $01
00097543 E10C                       	smpsAlterNote       $0C
00097545 BB03 BB03 8008             	dc.b	nBb4, $03, nBb4, $03, nRst, $08
0009754D 03                         	dc.b	$03
0009754E E6FD                       	smpsAlterVol        $FD
00097550 F6F1 F4                    	smpsJump            music84_Jump00
00097553                            
00097553                            ; PSG1 Data
00097553                            music84_PSG1:
00097553 E1FD                       	smpsAlterNote       $FD
00097555 EC04                       	smpsPSGAlterVol     $04
00097557 9203                       	dc.b	nF1, $03
00097559 E1FE                       	smpsAlterNote       $FE
0009755B 9603                       	dc.b	nA1, $03
0009755D EC04                       	smpsPSGAlterVol     $04
0009755F E701                       	dc.b	smpsNoAttack, $01
00097561 E1FF                       	smpsAlterNote       $FF
00097563 ECFC                       	smpsPSGAlterVol     $FC
00097565 9B03                       	dc.b	nD2, $03
00097567 E1FD                       	smpsAlterNote       $FD
00097569 9403                       	dc.b	nG1, $03
0009756B EC04                       	smpsPSGAlterVol     $04
0009756D E701                       	dc.b	smpsNoAttack, $01
0009756F E1FE                       	smpsAlterNote       $FE
00097571 ECFC                       	smpsPSGAlterVol     $FC
00097573 9703                       	dc.b	nBb1, $03
00097575 E1FF                       	smpsAlterNote       $FF
00097577 9B03                       	dc.b	nD2, $03
00097579 EC04                       	smpsPSGAlterVol     $04
0009757B E701                       	dc.b	smpsNoAttack, $01
0009757D E1FE                       	smpsAlterNote       $FE
0009757F ECFC                       	smpsPSGAlterVol     $FC
00097581 A002                       	dc.b	nG2, $02
00097583 EC04                       	smpsPSGAlterVol     $04
00097585 E701                       	dc.b	smpsNoAttack, $01
00097587 E1FF                       	smpsAlterNote       $FF
00097589 ECFC                       	smpsPSGAlterVol     $FC
0009758B A203                       	dc.b	nA2, $03
0009758D EC0B                       	smpsPSGAlterVol     $0B
0009758F 800A                       	dc.b	nRst, $0A
00097591 E105                       	smpsAlterNote       $05
00097593 01                         	dc.b	$01
00097594 E1FC                       	smpsAlterNote       $FC
00097596 01                         	dc.b	$01
00097597 E105                       	smpsAlterNote       $05
00097599 01                         	dc.b	$01
0009759A E1FD                       	smpsAlterNote       $FD
0009759C 01                         	dc.b	$01
0009759D E105                       	smpsAlterNote       $05
0009759F 01                         	dc.b	$01
000975A0 E1FD                       	smpsAlterNote       $FD
000975A2 01                         	dc.b	$01
000975A3 E1FA                       	smpsAlterNote       $FA
000975A5 01                         	dc.b	$01
000975A6 E1FC                       	smpsAlterNote       $FC
000975A8 01                         	dc.b	$01
000975A9 E105                       	smpsAlterNote       $05
000975AB 01                         	dc.b	$01
000975AC E108                       	smpsAlterNote       $08
000975AE 0101                       	dc.b	$01, $01
000975B0 E105                       	smpsAlterNote       $05
000975B2 01                         	dc.b	$01
000975B3 E1FA                       	smpsAlterNote       $FA
000975B5 0101                       	dc.b	$01, $01
000975B7 E1FD                       	smpsAlterNote       $FD
000975B9 01                         	dc.b	$01
000975BA E105                       	smpsAlterNote       $05
000975BC 01                         	dc.b	$01
000975BD E108                       	smpsAlterNote       $08
000975BF 01                         	dc.b	$01
000975C0 E105                       	smpsAlterNote       $05
000975C2 01                         	dc.b	$01
000975C3 E1FC                       	smpsAlterNote       $FC
000975C5 01                         	dc.b	$01
000975C6 E105                       	smpsAlterNote       $05
000975C8 01                         	dc.b	$01
000975C9 E1FD                       	smpsAlterNote       $FD
000975CB 01                         	dc.b	$01
000975CC                            
000975CC                            music84_Jump07:
000975CC E105                       	smpsAlterNote       $05
000975CE 8001                       	dc.b	nRst, $01
000975D0 E1FD                       	smpsAlterNote       $FD
000975D2 01                         	dc.b	$01
000975D3 E1FA                       	smpsAlterNote       $FA
000975D5 01                         	dc.b	$01
000975D6 E1FC                       	smpsAlterNote       $FC
000975D8 01                         	dc.b	$01
000975D9 E1FD                       	smpsAlterNote       $FD
000975DB ECF5                       	smpsPSGAlterVol     $F5
000975DD 9206                       	dc.b	nF1, $06
000975DF EC04                       	smpsPSGAlterVol     $04
000975E1 E701                       	dc.b	smpsNoAttack, $01
000975E3 EC07                       	smpsPSGAlterVol     $07
000975E5 8003                       	dc.b	nRst, $03
000975E7 ECF5                       	smpsPSGAlterVol     $F5
000975E9 9206                       	dc.b	nF1, $06
000975EB EC04                       	smpsPSGAlterVol     $04
000975ED E701                       	dc.b	smpsNoAttack, $01
000975EF EC07                       	smpsPSGAlterVol     $07
000975F1 8006                       	dc.b	nRst, $06
000975F3 E100                       	smpsAlterNote       $00
000975F5 01                         	dc.b	$01
000975F6 E104                       	smpsAlterNote       $04
000975F8 01                         	dc.b	$01
000975F9 E100                       	smpsAlterNote       $00
000975FB 01                         	dc.b	$01
000975FC E1FB                       	smpsAlterNote       $FB
000975FE 01                         	dc.b	$01
000975FF E1FD                       	smpsAlterNote       $FD
00097601 ECF5                       	smpsPSGAlterVol     $F5
00097603 9406                       	dc.b	nG1, $06
00097605 EC04                       	smpsPSGAlterVol     $04
00097607 E701                       	dc.b	smpsNoAttack, $01
00097609 EC07                       	smpsPSGAlterVol     $07
0009760B 8003                       	dc.b	nRst, $03
0009760D ECF5                       	smpsPSGAlterVol     $F5
0009760F 9407                       	dc.b	nG1, $07
00097611 EC0B                       	smpsPSGAlterVol     $0B
00097613 8006                       	dc.b	nRst, $06
00097615 E100                       	smpsAlterNote       $00
00097617 01                         	dc.b	$01
00097618 E103                       	smpsAlterNote       $03
0009761A 0101                       	dc.b	$01, $01
0009761C E1FD                       	smpsAlterNote       $FD
0009761E 01                         	dc.b	$01
0009761F ECF5                       	smpsPSGAlterVol     $F5
00097621 9207                       	dc.b	nF1, $07
00097623 EC0B                       	smpsPSGAlterVol     $0B
00097625 8004                       	dc.b	nRst, $04
00097627 ECF5                       	smpsPSGAlterVol     $F5
00097629 9206                       	dc.b	nF1, $06
0009762B EC04                       	smpsPSGAlterVol     $04
0009762D E701                       	dc.b	smpsNoAttack, $01
0009762F EC07                       	smpsPSGAlterVol     $07
00097631 8006                       	dc.b	nRst, $06
00097633 E103                       	smpsAlterNote       $03
00097635 01                         	dc.b	$01
00097636 E104                       	smpsAlterNote       $04
00097638 01                         	dc.b	$01
00097639 E100                       	smpsAlterNote       $00
0009763B 01                         	dc.b	$01
0009763C E1FA                       	smpsAlterNote       $FA
0009763E 01                         	dc.b	$01
0009763F E1FD                       	smpsAlterNote       $FD
00097641 ECF5                       	smpsPSGAlterVol     $F5
00097643 9206                       	dc.b	nF1, $06
00097645 EC04                       	smpsPSGAlterVol     $04
00097647 E701                       	dc.b	smpsNoAttack, $01
00097649 EC07                       	smpsPSGAlterVol     $07
0009764B 8003                       	dc.b	nRst, $03
0009764D ECF5                       	smpsPSGAlterVol     $F5
0009764F 9106                       	dc.b	nE1, $06
00097651 EC04                       	smpsPSGAlterVol     $04
00097653 E701                       	dc.b	smpsNoAttack, $01
00097655 EC07                       	smpsPSGAlterVol     $07
00097657 8006                       	dc.b	nRst, $06
00097659 E100                       	smpsAlterNote       $00
0009765B 01                         	dc.b	$01
0009765C E104                       	smpsAlterNote       $04
0009765E 01                         	dc.b	$01
0009765F E100                       	smpsAlterNote       $00
00097661 01                         	dc.b	$01
00097662 E1FD                       	smpsAlterNote       $FD
00097664 01                         	dc.b	$01
00097665 ECF5                       	smpsPSGAlterVol     $F5
00097667 9206                       	dc.b	nF1, $06
00097669 EC04                       	smpsPSGAlterVol     $04
0009766B E701                       	dc.b	smpsNoAttack, $01
0009766D EC07                       	smpsPSGAlterVol     $07
0009766F 8003                       	dc.b	nRst, $03
00097671 ECF5                       	smpsPSGAlterVol     $F5
00097673 9207                       	dc.b	nF1, $07
00097675 EC0B                       	smpsPSGAlterVol     $0B
00097677 8007                       	dc.b	nRst, $07
00097679 E103                       	smpsAlterNote       $03
0009767B 0101                       	dc.b	$01, $01
0009767D E1FD                       	smpsAlterNote       $FD
0009767F 01                         	dc.b	$01
00097680 E1FB                       	smpsAlterNote       $FB
00097682 01                         	dc.b	$01
00097683 E1FD                       	smpsAlterNote       $FD
00097685 ECF5                       	smpsPSGAlterVol     $F5
00097687 9406                       	dc.b	nG1, $06
00097689 EC0B                       	smpsPSGAlterVol     $0B
0009768B 8004                       	dc.b	nRst, $04
0009768D ECF5                       	smpsPSGAlterVol     $F5
0009768F 9406                       	dc.b	nG1, $06
00097691 EC04                       	smpsPSGAlterVol     $04
00097693 E701                       	dc.b	smpsNoAttack, $01
00097695 EC07                       	smpsPSGAlterVol     $07
00097697 8006                       	dc.b	nRst, $06
00097699 E100                       	smpsAlterNote       $00
0009769B 01                         	dc.b	$01
0009769C E104                       	smpsAlterNote       $04
0009769E 01                         	dc.b	$01
0009769F E100                       	smpsAlterNote       $00
000976A1 01                         	dc.b	$01
000976A2 E1F9                       	smpsAlterNote       $F9
000976A4 01                         	dc.b	$01
000976A5 E1FD                       	smpsAlterNote       $FD
000976A7 ECF5                       	smpsPSGAlterVol     $F5
000976A9 9206                       	dc.b	nF1, $06
000976AB EC04                       	smpsPSGAlterVol     $04
000976AD E701                       	dc.b	smpsNoAttack, $01
000976AF EC07                       	smpsPSGAlterVol     $07
000976B1 8003                       	dc.b	nRst, $03
000976B3 ECF5                       	smpsPSGAlterVol     $F5
000976B5 9207                       	dc.b	nF1, $07
000976B7 EC0B                       	smpsPSGAlterVol     $0B
000976B9 8006                       	dc.b	nRst, $06
000976BB E100                       	smpsAlterNote       $00
000976BD 01                         	dc.b	$01
000976BE E104                       	smpsAlterNote       $04
000976C0 01                         	dc.b	$01
000976C1 E103                       	smpsAlterNote       $03
000976C3 01                         	dc.b	$01
000976C4 E1FD                       	smpsAlterNote       $FD
000976C6 01                         	dc.b	$01
000976C7 ECF5                       	smpsPSGAlterVol     $F5
000976C9 9207                       	dc.b	nF1, $07
000976CB EC0B                       	smpsPSGAlterVol     $0B
000976CD 8004                       	dc.b	nRst, $04
000976CF ECF5                       	smpsPSGAlterVol     $F5
000976D1 9206                       	dc.b	nF1, $06
000976D3 EC0B                       	smpsPSGAlterVol     $0B
000976D5 8007                       	dc.b	nRst, $07
000976D7 E103                       	smpsAlterNote       $03
000976D9 0101                       	dc.b	$01, $01
000976DB E100                       	smpsAlterNote       $00
000976DD 01                         	dc.b	$01
000976DE E1FA                       	smpsAlterNote       $FA
000976E0 01                         	dc.b	$01
000976E1 E1FD                       	smpsAlterNote       $FD
000976E3 ECF5                       	smpsPSGAlterVol     $F5
000976E5 9206                       	dc.b	nF1, $06
000976E7 EC04                       	smpsPSGAlterVol     $04
000976E9 E701                       	dc.b	smpsNoAttack, $01
000976EB EC07                       	smpsPSGAlterVol     $07
000976ED 8003                       	dc.b	nRst, $03
000976EF ECF5                       	smpsPSGAlterVol     $F5
000976F1 9206                       	dc.b	nF1, $06
000976F3 EC04                       	smpsPSGAlterVol     $04
000976F5 E701                       	dc.b	smpsNoAttack, $01
000976F7 EC07                       	smpsPSGAlterVol     $07
000976F9 8006                       	dc.b	nRst, $06
000976FB E100                       	smpsAlterNote       $00
000976FD 01                         	dc.b	$01
000976FE E104                       	smpsAlterNote       $04
00097700 01                         	dc.b	$01
00097701 E100                       	smpsAlterNote       $00
00097703 01                         	dc.b	$01
00097704 E1FD                       	smpsAlterNote       $FD
00097706 01                         	dc.b	$01
00097707 ECF5                       	smpsPSGAlterVol     $F5
00097709 9206                       	dc.b	nF1, $06
0009770B EC04                       	smpsPSGAlterVol     $04
0009770D E701                       	dc.b	smpsNoAttack, $01
0009770F EC07                       	smpsPSGAlterVol     $07
00097711 8003                       	dc.b	nRst, $03
00097713 ECF5                       	smpsPSGAlterVol     $F5
00097715 9207                       	dc.b	nF1, $07
00097717 EC0B                       	smpsPSGAlterVol     $0B
00097719 8007                       	dc.b	nRst, $07
0009771B E103                       	smpsAlterNote       $03
0009771D 0101                       	dc.b	$01, $01
0009771F E1FD                       	smpsAlterNote       $FD
00097721 01                         	dc.b	$01
00097722 E1FA                       	smpsAlterNote       $FA
00097724 01                         	dc.b	$01
00097725 E1FD                       	smpsAlterNote       $FD
00097727 ECF5                       	smpsPSGAlterVol     $F5
00097729 9206                       	dc.b	nF1, $06
0009772B EC0B                       	smpsPSGAlterVol     $0B
0009772D 8004                       	dc.b	nRst, $04
0009772F ECF5                       	smpsPSGAlterVol     $F5
00097731 9206                       	dc.b	nF1, $06
00097733 EC04                       	smpsPSGAlterVol     $04
00097735 E701                       	dc.b	smpsNoAttack, $01
00097737 EC07                       	smpsPSGAlterVol     $07
00097739 8006                       	dc.b	nRst, $06
0009773B E103                       	smpsAlterNote       $03
0009773D 01                         	dc.b	$01
0009773E E104                       	smpsAlterNote       $04
00097740 01                         	dc.b	$01
00097741 E100                       	smpsAlterNote       $00
00097743 01                         	dc.b	$01
00097744 E1FA                       	smpsAlterNote       $FA
00097746 01                         	dc.b	$01
00097747 E1FD                       	smpsAlterNote       $FD
00097749 ECF5                       	smpsPSGAlterVol     $F5
0009774B 9206                       	dc.b	nF1, $06
0009774D EC04                       	smpsPSGAlterVol     $04
0009774F E701                       	dc.b	smpsNoAttack, $01
00097751 EC07                       	smpsPSGAlterVol     $07
00097753 8003                       	dc.b	nRst, $03
00097755 ECF5                       	smpsPSGAlterVol     $F5
00097757 9206                       	dc.b	nF1, $06
00097759 EC04                       	smpsPSGAlterVol     $04
0009775B E701                       	dc.b	smpsNoAttack, $01
0009775D EC07                       	smpsPSGAlterVol     $07
0009775F 8006                       	dc.b	nRst, $06
00097761 E100                       	smpsAlterNote       $00
00097763 01                         	dc.b	$01
00097764 E104                       	smpsAlterNote       $04
00097766 01                         	dc.b	$01
00097767 E103                       	smpsAlterNote       $03
00097769 01                         	dc.b	$01
0009776A E1FD                       	smpsAlterNote       $FD
0009776C 01                         	dc.b	$01
0009776D ECF5                       	smpsPSGAlterVol     $F5
0009776F 9107                       	dc.b	nE1, $07
00097771 EC0B                       	smpsPSGAlterVol     $0B
00097773 8004                       	dc.b	nRst, $04
00097775 ECF5                       	smpsPSGAlterVol     $F5
00097777 9106                       	dc.b	nE1, $06
00097779 EC0B                       	smpsPSGAlterVol     $0B
0009777B 8007                       	dc.b	nRst, $07
0009777D E103                       	smpsAlterNote       $03
0009777F 0101                       	dc.b	$01, $01
00097781 E100                       	smpsAlterNote       $00
00097783 01                         	dc.b	$01
00097784 E1FA                       	smpsAlterNote       $FA
00097786 01                         	dc.b	$01
00097787 E1FD                       	smpsAlterNote       $FD
00097789 ECF5                       	smpsPSGAlterVol     $F5
0009778B 9106                       	dc.b	nE1, $06
0009778D EC04                       	smpsPSGAlterVol     $04
0009778F E701                       	dc.b	smpsNoAttack, $01
00097791 EC07                       	smpsPSGAlterVol     $07
00097793 8003                       	dc.b	nRst, $03
00097795 ECF5                       	smpsPSGAlterVol     $F5
00097797 9106                       	dc.b	nE1, $06
00097799 EC04                       	smpsPSGAlterVol     $04
0009779B E701                       	dc.b	smpsNoAttack, $01
0009779D EC07                       	smpsPSGAlterVol     $07
0009779F 8006                       	dc.b	nRst, $06
000977A1 E100                       	smpsAlterNote       $00
000977A3 01                         	dc.b	$01
000977A4 E104                       	smpsAlterNote       $04
000977A6 01                         	dc.b	$01
000977A7 E100                       	smpsAlterNote       $00
000977A9 01                         	dc.b	$01
000977AA E1FA                       	smpsAlterNote       $FA
000977AC 01                         	dc.b	$01
000977AD E1FD                       	smpsAlterNote       $FD
000977AF ECF5                       	smpsPSGAlterVol     $F5
000977B1 9106                       	dc.b	nE1, $06
000977B3 EC04                       	smpsPSGAlterVol     $04
000977B5 E701                       	dc.b	smpsNoAttack, $01
000977B7 EC07                       	smpsPSGAlterVol     $07
000977B9 8003                       	dc.b	nRst, $03
000977BB ECF5                       	smpsPSGAlterVol     $F5
000977BD 9107 9106                  	dc.b	nE1, $07, nE1, $06
000977C1 EC04                       	smpsPSGAlterVol     $04
000977C3 E701                       	dc.b	smpsNoAttack, $01
000977C5 ECFC                       	smpsPSGAlterVol     $FC
000977C7 9103 9103                  	dc.b	nE1, $03, nE1, $03
000977CB EC04                       	smpsPSGAlterVol     $04
000977CD E701                       	dc.b	smpsNoAttack, $01
000977CF ECFC                       	smpsPSGAlterVol     $FC
000977D1 9106                       	dc.b	nE1, $06
000977D3 EC04                       	smpsPSGAlterVol     $04
000977D5 E701                       	dc.b	smpsNoAttack, $01
000977D7 EC07                       	smpsPSGAlterVol     $07
000977D9 8006                       	dc.b	nRst, $06
000977DB E100                       	smpsAlterNote       $00
000977DD 01                         	dc.b	$01
000977DE E104                       	smpsAlterNote       $04
000977E0 01                         	dc.b	$01
000977E1 E100                       	smpsAlterNote       $00
000977E3 01                         	dc.b	$01
000977E4 E1FA                       	smpsAlterNote       $FA
000977E6 01                         	dc.b	$01
000977E7 E1F9                       	smpsAlterNote       $F9
000977E9 01                         	dc.b	$01
000977EA E1FD                       	smpsAlterNote       $FD
000977EC 01                         	dc.b	$01
000977ED E103                       	smpsAlterNote       $03
000977EF 01                         	dc.b	$01
000977F0 E104                       	smpsAlterNote       $04
000977F2 01                         	dc.b	$01
000977F3 E100                       	smpsAlterNote       $00
000977F5 01                         	dc.b	$01
000977F6 E1FA                       	smpsAlterNote       $FA
000977F8 0101                       	dc.b	$01, $01
000977FA E1FD                       	smpsAlterNote       $FD
000977FC ECF5                       	smpsPSGAlterVol     $F5
000977FE 9206                       	dc.b	nF1, $06
00097800 EC04                       	smpsPSGAlterVol     $04
00097802 E701                       	dc.b	smpsNoAttack, $01
00097804 EC07                       	smpsPSGAlterVol     $07
00097806 8003                       	dc.b	nRst, $03
00097808 ECF5                       	smpsPSGAlterVol     $F5
0009780A 9206                       	dc.b	nF1, $06
0009780C EC04                       	smpsPSGAlterVol     $04
0009780E E701                       	dc.b	smpsNoAttack, $01
00097810 EC07                       	smpsPSGAlterVol     $07
00097812 8006                       	dc.b	nRst, $06
00097814 E100                       	smpsAlterNote       $00
00097816 01                         	dc.b	$01
00097817 E104                       	smpsAlterNote       $04
00097819 01                         	dc.b	$01
0009781A E103                       	smpsAlterNote       $03
0009781C 01                         	dc.b	$01
0009781D E1FD                       	smpsAlterNote       $FD
0009781F 01                         	dc.b	$01
00097820 ECF5                       	smpsPSGAlterVol     $F5
00097822 9407                       	dc.b	nG1, $07
00097824 EC0B                       	smpsPSGAlterVol     $0B
00097826 8004                       	dc.b	nRst, $04
00097828 ECF5                       	smpsPSGAlterVol     $F5
0009782A 9406                       	dc.b	nG1, $06
0009782C EC0B                       	smpsPSGAlterVol     $0B
0009782E 8007                       	dc.b	nRst, $07
00097830 E103                       	smpsAlterNote       $03
00097832 0101                       	dc.b	$01, $01
00097834 E1FD                       	smpsAlterNote       $FD
00097836 01                         	dc.b	$01
00097837 E1F9                       	smpsAlterNote       $F9
00097839 01                         	dc.b	$01
0009783A E1FD                       	smpsAlterNote       $FD
0009783C ECF5                       	smpsPSGAlterVol     $F5
0009783E 9206                       	dc.b	nF1, $06
00097840 EC04                       	smpsPSGAlterVol     $04
00097842 E701                       	dc.b	smpsNoAttack, $01
00097844 EC07                       	smpsPSGAlterVol     $07
00097846 8003                       	dc.b	nRst, $03
00097848 ECF5                       	smpsPSGAlterVol     $F5
0009784A 9206                       	dc.b	nF1, $06
0009784C EC04                       	smpsPSGAlterVol     $04
0009784E E701                       	dc.b	smpsNoAttack, $01
00097850 EC07                       	smpsPSGAlterVol     $07
00097852 8006                       	dc.b	nRst, $06
00097854 E100                       	smpsAlterNote       $00
00097856 01                         	dc.b	$01
00097857 E104                       	smpsAlterNote       $04
00097859 01                         	dc.b	$01
0009785A E100                       	smpsAlterNote       $00
0009785C 01                         	dc.b	$01
0009785D E1FA                       	smpsAlterNote       $FA
0009785F 01                         	dc.b	$01
00097860 E1FD                       	smpsAlterNote       $FD
00097862 ECF5                       	smpsPSGAlterVol     $F5
00097864 9206                       	dc.b	nF1, $06
00097866 EC04                       	smpsPSGAlterVol     $04
00097868 E701                       	dc.b	smpsNoAttack, $01
0009786A EC07                       	smpsPSGAlterVol     $07
0009786C 8003                       	dc.b	nRst, $03
0009786E ECF5                       	smpsPSGAlterVol     $F5
00097870 9107                       	dc.b	nE1, $07
00097872 EC0B                       	smpsPSGAlterVol     $0B
00097874 8006                       	dc.b	nRst, $06
00097876 E100                       	smpsAlterNote       $00
00097878 01                         	dc.b	$01
00097879 E103                       	smpsAlterNote       $03
0009787B 0101                       	dc.b	$01, $01
0009787D E1FD                       	smpsAlterNote       $FD
0009787F 01                         	dc.b	$01
00097880 ECF5                       	smpsPSGAlterVol     $F5
00097882 9207                       	dc.b	nF1, $07
00097884 EC0B                       	smpsPSGAlterVol     $0B
00097886 8004                       	dc.b	nRst, $04
00097888 ECF5                       	smpsPSGAlterVol     $F5
0009788A 9206                       	dc.b	nF1, $06
0009788C EC04                       	smpsPSGAlterVol     $04
0009788E E701                       	dc.b	smpsNoAttack, $01
00097890 EC07                       	smpsPSGAlterVol     $07
00097892 8006                       	dc.b	nRst, $06
00097894 E103                       	smpsAlterNote       $03
00097896 01                         	dc.b	$01
00097897 E104                       	smpsAlterNote       $04
00097899 01                         	dc.b	$01
0009789A E100                       	smpsAlterNote       $00
0009789C 01                         	dc.b	$01
0009789D E1FB                       	smpsAlterNote       $FB
0009789F 01                         	dc.b	$01
000978A0 E1FD                       	smpsAlterNote       $FD
000978A2 ECF5                       	smpsPSGAlterVol     $F5
000978A4 9406                       	dc.b	nG1, $06
000978A6 EC04                       	smpsPSGAlterVol     $04
000978A8 E701                       	dc.b	smpsNoAttack, $01
000978AA EC07                       	smpsPSGAlterVol     $07
000978AC 8003                       	dc.b	nRst, $03
000978AE ECF5                       	smpsPSGAlterVol     $F5
000978B0 9406                       	dc.b	nG1, $06
000978B2 EC04                       	smpsPSGAlterVol     $04
000978B4 E701                       	dc.b	smpsNoAttack, $01
000978B6 EC07                       	smpsPSGAlterVol     $07
000978B8 8006                       	dc.b	nRst, $06
000978BA E100                       	smpsAlterNote       $00
000978BC 01                         	dc.b	$01
000978BD E104                       	smpsAlterNote       $04
000978BF 01                         	dc.b	$01
000978C0 E100                       	smpsAlterNote       $00
000978C2 01                         	dc.b	$01
000978C3 E1FD                       	smpsAlterNote       $FD
000978C5 01                         	dc.b	$01
000978C6 ECF5                       	smpsPSGAlterVol     $F5
000978C8 9206                       	dc.b	nF1, $06
000978CA EC04                       	smpsPSGAlterVol     $04
000978CC E701                       	dc.b	smpsNoAttack, $01
000978CE EC07                       	smpsPSGAlterVol     $07
000978D0 8003                       	dc.b	nRst, $03
000978D2 ECF5                       	smpsPSGAlterVol     $F5
000978D4 9207                       	dc.b	nF1, $07
000978D6 EC0B                       	smpsPSGAlterVol     $0B
000978D8 8007                       	dc.b	nRst, $07
000978DA E103                       	smpsAlterNote       $03
000978DC 0101                       	dc.b	$01, $01
000978DE E1FD                       	smpsAlterNote       $FD
000978E0 01                         	dc.b	$01
000978E1 E1FA                       	smpsAlterNote       $FA
000978E3 01                         	dc.b	$01
000978E4 E1FD                       	smpsAlterNote       $FD
000978E6 ECF5                       	smpsPSGAlterVol     $F5
000978E8 9206                       	dc.b	nF1, $06
000978EA EC0B                       	smpsPSGAlterVol     $0B
000978EC 8004                       	dc.b	nRst, $04
000978EE ECF5                       	smpsPSGAlterVol     $F5
000978F0 9206                       	dc.b	nF1, $06
000978F2 EC04                       	smpsPSGAlterVol     $04
000978F4 E701                       	dc.b	smpsNoAttack, $01
000978F6 EC07                       	smpsPSGAlterVol     $07
000978F8 8006                       	dc.b	nRst, $06
000978FA E100                       	smpsAlterNote       $00
000978FC 01                         	dc.b	$01
000978FD E104                       	smpsAlterNote       $04
000978FF 01                         	dc.b	$01
00097900 E100                       	smpsAlterNote       $00
00097902 01                         	dc.b	$01
00097903 E1FA                       	smpsAlterNote       $FA
00097905 01                         	dc.b	$01
00097906 E1FD                       	smpsAlterNote       $FD
00097908 ECF5                       	smpsPSGAlterVol     $F5
0009790A 9206                       	dc.b	nF1, $06
0009790C EC04                       	smpsPSGAlterVol     $04
0009790E E704                       	dc.b	smpsNoAttack, $04
00097910 ECFC                       	smpsPSGAlterVol     $FC
00097912 9207                       	dc.b	nF1, $07
00097914 EC0B                       	smpsPSGAlterVol     $0B
00097916 8006                       	dc.b	nRst, $06
00097918 E100                       	smpsAlterNote       $00
0009791A 01                         	dc.b	$01
0009791B E104                       	smpsAlterNote       $04
0009791D 01                         	dc.b	$01
0009791E E103                       	smpsAlterNote       $03
00097920 01                         	dc.b	$01
00097921 E1FD                       	smpsAlterNote       $FD
00097923 01                         	dc.b	$01
00097924 ECF5                       	smpsPSGAlterVol     $F5
00097926 9207                       	dc.b	nF1, $07
00097928 EC0B                       	smpsPSGAlterVol     $0B
0009792A 8004                       	dc.b	nRst, $04
0009792C ECF5                       	smpsPSGAlterVol     $F5
0009792E 9206                       	dc.b	nF1, $06
00097930 EC0B                       	smpsPSGAlterVol     $0B
00097932 8007                       	dc.b	nRst, $07
00097934 E103                       	smpsAlterNote       $03
00097936 0101                       	dc.b	$01, $01
00097938 E100                       	smpsAlterNote       $00
0009793A 01                         	dc.b	$01
0009793B E1FA                       	smpsAlterNote       $FA
0009793D 01                         	dc.b	$01
0009793E E1FD                       	smpsAlterNote       $FD
00097940 ECF5                       	smpsPSGAlterVol     $F5
00097942 9206                       	dc.b	nF1, $06
00097944 EC04                       	smpsPSGAlterVol     $04
00097946 E704                       	dc.b	smpsNoAttack, $04
00097948 ECFC                       	smpsPSGAlterVol     $FC
0009794A 9206                       	dc.b	nF1, $06
0009794C EC04                       	smpsPSGAlterVol     $04
0009794E E701                       	dc.b	smpsNoAttack, $01
00097950 EC07                       	smpsPSGAlterVol     $07
00097952 8006                       	dc.b	nRst, $06
00097954 E100                       	smpsAlterNote       $00
00097956 01                         	dc.b	$01
00097957 E104                       	smpsAlterNote       $04
00097959 01                         	dc.b	$01
0009795A E100                       	smpsAlterNote       $00
0009795C 01                         	dc.b	$01
0009795D E1FD                       	smpsAlterNote       $FD
0009795F 01                         	dc.b	$01
00097960 ECF5                       	smpsPSGAlterVol     $F5
00097962 9206                       	dc.b	nF1, $06
00097964 EC04                       	smpsPSGAlterVol     $04
00097966 E701                       	dc.b	smpsNoAttack, $01
00097968 EC07                       	smpsPSGAlterVol     $07
0009796A 8003                       	dc.b	nRst, $03
0009796C ECF5                       	smpsPSGAlterVol     $F5
0009796E 9207                       	dc.b	nF1, $07
00097970 EC0B                       	smpsPSGAlterVol     $0B
00097972 8007                       	dc.b	nRst, $07
00097974 E103                       	smpsAlterNote       $03
00097976 0101                       	dc.b	$01, $01
00097978 E1FD                       	smpsAlterNote       $FD
0009797A 01                         	dc.b	$01
0009797B E1FA                       	smpsAlterNote       $FA
0009797D 01                         	dc.b	$01
0009797E E1FD                       	smpsAlterNote       $FD
00097980 ECF5                       	smpsPSGAlterVol     $F5
00097982 9106                       	dc.b	nE1, $06
00097984 EC0B                       	smpsPSGAlterVol     $0B
00097986 8004                       	dc.b	nRst, $04
00097988 ECF5                       	smpsPSGAlterVol     $F5
0009798A 9106                       	dc.b	nE1, $06
0009798C EC04                       	smpsPSGAlterVol     $04
0009798E E701                       	dc.b	smpsNoAttack, $01
00097990 EC07                       	smpsPSGAlterVol     $07
00097992 8006                       	dc.b	nRst, $06
00097994 E100                       	smpsAlterNote       $00
00097996 01                         	dc.b	$01
00097997 E104                       	smpsAlterNote       $04
00097999 01                         	dc.b	$01
0009799A E100                       	smpsAlterNote       $00
0009799C 01                         	dc.b	$01
0009799D E1FA                       	smpsAlterNote       $FA
0009799F 01                         	dc.b	$01
000979A0 E1FD                       	smpsAlterNote       $FD
000979A2 ECF5                       	smpsPSGAlterVol     $F5
000979A4 9106                       	dc.b	nE1, $06
000979A6 EC04                       	smpsPSGAlterVol     $04
000979A8 E701                       	dc.b	smpsNoAttack, $01
000979AA EC07                       	smpsPSGAlterVol     $07
000979AC 8003                       	dc.b	nRst, $03
000979AE ECF5                       	smpsPSGAlterVol     $F5
000979B0 9106                       	dc.b	nE1, $06
000979B2 EC04                       	smpsPSGAlterVol     $04
000979B4 E701                       	dc.b	smpsNoAttack, $01
000979B6 EC07                       	smpsPSGAlterVol     $07
000979B8 8006                       	dc.b	nRst, $06
000979BA E100                       	smpsAlterNote       $00
000979BC 01                         	dc.b	$01
000979BD E104                       	smpsAlterNote       $04
000979BF 01                         	dc.b	$01
000979C0 E103                       	smpsAlterNote       $03
000979C2 01                         	dc.b	$01
000979C3 E1FD                       	smpsAlterNote       $FD
000979C5 01                         	dc.b	$01
000979C6 ECF5                       	smpsPSGAlterVol     $F5
000979C8 9107                       	dc.b	nE1, $07
000979CA EC0B                       	smpsPSGAlterVol     $0B
000979CC 8004                       	dc.b	nRst, $04
000979CE ECF5                       	smpsPSGAlterVol     $F5
000979D0 9106                       	dc.b	nE1, $06
000979D2 EC0B                       	smpsPSGAlterVol     $0B
000979D4 8007                       	dc.b	nRst, $07
000979D6 E103                       	smpsAlterNote       $03
000979D8 0101                       	dc.b	$01, $01
000979DA E100                       	smpsAlterNote       $00
000979DC 01                         	dc.b	$01
000979DD E1FA                       	smpsAlterNote       $FA
000979DF 01                         	dc.b	$01
000979E0 E1FD                       	smpsAlterNote       $FD
000979E2 ECF5                       	smpsPSGAlterVol     $F5
000979E4 9106                       	dc.b	nE1, $06
000979E6 EC04                       	smpsPSGAlterVol     $04
000979E8 E701                       	dc.b	smpsNoAttack, $01
000979EA EC07                       	smpsPSGAlterVol     $07
000979EC 8003                       	dc.b	nRst, $03
000979EE ECF5                       	smpsPSGAlterVol     $F5
000979F0 9106                       	dc.b	nE1, $06
000979F2 EC04                       	smpsPSGAlterVol     $04
000979F4 E701                       	dc.b	smpsNoAttack, $01
000979F6 EC07                       	smpsPSGAlterVol     $07
000979F8 8003                       	dc.b	nRst, $03
000979FA ECF5                       	smpsPSGAlterVol     $F5
000979FC 9207                       	dc.b	nF1, $07
000979FE EC0B                       	smpsPSGAlterVol     $0B
00097A00 8006                       	dc.b	nRst, $06
00097A02 E100                       	smpsAlterNote       $00
00097A04 01                         	dc.b	$01
00097A05 E104                       	smpsAlterNote       $04
00097A07 01                         	dc.b	$01
00097A08 E103                       	smpsAlterNote       $03
00097A0A 01                         	dc.b	$01
00097A0B E1FD                       	smpsAlterNote       $FD
00097A0D 01                         	dc.b	$01
00097A0E E1F9                       	smpsAlterNote       $F9
00097A10 01                         	dc.b	$01
00097A11 E1FD                       	smpsAlterNote       $FD
00097A13 01                         	dc.b	$01
00097A14 E100                       	smpsAlterNote       $00
00097A16 01                         	dc.b	$01
00097A17 E104                       	smpsAlterNote       $04
00097A19 01                         	dc.b	$01
00097A1A E1FD                       	smpsAlterNote       $FD
00097A1C ECF5                       	smpsPSGAlterVol     $F5
00097A1E 9203 9203                  	dc.b	nF1, $03, nF1, $03
00097A22 EC04                       	smpsPSGAlterVol     $04
00097A24 E701                       	dc.b	smpsNoAttack, $01
00097A26 EC07                       	smpsPSGAlterVol     $07
00097A28 8009                       	dc.b	nRst, $09
00097A2A E100                       	smpsAlterNote       $00
00097A2C 01                         	dc.b	$01
00097A2D E104                       	smpsAlterNote       $04
00097A2F 01                         	dc.b	$01
00097A30 E103                       	smpsAlterNote       $03
00097A32 01                         	dc.b	$01
00097A33 E1FD                       	smpsAlterNote       $FD
00097A35 01                         	dc.b	$01
00097A36 E1F9                       	smpsAlterNote       $F9
00097A38 01                         	dc.b	$01
00097A39 E1FD                       	smpsAlterNote       $FD
00097A3B 01                         	dc.b	$01
00097A3C E100                       	smpsAlterNote       $00
00097A3E 01                         	dc.b	$01
00097A3F E104                       	smpsAlterNote       $04
00097A41 01                         	dc.b	$01
00097A42 E100                       	smpsAlterNote       $00
00097A44 01                         	dc.b	$01
00097A45 E1FA                       	smpsAlterNote       $FA
00097A47 01                         	dc.b	$01
00097A48 E1F9                       	smpsAlterNote       $F9
00097A4A 01                         	dc.b	$01
00097A4B E1FD                       	smpsAlterNote       $FD
00097A4D 01                         	dc.b	$01
00097A4E E103                       	smpsAlterNote       $03
00097A50 0101                       	dc.b	$01, $01
00097A52 E100                       	smpsAlterNote       $00
00097A54 01                         	dc.b	$01
00097A55 E1FD                       	smpsAlterNote       $FD
00097A57 ECF5                       	smpsPSGAlterVol     $F5
00097A59 9202                       	dc.b	nF1, $02
00097A5B EC04                       	smpsPSGAlterVol     $04
00097A5D E701                       	dc.b	smpsNoAttack, $01
00097A5F ECFC                       	smpsPSGAlterVol     $FC
00097A61 9106                       	dc.b	nE1, $06
00097A63 EC04                       	smpsPSGAlterVol     $04
00097A65 E701                       	dc.b	smpsNoAttack, $01
00097A67 EC07                       	smpsPSGAlterVol     $07
00097A69 8006                       	dc.b	nRst, $06
00097A6B E100                       	smpsAlterNote       $00
00097A6D 01                         	dc.b	$01
00097A6E E104                       	smpsAlterNote       $04
00097A70 01                         	dc.b	$01
00097A71 E100                       	smpsAlterNote       $00
00097A73 01                         	dc.b	$01
00097A74 E1FD                       	smpsAlterNote       $FD
00097A76 01                         	dc.b	$01
00097A77 E1F9                       	smpsAlterNote       $F9
00097A79 01                         	dc.b	$01
00097A7A E1FD                       	smpsAlterNote       $FD
00097A7C 01                         	dc.b	$01
00097A7D E103                       	smpsAlterNote       $03
00097A7F 01                         	dc.b	$01
00097A80 E104                       	smpsAlterNote       $04
00097A82 01                         	dc.b	$01
00097A83 E1FD                       	smpsAlterNote       $FD
00097A85 ECF5                       	smpsPSGAlterVol     $F5
00097A87 9102                       	dc.b	nE1, $02
00097A89 EC04                       	smpsPSGAlterVol     $04
00097A8B E701                       	dc.b	smpsNoAttack, $01
00097A8D ECFC                       	smpsPSGAlterVol     $FC
00097A8F 920D                       	dc.b	nF1, $0D
00097A91 E100                       	smpsAlterNote       $00
00097A93 E701                       	dc.b	smpsNoAttack, $01
00097A95 E104                       	smpsAlterNote       $04
00097A97 E701                       	dc.b	smpsNoAttack, $01
00097A99 E100                       	smpsAlterNote       $00
00097A9B E701                       	dc.b	smpsNoAttack, $01
00097A9D E1FD                       	smpsAlterNote       $FD
00097A9F E701                       	dc.b	smpsNoAttack, $01
00097AA1 E1F9                       	smpsAlterNote       $F9
00097AA3 E701                       	dc.b	smpsNoAttack, $01
00097AA5 E1FD                       	smpsAlterNote       $FD
00097AA7 E701                       	dc.b	smpsNoAttack, $01
00097AA9 E103                       	smpsAlterNote       $03
00097AAB E701                       	dc.b	smpsNoAttack, $01
00097AAD E104                       	smpsAlterNote       $04
00097AAF E701                       	dc.b	smpsNoAttack, $01
00097AB1 E100                       	smpsAlterNote       $00
00097AB3 E701                       	dc.b	smpsNoAttack, $01
00097AB5 E1FA                       	smpsAlterNote       $FA
00097AB7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097ABB E1FD                       	smpsAlterNote       $FD
00097ABD E701                       	dc.b	smpsNoAttack, $01
00097ABF E103                       	smpsAlterNote       $03
00097AC1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097AC5 E1FD                       	smpsAlterNote       $FD
00097AC7 E701                       	dc.b	smpsNoAttack, $01
00097AC9 E1F9                       	smpsAlterNote       $F9
00097ACB E701                       	dc.b	smpsNoAttack, $01
00097ACD E1FA                       	smpsAlterNote       $FA
00097ACF E701                       	dc.b	smpsNoAttack, $01
00097AD1 E100                       	smpsAlterNote       $00
00097AD3 EC04                       	smpsPSGAlterVol     $04
00097AD5 E701                       	dc.b	smpsNoAttack, $01
00097AD7 EC07                       	smpsPSGAlterVol     $07
00097AD9 E104                       	smpsAlterNote       $04
00097ADB 8001                       	dc.b	nRst, $01
00097ADD E100                       	smpsAlterNote       $00
00097ADF 01                         	dc.b	$01
00097AE0 E1FD                       	smpsAlterNote       $FD
00097AE2 01                         	dc.b	$01
00097AE3 E1F9                       	smpsAlterNote       $F9
00097AE5 01                         	dc.b	$01
00097AE6 E1FD                       	smpsAlterNote       $FD
00097AE8 01                         	dc.b	$01
00097AE9 E103                       	smpsAlterNote       $03
00097AEB 01                         	dc.b	$01
00097AEC E104                       	smpsAlterNote       $04
00097AEE 01                         	dc.b	$01
00097AEF E1FD                       	smpsAlterNote       $FD
00097AF1 ECF5                       	smpsPSGAlterVol     $F5
00097AF3 9106                       	dc.b	nE1, $06
00097AF5 EC04                       	smpsPSGAlterVol     $04
00097AF7 E701                       	dc.b	smpsNoAttack, $01
00097AF9 EC07                       	smpsPSGAlterVol     $07
00097AFB 8003                       	dc.b	nRst, $03
00097AFD ECF5                       	smpsPSGAlterVol     $F5
00097AFF 9106                       	dc.b	nE1, $06
00097B01 EC04                       	smpsPSGAlterVol     $04
00097B03 E701                       	dc.b	smpsNoAttack, $01
00097B05 EC07                       	smpsPSGAlterVol     $07
00097B07 8006                       	dc.b	nRst, $06
00097B09 E100                       	smpsAlterNote       $00
00097B0B 01                         	dc.b	$01
00097B0C E104                       	smpsAlterNote       $04
00097B0E 01                         	dc.b	$01
00097B0F E100                       	smpsAlterNote       $00
00097B11 01                         	dc.b	$01
00097B12 E1FA                       	smpsAlterNote       $FA
00097B14 01                         	dc.b	$01
00097B15 E1FD                       	smpsAlterNote       $FD
00097B17 ECF5                       	smpsPSGAlterVol     $F5
00097B19 9206                       	dc.b	nF1, $06
00097B1B EC04                       	smpsPSGAlterVol     $04
00097B1D E701                       	dc.b	smpsNoAttack, $01
00097B1F EC07                       	smpsPSGAlterVol     $07
00097B21 8003                       	dc.b	nRst, $03
00097B23 ECF5                       	smpsPSGAlterVol     $F5
00097B25 9207                       	dc.b	nF1, $07
00097B27 EC0B                       	smpsPSGAlterVol     $0B
00097B29 8006                       	dc.b	nRst, $06
00097B2B E100                       	smpsAlterNote       $00
00097B2D 01                         	dc.b	$01
00097B2E E103                       	smpsAlterNote       $03
00097B30 0101                       	dc.b	$01, $01
00097B32 E1FD                       	smpsAlterNote       $FD
00097B34 01                         	dc.b	$01
00097B35 ECF5                       	smpsPSGAlterVol     $F5
00097B37 9107                       	dc.b	nE1, $07
00097B39 EC0B                       	smpsPSGAlterVol     $0B
00097B3B 8004                       	dc.b	nRst, $04
00097B3D ECF5                       	smpsPSGAlterVol     $F5
00097B3F 9106                       	dc.b	nE1, $06
00097B41 EC04                       	smpsPSGAlterVol     $04
00097B43 E701                       	dc.b	smpsNoAttack, $01
00097B45 EC07                       	smpsPSGAlterVol     $07
00097B47 8006                       	dc.b	nRst, $06
00097B49 E103                       	smpsAlterNote       $03
00097B4B 01                         	dc.b	$01
00097B4C E104                       	smpsAlterNote       $04
00097B4E 01                         	dc.b	$01
00097B4F E100                       	smpsAlterNote       $00
00097B51 01                         	dc.b	$01
00097B52 E1FA                       	smpsAlterNote       $FA
00097B54 01                         	dc.b	$01
00097B55 E1FD                       	smpsAlterNote       $FD
00097B57 ECF5                       	smpsPSGAlterVol     $F5
00097B59 9106                       	dc.b	nE1, $06
00097B5B EC04                       	smpsPSGAlterVol     $04
00097B5D E701                       	dc.b	smpsNoAttack, $01
00097B5F EC07                       	smpsPSGAlterVol     $07
00097B61 8003                       	dc.b	nRst, $03
00097B63 ECF5                       	smpsPSGAlterVol     $F5
00097B65 9106                       	dc.b	nE1, $06
00097B67 EC04                       	smpsPSGAlterVol     $04
00097B69 E701                       	dc.b	smpsNoAttack, $01
00097B6B EC07                       	smpsPSGAlterVol     $07
00097B6D 8003                       	dc.b	nRst, $03
00097B6F ECF5                       	smpsPSGAlterVol     $F5
00097B71 9207                       	dc.b	nF1, $07
00097B73 EC0B                       	smpsPSGAlterVol     $0B
00097B75 8006                       	dc.b	nRst, $06
00097B77 E100                       	smpsAlterNote       $00
00097B79 01                         	dc.b	$01
00097B7A E103                       	smpsAlterNote       $03
00097B7C 0101                       	dc.b	$01, $01
00097B7E E1FD                       	smpsAlterNote       $FD
00097B80 01                         	dc.b	$01
00097B81 E1F9                       	smpsAlterNote       $F9
00097B83 01                         	dc.b	$01
00097B84 E1FA                       	smpsAlterNote       $FA
00097B86 01                         	dc.b	$01
00097B87 E100                       	smpsAlterNote       $00
00097B89 01                         	dc.b	$01
00097B8A E104                       	smpsAlterNote       $04
00097B8C 01                         	dc.b	$01
00097B8D E1FD                       	smpsAlterNote       $FD
00097B8F ECF5                       	smpsPSGAlterVol     $F5
00097B91 9203 9203                  	dc.b	nF1, $03, nF1, $03
00097B95 EC04                       	smpsPSGAlterVol     $04
00097B97 E701                       	dc.b	smpsNoAttack, $01
00097B99 EC07                       	smpsPSGAlterVol     $07
00097B9B 8009                       	dc.b	nRst, $09
00097B9D E100                       	smpsAlterNote       $00
00097B9F 01                         	dc.b	$01
00097BA0 E103                       	smpsAlterNote       $03
00097BA2 0101                       	dc.b	$01, $01
00097BA4 E1FD                       	smpsAlterNote       $FD
00097BA6 01                         	dc.b	$01
00097BA7 E1F9                       	smpsAlterNote       $F9
00097BA9 01                         	dc.b	$01
00097BAA E1FA                       	smpsAlterNote       $FA
00097BAC 01                         	dc.b	$01
00097BAD E100                       	smpsAlterNote       $00
00097BAF 01                         	dc.b	$01
00097BB0 E104                       	smpsAlterNote       $04
00097BB2 01                         	dc.b	$01
00097BB3 E100                       	smpsAlterNote       $00
00097BB5 01                         	dc.b	$01
00097BB6 E1FD                       	smpsAlterNote       $FD
00097BB8 01                         	dc.b	$01
00097BB9 E1F9                       	smpsAlterNote       $F9
00097BBB 01                         	dc.b	$01
00097BBC E1FD                       	smpsAlterNote       $FD
00097BBE 01                         	dc.b	$01
00097BBF E103                       	smpsAlterNote       $03
00097BC1 01                         	dc.b	$01
00097BC2 E104                       	smpsAlterNote       $04
00097BC4 01                         	dc.b	$01
00097BC5 E100                       	smpsAlterNote       $00
00097BC7 01                         	dc.b	$01
00097BC8 E1FD                       	smpsAlterNote       $FD
00097BCA ECF5                       	smpsPSGAlterVol     $F5
00097BCC 9203 9106                  	dc.b	nF1, $03, nE1, $06
00097BD0 EC04                       	smpsPSGAlterVol     $04
00097BD2 E701                       	dc.b	smpsNoAttack, $01
00097BD4 EC07                       	smpsPSGAlterVol     $07
00097BD6 8006                       	dc.b	nRst, $06
00097BD8 E100                       	smpsAlterNote       $00
00097BDA 01                         	dc.b	$01
00097BDB E104                       	smpsAlterNote       $04
00097BDD 01                         	dc.b	$01
00097BDE E103                       	smpsAlterNote       $03
00097BE0 01                         	dc.b	$01
00097BE1 E1FD                       	smpsAlterNote       $FD
00097BE3 01                         	dc.b	$01
00097BE4 E1F9                       	smpsAlterNote       $F9
00097BE6 01                         	dc.b	$01
00097BE7 E1FD                       	smpsAlterNote       $FD
00097BE9 01                         	dc.b	$01
00097BEA E100                       	smpsAlterNote       $00
00097BEC 01                         	dc.b	$01
00097BED E104                       	smpsAlterNote       $04
00097BEF 01                         	dc.b	$01
00097BF0 E1FD                       	smpsAlterNote       $FD
00097BF2 ECF5                       	smpsPSGAlterVol     $F5
00097BF4 9103 920D                  	dc.b	nE1, $03, nF1, $0D
00097BF8 E100                       	smpsAlterNote       $00
00097BFA E701                       	dc.b	smpsNoAttack, $01
00097BFC E104                       	smpsAlterNote       $04
00097BFE E701                       	dc.b	smpsNoAttack, $01
00097C00 E100                       	smpsAlterNote       $00
00097C02 E701                       	dc.b	smpsNoAttack, $01
00097C04 E1FD                       	smpsAlterNote       $FD
00097C06 E701                       	dc.b	smpsNoAttack, $01
00097C08 E1F9                       	smpsAlterNote       $F9
00097C0A E701                       	dc.b	smpsNoAttack, $01
00097C0C E1FD                       	smpsAlterNote       $FD
00097C0E E701                       	dc.b	smpsNoAttack, $01
00097C10 E103                       	smpsAlterNote       $03
00097C12 E701                       	dc.b	smpsNoAttack, $01
00097C14 E104                       	smpsAlterNote       $04
00097C16 E701                       	dc.b	smpsNoAttack, $01
00097C18 E100                       	smpsAlterNote       $00
00097C1A E701                       	dc.b	smpsNoAttack, $01
00097C1C E1FA                       	smpsAlterNote       $FA
00097C1E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097C22 E1FD                       	smpsAlterNote       $FD
00097C24 E701                       	dc.b	smpsNoAttack, $01
00097C26 E103                       	smpsAlterNote       $03
00097C28 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097C2C E100                       	smpsAlterNote       $00
00097C2E E701                       	dc.b	smpsNoAttack, $01
00097C30 E1FA                       	smpsAlterNote       $FA
00097C32 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097C36 E100                       	smpsAlterNote       $00
00097C38 EC04                       	smpsPSGAlterVol     $04
00097C3A E701                       	dc.b	smpsNoAttack, $01
00097C3C EC07                       	smpsPSGAlterVol     $07
00097C3E E104                       	smpsAlterNote       $04
00097C40 8001                       	dc.b	nRst, $01
00097C42 E103                       	smpsAlterNote       $03
00097C44 01                         	dc.b	$01
00097C45 E1FD                       	smpsAlterNote       $FD
00097C47 01                         	dc.b	$01
00097C48 E1F9                       	smpsAlterNote       $F9
00097C4A 01                         	dc.b	$01
00097C4B E1FD                       	smpsAlterNote       $FD
00097C4D 01                         	dc.b	$01
00097C4E E100                       	smpsAlterNote       $00
00097C50 01                         	dc.b	$01
00097C51 E104                       	smpsAlterNote       $04
00097C53 01                         	dc.b	$01
00097C54 E1FD                       	smpsAlterNote       $FD
00097C56 ECF5                       	smpsPSGAlterVol     $F5
00097C58 9106                       	dc.b	nE1, $06
00097C5A EC04                       	smpsPSGAlterVol     $04
00097C5C E701                       	dc.b	smpsNoAttack, $01
00097C5E EC07                       	smpsPSGAlterVol     $07
00097C60 8003                       	dc.b	nRst, $03
00097C62 ECF5                       	smpsPSGAlterVol     $F5
00097C64 9106                       	dc.b	nE1, $06
00097C66 EC04                       	smpsPSGAlterVol     $04
00097C68 E701                       	dc.b	smpsNoAttack, $01
00097C6A EC07                       	smpsPSGAlterVol     $07
00097C6C 8006                       	dc.b	nRst, $06
00097C6E E100                       	smpsAlterNote       $00
00097C70 01                         	dc.b	$01
00097C71 E104                       	smpsAlterNote       $04
00097C73 01                         	dc.b	$01
00097C74 E100                       	smpsAlterNote       $00
00097C76 01                         	dc.b	$01
00097C77 E1FD                       	smpsAlterNote       $FD
00097C79 01                         	dc.b	$01
00097C7A ECF5                       	smpsPSGAlterVol     $F5
00097C7C 9206                       	dc.b	nF1, $06
00097C7E EC04                       	smpsPSGAlterVol     $04
00097C80 E701                       	dc.b	smpsNoAttack, $01
00097C82 EC07                       	smpsPSGAlterVol     $07
00097C84 8003                       	dc.b	nRst, $03
00097C86 ECF5                       	smpsPSGAlterVol     $F5
00097C88 9207                       	dc.b	nF1, $07
00097C8A EC0B                       	smpsPSGAlterVol     $0B
00097C8C 8007                       	dc.b	nRst, $07
00097C8E E103                       	smpsAlterNote       $03
00097C90 0101                       	dc.b	$01, $01
00097C92 E1FD                       	smpsAlterNote       $FD
00097C94 01                         	dc.b	$01
00097C95 E1FA                       	smpsAlterNote       $FA
00097C97 01                         	dc.b	$01
00097C98 E1FD                       	smpsAlterNote       $FD
00097C9A ECF5                       	smpsPSGAlterVol     $F5
00097C9C 9106                       	dc.b	nE1, $06
00097C9E EC0B                       	smpsPSGAlterVol     $0B
00097CA0 8004                       	dc.b	nRst, $04
00097CA2 ECF5                       	smpsPSGAlterVol     $F5
00097CA4 9106                       	dc.b	nE1, $06
00097CA6 EC04                       	smpsPSGAlterVol     $04
00097CA8 E701                       	dc.b	smpsNoAttack, $01
00097CAA EC07                       	smpsPSGAlterVol     $07
00097CAC 8006                       	dc.b	nRst, $06
00097CAE E100                       	smpsAlterNote       $00
00097CB0 01                         	dc.b	$01
00097CB1 E104                       	smpsAlterNote       $04
00097CB3 01                         	dc.b	$01
00097CB4 E100                       	smpsAlterNote       $00
00097CB6 01                         	dc.b	$01
00097CB7 E1FA                       	smpsAlterNote       $FA
00097CB9 01                         	dc.b	$01
00097CBA E1FD                       	smpsAlterNote       $FD
00097CBC ECF5                       	smpsPSGAlterVol     $F5
00097CBE 9206                       	dc.b	nF1, $06
00097CC0 EC04                       	smpsPSGAlterVol     $04
00097CC2 E701                       	dc.b	smpsNoAttack, $01
00097CC4 EC07                       	smpsPSGAlterVol     $07
00097CC6 8003                       	dc.b	nRst, $03
00097CC8 ECF5                       	smpsPSGAlterVol     $F5
00097CCA 9206                       	dc.b	nF1, $06
00097CCC EC04                       	smpsPSGAlterVol     $04
00097CCE E701                       	dc.b	smpsNoAttack, $01
00097CD0 EC07                       	smpsPSGAlterVol     $07
00097CD2 8006                       	dc.b	nRst, $06
00097CD4 E100                       	smpsAlterNote       $00
00097CD6 01                         	dc.b	$01
00097CD7 E104                       	smpsAlterNote       $04
00097CD9 01                         	dc.b	$01
00097CDA E103                       	smpsAlterNote       $03
00097CDC 01                         	dc.b	$01
00097CDD E1FD                       	smpsAlterNote       $FD
00097CDF 01                         	dc.b	$01
00097CE0 ECF5                       	smpsPSGAlterVol     $F5
00097CE2 9107                       	dc.b	nE1, $07
00097CE4 EC0B                       	smpsPSGAlterVol     $0B
00097CE6 8004                       	dc.b	nRst, $04
00097CE8 ECF5                       	smpsPSGAlterVol     $F5
00097CEA 9106                       	dc.b	nE1, $06
00097CEC EC0B                       	smpsPSGAlterVol     $0B
00097CEE 8007                       	dc.b	nRst, $07
00097CF0 E103                       	smpsAlterNote       $03
00097CF2 0101                       	dc.b	$01, $01
00097CF4 E100                       	smpsAlterNote       $00
00097CF6 01                         	dc.b	$01
00097CF7 E1FA                       	smpsAlterNote       $FA
00097CF9 01                         	dc.b	$01
00097CFA E1FD                       	smpsAlterNote       $FD
00097CFC ECF5                       	smpsPSGAlterVol     $F5
00097CFE 9206                       	dc.b	nF1, $06
00097D00 EC04                       	smpsPSGAlterVol     $04
00097D02 E701                       	dc.b	smpsNoAttack, $01
00097D04 EC07                       	smpsPSGAlterVol     $07
00097D06 8003                       	dc.b	nRst, $03
00097D08 ECF5                       	smpsPSGAlterVol     $F5
00097D0A 9206                       	dc.b	nF1, $06
00097D0C EC04                       	smpsPSGAlterVol     $04
00097D0E E701                       	dc.b	smpsNoAttack, $01
00097D10 EC07                       	smpsPSGAlterVol     $07
00097D12 8006                       	dc.b	nRst, $06
00097D14 E100                       	smpsAlterNote       $00
00097D16 01                         	dc.b	$01
00097D17 E104                       	smpsAlterNote       $04
00097D19 01                         	dc.b	$01
00097D1A E100                       	smpsAlterNote       $00
00097D1C 01                         	dc.b	$01
00097D1D E1FD                       	smpsAlterNote       $FD
00097D1F 01                         	dc.b	$01
00097D20 ECF5                       	smpsPSGAlterVol     $F5
00097D22 9106                       	dc.b	nE1, $06
00097D24 EC04                       	smpsPSGAlterVol     $04
00097D26 E701                       	dc.b	smpsNoAttack, $01
00097D28 EC07                       	smpsPSGAlterVol     $07
00097D2A 8003                       	dc.b	nRst, $03
00097D2C ECF5                       	smpsPSGAlterVol     $F5
00097D2E 9107 9106                  	dc.b	nE1, $07, nE1, $06
00097D32 EC04                       	smpsPSGAlterVol     $04
00097D34 E701                       	dc.b	smpsNoAttack, $01
00097D36 ECFC                       	smpsPSGAlterVol     $FC
00097D38 9103                       	dc.b	nE1, $03
00097D3A EC04                       	smpsPSGAlterVol     $04
00097D3C E701                       	dc.b	smpsNoAttack, $01
00097D3E ECFC                       	smpsPSGAlterVol     $FC
00097D40 9102                       	dc.b	nE1, $02
00097D42 EC04                       	smpsPSGAlterVol     $04
00097D44 E701                       	dc.b	smpsNoAttack, $01
00097D46 ECFC                       	smpsPSGAlterVol     $FC
00097D48 9103                       	dc.b	nE1, $03
00097D4A EC0B                       	smpsPSGAlterVol     $0B
00097D4C 800A                       	dc.b	nRst, $0A
00097D4E E100                       	smpsAlterNote       $00
00097D50 01                         	dc.b	$01
00097D51 E104                       	smpsAlterNote       $04
00097D53 01                         	dc.b	$01
00097D54 E100                       	smpsAlterNote       $00
00097D56 01                         	dc.b	$01
00097D57 E1FA                       	smpsAlterNote       $FA
00097D59 01                         	dc.b	$01
00097D5A E1F9                       	smpsAlterNote       $F9
00097D5C 01                         	dc.b	$01
00097D5D E1FD                       	smpsAlterNote       $FD
00097D5F 01                         	dc.b	$01
00097D60 E103                       	smpsAlterNote       $03
00097D62 0101                       	dc.b	$01, $01
00097D64 E100                       	smpsAlterNote       $00
00097D66 01                         	dc.b	$01
00097D67 E1FA                       	smpsAlterNote       $FA
00097D69 0101                       	dc.b	$01, $01
00097D6B E1FD                       	smpsAlterNote       $FD
00097D6D ECF5                       	smpsPSGAlterVol     $F5
00097D6F 9206                       	dc.b	nF1, $06
00097D71 EC04                       	smpsPSGAlterVol     $04
00097D73 E704                       	dc.b	smpsNoAttack, $04
00097D75 ECFC                       	smpsPSGAlterVol     $FC
00097D77 9206                       	dc.b	nF1, $06
00097D79 EC04                       	smpsPSGAlterVol     $04
00097D7B E701                       	dc.b	smpsNoAttack, $01
00097D7D EC07                       	smpsPSGAlterVol     $07
00097D7F 8006                       	dc.b	nRst, $06
00097D81 E100                       	smpsAlterNote       $00
00097D83 01                         	dc.b	$01
00097D84 E104                       	smpsAlterNote       $04
00097D86 01                         	dc.b	$01
00097D87 E103                       	smpsAlterNote       $03
00097D89 01                         	dc.b	$01
00097D8A E1FD                       	smpsAlterNote       $FD
00097D8C 01                         	dc.b	$01
00097D8D ECF5                       	smpsPSGAlterVol     $F5
00097D8F 9407                       	dc.b	nG1, $07
00097D91 EC0B                       	smpsPSGAlterVol     $0B
00097D93 8004                       	dc.b	nRst, $04
00097D95 ECF5                       	smpsPSGAlterVol     $F5
00097D97 9406                       	dc.b	nG1, $06
00097D99 EC0B                       	smpsPSGAlterVol     $0B
00097D9B 8007                       	dc.b	nRst, $07
00097D9D E103                       	smpsAlterNote       $03
00097D9F 0101                       	dc.b	$01, $01
00097DA1 E1FD                       	smpsAlterNote       $FD
00097DA3 01                         	dc.b	$01
00097DA4 E1F9                       	smpsAlterNote       $F9
00097DA6 01                         	dc.b	$01
00097DA7 E1FD                       	smpsAlterNote       $FD
00097DA9 ECF5                       	smpsPSGAlterVol     $F5
00097DAB 9206                       	dc.b	nF1, $06
00097DAD EC04                       	smpsPSGAlterVol     $04
00097DAF E701                       	dc.b	smpsNoAttack, $01
00097DB1 EC07                       	smpsPSGAlterVol     $07
00097DB3 8003                       	dc.b	nRst, $03
00097DB5 ECF5                       	smpsPSGAlterVol     $F5
00097DB7 9206                       	dc.b	nF1, $06
00097DB9 EC04                       	smpsPSGAlterVol     $04
00097DBB E701                       	dc.b	smpsNoAttack, $01
00097DBD EC07                       	smpsPSGAlterVol     $07
00097DBF 8006                       	dc.b	nRst, $06
00097DC1 E100                       	smpsAlterNote       $00
00097DC3 01                         	dc.b	$01
00097DC4 E104                       	smpsAlterNote       $04
00097DC6 01                         	dc.b	$01
00097DC7 E100                       	smpsAlterNote       $00
00097DC9 01                         	dc.b	$01
00097DCA E1FA                       	smpsAlterNote       $FA
00097DCC 01                         	dc.b	$01
00097DCD E1FD                       	smpsAlterNote       $FD
00097DCF ECF5                       	smpsPSGAlterVol     $F5
00097DD1 9206                       	dc.b	nF1, $06
00097DD3 EC04                       	smpsPSGAlterVol     $04
00097DD5 E701                       	dc.b	smpsNoAttack, $01
00097DD7 EC07                       	smpsPSGAlterVol     $07
00097DD9 8003                       	dc.b	nRst, $03
00097DDB ECF5                       	smpsPSGAlterVol     $F5
00097DDD 9107                       	dc.b	nE1, $07
00097DDF EC0B                       	smpsPSGAlterVol     $0B
00097DE1 8006                       	dc.b	nRst, $06
00097DE3 E100                       	smpsAlterNote       $00
00097DE5 01                         	dc.b	$01
00097DE6 E103                       	smpsAlterNote       $03
00097DE8 0101                       	dc.b	$01, $01
00097DEA E1FD                       	smpsAlterNote       $FD
00097DEC 01                         	dc.b	$01
00097DED ECF5                       	smpsPSGAlterVol     $F5
00097DEF 9207                       	dc.b	nF1, $07
00097DF1 EC0B                       	smpsPSGAlterVol     $0B
00097DF3 8004                       	dc.b	nRst, $04
00097DF5 ECF5                       	smpsPSGAlterVol     $F5
00097DF7 9206                       	dc.b	nF1, $06
00097DF9 EC04                       	smpsPSGAlterVol     $04
00097DFB E701                       	dc.b	smpsNoAttack, $01
00097DFD EC07                       	smpsPSGAlterVol     $07
00097DFF 8006                       	dc.b	nRst, $06
00097E01 E103                       	smpsAlterNote       $03
00097E03 01                         	dc.b	$01
00097E04 E104                       	smpsAlterNote       $04
00097E06 01                         	dc.b	$01
00097E07 E100                       	smpsAlterNote       $00
00097E09 01                         	dc.b	$01
00097E0A E1FB                       	smpsAlterNote       $FB
00097E0C 01                         	dc.b	$01
00097E0D E1FD                       	smpsAlterNote       $FD
00097E0F ECF5                       	smpsPSGAlterVol     $F5
00097E11 9406                       	dc.b	nG1, $06
00097E13 EC04                       	smpsPSGAlterVol     $04
00097E15 E701                       	dc.b	smpsNoAttack, $01
00097E17 EC07                       	smpsPSGAlterVol     $07
00097E19 8003                       	dc.b	nRst, $03
00097E1B ECF5                       	smpsPSGAlterVol     $F5
00097E1D 9406                       	dc.b	nG1, $06
00097E1F EC04                       	smpsPSGAlterVol     $04
00097E21 E701                       	dc.b	smpsNoAttack, $01
00097E23 EC07                       	smpsPSGAlterVol     $07
00097E25 8006                       	dc.b	nRst, $06
00097E27 E100                       	smpsAlterNote       $00
00097E29 01                         	dc.b	$01
00097E2A E104                       	smpsAlterNote       $04
00097E2C 01                         	dc.b	$01
00097E2D E100                       	smpsAlterNote       $00
00097E2F 01                         	dc.b	$01
00097E30 E1FD                       	smpsAlterNote       $FD
00097E32 01                         	dc.b	$01
00097E33 ECF5                       	smpsPSGAlterVol     $F5
00097E35 9206                       	dc.b	nF1, $06
00097E37 EC04                       	smpsPSGAlterVol     $04
00097E39 E701                       	dc.b	smpsNoAttack, $01
00097E3B EC07                       	smpsPSGAlterVol     $07
00097E3D 8003                       	dc.b	nRst, $03
00097E3F ECF5                       	smpsPSGAlterVol     $F5
00097E41 9207                       	dc.b	nF1, $07
00097E43 EC0B                       	smpsPSGAlterVol     $0B
00097E45 8007                       	dc.b	nRst, $07
00097E47 E103                       	smpsAlterNote       $03
00097E49 0101                       	dc.b	$01, $01
00097E4B E1FD                       	smpsAlterNote       $FD
00097E4D 01                         	dc.b	$01
00097E4E E1FA                       	smpsAlterNote       $FA
00097E50 01                         	dc.b	$01
00097E51 E1FD                       	smpsAlterNote       $FD
00097E53 ECF5                       	smpsPSGAlterVol     $F5
00097E55 9206                       	dc.b	nF1, $06
00097E57 EC0B                       	smpsPSGAlterVol     $0B
00097E59 8004                       	dc.b	nRst, $04
00097E5B ECF5                       	smpsPSGAlterVol     $F5
00097E5D 9206                       	dc.b	nF1, $06
00097E5F EC04                       	smpsPSGAlterVol     $04
00097E61 E701                       	dc.b	smpsNoAttack, $01
00097E63 EC07                       	smpsPSGAlterVol     $07
00097E65 8006                       	dc.b	nRst, $06
00097E67 E100                       	smpsAlterNote       $00
00097E69 01                         	dc.b	$01
00097E6A E104                       	smpsAlterNote       $04
00097E6C 01                         	dc.b	$01
00097E6D E100                       	smpsAlterNote       $00
00097E6F 01                         	dc.b	$01
00097E70 E1FA                       	smpsAlterNote       $FA
00097E72 01                         	dc.b	$01
00097E73 E1FD                       	smpsAlterNote       $FD
00097E75 ECF5                       	smpsPSGAlterVol     $F5
00097E77 9206                       	dc.b	nF1, $06
00097E79 EC04                       	smpsPSGAlterVol     $04
00097E7B E701                       	dc.b	smpsNoAttack, $01
00097E7D EC07                       	smpsPSGAlterVol     $07
00097E7F 8003                       	dc.b	nRst, $03
00097E81 ECF5                       	smpsPSGAlterVol     $F5
00097E83 9207                       	dc.b	nF1, $07
00097E85 EC0B                       	smpsPSGAlterVol     $0B
00097E87 8006                       	dc.b	nRst, $06
00097E89 E100                       	smpsAlterNote       $00
00097E8B 01                         	dc.b	$01
00097E8C E103                       	smpsAlterNote       $03
00097E8E 0101                       	dc.b	$01, $01
00097E90 E1FD                       	smpsAlterNote       $FD
00097E92 01                         	dc.b	$01
00097E93 ECF5                       	smpsPSGAlterVol     $F5
00097E95 9207                       	dc.b	nF1, $07
00097E97 EC0B                       	smpsPSGAlterVol     $0B
00097E99 8004                       	dc.b	nRst, $04
00097E9B ECF5                       	smpsPSGAlterVol     $F5
00097E9D 9206                       	dc.b	nF1, $06
00097E9F EC0B                       	smpsPSGAlterVol     $0B
00097EA1 8007                       	dc.b	nRst, $07
00097EA3 E103                       	smpsAlterNote       $03
00097EA5 0101                       	dc.b	$01, $01
00097EA7 E100                       	smpsAlterNote       $00
00097EA9 01                         	dc.b	$01
00097EAA E1FA                       	smpsAlterNote       $FA
00097EAC 01                         	dc.b	$01
00097EAD E1FD                       	smpsAlterNote       $FD
00097EAF ECF5                       	smpsPSGAlterVol     $F5
00097EB1 9206                       	dc.b	nF1, $06
00097EB3 EC04                       	smpsPSGAlterVol     $04
00097EB5 E701                       	dc.b	smpsNoAttack, $01
00097EB7 EC07                       	smpsPSGAlterVol     $07
00097EB9 8003                       	dc.b	nRst, $03
00097EBB ECF5                       	smpsPSGAlterVol     $F5
00097EBD 9206                       	dc.b	nF1, $06
00097EBF EC04                       	smpsPSGAlterVol     $04
00097EC1 E701                       	dc.b	smpsNoAttack, $01
00097EC3 EC07                       	smpsPSGAlterVol     $07
00097EC5 8006                       	dc.b	nRst, $06
00097EC7 E100                       	smpsAlterNote       $00
00097EC9 01                         	dc.b	$01
00097ECA E104                       	smpsAlterNote       $04
00097ECC 01                         	dc.b	$01
00097ECD E100                       	smpsAlterNote       $00
00097ECF 01                         	dc.b	$01
00097ED0 E1FD                       	smpsAlterNote       $FD
00097ED2 01                         	dc.b	$01
00097ED3 ECF5                       	smpsPSGAlterVol     $F5
00097ED5 9206                       	dc.b	nF1, $06
00097ED7 EC04                       	smpsPSGAlterVol     $04
00097ED9 E701                       	dc.b	smpsNoAttack, $01
00097EDB EC07                       	smpsPSGAlterVol     $07
00097EDD 8003                       	dc.b	nRst, $03
00097EDF ECF5                       	smpsPSGAlterVol     $F5
00097EE1 9207                       	dc.b	nF1, $07
00097EE3 EC0B                       	smpsPSGAlterVol     $0B
00097EE5 8007                       	dc.b	nRst, $07
00097EE7 E104                       	smpsAlterNote       $04
00097EE9 0101                       	dc.b	$01, $01
00097EEB E1FB                       	smpsAlterNote       $FB
00097EED 01                         	dc.b	$01
00097EEE E1F6                       	smpsAlterNote       $F6
00097EF0 0101                       	dc.b	$01, $01
00097EF2 E1FF                       	smpsAlterNote       $FF
00097EF4 01                         	dc.b	$01
00097EF5 E105                       	smpsAlterNote       $05
00097EF7 01                         	dc.b	$01
00097EF8 E104                       	smpsAlterNote       $04
00097EFA 01                         	dc.b	$01
00097EFB E1FB                       	smpsAlterNote       $FB
00097EFD 01                         	dc.b	$01
00097EFE E1F5                       	smpsAlterNote       $F5
00097F00 01                         	dc.b	$01
00097F01 E1FC                       	smpsAlterNote       $FC
00097F03 ECF5                       	smpsPSGAlterVol     $F5
00097F05 8B0E                       	dc.b	nBb0, $0E
00097F07 E102                       	smpsAlterNote       $02
00097F09 EC0B                       	smpsPSGAlterVol     $0B
00097F0B 8001                       	dc.b	nRst, $01
00097F0D E101                       	smpsAlterNote       $01
00097F0F 01                         	dc.b	$01
00097F10 E1FC                       	smpsAlterNote       $FC
00097F12 01                         	dc.b	$01
00097F13 E1F9                       	smpsAlterNote       $F9
00097F15 0101                       	dc.b	$01, $01
00097F17 E1FF                       	smpsAlterNote       $FF
00097F19 01                         	dc.b	$01
00097F1A E102                       	smpsAlterNote       $02
00097F1C 01                         	dc.b	$01
00097F1D E1FF                       	smpsAlterNote       $FF
00097F1F 01                         	dc.b	$01
00097F20 E1FC                       	smpsAlterNote       $FC
00097F22 01                         	dc.b	$01
00097F23 E1F8                       	smpsAlterNote       $F8
00097F25 01                         	dc.b	$01
00097F26 E1FC                       	smpsAlterNote       $FC
00097F28 01                         	dc.b	$01
00097F29 E101                       	smpsAlterNote       $01
00097F2B 01                         	dc.b	$01
00097F2C E102                       	smpsAlterNote       $02
00097F2E 01                         	dc.b	$01
00097F2F E1FF                       	smpsAlterNote       $FF
00097F31 01                         	dc.b	$01
00097F32 E1FB                       	smpsAlterNote       $FB
00097F34 ECF5                       	smpsPSGAlterVol     $F5
00097F36 8D0D                       	dc.b	nC1, $0D
00097F38 E101                       	smpsAlterNote       $01
00097F3A EC0B                       	smpsPSGAlterVol     $0B
00097F3C 8001                       	dc.b	nRst, $01
00097F3E E102                       	smpsAlterNote       $02
00097F40 01                         	dc.b	$01
00097F41 E1FF                       	smpsAlterNote       $FF
00097F43 01                         	dc.b	$01
00097F44 E1F9                       	smpsAlterNote       $F9
00097F46 0101                       	dc.b	$01, $01
00097F48 E1FC                       	smpsAlterNote       $FC
00097F4A 01                         	dc.b	$01
00097F4B E101                       	smpsAlterNote       $01
00097F4D 0101                       	dc.b	$01, $01
00097F4F E1FC                       	smpsAlterNote       $FC
00097F51 01                         	dc.b	$01
00097F52 E1F9                       	smpsAlterNote       $F9
00097F54 0101                       	dc.b	$01, $01
00097F56 E1FF                       	smpsAlterNote       $FF
00097F58 01                         	dc.b	$01
00097F59 E102                       	smpsAlterNote       $02
00097F5B 01                         	dc.b	$01
00097F5C E101                       	smpsAlterNote       $01
00097F5E 01                         	dc.b	$01
00097F5F E1FC                       	smpsAlterNote       $FC
00097F61 ECF5                       	smpsPSGAlterVol     $F5
00097F63 8F0D                       	dc.b	nD1, $0D
00097F65 E1FF                       	smpsAlterNote       $FF
00097F67 EC04                       	smpsPSGAlterVol     $04
00097F69 E701                       	dc.b	smpsNoAttack, $01
00097F6B EC07                       	smpsPSGAlterVol     $07
00097F6D E103                       	smpsAlterNote       $03
00097F6F 8001                       	dc.b	nRst, $01
00097F71 E102                       	smpsAlterNote       $02
00097F73 01                         	dc.b	$01
00097F74 E1FD                       	smpsAlterNote       $FD
00097F76 01                         	dc.b	$01
00097F77 E1F9                       	smpsAlterNote       $F9
00097F79 01                         	dc.b	$01
00097F7A E1FD                       	smpsAlterNote       $FD
00097F7C 01                         	dc.b	$01
00097F7D E100                       	smpsAlterNote       $00
00097F7F 01                         	dc.b	$01
00097F80 E103                       	smpsAlterNote       $03
00097F82 01                         	dc.b	$01
00097F83 E100                       	smpsAlterNote       $00
00097F85 01                         	dc.b	$01
00097F86 E1FA                       	smpsAlterNote       $FA
00097F88 01                         	dc.b	$01
00097F89 E1F9                       	smpsAlterNote       $F9
00097F8B 01                         	dc.b	$01
00097F8C E1FD                       	smpsAlterNote       $FD
00097F8E 01                         	dc.b	$01
00097F8F E102                       	smpsAlterNote       $02
00097F91 0101                       	dc.b	$01, $01
00097F93 E100                       	smpsAlterNote       $00
00097F95 01                         	dc.b	$01
00097F96 E1FD                       	smpsAlterNote       $FD
00097F98 ECF5                       	smpsPSGAlterVol     $F5
00097F9A 910D                       	dc.b	nE1, $0D
00097F9C E103                       	smpsAlterNote       $03
00097F9E EC0B                       	smpsPSGAlterVol     $0B
00097FA0 8001 01                    	dc.b	nRst, $01, $01
00097FA3 E100                       	smpsAlterNote       $00
00097FA5 01                         	dc.b	$01
00097FA6 E1FA                       	smpsAlterNote       $FA
00097FA8 0101                       	dc.b	$01, $01
00097FAA E100                       	smpsAlterNote       $00
00097FAC 01                         	dc.b	$01
00097FAD E103                       	smpsAlterNote       $03
00097FAF 01                         	dc.b	$01
00097FB0 E1FD                       	smpsAlterNote       $FD
00097FB2 ECF5                       	smpsPSGAlterVol     $F5
00097FB4 9206                       	dc.b	nF1, $06
00097FB6 EC04                       	smpsPSGAlterVol     $04
00097FB8 E701                       	dc.b	smpsNoAttack, $01
00097FBA EC07                       	smpsPSGAlterVol     $07
00097FBC 8003                       	dc.b	nRst, $03
00097FBE ECF5                       	smpsPSGAlterVol     $F5
00097FC0 9207                       	dc.b	nF1, $07
00097FC2 EC0B                       	smpsPSGAlterVol     $0B
00097FC4 8006                       	dc.b	nRst, $06
00097FC6 E100                       	smpsAlterNote       $00
00097FC8 01                         	dc.b	$01
00097FC9 E103                       	smpsAlterNote       $03
00097FCB 0101                       	dc.b	$01, $01
00097FCD E1FD                       	smpsAlterNote       $FD
00097FCF 01                         	dc.b	$01
00097FD0 ECF5                       	smpsPSGAlterVol     $F5
00097FD2 9407                       	dc.b	nG1, $07
00097FD4 EC0B                       	smpsPSGAlterVol     $0B
00097FD6 8004                       	dc.b	nRst, $04
00097FD8 ECF5                       	smpsPSGAlterVol     $F5
00097FDA 9406                       	dc.b	nG1, $06
00097FDC EC04                       	smpsPSGAlterVol     $04
00097FDE E701                       	dc.b	smpsNoAttack, $01
00097FE0 EC07                       	smpsPSGAlterVol     $07
00097FE2 8006                       	dc.b	nRst, $06
00097FE4 E103                       	smpsAlterNote       $03
00097FE6 01                         	dc.b	$01
00097FE7 E104                       	smpsAlterNote       $04
00097FE9 01                         	dc.b	$01
00097FEA E100                       	smpsAlterNote       $00
00097FEC 01                         	dc.b	$01
00097FED E1F9                       	smpsAlterNote       $F9
00097FEF 01                         	dc.b	$01
00097FF0 E1FD                       	smpsAlterNote       $FD
00097FF2 ECF5                       	smpsPSGAlterVol     $F5
00097FF4 9206                       	dc.b	nF1, $06
00097FF6 EC04                       	smpsPSGAlterVol     $04
00097FF8 E701                       	dc.b	smpsNoAttack, $01
00097FFA EC07                       	smpsPSGAlterVol     $07
00097FFC 8003                       	dc.b	nRst, $03
00097FFE ECF5                       	smpsPSGAlterVol     $F5
00098000 9206                       	dc.b	nF1, $06
00098002 EC04                       	smpsPSGAlterVol     $04
00098004 E701                       	dc.b	smpsNoAttack, $01
00098006 EC07                       	smpsPSGAlterVol     $07
00098008 8006                       	dc.b	nRst, $06
0009800A E100                       	smpsAlterNote       $00
0009800C 01                         	dc.b	$01
0009800D E104                       	smpsAlterNote       $04
0009800F 01                         	dc.b	$01
00098010 E103                       	smpsAlterNote       $03
00098012 01                         	dc.b	$01
00098013 E1FD                       	smpsAlterNote       $FD
00098015 01                         	dc.b	$01
00098016 ECF5                       	smpsPSGAlterVol     $F5
00098018 9407                       	dc.b	nG1, $07
0009801A EC0B                       	smpsPSGAlterVol     $0B
0009801C 8004                       	dc.b	nRst, $04
0009801E ECF5                       	smpsPSGAlterVol     $F5
00098020 9406                       	dc.b	nG1, $06
00098022 EC0B                       	smpsPSGAlterVol     $0B
00098024 8007                       	dc.b	nRst, $07
00098026 E103                       	smpsAlterNote       $03
00098028 0101                       	dc.b	$01, $01
0009802A E100                       	smpsAlterNote       $00
0009802C 01                         	dc.b	$01
0009802D E1F9                       	smpsAlterNote       $F9
0009802F 01                         	dc.b	$01
00098030 E1FD                       	smpsAlterNote       $FD
00098032 ECF5                       	smpsPSGAlterVol     $F5
00098034 9206                       	dc.b	nF1, $06
00098036 EC04                       	smpsPSGAlterVol     $04
00098038 E701                       	dc.b	smpsNoAttack, $01
0009803A EC07                       	smpsPSGAlterVol     $07
0009803C 8003                       	dc.b	nRst, $03
0009803E ECF5                       	smpsPSGAlterVol     $F5
00098040 9206                       	dc.b	nF1, $06
00098042 EC04                       	smpsPSGAlterVol     $04
00098044 E701                       	dc.b	smpsNoAttack, $01
00098046 EC07                       	smpsPSGAlterVol     $07
00098048 8006                       	dc.b	nRst, $06
0009804A E100                       	smpsAlterNote       $00
0009804C 01                         	dc.b	$01
0009804D E104                       	smpsAlterNote       $04
0009804F 01                         	dc.b	$01
00098050 E100                       	smpsAlterNote       $00
00098052 01                         	dc.b	$01
00098053 E1FB                       	smpsAlterNote       $FB
00098055 01                         	dc.b	$01
00098056 E1FD                       	smpsAlterNote       $FD
00098058 ECF5                       	smpsPSGAlterVol     $F5
0009805A 9406                       	dc.b	nG1, $06
0009805C EC04                       	smpsPSGAlterVol     $04
0009805E E701                       	dc.b	smpsNoAttack, $01
00098060 EC07                       	smpsPSGAlterVol     $07
00098062 8003                       	dc.b	nRst, $03
00098064 ECF5                       	smpsPSGAlterVol     $F5
00098066 9407                       	dc.b	nG1, $07
00098068 EC0B                       	smpsPSGAlterVol     $0B
0009806A 8006                       	dc.b	nRst, $06
0009806C E100                       	smpsAlterNote       $00
0009806E 01                         	dc.b	$01
0009806F E103                       	smpsAlterNote       $03
00098071 0101                       	dc.b	$01, $01
00098073 E1FD                       	smpsAlterNote       $FD
00098075 01                         	dc.b	$01
00098076 ECF5                       	smpsPSGAlterVol     $F5
00098078 9207                       	dc.b	nF1, $07
0009807A EC0B                       	smpsPSGAlterVol     $0B
0009807C 8004                       	dc.b	nRst, $04
0009807E ECF5                       	smpsPSGAlterVol     $F5
00098080 9206                       	dc.b	nF1, $06
00098082 EC04                       	smpsPSGAlterVol     $04
00098084 E701                       	dc.b	smpsNoAttack, $01
00098086 ECFC                       	smpsPSGAlterVol     $FC
00098088 E1FC                       	smpsAlterNote       $FC
0009808A 9006 8B03                  	dc.b	nEb1, $06, nBb0, $03
0009808E EC04                       	smpsPSGAlterVol     $04
00098090 E701                       	dc.b	smpsNoAttack, $01
00098092 ECFC                       	smpsPSGAlterVol     $FC
00098094 9003                       	dc.b	nEb1, $03
00098096 E1FD                       	smpsAlterNote       $FD
00098098 9403                       	dc.b	nG1, $03
0009809A EC04                       	smpsPSGAlterVol     $04
0009809C E701                       	dc.b	smpsNoAttack, $01
0009809E E1FE                       	smpsAlterNote       $FE
000980A0 ECFC                       	smpsPSGAlterVol     $FC
000980A2 9703 9703                  	dc.b	nBb1, $03, nBb1, $03
000980A6 EC04                       	smpsPSGAlterVol     $04
000980A8 E701                       	dc.b	smpsNoAttack, $01
000980AA EC07                       	smpsPSGAlterVol     $07
000980AC 8009                       	dc.b	nRst, $09
000980AE E100                       	smpsAlterNote       $00
000980B0 01                         	dc.b	$01
000980B1 F6F5 19                    	smpsJump            music84_Jump07
000980B4                            
000980B4                            ; PSG2 Data
000980B4                            music84_PSG2:
000980B4 E1FC                       	smpsAlterNote       $FC
000980B6 EC04                       	smpsPSGAlterVol     $04
000980B8 8F03                       	dc.b	nD1, $03
000980BA E1FD                       	smpsAlterNote       $FD
000980BC 9203                       	dc.b	nF1, $03
000980BE EC04                       	smpsPSGAlterVol     $04
000980C0 E701                       	dc.b	smpsNoAttack, $01
000980C2 E1FE                       	smpsAlterNote       $FE
000980C4 ECFC                       	smpsPSGAlterVol     $FC
000980C6 9603                       	dc.b	nA1, $03
000980C8 E1FD                       	smpsAlterNote       $FD
000980CA 9103                       	dc.b	nE1, $03
000980CC EC04                       	smpsPSGAlterVol     $04
000980CE E701                       	dc.b	smpsNoAttack, $01
000980D0 ECFC                       	smpsPSGAlterVol     $FC
000980D2 9403                       	dc.b	nG1, $03
000980D4 E1FE                       	smpsAlterNote       $FE
000980D6 9703                       	dc.b	nBb1, $03
000980D8 EC04                       	smpsPSGAlterVol     $04
000980DA E701                       	dc.b	smpsNoAttack, $01
000980DC E1FF                       	smpsAlterNote       $FF
000980DE ECFC                       	smpsPSGAlterVol     $FC
000980E0 9B02                       	dc.b	nD2, $02
000980E2 EC04                       	smpsPSGAlterVol     $04
000980E4 E701                       	dc.b	smpsNoAttack, $01
000980E6 ECFC                       	smpsPSGAlterVol     $FC
000980E8 E1FE                       	smpsAlterNote       $FE
000980EA 9A03                       	dc.b	nCs2, $03
000980EC EC0B                       	smpsPSGAlterVol     $0B
000980EE 800A                       	dc.b	nRst, $0A
000980F0 E102                       	smpsAlterNote       $02
000980F2 01                         	dc.b	$01
000980F3 E10A                       	smpsAlterNote       $0A
000980F5 01                         	dc.b	$01
000980F6 E102                       	smpsAlterNote       $02
000980F8 01                         	dc.b	$01
000980F9 E1FC                       	smpsAlterNote       $FC
000980FB 01                         	dc.b	$01
000980FC E10A                       	smpsAlterNote       $0A
000980FE 01                         	dc.b	$01
000980FF E1FC                       	smpsAlterNote       $FC
00098101 01                         	dc.b	$01
00098102 E108                       	smpsAlterNote       $08
00098104 01                         	dc.b	$01
00098105 E10A                       	smpsAlterNote       $0A
00098107 01                         	dc.b	$01
00098108 E102                       	smpsAlterNote       $02
0009810A 01                         	dc.b	$01
0009810B E1F7                       	smpsAlterNote       $F7
0009810D 0101                       	dc.b	$01, $01
0009810F E102                       	smpsAlterNote       $02
00098111 01                         	dc.b	$01
00098112 E108                       	smpsAlterNote       $08
00098114 0101                       	dc.b	$01, $01
00098116 E1FC                       	smpsAlterNote       $FC
00098118 01                         	dc.b	$01
00098119 E10A                       	smpsAlterNote       $0A
0009811B 01                         	dc.b	$01
0009811C E1F7                       	smpsAlterNote       $F7
0009811E 01                         	dc.b	$01
0009811F E102                       	smpsAlterNote       $02
00098121 01                         	dc.b	$01
00098122 E10A                       	smpsAlterNote       $0A
00098124 01                         	dc.b	$01
00098125 E102                       	smpsAlterNote       $02
00098127 01                         	dc.b	$01
00098128 E1FC                       	smpsAlterNote       $FC
0009812A 01                         	dc.b	$01
0009812B                            
0009812B                            music84_Jump06:
0009812B E10A                       	smpsAlterNote       $0A
0009812D 8001                       	dc.b	nRst, $01
0009812F E1FC                       	smpsAlterNote       $FC
00098131 01                         	dc.b	$01
00098132 E108                       	smpsAlterNote       $08
00098134 01                         	dc.b	$01
00098135 E10A                       	smpsAlterNote       $0A
00098137 01                         	dc.b	$01
00098138 E1FC                       	smpsAlterNote       $FC
0009813A ECF5                       	smpsPSGAlterVol     $F5
0009813C 8F06                       	dc.b	nD1, $06
0009813E EC04                       	smpsPSGAlterVol     $04
00098140 E701                       	dc.b	smpsNoAttack, $01
00098142 EC07                       	smpsPSGAlterVol     $07
00098144 8003                       	dc.b	nRst, $03
00098146 ECF5                       	smpsPSGAlterVol     $F5
00098148 8F06                       	dc.b	nD1, $06
0009814A EC04                       	smpsPSGAlterVol     $04
0009814C E701                       	dc.b	smpsNoAttack, $01
0009814E EC07                       	smpsPSGAlterVol     $07
00098150 8006                       	dc.b	nRst, $06
00098152 E1FF                       	smpsAlterNote       $FF
00098154 01                         	dc.b	$01
00098155 E102                       	smpsAlterNote       $02
00098157 01                         	dc.b	$01
00098158 E1FF                       	smpsAlterNote       $FF
0009815A 01                         	dc.b	$01
0009815B E1F9                       	smpsAlterNote       $F9
0009815D 01                         	dc.b	$01
0009815E E1FC                       	smpsAlterNote       $FC
00098160 ECF5                       	smpsPSGAlterVol     $F5
00098162 9006                       	dc.b	nEb1, $06
00098164 EC04                       	smpsPSGAlterVol     $04
00098166 E701                       	dc.b	smpsNoAttack, $01
00098168 EC07                       	smpsPSGAlterVol     $07
0009816A 8003                       	dc.b	nRst, $03
0009816C ECF5                       	smpsPSGAlterVol     $F5
0009816E 9007                       	dc.b	nEb1, $07
00098170 EC0B                       	smpsPSGAlterVol     $0B
00098172 8006                       	dc.b	nRst, $06
00098174 E1FF                       	smpsAlterNote       $FF
00098176 01                         	dc.b	$01
00098177 E103                       	smpsAlterNote       $03
00098179 0101                       	dc.b	$01, $01
0009817B E1FC                       	smpsAlterNote       $FC
0009817D 01                         	dc.b	$01
0009817E ECF5                       	smpsPSGAlterVol     $F5
00098180 8F07                       	dc.b	nD1, $07
00098182 EC0B                       	smpsPSGAlterVol     $0B
00098184 8004                       	dc.b	nRst, $04
00098186 ECF5                       	smpsPSGAlterVol     $F5
00098188 8F06                       	dc.b	nD1, $06
0009818A EC04                       	smpsPSGAlterVol     $04
0009818C E701                       	dc.b	smpsNoAttack, $01
0009818E EC07                       	smpsPSGAlterVol     $07
00098190 8006                       	dc.b	nRst, $06
00098192 E102                       	smpsAlterNote       $02
00098194 01                         	dc.b	$01
00098195 E103                       	smpsAlterNote       $03
00098197 01                         	dc.b	$01
00098198 E1FF                       	smpsAlterNote       $FF
0009819A 01                         	dc.b	$01
0009819B E1F9                       	smpsAlterNote       $F9
0009819D 01                         	dc.b	$01
0009819E E1FC                       	smpsAlterNote       $FC
000981A0 ECF5                       	smpsPSGAlterVol     $F5
000981A2 8F06                       	dc.b	nD1, $06
000981A4 EC04                       	smpsPSGAlterVol     $04
000981A6 E701                       	dc.b	smpsNoAttack, $01
000981A8 EC07                       	smpsPSGAlterVol     $07
000981AA 8003                       	dc.b	nRst, $03
000981AC ECF5                       	smpsPSGAlterVol     $F5
000981AE 8F06                       	dc.b	nD1, $06
000981B0 EC04                       	smpsPSGAlterVol     $04
000981B2 E701                       	dc.b	smpsNoAttack, $01
000981B4 EC07                       	smpsPSGAlterVol     $07
000981B6 8006                       	dc.b	nRst, $06
000981B8 E1FF                       	smpsAlterNote       $FF
000981BA 01                         	dc.b	$01
000981BB E103                       	smpsAlterNote       $03
000981BD 01                         	dc.b	$01
000981BE E1FF                       	smpsAlterNote       $FF
000981C0 01                         	dc.b	$01
000981C1 E1FC                       	smpsAlterNote       $FC
000981C3 01                         	dc.b	$01
000981C4 ECF5                       	smpsPSGAlterVol     $F5
000981C6 8F06                       	dc.b	nD1, $06
000981C8 EC04                       	smpsPSGAlterVol     $04
000981CA E701                       	dc.b	smpsNoAttack, $01
000981CC EC07                       	smpsPSGAlterVol     $07
000981CE 8003                       	dc.b	nRst, $03
000981D0 ECF5                       	smpsPSGAlterVol     $F5
000981D2 8F07                       	dc.b	nD1, $07
000981D4 EC0B                       	smpsPSGAlterVol     $0B
000981D6 8007                       	dc.b	nRst, $07
000981D8 E101                       	smpsAlterNote       $01
000981DA 0101                       	dc.b	$01, $01
000981DC E1FC                       	smpsAlterNote       $FC
000981DE 01                         	dc.b	$01
000981DF E1F9                       	smpsAlterNote       $F9
000981E1 01                         	dc.b	$01
000981E2 E1FC                       	smpsAlterNote       $FC
000981E4 ECF5                       	smpsPSGAlterVol     $F5
000981E6 9006                       	dc.b	nEb1, $06
000981E8 EC0B                       	smpsPSGAlterVol     $0B
000981EA 8004                       	dc.b	nRst, $04
000981EC ECF5                       	smpsPSGAlterVol     $F5
000981EE 9006                       	dc.b	nEb1, $06
000981F0 EC04                       	smpsPSGAlterVol     $04
000981F2 E701                       	dc.b	smpsNoAttack, $01
000981F4 EC07                       	smpsPSGAlterVol     $07
000981F6 8006                       	dc.b	nRst, $06
000981F8 E100                       	smpsAlterNote       $00
000981FA 01                         	dc.b	$01
000981FB E102                       	smpsAlterNote       $02
000981FD 01                         	dc.b	$01
000981FE E100                       	smpsAlterNote       $00
00098200 01                         	dc.b	$01
00098201 E1FD                       	smpsAlterNote       $FD
00098203 01                         	dc.b	$01
00098204 E1FF                       	smpsAlterNote       $FF
00098206 ECF5                       	smpsPSGAlterVol     $F5
00098208 9B06                       	dc.b	nD2, $06
0009820A EC04                       	smpsPSGAlterVol     $04
0009820C E701                       	dc.b	smpsNoAttack, $01
0009820E EC07                       	smpsPSGAlterVol     $07
00098210 8003                       	dc.b	nRst, $03
00098212 ECF5                       	smpsPSGAlterVol     $F5
00098214 9B07                       	dc.b	nD2, $07
00098216 EC0B                       	smpsPSGAlterVol     $0B
00098218 8006                       	dc.b	nRst, $06
0009821A E102                       	smpsAlterNote       $02
0009821C 01                         	dc.b	$01
0009821D E106                       	smpsAlterNote       $06
0009821F 01                         	dc.b	$01
00098220 E105                       	smpsAlterNote       $05
00098222 01                         	dc.b	$01
00098223 E1FF                       	smpsAlterNote       $FF
00098225 01                         	dc.b	$01
00098226 ECF5                       	smpsPSGAlterVol     $F5
00098228 9B07                       	dc.b	nD2, $07
0009822A EC0B                       	smpsPSGAlterVol     $0B
0009822C 8004                       	dc.b	nRst, $04
0009822E ECF5                       	smpsPSGAlterVol     $F5
00098230 9B06                       	dc.b	nD2, $06
00098232 EC0B                       	smpsPSGAlterVol     $0B
00098234 8007                       	dc.b	nRst, $07
00098236 E105                       	smpsAlterNote       $05
00098238 0101                       	dc.b	$01, $01
0009823A E102                       	smpsAlterNote       $02
0009823C 01                         	dc.b	$01
0009823D E1FC                       	smpsAlterNote       $FC
0009823F 01                         	dc.b	$01
00098240 E1FF                       	smpsAlterNote       $FF
00098242 ECF5                       	smpsPSGAlterVol     $F5
00098244 9B06                       	dc.b	nD2, $06
00098246 EC04                       	smpsPSGAlterVol     $04
00098248 E701                       	dc.b	smpsNoAttack, $01
0009824A EC07                       	smpsPSGAlterVol     $07
0009824C 8003                       	dc.b	nRst, $03
0009824E ECF5                       	smpsPSGAlterVol     $F5
00098250 9B06                       	dc.b	nD2, $06
00098252 EC04                       	smpsPSGAlterVol     $04
00098254 E701                       	dc.b	smpsNoAttack, $01
00098256 EC07                       	smpsPSGAlterVol     $07
00098258 8006                       	dc.b	nRst, $06
0009825A E102                       	smpsAlterNote       $02
0009825C 01                         	dc.b	$01
0009825D E106                       	smpsAlterNote       $06
0009825F 01                         	dc.b	$01
00098260 E102                       	smpsAlterNote       $02
00098262 01                         	dc.b	$01
00098263 E1FF                       	smpsAlterNote       $FF
00098265 01                         	dc.b	$01
00098266 ECF5                       	smpsPSGAlterVol     $F5
00098268 9B06                       	dc.b	nD2, $06
0009826A EC04                       	smpsPSGAlterVol     $04
0009826C E701                       	dc.b	smpsNoAttack, $01
0009826E EC07                       	smpsPSGAlterVol     $07
00098270 8003                       	dc.b	nRst, $03
00098272 ECF5                       	smpsPSGAlterVol     $F5
00098274 9B07                       	dc.b	nD2, $07
00098276 EC0B                       	smpsPSGAlterVol     $0B
00098278 8007                       	dc.b	nRst, $07
0009827A E105                       	smpsAlterNote       $05
0009827C 0101                       	dc.b	$01, $01
0009827E E1FF                       	smpsAlterNote       $FF
00098280 01                         	dc.b	$01
00098281 E1FC                       	smpsAlterNote       $FC
00098283 01                         	dc.b	$01
00098284 E1FF                       	smpsAlterNote       $FF
00098286 ECF5                       	smpsPSGAlterVol     $F5
00098288 9B06                       	dc.b	nD2, $06
0009828A EC0B                       	smpsPSGAlterVol     $0B
0009828C 8004                       	dc.b	nRst, $04
0009828E ECF5                       	smpsPSGAlterVol     $F5
00098290 9B06                       	dc.b	nD2, $06
00098292 EC04                       	smpsPSGAlterVol     $04
00098294 E701                       	dc.b	smpsNoAttack, $01
00098296 EC07                       	smpsPSGAlterVol     $07
00098298 8006                       	dc.b	nRst, $06
0009829A E105                       	smpsAlterNote       $05
0009829C 01                         	dc.b	$01
0009829D E106                       	smpsAlterNote       $06
0009829F 01                         	dc.b	$01
000982A0 E102                       	smpsAlterNote       $02
000982A2 01                         	dc.b	$01
000982A3 E1FC                       	smpsAlterNote       $FC
000982A5 01                         	dc.b	$01
000982A6 E1FF                       	smpsAlterNote       $FF
000982A8 ECF5                       	smpsPSGAlterVol     $F5
000982AA 9B06                       	dc.b	nD2, $06
000982AC EC04                       	smpsPSGAlterVol     $04
000982AE E701                       	dc.b	smpsNoAttack, $01
000982B0 EC07                       	smpsPSGAlterVol     $07
000982B2 8003                       	dc.b	nRst, $03
000982B4 ECF5                       	smpsPSGAlterVol     $F5
000982B6 9B06                       	dc.b	nD2, $06
000982B8 EC04                       	smpsPSGAlterVol     $04
000982BA E701                       	dc.b	smpsNoAttack, $01
000982BC EC07                       	smpsPSGAlterVol     $07
000982BE 8006                       	dc.b	nRst, $06
000982C0 E102                       	smpsAlterNote       $02
000982C2 01                         	dc.b	$01
000982C3 E106                       	smpsAlterNote       $06
000982C5 01                         	dc.b	$01
000982C6 E105                       	smpsAlterNote       $05
000982C8 01                         	dc.b	$01
000982C9 E1FF                       	smpsAlterNote       $FF
000982CB 01                         	dc.b	$01
000982CC ECF5                       	smpsPSGAlterVol     $F5
000982CE 9B07                       	dc.b	nD2, $07
000982D0 EC0B                       	smpsPSGAlterVol     $0B
000982D2 8004                       	dc.b	nRst, $04
000982D4 ECF5                       	smpsPSGAlterVol     $F5
000982D6 9B06                       	dc.b	nD2, $06
000982D8 EC0B                       	smpsPSGAlterVol     $0B
000982DA 8007                       	dc.b	nRst, $07
000982DC E105                       	smpsAlterNote       $05
000982DE 0101                       	dc.b	$01, $01
000982E0 E102                       	smpsAlterNote       $02
000982E2 01                         	dc.b	$01
000982E3 E1FC                       	smpsAlterNote       $FC
000982E5 01                         	dc.b	$01
000982E6 E1FF                       	smpsAlterNote       $FF
000982E8 ECF5                       	smpsPSGAlterVol     $F5
000982EA 9B06                       	dc.b	nD2, $06
000982EC EC04                       	smpsPSGAlterVol     $04
000982EE E701                       	dc.b	smpsNoAttack, $01
000982F0 EC07                       	smpsPSGAlterVol     $07
000982F2 8003                       	dc.b	nRst, $03
000982F4 ECF5                       	smpsPSGAlterVol     $F5
000982F6 9B06                       	dc.b	nD2, $06
000982F8 EC04                       	smpsPSGAlterVol     $04
000982FA E701                       	dc.b	smpsNoAttack, $01
000982FC EC07                       	smpsPSGAlterVol     $07
000982FE 8006                       	dc.b	nRst, $06
00098300 E102                       	smpsAlterNote       $02
00098302 01                         	dc.b	$01
00098303 E106                       	smpsAlterNote       $06
00098305 01                         	dc.b	$01
00098306 E102                       	smpsAlterNote       $02
00098308 01                         	dc.b	$01
00098309 E1FF                       	smpsAlterNote       $FF
0009830B 01                         	dc.b	$01
0009830C ECF5                       	smpsPSGAlterVol     $F5
0009830E 9B06                       	dc.b	nD2, $06
00098310 EC04                       	smpsPSGAlterVol     $04
00098312 E701                       	dc.b	smpsNoAttack, $01
00098314 EC07                       	smpsPSGAlterVol     $07
00098316 8003                       	dc.b	nRst, $03
00098318 ECF5                       	smpsPSGAlterVol     $F5
0009831A 9B07                       	dc.b	nD2, $07
0009831C E1FE                       	smpsAlterNote       $FE
0009831E 9706                       	dc.b	nBb1, $06
00098320 EC04                       	smpsPSGAlterVol     $04
00098322 E701                       	dc.b	smpsNoAttack, $01
00098324 ECFC                       	smpsPSGAlterVol     $FC
00098326 9703                       	dc.b	nBb1, $03
00098328 EC04                       	smpsPSGAlterVol     $04
0009832A E701                       	dc.b	smpsNoAttack, $01
0009832C ECFC                       	smpsPSGAlterVol     $FC
0009832E 9702                       	dc.b	nBb1, $02
00098330 EC04                       	smpsPSGAlterVol     $04
00098332 E701                       	dc.b	smpsNoAttack, $01
00098334 ECFC                       	smpsPSGAlterVol     $FC
00098336 9606                       	dc.b	nA1, $06
00098338 EC04                       	smpsPSGAlterVol     $04
0009833A E701                       	dc.b	smpsNoAttack, $01
0009833C EC07                       	smpsPSGAlterVol     $07
0009833E 8006                       	dc.b	nRst, $06
00098340 E101                       	smpsAlterNote       $01
00098342 01                         	dc.b	$01
00098343 E107                       	smpsAlterNote       $07
00098345 01                         	dc.b	$01
00098346 E101                       	smpsAlterNote       $01
00098348 01                         	dc.b	$01
00098349 E1F8                       	smpsAlterNote       $F8
0009834B 01                         	dc.b	$01
0009834C E1F7                       	smpsAlterNote       $F7
0009834E 01                         	dc.b	$01
0009834F E1FC                       	smpsAlterNote       $FC
00098351 01                         	dc.b	$01
00098352 E106                       	smpsAlterNote       $06
00098354 01                         	dc.b	$01
00098355 E107                       	smpsAlterNote       $07
00098357 01                         	dc.b	$01
00098358 E101                       	smpsAlterNote       $01
0009835A 01                         	dc.b	$01
0009835B E1F8                       	smpsAlterNote       $F8
0009835D 0101                       	dc.b	$01, $01
0009835F E1FC                       	smpsAlterNote       $FC
00098361 ECF5                       	smpsPSGAlterVol     $F5
00098363 8F06                       	dc.b	nD1, $06
00098365 EC04                       	smpsPSGAlterVol     $04
00098367 E701                       	dc.b	smpsNoAttack, $01
00098369 EC07                       	smpsPSGAlterVol     $07
0009836B 8003                       	dc.b	nRst, $03
0009836D ECF5                       	smpsPSGAlterVol     $F5
0009836F 8F06                       	dc.b	nD1, $06
00098371 EC04                       	smpsPSGAlterVol     $04
00098373 E701                       	dc.b	smpsNoAttack, $01
00098375 EC07                       	smpsPSGAlterVol     $07
00098377 8006                       	dc.b	nRst, $06
00098379 E1FF                       	smpsAlterNote       $FF
0009837B 01                         	dc.b	$01
0009837C E102                       	smpsAlterNote       $02
0009837E 01                         	dc.b	$01
0009837F E101                       	smpsAlterNote       $01
00098381 01                         	dc.b	$01
00098382 E1FC                       	smpsAlterNote       $FC
00098384 01                         	dc.b	$01
00098385 ECF5                       	smpsPSGAlterVol     $F5
00098387 9007                       	dc.b	nEb1, $07
00098389 EC0B                       	smpsPSGAlterVol     $0B
0009838B 8004                       	dc.b	nRst, $04
0009838D ECF5                       	smpsPSGAlterVol     $F5
0009838F 9006                       	dc.b	nEb1, $06
00098391 EC0B                       	smpsPSGAlterVol     $0B
00098393 8007                       	dc.b	nRst, $07
00098395 E103                       	smpsAlterNote       $03
00098397 0101                       	dc.b	$01, $01
00098399 E1FC                       	smpsAlterNote       $FC
0009839B 01                         	dc.b	$01
0009839C E1F9                       	smpsAlterNote       $F9
0009839E 01                         	dc.b	$01
0009839F E1FC                       	smpsAlterNote       $FC
000983A1 ECF5                       	smpsPSGAlterVol     $F5
000983A3 8F06                       	dc.b	nD1, $06
000983A5 EC04                       	smpsPSGAlterVol     $04
000983A7 E701                       	dc.b	smpsNoAttack, $01
000983A9 EC07                       	smpsPSGAlterVol     $07
000983AB 8003                       	dc.b	nRst, $03
000983AD ECF5                       	smpsPSGAlterVol     $F5
000983AF 8F06                       	dc.b	nD1, $06
000983B1 EC04                       	smpsPSGAlterVol     $04
000983B3 E701                       	dc.b	smpsNoAttack, $01
000983B5 EC07                       	smpsPSGAlterVol     $07
000983B7 8006                       	dc.b	nRst, $06
000983B9 E1FF                       	smpsAlterNote       $FF
000983BB 01                         	dc.b	$01
000983BC E103                       	smpsAlterNote       $03
000983BE 01                         	dc.b	$01
000983BF E1FF                       	smpsAlterNote       $FF
000983C1 01                         	dc.b	$01
000983C2 E1F9                       	smpsAlterNote       $F9
000983C4 01                         	dc.b	$01
000983C5 E1FC                       	smpsAlterNote       $FC
000983C7 ECF5                       	smpsPSGAlterVol     $F5
000983C9 8F06                       	dc.b	nD1, $06
000983CB EC04                       	smpsPSGAlterVol     $04
000983CD E701                       	dc.b	smpsNoAttack, $01
000983CF EC07                       	smpsPSGAlterVol     $07
000983D1 8003                       	dc.b	nRst, $03
000983D3 ECF5                       	smpsPSGAlterVol     $F5
000983D5 8F07                       	dc.b	nD1, $07
000983D7 EC0B                       	smpsPSGAlterVol     $0B
000983D9 8006                       	dc.b	nRst, $06
000983DB E1FF                       	smpsAlterNote       $FF
000983DD 01                         	dc.b	$01
000983DE E102                       	smpsAlterNote       $02
000983E0 0101                       	dc.b	$01, $01
000983E2 E1FC                       	smpsAlterNote       $FC
000983E4 01                         	dc.b	$01
000983E5 ECF5                       	smpsPSGAlterVol     $F5
000983E7 8F07                       	dc.b	nD1, $07
000983E9 EC0B                       	smpsPSGAlterVol     $0B
000983EB 8004                       	dc.b	nRst, $04
000983ED ECF5                       	smpsPSGAlterVol     $F5
000983EF 8F06                       	dc.b	nD1, $06
000983F1 EC04                       	smpsPSGAlterVol     $04
000983F3 E701                       	dc.b	smpsNoAttack, $01
000983F5 EC07                       	smpsPSGAlterVol     $07
000983F7 8006                       	dc.b	nRst, $06
000983F9 E101                       	smpsAlterNote       $01
000983FB 01                         	dc.b	$01
000983FC E102                       	smpsAlterNote       $02
000983FE 01                         	dc.b	$01
000983FF E1FF                       	smpsAlterNote       $FF
00098401 01                         	dc.b	$01
00098402 E1F9                       	smpsAlterNote       $F9
00098404 01                         	dc.b	$01
00098405 E1FC                       	smpsAlterNote       $FC
00098407 ECF5                       	smpsPSGAlterVol     $F5
00098409 9006                       	dc.b	nEb1, $06
0009840B EC04                       	smpsPSGAlterVol     $04
0009840D E701                       	dc.b	smpsNoAttack, $01
0009840F EC07                       	smpsPSGAlterVol     $07
00098411 8003                       	dc.b	nRst, $03
00098413 ECF5                       	smpsPSGAlterVol     $F5
00098415 9006                       	dc.b	nEb1, $06
00098417 EC04                       	smpsPSGAlterVol     $04
00098419 E701                       	dc.b	smpsNoAttack, $01
0009841B EC07                       	smpsPSGAlterVol     $07
0009841D 8006                       	dc.b	nRst, $06
0009841F E100                       	smpsAlterNote       $00
00098421 01                         	dc.b	$01
00098422 E102                       	smpsAlterNote       $02
00098424 01                         	dc.b	$01
00098425 E100                       	smpsAlterNote       $00
00098427 01                         	dc.b	$01
00098428 E1FF                       	smpsAlterNote       $FF
0009842A 01                         	dc.b	$01
0009842B ECF5                       	smpsPSGAlterVol     $F5
0009842D 9B06                       	dc.b	nD2, $06
0009842F EC04                       	smpsPSGAlterVol     $04
00098431 E701                       	dc.b	smpsNoAttack, $01
00098433 EC07                       	smpsPSGAlterVol     $07
00098435 8003                       	dc.b	nRst, $03
00098437 ECF5                       	smpsPSGAlterVol     $F5
00098439 9B07                       	dc.b	nD2, $07
0009843B EC0B                       	smpsPSGAlterVol     $0B
0009843D 8007                       	dc.b	nRst, $07
0009843F E105                       	smpsAlterNote       $05
00098441 0101                       	dc.b	$01, $01
00098443 E1FF                       	smpsAlterNote       $FF
00098445 01                         	dc.b	$01
00098446 E1FC                       	smpsAlterNote       $FC
00098448 01                         	dc.b	$01
00098449 E1FF                       	smpsAlterNote       $FF
0009844B ECF5                       	smpsPSGAlterVol     $F5
0009844D 9B06                       	dc.b	nD2, $06
0009844F EC0B                       	smpsPSGAlterVol     $0B
00098451 8004                       	dc.b	nRst, $04
00098453 ECF5                       	smpsPSGAlterVol     $F5
00098455 9B06                       	dc.b	nD2, $06
00098457 EC04                       	smpsPSGAlterVol     $04
00098459 E701                       	dc.b	smpsNoAttack, $01
0009845B EC07                       	smpsPSGAlterVol     $07
0009845D 8006                       	dc.b	nRst, $06
0009845F E102                       	smpsAlterNote       $02
00098461 01                         	dc.b	$01
00098462 E106                       	smpsAlterNote       $06
00098464 01                         	dc.b	$01
00098465 E102                       	smpsAlterNote       $02
00098467 01                         	dc.b	$01
00098468 E1FC                       	smpsAlterNote       $FC
0009846A 01                         	dc.b	$01
0009846B E1FF                       	smpsAlterNote       $FF
0009846D ECF5                       	smpsPSGAlterVol     $F5
0009846F 9B06                       	dc.b	nD2, $06
00098471 EC04                       	smpsPSGAlterVol     $04
00098473 E701                       	dc.b	smpsNoAttack, $01
00098475 EC07                       	smpsPSGAlterVol     $07
00098477 8003                       	dc.b	nRst, $03
00098479 ECF5                       	smpsPSGAlterVol     $F5
0009847B 9B07                       	dc.b	nD2, $07
0009847D EC0B                       	smpsPSGAlterVol     $0B
0009847F 8006                       	dc.b	nRst, $06
00098481 E102                       	smpsAlterNote       $02
00098483 01                         	dc.b	$01
00098484 E105                       	smpsAlterNote       $05
00098486 0101                       	dc.b	$01, $01
00098488 E1FF                       	smpsAlterNote       $FF
0009848A 01                         	dc.b	$01
0009848B ECF5                       	smpsPSGAlterVol     $F5
0009848D 9B07                       	dc.b	nD2, $07
0009848F EC0B                       	smpsPSGAlterVol     $0B
00098491 8004                       	dc.b	nRst, $04
00098493 ECF5                       	smpsPSGAlterVol     $F5
00098495 9B06                       	dc.b	nD2, $06
00098497 EC0B                       	smpsPSGAlterVol     $0B
00098499 8007                       	dc.b	nRst, $07
0009849B E105                       	smpsAlterNote       $05
0009849D 0101                       	dc.b	$01, $01
0009849F E102                       	smpsAlterNote       $02
000984A1 01                         	dc.b	$01
000984A2 E1FC                       	smpsAlterNote       $FC
000984A4 01                         	dc.b	$01
000984A5 E1FF                       	smpsAlterNote       $FF
000984A7 ECF5                       	smpsPSGAlterVol     $F5
000984A9 9B06                       	dc.b	nD2, $06
000984AB EC04                       	smpsPSGAlterVol     $04
000984AD E701                       	dc.b	smpsNoAttack, $01
000984AF EC07                       	smpsPSGAlterVol     $07
000984B1 8003                       	dc.b	nRst, $03
000984B3 ECF5                       	smpsPSGAlterVol     $F5
000984B5 9B06                       	dc.b	nD2, $06
000984B7 EC04                       	smpsPSGAlterVol     $04
000984B9 E701                       	dc.b	smpsNoAttack, $01
000984BB EC07                       	smpsPSGAlterVol     $07
000984BD 8006                       	dc.b	nRst, $06
000984BF E102                       	smpsAlterNote       $02
000984C1 01                         	dc.b	$01
000984C2 E106                       	smpsAlterNote       $06
000984C4 01                         	dc.b	$01
000984C5 E102                       	smpsAlterNote       $02
000984C7 01                         	dc.b	$01
000984C8 E1FF                       	smpsAlterNote       $FF
000984CA 01                         	dc.b	$01
000984CB ECF5                       	smpsPSGAlterVol     $F5
000984CD 9B06                       	dc.b	nD2, $06
000984CF EC04                       	smpsPSGAlterVol     $04
000984D1 E701                       	dc.b	smpsNoAttack, $01
000984D3 EC07                       	smpsPSGAlterVol     $07
000984D5 8003                       	dc.b	nRst, $03
000984D7 ECF5                       	smpsPSGAlterVol     $F5
000984D9 9B07                       	dc.b	nD2, $07
000984DB EC0B                       	smpsPSGAlterVol     $0B
000984DD 8007                       	dc.b	nRst, $07
000984DF E105                       	smpsAlterNote       $05
000984E1 0101                       	dc.b	$01, $01
000984E3 E1FF                       	smpsAlterNote       $FF
000984E5 01                         	dc.b	$01
000984E6 E1FC                       	smpsAlterNote       $FC
000984E8 01                         	dc.b	$01
000984E9 E1FF                       	smpsAlterNote       $FF
000984EB ECF5                       	smpsPSGAlterVol     $F5
000984ED 9B06                       	dc.b	nD2, $06
000984EF EC0B                       	smpsPSGAlterVol     $0B
000984F1 8004                       	dc.b	nRst, $04
000984F3 ECF5                       	smpsPSGAlterVol     $F5
000984F5 9B06                       	dc.b	nD2, $06
000984F7 EC04                       	smpsPSGAlterVol     $04
000984F9 E701                       	dc.b	smpsNoAttack, $01
000984FB EC07                       	smpsPSGAlterVol     $07
000984FD 8006                       	dc.b	nRst, $06
000984FF E102                       	smpsAlterNote       $02
00098501 01                         	dc.b	$01
00098502 E106                       	smpsAlterNote       $06
00098504 01                         	dc.b	$01
00098505 E102                       	smpsAlterNote       $02
00098507 01                         	dc.b	$01
00098508 E1FC                       	smpsAlterNote       $FC
0009850A 01                         	dc.b	$01
0009850B E1FF                       	smpsAlterNote       $FF
0009850D ECF5                       	smpsPSGAlterVol     $F5
0009850F 9B06                       	dc.b	nD2, $06
00098511 EC04                       	smpsPSGAlterVol     $04
00098513 E701                       	dc.b	smpsNoAttack, $01
00098515 EC07                       	smpsPSGAlterVol     $07
00098517 8003                       	dc.b	nRst, $03
00098519 ECF5                       	smpsPSGAlterVol     $F5
0009851B 9B06                       	dc.b	nD2, $06
0009851D EC04                       	smpsPSGAlterVol     $04
0009851F E701                       	dc.b	smpsNoAttack, $01
00098521 EC07                       	smpsPSGAlterVol     $07
00098523 8006                       	dc.b	nRst, $06
00098525 E102                       	smpsAlterNote       $02
00098527 01                         	dc.b	$01
00098528 E106                       	smpsAlterNote       $06
0009852A 01                         	dc.b	$01
0009852B E105                       	smpsAlterNote       $05
0009852D 01                         	dc.b	$01
0009852E E1FF                       	smpsAlterNote       $FF
00098530 01                         	dc.b	$01
00098531 ECF5                       	smpsPSGAlterVol     $F5
00098533 9B07                       	dc.b	nD2, $07
00098535 EC0B                       	smpsPSGAlterVol     $0B
00098537 8004                       	dc.b	nRst, $04
00098539 ECF5                       	smpsPSGAlterVol     $F5
0009853B 9B06                       	dc.b	nD2, $06
0009853D EC0B                       	smpsPSGAlterVol     $0B
0009853F 8007                       	dc.b	nRst, $07
00098541 E105                       	smpsAlterNote       $05
00098543 0101                       	dc.b	$01, $01
00098545 E101                       	smpsAlterNote       $01
00098547 01                         	dc.b	$01
00098548 E1FB                       	smpsAlterNote       $FB
0009854A 01                         	dc.b	$01
0009854B E1FE                       	smpsAlterNote       $FE
0009854D ECF5                       	smpsPSGAlterVol     $F5
0009854F 9A06                       	dc.b	nCs2, $06
00098551 EC04                       	smpsPSGAlterVol     $04
00098553 E701                       	dc.b	smpsNoAttack, $01
00098555 EC07                       	smpsPSGAlterVol     $07
00098557 8003                       	dc.b	nRst, $03
00098559 ECF5                       	smpsPSGAlterVol     $F5
0009855B 9A06                       	dc.b	nCs2, $06
0009855D EC04                       	smpsPSGAlterVol     $04
0009855F E701                       	dc.b	smpsNoAttack, $01
00098561 EC07                       	smpsPSGAlterVol     $07
00098563 8003                       	dc.b	nRst, $03
00098565 E1FC                       	smpsAlterNote       $FC
00098567 ECF5                       	smpsPSGAlterVol     $F5
00098569 8F07                       	dc.b	nD1, $07
0009856B EC0B                       	smpsPSGAlterVol     $0B
0009856D 8006                       	dc.b	nRst, $06
0009856F E1FF                       	smpsAlterNote       $FF
00098571 01                         	dc.b	$01
00098572 E103                       	smpsAlterNote       $03
00098574 01                         	dc.b	$01
00098575 E102                       	smpsAlterNote       $02
00098577 01                         	dc.b	$01
00098578 E1FC                       	smpsAlterNote       $FC
0009857A 01                         	dc.b	$01
0009857B E1F8                       	smpsAlterNote       $F8
0009857D 01                         	dc.b	$01
0009857E E1FC                       	smpsAlterNote       $FC
00098580 01                         	dc.b	$01
00098581 E1FF                       	smpsAlterNote       $FF
00098583 01                         	dc.b	$01
00098584 E103                       	smpsAlterNote       $03
00098586 01                         	dc.b	$01
00098587 E1FC                       	smpsAlterNote       $FC
00098589 ECF5                       	smpsPSGAlterVol     $F5
0009858B 8F03 8F03                  	dc.b	nD1, $03, nD1, $03
0009858F EC04                       	smpsPSGAlterVol     $04
00098591 E701                       	dc.b	smpsNoAttack, $01
00098593 EC07                       	smpsPSGAlterVol     $07
00098595 8009                       	dc.b	nRst, $09
00098597 E1FF                       	smpsAlterNote       $FF
00098599 01                         	dc.b	$01
0009859A E103                       	smpsAlterNote       $03
0009859C 01                         	dc.b	$01
0009859D E102                       	smpsAlterNote       $02
0009859F 01                         	dc.b	$01
000985A0 E1FC                       	smpsAlterNote       $FC
000985A2 01                         	dc.b	$01
000985A3 E1F8                       	smpsAlterNote       $F8
000985A5 01                         	dc.b	$01
000985A6 E1FC                       	smpsAlterNote       $FC
000985A8 01                         	dc.b	$01
000985A9 E1FF                       	smpsAlterNote       $FF
000985AB 01                         	dc.b	$01
000985AC E103                       	smpsAlterNote       $03
000985AE 01                         	dc.b	$01
000985AF E1FF                       	smpsAlterNote       $FF
000985B1 01                         	dc.b	$01
000985B2 E1F9                       	smpsAlterNote       $F9
000985B4 01                         	dc.b	$01
000985B5 E1F8                       	smpsAlterNote       $F8
000985B7 01                         	dc.b	$01
000985B8 E1FC                       	smpsAlterNote       $FC
000985BA 01                         	dc.b	$01
000985BB E102                       	smpsAlterNote       $02
000985BD 0101                       	dc.b	$01, $01
000985BF E1FF                       	smpsAlterNote       $FF
000985C1 01                         	dc.b	$01
000985C2 E1FC                       	smpsAlterNote       $FC
000985C4 ECF5                       	smpsPSGAlterVol     $F5
000985C6 8F02                       	dc.b	nD1, $02
000985C8 EC04                       	smpsPSGAlterVol     $04
000985CA E701                       	dc.b	smpsNoAttack, $01
000985CC ECFC                       	smpsPSGAlterVol     $FC
000985CE E1FB                       	smpsAlterNote       $FB
000985D0 8D06                       	dc.b	nC1, $06
000985D2 EC04                       	smpsPSGAlterVol     $04
000985D4 E701                       	dc.b	smpsNoAttack, $01
000985D6 EC07                       	smpsPSGAlterVol     $07
000985D8 8006                       	dc.b	nRst, $06
000985DA E1FE                       	smpsAlterNote       $FE
000985DC 01                         	dc.b	$01
000985DD E102                       	smpsAlterNote       $02
000985DF 01                         	dc.b	$01
000985E0 E1FE                       	smpsAlterNote       $FE
000985E2 01                         	dc.b	$01
000985E3 E1FB                       	smpsAlterNote       $FB
000985E5 01                         	dc.b	$01
000985E6 E1F7                       	smpsAlterNote       $F7
000985E8 01                         	dc.b	$01
000985E9 E1FB                       	smpsAlterNote       $FB
000985EB 01                         	dc.b	$01
000985EC E101                       	smpsAlterNote       $01
000985EE 01                         	dc.b	$01
000985EF E102                       	smpsAlterNote       $02
000985F1 01                         	dc.b	$01
000985F2 E1FB                       	smpsAlterNote       $FB
000985F4 ECF5                       	smpsPSGAlterVol     $F5
000985F6 8D02                       	dc.b	nC1, $02
000985F8 EC04                       	smpsPSGAlterVol     $04
000985FA E701                       	dc.b	smpsNoAttack, $01
000985FC E1FC                       	smpsAlterNote       $FC
000985FE ECFC                       	smpsPSGAlterVol     $FC
00098600 8F0D                       	dc.b	nD1, $0D
00098602 E1FF                       	smpsAlterNote       $FF
00098604 E701                       	dc.b	smpsNoAttack, $01
00098606 E103                       	smpsAlterNote       $03
00098608 E701                       	dc.b	smpsNoAttack, $01
0009860A E1FF                       	smpsAlterNote       $FF
0009860C E701                       	dc.b	smpsNoAttack, $01
0009860E E1FC                       	smpsAlterNote       $FC
00098610 E701                       	dc.b	smpsNoAttack, $01
00098612 E1F8                       	smpsAlterNote       $F8
00098614 E701                       	dc.b	smpsNoAttack, $01
00098616 E1FC                       	smpsAlterNote       $FC
00098618 E701                       	dc.b	smpsNoAttack, $01
0009861A E102                       	smpsAlterNote       $02
0009861C E701                       	dc.b	smpsNoAttack, $01
0009861E E103                       	smpsAlterNote       $03
00098620 E701                       	dc.b	smpsNoAttack, $01
00098622 E1FF                       	smpsAlterNote       $FF
00098624 E701                       	dc.b	smpsNoAttack, $01
00098626 E1F9                       	smpsAlterNote       $F9
00098628 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009862C E1FC                       	smpsAlterNote       $FC
0009862E E701                       	dc.b	smpsNoAttack, $01
00098630 E102                       	smpsAlterNote       $02
00098632 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098636 E1FC                       	smpsAlterNote       $FC
00098638 E701                       	dc.b	smpsNoAttack, $01
0009863A E1F9                       	smpsAlterNote       $F9
0009863C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098640 E1FF                       	smpsAlterNote       $FF
00098642 EC04                       	smpsPSGAlterVol     $04
00098644 E701                       	dc.b	smpsNoAttack, $01
00098646 EC07                       	smpsPSGAlterVol     $07
00098648 E103                       	smpsAlterNote       $03
0009864A 8001                       	dc.b	nRst, $01
0009864C E102                       	smpsAlterNote       $02
0009864E 01                         	dc.b	$01
0009864F E1FB                       	smpsAlterNote       $FB
00098651 01                         	dc.b	$01
00098652 E1F7                       	smpsAlterNote       $F7
00098654 01                         	dc.b	$01
00098655 E1FB                       	smpsAlterNote       $FB
00098657 01                         	dc.b	$01
00098658 E102                       	smpsAlterNote       $02
0009865A 01                         	dc.b	$01
0009865B E103                       	smpsAlterNote       $03
0009865D 01                         	dc.b	$01
0009865E E1FB                       	smpsAlterNote       $FB
00098660 ECF5                       	smpsPSGAlterVol     $F5
00098662 8E06                       	dc.b	nCs1, $06
00098664 EC04                       	smpsPSGAlterVol     $04
00098666 E701                       	dc.b	smpsNoAttack, $01
00098668 EC07                       	smpsPSGAlterVol     $07
0009866A 8003                       	dc.b	nRst, $03
0009866C ECF5                       	smpsPSGAlterVol     $F5
0009866E 8E06                       	dc.b	nCs1, $06
00098670 EC04                       	smpsPSGAlterVol     $04
00098672 E701                       	dc.b	smpsNoAttack, $01
00098674 EC07                       	smpsPSGAlterVol     $07
00098676 8006                       	dc.b	nRst, $06
00098678 E1FE                       	smpsAlterNote       $FE
0009867A 01                         	dc.b	$01
0009867B E102                       	smpsAlterNote       $02
0009867D 01                         	dc.b	$01
0009867E E1FE                       	smpsAlterNote       $FE
00098680 01                         	dc.b	$01
00098681 E1F9                       	smpsAlterNote       $F9
00098683 01                         	dc.b	$01
00098684 E1FC                       	smpsAlterNote       $FC
00098686 ECF5                       	smpsPSGAlterVol     $F5
00098688 8F06                       	dc.b	nD1, $06
0009868A EC04                       	smpsPSGAlterVol     $04
0009868C E701                       	dc.b	smpsNoAttack, $01
0009868E EC07                       	smpsPSGAlterVol     $07
00098690 8003                       	dc.b	nRst, $03
00098692 ECF5                       	smpsPSGAlterVol     $F5
00098694 8F07                       	dc.b	nD1, $07
00098696 EC0B                       	smpsPSGAlterVol     $0B
00098698 8006                       	dc.b	nRst, $06
0009869A E1FF                       	smpsAlterNote       $FF
0009869C 01                         	dc.b	$01
0009869D E102                       	smpsAlterNote       $02
0009869F 0101                       	dc.b	$01, $01
000986A1 E1FB                       	smpsAlterNote       $FB
000986A3 01                         	dc.b	$01
000986A4 ECF5                       	smpsPSGAlterVol     $F5
000986A6 8E07                       	dc.b	nCs1, $07
000986A8 EC0B                       	smpsPSGAlterVol     $0B
000986AA 8004                       	dc.b	nRst, $04
000986AC ECF5                       	smpsPSGAlterVol     $F5
000986AE 8E06                       	dc.b	nCs1, $06
000986B0 EC04                       	smpsPSGAlterVol     $04
000986B2 E701                       	dc.b	smpsNoAttack, $01
000986B4 EC07                       	smpsPSGAlterVol     $07
000986B6 8006                       	dc.b	nRst, $06
000986B8 E101                       	smpsAlterNote       $01
000986BA 01                         	dc.b	$01
000986BB E102                       	smpsAlterNote       $02
000986BD 01                         	dc.b	$01
000986BE E1FE                       	smpsAlterNote       $FE
000986C0 01                         	dc.b	$01
000986C1 E1F8                       	smpsAlterNote       $F8
000986C3 01                         	dc.b	$01
000986C4 E1FB                       	smpsAlterNote       $FB
000986C6 ECF5                       	smpsPSGAlterVol     $F5
000986C8 8E06                       	dc.b	nCs1, $06
000986CA EC04                       	smpsPSGAlterVol     $04
000986CC E701                       	dc.b	smpsNoAttack, $01
000986CE EC07                       	smpsPSGAlterVol     $07
000986D0 8003                       	dc.b	nRst, $03
000986D2 ECF5                       	smpsPSGAlterVol     $F5
000986D4 8E06                       	dc.b	nCs1, $06
000986D6 EC04                       	smpsPSGAlterVol     $04
000986D8 E701                       	dc.b	smpsNoAttack, $01
000986DA EC07                       	smpsPSGAlterVol     $07
000986DC 8004                       	dc.b	nRst, $04
000986DE E1FC                       	smpsAlterNote       $FC
000986E0 ECF5                       	smpsPSGAlterVol     $F5
000986E2 8F06                       	dc.b	nD1, $06
000986E4 EC0B                       	smpsPSGAlterVol     $0B
000986E6 8006                       	dc.b	nRst, $06
000986E8 E1FF                       	smpsAlterNote       $FF
000986EA 01                         	dc.b	$01
000986EB E102                       	smpsAlterNote       $02
000986ED 0101                       	dc.b	$01, $01
000986EF E1FC                       	smpsAlterNote       $FC
000986F1 01                         	dc.b	$01
000986F2 E1F8                       	smpsAlterNote       $F8
000986F4 01                         	dc.b	$01
000986F5 E1F9                       	smpsAlterNote       $F9
000986F7 01                         	dc.b	$01
000986F8 E1FF                       	smpsAlterNote       $FF
000986FA 01                         	dc.b	$01
000986FB E103                       	smpsAlterNote       $03
000986FD 01                         	dc.b	$01
000986FE E1FC                       	smpsAlterNote       $FC
00098700 ECF5                       	smpsPSGAlterVol     $F5
00098702 8F03 8F03                  	dc.b	nD1, $03, nD1, $03
00098706 EC04                       	smpsPSGAlterVol     $04
00098708 E701                       	dc.b	smpsNoAttack, $01
0009870A EC07                       	smpsPSGAlterVol     $07
0009870C 8009                       	dc.b	nRst, $09
0009870E E1FF                       	smpsAlterNote       $FF
00098710 01                         	dc.b	$01
00098711 E102                       	smpsAlterNote       $02
00098713 0101                       	dc.b	$01, $01
00098715 E1FC                       	smpsAlterNote       $FC
00098717 01                         	dc.b	$01
00098718 E1F8                       	smpsAlterNote       $F8
0009871A 01                         	dc.b	$01
0009871B E1F9                       	smpsAlterNote       $F9
0009871D 01                         	dc.b	$01
0009871E E1FF                       	smpsAlterNote       $FF
00098720 01                         	dc.b	$01
00098721 E103                       	smpsAlterNote       $03
00098723 01                         	dc.b	$01
00098724 E1FF                       	smpsAlterNote       $FF
00098726 01                         	dc.b	$01
00098727 E1FC                       	smpsAlterNote       $FC
00098729 01                         	dc.b	$01
0009872A E1F8                       	smpsAlterNote       $F8
0009872C 01                         	dc.b	$01
0009872D E1FC                       	smpsAlterNote       $FC
0009872F 01                         	dc.b	$01
00098730 E102                       	smpsAlterNote       $02
00098732 01                         	dc.b	$01
00098733 E103                       	smpsAlterNote       $03
00098735 01                         	dc.b	$01
00098736 E1FF                       	smpsAlterNote       $FF
00098738 01                         	dc.b	$01
00098739 E1FC                       	smpsAlterNote       $FC
0009873B ECF5                       	smpsPSGAlterVol     $F5
0009873D 8F03                       	dc.b	nD1, $03
0009873F E1FB                       	smpsAlterNote       $FB
00098741 8D06                       	dc.b	nC1, $06
00098743 EC04                       	smpsPSGAlterVol     $04
00098745 E701                       	dc.b	smpsNoAttack, $01
00098747 EC07                       	smpsPSGAlterVol     $07
00098749 8006                       	dc.b	nRst, $06
0009874B E1FE                       	smpsAlterNote       $FE
0009874D 01                         	dc.b	$01
0009874E E102                       	smpsAlterNote       $02
00098750 01                         	dc.b	$01
00098751 E101                       	smpsAlterNote       $01
00098753 01                         	dc.b	$01
00098754 E1FB                       	smpsAlterNote       $FB
00098756 01                         	dc.b	$01
00098757 E1F7                       	smpsAlterNote       $F7
00098759 01                         	dc.b	$01
0009875A E1FB                       	smpsAlterNote       $FB
0009875C 01                         	dc.b	$01
0009875D E1FE                       	smpsAlterNote       $FE
0009875F 01                         	dc.b	$01
00098760 E102                       	smpsAlterNote       $02
00098762 01                         	dc.b	$01
00098763 E1FB                       	smpsAlterNote       $FB
00098765 ECF5                       	smpsPSGAlterVol     $F5
00098767 8D03                       	dc.b	nC1, $03
00098769 E1FC                       	smpsAlterNote       $FC
0009876B 8F0D                       	dc.b	nD1, $0D
0009876D E1FF                       	smpsAlterNote       $FF
0009876F E701                       	dc.b	smpsNoAttack, $01
00098771 E103                       	smpsAlterNote       $03
00098773 E701                       	dc.b	smpsNoAttack, $01
00098775 E1FF                       	smpsAlterNote       $FF
00098777 E701                       	dc.b	smpsNoAttack, $01
00098779 E1FC                       	smpsAlterNote       $FC
0009877B E701                       	dc.b	smpsNoAttack, $01
0009877D E1F8                       	smpsAlterNote       $F8
0009877F E701                       	dc.b	smpsNoAttack, $01
00098781 E1FC                       	smpsAlterNote       $FC
00098783 E701                       	dc.b	smpsNoAttack, $01
00098785 E102                       	smpsAlterNote       $02
00098787 E701                       	dc.b	smpsNoAttack, $01
00098789 E103                       	smpsAlterNote       $03
0009878B E701                       	dc.b	smpsNoAttack, $01
0009878D E1FF                       	smpsAlterNote       $FF
0009878F E701                       	dc.b	smpsNoAttack, $01
00098791 E1F9                       	smpsAlterNote       $F9
00098793 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098797 E1FC                       	smpsAlterNote       $FC
00098799 E701                       	dc.b	smpsNoAttack, $01
0009879B E102                       	smpsAlterNote       $02
0009879D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000987A1 E1FF                       	smpsAlterNote       $FF
000987A3 E701                       	dc.b	smpsNoAttack, $01
000987A5 E1F9                       	smpsAlterNote       $F9
000987A7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000987AB E1FF                       	smpsAlterNote       $FF
000987AD EC04                       	smpsPSGAlterVol     $04
000987AF E701                       	dc.b	smpsNoAttack, $01
000987B1 EC07                       	smpsPSGAlterVol     $07
000987B3 E103                       	smpsAlterNote       $03
000987B5 8001                       	dc.b	nRst, $01
000987B7 E102                       	smpsAlterNote       $02
000987B9 01                         	dc.b	$01
000987BA E1FB                       	smpsAlterNote       $FB
000987BC 01                         	dc.b	$01
000987BD E1F7                       	smpsAlterNote       $F7
000987BF 01                         	dc.b	$01
000987C0 E1FB                       	smpsAlterNote       $FB
000987C2 01                         	dc.b	$01
000987C3 E1FF                       	smpsAlterNote       $FF
000987C5 01                         	dc.b	$01
000987C6 E103                       	smpsAlterNote       $03
000987C8 01                         	dc.b	$01
000987C9 E1FB                       	smpsAlterNote       $FB
000987CB ECF5                       	smpsPSGAlterVol     $F5
000987CD 8E06                       	dc.b	nCs1, $06
000987CF EC04                       	smpsPSGAlterVol     $04
000987D1 E701                       	dc.b	smpsNoAttack, $01
000987D3 EC07                       	smpsPSGAlterVol     $07
000987D5 8003                       	dc.b	nRst, $03
000987D7 ECF5                       	smpsPSGAlterVol     $F5
000987D9 8E06                       	dc.b	nCs1, $06
000987DB EC04                       	smpsPSGAlterVol     $04
000987DD E701                       	dc.b	smpsNoAttack, $01
000987DF EC07                       	smpsPSGAlterVol     $07
000987E1 8006                       	dc.b	nRst, $06
000987E3 E1FE                       	smpsAlterNote       $FE
000987E5 01                         	dc.b	$01
000987E6 E102                       	smpsAlterNote       $02
000987E8 01                         	dc.b	$01
000987E9 E1FE                       	smpsAlterNote       $FE
000987EB 01                         	dc.b	$01
000987EC E1FC                       	smpsAlterNote       $FC
000987EE 01                         	dc.b	$01
000987EF ECF5                       	smpsPSGAlterVol     $F5
000987F1 8F06                       	dc.b	nD1, $06
000987F3 EC04                       	smpsPSGAlterVol     $04
000987F5 E701                       	dc.b	smpsNoAttack, $01
000987F7 EC07                       	smpsPSGAlterVol     $07
000987F9 8003                       	dc.b	nRst, $03
000987FB ECF5                       	smpsPSGAlterVol     $F5
000987FD 8F07                       	dc.b	nD1, $07
000987FF EC0B                       	smpsPSGAlterVol     $0B
00098801 8007                       	dc.b	nRst, $07
00098803 E102                       	smpsAlterNote       $02
00098805 0101                       	dc.b	$01, $01
00098807 E1FB                       	smpsAlterNote       $FB
00098809 01                         	dc.b	$01
0009880A E1F8                       	smpsAlterNote       $F8
0009880C 01                         	dc.b	$01
0009880D E1FB                       	smpsAlterNote       $FB
0009880F ECF5                       	smpsPSGAlterVol     $F5
00098811 8E06                       	dc.b	nCs1, $06
00098813 EC0B                       	smpsPSGAlterVol     $0B
00098815 8004                       	dc.b	nRst, $04
00098817 ECF5                       	smpsPSGAlterVol     $F5
00098819 8E06                       	dc.b	nCs1, $06
0009881B EC04                       	smpsPSGAlterVol     $04
0009881D E701                       	dc.b	smpsNoAttack, $01
0009881F EC07                       	smpsPSGAlterVol     $07
00098821 8006                       	dc.b	nRst, $06
00098823 E1FE                       	smpsAlterNote       $FE
00098825 01                         	dc.b	$01
00098826 E102                       	smpsAlterNote       $02
00098828 01                         	dc.b	$01
00098829 E1FE                       	smpsAlterNote       $FE
0009882B 01                         	dc.b	$01
0009882C E1F9                       	smpsAlterNote       $F9
0009882E 01                         	dc.b	$01
0009882F E1FC                       	smpsAlterNote       $FC
00098831 ECF5                       	smpsPSGAlterVol     $F5
00098833 8F06                       	dc.b	nD1, $06
00098835 EC04                       	smpsPSGAlterVol     $04
00098837 E701                       	dc.b	smpsNoAttack, $01
00098839 EC07                       	smpsPSGAlterVol     $07
0009883B 8003                       	dc.b	nRst, $03
0009883D ECF5                       	smpsPSGAlterVol     $F5
0009883F 8F06                       	dc.b	nD1, $06
00098841 EC04                       	smpsPSGAlterVol     $04
00098843 E701                       	dc.b	smpsNoAttack, $01
00098845 EC07                       	smpsPSGAlterVol     $07
00098847 8006                       	dc.b	nRst, $06
00098849 E1FF                       	smpsAlterNote       $FF
0009884B 01                         	dc.b	$01
0009884C E103                       	smpsAlterNote       $03
0009884E 01                         	dc.b	$01
0009884F E102                       	smpsAlterNote       $02
00098851 01                         	dc.b	$01
00098852 E1FB                       	smpsAlterNote       $FB
00098854 01                         	dc.b	$01
00098855 ECF5                       	smpsPSGAlterVol     $F5
00098857 8E07                       	dc.b	nCs1, $07
00098859 EC0B                       	smpsPSGAlterVol     $0B
0009885B 8004                       	dc.b	nRst, $04
0009885D ECF5                       	smpsPSGAlterVol     $F5
0009885F 8E06                       	dc.b	nCs1, $06
00098861 EC0B                       	smpsPSGAlterVol     $0B
00098863 8007                       	dc.b	nRst, $07
00098865 E101                       	smpsAlterNote       $01
00098867 0101                       	dc.b	$01, $01
00098869 E1FE                       	smpsAlterNote       $FE
0009886B 01                         	dc.b	$01
0009886C E1F9                       	smpsAlterNote       $F9
0009886E 01                         	dc.b	$01
0009886F E1FC                       	smpsAlterNote       $FC
00098871 ECF5                       	smpsPSGAlterVol     $F5
00098873 8F06                       	dc.b	nD1, $06
00098875 EC04                       	smpsPSGAlterVol     $04
00098877 E701                       	dc.b	smpsNoAttack, $01
00098879 EC07                       	smpsPSGAlterVol     $07
0009887B 8003                       	dc.b	nRst, $03
0009887D ECF5                       	smpsPSGAlterVol     $F5
0009887F 8F06                       	dc.b	nD1, $06
00098881 EC04                       	smpsPSGAlterVol     $04
00098883 E701                       	dc.b	smpsNoAttack, $01
00098885 EC07                       	smpsPSGAlterVol     $07
00098887 8006                       	dc.b	nRst, $06
00098889 E1FF                       	smpsAlterNote       $FF
0009888B 01                         	dc.b	$01
0009888C E103                       	smpsAlterNote       $03
0009888E 01                         	dc.b	$01
0009888F E1FF                       	smpsAlterNote       $FF
00098891 01                         	dc.b	$01
00098892 E1FB                       	smpsAlterNote       $FB
00098894 01                         	dc.b	$01
00098895 ECF5                       	smpsPSGAlterVol     $F5
00098897 8E06                       	dc.b	nCs1, $06
00098899 EC04                       	smpsPSGAlterVol     $04
0009889B E701                       	dc.b	smpsNoAttack, $01
0009889D EC07                       	smpsPSGAlterVol     $07
0009889F 8003                       	dc.b	nRst, $03
000988A1 ECF5                       	smpsPSGAlterVol     $F5
000988A3 8E07                       	dc.b	nCs1, $07
000988A5 E1FF                       	smpsAlterNote       $FF
000988A7 9B06                       	dc.b	nD2, $06
000988A9 EC04                       	smpsPSGAlterVol     $04
000988AB E701                       	dc.b	smpsNoAttack, $01
000988AD ECFC                       	smpsPSGAlterVol     $FC
000988AF 9B03                       	dc.b	nD2, $03
000988B1 EC04                       	smpsPSGAlterVol     $04
000988B3 E701                       	dc.b	smpsNoAttack, $01
000988B5 ECFC                       	smpsPSGAlterVol     $FC
000988B7 9B02                       	dc.b	nD2, $02
000988B9 EC04                       	smpsPSGAlterVol     $04
000988BB E701                       	dc.b	smpsNoAttack, $01
000988BD ECFC                       	smpsPSGAlterVol     $FC
000988BF E1FE                       	smpsAlterNote       $FE
000988C1 9A03                       	dc.b	nCs2, $03
000988C3 EC0B                       	smpsPSGAlterVol     $0B
000988C5 800A                       	dc.b	nRst, $0A
000988C7 E102                       	smpsAlterNote       $02
000988C9 01                         	dc.b	$01
000988CA E10A                       	smpsAlterNote       $0A
000988CC 01                         	dc.b	$01
000988CD E102                       	smpsAlterNote       $02
000988CF 01                         	dc.b	$01
000988D0 E1F7                       	smpsAlterNote       $F7
000988D2 01                         	dc.b	$01
000988D3 E10A                       	smpsAlterNote       $0A
000988D5 01                         	dc.b	$01
000988D6 E1FC                       	smpsAlterNote       $FC
000988D8 01                         	dc.b	$01
000988D9 E108                       	smpsAlterNote       $08
000988DB 0101                       	dc.b	$01, $01
000988DD E102                       	smpsAlterNote       $02
000988DF 01                         	dc.b	$01
000988E0 E1F7                       	smpsAlterNote       $F7
000988E2 0101                       	dc.b	$01, $01
000988E4 E1FC                       	smpsAlterNote       $FC
000988E6 ECF5                       	smpsPSGAlterVol     $F5
000988E8 8F06                       	dc.b	nD1, $06
000988EA EC04                       	smpsPSGAlterVol     $04
000988EC E701                       	dc.b	smpsNoAttack, $01
000988EE EC07                       	smpsPSGAlterVol     $07
000988F0 8003                       	dc.b	nRst, $03
000988F2 ECF5                       	smpsPSGAlterVol     $F5
000988F4 8F06                       	dc.b	nD1, $06
000988F6 EC04                       	smpsPSGAlterVol     $04
000988F8 E701                       	dc.b	smpsNoAttack, $01
000988FA EC07                       	smpsPSGAlterVol     $07
000988FC 8006                       	dc.b	nRst, $06
000988FE E1FF                       	smpsAlterNote       $FF
00098900 01                         	dc.b	$01
00098901 E102                       	smpsAlterNote       $02
00098903 01                         	dc.b	$01
00098904 E101                       	smpsAlterNote       $01
00098906 01                         	dc.b	$01
00098907 E1FC                       	smpsAlterNote       $FC
00098909 01                         	dc.b	$01
0009890A ECF5                       	smpsPSGAlterVol     $F5
0009890C 9007                       	dc.b	nEb1, $07
0009890E EC0B                       	smpsPSGAlterVol     $0B
00098910 8004                       	dc.b	nRst, $04
00098912 ECF5                       	smpsPSGAlterVol     $F5
00098914 9006                       	dc.b	nEb1, $06
00098916 EC0B                       	smpsPSGAlterVol     $0B
00098918 8007                       	dc.b	nRst, $07
0009891A E103                       	smpsAlterNote       $03
0009891C 0101                       	dc.b	$01, $01
0009891E E1FF                       	smpsAlterNote       $FF
00098920 01                         	dc.b	$01
00098921 E1F9                       	smpsAlterNote       $F9
00098923 01                         	dc.b	$01
00098924 E1FC                       	smpsAlterNote       $FC
00098926 ECF5                       	smpsPSGAlterVol     $F5
00098928 8F06                       	dc.b	nD1, $06
0009892A EC04                       	smpsPSGAlterVol     $04
0009892C E701                       	dc.b	smpsNoAttack, $01
0009892E EC07                       	smpsPSGAlterVol     $07
00098930 8003                       	dc.b	nRst, $03
00098932 ECF5                       	smpsPSGAlterVol     $F5
00098934 8F06                       	dc.b	nD1, $06
00098936 EC04                       	smpsPSGAlterVol     $04
00098938 E701                       	dc.b	smpsNoAttack, $01
0009893A EC07                       	smpsPSGAlterVol     $07
0009893C 8006                       	dc.b	nRst, $06
0009893E E1FF                       	smpsAlterNote       $FF
00098940 01                         	dc.b	$01
00098941 E103                       	smpsAlterNote       $03
00098943 01                         	dc.b	$01
00098944 E1FF                       	smpsAlterNote       $FF
00098946 01                         	dc.b	$01
00098947 E1F9                       	smpsAlterNote       $F9
00098949 01                         	dc.b	$01
0009894A E1FC                       	smpsAlterNote       $FC
0009894C ECF5                       	smpsPSGAlterVol     $F5
0009894E 8F06                       	dc.b	nD1, $06
00098950 EC04                       	smpsPSGAlterVol     $04
00098952 E701                       	dc.b	smpsNoAttack, $01
00098954 EC07                       	smpsPSGAlterVol     $07
00098956 8003                       	dc.b	nRst, $03
00098958 ECF5                       	smpsPSGAlterVol     $F5
0009895A 8F07                       	dc.b	nD1, $07
0009895C EC0B                       	smpsPSGAlterVol     $0B
0009895E 8006                       	dc.b	nRst, $06
00098960 E1FF                       	smpsAlterNote       $FF
00098962 01                         	dc.b	$01
00098963 E102                       	smpsAlterNote       $02
00098965 0101                       	dc.b	$01, $01
00098967 E1FC                       	smpsAlterNote       $FC
00098969 01                         	dc.b	$01
0009896A ECF5                       	smpsPSGAlterVol     $F5
0009896C 8F07                       	dc.b	nD1, $07
0009896E EC0B                       	smpsPSGAlterVol     $0B
00098970 8004                       	dc.b	nRst, $04
00098972 ECF5                       	smpsPSGAlterVol     $F5
00098974 8F06                       	dc.b	nD1, $06
00098976 EC04                       	smpsPSGAlterVol     $04
00098978 E701                       	dc.b	smpsNoAttack, $01
0009897A EC07                       	smpsPSGAlterVol     $07
0009897C 8006                       	dc.b	nRst, $06
0009897E E101                       	smpsAlterNote       $01
00098980 01                         	dc.b	$01
00098981 E102                       	smpsAlterNote       $02
00098983 01                         	dc.b	$01
00098984 E1FF                       	smpsAlterNote       $FF
00098986 01                         	dc.b	$01
00098987 E1F9                       	smpsAlterNote       $F9
00098989 01                         	dc.b	$01
0009898A E1FC                       	smpsAlterNote       $FC
0009898C ECF5                       	smpsPSGAlterVol     $F5
0009898E 9006                       	dc.b	nEb1, $06
00098990 EC04                       	smpsPSGAlterVol     $04
00098992 E701                       	dc.b	smpsNoAttack, $01
00098994 EC07                       	smpsPSGAlterVol     $07
00098996 8003                       	dc.b	nRst, $03
00098998 ECF5                       	smpsPSGAlterVol     $F5
0009899A 9006                       	dc.b	nEb1, $06
0009899C EC04                       	smpsPSGAlterVol     $04
0009899E E701                       	dc.b	smpsNoAttack, $01
000989A0 EC07                       	smpsPSGAlterVol     $07
000989A2 8006                       	dc.b	nRst, $06
000989A4 E100                       	smpsAlterNote       $00
000989A6 01                         	dc.b	$01
000989A7 E102                       	smpsAlterNote       $02
000989A9 01                         	dc.b	$01
000989AA E100                       	smpsAlterNote       $00
000989AC 01                         	dc.b	$01
000989AD E1FF                       	smpsAlterNote       $FF
000989AF 01                         	dc.b	$01
000989B0 ECF5                       	smpsPSGAlterVol     $F5
000989B2 9B06                       	dc.b	nD2, $06
000989B4 EC04                       	smpsPSGAlterVol     $04
000989B6 E701                       	dc.b	smpsNoAttack, $01
000989B8 EC07                       	smpsPSGAlterVol     $07
000989BA 8003                       	dc.b	nRst, $03
000989BC ECF5                       	smpsPSGAlterVol     $F5
000989BE 9B07                       	dc.b	nD2, $07
000989C0 EC0B                       	smpsPSGAlterVol     $0B
000989C2 8007                       	dc.b	nRst, $07
000989C4 E105                       	smpsAlterNote       $05
000989C6 0101                       	dc.b	$01, $01
000989C8 E1FF                       	smpsAlterNote       $FF
000989CA 01                         	dc.b	$01
000989CB E1FC                       	smpsAlterNote       $FC
000989CD 01                         	dc.b	$01
000989CE E1FF                       	smpsAlterNote       $FF
000989D0 ECF5                       	smpsPSGAlterVol     $F5
000989D2 9B06                       	dc.b	nD2, $06
000989D4 EC0B                       	smpsPSGAlterVol     $0B
000989D6 8004                       	dc.b	nRst, $04
000989D8 ECF5                       	smpsPSGAlterVol     $F5
000989DA 9B06                       	dc.b	nD2, $06
000989DC EC04                       	smpsPSGAlterVol     $04
000989DE E701                       	dc.b	smpsNoAttack, $01
000989E0 EC07                       	smpsPSGAlterVol     $07
000989E2 8006                       	dc.b	nRst, $06
000989E4 E102                       	smpsAlterNote       $02
000989E6 01                         	dc.b	$01
000989E7 E106                       	smpsAlterNote       $06
000989E9 01                         	dc.b	$01
000989EA E102                       	smpsAlterNote       $02
000989EC 01                         	dc.b	$01
000989ED E1FC                       	smpsAlterNote       $FC
000989EF 01                         	dc.b	$01
000989F0 E1FF                       	smpsAlterNote       $FF
000989F2 ECF5                       	smpsPSGAlterVol     $F5
000989F4 9B06                       	dc.b	nD2, $06
000989F6 EC04                       	smpsPSGAlterVol     $04
000989F8 E701                       	dc.b	smpsNoAttack, $01
000989FA EC07                       	smpsPSGAlterVol     $07
000989FC 8003                       	dc.b	nRst, $03
000989FE ECF5                       	smpsPSGAlterVol     $F5
00098A00 9B07                       	dc.b	nD2, $07
00098A02 EC0B                       	smpsPSGAlterVol     $0B
00098A04 8006                       	dc.b	nRst, $06
00098A06 E102                       	smpsAlterNote       $02
00098A08 01                         	dc.b	$01
00098A09 E105                       	smpsAlterNote       $05
00098A0B 0101                       	dc.b	$01, $01
00098A0D E1FF                       	smpsAlterNote       $FF
00098A0F 01                         	dc.b	$01
00098A10 ECF5                       	smpsPSGAlterVol     $F5
00098A12 9B07                       	dc.b	nD2, $07
00098A14 EC0B                       	smpsPSGAlterVol     $0B
00098A16 8004                       	dc.b	nRst, $04
00098A18 ECF5                       	smpsPSGAlterVol     $F5
00098A1A 9B06                       	dc.b	nD2, $06
00098A1C EC04                       	smpsPSGAlterVol     $04
00098A1E E701                       	dc.b	smpsNoAttack, $01
00098A20 EC07                       	smpsPSGAlterVol     $07
00098A22 8006                       	dc.b	nRst, $06
00098A24 E105                       	smpsAlterNote       $05
00098A26 0101                       	dc.b	$01, $01
00098A28 E102                       	smpsAlterNote       $02
00098A2A 01                         	dc.b	$01
00098A2B E1FC                       	smpsAlterNote       $FC
00098A2D 01                         	dc.b	$01
00098A2E E1FF                       	smpsAlterNote       $FF
00098A30 ECF5                       	smpsPSGAlterVol     $F5
00098A32 9B06                       	dc.b	nD2, $06
00098A34 EC04                       	smpsPSGAlterVol     $04
00098A36 E701                       	dc.b	smpsNoAttack, $01
00098A38 EC07                       	smpsPSGAlterVol     $07
00098A3A 8003                       	dc.b	nRst, $03
00098A3C ECF5                       	smpsPSGAlterVol     $F5
00098A3E 9B06                       	dc.b	nD2, $06
00098A40 EC04                       	smpsPSGAlterVol     $04
00098A42 E701                       	dc.b	smpsNoAttack, $01
00098A44 EC07                       	smpsPSGAlterVol     $07
00098A46 8006                       	dc.b	nRst, $06
00098A48 E102                       	smpsAlterNote       $02
00098A4A 01                         	dc.b	$01
00098A4B E106                       	smpsAlterNote       $06
00098A4D 01                         	dc.b	$01
00098A4E E102                       	smpsAlterNote       $02
00098A50 01                         	dc.b	$01
00098A51 E1FF                       	smpsAlterNote       $FF
00098A53 01                         	dc.b	$01
00098A54 ECF5                       	smpsPSGAlterVol     $F5
00098A56 9B06                       	dc.b	nD2, $06
00098A58 EC04                       	smpsPSGAlterVol     $04
00098A5A E701                       	dc.b	smpsNoAttack, $01
00098A5C EC07                       	smpsPSGAlterVol     $07
00098A5E 8003                       	dc.b	nRst, $03
00098A60 ECF5                       	smpsPSGAlterVol     $F5
00098A62 9B07                       	dc.b	nD2, $07
00098A64 EC0B                       	smpsPSGAlterVol     $0B
00098A66 8007                       	dc.b	nRst, $07
00098A68 E107                       	smpsAlterNote       $07
00098A6A 0101                       	dc.b	$01, $01
00098A6C E1FE                       	smpsAlterNote       $FE
00098A6E 01                         	dc.b	$01
00098A6F E1FA                       	smpsAlterNote       $FA
00098A71 0101                       	dc.b	$01, $01
00098A73 E103                       	smpsAlterNote       $03
00098A75 01                         	dc.b	$01
00098A76 E109                       	smpsAlterNote       $09
00098A78 01                         	dc.b	$01
00098A79 E107                       	smpsAlterNote       $07
00098A7B 01                         	dc.b	$01
00098A7C E1FE                       	smpsAlterNote       $FE
00098A7E 01                         	dc.b	$01
00098A7F E108                       	smpsAlterNote       $08
00098A81 01                         	dc.b	$01
00098A82 E1FD                       	smpsAlterNote       $FD
00098A84 ECF5                       	smpsPSGAlterVol     $F5
00098A86 940E                       	dc.b	nG1, $0E
00098A88 E103                       	smpsAlterNote       $03
00098A8A EC0B                       	smpsPSGAlterVol     $0B
00098A8C 8001 01                    	dc.b	nRst, $01, $01
00098A8F E1FD                       	smpsAlterNote       $FD
00098A91 01                         	dc.b	$01
00098A92 E1FB                       	smpsAlterNote       $FB
00098A94 0101                       	dc.b	$01, $01
00098A96 E100                       	smpsAlterNote       $00
00098A98 01                         	dc.b	$01
00098A99 E103                       	smpsAlterNote       $03
00098A9B 01                         	dc.b	$01
00098A9C E100                       	smpsAlterNote       $00
00098A9E 01                         	dc.b	$01
00098A9F E1FD                       	smpsAlterNote       $FD
00098AA1 01                         	dc.b	$01
00098AA2 E1FA                       	smpsAlterNote       $FA
00098AA4 01                         	dc.b	$01
00098AA5 E1FD                       	smpsAlterNote       $FD
00098AA7 01                         	dc.b	$01
00098AA8 E103                       	smpsAlterNote       $03
00098AAA 0101                       	dc.b	$01, $01
00098AAC E100                       	smpsAlterNote       $00
00098AAE 01                         	dc.b	$01
00098AAF E1FE                       	smpsAlterNote       $FE
00098AB1 ECF5                       	smpsPSGAlterVol     $F5
00098AB3 960D                       	dc.b	nA1, $0D
00098AB5 E104                       	smpsAlterNote       $04
00098AB7 EC0B                       	smpsPSGAlterVol     $0B
00098AB9 8001 01                    	dc.b	nRst, $01, $01
00098ABC E101                       	smpsAlterNote       $01
00098ABE 01                         	dc.b	$01
00098ABF E1FB                       	smpsAlterNote       $FB
00098AC1 0101                       	dc.b	$01, $01
00098AC3 E1FE                       	smpsAlterNote       $FE
00098AC5 01                         	dc.b	$01
00098AC6 E104                       	smpsAlterNote       $04
00098AC8 0101                       	dc.b	$01, $01
00098ACA E1FE                       	smpsAlterNote       $FE
00098ACC 01                         	dc.b	$01
00098ACD E1FB                       	smpsAlterNote       $FB
00098ACF 0101                       	dc.b	$01, $01
00098AD1 E101                       	smpsAlterNote       $01
00098AD3 01                         	dc.b	$01
00098AD4 E104                       	smpsAlterNote       $04
00098AD6 0101                       	dc.b	$01, $01
00098AD8 E1FE                       	smpsAlterNote       $FE
00098ADA ECF5                       	smpsPSGAlterVol     $F5
00098ADC 970D                       	dc.b	nBb1, $0D
00098ADE E101                       	smpsAlterNote       $01
00098AE0 EC04                       	smpsPSGAlterVol     $04
00098AE2 E701                       	dc.b	smpsNoAttack, $01
00098AE4 EC07                       	smpsPSGAlterVol     $07
00098AE6 E104                       	smpsAlterNote       $04
00098AE8 8001                       	dc.b	nRst, $01
00098AEA E103                       	smpsAlterNote       $03
00098AEC 01                         	dc.b	$01
00098AED E1FE                       	smpsAlterNote       $FE
00098AEF 01                         	dc.b	$01
00098AF0 E1FA                       	smpsAlterNote       $FA
00098AF2 01                         	dc.b	$01
00098AF3 E1FE                       	smpsAlterNote       $FE
00098AF5 01                         	dc.b	$01
00098AF6 E101                       	smpsAlterNote       $01
00098AF8 01                         	dc.b	$01
00098AF9 E104                       	smpsAlterNote       $04
00098AFB 01                         	dc.b	$01
00098AFC E101                       	smpsAlterNote       $01
00098AFE 01                         	dc.b	$01
00098AFF E1FB                       	smpsAlterNote       $FB
00098B01 01                         	dc.b	$01
00098B02 E1FA                       	smpsAlterNote       $FA
00098B04 01                         	dc.b	$01
00098B05 E1FE                       	smpsAlterNote       $FE
00098B07 01                         	dc.b	$01
00098B08 E103                       	smpsAlterNote       $03
00098B0A 0101                       	dc.b	$01, $01
00098B0C E101                       	smpsAlterNote       $01
00098B0E 01                         	dc.b	$01
00098B0F E1FE                       	smpsAlterNote       $FE
00098B11 ECF5                       	smpsPSGAlterVol     $F5
00098B13 990D                       	dc.b	nC2, $0D
00098B15 E104                       	smpsAlterNote       $04
00098B17 EC0B                       	smpsPSGAlterVol     $0B
00098B19 8001 01                    	dc.b	nRst, $01, $01
00098B1C E102                       	smpsAlterNote       $02
00098B1E 01                         	dc.b	$01
00098B1F E1FC                       	smpsAlterNote       $FC
00098B21 0101                       	dc.b	$01, $01
00098B23 E102                       	smpsAlterNote       $02
00098B25 01                         	dc.b	$01
00098B26 E104                       	smpsAlterNote       $04
00098B28 01                         	dc.b	$01
00098B29 E1FF                       	smpsAlterNote       $FF
00098B2B ECF5                       	smpsPSGAlterVol     $F5
00098B2D 9B06                       	dc.b	nD2, $06
00098B2F EC04                       	smpsPSGAlterVol     $04
00098B31 E701                       	dc.b	smpsNoAttack, $01
00098B33 EC07                       	smpsPSGAlterVol     $07
00098B35 8003                       	dc.b	nRst, $03
00098B37 ECF5                       	smpsPSGAlterVol     $F5
00098B39 9B07                       	dc.b	nD2, $07
00098B3B EC0B                       	smpsPSGAlterVol     $0B
00098B3D 8006                       	dc.b	nRst, $06
00098B3F E101                       	smpsAlterNote       $01
00098B41 01                         	dc.b	$01
00098B42 E104                       	smpsAlterNote       $04
00098B44 0101                       	dc.b	$01, $01
00098B46 E1FE                       	smpsAlterNote       $FE
00098B48 01                         	dc.b	$01
00098B49 E1FC                       	smpsAlterNote       $FC
00098B4B 01                         	dc.b	$01
00098B4C E1FE                       	smpsAlterNote       $FE
00098B4E ECF5                       	smpsPSGAlterVol     $F5
00098B50 9C06                       	dc.b	nEb2, $06
00098B52 EC0B                       	smpsPSGAlterVol     $0B
00098B54 8004                       	dc.b	nRst, $04
00098B56 ECF5                       	smpsPSGAlterVol     $F5
00098B58 9C06                       	dc.b	nEb2, $06
00098B5A EC04                       	smpsPSGAlterVol     $04
00098B5C E701                       	dc.b	smpsNoAttack, $01
00098B5E EC07                       	smpsPSGAlterVol     $07
00098B60 8006                       	dc.b	nRst, $06
00098B62 E105                       	smpsAlterNote       $05
00098B64 01                         	dc.b	$01
00098B65 E106                       	smpsAlterNote       $06
00098B67 01                         	dc.b	$01
00098B68 E102                       	smpsAlterNote       $02
00098B6A 01                         	dc.b	$01
00098B6B E1FB                       	smpsAlterNote       $FB
00098B6D 01                         	dc.b	$01
00098B6E E1FF                       	smpsAlterNote       $FF
00098B70 ECF5                       	smpsPSGAlterVol     $F5
00098B72 9B06                       	dc.b	nD2, $06
00098B74 EC04                       	smpsPSGAlterVol     $04
00098B76 E701                       	dc.b	smpsNoAttack, $01
00098B78 EC07                       	smpsPSGAlterVol     $07
00098B7A 8003                       	dc.b	nRst, $03
00098B7C ECF5                       	smpsPSGAlterVol     $F5
00098B7E 9B06                       	dc.b	nD2, $06
00098B80 EC04                       	smpsPSGAlterVol     $04
00098B82 E701                       	dc.b	smpsNoAttack, $01
00098B84 EC07                       	smpsPSGAlterVol     $07
00098B86 8006                       	dc.b	nRst, $06
00098B88 E101                       	smpsAlterNote       $01
00098B8A 01                         	dc.b	$01
00098B8B E105                       	smpsAlterNote       $05
00098B8D 01                         	dc.b	$01
00098B8E E104                       	smpsAlterNote       $04
00098B90 01                         	dc.b	$01
00098B91 E1FE                       	smpsAlterNote       $FE
00098B93 01                         	dc.b	$01
00098B94 ECF5                       	smpsPSGAlterVol     $F5
00098B96 9C07                       	dc.b	nEb2, $07
00098B98 EC0B                       	smpsPSGAlterVol     $0B
00098B9A 8004                       	dc.b	nRst, $04
00098B9C ECF5                       	smpsPSGAlterVol     $F5
00098B9E 9C06                       	dc.b	nEb2, $06
00098BA0 EC0B                       	smpsPSGAlterVol     $0B
00098BA2 8007                       	dc.b	nRst, $07
00098BA4 E105                       	smpsAlterNote       $05
00098BA6 0101                       	dc.b	$01, $01
00098BA8 E102                       	smpsAlterNote       $02
00098BAA 01                         	dc.b	$01
00098BAB E1FB                       	smpsAlterNote       $FB
00098BAD 01                         	dc.b	$01
00098BAE E1FF                       	smpsAlterNote       $FF
00098BB0 ECF5                       	smpsPSGAlterVol     $F5
00098BB2 9B06                       	dc.b	nD2, $06
00098BB4 EC04                       	smpsPSGAlterVol     $04
00098BB6 E701                       	dc.b	smpsNoAttack, $01
00098BB8 EC07                       	smpsPSGAlterVol     $07
00098BBA 8003                       	dc.b	nRst, $03
00098BBC ECF5                       	smpsPSGAlterVol     $F5
00098BBE 9B06                       	dc.b	nD2, $06
00098BC0 EC04                       	smpsPSGAlterVol     $04
00098BC2 E701                       	dc.b	smpsNoAttack, $01
00098BC4 EC07                       	smpsPSGAlterVol     $07
00098BC6 8006                       	dc.b	nRst, $06
00098BC8 E101                       	smpsAlterNote       $01
00098BCA 01                         	dc.b	$01
00098BCB E105                       	smpsAlterNote       $05
00098BCD 01                         	dc.b	$01
00098BCE E101                       	smpsAlterNote       $01
00098BD0 01                         	dc.b	$01
00098BD1 E1FC                       	smpsAlterNote       $FC
00098BD3 01                         	dc.b	$01
00098BD4 E1FE                       	smpsAlterNote       $FE
00098BD6 ECF5                       	smpsPSGAlterVol     $F5
00098BD8 9C06                       	dc.b	nEb2, $06
00098BDA EC04                       	smpsPSGAlterVol     $04
00098BDC E701                       	dc.b	smpsNoAttack, $01
00098BDE EC07                       	smpsPSGAlterVol     $07
00098BE0 8003                       	dc.b	nRst, $03
00098BE2 ECF5                       	smpsPSGAlterVol     $F5
00098BE4 9C07                       	dc.b	nEb2, $07
00098BE6 EC0B                       	smpsPSGAlterVol     $0B
00098BE8 8006                       	dc.b	nRst, $06
00098BEA E102                       	smpsAlterNote       $02
00098BEC 01                         	dc.b	$01
00098BED E105                       	smpsAlterNote       $05
00098BEF 0101                       	dc.b	$01, $01
00098BF1 E1FF                       	smpsAlterNote       $FF
00098BF3 01                         	dc.b	$01
00098BF4 ECF5                       	smpsPSGAlterVol     $F5
00098BF6 9B07                       	dc.b	nD2, $07
00098BF8 EC0B                       	smpsPSGAlterVol     $0B
00098BFA 8004                       	dc.b	nRst, $04
00098BFC ECF5                       	smpsPSGAlterVol     $F5
00098BFE 9B06                       	dc.b	nD2, $06
00098C00 EC04                       	smpsPSGAlterVol     $04
00098C02 E701                       	dc.b	smpsNoAttack, $01
00098C04 EC07                       	smpsPSGAlterVol     $07
00098C06 8002                       	dc.b	nRst, $02
00098C08 E1FC                       	smpsAlterNote       $FC
00098C0A ECF5                       	smpsPSGAlterVol     $F5
00098C0C 9006                       	dc.b	nEb1, $06
00098C0E EC04                       	smpsPSGAlterVol     $04
00098C10 E701                       	dc.b	smpsNoAttack, $01
00098C12 ECFC                       	smpsPSGAlterVol     $FC
00098C14 8B03 9003                  	dc.b	nBb0, $03, nEb1, $03
00098C18 EC04                       	smpsPSGAlterVol     $04
00098C1A E701                       	dc.b	smpsNoAttack, $01
00098C1C E1FD                       	smpsAlterNote       $FD
00098C1E ECFC                       	smpsPSGAlterVol     $FC
00098C20 9402                       	dc.b	nG1, $02
00098C22 EC04                       	smpsPSGAlterVol     $04
00098C24 E701                       	dc.b	smpsNoAttack, $01
00098C26 E1FE                       	smpsAlterNote       $FE
00098C28 ECFC                       	smpsPSGAlterVol     $FC
00098C2A 9703 9703                  	dc.b	nBb1, $03, nBb1, $03
00098C2E EC04                       	smpsPSGAlterVol     $04
00098C30 E701                       	dc.b	smpsNoAttack, $01
00098C32 EC07                       	smpsPSGAlterVol     $07
00098C34 8008                       	dc.b	nRst, $08
00098C36 F6F4 F3                    	smpsJump            music84_Jump06
00098C39                            
00098C39                            ; PSG3 Data
00098C39                            music84_PSG3:
00098C39 F500                       	smpsPSGvoice        $00
00098C3B E1FF                       	smpsAlterNote       $FF
00098C3D EC0F                       	smpsPSGAlterVol     $0F
00098C3F 803A                       	dc.b	nRst, $3A
00098C41                            
00098C41                            music84_Jump05:
00098C41 8068 6868 6868 6868 6868+  	dc.b	nRst, $68, $68, $68, $68, $68, $68, $68, $68, $68, $68, $68
00098C4D 6868 6868 6868 6868 6802   	dc.b	$68, $68, $68, $68, $68, $68, $68, $68, $68, $02
00098C57 F6FF E8                    	smpsJump            music84_Jump05
00098C5A                            
00098C5A                            ; DAC Data
00098C5A                            music84_DAC:
00098C5A E0C0                       	smpsPan             panCenter, $00
00098C5C 8001 8203 8102 8101 8103+  	dc.b	nRst, $01, dSnare, $03, dKick, $02, dKick, $01, dKick, $03, dKick, $01
00098C68 8203 8102 8101 8204 8103+  	dc.b	dSnare, $03, dKick, $02, dKick, $01, dSnare, $04, dKick, $03, dSnare, $07
00098C74 8104 8103 8104 8103 8104+  	dc.b	dKick, $04, dKick, $03, dKick, $04, dKick, $03, dKick, $04, dKick, $03
00098C80 8203 8107 8207 8106 8101+  	dc.b	dSnare, $03, dKick, $07, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03
00098C8C 8107 8103 8207 8103 8104+  	dc.b	dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04, dSnare, $07
00098C98 8107 8206 8107 8204 8107+  	dc.b	dKick, $07, dSnare, $06, dKick, $07, dSnare, $04, dKick, $07, dKick, $03
00098CA4 8207 8103 8104 8207 8106+  	dc.b	dSnare, $07, dKick, $03, dKick, $04, dSnare, $07, dKick, $06, dKick, $01
00098CB0 8206 8107 8204 8106 8104+  	dc.b	dSnare, $06, dKick, $07, dSnare, $04, dKick, $06, dKick, $04, dSnare, $07
00098CBC 8103 8103 8101 8206 8107+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07, dSnare, $07
00098CC8 8107 8203 8107 8104 8206+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $06, dKick, $04
00098CD4 8103 8207 8107 8207 8107+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03
00098CE0 8107 8103 8101 8206 8104+  	dc.b	dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04, dKick, $03
00098CEC 8207 8107 8207 8106 8101+  	dc.b	dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03
00098CF8 8107 8103 8207 8103 8104+  	dc.b	dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04, dSnare, $07
00098D04 8106 8101 8206 8107 8204+  	dc.b	dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04, dKick, $06
00098D10 8104 8207 8103 8104 8206+  	dc.b	dKick, $04, dSnare, $07, dKick, $03, dKick, $04, dSnare, $06, dKick, $07
00098D1C 8207 8107 8203 8107 8202+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dSnare, $02, dKick, $02
00098D28 8103 8207 8101 8101 8101+  	dc.b	dKick, $03, dSnare, $07, dKick, $01, dKick, $01, dKick, $01, dKick, $01
00098D34 8206 8107 8207 8107 8203+  	dc.b	dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07
00098D40 8103 8101 8206 8104 8103+  	dc.b	dKick, $03, dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07
00098D4C 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
00098D58 8207 8103 8101 8103 8207+  	dc.b	dSnare, $07, dKick, $03, dKick, $01, dKick, $03, dSnare, $07, dKick, $07
00098D64 8206 8101 8106 8204 8107+  	dc.b	dSnare, $06, dKick, $01, dKick, $06, dSnare, $04, dKick, $07, dKick, $03
00098D70 8207 8103 8104 8207 8106+  	dc.b	dSnare, $07, dKick, $03, dKick, $04, dSnare, $07, dKick, $06, dKick, $01
00098D7C 8206 8107 8203 8101 8106+  	dc.b	dSnare, $06, dKick, $07, dSnare, $03, dKick, $01, dKick, $06, dKick, $04
00098D88 8207 8103 8103 8101 8206+  	dc.b	dSnare, $07, dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07
00098D94 8207 8107 8203 8107 8104+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $06
00098DA0 8104 8103 8207 8107 8207+  	dc.b	dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
00098DAC 8203 8107 8103 8101 8206+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04
00098DB8 8103 8207 8107 8207 8106+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01
00098DC4 8203 8107 8103 8207 8103+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
00098DD0 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04
00098DDC 8106 8104 8207 8104 8103+  	dc.b	dKick, $06, dKick, $04, dSnare, $07, dKick, $04, dKick, $03, dSnare, $07
00098DE8 8106 8207 8107 8203 8107+  	dc.b	dKick, $06, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04
00098DF4 8206 8101 8103 8103 8101+  	dc.b	dSnare, $06, dKick, $01, dKick, $03, dKick, $03, dKick, $01, dSnare, $06
00098E00 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
00098E0C 8101 8206 8104 8103 8207+  	dc.b	dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $07
00098E18 8207 8106 8101 8203 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $03, dKick, $07, dKick, $03
00098E24 8207 8103 8101 8103 8207+  	dc.b	dSnare, $07, dKick, $03, dKick, $01, dKick, $03, dSnare, $07, dKick, $07
00098E30 8206 8107 8204 8107 8103+  	dc.b	dSnare, $06, dKick, $07, dSnare, $04, dKick, $07, dKick, $03, dSnare, $07
00098E3C 8103 8104 8207 8214 8204+  	dc.b	dKick, $03, dKick, $04, dSnare, $07, dSnare, $14, dSnare, $04, dSnare, $1B
00098E48 8203 8101 8214 8203 8207+  	dc.b	dSnare, $03, dKick, $01, dSnare, $14, dSnare, $03, dSnare, $07, dKick, $04
00098E54 8206 8107 8207 8107 8207+  	dc.b	dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
00098E60 8203 8107 8103 8101 8206+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04
00098E6C 8103 8207 8107 8207 8106+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01
00098E78 8203 8107 8103 8207 8103+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
00098E84 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04
00098E90 8106 8104 8207 8103 8104+  	dc.b	dKick, $06, dKick, $04, dSnare, $07, dKick, $03, dKick, $04, dSnare, $06
00098E9C 8107 8207 8107 8204 8207+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $04, dSnare, $07, dKick, $01
00098EA8 8102 8104 8109 8101 8206+  	dc.b	dKick, $02, dKick, $04, dKick, $09, dKick, $01, dSnare, $06, dKick, $07
00098EB4 8207 8107 8203 8107 8103+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dKick, $01
00098EC0 8206 8104 8103 8207 8107+  	dc.b	dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07
00098ECC 8107 8203 8107 8103 8207+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $04
00098ED8 8103 8207 8107 8206 8101+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $06, dKick, $01, dKick, $06
00098EE4 8204 8107 8103 8207 8103+  	dc.b	dSnare, $04, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
00098EF0 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $03
00098EFC 8101 8106 8104 8207 8103+  	dc.b	dKick, $01, dKick, $06, dKick, $04, dSnare, $07, dKick, $03, dKick, $03
00098F08 8101 8206 8107 8207 8107+  	dc.b	dKick, $01, dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03
00098F14 8107 8104 8206 8104 8103+  	dc.b	dKick, $07, dKick, $04, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07
00098F20 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
00098F2C 8101 8206 8104 8103 8207+  	dc.b	dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $03
00098F38 8104 8207 8106 8101 8203+  	dc.b	dKick, $04, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03, dKick, $07
00098F44 8103 8208 8102 8104 8203+  	dc.b	dKick, $03, dSnare, $08, dKick, $02, dKick, $04, dSnare, $03, dKick, $04
00098F50 8103 8103 8101 8203 8103+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $03, dKick, $03, dKick, $01
00098F5C 8203 8103 8202 8101 8202+  	dc.b	dSnare, $03, dKick, $03, dSnare, $02, dKick, $01, dSnare, $02, dSnare, $02
00098F68 8202 8201 8101 8201 8102+  	dc.b	dSnare, $02, dSnare, $01, dKick, $01, dSnare, $01, dKick, $02, dKick, $02
00098F74 8102 8101 8102 8102 8102+  	dc.b	dKick, $02, dKick, $01, dKick, $02, dKick, $02, dKick, $02, dKick, $01
00098F80 8102 8202 8102 8101 8101+  	dc.b	dKick, $02, dSnare, $02, dKick, $02, dKick, $01, dKick, $01, dKick, $07
00098F8C 8207 8107 8203 8107 8104+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $07
00098F98 8103 8103 8101 8206 8107+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07, dSnare, $07
00098FA4 8107 8203 8107 8103 8101+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06
00098FB0 8104 8103 8207 8107 8207+  	dc.b	dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
00098FBC 8203 8107 8103 8207 8104+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $04, dKick, $03
00098FC8 8207 8107 8206 8107 8204+  	dc.b	dSnare, $07, dKick, $07, dSnare, $06, dKick, $07, dSnare, $04, dKick, $07
00098FD4 8103 8207 8203 8204 8107+  	dc.b	dKick, $03, dSnare, $07, dSnare, $03, dSnare, $04, dKick, $07, dKick, $17
00098FE0 E0C0                       	smpsPan             panCenter, $00
00098FE2 F2                         	smpsStop
00098FE3                            
00098FE3                            music84_Voices:
00098FE3                            ;	Voice $00
00098FE3                            ;	$3D
00098FE3                            ;	$41, $31, $41, $51, 	$11, $11, $11, $11, 	$0A, $00, $00, $00
00098FE3                            ;	$0B, $00, $00, $00, 	$F7, $F8, $F8, $F8, 	$1A, $14, $20, $14
00098FE3                            	smpsVcAlgorithm     $05
00098FE3                            	smpsVcFeedback      $07
00098FE3                            	smpsVcUnusedBits    $00
00098FE3                            	smpsVcDetune        $05, $04, $03, $04
00098FE3                            	smpsVcCoarseFreq    $01, $01, $01, $01
00098FE3                            	smpsVcRateScale     $00, $00, $00, $00
00098FE3                            	smpsVcAttackRate    $11, $11, $11, $11
00098FE3                            	smpsVcAmpMod        $00, $00, $00, $00
00098FE3                            	smpsVcDecayRate1    $00, $00, $00, $0A
00098FE3                            	smpsVcDecayRate2    $00, $00, $00, $0B
00098FE3                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
00098FE3                            	smpsVcReleaseRate   $08, $08, $08, $07
00098FE3 3D41 3141 5111 1111 110A+  	smpsVcTotalLevel    $14, $20, $14, $1A
00098FFC                            
00098FFC                            ;	Voice $01
00098FFC                            ;	$04
00098FFC                            ;	$5A, $41, $3A, $41, 	$5F, $1F, $5F, $1F, 	$00, $0E, $00, $0E
00098FFC                            ;	$00, $05, $00, $05, 	$E6, $86, $E6, $86, 	$19, $10, $19, $10
00098FFC                            	smpsVcAlgorithm     $04
00098FFC                            	smpsVcFeedback      $00
00098FFC                            	smpsVcUnusedBits    $00
00098FFC                            	smpsVcDetune        $04, $03, $04, $05
00098FFC                            	smpsVcCoarseFreq    $01, $0A, $01, $0A
00098FFC                            	smpsVcRateScale     $00, $01, $00, $01
00098FFC                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
00098FFC                            	smpsVcAmpMod        $00, $00, $00, $00
00098FFC                            	smpsVcDecayRate1    $0E, $00, $0E, $00
00098FFC                            	smpsVcDecayRate2    $05, $00, $05, $00
00098FFC                            	smpsVcDecayLevel    $08, $0E, $08, $0E
00098FFC                            	smpsVcReleaseRate   $06, $06, $06, $06
00098FFC 045A 413A 415F 1F5F 1F00+  	smpsVcTotalLevel    $10, $19, $10, $19
00099015                            
00099015                            ;	Voice $02
00099015                            ;	$30
00099015                            ;	$6C, $03, $21, $41, 	$14, $1F, $1F, $1F, 	$0D, $0C, $0E, $01
00099015                            ;	$01, $01, $01, $01, 	$FF, $C8, $BB, $89, 	$24, $27, $14, $10
00099015                            	smpsVcAlgorithm     $00
00099015                            	smpsVcFeedback      $06
00099015                            	smpsVcUnusedBits    $00
00099015                            	smpsVcDetune        $04, $02, $00, $06
00099015                            	smpsVcCoarseFreq    $01, $01, $03, $0C
00099015                            	smpsVcRateScale     $00, $00, $00, $00
00099015                            	smpsVcAttackRate    $1F, $1F, $1F, $14
00099015                            	smpsVcAmpMod        $00, $00, $00, $00
00099015                            	smpsVcDecayRate1    $01, $0E, $0C, $0D
00099015                            	smpsVcDecayRate2    $01, $01, $01, $01
00099015                            	smpsVcDecayLevel    $08, $0B, $0C, $0F
00099015                            	smpsVcReleaseRate   $09, $0B, $08, $0F
00099015 306C 0321 4114 1F1F 1F0D+  	smpsVcTotalLevel    $10, $14, $27, $24
0009902E                            
0009902E                            ;	Voice $03
0009902E                            ;	$3A
0009902E                            ;	$01, $21, $61, $41, 	$14, $14, $19, $18, 	$09, $09, $0D, $09
0009902E                            ;	$00, $00, $00, $00, 	$F7, $BF, $FF, $E8, 	$26, $16, $1E, $10
0009902E                            	smpsVcAlgorithm     $02
0009902E                            	smpsVcFeedback      $07
0009902E                            	smpsVcUnusedBits    $00
0009902E                            	smpsVcDetune        $04, $06, $02, $00
0009902E                            	smpsVcCoarseFreq    $01, $01, $01, $01
0009902E                            	smpsVcRateScale     $00, $00, $00, $00
0009902E                            	smpsVcAttackRate    $18, $19, $14, $14
0009902E                            	smpsVcAmpMod        $00, $00, $00, $00
0009902E                            	smpsVcDecayRate1    $09, $0D, $09, $09
0009902E                            	smpsVcDecayRate2    $00, $00, $00, $00
0009902E                            	smpsVcDecayLevel    $0E, $0F, $0B, $0F
0009902E                            	smpsVcReleaseRate   $08, $0F, $0F, $07
0009902E 3A01 2161 4114 1419 1809+  	smpsVcTotalLevel    $10, $1E, $16, $26
00099047                            
00099047                            ;	Voice $04
00099047                            ;	$3C
00099047                            ;	$3A, $02, $00, $70, 	$1F, $10, $1F, $10, 	$00, $00, $00, $00
00099047                            ;	$00, $00, $00, $00, 	$F2, $FA, $F2, $FA, 	$30, $1F, $24, $18
00099047                            	smpsVcAlgorithm     $04
00099047                            	smpsVcFeedback      $07
00099047                            	smpsVcUnusedBits    $00
00099047                            	smpsVcDetune        $07, $00, $00, $03
00099047                            	smpsVcCoarseFreq    $00, $00, $02, $0A
00099047                            	smpsVcRateScale     $00, $00, $00, $00
00099047                            	smpsVcAttackRate    $10, $1F, $10, $1F
00099047                            	smpsVcAmpMod        $00, $00, $00, $00
00099047                            	smpsVcDecayRate1    $00, $00, $00, $00
00099047                            	smpsVcDecayRate2    $00, $00, $00, $00
00099047                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
00099047                            	smpsVcReleaseRate   $0A, $02, $0A, $02
00099047 3C3A 0200 701F 101F 1000+  	smpsVcTotalLevel    $18, $24, $1F, $30
00099060                            
00099060                            ;	Voice $05
00099060                            ;	$38
00099060                            ;	$00, $21, $61, $41, 	$10, $1F, $1F, $1F, 	$17, $00, $03, $00
00099060                            ;	$0B, $08, $08, $00, 	$A5, $F5, $F5, $F8, 	$1D, $10, $11, $14
00099060                            	smpsVcAlgorithm     $00
00099060                            	smpsVcFeedback      $07
00099060                            	smpsVcUnusedBits    $00
00099060                            	smpsVcDetune        $04, $06, $02, $00
00099060                            	smpsVcCoarseFreq    $01, $01, $01, $00
00099060                            	smpsVcRateScale     $00, $00, $00, $00
00099060                            	smpsVcAttackRate    $1F, $1F, $1F, $10
00099060                            	smpsVcAmpMod        $00, $00, $00, $00
00099060                            	smpsVcDecayRate1    $00, $03, $00, $17
00099060                            	smpsVcDecayRate2    $00, $08, $08, $0B
00099060                            	smpsVcDecayLevel    $0F, $0F, $0F, $0A
00099060                            	smpsVcReleaseRate   $08, $05, $05, $05
00099060 3800 2161 4110 1F1F 1F17+  	smpsVcTotalLevel    $14, $11, $10, $1D
00099079                            
00099079                            
0009907A 00                         		even
0009907A                            Music85:	incbin	sound\glass2.bin ; Spring Yard Act 1
0009D28A                            		even
0009D28A                            Music86:	incbin	sound\music86.bin; Scrap Brain Act 1
000A0DE2 00                         		even
000A0DE2                            Music87:	include	sound\music87.asm; Invincibility
000A0DE2                            triple_Header:
000A0DE2 =00000001                  smpsHeaderStartSong = 1
000A0DE2 0000                       	smpsHeaderVoice     triple_Voices
000A0DE4 0501                       	smpsHeaderChan      $05, $01
000A0DE6 0200                       	smpsHeaderTempo     $02, $00
000A0DE8                            
000A0DEC 0000 F40A                  	smpsHeaderFM        triple_FM1,	$F4, $0A
000A0DF0 0000 000F                  	smpsHeaderFM        triple_FM2,	$00, $0F
000A0DF4 0000 000B                  	smpsHeaderFM        triple_FM3,	$00, $0B
000A0DF8 0000 0013                  	smpsHeaderFM        triple_FM4,	$00, $13
000A0DFC 0000 0C01 0000             	smpsHeaderPSG       triple_PSG1,	$0C, $01, $00, $00
000A0E02                            
000A0E02                            ; DAC Data
000A0E02                            triple_DAC:
000A0E02 E0C0                       	smpsPan             panCenter, $00
000A0E04 8203 0381 8182             	dc.b	dSnare, $03, $03, dKick, dKick, dSnare
000A0E0A                            
000A0E0A                            triple_Loop01:
000A0E0A 8282 82                    	dc.b	dSnare, dSnare, dSnare
000A0E0D                            
000A0E0D                            triple_Loop00:
000A0E0D 8106 8281 8281 8203 8106+  	dc.b	dKick, $06, dSnare, dKick, dSnare, dKick, dSnare, $03, dKick, $06, $03, dSnare
000A0E19 06                         	dc.b	$06
000A0E1A F700 08FF EF               	smpsLoop            $00, $08, triple_Loop00
000A0E1F 810C 8209 0981 0682 0903+  	dc.b	dKick, $0C, dSnare, $09, $09, dKick, $06, dSnare, $09, $03, dKick, $0C
000A0E2B 8209 0981 0682 03          	dc.b	dSnare, $09, $09, dKick, $06, dSnare, $03
000A0E32 F701 02FF D4               	smpsLoop            $01, $02, triple_Loop01
000A0E37 0303 1B                    	dc.b	$03, $03, $1B
000A0E3A E0C0                       	smpsPan             panCenter, $00
000A0E3C F6FF C4                    	smpsJump triple_DAC
000A0E3F                            
000A0E3F                            ; FM1 Data
000A0E3F                            triple_FM1:
000A0E3F E0C0                       	smpsPan             panCenter, $00
000A0E43 8018                       	dc.b	nRst, $18
000A0E45                            
000A0E45                            triple_Loop0B:
000A0E45 AC06 B8                    	dc.b	nG3, $06, nG4
000A0E48 F700 04FF F9               	smpsLoop            $00, $04, triple_Loop0B
000A0E4D                            
000A0E4D                            triple_Loop0C:
000A0E4D A7B3                       	dc.b	nD3, nD4
000A0E4F F700 04FF FA               	smpsLoop            $00, $04, triple_Loop0C
000A0E54                            
000A0E54                            triple_Loop0D:
000A0E54 A9B5                       	dc.b	nE3, nE4
000A0E56 F700 04FF FA               	smpsLoop            $00, $04, triple_Loop0D
000A0E5B A5B1 A5B1 A7B3 A7B3        	dc.b	nC3, nC4, nC3, nC4, nD3, nD4, nD3, nD4
000A0E63 F701 02FF DE               	smpsLoop            $01, $02, triple_Loop0B
000A0E68 A4B0 A4B0 A0AC A0AC A203+  	dc.b	nB2, nB3, nB2, nB3, nG2, nG3, nG2, nG3, nA2, $03, nRst, nA3
000A0E74 80A6 80B2 80A4 A6A7 A9A6+  	dc.b	nRst, nCs3, nRst, nCs4, nRst, nB2, nCs3, nD3, nE3, nCs3, nEb3, nF3
000A0E80 AD                         	dc.b	nAb3
000A0E81 F702 02FF C0               	smpsLoop            $02, $02, triple_Loop0B
000A0E86 8018                       	dc.b	nRst, $18
000A0E88 E0C0                       	smpsPan             panCenter, $00
000A0E8C F6FF B1                    	smpsJump triple_FM1
000A0E8F                            
000A0E8F                            ; FM2 Data
000A0E8F                            triple_FM2:
000A0E8F E0C0                       	smpsPan             panCenter, $00
000A0E93 8018                       	dc.b	nRst, $18
000A0E95                            
000A0E95                            triple_Loop07:
000A0E95 C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
000A0EA1 C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
000A0EAD F700 02FF E4               	smpsLoop            $00, $02, triple_Loop07
000A0EB2 8003                       	dc.b	nRst, $03
000A0EB4                            
000A0EB4                            triple_Loop08:
000A0EB4 B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
000A0EBA F700 03FF F6               	smpsLoop            $00, $03, triple_Loop08
000A0EBF B809 BC03 8009             	dc.b	nG4, $09, nB4, $03, nRst, $09
000A0EC5                            
000A0EC5                            triple_Loop09:
000A0EC5 C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
000A0ED1 C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
000A0EDD F700 02FF E4               	smpsLoop            $00, $02, triple_Loop09
000A0EE2 8003                       	dc.b	nRst, $03
000A0EE4                            
000A0EE4                            triple_Loop0A:
000A0EE4 B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
000A0EEA F700 03FF F6               	smpsLoop            $00, $03, triple_Loop0A
000A0EEF B809 BC03 8021             	dc.b	nG4, $09, nB4, $03, nRst, $21
000A0EF5 E0C0                       	smpsPan             panCenter, $00
000A0EF9 F6FF 94                    	smpsJump triple_FM2
000A0EFC                            
000A0EFC                            ; FM3 Data
000A0EFC                            triple_FM3:
000A0EFC E0C0                       	smpsPan             panCenter, $00
000A0F00 8018                       	dc.b	nRst, $18
000A0F02                            
000A0F02                            triple_Loop06:
000A0F02 B830 B7B8 36B3 2A          	dc.b	nG4, $30, nFs4, nG4, $36, nD4, $2A
000A0F09 F700 02FF F5               	smpsLoop            $00, $02, triple_Loop06
000A0F0E 8030 B802 BABC BDBF C1BA+  	dc.b	nRst, $30, nG4, $02, nA4, nB4, nC5, nD5, nE5, nA4, nB4, nCs5
000A0F1A BFC1 C3BC BEC0 C1C3 C5BE+  	dc.b	nD5, nE5, nFs5, nB4, nCs5, nEb5, nE5, nFs5, nAb5, nCs5, nEb5, nF5
000A0F26 C3C5 C7                    	dc.b	nFs5, nAb5, nBb5
000A0F29 F701 02FF D5               	smpsLoop            $01, $02, triple_Loop06
000A0F2E 8018                       	dc.b	nRst, $18
000A0F30 E0C0                       	smpsPan             panCenter, $00
000A0F34 F6FF C6                    	smpsJump triple_FM3
000A0F37                            
000A0F37                            ; FM4 Data
000A0F37                            triple_FM4:
000A0F37 E103                       	smpsAlterNote       $03
000A0F3B E0C0                       	smpsPan             panCenter, $00
000A0F3D 8018                       	dc.b	nRst, $18
000A0F3F                            
000A0F3F                            triple_Loop02:
000A0F3F C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
000A0F4B C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
000A0F57 F700 02FF E4               	smpsLoop            $00, $02, triple_Loop02
000A0F5C 8003                       	dc.b	nRst, $03
000A0F5E                            
000A0F5E                            triple_Loop03:
000A0F5E B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
000A0F64 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop03
000A0F69 B809 BC03 8009             	dc.b	nG4, $09, nB4, $03, nRst, $09
000A0F6F                            
000A0F6F                            triple_Loop04:
000A0F6F C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
000A0F7B C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
000A0F87 F700 02FF E4               	smpsLoop            $00, $02, triple_Loop04
000A0F8C 8003                       	dc.b	nRst, $03
000A0F8E                            
000A0F8E                            triple_Loop05:
000A0F8E B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
000A0F94 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop05
000A0F99 B809 BC03 8021             	dc.b	nG4, $09, nB4, $03, nRst, $21
000A0F9F E0C0                       	smpsPan             panCenter, $00
000A0FA1 F6FF 94                    	smpsJump triple_FM4
000A0FA4                            
000A0FA4                            ; PSG1 Data
000A0FA4                            triple_PSG1:
000A0FA4 8018                       	dc.b	nRst, $18
000A0FA6                            
000A0FA6                            triple_Loop0E:
000A0FA6 A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
000A0FB2 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
000A0FBE 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
000A0FCA 9402 8004                  	dc.b	nG1, $02, nRst, $04
000A0FCE F700 07FF D4               	smpsLoop            $00, $07, triple_Loop0E
000A0FD3 A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
000A0FDF 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
000A0FEB 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
000A0FF7 9402 8007                  	dc.b	nG1, $02, nRst, $07
000A0FFB                            
000A0FFB                            triple_Loop0F:
000A0FFB 9109 9403 800C             	dc.b	nE1, $09, nG1, $03, nRst, $0C
000A1001 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop0F
000A1006 9109 9403 8009             	dc.b	nE1, $09, nG1, $03, nRst, $09
000A100C                            
000A100C                            triple_Loop10:
000A100C A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
000A1018 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
000A1024 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
000A1030 9402 8004                  	dc.b	nG1, $02, nRst, $04
000A1034 F700 07FF D4               	smpsLoop            $00, $07, triple_Loop10
000A1039 A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
000A1045 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
000A1051 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
000A105D 9402 8007                  	dc.b	nG1, $02, nRst, $07
000A1061                            
000A1061                            triple_Loop11:
000A1061 9109 9403 800C             	dc.b	nE1, $09, nG1, $03, nRst, $0C
000A1067 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop11
000A106C 9109 9403 8021             	dc.b	nE1, $09, nG1, $03, nRst, $21
000A1072 F500                       	smpsPSGvoice        $00
000A1074 F6FF 2E                    	smpsJump triple_PSG1
000A1077                            
000A1077                            triple_Voices:
000A1077                            ;	Voice $00
000A1077                            ;	$3A
000A1077                            ;	$01, $07, $01, $01, 	$8E, $8E, $8D, $53, 	$0E, $0E, $0E, $03
000A1077                            ;	$00, $00, $00, $00, 	$1F, $FF, $1F, $0F, 	$18, $28, $27, $80
000A1077                            	smpsVcAlgorithm     $02
000A1077                            	smpsVcFeedback      $07
000A1077                            	smpsVcUnusedBits    $00
000A1077                            	smpsVcDetune        $00, $00, $00, $00
000A1077                            	smpsVcCoarseFreq    $01, $01, $07, $01
000A1077                            	smpsVcRateScale     $01, $02, $02, $02
000A1077                            	smpsVcAttackRate    $13, $0D, $0E, $0E
000A1077                            	smpsVcAmpMod        $00, $00, $00, $00
000A1077                            	smpsVcDecayRate1    $03, $0E, $0E, $0E
000A1077                            	smpsVcDecayRate2    $00, $00, $00, $00
000A1077                            	smpsVcDecayLevel    $00, $01, $0F, $01
000A1077                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000A1077 3A01 0701 018E 8E8D 530E+  	smpsVcTotalLevel    $00, $27, $28, $18
000A1090                            
000A1090                            ;	Voice $01
000A1090                            ;	$20
000A1090                            ;	$7A, $31, $00, $00, 	$9F, $D8, $DC, $DF, 	$10, $0A, $04, $04
000A1090                            ;	$0F, $08, $08, $08, 	$5F, $5F, $BF, $BF, 	$14, $2B, $17, $80
000A1090                            	smpsVcAlgorithm     $00
000A1090                            	smpsVcFeedback      $04
000A1090                            	smpsVcUnusedBits    $00
000A1090                            	smpsVcDetune        $00, $00, $03, $07
000A1090                            	smpsVcCoarseFreq    $00, $00, $01, $0A
000A1090                            	smpsVcRateScale     $03, $03, $03, $02
000A1090                            	smpsVcAttackRate    $1F, $1C, $18, $1F
000A1090                            	smpsVcAmpMod        $00, $00, $00, $00
000A1090                            	smpsVcDecayRate1    $04, $04, $0A, $10
000A1090                            	smpsVcDecayRate2    $08, $08, $08, $0F
000A1090                            	smpsVcDecayLevel    $0B, $0B, $05, $05
000A1090                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000A1090 207A 3100 009F D8DC DF10+  	smpsVcTotalLevel    $00, $17, $2B, $14
000A1090 207A 3100 009F D8DC DF10+  	smpsVcTotalLevel    $00, $17, $2B, $14
000A10AA 00                         		even
000A10AA                            Music88:	incbin	sound\music88.bin; Extra Life
000A1198                            		even
000A1198                            Music89:	incbin	sound\music89.bin; Special Stage
000A5060 00                         		even
000A5060                            Music8A:	incbin	sound\music8A.bin; Title Screen
000A522A                            		even
000A522A                            Music8B:	incbin	sound\music8B.bin; Ending Theme
000A54C4                            		even
000A54C4                            Music8C:	incbin	sound\music8C.bin; VS Boss
000A5762                            		even
000A5762                            Music8D:	incbin	sound\music8D.bin; Final Zone
000A597E                            		even
000A597E                            Music8E:	incbin	sound\fle.bin ;		Act Clear
000A5DEC 00                         		even
000A5DEC                            Music8F:	incbin	sound\music8F.bin ; Game Over
000A642C 00                         		even
000A642C                            Music90:	incbin	sound\music90.bin ; Continue
000A67C6 00                         		even
000A67C6                            Music91:	incbin	sound\music91.bin ; Credits
000A7A94                            		even
000A7A94                            Music92:	incbin	sound\music92.bin ; Drowning
000A7DD6 00                         		even
000A7DD6                            Music93:	incbin	sound\music93.bin ; Chaos Emerald
000A7EA6                            		even
000A7EA6                            Music94:	incbin	sound\music94.bin ; Green Hill Act 2
000A8B7C 00                         		even
000A8B7C                            Music95:	incbin	sound\music95.bin ; Green Hill Act 3
000A8CCC 00                         		even
000A8CCC                            Music96:	incbin	sound\music96.bin ; Labyrinth Act 2
000A8D06 00                         		even
000A8D06                            Music97:	incbin	sound\music97.bin ; Labyrinth Act 3
000A8D40 00                         		even
000A8D40                            Music98:	incbin	sound\music98.bin ; Marble Act 2
000A8D7A 00                         		even
000A8D7A                            Music99:	incbin	sound\music99.bin ; Marble Act 3
000A8DB4 00                         		even
000A8DB4                            Music9A:	incbin	sound\music9A.bin ; Star Light Act 2
000A8DEE 00                         		even
000A8DEE                            Music9B:	incbin	sound\music9B.bin ; Star Light Act 3
000A8E28 00                         		even
000A8E28                            Music9C:	incbin	sound\music9C.bin ; Spring Yard Act 2
000A8E62 00                         		even
000A8E62                            Music9D:	incbin	sound\music9D.bin ; Spring Yard Act 3
000A8E9C 00                         		even
000A8E9C                            Music9E:	incbin	sound\music9E.bin ; Scrap Brain Act 2
000A938C                            		even
000A938C                            Music9F:	include	sound\music9F.asm ; Scrap Brain Act 3
000A938C                            GentleBreeze_Header:
000A938C =00000001                  smpsHeaderStartSong = 1
000A938C 0000                       	smpsHeaderVoice     GentleBreeze_Voices
000A938E 0603                       	smpsHeaderChan      $06, $03
000A9390 0100                       	smpsHeaderTempo     $01, $00
000A9392                            
000A9396 0000 0000                  	smpsHeaderFM        GentleBreeze_FM1,	$00, $00
000A939A 0000 0000                  	smpsHeaderFM        GentleBreeze_FM2,	$00, $00
000A939E 0000 0000                  	smpsHeaderFM        GentleBreeze_FM3,	$00, $00
000A93A2 0000 0000                  	smpsHeaderFM        GentleBreeze_FM4,	$00, $00
000A93A6 0000 0000                  	smpsHeaderFM        GentleBreeze_FM5,	$00, $00
000A93AA 0000 0000 0000             	smpsHeaderPSG       GentleBreeze_PSG1,	$00, $00, $00, $00
000A93B0 0000 0000 0000             	smpsHeaderPSG       GentleBreeze_PSG2,	$00, $00, $00, $00
000A93B6 0000 0000 0000             	smpsHeaderPSG       GentleBreeze_PSG3,	$00, $00, $00, $00
000A93BC                            
000A93BC                            ; PSG3 Data
000A93BC                            GentleBreeze_PSG3:
000A93BC F2                         	smpsStop
000A93BD                            
000A93BD                            ; FM1 Data
000A93BD                            GentleBreeze_FM1:
000A93BF E0C0                       	smpsPan             panCenter, $00
000A93C1 E1FF                       	smpsAlterNote       $FF
000A93C3 C410                       	dc.b	nG5, $10
000A93C5 E60F                       	smpsAlterVol        $0F
000A93C7 C4                         	dc.b	nG5
000A93C8 E6F1                       	smpsAlterVol        $F1
000A93CA E100                       	smpsAlterNote       $00
000A93CC C2                         	dc.b	nF5
000A93CD E60F                       	smpsAlterVol        $0F
000A93CF 08                         	dc.b	$08
000A93D0 E6F1                       	smpsAlterVol        $F1
000A93D2 C010                       	dc.b	nEb5, $10
000A93D4 E60F                       	smpsAlterVol        $0F
000A93D6 C0                         	dc.b	nEb5
000A93D7 E6F1                       	smpsAlterVol        $F1
000A93D9 BDC0 C208 C910             	dc.b	nC5, nEb5, nF5, $08, nC6, $10
000A93DF E60F                       	smpsAlterVol        $0F
000A93E1 C9                         	dc.b	nC6
000A93E2 E6F1                       	smpsAlterVol        $F1
000A93E4 C5                         	dc.b	nAb5
000A93E5 E60F                       	smpsAlterVol        $0F
000A93E7 08                         	dc.b	$08
000A93E8 E6F1                       	smpsAlterVol        $F1
000A93EA C010                       	dc.b	nEb5, $10
000A93EC E60F                       	smpsAlterVol        $0F
000A93EE C0                         	dc.b	nEb5
000A93EF E6F1                       	smpsAlterVol        $F1
000A93F1 C208                       	dc.b	nF5, $08
000A93F3 E1FF                       	smpsAlterNote       $FF
000A93F5 C410                       	dc.b	nG5, $10
000A93F7 E100                       	smpsAlterNote       $00
000A93F9 C5C7                       	dc.b	nAb5, nBb5
000A93FB E60F                       	smpsAlterVol        $0F
000A93FD C7                         	dc.b	nBb5
000A93FE E6F1                       	smpsAlterVol        $F1
000A9400 C5                         	dc.b	nAb5
000A9401 E60F                       	smpsAlterVol        $0F
000A9403 08                         	dc.b	$08
000A9404 E6F1                       	smpsAlterVol        $F1
000A9406 E1FF                       	smpsAlterNote       $FF
000A9408 C410                       	dc.b	nG5, $10
000A940A E60F                       	smpsAlterVol        $0F
000A940C C4                         	dc.b	nG5
000A940D E6F1                       	smpsAlterVol        $F1
000A940F C4                         	dc.b	nG5
000A9410 E100                       	smpsAlterNote       $00
000A9412 C208 C010 C2               	dc.b	nF5, $08, nEb5, $10, nF5
000A9417 E60F                       	smpsAlterVol        $0F
000A9419 C2                         	dc.b	nF5
000A941A E6F1                       	smpsAlterVol        $F1
000A941C E1FF                       	smpsAlterNote       $FF
000A941E C4                         	dc.b	nG5
000A941F E60F                       	smpsAlterVol        $0F
000A9421 08                         	dc.b	$08
000A9422 E6F1                       	smpsAlterVol        $F1
000A9424 10                         	dc.b	$10
000A9425 E60F                       	smpsAlterVol        $0F
000A9427 38                         	dc.b	$38
000A9428 E6F1                       	smpsAlterVol        $F1
000A942A 10                         	dc.b	$10
000A942B E60F                       	smpsAlterVol        $0F
000A942D C4                         	dc.b	nG5
000A942E E6F1                       	smpsAlterVol        $F1
000A9430 E100                       	smpsAlterNote       $00
000A9432 C2                         	dc.b	nF5
000A9433 E60F                       	smpsAlterVol        $0F
000A9435 08                         	dc.b	$08
000A9436 E6F1                       	smpsAlterVol        $F1
000A9438 C010                       	dc.b	nEb5, $10
000A943A E60F                       	smpsAlterVol        $0F
000A943C C0                         	dc.b	nEb5
000A943D E6F1                       	smpsAlterVol        $F1
000A943F BDC0 C208 C910             	dc.b	nC5, nEb5, nF5, $08, nC6, $10
000A9445 E60F                       	smpsAlterVol        $0F
000A9447 C9                         	dc.b	nC6
000A9448 E6F1                       	smpsAlterVol        $F1
000A944A C5                         	dc.b	nAb5
000A944B E60F                       	smpsAlterVol        $0F
000A944D 08                         	dc.b	$08
000A944E E6F1                       	smpsAlterVol        $F1
000A9450 C010                       	dc.b	nEb5, $10
000A9452 E60F                       	smpsAlterVol        $0F
000A9454 C0                         	dc.b	nEb5
000A9455 E6F1                       	smpsAlterVol        $F1
000A9457 C208                       	dc.b	nF5, $08
000A9459 E1FF                       	smpsAlterNote       $FF
000A945B C410                       	dc.b	nG5, $10
000A945D E100                       	smpsAlterNote       $00
000A945F C5C7                       	dc.b	nAb5, nBb5
000A9461 E60F                       	smpsAlterVol        $0F
000A9463 C7                         	dc.b	nBb5
000A9464 E6F1                       	smpsAlterVol        $F1
000A9466 C5                         	dc.b	nAb5
000A9467 E60F                       	smpsAlterVol        $0F
000A9469 08                         	dc.b	$08
000A946A E6F1                       	smpsAlterVol        $F1
000A946C E1FF                       	smpsAlterNote       $FF
000A946E C410                       	dc.b	nG5, $10
000A9470 E60F                       	smpsAlterVol        $0F
000A9472 C4                         	dc.b	nG5
000A9473 E6F1                       	smpsAlterVol        $F1
000A9475 C4                         	dc.b	nG5
000A9476 E100                       	smpsAlterNote       $00
000A9478 C208 C010 C2               	dc.b	nF5, $08, nEb5, $10, nF5
000A947D E60F                       	smpsAlterVol        $0F
000A947F 28                         	dc.b	$28
000A9480 E6F1                       	smpsAlterVol        $F1
000A9482 C008 10                    	dc.b	nEb5, $08, $10
000A9485 E60F                       	smpsAlterVol        $0F
000A9487 21                         	dc.b	$21
000A9488                            
000A9488                            GentleBreeze_Loop12:
000A9488 E7C0 7F                    	dc.b	smpsNoAttack, nEb5, $7F
000A948B F700 08FF F9               	smpsLoop            $00, $08, GentleBreeze_Loop12
000A9490 E717                       	dc.b	smpsNoAttack, $17
000A9492 E6F1                       	smpsAlterVol        $F1
000A9494 E1FF                       	smpsAlterNote       $FF
000A9496 C410                       	dc.b	nG5, $10
000A9498 E60F                       	smpsAlterVol        $0F
000A949A C4                         	dc.b	nG5
000A949B E6F1                       	smpsAlterVol        $F1
000A949D E100                       	smpsAlterNote       $00
000A949F C2                         	dc.b	nF5
000A94A0 E60F                       	smpsAlterVol        $0F
000A94A2 08                         	dc.b	$08
000A94A3 E6F1                       	smpsAlterVol        $F1
000A94A5 C010                       	dc.b	nEb5, $10
000A94A7 E60F                       	smpsAlterVol        $0F
000A94A9 C0                         	dc.b	nEb5
000A94AA E6F1                       	smpsAlterVol        $F1
000A94AC BDC0 C208 C910             	dc.b	nC5, nEb5, nF5, $08, nC6, $10
000A94B2 E60F                       	smpsAlterVol        $0F
000A94B4 C9                         	dc.b	nC6
000A94B5 E6F1                       	smpsAlterVol        $F1
000A94B7 C5                         	dc.b	nAb5
000A94B8 E60F                       	smpsAlterVol        $0F
000A94BA 08                         	dc.b	$08
000A94BB E6F1                       	smpsAlterVol        $F1
000A94BD C010                       	dc.b	nEb5, $10
000A94BF E60F                       	smpsAlterVol        $0F
000A94C1 C0                         	dc.b	nEb5
000A94C2 E6F1                       	smpsAlterVol        $F1
000A94C4 C208                       	dc.b	nF5, $08
000A94C6 E1FF                       	smpsAlterNote       $FF
000A94C8 C410                       	dc.b	nG5, $10
000A94CA E100                       	smpsAlterNote       $00
000A94CC C5C7                       	dc.b	nAb5, nBb5
000A94CE E60F                       	smpsAlterVol        $0F
000A94D0 C7                         	dc.b	nBb5
000A94D1 E6F1                       	smpsAlterVol        $F1
000A94D3 C5                         	dc.b	nAb5
000A94D4 E60F                       	smpsAlterVol        $0F
000A94D6 08                         	dc.b	$08
000A94D7 E6F1                       	smpsAlterVol        $F1
000A94D9 E1FF                       	smpsAlterNote       $FF
000A94DB C410                       	dc.b	nG5, $10
000A94DD E60F                       	smpsAlterVol        $0F
000A94DF C4                         	dc.b	nG5
000A94E0 E6F1                       	smpsAlterVol        $F1
000A94E2 C4                         	dc.b	nG5
000A94E3 E100                       	smpsAlterNote       $00
000A94E5 C208 C010 C2               	dc.b	nF5, $08, nEb5, $10, nF5
000A94EA E60F                       	smpsAlterVol        $0F
000A94EC C2                         	dc.b	nF5
000A94ED E6F1                       	smpsAlterVol        $F1
000A94EF E1FF                       	smpsAlterNote       $FF
000A94F1 C4                         	dc.b	nG5
000A94F2 E60F                       	smpsAlterVol        $0F
000A94F4 08                         	dc.b	$08
000A94F5 E6F1                       	smpsAlterVol        $F1
000A94F7 10                         	dc.b	$10
000A94F8 E60F                       	smpsAlterVol        $0F
000A94FA 38                         	dc.b	$38
000A94FB E6F1                       	smpsAlterVol        $F1
000A94FD 10                         	dc.b	$10
000A94FE E60F                       	smpsAlterVol        $0F
000A9500 C4                         	dc.b	nG5
000A9501 E6F1                       	smpsAlterVol        $F1
000A9503 E100                       	smpsAlterNote       $00
000A9505 C2                         	dc.b	nF5
000A9506 E60F                       	smpsAlterVol        $0F
000A9508 08                         	dc.b	$08
000A9509 E6F1                       	smpsAlterVol        $F1
000A950B C010                       	dc.b	nEb5, $10
000A950D E60F                       	smpsAlterVol        $0F
000A950F C0                         	dc.b	nEb5
000A9510 E6F1                       	smpsAlterVol        $F1
000A9512 BDC0 C208 C910             	dc.b	nC5, nEb5, nF5, $08, nC6, $10
000A9518 E60F                       	smpsAlterVol        $0F
000A951A C9                         	dc.b	nC6
000A951B E6F1                       	smpsAlterVol        $F1
000A951D C5                         	dc.b	nAb5
000A951E E60F                       	smpsAlterVol        $0F
000A9520 08                         	dc.b	$08
000A9521 E6F1                       	smpsAlterVol        $F1
000A9523 C010                       	dc.b	nEb5, $10
000A9525 E60F                       	smpsAlterVol        $0F
000A9527 C0                         	dc.b	nEb5
000A9528 E6F1                       	smpsAlterVol        $F1
000A952A C208                       	dc.b	nF5, $08
000A952C E1FF                       	smpsAlterNote       $FF
000A952E C410                       	dc.b	nG5, $10
000A9530 E100                       	smpsAlterNote       $00
000A9532 C5C7                       	dc.b	nAb5, nBb5
000A9534 E60F                       	smpsAlterVol        $0F
000A9536 C7                         	dc.b	nBb5
000A9537 E6F1                       	smpsAlterVol        $F1
000A9539 C5                         	dc.b	nAb5
000A953A E60F                       	smpsAlterVol        $0F
000A953C 08                         	dc.b	$08
000A953D E6F1                       	smpsAlterVol        $F1
000A953F E1FF                       	smpsAlterNote       $FF
000A9541 C410                       	dc.b	nG5, $10
000A9543 E60F                       	smpsAlterVol        $0F
000A9545 C4                         	dc.b	nG5
000A9546 E6F1                       	smpsAlterVol        $F1
000A9548 C4                         	dc.b	nG5
000A9549 E100                       	smpsAlterNote       $00
000A954B C208 C010 C2               	dc.b	nF5, $08, nEb5, $10, nF5
000A9550 E60F                       	smpsAlterVol        $0F
000A9552 28                         	dc.b	$28
000A9553 E6F1                       	smpsAlterVol        $F1
000A9555 C008 10                    	dc.b	nEb5, $08, $10
000A9558 E60F                       	smpsAlterVol        $0F
000A955A 21                         	dc.b	$21
000A955B E0C0                       	smpsPan             panCenter, $00
000A955D F6FF 29                    	smpsJump            GentleBreeze_Loop12
000A9560                            
000A9560                            ; FM2 Data
000A9560                            GentleBreeze_FM2:
000A9562 E60C                       	smpsAlterVol        $0C
000A9564 E0C0                       	smpsPan             panCenter, $00
000A9566 9E20 A018 A508 8040 A020+  	dc.b	nF2, $20, nG2, $18, nC3, $08, nRst, $40, nG2, $20, nF2, $18
000A9572 A508 8020 A010 9E9E 20A0+  	dc.b	nC3, $08, nRst, $20, nG2, $10, nF2, nF2, $20, nG2, $18, nC3
000A957E 0880 409E 38A0 489E 20A0+  	dc.b	$08, nRst, $40, nF2, $38, nG2, $48, nF2, $20, nG2, $18, nC3
000A958A 0880 40A0 209E 18A5 0880+  	dc.b	$08, nRst, $40, nG2, $20, nF2, $18, nC3, $08, nRst, $20, nG2
000A9596 109E 9E20 A018 A508 8040+  	dc.b	$10, nF2, nF2, $20, nG2, $18, nC3, $08, nRst, $40, nF2, $38
000A95A2 A039                       	dc.b	nG2, $39
000A95A4                            
000A95A4                            GentleBreeze_Jump04:
000A95A4 E7A0 0F                    	dc.b	smpsNoAttack, nG2, $0F
000A95A7                            
000A95A7                            GentleBreeze_Loop11:
000A95A7 A118 0880 10A1 2008 A09E+  	dc.b	nAb2, $18, $08, nRst, $10, nAb2, $20, $08, nG2, nF2, nFs2, nG2
000A95B3 A1A0 1808 8010 A020 0880+  	dc.b	nAb2, nG2, $18, $08, nRst, $10, nG2, $20, $08, nRst, nG2, nC3
000A95BF 189E A020 A510 A008 A518+  	dc.b	$18, nF2, nG2, $20, nC3, $10, nG2, $08, nC3, $18, nG2, $08
000A95CB 9FA0 9C18 979C 2008 9EA2+  	dc.b	nFs2, nG2, nEb2, $18, nBb1, nEb2, $20, $08, nF2, nA2, nEb3, nB2
000A95D7 A3                         	dc.b	nBb2
000A95D8 F700 02FF CB               	smpsLoop            $00, $02, GentleBreeze_Loop11
000A95DD 9E20 A018 A508 8040 A020+  	dc.b	nF2, $20, nG2, $18, nC3, $08, nRst, $40, nG2, $20, nF2, $18
000A95E9 A508 8020 A010 9E9E 20A0+  	dc.b	nC3, $08, nRst, $20, nG2, $10, nF2, nF2, $20, nG2, $18, nC3
000A95F5 0880 409E 38A0 489E 20A0+  	dc.b	$08, nRst, $40, nF2, $38, nG2, $48, nF2, $20, nG2, $18, nC3
000A9601 0880 40A0 209E 18A5 0880+  	dc.b	$08, nRst, $40, nG2, $20, nF2, $18, nC3, $08, nRst, $20, nG2
000A960D 109E 9E20 A018 A508 8040+  	dc.b	$10, nF2, nF2, $20, nG2, $18, nC3, $08, nRst, $40, nF2, $38
000A9619 A039                       	dc.b	nG2, $39
000A961B E0C0                       	smpsPan             panCenter, $00
000A961D F6FF 85                    	smpsJump            GentleBreeze_Jump04
000A9620                            
000A9620                            ; FM3 Data
000A9620                            GentleBreeze_FM3:
000A9622 E0C0                       	smpsPan             panCenter, $00
000A9624 807F 7F7F 7F04             	dc.b	nRst, $7F, $7F, $7F, $7F, $04
000A962C E616                       	smpsAlterVol        $16
000A962E F000 0207 03               	smpsModSet          $00, $02, $07, $03
000A9633                            
000A9633                            GentleBreeze_Loop0F:
000A9633 C008 BDC9                  	dc.b	nEb5, $08, nC5, nC6
000A9637 E1FF                       	smpsAlterNote       $FF
000A9639 C4                         	dc.b	nG5
000A963A E100                       	smpsAlterNote       $00
000A963C C0BB BDC0 10               	dc.b	nEb5, nBb4, nC5, nEb5, $10
000A9641 E608                       	smpsAlterVol        $08
000A9643 C080 08                    	dc.b	nEb5, nRst, $08
000A9646 E6F8                       	smpsAlterVol        $F8
000A9648 C7                         	dc.b	nBb5
000A9649 E1FF                       	smpsAlterNote       $FF
000A964B C4                         	dc.b	nG5
000A964C E100                       	smpsAlterNote       $00
000A964E C0BB                       	dc.b	nEb5, nBb4
000A9650 F700 02FF DF               	smpsLoop            $00, $02, GentleBreeze_Loop0F
000A9655 C0BD C9                    	dc.b	nEb5, nC5, nC6
000A9658 E1FF                       	smpsAlterNote       $FF
000A965A C4                         	dc.b	nG5
000A965B E100                       	smpsAlterNote       $00
000A965D C0BB BDC0 10               	dc.b	nEb5, nBb4, nC5, nEb5, $10
000A9662 E608                       	smpsAlterVol        $08
000A9664 C080 08                    	dc.b	nEb5, nRst, $08
000A9667 E6F8                       	smpsAlterVol        $F8
000A9669 E1FF                       	smpsAlterNote       $FF
000A966B C4                         	dc.b	nG5
000A966C E100                       	smpsAlterNote       $00
000A966E C2C0 BBC0 BBC7 C5          	dc.b	nF5, nEb5, nBb4, nEb5, nBb4, nBb5, nAb5
000A9675 E1FF                       	smpsAlterNote       $FF
000A9677 C4                         	dc.b	nG5
000A9678 E100                       	smpsAlterNote       $00
000A967A C2C0 BBBB C0               	dc.b	nF5, nEb5, nBb4, nBb4, nEb5
000A967F E1FF                       	smpsAlterNote       $FF
000A9681 C4                         	dc.b	nG5
000A9682 E100                       	smpsAlterNote       $00
000A9684 C7                         	dc.b	nBb5
000A9685 E1FF                       	smpsAlterNote       $FF
000A9687 C4                         	dc.b	nG5
000A9688 E100                       	smpsAlterNote       $00
000A968A C2C0 01                    	dc.b	nF5, nEb5, $01
000A968D                            
000A968D                            GentleBreeze_Jump03:
000A968D E7C0 07BB 08               	dc.b	smpsNoAttack, nEb5, $07, nBb4, $08
000A9694 E6FA                       	smpsAlterVol        $FA
000A9696 F4                         	smpsModOff
000A9697 E1FF                       	smpsAlterNote       $FF
000A9699 B850                       	dc.b	nG4, $50
000A969B E100                       	smpsAlterNote       $00
000A969D B408 B1B4 B5B6 AF18 B510+  	dc.b	nEb4, $08, nC4, nEb4, nE4, nF4, nBb3, $18, nE4, $10, nF4, $08
000A96A9 E1FF                       	smpsAlterNote       $FF
000A96AB B810                       	dc.b	nG4, $10
000A96AD E100                       	smpsAlterNote       $00
000A96AF BB18 B908 80               	dc.b	nBb4, $18, nAb4, $08, nRst
000A96B4 E1FF                       	smpsAlterNote       $FF
000A96B6 B8                         	dc.b	nG4
000A96B7 E100                       	smpsAlterNote       $00
000A96B9 B610                       	dc.b	nF4, $10
000A96BB E1FF                       	smpsAlterNote       $FF
000A96BD B850                       	dc.b	nG4, $50
000A96BF E100                       	smpsAlterNote       $00
000A96C1 B608 B410 08B6 AF60        	dc.b	nF4, $08, nEb4, $10, $08, nF4, nBb3, $60
000A96C9 E1FF                       	smpsAlterNote       $FF
000A96CB AC08                       	dc.b	nG3, $08
000A96CD E100                       	smpsAlterNote       $00
000A96CF AFB3 B4B6 B7               	dc.b	nBb3, nD4, nEb4, nF4, nFs4
000A96D4 E1FF                       	smpsAlterNote       $FF
000A96D6 B850                       	dc.b	nG4, $50
000A96D8 E100                       	smpsAlterNote       $00
000A96DA BB08                       	dc.b	nBb4, $08
000A96DC E1FF                       	smpsAlterNote       $FF
000A96DE B8                         	dc.b	nG4
000A96DF E100                       	smpsAlterNote       $00
000A96E1 BDBB B6                    	dc.b	nC5, nBb4, nF4
000A96E4 E1FF                       	smpsAlterNote       $FF
000A96E6 B810 08                    	dc.b	nG4, $10, $08
000A96E9 E100                       	smpsAlterNote       $00
000A96EB B6                         	dc.b	nF4
000A96EC E1FF                       	smpsAlterNote       $FF
000A96EE B880                       	dc.b	nG4, nRst
000A96F0 E100                       	smpsAlterNote       $00
000A96F2 BBB9 BB                    	dc.b	nBb4, nAb4, nBb4
000A96F5 E1FF                       	smpsAlterNote       $FF
000A96F7 B810                       	dc.b	nG4, $10
000A96F9 E100                       	smpsAlterNote       $00
000A96FB B308 B4B1 AFB4 B5          	dc.b	nD4, $08, nEb4, nC4, nBb3, nEb4, nE4
000A9702 E1FF                       	smpsAlterNote       $FF
000A9704 B87F E77F E702 807F 7F7F+  	dc.b	nG4, $7F, smpsNoAttack, $7F, smpsNoAttack, $02, nRst, $7F, $7F, $7F, $7F, $04
000A9712 E606                       	smpsAlterVol        $06
000A9714 F000 0207 03               	smpsModSet          $00, $02, $07, $03
000A9719 E100                       	smpsAlterNote       $00
000A971B                            
000A971B                            GentleBreeze_Loop10:
000A971B C008 BDC9                  	dc.b	nEb5, $08, nC5, nC6
000A971F E1FF                       	smpsAlterNote       $FF
000A9721 C4                         	dc.b	nG5
000A9722 E100                       	smpsAlterNote       $00
000A9724 C0BB BDC0 10               	dc.b	nEb5, nBb4, nC5, nEb5, $10
000A9729 E608                       	smpsAlterVol        $08
000A972B C080 08                    	dc.b	nEb5, nRst, $08
000A972E E6F8                       	smpsAlterVol        $F8
000A9730 C7                         	dc.b	nBb5
000A9731 E1FF                       	smpsAlterNote       $FF
000A9733 C4                         	dc.b	nG5
000A9734 E100                       	smpsAlterNote       $00
000A9736 C0BB                       	dc.b	nEb5, nBb4
000A9738 F700 02FF DF               	smpsLoop            $00, $02, GentleBreeze_Loop10
000A973D C0BD C9                    	dc.b	nEb5, nC5, nC6
000A9740 E1FF                       	smpsAlterNote       $FF
000A9742 C4                         	dc.b	nG5
000A9743 E100                       	smpsAlterNote       $00
000A9745 C0BB BDC0 10               	dc.b	nEb5, nBb4, nC5, nEb5, $10
000A974A E608                       	smpsAlterVol        $08
000A974C C080 08                    	dc.b	nEb5, nRst, $08
000A974F E6F8                       	smpsAlterVol        $F8
000A9751 E1FF                       	smpsAlterNote       $FF
000A9753 C4                         	dc.b	nG5
000A9754 E100                       	smpsAlterNote       $00
000A9756 C2C0 BBC0 BBC7 C5          	dc.b	nF5, nEb5, nBb4, nEb5, nBb4, nBb5, nAb5
000A975D E1FF                       	smpsAlterNote       $FF
000A975F C4                         	dc.b	nG5
000A9760 E100                       	smpsAlterNote       $00
000A9762 C2C0 BBBB C0               	dc.b	nF5, nEb5, nBb4, nBb4, nEb5
000A9767 E1FF                       	smpsAlterNote       $FF
000A9769 C4                         	dc.b	nG5
000A976A E100                       	smpsAlterNote       $00
000A976C C7                         	dc.b	nBb5
000A976D E1FF                       	smpsAlterNote       $FF
000A976F C4                         	dc.b	nG5
000A9770 E100                       	smpsAlterNote       $00
000A9772 C2C0 01                    	dc.b	nF5, nEb5, $01
000A9775 E0C0                       	smpsPan             panCenter, $00
000A9777 F1                         	smpsModOn
000A9778 F6FF 13                    	smpsJump            GentleBreeze_Jump03
000A977B                            
000A977B                            ; FM4 Data
000A977B                            GentleBreeze_FM4:
000A977D E0C0                       	smpsPan             panCenter, $00
000A977F 80                         	dc.b	nRst
000A9780                            
000A9780                            GentleBreeze_Loop0D:
000A9780 7F                         	dc.b	$7F
000A9781 F700 07FF FB               	smpsLoop            $00, $07, GentleBreeze_Loop0D
000A9786 77                         	dc.b	$77
000A9789 E609                       	smpsAlterVol        $09
000A978B C001                       	dc.b	nEb5, $01
000A978D                            
000A978D                            GentleBreeze_Jump02:
000A978D E7C0 07C2 08               	dc.b	smpsNoAttack, nEb5, $07, nF5, $08
000A9792 E607                       	smpsAlterVol        $07
000A9794 E1FF                       	smpsAlterNote       $FF
000A9796 C450                       	dc.b	nG5, $50
000A9798 E100                       	smpsAlterNote       $00
000A979A C008 BDC0 C1C2 BB18 C110+  	dc.b	nEb5, $08, nC5, nEb5, nE5, nF5, nBb4, $18, nE5, $10, nF5, $08
000A97A6 E1FF                       	smpsAlterNote       $FF
000A97A8 C410                       	dc.b	nG5, $10
000A97AA E100                       	smpsAlterNote       $00
000A97AC C718 C508 80               	dc.b	nBb5, $18, nAb5, $08, nRst
000A97B1 E1FF                       	smpsAlterNote       $FF
000A97B3 C4                         	dc.b	nG5
000A97B4 E100                       	smpsAlterNote       $00
000A97B6 C210                       	dc.b	nF5, $10
000A97B8 E1FF                       	smpsAlterNote       $FF
000A97BA C450                       	dc.b	nG5, $50
000A97BC E100                       	smpsAlterNote       $00
000A97BE C208 C010 08C2 BB60        	dc.b	nF5, $08, nEb5, $10, $08, nF5, nBb4, $60
000A97C6 E1FF                       	smpsAlterNote       $FF
000A97C8 B808                       	dc.b	nG4, $08
000A97CA E100                       	smpsAlterNote       $00
000A97CC BBBF C0C2 C3               	dc.b	nBb4, nD5, nEb5, nF5, nFs5
000A97D1 E1FF                       	smpsAlterNote       $FF
000A97D3 C450                       	dc.b	nG5, $50
000A97D5 E100                       	smpsAlterNote       $00
000A97D7 C708                       	dc.b	nBb5, $08
000A97D9 E1FF                       	smpsAlterNote       $FF
000A97DB C4                         	dc.b	nG5
000A97DC E100                       	smpsAlterNote       $00
000A97DE C9C7 C2                    	dc.b	nC6, nBb5, nF5
000A97E1 E1FF                       	smpsAlterNote       $FF
000A97E3 C410 08                    	dc.b	nG5, $10, $08
000A97E6 E100                       	smpsAlterNote       $00
000A97E8 C2                         	dc.b	nF5
000A97E9 E1FF                       	smpsAlterNote       $FF
000A97EB C480                       	dc.b	nG5, nRst
000A97ED E100                       	smpsAlterNote       $00
000A97EF C7C5 C7                    	dc.b	nBb5, nAb5, nBb5
000A97F2 E1FF                       	smpsAlterNote       $FF
000A97F4 C410                       	dc.b	nG5, $10
000A97F6 E100                       	smpsAlterNote       $00
000A97F8 BF08 C0BD BBC0 C1          	dc.b	nD5, $08, nEb5, nC5, nBb4, nEb5, nE5
000A97FF E1FF                       	smpsAlterNote       $FF
000A9801 C47F E701 7FE7 0180        	dc.b	nG5, $7F, smpsNoAttack, $01, $7F, smpsNoAttack, $01, nRst
000A9809                            
000A9809                            GentleBreeze_Loop0E:
000A9809 7F                         	dc.b	$7F
000A980A F700 07FF FB               	smpsLoop            $00, $07, GentleBreeze_Loop0E
000A980F 77                         	dc.b	$77
000A9810 E100                       	smpsAlterNote       $00
000A9812 C001                       	dc.b	nEb5, $01
000A9814 E6F9                       	smpsAlterVol        $F9
000A9816 E0C0                       	smpsPan             panCenter, $00
000A9818 E100                       	smpsAlterNote       $00
000A981A F6FF 71                    	smpsJump            GentleBreeze_Jump02
000A981D                            
000A981D                            ; FM5 Data
000A981D                            GentleBreeze_FM5:
000A981F E0C0                       	smpsPan             panCenter, $00
000A9821 A5                         	dc.b	nC3
000A9822                            
000A9822                            GentleBreeze_Loop06:
000A9822 10                         	dc.b	$10
000A9823 E607                       	smpsAlterVol        $07
000A9825 A5                         	dc.b	nC3
000A9826 E6F9                       	smpsAlterVol        $F9
000A9828 08                         	dc.b	$08
000A9829 E607                       	smpsAlterVol        $07
000A982B A5                         	dc.b	nC3
000A982C E608                       	smpsAlterVol        $08
000A982E A5                         	dc.b	nC3
000A982F E6F1                       	smpsAlterVol        $F1
000A9831 18                         	dc.b	$18
000A9832 E607                       	smpsAlterVol        $07
000A9834 10                         	dc.b	$10
000A9835 E608                       	smpsAlterVol        $08
000A9837 A5                         	dc.b	nC3
000A9838 E6F1                       	smpsAlterVol        $F1
000A983A A5                         	dc.b	nC3
000A983B F700 03FF E3               	smpsLoop            $00, $03, GentleBreeze_Loop06
000A9840 A5                         	dc.b	nC3
000A9841                            
000A9841                            GentleBreeze_Loop07:
000A9841 E607                       	smpsAlterVol        $07
000A9843 A5                         	dc.b	nC3
000A9844 E6F9                       	smpsAlterVol        $F9
000A9846 08                         	dc.b	$08
000A9847 E607                       	smpsAlterVol        $07
000A9849 A5                         	dc.b	nC3
000A984A E608                       	smpsAlterVol        $08
000A984C A5                         	dc.b	nC3
000A984D E6F1                       	smpsAlterVol        $F1
000A984F 10                         	dc.b	$10
000A9850 F700 02FF ED               	smpsLoop            $00, $02, GentleBreeze_Loop07
000A9855                            
000A9855                            GentleBreeze_Loop08:
000A9855 A5                         	dc.b	nC3
000A9856 E607                       	smpsAlterVol        $07
000A9858 A5                         	dc.b	nC3
000A9859 E6F9                       	smpsAlterVol        $F9
000A985B 08                         	dc.b	$08
000A985C E607                       	smpsAlterVol        $07
000A985E A5                         	dc.b	nC3
000A985F E608                       	smpsAlterVol        $08
000A9861 A5                         	dc.b	nC3
000A9862 E6F1                       	smpsAlterVol        $F1
000A9864 18                         	dc.b	$18
000A9865 E607                       	smpsAlterVol        $07
000A9867 10                         	dc.b	$10
000A9868 E608                       	smpsAlterVol        $08
000A986A A5                         	dc.b	nC3
000A986B E6F1                       	smpsAlterVol        $F1
000A986D A5                         	dc.b	nC3
000A986E F700 03FF E3               	smpsLoop            $00, $03, GentleBreeze_Loop08
000A9873 A5                         	dc.b	nC3
000A9874 E607                       	smpsAlterVol        $07
000A9876 A5                         	dc.b	nC3
000A9877 E6F9                       	smpsAlterVol        $F9
000A9879 08                         	dc.b	$08
000A987A E607                       	smpsAlterVol        $07
000A987C A5                         	dc.b	nC3
000A987D E608                       	smpsAlterVol        $08
000A987F A5                         	dc.b	nC3
000A9880 E6F1                       	smpsAlterVol        $F1
000A9882 10                         	dc.b	$10
000A9883 E607                       	smpsAlterVol        $07
000A9885 A5                         	dc.b	nC3
000A9886 E6F9                       	smpsAlterVol        $F9
000A9888 08                         	dc.b	$08
000A9889 E607                       	smpsAlterVol        $07
000A988B A5                         	dc.b	nC3
000A988C E608                       	smpsAlterVol        $08
000A988E A5                         	dc.b	nC3
000A988F E6F1                       	smpsAlterVol        $F1
000A9891 01                         	dc.b	$01
000A9892                            
000A9892                            GentleBreeze_Jump01:
000A9892 E7A5 0F                    	dc.b	smpsNoAttack, nC3, $0F
000A9895 E607                       	smpsAlterVol        $07
000A9897                            
000A9897                            GentleBreeze_Loop09:
000A9897 10                         	dc.b	$10
000A9898 E608                       	smpsAlterVol        $08
000A989A A5                         	dc.b	nC3
000A989B E6F1                       	smpsAlterVol        $F1
000A989D 08                         	dc.b	$08
000A989E E60F                       	smpsAlterVol        $0F
000A98A0 18                         	dc.b	$18
000A98A1 E6F8                       	smpsAlterVol        $F8
000A98A3 F700 0FFF F0               	smpsLoop            $00, $0F, GentleBreeze_Loop09
000A98A8 10                         	dc.b	$10
000A98A9 E608                       	smpsAlterVol        $08
000A98AB A5                         	dc.b	nC3
000A98AC E6F1                       	smpsAlterVol        $F1
000A98AE 08                         	dc.b	$08
000A98AF E60F                       	smpsAlterVol        $0F
000A98B1 18                         	dc.b	$18
000A98B2 E6F1                       	smpsAlterVol        $F1
000A98B4                            
000A98B4                            GentleBreeze_Loop0A:
000A98B4 10                         	dc.b	$10
000A98B5 E607                       	smpsAlterVol        $07
000A98B7 A5                         	dc.b	nC3
000A98B8 E6F9                       	smpsAlterVol        $F9
000A98BA 08                         	dc.b	$08
000A98BB E607                       	smpsAlterVol        $07
000A98BD A5                         	dc.b	nC3
000A98BE E608                       	smpsAlterVol        $08
000A98C0 A5                         	dc.b	nC3
000A98C1 E6F1                       	smpsAlterVol        $F1
000A98C3 18                         	dc.b	$18
000A98C4 E607                       	smpsAlterVol        $07
000A98C6 10                         	dc.b	$10
000A98C7 E608                       	smpsAlterVol        $08
000A98C9 A5                         	dc.b	nC3
000A98CA E6F1                       	smpsAlterVol        $F1
000A98CC A5                         	dc.b	nC3
000A98CD F700 03FF E3               	smpsLoop            $00, $03, GentleBreeze_Loop0A
000A98D2 A5                         	dc.b	nC3
000A98D3                            
000A98D3                            GentleBreeze_Loop0B:
000A98D3 E607                       	smpsAlterVol        $07
000A98D5 A5                         	dc.b	nC3
000A98D6 E6F9                       	smpsAlterVol        $F9
000A98D8 08                         	dc.b	$08
000A98D9 E607                       	smpsAlterVol        $07
000A98DB A5                         	dc.b	nC3
000A98DC E608                       	smpsAlterVol        $08
000A98DE A5                         	dc.b	nC3
000A98DF E6F1                       	smpsAlterVol        $F1
000A98E1 10                         	dc.b	$10
000A98E2 F700 02FF ED               	smpsLoop            $00, $02, GentleBreeze_Loop0B
000A98E7                            
000A98E7                            GentleBreeze_Loop0C:
000A98E7 A5                         	dc.b	nC3
000A98E8 E607                       	smpsAlterVol        $07
000A98EA A5                         	dc.b	nC3
000A98EB E6F9                       	smpsAlterVol        $F9
000A98ED 08                         	dc.b	$08
000A98EE E607                       	smpsAlterVol        $07
000A98F0 A5                         	dc.b	nC3
000A98F1 E608                       	smpsAlterVol        $08
000A98F3 A5                         	dc.b	nC3
000A98F4 E6F1                       	smpsAlterVol        $F1
000A98F6 18                         	dc.b	$18
000A98F7 E607                       	smpsAlterVol        $07
000A98F9 10                         	dc.b	$10
000A98FA E608                       	smpsAlterVol        $08
000A98FC A5                         	dc.b	nC3
000A98FD E6F1                       	smpsAlterVol        $F1
000A98FF A5                         	dc.b	nC3
000A9900 F700 03FF E3               	smpsLoop            $00, $03, GentleBreeze_Loop0C
000A9905 A5                         	dc.b	nC3
000A9906 E607                       	smpsAlterVol        $07
000A9908 A5                         	dc.b	nC3
000A9909 E6F9                       	smpsAlterVol        $F9
000A990B 08                         	dc.b	$08
000A990C E607                       	smpsAlterVol        $07
000A990E A5                         	dc.b	nC3
000A990F E608                       	smpsAlterVol        $08
000A9911 A5                         	dc.b	nC3
000A9912 E6F1                       	smpsAlterVol        $F1
000A9914 10                         	dc.b	$10
000A9915 E607                       	smpsAlterVol        $07
000A9917 A5                         	dc.b	nC3
000A9918 E6F9                       	smpsAlterVol        $F9
000A991A 08                         	dc.b	$08
000A991B E607                       	smpsAlterVol        $07
000A991D A5                         	dc.b	nC3
000A991E E608                       	smpsAlterVol        $08
000A9920 A5                         	dc.b	nC3
000A9921 E6F1                       	smpsAlterVol        $F1
000A9923 01                         	dc.b	$01
000A9924 E0C0                       	smpsPan             panCenter, $00
000A9926 F6FF 6A                    	smpsJump            GentleBreeze_Jump01
000A9929                            
000A9929                            ; DAC Data
000A9929                            GentleBreeze_DAC:
000A9929 81                         	dc.b	dKick
000A992A                            
000A992A                            GentleBreeze_Loop00:
000A992A 2018 2810 0881             	dc.b	$20, $18, $28, $10, $08, dKick
000A9930 F700 02FF F6               	smpsLoop            $00, $02, GentleBreeze_Loop00
000A9935 2018 7F80 2988 0889 8A8B+  	dc.b	$20, $18, $7F, nRst, $29, dHiTimpani, $08, dMidTimpani, dLowTimpani, dVLowTimpani, dKick
000A9940                            
000A9940                            GentleBreeze_Loop01:
000A9940 2018 2810 0881             	dc.b	$20, $18, $28, $10, $08, dKick
000A9946 F700 02FF F6               	smpsLoop            $00, $02, GentleBreeze_Loop01
000A994B 2018 7F80 2988 0889 8A01   	dc.b	$20, $18, $7F, nRst, $29, dHiTimpani, $08, dMidTimpani, dLowTimpani, $01
000A9955                            
000A9955                            GentleBreeze_Jump00:
000A9955 8007 8B08                  	dc.b	nRst, $07, dVLowTimpani, $08
000A9959                            
000A9959                            GentleBreeze_Loop02:
000A9959 81                         	dc.b	dKick
000A995A                            
000A995A                            GentleBreeze_Loop03:
000A995A 1008 8182 2081 1008 8182+  	dc.b	$10, $08, dKick, dSnare, $20, dKick, $10, $08, dKick, dSnare, $10, dMidTimpani
000A9966 088A                       	dc.b	$08, dLowTimpani
000A9968 F700 03FF ED               	smpsLoop            $00, $03, GentleBreeze_Loop02
000A996D 8110 0881 8210 8808 8982+  	dc.b	dKick, $10, $08, dKick, dSnare, $10, dHiTimpani, $08, dMidTimpani, dSnare, dLowTimpani, dVLowTimpani
000A9979 1082 0881 18               	dc.b	$10, dSnare, $08, dKick, $18
000A997E F701 02FF D8               	smpsLoop            $01, $02, GentleBreeze_Loop03
000A9983                            
000A9983                            GentleBreeze_Loop04:
000A9983 2018 2810 0881             	dc.b	$20, $18, $28, $10, $08, dKick
000A9989 F700 02FF F6               	smpsLoop            $00, $02, GentleBreeze_Loop04
000A998E 2018 7F80 2988 0889 8A8B+  	dc.b	$20, $18, $7F, nRst, $29, dHiTimpani, $08, dMidTimpani, dLowTimpani, dVLowTimpani, dKick
000A9999                            
000A9999                            GentleBreeze_Loop05:
000A9999 2018 2810 0881             	dc.b	$20, $18, $28, $10, $08, dKick
000A999F F700 02FF F6               	smpsLoop            $00, $02, GentleBreeze_Loop05
000A99A4 2018 7F80 2988 0889 8A01   	dc.b	$20, $18, $7F, nRst, $29, dHiTimpani, $08, dMidTimpani, dLowTimpani, $01
000A99AE F6FF A5                    	smpsJump            GentleBreeze_Jump00
000A99B1                            
000A99B1                            ; PSG 1 Data
000A99B1                            GentleBreeze_PSG1:
000A99B1 80                         	dc.b	nRst
000A99B2                            
000A99B2                            GentleBreeze_LoopPSG02:
000A99B2 7F                         	dc.b	$7F
000A99B3 F700 08FF FB               	smpsLoop            $00, $08, GentleBreeze_LoopPSG02
000A99B8 08                         	dc.b	$08
000A99B9 EC04                       	smpsPSGAlterVol     $04
000A99BB                            
000A99BB                            GentleBreeze_JumpPSG01:
000A99BB A37F A07F 019E 7F7F 02A3+  	dc.b	nBb2, $7F, nG2, $7F, $01, nF2, $7F, $7F, $02, nBb2, $7F, $01
000A99C7 A07F 019E 7F7F 0280        	dc.b	nG2, $7F, $01, nF2, $7F, $7F, $02, nRst
000A99CF                            
000A99CF                            GentleBreeze_LoopPSG03:
000A99CF 7F                         	dc.b	$7F
000A99D0 F700 08FF FB               	smpsLoop            $00, $08, GentleBreeze_LoopPSG03
000A99D5 08A3 01                    	dc.b	$08, nBb2, $01
000A99D8 F6FF E1                    	smpsJump            GentleBreeze_JumpPSG01
000A99DB                            
000A99DB                            ; PSG2 Data
000A99DB                            GentleBreeze_PSG2:
000A99DB 80                         	dc.b	nRst
000A99DC                            
000A99DC                            GentleBreeze_LoopPSG00:
000A99DC 7F                         	dc.b	$7F
000A99DD F700 08FF FB               	smpsLoop            $00, $08, GentleBreeze_LoopPSG00
000A99E2 08                         	dc.b	$08
000A99E3 EC04                       	smpsPSGAlterVol     $04
000A99E5                            
000A99E5                            GentleBreeze_JumpPSG00:
000A99E5 A87F A77F 01A5 7F7F 02A8+  	dc.b	nEb3, $7F, nD3, $7F, $01, nC3, $7F, $7F, $02, nEb3, $7F, $01
000A99F1 A77F 01A5 7F7F 0280        	dc.b	nD3, $7F, $01, nC3, $7F, $7F, $02, nRst
000A99F9                            
000A99F9                            GentleBreeze_LoopPSG01:
000A99F9 7F                         	dc.b	$7F
000A99FA F700 08FF FB               	smpsLoop            $00, $08, GentleBreeze_LoopPSG01
000A99FF 08A8 01                    	dc.b	$08, nEb3, $01
000A9A02 F6FF E1                    	smpsJump            GentleBreeze_JumpPSG00
000A9A05                            
000A9A05                            GentleBreeze_Voices:
000A9A05                            ;	Voice $00
000A9A05                            ;	$0C
000A9A05                            ;	$2A, $70, $2A, $71, 	$1F, $1F, $1F, $1F, 	$0D, $04, $11, $0C
000A9A05                            ;	$00, $00, $00, $01, 	$F3, $F4, $F1, $89, 	$7F, $7F, $18, $00
000A9A05                            	smpsVcAlgorithm     $04
000A9A05                            	smpsVcFeedback      $01
000A9A05                            	smpsVcUnusedBits    $00
000A9A05                            	smpsVcDetune        $07, $02, $07, $02
000A9A05                            	smpsVcCoarseFreq    $01, $0A, $00, $0A
000A9A05                            	smpsVcRateScale     $00, $00, $00, $00
000A9A05                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000A9A05                            	smpsVcAmpMod        $00, $00, $00, $00
000A9A05                            	smpsVcDecayRate1    $0C, $11, $04, $0D
000A9A05                            	smpsVcDecayRate2    $01, $00, $00, $00
000A9A05                            	smpsVcDecayLevel    $08, $0F, $0F, $0F
000A9A05                            	smpsVcReleaseRate   $09, $01, $04, $03
000A9A05 0C2A 702A 711F 1F1F 1F0D+  	smpsVcTotalLevel    $00, $18, $7F, $7F
000A9A1E                            
000A9A1E                            ;	Voice $01
000A9A1E                            ;	$38
000A9A1E                            ;	$54, $17, $70, $30, 	$9F, $1F, $9F, $1F, 	$12, $02, $0A, $0A
000A9A1E                            ;	$00, $10, $00, $00, 	$05, $05, $05, $08, 	$21, $35, $10, $00
000A9A1E                            	smpsVcAlgorithm     $00
000A9A1E                            	smpsVcFeedback      $07
000A9A1E                            	smpsVcUnusedBits    $00
000A9A1E                            	smpsVcDetune        $03, $07, $01, $05
000A9A1E                            	smpsVcCoarseFreq    $00, $00, $07, $04
000A9A1E                            	smpsVcRateScale     $00, $02, $00, $02
000A9A1E                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000A9A1E                            	smpsVcAmpMod        $00, $00, $00, $00
000A9A1E                            	smpsVcDecayRate1    $0A, $0A, $02, $12
000A9A1E                            	smpsVcDecayRate2    $00, $00, $10, $00
000A9A1E                            	smpsVcDecayLevel    $00, $00, $00, $00
000A9A1E                            	smpsVcReleaseRate   $08, $05, $05, $05
000A9A1E 3854 1770 309F 1F9F 1F12+  	smpsVcTotalLevel    $00, $10, $35, $21
000A9A37                            
000A9A37                            ;	Voice $02
000A9A37                            ;	$00
000A9A37                            ;	$00, $00, $00, $00, 	$00, $00, $00, $00, 	$00, $00, $00, $00
000A9A37                            ;	$00, $00, $00, $00, 	$FF, $FF, $FF, $FF, 	$00, $00, $00, $00
000A9A37                            	smpsVcAlgorithm     $00
000A9A37                            	smpsVcFeedback      $00
000A9A37                            	smpsVcUnusedBits    $00
000A9A37                            	smpsVcDetune        $00, $00, $00, $00
000A9A37                            	smpsVcCoarseFreq    $00, $00, $00, $00
000A9A37                            	smpsVcRateScale     $00, $00, $00, $00
000A9A37                            	smpsVcAttackRate    $00, $00, $00, $00
000A9A37                            	smpsVcAmpMod        $00, $00, $00, $00
000A9A37                            	smpsVcDecayRate1    $00, $00, $00, $00
000A9A37                            	smpsVcDecayRate2    $00, $00, $00, $00
000A9A37                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000A9A37                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000A9A37 0000 0000 0000 0000 0000+  	smpsVcTotalLevel    $00, $00, $00, $00
000A9A50                            
000A9A50                            ;	Voice $03
000A9A50                            ;	$36
000A9A50                            ;	$0F, $0F, $08, $09, 	$16, $18, $00, $1F, 	$0F, $16, $0C, $0B
000A9A50                            ;	$00, $12, $00, $00, 	$06, $2F, $4F, $4F, 	$00, $00, $65, $53
000A9A50                            	smpsVcAlgorithm     $06
000A9A50                            	smpsVcFeedback      $06
000A9A50                            	smpsVcUnusedBits    $00
000A9A50                            	smpsVcDetune        $00, $00, $00, $00
000A9A50                            	smpsVcCoarseFreq    $09, $08, $0F, $0F
000A9A50                            	smpsVcRateScale     $00, $00, $00, $00
000A9A50                            	smpsVcAttackRate    $1F, $00, $18, $16
000A9A50                            	smpsVcAmpMod        $00, $00, $00, $00
000A9A50                            	smpsVcDecayRate1    $0B, $0C, $16, $0F
000A9A50                            	smpsVcDecayRate2    $00, $00, $12, $00
000A9A50                            	smpsVcDecayLevel    $04, $04, $02, $00
000A9A50                            	smpsVcReleaseRate   $0F, $0F, $0F, $06
000A9A50 360F 0F08 0916 1800 1F0F+  	smpsVcTotalLevel    $53, $65, $00, $00
000A9A69                            
000A9A69                            ;	Voice $04
000A9A69                            ;	$07
000A9A69                            ;	$05, $53, $64, $75, 	$5C, $5C, $5C, $1C, 	$17, $17, $17, $17
000A9A69                            ;	$00, $00, $00, $00, 	$26, $26, $26, $26, 	$00, $00, $00, $00
000A9A69                            	smpsVcAlgorithm     $07
000A9A69                            	smpsVcFeedback      $00
000A9A69                            	smpsVcUnusedBits    $00
000A9A69                            	smpsVcDetune        $07, $06, $05, $00
000A9A69                            	smpsVcCoarseFreq    $05, $04, $03, $05
000A9A69                            	smpsVcRateScale     $00, $01, $01, $01
000A9A69                            	smpsVcAttackRate    $1C, $1C, $1C, $1C
000A9A69                            	smpsVcAmpMod        $00, $00, $00, $00
000A9A69                            	smpsVcDecayRate1    $17, $17, $17, $17
000A9A69                            	smpsVcDecayRate2    $00, $00, $00, $00
000A9A69                            	smpsVcDecayLevel    $02, $02, $02, $02
000A9A69                            	smpsVcReleaseRate   $06, $06, $06, $06
000A9A69 0705 5364 755C 5C5C 1C17+  	smpsVcTotalLevel    $00, $00, $00, $00
000A9A82                            
000A9A82                            ;	Voice $05
000A9A82                            ;	$3C
000A9A82                            ;	$21, $21, $63, $61, 	$13, $10, $14, $0E, 	$09, $0B, $0B, $10
000A9A82                            ;	$04, $04, $04, $04, 	$17, $17, $17, $27, 	$1C, $02, $1B, $00
000A9A82                            	smpsVcAlgorithm     $04
000A9A82                            	smpsVcFeedback      $07
000A9A82                            	smpsVcUnusedBits    $00
000A9A82                            	smpsVcDetune        $06, $06, $02, $02
000A9A82                            	smpsVcCoarseFreq    $01, $03, $01, $01
000A9A82                            	smpsVcRateScale     $00, $00, $00, $00
000A9A82                            	smpsVcAttackRate    $0E, $14, $10, $13
000A9A82                            	smpsVcAmpMod        $00, $00, $00, $00
000A9A82                            	smpsVcDecayRate1    $10, $0B, $0B, $09
000A9A82                            	smpsVcDecayRate2    $04, $04, $04, $04
000A9A82                            	smpsVcDecayLevel    $02, $01, $01, $01
000A9A82                            	smpsVcReleaseRate   $07, $07, $07, $07
000A9A82 3C21 2163 6113 1014 0E09+  	smpsVcTotalLevel    $00, $1B, $02, $1C
000A9A9B                            
000A9A9B                            
000A9A9C 00                         		even
000A9A9C                            ; ---------------------------------------------------------------------------
000A9A9C                            ; Sound	effect pointers
000A9A9C                            ; ---------------------------------------------------------------------------
000A9A9C 0000 0000 0000 0000 0000+  SoundIndex:	dc.l SoundA0, SoundA1, SoundA2
000A9AA8 0000 0000 0000 0000 0000+  		dc.l SoundA3, SoundA4, SoundA5
000A9AB4 0000 0000 0000 0000 0000+  		dc.l SoundA6, SoundA7, SoundA8
000A9AC0 0000 0000 0000 0000 0000+  		dc.l SoundA9, SoundAA, SoundAB
000A9ACC 0000 0000 0000 0000 0000+  		dc.l SoundAC, SoundAD, SoundAE
000A9AD8 0000 0000 0000 0000 0000+  		dc.l SoundAF, SoundB0, SoundB1
000A9AE4 0000 0000 0000 0000 0000+  		dc.l SoundB2, SoundB3, SoundB4
000A9AF0 0000 0000 0000 0000 0000+  		dc.l SoundB5, SoundB6, SoundB7
000A9AFC 0000 0000 0000 0000 0000+  		dc.l SoundB8, SoundB9, SoundBA
000A9B08 0000 0000 0000 0000 0000+  		dc.l SoundBB, SoundBC, SoundBD
000A9B14 0000 0000 0000 0000 0000+  		dc.l SoundBE, SoundBF, SoundC0
000A9B20 0000 0000 0000 0000 0000+  		dc.l SoundC1, SoundC2, SoundC3
000A9B2C 0000 0000 0000 0000 0000+  		dc.l SoundC4, SoundC5, SoundC6
000A9B38 0000 0000 0000 0000 0000+  		dc.l SoundC7, SoundC8, SoundC9
000A9B44 0000 0000 0000 0000 0000+  		dc.l SoundCA, SoundCB, SoundCC
000A9B50 0000 0000 0000 0000 0000+  		dc.l SoundCD, SoundCE, SoundCF
000A9B5C 0000 0000                  SoundD0Index:	dc.l SoundD0
000A9B60                            SoundA0:	include	sound\jump.asm
000A9B60                            jump_Header:
000A9B60 =00000001                  smpsHeaderStartSong = 1
000A9B60 0000                       	smpsHeaderVoice     jump_Voices
000A9B62 01                         	smpsHeaderTempoSFX  $01
000A9B63 01                         	smpsHeaderChanSFX   $01
000A9B64                            
000A9B70                            
000A9B70                            ; FM4 Data
000A9B70                            jump_FM4:
000A9B72 E000                       	smpsPan             panNone, $00
000A9B74 E607                       	smpsAlterVol        $07
000A9B76 E0C0                       	smpsPan             panCenter, $00
000A9B78 9903 B1                    	dc.b	nC2, $03, nC4
000A9B7B E607                       	smpsAlterVol        $07
000A9B7D E040                       	smpsPan             panRight, $00
000A9B7F 99B1                       	dc.b	nC2, nC4
000A9B81 E60A                       	smpsAlterVol        $0A
000A9B83 E080                       	smpsPan             panLeft, $00
000A9B85 99B1                       	dc.b	nC2, nC4
000A9B87 E603                       	smpsAlterVol        $03
000A9B89 E0C0                       	smpsPan             panCenter, $00
000A9B8B 99B1                       	dc.b	nC2, nC4
000A9B8D E000                       	smpsPan             panNone, $00
000A9B8F 803D                       	dc.b	nRst, $3D
000A9B91 F2                         	smpsStop
000A9B92                            
000A9B92                            ; PSG3 Data
000A9B92                            jump_PSG3:
000A9B92 F3E7                       	smpsPSGform         $E7
000A9B94 8056                       	dc.b	nRst, $56
000A9B96 F2                         	smpsStop
000A9B97                            
000A9B97                            jump_Voices:
000A9B97                            ;	Voice $00
000A9B97                            ;	$3C
000A9B97                            ;	$00, $0F, $01, $00, 	$1F, $1F, $1F, $1F, 	$00, $12, $14, $0E
000A9B97                            ;	$00, $11, $00, $11, 	$0F, $EF, $FF, $0F, 	$00, $00, $00, $00
000A9B97                            	smpsVcAlgorithm     $04
000A9B97                            	smpsVcFeedback      $07
000A9B97                            	smpsVcUnusedBits    $00
000A9B97                            	smpsVcDetune        $00, $00, $00, $00
000A9B97                            	smpsVcCoarseFreq    $00, $01, $0F, $00
000A9B97                            	smpsVcRateScale     $00, $00, $00, $00
000A9B97                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000A9B97                            	smpsVcAmpMod        $00, $00, $00, $00
000A9B97                            	smpsVcDecayRate1    $0E, $14, $12, $00
000A9B97                            	smpsVcDecayRate2    $11, $00, $11, $00
000A9B97                            	smpsVcDecayLevel    $00, $0F, $0E, $00
000A9B97                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000A9B97 3C00 0F01 001F 1F1F 1F00+  	smpsVcTotalLevel    $00, $00, $00, $00
000A9BB0                            
000A9BB0                            
000A9BB0                            		even
000A9BB0                            SoundA1:	incbin	sound\soundA1.bin
000A9BDA                            		even
000A9BDA                            SoundA2:	incbin	sound\soundA2.bin
000A9BFA                            		even
000A9BFA                            SoundA3:	incbin	sound\soundA3.bin
000A9C2C                            		even
000A9C2C                            SoundA4:	incbin	sound\soundA4.bin
000A9C62                            		even
000A9C62                            SoundA5:	include	sound\fart.asm
000A9C62                            Fart_Header:
000A9C62 =00000001                  smpsHeaderStartSong = 1
000A9C62 0000                       	smpsHeaderVoice     Fart_Voices
000A9C64 01                         	smpsHeaderTempoSFX  $01
000A9C65 04                         	smpsHeaderChanSFX   $04
000A9C66                            
000A9C7E                            
000A9C7E                            Fart_FM3:
000A9C80 E607                       	smpsAlterVol        $07
000A9C82 E0C0                       	smpsPan             panCenter, $00
000A9C84 F000 0210 03               	smpsModSet          $00, $02, $10, $03
000A9C89 A003 E7                    	dc.b	nG2, $03, smpsNoAttack
000A9C8C E1FE                       	smpsAlterNote       $FE
000A9C8E A201 E7                    	dc.b	nA2, $01, smpsNoAttack
000A9C91 E100                       	smpsAlterNote       $00
000A9C93 A211 807F 2C               	dc.b	nA2, $11, nRst, $7F, $2C
000A9C98 F2                         	smpsStop
000A9C99                            
000A9C99                            ; FM4 Data
000A9C99                            Fart_FM4:
000A9C9B E0C0                       	smpsPan             panCenter, $00
000A9C9D 8006                       	dc.b	nRst, $06
000A9CA1 E616                       	smpsAlterVol        $16
000A9CA3 E080                       	smpsPan             panLeft, $00
000A9CA5 F000 0210 03               	smpsModSet          $00, $02, $10, $03
000A9CAA A212                       	dc.b	nA2, $12
000A9CAC E60A                       	smpsAlterVol        $0A
000A9CAE E7A2 0C                    	dc.b	smpsNoAttack, nA2, $0C
000A9CB1 E603                       	smpsAlterVol        $03
000A9CB3 E7A2                       	dc.b	smpsNoAttack, nA2
000A9CB5 E603                       	smpsAlterVol        $03
000A9CB7 E7A2                       	dc.b	smpsNoAttack, nA2
000A9CB9 E604                       	smpsAlterVol        $04
000A9CBB E7A2                       	dc.b	smpsNoAttack, nA2
000A9CBD E606                       	smpsAlterVol        $06
000A9CBF E7A2 18                    	dc.b	smpsNoAttack, nA2, $18
000A9CC2 E610                       	smpsAlterVol        $10
000A9CC4 E7A2 0C                    	dc.b	smpsNoAttack, nA2, $0C
000A9CC7 E610                       	smpsAlterVol        $10
000A9CC9 E7A2 1280 42               	dc.b	smpsNoAttack, nA2, $12, nRst, $42
000A9CCE F2                         	smpsStop
000A9CCF                            
000A9CCF                            ; FM5 Data
000A9CCF                            Fart_FM5:
000A9CD1 E0C0                       	smpsPan             panCenter, $00
000A9CD3 8009                       	dc.b	nRst, $09
000A9CD7 E616                       	smpsAlterVol        $16
000A9CD9 E040                       	smpsPan             panRight, $00
000A9CDB F000 0210 03               	smpsModSet          $00, $02, $10, $03
000A9CE0 A215                       	dc.b	nA2, $15
000A9CE2 E60A                       	smpsAlterVol        $0A
000A9CE4 E7A2 0C                    	dc.b	smpsNoAttack, nA2, $0C
000A9CE7 E603                       	smpsAlterVol        $03
000A9CE9 E7A2                       	dc.b	smpsNoAttack, nA2
000A9CEB E603                       	smpsAlterVol        $03
000A9CED E7A2                       	dc.b	smpsNoAttack, nA2
000A9CEF E604                       	smpsAlterVol        $04
000A9CF1 E7A2                       	dc.b	smpsNoAttack, nA2
000A9CF3 E606                       	smpsAlterVol        $06
000A9CF5 E7A2 15                    	dc.b	smpsNoAttack, nA2, $15
000A9CF8 E610                       	smpsAlterVol        $10
000A9CFA E7A2 0C                    	dc.b	smpsNoAttack, nA2, $0C
000A9CFD E610                       	smpsAlterVol        $10
000A9CFF E7A2 1280 3F               	dc.b	smpsNoAttack, nA2, $12, nRst, $3F
000A9D04 F2                         	smpsStop
000A9D05                            
000A9D05                            ; PSG3 Data
000A9D05                            Fart_PSG3:
000A9D05 F2                         	smpsStop
000A9D06                            
000A9D06                            ; FM Voices
000A9D06                            Fart_Voices:
000A9D06                            ;	Voice $00
000A9D06                            ;	$39
000A9D06                            ;	$70, $32, $71, $01, 	$DF, $DF, $DF, $1F, 	$04, $00, $00, $00
000A9D06                            ;	$1F, $16, $00, $00, 	$E0, $00, $09, $FA, 	$12, $00, $00, $00
000A9D06                            	smpsVcAlgorithm     $01
000A9D06                            	smpsVcFeedback      $07
000A9D06                            	smpsVcUnusedBits    $00
000A9D06                            	smpsVcDetune        $00, $07, $03, $07
000A9D06                            	smpsVcCoarseFreq    $01, $01, $02, $00
000A9D06                            	smpsVcRateScale     $00, $03, $03, $03
000A9D06                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000A9D06                            	smpsVcAmpMod        $00, $00, $00, $00
000A9D06                            	smpsVcDecayRate1    $00, $00, $00, $04
000A9D06                            	smpsVcDecayRate2    $00, $00, $16, $1F
000A9D06                            	smpsVcDecayLevel    $0F, $00, $00, $0E
000A9D06                            	smpsVcReleaseRate   $0A, $09, $00, $00
000A9D06 3970 3271 01DF DFDF 1F04+  	smpsVcTotalLevel    $00, $00, $00, $12
000A9D1F                            
000A9D1F                            ;	Voice $01
000A9D1F                            ;	$00
000A9D1F                            ;	$00, $00, $00, $00, 	$00, $00, $00, $00, 	$00, $00, $00, $00
000A9D1F                            ;	$00, $00, $00, $00, 	$FF, $FF, $FF, $FF, 	$00, $00, $00, $00
000A9D1F                            	smpsVcAlgorithm     $00
000A9D1F                            	smpsVcFeedback      $00
000A9D1F                            	smpsVcUnusedBits    $00
000A9D1F                            	smpsVcDetune        $00, $00, $00, $00
000A9D1F                            	smpsVcCoarseFreq    $00, $00, $00, $00
000A9D1F                            	smpsVcRateScale     $00, $00, $00, $00
000A9D1F                            	smpsVcAttackRate    $00, $00, $00, $00
000A9D1F                            	smpsVcAmpMod        $00, $00, $00, $00
000A9D1F                            	smpsVcDecayRate1    $00, $00, $00, $00
000A9D1F                            	smpsVcDecayRate2    $00, $00, $00, $00
000A9D1F                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000A9D1F                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000A9D1F 0000 0000 0000 0000 0000+  	smpsVcTotalLevel    $00, $00, $00, $00
000A9D1F 0000 0000 0000 0000 0000+  	smpsVcTotalLevel    $00, $00, $00, $00
000A9D38                            		even
000A9D38                            SoundA6:	incbin	sound\soundA6.bin
000A9D68                            		even
000A9D68                            SoundA7:	incbin	sound\soundA7.bin
000A9D98                            		even
000A9D98                            SoundA8:	incbin	sound\soundA8.bin
000A9DCC                            		even
000A9DCC                            SoundA9:	incbin	sound\soundA9.bin
000A9DDE                            		even
000A9DDE                            SoundAA:	incbin	sound\soundAA.bin
000A9E20                            		even
000A9E20                            SoundAB:	incbin	sound\soundAB.bin
000A9E40                            		even
000A9E40                            SoundAC:	incbin	sound\soundAC.bin
000A9E74                            		even
000A9E74                            SoundAD:	incbin	sound\soundAD.bin
000A9EAA                            		even
000A9EAA                            SoundAE:	incbin	sound\soundAE.bin
000A9EF4                            		even
000A9EF4                            SoundAF:	incbin	sound\soundAF.bin
000A9F22                            		even
000A9F22                            SoundB0:	incbin	sound\soundB0.bin
000A9F54                            		even
000A9F54                            SoundB1:	incbin	sound\soundB1.bin
000A9F80                            		even
000A9F80                            SoundB2:	incbin	sound\soundB2.bin
000A9FD0                            		even
000A9FD0                            SoundB3:	incbin	sound\soundB3.bin
000AA01A                            		even
000AA01A                            SoundB4:	include	sound\soundB4.asm
000AA01A                            SndB4_Bumper_Header:
000AA01A =00000001                  smpsHeaderStartSong = 1
000AA01A 0000                       	smpsHeaderVoice     SndB4_Bumper_Voices
000AA01C 01                         	smpsHeaderTempoSFX  $01
000AA01D 03                         	smpsHeaderChanSFX   $03
000AA01E                            
000AA030                            
000AA030                            ; FM5 Data
000AA030                            SndB4_Bumper_FM5:
000AA032 F600 00                    	smpsJump            SndB4_Bumper_Jump00
000AA035                            
000AA035                            ; FM4 Data
000AA035                            SndB4_Bumper_FM4:
000AA035 F2                         	smpsStop
000AA036                            
000AA036                            SndB4_Bumper_Jump00:
000AA036 A020                       	dc.b	nG2, $20
000AA038 F2                         	smpsStop
000AA039                            
000AA039                            ; FM3 Data
000AA039                            SndB4_Bumper_FM3:
000AA039 F2                         	smpsStop
000AA03A                            
000AA03A                            SndB4_Bumper_Voices:
000AA03A                            ;	Voice $00
000AA03A                            ;	$32
000AA03A                            ;	$04, $20, $70, $70, 	$1F, $1F, $1F, $1F, 	$09, $00, $00, $08
000AA03A                            ;	$09, $00, $00, $0B, 	$00, $00, $00, $0F, 	$0C, $00, $30, $00
000AA03A                            	smpsVcAlgorithm     $02
000AA03A                            	smpsVcFeedback      $06
000AA03A                            	smpsVcUnusedBits    $00
000AA03A                            	smpsVcDetune        $07, $07, $02, $00
000AA03A                            	smpsVcCoarseFreq    $00, $00, $00, $04
000AA03A                            	smpsVcRateScale     $00, $00, $00, $00
000AA03A                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000AA03A                            	smpsVcAmpMod        $00, $00, $00, $00
000AA03A                            	smpsVcDecayRate1    $08, $00, $00, $09
000AA03A                            	smpsVcDecayRate2    $0B, $00, $00, $09
000AA03A                            	smpsVcDecayLevel    $00, $00, $00, $00
000AA03A                            	smpsVcReleaseRate   $0F, $00, $00, $00
000AA03A 3204 2070 701F 1F1F 1F09+  	smpsVcTotalLevel    $00, $30, $00, $0C
000AA03A 3204 2070 701F 1F1F 1F09+  	smpsVcTotalLevel    $00, $30, $00, $0C
000AA054 00                         		even
000AA054                            SoundB5:	incbin	sound\soundB5.bin
000AA072 00                         		even
000AA072                            SoundB6:	incbin	sound\soundB6.bin
000AA090                            		even
000AA090                            SoundB7:	incbin	sound\soundB7.bin
000AA0CC                            		even
000AA0CC                            SoundB8:	incbin	sound\soundB8.bin
000AA0EA                            		even
000AA0EA                            SoundB9:	incbin	sound\soundB9.bin
000AA14E                            		even
000AA14E                            SoundBA:	incbin	sound\soundBA.bin
000AA176                            		even
000AA176                            SoundBB:	incbin	sound\soundBB.bin
000AA1A2                            		even
000AA1A2                            SoundBC:	incbin	sound\soundBC.bin
000AA1E4                            		even
000AA1E4                            SoundBD:	incbin	sound\soundBD.bin
000AA238                            		even
000AA238                            SoundBE:	incbin	sound\soundBE.bin
000AA272                            		even
000AA272                            SoundBF:	incbin	sound\soundBF.bin
000AA2E4                            		even
000AA2E4                            SoundC0:	incbin	sound\soundC0.bin
000AA312                            		even
000AA312                            SoundC1:	incbin	sound\soundC1.bin
000AA36C                            		even
000AA36C                            SoundC2:	incbin	sound\soundC2.bin
000AA396                            		even
000AA396                            SoundC3:	incbin	sound\soundC3.bin
000AA410                            		even
000AA410                            SoundC4:	incbin	sound\soundC4.bin
000AA50E                            		even
000AA50E                            SoundC5:	incbin	sound\soundC5.bin
000AA576                            		even
000AA576                            SoundC6:	incbin	sound\soundC6.bin
000AA5B8                            		even
000AA5B8                            SoundC7:	incbin	sound\soundC7.bin
000AA5E6                            		even
000AA5E6                            SoundC8:	incbin	sound\soundC8.bin
000AA5F8                            		even
000AA5F8                            SoundC9:	incbin	sound\soundC9.bin
000AA626                            		even
000AA626                            SoundCA:	incbin	sound\soundCA.bin
000AA654                            		even
000AA654                            SoundCB:	incbin	sound\soundCB.bin
000AA6A0                            		even
000AA6A0                            SoundCC:	incbin	sound\C9.ssf
000AA6CE                            		even
000AA6CE                            SoundCD:	incbin	sound\soundCD.bin
000AA6FA                            		even
000AA6FA                            SoundCE:	incbin	sound\soundCE.bin
000AA718 00                         		even
000AA718                            SoundCF:	incbin	sound\soundCF.bin
000AA750                            		even
000AA750                            SoundD0:	incbin	sound\soundD0.bin
000AA78A                            		even
000AA78A                            SegaPCM:	incbin	sound\segapcm.bin
000C48E0                            SegaPCM_end:	even
000C48E0                            
000C48E0                            IdiotPCM:	incbin	sound\youare.bin
000CE9B2 00                         IdiotPCM_end:	even
000CE9B2                            
000CE9B2                            Minecraft:	include	minecraft\code\main.asm
000CE9B2                            ; Minecraft: Very Legacy Console Edition
000CE9B2                            ; Main file
000CE9B2                            
000CE9B2                            ;	align	$20000
000CE9B2                            	opt	l.
000CE9B2                            	include	"minecraft\code\variables.asm"
000CE9B2                            ; Minecraft: Very Legacy Console Edition
000CE9B2                            ; Variable Definitions
000CE9B2                            
000CE9B2 =00000040                  MAP_HEIGHT	equ	64
000CE9B2 =00000100                  MAP_WIDTH	equ	256
000CE9B2                            
000CE9B2                            		rsset	$FF0000
000CE9B2 =00FF0000                  mcRAM		rs.b	0
000CE9B2 =00FF0000                  mapWallBlocks	rs.b	MAP_HEIGHT*MAP_WIDTH	; wall layer layout data
000CE9B2 =00FF4000                  mapCollBlocks	rs.b	MAP_HEIGHT*MAP_WIDTH	; collision layer layout data
000CE9B2                            
000CE9B2                            		rsset	$FFFF8000
000CE9B2 =FFFF8000                  planeBuffer	rs.w	29*64			; foreground plane buffer
000CE9B2 =FFFF8E80                  planeBuffer_End	rs.b	0
000CE9B2 =00000E80                  PLANE_BUFF_SIZE	equ	planeBuffer_End-planeBuffer
000CE9B2                            
000CE9B2 =FFFF8E80                  camXPosFG	rs.w	1			; camera foreground layout x position
000CE9B2 =FFFF8E82                  camYposFG	rs.w	1			; camera foreground layout y position
000CE9B2 =FFFF8E84                  camXPosBG	rs.w	1			; camera background layout x position
000CE9B2 =FFFF8E86                  camYposBG	rs.w	1			; camera background layout y position
000CE9B2                            
000CE9B2                            		rsset	__rs&$FFFFFF
000CE9B2 =00FF8E88                  mcRAM_End	rs.b	0
000CE9B2 =00FF8E88                  mcRAM_End	rs.b	0
000CE9B2                            	include	"minecraft\code\macros.asm"
000CE9B2                            ; =========================================================================================================================================================
000CE9B2                            ; MegaDrive macros
000CE9B2                            ; =========================================================================================================================================================
000CE9B2                            clrRAM		macro	starta, enda
000CE9B2                            		local	endaddr
000CE9B2                            		if narg<2
000CE9B2                            endaddr			EQUS	"\starta\_End"
000CE9B2                            		else
000CE9B2                            endaddr			EQUS	"\enda"
000CE9B2                            		endif
000CE9B2                            
000CE9B2                            		moveq	#0,d0
000CE9B2                            
000CE9B2                            		if ((\starta)&$8000)=0
000CE9B2                            			lea	\starta,a1
000CE9B2                            		else
000CE9B2                            			lea	(\starta).w,a1
000CE9B2                            		endif
000CE9B2                            		if (\starta)&1
000CE9B2                            			move.b	d0,(a1)+
000CE9B2                            		endif
000CE9B2                            
000CE9B2                            		move.w	#(((\endaddr)-(\starta))-((\starta)&1))>>2-1,d1
000CE9B2                            .Clear\@:	move.l	d0,(a1)+
000CE9B2                            		dbf	d1,.Clear\@
000CE9B2                            
000CE9B2                            		if (((\endaddr)-(\starta))-((\starta)&1))&2
000CE9B2                            			move.w	d0,(a1)+
000CE9B2                            		endif
000CE9B2                            		if (((\endaddr)-(\starta))-((\starta)&1))&1
000CE9B2                            			move.b	d0,(a1)+
000CE9B2                            		endif
000CE9B2                            		endm
000CE9B2                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CE9B2                            ; Disable interrupts
000CE9B2                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CE9B2                            ; ARGUMENTS:
000CE9B2                            ;	Nothing
000CE9B2                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CE9B2                            ; RETURNS:
000CE9B2                            ;	Nothing
000CE9B2                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CE9B2                            intsOff		macros
000CE9B2                            		ori	#$700,sr
000CE9B2                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CE9B2                            ; Enable interrupts
000CE9B2                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CE9B2                            ; ARGUMENTS:
000CE9B2                            ;	Nothing
000CE9B2                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CE9B2                            ; RETURNS:
000CE9B2                            ;	Nothing
000CE9B2                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CE9B2                            intsOn		macros
000CE9B2                            		andi	#$F8FF,sr
000CE9B2                            
000CE9B2                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CE9B2                            ; VDP command instruction
000CE9B2                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CE9B2                            ; ARGUMENTS:
000CE9B2                            ;	addr	- Address in VDP memory
000CE9B2                            ;	type	- Type of VDP memory
000CE9B2                            ;	rwd	- VDP command
000CE9B2                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CE9B2                            ; RETURNS:
000CE9B2                            ;	Nothing
000CE9B2                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CE9B2 =00000021                  VRAM		EQU	%100001		; VRAM
000CE9B2 =0000002B                  CRAM		EQU	%101011		; CRAM
000CE9B2 =00000025                  VSRAM		EQU	%100101		; VSRAM
000CE9B2 =0000000C                  READ		EQU	%001100		; VDP read
000CE9B2 =00000007                  WRITE		EQU	%000111		; VDP write
000CE9B2 =00000027                  DMA		EQU	%100111		; VDP DMA
000CE9B2                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CE9B2                            vdpCmd		macro	ins, addr, type, rwd, end, end2
000CE9B2                            		if narg=5
000CE9B2                            			\ins	#((((\type&\rwd)&3)<<30)|((\addr&$3FFF)<<16)|(((\type&\rwd)&$FC)<<2)|((\addr&$C000)>>14)), \end
000CE9B2                            		elseif narg>=6
000CE9B2                            			\ins	#((((\type&\rwd)&3)<<30)|((\addr&$3FFF)<<16)|(((\type&\rwd)&$FC)<<2)|((\addr&$C000)>>14))\end, \end2
000CE9B2                            		else
000CE9B2                            			\ins	((((\type&\rwd)&3)<<30)|((\addr&$3FFF)<<16)|(((\type&\rwd)&$FC)<<2)|((\addr&$C000)>>14))
000CE9B2                            		endif
000CE9B2                            		endm
000CE9B2                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CE9B2                            ; VDP DMA from 68000 memory to VDP memory
000CE9B2                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CE9B2                            ; ARGUMENTS:
000CE9B2                            ;	src	- Source address in 68000 memory
000CE9B2                            ;	dest	- Destination address in VDP memory
000CE9B2                            ;	len	- Length of data in bytes
000CE9B2                            ;	type	- Type of VDP memory
000CE9B2                            ;	a6.l	- VDP control port
000CE9B2                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CE9B2                            ; RETURNS:
000CE9B2                            ;	Nothing
000CE9B2                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CE9B2                            dma68k		macro	src, dest, len, type
000CE9B2                            		move.l	#$94009300|((((\len)/2)&$FF00)<<8)|(((\len)/2)&$FF),(a6)
000CE9B2                            		move.l	#$96009500|((((\src)/2)&$FF00)<<8)|(((\src)/2)&$FF),(a6)
000CE9B2                            		move.w	#$9700|(((\src)>>17)&$7F),(a6)
000CE9B2                            		vdpCmd	move.w, \dest, \type, DMA, >>16, (a6)
000CE9B2                            		vdpCmd	move.w, \dest, \type, DMA, &$FFFF, -(sp)
000CE9B2                            		move.w	(sp)+,(a6)
000CE9B2                            		endm
000CE9B2                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CE9B2                            ; Fill VRAM with byte
000CE9B2                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CE9B2                            ; ARGUMENTS:
000CE9B2                            ;	byte	- Byte to fill VRAM with
000CE9B2                            ;	addr	- Address in VRAM
000CE9B2                            ;	len	- Length of fill in bytes
000CE9B2                            ;	a6.l	- VDP control port
000CE9B2                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CE9B2                            ; RETURNS:
000CE9B2                            ;	Nothing
000CE9B2                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CE9B2                            dmaFill		macro	byte, addr, len
000CE9B2                            		move.w	#$8F01,(a6)
000CE9B2                            		move.l	#$94009300|((((\len)-1)&$FF00)<<8)|(((\len)-1)&$FF),(a6)
000CE9B2                            		move.w	#$9780,(a6)
000CE9B2                            		move.l	#$40000080|(((\addr)&$3FFF)<<16)|(((\addr)&$C000)>>14),(a6)
000CE9B2                            		move.w	#(\byte)<<8,-4(a6)
000CE9B2                            		waitDMA	(a6)
000CE9B2                            		move.w	#$8F02,(a6)
000CE9B2                            		endm
000CE9B2                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CE9B2                            ; Copy a region of VRAM to a location in VRAM
000CE9B2                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CE9B2                            ; ARGUMENTS:
000CE9B2                            ;	src	- Source address in VRAM
000CE9B2                            ;	dest	- Destination address in VRAM
000CE9B2                            ;	len	- Length of copy in bytes
000CE9B2                            ;	a6.l	- VDP control port
000CE9B2                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CE9B2                            ; RETURNS:
000CE9B2                            ;	Nothing
000CE9B2                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000CE9B2                            dmaCopy		macro	src, dest, len
000CE9B2                            		move.w	#$8F01,(a6)
000CE9B2                            		move.l	#$94009300|((((\len)-1)&$FF00)<<8)|(((\len)-1)&$FF),(a6)
000CE9B2                            		move.l	#$96009500|(((\src)&$FF00)<<8)|((\src)&$FF),(a6)
000CE9B2                            		move.w	#$97C0,(a6)
000CE9B2                            		move.l	#$000000C0|(((\dest)&$3FFF)<<16)|(((\dest)&$C000)>>14),(a6)
000CE9B2                            		waitDMA	(a6)
000CE9B2                            		move.w	#$8F02,(a6)
000CE9B2                            		endm
000CE9B2                            		endm
000CE9B2                            
000CE9B2                            MC_Init:
000CE9B2 007C 0700                  		intsOff						; disable CPU interrupts
000CE9B6 21FC 0000 0000 FFC6        		move.l	#MC_VInt,(vBlankAdress).w
000CE9BE                            
000CE9BE 4DF9 00C0 0004             		lea	($C00004).l,a6				; load the address of the VDP control port into a6
000CE9C4 3CBC 8134                  		move.w	#$8134,(a6)				; disable display
000CE9C8                            
000CE9C8 3CBC 8230                  		move.w	#$8200+($C000>>10),(a6)			; set plane A address
000CE9CC 3CBC 8334                  		move.w	#$8300+($D000>>10),(a6)			; set plane W address
000CE9D0 3CBC 8407                  		move.w	#$8400+($E000>>13),(a6)			; set plane B address
000CE9D4 3CBC 857C                  		move.w	#$8500+($F800>>9),(a6)			; set sprite table address
000CE9D8                            		
000CE9D8 3CBC 8B00                  		move.w	#$8B00,(a6)				; EXT-INT off, VScroll by screen, HScroll by screen
000CE9DC 3CBC 8C89                  		move.w	#$8C89,(a6)				; set screen size and enable shadow/highlight mode
000CE9E0 3CBC 8D3F                  		move.w	#$8D00+($FC00>>10),(a6)			; set HScroll table address
000CE9E4 3CBC 8F02                  		move.w	#$8F02,(a6)				; set auto-incremement size to word
000CE9E8 3CBC 9001                  		move.w	#$9001,(a6)				; set plane size 64x32
000CE9EC                            
000CE9FE 6100 0000                  		bsr.w	MC_ClearScreen				; clear VRAM, CRAM, and VSRAM
000CEA02                            
000CEA02                            .waitVBlank:	
000CEA02 44D6                       		move.w	(a6),ccr				; is v-blank active?
000CEA04 6AFC                       		bpl.s	.waitVBlank				; if not, wait for it to start
000CEA06                            
000CEA3A                            
000CEA3A 3CBC 8174                  		move.w	#$8174,(a6)				; enable display
000CEA3E 027C F8FF                  		intsOn						; enable CPU interrupts
000CEA42                            
000CEA42 41FA 0000                  		lea	MC_BlockRender(pc),a0
000CEA46 43F8 8000                  		lea	(planeBuffer).w,a1
000CEA4A 7E2E                       		moveq	#$2F-1,d7
000CEA4C                            
000CEA4C                            .loopLo:
000CEA4C 32D8                       		move.w	(a0)+,(a1)+
000CEA4E 51CF FFFC                  		dbf	d7,.loopLo
000CEA52                            
000CEA52 41FA 0000                  		lea	MC_BlockRender(pc),a0
000CEA56 43F8 8080                  		lea	(planeBuffer+(64*2)).w,a1
000CEA5A 7E2E                       		moveq	#$2F-1,d7
000CEA5C                            
000CEA5C                            .loopHi:
000CEA5C 303C 8000                  		move.w	#$8000,d0
000CEA60 8058                       		or.w	(a0)+,d0
000CEA62 32C0                       		move.w	d0,(a1)+
000CEA64 51CF FFF6                  		dbf	d7,.loopHi
000CEA68                            
000CEA68 6000 FFFE                  		bra.w	*					; spin infinitely
000CEA6C                            
000CEA6C                            ; ===========================================================================
000CEA6C                            ; ---------------------------------------------------------------------------
000CEA6C                            ; Clear The Screen
000CEA6C                            ; ---------------------------------------------------------------------------
000CEA6C                            MC_ClearScreen:
000CEA6C 3CBC 8F01                  		move.w	#$8F01,(a6)				; set auto-incremement size to byte
000CEA70                            
000CEA70 2CBC 94FF 93FF             		move.l	#$94FF93FF,(a6)				; clear the VRAM
000CEA76 3CBC 9780                  		move.w	#$9780,(a6)				; ^
000CEA7A 2CBC 4000 0080             		move.l	#$40000080,(a6)				; ^
000CEA80 3D7C 0000 FFFC             		move.w	#0,-4(a6)				; ^
000CEA86                            
000CEA86 44D6                       .waitVRAMClr:	move.w	(a6),ccr				; is a DMA in progress?
000CEA88 69FC                       		bvs.s	.waitVRAMClr				; if so, loop until DMA is complete
000CEA8A                            
000CEA8A 2CBC 9400 937F             		move.l	#$9400937F,(a6)				; clear the CRAM
000CEA90 3CBC 9780                  		move.w	#$9780,(a6)				; ^
000CEA94 2CBC C000 0080             		move.l	#$C0000080,(a6)				; ^
000CEA9A 3D7C 0000 FFFC             		move.w	#0,-4(a6)				; ^
000CEAA0                            
000CEAA0 44D6                       .waitCRAMClr:	move.w	(a6),ccr				; is a DMA in progress?
000CEAA2 69FC                       		bvs.s	.waitCRAMClr				; if so, loop until DMA is complete
000CEAA4                            
000CEAA4 2CBC 9400 935F             		move.l	#$9400935F,(a6)				; clear the VSRAM
000CEAAA 3CBC 9780                  		move.w	#$9780,(a6)				; ^
000CEAAE 2CBC 4000 0090             		move.l	#$40000090,(a6)				; ^
000CEAB4 3D7C 0000 FFFC             		move.w	#0,-4(a6)				; ^
000CEABA                            
000CEABA 44D6                       .waitVSRAMClr:	move.w	(a6),ccr				; is a DMA in progress?
000CEABC 69FC                       		bvs.s	.waitVSRAMClr				; if so, loop until DMA is complete
000CEABE                            
000CEABE 3CBC 8F02                  		move.w	#$8F02,(a6)				; set auto-incremement size to word
000CEAC2 4E75                       		rts						; return
000CEAC4                            ; ---------------------------------------------------------------------------
000CEAC4                            
000CEAC4                            ; ===========================================================================
000CEAC4                            ; ---------------------------------------------------------------------------
000CEAC4                            ; VBlank Interrupt
000CEAC4                            ; ---------------------------------------------------------------------------
000CEAC4                            MC_VInt:
000CEADE                            
000CEADE 5278 8E80                  		addq.w	#1,(camXPosFG).w			; update scrolling
000CEAE8 3D78 8E80 FFFC             		move.w	(camXPosFG).w,-4(a6)			; ^
000CEAEE                            
000CEAEE                            
000CEAEE 4E73                       		rte						; return
000CEAF0                            ; ---------------------------------------------------------------------------
000CEAF0                            
000CEAF0                            block_entry	macro	tileID, palLine, priority
000CEAF0                            	if (narg<3)
000CEAF0                            		dc.w	(palLine<<13)|tileID
000CEAF0                            	else
000CEAF0                            		dc.w	$8000|(palLine<<13)|tileID
000CEAF0                            	endif
000CEAF0                            		endm
000CEAF0                            
000CEAF0                            MC_BlockRender:
000CEB30                            
000CEB4E                            
000CEB4E                            ; ---------------------------------------------------------------------------
000CEB4E                            MC_Palette:
000CEB4E 0E86 08AE 068E 046C 0EE0+  	dc.w	$E86, $8AE, $68E, $46C, $EE0, $CC0, $AA0, $E68, $C46, $824, $444, $222, $000, $EEE, $246, $024
000CEB6E 0000 0CCC 0AAA 0888 0666+  	dc.w	$000, $CCC, $AAA, $888, $666, $444, $222, $4E6, $2C4, $0A2, $080, $6AE, $48C, $26A, $048, $026
000CEB8E 0000 0EEE 0CCC 0AAA 04CE+  	dc.w	$000, $EEE, $CCC, $AAA, $4CE, $2AC, $08A, $E6C, $C4A, $A08, $44E, $22C, $00A, $EE0, $888, $666
000CEBAE 0EEE 0EEE 0EEE 0EEE 0EEE+  	dc.w	$EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE
000CEBCE                            ; ---------------------------------------------------------------------------
000CEBCE                            MC_Terrain:
000CEBCE                            	incbin	"minecraft\assets\bin\terrain.bin"
000CF04E                            MC_Terrain_End:
000CF04E                            ; ---------------------------------------------------------------------------
000CF04E                            ; ---------------------------------------------------------------------------
000CF04E                            ; end of 'ROM'
000CF04E                            EndOfRom:
000CF04E                            
000CF04E                            
